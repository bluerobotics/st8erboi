
Move2IncrementsHomeToSwitch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020f60  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00024f60  00024f60  00024f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  0002505c  0002505c  0002505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ab0  20000000  000251e4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018e4  20000ab0  00025ca0  00030ab0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a8fcf  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd3b  00000000  00000000  000d9b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f8  00000000  00000000  000e98b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007cc8  00000000  00000000  000eb0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f2d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001426c  00000000  00000000  001148ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f1963  00000000  00000000  00128b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000074d8  00000000  00000000  0021a4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000239e4  00000000  00000000  00221998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 25 9b 00 00 d1 42 00 00 d1 42 00 00     ... %....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	c1 99 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 95 98 00 00 a5 98 00 00 b5 98 00 00     .B..............
    407c:	c5 98 00 00 d5 98 00 00 e5 98 00 00 f5 98 00 00     ................
    408c:	05 99 00 00 15 99 00 00 25 99 00 00 35 99 00 00     ........%...5...
    409c:	45 99 00 00 55 99 00 00 61 99 00 00 71 99 00 00     E...U...a...q...
    40ac:	81 99 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 29 98 00 00 d1 42 00 00 35 98 00 00     .B..)....B..5...
    4104:	41 98 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     A....B...B...B..
    4114:	d1 42 00 00 4d 98 00 00 d1 42 00 00 59 98 00 00     .B..M....B..Y...
    4124:	65 98 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     e....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 71 98 00 00 d1 42 00 00 7d 98 00 00     .B..q....B..}...
    4174:	89 98 00 00 00 00 00 00 00 00 00 00 1d 31 01 00     .............1..
    4184:	21 31 01 00 25 31 01 00 29 31 01 00 1d 98 00 00     !1..%1..)1......
    4194:	15 9a 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	91 99 00 00 d1 42 00 00 d1 42 00 00 a9 99 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ab0 	.word	0x20000ab0
    4280:	00000000 	.word	0x00000000
    4284:	00024f5c 	.word	0x00024f5c

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00024f5c 	.word	0x00024f5c
    42c4:	20000ab4 	.word	0x20000ab4
    42c8:	20000aac 	.word	0x20000aac
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_Z20HomingSensorCallbackv>:
 * HomingSensorCallback
 *
 *    Reads the state of the homing sensor and passes the state to the motor.
 */
void HomingSensorCallback()
{
    42d4:	b508      	push	{r3, lr}
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    42d6:	2100      	movs	r1, #0
    42d8:	4806      	ldr	r0, [pc, #24]	; (42f4 <_Z20HomingSensorCallbackv+0x20>)
    42da:	f005 fe11 	bl	9f00 <Delay_cycles>
    // A 1 ms delay is required in order to pass the correct filtered sensor
    // state.
    Delay_ms(1);
    motor.MotorInBState(HomingSensor.State());
    42de:	4806      	ldr	r0, [pc, #24]	; (42f8 <_Z20HomingSensorCallbackv+0x24>)
    42e0:	f000 fabe 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    42e4:	1c01      	adds	r1, r0, #0
    42e6:	bf18      	it	ne
    42e8:	2101      	movne	r1, #1
    42ea:	4804      	ldr	r0, [pc, #16]	; (42fc <_Z20HomingSensorCallbackv+0x28>)
}
    42ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    motor.MotorInBState(HomingSensor.State());
    42f0:	f000 bfbc 	b.w	526c <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    42f4:	0001d4c0 	.word	0x0001d4c0
    42f8:	20001158 	.word	0x20001158
    42fc:	20000b68 	.word	0x20000b68

00004300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    4304:	f01a fd7c 	bl	1ee00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4308:	b168      	cbz	r0, 4326 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    430a:	4e0d      	ldr	r6, [pc, #52]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    430c:	1825      	adds	r5, r4, r0
    430e:	e001      	b.n	4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4310:	42a5      	cmp	r5, r4
    4312:	d008      	beq.n	4326 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x26>
            if (!SendChar(buffer[iChar])) {
    4314:	f814 1b01 	ldrb.w	r1, [r4], #1
    4318:	4630      	mov	r0, r6
    431a:	f001 ff99 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    431e:	2800      	cmp	r0, #0
    4320:	d1f6      	bne.n	4310 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x10>
        return Send(nullTermStr) && SendLine();
    }
    4322:	2000      	movs	r0, #0
    4324:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    4326:	210d      	movs	r1, #13
    4328:	4805      	ldr	r0, [pc, #20]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    432a:	f001 ff91 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    432e:	2800      	cmp	r0, #0
    4330:	d0f7      	beq.n	4322 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x22>
    4332:	210a      	movs	r1, #10
    4334:	4802      	ldr	r0, [pc, #8]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5+0x40>)
    }
    4336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    433a:	f001 bf89 	b.w	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    433e:	bf00      	nop
    4340:	20001488 	.word	0x20001488

00004344 <_Z14MoveIncrementsml.part.2>:
bool MoveIncrements(uint32_t numberOfIncrements, int32_t positionIncrement)
    4344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4348:	4c95      	ldr	r4, [pc, #596]	; (45a0 <_Z14MoveIncrementsml.part.2+0x25c>)
            if (!SendChar(buffer[iChar])) {
    434a:	4d96      	ldr	r5, [pc, #600]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    434c:	b08a      	sub	sp, #40	; 0x28
    434e:	4607      	mov	r7, r0
    4350:	460e      	mov	r6, r1
    4352:	f104 0807 	add.w	r8, r4, #7
    4356:	f814 1b01 	ldrb.w	r1, [r4], #1
    435a:	4628      	mov	r0, r5
    435c:	f001 ff78 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4360:	b108      	cbz	r0, 4366 <_Z14MoveIncrementsml.part.2+0x22>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4362:	4544      	cmp	r4, r8
    4364:	d1f7      	bne.n	4356 <_Z14MoveIncrementsml.part.2+0x12>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[1 + 8 * sizeof(number)];
        utoa(number, strRep, radix);
    4366:	a901      	add	r1, sp, #4
    4368:	220a      	movs	r2, #10
    436a:	4638      	mov	r0, r7
    436c:	f01c f89e 	bl	204ac <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4370:	a801      	add	r0, sp, #4
    4372:	f01a fd45 	bl	1ee00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4376:	b170      	cbz	r0, 4396 <_Z14MoveIncrementsml.part.2+0x52>
    4378:	ab01      	add	r3, sp, #4
            if (!SendChar(buffer[iChar])) {
    437a:	f8df 8228 	ldr.w	r8, [pc, #552]	; 45a4 <_Z14MoveIncrementsml.part.2+0x260>
    437e:	181d      	adds	r5, r3, r0
    4380:	461c      	mov	r4, r3
    4382:	e001      	b.n	4388 <_Z14MoveIncrementsml.part.2+0x44>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4384:	42ac      	cmp	r4, r5
    4386:	d006      	beq.n	4396 <_Z14MoveIncrementsml.part.2+0x52>
            if (!SendChar(buffer[iChar])) {
    4388:	f814 1b01 	ldrb.w	r1, [r4], #1
    438c:	4640      	mov	r0, r8
    438e:	f001 ff5f 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4392:	2800      	cmp	r0, #0
    4394:	d1f6      	bne.n	4384 <_Z14MoveIncrementsml.part.2+0x40>
    4396:	4c84      	ldr	r4, [pc, #528]	; (45a8 <_Z14MoveIncrementsml.part.2+0x264>)
    4398:	4d82      	ldr	r5, [pc, #520]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    439a:	f104 0803 	add.w	r8, r4, #3
    439e:	f814 1b01 	ldrb.w	r1, [r4], #1
    43a2:	4628      	mov	r0, r5
    43a4:	f001 ff54 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43a8:	b108      	cbz	r0, 43ae <_Z14MoveIncrementsml.part.2+0x6a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43aa:	45a0      	cmp	r8, r4
    43ac:	d1f7      	bne.n	439e <_Z14MoveIncrementsml.part.2+0x5a>
    switch (positionIncrement)
    43ae:	f516 7f7a 	cmn.w	r6, #1000	; 0x3e8
    43b2:	f000 80b1 	beq.w	4518 <_Z14MoveIncrementsml.part.2+0x1d4>
    43b6:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    43ba:	d162      	bne.n	4482 <_Z14MoveIncrementsml.part.2+0x13e>
        itoa(number, strRep, radix);
    43bc:	4630      	mov	r0, r6
    43be:	220a      	movs	r2, #10
    43c0:	a901      	add	r1, sp, #4
    43c2:	f019 fc73 	bl	1dcac <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    43c6:	a801      	add	r0, sp, #4
    43c8:	f01a fd1a 	bl	1ee00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43cc:	b160      	cbz	r0, 43e8 <_Z14MoveIncrementsml.part.2+0xa4>
    43ce:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    43d0:	4e74      	ldr	r6, [pc, #464]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    43d2:	1825      	adds	r5, r4, r0
    43d4:	e001      	b.n	43da <_Z14MoveIncrementsml.part.2+0x96>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43d6:	42a5      	cmp	r5, r4
    43d8:	d006      	beq.n	43e8 <_Z14MoveIncrementsml.part.2+0xa4>
            if (!SendChar(buffer[iChar])) {
    43da:	f814 1b01 	ldrb.w	r1, [r4], #1
    43de:	4630      	mov	r0, r6
    43e0:	f001 ff36 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43e4:	2800      	cmp	r0, #0
    43e6:	d1f6      	bne.n	43d6 <_Z14MoveIncrementsml.part.2+0x92>
        return SendChar('\r') && SendChar('\n');
    43e8:	210d      	movs	r1, #13
    43ea:	486e      	ldr	r0, [pc, #440]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    43ec:	f001 ff30 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43f0:	2800      	cmp	r0, #0
    43f2:	f040 80c0 	bne.w	4576 <_Z14MoveIncrementsml.part.2+0x232>
        motor.MotorInAState(false);
    43f6:	2100      	movs	r1, #0
    43f8:	486c      	ldr	r0, [pc, #432]	; (45ac <_Z14MoveIncrementsml.part.2+0x268>)
    43fa:	f000 ff1d 	bl	5238 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    43fe:	486c      	ldr	r0, [pc, #432]	; (45b0 <_Z14MoveIncrementsml.part.2+0x26c>)
    4400:	4c6c      	ldr	r4, [pc, #432]	; (45b4 <_Z14MoveIncrementsml.part.2+0x270>)
            if (!SendChar(buffer[iChar])) {
    4402:	4d68      	ldr	r5, [pc, #416]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4404:	2100      	movs	r1, #0
    4406:	f005 fd7b 	bl	9f00 <Delay_cycles>
    motor.EnableTriggerPulse(numberOfIncrements, TRIGGER_PULSE_TIME, true);
    440a:	b2b9      	uxth	r1, r7
    440c:	2301      	movs	r3, #1
    440e:	2219      	movs	r2, #25
    4410:	4866      	ldr	r0, [pc, #408]	; (45ac <_Z14MoveIncrementsml.part.2+0x268>)
    4412:	f000 ff43 	bl	529c <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb>
    4416:	f104 0619 	add.w	r6, r4, #25
    441a:	f814 1b01 	ldrb.w	r1, [r4], #1
    441e:	4628      	mov	r0, r5
    4420:	f001 ff16 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4424:	b140      	cbz	r0, 4438 <_Z14MoveIncrementsml.part.2+0xf4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4426:	42a6      	cmp	r6, r4
    4428:	d1f7      	bne.n	441a <_Z14MoveIncrementsml.part.2+0xd6>
        return SendChar('\r') && SendChar('\n');
    442a:	210d      	movs	r1, #13
    442c:	485d      	ldr	r0, [pc, #372]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    442e:	f001 ff0f 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4432:	2800      	cmp	r0, #0
    4434:	f040 8090 	bne.w	4558 <_Z14MoveIncrementsml.part.2+0x214>
    4438:	4a5c      	ldr	r2, [pc, #368]	; (45ac <_Z14MoveIncrementsml.part.2+0x268>)
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    443a:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    443e:	2b01      	cmp	r3, #1
    4440:	d003      	beq.n	444a <_Z14MoveIncrementsml.part.2+0x106>
           !motor.StatusReg().bit.MotorInFault)
    4442:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4446:	06d9      	lsls	r1, r3, #27
    4448:	d5f7      	bpl.n	443a <_Z14MoveIncrementsml.part.2+0xf6>
    if (motor.StatusReg().bit.MotorInFault)
    444a:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    444e:	06db      	lsls	r3, r3, #27
    4450:	d41c      	bmi.n	448c <_Z14MoveIncrementsml.part.2+0x148>
    4452:	4c59      	ldr	r4, [pc, #356]	; (45b8 <_Z14MoveIncrementsml.part.2+0x274>)
            if (!SendChar(buffer[iChar])) {
    4454:	4d53      	ldr	r5, [pc, #332]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4456:	f104 0609 	add.w	r6, r4, #9
    445a:	f814 1b01 	ldrb.w	r1, [r4], #1
    445e:	4628      	mov	r0, r5
    4460:	f001 fef6 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4464:	b140      	cbz	r0, 4478 <_Z14MoveIncrementsml.part.2+0x134>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4466:	42a6      	cmp	r6, r4
    4468:	d1f7      	bne.n	445a <_Z14MoveIncrementsml.part.2+0x116>
        return SendChar('\r') && SendChar('\n');
    446a:	210d      	movs	r1, #13
    446c:	484d      	ldr	r0, [pc, #308]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    446e:	f001 feef 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4472:	4604      	mov	r4, r0
    4474:	2800      	cmp	r0, #0
    4476:	d174      	bne.n	4562 <_Z14MoveIncrementsml.part.2+0x21e>
        return true;
    4478:	2401      	movs	r4, #1
}
    447a:	4620      	mov	r0, r4
    447c:	b00a      	add	sp, #40	; 0x28
    447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
    4482:	2400      	movs	r4, #0
}
    4484:	4620      	mov	r0, r4
    4486:	b00a      	add	sp, #40	; 0x28
    4488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    448c:	4c4b      	ldr	r4, [pc, #300]	; (45bc <_Z14MoveIncrementsml.part.2+0x278>)
            if (!SendChar(buffer[iChar])) {
    448e:	4d45      	ldr	r5, [pc, #276]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4490:	f104 0615 	add.w	r6, r4, #21
    4494:	f814 1b01 	ldrb.w	r1, [r4], #1
    4498:	4628      	mov	r0, r5
    449a:	f001 fed9 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    449e:	b138      	cbz	r0, 44b0 <_Z14MoveIncrementsml.part.2+0x16c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44a0:	42a6      	cmp	r6, r4
    44a2:	d1f7      	bne.n	4494 <_Z14MoveIncrementsml.part.2+0x150>
        return SendChar('\r') && SendChar('\n');
    44a4:	210d      	movs	r1, #13
    44a6:	483f      	ldr	r0, [pc, #252]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    44a8:	f001 fed2 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44ac:	2800      	cmp	r0, #0
    44ae:	d171      	bne.n	4594 <_Z14MoveIncrementsml.part.2+0x250>
    44b0:	4c43      	ldr	r4, [pc, #268]	; (45c0 <_Z14MoveIncrementsml.part.2+0x27c>)
            if (!SendChar(buffer[iChar])) {
    44b2:	4d3c      	ldr	r5, [pc, #240]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    44b4:	f104 0644 	add.w	r6, r4, #68	; 0x44
    44b8:	f814 1b01 	ldrb.w	r1, [r4], #1
    44bc:	4628      	mov	r0, r5
    44be:	f001 fec7 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44c2:	b138      	cbz	r0, 44d4 <_Z14MoveIncrementsml.part.2+0x190>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44c4:	42b4      	cmp	r4, r6
    44c6:	d1f7      	bne.n	44b8 <_Z14MoveIncrementsml.part.2+0x174>
        return SendChar('\r') && SendChar('\n');
    44c8:	210d      	movs	r1, #13
    44ca:	4836      	ldr	r0, [pc, #216]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    44cc:	f001 fec0 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44d0:	2800      	cmp	r0, #0
    44d2:	d15a      	bne.n	458a <_Z14MoveIncrementsml.part.2+0x246>
    44d4:	4c3b      	ldr	r4, [pc, #236]	; (45c4 <_Z14MoveIncrementsml.part.2+0x280>)
            if (!SendChar(buffer[iChar])) {
    44d6:	4d33      	ldr	r5, [pc, #204]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    44d8:	f104 0640 	add.w	r6, r4, #64	; 0x40
    44dc:	f814 1b01 	ldrb.w	r1, [r4], #1
    44e0:	4628      	mov	r0, r5
    44e2:	f001 feb5 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44e6:	b138      	cbz	r0, 44f8 <_Z14MoveIncrementsml.part.2+0x1b4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44e8:	42a6      	cmp	r6, r4
    44ea:	d1f7      	bne.n	44dc <_Z14MoveIncrementsml.part.2+0x198>
        return SendChar('\r') && SendChar('\n');
    44ec:	210d      	movs	r1, #13
    44ee:	482d      	ldr	r0, [pc, #180]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    44f0:	f001 feae 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44f4:	2800      	cmp	r0, #0
    44f6:	d143      	bne.n	4580 <_Z14MoveIncrementsml.part.2+0x23c>
    44f8:	210d      	movs	r1, #13
    44fa:	482a      	ldr	r0, [pc, #168]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    44fc:	f001 fea8 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4500:	4604      	mov	r4, r0
    4502:	2800      	cmp	r0, #0
    4504:	d0be      	beq.n	4484 <_Z14MoveIncrementsml.part.2+0x140>
    4506:	210a      	movs	r1, #10
    4508:	4826      	ldr	r0, [pc, #152]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    450a:	f001 fea1 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
        return false;
    450e:	2400      	movs	r4, #0
}
    4510:	4620      	mov	r0, r4
    4512:	b00a      	add	sp, #40	; 0x28
    4514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        itoa(number, strRep, radix);
    4518:	4630      	mov	r0, r6
    451a:	220a      	movs	r2, #10
    451c:	a901      	add	r1, sp, #4
    451e:	f019 fbc5 	bl	1dcac <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4522:	a801      	add	r0, sp, #4
    4524:	f01a fc6c 	bl	1ee00 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4528:	b160      	cbz	r0, 4544 <_Z14MoveIncrementsml.part.2+0x200>
    452a:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    452c:	4e1d      	ldr	r6, [pc, #116]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    452e:	1825      	adds	r5, r4, r0
    4530:	e001      	b.n	4536 <_Z14MoveIncrementsml.part.2+0x1f2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4532:	42ac      	cmp	r4, r5
    4534:	d006      	beq.n	4544 <_Z14MoveIncrementsml.part.2+0x200>
            if (!SendChar(buffer[iChar])) {
    4536:	f814 1b01 	ldrb.w	r1, [r4], #1
    453a:	4630      	mov	r0, r6
    453c:	f001 fe88 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4540:	2800      	cmp	r0, #0
    4542:	d1f6      	bne.n	4532 <_Z14MoveIncrementsml.part.2+0x1ee>
        return SendChar('\r') && SendChar('\n');
    4544:	210d      	movs	r1, #13
    4546:	4817      	ldr	r0, [pc, #92]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4548:	f001 fe82 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    454c:	b970      	cbnz	r0, 456c <_Z14MoveIncrementsml.part.2+0x228>
        motor.MotorInAState(true);
    454e:	2101      	movs	r1, #1
    4550:	4816      	ldr	r0, [pc, #88]	; (45ac <_Z14MoveIncrementsml.part.2+0x268>)
    4552:	f000 fe71 	bl	5238 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    4556:	e752      	b.n	43fe <_Z14MoveIncrementsml.part.2+0xba>
    4558:	210a      	movs	r1, #10
    455a:	4812      	ldr	r0, [pc, #72]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    455c:	f001 fe78 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4560:	e76a      	b.n	4438 <_Z14MoveIncrementsml.part.2+0xf4>
    4562:	210a      	movs	r1, #10
    4564:	480f      	ldr	r0, [pc, #60]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4566:	f001 fe73 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    456a:	e78b      	b.n	4484 <_Z14MoveIncrementsml.part.2+0x140>
    456c:	210a      	movs	r1, #10
    456e:	480d      	ldr	r0, [pc, #52]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4570:	f001 fe6e 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4574:	e7eb      	b.n	454e <_Z14MoveIncrementsml.part.2+0x20a>
    4576:	210a      	movs	r1, #10
    4578:	480a      	ldr	r0, [pc, #40]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    457a:	f001 fe69 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    457e:	e73a      	b.n	43f6 <_Z14MoveIncrementsml.part.2+0xb2>
    4580:	210a      	movs	r1, #10
    4582:	4808      	ldr	r0, [pc, #32]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4584:	f001 fe64 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4588:	e7b6      	b.n	44f8 <_Z14MoveIncrementsml.part.2+0x1b4>
    458a:	210a      	movs	r1, #10
    458c:	4805      	ldr	r0, [pc, #20]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    458e:	f001 fe5f 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4592:	e79f      	b.n	44d4 <_Z14MoveIncrementsml.part.2+0x190>
    4594:	210a      	movs	r1, #10
    4596:	4803      	ldr	r0, [pc, #12]	; (45a4 <_Z14MoveIncrementsml.part.2+0x260>)
    4598:	f001 fe5a 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    459c:	e788      	b.n	44b0 <_Z14MoveIncrementsml.part.2+0x16c>
    459e:	bf00      	nop
    45a0:	00022a80 	.word	0x00022a80
    45a4:	20001488 	.word	0x20001488
    45a8:	00022a88 	.word	0x00022a88
    45ac:	20000b68 	.word	0x20000b68
    45b0:	00493e00 	.word	0x00493e00
    45b4:	00022a8c 	.word	0x00022a8c
    45b8:	00022b4c 	.word	0x00022b4c
    45bc:	00022aa8 	.word	0x00022aa8
    45c0:	00022ac0 	.word	0x00022ac0
    45c4:	00022b08 	.word	0x00022b08

000045c8 <main>:
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    45c8:	4b89      	ldr	r3, [pc, #548]	; (47f0 <main+0x228>)
{
    45ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    45ce:	4f89      	ldr	r7, [pc, #548]	; (47f4 <main+0x22c>)
                          Connector::CPM_MODE_A_DIRECT_B_DIRECT);
    45d0:	6818      	ldr	r0, [r3, #0]
    45d2:	2209      	movs	r2, #9
    45d4:	2102      	movs	r1, #2
    45d6:	f006 ff13 	bl	b400 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    45da:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    45de:	2b02      	cmp	r3, #2
    45e0:	d008      	beq.n	45f4 <main+0x2c>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    45e2:	4985      	ldr	r1, [pc, #532]	; (47f8 <main+0x230>)
    45e4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
        m_hlfbMode = newMode;
    45e8:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    45ea:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    45ec:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    45f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    45f4:	2304      	movs	r3, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    45f6:	2601      	movs	r6, #1
        The only valid mode for this connector type is: #INPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    virtual bool Mode(ConnectorModes newMode) override {
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
            m_mode = newMode;
    45f8:	4c80      	ldr	r4, [pc, #512]	; (47fc <main+0x234>)
                m_hlfbCarrierLossStateChange_ms =
    45fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    motor.MotorInAState(false);
    45fe:	2100      	movs	r1, #0
    4600:	487c      	ldr	r0, [pc, #496]	; (47f4 <main+0x22c>)
        m_hlfbCarrierFrequency = freq;
    4602:	f887 60e4 	strb.w	r6, [r7, #228]	; 0xe4
    4606:	f000 fe17 	bl	5238 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    460a:	2502      	movs	r5, #2
    motor.MotorInBState(false);
    460c:	2100      	movs	r1, #0
    460e:	4879      	ldr	r0, [pc, #484]	; (47f4 <main+0x22c>)
    while (!SerialPort && Milliseconds() - startTime < timeout)
    4610:	f8df 8204 	ldr.w	r8, [pc, #516]	; 4818 <main+0x250>
    motor.MotorInBState(false);
    4614:	f000 fe2a 	bl	526c <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    HomingSensor.InterruptHandlerSet(HomingSensorCallback, InputManager::CHANGE);
    4618:	462a      	mov	r2, r5
    461a:	4633      	mov	r3, r6
    461c:	4978      	ldr	r1, [pc, #480]	; (4800 <main+0x238>)
    461e:	71a5      	strb	r5, [r4, #6]
    4620:	4620      	mov	r0, r4
    4622:	f000 fa79 	bl	4b18 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb>
    motor.MotorInBState(HomingSensor.State());
    4626:	4620      	mov	r0, r4
    4628:	f000 f91a 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    462c:	1c01      	adds	r1, r0, #0
    462e:	bf18      	it	ne
    4630:	2101      	movne	r1, #1
    4632:	4870      	ldr	r0, [pc, #448]	; (47f4 <main+0x22c>)
    4634:	f000 fe1a 	bl	526c <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    SerialPort.Speed(baudRate);
    4638:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    463c:	4640      	mov	r0, r8
    463e:	f001 fdef 	bl	6220 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    4642:	f005 fc33 	bl	9eac <Milliseconds>
    4646:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    4648:	4640      	mov	r0, r8
    464a:	f001 fddd 	bl	6208 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    464e:	f241 3487 	movw	r4, #4999	; 0x1387
    4652:	4640      	mov	r0, r8
    4654:	f001 fdd2 	bl	61fc <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    4658:	2800      	cmp	r0, #0
    465a:	f000 80b8 	beq.w	47ce <main+0x206>
    motor.EnableRequest(true);
    465e:	2101      	movs	r1, #1
    4660:	4864      	ldr	r0, [pc, #400]	; (47f4 <main+0x22c>)
    4662:	f000 fe59 	bl	5318 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    4666:	4867      	ldr	r0, [pc, #412]	; (4804 <main+0x23c>)
    4668:	f7ff fe4a 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    SerialPort.SendLine("Waiting for HLFB...");
    466c:	4866      	ldr	r0, [pc, #408]	; (4808 <main+0x240>)
    466e:	f7ff fe47 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4672:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
    4676:	2b01      	cmp	r3, #1
    4678:	d003      	beq.n	4682 <main+0xba>
           !motor.StatusReg().bit.MotorInFault)
    467a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    467e:	06dd      	lsls	r5, r3, #27
    4680:	d5f7      	bpl.n	4672 <main+0xaa>
    if (motor.StatusReg().bit.MotorInFault)
    4682:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    4686:	06dc      	lsls	r4, r3, #27
    4688:	f140 80a8 	bpl.w	47dc <main+0x214>
        SerialPort.SendLine("Motor fault detected.");
    468c:	485f      	ldr	r0, [pc, #380]	; (480c <main+0x244>)
    468e:	f7ff fe37 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
            SerialPort.SendLine("Enable automatic fault handling by setting HANDLE_MOTOR_FAULTS to 1.");
    4692:	485f      	ldr	r0, [pc, #380]	; (4810 <main+0x248>)
    4694:	f7ff fe34 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
        SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");
    4698:	485e      	ldr	r0, [pc, #376]	; (4814 <main+0x24c>)
    469a:	f7ff fe31 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    469e:	210d      	movs	r1, #13
    46a0:	485d      	ldr	r0, [pc, #372]	; (4818 <main+0x250>)
    46a2:	f001 fdd5 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46a6:	b118      	cbz	r0, 46b0 <main+0xe8>
    46a8:	210a      	movs	r1, #10
    46aa:	485b      	ldr	r0, [pc, #364]	; (4818 <main+0x250>)
    46ac:	f001 fdd0 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46b0:	f20f 1934 	addw	r9, pc, #308	; 0x134
    46b4:	e9d9 8900 	ldrd	r8, r9, [r9]
    46b8:	4d58      	ldr	r5, [pc, #352]	; (481c <main+0x254>)
            if (!SendChar(buffer[iChar])) {
    46ba:	4c57      	ldr	r4, [pc, #348]	; (4818 <main+0x250>)
    46bc:	f8df a168 	ldr.w	sl, [pc, #360]	; 4828 <main+0x260>
    46c0:	e02d      	b.n	471e <main+0x156>
    46c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    46c6:	2001      	movs	r0, #1
    46c8:	f7ff fe3c 	bl	4344 <_Z14MoveIncrementsml.part.2>
    46cc:	4649      	mov	r1, r9
    46ce:	4640      	mov	r0, r8
    46d0:	f005 fc16 	bl	9f00 <Delay_cycles>
    if (motor.StatusReg().bit.MotorInFault)
    46d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    46d8:	06d9      	lsls	r1, r3, #27
    46da:	d463      	bmi.n	47a4 <main+0x1dc>
    46dc:	4651      	mov	r1, sl
    46de:	2001      	movs	r0, #1
    46e0:	f7ff fe30 	bl	4344 <_Z14MoveIncrementsml.part.2>
    46e4:	4640      	mov	r0, r8
    46e6:	4649      	mov	r1, r9
    46e8:	f005 fc0a 	bl	9f00 <Delay_cycles>
    46ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    46f0:	06da      	lsls	r2, r3, #27
    46f2:	d442      	bmi.n	477a <main+0x1b2>
    46f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    46f8:	2004      	movs	r0, #4
    46fa:	f7ff fe23 	bl	4344 <_Z14MoveIncrementsml.part.2>
    46fe:	4640      	mov	r0, r8
    4700:	4649      	mov	r1, r9
    4702:	f005 fbfd 	bl	9f00 <Delay_cycles>
    4706:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    470a:	06db      	lsls	r3, r3, #27
    470c:	d420      	bmi.n	4750 <main+0x188>
    470e:	4651      	mov	r1, sl
    4710:	2004      	movs	r0, #4
    4712:	f7ff fe17 	bl	4344 <_Z14MoveIncrementsml.part.2>
    4716:	4640      	mov	r0, r8
    4718:	4649      	mov	r1, r9
    471a:	f005 fbf1 	bl	9f00 <Delay_cycles>
    471e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    4722:	06d8      	lsls	r0, r3, #27
    4724:	d5cd      	bpl.n	46c2 <main+0xfa>
    4726:	4e3e      	ldr	r6, [pc, #248]	; (4820 <main+0x258>)
    4728:	f816 1b01 	ldrb.w	r1, [r6], #1
    472c:	4620      	mov	r0, r4
    472e:	f001 fd8f 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4732:	2800      	cmp	r0, #0
    4734:	d0ca      	beq.n	46cc <main+0x104>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4736:	42b5      	cmp	r5, r6
    4738:	d1f6      	bne.n	4728 <main+0x160>
        return SendChar('\r') && SendChar('\n');
    473a:	210d      	movs	r1, #13
    473c:	4620      	mov	r0, r4
    473e:	f001 fd87 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4742:	2800      	cmp	r0, #0
    4744:	d0c2      	beq.n	46cc <main+0x104>
    4746:	210a      	movs	r1, #10
    4748:	4620      	mov	r0, r4
    474a:	f001 fd81 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    474e:	e7bd      	b.n	46cc <main+0x104>
    4750:	4e33      	ldr	r6, [pc, #204]	; (4820 <main+0x258>)
            if (!SendChar(buffer[iChar])) {
    4752:	f816 1b01 	ldrb.w	r1, [r6], #1
    4756:	4620      	mov	r0, r4
    4758:	f001 fd7a 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    475c:	2800      	cmp	r0, #0
    475e:	d0da      	beq.n	4716 <main+0x14e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4760:	42ae      	cmp	r6, r5
    4762:	d1f6      	bne.n	4752 <main+0x18a>
        return SendChar('\r') && SendChar('\n');
    4764:	210d      	movs	r1, #13
    4766:	4620      	mov	r0, r4
    4768:	f001 fd72 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    476c:	2800      	cmp	r0, #0
    476e:	d0d2      	beq.n	4716 <main+0x14e>
    4770:	210a      	movs	r1, #10
    4772:	4620      	mov	r0, r4
    4774:	f001 fd6c 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4778:	e7cd      	b.n	4716 <main+0x14e>
    477a:	4e29      	ldr	r6, [pc, #164]	; (4820 <main+0x258>)
            if (!SendChar(buffer[iChar])) {
    477c:	f816 1b01 	ldrb.w	r1, [r6], #1
    4780:	4620      	mov	r0, r4
    4782:	f001 fd65 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4786:	2800      	cmp	r0, #0
    4788:	d0b9      	beq.n	46fe <main+0x136>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    478a:	42ae      	cmp	r6, r5
    478c:	d1f6      	bne.n	477c <main+0x1b4>
        return SendChar('\r') && SendChar('\n');
    478e:	210d      	movs	r1, #13
    4790:	4620      	mov	r0, r4
    4792:	f001 fd5d 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4796:	2800      	cmp	r0, #0
    4798:	d0b1      	beq.n	46fe <main+0x136>
    479a:	210a      	movs	r1, #10
    479c:	4620      	mov	r0, r4
    479e:	f001 fd57 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47a2:	e7ac      	b.n	46fe <main+0x136>
    47a4:	4e1e      	ldr	r6, [pc, #120]	; (4820 <main+0x258>)
            if (!SendChar(buffer[iChar])) {
    47a6:	f816 1b01 	ldrb.w	r1, [r6], #1
    47aa:	4620      	mov	r0, r4
    47ac:	f001 fd50 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47b0:	2800      	cmp	r0, #0
    47b2:	d097      	beq.n	46e4 <main+0x11c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    47b4:	42ae      	cmp	r6, r5
    47b6:	d1f6      	bne.n	47a6 <main+0x1de>
        return SendChar('\r') && SendChar('\n');
    47b8:	210d      	movs	r1, #13
    47ba:	4620      	mov	r0, r4
    47bc:	f001 fd48 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47c0:	2800      	cmp	r0, #0
    47c2:	d08f      	beq.n	46e4 <main+0x11c>
    47c4:	210a      	movs	r1, #10
    47c6:	4620      	mov	r0, r4
    47c8:	f001 fd42 	bl	6250 <_ZN9ClearCore9SerialUsb8SendCharEh>
    47cc:	e78a      	b.n	46e4 <main+0x11c>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    47ce:	f005 fb6d 	bl	9eac <Milliseconds>
    47d2:	1b40      	subs	r0, r0, r5
    47d4:	42a0      	cmp	r0, r4
    47d6:	f67f af3c 	bls.w	4652 <main+0x8a>
    47da:	e740      	b.n	465e <main+0x96>
        SerialPort.SendLine("Motor Ready");
    47dc:	4811      	ldr	r0, [pc, #68]	; (4824 <main+0x25c>)
    47de:	f7ff fd8f 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.5>
    47e2:	e765      	b.n	46b0 <main+0xe8>
    47e4:	f3af 8000 	nop.w
    47e8:	07270e00 	.word	0x07270e00
    47ec:	00000000 	.word	0x00000000
    47f0:	20001c04 	.word	0x20001c04
    47f4:	20000b68 	.word	0x20000b68
    47f8:	c61c3c00 	.word	0xc61c3c00
    47fc:	20001158 	.word	0x20001158
    4800:	000042d5 	.word	0x000042d5
    4804:	00022bc4 	.word	0x00022bc4
    4808:	00022bd4 	.word	0x00022bd4
    480c:	00022aa8 	.word	0x00022aa8
    4810:	00022ac0 	.word	0x00022ac0
    4814:	00022be8 	.word	0x00022be8
    4818:	20001488 	.word	0x20001488
    481c:	00022bc1 	.word	0x00022bc1
    4820:	00022b58 	.word	0x00022b58
    4824:	00022c2c 	.word	0x00022c2c
    4828:	fffffc18 	.word	0xfffffc18

0000482c <_ZN9ClearCore9Connector4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() {
        return m_mode;
    }
    482c:	7980      	ldrb	r0, [r0, #6]
    482e:	4770      	bx	lr

00004830 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    4830:	f04f 30ff 	mov.w	r0, #4294967295
    4834:	4770      	bx	lr
    4836:	bf00      	nop

00004838 <_ZN9ClearCore9DigitalIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4838:	7980      	ldrb	r0, [r0, #6]
    483a:	4770      	bx	lr

0000483c <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode for this connector type is: #INPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    virtual bool Mode(ConnectorModes newMode) override {
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    483c:	2902      	cmp	r1, #2
            m_mode = newMode;
    483e:	bf06      	itte	eq
    4840:	7181      	strbeq	r1, [r0, #6]
            return true;
    4842:	2001      	moveq	r0, #1
        }
        else {
            return false;
    4844:	2000      	movne	r0, #0
        }
    }
    4846:	4770      	bx	lr

00004848 <_ZN9ClearCore9DigitalIn4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::DIGITAL_IN_TYPE;
    }
    4848:	2000      	movs	r0, #0
    484a:	4770      	bx	lr

0000484c <_ZN9ClearCore9DigitalIn10IsWritableEv>:

        \return False because the connector is read-only.
    **/
    bool IsWritable() override {
        return false;
    }
    484c:	2000      	movs	r0, #0
    484e:	4770      	bx	lr

00004850 <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    4850:	2000      	movs	r0, #0
    4852:	4770      	bx	lr

00004854 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
        a fault state is not possible and so this function will always
        return false.
    **/
    bool IsInHwFault() override {
        return false;
    }
    4854:	2000      	movs	r0, #0
    4856:	4770      	bx	lr

00004858 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4858:	f990 0018 	ldrsb.w	r0, [r0, #24]
    485c:	4770      	bx	lr
    485e:	bf00      	nop

00004860 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    4860:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    4862:	b113      	cbz	r3, 486a <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    4864:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    4868:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    486a:	4b06      	ldr	r3, [pc, #24]	; (4884 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    486c:	68c1      	ldr	r1, [r0, #12]
    486e:	681a      	ldr	r2, [r3, #0]
    4870:	6943      	ldr	r3, [r0, #20]
    4872:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    4876:	6812      	ldr	r2, [r2, #0]
    4878:	421a      	tst	r2, r3
    487a:	bf0c      	ite	eq
    487c:	2001      	moveq	r0, #1
    487e:	2000      	movne	r0, #0
    4880:	4770      	bx	lr
    4882:	bf00      	nop
    4884:	20000ad0 	.word	0x20000ad0

00004888 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    4888:	4b2e      	ldr	r3, [pc, #184]	; (4944 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    488a:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    488c:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    4890:	68c3      	ldr	r3, [r0, #12]
    4892:	6904      	ldr	r4, [r0, #16]
    4894:	01da      	lsls	r2, r3, #7
    4896:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    489a:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    489c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    48a0:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    48a4:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    48a6:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    48aa:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    48ae:	d034      	beq.n	491a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    48b0:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    48b4:	f366 1707 	bfi	r7, r6, #4, #4
    48b8:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    48bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    48c0:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    48c2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    48c6:	4422      	add	r2, r4
    if (m_interruptAvail) {
    48c8:	2d00      	cmp	r5, #0
    48ca:	d134      	bne.n	4936 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    48cc:	2402      	movs	r4, #2
    48ce:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    48d2:	4a1d      	ldr	r2, [pc, #116]	; (4948 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    48d4:	6884      	ldr	r4, [r0, #8]
    48d6:	6812      	ldr	r2, [r2, #0]
    48d8:	4e1c      	ldr	r6, [pc, #112]	; (494c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    48da:	3306      	adds	r3, #6
    48dc:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    48de:	f1a3 050c 	sub.w	r5, r3, #12
    48e2:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    48e4:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    48e6:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    48e8:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    48ea:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    48ec:	6242      	str	r2, [r0, #36]	; 0x24
    48ee:	43e4      	mvns	r4, r4
    48f0:	f3bf 8f5b 	dmb	ish
    48f4:	e856 3f00 	ldrex	r3, [r6]
    48f8:	4023      	ands	r3, r4
    48fa:	e846 3200 	strex	r2, r3, [r6]
    48fe:	2a00      	cmp	r2, #0
    4900:	d1f8      	bne.n	48f4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    4902:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    4906:	6803      	ldr	r3, [r0, #0]
    4908:	4a11      	ldr	r2, [pc, #68]	; (4950 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    490a:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    490c:	8081      	strh	r1, [r0, #4]
    490e:	4293      	cmp	r3, r2
    4910:	d115      	bne.n	493e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    4912:	2302      	movs	r3, #2
    4914:	7183      	strb	r3, [r0, #6]
}
    4916:	bcf0      	pop	{r4, r5, r6, r7}
    4918:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    491a:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    491e:	f367 0603 	bfi	r6, r7, #0, #4
    4922:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    4926:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    492a:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    492c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    4930:	4422      	add	r2, r4
    if (m_interruptAvail) {
    4932:	2d00      	cmp	r5, #0
    4934:	d0ca      	beq.n	48cc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    4936:	2403      	movs	r4, #3
    4938:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    493c:	e7c9      	b.n	48d2 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    493e:	2102      	movs	r1, #2
}
    4940:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    4942:	4718      	bx	r3
    4944:	00010003 	.word	0x00010003
    4948:	20000ad0 	.word	0x20000ad0
    494c:	20001acc 	.word	0x20001acc
    4950:	0000483d 	.word	0x0000483d

00004954 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    4954:	69c2      	ldr	r2, [r0, #28]
    4956:	6943      	ldr	r3, [r0, #20]
    4958:	6812      	ldr	r2, [r2, #0]
    495a:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    495c:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    495e:	d005      	beq.n	496c <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    4960:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    4962:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    4964:	2a00      	cmp	r2, #0
    4966:	d039      	beq.n	49dc <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    4968:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    496c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    496e:	2a00      	cmp	r2, #0
    4970:	d0fa      	beq.n	4968 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    4972:	3a01      	subs	r2, #1
    4974:	b292      	uxth	r2, r2
    4976:	8582      	strh	r2, [r0, #44]	; 0x2c
    4978:	2a00      	cmp	r2, #0
    497a:	d1f5      	bne.n	4968 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    497c:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    497e:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4980:	6809      	ldr	r1, [r1, #0]
    4982:	400b      	ands	r3, r1
    4984:	2b00      	cmp	r3, #0
    4986:	bf0c      	ite	eq
    4988:	2301      	moveq	r3, #1
    498a:	2300      	movne	r3, #0
    498c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    4990:	d053      	beq.n	4a3a <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4992:	f3bf 8f5b 	dmb	ish
    4996:	4b41      	ldr	r3, [pc, #260]	; (4a9c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    4998:	43d2      	mvns	r2, r2
    499a:	e853 1f00 	ldrex	r1, [r3]
    499e:	4011      	ands	r1, r2
    49a0:	e843 1e00 	strex	lr, r1, [r3]
    49a4:	f1be 0f00 	cmp.w	lr, #0
    49a8:	d1f7      	bne.n	499a <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    49aa:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    49ae:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    49b2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    49b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    49b8:	2b00      	cmp	r3, #0
    49ba:	d14a      	bne.n	4a52 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    49bc:	f3bf 8f5b 	dmb	ish
    49c0:	2301      	movs	r3, #1
    49c2:	408b      	lsls	r3, r1
    49c4:	43db      	mvns	r3, r3
    49c6:	e852 1f00 	ldrex	r1, [r2]
    49ca:	4019      	ands	r1, r3
    49cc:	e842 1000 	strex	r0, r1, [r2]
    49d0:	2800      	cmp	r0, #0
    49d2:	d1f8      	bne.n	49c6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    49d4:	f3bf 8f5b 	dmb	ish
}
    49d8:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    49dc:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    49de:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    49e0:	6809      	ldr	r1, [r1, #0]
    49e2:	400b      	ands	r3, r1
    49e4:	2b00      	cmp	r3, #0
    49e6:	bf0c      	ite	eq
    49e8:	2301      	moveq	r3, #1
    49ea:	2300      	movne	r3, #0
    49ec:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    49f0:	d047      	beq.n	4a82 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    49f2:	f3bf 8f5b 	dmb	ish
    49f6:	4b29      	ldr	r3, [pc, #164]	; (4a9c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    49f8:	43d2      	mvns	r2, r2
    49fa:	e853 1f00 	ldrex	r1, [r3]
    49fe:	4011      	ands	r1, r2
    4a00:	e843 1e00 	strex	lr, r1, [r3]
    4a04:	f1be 0f00 	cmp.w	lr, #0
    4a08:	d1f7      	bne.n	49fa <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    4a0a:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    4a0e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    4a12:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    4a16:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    4a18:	bb3b      	cbnz	r3, 4a6a <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    4a1a:	f3bf 8f5b 	dmb	ish
    4a1e:	2301      	movs	r3, #1
    4a20:	408b      	lsls	r3, r1
    4a22:	43db      	mvns	r3, r3
    4a24:	e852 1f00 	ldrex	r1, [r2]
    4a28:	4019      	ands	r1, r3
    4a2a:	e842 1000 	strex	r0, r1, [r2]
    4a2e:	2800      	cmp	r0, #0
    4a30:	d1f8      	bne.n	4a24 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    4a32:	f3bf 8f5b 	dmb	ish
}
    4a36:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4a3a:	4b18      	ldr	r3, [pc, #96]	; (4a9c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    4a3c:	f3bf 8f5b 	dmb	ish
    4a40:	e853 1f00 	ldrex	r1, [r3]
    4a44:	4311      	orrs	r1, r2
    4a46:	e843 1e00 	strex	lr, r1, [r3]
    4a4a:	f1be 0f00 	cmp.w	lr, #0
    4a4e:	d0ac      	beq.n	49aa <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    4a50:	e7f6      	b.n	4a40 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    4a52:	2301      	movs	r3, #1
    4a54:	408b      	lsls	r3, r1
    4a56:	f3bf 8f5b 	dmb	ish
    4a5a:	e852 1f00 	ldrex	r1, [r2]
    4a5e:	4319      	orrs	r1, r3
    4a60:	e842 1000 	strex	r0, r1, [r2]
    4a64:	2800      	cmp	r0, #0
    4a66:	d0e4      	beq.n	4a32 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    4a68:	e7f7      	b.n	4a5a <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    4a6a:	2301      	movs	r3, #1
    4a6c:	408b      	lsls	r3, r1
    4a6e:	f3bf 8f5b 	dmb	ish
    4a72:	e852 1f00 	ldrex	r1, [r2]
    4a76:	4319      	orrs	r1, r3
    4a78:	e842 1000 	strex	r0, r1, [r2]
    4a7c:	2800      	cmp	r0, #0
    4a7e:	d0d8      	beq.n	4a32 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    4a80:	e7f7      	b.n	4a72 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    4a82:	4b06      	ldr	r3, [pc, #24]	; (4a9c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    4a84:	f3bf 8f5b 	dmb	ish
    4a88:	e853 1f00 	ldrex	r1, [r3]
    4a8c:	4311      	orrs	r1, r2
    4a8e:	e843 1e00 	strex	lr, r1, [r3]
    4a92:	f1be 0f00 	cmp.w	lr, #0
    4a96:	d0b8      	beq.n	4a0a <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    4a98:	e7f6      	b.n	4a88 <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    4a9a:	bf00      	nop
    4a9c:	20001acc 	.word	0x20001acc

00004aa0 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    4aa0:	4a03      	ldr	r2, [pc, #12]	; (4ab0 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    4aa2:	6002      	str	r2, [r0, #0]
    4aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4aa8:	2200      	movs	r2, #0
    4aaa:	8081      	strh	r1, [r0, #4]
    4aac:	7182      	strb	r2, [r0, #6]
    4aae:	4770      	bx	lr
    4ab0:	00022c40 	.word	0x00022c40

00004ab4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    4ab4:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    4ab6:	f992 4001 	ldrsb.w	r4, [r2, #1]
    4aba:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    4abc:	4d0d      	ldr	r5, [pc, #52]	; (4af4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    4abe:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    4ac0:	2400      	movs	r4, #0
    4ac2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4ac6:	8086      	strh	r6, [r0, #4]
    4ac8:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    4aca:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    4acc:	7895      	ldrb	r5, [r2, #2]
    4ace:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    4ad0:	2101      	movs	r1, #1
    4ad2:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    4ad4:	6141      	str	r1, [r0, #20]
    4ad6:	78d1      	ldrb	r1, [r2, #3]
    4ad8:	7601      	strb	r1, [r0, #24]
    4ada:	7911      	ldrb	r1, [r2, #4]
    4adc:	4a06      	ldr	r2, [pc, #24]	; (4af8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    4ade:	61c4      	str	r4, [r0, #28]
    4ae0:	6204      	str	r4, [r0, #32]
    4ae2:	6244      	str	r4, [r0, #36]	; 0x24
    4ae4:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    4ae8:	7641      	strb	r1, [r0, #25]
    4aea:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    4aee:	bc70      	pop	{r4, r5, r6}
    4af0:	4770      	bx	lr
    4af2:	bf00      	nop
    4af4:	00022c70 	.word	0x00022c70
    4af8:	00010003 	.word	0x00010003

00004afc <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    4afc:	4b05      	ldr	r3, [pc, #20]	; (4b14 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    4afe:	68c1      	ldr	r1, [r0, #12]
    4b00:	681a      	ldr	r2, [r3, #0]
    4b02:	6943      	ldr	r3, [r0, #20]
    4b04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    4b08:	6812      	ldr	r2, [r2, #0]
    4b0a:	421a      	tst	r2, r3
}
    4b0c:	bf0c      	ite	eq
    4b0e:	2001      	moveq	r0, #1
    4b10:	2000      	movne	r0, #0
    4b12:	4770      	bx	lr
    4b14:	20000ad0 	.word	0x20000ad0

00004b18 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb>:
                                    bool enable) {
    4b18:	b530      	push	{r4, r5, lr}
    4b1a:	4604      	mov	r4, r0
    if (!m_interruptAvail) {
    4b1c:	7e40      	ldrb	r0, [r0, #25]
                                    bool enable) {
    4b1e:	b083      	sub	sp, #12
    if (!m_interruptAvail) {
    4b20:	b158      	cbz	r0, 4b3a <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb+0x22>
    return InputMgr.InterruptHandlerSet(m_extInt, callback, trigger, enable);
    4b22:	4807      	ldr	r0, [pc, #28]	; (4b40 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb+0x28>)
    4b24:	461d      	mov	r5, r3
    4b26:	4613      	mov	r3, r2
    4b28:	460a      	mov	r2, r1
    4b2a:	f994 1018 	ldrsb.w	r1, [r4, #24]
    4b2e:	6800      	ldr	r0, [r0, #0]
    4b30:	9500      	str	r5, [sp, #0]
    4b32:	2400      	movs	r4, #0
    4b34:	9401      	str	r4, [sp, #4]
    4b36:	f000 f88d 	bl	4c54 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb>
}
    4b3a:	b003      	add	sp, #12
    4b3c:	bd30      	pop	{r4, r5, pc}
    4b3e:	bf00      	nop
    4b40:	20000ad0 	.word	0x20000ad0

00004b44 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4b44:	6a03      	ldr	r3, [r0, #32]
    4b46:	6941      	ldr	r1, [r0, #20]
    4b48:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    4b4a:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4b4c:	400b      	ands	r3, r1
    4b4e:	2b00      	cmp	r3, #0
    4b50:	bf0c      	ite	eq
    4b52:	2301      	moveq	r3, #1
    4b54:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    4b56:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4b58:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    4b5c:	d023      	beq.n	4ba6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4b5e:	f3bf 8f5b 	dmb	ish
    4b62:	4b1e      	ldr	r3, [pc, #120]	; (4bdc <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    4b64:	43d2      	mvns	r2, r2
    4b66:	e853 1f00 	ldrex	r1, [r3]
    4b6a:	4011      	ands	r1, r2
    4b6c:	e843 1e00 	strex	lr, r1, [r3]
    4b70:	f1be 0f00 	cmp.w	lr, #0
    4b74:	d1f7      	bne.n	4b66 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    4b76:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    4b7a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    4b7e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    4b82:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    4b84:	b9db      	cbnz	r3, 4bbe <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    4b86:	f3bf 8f5b 	dmb	ish
    4b8a:	2301      	movs	r3, #1
    4b8c:	408b      	lsls	r3, r1
    4b8e:	43db      	mvns	r3, r3
    4b90:	e852 1f00 	ldrex	r1, [r2]
    4b94:	4019      	ands	r1, r3
    4b96:	e842 1000 	strex	r0, r1, [r2]
    4b9a:	2800      	cmp	r0, #0
    4b9c:	d1f8      	bne.n	4b90 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    4b9e:	f3bf 8f5b 	dmb	ish
    4ba2:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4ba6:	4b0d      	ldr	r3, [pc, #52]	; (4bdc <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    4ba8:	f3bf 8f5b 	dmb	ish
    4bac:	e853 1f00 	ldrex	r1, [r3]
    4bb0:	4311      	orrs	r1, r2
    4bb2:	e843 1e00 	strex	lr, r1, [r3]
    4bb6:	f1be 0f00 	cmp.w	lr, #0
    4bba:	d0dc      	beq.n	4b76 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    4bbc:	e7f6      	b.n	4bac <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    4bbe:	2301      	movs	r3, #1
    4bc0:	408b      	lsls	r3, r1
    4bc2:	f3bf 8f5b 	dmb	ish
    4bc6:	e852 1f00 	ldrex	r1, [r2]
    4bca:	4319      	orrs	r1, r3
    4bcc:	e842 1000 	strex	r0, r1, [r2]
    4bd0:	2800      	cmp	r0, #0
    4bd2:	d1f8      	bne.n	4bc6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    4bd4:	f3bf 8f5b 	dmb	ish
    4bd8:	f85d fb04 	ldr.w	pc, [sp], #4
    4bdc:	20001acc 	.word	0x20001acc

00004be0 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    4be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    4be2:	4e14      	ldr	r6, [pc, #80]	; (4c34 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    4be4:	6834      	ldr	r4, [r6, #0]
    4be6:	f014 0401 	ands.w	r4, r4, #1
    4bea:	d002      	beq.n	4bf2 <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    4bec:	4b12      	ldr	r3, [pc, #72]	; (4c38 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    4bee:	6818      	ldr	r0, [r3, #0]
    4bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bf2:	2080      	movs	r0, #128	; 0x80
    4bf4:	f00e fc1c 	bl	13430 <_Znwj>
    4bf8:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    4bfa:	2701      	movs	r7, #1
    4bfc:	2240      	movs	r2, #64	; 0x40
    4bfe:	602c      	str	r4, [r5, #0]
    4c00:	606c      	str	r4, [r5, #4]
    4c02:	60ac      	str	r4, [r5, #8]
    4c04:	60ec      	str	r4, [r5, #12]
    4c06:	612c      	str	r4, [r5, #16]
    4c08:	616c      	str	r4, [r5, #20]
    4c0a:	4621      	mov	r1, r4
    4c0c:	61ac      	str	r4, [r5, #24]
    4c0e:	61ec      	str	r4, [r5, #28]
    4c10:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    4c12:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    4c14:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    4c16:	62ec      	str	r4, [r5, #44]	; 0x2c
    4c18:	632c      	str	r4, [r5, #48]	; 0x30
    4c1a:	636c      	str	r4, [r5, #52]	; 0x34
    4c1c:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    4c20:	303c      	adds	r0, #60	; 0x3c
    4c22:	f019 fca3 	bl	1e56c <memset>
    static InputManager *instance = new InputManager();
    4c26:	4b04      	ldr	r3, [pc, #16]	; (4c38 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    4c28:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    4c2c:	6037      	str	r7, [r6, #0]
    4c2e:	601d      	str	r5, [r3, #0]
    4c30:	4628      	mov	r0, r5
}
    4c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c34:	20000acc 	.word	0x20000acc
    4c38:	20000ad4 	.word	0x20000ad4

00004c3c <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    4c3c:	4902      	ldr	r1, [pc, #8]	; (4c48 <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    4c3e:	4a03      	ldr	r2, [pc, #12]	; (4c4c <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    4c40:	4b03      	ldr	r3, [pc, #12]	; (4c50 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    4c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    4c46:	4770      	bx	lr
    4c48:	41008020 	.word	0x41008020
    4c4c:	410080a0 	.word	0x410080a0
    4c50:	41008120 	.word	0x41008120

00004c54 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb>:
    }
}

bool InputManager::InterruptHandlerSet(int8_t extInt, voidFuncPtr callback,
                                       InterruptTrigger trigger, bool enable,
                                       bool oneTime) {
    4c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    4c58:	b2cc      	uxtb	r4, r1
    4c5a:	2c0f      	cmp	r4, #15
                                       bool oneTime) {
    4c5c:	f89d 701c 	ldrb.w	r7, [sp, #28]
    4c60:	f89d e020 	ldrb.w	lr, [sp, #32]
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    4c64:	d870      	bhi.n	4d48 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xf4>
        return false; // Invalid external interrupt number
    }

    EIC->CTRLA.bit.ENABLE = 0;
    4c66:	4d3c      	ldr	r5, [pc, #240]	; (4d58 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4c68:	782c      	ldrb	r4, [r5, #0]
    4c6a:	f36f 0441 	bfc	r4, #1, #1
    4c6e:	702c      	strb	r4, [r5, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    4c70:	686c      	ldr	r4, [r5, #4]
    4c72:	f014 0402 	ands.w	r4, r4, #2
    4c76:	d1fb      	bne.n	4c70 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x1c>

    // Clear any existing interrupt flag
    EIC->INTFLAG.reg = (1UL << extInt);
    4c78:	2601      	movs	r6, #1
    4c7a:	408e      	lsls	r6, r1
    4c7c:	616e      	str	r6, [r5, #20]

    if (callback != nullptr) {
    4c7e:	2a00      	cmp	r2, #0
    4c80:	d068      	beq.n	4d54 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x100>
    4c82:	10cd      	asrs	r5, r1, #3
    4c84:	00ad      	lsls	r5, r5, #2
    4c86:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    4c8a:	f505 5520 	add.w	r5, r5, #10240	; 0x2800
        // Clear the existing interrupt trigger condition
        uint8_t shiftAmt = 4 * (extInt % 8);
    4c8e:	f001 0c07 	and.w	ip, r1, #7
        EIC->CONFIG[extInt / 8].reg &= ~(0xf << shiftAmt);
    4c92:	f8d5 801c 	ldr.w	r8, [r5, #28]
    4c96:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    4c9a:	f04f 090f 	mov.w	r9, #15
    4c9e:	fa09 f90c 	lsl.w	r9, r9, ip
    4ca2:	b2db      	uxtb	r3, r3
    4ca4:	ea28 0809 	bic.w	r8, r8, r9
    4ca8:	2b04      	cmp	r3, #4
    4caa:	f8c5 801c 	str.w	r8, [r5, #28]
    4cae:	d945      	bls.n	4d3c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xe8>

        // Set the interrupt trigger condition
        EIC->CONFIG[extInt / 8].reg |=
            static_cast<uint32_t>(EicSense(trigger) << shiftAmt);
    4cb0:	69eb      	ldr	r3, [r5, #28]
    4cb2:	431c      	orrs	r4, r3
        EIC->CONFIG[extInt / 8].reg |=
    4cb4:	61ec      	str	r4, [r5, #28]
    }
    else {
        enable = false;
    }

    m_interruptServiceRoutines[extInt] = callback;
    4cb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2

    if (oneTime) {
        m_oneTimeFlags |= (1UL << extInt);
    4cba:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    m_interruptServiceRoutines[extInt] = callback;
    4cbe:	63ca      	str	r2, [r1, #60]	; 0x3c
    if (oneTime) {
    4cc0:	f1be 0f00 	cmp.w	lr, #0
    4cc4:	d11f      	bne.n	4d06 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xb2>
    }
    else  {
        m_oneTimeFlags &= ~(1UL << extInt);
    4cc6:	ea23 0306 	bic.w	r3, r3, r6
    4cca:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
                                   bool clearPending) {
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
        return; // Invalid external interrupt number
    }

    if (enable) {
    4cce:	b307      	cbz	r7, 4d12 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xbe>
        if (clearPending) {
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    4cd0:	f3bf 8f5b 	dmb	ish
    4cd4:	f100 0334 	add.w	r3, r0, #52	; 0x34
    4cd8:	e853 2f00 	ldrex	r2, [r3]
    4cdc:	4332      	orrs	r2, r6
    4cde:	e843 2100 	strex	r1, r2, [r3]
    4ce2:	2900      	cmp	r1, #0
    4ce4:	d1f8      	bne.n	4cd8 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x84>
    4ce6:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4cea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4cee:	bb73      	cbnz	r3, 4d4e <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xfa>
    EIC->CTRLA.bit.ENABLE = 1;
    4cf0:	4a19      	ldr	r2, [pc, #100]	; (4d58 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4cf2:	7813      	ldrb	r3, [r2, #0]
    4cf4:	f043 0302 	orr.w	r3, r3, #2
    4cf8:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    4cfa:	6853      	ldr	r3, [r2, #4]
    4cfc:	079b      	lsls	r3, r3, #30
    4cfe:	d4fc      	bmi.n	4cfa <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xa6>
    return true;
    4d00:	2001      	movs	r0, #1
    4d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        m_oneTimeFlags |= (1UL << extInt);
    4d06:	4333      	orrs	r3, r6
    4d08:	b29b      	uxth	r3, r3
    4d0a:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    if (enable) {
    4d0e:	2f00      	cmp	r7, #0
    4d10:	d1de      	bne.n	4cd0 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x7c>
            EIC->INTENSET.reg = (1UL << extInt);
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    4d12:	f3bf 8f5b 	dmb	ish
    4d16:	43f3      	mvns	r3, r6
    4d18:	f100 0234 	add.w	r2, r0, #52	; 0x34
    4d1c:	e852 1f00 	ldrex	r1, [r2]
    4d20:	4019      	ands	r1, r3
    4d22:	e842 1400 	strex	r4, r1, [r2]
    4d26:	2c00      	cmp	r4, #0
    4d28:	d1f8      	bne.n	4d1c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xc8>
    4d2a:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4d2e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4d32:	2b00      	cmp	r3, #0
    4d34:	d0dc      	beq.n	4cf0 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
            EIC->INTENCLR.reg = (1UL << extInt);
    4d36:	4b08      	ldr	r3, [pc, #32]	; (4d58 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4d38:	60de      	str	r6, [r3, #12]
    4d3a:	e7d9      	b.n	4cf0 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
    4d3c:	4c07      	ldr	r4, [pc, #28]	; (4d5c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x108>)
    4d3e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
    4d42:	fa04 f40c 	lsl.w	r4, r4, ip
    4d46:	e7b3      	b.n	4cb0 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x5c>
        return false; // Invalid external interrupt number
    4d48:	2000      	movs	r0, #0
}
    4d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            EIC->INTENSET.reg = (1UL << extInt);
    4d4e:	4b02      	ldr	r3, [pc, #8]	; (4d58 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4d50:	611e      	str	r6, [r3, #16]
    4d52:	e7cd      	b.n	4cf0 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
        enable = false;
    4d54:	4617      	mov	r7, r2
    4d56:	e7ae      	b.n	4cb6 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x62>
    4d58:	40002800 	.word	0x40002800
    4d5c:	00022c98 	.word	0x00022c98

00004d60 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:
                                   bool clearPending) {
    4d60:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    4d62:	b2cc      	uxtb	r4, r1
    4d64:	2c0f      	cmp	r4, #15
    4d66:	d82e      	bhi.n	4dc6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
    if (enable) {
    4d68:	b1b2      	cbz	r2, 4d98 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    4d6a:	bb6b      	cbnz	r3, 4dc8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    4d6c:	2301      	movs	r3, #1
    4d6e:	fa03 f101 	lsl.w	r1, r3, r1
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    4d72:	f100 0334 	add.w	r3, r0, #52	; 0x34
    4d76:	f3bf 8f5b 	dmb	ish
    4d7a:	e853 2f00 	ldrex	r2, [r3]
    4d7e:	430a      	orrs	r2, r1
    4d80:	e843 2400 	strex	r4, r2, [r3]
    4d84:	2c00      	cmp	r4, #0
    4d86:	d1f8      	bne.n	4d7a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    4d88:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4d8c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4d90:	b1cb      	cbz	r3, 4dc6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    4d92:	4b10      	ldr	r3, [pc, #64]	; (4dd4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    4d94:	6119      	str	r1, [r3, #16]
    4d96:	bd10      	pop	{r4, pc}
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    4d98:	2301      	movs	r3, #1
    4d9a:	fa03 f101 	lsl.w	r1, r3, r1
    4d9e:	43ca      	mvns	r2, r1
    4da0:	f100 0334 	add.w	r3, r0, #52	; 0x34
    4da4:	f3bf 8f5b 	dmb	ish
    4da8:	e853 4f00 	ldrex	r4, [r3]
    4dac:	4014      	ands	r4, r2
    4dae:	e843 4e00 	strex	lr, r4, [r3]
    4db2:	f1be 0f00 	cmp.w	lr, #0
    4db6:	d1f7      	bne.n	4da8 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    4db8:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4dbc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4dc0:	b10b      	cbz	r3, 4dc6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    4dc2:	4b04      	ldr	r3, [pc, #16]	; (4dd4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    4dc4:	60d9      	str	r1, [r3, #12]
    4dc6:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    4dc8:	2201      	movs	r2, #1
    4dca:	4b02      	ldr	r3, [pc, #8]	; (4dd4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    4dcc:	fa02 f101 	lsl.w	r1, r2, r1
    4dd0:	6159      	str	r1, [r3, #20]
    4dd2:	e7ce      	b.n	4d72 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    4dd4:	40002800 	.word	0x40002800

00004dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    4dd8:	290f      	cmp	r1, #15
    4dda:	dc14      	bgt.n	4e06 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    4ddc:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    4de0:	40cb      	lsrs	r3, r1
    4de2:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    4de6:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    4dea:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    4dec:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    4df0:	d10a      	bne.n	4e08 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    4df2:	4a0f      	ldr	r2, [pc, #60]	; (4e30 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    4df4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    4df8:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    4dfa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    4dfc:	b113      	cbz	r3, 4e04 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    4dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    4e02:	4718      	bx	r3
    4e04:	bd10      	pop	{r4, pc}
    4e06:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    4e08:	43dc      	mvns	r4, r3
    4e0a:	f100 0234 	add.w	r2, r0, #52	; 0x34
    4e0e:	f3bf 8f5b 	dmb	ish
    4e12:	e852 ef00 	ldrex	lr, [r2]
    4e16:	ea0e 0e04 	and.w	lr, lr, r4
    4e1a:	e842 ec00 	strex	ip, lr, [r2]
    4e1e:	f1bc 0f00 	cmp.w	ip, #0
    4e22:	d1f6      	bne.n	4e12 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    4e24:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    4e28:	4a01      	ldr	r2, [pc, #4]	; (4e30 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    4e2a:	60d3      	str	r3, [r2, #12]
    4e2c:	e7e1      	b.n	4df2 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    4e2e:	bf00      	nop
    4e30:	40002800 	.word	0x40002800

00004e34 <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4e34:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    4e36:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4e38:	681b      	ldr	r3, [r3, #0]
    4e3a:	60c3      	str	r3, [r0, #12]
    4e3c:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    4e3e:	404b      	eors	r3, r1
    4e40:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4e42:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    4e44:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4e46:	6881      	ldr	r1, [r0, #8]
    4e48:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    4e4a:	4053      	eors	r3, r2
    4e4c:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4e4e:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    4e50:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4e52:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    4e54:	4053      	eors	r3, r2
    4e56:	6203      	str	r3, [r0, #32]
    4e58:	4770      	bx	lr
    4e5a:	bf00      	nop

00004e5c <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    4e5c:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    4e5e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    4e60:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    4e62:	f3bf 8f5b 	dmb	ish
    4e66:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    4e6a:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    4e6e:	e852 1f00 	ldrex	r1, [r2]
    4e72:	4319      	orrs	r1, r3
    4e74:	e842 1e00 	strex	lr, r1, [r2]
    4e78:	f1be 0f00 	cmp.w	lr, #0
    4e7c:	d1f7      	bne.n	4e6e <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    4e7e:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    4e82:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4e84:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    4e86:	f3bf 8f5b 	dmb	ish
    4e8a:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    4e8e:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    4e92:	e852 1f00 	ldrex	r1, [r2]
    4e96:	4319      	orrs	r1, r3
    4e98:	e842 1e00 	strex	lr, r1, [r2]
    4e9c:	f1be 0f00 	cmp.w	lr, #0
    4ea0:	d1f7      	bne.n	4e92 <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    4ea2:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    4ea6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4ea8:	6283      	str	r3, [r0, #40]	; 0x28
    4eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    4eae:	bf00      	nop

00004eb0 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    4eb0:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    4eb2:	f7ff fe95 	bl	4be0 <_ZN9ClearCore12InputManager8InstanceEv>
    4eb6:	4b01      	ldr	r3, [pc, #4]	; (4ebc <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    4eb8:	6018      	str	r0, [r3, #0]
    4eba:	bd08      	pop	{r3, pc}
    4ebc:	20000ad0 	.word	0x20000ad0

00004ec0 <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    4ec0:	2006      	movs	r0, #6
    4ec2:	4770      	bx	lr

00004ec4 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    4ec4:	2001      	movs	r0, #1
    4ec6:	4770      	bx	lr

00004ec8 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    4ec8:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    4ecc:	4770      	bx	lr
    4ece:	bf00      	nop

00004ed0 <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4ed0:	7980      	ldrb	r0, [r0, #6]
    4ed2:	4770      	bx	lr

00004ed4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    4ed4:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4ed6:	7983      	ldrb	r3, [r0, #6]
    4ed8:	428b      	cmp	r3, r1
    4eda:	f000 80a7 	beq.w	502c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    4ede:	f1a1 0309 	sub.w	r3, r1, #9
    4ee2:	460d      	mov	r5, r1
    4ee4:	4604      	mov	r4, r0
    4ee6:	2b03      	cmp	r3, #3
    4ee8:	f200 80a2 	bhi.w	5030 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    4eec:	e8df f003 	tbb	[pc, r3]
    4ef0:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    4ef4:	3030      	adds	r0, #48	; 0x30
    4ef6:	f006 feb3 	bl	bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4efa:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    4efc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    4f00:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    4f02:	2200      	movs	r2, #0
    4f04:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    4f08:	b13b      	cbz	r3, 4f1a <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    4f0a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    4f0e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    4f12:	680b      	ldr	r3, [r1, #0]
    4f14:	4013      	ands	r3, r2
    4f16:	d1fc      	bne.n	4f12 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    4f18:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    4f1a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4f1e:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4f20:	2200      	movs	r2, #0
    4f22:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4f26:	b13b      	cbz	r3, 4f38 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    4f28:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4f2c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4f30:	680b      	ldr	r3, [r1, #0]
    4f32:	4013      	ands	r3, r2
    4f34:	d1fc      	bne.n	4f30 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    4f36:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4f38:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4f3c:	4a3d      	ldr	r2, [pc, #244]	; (5034 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4f3e:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4f42:	7889      	ldrb	r1, [r1, #2]
    4f44:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4f48:	440b      	add	r3, r1
            m_mode = newMode;
    4f4a:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4f4c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4f50:	f041 0101 	orr.w	r1, r1, #1
    4f54:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4f58:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4f5c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4f60:	7889      	ldrb	r1, [r1, #2]
    4f62:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4f66:	440b      	add	r3, r1
    4f68:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4f6c:	f042 0201 	orr.w	r2, r2, #1
    4f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4f74:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4f76:	b662      	cpsie	i
    return true;
    4f78:	2001      	movs	r0, #1
    4f7a:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4f7c:	3030      	adds	r0, #48	; 0x30
    4f7e:	f006 fe6f 	bl	bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    4f82:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4f84:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4f88:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4f8a:	2200      	movs	r2, #0
    4f8c:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4f90:	b13b      	cbz	r3, 4fa2 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    4f92:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4f96:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4f9a:	680b      	ldr	r3, [r1, #0]
    4f9c:	4013      	ands	r3, r2
    4f9e:	d1fc      	bne.n	4f9a <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    4fa0:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4fa2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4fa6:	4a23      	ldr	r2, [pc, #140]	; (5034 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4fa8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4fac:	7889      	ldrb	r1, [r1, #2]
    4fae:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4fb2:	440b      	add	r3, r1
    4fb4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4fb8:	f36f 0100 	bfc	r1, #0, #1
    4fbc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4fc0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4fc4:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4fc8:	7889      	ldrb	r1, [r1, #2]
    4fca:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4fce:	440b      	add	r3, r1
    4fd0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4fd4:	f042 0201 	orr.w	r2, r2, #1
    4fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4fdc:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4fde:	b662      	cpsie	i
    return true;
    4fe0:	2001      	movs	r0, #1
    4fe2:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4fe4:	3030      	adds	r0, #48	; 0x30
    4fe6:	f006 fe3b 	bl	bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4fea:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4fee:	4a11      	ldr	r2, [pc, #68]	; (5034 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4ff0:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4ff4:	7889      	ldrb	r1, [r1, #2]
    4ff6:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4ffa:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4ffc:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4ffe:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    5002:	f36f 0100 	bfc	r1, #0, #1
    5006:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    500a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    500e:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5012:	7889      	ldrb	r1, [r1, #2]
    5014:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    5018:	440b      	add	r3, r1
    return true;
    501a:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    501c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5020:	f36f 0200 	bfc	r2, #0, #1
    5024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5028:	71a5      	strb	r5, [r4, #6]
            break;
    502a:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    502c:	2001      	movs	r0, #1
    502e:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    5030:	2000      	movs	r0, #0
}
    5032:	bd38      	pop	{r3, r4, r5, pc}
    5034:	41008000 	.word	0x41008000

00005038 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    5038:	7983      	ldrb	r3, [r0, #6]
    503a:	2b0a      	cmp	r3, #10
    503c:	d00f      	beq.n	505e <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    503e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    5042:	b1a3      	cbz	r3, 506e <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    5044:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5048:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    504c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5050:	01db      	lsls	r3, r3, #7
    5052:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5056:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    505a:	615a      	str	r2, [r3, #20]
    505c:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    505e:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    5062:	079b      	lsls	r3, r3, #30
    5064:	d5eb      	bpl.n	503e <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    5066:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    506a:	2b00      	cmp	r3, #0
    506c:	d0ea      	beq.n	5044 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    506e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5072:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5076:	f993 3001 	ldrsb.w	r3, [r3, #1]
    507a:	01db      	lsls	r3, r3, #7
    507c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5080:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5084:	619a      	str	r2, [r3, #24]
    5086:	4770      	bx	lr

00005088 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    5088:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    508c:	e7d4      	b.n	5038 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    508e:	bf00      	nop

00005090 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    5090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5094:	9f08      	ldr	r7, [sp, #32]
    5096:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    509a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    509e:	4604      	mov	r4, r0
    50a0:	4616      	mov	r6, r2
    50a2:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    50a4:	463a      	mov	r2, r7
    50a6:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    50a8:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    50aa:	f7ff fd03 	bl	4ab4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    50ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
    50b2:	f006 fda3 	bl	bbfc <_ZN9ClearCore13StepGeneratorC1Ev>
    50b6:	4b5c      	ldr	r3, [pc, #368]	; (5228 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    50b8:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    50bc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    50c0:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    50c4:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    50c8:	6322      	str	r2, [r4, #48]	; 0x30
    50ca:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    50ce:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    50d0:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    50d2:	f8df a160 	ldr.w	sl, [pc, #352]	; 5234 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    50d6:	4f55      	ldr	r7, [pc, #340]	; (522c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    50d8:	2101      	movs	r1, #1
    50da:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    50de:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    50e2:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    50e4:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    50e8:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    50ec:	f04f 0e02 	mov.w	lr, #2
    50f0:	2200      	movs	r2, #0
    50f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    50f6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    50fa:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    50fe:	f04f 33ff 	mov.w	r3, #4294967295
    5102:	f04f 0e19 	mov.w	lr, #25
    5106:	f04f 0903 	mov.w	r9, #3
    510a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    510e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    5112:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    5116:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    511a:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    511e:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    5122:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    5126:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    512a:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    512e:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    5132:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    5136:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    513a:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    513e:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    5142:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    5146:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    514a:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    514e:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    5152:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    5156:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    515a:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    515e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    5162:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    5166:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    516a:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    516e:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    5172:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    5176:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    517a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    517e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    5182:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    5186:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    518a:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    518e:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    5192:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    5196:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    519a:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    519c:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    51a0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    51a4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    51a8:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    51aa:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    51ac:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    51b0:	2b04      	cmp	r3, #4
    51b2:	bf9c      	itt	ls
    51b4:	4a1e      	ldrls	r2, [pc, #120]	; (5230 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    51b6:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    51b8:	fbb6 f1f2 	udiv	r1, r6, r2
    51bc:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    51c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    51c4:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    51c6:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    51ca:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    51ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    51d2:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    51d6:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    51d8:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    51dc:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    51e0:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    51e4:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    51e6:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    51e8:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    51ec:	2a04      	cmp	r2, #4
    51ee:	bf9a      	itte	ls
    51f0:	4b0f      	ldrls	r3, [pc, #60]	; (5230 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    51f2:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    51f4:	2200      	movhi	r2, #0
    51f6:	fbb0 f3f2 	udiv	r3, r0, r2
    51fa:	fb02 0313 	mls	r3, r2, r3, r0
    51fe:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5200:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5204:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5208:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    520c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5210:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    5214:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5216:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    521a:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    521e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    5222:	4620      	mov	r0, r4
    5224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5228:	00022cd0 	.word	0x00022cd0
    522c:	00022cb4 	.word	0x00022cb4
    5230:	00022cac 	.word	0x00022cac
    5234:	c61c3c00 	.word	0xc61c3c00

00005238 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    5238:	7983      	ldrb	r3, [r0, #6]
    523a:	2b09      	cmp	r3, #9
    523c:	d003      	beq.n	5246 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    523e:	2b0b      	cmp	r3, #11
    5240:	d001      	beq.n	5246 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    5242:	2000      	movs	r0, #0
}
    5244:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5246:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    524a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    524e:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5252:	01db      	lsls	r3, r3, #7
    5254:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5258:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    525c:	b111      	cbz	r1, 5264 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    525e:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5260:	615a      	str	r2, [r3, #20]
    5262:	4770      	bx	lr
    5264:	2001      	movs	r0, #1
    5266:	619a      	str	r2, [r3, #24]
    5268:	4770      	bx	lr
    526a:	bf00      	nop

0000526c <_ZN9ClearCore11MotorDriver13MotorInBStateEb>:
    switch (m_mode) {
    526c:	7983      	ldrb	r3, [r0, #6]
    526e:	2b09      	cmp	r3, #9
    5270:	d111      	bne.n	5296 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x2a>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5272:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5276:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    527a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    527e:	01db      	lsls	r3, r3, #7
    5280:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5284:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5288:	b111      	cbz	r1, 5290 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x24>
            return true;
    528a:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    528c:	615a      	str	r2, [r3, #20]
    528e:	4770      	bx	lr
    5290:	2001      	movs	r0, #1
    5292:	619a      	str	r2, [r3, #24]
    5294:	4770      	bx	lr
            return false;
    5296:	2000      	movs	r0, #0
}
    5298:	4770      	bx	lr
    529a:	bf00      	nop

0000529c <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb>:
                                     bool blockUntilDone) {
    529c:	b470      	push	{r4, r5, r6}
    if (!EnableRequest() || m_inFault) {
    529e:	f890 4100 	ldrb.w	r4, [r0, #256]	; 0x100
    52a2:	b114      	cbz	r4, 52aa <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0xe>
    52a4:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
    52a8:	b10c      	cbz	r4, 52ae <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x12>
}
    52aa:	bc70      	pop	{r4, r5, r6}
    52ac:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    52ae:	b672      	cpsid	i
    if (m_enableTriggerActive) {
    52b0:	f890 4101 	ldrb.w	r4, [r0, #257]	; 0x101
    52b4:	b95c      	cbnz	r4, 52ce <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x32>
    else if (pulseCount) {
    52b6:	b989      	cbnz	r1, 52dc <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x40>
    m_enableTriggerPulseLenMs = time_ms;
    52b8:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
    52bc:	b662      	cpsie	i
    if (blockUntilDone) {
    52be:	2b00      	cmp	r3, #0
    52c0:	d0f3      	beq.n	52aa <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0xe>
        while (EnableTriggerPulseActive()) {
    52c2:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    52c6:	2b00      	cmp	r3, #0
    52c8:	d1fb      	bne.n	52c2 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x26>
}
    52ca:	bc70      	pop	{r4, r5, r6}
    52cc:	4770      	bx	lr
        m_enableTriggerPulseCount += (pulseCount * 2);
    52ce:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    52d2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    52d6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    52da:	e7ed      	b.n	52b8 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x1c>
        m_enableTriggerPulseStartMs = TimingMgr.Milliseconds();
    52dc:	4d0c      	ldr	r5, [pc, #48]	; (5310 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x74>)
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    52de:	4c0d      	ldr	r4, [pc, #52]	; (5314 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x78>)
    52e0:	682d      	ldr	r5, [r5, #0]
    52e2:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
    52e6:	692d      	ldr	r5, [r5, #16]
    52e8:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
        m_enableTriggerPulseCount = (pulseCount * 2);
    52ec:	0049      	lsls	r1, r1, #1
        m_enableTriggerActive = true;
    52ee:	2501      	movs	r5, #1
        m_enableTriggerPulseCount = (pulseCount * 2);
    52f0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
        m_enableTriggerActive = true;
    52f4:	f880 5101 	strb.w	r5, [r0, #257]	; 0x101
    52f8:	f3bf 8f5b 	dmb	ish
    52fc:	e854 1f00 	ldrex	r1, [r4]
    5300:	4071      	eors	r1, r6
    5302:	e844 1500 	strex	r5, r1, [r4]
    5306:	2d00      	cmp	r5, #0
    5308:	d1f8      	bne.n	52fc <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x60>
    530a:	f3bf 8f5b 	dmb	ish
    530e:	e7d3      	b.n	52b8 <_ZN9ClearCore11MotorDriver18EnableTriggerPulseEtmb+0x1c>
    5310:	20001bec 	.word	0x20001bec
    5314:	20001acc 	.word	0x20001acc

00005318 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    5318:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    531a:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    531e:	b083      	sub	sp, #12
    5320:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5322:	2b00      	cmp	r3, #0
    5324:	d171      	bne.n	540a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    5326:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    532a:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    532e:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    5332:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5336:	428a      	cmp	r2, r1
    5338:	d031      	beq.n	539e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    533a:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    533e:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5342:	2200      	movs	r2, #0
    5344:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5348:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    534c:	b358      	cbz	r0, 53a6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    534e:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5350:	b672      	cpsid	i
    if (wasDisabled && value) {
    5352:	b36b      	cbz	r3, 53b0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    5354:	b371      	cbz	r1, 53b4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    5356:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    535a:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    535c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5360:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5364:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5366:	79a3      	ldrb	r3, [r4, #6]
    5368:	2b0a      	cmp	r3, #10
    536a:	d02a      	beq.n	53c2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    536c:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5370:	428b      	cmp	r3, r1
    5372:	d035      	beq.n	53e0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    5374:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5378:	2900      	cmp	r1, #0
    537a:	d13b      	bne.n	53f4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    537c:	f3bf 8f5b 	dmb	ish
    5380:	4a2d      	ldr	r2, [pc, #180]	; (5438 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    5382:	43db      	mvns	r3, r3
    5384:	e852 0f00 	ldrex	r0, [r2]
    5388:	4018      	ands	r0, r3
    538a:	e842 0500 	strex	r5, r0, [r2]
    538e:	2d00      	cmp	r5, #0
    5390:	d1f8      	bne.n	5384 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    5392:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5396:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    539a:	b003      	add	sp, #12
    539c:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    539e:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    53a2:	2a00      	cmp	r2, #0
    53a4:	d133      	bne.n	540e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    53a6:	2900      	cmp	r1, #0
    53a8:	d0d1      	beq.n	534e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    53aa:	b672      	cpsid	i
    if (wasDisabled && value) {
    53ac:	2b00      	cmp	r3, #0
    53ae:	d1d1      	bne.n	5354 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    53b0:	2900      	cmp	r1, #0
    53b2:	d1d7      	bne.n	5364 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    53b4:	2300      	movs	r3, #0
    53b6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    53ba:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    53bc:	79a3      	ldrb	r3, [r4, #6]
    53be:	2b0a      	cmp	r3, #10
    53c0:	d1d4      	bne.n	536c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    53c2:	b919      	cbnz	r1, 53cc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    53c4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    53c8:	079a      	lsls	r2, r3, #30
    53ca:	d428      	bmi.n	541e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    53cc:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    53d0:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    53d2:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    53d6:	bf48      	it	mi
    53d8:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    53dc:	428b      	cmp	r3, r1
    53de:	d1c9      	bne.n	5374 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    53e0:	2d00      	cmp	r5, #0
    53e2:	d0d8      	beq.n	5396 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    53e4:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    53e8:	2b00      	cmp	r3, #0
    53ea:	d1d4      	bne.n	5396 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    53ec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    53f0:	2900      	cmp	r1, #0
    53f2:	d0c3      	beq.n	537c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    53f4:	f3bf 8f5b 	dmb	ish
    53f8:	4a0f      	ldr	r2, [pc, #60]	; (5438 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    53fa:	e852 0f00 	ldrex	r0, [r2]
    53fe:	4318      	orrs	r0, r3
    5400:	e842 0500 	strex	r5, r0, [r2]
    5404:	2d00      	cmp	r5, #0
    5406:	d0c4      	beq.n	5392 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    5408:	e7f7      	b.n	53fa <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    540a:	2300      	movs	r3, #0
    540c:	e78f      	b.n	532e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    540e:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    5410:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5414:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5418:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    541c:	e797      	b.n	534e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    541e:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5422:	9101      	str	r1, [sp, #4]
    5424:	f043 0310 	orr.w	r3, r3, #16
    5428:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    542c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5430:	f006 fc16 	bl	bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5434:	9901      	ldr	r1, [sp, #4]
    5436:	e7c9      	b.n	53cc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    5438:	20001acc 	.word	0x20001acc

0000543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    543c:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5440:	2b00      	cmp	r3, #0
    5442:	d04a      	beq.n	54da <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5444:	4a35      	ldr	r2, [pc, #212]	; (551c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    5446:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    544a:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    544c:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    544e:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    5450:	b98b      	cbnz	r3, 5476 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    5452:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5456:	2b01      	cmp	r3, #1
    5458:	d022      	beq.n	54a0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    545a:	2b02      	cmp	r3, #2
    545c:	d13b      	bne.n	54d6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    545e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    5462:	2b00      	cmp	r3, #0
    5464:	d145      	bne.n	54f2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    5466:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    546a:	2b00      	cmp	r3, #0
    546c:	d13c      	bne.n	54e8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    546e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5472:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5476:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    547a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    547e:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    5480:	428b      	cmp	r3, r1
    5482:	d32b      	bcc.n	54dc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    5484:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    5488:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    548c:	3b01      	subs	r3, #1
    548e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5492:	b94b      	cbnz	r3, 54a8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    5494:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    5498:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    549c:	2b01      	cmp	r3, #1
    549e:	d1dc      	bne.n	545a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    54a0:	2302      	movs	r3, #2
    54a2:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    54a6:	e7da      	b.n	545e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    54a8:	4b1d      	ldr	r3, [pc, #116]	; (5520 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    54aa:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    54ae:	f3bf 8f5b 	dmb	ish
    54b2:	e853 1f00 	ldrex	r1, [r3]
    54b6:	4051      	eors	r1, r2
    54b8:	e843 1e00 	strex	lr, r1, [r3]
    54bc:	f1be 0f00 	cmp.w	lr, #0
    54c0:	d1f7      	bne.n	54b2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    54c2:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    54c6:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    54ca:	2b01      	cmp	r3, #1
    54cc:	d1c5      	bne.n	545a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    54ce:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    54d2:	2b00      	cmp	r3, #0
    54d4:	d0e4      	beq.n	54a0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    54d6:	f85d fb04 	ldr.w	pc, [sp], #4
    54da:	4770      	bx	lr
    switch (m_clearFaultState) {
    54dc:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    54e0:	2b02      	cmp	r3, #2
    54e2:	d0bc      	beq.n	545e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    54e4:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    54e8:	3b01      	subs	r3, #1
    54ea:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    54ee:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    54f2:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    54f4:	f500 7394 	add.w	r3, r0, #296	; 0x128
    54f8:	f3bf 8f5b 	dmb	ish
    54fc:	e853 1f00 	ldrex	r1, [r3]
    5500:	f021 0120 	bic.w	r1, r1, #32
    5504:	e843 1e00 	strex	lr, r1, [r3]
    5508:	f1be 0f00 	cmp.w	lr, #0
    550c:	d1f6      	bne.n	54fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    550e:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5512:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    5516:	f85d fb04 	ldr.w	pc, [sp], #4
    551a:	bf00      	nop
    551c:	20001bec 	.word	0x20001bec
    5520:	20001acc 	.word	0x20001acc

00005524 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5524:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    5528:	b570      	push	{r4, r5, r6, lr}
    552a:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    552c:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5530:	2b00      	cmp	r3, #0
    5532:	d163      	bne.n	55fc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    5534:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    5538:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    553c:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5540:	bb39      	cbnz	r1, 5592 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    5542:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    5546:	b672      	cpsid	i
    if (wasDisabled && value) {
    5548:	b35b      	cbz	r3, 55a2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    554a:	b365      	cbz	r5, 55a6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    554c:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5550:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5552:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5556:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    555a:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    555c:	79a3      	ldrb	r3, [r4, #6]
    555e:	2b0a      	cmp	r3, #10
    5560:	d028      	beq.n	55b4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5562:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5566:	42ab      	cmp	r3, r5
    5568:	d033      	beq.n	55d2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    556a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    556e:	2d00      	cmp	r5, #0
    5570:	d139      	bne.n	55e6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5572:	f3bf 8f5b 	dmb	ish
    5576:	4a28      	ldr	r2, [pc, #160]	; (5618 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5578:	43db      	mvns	r3, r3
    557a:	e852 1f00 	ldrex	r1, [r2]
    557e:	4019      	ands	r1, r3
    5580:	e842 1000 	strex	r0, r1, [r2]
    5584:	2800      	cmp	r0, #0
    5586:	d1f8      	bne.n	557a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    5588:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    558c:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    5590:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    5592:	2500      	movs	r5, #0
    5594:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5598:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    559c:	b672      	cpsid	i
    if (wasDisabled && value) {
    559e:	2b00      	cmp	r3, #0
    55a0:	d1d3      	bne.n	554a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    55a2:	2d00      	cmp	r5, #0
    55a4:	d1d9      	bne.n	555a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    55a6:	2300      	movs	r3, #0
    55a8:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    55ac:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    55ae:	79a3      	ldrb	r3, [r4, #6]
    55b0:	2b0a      	cmp	r3, #10
    55b2:	d1d6      	bne.n	5562 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    55b4:	b91d      	cbnz	r5, 55be <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    55b6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    55ba:	079a      	lsls	r2, r3, #30
    55bc:	d420      	bmi.n	5600 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    55be:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    55c2:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    55c4:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    55c8:	bf48      	it	mi
    55ca:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    55ce:	42ab      	cmp	r3, r5
    55d0:	d1cb      	bne.n	556a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    55d2:	2e00      	cmp	r6, #0
    55d4:	d0da      	beq.n	558c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    55d6:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    55da:	2b00      	cmp	r3, #0
    55dc:	d1d6      	bne.n	558c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    55de:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    55e2:	2d00      	cmp	r5, #0
    55e4:	d0c5      	beq.n	5572 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    55e6:	f3bf 8f5b 	dmb	ish
    55ea:	4a0b      	ldr	r2, [pc, #44]	; (5618 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    55ec:	e852 1f00 	ldrex	r1, [r2]
    55f0:	4319      	orrs	r1, r3
    55f2:	e842 1000 	strex	r0, r1, [r2]
    55f6:	2800      	cmp	r0, #0
    55f8:	d0c6      	beq.n	5588 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    55fa:	e7f7      	b.n	55ec <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    55fc:	2300      	movs	r3, #0
    55fe:	e79d      	b.n	553c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5600:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5604:	f043 0310 	orr.w	r3, r3, #16
    5608:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    560c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5610:	f006 fb26 	bl	bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5614:	e7d3      	b.n	55be <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5616:	bf00      	nop
    5618:	20001acc 	.word	0x20001acc
    561c:	00000000 	.word	0x00000000

00005620 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    5620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    5622:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5626:	b903      	cbnz	r3, 562a <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    5628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    562a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    562c:	f7ff f992 	bl	4954 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5630:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5632:	4a98      	ldr	r2, [pc, #608]	; (5894 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    5634:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5638:	2b0a      	cmp	r3, #10
    563a:	bf08      	it	eq
    563c:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5640:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5644:	bf08      	it	eq
    5646:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    564a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    564e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5650:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5654:	bf18      	it	ne
    5656:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5658:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    565a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    565c:	f240 80df 	bls.w	581e <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5660:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5664:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5666:	4a8c      	ldr	r2, [pc, #560]	; (5898 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5668:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    566c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5670:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5674:	1c48      	adds	r0, r1, #1
    5676:	d012      	beq.n	569e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5678:	4888      	ldr	r0, [pc, #544]	; (589c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    567a:	f003 fdf7 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    567e:	6803      	ldr	r3, [r0, #0]
    5680:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5682:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5684:	4798      	blx	r3
    5686:	2809      	cmp	r0, #9
    5688:	f000 8248 	beq.w	5b1c <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    568c:	4628      	mov	r0, r5
    568e:	f7ff f8e7 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    5692:	1c01      	adds	r1, r0, #0
    5694:	bf18      	it	ne
    5696:	2101      	movne	r1, #1
    5698:	4620      	mov	r0, r4
    569a:	f7ff fe3d 	bl	5318 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    569e:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    56a2:	1c4a      	adds	r2, r1, #1
    56a4:	d016      	beq.n	56d4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    56a6:	79a3      	ldrb	r3, [r4, #6]
    56a8:	2b0a      	cmp	r3, #10
    56aa:	d039      	beq.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    56ac:	487b      	ldr	r0, [pc, #492]	; (589c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    56ae:	f003 fddd 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    56b2:	6803      	ldr	r3, [r0, #0]
    56b4:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    56b6:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    56b8:	4798      	blx	r3
    56ba:	2809      	cmp	r0, #9
    56bc:	f000 80d0 	beq.w	5860 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    56c0:	4628      	mov	r0, r5
    56c2:	f7ff f8cd 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    56c6:	79a3      	ldrb	r3, [r4, #6]
    56c8:	2b09      	cmp	r3, #9
    56ca:	f000 80d3 	beq.w	5874 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    56ce:	2b0b      	cmp	r3, #11
    56d0:	f000 80d0 	beq.w	5874 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    56d4:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    56d8:	1c4b      	adds	r3, r1, #1
    56da:	d021      	beq.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    56dc:	79a3      	ldrb	r3, [r4, #6]
    56de:	2b0a      	cmp	r3, #10
    56e0:	d01e      	beq.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    56e2:	486e      	ldr	r0, [pc, #440]	; (589c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    56e4:	f003 fdc2 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    56e8:	6803      	ldr	r3, [r0, #0]
    56ea:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    56ec:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    56ee:	4798      	blx	r3
    56f0:	2809      	cmp	r0, #9
    56f2:	f000 8239 	beq.w	5b68 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    56f6:	4628      	mov	r0, r5
    56f8:	f7ff f8b2 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    56fc:	79a3      	ldrb	r3, [r4, #6]
    56fe:	2b09      	cmp	r3, #9
    5700:	d10e      	bne.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5702:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5706:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    570a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    570e:	01db      	lsls	r3, r3, #7
    5710:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5714:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5718:	2800      	cmp	r0, #0
    571a:	f000 81d4 	beq.w	5ac6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    571e:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    5720:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    5724:	1c4f      	adds	r7, r1, #1
    5726:	d010      	beq.n	574a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5728:	485c      	ldr	r0, [pc, #368]	; (589c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    572a:	f003 fd9f 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    572e:	6803      	ldr	r3, [r0, #0]
    5730:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5732:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5734:	4798      	blx	r3
    5736:	2809      	cmp	r0, #9
    5738:	f000 817d 	beq.w	5a36 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    573c:	682b      	ldr	r3, [r5, #0]
    573e:	4628      	mov	r0, r5
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5744:	2804      	cmp	r0, #4
    5746:	f000 8176 	beq.w	5a36 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    574a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    574e:	1c4e      	adds	r6, r1, #1
    5750:	d015      	beq.n	577e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5752:	4852      	ldr	r0, [pc, #328]	; (589c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5754:	f003 fd8a 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5758:	6803      	ldr	r3, [r0, #0]
    575a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    575c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    575e:	4798      	blx	r3
    5760:	2809      	cmp	r0, #9
    5762:	f000 81e6 	beq.w	5b32 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5766:	4628      	mov	r0, r5
    5768:	f7ff f87a 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    576c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5770:	fab0 f080 	clz	r0, r0
    5774:	0940      	lsrs	r0, r0, #5
    5776:	f360 03c3 	bfi	r3, r0, #3, #1
    577a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    577e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    5782:	1c4d      	adds	r5, r1, #1
    5784:	d015      	beq.n	57b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5786:	4845      	ldr	r0, [pc, #276]	; (589c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5788:	f003 fd70 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    578c:	6803      	ldr	r3, [r0, #0]
    578e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5790:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5792:	4798      	blx	r3
    5794:	2809      	cmp	r0, #9
    5796:	f000 81d1 	beq.w	5b3c <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    579a:	4628      	mov	r0, r5
    579c:	f7ff f860 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    57a0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    57a4:	fab0 f080 	clz	r0, r0
    57a8:	0940      	lsrs	r0, r0, #5
    57aa:	f360 1304 	bfi	r3, r0, #4, #1
    57ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    57b2:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    57b6:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    57ba:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    57be:	1c48      	adds	r0, r1, #1
    57c0:	f000 8132 	beq.w	5a28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    57c4:	4835      	ldr	r0, [pc, #212]	; (589c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    57c6:	f003 fd51 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    57ca:	6803      	ldr	r3, [r0, #0]
    57cc:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    57ce:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    57d0:	4798      	blx	r3
    57d2:	2809      	cmp	r0, #9
    57d4:	f000 81c0 	beq.w	5b58 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    57d8:	4638      	mov	r0, r7
    57da:	f7ff f841 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    57de:	fab0 f780 	clz	r7, r0
    57e2:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    57e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    57e8:	2b00      	cmp	r3, #0
    57ea:	f040 8131 	bne.w	5a50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    57ee:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    57f2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    57f6:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    57fa:	2900      	cmp	r1, #0
    57fc:	d152      	bne.n	58a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    57fe:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    5802:	0792      	lsls	r2, r2, #30
    5804:	d54e      	bpl.n	58a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    5806:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    580a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    580e:	2800      	cmp	r0, #0
    5810:	f000 8152 	beq.w	5ab8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    5814:	06d7      	lsls	r7, r2, #27
    5816:	d549      	bpl.n	58ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    5818:	f046 0604 	orr.w	r6, r6, #4
    581c:	e046      	b.n	58ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    581e:	07aa      	lsls	r2, r5, #30
    5820:	f000 8161 	beq.w	5ae6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    5824:	2333      	movs	r3, #51	; 0x33
    5826:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5828:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    582c:	2201      	movs	r2, #1
    582e:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5832:	b29a      	uxth	r2, r3
    5834:	3200      	adds	r2, #0
    5836:	bf18      	it	ne
    5838:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    583a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    583e:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5842:	06eb      	lsls	r3, r5, #27
    5844:	f100 8158 	bmi.w	5af8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5848:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    584c:	2b00      	cmp	r3, #0
    584e:	f040 810f 	bne.w	5a70 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5852:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    585a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    585e:	e707      	b.n	5670 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5860:	4b0f      	ldr	r3, [pc, #60]	; (58a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5862:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5866:	6818      	ldr	r0, [r3, #0]
    5868:	f009 fe9c 	bl	f5a4 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    586c:	79a3      	ldrb	r3, [r4, #6]
    586e:	2b09      	cmp	r3, #9
    5870:	f47f af2d 	bne.w	56ce <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5874:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5878:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    587c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5880:	01db      	lsls	r3, r3, #7
    5882:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5886:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    588a:	2800      	cmp	r0, #0
    588c:	f000 8119 	beq.w	5ac2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    5890:	615a      	str	r2, [r3, #20]
    5892:	e71f      	b.n	56d4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5894:	00022d18 	.word	0x00022d18
    5898:	c61c3c00 	.word	0xc61c3c00
    589c:	200019d4 	.word	0x200019d4
    58a0:	20001efc 	.word	0x20001efc
    58a4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    58a8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    58ac:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    58b0:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    58b4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    58b8:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    58bc:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    58c0:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    58c4:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    58c8:	2b00      	cmp	r3, #0
    58ca:	f000 80ab 	beq.w	5a24 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    58ce:	1f98      	subs	r0, r3, #6
    58d0:	bf18      	it	ne
    58d2:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    58d4:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    58d8:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    58dc:	2a00      	cmp	r2, #0
    58de:	f000 809b 	beq.w	5a18 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    58e2:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    58e6:	b111      	cbz	r1, 58ee <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    58e8:	07af      	lsls	r7, r5, #30
    58ea:	f140 80df 	bpl.w	5aac <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    58ee:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    58f2:	2b03      	cmp	r3, #3
    58f4:	d071      	beq.n	59da <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    58f6:	f015 0302 	ands.w	r3, r5, #2
    58fa:	f040 80ce 	bne.w	5a9a <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    58fe:	2900      	cmp	r1, #0
    5900:	d06b      	beq.n	59da <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5902:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    5906:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    590a:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    590e:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    5912:	2b00      	cmp	r3, #0
    5914:	d065      	beq.n	59e2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    5916:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    591a:	2b00      	cmp	r3, #0
    591c:	f340 8113 	ble.w	5b46 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    5920:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5924:	2201      	movs	r2, #1
            m_enableCounter--;
    5926:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5928:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    592c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5930:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    5934:	b11b      	cbz	r3, 593e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    5936:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    5938:	bf48      	it	mi
    593a:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    593e:	1c32      	adds	r2, r6, #0
    5940:	bf18      	it	ne
    5942:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5944:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5948:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    594c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5950:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5954:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5958:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    595c:	f3bf 8f5b 	dmb	ish
    5960:	e852 1f00 	ldrex	r1, [r2]
    5964:	4319      	orrs	r1, r3
    5966:	e842 1000 	strex	r0, r1, [r2]
    596a:	2800      	cmp	r0, #0
    596c:	d1f8      	bne.n	5960 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    596e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5972:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5976:	f3bf 8f5b 	dmb	ish
    597a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    597e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5982:	e853 2f00 	ldrex	r2, [r3]
    5986:	432a      	orrs	r2, r5
    5988:	e843 2100 	strex	r1, r2, [r3]
    598c:	2900      	cmp	r1, #0
    598e:	d1f8      	bne.n	5982 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    5990:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5994:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    5996:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    599a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    599e:	2b0a      	cmp	r3, #10
    59a0:	f47f ae42 	bne.w	5628 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    59a4:	f104 0530 	add.w	r5, r4, #48	; 0x30
    59a8:	4628      	mov	r0, r5
    59aa:	f005 feb1 	bl	b710 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    59ae:	4628      	mov	r0, r5
    59b0:	f006 f9d2 	bl	bd58 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    59b4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    59b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    59ba:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    59bc:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    59c0:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    59c2:	4282      	cmp	r2, r0
    59c4:	f43f ae30 	beq.w	5628 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    59c8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    59cc:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    59d0:	680b      	ldr	r3, [r1, #0]
    59d2:	4213      	tst	r3, r2
    59d4:	d1fc      	bne.n	59d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    59d6:	6028      	str	r0, [r5, #0]
    59d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    59da:	1c03      	adds	r3, r0, #0
    59dc:	bf18      	it	ne
    59de:	2301      	movne	r3, #1
    59e0:	e78f      	b.n	5902 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    59e2:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    59e6:	2a00      	cmp	r2, #0
    59e8:	d03a      	beq.n	5a60 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    59ea:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    59ee:	b933      	cbnz	r3, 59fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    59f0:	b938      	cbnz	r0, 5a02 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    59f2:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    59f6:	2204      	movs	r2, #4
    59f8:	f362 258c 	bfi	r5, r2, #10, #3
    59fc:	e79a      	b.n	5934 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    59fe:	2800      	cmp	r0, #0
    5a00:	d063      	beq.n	5aca <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    5a02:	f015 0302 	ands.w	r3, r5, #2
    5a06:	d1f6      	bne.n	59f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    5a08:	2203      	movs	r2, #3
    5a0a:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    5a0e:	f363 1504 	bfi	r5, r3, #4, #1
    5a12:	f005 0302 	and.w	r3, r5, #2
    5a16:	e78d      	b.n	5934 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5a18:	f362 0500 	bfi	r5, r2, #0, #1
    5a1c:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5a20:	4613      	mov	r3, r2
    5a22:	e76e      	b.n	5902 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5a24:	4618      	mov	r0, r3
    5a26:	e755      	b.n	58d4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    5a28:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5a2c:	bb93      	cbnz	r3, 5a94 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    5a2e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    5a32:	461f      	mov	r7, r3
    5a34:	e6dd      	b.n	57f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    5a36:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    5a3a:	b381      	cbz	r1, 5a9e <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    5a3c:	682b      	ldr	r3, [r5, #0]
    5a3e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    5a42:	695b      	ldr	r3, [r3, #20]
    5a44:	b109      	cbz	r1, 5a4a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5a46:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    5a4a:	4628      	mov	r0, r5
    5a4c:	4798      	blx	r3
    5a4e:	e67c      	b.n	574a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5a50:	b307      	cbz	r7, 5a94 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    5a52:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    5a56:	2900      	cmp	r1, #0
    5a58:	f000 80ab 	beq.w	5bb2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    5a5c:	460f      	mov	r7, r1
    5a5e:	e6c8      	b.n	57f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5a60:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    5a64:	07aa      	lsls	r2, r5, #30
    5a66:	f57f af6a 	bpl.w	593e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    5a6a:	f046 0610 	orr.w	r6, r6, #16
    5a6e:	e762      	b.n	5936 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5a70:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    5a74:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5a78:	4073      	eors	r3, r6
    5a7a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    5a7c:	4291      	cmp	r1, r2
    5a7e:	f000 80a4 	beq.w	5bca <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5a82:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    5a86:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5a8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5a8e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5a92:	e5ed      	b.n	5670 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    5a94:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    5a98:	e6ab      	b.n	57f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5a9a:	2300      	movs	r3, #0
    5a9c:	e731      	b.n	5902 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    5a9e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    5aa2:	682b      	ldr	r3, [r5, #0]
    5aa4:	2a01      	cmp	r2, #1
    5aa6:	695b      	ldr	r3, [r3, #20]
    5aa8:	d1cf      	bne.n	5a4a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5aaa:	e7cc      	b.n	5a46 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5aac:	2801      	cmp	r0, #1
    5aae:	f47f af1e 	bne.w	58ee <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5ab2:	f045 0501 	orr.w	r5, r5, #1
    5ab6:	e71c      	b.n	58f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    5ab8:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    5aba:	bf48      	it	mi
    5abc:	f046 0602 	orrmi.w	r6, r6, #2
    5ac0:	e6f4      	b.n	58ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5ac2:	619a      	str	r2, [r3, #24]
    5ac4:	e606      	b.n	56d4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5ac6:	619a      	str	r2, [r3, #24]
    5ac8:	e62a      	b.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    5aca:	2302      	movs	r3, #2
    5acc:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    5ad0:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    5ad4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5ad8:	f006 f8c2 	bl	bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    5adc:	f046 0620 	orr.w	r6, r6, #32
    5ae0:	f005 0302 	and.w	r3, r5, #2
    5ae4:	e726      	b.n	5934 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    5ae6:	f004 f9e1 	bl	9eac <Milliseconds>
    5aea:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    5aee:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5af0:	2803      	cmp	r0, #3
    5af2:	f63f ae97 	bhi.w	5824 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    5af6:	e6a4      	b.n	5842 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5af8:	f004 f9d8 	bl	9eac <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    5afc:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5b00:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    5b04:	2b00      	cmp	r3, #0
    5b06:	d03a      	beq.n	5b7e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    5b08:	2330      	movs	r3, #48	; 0x30
    5b0a:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    5b0c:	2200      	movs	r2, #0
    5b0e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    5b12:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    5b16:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    5b1a:	e697      	b.n	584c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    5b1c:	4b54      	ldr	r3, [pc, #336]	; (5c70 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    5b1e:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5b22:	6818      	ldr	r0, [r3, #0]
    5b24:	f009 fd3e 	bl	f5a4 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    5b28:	4601      	mov	r1, r0
    5b2a:	4620      	mov	r0, r4
    5b2c:	f7ff fbf4 	bl	5318 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    5b30:	e5b5      	b.n	569e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    5b32:	682b      	ldr	r3, [r5, #0]
    5b34:	4628      	mov	r0, r5
    5b36:	691b      	ldr	r3, [r3, #16]
    5b38:	4798      	blx	r3
    5b3a:	e617      	b.n	576c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    5b3c:	682b      	ldr	r3, [r5, #0]
    5b3e:	4628      	mov	r0, r5
    5b40:	691b      	ldr	r3, [r3, #16]
    5b42:	4798      	blx	r3
    5b44:	e62c      	b.n	57a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    5b46:	2201      	movs	r2, #1
            m_isEnabling = false;
    5b48:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    5b4a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    5b4e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    5b52:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    5b56:	e748      	b.n	59ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    5b58:	683b      	ldr	r3, [r7, #0]
    5b5a:	4638      	mov	r0, r7
    5b5c:	691b      	ldr	r3, [r3, #16]
    5b5e:	4798      	blx	r3
    5b60:	fab0 f780 	clz	r7, r0
    5b64:	097f      	lsrs	r7, r7, #5
    5b66:	e63d      	b.n	57e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    5b68:	4b41      	ldr	r3, [pc, #260]	; (5c70 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    5b6a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5b6e:	6818      	ldr	r0, [r3, #0]
    5b70:	f009 fd18 	bl	f5a4 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5b74:	79a3      	ldrb	r3, [r4, #6]
    5b76:	2b09      	cmp	r3, #9
    5b78:	f43f adc3 	beq.w	5702 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    5b7c:	e5d0      	b.n	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    5b7e:	06ad      	lsls	r5, r5, #26
    5b80:	f57f ae62 	bpl.w	5848 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5b84:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5b88:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5b8c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5b90:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    5b94:	8bf8      	ldrh	r0, [r7, #30]
    5b96:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    5b9a:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    5b9e:	8bbd      	ldrh	r5, [r7, #28]
    5ba0:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    5ba4:	b9d0      	cbnz	r0, 5bdc <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    5ba6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    5baa:	2201      	movs	r2, #1
    5bac:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    5bb0:	e64c      	b.n	584c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    5bb2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5bb6:	f006 f86f 	bl	bc98 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    5bba:	2301      	movs	r3, #1
    5bbc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    5bc0:	f046 0608 	orr.w	r6, r6, #8
    5bc4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5bc8:	e613      	b.n	57f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    5bca:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    5bce:	2a00      	cmp	r2, #0
    5bd0:	f43f ad49 	beq.w	5666 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    5bd4:	3a01      	subs	r2, #1
    5bd6:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    5bda:	e549      	b.n	5670 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    5bdc:	ee07 1a90 	vmov	s15, r1
    5be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    5be4:	ee07 2a90 	vmov	s15, r2
    5be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    5bec:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    5bf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5bf4:	ee16 0a90 	vmov	r0, s13
    5bf8:	f015 ff94 	bl	1bb24 <__aeabi_f2d>
    5bfc:	a318      	add	r3, pc, #96	; (adr r3, 5c60 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    5bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c02:	f015 fe2f 	bl	1b864 <__aeabi_dsub>
    5c06:	a318      	add	r3, pc, #96	; (adr r3, 5c68 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    5c08:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c0c:	f015 ffde 	bl	1bbcc <__aeabi_dmul>
    5c10:	f016 fabe 	bl	1c190 <__aeabi_d2f>
    5c14:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    5c18:	b11e      	cbz	r6, 5c22 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5c1a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 5c74 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    5c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5c22:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5c26:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5c2a:	2b02      	cmp	r3, #2
    5c2c:	d004      	beq.n	5c38 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    5c2e:	2302      	movs	r3, #2
    5c30:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    5c34:	2300      	movs	r3, #0
    5c36:	e7b8      	b.n	5baa <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    5c38:	ee17 0a90 	vmov	r0, s15
    5c3c:	f015 ff72 	bl	1bb24 <__aeabi_f2d>
    5c40:	2200      	movs	r2, #0
    5c42:	4b0d      	ldr	r3, [pc, #52]	; (5c78 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    5c44:	f015 fe0e 	bl	1b864 <__aeabi_dsub>
    5c48:	4602      	mov	r2, r0
    5c4a:	460b      	mov	r3, r1
    5c4c:	f015 fe0c 	bl	1b868 <__adddf3>
    5c50:	f016 fa9e 	bl	1c190 <__aeabi_d2f>
    5c54:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    5c58:	e7e9      	b.n	5c2e <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    5c5a:	bf00      	nop
    5c5c:	f3af 8000 	nop.w
    5c60:	9999999a 	.word	0x9999999a
    5c64:	3fa99999 	.word	0x3fa99999
    5c68:	71c71c72 	.word	0x71c71c72
    5c6c:	405bc71c 	.word	0x405bc71c
    5c70:	20001efc 	.word	0x20001efc
    5c74:	42c80000 	.word	0x42c80000
    5c78:	40490000 	.word	0x40490000

00005c7c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    5c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c80:	4604      	mov	r4, r0
    5c82:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    5c84:	4690      	mov	r8, r2
    5c86:	2a00      	cmp	r2, #0
    5c88:	d154      	bne.n	5d34 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    5c8a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    5c8c:	1b4d      	subs	r5, r1, r5
    5c8e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    5c90:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    5c94:	2b00      	cmp	r3, #0
    5c96:	d04b      	beq.n	5d30 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5c98:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5c9c:	f043 0301 	orr.w	r3, r3, #1
    5ca0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5ca4:	2600      	movs	r6, #0
    5ca6:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5caa:	b933      	cbnz	r3, 5cba <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5cac:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5cb0:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5cb4:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5cb6:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5cba:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5cbe:	1c48      	adds	r0, r1, #1
    5cc0:	d016      	beq.n	5cf0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5cc2:	4829      	ldr	r0, [pc, #164]	; (5d68 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    5cc4:	f003 fad2 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5cc8:	6803      	ldr	r3, [r0, #0]
    5cca:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5ccc:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5cce:	4798      	blx	r3
    5cd0:	2809      	cmp	r0, #9
    5cd2:	d040      	beq.n	5d56 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    5cd4:	4648      	mov	r0, r9
    5cd6:	f7fe fdc3 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    5cda:	fab0 f080 	clz	r0, r0
    5cde:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5ce0:	b130      	cbz	r0, 5cf0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5ce2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5ce6:	f043 0308 	orr.w	r3, r3, #8
    5cea:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5cee:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5cf0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5cf4:	b16d      	cbz	r5, 5d12 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    5cf6:	06d9      	lsls	r1, r3, #27
    5cf8:	d426      	bmi.n	5d48 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    5cfa:	b196      	cbz	r6, 5d22 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    5cfc:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    5cfe:	4642      	mov	r2, r8
    5d00:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    5d02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    5d06:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5d0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    5d0e:	f005 bc7b 	b.w	b608 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5d12:	071a      	lsls	r2, r3, #28
    5d14:	d5f1      	bpl.n	5cfa <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5d16:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5d1a:	f043 0302 	orr.w	r3, r3, #2
    5d1e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5d22:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5d26:	079b      	lsls	r3, r3, #30
    5d28:	d406      	bmi.n	5d38 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    5d2a:	2000      	movs	r0, #0
    5d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5d30:	2601      	movs	r6, #1
    5d32:	e7b8      	b.n	5ca6 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    5d34:	0fcd      	lsrs	r5, r1, #31
    5d36:	e7ab      	b.n	5c90 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    5d38:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5d3c:	2100      	movs	r1, #0
    5d3e:	f005 ffab 	bl	bc98 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5d42:	2000      	movs	r0, #0
    5d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5d48:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5d4c:	f043 0304 	orr.w	r3, r3, #4
    5d50:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5d54:	e7e5      	b.n	5d22 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    5d56:	f8d9 3000 	ldr.w	r3, [r9]
    5d5a:	4648      	mov	r0, r9
    5d5c:	691b      	ldr	r3, [r3, #16]
    5d5e:	4798      	blx	r3
    5d60:	fab0 f080 	clz	r0, r0
    5d64:	0940      	lsrs	r0, r0, #5
    5d66:	e7bb      	b.n	5ce0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    5d68:	200019d4 	.word	0x200019d4

00005d6c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    5d6c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5d70:	f7ff bf84 	b.w	5c7c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00005d74 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    5d76:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5d7a:	4604      	mov	r4, r0
    5d7c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d04a      	beq.n	5e18 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5d82:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    5d86:	f043 0301 	orr.w	r3, r3, #1
    5d8a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    5d8e:	2500      	movs	r5, #0
    5d90:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5d94:	b933      	cbnz	r3, 5da4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5d96:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5d9a:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5d9e:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5da0:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5da4:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5da8:	1c48      	adds	r0, r1, #1
    5daa:	d016      	beq.n	5dda <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5dac:	4826      	ldr	r0, [pc, #152]	; (5e48 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    5dae:	f003 fa5d 	bl	926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5db2:	6803      	ldr	r3, [r0, #0]
    5db4:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5db6:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5db8:	4798      	blx	r3
    5dba:	2809      	cmp	r0, #9
    5dbc:	d03c      	beq.n	5e38 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    5dbe:	4638      	mov	r0, r7
    5dc0:	f7fe fd4e 	bl	4860 <_ZN9ClearCore9DigitalIn5StateEv>
    5dc4:	fab0 f080 	clz	r0, r0
    5dc8:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5dca:	b130      	cbz	r0, 5dda <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5dcc:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5dd0:	f043 0308 	orr.w	r3, r3, #8
    5dd4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5dd8:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5dda:	2e00      	cmp	r6, #0
    5ddc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5de0:	da0c      	bge.n	5dfc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    5de2:	06d9      	lsls	r1, r3, #27
    5de4:	d421      	bmi.n	5e2a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    5de6:	b18d      	cbz	r5, 5e0c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    5de8:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    5dea:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    5dec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    5df0:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5df4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    5df8:	f005 bc40 	b.w	b67c <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5dfc:	071a      	lsls	r2, r3, #28
    5dfe:	d5f2      	bpl.n	5de6 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5e00:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5e04:	f043 0302 	orr.w	r3, r3, #2
    5e08:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5e0c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5e10:	079b      	lsls	r3, r3, #30
    5e12:	d403      	bmi.n	5e1c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    5e14:	2000      	movs	r0, #0
    5e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    5e18:	2501      	movs	r5, #1
    5e1a:	e7b9      	b.n	5d90 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    5e1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5e20:	2100      	movs	r1, #0
    5e22:	f005 ff39 	bl	bc98 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5e26:	2000      	movs	r0, #0
    5e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5e2a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5e2e:	f043 0304 	orr.w	r3, r3, #4
    5e32:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5e36:	e7e9      	b.n	5e0c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    5e38:	683b      	ldr	r3, [r7, #0]
    5e3a:	4638      	mov	r0, r7
    5e3c:	691b      	ldr	r3, [r3, #16]
    5e3e:	4798      	blx	r3
    5e40:	fab0 f080 	clz	r0, r0
    5e44:	0940      	lsrs	r0, r0, #5
    5e46:	e7c0      	b.n	5dca <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    5e48:	200019d4 	.word	0x200019d4

00005e4c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    5e4c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5e50:	f7ff bf90 	b.w	5d74 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00005e54 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5e56:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5e5a:	4dbc      	ldr	r5, [pc, #752]	; (614c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5e5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5e60:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5e64:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5e68:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5e6a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5e6c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5e70:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    5e74:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5e78:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5e7c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5e7e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    5e80:	2100      	movs	r1, #0
    5e82:	f7ff fa49 	bl	5318 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    5e86:	4631      	mov	r1, r6
    5e88:	4620      	mov	r0, r4
    5e8a:	f7fe fcfd 	bl	4888 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    5e8e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5e92:	f993 2001 	ldrsb.w	r2, [r3, #1]
    5e96:	7898      	ldrb	r0, [r3, #2]
    5e98:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    5e9c:	1813      	adds	r3, r2, r0
    5e9e:	2700      	movs	r7, #0
    5ea0:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5ea4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5ea8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5eac:	788e      	ldrb	r6, [r1, #2]
    5eae:	01db      	lsls	r3, r3, #7
    5eb0:	18e9      	adds	r1, r5, r3
    5eb2:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5eb4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5eb8:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    5ebc:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    5ec0:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    5ec2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    5ec6:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5ec8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    5ecc:	f010 0f01 	tst.w	r0, #1
    5ed0:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    5ed4:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5ed8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5edc:	bf14      	ite	ne
    5ede:	f360 1107 	bfine	r1, r0, #4, #4
    5ee2:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5ee6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5eea:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5eee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    5ef2:	07f0      	lsls	r0, r6, #31
    5ef4:	f04f 0105 	mov.w	r1, #5
    5ef8:	bf4c      	ite	mi
    5efa:	f361 1207 	bfimi	r2, r1, #4, #4
    5efe:	f361 0203 	bfipl	r2, r1, #0, #4
    5f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5f06:	6823      	ldr	r3, [r4, #0]
    5f08:	4a91      	ldr	r2, [pc, #580]	; (6150 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    5f0a:	685b      	ldr	r3, [r3, #4]
    5f0c:	4293      	cmp	r3, r2
    5f0e:	f040 8119 	bne.w	6144 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    5f12:	79a3      	ldrb	r3, [r4, #6]
    5f14:	2b09      	cmp	r3, #9
    5f16:	d022      	beq.n	5f5e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    5f18:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5f1c:	f005 fea0 	bl	bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5f20:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5f24:	4b89      	ldr	r3, [pc, #548]	; (614c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5f26:	f991 2001 	ldrsb.w	r2, [r1, #1]
    5f2a:	7889      	ldrb	r1, [r1, #2]
    5f2c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5f30:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5f32:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5f34:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    5f38:	f36f 0100 	bfc	r1, #0, #1
    5f3c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5f40:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    5f44:	f992 1001 	ldrsb.w	r1, [r2, #1]
    5f48:	7892      	ldrb	r2, [r2, #2]
    5f4a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    5f4e:	4413      	add	r3, r2
    5f50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5f54:	f36f 0200 	bfc	r2, #0, #1
    5f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5f5c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5f5e:	68e3      	ldr	r3, [r4, #12]
    5f60:	6922      	ldr	r2, [r4, #16]
    5f62:	01db      	lsls	r3, r3, #7
    5f64:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    5f68:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    5f6c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5f70:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5f74:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    5f78:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5f7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5f80:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5f82:	bf14      	ite	ne
    5f84:	f36f 1007 	bfcne	r0, #4, #4
    5f88:	f365 0003 	bfieq	r0, r5, #0, #4
    5f8c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5f90:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5f94:	496f      	ldr	r1, [pc, #444]	; (6154 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5f96:	f042 0201 	orr.w	r2, r2, #1
    5f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5f9e:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    5fa2:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    5fa6:	681a      	ldr	r2, [r3, #0]
    5fa8:	f36f 0241 	bfc	r2, #1, #1
    5fac:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5fae:	691a      	ldr	r2, [r3, #16]
    5fb0:	0792      	lsls	r2, r2, #30
    5fb2:	d4fc      	bmi.n	5fae <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    5fb4:	681a      	ldr	r2, [r3, #0]
    5fb6:	f042 0201 	orr.w	r2, r2, #1
    5fba:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    5fbc:	691a      	ldr	r2, [r3, #16]
    5fbe:	f012 0201 	ands.w	r2, r2, #1
    5fc2:	d1fb      	bne.n	5fbc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5fc4:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    5fc6:	4964      	ldr	r1, [pc, #400]	; (6158 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5fc8:	f362 1505 	bfi	r5, r2, #4, #2
    5fcc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    5fce:	681d      	ldr	r5, [r3, #0]
    5fd0:	f362 5514 	bfi	r5, r2, #20, #1
    5fd4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    5fd6:	681d      	ldr	r5, [r3, #0]
    5fd8:	f362 5555 	bfi	r5, r2, #21, #1
    5fdc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    5fde:	681d      	ldr	r5, [r3, #0]
    5fe0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    5fe4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    5fe6:	681d      	ldr	r5, [r3, #0]
    5fe8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    5fec:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    5fee:	681d      	ldr	r5, [r3, #0]
    5ff0:	f362 25cb 	bfi	r5, r2, #11, #1
    5ff4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    5ff6:	681d      	ldr	r5, [r3, #0]
    5ff8:	f362 250a 	bfi	r5, r2, #8, #3
    5ffc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    5ffe:	681d      	ldr	r5, [r3, #0]
    6000:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    6004:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    6006:	681d      	ldr	r5, [r3, #0]
    6008:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    600c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    600e:	681d      	ldr	r5, [r3, #0]
    6010:	f362 0583 	bfi	r5, r2, #2, #2
    6014:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    6016:	88dd      	ldrh	r5, [r3, #6]
    6018:	2605      	movs	r6, #5
    601a:	f366 0502 	bfi	r5, r6, #0, #3
    601e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    6020:	88dd      	ldrh	r5, [r3, #6]
    6022:	f045 0520 	orr.w	r5, r5, #32
    6026:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    6028:	88dd      	ldrh	r5, [r3, #6]
    602a:	f362 350c 	bfi	r5, r2, #12, #1
    602e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    6030:	88dd      	ldrh	r5, [r3, #6]
    6032:	f362 354d 	bfi	r5, r2, #13, #1
    6036:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    6038:	88dd      	ldrh	r5, [r3, #6]
    603a:	f362 2508 	bfi	r5, r2, #8, #1
    603e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    6040:	88dd      	ldrh	r5, [r3, #6]
    6042:	f045 0510 	orr.w	r5, r5, #16
    6046:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    6048:	780d      	ldrb	r5, [r1, #0]
    604a:	f362 0541 	bfi	r5, r2, #1, #1
    604e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    6050:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    6054:	688e      	ldr	r6, [r1, #8]
    6056:	78d5      	ldrb	r5, [r2, #3]
    6058:	2201      	movs	r2, #1
    605a:	40aa      	lsls	r2, r5
    605c:	4316      	orrs	r6, r2
    605e:	608e      	str	r6, [r1, #8]
    6060:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    6062:	698e      	ldr	r6, [r1, #24]
    6064:	00bf      	lsls	r7, r7, #2
    6066:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    606a:	4316      	orrs	r6, r2
    606c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    6070:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    6072:	f005 0607 	and.w	r6, r5, #7
    6076:	f8de c01c 	ldr.w	ip, [lr, #28]
    607a:	00b7      	lsls	r7, r6, #2
    607c:	2604      	movs	r6, #4
    607e:	40be      	lsls	r6, r7
    6080:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    6084:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    6088:	68ce      	ldr	r6, [r1, #12]
    608a:	b292      	uxth	r2, r2
    608c:	f362 060f 	bfi	r6, r2, #0, #16
    6090:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    6092:	780a      	ldrb	r2, [r1, #0]
    6094:	f042 0202 	orr.w	r2, r2, #2
    6098:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    609a:	684a      	ldr	r2, [r1, #4]
    609c:	f012 0202 	ands.w	r2, r2, #2
    60a0:	d1fb      	bne.n	609a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    60a2:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    60a6:	492d      	ldr	r1, [pc, #180]	; (615c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    60a8:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    60ac:	463e      	mov	r6, r7
    60ae:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    60b2:	f362 1c86 	bfi	ip, r2, #6, #1
    60b6:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    60ba:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    60be:	0657      	lsls	r7, r2, #25
    60c0:	d4fb      	bmi.n	60ba <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    60c2:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    60c6:	4f25      	ldr	r7, [pc, #148]	; (615c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    60c8:	f04f 0c06 	mov.w	ip, #6
    60cc:	f36c 0203 	bfi	r2, ip, #0, #4
    60d0:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    60d4:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    60d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    60dc:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    60e0:	687a      	ldr	r2, [r7, #4]
    60e2:	f012 0f18 	tst.w	r2, #24
    60e6:	d1fb      	bne.n	60e0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    60e8:	4a1d      	ldr	r2, [pc, #116]	; (6160 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    60ea:	4e1e      	ldr	r6, [pc, #120]	; (6164 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    60ec:	3074      	adds	r0, #116	; 0x74
    60ee:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    60f2:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    60f6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    60fa:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    60fe:	7991      	ldrb	r1, [r2, #6]
    6100:	f041 0102 	orr.w	r1, r1, #2
    6104:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    6106:	79d1      	ldrb	r1, [r2, #7]
    6108:	07c8      	lsls	r0, r1, #31
    610a:	d4fc      	bmi.n	6106 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    610c:	3512      	adds	r5, #18
    610e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6112:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    6116:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    611a:	79d1      	ldrb	r1, [r2, #7]
    611c:	0789      	lsls	r1, r1, #30
    611e:	d4fc      	bmi.n	611a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    6120:	681a      	ldr	r2, [r3, #0]
    6122:	f042 0202 	orr.w	r2, r2, #2
    6126:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    6128:	691a      	ldr	r2, [r3, #16]
    612a:	f012 0202 	ands.w	r2, r2, #2
    612e:	d1fb      	bne.n	6128 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    6130:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    6132:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    6136:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    613a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    613e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    6142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    6144:	2109      	movs	r1, #9
    6146:	4620      	mov	r0, r4
    6148:	4798      	blx	r3
    614a:	e708      	b.n	5f5e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    614c:	41008000 	.word	0x41008000
    6150:	00004ed5 	.word	0x00004ed5
    6154:	00022d18 	.word	0x00022d18
    6158:	40002800 	.word	0x40002800
    615c:	40001c00 	.word	0x40001c00
    6160:	4100e000 	.word	0x4100e000
    6164:	4100e020 	.word	0x4100e020

00006168 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    6168:	f1a1 0002 	sub.w	r0, r1, #2
    616c:	fab0 f080 	clz	r0, r0
    6170:	0940      	lsrs	r0, r0, #5
    6172:	4770      	bx	lr

00006174 <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    6174:	2002      	movs	r0, #2
    6176:	4770      	bx	lr

00006178 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    6178:	f1a1 0001 	sub.w	r0, r1, #1
    617c:	fab0 f080 	clz	r0, r0
    6180:	0940      	lsrs	r0, r0, #5
    6182:	4770      	bx	lr

00006184 <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    6184:	f1a1 0008 	sub.w	r0, r1, #8
    6188:	fab0 f080 	clz	r0, r0
    618c:	0940      	lsrs	r0, r0, #5
    618e:	4770      	bx	lr

00006190 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    6190:	7a80      	ldrb	r0, [r0, #10]
    6192:	4770      	bx	lr

00006194 <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    6194:	f1a0 0004 	sub.w	r0, r0, #4
    6198:	e7fa      	b.n	6190 <_ZN9ClearCore9SerialUsb4ModeEv>
    619a:	bf00      	nop

0000619c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    619c:	7a80      	ldrb	r0, [r0, #10]
    }
    619e:	1a40      	subs	r0, r0, r1
    61a0:	fab0 f080 	clz	r0, r0
    61a4:	0940      	lsrs	r0, r0, #5
    61a6:	4770      	bx	lr

000061a8 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    61a8:	f1a0 0004 	sub.w	r0, r0, #4
    61ac:	e7f6      	b.n	619c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    61ae:	bf00      	nop

000061b0 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    61b0:	2008      	movs	r0, #8
    61b2:	4770      	bx	lr

000061b4 <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    61b4:	f1a0 0004 	sub.w	r0, r0, #4
    61b8:	e7fa      	b.n	61b0 <_ZN9ClearCore9SerialUsb4TypeEv>
    61ba:	bf00      	nop

000061bc <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    61bc:	2000      	movs	r0, #0
    61be:	4770      	bx	lr

000061c0 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    61c0:	f1a0 0004 	sub.w	r0, r0, #4
    61c4:	e7fa      	b.n	61bc <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    61c6:	bf00      	nop

000061c8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    61c8:	2311      	movs	r3, #17
        m_index = clearCorePin;
    61ca:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    61cc:	7283      	strb	r3, [r0, #10]
    61ce:	4770      	bx	lr

000061d0 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    61d0:	f1a0 0004 	sub.w	r0, r0, #4
    61d4:	e7f8      	b.n	61c8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    61d6:	bf00      	nop

000061d8 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    61d8:	4770      	bx	lr
    61da:	bf00      	nop

000061dc <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    61dc:	f1a0 0004 	sub.w	r0, r0, #4
    61e0:	e7fa      	b.n	61d8 <_ZN9ClearCore9SerialUsb7RefreshEv>
    61e2:	bf00      	nop

000061e4 <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    61e4:	4b01      	ldr	r3, [pc, #4]	; (61ec <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    61e6:	6818      	ldr	r0, [r3, #0]
    61e8:	f000 be5e 	b.w	6ea8 <_ZN9ClearCore10UsbManager10FlushInputEv>
    61ec:	20000adc 	.word	0x20000adc

000061f0 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    61f0:	4b01      	ldr	r3, [pc, #4]	; (61f8 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    61f2:	6818      	ldr	r0, [r3, #0]
    61f4:	f000 be66 	b.w	6ec4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    61f8:	20000adc 	.word	0x20000adc

000061fc <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    61fc:	4b01      	ldr	r3, [pc, #4]	; (6204 <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    61fe:	6818      	ldr	r0, [r3, #0]
    6200:	f000 be7a 	b.w	6ef8 <_ZN9ClearCore10UsbManagercvbEv>
    6204:	20000adc 	.word	0x20000adc

00006208 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    6208:	4b01      	ldr	r3, [pc, #4]	; (6210 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    620a:	6818      	ldr	r0, [r3, #0]
    620c:	f000 be30 	b.w	6e70 <_ZN9ClearCore10UsbManager8PortOpenEv>
    6210:	20000adc 	.word	0x20000adc

00006214 <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    6214:	4b01      	ldr	r3, [pc, #4]	; (621c <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    6216:	6818      	ldr	r0, [r3, #0]
    6218:	f001 ba04 	b.w	7624 <_ZN9ClearCore10UsbManager9PortCloseEv>
    621c:	20000adc 	.word	0x20000adc

00006220 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    6220:	4b01      	ldr	r3, [pc, #4]	; (6228 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    6222:	6818      	ldr	r0, [r3, #0]
    6224:	f000 be1c 	b.w	6e60 <_ZN9ClearCore10UsbManager5SpeedEm>
    6228:	20000adc 	.word	0x20000adc

0000622c <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    622c:	4b01      	ldr	r3, [pc, #4]	; (6234 <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    622e:	6818      	ldr	r0, [r3, #0]
    6230:	f000 be18 	b.w	6e64 <_ZN9ClearCore10UsbManager5SpeedEv>
    6234:	20000adc 	.word	0x20000adc

00006238 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    6238:	4b01      	ldr	r3, [pc, #4]	; (6240 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    623a:	6818      	ldr	r0, [r3, #0]
    623c:	f000 be7a 	b.w	6f34 <_ZN9ClearCore10UsbManager7CharGetEv>
    6240:	20000adc 	.word	0x20000adc

00006244 <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    6244:	4b01      	ldr	r3, [pc, #4]	; (624c <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    6246:	6818      	ldr	r0, [r3, #0]
    6248:	f000 bfa0 	b.w	718c <_ZN9ClearCore10UsbManager8CharPeekEv>
    624c:	20000adc 	.word	0x20000adc

00006250 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    6250:	4b01      	ldr	r3, [pc, #4]	; (6258 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    6252:	6818      	ldr	r0, [r3, #0]
    6254:	f000 bfa6 	b.w	71a4 <_ZN9ClearCore10UsbManager8SendCharEh>
    6258:	20000adc 	.word	0x20000adc

0000625c <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    625c:	4b01      	ldr	r3, [pc, #4]	; (6264 <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    625e:	6818      	ldr	r0, [r3, #0]
    6260:	f000 bfd4 	b.w	720c <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    6264:	20000adc 	.word	0x20000adc

00006268 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    6268:	4b01      	ldr	r3, [pc, #4]	; (6270 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    626a:	6818      	ldr	r0, [r3, #0]
    626c:	f000 bfd6 	b.w	721c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    6270:	20000adc 	.word	0x20000adc

00006274 <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    6274:	6803      	ldr	r3, [r0, #0]
    6276:	4a04      	ldr	r2, [pc, #16]	; (6288 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    6278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    627a:	4293      	cmp	r3, r2
    627c:	d103      	bne.n	6286 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    627e:	4b03      	ldr	r3, [pc, #12]	; (628c <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    6280:	6818      	ldr	r0, [r3, #0]
    6282:	f000 be39 	b.w	6ef8 <_ZN9ClearCore10UsbManagercvbEv>
    6286:	4718      	bx	r3
    6288:	000061fd 	.word	0x000061fd
    628c:	20000adc 	.word	0x20000adc

00006290 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    6290:	f1a0 0004 	sub.w	r0, r0, #4
    6294:	e7ee      	b.n	6274 <_ZN9ClearCore9SerialUsb10IsWritableEv>
    6296:	bf00      	nop

00006298 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    6298:	b508      	push	{r3, lr}
        return PortIsOpen();
    629a:	6803      	ldr	r3, [r0, #0]
    629c:	4a06      	ldr	r2, [pc, #24]	; (62b8 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    62a0:	4293      	cmp	r3, r2
    62a2:	d105      	bne.n	62b0 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    62a4:	4b05      	ldr	r3, [pc, #20]	; (62bc <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    62a6:	6818      	ldr	r0, [r3, #0]
    62a8:	f000 fe26 	bl	6ef8 <_ZN9ClearCore10UsbManagercvbEv>
    }
    62ac:	b200      	sxth	r0, r0
    62ae:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    62b0:	4798      	blx	r3
    }
    62b2:	b200      	sxth	r0, r0
    62b4:	bd08      	pop	{r3, pc}
    62b6:	bf00      	nop
    62b8:	000061fd 	.word	0x000061fd
    62bc:	20000adc 	.word	0x20000adc

000062c0 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    62c0:	f1a0 0004 	sub.w	r0, r0, #4
    62c4:	e7e8      	b.n	6298 <_ZN9ClearCore9SerialUsb5StateEv>
    62c6:	bf00      	nop

000062c8 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    62c8:	b508      	push	{r3, lr}
            PortOpen();
    62ca:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    62cc:	b961      	cbnz	r1, 62e8 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    62ce:	4a0b      	ldr	r2, [pc, #44]	; (62fc <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    62d0:	68db      	ldr	r3, [r3, #12]
    62d2:	4293      	cmp	r3, r2
    62d4:	d105      	bne.n	62e2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    62d6:	4b0a      	ldr	r3, [pc, #40]	; (6300 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    62d8:	6818      	ldr	r0, [r3, #0]
    62da:	f001 f9a3 	bl	7624 <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    62de:	2001      	movs	r0, #1
    62e0:	bd08      	pop	{r3, pc}
            PortClose();
    62e2:	4798      	blx	r3
    }
    62e4:	2001      	movs	r0, #1
    62e6:	bd08      	pop	{r3, pc}
    62e8:	4a06      	ldr	r2, [pc, #24]	; (6304 <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    62ea:	689b      	ldr	r3, [r3, #8]
    62ec:	4293      	cmp	r3, r2
    62ee:	d1f8      	bne.n	62e2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    62f0:	4b03      	ldr	r3, [pc, #12]	; (6300 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    62f2:	6818      	ldr	r0, [r3, #0]
    62f4:	f000 fdbc 	bl	6e70 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    62f8:	2001      	movs	r0, #1
    62fa:	bd08      	pop	{r3, pc}
    62fc:	00006215 	.word	0x00006215
    6300:	20000adc 	.word	0x20000adc
    6304:	00006209 	.word	0x00006209

00006308 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6308:	f1a0 0004 	sub.w	r0, r0, #4
    630c:	e7dc      	b.n	62c8 <_ZN9ClearCore9SerialUsb5StateEs>
    630e:	bf00      	nop

00006310 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    6310:	b530      	push	{r4, r5, lr}
    6312:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    6314:	4d1a      	ldr	r5, [pc, #104]	; (6380 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    6316:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    631a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    631e:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    6320:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    6324:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    6328:	d112      	bne.n	6350 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    632a:	4621      	mov	r1, r4
    632c:	4620      	mov	r0, r4
    632e:	f006 f8dd 	bl	c4ec <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    6332:	4621      	mov	r1, r4
    6334:	2001      	movs	r0, #1
    6336:	f006 f8d9 	bl	c4ec <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    633a:	f006 f8cb 	bl	c4d4 <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    633e:	f006 f903 	bl	c548 <cdcdf_acm_get_line_coding>
    6342:	6803      	ldr	r3, [r0, #0]
    6344:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6348:	d012      	beq.n	6370 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    634a:	2000      	movs	r0, #0
    634c:	b003      	add	sp, #12
    634e:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6350:	490c      	ldr	r1, [pc, #48]	; (6384 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    6352:	2000      	movs	r0, #0
    6354:	f006 f8ca 	bl	c4ec <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6358:	490b      	ldr	r1, [pc, #44]	; (6388 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    635a:	2001      	movs	r0, #1
    635c:	f006 f8c6 	bl	c4ec <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    6360:	6828      	ldr	r0, [r5, #0]
    6362:	2140      	movs	r1, #64	; 0x40
    6364:	3080      	adds	r0, #128	; 0x80
    6366:	f006 f88d 	bl	c484 <cdcdf_acm_read>
}
    636a:	2000      	movs	r0, #0
    636c:	b003      	add	sp, #12
    636e:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    6370:	2101      	movs	r1, #1
    6372:	4806      	ldr	r0, [pc, #24]	; (638c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    6374:	f003 fa36 	bl	97e4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    6378:	2000      	movs	r0, #0
    637a:	b003      	add	sp, #12
    637c:	bd30      	pop	{r4, r5, pc}
    637e:	bf00      	nop
    6380:	20000adc 	.word	0x20000adc
    6384:	00006391 	.word	0x00006391
    6388:	000065c9 	.word	0x000065c9
    638c:	200019d4 	.word	0x200019d4

00006390 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6394:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6396:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    6398:	498a      	ldr	r1, [pc, #552]	; (65c4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    639a:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    639c:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    63a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    63a4:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    63a8:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    63aa:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    63ac:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    63ae:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    63b2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    63b6:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    63ba:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    63bc:	bf48      	it	mi
    63be:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    63c0:	2c00      	cmp	r4, #0
    63c2:	f000 80d6 	beq.w	6572 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    63c6:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    63ca:	f000 80d2 	beq.w	6572 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    63ce:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    63d2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    63d6:	42a3      	cmp	r3, r4
    63d8:	bf28      	it	cs
    63da:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    63dc:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    63e0:	4299      	cmp	r1, r3
    63e2:	bf28      	it	cs
    63e4:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    63e6:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    63e8:	2900      	cmp	r1, #0
    63ea:	f000 80e8 	beq.w	65be <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    63ee:	1d2c      	adds	r4, r5, #4
    63f0:	4404      	add	r4, r0
    63f2:	1d17      	adds	r7, r2, #4
    63f4:	42be      	cmp	r6, r7
    63f6:	bf38      	it	cc
    63f8:	42a2      	cmpcc	r2, r4
    63fa:	f0c0 80ce 	bcc.w	659a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    63fe:	290b      	cmp	r1, #11
    6400:	f240 80cb 	bls.w	659a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    6404:	4254      	negs	r4, r2
    6406:	f014 0403 	ands.w	r4, r4, #3
    640a:	f000 80b7 	beq.w	657c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    640e:	7817      	ldrb	r7, [r2, #0]
    6410:	5547      	strb	r7, [r0, r5]
    6412:	2c01      	cmp	r4, #1
    6414:	f106 0c01 	add.w	ip, r6, #1
    6418:	f102 0801 	add.w	r8, r2, #1
    641c:	f000 80b0 	beq.w	6580 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    6420:	7857      	ldrb	r7, [r2, #1]
    6422:	7077      	strb	r7, [r6, #1]
    6424:	2c02      	cmp	r4, #2
    6426:	f106 0c02 	add.w	ip, r6, #2
    642a:	f102 0802 	add.w	r8, r2, #2
    642e:	f000 80a7 	beq.w	6580 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    6432:	7897      	ldrb	r7, [r2, #2]
    6434:	70b7      	strb	r7, [r6, #2]
    6436:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    643a:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    643c:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6440:	9601      	str	r6, [sp, #4]
    6442:	eba1 0b04 	sub.w	fp, r1, r4
    6446:	f1ab 0604 	sub.w	r6, fp, #4
    644a:	08b6      	lsrs	r6, r6, #2
    644c:	192f      	adds	r7, r5, r4
    644e:	3601      	adds	r6, #1
    6450:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6454:	4407      	add	r7, r0
    6456:	4414      	add	r4, r2
    6458:	f04f 0e00 	mov.w	lr, #0
    645c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6460:	f854 ab04 	ldr.w	sl, [r4], #4
    6464:	f847 ab04 	str.w	sl, [r7], #4
    6468:	4576      	cmp	r6, lr
    646a:	d8f7      	bhi.n	645c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    646c:	9c01      	ldr	r4, [sp, #4]
    646e:	45cb      	cmp	fp, r9
    6470:	444c      	add	r4, r9
    6472:	eb0c 0709 	add.w	r7, ip, r9
    6476:	eb08 0e09 	add.w	lr, r8, r9
    647a:	f000 8089 	beq.w	6590 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    647e:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    6482:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6486:	1c66      	adds	r6, r4, #1
    6488:	42b1      	cmp	r1, r6
    648a:	f240 8081 	bls.w	6590 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    648e:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6490:	f89e 6001 	ldrb.w	r6, [lr, #1]
    6494:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6496:	42a1      	cmp	r1, r4
    6498:	d97a      	bls.n	6590 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    649a:	f89e 4002 	ldrb.w	r4, [lr, #2]
    649e:	70bc      	strb	r4, [r7, #2]
    64a0:	1856      	adds	r6, r2, r1
    64a2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    64a6:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    64aa:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    64ac:	1a64      	subs	r4, r4, r1
        if (count) {
    64ae:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    64b0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    64b4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    64b8:	d064      	beq.n	6584 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    64ba:	1d31      	adds	r1, r6, #4
    64bc:	1d02      	adds	r2, r0, #4
    64be:	4296      	cmp	r6, r2
    64c0:	bf38      	it	cc
    64c2:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    64c4:	4604      	mov	r4, r0
    64c6:	d371      	bcc.n	65ac <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    64c8:	2b0b      	cmp	r3, #11
    64ca:	d96f      	bls.n	65ac <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    64cc:	4272      	negs	r2, r6
    64ce:	f012 0203 	ands.w	r2, r2, #3
    64d2:	d05f      	beq.n	6594 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    64d4:	7831      	ldrb	r1, [r6, #0]
    64d6:	7001      	strb	r1, [r0, #0]
    64d8:	2a01      	cmp	r2, #1
    64da:	f100 0401 	add.w	r4, r0, #1
    64de:	f106 0e01 	add.w	lr, r6, #1
    64e2:	d058      	beq.n	6596 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    64e4:	7871      	ldrb	r1, [r6, #1]
    64e6:	7041      	strb	r1, [r0, #1]
    64e8:	2a02      	cmp	r2, #2
    64ea:	f100 0402 	add.w	r4, r0, #2
    64ee:	f106 0e02 	add.w	lr, r6, #2
    64f2:	d050      	beq.n	6596 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    64f4:	78b1      	ldrb	r1, [r6, #2]
    64f6:	7081      	strb	r1, [r0, #2]
    64f8:	1cc4      	adds	r4, r0, #3
    64fa:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    64fe:	2703      	movs	r7, #3
    6500:	eba3 0c02 	sub.w	ip, r3, r2
    6504:	f1ac 0104 	sub.w	r1, ip, #4
    6508:	0889      	lsrs	r1, r1, #2
    650a:	1c4d      	adds	r5, r1, #1
    650c:	4416      	add	r6, r2
    650e:	ea4f 0885 	mov.w	r8, r5, lsl #2
    6512:	4402      	add	r2, r0
    6514:	2100      	movs	r1, #0
    6516:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6518:	f856 9b04 	ldr.w	r9, [r6], #4
    651c:	f842 9b04 	str.w	r9, [r2], #4
    6520:	428d      	cmp	r5, r1
    6522:	d8f8      	bhi.n	6516 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    6524:	45c4      	cmp	ip, r8
    6526:	eb07 0208 	add.w	r2, r7, r8
    652a:	eb04 0108 	add.w	r1, r4, r8
    652e:	eb0e 0608 	add.w	r6, lr, r8
    6532:	d00d      	beq.n	6550 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    6534:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    6538:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    653c:	1c54      	adds	r4, r2, #1
    653e:	42a3      	cmp	r3, r4
    6540:	d906      	bls.n	6550 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    6542:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6544:	7874      	ldrb	r4, [r6, #1]
    6546:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6548:	4293      	cmp	r3, r2
    654a:	d901      	bls.n	6550 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    654c:	78b2      	ldrb	r2, [r6, #2]
    654e:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    6550:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6554:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    6558:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    655c:	441a      	add	r2, r3
            m_readBufAvail -= count;
    655e:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    6560:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6564:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    6568:	b91c      	cbnz	r4, 6572 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    656a:	3080      	adds	r0, #128	; 0x80
    656c:	2140      	movs	r1, #64	; 0x40
    656e:	f005 ff89 	bl	c484 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6572:	b662      	cpsie	i
}
    6574:	2001      	movs	r0, #1
    6576:	b003      	add	sp, #12
    6578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    657c:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    657e:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6580:	9401      	str	r4, [sp, #4]
    6582:	e75e      	b.n	6442 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6584:	4429      	add	r1, r5
    6586:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    658a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    658e:	e7eb      	b.n	6568 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    6590:	1856      	adds	r6, r2, r1
    6592:	e786      	b.n	64a2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    6594:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    6596:	4617      	mov	r7, r2
    6598:	e7b2      	b.n	6500 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    659a:	1e74      	subs	r4, r6, #1
    659c:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    659e:	f812 7b01 	ldrb.w	r7, [r2], #1
    65a2:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    65a6:	42b2      	cmp	r2, r6
    65a8:	d1f9      	bne.n	659e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    65aa:	e77a      	b.n	64a2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    65ac:	1e42      	subs	r2, r0, #1
    65ae:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    65b0:	f816 1b01 	ldrb.w	r1, [r6], #1
    65b4:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    65b8:	42b4      	cmp	r4, r6
    65ba:	d1f9      	bne.n	65b0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    65bc:	e7c8      	b.n	6550 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    65be:	4616      	mov	r6, r2
    65c0:	e773      	b.n	64aa <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    65c2:	bf00      	nop
    65c4:	20000adc 	.word	0x20000adc

000065c8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    65c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    65cc:	48d8      	ldr	r0, [pc, #864]	; (6930 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    65ce:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    65d0:	2900      	cmp	r1, #0
    65d2:	f040 81ab 	bne.w	692c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    65d6:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    65d8:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    65dc:	441a      	add	r2, r3
    65de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    65e2:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    65e6:	2300      	movs	r3, #0
    65e8:	f3bf 8f5b 	dmb	ish
    65ec:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    65f0:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    65f4:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    65f6:	f3bf 8f5b 	dmb	ish
    65fa:	f04f 0101 	mov.w	r1, #1
    65fe:	f504 7388 	add.w	r3, r4, #272	; 0x110
    6602:	e8d3 2f4f 	ldrexb	r2, [r3]
    6606:	e8c3 1f40 	strexb	r0, r1, [r3]
    660a:	2800      	cmp	r0, #0
    660c:	d1f9      	bne.n	6602 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    660e:	f3bf 8f5b 	dmb	ish
    6612:	f012 0fff 	tst.w	r2, #255	; 0xff
    6616:	f040 80dc 	bne.w	67d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    661a:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    661e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    6622:	428e      	cmp	r6, r1
    6624:	f000 8191 	beq.w	694a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6628:	f104 0240 	add.w	r2, r4, #64	; 0x40
    662c:	eb02 0706 	add.w	r7, r2, r6
    6630:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    6634:	f0c0 80d1 	bcc.w	67da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6638:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    663c:	4419      	add	r1, r3
    663e:	2940      	cmp	r1, #64	; 0x40
    6640:	bf28      	it	cs
    6642:	2140      	movcs	r1, #64	; 0x40
    6644:	428b      	cmp	r3, r1
    6646:	bf28      	it	cs
    6648:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    664a:	2b00      	cmp	r3, #0
    664c:	f000 81a1 	beq.w	6992 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    6650:	f106 0540 	add.w	r5, r6, #64	; 0x40
    6654:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    6658:	1960      	adds	r0, r4, r5
    665a:	44a4      	add	ip, r4
    665c:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    6660:	4540      	cmp	r0, r8
    6662:	bf38      	it	cc
    6664:	45e6      	cmpcc	lr, ip
    6666:	f0c0 818a 	bcc.w	697e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    666a:	2b0b      	cmp	r3, #11
    666c:	f240 8187 	bls.w	697e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6670:	4240      	negs	r0, r0
    6672:	f010 0003 	ands.w	r0, r0, #3
    6676:	f000 8161 	beq.w	693c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    667a:	5d96      	ldrb	r6, [r2, r6]
    667c:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    6680:	2801      	cmp	r0, #1
    6682:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    6686:	f107 0801 	add.w	r8, r7, #1
    668a:	f000 8159 	beq.w	6940 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    668e:	787e      	ldrb	r6, [r7, #1]
    6690:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    6694:	2802      	cmp	r0, #2
    6696:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    669a:	f107 0802 	add.w	r8, r7, #2
    669e:	f000 814f 	beq.w	6940 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    66a2:	78be      	ldrb	r6, [r7, #2]
    66a4:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    66a8:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    66aa:	f107 0803 	add.w	r8, r7, #3
    66ae:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    66b2:	9601      	str	r6, [sp, #4]
    66b4:	eba3 0b00 	sub.w	fp, r3, r0
    66b8:	f1ab 0604 	sub.w	r6, fp, #4
    66bc:	08b6      	lsrs	r6, r6, #2
    66be:	4405      	add	r5, r0
    66c0:	3601      	adds	r6, #1
    66c2:	30c0      	adds	r0, #192	; 0xc0
    66c4:	4425      	add	r5, r4
    66c6:	4420      	add	r0, r4
    66c8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    66cc:	2700      	movs	r7, #0
    66ce:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    66d0:	f855 ab04 	ldr.w	sl, [r5], #4
    66d4:	f840 ab04 	str.w	sl, [r0], #4
    66d8:	42b7      	cmp	r7, r6
    66da:	d3f8      	bcc.n	66ce <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    66dc:	9801      	ldr	r0, [sp, #4]
    66de:	45cb      	cmp	fp, r9
    66e0:	4448      	add	r0, r9
    66e2:	eb0c 0509 	add.w	r5, ip, r9
    66e6:	eb08 0709 	add.w	r7, r8, r9
    66ea:	d00d      	beq.n	6708 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    66ec:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    66f0:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    66f4:	1c46      	adds	r6, r0, #1
    66f6:	42b3      	cmp	r3, r6
    66f8:	d906      	bls.n	6708 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    66fa:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    66fc:	787e      	ldrb	r6, [r7, #1]
    66fe:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6700:	4283      	cmp	r3, r0
    6702:	d901      	bls.n	6708 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    6704:	78b8      	ldrb	r0, [r7, #2]
    6706:	70a8      	strb	r0, [r5, #2]
    6708:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    670c:	1acb      	subs	r3, r1, r3
    670e:	f000 80fc 	beq.w	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6712:	f104 0544 	add.w	r5, r4, #68	; 0x44
    6716:	1d06      	adds	r6, r0, #4
    6718:	42b2      	cmp	r2, r6
    671a:	bf38      	it	cc
    671c:	42a8      	cmpcc	r0, r5
    671e:	f0c0 8125 	bcc.w	696c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6722:	2b0b      	cmp	r3, #11
    6724:	f240 8122 	bls.w	696c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6728:	4255      	negs	r5, r2
    672a:	f015 0503 	ands.w	r5, r5, #3
    672e:	f000 8109 	beq.w	6944 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    6732:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    6736:	7002      	strb	r2, [r0, #0]
    6738:	2d01      	cmp	r5, #1
    673a:	f100 0801 	add.w	r8, r0, #1
    673e:	f104 0241 	add.w	r2, r4, #65	; 0x41
    6742:	f000 8100 	beq.w	6946 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6746:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    674a:	7042      	strb	r2, [r0, #1]
    674c:	2d02      	cmp	r5, #2
    674e:	f100 0802 	add.w	r8, r0, #2
    6752:	f104 0242 	add.w	r2, r4, #66	; 0x42
    6756:	f000 80f6 	beq.w	6946 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    675a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    675e:	7082      	strb	r2, [r0, #2]
    6760:	f100 0803 	add.w	r8, r0, #3
    6764:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6768:	2703      	movs	r7, #3
    676a:	eba3 0905 	sub.w	r9, r3, r5
    676e:	f1a9 0604 	sub.w	r6, r9, #4
    6772:	08b6      	lsrs	r6, r6, #2
    6774:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    6778:	3601      	adds	r6, #1
    677a:	4428      	add	r0, r5
    677c:	44a4      	add	ip, r4
    677e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    6782:	f04f 0a00 	mov.w	sl, #0
    6786:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    678a:	f85c 5b04 	ldr.w	r5, [ip], #4
    678e:	f840 5b04 	str.w	r5, [r0], #4
    6792:	4556      	cmp	r6, sl
    6794:	d8f7      	bhi.n	6786 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    6796:	45d9      	cmp	r9, fp
    6798:	445f      	add	r7, fp
    679a:	eb08 000b 	add.w	r0, r8, fp
    679e:	eb02 050b 	add.w	r5, r2, fp
    67a2:	f000 80b2 	beq.w	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    67a6:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    67aa:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    67ae:	1c7a      	adds	r2, r7, #1
    67b0:	4293      	cmp	r3, r2
    67b2:	f240 80aa 	bls.w	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    67b6:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    67b8:	786a      	ldrb	r2, [r5, #1]
    67ba:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    67bc:	42bb      	cmp	r3, r7
    67be:	f240 80a4 	bls.w	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    67c2:	78ab      	ldrb	r3, [r5, #2]
    67c4:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    67c6:	4670      	mov	r0, lr
    67c8:	f005 fe70 	bl	c4ac <cdcdf_acm_write>
    67cc:	2800      	cmp	r0, #0
    67ce:	f040 80a2 	bne.w	6916 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    67d2:	2001      	movs	r0, #1
    67d4:	b003      	add	sp, #12
    67d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    67da:	1b89      	subs	r1, r1, r6
    67dc:	f106 0340 	add.w	r3, r6, #64	; 0x40
    67e0:	f106 0044 	add.w	r0, r6, #68	; 0x44
    67e4:	2940      	cmp	r1, #64	; 0x40
    67e6:	eb04 0803 	add.w	r8, r4, r3
    67ea:	4420      	add	r0, r4
    67ec:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    67f0:	bf28      	it	cs
    67f2:	2140      	movcs	r1, #64	; 0x40
    67f4:	45a8      	cmp	r8, r5
    67f6:	bf38      	it	cc
    67f8:	4586      	cmpcc	lr, r0
    67fa:	f0c0 80ad 	bcc.w	6958 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    67fe:	290b      	cmp	r1, #11
    6800:	f240 80aa 	bls.w	6958 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    6804:	f1c8 0800 	rsb	r8, r8, #0
    6808:	f018 0803 	ands.w	r8, r8, #3
    680c:	f000 8092 	beq.w	6934 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    6810:	5d92      	ldrb	r2, [r2, r6]
    6812:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    6816:	f1b8 0f01 	cmp.w	r8, #1
    681a:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    681e:	f107 0601 	add.w	r6, r7, #1
    6822:	f000 8089 	beq.w	6938 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6826:	787a      	ldrb	r2, [r7, #1]
    6828:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    682c:	f1b8 0f02 	cmp.w	r8, #2
    6830:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    6834:	f107 0602 	add.w	r6, r7, #2
    6838:	d07e      	beq.n	6938 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    683a:	78ba      	ldrb	r2, [r7, #2]
    683c:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6840:	1cfe      	adds	r6, r7, #3
    6842:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6846:	f04f 0903 	mov.w	r9, #3
    684a:	4443      	add	r3, r8
    684c:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6850:	58e2      	ldr	r2, [r4, r3]
    6852:	5022      	str	r2, [r4, r0]
    6854:	eba1 0808 	sub.w	r8, r1, r8
    6858:	f1a8 0204 	sub.w	r2, r8, #4
    685c:	4423      	add	r3, r4
    685e:	0892      	lsrs	r2, r2, #2
    6860:	3201      	adds	r2, #1
    6862:	4420      	add	r0, r4
    6864:	685f      	ldr	r7, [r3, #4]
    6866:	6047      	str	r7, [r0, #4]
    6868:	2a02      	cmp	r2, #2
    686a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    686e:	d035      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6870:	689f      	ldr	r7, [r3, #8]
    6872:	6087      	str	r7, [r0, #8]
    6874:	2a03      	cmp	r2, #3
    6876:	d031      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6878:	68df      	ldr	r7, [r3, #12]
    687a:	60c7      	str	r7, [r0, #12]
    687c:	2a04      	cmp	r2, #4
    687e:	d02d      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6880:	691f      	ldr	r7, [r3, #16]
    6882:	6107      	str	r7, [r0, #16]
    6884:	2a05      	cmp	r2, #5
    6886:	d029      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6888:	695f      	ldr	r7, [r3, #20]
    688a:	6147      	str	r7, [r0, #20]
    688c:	2a06      	cmp	r2, #6
    688e:	d025      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6890:	699f      	ldr	r7, [r3, #24]
    6892:	6187      	str	r7, [r0, #24]
    6894:	2a07      	cmp	r2, #7
    6896:	d021      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6898:	69df      	ldr	r7, [r3, #28]
    689a:	61c7      	str	r7, [r0, #28]
    689c:	2a08      	cmp	r2, #8
    689e:	d01d      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68a0:	6a1f      	ldr	r7, [r3, #32]
    68a2:	6207      	str	r7, [r0, #32]
    68a4:	2a09      	cmp	r2, #9
    68a6:	d019      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68a8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    68aa:	6247      	str	r7, [r0, #36]	; 0x24
    68ac:	2a0a      	cmp	r2, #10
    68ae:	d015      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68b0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    68b2:	6287      	str	r7, [r0, #40]	; 0x28
    68b4:	2a0b      	cmp	r2, #11
    68b6:	d011      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68b8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    68ba:	62c7      	str	r7, [r0, #44]	; 0x2c
    68bc:	2a0c      	cmp	r2, #12
    68be:	d00d      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68c0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    68c2:	6307      	str	r7, [r0, #48]	; 0x30
    68c4:	2a0d      	cmp	r2, #13
    68c6:	d009      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68c8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    68ca:	6347      	str	r7, [r0, #52]	; 0x34
    68cc:	2a0e      	cmp	r2, #14
    68ce:	d005      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68d0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    68d2:	6387      	str	r7, [r0, #56]	; 0x38
    68d4:	2a0f      	cmp	r2, #15
    68d6:	d001      	beq.n	68dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    68d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    68da:	63c3      	str	r3, [r0, #60]	; 0x3c
    68dc:	45e0      	cmp	r8, ip
    68de:	44e1      	add	r9, ip
    68e0:	eb05 030c 	add.w	r3, r5, ip
    68e4:	eb06 000c 	add.w	r0, r6, ip
    68e8:	d00f      	beq.n	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    68ea:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    68ee:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    68f2:	f109 0201 	add.w	r2, r9, #1
    68f6:	4291      	cmp	r1, r2
    68f8:	d907      	bls.n	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    68fa:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    68fe:	7842      	ldrb	r2, [r0, #1]
    6900:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6902:	4549      	cmp	r1, r9
    6904:	d901      	bls.n	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    6906:	7882      	ldrb	r2, [r0, #2]
    6908:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    690a:	4670      	mov	r0, lr
    690c:	f005 fdce 	bl	c4ac <cdcdf_acm_write>
    6910:	2800      	cmp	r0, #0
    6912:	f43f af5e 	beq.w	67d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    6916:	f3bf 8f5b 	dmb	ish
    691a:	2300      	movs	r3, #0
    691c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    6920:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    6922:	f3bf 8f5b 	dmb	ish
}
    6926:	b003      	add	sp, #12
    6928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    692c:	6801      	ldr	r1, [r0, #0]
    692e:	e65a      	b.n	65e6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    6930:	20000adc 	.word	0x20000adc
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6934:	463e      	mov	r6, r7
    6936:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6938:	46c1      	mov	r9, r8
    693a:	e786      	b.n	684a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    693c:	46b8      	mov	r8, r7
    693e:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6940:	9001      	str	r0, [sp, #4]
    6942:	e6b7      	b.n	66b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6944:	4680      	mov	r8, r0
    6946:	462f      	mov	r7, r5
    6948:	e70f      	b.n	676a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    694a:	f3bf 8f5b 	dmb	ish
    694e:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    6952:	f3bf 8f5b 	dmb	ish
    6956:	e73c      	b.n	67d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6958:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    695c:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    695e:	f817 2b01 	ldrb.w	r2, [r7], #1
    6962:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6966:	4287      	cmp	r7, r0
    6968:	d1f9      	bne.n	695e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    696a:	e7ce      	b.n	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    696c:	3801      	subs	r0, #1
    696e:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6970:	f812 5b01 	ldrb.w	r5, [r2], #1
    6974:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6978:	429a      	cmp	r2, r3
    697a:	d1f9      	bne.n	6970 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    697c:	e7c5      	b.n	690a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    697e:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    6982:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    6984:	f817 5b01 	ldrb.w	r5, [r7], #1
    6988:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    698c:	42be      	cmp	r6, r7
    698e:	d1f9      	bne.n	6984 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    6990:	e6ba      	b.n	6708 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6992:	4670      	mov	r0, lr
    6994:	e6ba      	b.n	670c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    6996:	bf00      	nop

00006998 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    6998:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    699a:	4e16      	ldr	r6, [pc, #88]	; (69f4 <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    699c:	6834      	ldr	r4, [r6, #0]
    699e:	f014 0401 	ands.w	r4, r4, #1
    69a2:	d002      	beq.n	69aa <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    69a4:	4b14      	ldr	r3, [pc, #80]	; (69f8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    69a6:	6818      	ldr	r0, [r3, #0]
    69a8:	bd70      	pop	{r4, r5, r6, pc}
    69aa:	f44f 7090 	mov.w	r0, #288	; 0x120
    69ae:	f00c fd3f 	bl	13430 <_Znwj>
    69b2:	4605      	mov	r5, r0
    m_portOpen(false) {
    69b4:	f100 0380 	add.w	r3, r0, #128	; 0x80
    69b8:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    69bc:	490f      	ldr	r1, [pc, #60]	; (69fc <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    69be:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    69c2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    69c6:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    69ca:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    69ce:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    69d2:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    69d6:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    69da:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    69de:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    69e2:	2003      	movs	r0, #3
    69e4:	f005 fd82 	bl	c4ec <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    69e8:	4a03      	ldr	r2, [pc, #12]	; (69f8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    69ea:	2301      	movs	r3, #1
    69ec:	6015      	str	r5, [r2, #0]
    69ee:	4628      	mov	r0, r5
    69f0:	6033      	str	r3, [r6, #0]
}
    69f2:	bd70      	pop	{r4, r5, r6, pc}
    69f4:	20000ad8 	.word	0x20000ad8
    69f8:	20000b20 	.word	0x20000b20
    69fc:	00006311 	.word	0x00006311

00006a00 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    6a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6a04:	4ac7      	ldr	r2, [pc, #796]	; (6d24 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    6a06:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6a0a:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    6a0e:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6a10:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6a14:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6a18:	0659      	lsls	r1, r3, #25
    6a1a:	d4fb      	bmi.n	6a14 <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    6a1c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6a20:	49c0      	ldr	r1, [pc, #768]	; (6d24 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    6a22:	2004      	movs	r0, #4
    6a24:	f360 0303 	bfi	r3, r0, #0, #4
    6a28:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6a2c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a34:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6a38:	684b      	ldr	r3, [r1, #4]
    6a3a:	06db      	lsls	r3, r3, #27
    6a3c:	d4fc      	bmi.n	6a38 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    6a3e:	4bba      	ldr	r3, [pc, #744]	; (6d28 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6a40:	49ba      	ldr	r1, [pc, #744]	; (6d2c <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    6a42:	691a      	ldr	r2, [r3, #16]
    6a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6a48:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    6a4a:	699a      	ldr	r2, [r3, #24]
    6a4c:	f042 0201 	orr.w	r2, r2, #1
    6a50:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6a52:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    6a56:	2203      	movs	r2, #3
    6a58:	f006 f8f4 	bl	cc44 <usb_find_str_desc>
    if (!serNumDescPtr) {
    6a5c:	4604      	mov	r4, r0
    6a5e:	2800      	cmp	r0, #0
    6a60:	f000 819c 	beq.w	6d9c <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    6a64:	4bb2      	ldr	r3, [pc, #712]	; (6d30 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    6a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6a68:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6a6c:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    6a6e:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a70:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6a72:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a76:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6a7a:	3037      	adds	r0, #55	; 0x37
    6a7c:	2d09      	cmp	r5, #9
    6a7e:	bf88      	it	hi
    6a80:	4607      	movhi	r7, r0
    6a82:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    6a86:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a8a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6a8e:	3037      	adds	r0, #55	; 0x37
    6a90:	f1b8 0f09 	cmp.w	r8, #9
    6a94:	bfc8      	it	gt
    6a96:	4684      	movgt	ip, r0
    6a98:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    6a9a:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a9e:	f88d c011 	strb.w	ip, [sp, #17]
    6aa2:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6aa6:	3037      	adds	r0, #55	; 0x37
    6aa8:	2e09      	cmp	r6, #9
    6aaa:	bfc8      	it	gt
    6aac:	4684      	movgt	ip, r0
    6aae:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6ab0:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ab4:	f88d c012 	strb.w	ip, [sp, #18]
    6ab8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6abc:	3037      	adds	r0, #55	; 0x37
    6abe:	2d09      	cmp	r5, #9
    6ac0:	bfc8      	it	gt
    6ac2:	4684      	movgt	ip, r0
    6ac4:	fa5f f08e 	uxtb.w	r0, lr
    6ac8:	f88d 7010 	strb.w	r7, [sp, #16]
    6acc:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    6ad0:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ad4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6ad8:	3037      	adds	r0, #55	; 0x37
    6ada:	f1be 0f09 	cmp.w	lr, #9
    6ade:	bfd4      	ite	le
    6ae0:	46e6      	movle	lr, ip
    6ae2:	4686      	movgt	lr, r0
    6ae4:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    6ae6:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6aea:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6aec:	f88d e014 	strb.w	lr, [sp, #20]
    6af0:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    6af4:	3030      	adds	r0, #48	; 0x30
    6af6:	2f09      	cmp	r7, #9
    6af8:	bfcc      	ite	gt
    6afa:	4677      	movgt	r7, lr
    6afc:	4607      	movle	r7, r0
    6afe:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6b00:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b02:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    6b06:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b0a:	f100 0737 	add.w	r7, r0, #55	; 0x37
    6b0e:	3030      	adds	r0, #48	; 0x30
    6b10:	2e09      	cmp	r6, #9
    6b12:	bfcc      	ite	gt
    6b14:	463e      	movgt	r6, r7
    6b16:	4606      	movle	r6, r0
    6b18:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    6b1a:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b1c:	f88d 6016 	strb.w	r6, [sp, #22]
    6b20:	f100 0637 	add.w	r6, r0, #55	; 0x37
    6b24:	3030      	adds	r0, #48	; 0x30
    6b26:	2b09      	cmp	r3, #9
    6b28:	bfcc      	ite	gt
    6b2a:	4633      	movgt	r3, r6
    6b2c:	4603      	movle	r3, r0
    6b2e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6b30:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b34:	f88d 3017 	strb.w	r3, [sp, #23]
    6b38:	f100 0337 	add.w	r3, r0, #55	; 0x37
    6b3c:	3030      	adds	r0, #48	; 0x30
    6b3e:	2d09      	cmp	r5, #9
    6b40:	bf88      	it	hi
    6b42:	4618      	movhi	r0, r3
    6b44:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    6b48:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b4c:	f88d 0018 	strb.w	r0, [sp, #24]
    6b50:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6b54:	3330      	adds	r3, #48	; 0x30
    6b56:	f1bc 0f09 	cmp.w	ip, #9
    6b5a:	bfcc      	ite	gt
    6b5c:	4684      	movgt	ip, r0
    6b5e:	469c      	movle	ip, r3
    6b60:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    6b64:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b68:	f88d c019 	strb.w	ip, [sp, #25]
    6b6c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6b70:	3330      	adds	r3, #48	; 0x30
    6b72:	f1be 0f09 	cmp.w	lr, #9
    6b76:	bfd8      	it	le
    6b78:	469c      	movle	ip, r3
    6b7a:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    6b7c:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b80:	f88d c01a 	strb.w	ip, [sp, #26]
    6b84:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6b88:	3330      	adds	r3, #48	; 0x30
    6b8a:	2f09      	cmp	r7, #9
    6b8c:	bfd8      	it	le
    6b8e:	469c      	movle	ip, r3
    6b90:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    6b92:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b96:	f88d c01b 	strb.w	ip, [sp, #27]
    6b9a:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6b9e:	3330      	adds	r3, #48	; 0x30
    6ba0:	2e09      	cmp	r6, #9
    6ba2:	bfd8      	it	le
    6ba4:	469c      	movle	ip, r3
    6ba6:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    6ba8:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6bac:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6bae:	f88d c01c 	strb.w	ip, [sp, #28]
    6bb2:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6bb6:	3330      	adds	r3, #48	; 0x30
    6bb8:	2d09      	cmp	r5, #9
    6bba:	bfcc      	ite	gt
    6bbc:	4665      	movgt	r5, ip
    6bbe:	461d      	movle	r5, r3
    6bc0:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6bc2:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6bc4:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    6bc8:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6bcc:	f103 0537 	add.w	r5, r3, #55	; 0x37
    6bd0:	3330      	adds	r3, #48	; 0x30
    6bd2:	2809      	cmp	r0, #9
    6bd4:	bfcc      	ite	gt
    6bd6:	4628      	movgt	r0, r5
    6bd8:	4618      	movle	r0, r3
    6bda:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    6bdc:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6be0:	f88d 001e 	strb.w	r0, [sp, #30]
    6be4:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6be8:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6bea:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6bee:	2a09      	cmp	r2, #9
    6bf0:	bfcc      	ite	gt
    6bf2:	4602      	movgt	r2, r0
    6bf4:	461a      	movle	r2, r3
    6bf6:	fa5f f58e 	uxtb.w	r5, lr
    6bfa:	b2f8      	uxtb	r0, r7
    6bfc:	f88d 201f 	strb.w	r2, [sp, #31]
    6c00:	f105 0237 	add.w	r2, r5, #55	; 0x37
    6c04:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6c06:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c0a:	f1be 0f09 	cmp.w	lr, #9
    6c0e:	bf88      	it	hi
    6c10:	4615      	movhi	r5, r2
    6c12:	f100 0237 	add.w	r2, r0, #55	; 0x37
    6c16:	3030      	adds	r0, #48	; 0x30
    6c18:	2f09      	cmp	r7, #9
    6c1a:	bfc8      	it	gt
    6c1c:	4610      	movgt	r0, r2
    6c1e:	b2f3      	uxtb	r3, r6
    6c20:	f103 0237 	add.w	r2, r3, #55	; 0x37
    6c24:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    6c28:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6c2a:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c2e:	2e09      	cmp	r6, #9
    6c30:	bfc8      	it	gt
    6c32:	4613      	movgt	r3, r2
    6c34:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    6c36:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c3a:	f102 0837 	add.w	r8, r2, #55	; 0x37
    6c3e:	3230      	adds	r2, #48	; 0x30
    6c40:	2809      	cmp	r0, #9
    6c42:	bfd8      	it	le
    6c44:	4690      	movle	r8, r2
    6c46:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6c4a:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c4e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    6c52:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6c54:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c56:	f88d 5020 	strb.w	r5, [sp, #32]
    6c5a:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6c5e:	3230      	adds	r2, #48	; 0x30
    6c60:	f1be 0f09 	cmp.w	lr, #9
    6c64:	bfd8      	it	le
    6c66:	4614      	movle	r4, r2
    6c68:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6c6a:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c6c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    6c70:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c74:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6c78:	3230      	adds	r2, #48	; 0x30
    6c7a:	2f09      	cmp	r7, #9
    6c7c:	bfcc      	ite	gt
    6c7e:	4627      	movgt	r7, r4
    6c80:	4617      	movle	r7, r2
    6c82:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    6c84:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c88:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    6c8c:	f102 0737 	add.w	r7, r2, #55	; 0x37
    6c90:	3230      	adds	r2, #48	; 0x30
    6c92:	2e09      	cmp	r6, #9
    6c94:	bfcc      	ite	gt
    6c96:	463e      	movgt	r6, r7
    6c98:	4616      	movle	r6, r2
    6c9a:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    6c9c:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c9e:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    6ca2:	f102 0637 	add.w	r6, r2, #55	; 0x37
    6ca6:	3230      	adds	r2, #48	; 0x30
    6ca8:	2909      	cmp	r1, #9
    6caa:	bfcc      	ite	gt
    6cac:	4631      	movgt	r1, r6
    6cae:	4611      	movle	r1, r2
    6cb0:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    6cb2:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6cb6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    6cba:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6cbe:	3237      	adds	r2, #55	; 0x37
    6cc0:	2d09      	cmp	r5, #9
    6cc2:	bf88      	it	hi
    6cc4:	4611      	movhi	r1, r2
    6cc6:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    6cca:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6cd2:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6cd6:	3237      	adds	r2, #55	; 0x37
    6cd8:	f1bc 0f09 	cmp.w	ip, #9
    6cdc:	bfd4      	ite	le
    6cde:	468c      	movle	ip, r1
    6ce0:	4694      	movgt	ip, r2
    6ce2:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6ce6:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6cea:	f102 0137 	add.w	r1, r2, #55	; 0x37
    6cee:	3230      	adds	r2, #48	; 0x30
    6cf0:	f1be 0f09 	cmp.w	lr, #9
    6cf4:	bfcc      	ite	gt
    6cf6:	468e      	movgt	lr, r1
    6cf8:	4696      	movle	lr, r2
    6cfa:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    6cfc:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6d00:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    6d04:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    6d08:	3130      	adds	r1, #48	; 0x30
    6d0a:	2c09      	cmp	r4, #9
    6d0c:	bfd8      	it	le
    6d0e:	468e      	movle	lr, r1
    6d10:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    6d12:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6d16:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    6d1a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    6d1e:	3237      	adds	r2, #55	; 0x37
    6d20:	e008      	b.n	6d34 <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    6d22:	bf00      	nop
    6d24:	40001c00 	.word	0x40001c00
    6d28:	40000800 	.word	0x40000800
    6d2c:	200000df 	.word	0x200000df
    6d30:	00022e2c 	.word	0x00022e2c
    6d34:	2f09      	cmp	r7, #9
    6d36:	bfd4      	ite	le
    6d38:	4677      	movle	r7, lr
    6d3a:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    6d3c:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6d40:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    6d42:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6d46:	b2da      	uxtb	r2, r3
    6d48:	b2e9      	uxtb	r1, r5
    6d4a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    6d4e:	f104 0730 	add.w	r7, r4, #48	; 0x30
    6d52:	3437      	adds	r4, #55	; 0x37
    6d54:	2e09      	cmp	r6, #9
    6d56:	bfd8      	it	le
    6d58:	463c      	movle	r4, r7
    6d5a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    6d5e:	f102 0730 	add.w	r7, r2, #48	; 0x30
    6d62:	3137      	adds	r1, #55	; 0x37
    6d64:	3237      	adds	r2, #55	; 0x37
    6d66:	2d09      	cmp	r5, #9
    6d68:	bfd8      	it	le
    6d6a:	4671      	movle	r1, lr
    6d6c:	2b09      	cmp	r3, #9
    6d6e:	bfd4      	ite	le
    6d70:	463b      	movle	r3, r7
    6d72:	4613      	movgt	r3, r2
    6d74:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    6d78:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    6d7c:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    6d80:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    6d84:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    6d88:	f10d 030f 	add.w	r3, sp, #15
    6d8c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    6d90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6d94:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    6d98:	428b      	cmp	r3, r1
    6d9a:	d1f9      	bne.n	6d90 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6d9c:	4b2a      	ldr	r3, [pc, #168]	; (6e48 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d9e:	4a2b      	ldr	r2, [pc, #172]	; (6e4c <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6da0:	4f2b      	ldr	r7, [pc, #172]	; (6e50 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    6da2:	4d2c      	ldr	r5, [pc, #176]	; (6e54 <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    6da4:	482c      	ldr	r0, [pc, #176]	; (6e58 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    6da6:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6da8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6dac:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6db0:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    6db4:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    6db8:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    6dbc:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6dc0:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6dc2:	629c      	str	r4, [r3, #40]	; 0x28
    6dc4:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6dc6:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6dc8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    6dcc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6dd4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    6dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6ddc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6de0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6de4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6de8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6dec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    6df0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6df8:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6dfa:	629c      	str	r4, [r3, #40]	; 0x28
    6dfc:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6dfe:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6e00:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    6e04:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6e08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6e0c:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    6e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6e14:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6e18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6e1c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6e20:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6e24:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6e2c:	f005 fe52 	bl	cad4 <usbdc_init>
    cdcdf_acm_init();
    6e30:	f005 fb0a 	bl	c448 <cdcdf_acm_init>
    usbdc_start(single_desc);
    6e34:	4809      	ldr	r0, [pc, #36]	; (6e5c <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    6e36:	f005 fe7b 	bl	cb30 <usbdc_start>
    usbdc_attach();
    6e3a:	f005 fe91 	bl	cb60 <usbdc_attach>
}
    6e3e:	2001      	movs	r0, #1
    6e40:	b00c      	add	sp, #48	; 0x30
    6e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e46:	bf00      	nop
    6e48:	41008000 	.word	0x41008000
    6e4c:	e000e100 	.word	0xe000e100
    6e50:	c0000100 	.word	0xc0000100
    6e54:	c0000200 	.word	0xc0000200
    6e58:	20000ae0 	.word	0x20000ae0
    6e5c:	20000000 	.word	0x20000000

00006e60 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    6e60:	2001      	movs	r0, #1
    6e62:	4770      	bx	lr

00006e64 <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    6e64:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    6e66:	f005 fb6f 	bl	c548 <cdcdf_acm_get_line_coding>
}
    6e6a:	6800      	ldr	r0, [r0, #0]
    6e6c:	bd08      	pop	{r3, pc}
    6e6e:	bf00      	nop

00006e70 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    6e70:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    6e72:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    6e76:	b103      	cbz	r3, 6e7a <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    6e78:	bd38      	pop	{r3, r4, r5, pc}
    6e7a:	4604      	mov	r4, r0
    m_portOpen = true;
    6e7c:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6e7e:	4618      	mov	r0, r3
    m_portOpen = true;
    6e80:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6e84:	4906      	ldr	r1, [pc, #24]	; (6ea0 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    6e86:	f005 fb31 	bl	c4ec <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6e8a:	4628      	mov	r0, r5
    6e8c:	4905      	ldr	r1, [pc, #20]	; (6ea4 <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    6e8e:	f005 fb2d 	bl	c4ec <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6e92:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6e96:	2140      	movs	r1, #64	; 0x40
}
    6e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6e9c:	f005 baf2 	b.w	c484 <cdcdf_acm_read>
    6ea0:	00006391 	.word	0x00006391
    6ea4:	000065c9 	.word	0x000065c9

00006ea8 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    6ea8:	4603      	mov	r3, r0
    m_inHead = 0;
    6eaa:	2200      	movs	r2, #0
    6eac:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    6eb0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    6eb4:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6eb8:	2140      	movs	r1, #64	; 0x40
    6eba:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    6ebc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6ec0:	f005 bae0 	b.w	c484 <cdcdf_acm_read>

00006ec4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    6ec4:	b538      	push	{r3, r4, r5, lr}
    6ec6:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6ec8:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    6ecc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    6ed0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6ed4:	429a      	cmp	r2, r3
    6ed6:	d100      	bne.n	6eda <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    6ed8:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6eda:	f005 fb2f 	bl	c53c <cdcdf_acm_is_enabled>
    6ede:	2800      	cmp	r0, #0
    6ee0:	d0fa      	beq.n	6ed8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    6ee2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    6ee6:	07db      	lsls	r3, r3, #31
    6ee8:	d5f6      	bpl.n	6ed8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6eea:	7b6b      	ldrb	r3, [r5, #13]
    6eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6ef0:	2b02      	cmp	r3, #2
    6ef2:	d0eb      	beq.n	6ecc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    6ef4:	bd38      	pop	{r3, r4, r5, pc}
    6ef6:	bf00      	nop

00006ef8 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    6ef8:	b538      	push	{r3, r4, r5, lr}
    6efa:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6efc:	f005 fb1e 	bl	c53c <cdcdf_acm_is_enabled>
    6f00:	4604      	mov	r4, r0
    6f02:	b170      	cbz	r0, 6f22 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    6f04:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    6f08:	f014 0401 	ands.w	r4, r4, #1
    6f0c:	d009      	beq.n	6f22 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6f0e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6f12:	7b5c      	ldrb	r4, [r3, #13]
    6f14:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6f18:	f1a4 0402 	sub.w	r4, r4, #2
    6f1c:	fab4 f484 	clz	r4, r4
    6f20:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    6f22:	4803      	ldr	r0, [pc, #12]	; (6f30 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    6f24:	2100      	movs	r1, #0
    6f26:	f002 ffeb 	bl	9f00 <Delay_cycles>
}
    6f2a:	4620      	mov	r0, r4
    6f2c:	bd38      	pop	{r3, r4, r5, pc}
    6f2e:	bf00      	nop
    6f30:	00124f80 	.word	0x00124f80

00006f34 <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    6f34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    6f38:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6f3c:	4293      	cmp	r3, r2
    6f3e:	f000 8116 	beq.w	716e <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    6f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6f46:	1c5a      	adds	r2, r3, #1
    6f48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    6f4c:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6f4e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    6f52:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6f54:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    6f56:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6f5a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    6f5e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    6f62:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    6f64:	bf48      	it	mi
    6f66:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6f68:	2d00      	cmp	r5, #0
    6f6a:	f000 80e3 	beq.w	7134 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    6f6e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    6f72:	f000 80df 	beq.w	7134 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    6f76:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6f7a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6f7e:	42ab      	cmp	r3, r5
    6f80:	bf28      	it	cs
    6f82:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    6f84:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    6f88:	4299      	cmp	r1, r3
    6f8a:	bf28      	it	cs
    6f8c:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    6f8e:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f90:	2900      	cmp	r1, #0
    6f92:	f000 80f8 	beq.w	7186 <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    6f96:	1d35      	adds	r5, r6, #4
    6f98:	4405      	add	r5, r0
    6f9a:	f102 0e04 	add.w	lr, r2, #4
    6f9e:	4577      	cmp	r7, lr
    6fa0:	bf38      	it	cc
    6fa2:	42aa      	cmpcc	r2, r5
    6fa4:	f0c0 80da 	bcc.w	715c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6fa8:	290b      	cmp	r1, #11
    6faa:	f240 80d7 	bls.w	715c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6fae:	4255      	negs	r5, r2
    6fb0:	f015 0503 	ands.w	r5, r5, #3
    6fb4:	f000 80c3 	beq.w	713e <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    6fb8:	f892 e000 	ldrb.w	lr, [r2]
    6fbc:	f800 e006 	strb.w	lr, [r0, r6]
    6fc0:	2d01      	cmp	r5, #1
    6fc2:	f107 0801 	add.w	r8, r7, #1
    6fc6:	f102 0901 	add.w	r9, r2, #1
    6fca:	f000 80ba 	beq.w	7142 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6fce:	f892 e001 	ldrb.w	lr, [r2, #1]
    6fd2:	f887 e001 	strb.w	lr, [r7, #1]
    6fd6:	2d02      	cmp	r5, #2
    6fd8:	f107 0802 	add.w	r8, r7, #2
    6fdc:	f102 0902 	add.w	r9, r2, #2
    6fe0:	f000 80af 	beq.w	7142 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6fe4:	f892 e002 	ldrb.w	lr, [r2, #2]
    6fe8:	f887 e002 	strb.w	lr, [r7, #2]
    6fec:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6ff0:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    6ff2:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6ff6:	9700      	str	r7, [sp, #0]
    6ff8:	eba1 0b05 	sub.w	fp, r1, r5
    6ffc:	f1ab 0704 	sub.w	r7, fp, #4
    7000:	08bf      	lsrs	r7, r7, #2
    7002:	eb06 0e05 	add.w	lr, r6, r5
    7006:	3701      	adds	r7, #1
    7008:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    700c:	4486      	add	lr, r0
    700e:	4415      	add	r5, r2
    7010:	f04f 0c00 	mov.w	ip, #0
    7014:	9401      	str	r4, [sp, #4]
    7016:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    701a:	f855 4b04 	ldr.w	r4, [r5], #4
    701e:	f84e 4b04 	str.w	r4, [lr], #4
    7022:	4567      	cmp	r7, ip
    7024:	d8f7      	bhi.n	7016 <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    7026:	9d00      	ldr	r5, [sp, #0]
    7028:	9c01      	ldr	r4, [sp, #4]
    702a:	45d3      	cmp	fp, sl
    702c:	4455      	add	r5, sl
    702e:	eb08 0e0a 	add.w	lr, r8, sl
    7032:	eb09 0c0a 	add.w	ip, r9, sl
    7036:	f000 808c 	beq.w	7152 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    703a:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    703e:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7042:	1c6f      	adds	r7, r5, #1
    7044:	42b9      	cmp	r1, r7
    7046:	f240 8084 	bls.w	7152 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    704a:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    704c:	f89c 7001 	ldrb.w	r7, [ip, #1]
    7050:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7054:	42a9      	cmp	r1, r5
    7056:	d97c      	bls.n	7152 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    7058:	f89c 5002 	ldrb.w	r5, [ip, #2]
    705c:	f88e 5002 	strb.w	r5, [lr, #2]
    7060:	1857      	adds	r7, r2, r1
    7062:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    7066:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    706a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    706c:	1a6d      	subs	r5, r5, r1
        if (count) {
    706e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    7070:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    7074:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    7078:	d065      	beq.n	7146 <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    707a:	1d01      	adds	r1, r0, #4
    707c:	1d3a      	adds	r2, r7, #4
    707e:	4290      	cmp	r0, r2
    7080:	bf38      	it	cc
    7082:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    7084:	4605      	mov	r5, r0
    7086:	d375      	bcc.n	7174 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    7088:	2b0b      	cmp	r3, #11
    708a:	d973      	bls.n	7174 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    708c:	4242      	negs	r2, r0
    708e:	f012 0203 	ands.w	r2, r2, #3
    7092:	d060      	beq.n	7156 <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    7094:	7839      	ldrb	r1, [r7, #0]
    7096:	7001      	strb	r1, [r0, #0]
    7098:	2a01      	cmp	r2, #1
    709a:	f100 0501 	add.w	r5, r0, #1
    709e:	f107 0e01 	add.w	lr, r7, #1
    70a2:	d059      	beq.n	7158 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    70a4:	7879      	ldrb	r1, [r7, #1]
    70a6:	7041      	strb	r1, [r0, #1]
    70a8:	2a02      	cmp	r2, #2
    70aa:	f100 0502 	add.w	r5, r0, #2
    70ae:	f107 0e02 	add.w	lr, r7, #2
    70b2:	d051      	beq.n	7158 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    70b4:	78b9      	ldrb	r1, [r7, #2]
    70b6:	7081      	strb	r1, [r0, #2]
    70b8:	1cc5      	adds	r5, r0, #3
    70ba:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    70be:	f04f 0803 	mov.w	r8, #3
    70c2:	eba3 0c02 	sub.w	ip, r3, r2
    70c6:	f1ac 0104 	sub.w	r1, ip, #4
    70ca:	0889      	lsrs	r1, r1, #2
    70cc:	1c4e      	adds	r6, r1, #1
    70ce:	4417      	add	r7, r2
    70d0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    70d4:	4402      	add	r2, r0
    70d6:	2100      	movs	r1, #0
    70d8:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    70da:	f857 ab04 	ldr.w	sl, [r7], #4
    70de:	f842 ab04 	str.w	sl, [r2], #4
    70e2:	428e      	cmp	r6, r1
    70e4:	d8f8      	bhi.n	70d8 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    70e6:	45cc      	cmp	ip, r9
    70e8:	eb08 0209 	add.w	r2, r8, r9
    70ec:	eb05 0109 	add.w	r1, r5, r9
    70f0:	eb0e 0709 	add.w	r7, lr, r9
    70f4:	d00d      	beq.n	7112 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    70f6:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    70fa:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    70fe:	1c55      	adds	r5, r2, #1
    7100:	42ab      	cmp	r3, r5
    7102:	d906      	bls.n	7112 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    7104:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    7106:	787d      	ldrb	r5, [r7, #1]
    7108:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    710a:	4293      	cmp	r3, r2
    710c:	d901      	bls.n	7112 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    710e:	78ba      	ldrb	r2, [r7, #2]
    7110:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    7112:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7116:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    711a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    711e:	441a      	add	r2, r3
            m_readBufAvail -= count;
    7120:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    7122:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7126:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    712a:	b91d      	cbnz	r5, 7134 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    712c:	3080      	adds	r0, #128	; 0x80
    712e:	2140      	movs	r1, #64	; 0x40
    7130:	f005 f9a8 	bl	c484 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    7134:	b662      	cpsie	i
    return retVal;
    7136:	b220      	sxth	r0, r4
}
    7138:	b003      	add	sp, #12
    713a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    713e:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    7140:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7142:	9500      	str	r5, [sp, #0]
    7144:	e758      	b.n	6ff8 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    7146:	4431      	add	r1, r6
    7148:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    714c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7150:	e7eb      	b.n	712a <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    7152:	1857      	adds	r7, r2, r1
    7154:	e785      	b.n	7062 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    7156:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    7158:	4690      	mov	r8, r2
    715a:	e7b2      	b.n	70c2 <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    715c:	1e7d      	subs	r5, r7, #1
    715e:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    7160:	f812 eb01 	ldrb.w	lr, [r2], #1
    7164:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7168:	42ba      	cmp	r2, r7
    716a:	d1f9      	bne.n	7160 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    716c:	e779      	b.n	7062 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    716e:	f04f 30ff 	mov.w	r0, #4294967295
    7172:	4770      	bx	lr
    7174:	1e42      	subs	r2, r0, #1
    7176:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    7178:	f817 1b01 	ldrb.w	r1, [r7], #1
    717c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    7180:	42bd      	cmp	r5, r7
    7182:	d1f9      	bne.n	7178 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    7184:	e7c5      	b.n	7112 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    7186:	4617      	mov	r7, r2
    7188:	e76f      	b.n	706a <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    718a:	bf00      	nop

0000718c <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    718c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7190:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    7194:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    7196:	bf1a      	itte	ne
    7198:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    719c:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    719e:	f04f 30ff 	moveq.w	r0, #4294967295
}
    71a2:	4770      	bx	lr

000071a4 <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    71a4:	b570      	push	{r4, r5, r6, lr}
    71a6:	4604      	mov	r4, r0
    71a8:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    71aa:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    71ae:	f005 f9c5 	bl	c53c <cdcdf_acm_is_enabled>
    71b2:	b350      	cbz	r0, 720a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    71b4:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    71b8:	f010 0001 	ands.w	r0, r0, #1
    71bc:	d025      	beq.n	720a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    71be:	7b6b      	ldrb	r3, [r5, #13]
    71c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    71c4:	2b02      	cmp	r3, #2
    71c6:	d001      	beq.n	71cc <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    71c8:	2000      	movs	r0, #0
    71ca:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    71cc:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    71d0:	b900      	cbnz	r0, 71d4 <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    71d2:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    71d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    71d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    71dc:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    71de:	1e5a      	subs	r2, r3, #1
    71e0:	d40e      	bmi.n	7200 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    71e2:	2a00      	cmp	r2, #0
    71e4:	d0e3      	beq.n	71ae <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    71e6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    71ea:	4423      	add	r3, r4
    71ec:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    71f0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    71f4:	3301      	adds	r3, #1
    71f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71fa:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    71fe:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    7200:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    7204:	2a00      	cmp	r2, #0
    7206:	d0d2      	beq.n	71ae <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    7208:	e7ed      	b.n	71e6 <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    720a:	bd70      	pop	{r4, r5, r6, pc}

0000720c <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    720c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    7210:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    7214:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    7216:	bf48      	it	mi
    7218:	3040      	addmi	r0, #64	; 0x40
}
    721a:	4770      	bx	lr

0000721c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    721c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    7220:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    7224:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    7226:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    7228:	bf48      	it	mi
    722a:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    722e:	4770      	bx	lr

00007230 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    7230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7234:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    7238:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    723a:	f04f 0101 	mov.w	r1, #1
    723e:	f3bf 8f5b 	dmb	ish
    7242:	e8d3 2f4f 	ldrexb	r2, [r3]
    7246:	e8c3 1f44 	strexb	r4, r1, [r3]
    724a:	2c00      	cmp	r4, #0
    724c:	d1f9      	bne.n	7242 <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    724e:	f3bf 8f5b 	dmb	ish
    7252:	f012 0fff 	tst.w	r2, #255	; 0xff
    7256:	f040 80e4 	bne.w	7422 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    725a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    725e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    7262:	428e      	cmp	r6, r1
    7264:	f000 81b6 	beq.w	75d4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7268:	f100 0340 	add.w	r3, r0, #64	; 0x40
    726c:	eb03 0706 	add.w	r7, r3, r6
    7270:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    7274:	f0c0 80d8 	bcc.w	7428 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7278:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    727c:	4411      	add	r1, r2
    727e:	2940      	cmp	r1, #64	; 0x40
    7280:	bf28      	it	cs
    7282:	2140      	movcs	r1, #64	; 0x40
    7284:	428a      	cmp	r2, r1
    7286:	bf28      	it	cs
    7288:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    728a:	2a00      	cmp	r2, #0
    728c:	f000 81c7 	beq.w	761e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    7290:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    7294:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7298:	eb00 080e 	add.w	r8, r0, lr
    729c:	4404      	add	r4, r0
    729e:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    72a2:	45e0      	cmp	r8, ip
    72a4:	bf38      	it	cc
    72a6:	42a5      	cmpcc	r5, r4
    72a8:	f0c0 81ae 	bcc.w	7608 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    72ac:	2a0b      	cmp	r2, #11
    72ae:	f240 81ab 	bls.w	7608 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    72b2:	426c      	negs	r4, r5
    72b4:	f014 0403 	ands.w	r4, r4, #3
    72b8:	f000 817f 	beq.w	75ba <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    72bc:	5d9e      	ldrb	r6, [r3, r6]
    72be:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    72c2:	2c01      	cmp	r4, #1
    72c4:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    72c8:	f107 0801 	add.w	r8, r7, #1
    72cc:	f000 817b 	beq.w	75c6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    72d0:	787e      	ldrb	r6, [r7, #1]
    72d2:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    72d6:	2c02      	cmp	r4, #2
    72d8:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    72dc:	f107 0802 	add.w	r8, r7, #2
    72e0:	f000 8171 	beq.w	75c6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    72e4:	78be      	ldrb	r6, [r7, #2]
    72e6:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72ea:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    72ec:	f107 0803 	add.w	r8, r7, #3
    72f0:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72f4:	9601      	str	r6, [sp, #4]
    72f6:	eba2 0b04 	sub.w	fp, r2, r4
    72fa:	f1ab 0704 	sub.w	r7, fp, #4
    72fe:	08bf      	lsrs	r7, r7, #2
    7300:	eb0e 0604 	add.w	r6, lr, r4
    7304:	3701      	adds	r7, #1
    7306:	34c0      	adds	r4, #192	; 0xc0
    7308:	4406      	add	r6, r0
    730a:	4404      	add	r4, r0
    730c:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7310:	f04f 0e00 	mov.w	lr, #0
    7314:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7318:	f856 ab04 	ldr.w	sl, [r6], #4
    731c:	f844 ab04 	str.w	sl, [r4], #4
    7320:	45be      	cmp	lr, r7
    7322:	d3f7      	bcc.n	7314 <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    7324:	9c01      	ldr	r4, [sp, #4]
    7326:	45cb      	cmp	fp, r9
    7328:	444c      	add	r4, r9
    732a:	eb08 0e09 	add.w	lr, r8, r9
    732e:	eb0c 0609 	add.w	r6, ip, r9
    7332:	d00f      	beq.n	7354 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    7334:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7338:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    733c:	1c67      	adds	r7, r4, #1
    733e:	42ba      	cmp	r2, r7
    7340:	d908      	bls.n	7354 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    7342:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7344:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7348:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    734a:	42a2      	cmp	r2, r4
    734c:	d902      	bls.n	7354 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    734e:	f89e 4002 	ldrb.w	r4, [lr, #2]
    7352:	70b4      	strb	r4, [r6, #2]
    7354:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7356:	1a8a      	subs	r2, r1, r2
    7358:	f000 811a 	beq.w	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    735c:	1d26      	adds	r6, r4, #4
    735e:	f100 0744 	add.w	r7, r0, #68	; 0x44
    7362:	42bc      	cmp	r4, r7
    7364:	bf38      	it	cc
    7366:	42b3      	cmpcc	r3, r6
    7368:	f0c0 8145 	bcc.w	75f6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    736c:	2a0b      	cmp	r2, #11
    736e:	f240 8142 	bls.w	75f6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    7372:	425f      	negs	r7, r3
    7374:	f017 0703 	ands.w	r7, r7, #3
    7378:	f000 8129 	beq.w	75ce <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    737c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7380:	7023      	strb	r3, [r4, #0]
    7382:	2f01      	cmp	r7, #1
    7384:	f104 0c01 	add.w	ip, r4, #1
    7388:	f100 0341 	add.w	r3, r0, #65	; 0x41
    738c:	f000 811d 	beq.w	75ca <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    7390:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7394:	7063      	strb	r3, [r4, #1]
    7396:	2f02      	cmp	r7, #2
    7398:	f104 0c02 	add.w	ip, r4, #2
    739c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    73a0:	f000 8113 	beq.w	75ca <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    73a4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    73a8:	70a3      	strb	r3, [r4, #2]
    73aa:	f104 0c03 	add.w	ip, r4, #3
    73ae:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    73b2:	f04f 0903 	mov.w	r9, #3
    73b6:	eba2 0807 	sub.w	r8, r2, r7
    73ba:	f1a8 0e04 	sub.w	lr, r8, #4
    73be:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    73c2:	f107 0640 	add.w	r6, r7, #64	; 0x40
    73c6:	f10e 0e01 	add.w	lr, lr, #1
    73ca:	443c      	add	r4, r7
    73cc:	4406      	add	r6, r0
    73ce:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    73d2:	2700      	movs	r7, #0
    73d4:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    73d6:	f856 bb04 	ldr.w	fp, [r6], #4
    73da:	f844 bb04 	str.w	fp, [r4], #4
    73de:	45be      	cmp	lr, r7
    73e0:	d8f8      	bhi.n	73d4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    73e2:	45d0      	cmp	r8, sl
    73e4:	eb09 040a 	add.w	r4, r9, sl
    73e8:	eb03 070a 	add.w	r7, r3, sl
    73ec:	eb0c 060a 	add.w	r6, ip, sl
    73f0:	f000 80ce 	beq.w	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    73f4:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    73f8:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    73fc:	1c63      	adds	r3, r4, #1
    73fe:	429a      	cmp	r2, r3
    7400:	f240 80c6 	bls.w	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7404:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7406:	787b      	ldrb	r3, [r7, #1]
    7408:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    740a:	42a2      	cmp	r2, r4
    740c:	f240 80c0 	bls.w	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    7410:	78bb      	ldrb	r3, [r7, #2]
    7412:	70b3      	strb	r3, [r6, #2]
    7414:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7416:	4628      	mov	r0, r5
    7418:	f005 f848 	bl	c4ac <cdcdf_acm_write>
    741c:	2800      	cmp	r0, #0
    741e:	f040 80be 	bne.w	759e <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    7422:	b003      	add	sp, #12
    7424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    7428:	1b89      	subs	r1, r1, r6
    742a:	f106 0240 	add.w	r2, r6, #64	; 0x40
    742e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7432:	2940      	cmp	r1, #64	; 0x40
    7434:	eb00 0c02 	add.w	ip, r0, r2
    7438:	4404      	add	r4, r0
    743a:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    743e:	bf28      	it	cs
    7440:	2140      	movcs	r1, #64	; 0x40
    7442:	45f4      	cmp	ip, lr
    7444:	bf38      	it	cc
    7446:	42a5      	cmpcc	r5, r4
    7448:	f0c0 80cb 	bcc.w	75e2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    744c:	290b      	cmp	r1, #11
    744e:	f240 80c8 	bls.w	75e2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    7452:	426c      	negs	r4, r5
    7454:	f014 0403 	ands.w	r4, r4, #3
    7458:	f000 80ab 	beq.w	75b2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    745c:	5d9b      	ldrb	r3, [r3, r6]
    745e:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    7462:	2c01      	cmp	r4, #1
    7464:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7468:	f107 0e01 	add.w	lr, r7, #1
    746c:	f000 80a9 	beq.w	75c2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7470:	787b      	ldrb	r3, [r7, #1]
    7472:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    7476:	2c02      	cmp	r4, #2
    7478:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    747c:	f107 0e02 	add.w	lr, r7, #2
    7480:	f000 809f 	beq.w	75c2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7484:	78bb      	ldrb	r3, [r7, #2]
    7486:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    748a:	f107 0e03 	add.w	lr, r7, #3
    748e:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7492:	f04f 0c03 	mov.w	ip, #3
    7496:	1913      	adds	r3, r2, r4
    7498:	4403      	add	r3, r0
    749a:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    749e:	681a      	ldr	r2, [r3, #0]
    74a0:	f840 2008 	str.w	r2, [r0, r8]
    74a4:	1b0f      	subs	r7, r1, r4
    74a6:	1f3a      	subs	r2, r7, #4
    74a8:	0892      	lsrs	r2, r2, #2
    74aa:	eb00 0408 	add.w	r4, r0, r8
    74ae:	3201      	adds	r2, #1
    74b0:	f8d3 8004 	ldr.w	r8, [r3, #4]
    74b4:	f8c4 8004 	str.w	r8, [r4, #4]
    74b8:	2a02      	cmp	r2, #2
    74ba:	ea4f 0882 	mov.w	r8, r2, lsl #2
    74be:	d04f      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    74c0:	f8d3 9008 	ldr.w	r9, [r3, #8]
    74c4:	f8c4 9008 	str.w	r9, [r4, #8]
    74c8:	2a03      	cmp	r2, #3
    74ca:	d049      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    74cc:	f8d3 900c 	ldr.w	r9, [r3, #12]
    74d0:	f8c4 900c 	str.w	r9, [r4, #12]
    74d4:	2a04      	cmp	r2, #4
    74d6:	d043      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    74d8:	f8d3 9010 	ldr.w	r9, [r3, #16]
    74dc:	f8c4 9010 	str.w	r9, [r4, #16]
    74e0:	2a05      	cmp	r2, #5
    74e2:	d03d      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    74e4:	f8d3 9014 	ldr.w	r9, [r3, #20]
    74e8:	f8c4 9014 	str.w	r9, [r4, #20]
    74ec:	2a06      	cmp	r2, #6
    74ee:	d037      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    74f0:	f8d3 9018 	ldr.w	r9, [r3, #24]
    74f4:	f8c4 9018 	str.w	r9, [r4, #24]
    74f8:	2a07      	cmp	r2, #7
    74fa:	d031      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    74fc:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7500:	f8c4 901c 	str.w	r9, [r4, #28]
    7504:	2a08      	cmp	r2, #8
    7506:	d02b      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7508:	f8d3 9020 	ldr.w	r9, [r3, #32]
    750c:	f8c4 9020 	str.w	r9, [r4, #32]
    7510:	2a09      	cmp	r2, #9
    7512:	d025      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7514:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7518:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    751c:	2a0a      	cmp	r2, #10
    751e:	d01f      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7520:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7524:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7528:	2a0b      	cmp	r2, #11
    752a:	d019      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    752c:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    7530:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    7534:	2a0c      	cmp	r2, #12
    7536:	d013      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7538:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    753c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7540:	2a0d      	cmp	r2, #13
    7542:	d00d      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7544:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7548:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    754c:	2a0e      	cmp	r2, #14
    754e:	d007      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7550:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    7554:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7558:	2a0f      	cmp	r2, #15
    755a:	d001      	beq.n	7560 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    755e:	63e3      	str	r3, [r4, #60]	; 0x3c
    7560:	4547      	cmp	r7, r8
    7562:	eb0c 0308 	add.w	r3, ip, r8
    7566:	eb06 0408 	add.w	r4, r6, r8
    756a:	eb0e 0c08 	add.w	ip, lr, r8
    756e:	d00f      	beq.n	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7570:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    7574:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7578:	1c5a      	adds	r2, r3, #1
    757a:	4291      	cmp	r1, r2
    757c:	d908      	bls.n	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    757e:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7580:	f89c 2001 	ldrb.w	r2, [ip, #1]
    7584:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7586:	4299      	cmp	r1, r3
    7588:	d902      	bls.n	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    758a:	f89c 3002 	ldrb.w	r3, [ip, #2]
    758e:	70a3      	strb	r3, [r4, #2]
    7590:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7592:	4628      	mov	r0, r5
    7594:	f004 ff8a 	bl	c4ac <cdcdf_acm_write>
    7598:	2800      	cmp	r0, #0
    759a:	f43f af42 	beq.w	7422 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    759e:	f3bf 8f5b 	dmb	ish
    75a2:	2300      	movs	r3, #0
    75a4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    75a8:	f3bf 8f5b 	dmb	ish
}
    75ac:	b003      	add	sp, #12
    75ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    75b2:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    75b4:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    75b6:	462e      	mov	r6, r5
    75b8:	e76d      	b.n	7496 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    75ba:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    75bc:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    75be:	46ac      	mov	ip, r5
    75c0:	e699      	b.n	72f6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    75c2:	46a4      	mov	ip, r4
    75c4:	e767      	b.n	7496 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    75c6:	9401      	str	r4, [sp, #4]
    75c8:	e695      	b.n	72f6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    75ca:	46b9      	mov	r9, r7
    75cc:	e6f3      	b.n	73b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    75ce:	46b9      	mov	r9, r7
    75d0:	46a4      	mov	ip, r4
    75d2:	e6f0      	b.n	73b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    75d4:	f3bf 8f5b 	dmb	ish
    75d8:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    75dc:	f3bf 8f5b 	dmb	ish
        return;
    75e0:	e71f      	b.n	7422 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    75e2:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    75e6:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    75e8:	f817 2b01 	ldrb.w	r2, [r7], #1
    75ec:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    75f0:	42a7      	cmp	r7, r4
    75f2:	d1f9      	bne.n	75e8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    75f4:	e7cc      	b.n	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    75f6:	3c01      	subs	r4, #1
    75f8:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    75fa:	f813 6b01 	ldrb.w	r6, [r3], #1
    75fe:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7602:	4293      	cmp	r3, r2
    7604:	d1f9      	bne.n	75fa <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    7606:	e7c3      	b.n	7590 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7608:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    760c:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7610:	f817 6b01 	ldrb.w	r6, [r7], #1
    7614:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7618:	45be      	cmp	lr, r7
    761a:	d1f9      	bne.n	7610 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    761c:	e69a      	b.n	7354 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    761e:	462c      	mov	r4, r5
    7620:	e699      	b.n	7356 <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    7622:	bf00      	nop

00007624 <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    7624:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    7626:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    762a:	b903      	cbnz	r3, 762e <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    762c:	bd38      	pop	{r3, r4, r5, pc}
    762e:	4605      	mov	r5, r0
    TxPump();
    7630:	f7ff fdfe 	bl	7230 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7634:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    7638:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    763c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7640:	429a      	cmp	r2, r3
    7642:	d00b      	beq.n	765c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7644:	f004 ff7a 	bl	c53c <cdcdf_acm_is_enabled>
    7648:	b140      	cbz	r0, 765c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    764a:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    764e:	07db      	lsls	r3, r3, #31
    7650:	d504      	bpl.n	765c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7652:	7b63      	ldrb	r3, [r4, #13]
    7654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7658:	2b02      	cmp	r3, #2
    765a:	d0ed      	beq.n	7638 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    765c:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    765e:	4621      	mov	r1, r4
    m_portOpen = false;
    7660:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7664:	4620      	mov	r0, r4
    7666:	f004 ff41 	bl	c4ec <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    766a:	4621      	mov	r1, r4
    766c:	2001      	movs	r0, #1
    766e:	f004 ff3d 	bl	c4ec <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    7672:	f004 ff2f 	bl	c4d4 <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    7676:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    767a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    767e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    7682:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    7686:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    768a:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    768e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    7692:	bd38      	pop	{r3, r4, r5, pc}

00007694 <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    7694:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    7698:	b103      	cbz	r3, 769c <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    769a:	4770      	bx	lr
    769c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    76a0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    76a4:	429a      	cmp	r2, r3
    76a6:	f000 80fd 	beq.w	78a4 <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    76aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    76ae:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    76b2:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    76b4:	f04f 0101 	mov.w	r1, #1
    76b8:	f3bf 8f5b 	dmb	ish
    76bc:	e8d3 2f4f 	ldrexb	r2, [r3]
    76c0:	e8c3 1f44 	strexb	r4, r1, [r3]
    76c4:	2c00      	cmp	r4, #0
    76c6:	d1f9      	bne.n	76bc <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    76c8:	f3bf 8f5b 	dmb	ish
    76cc:	f012 0fff 	tst.w	r2, #255	; 0xff
    76d0:	f040 80e5 	bne.w	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    76d4:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    76d8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    76dc:	428e      	cmp	r6, r1
    76de:	f000 81ab 	beq.w	7a38 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    76e2:	f100 0340 	add.w	r3, r0, #64	; 0x40
    76e6:	eb03 0706 	add.w	r7, r3, r6
    76ea:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    76ee:	f0c0 80da 	bcc.w	78a6 <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    76f2:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    76f6:	4411      	add	r1, r2
    76f8:	2940      	cmp	r1, #64	; 0x40
    76fa:	bf28      	it	cs
    76fc:	2140      	movcs	r1, #64	; 0x40
    76fe:	428a      	cmp	r2, r1
    7700:	bf28      	it	cs
    7702:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7704:	2a00      	cmp	r2, #0
    7706:	f000 81bc 	beq.w	7a82 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    770a:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    770e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7712:	eb00 080e 	add.w	r8, r0, lr
    7716:	4404      	add	r4, r0
    7718:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    771c:	45e0      	cmp	r8, ip
    771e:	bf38      	it	cc
    7720:	42a5      	cmpcc	r5, r4
    7722:	f0c0 81a3 	bcc.w	7a6c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    7726:	2a0b      	cmp	r2, #11
    7728:	f240 81a0 	bls.w	7a6c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    772c:	426c      	negs	r4, r5
    772e:	f014 0403 	ands.w	r4, r4, #3
    7732:	f000 8177 	beq.w	7a24 <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    7736:	5d9e      	ldrb	r6, [r3, r6]
    7738:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    773c:	2c01      	cmp	r4, #1
    773e:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7742:	f107 0801 	add.w	r8, r7, #1
    7746:	f000 8171 	beq.w	7a2c <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    774a:	787e      	ldrb	r6, [r7, #1]
    774c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7750:	2c02      	cmp	r4, #2
    7752:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    7756:	f107 0802 	add.w	r8, r7, #2
    775a:	f000 8165 	beq.w	7a28 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    775e:	78be      	ldrb	r6, [r7, #2]
    7760:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7764:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    7766:	f107 0803 	add.w	r8, r7, #3
    776a:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    776e:	9601      	str	r6, [sp, #4]
    7770:	eba2 0b04 	sub.w	fp, r2, r4
    7774:	f1ab 0704 	sub.w	r7, fp, #4
    7778:	08bf      	lsrs	r7, r7, #2
    777a:	eb0e 0604 	add.w	r6, lr, r4
    777e:	3701      	adds	r7, #1
    7780:	34c0      	adds	r4, #192	; 0xc0
    7782:	4406      	add	r6, r0
    7784:	4404      	add	r4, r0
    7786:	ea4f 0987 	mov.w	r9, r7, lsl #2
    778a:	f04f 0e00 	mov.w	lr, #0
    778e:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7792:	f856 ab04 	ldr.w	sl, [r6], #4
    7796:	f844 ab04 	str.w	sl, [r4], #4
    779a:	45be      	cmp	lr, r7
    779c:	d3f7      	bcc.n	778e <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    779e:	9c01      	ldr	r4, [sp, #4]
    77a0:	45cb      	cmp	fp, r9
    77a2:	444c      	add	r4, r9
    77a4:	eb0c 0609 	add.w	r6, ip, r9
    77a8:	eb08 0e09 	add.w	lr, r8, r9
    77ac:	d00f      	beq.n	77ce <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    77ae:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    77b2:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77b6:	1c67      	adds	r7, r4, #1
    77b8:	42ba      	cmp	r2, r7
    77ba:	d908      	bls.n	77ce <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    77bc:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    77be:	f89e 7001 	ldrb.w	r7, [lr, #1]
    77c2:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77c4:	42a2      	cmp	r2, r4
    77c6:	d902      	bls.n	77ce <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    77c8:	f89e 4002 	ldrb.w	r4, [lr, #2]
    77cc:	70b4      	strb	r4, [r6, #2]
    77ce:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77d0:	1a8a      	subs	r2, r1, r2
    77d2:	d058      	beq.n	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    77d4:	1d26      	adds	r6, r4, #4
    77d6:	f100 0744 	add.w	r7, r0, #68	; 0x44
    77da:	42bc      	cmp	r4, r7
    77dc:	bf38      	it	cc
    77de:	42b3      	cmpcc	r3, r6
    77e0:	f0c0 813b 	bcc.w	7a5a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    77e4:	2a0b      	cmp	r2, #11
    77e6:	f240 8138 	bls.w	7a5a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    77ea:	425f      	negs	r7, r3
    77ec:	f017 0703 	ands.w	r7, r7, #3
    77f0:	f000 811f 	beq.w	7a32 <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    77f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    77f8:	7023      	strb	r3, [r4, #0]
    77fa:	2f01      	cmp	r7, #1
    77fc:	f104 0c01 	add.w	ip, r4, #1
    7800:	f100 0341 	add.w	r3, r0, #65	; 0x41
    7804:	f000 8116 	beq.w	7a34 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7808:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    780c:	7063      	strb	r3, [r4, #1]
    780e:	2f02      	cmp	r7, #2
    7810:	f104 0c02 	add.w	ip, r4, #2
    7814:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7818:	f000 810c 	beq.w	7a34 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    781c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7820:	70a3      	strb	r3, [r4, #2]
    7822:	f104 0c03 	add.w	ip, r4, #3
    7826:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    782a:	f04f 0903 	mov.w	r9, #3
    782e:	eba2 0807 	sub.w	r8, r2, r7
    7832:	f1a8 0e04 	sub.w	lr, r8, #4
    7836:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    783a:	f107 0640 	add.w	r6, r7, #64	; 0x40
    783e:	f10e 0e01 	add.w	lr, lr, #1
    7842:	443c      	add	r4, r7
    7844:	4406      	add	r6, r0
    7846:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    784a:	2700      	movs	r7, #0
    784c:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    784e:	f856 bb04 	ldr.w	fp, [r6], #4
    7852:	f844 bb04 	str.w	fp, [r4], #4
    7856:	45be      	cmp	lr, r7
    7858:	d8f8      	bhi.n	784c <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    785a:	45d0      	cmp	r8, sl
    785c:	eb09 040a 	add.w	r4, r9, sl
    7860:	eb0c 060a 	add.w	r6, ip, sl
    7864:	eb03 070a 	add.w	r7, r3, sl
    7868:	d00d      	beq.n	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    786a:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    786e:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7872:	1c63      	adds	r3, r4, #1
    7874:	429a      	cmp	r2, r3
    7876:	d906      	bls.n	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7878:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    787a:	787b      	ldrb	r3, [r7, #1]
    787c:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    787e:	42a2      	cmp	r2, r4
    7880:	d901      	bls.n	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7882:	78bb      	ldrb	r3, [r7, #2]
    7884:	70b3      	strb	r3, [r6, #2]
    7886:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7888:	4628      	mov	r0, r5
    788a:	f004 fe0f 	bl	c4ac <cdcdf_acm_write>
    788e:	b130      	cbz	r0, 789e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7890:	f3bf 8f5b 	dmb	ish
    7894:	2300      	movs	r3, #0
    7896:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    789a:	f3bf 8f5b 	dmb	ish
}
    789e:	b003      	add	sp, #12
    78a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78a4:	4770      	bx	lr
        count = min(count, tail - head);
    78a6:	1b89      	subs	r1, r1, r6
    78a8:	f106 0240 	add.w	r2, r6, #64	; 0x40
    78ac:	f106 0444 	add.w	r4, r6, #68	; 0x44
    78b0:	2940      	cmp	r1, #64	; 0x40
    78b2:	eb00 0c02 	add.w	ip, r0, r2
    78b6:	4404      	add	r4, r0
    78b8:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    78bc:	bf28      	it	cs
    78be:	2140      	movcs	r1, #64	; 0x40
    78c0:	45f4      	cmp	ip, lr
    78c2:	bf38      	it	cc
    78c4:	42a5      	cmpcc	r5, r4
    78c6:	f0c0 80be 	bcc.w	7a46 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    78ca:	290b      	cmp	r1, #11
    78cc:	f240 80bb 	bls.w	7a46 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    78d0:	426c      	negs	r4, r5
    78d2:	f014 0403 	ands.w	r4, r4, #3
    78d6:	f000 809e 	beq.w	7a16 <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    78da:	5d9b      	ldrb	r3, [r3, r6]
    78dc:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    78e0:	2c01      	cmp	r4, #1
    78e2:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    78e6:	f107 0e01 	add.w	lr, r7, #1
    78ea:	f000 8096 	beq.w	7a1a <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    78ee:	787b      	ldrb	r3, [r7, #1]
    78f0:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    78f4:	2c02      	cmp	r4, #2
    78f6:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    78fa:	f107 0e02 	add.w	lr, r7, #2
    78fe:	f000 808e 	beq.w	7a1e <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    7902:	78bb      	ldrb	r3, [r7, #2]
    7904:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7908:	f107 0e03 	add.w	lr, r7, #3
    790c:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7910:	f04f 0c03 	mov.w	ip, #3
    7914:	1913      	adds	r3, r2, r4
    7916:	4403      	add	r3, r0
    7918:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    791c:	681a      	ldr	r2, [r3, #0]
    791e:	f840 2008 	str.w	r2, [r0, r8]
    7922:	1b0f      	subs	r7, r1, r4
    7924:	1f3a      	subs	r2, r7, #4
    7926:	0892      	lsrs	r2, r2, #2
    7928:	eb00 0408 	add.w	r4, r0, r8
    792c:	3201      	adds	r2, #1
    792e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    7932:	f8c4 8004 	str.w	r8, [r4, #4]
    7936:	2a02      	cmp	r2, #2
    7938:	ea4f 0882 	mov.w	r8, r2, lsl #2
    793c:	d04f      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    793e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    7942:	f8c4 9008 	str.w	r9, [r4, #8]
    7946:	2a03      	cmp	r2, #3
    7948:	d049      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    794a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    794e:	f8c4 900c 	str.w	r9, [r4, #12]
    7952:	2a04      	cmp	r2, #4
    7954:	d043      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7956:	f8d3 9010 	ldr.w	r9, [r3, #16]
    795a:	f8c4 9010 	str.w	r9, [r4, #16]
    795e:	2a05      	cmp	r2, #5
    7960:	d03d      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7962:	f8d3 9014 	ldr.w	r9, [r3, #20]
    7966:	f8c4 9014 	str.w	r9, [r4, #20]
    796a:	2a06      	cmp	r2, #6
    796c:	d037      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    796e:	f8d3 9018 	ldr.w	r9, [r3, #24]
    7972:	f8c4 9018 	str.w	r9, [r4, #24]
    7976:	2a07      	cmp	r2, #7
    7978:	d031      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    797a:	f8d3 901c 	ldr.w	r9, [r3, #28]
    797e:	f8c4 901c 	str.w	r9, [r4, #28]
    7982:	2a08      	cmp	r2, #8
    7984:	d02b      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7986:	f8d3 9020 	ldr.w	r9, [r3, #32]
    798a:	f8c4 9020 	str.w	r9, [r4, #32]
    798e:	2a09      	cmp	r2, #9
    7990:	d025      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7992:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7996:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    799a:	2a0a      	cmp	r2, #10
    799c:	d01f      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    799e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    79a2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    79a6:	2a0b      	cmp	r2, #11
    79a8:	d019      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    79aa:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    79ae:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    79b2:	2a0c      	cmp	r2, #12
    79b4:	d013      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    79b6:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    79ba:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    79be:	2a0d      	cmp	r2, #13
    79c0:	d00d      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    79c2:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    79c6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    79ca:	2a0e      	cmp	r2, #14
    79cc:	d007      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    79ce:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    79d2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    79d6:	2a0f      	cmp	r2, #15
    79d8:	d001      	beq.n	79de <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    79da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    79dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    79de:	4547      	cmp	r7, r8
    79e0:	eb0c 0308 	add.w	r3, ip, r8
    79e4:	eb06 0408 	add.w	r4, r6, r8
    79e8:	eb0e 0c08 	add.w	ip, lr, r8
    79ec:	f43f af4b 	beq.w	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    79f0:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    79f4:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    79f8:	1c5a      	adds	r2, r3, #1
    79fa:	4291      	cmp	r1, r2
    79fc:	f67f af43 	bls.w	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7a00:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7a02:	f89c 2001 	ldrb.w	r2, [ip, #1]
    7a06:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7a08:	4299      	cmp	r1, r3
    7a0a:	f67f af3c 	bls.w	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7a0e:	f89c 3002 	ldrb.w	r3, [ip, #2]
    7a12:	70a3      	strb	r3, [r4, #2]
    7a14:	e737      	b.n	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7a16:	46be      	mov	lr, r7
    7a18:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7a1a:	46a4      	mov	ip, r4
    7a1c:	e77a      	b.n	7914 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    7a1e:	f04f 0c02 	mov.w	ip, #2
    7a22:	e777      	b.n	7914 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7a24:	46b8      	mov	r8, r7
    7a26:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7a28:	9401      	str	r4, [sp, #4]
    7a2a:	e6a1      	b.n	7770 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    7a2c:	2601      	movs	r6, #1
    7a2e:	9601      	str	r6, [sp, #4]
    7a30:	e69e      	b.n	7770 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7a32:	46a4      	mov	ip, r4
    7a34:	46b9      	mov	r9, r7
    7a36:	e6fa      	b.n	782e <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    7a38:	f3bf 8f5b 	dmb	ish
    7a3c:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7a40:	f3bf 8f5b 	dmb	ish
    7a44:	e72b      	b.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    7a46:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7a4a:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7a4c:	f817 2b01 	ldrb.w	r2, [r7], #1
    7a50:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7a54:	42a7      	cmp	r7, r4
    7a56:	d1f9      	bne.n	7a4c <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7a58:	e715      	b.n	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7a5a:	3c01      	subs	r4, #1
    7a5c:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7a5e:	f813 6b01 	ldrb.w	r6, [r3], #1
    7a62:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7a66:	4293      	cmp	r3, r2
    7a68:	d1f9      	bne.n	7a5e <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    7a6a:	e70c      	b.n	7886 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7a6c:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7a70:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7a74:	f817 6b01 	ldrb.w	r6, [r7], #1
    7a78:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7a7c:	45be      	cmp	lr, r7
    7a7e:	d1f9      	bne.n	7a74 <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    7a80:	e6a5      	b.n	77ce <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7a82:	462c      	mov	r4, r5
    7a84:	e6a4      	b.n	77d0 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    7a86:	bf00      	nop

00007a88 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    7a88:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    7a8a:	f7fe ff85 	bl	6998 <_ZN9ClearCore10UsbManager8InstanceEv>
    7a8e:	4b01      	ldr	r3, [pc, #4]	; (7a94 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    7a90:	6018      	str	r0, [r3, #0]
    7a92:	bd08      	pop	{r3, pc}
    7a94:	20000adc 	.word	0x20000adc

00007a98 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    7a98:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7a9a:	4770      	bx	lr

00007a9c <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    7a9c:	7900      	ldrb	r0, [r0, #4]
    7a9e:	4770      	bx	lr

00007aa0 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    7aa0:	2001      	movs	r0, #1
    7aa2:	4770      	bx	lr

00007aa4 <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    7aa4:	b510      	push	{r4, lr}
    7aa6:	4604      	mov	r4, r0
    DigitalIn() {};
    7aa8:	f7fc fffa 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    7aac:	4620      	mov	r0, r4
    7aae:	4b0c      	ldr	r3, [pc, #48]	; (7ae0 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    7ab0:	f840 3b30 	str.w	r3, [r0], #48
    7ab4:	f004 f8a2 	bl	bbfc <_ZN9ClearCore13StepGeneratorC1Ev>
    7ab8:	4a0a      	ldr	r2, [pc, #40]	; (7ae4 <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    7aba:	6022      	str	r2, [r4, #0]
            reg = 0;
    7abc:	2300      	movs	r3, #0
    MotorDriver() {};
    7abe:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    7ac0:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    7ac4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    7ac8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    7acc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7ad0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    7ad4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    7ad8:	6322      	str	r2, [r4, #48]	; 0x30
    7ada:	4620      	mov	r0, r4
    7adc:	bd10      	pop	{r4, pc}
    7ade:	bf00      	nop
    7ae0:	00022c70 	.word	0x00022c70
    7ae4:	00022cd0 	.word	0x00022cd0

00007ae8 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    7ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7aec:	4bbf      	ldr	r3, [pc, #764]	; (7dec <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    7aee:	f8df a340 	ldr.w	sl, [pc, #832]	; 7e30 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    7af2:	4abf      	ldr	r2, [pc, #764]	; (7df0 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    7af4:	49bf      	ldr	r1, [pc, #764]	; (7df4 <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    7af6:	4dc0      	ldr	r5, [pc, #768]	; (7df8 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    7af8:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7afa:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    7afc:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7afe:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    7b02:	7007      	strb	r7, [r0, #0]
    7b04:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7b06:	e88d 0108 	stmia.w	sp, {r3, r8}
    7b0a:	4620      	mov	r0, r4
    7b0c:	4bbb      	ldr	r3, [pc, #748]	; (7dfc <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    7b0e:	f00a f86b 	bl	11be8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    7b12:	68a1      	ldr	r1, [r4, #8]
    7b14:	6862      	ldr	r2, [r4, #4]
    7b16:	7b23      	ldrb	r3, [r4, #12]
    7b18:	f8ca 1008 	str.w	r1, [sl, #8]
    7b1c:	f8ca 2004 	str.w	r2, [sl, #4]
    7b20:	6921      	ldr	r1, [r4, #16]
    7b22:	6962      	ldr	r2, [r4, #20]
    7b24:	f88a 300c 	strb.w	r3, [sl, #12]
    7b28:	69a3      	ldr	r3, [r4, #24]
    7b2a:	f8ca 1010 	str.w	r1, [sl, #16]
    7b2e:	f8ca 2014 	str.w	r2, [sl, #20]
    7b32:	69e1      	ldr	r1, [r4, #28]
    7b34:	6a22      	ldr	r2, [r4, #32]
    7b36:	f8ca 3018 	str.w	r3, [sl, #24]
    7b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7b3c:	f8ca 101c 	str.w	r1, [sl, #28]
    7b40:	f8ca 2020 	str.w	r2, [sl, #32]
    7b44:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7b48:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    7b4c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    7b50:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    7b54:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    7b58:	2680      	movs	r6, #128	; 0x80
    7b5a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    7b5c:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    7b60:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    7b64:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    7b68:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7b6c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    7b70:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    7b74:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    7b78:	a914      	add	r1, sp, #80	; 0x50
    7b7a:	4632      	mov	r2, r6
    7b7c:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    7b80:	f016 fbf6 	bl	1e370 <memcpy>
    7b84:	4632      	mov	r2, r6
    7b86:	a934      	add	r1, sp, #208	; 0xd0
    7b88:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    7b8c:	f016 fbf0 	bl	1e370 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    7b90:	f8cd 8004 	str.w	r8, [sp, #4]
    7b94:	499a      	ldr	r1, [pc, #616]	; (7e00 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    7b96:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    7b9a:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7b9e:	9100      	str	r1, [sp, #0]
    7ba0:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    7ba4:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    7ba8:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    7bac:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7bb0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    7bb4:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    7bb8:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    7bbc:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    7bc0:	4620      	mov	r0, r4
    7bc2:	4b90      	ldr	r3, [pc, #576]	; (7e04 <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    7bc4:	4a90      	ldr	r2, [pc, #576]	; (7e08 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    7bc6:	4991      	ldr	r1, [pc, #580]	; (7e0c <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    7bc8:	f008 f926 	bl	fe18 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    7bcc:	6863      	ldr	r3, [r4, #4]
    7bce:	606b      	str	r3, [r5, #4]
    7bd0:	69a3      	ldr	r3, [r4, #24]
    7bd2:	68a2      	ldr	r2, [r4, #8]
    7bd4:	f894 e00c 	ldrb.w	lr, [r4, #12]
    7bd8:	6920      	ldr	r0, [r4, #16]
    7bda:	61ab      	str	r3, [r5, #24]
    7bdc:	69e3      	ldr	r3, [r4, #28]
    7bde:	60aa      	str	r2, [r5, #8]
    7be0:	f885 e00c 	strb.w	lr, [r5, #12]
    7be4:	6962      	ldr	r2, [r4, #20]
    7be6:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7bea:	6128      	str	r0, [r5, #16]
    7bec:	61eb      	str	r3, [r5, #28]
    7bee:	6a20      	ldr	r0, [r4, #32]
    7bf0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    7bf4:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    7bf8:	616a      	str	r2, [r5, #20]
    7bfa:	6228      	str	r0, [r5, #32]
    7bfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7bfe:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    7c00:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7c04:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    7c08:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    7c0c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7c10:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    7c14:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    7c18:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    7c1c:	a914      	add	r1, sp, #80	; 0x50
    7c1e:	626a      	str	r2, [r5, #36]	; 0x24
    7c20:	85a8      	strh	r0, [r5, #44]	; 0x2c
    7c22:	4632      	mov	r2, r6
    7c24:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7c28:	f016 fba2 	bl	1e370 <memcpy>
    7c2c:	4632      	mov	r2, r6
    7c2e:	a934      	add	r1, sp, #208	; 0xd0
    7c30:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    7c34:	f016 fb9c 	bl	1e370 <memcpy>
    7c38:	f504 7098 	add.w	r0, r4, #304	; 0x130
    7c3c:	c807      	ldmia	r0, {r0, r1, r2}
    7c3e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7c42:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    7c46:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7c4a:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    7c4e:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    7c52:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7c56:	4620      	mov	r0, r4
    7c58:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    7c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7c60:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7c64:	f04f 0a01 	mov.w	sl, #1
    7c68:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7c6c:	f009 fd62 	bl	11734 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7c70:	4b67      	ldr	r3, [pc, #412]	; (7e10 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    7c72:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    7c74:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    7c78:	4d66      	ldr	r5, [pc, #408]	; (7e14 <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    7c7a:	f8cd a004 	str.w	sl, [sp, #4]
    7c7e:	9300      	str	r3, [sp, #0]
    7c80:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    7c82:	68a6      	ldr	r6, [r4, #8]
    7c84:	71aa      	strb	r2, [r5, #6]
    7c86:	f8a5 c004 	strh.w	ip, [r5, #4]
    7c8a:	60ae      	str	r6, [r5, #8]
    7c8c:	4620      	mov	r0, r4
    7c8e:	4b62      	ldr	r3, [pc, #392]	; (7e18 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    7c90:	4a62      	ldr	r2, [pc, #392]	; (7e1c <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    7c92:	4d63      	ldr	r5, [pc, #396]	; (7e20 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    7c94:	f005 ff40 	bl	db18 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    7c98:	f104 000c 	add.w	r0, r4, #12
    7c9c:	c807      	ldmia	r0, {r0, r1, r2}
    7c9e:	f894 e006 	ldrb.w	lr, [r4, #6]
    7ca2:	68a3      	ldr	r3, [r4, #8]
    7ca4:	88a6      	ldrh	r6, [r4, #4]
    7ca6:	f885 e006 	strb.w	lr, [r5, #6]
    7caa:	60ab      	str	r3, [r5, #8]
    7cac:	f894 e018 	ldrb.w	lr, [r4, #24]
    7cb0:	69e3      	ldr	r3, [r4, #28]
    7cb2:	60e8      	str	r0, [r5, #12]
    7cb4:	6a20      	ldr	r0, [r4, #32]
    7cb6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7cba:	80ae      	strh	r6, [r5, #4]
    7cbc:	6129      	str	r1, [r5, #16]
    7cbe:	7e66      	ldrb	r6, [r4, #25]
    7cc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7cc2:	616a      	str	r2, [r5, #20]
    7cc4:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    7cc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7cca:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7cce:	61eb      	str	r3, [r5, #28]
    7cd0:	6228      	str	r0, [r5, #32]
    7cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7cd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7cd6:	766e      	strb	r6, [r5, #25]
    7cd8:	6269      	str	r1, [r5, #36]	; 0x24
    7cda:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7cde:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7ce2:	632a      	str	r2, [r5, #48]	; 0x30
    7ce4:	63a8      	str	r0, [r5, #56]	; 0x38
    7ce6:	636b      	str	r3, [r5, #52]	; 0x34
    7ce8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7cec:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7cf0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7cf2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7cf6:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7cfa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7cfc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7d00:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7d04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7d06:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7d08:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7d0c:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7d10:	6429      	str	r1, [r5, #64]	; 0x40
    7d12:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7d16:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7d18:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7d1c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7d20:	64aa      	str	r2, [r5, #72]	; 0x48
    7d22:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    7d26:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7d28:	64eb      	str	r3, [r5, #76]	; 0x4c
    7d2a:	6528      	str	r0, [r5, #80]	; 0x50
    7d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7d2e:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7d32:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7d36:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7d3a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7d3e:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7d42:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7d46:	662a      	str	r2, [r5, #96]	; 0x60
    7d48:	666b      	str	r3, [r5, #100]	; 0x64
    7d4a:	6569      	str	r1, [r5, #84]	; 0x54
    7d4c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    7d4e:	4b35      	ldr	r3, [pc, #212]	; (7e24 <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    7d50:	f8cd a000 	str.w	sl, [sp]
    7d54:	4620      	mov	r0, r4
    7d56:	66a9      	str	r1, [r5, #104]	; 0x68
    7d58:	4a33      	ldr	r2, [pc, #204]	; (7e28 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    7d5a:	4d34      	ldr	r5, [pc, #208]	; (7e2c <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    7d5c:	2140      	movs	r1, #64	; 0x40
    7d5e:	f006 fbdf 	bl	e520 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7d62:	f894 e006 	ldrb.w	lr, [r4, #6]
    7d66:	68a2      	ldr	r2, [r4, #8]
    7d68:	68e3      	ldr	r3, [r4, #12]
    7d6a:	88a6      	ldrh	r6, [r4, #4]
    7d6c:	6920      	ldr	r0, [r4, #16]
    7d6e:	6961      	ldr	r1, [r4, #20]
    7d70:	f885 e006 	strb.w	lr, [r5, #6]
    7d74:	60aa      	str	r2, [r5, #8]
    7d76:	f894 e018 	ldrb.w	lr, [r4, #24]
    7d7a:	69e2      	ldr	r2, [r4, #28]
    7d7c:	60eb      	str	r3, [r5, #12]
    7d7e:	6a23      	ldr	r3, [r4, #32]
    7d80:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7d84:	80ae      	strh	r6, [r5, #4]
    7d86:	6128      	str	r0, [r5, #16]
    7d88:	7e66      	ldrb	r6, [r4, #25]
    7d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d8c:	6169      	str	r1, [r5, #20]
    7d8e:	f885 e018 	strb.w	lr, [r5, #24]
    7d92:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7d94:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7d98:	61ea      	str	r2, [r5, #28]
    7d9a:	622b      	str	r3, [r5, #32]
    7d9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7d9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7da0:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7da4:	766e      	strb	r6, [r5, #25]
    7da6:	6268      	str	r0, [r5, #36]	; 0x24
    7da8:	6329      	str	r1, [r5, #48]	; 0x30
    7daa:	636a      	str	r2, [r5, #52]	; 0x34
    7dac:	63ab      	str	r3, [r5, #56]	; 0x38
    7dae:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7db2:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    7db6:	f8cd a000 	str.w	sl, [sp]
    7dba:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7dbe:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7dc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7dc4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7dc8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7dcc:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7dd0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7dd2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7dd6:	642a      	str	r2, [r5, #64]	; 0x40
    7dd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7dda:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7ddc:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7de0:	652e      	str	r6, [r5, #80]	; 0x50
    7de2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7de6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7de8:	64a9      	str	r1, [r5, #72]	; 0x48
    7dea:	e023      	b.n	7e34 <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    7dec:	00023044 	.word	0x00023044
    7df0:	000230a4 	.word	0x000230a4
    7df4:	00023034 	.word	0x00023034
    7df8:	2000188c 	.word	0x2000188c
    7dfc:	00022f64 	.word	0x00022f64
    7e00:	00023084 	.word	0x00023084
    7e04:	00023024 	.word	0x00023024
    7e08:	00022f54 	.word	0x00022f54
    7e0c:	00023074 	.word	0x00023074
    7e10:	00023244 	.word	0x00023244
    7e14:	2000147c 	.word	0x2000147c
    7e18:	00023204 	.word	0x00023204
    7e1c:	000230d4 	.word	0x000230d4
    7e20:	200011e8 	.word	0x200011e8
    7e24:	00023214 	.word	0x00023214
    7e28:	000231b4 	.word	0x000231b4
    7e2c:	20001254 	.word	0x20001254
    7e30:	20001748 	.word	0x20001748
    7e34:	64ea      	str	r2, [r5, #76]	; 0x4c
    7e36:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7e3a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7e3e:	656e      	str	r6, [r5, #84]	; 0x54
    7e40:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7e44:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7e48:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7e4c:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7e50:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7e54:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7e58:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7e5c:	4620      	mov	r0, r4
    7e5e:	4db9      	ldr	r5, [pc, #740]	; (8144 <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    7e60:	4bb9      	ldr	r3, [pc, #740]	; (8148 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    7e62:	4aba      	ldr	r2, [pc, #744]	; (814c <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    7e64:	2120      	movs	r1, #32
    7e66:	f006 fb5b 	bl	e520 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7e6a:	f894 e006 	ldrb.w	lr, [r4, #6]
    7e6e:	68a2      	ldr	r2, [r4, #8]
    7e70:	68e3      	ldr	r3, [r4, #12]
    7e72:	88a6      	ldrh	r6, [r4, #4]
    7e74:	6920      	ldr	r0, [r4, #16]
    7e76:	6961      	ldr	r1, [r4, #20]
    7e78:	f885 e006 	strb.w	lr, [r5, #6]
    7e7c:	60aa      	str	r2, [r5, #8]
    7e7e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7e82:	69e2      	ldr	r2, [r4, #28]
    7e84:	60eb      	str	r3, [r5, #12]
    7e86:	6a23      	ldr	r3, [r4, #32]
    7e88:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7e8c:	80ae      	strh	r6, [r5, #4]
    7e8e:	6128      	str	r0, [r5, #16]
    7e90:	7e66      	ldrb	r6, [r4, #25]
    7e92:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e94:	6169      	str	r1, [r5, #20]
    7e96:	f885 e018 	strb.w	lr, [r5, #24]
    7e9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7e9c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7ea0:	61ea      	str	r2, [r5, #28]
    7ea2:	622b      	str	r3, [r5, #32]
    7ea4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7ea8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7eac:	766e      	strb	r6, [r5, #25]
    7eae:	6268      	str	r0, [r5, #36]	; 0x24
    7eb0:	6329      	str	r1, [r5, #48]	; 0x30
    7eb2:	636a      	str	r2, [r5, #52]	; 0x34
    7eb4:	63ab      	str	r3, [r5, #56]	; 0x38
    7eb6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7eba:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    7ebe:	f8cd a000 	str.w	sl, [sp]
    7ec2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7ec6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7eca:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7ecc:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7ed0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7ed4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7ed8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7eda:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7ede:	642a      	str	r2, [r5, #64]	; 0x40
    7ee0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7ee2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7ee4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7ee8:	652e      	str	r6, [r5, #80]	; 0x50
    7eea:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7eee:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7ef0:	64a9      	str	r1, [r5, #72]	; 0x48
    7ef2:	64ea      	str	r2, [r5, #76]	; 0x4c
    7ef4:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7ef8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7efc:	656e      	str	r6, [r5, #84]	; 0x54
    7efe:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7f02:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7f06:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7f0a:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7f0e:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7f12:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7f16:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7f1a:	4620      	mov	r0, r4
    7f1c:	4d8c      	ldr	r5, [pc, #560]	; (8150 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    7f1e:	4b8d      	ldr	r3, [pc, #564]	; (8154 <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    7f20:	4a8d      	ldr	r2, [pc, #564]	; (8158 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    7f22:	2110      	movs	r1, #16
    7f24:	f006 fafc 	bl	e520 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7f28:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7f2c:	68a2      	ldr	r2, [r4, #8]
    7f2e:	68e3      	ldr	r3, [r4, #12]
    7f30:	79a6      	ldrb	r6, [r4, #6]
    7f32:	6920      	ldr	r0, [r4, #16]
    7f34:	6961      	ldr	r1, [r4, #20]
    7f36:	f8a5 e004 	strh.w	lr, [r5, #4]
    7f3a:	60aa      	str	r2, [r5, #8]
    7f3c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7f40:	69e2      	ldr	r2, [r4, #28]
    7f42:	60eb      	str	r3, [r5, #12]
    7f44:	6a23      	ldr	r3, [r4, #32]
    7f46:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7f4a:	71ae      	strb	r6, [r5, #6]
    7f4c:	6128      	str	r0, [r5, #16]
    7f4e:	7e66      	ldrb	r6, [r4, #25]
    7f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f52:	6169      	str	r1, [r5, #20]
    7f54:	f885 e018 	strb.w	lr, [r5, #24]
    7f58:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7f5a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7f5e:	61ea      	str	r2, [r5, #28]
    7f60:	622b      	str	r3, [r5, #32]
    7f62:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7f66:	766e      	strb	r6, [r5, #25]
    7f68:	6268      	str	r0, [r5, #36]	; 0x24
    7f6a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7f6e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7f72:	636a      	str	r2, [r5, #52]	; 0x34
    7f74:	63ab      	str	r3, [r5, #56]	; 0x38
    7f76:	6329      	str	r1, [r5, #48]	; 0x30
    7f78:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7f7c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    7f80:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    7f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7f86:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    7f8a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    7f8e:	9703      	str	r7, [sp, #12]
    7f90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7f92:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    7f96:	642b      	str	r3, [r5, #64]	; 0x40
    7f98:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7f9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7f9c:	64a9      	str	r1, [r5, #72]	; 0x48
    7f9e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    7fa2:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    7fa6:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    7faa:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    7fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7fb0:	64ea      	str	r2, [r5, #76]	; 0x4c
    7fb2:	652b      	str	r3, [r5, #80]	; 0x50
    7fb4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    7fb8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7fbc:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    7fc0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7fc4:	6568      	str	r0, [r5, #84]	; 0x54
    7fc6:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    7fca:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    7fce:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    7fd2:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7fd6:	f04f 0e68 	mov.w	lr, #104	; 0x68
    7fda:	4d60      	ldr	r5, [pc, #384]	; (815c <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    7fdc:	f8df c19c 	ldr.w	ip, [pc, #412]	; 817c <_ZN9ClearCore10SysManagerC1Ev+0x694>
    7fe0:	4e5f      	ldr	r6, [pc, #380]	; (8160 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    7fe2:	4b60      	ldr	r3, [pc, #384]	; (8164 <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    7fe4:	4a60      	ldr	r2, [pc, #384]	; (8168 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    7fe6:	f8cd e008 	str.w	lr, [sp, #8]
    7fea:	4620      	mov	r0, r4
    7fec:	2108      	movs	r1, #8
    7fee:	9601      	str	r6, [sp, #4]
    7ff0:	f8cd c000 	str.w	ip, [sp]
    7ff4:	f006 fc36 	bl	e864 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7ff8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7ffc:	68a2      	ldr	r2, [r4, #8]
    7ffe:	68e3      	ldr	r3, [r4, #12]
    8000:	79a6      	ldrb	r6, [r4, #6]
    8002:	6920      	ldr	r0, [r4, #16]
    8004:	6961      	ldr	r1, [r4, #20]
    8006:	f8a5 e004 	strh.w	lr, [r5, #4]
    800a:	60aa      	str	r2, [r5, #8]
    800c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8010:	69e2      	ldr	r2, [r4, #28]
    8012:	60eb      	str	r3, [r5, #12]
    8014:	6a23      	ldr	r3, [r4, #32]
    8016:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    801a:	71ae      	strb	r6, [r5, #6]
    801c:	6128      	str	r0, [r5, #16]
    801e:	7e66      	ldrb	r6, [r4, #25]
    8020:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8022:	6169      	str	r1, [r5, #20]
    8024:	f885 e018 	strb.w	lr, [r5, #24]
    8028:	6b21      	ldr	r1, [r4, #48]	; 0x30
    802a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    802e:	61ea      	str	r2, [r5, #28]
    8030:	622b      	str	r3, [r5, #32]
    8032:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8036:	766e      	strb	r6, [r5, #25]
    8038:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    803c:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8040:	6329      	str	r1, [r5, #48]	; 0x30
    8042:	636a      	str	r2, [r5, #52]	; 0x34
    8044:	63ab      	str	r3, [r5, #56]	; 0x38
    8046:	6268      	str	r0, [r5, #36]	; 0x24
    8048:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    804c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    8050:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    8054:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8056:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    805a:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    805e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8060:	6d22      	ldr	r2, [r4, #80]	; 0x50
    8062:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    8066:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    806a:	642b      	str	r3, [r5, #64]	; 0x40
    806c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    806e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8070:	64a8      	str	r0, [r5, #72]	; 0x48
    8072:	652a      	str	r2, [r5, #80]	; 0x50
    8074:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    8078:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    807c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8080:	64e9      	str	r1, [r5, #76]	; 0x4c
    8082:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    8086:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    808a:	656b      	str	r3, [r5, #84]	; 0x54
    808c:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    8090:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    8094:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    8098:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    809c:	f04f 0c65 	mov.w	ip, #101	; 0x65
    80a0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    80a4:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    80a8:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    80ac:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    80b0:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    80b4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8180 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    80b8:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    80bc:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    80c0:	9703      	str	r7, [sp, #12]
    80c2:	f8cd c008 	str.w	ip, [sp, #8]
    80c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    80c8:	4b28      	ldr	r3, [pc, #160]	; (816c <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    80ca:	f8cd e004 	str.w	lr, [sp, #4]
    80ce:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    80d0:	9300      	str	r3, [sp, #0]
    80d2:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    80d6:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    80da:	6f66      	ldr	r6, [r4, #116]	; 0x74
    80dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    80de:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    80e2:	6669      	str	r1, [r5, #100]	; 0x64
    80e4:	66aa      	str	r2, [r5, #104]	; 0x68
    80e6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    80e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    80ea:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    80ee:	676e      	str	r6, [r5, #116]	; 0x74
    80f0:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    80f4:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    80f8:	66eb      	str	r3, [r5, #108]	; 0x6c
    80fa:	67a9      	str	r1, [r5, #120]	; 0x78
    80fc:	67ea      	str	r2, [r5, #124]	; 0x7c
    80fe:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    8102:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    8106:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    810a:	4620      	mov	r0, r4
    810c:	4b18      	ldr	r3, [pc, #96]	; (8170 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    810e:	4a19      	ldr	r2, [pc, #100]	; (8174 <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    8110:	4d19      	ldr	r5, [pc, #100]	; (8178 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    8112:	2104      	movs	r1, #4
    8114:	f006 fba6 	bl	e864 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    8118:	f104 000c 	add.w	r0, r4, #12
    811c:	c807      	ldmia	r0, {r0, r1, r2}
    811e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8122:	68a3      	ldr	r3, [r4, #8]
    8124:	79a6      	ldrb	r6, [r4, #6]
    8126:	f8a5 e004 	strh.w	lr, [r5, #4]
    812a:	60ab      	str	r3, [r5, #8]
    812c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8130:	69e3      	ldr	r3, [r4, #28]
    8132:	60e8      	str	r0, [r5, #12]
    8134:	6a20      	ldr	r0, [r4, #32]
    8136:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    813a:	71ae      	strb	r6, [r5, #6]
    813c:	6129      	str	r1, [r5, #16]
    813e:	7e66      	ldrb	r6, [r4, #25]
    8140:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8142:	e01f      	b.n	8184 <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    8144:	200012b4 	.word	0x200012b4
    8148:	00023224 	.word	0x00023224
    814c:	000231c4 	.word	0x000231c4
    8150:	20001314 	.word	0x20001314
    8154:	00023234 	.word	0x00023234
    8158:	000231d4 	.word	0x000231d4
    815c:	20001374 	.word	0x20001374
    8160:	00023154 	.word	0x00023154
    8164:	000230f4 	.word	0x000230f4
    8168:	000231e4 	.word	0x000231e4
    816c:	00023124 	.word	0x00023124
    8170:	00023104 	.word	0x00023104
    8174:	000231f4 	.word	0x000231f4
    8178:	200013f8 	.word	0x200013f8
    817c:	00023114 	.word	0x00023114
    8180:	00023164 	.word	0x00023164
    8184:	616a      	str	r2, [r5, #20]
    8186:	f885 e018 	strb.w	lr, [r5, #24]
    818a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    818c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8190:	61eb      	str	r3, [r5, #28]
    8192:	6228      	str	r0, [r5, #32]
    8194:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8196:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    8198:	766e      	strb	r6, [r5, #25]
    819a:	6269      	str	r1, [r5, #36]	; 0x24
    819c:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    81a0:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    81a4:	632a      	str	r2, [r5, #48]	; 0x30
    81a6:	63a8      	str	r0, [r5, #56]	; 0x38
    81a8:	636b      	str	r3, [r5, #52]	; 0x34
    81aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    81ae:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    81b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    81b4:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    81b8:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    81bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    81be:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    81c2:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    81c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    81c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    81ca:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    81ce:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    81d2:	6429      	str	r1, [r5, #64]	; 0x40
    81d4:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    81d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    81da:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    81de:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    81e2:	64aa      	str	r2, [r5, #72]	; 0x48
    81e4:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    81e8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    81ec:	64eb      	str	r3, [r5, #76]	; 0x4c
    81ee:	6528      	str	r0, [r5, #80]	; 0x50
    81f0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    81f4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    81f8:	6569      	str	r1, [r5, #84]	; 0x54
    81fa:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    81fe:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    8202:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    8206:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    820a:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    820e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    8212:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    8216:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    821a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    821c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    821e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    8220:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    8224:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    8228:	6669      	str	r1, [r5, #100]	; 0x64
    822a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    822c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    822e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    8232:	66ab      	str	r3, [r5, #104]	; 0x68
    8234:	66e8      	str	r0, [r5, #108]	; 0x6c
    8236:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    8238:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    823c:	676e      	str	r6, [r5, #116]	; 0x74
    823e:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    8242:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    8246:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    8248:	4abe      	ldr	r2, [pc, #760]	; (8544 <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    824a:	67eb      	str	r3, [r5, #124]	; 0x7c
    824c:	4620      	mov	r0, r4
    824e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    8252:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    8256:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    825a:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    825e:	f7fc fc29 	bl	4ab4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8262:	f104 000c 	add.w	r0, r4, #12
    8266:	c807      	ldmia	r0, {r0, r1, r2}
    8268:	4db7      	ldr	r5, [pc, #732]	; (8548 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    826a:	68a3      	ldr	r3, [r4, #8]
    826c:	f894 c018 	ldrb.w	ip, [r4, #24]
    8270:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8274:	79a6      	ldrb	r6, [r4, #6]
    8276:	60ab      	str	r3, [r5, #8]
    8278:	f885 c018 	strb.w	ip, [r5, #24]
    827c:	69e3      	ldr	r3, [r4, #28]
    827e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8282:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    8286:	f8a5 e004 	strh.w	lr, [r5, #4]
    828a:	71ae      	strb	r6, [r5, #6]
    828c:	f894 e019 	ldrb.w	lr, [r4, #25]
    8290:	6a26      	ldr	r6, [r4, #32]
    8292:	60e8      	str	r0, [r5, #12]
    8294:	6129      	str	r1, [r5, #16]
    8296:	616a      	str	r2, [r5, #20]
    8298:	61eb      	str	r3, [r5, #28]
    829a:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    829e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    82a0:	4aaa      	ldr	r2, [pc, #680]	; (854c <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    82a2:	f885 e019 	strb.w	lr, [r5, #25]
    82a6:	4620      	mov	r0, r4
    82a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    82ac:	622e      	str	r6, [r5, #32]
    82ae:	626b      	str	r3, [r5, #36]	; 0x24
    82b0:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    82b4:	f7fc fbfe 	bl	4ab4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    82b8:	f104 000c 	add.w	r0, r4, #12
    82bc:	c807      	ldmia	r0, {r0, r1, r2}
    82be:	4da4      	ldr	r5, [pc, #656]	; (8550 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    82c0:	68a3      	ldr	r3, [r4, #8]
    82c2:	f894 c018 	ldrb.w	ip, [r4, #24]
    82c6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    82ca:	79a6      	ldrb	r6, [r4, #6]
    82cc:	60ab      	str	r3, [r5, #8]
    82ce:	f885 c018 	strb.w	ip, [r5, #24]
    82d2:	69e3      	ldr	r3, [r4, #28]
    82d4:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    82d8:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    82dc:	f8a5 e004 	strh.w	lr, [r5, #4]
    82e0:	71ae      	strb	r6, [r5, #6]
    82e2:	f894 e019 	ldrb.w	lr, [r4, #25]
    82e6:	6a26      	ldr	r6, [r4, #32]
    82e8:	60e8      	str	r0, [r5, #12]
    82ea:	6129      	str	r1, [r5, #16]
    82ec:	616a      	str	r2, [r5, #20]
    82ee:	61eb      	str	r3, [r5, #28]
    82f0:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    82f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    82f6:	4a97      	ldr	r2, [pc, #604]	; (8554 <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    82f8:	f885 e019 	strb.w	lr, [r5, #25]
    82fc:	4620      	mov	r0, r4
    82fe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    8302:	622e      	str	r6, [r5, #32]
    8304:	626b      	str	r3, [r5, #36]	; 0x24
    8306:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    830a:	f7fc fbd3 	bl	4ab4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    830e:	4d92      	ldr	r5, [pc, #584]	; (8558 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    8310:	88a6      	ldrh	r6, [r4, #4]
    8312:	80ae      	strh	r6, [r5, #4]
    8314:	f104 000c 	add.w	r0, r4, #12
    8318:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    831a:	2605      	movs	r6, #5
    831c:	f894 e006 	ldrb.w	lr, [r4, #6]
    8320:	68a3      	ldr	r3, [r4, #8]
    8322:	9600      	str	r6, [sp, #0]
    8324:	7e26      	ldrb	r6, [r4, #24]
    8326:	f894 c019 	ldrb.w	ip, [r4, #25]
    832a:	f885 e006 	strb.w	lr, [r5, #6]
    832e:	60ab      	str	r3, [r5, #8]
    8330:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    8334:	69e3      	ldr	r3, [r4, #28]
    8336:	6129      	str	r1, [r5, #16]
    8338:	616a      	str	r2, [r5, #20]
    833a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    833c:	6a22      	ldr	r2, [r4, #32]
    833e:	762e      	strb	r6, [r5, #24]
    8340:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    8344:	60e8      	str	r0, [r5, #12]
    8346:	f885 c019 	strb.w	ip, [r5, #25]
    834a:	61eb      	str	r3, [r5, #28]
    834c:	622a      	str	r2, [r5, #32]
    834e:	6269      	str	r1, [r5, #36]	; 0x24
    8350:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    8354:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    8358:	4620      	mov	r0, r4
    835a:	4d80      	ldr	r5, [pc, #512]	; (855c <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    835c:	4b80      	ldr	r3, [pc, #512]	; (8560 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    835e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8362:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    8366:	f005 fe8f 	bl	e088 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    836a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    836e:	68a2      	ldr	r2, [r4, #8]
    8370:	68e3      	ldr	r3, [r4, #12]
    8372:	79a6      	ldrb	r6, [r4, #6]
    8374:	6920      	ldr	r0, [r4, #16]
    8376:	6961      	ldr	r1, [r4, #20]
    8378:	f8a5 e004 	strh.w	lr, [r5, #4]
    837c:	60aa      	str	r2, [r5, #8]
    837e:	f894 e018 	ldrb.w	lr, [r4, #24]
    8382:	69e2      	ldr	r2, [r4, #28]
    8384:	60eb      	str	r3, [r5, #12]
    8386:	6a23      	ldr	r3, [r4, #32]
    8388:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    838c:	71ae      	strb	r6, [r5, #6]
    838e:	6128      	str	r0, [r5, #16]
    8390:	7e66      	ldrb	r6, [r4, #25]
    8392:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8394:	6169      	str	r1, [r5, #20]
    8396:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    839a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    839c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    83a0:	61ea      	str	r2, [r5, #28]
    83a2:	622b      	str	r3, [r5, #32]
    83a4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    83a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    83aa:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    83ae:	766e      	strb	r6, [r5, #25]
    83b0:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    83b2:	2604      	movs	r6, #4
    83b4:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    83b8:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    83bc:	63ab      	str	r3, [r5, #56]	; 0x38
    83be:	6329      	str	r1, [r5, #48]	; 0x30
    83c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    83c2:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    83c6:	4b67      	ldr	r3, [pc, #412]	; (8564 <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    83c8:	9600      	str	r6, [sp, #0]
    83ca:	4620      	mov	r0, r4
    83cc:	63e9      	str	r1, [r5, #60]	; 0x3c
    83ce:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    83d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    83d6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    83da:	f005 fe55 	bl	e088 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    83de:	f104 0008 	add.w	r0, r4, #8
    83e2:	c80d      	ldmia	r0, {r0, r2, r3}
    83e4:	4d60      	ldr	r5, [pc, #384]	; (8568 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    83e6:	88a1      	ldrh	r1, [r4, #4]
    83e8:	f894 e006 	ldrb.w	lr, [r4, #6]
    83ec:	80a9      	strh	r1, [r5, #4]
    83ee:	f885 e006 	strb.w	lr, [r5, #6]
    83f2:	6961      	ldr	r1, [r4, #20]
    83f4:	f894 e018 	ldrb.w	lr, [r4, #24]
    83f8:	60a8      	str	r0, [r5, #8]
    83fa:	60ea      	str	r2, [r5, #12]
    83fc:	7e60      	ldrb	r0, [r4, #25]
    83fe:	69e2      	ldr	r2, [r4, #28]
    8400:	612b      	str	r3, [r5, #16]
    8402:	6a23      	ldr	r3, [r4, #32]
    8404:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    8408:	6169      	str	r1, [r5, #20]
    840a:	f885 e018 	strb.w	lr, [r5, #24]
    840e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8410:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    8414:	7668      	strb	r0, [r5, #25]
    8416:	61ea      	str	r2, [r5, #28]
    8418:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    841c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    841e:	622b      	str	r3, [r5, #32]
    8420:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8422:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    8426:	6269      	str	r1, [r5, #36]	; 0x24
    8428:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    842c:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    8430:	63ab      	str	r3, [r5, #56]	; 0x38
    8432:	632a      	str	r2, [r5, #48]	; 0x30
    8434:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    8436:	f8cd 8000 	str.w	r8, [sp]
    843a:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    843e:	63ea      	str	r2, [r5, #60]	; 0x3c
    8440:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    8444:	4620      	mov	r0, r4
    8446:	4d49      	ldr	r5, [pc, #292]	; (856c <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    8448:	4b49      	ldr	r3, [pc, #292]	; (8570 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    844a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    844e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    8452:	f005 fe19 	bl	e088 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8456:	f894 c006 	ldrb.w	ip, [r4, #6]
    845a:	68a2      	ldr	r2, [r4, #8]
    845c:	68e3      	ldr	r3, [r4, #12]
    845e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8462:	6920      	ldr	r0, [r4, #16]
    8464:	6961      	ldr	r1, [r4, #20]
    8466:	f885 c006 	strb.w	ip, [r5, #6]
    846a:	60aa      	str	r2, [r5, #8]
    846c:	f894 c018 	ldrb.w	ip, [r4, #24]
    8470:	69e2      	ldr	r2, [r4, #28]
    8472:	60eb      	str	r3, [r5, #12]
    8474:	6a23      	ldr	r3, [r4, #32]
    8476:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    847a:	f8a5 e004 	strh.w	lr, [r5, #4]
    847e:	6128      	str	r0, [r5, #16]
    8480:	f894 e019 	ldrb.w	lr, [r4, #25]
    8484:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8486:	6169      	str	r1, [r5, #20]
    8488:	f885 c018 	strb.w	ip, [r5, #24]
    848c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    848e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8492:	61ea      	str	r2, [r5, #28]
    8494:	622b      	str	r3, [r5, #32]
    8496:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    849a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    849c:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    84a0:	f885 e019 	strb.w	lr, [r5, #25]
    84a4:	6268      	str	r0, [r5, #36]	; 0x24
    84a6:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    84aa:	6329      	str	r1, [r5, #48]	; 0x30
    84ac:	63ab      	str	r3, [r5, #56]	; 0x38
    84ae:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    84b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    84b4:	f8cd a000 	str.w	sl, [sp]
    84b8:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    84bc:	63ea      	str	r2, [r5, #60]	; 0x3c
    84be:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    84c2:	4620      	mov	r0, r4
    84c4:	4b2b      	ldr	r3, [pc, #172]	; (8574 <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    84c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84ca:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    84ce:	f005 fddb 	bl	e088 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    84d2:	f104 0008 	add.w	r0, r4, #8
    84d6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    84d8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8578 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    84dc:	f894 c006 	ldrb.w	ip, [r4, #6]
    84e0:	88a5      	ldrh	r5, [r4, #4]
    84e2:	f88e c006 	strb.w	ip, [lr, #6]
    84e6:	f894 c019 	ldrb.w	ip, [r4, #25]
    84ea:	f894 8018 	ldrb.w	r8, [r4, #24]
    84ee:	f8ae 5004 	strh.w	r5, [lr, #4]
    84f2:	f8ce 0008 	str.w	r0, [lr, #8]
    84f6:	69e5      	ldr	r5, [r4, #28]
    84f8:	6a20      	ldr	r0, [r4, #32]
    84fa:	f8ce 100c 	str.w	r1, [lr, #12]
    84fe:	f8ce 2010 	str.w	r2, [lr, #16]
    8502:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    8506:	f8ce 3014 	str.w	r3, [lr, #20]
    850a:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    850e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8510:	f88e c019 	strb.w	ip, [lr, #25]
    8514:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8516:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    851a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    851c:	f88e 8018 	strb.w	r8, [lr, #24]
    8520:	f8ce 501c 	str.w	r5, [lr, #28]
    8524:	f8ce 0020 	str.w	r0, [lr, #32]
    8528:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    852c:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    8530:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    8534:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    8538:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    853c:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    8540:	e01c      	b.n	857c <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    8542:	bf00      	nop
    8544:	00022fb4 	.word	0x00022fb4
    8548:	20001158 	.word	0x20001158
    854c:	00022fc4 	.word	0x00022fc4
    8550:	20001188 	.word	0x20001188
    8554:	00022fd4 	.word	0x00022fd4
    8558:	200011b8 	.word	0x200011b8
    855c:	20000b24 	.word	0x20000b24
    8560:	00022fe4 	.word	0x00022fe4
    8564:	00022ff4 	.word	0x00022ff4
    8568:	2000108c 	.word	0x2000108c
    856c:	200010d0 	.word	0x200010d0
    8570:	00023004 	.word	0x00023004
    8574:	00023014 	.word	0x00023014
    8578:	20001114 	.word	0x20001114
    857c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    857e:	9702      	str	r7, [sp, #8]
    8580:	9601      	str	r6, [sp, #4]
    8582:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    8586:	4dcc      	ldr	r5, [pc, #816]	; (88b8 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    8588:	9500      	str	r5, [sp, #0]
    858a:	4620      	mov	r0, r4
    858c:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    8590:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    8594:	4bc9      	ldr	r3, [pc, #804]	; (88bc <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    8596:	4aca      	ldr	r2, [pc, #808]	; (88c0 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    8598:	f44f 6100 	mov.w	r1, #2048	; 0x800
    859c:	f7fc fd78 	bl	5090 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    85a0:	4bc8      	ldr	r3, [pc, #800]	; (88c4 <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    85a2:	79a7      	ldrb	r7, [r4, #6]
    85a4:	68a6      	ldr	r6, [r4, #8]
    85a6:	68e5      	ldr	r5, [r4, #12]
    85a8:	6920      	ldr	r0, [r4, #16]
    85aa:	6961      	ldr	r1, [r4, #20]
    85ac:	f894 8018 	ldrb.w	r8, [r4, #24]
    85b0:	69e2      	ldr	r2, [r4, #28]
    85b2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    85b6:	f894 c019 	ldrb.w	ip, [r4, #25]
    85ba:	719f      	strb	r7, [r3, #6]
    85bc:	609e      	str	r6, [r3, #8]
    85be:	6a67      	ldr	r7, [r4, #36]	; 0x24
    85c0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    85c4:	60dd      	str	r5, [r3, #12]
    85c6:	6118      	str	r0, [r3, #16]
    85c8:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    85cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    85ce:	6159      	str	r1, [r3, #20]
    85d0:	f883 8018 	strb.w	r8, [r3, #24]
    85d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    85d6:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    85da:	61da      	str	r2, [r3, #28]
    85dc:	6a22      	ldr	r2, [r4, #32]
    85de:	f8a3 e004 	strh.w	lr, [r3, #4]
    85e2:	f883 c019 	strb.w	ip, [r3, #25]
    85e6:	621a      	str	r2, [r3, #32]
    85e8:	625f      	str	r7, [r3, #36]	; 0x24
    85ea:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    85ee:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    85f2:	6358      	str	r0, [r3, #52]	; 0x34
    85f4:	6399      	str	r1, [r3, #56]	; 0x38
    85f6:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    85fa:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    85fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8600:	649a      	str	r2, [r3, #72]	; 0x48
    8602:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    8604:	9207      	str	r2, [sp, #28]
    8606:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    860a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    860c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    8610:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8612:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    8616:	64da      	str	r2, [r3, #76]	; 0x4c
    8618:	9a07      	ldr	r2, [sp, #28]
    861a:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    861e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    8622:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    8626:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    862a:	6459      	str	r1, [r3, #68]	; 0x44
    862c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    862e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8630:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    8634:	65da      	str	r2, [r3, #92]	; 0x5c
    8636:	6f27      	ldr	r7, [r4, #112]	; 0x70
    8638:	6e22      	ldr	r2, [r4, #96]	; 0x60
    863a:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    863e:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    8642:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    8646:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    864a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    864c:	6558      	str	r0, [r3, #84]	; 0x54
    864e:	6599      	str	r1, [r3, #88]	; 0x58
    8650:	661a      	str	r2, [r3, #96]	; 0x60
    8652:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    8656:	671f      	str	r7, [r3, #112]	; 0x70
    8658:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    865c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    8660:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    8664:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    8668:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    866c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    8670:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    8674:	675e      	str	r6, [r3, #116]	; 0x74
    8676:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    867a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    867e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    8682:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    8686:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    868a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    868e:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    8692:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    8696:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    869a:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    869e:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    86a2:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    86a6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    86aa:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    86ae:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    86b2:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    86b6:	4619      	mov	r1, r3
    86b8:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    86bc:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    86c0:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    86c4:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    86c6:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    86ca:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    86ce:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    86d2:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    86d6:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    86da:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    86dc:	983a      	ldr	r0, [sp, #232]	; 0xe8
    86de:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    86e0:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    86e4:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    86e8:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    86ec:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    86f0:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    86f4:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    86f8:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    86fc:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    8700:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    8704:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    8708:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    870c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    8710:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    8714:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8718:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    871c:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    8720:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8722:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    8726:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    872a:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    872e:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    8732:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    8736:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    873a:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    873e:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    8742:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    8746:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    874a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    874e:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    8752:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    8754:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8756:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    875a:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    875e:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8762:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8764:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8768:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    876c:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    8770:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    8774:	9e49      	ldr	r6, [sp, #292]	; 0x124
    8776:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    8778:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    877c:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    8780:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    8782:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    8786:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    878a:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    878e:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    8792:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8796:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    879a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    879c:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    87a0:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    87a4:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    87a8:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    87ac:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    87b0:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    87b4:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    87b8:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    87bc:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    87c0:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    87c4:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    87c6:	9b50      	ldr	r3, [sp, #320]	; 0x140
    87c8:	9d51      	ldr	r5, [sp, #324]	; 0x144
    87ca:	9852      	ldr	r0, [sp, #328]	; 0x148
    87cc:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    87d0:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    87d4:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    87d8:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    87dc:	9b54      	ldr	r3, [sp, #336]	; 0x150
    87de:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    87e2:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    87e6:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    87ea:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    87ee:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    87f2:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    87f6:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    87fa:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    87fe:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    8802:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    8806:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    880a:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    880e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    8812:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    8816:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    881a:	4a2b      	ldr	r2, [pc, #172]	; (88c8 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    881c:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    8820:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    8824:	2401      	movs	r4, #1
    8826:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    882a:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    882e:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    8832:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    8836:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    883a:	2605      	movs	r6, #5
    883c:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8840:	9d58      	ldr	r5, [sp, #352]	; 0x160
    8842:	4f22      	ldr	r7, [pc, #136]	; (88cc <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    8844:	9402      	str	r4, [sp, #8]
    8846:	e88d 0044 	stmia.w	sp, {r2, r6}
    884a:	a808      	add	r0, sp, #32
    884c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8850:	4b1f      	ldr	r3, [pc, #124]	; (88d0 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    8852:	4a20      	ldr	r2, [pc, #128]	; (88d4 <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    8854:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8858:	f7fc fc1a 	bl	5090 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    885c:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8860:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8866:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8868:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    886a:	980d      	ldr	r0, [sp, #52]	; 0x34
    886c:	71b9      	strb	r1, [r7, #6]
    886e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8870:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    8874:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8878:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    887c:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    8880:	80ba      	strh	r2, [r7, #4]
    8882:	60bb      	str	r3, [r7, #8]
    8884:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8886:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8888:	60fe      	str	r6, [r7, #12]
    888a:	613d      	str	r5, [r7, #16]
    888c:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    8890:	9d15      	ldr	r5, [sp, #84]	; 0x54
    8892:	6178      	str	r0, [r7, #20]
    8894:	61f9      	str	r1, [r7, #28]
    8896:	9816      	ldr	r0, [sp, #88]	; 0x58
    8898:	f887 8018 	strb.w	r8, [r7, #24]
    889c:	a919      	add	r1, sp, #100	; 0x64
    889e:	623a      	str	r2, [r7, #32]
    88a0:	627b      	str	r3, [r7, #36]	; 0x24
    88a2:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    88a6:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    88aa:	637d      	str	r5, [r7, #52]	; 0x34
    88ac:	63b8      	str	r0, [r7, #56]	; 0x38
    88ae:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    88b2:	f887 c019 	strb.w	ip, [r7, #25]
    88b6:	e00f      	b.n	88d8 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    88b8:	000230e4 	.word	0x000230e4
    88bc:	00023254 	.word	0x00023254
    88c0:	00023094 	.word	0x00023094
    88c4:	20000b68 	.word	0x20000b68
    88c8:	00023284 	.word	0x00023284
    88cc:	20000cb0 	.word	0x20000cb0
    88d0:	00023264 	.word	0x00023264
    88d4:	00023274 	.word	0x00023274
    88d8:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    88dc:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    88e0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    88e4:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    88e8:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    88ec:	c90e      	ldmia	r1, {r1, r2, r3}
    88ee:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    88f2:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    88f6:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    88fa:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    88fe:	6479      	str	r1, [r7, #68]	; 0x44
    8900:	981d      	ldr	r0, [sp, #116]	; 0x74
    8902:	991e      	ldr	r1, [sp, #120]	; 0x78
    8904:	64ba      	str	r2, [r7, #72]	; 0x48
    8906:	64fb      	str	r3, [r7, #76]	; 0x4c
    8908:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    890a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    890c:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    8910:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    8914:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8916:	9e25      	ldr	r6, [sp, #148]	; 0x94
    8918:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    891c:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    8920:	6578      	str	r0, [r7, #84]	; 0x54
    8922:	65b9      	str	r1, [r7, #88]	; 0x58
    8924:	65fa      	str	r2, [r7, #92]	; 0x5c
    8926:	663b      	str	r3, [r7, #96]	; 0x60
    8928:	673d      	str	r5, [r7, #112]	; 0x70
    892a:	677e      	str	r6, [r7, #116]	; 0x74
    892c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8930:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    8934:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    8938:	9928      	ldr	r1, [sp, #160]	; 0xa0
    893a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    893c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8940:	4615      	mov	r5, r2
    8942:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8944:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8946:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    894a:	461e      	mov	r6, r3
    894c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    894e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8954:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8958:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    895a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    895c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8960:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    8964:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8966:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    896c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8970:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8972:	9836      	ldr	r0, [sp, #216]	; 0xd8
    8974:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8978:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    897c:	9937      	ldr	r1, [sp, #220]	; 0xdc
    897e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8984:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    8988:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    898c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    8990:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8994:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8998:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    899a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    899c:	993b      	ldr	r1, [sp, #236]	; 0xec
    899e:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    89a2:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    89a6:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    89aa:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    89ae:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    89b2:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    89b6:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    89ba:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    89be:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    89c2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    89c6:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    89ca:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    89ce:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    89d2:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    89d6:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    89da:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    89de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    89e2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    89e4:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    89e8:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    89ec:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    89f0:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    89f4:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    89f8:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    89fc:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    8a00:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8a04:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8a08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8a0c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8a10:	9943      	ldr	r1, [sp, #268]	; 0x10c
    8a12:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8a14:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    8a18:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    8a1c:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    8a20:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8a24:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8a26:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    8a2a:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    8a2e:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    8a32:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    8a36:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8a38:	9d49      	ldr	r5, [sp, #292]	; 0x124
    8a3a:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    8a3e:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    8a42:	984a      	ldr	r0, [sp, #296]	; 0x128
    8a44:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8a48:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    8a4c:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8a50:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    8a54:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8a58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    8a5c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8a5e:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    8a62:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    8a66:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    8a6a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    8a6e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8a72:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    8a76:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8a7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8a7e:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    8a82:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    8a84:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8a86:	9851      	ldr	r0, [sp, #324]	; 0x144
    8a88:	9952      	ldr	r1, [sp, #328]	; 0x148
    8a8a:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8a8e:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8a92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    8a96:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8a98:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    8a9c:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    8aa0:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    8aa4:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    8aa8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    8aac:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    8ab0:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8ab4:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    8ab8:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    8abc:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8ac0:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    8ac4:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    8ac8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    8acc:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8ad0:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    8ad4:	4aca      	ldr	r2, [pc, #808]	; (8e00 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    8ad6:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    8ada:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    8ade:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    8ae2:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    8ae6:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    8aea:	2503      	movs	r5, #3
    8aec:	2602      	movs	r6, #2
    8aee:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8af2:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    8af6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8afa:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8afe:	9958      	ldr	r1, [sp, #352]	; 0x160
    8b00:	4bc0      	ldr	r3, [pc, #768]	; (8e04 <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    8b02:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    8b06:	a808      	add	r0, sp, #32
    8b08:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8b0c:	4abe      	ldr	r2, [pc, #760]	; (8e08 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    8b0e:	4fbf      	ldr	r7, [pc, #764]	; (8e0c <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    8b10:	f44f 7100 	mov.w	r1, #512	; 0x200
    8b14:	f7fc fabc 	bl	5090 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8b18:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    8b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b20:	990d      	ldr	r1, [sp, #52]	; 0x34
    8b22:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8b26:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b28:	f8a7 c004 	strh.w	ip, [r7, #4]
    8b2c:	60ba      	str	r2, [r7, #8]
    8b2e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    8b32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8b34:	60fb      	str	r3, [r7, #12]
    8b36:	6179      	str	r1, [r7, #20]
    8b38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8b3a:	9915      	ldr	r1, [sp, #84]	; 0x54
    8b3c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    8b40:	f887 e006 	strb.w	lr, [r7, #6]
    8b44:	6138      	str	r0, [r7, #16]
    8b46:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    8b4a:	9811      	ldr	r0, [sp, #68]	; 0x44
    8b4c:	f887 c018 	strb.w	ip, [r7, #24]
    8b50:	61fa      	str	r2, [r7, #28]
    8b52:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    8b56:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8b58:	623b      	str	r3, [r7, #32]
    8b5a:	6379      	str	r1, [r7, #52]	; 0x34
    8b5c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8b60:	f887 e019 	strb.w	lr, [r7, #25]
    8b64:	a919      	add	r1, sp, #100	; 0x64
    8b66:	6278      	str	r0, [r7, #36]	; 0x24
    8b68:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    8b6c:	63ba      	str	r2, [r7, #56]	; 0x38
    8b6e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8b72:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    8b76:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    8b7a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    8b7e:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    8b82:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    8b86:	c90e      	ldmia	r1, {r1, r2, r3}
    8b88:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8b8c:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    8b90:	6479      	str	r1, [r7, #68]	; 0x44
    8b92:	64ba      	str	r2, [r7, #72]	; 0x48
    8b94:	991d      	ldr	r1, [sp, #116]	; 0x74
    8b96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8b98:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    8b9c:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    8ba0:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    8ba4:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    8ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
    8baa:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    8bae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8bb0:	9820      	ldr	r0, [sp, #128]	; 0x80
    8bb2:	6579      	str	r1, [r7, #84]	; 0x54
    8bb4:	65ba      	str	r2, [r7, #88]	; 0x58
    8bb6:	9924      	ldr	r1, [sp, #144]	; 0x90
    8bb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8bba:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    8bbe:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    8bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    8bc4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8bc8:	677a      	str	r2, [r7, #116]	; 0x74
    8bca:	6638      	str	r0, [r7, #96]	; 0x60
    8bcc:	6739      	str	r1, [r7, #112]	; 0x70
    8bce:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    8bd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    8bd4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    8bda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8bde:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8be0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    8be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8be6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    8bea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    8bec:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    8bf2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    8bf6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8bf8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    8bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8bfe:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    8c02:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    8c04:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    8c08:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    8c0e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8c12:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8c14:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    8c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8c1a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    8c1e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    8c20:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    8c24:	a939      	add	r1, sp, #228	; 0xe4
    8c26:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    8c2c:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8c30:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8c34:	c90e      	ldmia	r1, {r1, r2, r3}
    8c36:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    8c3a:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    8c3e:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    8c42:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    8c46:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    8c4a:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    8c4e:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    8c52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    8c56:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    8c5a:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    8c5e:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    8c62:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    8c66:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    8c6a:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8c6e:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    8c72:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    8c76:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8c7a:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8c7e:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    8c82:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    8c86:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8c8a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8c8c:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    8c90:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    8c94:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8c98:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8c9c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8ca4:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8ca8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    8caa:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    8cae:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8cb2:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    8cb6:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    8cba:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    8cbe:	9947      	ldr	r1, [sp, #284]	; 0x11c
    8cc0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    8cc4:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    8cc8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8cca:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8cce:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    8cd2:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    8cd6:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    8cda:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    8cde:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    8ce2:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8ce6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8ce8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8cea:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    8cee:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8cf2:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    8cf6:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    8cfa:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8cfe:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    8d00:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    8d04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8d08:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8d0c:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    8d10:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    8d14:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    8d18:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    8d1c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    8d1e:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8d20:	9a50      	ldr	r2, [sp, #320]	; 0x140
    8d22:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    8d26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    8d2a:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    8d2e:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    8d32:	9852      	ldr	r0, [sp, #328]	; 0x148
    8d34:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    8d38:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    8d3c:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    8d40:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8d42:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    8d46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    8d4a:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    8d4e:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8d52:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    8d56:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    8d5a:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    8d5e:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    8d62:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8d66:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    8d6a:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    8d6e:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    8d72:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    8d76:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    8d7a:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    8d7e:	f04f 0800 	mov.w	r8, #0
    8d82:	f8df e098 	ldr.w	lr, [pc, #152]	; 8e1c <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    8d86:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8d8a:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    8d8e:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    8d92:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8d96:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    8d9a:	9958      	ldr	r1, [sp, #352]	; 0x160
    8d9c:	4b1c      	ldr	r3, [pc, #112]	; (8e10 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    8d9e:	9502      	str	r5, [sp, #8]
    8da0:	f8cd 8004 	str.w	r8, [sp, #4]
    8da4:	f8cd e000 	str.w	lr, [sp]
    8da8:	a808      	add	r0, sp, #32
    8daa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8dae:	4a19      	ldr	r2, [pc, #100]	; (8e14 <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    8db0:	4f19      	ldr	r7, [pc, #100]	; (8e18 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    8db2:	f44f 7180 	mov.w	r1, #256	; 0x100
    8db6:	f7fc f96b 	bl	5090 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8dba:	a80a      	add	r0, sp, #40	; 0x28
    8dbc:	c807      	ldmia	r0, {r0, r1, r2}
    8dbe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8dc2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8dc6:	80bb      	strh	r3, [r7, #4]
    8dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8dca:	f887 e006 	strb.w	lr, [r7, #6]
    8dce:	60b8      	str	r0, [r7, #8]
    8dd0:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    8dd4:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    8dd8:	60f9      	str	r1, [r7, #12]
    8dda:	613a      	str	r2, [r7, #16]
    8ddc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8dde:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8de0:	617b      	str	r3, [r7, #20]
    8de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8de4:	f887 e018 	strb.w	lr, [r7, #24]
    8de8:	7678      	strb	r0, [r7, #25]
    8dea:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8dee:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    8df2:	61f9      	str	r1, [r7, #28]
    8df4:	623a      	str	r2, [r7, #32]
    8df6:	9915      	ldr	r1, [sp, #84]	; 0x54
    8df8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8dfa:	627b      	str	r3, [r7, #36]	; 0x24
    8dfc:	e010      	b.n	8e20 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    8dfe:	bf00      	nop
    8e00:	00023194 	.word	0x00023194
    8e04:	00023134 	.word	0x00023134
    8e08:	00023174 	.word	0x00023174
    8e0c:	20000df8 	.word	0x20000df8
    8e10:	00023144 	.word	0x00023144
    8e14:	00023184 	.word	0x00023184
    8e18:	20000f40 	.word	0x20000f40
    8e1c:	000231a4 	.word	0x000231a4
    8e20:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8e24:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8e28:	6379      	str	r1, [r7, #52]	; 0x34
    8e2a:	63ba      	str	r2, [r7, #56]	; 0x38
    8e2c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8e30:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8e34:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    8e38:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    8e3c:	9919      	ldr	r1, [sp, #100]	; 0x64
    8e3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8e40:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    8e44:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8e4a:	6479      	str	r1, [r7, #68]	; 0x44
    8e4c:	64ba      	str	r2, [r7, #72]	; 0x48
    8e4e:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    8e52:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    8e56:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    8e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    8e5c:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    8e60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8e62:	991e      	ldr	r1, [sp, #120]	; 0x78
    8e64:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    8e68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8e6a:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    8e6e:	657b      	str	r3, [r7, #84]	; 0x54
    8e70:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    8e74:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8e76:	65b9      	str	r1, [r7, #88]	; 0x58
    8e78:	65fa      	str	r2, [r7, #92]	; 0x5c
    8e7a:	9924      	ldr	r1, [sp, #144]	; 0x90
    8e7c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8e7e:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    8e82:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    8e86:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8e8a:	6739      	str	r1, [r7, #112]	; 0x70
    8e8c:	663b      	str	r3, [r7, #96]	; 0x60
    8e8e:	677a      	str	r2, [r7, #116]	; 0x74
    8e90:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    8e94:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8e96:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8e9a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    8e9c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    8ea0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8ea2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    8ea6:	992e      	ldr	r1, [sp, #184]	; 0xb8
    8ea8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    8eac:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8eae:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8eb2:	9930      	ldr	r1, [sp, #192]	; 0xc0
    8eb4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    8eb8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    8eba:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    8ebe:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8ec0:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    8ec4:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8ec6:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8eca:	9934      	ldr	r1, [sp, #208]	; 0xd0
    8ecc:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    8ed0:	9935      	ldr	r1, [sp, #212]	; 0xd4
    8ed2:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    8ed6:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    8eda:	9936      	ldr	r1, [sp, #216]	; 0xd8
    8edc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    8ee0:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8ee2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8ee6:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8ee8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    8eec:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8ef0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    8ef4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    8ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    8efa:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8efc:	993b      	ldr	r1, [sp, #236]	; 0xec
    8efe:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    8f02:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    8f06:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    8f0a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8f0e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8f12:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    8f16:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    8f1a:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    8f1e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    8f22:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    8f26:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    8f2a:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    8f2e:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    8f32:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    8f36:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8f3a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8f3e:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    8f42:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    8f46:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8f4a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8f4e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    8f52:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8f54:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    8f58:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8f5c:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8f60:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8f64:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8f68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8f6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    8f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    8f72:	9844      	ldr	r0, [sp, #272]	; 0x110
    8f74:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    8f78:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    8f7c:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    8f80:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    8f84:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    8f88:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    8f8c:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8f8e:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8f92:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    8f96:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    8f9a:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    8f9e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8fa0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    8fa4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8fa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    8faa:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8fae:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8fb0:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8fb4:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    8fb8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8fbc:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    8fc0:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8fc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8fc8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8fca:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8fce:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8fd2:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    8fd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8fda:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8fde:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8fe0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    8fe4:	9850      	ldr	r0, [sp, #320]	; 0x140
    8fe6:	9951      	ldr	r1, [sp, #324]	; 0x144
    8fe8:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8fea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    8fee:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    8ff2:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    8ff6:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    8ffa:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    8ffe:	9a54      	ldr	r2, [sp, #336]	; 0x150
    9000:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    9004:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    9008:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    900c:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    9010:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    9014:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    9018:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    901c:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    9020:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    9024:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    9028:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    902c:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    9030:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    9034:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    9038:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    903c:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    9040:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    9044:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    9048:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    904c:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    9050:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    9054:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    9056:	f8df c208 	ldr.w	ip, [pc, #520]	; 9260 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    905a:	9207      	str	r2, [sp, #28]
    905c:	f8df e204 	ldr.w	lr, [pc, #516]	; 9264 <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    9060:	9505      	str	r5, [sp, #20]
    9062:	4b78      	ldr	r3, [pc, #480]	; (9244 <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    9064:	9d07      	ldr	r5, [sp, #28]
    9066:	4878      	ldr	r0, [pc, #480]	; (9248 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    9068:	f8cd e010 	str.w	lr, [sp, #16]
    906c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9070:	e88d 1004 	stmia.w	sp, {r2, ip}
    9074:	9303      	str	r3, [sp, #12]
    9076:	9002      	str	r0, [sp, #8]
    9078:	4641      	mov	r1, r8
    907a:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    907e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 9268 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    9082:	4d72      	ldr	r5, [pc, #456]	; (924c <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    9084:	a808      	add	r0, sp, #32
    9086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    908a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    908e:	f008 f903 	bl	11298 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    9092:	990a      	ldr	r1, [sp, #40]	; 0x28
    9094:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9096:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    909a:	980c      	ldr	r0, [sp, #48]	; 0x30
    909c:	f8c8 1008 	str.w	r1, [r8, #8]
    90a0:	f8c8 2004 	str.w	r2, [r8, #4]
    90a4:	990d      	ldr	r1, [sp, #52]	; 0x34
    90a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    90a8:	f888 300c 	strb.w	r3, [r8, #12]
    90ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    90ae:	f8c8 0010 	str.w	r0, [r8, #16]
    90b2:	f8c8 1014 	str.w	r1, [r8, #20]
    90b6:	9810      	ldr	r0, [sp, #64]	; 0x40
    90b8:	9911      	ldr	r1, [sp, #68]	; 0x44
    90ba:	f8c8 2018 	str.w	r2, [r8, #24]
    90be:	f8c8 301c 	str.w	r3, [r8, #28]
    90c2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    90c6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    90ca:	f8c8 0020 	str.w	r0, [r8, #32]
    90ce:	2780      	movs	r7, #128	; 0x80
    90d0:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    90d4:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    90d8:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    90dc:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    90e0:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    90e4:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    90e8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    90ec:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    90f0:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    90f4:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    90f8:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    90fc:	a914      	add	r1, sp, #80	; 0x50
    90fe:	463a      	mov	r2, r7
    9100:	f108 0030 	add.w	r0, r8, #48	; 0x30
    9104:	f015 f934 	bl	1e370 <memcpy>
    9108:	463a      	mov	r2, r7
    910a:	a934      	add	r1, sp, #208	; 0xd0
    910c:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    9110:	f015 f92e 	bl	1e370 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    9114:	4b4e      	ldr	r3, [pc, #312]	; (9250 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    9116:	9303      	str	r3, [sp, #12]
    9118:	484e      	ldr	r0, [pc, #312]	; (9254 <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    911a:	4a4f      	ldr	r2, [pc, #316]	; (9258 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    911c:	9002      	str	r0, [sp, #8]
    911e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    9122:	9201      	str	r2, [sp, #4]
    9124:	9300      	str	r3, [sp, #0]
    9126:	9854      	ldr	r0, [sp, #336]	; 0x150
    9128:	9a55      	ldr	r2, [sp, #340]	; 0x154
    912a:	9b56      	ldr	r3, [sp, #344]	; 0x158
    912c:	9605      	str	r6, [sp, #20]
    912e:	4621      	mov	r1, r4
    9130:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    9132:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    9136:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    913a:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    913e:	9858      	ldr	r0, [sp, #352]	; 0x160
    9140:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    9144:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    9148:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    914c:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    9150:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    9152:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    9154:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    9156:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    915a:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    915e:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    9162:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    9166:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    916a:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    916e:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    9172:	a808      	add	r0, sp, #32
    9174:	4e39      	ldr	r6, [pc, #228]	; (925c <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    9176:	9604      	str	r6, [sp, #16]
    9178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    917c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    9180:	f008 f88a 	bl	11298 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    9184:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9186:	9809      	ldr	r0, [sp, #36]	; 0x24
    9188:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    918c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    918e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9190:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9192:	60ac      	str	r4, [r5, #8]
    9194:	6068      	str	r0, [r5, #4]
    9196:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9198:	980d      	ldr	r0, [sp, #52]	; 0x34
    919a:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    919e:	f885 e00c 	strb.w	lr, [r5, #12]
    91a2:	612a      	str	r2, [r5, #16]
    91a4:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    91a8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    91ac:	6168      	str	r0, [r5, #20]
    91ae:	61ae      	str	r6, [r5, #24]
    91b0:	9810      	ldr	r0, [sp, #64]	; 0x40
    91b2:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    91b6:	61ec      	str	r4, [r5, #28]
    91b8:	626b      	str	r3, [r5, #36]	; 0x24
    91ba:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    91be:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    91c2:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    91c6:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    91ca:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    91ce:	a914      	add	r1, sp, #80	; 0x50
    91d0:	6228      	str	r0, [r5, #32]
    91d2:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    91d6:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    91da:	463a      	mov	r2, r7
    91dc:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    91e0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    91e4:	f015 f8c4 	bl	1e370 <memcpy>
    91e8:	463a      	mov	r2, r7
    91ea:	a934      	add	r1, sp, #208	; 0xd0
    91ec:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    91f0:	f015 f8be 	bl	1e370 <memcpy>
    91f4:	a855      	add	r0, sp, #340	; 0x154
    91f6:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    91fa:	9b54      	ldr	r3, [sp, #336]	; 0x150
    91fc:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    9200:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    9202:	9e58      	ldr	r6, [sp, #352]	; 0x160
    9204:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    9208:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    920c:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    9210:	995b      	ldr	r1, [sp, #364]	; 0x16c
    9212:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    9216:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    9218:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    921c:	4648      	mov	r0, r9
    921e:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    9222:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    9226:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    922a:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    922e:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    9232:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    9236:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    923a:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    923e:	b05f      	add	sp, #380	; 0x17c
    9240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9244:	00022f84 	.word	0x00022f84
    9248:	00022f74 	.word	0x00022f74
    924c:	200015f0 	.word	0x200015f0
    9250:	00022fa4 	.word	0x00022fa4
    9254:	00022f94 	.word	0x00022f94
    9258:	000230c4 	.word	0x000230c4
    925c:	00023064 	.word	0x00023064
    9260:	000230b4 	.word	0x000230b4
    9264:	00023054 	.word	0x00023054
    9268:	20001498 	.word	0x20001498

0000926c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    926c:	2914      	cmp	r1, #20
    926e:	dc03      	bgt.n	9278 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    9270:	4a03      	ldr	r2, [pc, #12]	; (9280 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    9272:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    9276:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    9278:	4b02      	ldr	r3, [pc, #8]	; (9284 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    927a:	6818      	ldr	r0, [r3, #0]
    927c:	f006 bce6 	b.w	fc4c <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    9280:	00022f00 	.word	0x00022f00
    9284:	20001efc 	.word	0x20001efc

00009288 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    9288:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    928a:	4ab1      	ldr	r2, [pc, #708]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    928c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9290:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    9294:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9296:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    929a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    929e:	065e      	lsls	r6, r3, #25
    92a0:	d4fb      	bmi.n	929a <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    92a2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    92a6:	49aa      	ldr	r1, [pc, #680]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    92a8:	2001      	movs	r0, #1
    92aa:	f360 0303 	bfi	r3, r0, #0, #4
    92ae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    92b2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    92b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    92ba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    92be:	684b      	ldr	r3, [r1, #4]
    92c0:	f013 0304 	ands.w	r3, r3, #4
    92c4:	d1fb      	bne.n	92be <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    92c6:	48a3      	ldr	r0, [pc, #652]	; (9554 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    92c8:	4aa3      	ldr	r2, [pc, #652]	; (9558 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    92ca:	6981      	ldr	r1, [r0, #24]
    92cc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    92d0:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    92d2:	6811      	ldr	r1, [r2, #0]
    92d4:	f363 0141 	bfi	r1, r3, #1, #1
    92d8:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    92da:	6893      	ldr	r3, [r2, #8]
    92dc:	f013 0302 	ands.w	r3, r3, #2
    92e0:	d1fb      	bne.n	92da <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    92e2:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    92e4:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    92e6:	499a      	ldr	r1, [pc, #616]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    92e8:	f040 0002 	orr.w	r0, r0, #2
    92ec:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    92ee:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    92f0:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    92f4:	f040 0002 	orr.w	r0, r0, #2
    92f8:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    92fa:	6453      	str	r3, [r2, #68]	; 0x44
    92fc:	6493      	str	r3, [r2, #72]	; 0x48
    92fe:	64d3      	str	r3, [r2, #76]	; 0x4c
    9300:	6513      	str	r3, [r2, #80]	; 0x50
    9302:	6553      	str	r3, [r2, #84]	; 0x54
    9304:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    9306:	6a90      	ldr	r0, [r2, #40]	; 0x28
    9308:	f040 0001 	orr.w	r0, r0, #1
    930c:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    930e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    9312:	f363 1286 	bfi	r2, r3, #6, #1
    9316:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    931a:	460a      	mov	r2, r1
    931c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9320:	065d      	lsls	r5, r3, #25
    9322:	d4fb      	bmi.n	931c <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    9324:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9328:	4989      	ldr	r1, [pc, #548]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    932a:	2001      	movs	r0, #1
    932c:	f360 0303 	bfi	r3, r0, #0, #4
    9330:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9334:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    933c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9340:	684b      	ldr	r3, [r1, #4]
    9342:	f013 0304 	ands.w	r3, r3, #4
    9346:	d1fb      	bne.n	9340 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9348:	4882      	ldr	r0, [pc, #520]	; (9554 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    934a:	4a84      	ldr	r2, [pc, #528]	; (955c <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    934c:	6981      	ldr	r1, [r0, #24]
    934e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    9352:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    9354:	6811      	ldr	r1, [r2, #0]
    9356:	f363 0141 	bfi	r1, r3, #1, #1
    935a:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    935c:	6893      	ldr	r3, [r2, #8]
    935e:	f013 0302 	ands.w	r3, r3, #2
    9362:	d1fb      	bne.n	935c <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    9364:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    9366:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9368:	4979      	ldr	r1, [pc, #484]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    936a:	f040 0002 	orr.w	r0, r0, #2
    936e:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9370:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    9372:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    9376:	f040 0002 	orr.w	r0, r0, #2
    937a:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    937c:	6453      	str	r3, [r2, #68]	; 0x44
    937e:	6493      	str	r3, [r2, #72]	; 0x48
    9380:	64d3      	str	r3, [r2, #76]	; 0x4c
    9382:	6513      	str	r3, [r2, #80]	; 0x50
    9384:	6553      	str	r3, [r2, #84]	; 0x54
    9386:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9388:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    938c:	f363 1286 	bfi	r2, r3, #6, #1
    9390:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    9394:	460a      	mov	r2, r1
    9396:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    939a:	065c      	lsls	r4, r3, #25
    939c:	d4fb      	bmi.n	9396 <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    939e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    93a2:	496b      	ldr	r1, [pc, #428]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    93a4:	2006      	movs	r0, #6
    93a6:	f360 0303 	bfi	r3, r0, #0, #4
    93aa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    93ae:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    93b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    93b6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    93ba:	684b      	ldr	r3, [r1, #4]
    93bc:	f013 0318 	ands.w	r3, r3, #24
    93c0:	d1fb      	bne.n	93ba <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    93c2:	4c64      	ldr	r4, [pc, #400]	; (9554 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    93c4:	4a62      	ldr	r2, [pc, #392]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    93c6:	6960      	ldr	r0, [r4, #20]
    93c8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    93cc:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    93ce:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    93d2:	f363 1086 	bfi	r0, r3, #6, #1
    93d6:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    93da:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    93de:	0658      	lsls	r0, r3, #25
    93e0:	d4fb      	bmi.n	93da <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    93e2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    93e6:	495a      	ldr	r1, [pc, #360]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    93e8:	2006      	movs	r0, #6
    93ea:	f360 0303 	bfi	r3, r0, #0, #4
    93ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    93f2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    93f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    93fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    93fe:	684b      	ldr	r3, [r1, #4]
    9400:	f013 0318 	ands.w	r3, r3, #24
    9404:	d1fb      	bne.n	93fe <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    9406:	4c53      	ldr	r4, [pc, #332]	; (9554 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    9408:	4a51      	ldr	r2, [pc, #324]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    940a:	69a0      	ldr	r0, [r4, #24]
    940c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    9410:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    9412:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    9416:	f363 1086 	bfi	r0, r3, #6, #1
    941a:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    941e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9422:	0659      	lsls	r1, r3, #25
    9424:	d4fb      	bmi.n	941e <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    9426:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    942a:	4949      	ldr	r1, [pc, #292]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    942c:	2006      	movs	r0, #6
    942e:	f360 0303 	bfi	r3, r0, #0, #4
    9432:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    9436:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    943a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    943e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    9442:	684b      	ldr	r3, [r1, #4]
    9444:	f013 0318 	ands.w	r3, r3, #24
    9448:	d1fb      	bne.n	9442 <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    944a:	4842      	ldr	r0, [pc, #264]	; (9554 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    944c:	4a40      	ldr	r2, [pc, #256]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    944e:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9450:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9452:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    9456:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9458:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    945c:	6a04      	ldr	r4, [r0, #32]
    945e:	f044 0420 	orr.w	r4, r4, #32
    9462:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9464:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    9468:	f363 1086 	bfi	r0, r3, #6, #1
    946c:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    9470:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    9474:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9478:	2b00      	cmp	r3, #0
    947a:	d1f9      	bne.n	9470 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    947c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    9480:	4834      	ldr	r0, [pc, #208]	; (9554 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9482:	4c33      	ldr	r4, [pc, #204]	; (9550 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9484:	f363 0103 	bfi	r1, r3, #0, #4
    9488:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    948c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    9490:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9494:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    9498:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    949a:	69c1      	ldr	r1, [r0, #28]
    949c:	f041 0110 	orr.w	r1, r1, #16
    94a0:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    94a2:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    94a6:	f363 1186 	bfi	r1, r3, #6, #1
    94aa:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    94ae:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    94b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    94b6:	2b00      	cmp	r3, #0
    94b8:	d1f9      	bne.n	94ae <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    94ba:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    94be:	4a28      	ldr	r2, [pc, #160]	; (9560 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    94c0:	4d24      	ldr	r5, [pc, #144]	; (9554 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    94c2:	f363 0103 	bfi	r1, r3, #0, #4
    94c6:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    94ca:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    94ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94d2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    94d6:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    94d8:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    94da:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    94dc:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    94de:	f044 0410 	orr.w	r4, r4, #16
    94e2:	622c      	str	r4, [r5, #32]
    94e4:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    94e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    94ec:	f04f 0e01 	mov.w	lr, #1
    94f0:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    94f2:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    94f4:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    94f6:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    94f8:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    94fa:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    94fe:	6813      	ldr	r3, [r2, #0]
    9500:	f36f 0341 	bfc	r3, #1, #1
    9504:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9506:	6913      	ldr	r3, [r2, #16]
    9508:	f013 0302 	ands.w	r3, r3, #2
    950c:	d1fb      	bne.n	9506 <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    950e:	7910      	ldrb	r0, [r2, #4]
    9510:	f040 0002 	orr.w	r0, r0, #2
    9514:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    9516:	6810      	ldr	r0, [r2, #0]
    9518:	f36e 0083 	bfi	r0, lr, #2, #2
    951c:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    951e:	6810      	ldr	r0, [r2, #0]
    9520:	f367 200a 	bfi	r0, r7, #8, #3
    9524:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    9526:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    9528:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    952a:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    952e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    9532:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    9536:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    9538:	6813      	ldr	r3, [r2, #0]
    953a:	f043 0302 	orr.w	r3, r3, #2
    953e:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9540:	6913      	ldr	r3, [r2, #16]
    9542:	079b      	lsls	r3, r3, #30
    9544:	d4fc      	bmi.n	9540 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    9546:	4561      	cmp	r1, ip
    9548:	d1d7      	bne.n	94fa <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    954a:	b005      	add	sp, #20
    954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    954e:	bf00      	nop
    9550:	40001c00 	.word	0x40001c00
    9554:	40000800 	.word	0x40000800
    9558:	41016000 	.word	0x41016000
    955c:	41018000 	.word	0x41018000
    9560:	00022edc 	.word	0x00022edc

00009564 <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9564:	498b      	ldr	r1, [pc, #556]	; (9794 <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    9566:	4a8c      	ldr	r2, [pc, #560]	; (9798 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9568:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    956a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    956e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    9572:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    9576:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9578:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    957a:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    957c:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    9580:	4606      	mov	r6, r0
    InitClocks();
    9582:	f7ff fe81 	bl	9288 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    9586:	4b85      	ldr	r3, [pc, #532]	; (979c <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    9588:	4985      	ldr	r1, [pc, #532]	; (97a0 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    958a:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    958c:	680d      	ldr	r5, [r1, #0]
    958e:	4f85      	ldr	r7, [pc, #532]	; (97a4 <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    9590:	f364 0241 	bfi	r2, r4, #1, #1
    9594:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    9596:	691a      	ldr	r2, [r3, #16]
    9598:	21a7      	movs	r1, #167	; 0xa7
    959a:	f361 4217 	bfi	r2, r1, #16, #8
    959e:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    95a0:	691a      	ldr	r2, [r3, #16]
    95a2:	f368 0283 	bfi	r2, r8, #2, #2
    95a6:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    95a8:	691a      	ldr	r2, [r3, #16]
    95aa:	2107      	movs	r1, #7
    95ac:	f361 220b 	bfi	r2, r1, #8, #4
    95b0:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    95b2:	691a      	ldr	r2, [r3, #16]
    95b4:	f042 0202 	orr.w	r2, r2, #2
    95b8:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    95ba:	4628      	mov	r0, r5
    95bc:	4641      	mov	r1, r8
    95be:	f008 f91d 	bl	117fc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    95c2:	4879      	ldr	r0, [pc, #484]	; (97a8 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    95c4:	2100      	movs	r1, #0
    95c6:	f000 fc9b 	bl	9f00 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    95ca:	4621      	mov	r1, r4
    95cc:	4628      	mov	r0, r5
    95ce:	f008 f915 	bl	117fc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    95d2:	4b76      	ldr	r3, [pc, #472]	; (97ac <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    95d4:	4a76      	ldr	r2, [pc, #472]	; (97b0 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    95d6:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    95da:	2102      	movs	r1, #2
    95dc:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    95e0:	6810      	ldr	r0, [r2, #0]
    95e2:	f7fb fb2b 	bl	4c3c <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    95e6:	f857 0f04 	ldr.w	r0, [r7, #4]!
    95ea:	6803      	ldr	r3, [r0, #0]
    95ec:	b221      	sxth	r1, r4
    95ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    95f0:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    95f2:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    95f4:	2c15      	cmp	r4, #21
    95f6:	d1f6      	bne.n	95e6 <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    95f8:	f005 fc5a 	bl	eeb0 <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    95fc:	4b6d      	ldr	r3, [pc, #436]	; (97b4 <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    95fe:	6818      	ldr	r0, [r3, #0]
    9600:	f001 ff74 	bl	b4ec <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    9604:	486c      	ldr	r0, [pc, #432]	; (97b8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    9606:	f001 fac9 	bl	ab9c <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    960a:	4b6c      	ldr	r3, [pc, #432]	; (97bc <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    960c:	6818      	ldr	r0, [r3, #0]
    960e:	f003 ff21 	bl	d454 <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    9612:	4b6b      	ldr	r3, [pc, #428]	; (97c0 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    9614:	6818      	ldr	r0, [r3, #0]
    9616:	f005 ff69 	bl	f4ec <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    961a:	4b6a      	ldr	r3, [pc, #424]	; (97c4 <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    961c:	6818      	ldr	r0, [r3, #0]
    961e:	f7fd f9ef 	bl	6a00 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    9622:	4869      	ldr	r0, [pc, #420]	; (97c8 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    9624:	f002 fd7c 	bl	c120 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9628:	4a68      	ldr	r2, [pc, #416]	; (97cc <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    962a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    962e:	f36f 1386 	bfc	r3, #6, #1
    9632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    9636:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    963a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    963e:	2900      	cmp	r1, #0
    9640:	d1f9      	bne.n	9636 <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    9642:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    9646:	4c62      	ldr	r4, [pc, #392]	; (97d0 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    9648:	4f5b      	ldr	r7, [pc, #364]	; (97b8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    964a:	4b62      	ldr	r3, [pc, #392]	; (97d4 <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    964c:	f8df c190 	ldr.w	ip, [pc, #400]	; 97e0 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9650:	f361 0003 	bfi	r0, r1, #0, #4
    9654:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    9658:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    965c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9660:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    9664:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    9666:	6961      	ldr	r1, [r4, #20]
    9668:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    966c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    9670:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    9674:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9676:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9678:	f8c3 e000 	str.w	lr, [r3]
    967c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    9680:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    9684:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    9688:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    968c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    9690:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    9694:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9698:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    969c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96a0:	f8c3 9000 	str.w	r9, [r3]
    96a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96a8:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96ac:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    96b0:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96b2:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96b6:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96ba:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96be:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96c2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96c6:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96ca:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96ce:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    96d2:	6019      	str	r1, [r3, #0]
    96d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96d8:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96dc:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96de:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    96e6:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96e8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96ec:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96f0:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96f4:	6019      	str	r1, [r3, #0]
    96f6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96fa:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    96fe:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    9702:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9704:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9708:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    970a:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    970e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9712:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    9716:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    971a:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    971e:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9722:	f44f 7880 	mov.w	r8, #256	; 0x100
    9726:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9728:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    972c:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    972e:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9732:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9736:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    973a:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    973c:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9740:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9744:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9746:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    974a:	f8c3 800c 	str.w	r8, [r3, #12]
    974e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9752:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9756:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    975a:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    975e:	f000 fb7f 	bl	9e60 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    9762:	b100      	cbz	r0, 9766 <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    9764:	e7fe      	b.n	9764 <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9766:	4b1c      	ldr	r3, [pc, #112]	; (97d8 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    9768:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    976a:	4621      	mov	r1, r4
    976c:	4628      	mov	r0, r5
    976e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    9772:	f008 f835 	bl	117e0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    9776:	f642 043b 	movw	r4, #10299	; 0x283b
    977a:	f000 fb9d 	bl	9eb8 <Microseconds>
    977e:	42a0      	cmp	r0, r4
    9780:	d9fb      	bls.n	977a <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    9782:	4b16      	ldr	r3, [pc, #88]	; (97dc <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    9784:	6818      	ldr	r0, [r3, #0]
    9786:	f000 fcdd 	bl	a144 <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    978a:	2301      	movs	r3, #1
    978c:	7033      	strb	r3, [r6, #0]
    978e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9792:	bf00      	nop
    9794:	e000edf0 	.word	0xe000edf0
    9798:	e0001000 	.word	0xe0001000
    979c:	40001800 	.word	0x40001800
    97a0:	20001f0c 	.word	0x20001f0c
    97a4:	00022efc 	.word	0x00022efc
    97a8:	0001d4c0 	.word	0x0001d4c0
    97ac:	41008000 	.word	0x41008000
    97b0:	20000ad0 	.word	0x20000ad0
    97b4:	20001c04 	.word	0x20001c04
    97b8:	200019d8 	.word	0x200019d8
    97bc:	20001e04 	.word	0x20001e04
    97c0:	20001efc 	.word	0x20001efc
    97c4:	20000adc 	.word	0x20000adc
    97c8:	20001af0 	.word	0x20001af0
    97cc:	40001c00 	.word	0x40001c00
    97d0:	40000800 	.word	0x40000800
    97d4:	e000e100 	.word	0xe000e100
    97d8:	e000ed00 	.word	0xe000ed00
    97dc:	20001bf8 	.word	0x20001bf8
    97e0:	20001bec 	.word	0x20001bec

000097e4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    97e4:	b672      	cpsid	i
    97e6:	4a09      	ldr	r2, [pc, #36]	; (980c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    97e8:	4b09      	ldr	r3, [pc, #36]	; (9810 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    97ea:	2901      	cmp	r1, #1
    97ec:	bf18      	it	ne
    97ee:	2300      	movne	r3, #0
    97f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    97f2:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    97f6:	4907      	ldr	r1, [pc, #28]	; (9814 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    97f8:	4b07      	ldr	r3, [pc, #28]	; (9818 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    97fa:	68ca      	ldr	r2, [r1, #12]
    97fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9800:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9802:	60cb      	str	r3, [r1, #12]
    9804:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    9808:	bf00      	nop
    980a:	e7fd      	b.n	9808 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    980c:	2002fffc 	.word	0x2002fffc
    9810:	f01669ef 	.word	0xf01669ef
    9814:	e000ed00 	.word	0xe000ed00
    9818:	05fa0004 	.word	0x05fa0004

0000981c <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    981c:	4b01      	ldr	r3, [pc, #4]	; (9824 <GMAC_Handler+0x8>)
    981e:	6818      	ldr	r0, [r3, #0]
    9820:	f001 b908 	b.w	aa34 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    9824:	20001bf8 	.word	0x20001bf8

00009828 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    9828:	4801      	ldr	r0, [pc, #4]	; (9830 <SERCOM0_0_Handler+0x8>)
    982a:	f007 bc6f 	b.w	1110c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    982e:	bf00      	nop
    9830:	200015f0 	.word	0x200015f0

00009834 <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    9834:	4801      	ldr	r0, [pc, #4]	; (983c <SERCOM0_2_Handler+0x8>)
    9836:	f007 bc91 	b.w	1115c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    983a:	bf00      	nop
    983c:	200015f0 	.word	0x200015f0

00009840 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9840:	4801      	ldr	r0, [pc, #4]	; (9848 <SERCOM0_3_Handler+0x8>)
    9842:	f007 bcc7 	b.w	111d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9846:	bf00      	nop
    9848:	200015f0 	.word	0x200015f0

0000984c <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    984c:	4801      	ldr	r0, [pc, #4]	; (9854 <SERCOM2_0_Handler+0x8>)
    984e:	f007 bc5d 	b.w	1110c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9852:	bf00      	nop
    9854:	20001748 	.word	0x20001748

00009858 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9858:	4801      	ldr	r0, [pc, #4]	; (9860 <SERCOM2_2_Handler+0x8>)
    985a:	f007 bc7f 	b.w	1115c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    985e:	bf00      	nop
    9860:	20001748 	.word	0x20001748

00009864 <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    9864:	4801      	ldr	r0, [pc, #4]	; (986c <SERCOM2_3_Handler+0x8>)
    9866:	f007 bcb5 	b.w	111d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    986a:	bf00      	nop
    986c:	20001748 	.word	0x20001748

00009870 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9870:	4801      	ldr	r0, [pc, #4]	; (9878 <SERCOM7_0_Handler+0x8>)
    9872:	f007 bc4b 	b.w	1110c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9876:	bf00      	nop
    9878:	20001498 	.word	0x20001498

0000987c <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    987c:	4801      	ldr	r0, [pc, #4]	; (9884 <SERCOM7_2_Handler+0x8>)
    987e:	f007 bc6d 	b.w	1115c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9882:	bf00      	nop
    9884:	20001498 	.word	0x20001498

00009888 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    9888:	4801      	ldr	r0, [pc, #4]	; (9890 <SERCOM7_3_Handler+0x8>)
    988a:	f007 bca3 	b.w	111d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    988e:	bf00      	nop
    9890:	20001498 	.word	0x20001498

00009894 <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    9894:	4b02      	ldr	r3, [pc, #8]	; (98a0 <EIC_0_Handler+0xc>)
    9896:	2100      	movs	r1, #0
    9898:	6818      	ldr	r0, [r3, #0]
    989a:	f7fb ba9d 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    989e:	bf00      	nop
    98a0:	20000ad0 	.word	0x20000ad0

000098a4 <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    98a4:	4b02      	ldr	r3, [pc, #8]	; (98b0 <EIC_1_Handler+0xc>)
    98a6:	2101      	movs	r1, #1
    98a8:	6818      	ldr	r0, [r3, #0]
    98aa:	f7fb ba95 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    98ae:	bf00      	nop
    98b0:	20000ad0 	.word	0x20000ad0

000098b4 <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    98b4:	4b02      	ldr	r3, [pc, #8]	; (98c0 <EIC_2_Handler+0xc>)
    98b6:	2102      	movs	r1, #2
    98b8:	6818      	ldr	r0, [r3, #0]
    98ba:	f7fb ba8d 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    98be:	bf00      	nop
    98c0:	20000ad0 	.word	0x20000ad0

000098c4 <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    98c4:	4b02      	ldr	r3, [pc, #8]	; (98d0 <EIC_3_Handler+0xc>)
    98c6:	2103      	movs	r1, #3
    98c8:	6818      	ldr	r0, [r3, #0]
    98ca:	f7fb ba85 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    98ce:	bf00      	nop
    98d0:	20000ad0 	.word	0x20000ad0

000098d4 <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    98d4:	4b02      	ldr	r3, [pc, #8]	; (98e0 <EIC_4_Handler+0xc>)
    98d6:	2104      	movs	r1, #4
    98d8:	6818      	ldr	r0, [r3, #0]
    98da:	f7fb ba7d 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    98de:	bf00      	nop
    98e0:	20000ad0 	.word	0x20000ad0

000098e4 <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    98e4:	4b02      	ldr	r3, [pc, #8]	; (98f0 <EIC_5_Handler+0xc>)
    98e6:	2105      	movs	r1, #5
    98e8:	6818      	ldr	r0, [r3, #0]
    98ea:	f7fb ba75 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    98ee:	bf00      	nop
    98f0:	20000ad0 	.word	0x20000ad0

000098f4 <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    98f4:	4b02      	ldr	r3, [pc, #8]	; (9900 <EIC_6_Handler+0xc>)
    98f6:	2106      	movs	r1, #6
    98f8:	6818      	ldr	r0, [r3, #0]
    98fa:	f7fb ba6d 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    98fe:	bf00      	nop
    9900:	20000ad0 	.word	0x20000ad0

00009904 <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    9904:	4b02      	ldr	r3, [pc, #8]	; (9910 <EIC_7_Handler+0xc>)
    9906:	2107      	movs	r1, #7
    9908:	6818      	ldr	r0, [r3, #0]
    990a:	f7fb ba65 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    990e:	bf00      	nop
    9910:	20000ad0 	.word	0x20000ad0

00009914 <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    9914:	4b02      	ldr	r3, [pc, #8]	; (9920 <EIC_8_Handler+0xc>)
    9916:	2108      	movs	r1, #8
    9918:	6818      	ldr	r0, [r3, #0]
    991a:	f7fb ba5d 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    991e:	bf00      	nop
    9920:	20000ad0 	.word	0x20000ad0

00009924 <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    9924:	4b02      	ldr	r3, [pc, #8]	; (9930 <EIC_9_Handler+0xc>)
    9926:	2109      	movs	r1, #9
    9928:	6818      	ldr	r0, [r3, #0]
    992a:	f7fb ba55 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    992e:	bf00      	nop
    9930:	20000ad0 	.word	0x20000ad0

00009934 <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    9934:	4b02      	ldr	r3, [pc, #8]	; (9940 <EIC_10_Handler+0xc>)
    9936:	210a      	movs	r1, #10
    9938:	6818      	ldr	r0, [r3, #0]
    993a:	f7fb ba4d 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    993e:	bf00      	nop
    9940:	20000ad0 	.word	0x20000ad0

00009944 <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    9944:	4b02      	ldr	r3, [pc, #8]	; (9950 <EIC_11_Handler+0xc>)
    9946:	210b      	movs	r1, #11
    9948:	6818      	ldr	r0, [r3, #0]
    994a:	f7fb ba45 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    994e:	bf00      	nop
    9950:	20000ad0 	.word	0x20000ad0

00009954 <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    9954:	4b01      	ldr	r3, [pc, #4]	; (995c <EIC_12_Handler+0x8>)
    9956:	6818      	ldr	r0, [r3, #0]
    9958:	f000 beb0 	b.w	a6bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    995c:	20001bf8 	.word	0x20001bf8

00009960 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9960:	4b02      	ldr	r3, [pc, #8]	; (996c <EIC_13_Handler+0xc>)
    9962:	210d      	movs	r1, #13
    9964:	6818      	ldr	r0, [r3, #0]
    9966:	f7fb ba37 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    996a:	bf00      	nop
    996c:	20000ad0 	.word	0x20000ad0

00009970 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9970:	4b02      	ldr	r3, [pc, #8]	; (997c <EIC_14_Handler+0xc>)
    9972:	210e      	movs	r1, #14
    9974:	6818      	ldr	r0, [r3, #0]
    9976:	f7fb ba2f 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    997a:	bf00      	nop
    997c:	20000ad0 	.word	0x20000ad0

00009980 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    9980:	4b02      	ldr	r3, [pc, #8]	; (998c <EIC_15_Handler+0xc>)
    9982:	210f      	movs	r1, #15
    9984:	6818      	ldr	r0, [r3, #0]
    9986:	f7fb ba27 	b.w	4dd8 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    998a:	bf00      	nop
    998c:	20000ad0 	.word	0x20000ad0

00009990 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    9990:	4b02      	ldr	r3, [pc, #8]	; (999c <TCC3_0_Handler+0xc>)
    9992:	4a03      	ldr	r2, [pc, #12]	; (99a0 <TCC3_0_Handler+0x10>)
    9994:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    9996:	4803      	ldr	r0, [pc, #12]	; (99a4 <TCC3_0_Handler+0x14>)
    9998:	f005 b814 	b.w	e9c4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    999c:	42001000 	.word	0x42001000
    99a0:	003ffc0f 	.word	0x003ffc0f
    99a4:	200013f8 	.word	0x200013f8

000099a8 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    99a8:	4b02      	ldr	r3, [pc, #8]	; (99b4 <TCC4_0_Handler+0xc>)
    99aa:	4a03      	ldr	r2, [pc, #12]	; (99b8 <TCC4_0_Handler+0x10>)
    99ac:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    99ae:	4803      	ldr	r0, [pc, #12]	; (99bc <TCC4_0_Handler+0x14>)
    99b0:	f005 b808 	b.w	e9c4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    99b4:	43001000 	.word	0x43001000
    99b8:	003ffc0f 	.word	0x003ffc0f
    99bc:	20001374 	.word	0x20001374

000099c0 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    99c0:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    99c2:	4b0d      	ldr	r3, [pc, #52]	; (99f8 <SysTick_Handler+0x38>)
    99c4:	781b      	ldrb	r3, [r3, #0]
    99c6:	b103      	cbz	r3, 99ca <SysTick_Handler+0xa>
    99c8:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    99ca:	4b0c      	ldr	r3, [pc, #48]	; (99fc <SysTick_Handler+0x3c>)
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	2b00      	cmp	r3, #0
    99d0:	d0fa      	beq.n	99c8 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    99d2:	4b0b      	ldr	r3, [pc, #44]	; (9a00 <SysTick_Handler+0x40>)
    99d4:	6818      	ldr	r0, [r3, #0]
    99d6:	f006 f8df 	bl	fb98 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    99da:	480a      	ldr	r0, [pc, #40]	; (9a04 <SysTick_Handler+0x44>)
    99dc:	f7fb fd2e 	bl	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    99e0:	4809      	ldr	r0, [pc, #36]	; (9a08 <SysTick_Handler+0x48>)
    99e2:	f7fb fd2b 	bl	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    99e6:	4809      	ldr	r0, [pc, #36]	; (9a0c <SysTick_Handler+0x4c>)
    99e8:	f7fb fd28 	bl	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    99ec:	4808      	ldr	r0, [pc, #32]	; (9a10 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    99ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    99f2:	f7fb bd23 	b.w	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    99f6:	bf00      	nop
    99f8:	20001088 	.word	0x20001088
    99fc:	200019d4 	.word	0x200019d4
    9a00:	20001efc 	.word	0x20001efc
    9a04:	20000b68 	.word	0x20000b68
    9a08:	20000cb0 	.word	0x20000cb0
    9a0c:	20000df8 	.word	0x20000df8
    9a10:	20000f40 	.word	0x20000f40

00009a14 <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    9a14:	4a30      	ldr	r2, [pc, #192]	; (9ad8 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    9a16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    9a1a:	4b30      	ldr	r3, [pc, #192]	; (9adc <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    9a1c:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    9a1e:	4a30      	ldr	r2, [pc, #192]	; (9ae0 <TCC0_0_Handler+0xcc>)
    9a20:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    9a22:	4630      	mov	r0, r6
    9a24:	f000 f9ca 	bl	9dbc <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    9a28:	4b2e      	ldr	r3, [pc, #184]	; (9ae4 <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    9a2a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9b20 <TCC0_0_Handler+0x10c>
    9a2e:	f8d3 9000 	ldr.w	r9, [r3]
    9a32:	4648      	mov	r0, r9
    9a34:	f005 fdce 	bl	f5d4 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    9a38:	4b2b      	ldr	r3, [pc, #172]	; (9ae8 <TCC0_0_Handler+0xd4>)
    9a3a:	6818      	ldr	r0, [r3, #0]
    9a3c:	f003 fec4 	bl	d7c8 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9a40:	4b2a      	ldr	r3, [pc, #168]	; (9aec <TCC0_0_Handler+0xd8>)
    9a42:	6818      	ldr	r0, [r3, #0]
    9a44:	f007 ff70 	bl	11928 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9a48:	4b29      	ldr	r3, [pc, #164]	; (9af0 <TCC0_0_Handler+0xdc>)
    9a4a:	6818      	ldr	r0, [r3, #0]
    9a4c:	f7fd fe22 	bl	7694 <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9a50:	4b28      	ldr	r3, [pc, #160]	; (9af4 <TCC0_0_Handler+0xe0>)
    9a52:	681f      	ldr	r7, [r3, #0]
    9a54:	4638      	mov	r0, r7
    9a56:	f7fb f9ed 	bl	4e34 <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    9a5a:	f898 3000 	ldrb.w	r3, [r8]
    9a5e:	b15b      	cbz	r3, 9a78 <TCC0_0_Handler+0x64>
    9a60:	4c25      	ldr	r4, [pc, #148]	; (9af8 <TCC0_0_Handler+0xe4>)
    9a62:	4826      	ldr	r0, [pc, #152]	; (9afc <TCC0_0_Handler+0xe8>)
    9a64:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9a68:	e001      	b.n	9a6e <TCC0_0_Handler+0x5a>
    9a6a:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    9a6e:	6803      	ldr	r3, [r0, #0]
    9a70:	6a1b      	ldr	r3, [r3, #32]
    9a72:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9a74:	42ac      	cmp	r4, r5
    9a76:	d1f8      	bne.n	9a6a <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    9a78:	4638      	mov	r0, r7
    9a7a:	f7fb f9ef 	bl	4e5c <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    9a7e:	4820      	ldr	r0, [pc, #128]	; (9b00 <TCC0_0_Handler+0xec>)
    9a80:	f002 fb7c 	bl	c17c <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    9a84:	481f      	ldr	r0, [pc, #124]	; (9b04 <TCC0_0_Handler+0xf0>)
    9a86:	f001 f95b 	bl	ad40 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    9a8a:	4630      	mov	r0, r6
    9a8c:	f000 f9ac 	bl	9de8 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    9a90:	4a1d      	ldr	r2, [pc, #116]	; (9b08 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    9a92:	491e      	ldr	r1, [pc, #120]	; (9b0c <TCC0_0_Handler+0xf8>)
    tickCnt++;
    9a94:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    9a96:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    9a98:	3301      	adds	r3, #1
    9a9a:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    9a9c:	b111      	cbz	r1, 9aa4 <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    9a9e:	f898 3000 	ldrb.w	r3, [r8]
    9aa2:	b923      	cbnz	r3, 9aae <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    9aa4:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    9aa6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9aaa:	f000 b98d 	b.w	9dc8 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    9aae:	4648      	mov	r0, r9
    9ab0:	f006 f872 	bl	fb98 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    9ab4:	4816      	ldr	r0, [pc, #88]	; (9b10 <TCC0_0_Handler+0xfc>)
    9ab6:	f7fb fcc1 	bl	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9aba:	4816      	ldr	r0, [pc, #88]	; (9b14 <TCC0_0_Handler+0x100>)
    9abc:	f7fb fcbe 	bl	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9ac0:	4815      	ldr	r0, [pc, #84]	; (9b18 <TCC0_0_Handler+0x104>)
    9ac2:	f7fb fcbb 	bl	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9ac6:	4815      	ldr	r0, [pc, #84]	; (9b1c <TCC0_0_Handler+0x108>)
    9ac8:	f7fb fcb8 	bl	543c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    9acc:	4630      	mov	r0, r6
}
    9ace:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9ad2:	f000 b979 	b.w	9dc8 <_ZN9ClearCore9SysTiming6IsrEndEv>
    9ad6:	bf00      	nop
    9ad8:	20001bec 	.word	0x20001bec
    9adc:	41016000 	.word	0x41016000
    9ae0:	003ffc0f 	.word	0x003ffc0f
    9ae4:	20001efc 	.word	0x20001efc
    9ae8:	20001e04 	.word	0x20001e04
    9aec:	20001f0c 	.word	0x20001f0c
    9af0:	20000adc 	.word	0x20000adc
    9af4:	20000ad0 	.word	0x20000ad0
    9af8:	00022f00 	.word	0x00022f00
    9afc:	200011e8 	.word	0x200011e8
    9b00:	20001af0 	.word	0x20001af0
    9b04:	200019d8 	.word	0x200019d8
    9b08:	20001be8 	.word	0x20001be8
    9b0c:	20001088 	.word	0x20001088
    9b10:	20000b68 	.word	0x20000b68
    9b14:	20000cb0 	.word	0x20000cb0
    9b18:	20000df8 	.word	0x20000df8
    9b1c:	20000f40 	.word	0x20000f40
    9b20:	200019d4 	.word	0x200019d4

00009b24 <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    9b24:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    9b26:	4813      	ldr	r0, [pc, #76]	; (9b74 <Reset_Handler+0x50>)
    9b28:	4b13      	ldr	r3, [pc, #76]	; (9b78 <Reset_Handler+0x54>)
    9b2a:	4298      	cmp	r0, r3
    9b2c:	d00b      	beq.n	9b46 <Reset_Handler+0x22>
    9b2e:	4913      	ldr	r1, [pc, #76]	; (9b7c <Reset_Handler+0x58>)
    9b30:	4281      	cmp	r1, r0
    9b32:	d008      	beq.n	9b46 <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    9b34:	4298      	cmp	r0, r3
    9b36:	d206      	bcs.n	9b46 <Reset_Handler+0x22>
            *pDest = *pSrc;
    9b38:	43c2      	mvns	r2, r0
    9b3a:	441a      	add	r2, r3
    9b3c:	f022 0203 	bic.w	r2, r2, #3
    9b40:	3204      	adds	r2, #4
    9b42:	f014 fc15 	bl	1e370 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    9b46:	480e      	ldr	r0, [pc, #56]	; (9b80 <Reset_Handler+0x5c>)
    9b48:	4b0e      	ldr	r3, [pc, #56]	; (9b84 <Reset_Handler+0x60>)
    9b4a:	4298      	cmp	r0, r3
    9b4c:	d008      	beq.n	9b60 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    9b4e:	d207      	bcs.n	9b60 <Reset_Handler+0x3c>
            *pDest = 0ul;
    9b50:	43c2      	mvns	r2, r0
    9b52:	441a      	add	r2, r3
    9b54:	f022 0203 	bic.w	r2, r2, #3
    9b58:	3204      	adds	r2, #4
    9b5a:	2100      	movs	r1, #0
    9b5c:	f014 fd06 	bl	1e56c <memset>
        }
    }

    SystemInit();
    9b60:	f002 f93a 	bl	bdd8 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    9b64:	f014 f862 	bl	1dc2c <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    9b68:	4807      	ldr	r0, [pc, #28]	; (9b88 <Reset_Handler+0x64>)
    9b6a:	f7ff fcfb 	bl	9564 <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    9b6e:	f7fa fd2b 	bl	45c8 <main>
    9b72:	e7fe      	b.n	9b72 <Reset_Handler+0x4e>
    9b74:	20000000 	.word	0x20000000
    9b78:	20000ab0 	.word	0x20000ab0
    9b7c:	000251e4 	.word	0x000251e4
    9b80:	20000ab0 	.word	0x20000ab0
    9b84:	20002394 	.word	0x20002394
    9b88:	200019d4 	.word	0x200019d4

00009b8c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    9b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    9b90:	4852      	ldr	r0, [pc, #328]	; (9cdc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    9b92:	4d53      	ldr	r5, [pc, #332]	; (9ce0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    9b94:	4c53      	ldr	r4, [pc, #332]	; (9ce4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    9b96:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 9d54 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    9b9a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9d58 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    9b9e:	4f52      	ldr	r7, [pc, #328]	; (9ce8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    9ba0:	f002 fa94 	bl	c0cc <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    9ba4:	4b51      	ldr	r3, [pc, #324]	; (9cec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    9ba6:	4a52      	ldr	r2, [pc, #328]	; (9cf0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    9ba8:	4852      	ldr	r0, [pc, #328]	; (9cf4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    9baa:	601a      	str	r2, [r3, #0]
    9bac:	2600      	movs	r6, #0
    9bae:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    9bb2:	f000 ff61 	bl	aa78 <_ZN9ClearCore13ShiftRegisterC1Ev>
    9bb6:	4b50      	ldr	r3, [pc, #320]	; (9cf8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    9bb8:	4a50      	ldr	r2, [pc, #320]	; (9cfc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    9bba:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    9bbe:	4628      	mov	r0, r5
    9bc0:	601a      	str	r2, [r3, #0]
    9bc2:	f7fa ff6d 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9bc6:	4b4e      	ldr	r3, [pc, #312]	; (9d00 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    9bc8:	602b      	str	r3, [r5, #0]
    9bca:	4620      	mov	r0, r4
    9bcc:	f7fa ff68 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    9bd0:	4b4c      	ldr	r3, [pc, #304]	; (9d04 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    9bd2:	6023      	str	r3, [r4, #0]
    9bd4:	4648      	mov	r0, r9
    9bd6:	f7fa ff63 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    9bda:	4c4b      	ldr	r4, [pc, #300]	; (9d08 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    9bdc:	4d4b      	ldr	r5, [pc, #300]	; (9d0c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    9bde:	f8c9 4000 	str.w	r4, [r9]
    9be2:	4640      	mov	r0, r8
    9be4:	f7fa ff5c 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9be8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 9d5c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    9bec:	f8c8 4000 	str.w	r4, [r8]
    9bf0:	4638      	mov	r0, r7
    9bf2:	f7fa ff55 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9bf6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9d60 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    9bfa:	603c      	str	r4, [r7, #0]
    9bfc:	4628      	mov	r0, r5
    9bfe:	f7fa ff4f 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    9c02:	4c43      	ldr	r4, [pc, #268]	; (9d10 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    9c04:	4f43      	ldr	r7, [pc, #268]	; (9d14 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    9c06:	602c      	str	r4, [r5, #0]
    9c08:	4648      	mov	r0, r9
    9c0a:	f7fa ff49 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9c0e:	4d42      	ldr	r5, [pc, #264]	; (9d18 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    9c10:	f8c9 4000 	str.w	r4, [r9]
    9c14:	4640      	mov	r0, r8
    9c16:	f7fa ff43 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9c1a:	4c40      	ldr	r4, [pc, #256]	; (9d1c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    9c1c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 9d64 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    9c20:	f8c8 4000 	str.w	r4, [r8]
    9c24:	4638      	mov	r0, r7
    9c26:	f7fa ff3b 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9c2a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9d68 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    9c2e:	603c      	str	r4, [r7, #0]
    9c30:	4628      	mov	r0, r5
    9c32:	f7fa ff35 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9c36:	4f3a      	ldr	r7, [pc, #232]	; (9d20 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    9c38:	602c      	str	r4, [r5, #0]
    9c3a:	4648      	mov	r0, r9
    9c3c:	f7fa ff30 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    9c40:	4c38      	ldr	r4, [pc, #224]	; (9d24 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    9c42:	4d39      	ldr	r5, [pc, #228]	; (9d28 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    9c44:	f8c9 4000 	str.w	r4, [r9]
    9c48:	4640      	mov	r0, r8
    9c4a:	f7fa ff29 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9c4e:	4638      	mov	r0, r7
    9c50:	f8c8 4000 	str.w	r4, [r8]
    9c54:	f7fa ff24 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9c58:	4628      	mov	r0, r5
    9c5a:	603c      	str	r4, [r7, #0]
    9c5c:	f7fa ff20 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    9c60:	4832      	ldr	r0, [pc, #200]	; (9d2c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    9c62:	602c      	str	r4, [r5, #0]
    9c64:	f7fd ff1e 	bl	7aa4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    9c68:	4831      	ldr	r0, [pc, #196]	; (9d30 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    9c6a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9d6c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    9c6e:	4d31      	ldr	r5, [pc, #196]	; (9d34 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    9c70:	4c31      	ldr	r4, [pc, #196]	; (9d38 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    9c72:	4f32      	ldr	r7, [pc, #200]	; (9d3c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    9c74:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9d70 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    9c78:	f7fd ff14 	bl	7aa4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    9c7c:	4830      	ldr	r0, [pc, #192]	; (9d40 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    9c7e:	f7fd ff11 	bl	7aa4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    9c82:	4830      	ldr	r0, [pc, #192]	; (9d44 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    9c84:	f7fd ff0e 	bl	7aa4 <_ZN9ClearCore11MotorDriverC1Ev>
    9c88:	4640      	mov	r0, r8
    9c8a:	4b2f      	ldr	r3, [pc, #188]	; (9d48 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    9c8c:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    9c90:	f7fa ff06 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9c94:	4b2d      	ldr	r3, [pc, #180]	; (9d4c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    9c96:	f8c8 3000 	str.w	r3, [r8]
    9c9a:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    9c9e:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    9ca0:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    9ca4:	f8c5 9000 	str.w	r9, [r5]
    9ca8:	f8c8 3004 	str.w	r3, [r8, #4]
    9cac:	f7fa fef8 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9cb0:	f107 0874 	add.w	r8, r7, #116	; 0x74
    9cb4:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    9cb8:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    9cbc:	f8c4 9000 	str.w	r9, [r4]
    9cc0:	602f      	str	r7, [r5, #0]
    9cc2:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    9cc6:	f7fa feeb 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    9cca:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    9cce:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    9cd0:	481f      	ldr	r0, [pc, #124]	; (9d50 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    9cd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    9cd6:	f7fd bf07 	b.w	7ae8 <_ZN9ClearCore10SysManagerC1Ev>
    9cda:	bf00      	nop
    9cdc:	20001af0 	.word	0x20001af0
    9ce0:	2000147c 	.word	0x2000147c
    9ce4:	200011e8 	.word	0x200011e8
    9ce8:	20001314 	.word	0x20001314
    9cec:	2000188c 	.word	0x2000188c
    9cf0:	00022e44 	.word	0x00022e44
    9cf4:	200019d8 	.word	0x200019d8
    9cf8:	20001748 	.word	0x20001748
    9cfc:	00022e94 	.word	0x00022e94
    9d00:	000235e4 	.word	0x000235e4
    9d04:	000233ac 	.word	0x000233ac
    9d08:	0002340c 	.word	0x0002340c
    9d0c:	20001374 	.word	0x20001374
    9d10:	0002345c 	.word	0x0002345c
    9d14:	20001188 	.word	0x20001188
    9d18:	200011b8 	.word	0x200011b8
    9d1c:	00022c70 	.word	0x00022c70
    9d20:	200010d0 	.word	0x200010d0
    9d24:	000233dc 	.word	0x000233dc
    9d28:	20001114 	.word	0x20001114
    9d2c:	20000b68 	.word	0x20000b68
    9d30:	20000cb0 	.word	0x20000cb0
    9d34:	20001498 	.word	0x20001498
    9d38:	200015f0 	.word	0x200015f0
    9d3c:	00023540 	.word	0x00023540
    9d40:	20000df8 	.word	0x20000df8
    9d44:	20000f40 	.word	0x20000f40
    9d48:	00022d40 	.word	0x00022d40
    9d4c:	00022d90 	.word	0x00022d90
    9d50:	200019d4 	.word	0x200019d4
    9d54:	20001254 	.word	0x20001254
    9d58:	200012b4 	.word	0x200012b4
    9d5c:	200013f8 	.word	0x200013f8
    9d60:	20001158 	.word	0x20001158
    9d64:	20000b24 	.word	0x20000b24
    9d68:	2000108c 	.word	0x2000108c
    9d6c:	20001488 	.word	0x20001488
    9d70:	000234d0 	.word	0x000234d0

00009d74 <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    9d74:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    9d76:	4d0f      	ldr	r5, [pc, #60]	; (9db4 <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    9d78:	682c      	ldr	r4, [r5, #0]
    9d7a:	f014 0401 	ands.w	r4, r4, #1
    9d7e:	d002      	beq.n	9d86 <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    9d80:	4b0d      	ldr	r3, [pc, #52]	; (9db8 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    9d82:	6818      	ldr	r0, [r3, #0]
    9d84:	bd70      	pop	{r4, r5, r6, pc}
    9d86:	2030      	movs	r0, #48	; 0x30
    9d88:	f009 fb52 	bl	13430 <_Znwj>
    9d8c:	4a0a      	ldr	r2, [pc, #40]	; (9db8 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    9d8e:	6004      	str	r4, [r0, #0]
    9d90:	2105      	movs	r1, #5
    9d92:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    9d96:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    9d98:	7501      	strb	r1, [r0, #20]
    9d9a:	6084      	str	r4, [r0, #8]
    9d9c:	60c4      	str	r4, [r0, #12]
    9d9e:	6104      	str	r4, [r0, #16]
    9da0:	6184      	str	r4, [r0, #24]
    9da2:	61c4      	str	r4, [r0, #28]
    9da4:	6204      	str	r4, [r0, #32]
    9da6:	6244      	str	r4, [r0, #36]	; 0x24
    9da8:	6284      	str	r4, [r0, #40]	; 0x28
    9daa:	62c4      	str	r4, [r0, #44]	; 0x2c
    9dac:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    9dae:	6010      	str	r0, [r2, #0]
    9db0:	602b      	str	r3, [r5, #0]
    return *instance;
}
    9db2:	bd70      	pop	{r4, r5, r6, pc}
    9db4:	20001be4 	.word	0x20001be4
    9db8:	20001bf0 	.word	0x20001bf0

00009dbc <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    9dbc:	4b01      	ldr	r3, [pc, #4]	; (9dc4 <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    9dbe:	685b      	ldr	r3, [r3, #4]
    9dc0:	6003      	str	r3, [r0, #0]
    9dc2:	4770      	bx	lr
    9dc4:	e0001000 	.word	0xe0001000

00009dc8 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9dc8:	4b06      	ldr	r3, [pc, #24]	; (9de4 <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    9dca:	6801      	ldr	r1, [r0, #0]
    9dcc:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    9dce:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9dd0:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    9dd2:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    9dd4:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    9dd6:	bf38      	it	cc
    9dd8:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    9dda:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9ddc:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    9dde:	bf88      	it	hi
    9de0:	6083      	strhi	r3, [r0, #8]
    9de2:	4770      	bx	lr
    9de4:	e0001000 	.word	0xe0001000

00009de8 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9de8:	4a1c      	ldr	r2, [pc, #112]	; (9e5c <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    9dea:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9dec:	68d3      	ldr	r3, [r2, #12]
    9dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9df2:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    9df4:	7d03      	ldrb	r3, [r0, #20]
    9df6:	3b01      	subs	r3, #1
    9df8:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    9dfa:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    9dfc:	7503      	strb	r3, [r0, #20]
    9dfe:	b923      	cbnz	r3, 9e0a <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    9e00:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9e02:	2205      	movs	r2, #5
        m_msTickCnt++;
    9e04:	3301      	adds	r3, #1
    9e06:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9e08:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    9e0a:	6825      	ldr	r5, [r4, #0]
    9e0c:	69a3      	ldr	r3, [r4, #24]
    9e0e:	406b      	eors	r3, r5
    9e10:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    9e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9e18:	d001      	beq.n	9e1e <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    9e1a:	61a5      	str	r5, [r4, #24]
    9e1c:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    9e1e:	2d00      	cmp	r5, #0
    9e20:	db08      	blt.n	9e34 <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    9e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    9e26:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9e28:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9e2a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    9e2e:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    9e30:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    9e32:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    9e34:	69e1      	ldr	r1, [r4, #28]
    9e36:	3101      	adds	r1, #1
    9e38:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    9e3a:	2278      	movs	r2, #120	; 0x78
    9e3c:	2300      	movs	r3, #0
    9e3e:	2000      	movs	r0, #0
    9e40:	f012 fb54 	bl	1c4ec <__aeabi_uldivmod>
    9e44:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    9e46:	b128      	cbz	r0, 9e54 <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    9e48:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    9e4c:	00c3      	lsls	r3, r0, #3
    9e4e:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    9e50:	62e3      	str	r3, [r4, #44]	; 0x2c
    9e52:	e7e2      	b.n	9e1a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    9e54:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    9e56:	62e0      	str	r0, [r4, #44]	; 0x2c
    9e58:	e7df      	b.n	9e1a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    9e5a:	bf00      	nop
    9e5c:	e000edf0 	.word	0xe000edf0

00009e60 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    9e60:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    9e64:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    9e66:	29c7      	cmp	r1, #199	; 0xc7
    9e68:	4a0d      	ldr	r2, [pc, #52]	; (9ea0 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9e6a:	f103 33ff 	add.w	r3, r3, #4294967295
    9e6e:	bf8c      	ite	hi
    9e70:	2100      	movhi	r1, #0
    9e72:	2101      	movls	r1, #1
    9e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    9e78:	7011      	strb	r1, [r2, #0]
    9e7a:	d20e      	bcs.n	9e9a <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9e7c:	4a09      	ldr	r2, [pc, #36]	; (9ea4 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9e7e:	480a      	ldr	r0, [pc, #40]	; (9ea8 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    9e80:	b410      	push	{r4}
    9e82:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9e86:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9e88:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9e8c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9e8e:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9e90:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9e92:	6011      	str	r1, [r2, #0]
}
    9e94:	f85d 4b04 	ldr.w	r4, [sp], #4
    9e98:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9e9a:	2001      	movs	r0, #1
    9e9c:	4770      	bx	lr
    9e9e:	bf00      	nop
    9ea0:	20001088 	.word	0x20001088
    9ea4:	e000e010 	.word	0xe000e010
    9ea8:	e000ed00 	.word	0xe000ed00

00009eac <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    9eac:	4b01      	ldr	r3, [pc, #4]	; (9eb4 <Milliseconds+0x8>)
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	6918      	ldr	r0, [r3, #16]
}
    9eb2:	4770      	bx	lr
    9eb4:	20001bec 	.word	0x20001bec

00009eb8 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    9eb8:	4b0e      	ldr	r3, [pc, #56]	; (9ef4 <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    9eba:	4a0f      	ldr	r2, [pc, #60]	; (9ef8 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    9ebc:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    9ebe:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    9ec0:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    9ec2:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    9ec4:	db0a      	blt.n	9edc <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    9ec6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    9ec8:	490c      	ldr	r1, [pc, #48]	; (9efc <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9eca:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    9ecc:	4423      	add	r3, r4
    9ece:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9ed2:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
    9eda:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    9edc:	6a94      	ldr	r4, [r2, #40]	; 0x28
    9ede:	4907      	ldr	r1, [pc, #28]	; (9efc <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9ee0:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    9ee2:	1b1b      	subs	r3, r3, r4
    9ee4:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9ee8:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9eec:	f85d 4b04 	ldr.w	r4, [sp], #4
    9ef0:	4770      	bx	lr
    9ef2:	bf00      	nop
    9ef4:	e0001000 	.word	0xe0001000
    9ef8:	20001bec 	.word	0x20001bec
    9efc:	88888889 	.word	0x88888889

00009f00 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    9f00:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    9f02:	4e0d      	ldr	r6, [pc, #52]	; (9f38 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    9f04:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    9f08:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    9f0a:	d013      	beq.n	9f34 <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    9f0c:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9f0e:	2500      	movs	r5, #0
    9f10:	1b1c      	subs	r4, r3, r4
    9f12:	428d      	cmp	r5, r1
    9f14:	bf08      	it	eq
    9f16:	4284      	cmpeq	r4, r0
    9f18:	d20c      	bcs.n	9f34 <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    9f1a:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9f1c:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9f1e:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9f22:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9f26:	2500      	movs	r5, #0
    9f28:	461c      	mov	r4, r3
    9f2a:	428d      	cmp	r5, r1
    9f2c:	bf08      	it	eq
    9f2e:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    9f30:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9f32:	d3f2      	bcc.n	9f1a <Delay_cycles+0x1a>
    }
}
    9f34:	bc70      	pop	{r4, r5, r6}
    9f36:	4770      	bx	lr
    9f38:	e0001000 	.word	0xe0001000

00009f3c <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    9f3c:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    9f3e:	f7ff ff19 	bl	9d74 <_ZN9ClearCore9SysTiming8InstanceEv>
    9f42:	4b01      	ldr	r3, [pc, #4]	; (9f48 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    9f44:	6018      	str	r0, [r3, #0]
    9f46:	bd08      	pop	{r3, pc}
    9f48:	20001bec 	.word	0x20001bec

00009f4c <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    9f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    9f4e:	4e37      	ldr	r6, [pc, #220]	; (a02c <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    9f50:	6835      	ldr	r5, [r6, #0]
    9f52:	f015 0501 	ands.w	r5, r5, #1
    9f56:	d002      	beq.n	9f5e <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    9f58:	4b35      	ldr	r3, [pc, #212]	; (a030 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    9f5a:	6818      	ldr	r0, [r3, #0]
    9f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f5e:	f641 10c4 	movw	r0, #6596	; 0x19c4
    9f62:	f009 fa65 	bl	13430 <_Znwj>
    9f66:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9f68:	2711      	movs	r7, #17
    9f6a:	2312      	movs	r3, #18
    9f6c:	6067      	str	r7, [r4, #4]
    9f6e:	60e3      	str	r3, [r4, #12]
    9f70:	2213      	movs	r2, #19
    9f72:	210d      	movs	r1, #13
    9f74:	2714      	movs	r7, #20
    9f76:	230b      	movs	r3, #11
    9f78:	6162      	str	r2, [r4, #20]
    9f7a:	61e1      	str	r1, [r4, #28]
    9f7c:	6367      	str	r7, [r4, #52]	; 0x34
    9f7e:	6463      	str	r3, [r4, #68]	; 0x44
    9f80:	270c      	movs	r7, #12
    9f82:	2302      	movs	r3, #2
    9f84:	200f      	movs	r0, #15
    9f86:	220e      	movs	r2, #14
    9f88:	211c      	movs	r1, #28
    9f8a:	6323      	str	r3, [r4, #48]	; 0x30
    9f8c:	63a3      	str	r3, [r4, #56]	; 0x38
    9f8e:	6423      	str	r3, [r4, #64]	; 0x40
    9f90:	6523      	str	r3, [r4, #80]	; 0x50
    9f92:	62e0      	str	r0, [r4, #44]	; 0x2c
    9f94:	64e2      	str	r2, [r4, #76]	; 0x4c
    9f96:	6561      	str	r1, [r4, #84]	; 0x54
    9f98:	6267      	str	r7, [r4, #36]	; 0x24
    9f9a:	4629      	mov	r1, r5
    9f9c:	63e7      	str	r7, [r4, #60]	; 0x3c
    9f9e:	65a7      	str	r7, [r4, #88]	; 0x58
    9fa0:	6025      	str	r5, [r4, #0]
    9fa2:	60a5      	str	r5, [r4, #8]
    9fa4:	6125      	str	r5, [r4, #16]
    9fa6:	61a5      	str	r5, [r4, #24]
    9fa8:	6225      	str	r5, [r4, #32]
    9faa:	62a5      	str	r5, [r4, #40]	; 0x28
    9fac:	64a5      	str	r5, [r4, #72]	; 0x48
    9fae:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    9fb2:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    9fb6:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    9fba:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    9fbe:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    9fc2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    9fc6:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    9fca:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    9fce:	f504 7094 	add.w	r0, r4, #296	; 0x128
    9fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9fd6:	f014 fac9 	bl	1e56c <memset>
    9fda:	4629      	mov	r1, r5
    9fdc:	f604 1028 	addw	r0, r4, #2344	; 0x928
    9fe0:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    9fe4:	f014 fac2 	bl	1e56c <memset>
    9fe8:	f641 176c 	movw	r7, #6508	; 0x196c
    9fec:	f641 1168 	movw	r1, #6504	; 0x1968
    9ff0:	19e3      	adds	r3, r4, r7
    9ff2:	f641 126a 	movw	r2, #6506	; 0x196a
    9ff6:	20c8      	movs	r0, #200	; 0xc8
    9ff8:	5260      	strh	r0, [r4, r1]
    9ffa:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    9ffe:	2108      	movs	r1, #8
    a000:	54a1      	strb	r1, [r4, r2]
    a002:	3004      	adds	r0, #4
    a004:	51e5      	str	r5, [r4, r7]
    a006:	4629      	mov	r1, r5
    a008:	605d      	str	r5, [r3, #4]
    a00a:	609d      	str	r5, [r3, #8]
    a00c:	60dd      	str	r5, [r3, #12]
    a00e:	611d      	str	r5, [r3, #16]
    a010:	615d      	str	r5, [r3, #20]
    a012:	223c      	movs	r2, #60	; 0x3c
    a014:	f014 faaa 	bl	1e56c <memset>
    static EthernetManager *instance = new EthernetManager();
    a018:	4905      	ldr	r1, [pc, #20]	; (a030 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    a01a:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    a01e:	2301      	movs	r3, #1
    a020:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    a022:	6015      	str	r5, [r2, #0]
    a024:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    a026:	6033      	str	r3, [r6, #0]
}
    a028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a02a:	bf00      	nop
    a02c:	20001bf4 	.word	0x20001bf4
    a030:	20001bfc 	.word	0x20001bfc

0000a034 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    a034:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    a036:	4b3e      	ldr	r3, [pc, #248]	; (a130 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    a038:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    a03c:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    a040:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    a044:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a046:	493b      	ldr	r1, [pc, #236]	; (a134 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    a048:	f042 0210 	orr.w	r2, r2, #16
    a04c:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a04e:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a050:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a052:	6893      	ldr	r3, [r2, #8]
    a054:	0759      	lsls	r1, r3, #29
    a056:	d5fc      	bpl.n	a052 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    a058:	6813      	ldr	r3, [r2, #0]
    a05a:	f36f 1304 	bfc	r3, #4, #1
    a05e:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a060:	6b53      	ldr	r3, [r2, #52]	; 0x34
    a062:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a066:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    a068:	428b      	cmp	r3, r1
    a06a:	d05d      	beq.n	a128 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    a06c:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    a06e:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a070:	4c31      	ldr	r4, [pc, #196]	; (a138 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a072:	492f      	ldr	r1, [pc, #188]	; (a130 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    a074:	f043 0310 	orr.w	r3, r3, #16
    a078:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a07a:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a07c:	688b      	ldr	r3, [r1, #8]
    a07e:	075a      	lsls	r2, r3, #29
    a080:	d5fc      	bpl.n	a07c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    a082:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a084:	4c2b      	ldr	r4, [pc, #172]	; (a134 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a086:	4a2a      	ldr	r2, [pc, #168]	; (a130 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    a088:	f36f 1304 	bfc	r3, #4, #1
    a08c:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a08e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    a090:	680b      	ldr	r3, [r1, #0]
    a092:	f043 0310 	orr.w	r3, r3, #16
    a096:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a098:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a09a:	6893      	ldr	r3, [r2, #8]
    a09c:	075b      	lsls	r3, r3, #29
    a09e:	d5fc      	bpl.n	a09a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    a0a0:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a0a2:	4c26      	ldr	r4, [pc, #152]	; (a13c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a0a4:	4922      	ldr	r1, [pc, #136]	; (a130 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    a0a6:	f36f 1304 	bfc	r3, #4, #1
    a0aa:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a0ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    a0ae:	6813      	ldr	r3, [r2, #0]
    a0b0:	f043 0310 	orr.w	r3, r3, #16
    a0b4:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a0b6:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a0b8:	688b      	ldr	r3, [r1, #8]
    a0ba:	075c      	lsls	r4, r3, #29
    a0bc:	d5fc      	bpl.n	a0b8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    a0be:	680b      	ldr	r3, [r1, #0]
    a0c0:	f36f 1304 	bfc	r3, #4, #1
    a0c4:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a0c6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    a0c8:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    a0ca:	b12b      	cbz	r3, a0d8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    a0cc:	2301      	movs	r3, #1
    a0ce:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    a0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    a0d6:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    a0d8:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a0da:	4c19      	ldr	r4, [pc, #100]	; (a140 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a0dc:	4a14      	ldr	r2, [pc, #80]	; (a130 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    a0de:	f043 0310 	orr.w	r3, r3, #16
    a0e2:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a0e4:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a0e6:	6893      	ldr	r3, [r2, #8]
    a0e8:	0759      	lsls	r1, r3, #29
    a0ea:	d5fc      	bpl.n	a0e6 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    a0ec:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a0ee:	4c13      	ldr	r4, [pc, #76]	; (a13c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a0f0:	490f      	ldr	r1, [pc, #60]	; (a130 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    a0f2:	f36f 1304 	bfc	r3, #4, #1
    a0f6:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a0f8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    a0fa:	6813      	ldr	r3, [r2, #0]
    a0fc:	f043 0310 	orr.w	r3, r3, #16
    a100:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a102:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a104:	688b      	ldr	r3, [r1, #8]
    a106:	075b      	lsls	r3, r3, #29
    a108:	d5fc      	bpl.n	a104 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    a10a:	680b      	ldr	r3, [r1, #0]
    a10c:	f36f 1304 	bfc	r3, #4, #1
    a110:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a112:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    a114:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a118:	2b07      	cmp	r3, #7
    a11a:	d1d7      	bne.n	a0cc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    a11c:	2300      	movs	r3, #0
    a11e:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    a122:	f85d 4b04 	ldr.w	r4, [sp], #4
    a126:	4770      	bx	lr
        m_phyInitFailed = true;
    a128:	2301      	movs	r3, #1
    a12a:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    a12e:	4770      	bx	lr
    a130:	42000800 	.word	0x42000800
    a134:	60020000 	.word	0x60020000
    a138:	50028000 	.word	0x50028000
    a13c:	606e0000 	.word	0x606e0000
    a140:	506e0700 	.word	0x506e0700

0000a144 <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a148:	4be2      	ldr	r3, [pc, #904]	; (a4d4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    a14a:	681a      	ldr	r2, [r3, #0]
    a14c:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    a14e:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a150:	d503      	bpl.n	a15a <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a152:	681a      	ldr	r2, [r3, #0]
    a154:	0750      	lsls	r0, r2, #29
    a156:	f100 82a2 	bmi.w	a69e <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    a15a:	4ade      	ldr	r2, [pc, #888]	; (a4d4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a15c:	48de      	ldr	r0, [pc, #888]	; (a4d8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    a15e:	6813      	ldr	r3, [r2, #0]
    a160:	f043 0310 	orr.w	r3, r3, #16
    a164:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    a166:	6853      	ldr	r3, [r2, #4]
    a168:	f043 0301 	orr.w	r3, r3, #1
    a16c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    a16e:	6853      	ldr	r3, [r2, #4]
    a170:	f043 0302 	orr.w	r3, r3, #2
    a174:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    a176:	6853      	ldr	r3, [r2, #4]
    a178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a17c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    a17e:	6853      	ldr	r3, [r2, #4]
    a180:	2104      	movs	r1, #4
    a182:	f361 4394 	bfi	r3, r1, #18, #3
    a186:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    a188:	68d3      	ldr	r3, [r2, #12]
    a18a:	f36f 0300 	bfc	r3, #0, #1
    a18e:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    a190:	6913      	ldr	r3, [r2, #16]
    a192:	f361 0304 	bfi	r3, r1, #0, #5
    a196:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    a198:	6913      	ldr	r3, [r2, #16]
    a19a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    a19e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    a1a0:	6913      	ldr	r3, [r2, #16]
    a1a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    a1a6:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    a1a8:	6915      	ldr	r5, [r2, #16]
    a1aa:	2302      	movs	r3, #2
    a1ac:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    a1b0:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    a1b4:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    a1b6:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    a1b8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    a1bc:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a1c0:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    a1c4:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    a1c8:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    a1cc:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    a1d0:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    a1d4:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    a1d8:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    a1dc:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a1e0:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a1e4:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    a1e8:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a1ec:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a1f0:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    a1f4:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    a1f8:	66e3      	str	r3, [r4, #108]	; 0x6c
    a1fa:	6763      	str	r3, [r4, #116]	; 0x74
    a1fc:	67e3      	str	r3, [r4, #124]	; 0x7c
    a1fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    a202:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a206:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    a20a:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a20e:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a212:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    a216:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    a21a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    a21e:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    a222:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    a226:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    a22a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    a22e:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    a232:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    a236:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    a23a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    a23e:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    a242:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    a246:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    a24a:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    a24e:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a252:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    a256:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    a25a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a25e:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    a262:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    a266:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a268:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    a26c:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    a270:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    a274:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a278:	3610      	adds	r6, #16
    a27a:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    a27c:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a280:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    a284:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    a288:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a28a:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    a28e:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a292:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    a296:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a298:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    a29a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    a29e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    a2a2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    a2a6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    a2aa:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    a2ae:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    a2b2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    a2b6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    a2ba:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    a2be:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    a2c2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    a2c6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    a2ca:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a2ce:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a2d2:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a2d6:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    a2d8:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a2dc:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    a2e0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a2e4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    a2e8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    a2ec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    a2f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    a2f4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a2f8:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    a2fc:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    a300:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    a304:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    a308:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    a30c:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    a310:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    a314:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a318:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a31c:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a320:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a324:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a328:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a32c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    a330:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    a334:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    a338:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    a33c:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    a340:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a344:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    a348:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a34c:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a34e:	6196      	str	r6, [r2, #24]
    a350:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a354:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a358:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    a35a:	6823      	ldr	r3, [r4, #0]
    a35c:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    a35e:	01db      	lsls	r3, r3, #7
    a360:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a364:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a368:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    a36a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    a36e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    a372:	f042 0201 	orr.w	r2, r2, #1
    a376:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a37a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a37e:	f011 0f01 	tst.w	r1, #1
    a382:	f04f 010b 	mov.w	r1, #11
    a386:	bf14      	ite	ne
    a388:	f361 1207 	bfine	r2, r1, #4, #4
    a38c:	f361 0203 	bfieq	r2, r1, #0, #4
    a390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    a394:	68a3      	ldr	r3, [r4, #8]
    a396:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    a398:	01db      	lsls	r3, r3, #7
    a39a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a39e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a3a2:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a3a4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a3a8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a3ac:	f041 0101 	orr.w	r1, r1, #1
    a3b0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a3b4:	f012 0f01 	tst.w	r2, #1
    a3b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a3bc:	f04f 010b 	mov.w	r1, #11
    a3c0:	bf14      	ite	ne
    a3c2:	f361 1207 	bfine	r2, r1, #4, #4
    a3c6:	f361 0203 	bfieq	r2, r1, #0, #4
    a3ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    a3ce:	6923      	ldr	r3, [r4, #16]
    a3d0:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    a3d2:	01db      	lsls	r3, r3, #7
    a3d4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a3d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a3dc:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a3de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a3e2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a3e6:	f041 0101 	orr.w	r1, r1, #1
    a3ea:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a3ee:	f012 0f01 	tst.w	r2, #1
    a3f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a3f6:	f04f 010b 	mov.w	r1, #11
    a3fa:	bf14      	ite	ne
    a3fc:	f361 1207 	bfine	r2, r1, #4, #4
    a400:	f361 0203 	bfieq	r2, r1, #0, #4
    a404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    a408:	69a3      	ldr	r3, [r4, #24]
    a40a:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    a40c:	01db      	lsls	r3, r3, #7
    a40e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a412:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a416:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a418:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a41c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a420:	f041 0101 	orr.w	r1, r1, #1
    a424:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a428:	f012 0f01 	tst.w	r2, #1
    a42c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a430:	f04f 010b 	mov.w	r1, #11
    a434:	bf14      	ite	ne
    a436:	f361 1207 	bfine	r2, r1, #4, #4
    a43a:	f361 0203 	bfieq	r2, r1, #0, #4
    a43e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    a442:	6a23      	ldr	r3, [r4, #32]
    a444:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    a446:	01db      	lsls	r3, r3, #7
    a448:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a44c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a450:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a452:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a456:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a45a:	f041 0101 	orr.w	r1, r1, #1
    a45e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a462:	f012 0f01 	tst.w	r2, #1
    a466:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a46a:	f04f 010b 	mov.w	r1, #11
    a46e:	bf14      	ite	ne
    a470:	f361 1207 	bfine	r2, r1, #4, #4
    a474:	f361 0203 	bfieq	r2, r1, #0, #4
    a478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    a47c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a47e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    a480:	01db      	lsls	r3, r3, #7
    a482:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a486:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a48a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a48c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a490:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a494:	f041 0101 	orr.w	r1, r1, #1
    a498:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a49c:	f012 0f01 	tst.w	r2, #1
    a4a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a4a4:	f04f 010b 	mov.w	r1, #11
    a4a8:	bf14      	ite	ne
    a4aa:	f361 1207 	bfine	r2, r1, #4, #4
    a4ae:	f361 0203 	bfieq	r2, r1, #0, #4
    a4b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    a4b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a4b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    a4ba:	01db      	lsls	r3, r3, #7
    a4bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a4c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a4c4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a4c6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a4ca:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a4ce:	f041 0101 	orr.w	r1, r1, #1
    a4d2:	e003      	b.n	a4dc <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    a4d4:	42000800 	.word	0x42000800
    a4d8:	e000e100 	.word	0xe000e100
    a4dc:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a4e0:	f012 0f01 	tst.w	r2, #1
    a4e4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a4e8:	f04f 010b 	mov.w	r1, #11
    a4ec:	bf14      	ite	ne
    a4ee:	f361 1207 	bfine	r2, r1, #4, #4
    a4f2:	f361 0203 	bfieq	r2, r1, #0, #4
    a4f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    a4fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a4fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    a4fe:	01db      	lsls	r3, r3, #7
    a500:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a504:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a508:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a50a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a50e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a512:	f041 0101 	orr.w	r1, r1, #1
    a516:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a51a:	f012 0f01 	tst.w	r2, #1
    a51e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a522:	f04f 010b 	mov.w	r1, #11
    a526:	bf14      	ite	ne
    a528:	f361 1207 	bfine	r2, r1, #4, #4
    a52c:	f361 0203 	bfieq	r2, r1, #0, #4
    a530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    a534:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a536:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    a538:	01db      	lsls	r3, r3, #7
    a53a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a53e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a542:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a544:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a548:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a54c:	f041 0101 	orr.w	r1, r1, #1
    a550:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a554:	f012 0f01 	tst.w	r2, #1
    a558:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a55c:	f04f 010b 	mov.w	r1, #11
    a560:	bf14      	ite	ne
    a562:	f361 1207 	bfine	r2, r1, #4, #4
    a566:	f361 0203 	bfieq	r2, r1, #0, #4
    a56a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    a56e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a570:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    a572:	01db      	lsls	r3, r3, #7
    a574:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a578:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a57c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a57e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a582:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a586:	f041 0101 	orr.w	r1, r1, #1
    a58a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a58e:	f012 0f01 	tst.w	r2, #1
    a592:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a596:	f04f 010b 	mov.w	r1, #11
    a59a:	bf14      	ite	ne
    a59c:	f361 1207 	bfine	r2, r1, #4, #4
    a5a0:	f361 0203 	bfieq	r2, r1, #0, #4
    a5a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a5a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a5aa:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a5ac:	01db      	lsls	r3, r3, #7
    a5ae:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    a5b2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    a5b6:	1850      	adds	r0, r2, r1
    a5b8:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a5ba:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a5be:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a5c2:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a5c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a5ca:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a5ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a5d2:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a5d4:	bf14      	ite	ne
    a5d6:	f36f 1007 	bfcne	r0, #4, #4
    a5da:	f367 0003 	bfieq	r0, r7, #0, #4
    a5de:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a5e2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a5e6:	4932      	ldr	r1, [pc, #200]	; (a6b0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    a5e8:	4a32      	ldr	r2, [pc, #200]	; (a6b4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a5ea:	f040 0001 	orr.w	r0, r0, #1
    a5ee:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    a5f2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a5f6:	f040 0002 	orr.w	r0, r0, #2
    a5fa:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a5fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a604:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    a606:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a608:	f043 0302 	orr.w	r3, r3, #2
    a60c:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    a60e:	7813      	ldrb	r3, [r2, #0]
    a610:	f36f 0341 	bfc	r3, #1, #1
    a614:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a616:	6853      	ldr	r3, [r2, #4]
    a618:	0799      	lsls	r1, r3, #30
    a61a:	d4fc      	bmi.n	a616 <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a61e:	4925      	ldr	r1, [pc, #148]	; (a6b4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a620:	08c3      	lsrs	r3, r0, #3
    a622:	009b      	lsls	r3, r3, #2
    a624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    a628:	2701      	movs	r7, #1
    a62a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    a62e:	4087      	lsls	r7, r0
    a630:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a632:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a636:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a638:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a63a:	f04f 0e0f 	mov.w	lr, #15
    a63e:	fa0e fe00 	lsl.w	lr, lr, r0
    a642:	ea27 070e 	bic.w	r7, r7, lr
    a646:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    a648:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    a64c:	2705      	movs	r7, #5
    a64e:	fa07 f000 	lsl.w	r0, r7, r0
    a652:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    a656:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    a658:	7813      	ldrb	r3, [r2, #0]
    a65a:	f043 0302 	orr.w	r3, r3, #2
    a65e:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a660:	684b      	ldr	r3, [r1, #4]
    a662:	079b      	lsls	r3, r3, #30
    a664:	d4fc      	bmi.n	a660 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    a666:	4620      	mov	r0, r4
    a668:	f7ff fce4 	bl	a034 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a66c:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a670:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a674:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a678:	4b0f      	ldr	r3, [pc, #60]	; (a6b8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a67a:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a67c:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a680:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a682:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a686:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a68a:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a68e:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a690:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a692:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a694:	6818      	ldr	r0, [r3, #0]
}
    a696:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a69a:	f007 baeb 	b.w	11c74 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a69e:	681a      	ldr	r2, [r3, #0]
    a6a0:	f36f 02c3 	bfc	r2, #3, #1
    a6a4:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a6a6:	681a      	ldr	r2, [r3, #0]
    a6a8:	f36f 0282 	bfc	r2, #2, #1
    a6ac:	601a      	str	r2, [r3, #0]
    a6ae:	e554      	b.n	a15a <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a6b0:	42000800 	.word	0x42000800
    a6b4:	40002800 	.word	0x40002800
    a6b8:	20001f18 	.word	0x20001f18

0000a6bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a6c0:	6d85      	ldr	r5, [r0, #88]	; 0x58
    a6c2:	4ca1      	ldr	r4, [pc, #644]	; (a948 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    a6c4:	4ba1      	ldr	r3, [pc, #644]	; (a94c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a6c6:	49a2      	ldr	r1, [pc, #648]	; (a950 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a6c8:	2201      	movs	r2, #1
    a6ca:	40aa      	lsls	r2, r5
    a6cc:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    a6ce:	681a      	ldr	r2, [r3, #0]
    a6d0:	f042 0210 	orr.w	r2, r2, #16
    a6d4:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a6d6:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a6d8:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a6da:	6893      	ldr	r3, [r2, #8]
    a6dc:	075d      	lsls	r5, r3, #29
    a6de:	d5fc      	bpl.n	a6da <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    a6e0:	6813      	ldr	r3, [r2, #0]
    a6e2:	f36f 1304 	bfc	r3, #4, #1
    a6e6:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a6e8:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    a6ea:	07cc      	lsls	r4, r1, #31
    a6ec:	d415      	bmi.n	a71a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    a6ee:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    a6f0:	bf44      	itt	mi
    a6f2:	2300      	movmi	r3, #0
    a6f4:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    a6f8:	078c      	lsls	r4, r1, #30
    a6fa:	d401      	bmi.n	a700 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    a6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a700:	4b92      	ldr	r3, [pc, #584]	; (a94c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a702:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    a704:	2101      	movs	r1, #1
    a706:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a70a:	0711      	lsls	r1, r2, #28
    a70c:	d5f6      	bpl.n	a6fc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    a70e:	681a      	ldr	r2, [r3, #0]
    a710:	0752      	lsls	r2, r2, #29
    a712:	f100 8121 	bmi.w	a958 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    a716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a71a:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a71c:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    a71e:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a720:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a722:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    a726:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a72a:	d56d      	bpl.n	a808 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    a72c:	6813      	ldr	r3, [r2, #0]
    a72e:	075f      	lsls	r7, r3, #29
    a730:	d56a      	bpl.n	a808 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a732:	6813      	ldr	r3, [r2, #0]
    a734:	f36f 03c3 	bfc	r3, #3, #1
    a738:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a73a:	6813      	ldr	r3, [r2, #0]
    a73c:	f36f 0382 	bfc	r3, #2, #1
    a740:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    a742:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a746:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a74a:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a74e:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a752:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a756:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a75a:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a75e:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a762:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a766:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a76a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a76e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a77a:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a77e:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a782:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a786:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a78a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a78e:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a792:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a796:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a79a:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a79e:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a7a2:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a7a6:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a7aa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7b6:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7ba:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7be:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7c2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7c6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7ca:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    a7ce:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a7d2:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a7d6:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a7da:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a7de:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a7e2:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    a7e6:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a7ea:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a7ee:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a7f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a7fa:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a7fc:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a800:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a804:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a808:	4b50      	ldr	r3, [pc, #320]	; (a94c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a80a:	4d52      	ldr	r5, [pc, #328]	; (a954 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a80c:	681a      	ldr	r2, [r3, #0]
    a80e:	f042 0210 	orr.w	r2, r2, #16
    a812:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a814:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a816:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a818:	6893      	ldr	r3, [r2, #8]
    a81a:	075e      	lsls	r6, r3, #29
    a81c:	d5fc      	bpl.n	a818 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a81e:	6813      	ldr	r3, [r2, #0]
    a820:	f36f 1304 	bfc	r3, #4, #1
    a824:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a826:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a828:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a82a:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a82c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a830:	f366 0500 	bfi	r5, r6, #0, #1
    a834:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a836:	6855      	ldr	r5, [r2, #4]
    a838:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a83c:	f363 0541 	bfi	r5, r3, #1, #1
    a840:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a842:	6813      	ldr	r3, [r2, #0]
    a844:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a848:	b96b      	cbnz	r3, a866 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a84a:	429c      	cmp	r4, r3
    a84c:	f43f af4f 	beq.w	a6ee <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a850:	b16c      	cbz	r4, a86e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a852:	4b3e      	ldr	r3, [pc, #248]	; (a94c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a854:	681a      	ldr	r2, [r3, #0]
    a856:	f042 0208 	orr.w	r2, r2, #8
    a85a:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a85c:	681a      	ldr	r2, [r3, #0]
    a85e:	f042 0204 	orr.w	r2, r2, #4
    a862:	601a      	str	r2, [r3, #0]
    a864:	e743      	b.n	a6ee <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a866:	6813      	ldr	r3, [r2, #0]
    a868:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a86c:	e7ed      	b.n	a84a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a86e:	4b37      	ldr	r3, [pc, #220]	; (a94c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a870:	681a      	ldr	r2, [r3, #0]
    a872:	f364 02c3 	bfi	r2, r4, #3, #1
    a876:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a878:	681a      	ldr	r2, [r3, #0]
    a87a:	f364 0282 	bfi	r2, r4, #2, #1
    a87e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a880:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a884:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a888:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a88c:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a890:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a894:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a898:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a89c:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a8a0:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8a4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a8a8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8ac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a8b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a8b8:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a8bc:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a8c0:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a8c4:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a8c8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a8cc:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a8d0:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a8d4:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a8d8:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a8dc:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a8e0:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a8e4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a8e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a8f0:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8f4:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a8f8:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8fc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a900:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a904:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a908:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a90c:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a910:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a914:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a918:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a91c:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a920:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a924:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a928:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a92c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a930:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a934:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a93c:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a940:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a944:	e6d3      	b.n	a6ee <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a946:	bf00      	nop
    a948:	40002800 	.word	0x40002800
    a94c:	42000800 	.word	0x42000800
    a950:	606e0000 	.word	0x606e0000
    a954:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a958:	681a      	ldr	r2, [r3, #0]
    a95a:	f36f 02c3 	bfc	r2, #3, #1
    a95e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a960:	681a      	ldr	r2, [r3, #0]
    a962:	f36f 0282 	bfc	r2, #2, #1
    a966:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a968:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a96c:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a970:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a974:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a978:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a97c:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a980:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a984:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a988:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a98c:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a990:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a994:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a9a0:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a9a4:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a9a8:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a9ac:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a9b0:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a9b4:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a9b8:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a9bc:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a9c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a9c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a9cc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a9d0:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a9d4:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a9d8:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a9dc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a9e0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a9e4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a9e8:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a9ec:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a9f0:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a9f4:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a9f8:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a9fc:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    aa00:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    aa04:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    aa08:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    aa0c:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    aa10:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    aa14:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    aa18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    aa20:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    aa22:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    aa26:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    aa2a:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    aa2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa32:	bf00      	nop

0000aa34 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    aa34:	4b0b      	ldr	r3, [pc, #44]	; (aa64 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    aa36:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    aa38:	695a      	ldr	r2, [r3, #20]
    aa3a:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    aa3c:	6a1a      	ldr	r2, [r3, #32]
    aa3e:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    aa40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    aa42:	9a00      	ldr	r2, [sp, #0]
    aa44:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    aa46:	bf44      	itt	mi
    aa48:	9a00      	ldrmi	r2, [sp, #0]
    aa4a:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    aa4c:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    aa4e:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    aa50:	079b      	lsls	r3, r3, #30
        m_recv = true;
    aa52:	bf44      	itt	mi
    aa54:	2301      	movmi	r3, #1
    aa56:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    aa5a:	4b02      	ldr	r3, [pc, #8]	; (aa64 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    aa5c:	621a      	str	r2, [r3, #32]
}
    aa5e:	b002      	add	sp, #8
    aa60:	4770      	bx	lr
    aa62:	bf00      	nop
    aa64:	42000800 	.word	0x42000800

0000aa68 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    aa68:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    aa6a:	f7ff fa6f 	bl	9f4c <_ZN9ClearCore15EthernetManager8InstanceEv>
    aa6e:	4b01      	ldr	r3, [pc, #4]	; (aa74 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    aa70:	6018      	str	r0, [r3, #0]
    aa72:	bd08      	pop	{r3, pc}
    aa74:	20001bf8 	.word	0x20001bf8

0000aa78 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    aa7a:	4f46      	ldr	r7, [pc, #280]	; (ab94 <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    aa7c:	f8df e118 	ldr.w	lr, [pc, #280]	; ab98 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    aa80:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    aa82:	4604      	mov	r4, r0
    m_lastOutput(0) {
    aa84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    aa86:	4625      	mov	r5, r4
    aa88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    aa8a:	e896 0003 	ldmia.w	r6, {r0, r1}
    aa8e:	f107 0618 	add.w	r6, r7, #24
    aa92:	e885 0003 	stmia.w	r5, {r0, r1}
    aa96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    aa98:	f104 0518 	add.w	r5, r4, #24
    aa9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    aa9e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    aaa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    aaa6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    aaaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    aaac:	f104 0534 	add.w	r5, r4, #52	; 0x34
    aab0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    aab4:	2608      	movs	r6, #8
    aab6:	257f      	movs	r5, #127	; 0x7f
    aab8:	23c8      	movs	r3, #200	; 0xc8
    aaba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    aabe:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    aac2:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    aac6:	2500      	movs	r5, #0
    aac8:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    aacc:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    aace:	21fe      	movs	r1, #254	; 0xfe
    aad0:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    aad4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    aad8:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    aadc:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    aade:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    aae0:	4629      	mov	r1, r5
    aae2:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    aae4:	6563      	str	r3, [r4, #84]	; 0x54
    aae6:	65a5      	str	r5, [r4, #88]	; 0x58
    aae8:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    aaea:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    aaee:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    aaf2:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    aaf4:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    aaf8:	67a5      	str	r5, [r4, #120]	; 0x78
    aafa:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    aafe:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    ab00:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    ab02:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    ab06:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    ab0a:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    ab0e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    ab12:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    ab16:	2240      	movs	r2, #64	; 0x40
    ab18:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    ab1c:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    ab20:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    ab24:	f013 fd22 	bl	1e56c <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    ab28:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    ab2c:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    ab30:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    ab34:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    ab38:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    ab3c:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    ab40:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    ab44:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    ab48:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    ab4c:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    ab50:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    ab54:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    ab58:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    ab5c:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    ab60:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    ab64:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    ab68:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    ab6c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    ab70:	4620      	mov	r0, r4
    m_lastOutput(0) {
    ab72:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    ab76:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    ab7a:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    ab7e:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    ab82:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    ab86:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    ab8a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ab8e:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    ab92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab94:	00023294 	.word	0x00023294
    ab98:	0fe080fc 	.word	0x0fe080fc

0000ab9c <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    ab9c:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    ab9e:	4a64      	ldr	r2, [pc, #400]	; (ad30 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    aba0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    aba4:	f36f 1386 	bfc	r3, #6, #1
    aba8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    abac:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    abb0:	065d      	lsls	r5, r3, #25
    abb2:	d4fb      	bmi.n	abac <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    abb4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    abb8:	495d      	ldr	r1, [pc, #372]	; (ad30 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    abba:	2405      	movs	r4, #5
    abbc:	f364 0303 	bfi	r3, r4, #0, #4
    abc0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    abc4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    abc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    abcc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    abd0:	684b      	ldr	r3, [r1, #4]
    abd2:	f013 0314 	ands.w	r3, r3, #20
    abd6:	d1fb      	bne.n	abd0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    abd8:	4d56      	ldr	r5, [pc, #344]	; (ad34 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    abda:	4957      	ldr	r1, [pc, #348]	; (ad38 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    abdc:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    abde:	4a57      	ldr	r2, [pc, #348]	; (ad3c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    abe0:	f044 0404 	orr.w	r4, r4, #4
    abe4:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    abe6:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    abea:	2402      	movs	r4, #2
    abec:	f364 1507 	bfi	r5, r4, #4, #4
    abf0:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    abf4:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    abf8:	f045 0501 	orr.w	r5, r5, #1
    abfc:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    ac00:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    ac04:	f364 1507 	bfi	r5, r4, #4, #4
    ac08:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    ac0c:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    ac10:	f045 0501 	orr.w	r5, r5, #1
    ac14:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    ac18:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    ac1c:	f364 0503 	bfi	r5, r4, #0, #4
    ac20:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    ac24:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ac28:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    ac2a:	f045 0501 	orr.w	r5, r5, #1
    ac2e:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    ac32:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ac36:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    ac3a:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    ac3e:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    ac42:	6811      	ldr	r1, [r2, #0]
    ac44:	f363 0141 	bfi	r1, r3, #1, #1
    ac48:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ac4a:	69d3      	ldr	r3, [r2, #28]
    ac4c:	f013 0302 	ands.w	r3, r3, #2
    ac50:	d1fb      	bne.n	ac4a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ac52:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ac54:	4939      	ldr	r1, [pc, #228]	; (ad3c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ac56:	f044 040c 	orr.w	r4, r4, #12
    ac5a:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    ac5c:	6814      	ldr	r4, [r2, #0]
    ac5e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    ac62:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    ac66:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    ac68:	6854      	ldr	r4, [r2, #4]
    ac6a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    ac6e:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    ac70:	6894      	ldr	r4, [r2, #8]
    ac72:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    ac76:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    ac78:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    ac7a:	6813      	ldr	r3, [r2, #0]
    ac7c:	f043 0302 	orr.w	r3, r3, #2
    ac80:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ac82:	69cb      	ldr	r3, [r1, #28]
    ac84:	079c      	lsls	r4, r3, #30
    ac86:	d4fc      	bmi.n	ac82 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    ac88:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    ac8c:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    ac90:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ac94:	4a29      	ldr	r2, [pc, #164]	; (ad3c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    ac96:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    ac98:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ac9a:	7e13      	ldrb	r3, [r2, #24]
    ac9c:	0799      	lsls	r1, r3, #30
    ac9e:	d5fc      	bpl.n	ac9a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    aca0:	4b25      	ldr	r3, [pc, #148]	; (ad38 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    aca2:	4a26      	ldr	r2, [pc, #152]	; (ad3c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    aca4:	2104      	movs	r1, #4
    aca6:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    acaa:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    acae:	7e13      	ldrb	r3, [r2, #24]
    acb0:	075b      	lsls	r3, r3, #29
    acb2:	d5fc      	bpl.n	acae <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    acb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    acb6:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    acba:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    acbe:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    acc2:	4063      	eors	r3, r4
    acc4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    acc8:	bb7a      	cbnz	r2, ad2a <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    acca:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    acce:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    acd2:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    acd6:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    acda:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    acde:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    ace2:	4059      	eors	r1, r3
    ace4:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    ace6:	404b      	eors	r3, r1
    ace8:	ea83 0105 	eor.w	r1, r3, r5
    acec:	4031      	ands	r1, r6
    acee:	4059      	eors	r1, r3
    acf0:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    acf4:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    acf8:	404a      	eors	r2, r1
    acfa:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    acfc:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    acfe:	b135      	cbz	r5, ad0e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    ad00:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    ad04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    ad08:	b10a      	cbz	r2, ad0e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    ad0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    ad0e:	4d0b      	ldr	r5, [pc, #44]	; (ad3c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    ad10:	4909      	ldr	r1, [pc, #36]	; (ad38 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    ad12:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    ad16:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    ad18:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    ad1a:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    ad1c:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    ad1e:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    ad22:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    ad24:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    ad28:	4770      	bx	lr
        output = m_altOutput;
    ad2a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    ad2e:	e7ee      	b.n	ad0e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    ad30:	40001c00 	.word	0x40001c00
    ad34:	40000800 	.word	0x40000800
    ad38:	41008000 	.word	0x41008000
    ad3c:	43000800 	.word	0x43000800

0000ad40 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    ad40:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    ad44:	2b00      	cmp	r3, #0
    ad46:	d078      	beq.n	ae3a <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    ad48:	6d83      	ldr	r3, [r0, #88]	; 0x58
    ad4a:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    ad4c:	b4f0      	push	{r4, r5, r6, r7}
    ad4e:	6582      	str	r2, [r0, #88]	; 0x58
    ad50:	b90b      	cbnz	r3, ad56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    ad52:	6d02      	ldr	r2, [r0, #80]	; 0x50
    ad54:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    ad56:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    ad58:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    ad5c:	428a      	cmp	r2, r1
    ad5e:	bf34      	ite	cc
    ad60:	220c      	movcc	r2, #12
    ad62:	2208      	movcs	r2, #8
    ad64:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    ad66:	3301      	adds	r3, #1
    ad68:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    ad6a:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    ad6c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    ad70:	2b3e      	cmp	r3, #62	; 0x3e
    ad72:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    ad76:	d961      	bls.n	ae3c <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    ad78:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    ad7c:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    ad80:	2400      	movs	r4, #0
    ad82:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    ad86:	2b00      	cmp	r3, #0
    ad88:	f000 817a 	beq.w	b080 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    ad8c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    ad90:	3101      	adds	r1, #1
    ad92:	b2c9      	uxtb	r1, r1
    ad94:	4299      	cmp	r1, r3
    ad96:	460a      	mov	r2, r1
    ad98:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    ad9c:	f2c0 817e 	blt.w	b09c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    ada0:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    ada4:	4623      	mov	r3, r4
    ada6:	e04c      	b.n	ae42 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    ada8:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    adaa:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    adac:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    adb0:	49b1      	ldr	r1, [pc, #708]	; (b078 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    adb2:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    adb6:	7e0b      	ldrb	r3, [r1, #24]
    adb8:	079c      	lsls	r4, r3, #30
    adba:	d5fc      	bpl.n	adb6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    adbc:	4baf      	ldr	r3, [pc, #700]	; (b07c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    adbe:	49ae      	ldr	r1, [pc, #696]	; (b078 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    adc0:	2404      	movs	r4, #4
    adc2:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    adc6:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    adca:	7e0b      	ldrb	r3, [r1, #24]
    adcc:	075b      	lsls	r3, r3, #29
    adce:	d5fc      	bpl.n	adca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    add0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    add2:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    add6:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    adda:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    adde:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    ade2:	4073      	eors	r3, r6
    ade4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    ade8:	2900      	cmp	r1, #0
    adea:	f040 80d4 	bne.w	af96 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    adee:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    adf2:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    adf6:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    adfa:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    adfe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ae02:	405a      	eors	r2, r3
    ae04:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    ae06:	4053      	eors	r3, r2
    ae08:	ea83 0204 	eor.w	r2, r3, r4
    ae0c:	402a      	ands	r2, r5
    ae0e:	405a      	eors	r2, r3
    ae10:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    ae14:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    ae18:	4051      	eors	r1, r2
    ae1a:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    ae1c:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    ae1e:	b134      	cbz	r4, ae2e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    ae20:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    ae24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    ae28:	b10a      	cbz	r2, ae2e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    ae2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    ae2e:	4a92      	ldr	r2, [pc, #584]	; (b078 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    ae30:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    ae34:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    ae36:	6293      	str	r3, [r2, #40]	; 0x28
}
    ae38:	bcf0      	pop	{r4, r5, r6, r7}
    ae3a:	4770      	bx	lr
    ae3c:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    ae40:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    ae42:	4293      	cmp	r3, r2
    ae44:	bfb4      	ite	lt
    ae46:	230c      	movlt	r3, #12
    ae48:	2308      	movge	r3, #8
    ae4a:	4403      	add	r3, r0
            if (!m_activeMask) {
    ae4c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    ae50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    ae52:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    ae56:	2900      	cmp	r1, #0
    ae58:	d0a6      	beq.n	ada8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    ae5a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    ae5e:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    ae60:	3301      	adds	r3, #1
    ae62:	b2db      	uxtb	r3, r3
    ae64:	2b3f      	cmp	r3, #63	; 0x3f
    ae66:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    ae6a:	f200 8097 	bhi.w	af9c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    ae6e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    ae72:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    ae74:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    ae76:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    ae78:	d004      	beq.n	ae84 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    ae7a:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    ae7e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ae80:	bfb8      	it	lt
    ae82:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ae84:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    ae88:	420a      	tst	r2, r1
    ae8a:	d004      	beq.n	ae96 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    ae8c:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    ae90:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ae92:	bfb8      	it	lt
    ae94:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ae96:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    ae9a:	420a      	tst	r2, r1
    ae9c:	d004      	beq.n	aea8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    ae9e:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    aea2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aea4:	bfb8      	it	lt
    aea6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aea8:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    aeac:	420a      	tst	r2, r1
    aeae:	d004      	beq.n	aeba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    aeb0:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    aeb4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aeb6:	bfb8      	it	lt
    aeb8:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aeba:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    aebe:	420a      	tst	r2, r1
    aec0:	d004      	beq.n	aecc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    aec2:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    aec6:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aec8:	bfb8      	it	lt
    aeca:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aecc:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    aed0:	420a      	tst	r2, r1
    aed2:	d004      	beq.n	aede <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    aed4:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    aed8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aeda:	bfb8      	it	lt
    aedc:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aede:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    aee2:	420a      	tst	r2, r1
    aee4:	d004      	beq.n	aef0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    aee6:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    aeea:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aeec:	bfb8      	it	lt
    aeee:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aef0:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    aef4:	420a      	tst	r2, r1
    aef6:	d004      	beq.n	af02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    aef8:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    aefc:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aefe:	bfb8      	it	lt
    af00:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af02:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    af06:	420a      	tst	r2, r1
    af08:	d004      	beq.n	af14 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    af0a:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    af0e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af10:	bfb8      	it	lt
    af12:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af14:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    af18:	420a      	tst	r2, r1
    af1a:	d004      	beq.n	af26 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    af1c:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    af20:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af22:	bfb8      	it	lt
    af24:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af26:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    af2a:	420a      	tst	r2, r1
    af2c:	d004      	beq.n	af38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    af2e:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    af32:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af34:	bfb8      	it	lt
    af36:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af38:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    af3c:	420a      	tst	r2, r1
    af3e:	d004      	beq.n	af4a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    af40:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    af44:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af46:	bfb8      	it	lt
    af48:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af4a:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    af4e:	420a      	tst	r2, r1
    af50:	d004      	beq.n	af5c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    af52:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    af56:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af58:	bfb8      	it	lt
    af5a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af5c:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    af60:	420a      	tst	r2, r1
    af62:	d004      	beq.n	af6e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    af64:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    af68:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af6a:	bfb8      	it	lt
    af6c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af6e:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    af72:	420a      	tst	r2, r1
    af74:	d004      	beq.n	af80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    af76:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    af7a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af7c:	bfb8      	it	lt
    af7e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    af80:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    af84:	4211      	tst	r1, r2
    af86:	d004      	beq.n	af92 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    af88:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    af8c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    af8e:	bfb8      	it	lt
    af90:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    af92:	6782      	str	r2, [r0, #120]	; 0x78
    af94:	e70c      	b.n	adb0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    af96:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    af9a:	e748      	b.n	ae2e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    af9c:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    af9e:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    afa2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    afa6:	d004      	beq.n	afb2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    afa8:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    afac:	2a00      	cmp	r2, #0
    afae:	f040 80cb 	bne.w	b148 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    afb2:	078b      	lsls	r3, r1, #30
    afb4:	d504      	bpl.n	afc0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    afb6:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    afba:	2b00      	cmp	r3, #0
    afbc:	f040 80be 	bne.w	b13c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    afc0:	074f      	lsls	r7, r1, #29
    afc2:	d504      	bpl.n	afce <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    afc4:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    afc8:	2b00      	cmp	r3, #0
    afca:	f040 80b1 	bne.w	b130 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    afce:	070e      	lsls	r6, r1, #28
    afd0:	d504      	bpl.n	afdc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    afd2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    afd6:	2b00      	cmp	r3, #0
    afd8:	f040 80a4 	bne.w	b124 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    afdc:	06cd      	lsls	r5, r1, #27
    afde:	d504      	bpl.n	afea <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    afe0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    afe4:	2b00      	cmp	r3, #0
    afe6:	f040 8097 	bne.w	b118 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    afea:	068c      	lsls	r4, r1, #26
    afec:	d504      	bpl.n	aff8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    afee:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    aff2:	2b00      	cmp	r3, #0
    aff4:	f040 808a 	bne.w	b10c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    aff8:	064b      	lsls	r3, r1, #25
    affa:	d503      	bpl.n	b004 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    affc:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    b000:	2b00      	cmp	r3, #0
    b002:	d17d      	bne.n	b100 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    b004:	060f      	lsls	r7, r1, #24
    b006:	d503      	bpl.n	b010 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    b008:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    b00c:	2b00      	cmp	r3, #0
    b00e:	d171      	bne.n	b0f4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    b010:	05ce      	lsls	r6, r1, #23
    b012:	d503      	bpl.n	b01c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    b014:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    b018:	2b00      	cmp	r3, #0
    b01a:	d165      	bne.n	b0e8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    b01c:	058d      	lsls	r5, r1, #22
    b01e:	d503      	bpl.n	b028 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    b020:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    b024:	2b00      	cmp	r3, #0
    b026:	d159      	bne.n	b0dc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    b028:	054c      	lsls	r4, r1, #21
    b02a:	d503      	bpl.n	b034 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    b02c:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    b030:	2b00      	cmp	r3, #0
    b032:	d14d      	bne.n	b0d0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    b034:	050b      	lsls	r3, r1, #20
    b036:	d503      	bpl.n	b040 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    b038:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    b03c:	2b00      	cmp	r3, #0
    b03e:	d141      	bne.n	b0c4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    b040:	04cf      	lsls	r7, r1, #19
    b042:	d503      	bpl.n	b04c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    b044:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    b048:	2b00      	cmp	r3, #0
    b04a:	d135      	bne.n	b0b8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    b04c:	048e      	lsls	r6, r1, #18
    b04e:	d502      	bpl.n	b056 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    b050:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    b054:	bb53      	cbnz	r3, b0ac <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    b056:	044d      	lsls	r5, r1, #17
    b058:	d502      	bpl.n	b060 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    b05a:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    b05e:	b9fb      	cbnz	r3, b0a0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    b060:	0bcb      	lsrs	r3, r1, #15
    b062:	d096      	beq.n	af92 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    b064:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    b068:	2b00      	cmp	r3, #0
    b06a:	d092      	beq.n	af92 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    b06c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    b070:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    b074:	430a      	orrs	r2, r1
    b076:	e78c      	b.n	af92 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    b078:	43000800 	.word	0x43000800
    b07c:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    b080:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    b084:	3901      	subs	r1, #1
    b086:	b2c9      	uxtb	r1, r1
    b088:	42a1      	cmp	r1, r4
    b08a:	460a      	mov	r2, r1
    b08c:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    b090:	f73f aed7 	bgt.w	ae42 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    b094:	2101      	movs	r1, #1
    b096:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    b09a:	e6d2      	b.n	ae42 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    b09c:	4623      	mov	r3, r4
    b09e:	e6d0      	b.n	ae42 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    b0a0:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    b0a4:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    b0a8:	4322      	orrs	r2, r4
    b0aa:	e7d9      	b.n	b060 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    b0ac:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    b0b0:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    b0b4:	4322      	orrs	r2, r4
    b0b6:	e7ce      	b.n	b056 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    b0b8:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    b0bc:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    b0c0:	4322      	orrs	r2, r4
    b0c2:	e7c3      	b.n	b04c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    b0c4:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    b0c8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    b0cc:	4322      	orrs	r2, r4
    b0ce:	e7b7      	b.n	b040 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    b0d0:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    b0d4:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    b0d8:	4322      	orrs	r2, r4
    b0da:	e7ab      	b.n	b034 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    b0dc:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    b0e0:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    b0e4:	4322      	orrs	r2, r4
    b0e6:	e79f      	b.n	b028 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    b0e8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    b0ec:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    b0f0:	4322      	orrs	r2, r4
    b0f2:	e793      	b.n	b01c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    b0f4:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    b0f8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    b0fc:	4322      	orrs	r2, r4
    b0fe:	e787      	b.n	b010 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    b100:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    b104:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    b108:	4322      	orrs	r2, r4
    b10a:	e77b      	b.n	b004 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    b10c:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    b110:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    b114:	4322      	orrs	r2, r4
    b116:	e76f      	b.n	aff8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    b118:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    b11c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    b120:	4322      	orrs	r2, r4
    b122:	e762      	b.n	afea <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    b124:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    b128:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    b12c:	4322      	orrs	r2, r4
    b12e:	e755      	b.n	afdc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    b130:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    b134:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    b138:	4322      	orrs	r2, r4
    b13a:	e748      	b.n	afce <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    b13c:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    b140:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    b144:	4322      	orrs	r2, r4
    b146:	e73b      	b.n	afc0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    b148:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    b14c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b150:	e72f      	b.n	afb2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    b152:	bf00      	nop

0000b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    b158:	2301      	movs	r3, #1
    b15a:	f100 0834 	add.w	r8, r0, #52	; 0x34
    b15e:	4e4d      	ldr	r6, [pc, #308]	; (b294 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b160:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    b164:	b083      	sub	sp, #12
    b166:	4681      	mov	r9, r0
    m_useAltOutput = true;
    b168:	4645      	mov	r5, r8
    b16a:	f100 0444 	add.w	r4, r0, #68	; 0x44
    b16e:	2200      	movs	r2, #0
    b170:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    b172:	f855 3b04 	ldr.w	r3, [r5], #4
    b176:	4313      	orrs	r3, r2
    b178:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b17c:	4630      	mov	r0, r6
    b17e:	4639      	mov	r1, r7
    b180:	f7fe febe 	bl	9f00 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    b184:	42a5      	cmp	r5, r4
    b186:	d002      	beq.n	b18e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    b188:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    b18c:	e7f1      	b.n	b172 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    b18e:	f109 0318 	add.w	r3, r9, #24
    b192:	4e40      	ldr	r6, [pc, #256]	; (b294 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b194:	9301      	str	r3, [sp, #4]
    b196:	469b      	mov	fp, r3
    b198:	f04f 0a00 	mov.w	sl, #0
    b19c:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    b19e:	f1ba 0f06 	cmp.w	sl, #6
    b1a2:	4630      	mov	r0, r6
    b1a4:	4639      	mov	r1, r7
    b1a6:	f10a 0a01 	add.w	sl, sl, #1
    b1aa:	d148      	bne.n	b23e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    b1ac:	f8db 2000 	ldr.w	r2, [fp]
    b1b0:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b1b4:	4837      	ldr	r0, [pc, #220]	; (b294 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b1b6:	4313      	orrs	r3, r2
    b1b8:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b1bc:	2100      	movs	r1, #0
    b1be:	f7fe fe9f 	bl	9f00 <Delay_cycles>
    b1c2:	4835      	ldr	r0, [pc, #212]	; (b298 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    b1c4:	4e33      	ldr	r6, [pc, #204]	; (b294 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b1c6:	2100      	movs	r1, #0
    b1c8:	f7fe fe9a 	bl	9f00 <Delay_cycles>
    b1cc:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    b1ce:	f858 2b04 	ldr.w	r2, [r8], #4
    b1d2:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b1d6:	ea23 0302 	bic.w	r3, r3, r2
    b1da:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b1de:	4630      	mov	r0, r6
    b1e0:	4639      	mov	r1, r7
    b1e2:	f7fe fe8d 	bl	9f00 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    b1e6:	4545      	cmp	r5, r8
    b1e8:	d1f1      	bne.n	b1ce <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    b1ea:	f3bf 8f5b 	dmb	ish
    b1ee:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    b1f2:	e853 2f00 	ldrex	r2, [r3]
    b1f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    b1fa:	e843 2100 	strex	r1, r2, [r3]
    b1fe:	2900      	cmp	r1, #0
    b200:	d1f7      	bne.n	b1f2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    b202:	f3bf 8f5b 	dmb	ish
    b206:	4e23      	ldr	r6, [pc, #140]	; (b294 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b208:	2500      	movs	r5, #0
    b20a:	2700      	movs	r7, #0
    b20c:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    b20e:	2d06      	cmp	r5, #6
    b210:	461a      	mov	r2, r3
    b212:	4630      	mov	r0, r6
    b214:	4639      	mov	r1, r7
    b216:	f105 0501 	add.w	r5, r5, #1
    b21a:	d122      	bne.n	b262 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    b21c:	681a      	ldr	r2, [r3, #0]
    b21e:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b222:	481c      	ldr	r0, [pc, #112]	; (b294 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b224:	ea23 0302 	bic.w	r3, r3, r2
    b228:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b22c:	2100      	movs	r1, #0
    b22e:	f7fe fe67 	bl	9f00 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    b232:	2300      	movs	r3, #0
    b234:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b238:	b003      	add	sp, #12
    b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    b23e:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    b242:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    b246:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    b24a:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    b24c:	4313      	orrs	r3, r2
    b24e:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b252:	f7fe fe55 	bl	9f00 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b256:	f1ba 0f07 	cmp.w	sl, #7
    b25a:	f10b 0b04 	add.w	fp, fp, #4
    b25e:	d19e      	bne.n	b19e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    b260:	e7af      	b.n	b1c2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    b262:	f853 3c18 	ldr.w	r3, [r3, #-24]
    b266:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    b26a:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    b26c:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    b270:	ea23 0302 	bic.w	r3, r3, r2
    b274:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b278:	9b01      	ldr	r3, [sp, #4]
    b27a:	3304      	adds	r3, #4
    b27c:	9301      	str	r3, [sp, #4]
    b27e:	f7fe fe3f 	bl	9f00 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b282:	2d07      	cmp	r5, #7
    b284:	d1c2      	bne.n	b20c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    b286:	2300      	movs	r3, #0
    b288:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b28c:	b003      	add	sp, #12
    b28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b292:	bf00      	nop
    b294:	002dc6c0 	.word	0x002dc6c0
    b298:	005b8d80 	.word	0x005b8d80

0000b29c <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    b29e:	4d0e      	ldr	r5, [pc, #56]	; (b2d8 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    b2a0:	682b      	ldr	r3, [r5, #0]
    b2a2:	f013 0401 	ands.w	r4, r3, #1
    b2a6:	d002      	beq.n	b2ae <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    b2a8:	4b0c      	ldr	r3, [pc, #48]	; (b2dc <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    b2aa:	6818      	ldr	r0, [r3, #0]
    b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b2ae:	2010      	movs	r0, #16
    b2b0:	f008 f8be 	bl	13430 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    b2b4:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    b2b6:	4909      	ldr	r1, [pc, #36]	; (b2dc <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    b2b8:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b2ba:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b2bc:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b2be:	2617      	movs	r6, #23
      m_initialized(false) {
    b2c0:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    b2c2:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b2c4:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b2c6:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    b2c8:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    b2ca:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    b2cc:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    b2ce:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b2d0:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b2d2:	7342      	strb	r2, [r0, #13]
}
    b2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b2d6:	bf00      	nop
    b2d8:	20001c00 	.word	0x20001c00
    b2dc:	20001c08 	.word	0x20001c08

0000b2e0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    b2e0:	7843      	ldrb	r3, [r0, #1]
    b2e2:	428b      	cmp	r3, r1
    b2e4:	d06d      	beq.n	b3c2 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    b2e6:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    b2ec:	d071      	beq.n	b3d2 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    b2ee:	d363      	bcc.n	b3b8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    b2f0:	2902      	cmp	r1, #2
    b2f2:	d16b      	bne.n	b3cc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    b2f4:	4e39      	ldr	r6, [pc, #228]	; (b3dc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    b2f6:	f240 188f 	movw	r8, #399	; 0x18f
    b2fa:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b2fe:	4a38      	ldr	r2, [pc, #224]	; (b3e0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    b300:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b302:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b304:	4b37      	ldr	r3, [pc, #220]	; (b3e4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b306:	f36f 0441 	bfc	r4, #1, #1
    b30a:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b30c:	681c      	ldr	r4, [r3, #0]
    b30e:	f36f 0441 	bfc	r4, #1, #1
    b312:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b314:	6893      	ldr	r3, [r2, #8]
    b316:	079c      	lsls	r4, r3, #30
    b318:	d4fc      	bmi.n	b314 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b31a:	4d32      	ldr	r5, [pc, #200]	; (b3e4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b31c:	68ac      	ldr	r4, [r5, #8]
    b31e:	f014 0402 	ands.w	r4, r4, #2
    b322:	d1fb      	bne.n	b31c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    b324:	4631      	mov	r1, r6
    b326:	7800      	ldrb	r0, [r0, #0]
    b328:	4e2f      	ldr	r6, [pc, #188]	; (b3e8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    b32a:	f000 fead 	bl	c088 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    b32e:	492f      	ldr	r1, [pc, #188]	; (b3ec <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    b330:	4a2f      	ldr	r2, [pc, #188]	; (b3f0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    b332:	4b2b      	ldr	r3, [pc, #172]	; (b3e0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    b334:	482f      	ldr	r0, [pc, #188]	; (b3f4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    b336:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    b338:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    b33a:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b33c:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b33e:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b340:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b342:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b344:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b346:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b348:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b34a:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    b34c:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    b350:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    b352:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    b354:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    b358:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    b35a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    b35e:	3018      	adds	r0, #24
    b360:	3104      	adds	r1, #4
    b362:	3204      	adds	r2, #4
    b364:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b366:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b368:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b36a:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b36c:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b36e:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b370:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b372:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    b374:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    b378:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    b37c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    b380:	f856 0b04 	ldr.w	r0, [r6], #4
    b384:	4639      	mov	r1, r7
    b386:	3030      	adds	r0, #48	; 0x30
    b388:	f000 fcb2 	bl	bcf0 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b38c:	42b4      	cmp	r4, r6
    b38e:	d1f7      	bne.n	b380 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b390:	4a13      	ldr	r2, [pc, #76]	; (b3e0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b392:	4914      	ldr	r1, [pc, #80]	; (b3e4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b394:	6813      	ldr	r3, [r2, #0]
    b396:	f043 0302 	orr.w	r3, r3, #2
    b39a:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b39c:	680b      	ldr	r3, [r1, #0]
    b39e:	f043 0302 	orr.w	r3, r3, #2
    b3a2:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b3a4:	6893      	ldr	r3, [r2, #8]
    b3a6:	0799      	lsls	r1, r3, #30
    b3a8:	d4fc      	bmi.n	b3a4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b3aa:	4a0e      	ldr	r2, [pc, #56]	; (b3e4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b3ac:	6893      	ldr	r3, [r2, #8]
    b3ae:	079b      	lsls	r3, r3, #30
    b3b0:	d4fc      	bmi.n	b3ac <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    b3b2:	2001      	movs	r0, #1
    b3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b3b8:	f04f 0813 	mov.w	r8, #19
    b3bc:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    b3be:	4e0e      	ldr	r6, [pc, #56]	; (b3f8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    b3c0:	e79d      	b.n	b2fe <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    b3c2:	7b83      	ldrb	r3, [r0, #14]
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	d08e      	beq.n	b2e6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    b3c8:	2000      	movs	r0, #0
    b3ca:	4770      	bx	lr
        return false;
    b3cc:	2000      	movs	r0, #0
    b3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b3d2:	f04f 0863 	mov.w	r8, #99	; 0x63
    b3d6:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    b3d8:	4e08      	ldr	r6, [pc, #32]	; (b3fc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    b3da:	e790      	b.n	b2fe <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    b3dc:	001e8480 	.word	0x001e8480
    b3e0:	41016000 	.word	0x41016000
    b3e4:	41018000 	.word	0x41018000
    b3e8:	00022ef0 	.word	0x00022ef0
    b3ec:	41016004 	.word	0x41016004
    b3f0:	41016008 	.word	0x41016008
    b3f4:	4101600c 	.word	0x4101600c
    b3f8:	000186a0 	.word	0x000186a0
    b3fc:	0007a120 	.word	0x0007a120

0000b400 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    b400:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    b402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b406:	4606      	mov	r6, r0
    b408:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    b40a:	d036      	beq.n	b47a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    b40c:	460c      	mov	r4, r1
    b40e:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    b412:	2f03      	cmp	r7, #3
    b414:	d907      	bls.n	b426 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    b416:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    b418:	7b38      	ldrb	r0, [r7, #12]
    b41a:	1b40      	subs	r0, r0, r5
    b41c:	fab0 f080 	clz	r0, r0
    b420:	0940      	lsrs	r0, r0, #5
    b422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b426:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b4e8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b42a:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    b42e:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b430:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    b434:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b436:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b438:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b43c:	685b      	ldr	r3, [r3, #4]
    b43e:	4629      	mov	r1, r5
    b440:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b442:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    b446:	6803      	ldr	r3, [r0, #0]
    b448:	4629      	mov	r1, r5
    b44a:	685b      	ldr	r3, [r3, #4]
    b44c:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b44e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    b452:	f997 2002 	ldrsb.w	r2, [r7, #2]
    b456:	684b      	ldr	r3, [r1, #4]
    b458:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b45c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b460:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b464:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b466:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b46a:	bf0c      	ite	eq
    b46c:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    b470:	f36f 0200 	bfcne	r2, #0, #1
    b474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b478:	e7ce      	b.n	b418 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    b47a:	f1a2 0709 	sub.w	r7, r2, #9
    b47e:	2f03      	cmp	r7, #3
    b480:	d907      	bls.n	b492 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b482:	7b33      	ldrb	r3, [r6, #12]
    b484:	42ab      	cmp	r3, r5
    b486:	d002      	beq.n	b48e <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    b488:	2000      	movs	r0, #0
}
    b48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b48e:	2401      	movs	r4, #1
    b490:	e7bf      	b.n	b412 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b492:	f8df 9054 	ldr.w	r9, [pc, #84]	; b4e8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    b496:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b498:	f8d9 0000 	ldr.w	r0, [r9]
    b49c:	6803      	ldr	r3, [r0, #0]
    b49e:	4611      	mov	r1, r2
    b4a0:	685b      	ldr	r3, [r3, #4]
    b4a2:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b4a4:	f8d9 0004 	ldr.w	r0, [r9, #4]
    b4a8:	6803      	ldr	r3, [r0, #0]
    b4aa:	4629      	mov	r1, r5
    b4ac:	685b      	ldr	r3, [r3, #4]
    b4ae:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b4b0:	f996 2002 	ldrsb.w	r2, [r6, #2]
    b4b4:	6873      	ldr	r3, [r6, #4]
    b4b6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b4ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b4be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b4c2:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b4c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b4c8:	d004      	beq.n	b4d4 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    b4ca:	f36f 0200 	bfc	r2, #0, #1
    b4ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b4d2:	e7d6      	b.n	b482 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    b4d4:	f042 0201 	orr.w	r2, r2, #1
    b4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b4dc:	7b33      	ldrb	r3, [r6, #12]
    b4de:	2b0a      	cmp	r3, #10
    b4e0:	d1d2      	bne.n	b488 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    b4e2:	2401      	movs	r4, #1
    b4e4:	e7a1      	b.n	b42a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    b4e6:	bf00      	nop
    b4e8:	00022ef0 	.word	0x00022ef0

0000b4ec <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    b4ec:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b4ee:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    b4f0:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b4f2:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b4f4:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    b4f6:	2101      	movs	r1, #1
    b4f8:	f7ff fef2 	bl	b2e0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b4fc:	f995 2002 	ldrsb.w	r2, [r5, #2]
    b500:	6868      	ldr	r0, [r5, #4]
    b502:	01d2      	lsls	r2, r2, #7
    b504:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b508:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b50c:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b50e:	2101      	movs	r1, #1
    b510:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b512:	2600      	movs	r6, #0
    b514:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b518:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b51a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    b51e:	f010 0f01 	tst.w	r0, #1
    b522:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    b526:	f04f 040c 	mov.w	r4, #12
    b52a:	bf0c      	ite	eq
    b52c:	f364 0003 	bfieq	r0, r4, #0, #4
    b530:	f364 1007 	bfine	r0, r4, #4, #4
    b534:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b538:	4b2d      	ldr	r3, [pc, #180]	; (b5f0 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    b53a:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b53c:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b53e:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b540:	f995 2003 	ldrsb.w	r2, [r5, #3]
    b544:	68a9      	ldr	r1, [r5, #8]
    b546:	01d2      	lsls	r2, r2, #7
    b548:	4413      	add	r3, r2
    b54a:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b54c:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b54e:	2600      	movs	r6, #0
    b550:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b554:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b556:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    b55a:	f011 0f01 	tst.w	r1, #1
    b55e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    b562:	4e24      	ldr	r6, [pc, #144]	; (b5f4 <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    b564:	f04f 040c 	mov.w	r4, #12
    b568:	bf14      	ite	ne
    b56a:	f364 1107 	bfine	r1, r4, #4, #4
    b56e:	f364 0103 	bfieq	r1, r4, #0, #4
    b572:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b576:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b57a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b57e:	2400      	movs	r4, #0
    b580:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    b582:	f856 0b04 	ldr.w	r0, [r6], #4
    b586:	f3c4 0346 	ubfx	r3, r4, #1, #7
    b58a:	6802      	ldr	r2, [r0, #0]
    b58c:	442b      	add	r3, r5
    b58e:	6852      	ldr	r2, [r2, #4]
    b590:	7b19      	ldrb	r1, [r3, #12]
    b592:	3401      	adds	r4, #1
    b594:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b596:	2c04      	cmp	r4, #4
    b598:	d1f3      	bne.n	b582 <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b59a:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b59c:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b5a0:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b5a2:	686b      	ldr	r3, [r5, #4]
    b5a4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b5a8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b5ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b5b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b5b4:	bf14      	ite	ne
    b5b6:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b5ba:	f042 0201 	orreq.w	r2, r2, #1
    b5be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b5c2:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b5c4:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b5c8:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b5ca:	68ab      	ldr	r3, [r5, #8]
    b5cc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b5d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b5d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b5d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b5dc:	bf0c      	ite	eq
    b5de:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b5e2:	f36f 0200 	bfcne	r2, #0, #1
    b5e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    b5ea:	2301      	movs	r3, #1
    b5ec:	73ab      	strb	r3, [r5, #14]
    b5ee:	bd70      	pop	{r4, r5, r6, pc}
    b5f0:	41008000 	.word	0x41008000
    b5f4:	00022ef0 	.word	0x00022ef0

0000b5f8 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    b5f8:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    b5fa:	f7ff fe4f 	bl	b29c <_ZN9ClearCore12MotorManager8InstanceEv>
    b5fe:	4b01      	ldr	r3, [pc, #4]	; (b604 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    b600:	6018      	str	r0, [r3, #0]
    b602:	bd08      	pop	{r3, pc}
    b604:	20001c04 	.word	0x20001c04

0000b608 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b60a:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b60c:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    b60e:	f890 3020 	ldrb.w	r3, [r0, #32]
    b612:	b113      	cbz	r3, b61a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    b614:	2300      	movs	r3, #0
    b616:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    b618:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    b61a:	b362      	cbz	r2, b676 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    b61c:	69a0      	ldr	r0, [r4, #24]
    b61e:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b620:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    b622:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b624:	bb2b      	cbnz	r3, b672 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    b626:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b628:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    b62c:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b630:	2700      	movs	r7, #0
    b632:	4032      	ands	r2, r6
    b634:	403b      	ands	r3, r7
    m_stepsSent = 0;
    b636:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    b638:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b63a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    b63e:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    b640:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    b644:	f010 fa5c 	bl	1bb00 <__aeabi_i2d>
    b648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    b64c:	4619      	mov	r1, r3
    b64e:	f010 fd57 	bl	1c100 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    b652:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b654:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b656:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b658:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    b65a:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    b65e:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    b660:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    b662:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b664:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b666:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b668:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    b66a:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b66c:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    b66e:	4618      	mov	r0, r3
    b670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b672:	4240      	negs	r0, r0
    b674:	e7d7      	b.n	b626 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    b676:	6960      	ldr	r0, [r4, #20]
    b678:	1a08      	subs	r0, r1, r0
            break;
    b67a:	e7d5      	b.n	b628 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000b67c <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b67e:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b680:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    b682:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    b684:	0fca      	lsrs	r2, r1, #31
    b686:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    b68a:	f884 3020 	strb.w	r3, [r4, #32]
    b68e:	4608      	mov	r0, r1
    b690:	f010 fa36 	bl	1bb00 <__aeabi_i2d>
    b694:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    b698:	4619      	mov	r1, r3
    b69a:	f010 fd31 	bl	1c100 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b69e:	17c3      	asrs	r3, r0, #31
    b6a0:	03d9      	lsls	r1, r3, #15
    b6a2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b6a6:	f241 3288 	movw	r2, #5000	; 0x1388
    b6aa:	2300      	movs	r3, #0
    b6ac:	03c0      	lsls	r0, r0, #15
    b6ae:	f010 fecd 	bl	1c44c <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b6b2:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b6b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b6b8:	03de      	lsls	r6, r3, #15
    b6ba:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b6bc:	42b2      	cmp	r2, r6
    b6be:	f04f 0300 	mov.w	r3, #0
    b6c2:	eb73 0507 	sbcs.w	r5, r3, r7
    b6c6:	bfbc      	itt	lt
    b6c8:	4616      	movlt	r6, r2
    b6ca:	461f      	movlt	r7, r3
    b6cc:	4286      	cmp	r6, r0
    b6ce:	460b      	mov	r3, r1
    b6d0:	4602      	mov	r2, r0
    b6d2:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b6d6:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b6da:	bfb8      	it	lt
    b6dc:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b6de:	2700      	movs	r7, #0
    b6e0:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b6e4:	4030      	ands	r0, r6
    b6e6:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    b6e8:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    b6ea:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b6ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b6ee:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b6f0:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    b6f2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    b6f6:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b6f8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    b6fc:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    b6fe:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    b700:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b702:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    b704:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    b706:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    b708:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b70a:	b662      	cpsie	i
}
    b70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b70e:	bf00      	nop

0000b710 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    b714:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    b716:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    b71a:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    b71c:	b085      	sub	sp, #20
    b71e:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    b720:	d038      	beq.n	b794 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    b722:	2b07      	cmp	r3, #7
    b724:	f200 80da 	bhi.w	b8dc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    b728:	e8df f013 	tbh	[pc, r3, lsl #1]
    b72c:	00d8002f 	.word	0x00d8002f
    b730:	00be01d7 	.word	0x00be01d7
    b734:	025f0086 	.word	0x025f0086
    b738:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    b73c:	7b41      	ldrb	r1, [r0, #13]
    b73e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b742:	428b      	cmp	r3, r1
    b744:	f000 822d 	beq.w	bba2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    b748:	6980      	ldr	r0, [r0, #24]
    b74a:	69e3      	ldr	r3, [r4, #28]
    b74c:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b74e:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b752:	f647 72ff 	movw	r2, #32767	; 0x7fff
    b756:	2300      	movs	r3, #0
    b758:	4016      	ands	r6, r2
    b75a:	401f      	ands	r7, r3
    b75c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    b760:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    b764:	2501      	movs	r5, #1
            m_moveDirChange = false;
    b766:	2300      	movs	r3, #0
    b768:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    b76a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    b76e:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    b770:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b774:	0bf2      	lsrs	r2, r6, #15
    b776:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    b77a:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    b77c:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b77e:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    b780:	6962      	ldr	r2, [r4, #20]
    b782:	b101      	cbz	r1, b786 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    b784:	425b      	negs	r3, r3
    b786:	4413      	add	r3, r2
    b788:	6163      	str	r3, [r4, #20]
}
    b78a:	b005      	add	sp, #20
    b78c:	ecbd 8b02 	vpop	{d8}
    b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b794:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    b796:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    b79a:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    b79e:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    b7a2:	1457      	asrs	r7, r2, #17
    b7a4:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b7a6:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    b7aa:	2900      	cmp	r1, #0
    b7ac:	d163      	bne.n	b876 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    b7ae:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b7b0:	2d00      	cmp	r5, #0
    b7b2:	f000 8117 	beq.w	b9e4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    b7b6:	7b41      	ldrb	r1, [r0, #13]
    b7b8:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    b7bc:	9100      	str	r1, [sp, #0]
    b7be:	4291      	cmp	r1, r2
    b7c0:	f000 81f8 	beq.w	bbb4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    b7c4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    b7c8:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    b7ca:	2305      	movs	r3, #5
    b7cc:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    b7ce:	6520      	str	r0, [r4, #80]	; 0x50
    b7d0:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b7d2:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b7d6:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    b7da:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    b7dc:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b7e0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    b7e4:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b7e6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b7ea:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b7ec:	f300 80ab 	bgt.w	b946 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b7f0:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b7f2:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b7f6:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b7fa:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b7fc:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b800:	4629      	mov	r1, r5
    b802:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b804:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b808:	f010 fe70 	bl	1c4ec <__aeabi_uldivmod>
    b80c:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b80e:	fba0 bc05 	umull	fp, ip, r0, r5
    b812:	fb00 cc03 	mla	ip, r0, r3, ip
    b816:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b81a:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b81c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b820:	eb47 0709 	adc.w	r7, r7, r9
    b824:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b828:	2900      	cmp	r1, #0
    b82a:	f000 816e 	beq.w	bb0a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b82e:	2307      	movs	r3, #7
    b830:	7323      	strb	r3, [r4, #12]
    b832:	9900      	ldr	r1, [sp, #0]
    b834:	69e3      	ldr	r3, [r4, #28]
    b836:	e79d      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b838:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b83a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b83c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b840:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b844:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b848:	1952      	adds	r2, r2, r5
    b84a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b84e:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b850:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b854:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b858:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b85a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b85e:	da54      	bge.n	b90a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b860:	2900      	cmp	r1, #0
    b862:	dd52      	ble.n	b90a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b864:	2a01      	cmp	r2, #1
    b866:	f173 0100 	sbcs.w	r1, r3, #0
    b86a:	db4e      	blt.n	b90a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b86c:	461f      	mov	r7, r3
    b86e:	4616      	mov	r6, r2
    b870:	69e3      	ldr	r3, [r4, #28]
    b872:	7b61      	ldrb	r1, [r4, #13]
    b874:	e77e      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b876:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b878:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b87a:	2b00      	cmp	r3, #0
    b87c:	f000 80a1 	beq.w	b9c2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b880:	2d00      	cmp	r5, #0
    b882:	f040 8130 	bne.w	bae6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b886:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b88a:	6820      	ldr	r0, [r4, #0]
    b88c:	6523      	str	r3, [r4, #80]	; 0x50
    b88e:	2100      	movs	r1, #0
    b890:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b892:	7362      	strb	r2, [r4, #13]
    b894:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b898:	4620      	mov	r0, r4
    b89a:	4798      	blx	r3
    b89c:	7b63      	ldrb	r3, [r4, #13]
    b89e:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b8a2:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b8a4:	9300      	str	r3, [sp, #0]
    b8a6:	e094      	b.n	b9d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b8a8:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b8ac:	7b43      	ldrb	r3, [r0, #13]
    b8ae:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b8b2:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b8b4:	4652      	mov	r2, sl
    b8b6:	eb16 060a 	adds.w	r6, r6, sl
    b8ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b8be:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b8c2:	415f      	adcs	r7, r3
    b8c4:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b8c8:	2900      	cmp	r1, #0
    b8ca:	d03f      	beq.n	b94c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b8cc:	f1ba 0f00 	cmp.w	sl, #0
    b8d0:	d139      	bne.n	b946 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b8d2:	2306      	movs	r3, #6
    b8d4:	7323      	strb	r3, [r4, #12]
    b8d6:	9900      	ldr	r1, [sp, #0]
    b8d8:	69e3      	ldr	r3, [r4, #28]
    b8da:	e74b      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b8dc:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b8de:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b8e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b8e4:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b8e8:	2000      	movs	r0, #0
    b8ea:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b8ec:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b8ee:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b8f0:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b8f2:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b8f4:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b8f6:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b8f8:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b8fc:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b900:	b005      	add	sp, #20
    b902:	ecbd 8b02 	vpop	{d8}
    b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b90a:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b90c:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b90e:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b910:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b912:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b916:	7322      	strb	r2, [r4, #12]
    b918:	69e3      	ldr	r3, [r4, #28]
    b91a:	7b61      	ldrb	r1, [r4, #13]
    b91c:	e72a      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b91e:	2302      	movs	r3, #2
    b920:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b922:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b926:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b928:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b92c:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b92e:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b930:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b934:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b936:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b938:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b93c:	f280 80a2 	bge.w	ba84 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b940:	2d00      	cmp	r5, #0
    b942:	f340 809f 	ble.w	ba84 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b946:	9900      	ldr	r1, [sp, #0]
    b948:	69e3      	ldr	r3, [r4, #28]
    b94a:	e713      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b94c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b950:	4286      	cmp	r6, r0
    b952:	eb77 0501 	sbcs.w	r5, r7, r1
    b956:	da03      	bge.n	b960 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b958:	2e01      	cmp	r6, #1
    b95a:	f177 0500 	sbcs.w	r5, r7, #0
    b95e:	daf2      	bge.n	b946 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b960:	2500      	movs	r5, #0
    b962:	1a31      	subs	r1, r6, r0
    b964:	4628      	mov	r0, r5
    b966:	f010 fdc1 	bl	1c4ec <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b96a:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b96c:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b970:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b972:	fb00 9e03 	mla	lr, r0, r3, r9
    b976:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b978:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b97c:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b980:	fb0e 330c 	mla	r3, lr, ip, r3
    b984:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b986:	1a32      	subs	r2, r6, r0
    b988:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b98c:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b990:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b992:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b996:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b99a:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b99c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b9a0:	f280 80a9 	bge.w	baf6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b9a4:	42a8      	cmp	r0, r5
    b9a6:	f340 80a6 	ble.w	baf6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b9aa:	2a01      	cmp	r2, #1
    b9ac:	f173 0100 	sbcs.w	r1, r3, #0
    b9b0:	f2c0 80a1 	blt.w	baf6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b9b4:	2004      	movs	r0, #4
    b9b6:	461f      	mov	r7, r3
    b9b8:	9900      	ldr	r1, [sp, #0]
    b9ba:	7320      	strb	r0, [r4, #12]
    b9bc:	4616      	mov	r6, r2
    b9be:	69e3      	ldr	r3, [r4, #28]
    b9c0:	e6d8      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b9c2:	7b42      	ldrb	r2, [r0, #13]
    b9c4:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b9c6:	4619      	mov	r1, r3
    b9c8:	2000      	movs	r0, #0
    b9ca:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b9ce:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b9d0:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b9d2:	4555      	cmp	r5, sl
    b9d4:	f000 80db 	beq.w	bb8e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b9d8:	dda1      	ble.n	b91e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b9da:	2305      	movs	r3, #5
    b9dc:	7323      	strb	r3, [r4, #12]
    b9de:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b9e2:	e6f6      	b.n	b7d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b9e4:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b9e8:	4611      	mov	r1, r2
    b9ea:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b9ec:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b9f0:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b9f2:	4613      	mov	r3, r2
    b9f4:	429f      	cmp	r7, r3
    b9f6:	bf08      	it	eq
    b9f8:	428e      	cmpeq	r6, r1
    b9fa:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b9fe:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    ba02:	d00e      	beq.n	ba22 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    ba04:	6803      	ldr	r3, [r0, #0]
    ba06:	689b      	ldr	r3, [r3, #8]
    ba08:	4798      	blx	r3
    ba0a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ba0e:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    ba10:	2b00      	cmp	r3, #0
    ba12:	f040 80ca 	bne.w	bbaa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    ba16:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    ba1a:	e9cd 2300 	strd	r2, r3, [sp]
    ba1e:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    ba22:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    ba26:	0fcb      	lsrs	r3, r1, #31
    ba28:	18c0      	adds	r0, r0, r3
    ba2a:	464e      	mov	r6, r9
    ba2c:	f141 0100 	adc.w	r1, r1, #0
    ba30:	17f7      	asrs	r7, r6, #31
    ba32:	1049      	asrs	r1, r1, #1
    ba34:	ea4f 0030 	mov.w	r0, r0, rrx
    ba38:	464a      	mov	r2, r9
    ba3a:	463b      	mov	r3, r7
    ba3c:	f010 fd06 	bl	1c44c <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    ba40:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    ba44:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    ba48:	464a      	mov	r2, r9
    ba4a:	463b      	mov	r3, r7
    ba4c:	fb8a 010a 	smull	r0, r1, sl, sl
    ba50:	f010 fcfc 	bl	1c44c <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    ba54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ba58:	1a82      	subs	r2, r0, r2
    ba5a:	eb61 0303 	sbc.w	r3, r1, r3
    ba5e:	4610      	mov	r0, r2
    ba60:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    ba62:	e9dd 2300 	ldrd	r2, r3, [sp]
    ba66:	4282      	cmp	r2, r0
    ba68:	418b      	sbcs	r3, r1
    ba6a:	db63      	blt.n	bb34 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    ba6c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    ba70:	4555      	cmp	r5, sl
    ba72:	f340 8091 	ble.w	bb98 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    ba76:	2305      	movs	r3, #5
    ba78:	7323      	strb	r3, [r4, #12]
    ba7a:	7b63      	ldrb	r3, [r4, #13]
    ba7c:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    ba80:	9300      	str	r3, [sp, #0]
    ba82:	e6a6      	b.n	b7d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    ba84:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    ba86:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    ba8a:	4691      	mov	r9, r2
    ba8c:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    ba8e:	461a      	mov	r2, r3
    ba90:	4629      	mov	r1, r5
    ba92:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    ba94:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    ba98:	2000      	movs	r0, #0
    ba9a:	f010 fd27 	bl	1c4ec <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    ba9e:	4602      	mov	r2, r0
    baa0:	fba2 0105 	umull	r0, r1, r2, r5
    baa4:	2300      	movs	r3, #0
    baa6:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    baaa:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    baae:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    bab0:	4642      	mov	r2, r8
    bab2:	464b      	mov	r3, r9
    bab4:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    bab8:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    babc:	f010 fd16 	bl	1c4ec <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    bac0:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    bac4:	0849      	lsrs	r1, r1, #1
    bac6:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    baca:	1a12      	subs	r2, r2, r0
    bacc:	eb63 0301 	sbc.w	r3, r3, r1
    bad0:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    bad4:	2303      	movs	r3, #3
    bad6:	7323      	strb	r3, [r4, #12]
    bad8:	e6ec      	b.n	b8b4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    bada:	7b43      	ldrb	r3, [r0, #13]
    badc:	6c05      	ldr	r5, [r0, #64]	; 0x40
    bade:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    bae2:	9300      	str	r3, [sp, #0]
    bae4:	e71d      	b.n	b922 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    bae6:	7b40      	ldrb	r0, [r0, #13]
    bae8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    baec:	9000      	str	r0, [sp, #0]
    baee:	4290      	cmp	r0, r2
    baf0:	f47f af6a 	bne.w	b9c8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    baf4:	e6c9      	b.n	b88a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    baf6:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    baf8:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    bafa:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    bafc:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    bafe:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    bb02:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    bb04:	7322      	strb	r2, [r4, #12]
    bb06:	69e3      	ldr	r3, [r4, #28]
    bb08:	e634      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    bb0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bb0e:	fb8a 010a 	smull	r0, r1, sl, sl
    bb12:	f010 fceb 	bl	1c4ec <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    bb16:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    bb1a:	0849      	lsrs	r1, r1, #1
    bb1c:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    bb20:	1a12      	subs	r2, r2, r0
    bb22:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    bb26:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    bb28:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    bb2c:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    bb2e:	7320      	strb	r0, [r4, #12]
    bb30:	69e3      	ldr	r3, [r4, #28]
    bb32:	e61f      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    bb34:	69a6      	ldr	r6, [r4, #24]
    bb36:	17f1      	asrs	r1, r6, #31
    bb38:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    bb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    bb3e:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    bb40:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    bb42:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    bb46:	4159      	adcs	r1, r3
    bb48:	460b      	mov	r3, r1
    bb4a:	fb00 f107 	mul.w	r1, r0, r7
    bb4e:	fb09 1303 	mla	r3, r9, r3, r1
    bb52:	fba0 0109 	umull	r0, r1, r0, r9
    bb56:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    bb58:	f010 fc3a 	bl	1c3d0 <__aeabi_l2f>
    bb5c:	ee00 0a10 	vmov	s0, r0
    bb60:	eeb5 0a40 	vcmp.f32	s0, #0.0
    bb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb68:	eeb1 8ac0 	vsqrt.f32	s16, s0
    bb6c:	d439      	bmi.n	bbe2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    bb6e:	ee18 0a10 	vmov	r0, s16
    bb72:	f010 fcd3 	bl	1c51c <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    bb76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    bb7a:	4282      	cmp	r2, r0
    bb7c:	f04f 0300 	mov.w	r3, #0
    bb80:	eb73 0601 	sbcs.w	r6, r3, r1
    bb84:	bfb8      	it	lt
    bb86:	4610      	movlt	r0, r2
    bb88:	6520      	str	r0, [r4, #80]	; 0x50
    bb8a:	4682      	mov	sl, r0
    bb8c:	e770      	b.n	ba70 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    bb8e:	2303      	movs	r3, #3
    bb90:	7323      	strb	r3, [r4, #12]
    bb92:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    bb96:	e68d      	b.n	b8b4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    bb98:	2302      	movs	r3, #2
    bb9a:	7323      	strb	r3, [r4, #12]
    bb9c:	7b63      	ldrb	r3, [r4, #13]
    bb9e:	9300      	str	r3, [sp, #0]
    bba0:	e6bf      	b.n	b922 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    bba2:	69c0      	ldr	r0, [r0, #28]
    bba4:	69a3      	ldr	r3, [r4, #24]
    bba6:	1ac0      	subs	r0, r0, r3
    bba8:	e5d1      	b.n	b74e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    bbaa:	7b63      	ldrb	r3, [r4, #13]
    bbac:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    bbb0:	9300      	str	r3, [sp, #0]
    bbb2:	e609      	b.n	b7c8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    bbb4:	464a      	mov	r2, r9
    bbb6:	17d3      	asrs	r3, r2, #31
    bbb8:	fb85 0105 	smull	r0, r1, r5, r5
    bbbc:	f010 fc46 	bl	1c44c <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    bbc0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    bbc4:	1049      	asrs	r1, r1, #1
    bbc6:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    bbca:	1ab6      	subs	r6, r6, r2
    bbcc:	eb67 0703 	sbc.w	r7, r7, r3
    bbd0:	4286      	cmp	r6, r0
    bbd2:	eb77 0301 	sbcs.w	r3, r7, r1
    bbd6:	bfb4      	ite	lt
    bbd8:	2301      	movlt	r3, #1
    bbda:	2300      	movge	r3, #0
    bbdc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    bbe0:	e716      	b.n	ba10 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    bbe2:	f00f f9c9 	bl	1af78 <sqrtf>
    bbe6:	6c25      	ldr	r5, [r4, #64]	; 0x40
    bbe8:	e7c1      	b.n	bb6e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    bbea:	7b43      	ldrb	r3, [r0, #13]
    bbec:	6c05      	ldr	r5, [r0, #64]	; 0x40
    bbee:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    bbf2:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    bbf6:	9300      	str	r3, [sp, #0]
    bbf8:	e5eb      	b.n	b7d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    bbfa:	bf00      	nop

0000bbfc <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    bbfc:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    bbfe:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    bc00:	4916      	ldr	r1, [pc, #88]	; (bc5c <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    bc02:	6001      	str	r1, [r0, #0]
    bc04:	2200      	movs	r2, #0
    bc06:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    bc0a:	2501      	movs	r5, #1
    bc0c:	2102      	movs	r1, #2
    bc0e:	2600      	movs	r6, #0
    bc10:	2700      	movs	r7, #0
    bc12:	f362 1486 	bfi	r4, r2, #6, #1
    bc16:	7404      	strb	r4, [r0, #16]
    bc18:	6042      	str	r2, [r0, #4]
    bc1a:	6082      	str	r2, [r0, #8]
    bc1c:	7302      	strb	r2, [r0, #12]
    bc1e:	7342      	strb	r2, [r0, #13]
    bc20:	6142      	str	r2, [r0, #20]
    bc22:	6182      	str	r2, [r0, #24]
    bc24:	61c2      	str	r2, [r0, #28]
    bc26:	f880 2020 	strb.w	r2, [r0, #32]
    bc2a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    bc2e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    bc32:	6282      	str	r2, [r0, #40]	; 0x28
    bc34:	6402      	str	r2, [r0, #64]	; 0x40
    bc36:	6442      	str	r2, [r0, #68]	; 0x44
    bc38:	6502      	str	r2, [r0, #80]	; 0x50
    bc3a:	6642      	str	r2, [r0, #100]	; 0x64
    bc3c:	7385      	strb	r5, [r0, #14]
    bc3e:	6245      	str	r5, [r0, #36]	; 0x24
    bc40:	6605      	str	r5, [r0, #96]	; 0x60
    bc42:	62c1      	str	r1, [r0, #44]	; 0x2c
    bc44:	6301      	str	r1, [r0, #48]	; 0x30
    bc46:	6681      	str	r1, [r0, #104]	; 0x68
    bc48:	66c1      	str	r1, [r0, #108]	; 0x6c
    bc4a:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    bc4e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    bc52:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    bc56:	bcf0      	pop	{r4, r5, r6, r7}
    bc58:	4770      	bx	lr
    bc5a:	bf00      	nop
    bc5c:	000232e0 	.word	0x000232e0

0000bc60 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    bc60:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    bc62:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    bc64:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bc66:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    bc68:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bc6a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    bc6c:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    bc6e:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    bc70:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    bc72:	2700      	movs	r7, #0
    bc74:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bc78:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    bc7a:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bc7c:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    bc7e:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    bc80:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    bc82:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    bc84:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    bc88:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    bc8a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    bc8c:	b662      	cpsie	i
}
    bc8e:	bcd0      	pop	{r4, r6, r7}
    bc90:	4770      	bx	lr
    bc92:	bf00      	nop
    bc94:	0000      	movs	r0, r0
	...

0000bc98 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    bc98:	b510      	push	{r4, lr}
    bc9a:	4604      	mov	r4, r0
    if (decelMax != 0) {
    bc9c:	b191      	cbz	r1, bcc4 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    bc9e:	a312      	add	r3, pc, #72	; (adr r3, bce8 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
    bca4:	03c8      	lsls	r0, r1, #15
    bca6:	0c49      	lsrs	r1, r1, #17
    bca8:	f010 fbd0 	bl	1c44c <__aeabi_ldivmod>
    bcac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bcae:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    bcb0:	f020 0201 	bic.w	r2, r0, #1
    bcb4:	bfb8      	it	lt
    bcb6:	2302      	movlt	r3, #2
    bcb8:	4293      	cmp	r3, r2
    bcba:	4618      	mov	r0, r3
    bcbc:	bfb8      	it	lt
    bcbe:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    bcc0:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bcc2:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    bcc4:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bcc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bcc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bcca:	4293      	cmp	r3, r2
    bccc:	bfb8      	it	lt
    bcce:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    bcd0:	2100      	movs	r1, #0
    m_velocityMove = true;
    bcd2:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bcd4:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    bcd6:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    bcd8:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    bcdc:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    bcde:	b662      	cpsie	i
    bce0:	bd10      	pop	{r4, pc}
    bce2:	bf00      	nop
    bce4:	f3af 8000 	nop.w
    bce8:	017d7840 	.word	0x017d7840
    bcec:	00000000 	.word	0x00000000

0000bcf0 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    bcf0:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    bcf2:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    bcf4:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bcf6:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    bcf8:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bcfa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    bcfc:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    bcfe:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    bd00:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    bd02:	2700      	movs	r7, #0
    bd04:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bd08:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    bd0a:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bd0c:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    bd0e:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    bd10:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    bd12:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    bd14:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    bd18:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    bd1a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    bd1c:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    bd1e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bd22:	03ca      	lsls	r2, r1, #15
    bd24:	0c4b      	lsrs	r3, r1, #17
    bd26:	4294      	cmp	r4, r2
    bd28:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    bd2c:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    bd2e:	eb75 0103 	sbcs.w	r1, r5, r3
    bd32:	bfbc      	itt	lt
    bd34:	4622      	movlt	r2, r4
    bd36:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    bd38:	2a01      	cmp	r2, #1
    bd3a:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    bd3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    bd40:	bfbc      	itt	lt
    bd42:	2201      	movlt	r2, #1
    bd44:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    bd46:	17e5      	asrs	r5, r4, #31
    bd48:	4294      	cmp	r4, r2
    bd4a:	eb75 0103 	sbcs.w	r1, r5, r3
    bd4e:	bfb8      	it	lt
    bd50:	4622      	movlt	r2, r4
    bd52:	6602      	str	r2, [r0, #96]	; 0x60
}
    bd54:	bcf0      	pop	{r4, r5, r6, r7}
    bd56:	4770      	bx	lr

0000bd58 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    bd58:	6843      	ldr	r3, [r0, #4]
    bd5a:	b363      	cbz	r3, bdb6 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    bd5c:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    bd5e:	f013 0218 	ands.w	r2, r3, #24
    bd62:	d12a      	bne.n	bdba <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    bd64:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    bd66:	7c02      	ldrb	r2, [r0, #16]
    bd68:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    bd6c:	b2d2      	uxtb	r2, r2
    bd6e:	4613      	mov	r3, r2
    bd70:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bd74:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    bd78:	b2db      	uxtb	r3, r3
    bd7a:	461a      	mov	r2, r3
    bd7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    bd80:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    bd84:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    bd86:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    bd88:	075a      	lsls	r2, r3, #29
    bd8a:	d514      	bpl.n	bdb6 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    bd8c:	7b42      	ldrb	r2, [r0, #13]
    bd8e:	b9e2      	cbnz	r2, bdca <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    bd90:	0719      	lsls	r1, r3, #28
    bd92:	d510      	bpl.n	bdb6 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    bd94:	f043 0301 	orr.w	r3, r3, #1
    bd98:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    bd9a:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bd9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    bd9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    bda0:	4293      	cmp	r3, r2
    bda2:	bfb8      	it	lt
    bda4:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    bda6:	2100      	movs	r1, #0
    m_velocityMove = true;
    bda8:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bdaa:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    bdac:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    bdae:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    bdb2:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    bdb4:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    bdb6:	2000      	movs	r0, #0
    bdb8:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    bdba:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    bdbe:	f3c3 1341 	ubfx	r3, r3, #5, #2
    bdc2:	1ad3      	subs	r3, r2, r3
    bdc4:	bf18      	it	ne
    bdc6:	2301      	movne	r3, #1
    bdc8:	e7cd      	b.n	bd66 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    bdca:	06da      	lsls	r2, r3, #27
    bdcc:	d5f3      	bpl.n	bdb6 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    bdce:	f043 0302 	orr.w	r3, r3, #2
    bdd2:	7403      	strb	r3, [r0, #16]
    bdd4:	e7e1      	b.n	bd9a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    bdd6:	bf00      	nop

0000bdd8 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    bdd8:	4ba1      	ldr	r3, [pc, #644]	; (c060 <SystemInit+0x288>)
    bdda:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    bdde:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    bde0:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    bde2:	691a      	ldr	r2, [r3, #16]
    bde4:	0792      	lsls	r2, r2, #30
    bde6:	d5fc      	bpl.n	bde2 <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bde8:	4a9e      	ldr	r2, [pc, #632]	; (c064 <SystemInit+0x28c>)
    bdea:	4b9f      	ldr	r3, [pc, #636]	; (c068 <SystemInit+0x290>)
    bdec:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    bdee:	6853      	ldr	r3, [r2, #4]
    bdf0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    bdf4:	d1fb      	bne.n	bdee <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    bdf6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    bdfa:	499a      	ldr	r1, [pc, #616]	; (c064 <SystemInit+0x28c>)
    bdfc:	f363 1086 	bfi	r0, r3, #6, #1
    be00:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    be04:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    be08:	065b      	lsls	r3, r3, #25
    be0a:	d4fb      	bmi.n	be04 <SystemInit+0x2c>
    be0c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    be10:	4a94      	ldr	r2, [pc, #592]	; (c064 <SystemInit+0x28c>)
    be12:	2005      	movs	r0, #5
    be14:	f360 0303 	bfi	r3, r0, #0, #4
    be18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    be1c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    be20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    be28:	6853      	ldr	r3, [r2, #4]
    be2a:	f013 0f14 	tst.w	r3, #20
    be2e:	d1fb      	bne.n	be28 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    be30:	4b8b      	ldr	r3, [pc, #556]	; (c060 <SystemInit+0x288>)
    be32:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    be34:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    be36:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    be38:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    be3a:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    be3c:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    be3e:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    be42:	6913      	ldr	r3, [r2, #16]
    be44:	01df      	lsls	r7, r3, #7
    be46:	d4fc      	bmi.n	be42 <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    be48:	4a86      	ldr	r2, [pc, #536]	; (c064 <SystemInit+0x28c>)
    be4a:	f44f 7384 	mov.w	r3, #264	; 0x108
    be4e:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    be50:	6853      	ldr	r3, [r2, #4]
    be52:	f013 0304 	ands.w	r3, r3, #4
    be56:	d1fb      	bne.n	be50 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    be58:	4884      	ldr	r0, [pc, #528]	; (c06c <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    be5a:	4982      	ldr	r1, [pc, #520]	; (c064 <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    be5c:	2401      	movs	r4, #1
    be5e:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    be60:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    be64:	f363 1086 	bfi	r0, r3, #6, #1
    be68:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    be6c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    be70:	065e      	lsls	r6, r3, #25
    be72:	d4fb      	bmi.n	be6c <SystemInit+0x94>
    be74:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    be78:	4a7a      	ldr	r2, [pc, #488]	; (c064 <SystemInit+0x28c>)
    be7a:	2005      	movs	r0, #5
    be7c:	f360 0303 	bfi	r3, r0, #0, #4
    be80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    be84:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    be88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    be90:	6853      	ldr	r3, [r2, #4]
    be92:	f013 0314 	ands.w	r3, r3, #20
    be96:	d1fb      	bne.n	be90 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    be98:	4871      	ldr	r0, [pc, #452]	; (c060 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    be9a:	4972      	ldr	r1, [pc, #456]	; (c064 <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    be9c:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    be9e:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bea0:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bea2:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    bea4:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bea6:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    beaa:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    beae:	f363 1086 	bfi	r0, r3, #6, #1
    beb2:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    beb6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    beba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bebe:	2b00      	cmp	r3, #0
    bec0:	d1f9      	bne.n	beb6 <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    bec2:	4c67      	ldr	r4, [pc, #412]	; (c060 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    bec4:	486a      	ldr	r0, [pc, #424]	; (c070 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    bec6:	4a67      	ldr	r2, [pc, #412]	; (c064 <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    bec8:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    beca:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    becc:	6853      	ldr	r3, [r2, #4]
    bece:	065d      	lsls	r5, r3, #25
    bed0:	d4fc      	bmi.n	becc <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bed2:	4b66      	ldr	r3, [pc, #408]	; (c06c <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bed4:	4967      	ldr	r1, [pc, #412]	; (c074 <SystemInit+0x29c>)
    bed6:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bed8:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    beda:	4e67      	ldr	r6, [pc, #412]	; (c078 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    bedc:	4d67      	ldr	r5, [pc, #412]	; (c07c <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bede:	4c68      	ldr	r4, [pc, #416]	; (c080 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bee0:	4960      	ldr	r1, [pc, #384]	; (c064 <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bee2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    bee6:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    bee8:	6998      	ldr	r0, [r3, #24]
    beea:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    beee:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    bef0:	6958      	ldr	r0, [r3, #20]
    bef2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bef6:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    bef8:	6998      	ldr	r0, [r3, #24]
    befa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    befe:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    bf00:	6998      	ldr	r0, [r3, #24]
    bf02:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    bf06:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    bf08:	69d8      	ldr	r0, [r3, #28]
    bf0a:	f040 0020 	orr.w	r0, r0, #32
    bf0e:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    bf10:	6918      	ldr	r0, [r3, #16]
    bf12:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bf16:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    bf18:	69d8      	ldr	r0, [r3, #28]
    bf1a:	f040 0004 	orr.w	r0, r0, #4
    bf1e:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    bf20:	6a18      	ldr	r0, [r3, #32]
    bf22:	f040 0001 	orr.w	r0, r0, #1
    bf26:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    bf28:	6a18      	ldr	r0, [r3, #32]
    bf2a:	f040 0008 	orr.w	r0, r0, #8
    bf2e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    bf30:	6a18      	ldr	r0, [r3, #32]
    bf32:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bf36:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    bf38:	69d8      	ldr	r0, [r3, #28]
    bf3a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bf3e:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    bf40:	6958      	ldr	r0, [r3, #20]
    bf42:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bf46:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    bf48:	6a18      	ldr	r0, [r3, #32]
    bf4a:	f040 0020 	orr.w	r0, r0, #32
    bf4e:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bf50:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    bf52:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bf56:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    bf58:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bf5c:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bf5e:	684b      	ldr	r3, [r1, #4]
    bf60:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    bf64:	d1fb      	bne.n	bf5e <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    bf66:	4a47      	ldr	r2, [pc, #284]	; (c084 <SystemInit+0x2ac>)
    bf68:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    bf6a:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    bf6e:	4a3d      	ldr	r2, [pc, #244]	; (c064 <SystemInit+0x28c>)
    bf70:	f363 1086 	bfi	r0, r3, #6, #1
    bf74:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    bf78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bf7c:	065c      	lsls	r4, r3, #25
    bf7e:	d4fb      	bmi.n	bf78 <SystemInit+0x1a0>
    bf80:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bf84:	4937      	ldr	r1, [pc, #220]	; (c064 <SystemInit+0x28c>)
    bf86:	2006      	movs	r0, #6
    bf88:	f360 0303 	bfi	r3, r0, #0, #4
    bf8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bf90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bf94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bf9c:	684b      	ldr	r3, [r1, #4]
    bf9e:	f013 0318 	ands.w	r3, r3, #24
    bfa2:	d1fb      	bne.n	bf9c <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    bfa4:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    bfa8:	4a2e      	ldr	r2, [pc, #184]	; (c064 <SystemInit+0x28c>)
    bfaa:	f363 1086 	bfi	r0, r3, #6, #1
    bfae:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    bfb2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bfb6:	0658      	lsls	r0, r3, #25
    bfb8:	d4fb      	bmi.n	bfb2 <SystemInit+0x1da>
    bfba:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bfbe:	4929      	ldr	r1, [pc, #164]	; (c064 <SystemInit+0x28c>)
    bfc0:	2006      	movs	r0, #6
    bfc2:	f360 0303 	bfi	r3, r0, #0, #4
    bfc6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bfca:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bfce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bfd2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bfd6:	684b      	ldr	r3, [r1, #4]
    bfd8:	f013 0318 	ands.w	r3, r3, #24
    bfdc:	d1fb      	bne.n	bfd6 <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    bfde:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    bfe2:	4a20      	ldr	r2, [pc, #128]	; (c064 <SystemInit+0x28c>)
    bfe4:	f363 1086 	bfi	r0, r3, #6, #1
    bfe8:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    bfec:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bff0:	0659      	lsls	r1, r3, #25
    bff2:	d4fb      	bmi.n	bfec <SystemInit+0x214>
    bff4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bff8:	491a      	ldr	r1, [pc, #104]	; (c064 <SystemInit+0x28c>)
    bffa:	2006      	movs	r0, #6
    bffc:	f360 0303 	bfi	r3, r0, #0, #4
    c000:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    c004:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    c008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c00c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    c010:	684b      	ldr	r3, [r1, #4]
    c012:	f013 0318 	ands.w	r3, r3, #24
    c016:	d1fb      	bne.n	c010 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    c018:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    c01c:	4a11      	ldr	r2, [pc, #68]	; (c064 <SystemInit+0x28c>)
    c01e:	f363 1086 	bfi	r0, r3, #6, #1
    c022:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    c026:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    c02a:	065b      	lsls	r3, r3, #25
    c02c:	d4fb      	bmi.n	c026 <SystemInit+0x24e>
    c02e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    c032:	490c      	ldr	r1, [pc, #48]	; (c064 <SystemInit+0x28c>)
    c034:	2006      	movs	r0, #6
    c036:	f360 0303 	bfi	r3, r0, #0, #4
    c03a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    c03e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    c042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c046:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    c04a:	684b      	ldr	r3, [r1, #4]
    c04c:	f013 0f18 	tst.w	r3, #24
    c050:	d1fb      	bne.n	c04a <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    c052:	4a04      	ldr	r2, [pc, #16]	; (c064 <SystemInit+0x28c>)
    c054:	6853      	ldr	r3, [r2, #4]
    c056:	2b00      	cmp	r3, #0
    c058:	d1fc      	bne.n	c054 <SystemInit+0x27c>
        continue;
    }
    return;
}
    c05a:	bcf0      	pop	{r4, r5, r6, r7}
    c05c:	4770      	bx	lr
    c05e:	bf00      	nop
    c060:	40001000 	.word	0x40001000
    c064:	40001c00 	.word	0x40001c00
    c068:	00190301 	.word	0x00190301
    c06c:	40000800 	.word	0x40000800
    c070:	00020107 	.word	0x00020107
    c074:	00320b01 	.word	0x00320b01
    c078:	41006000 	.word	0x41006000
    c07c:	e000ed00 	.word	0xe000ed00
    c080:	003a0108 	.word	0x003a0108
    c084:	000c0108 	.word	0x000c0108

0000c088 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    c088:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    c08a:	4a0e      	ldr	r2, [pc, #56]	; (c0c4 <GClkFreqUpdate+0x3c>)
    c08c:	f100 0408 	add.w	r4, r0, #8
    c090:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    c094:	f003 030f 	and.w	r3, r3, #15
    c098:	2b01      	cmp	r3, #1
    c09a:	d001      	beq.n	c0a0 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    c09c:	bc70      	pop	{r4, r5, r6}
    c09e:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    c0a0:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    c0a4:	4d08      	ldr	r5, [pc, #32]	; (c0c8 <GClkFreqUpdate+0x40>)
    c0a6:	fbb5 f1f1 	udiv	r1, r5, r1
    c0aa:	b289      	uxth	r1, r1
    c0ac:	f361 461f 	bfi	r6, r1, #16, #16
    c0b0:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    c0b4:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    c0b6:	6851      	ldr	r1, [r2, #4]
    c0b8:	f3c1 018b 	ubfx	r1, r1, #2, #12
    c0bc:	4219      	tst	r1, r3
    c0be:	d1fa      	bne.n	c0b6 <GClkFreqUpdate+0x2e>
}
    c0c0:	bc70      	pop	{r4, r5, r6}
    c0c2:	4770      	bx	lr
    c0c4:	40001c00 	.word	0x40001c00
    c0c8:	017d7840 	.word	0x017d7840

0000c0cc <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    c0cc:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    c0ce:	4911      	ldr	r1, [pc, #68]	; (c114 <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    c0d0:	4b11      	ldr	r3, [pc, #68]	; (c118 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    c0d2:	4a12      	ldr	r2, [pc, #72]	; (c11c <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    c0d4:	6001      	str	r1, [r0, #0]
    c0d6:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    c0d8:	4604      	mov	r4, r0
      m_stepsLast(0) {
    c0da:	6042      	str	r2, [r0, #4]
    c0dc:	6083      	str	r3, [r0, #8]
    c0de:	60c5      	str	r5, [r0, #12]
    c0e0:	6105      	str	r5, [r0, #16]
    c0e2:	6145      	str	r5, [r0, #20]
    c0e4:	8305      	strh	r5, [r0, #24]
    c0e6:	4629      	mov	r1, r5
    c0e8:	22c8      	movs	r2, #200	; 0xc8
    c0ea:	301c      	adds	r0, #28
    c0ec:	f012 fa3e 	bl	1e56c <memset>
    c0f0:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    c0f4:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    c0f8:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    c0fc:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    c100:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    c104:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    c108:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    c10c:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    c110:	4620      	mov	r0, r4
    c112:	bd38      	pop	{r3, r4, r5, pc}
    c114:	000232ec 	.word	0x000232ec
    c118:	0002330c 	.word	0x0002330c
    c11c:	000232fc 	.word	0x000232fc

0000c120 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    c120:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    c122:	4a12      	ldr	r2, [pc, #72]	; (c16c <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    c124:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    c128:	f36f 1386 	bfc	r3, #6, #1
    c12c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    c130:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    c134:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c138:	2b00      	cmp	r3, #0
    c13a:	d1f9      	bne.n	c130 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    c13c:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    c140:	490b      	ldr	r1, [pc, #44]	; (c170 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    c142:	4c0c      	ldr	r4, [pc, #48]	; (c174 <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    c144:	4d0c      	ldr	r5, [pc, #48]	; (c178 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    c146:	f363 0003 	bfi	r0, r3, #0, #4
    c14a:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    c14e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    c152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c156:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    c15a:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    c15c:	69cb      	ldr	r3, [r1, #28]
    c15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c162:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    c164:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    c166:	bc30      	pop	{r4, r5}
    c168:	4770      	bx	lr
    c16a:	bf00      	nop
    c16c:	40001c00 	.word	0x40001c00
    c170:	40000800 	.word	0x40000800
    c174:	42001c00 	.word	0x42001c00
    c178:	07030000 	.word	0x07030000

0000c17c <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    c17e:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    c182:	2b00      	cmp	r3, #0
    c184:	d038      	beq.n	c1f8 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    c186:	4a29      	ldr	r2, [pc, #164]	; (c22c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    c188:	2360      	movs	r3, #96	; 0x60
    c18a:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    c18c:	6913      	ldr	r3, [r2, #16]
    c18e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    c192:	d1fb      	bne.n	c18c <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    c194:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    c196:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    c198:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    c19c:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    c1a0:	1aaa      	subs	r2, r5, r2
    c1a2:	b212      	sxth	r2, r2
    c1a4:	4604      	mov	r4, r0
    c1a6:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    c1aa:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    c1ac:	bb29      	cbnz	r1, c1fa <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    c1ae:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c1b0:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    c1b4:	f3bf 8f5b 	dmb	ish
    c1b8:	e853 6f00 	ldrex	r6, [r3]
    c1bc:	4416      	add	r6, r2
    c1be:	e843 6100 	strex	r1, r6, [r3]
    c1c2:	2900      	cmp	r1, #0
    c1c4:	d1f8      	bne.n	c1b8 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    c1c6:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c1ca:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c1ce:	4d18      	ldr	r5, [pc, #96]	; (c230 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    c1d0:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    c1d4:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c1d6:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c1d8:	fb85 2503 	smull	r2, r5, r5, r3
    c1dc:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c1de:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c1e0:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c1e4:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c1e6:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c1e8:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c1ec:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c1f0:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    c1f2:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c1f4:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    c1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c1fa:	68c6      	ldr	r6, [r0, #12]
    c1fc:	f3bf 8f5b 	dmb	ish
    c200:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    c204:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c208:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    c20a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c20e:	4432      	add	r2, r6
    c210:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c212:	4808      	ldr	r0, [pc, #32]	; (c234 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c214:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c218:	f991 1003 	ldrsb.w	r1, [r1, #3]
    c21c:	6800      	ldr	r0, [r0, #0]
    c21e:	2201      	movs	r2, #1
    c220:	f7f8 fd9e 	bl	4d60 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    c224:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    c228:	e7c1      	b.n	c1ae <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    c22a:	bf00      	nop
    c22c:	42001c00 	.word	0x42001c00
    c230:	51eb851f 	.word	0x51eb851f
    c234:	20000ad0 	.word	0x20000ad0

0000c238 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c238:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c23a:	780d      	ldrb	r5, [r1, #0]
    c23c:	f3c5 1441 	ubfx	r4, r5, #5, #2
    c240:	2c01      	cmp	r4, #1
{
    c242:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c244:	d152      	bne.n	c2ec <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c246:	4e30      	ldr	r6, [pc, #192]	; (c308 <cdcdf_acm_req+0xd0>)
    c248:	888c      	ldrh	r4, [r1, #4]
    c24a:	7833      	ldrb	r3, [r6, #0]
    c24c:	42a3      	cmp	r3, r4
    c24e:	d002      	beq.n	c256 <cdcdf_acm_req+0x1e>
    c250:	7873      	ldrb	r3, [r6, #1]
    c252:	42a3      	cmp	r3, r4
    c254:	d14a      	bne.n	c2ec <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c256:	062b      	lsls	r3, r5, #24
    c258:	4617      	mov	r7, r2
    c25a:	4606      	mov	r6, r0
    c25c:	460c      	mov	r4, r1
    c25e:	d438      	bmi.n	c2d2 <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    c260:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c262:	f000 fc7f 	bl	cb64 <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    c266:	7863      	ldrb	r3, [r4, #1]
    c268:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c26a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    c26c:	d00f      	beq.n	c28e <cdcdf_acm_req+0x56>
    c26e:	2b22      	cmp	r3, #34	; 0x22
    c270:	d128      	bne.n	c2c4 <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    c272:	2300      	movs	r3, #0
    c274:	461a      	mov	r2, r3
    c276:	4619      	mov	r1, r3
    c278:	4618      	mov	r0, r3
    c27a:	f000 fc07 	bl	ca8c <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    c27e:	4b23      	ldr	r3, [pc, #140]	; (c30c <cdcdf_acm_req+0xd4>)
    c280:	681b      	ldr	r3, [r3, #0]
    c282:	b31b      	cbz	r3, c2cc <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    c284:	8860      	ldrh	r0, [r4, #2]
    c286:	4798      	blx	r3
		return ERR_NONE;
    c288:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    c28a:	b003      	add	sp, #12
    c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c28e:	2d07      	cmp	r5, #7
    c290:	d136      	bne.n	c300 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    c292:	b37f      	cbz	r7, c2f4 <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c294:	4b1e      	ldr	r3, [pc, #120]	; (c310 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c296:	6800      	ldr	r0, [r0, #0]
    c298:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c29a:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c29c:	888a      	ldrh	r2, [r1, #4]
    c29e:	7989      	ldrb	r1, [r1, #6]
    c2a0:	f88d 1006 	strb.w	r1, [sp, #6]
    c2a4:	466c      	mov	r4, sp
    c2a6:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c2aa:	b113      	cbz	r3, c2b2 <cdcdf_acm_req+0x7a>
    c2ac:	4668      	mov	r0, sp
    c2ae:	4798      	blx	r3
    c2b0:	b160      	cbz	r0, c2cc <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c2b2:	e894 0003 	ldmia.w	r4, {r0, r1}
    c2b6:	4b17      	ldr	r3, [pc, #92]	; (c314 <cdcdf_acm_req+0xdc>)
    c2b8:	0c0a      	lsrs	r2, r1, #16
    c2ba:	6018      	str	r0, [r3, #0]
    c2bc:	8099      	strh	r1, [r3, #4]
    c2be:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    c2c0:	2000      	movs	r0, #0
    c2c2:	e001      	b.n	c2c8 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    c2c4:	f06f 000c 	mvn.w	r0, #12
}
    c2c8:	b003      	add	sp, #12
    c2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    c2cc:	2000      	movs	r0, #0
}
    c2ce:	b003      	add	sp, #12
    c2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    c2d2:	2a01      	cmp	r2, #1
    c2d4:	d0fa      	beq.n	c2cc <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    c2d6:	784b      	ldrb	r3, [r1, #1]
    c2d8:	2b21      	cmp	r3, #33	; 0x21
    c2da:	d1f3      	bne.n	c2c4 <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c2dc:	88ca      	ldrh	r2, [r1, #6]
    c2de:	2a07      	cmp	r2, #7
    c2e0:	d10e      	bne.n	c300 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c2e2:	2300      	movs	r3, #0
    c2e4:	490b      	ldr	r1, [pc, #44]	; (c314 <cdcdf_acm_req+0xdc>)
    c2e6:	f000 fbd1 	bl	ca8c <usbdc_xfer>
    c2ea:	e7ed      	b.n	c2c8 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    c2ec:	f06f 0009 	mvn.w	r0, #9
}
    c2f0:	b003      	add	sp, #12
    c2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c2f4:	463b      	mov	r3, r7
    c2f6:	462a      	mov	r2, r5
    c2f8:	4630      	mov	r0, r6
    c2fa:	f000 fbc7 	bl	ca8c <usbdc_xfer>
    c2fe:	e7e3      	b.n	c2c8 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    c300:	f04f 30ff 	mov.w	r0, #4294967295
    c304:	e7e0      	b.n	c2c8 <cdcdf_acm_req+0x90>
    c306:	bf00      	nop
    c308:	20001c18 	.word	0x20001c18
    c30c:	20001c20 	.word	0x20001c20
    c310:	20001c24 	.word	0x20001c24
    c314:	20001c28 	.word	0x20001c28

0000c318 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    c318:	2901      	cmp	r1, #1
{
    c31a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c31e:	4616      	mov	r6, r2
	switch (ctrl) {
    c320:	d008      	beq.n	c334 <cdcdf_acm_ctrl+0x1c>
    c322:	d314      	bcc.n	c34e <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    c324:	2902      	cmp	r1, #2
    c326:	bf0c      	ite	eq
    c328:	f06f 001a 	mvneq.w	r0, #26
    c32c:	f06f 000c 	mvnne.w	r0, #12
    c330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c334:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    c336:	2a00      	cmp	r2, #0
    c338:	d047      	beq.n	c3ca <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c33a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c33c:	795b      	ldrb	r3, [r3, #5]
    c33e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    c342:	2b02      	cmp	r3, #2
    c344:	d041      	beq.n	c3ca <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    c346:	f06f 0009 	mvn.w	r0, #9
    c34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    c34e:	6813      	ldr	r3, [r2, #0]
    c350:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    c352:	2b00      	cmp	r3, #0
    c354:	d0f7      	beq.n	c346 <cdcdf_acm_ctrl+0x2e>
    c356:	f107 38ff 	add.w	r8, r7, #4294967295
    c35a:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c35e:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    c360:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c362:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    c366:	2a02      	cmp	r2, #2
    c368:	d1ed      	bne.n	c346 <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c36a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    c36e:	4291      	cmp	r1, r2
    c370:	d061      	beq.n	c436 <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c372:	2aff      	cmp	r2, #255	; 0xff
    c374:	d15b      	bne.n	c42e <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c376:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c37a:	4618      	mov	r0, r3
    c37c:	6871      	ldr	r1, [r6, #4]
    c37e:	2205      	movs	r2, #5
    c380:	f000 fc00 	bl	cb84 <usb_find_desc>
		while (NULL != ep) {
    c384:	4604      	mov	r4, r0
    c386:	b980      	cbnz	r0, c3aa <cdcdf_acm_ctrl+0x92>
    c388:	e041      	b.n	c40e <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c38a:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c38c:	bf4c      	ite	mi
    c38e:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c392:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c394:	4628      	mov	r0, r5
    c396:	f000 feaf 	bl	d0f8 <usb_d_ep_enable>
			desc->sod = ep;
    c39a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    c39c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c39e:	6871      	ldr	r1, [r6, #4]
    c3a0:	4420      	add	r0, r4
    c3a2:	f000 fc09 	bl	cbb8 <usb_find_ep_desc>
		while (NULL != ep) {
    c3a6:	4604      	mov	r4, r0
    c3a8:	b388      	cbz	r0, c40e <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    c3aa:	7963      	ldrb	r3, [r4, #5]
    c3ac:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    c3ae:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c3b0:	78e1      	ldrb	r1, [r4, #3]
    c3b2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    c3b6:	b292      	uxth	r2, r2
    c3b8:	4628      	mov	r0, r5
    c3ba:	f000 fe4b 	bl	d054 <usb_d_ep_init>
    c3be:	2800      	cmp	r0, #0
    c3c0:	d0e3      	beq.n	c38a <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    c3c2:	f06f 0013 	mvn.w	r0, #19
}
    c3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    c3ca:	7823      	ldrb	r3, [r4, #0]
    c3cc:	2bff      	cmp	r3, #255	; 0xff
    c3ce:	d007      	beq.n	c3e0 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    c3d0:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    c3d2:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c3d4:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c3d6:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    c3d8:	d002      	beq.n	c3e0 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c3da:	f000 fe71 	bl	d0c0 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c3de:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    c3e0:	7863      	ldrb	r3, [r4, #1]
    c3e2:	2bff      	cmp	r3, #255	; 0xff
    c3e4:	d007      	beq.n	c3f6 <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    c3e6:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    c3e8:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c3ea:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c3ec:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    c3ee:	d002      	beq.n	c3f6 <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c3f0:	f000 fe66 	bl	d0c0 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c3f4:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    c3f6:	7920      	ldrb	r0, [r4, #4]
    c3f8:	28ff      	cmp	r0, #255	; 0xff
    c3fa:	d003      	beq.n	c404 <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    c3fc:	f000 fe60 	bl	d0c0 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    c400:	23ff      	movs	r3, #255	; 0xff
    c402:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    c404:	4b0f      	ldr	r3, [pc, #60]	; (c444 <cdcdf_acm_ctrl+0x12c>)
    c406:	2000      	movs	r0, #0
    c408:	7158      	strb	r0, [r3, #5]
    c40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c40e:	6833      	ldr	r3, [r6, #0]
    c410:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    c412:	7818      	ldrb	r0, [r3, #0]
    c414:	2204      	movs	r2, #4
    c416:	4418      	add	r0, r3
    c418:	f000 fbb4 	bl	cb84 <usb_find_desc>
	for (i = 0; i < 2; i++) {
    c41c:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c41e:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    c420:	d10d      	bne.n	c43e <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    c422:	4b08      	ldr	r3, [pc, #32]	; (c444 <cdcdf_acm_ctrl+0x12c>)
    c424:	2201      	movs	r2, #1
    c426:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c428:	2000      	movs	r0, #0
    c42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    c42e:	f06f 001b 	mvn.w	r0, #27
    c432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    c436:	f06f 0011 	mvn.w	r0, #17
    c43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    c43e:	2b00      	cmp	r3, #0
    c440:	d18d      	bne.n	c35e <cdcdf_acm_ctrl+0x46>
    c442:	e780      	b.n	c346 <cdcdf_acm_ctrl+0x2e>
    c444:	20001c18 	.word	0x20001c18

0000c448 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c448:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    c44a:	f000 fb91 	bl	cb70 <usbdc_get_state>
    c44e:	2801      	cmp	r0, #1
    c450:	d80d      	bhi.n	c46e <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c452:	4b08      	ldr	r3, [pc, #32]	; (c474 <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c454:	4a08      	ldr	r2, [pc, #32]	; (c478 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c456:	4909      	ldr	r1, [pc, #36]	; (c47c <cdcdf_acm_init+0x34>)
    c458:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    c45a:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c45c:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    c45e:	f000 fb61 	bl	cb24 <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c462:	4907      	ldr	r1, [pc, #28]	; (c480 <cdcdf_acm_init+0x38>)
    c464:	2001      	movs	r0, #1
    c466:	f000 fb1f 	bl	caa8 <usbdc_register_handler>
	return ERR_NONE;
    c46a:	2000      	movs	r0, #0
    c46c:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    c46e:	f06f 0010 	mvn.w	r0, #16
}
    c472:	bd08      	pop	{r3, pc}
    c474:	20001c0c 	.word	0x20001c0c
    c478:	20001c18 	.word	0x20001c18
    c47c:	0000c319 	.word	0x0000c319
    c480:	200000e4 	.word	0x200000e4

0000c484 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    c484:	4b08      	ldr	r3, [pc, #32]	; (c4a8 <cdcdf_acm_read+0x24>)
{
    c486:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c488:	795c      	ldrb	r4, [r3, #5]
    c48a:	b13c      	cbz	r4, c49c <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c48c:	460a      	mov	r2, r1
}
    c48e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c492:	4601      	mov	r1, r0
    c494:	7918      	ldrb	r0, [r3, #4]
    c496:	2300      	movs	r3, #0
    c498:	f000 baf8 	b.w	ca8c <usbdc_xfer>
}
    c49c:	f06f 0010 	mvn.w	r0, #16
    c4a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    c4a4:	4770      	bx	lr
    c4a6:	bf00      	nop
    c4a8:	20001c18 	.word	0x20001c18

0000c4ac <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    c4ac:	4b08      	ldr	r3, [pc, #32]	; (c4d0 <cdcdf_acm_write+0x24>)
{
    c4ae:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c4b0:	795c      	ldrb	r4, [r3, #5]
    c4b2:	b13c      	cbz	r4, c4c4 <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c4b4:	460a      	mov	r2, r1
}
    c4b6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c4ba:	4601      	mov	r1, r0
    c4bc:	78d8      	ldrb	r0, [r3, #3]
    c4be:	2301      	movs	r3, #1
    c4c0:	f000 bae4 	b.w	ca8c <usbdc_xfer>
}
    c4c4:	f06f 0010 	mvn.w	r0, #16
    c4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    c4cc:	4770      	bx	lr
    c4ce:	bf00      	nop
    c4d0:	20001c18 	.word	0x20001c18

0000c4d4 <cdcdf_acm_stop_xfer>:
{
    c4d4:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c4d6:	4c04      	ldr	r4, [pc, #16]	; (c4e8 <cdcdf_acm_stop_xfer+0x14>)
    c4d8:	78e0      	ldrb	r0, [r4, #3]
    c4da:	f000 fecb 	bl	d274 <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c4de:	7920      	ldrb	r0, [r4, #4]
}
    c4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c4e4:	f000 bec6 	b.w	d274 <usb_d_ep_abort>
    c4e8:	20001c18 	.word	0x20001c18

0000c4ec <cdcdf_acm_register_callback>:
{
    c4ec:	b508      	push	{r3, lr}
	switch (cb_type) {
    c4ee:	2803      	cmp	r0, #3
    c4f0:	d81b      	bhi.n	c52a <cdcdf_acm_register_callback+0x3e>
    c4f2:	e8df f000 	tbb	[pc, r0]
    c4f6:	0a12      	.short	0x0a12
    c4f8:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c4fa:	4b0d      	ldr	r3, [pc, #52]	; (c530 <cdcdf_acm_register_callback+0x44>)
    c4fc:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c4fe:	2000      	movs	r0, #0
		break;
    c500:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c502:	4b0c      	ldr	r3, [pc, #48]	; (c534 <cdcdf_acm_register_callback+0x48>)
    c504:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c506:	2000      	movs	r0, #0
		break;
    c508:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c50a:	4b0b      	ldr	r3, [pc, #44]	; (c538 <cdcdf_acm_register_callback+0x4c>)
    c50c:	460a      	mov	r2, r1
    c50e:	78d8      	ldrb	r0, [r3, #3]
    c510:	2102      	movs	r1, #2
    c512:	f000 ff05 	bl	d320 <usb_d_ep_register_callback>
	return ERR_NONE;
    c516:	2000      	movs	r0, #0
		break;
    c518:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c51a:	4b07      	ldr	r3, [pc, #28]	; (c538 <cdcdf_acm_register_callback+0x4c>)
    c51c:	460a      	mov	r2, r1
    c51e:	7918      	ldrb	r0, [r3, #4]
    c520:	2102      	movs	r1, #2
    c522:	f000 fefd 	bl	d320 <usb_d_ep_register_callback>
	return ERR_NONE;
    c526:	2000      	movs	r0, #0
		break;
    c528:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    c52a:	f06f 000c 	mvn.w	r0, #12
}
    c52e:	bd08      	pop	{r3, pc}
    c530:	20001c20 	.word	0x20001c20
    c534:	20001c24 	.word	0x20001c24
    c538:	20001c18 	.word	0x20001c18

0000c53c <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    c53c:	4b01      	ldr	r3, [pc, #4]	; (c544 <cdcdf_acm_is_enabled+0x8>)
}
    c53e:	7958      	ldrb	r0, [r3, #5]
    c540:	4770      	bx	lr
    c542:	bf00      	nop
    c544:	20001c18 	.word	0x20001c18

0000c548 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    c548:	4800      	ldr	r0, [pc, #0]	; (c54c <cdcdf_acm_get_line_coding+0x4>)
    c54a:	4770      	bx	lr
    c54c:	20001c28 	.word	0x20001c28

0000c550 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c550:	4b05      	ldr	r3, [pc, #20]	; (c568 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c552:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c554:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    c556:	b12c      	cbz	r4, c564 <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    c558:	6863      	ldr	r3, [r4, #4]
    c55a:	b103      	cbz	r3, c55e <usbd_sof_cb+0xe>
			sof->cb();
    c55c:	4798      	blx	r3
		sof = sof->next;
    c55e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    c560:	2c00      	cmp	r4, #0
    c562:	d1f9      	bne.n	c558 <usbd_sof_cb+0x8>
    c564:	bd10      	pop	{r4, pc}
    c566:	bf00      	nop
    c568:	20001c30 	.word	0x20001c30

0000c56c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c56c:	b538      	push	{r3, r4, r5, lr}
    c56e:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    c570:	b189      	cbz	r1, c596 <usbdc_cb_ctl_done+0x2a>
    c572:	2901      	cmp	r1, #1
    c574:	d10d      	bne.n	c592 <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c576:	4b23      	ldr	r3, [pc, #140]	; (c604 <usbdc_cb_ctl_done+0x98>)
    c578:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    c57a:	b154      	cbz	r4, c592 <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    c57c:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c57e:	2201      	movs	r2, #1
    c580:	4629      	mov	r1, r5
    c582:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    c584:	b113      	cbz	r3, c58c <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    c586:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    c588:	300a      	adds	r0, #10
    c58a:	d102      	bne.n	c592 <usbdc_cb_ctl_done+0x26>
		h = h->next;
    c58c:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c58e:	2c00      	cmp	r4, #0
    c590:	d1f4      	bne.n	c57c <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c592:	2000      	movs	r0, #0
    c594:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c596:	7813      	ldrb	r3, [r2, #0]
    c598:	2b00      	cmp	r3, #0
    c59a:	d1fa      	bne.n	c592 <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    c59c:	7853      	ldrb	r3, [r2, #1]
    c59e:	2b05      	cmp	r3, #5
    c5a0:	d014      	beq.n	c5cc <usbdc_cb_ctl_done+0x60>
    c5a2:	2b09      	cmp	r3, #9
    c5a4:	d1f5      	bne.n	c592 <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    c5a6:	8852      	ldrh	r2, [r2, #2]
    c5a8:	4b16      	ldr	r3, [pc, #88]	; (c604 <usbdc_cb_ctl_done+0x98>)
    c5aa:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c5ac:	bb3a      	cbnz	r2, c5fe <usbdc_cb_ctl_done+0x92>
    c5ae:	2503      	movs	r5, #3
    c5b0:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c5b2:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c5b4:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c5b6:	2c00      	cmp	r4, #0
    c5b8:	d0eb      	beq.n	c592 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c5ba:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c5bc:	4629      	mov	r1, r5
    c5be:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c5c0:	b103      	cbz	r3, c5c4 <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    c5c2:	4798      	blx	r3
		cg = cg->next;
    c5c4:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c5c6:	2c00      	cmp	r4, #0
    c5c8:	d1f7      	bne.n	c5ba <usbdc_cb_ctl_done+0x4e>
    c5ca:	e7e2      	b.n	c592 <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    c5cc:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c5ce:	b2c0      	uxtb	r0, r0
    c5d0:	f000 fcf0 	bl	cfb4 <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c5d4:	886b      	ldrh	r3, [r5, #2]
    c5d6:	b97b      	cbnz	r3, c5f8 <usbdc_cb_ctl_done+0x8c>
    c5d8:	2502      	movs	r5, #2
    c5da:	462a      	mov	r2, r5
    c5dc:	4b09      	ldr	r3, [pc, #36]	; (c604 <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c5de:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c5e0:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c5e2:	2c00      	cmp	r4, #0
    c5e4:	d0d5      	beq.n	c592 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c5e6:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c5e8:	4629      	mov	r1, r5
    c5ea:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c5ec:	b103      	cbz	r3, c5f0 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    c5ee:	4798      	blx	r3
		cg = cg->next;
    c5f0:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c5f2:	2c00      	cmp	r4, #0
    c5f4:	d1f7      	bne.n	c5e6 <usbdc_cb_ctl_done+0x7a>
    c5f6:	e7cc      	b.n	c592 <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c5f8:	2503      	movs	r5, #3
    c5fa:	462a      	mov	r2, r5
    c5fc:	e7ee      	b.n	c5dc <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c5fe:	2504      	movs	r5, #4
    c600:	462a      	mov	r2, r5
    c602:	e7d6      	b.n	c5b2 <usbdc_cb_ctl_done+0x46>
    c604:	20001c30 	.word	0x20001c30

0000c608 <usbdc_cb_ctl_req>:
{
    c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c60c:	4fb6      	ldr	r7, [pc, #728]	; (c8e8 <usbdc_cb_ctl_req+0x2e0>)
    c60e:	68bc      	ldr	r4, [r7, #8]
{
    c610:	b086      	sub	sp, #24
    c612:	4606      	mov	r6, r0
    c614:	460d      	mov	r5, r1
	while (h != NULL) {
    c616:	b15c      	cbz	r4, c630 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    c618:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c61a:	2200      	movs	r2, #0
    c61c:	4629      	mov	r1, r5
    c61e:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    c620:	b11b      	cbz	r3, c62a <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    c622:	4798      	blx	r3
			if (0 == rc) {
    c624:	b170      	cbz	r0, c644 <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    c626:	300a      	adds	r0, #10
    c628:	d108      	bne.n	c63c <usbdc_cb_ctl_req+0x34>
		h = h->next;
    c62a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c62c:	2c00      	cmp	r4, #0
    c62e:	d1f3      	bne.n	c618 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c630:	782b      	ldrb	r3, [r5, #0]
    c632:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c636:	d025      	beq.n	c684 <usbdc_cb_ctl_req+0x7c>
    c638:	2a80      	cmp	r2, #128	; 0x80
    c63a:	d007      	beq.n	c64c <usbdc_cb_ctl_req+0x44>
		return false;
    c63c:	2000      	movs	r0, #0
}
    c63e:	b006      	add	sp, #24
    c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    c644:	2001      	movs	r0, #1
}
    c646:	b006      	add	sp, #24
    c648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    c64c:	786a      	ldrb	r2, [r5, #1]
    c64e:	2a0a      	cmp	r2, #10
    c650:	d8f4      	bhi.n	c63c <usbdc_cb_ctl_req+0x34>
    c652:	a101      	add	r1, pc, #4	; (adr r1, c658 <usbdc_cb_ctl_req+0x50>)
    c654:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c658:	0000c777 	.word	0x0000c777
    c65c:	0000c63d 	.word	0x0000c63d
    c660:	0000c63d 	.word	0x0000c63d
    c664:	0000c63d 	.word	0x0000c63d
    c668:	0000c63d 	.word	0x0000c63d
    c66c:	0000c63d 	.word	0x0000c63d
    c670:	0000c72b 	.word	0x0000c72b
    c674:	0000c63d 	.word	0x0000c63d
    c678:	0000c709 	.word	0x0000c709
    c67c:	0000c63d 	.word	0x0000c63d
    c680:	0000c6c1 	.word	0x0000c6c1
	switch (req->bRequest) {
    c684:	786a      	ldrb	r2, [r5, #1]
    c686:	3a01      	subs	r2, #1
    c688:	2a0a      	cmp	r2, #10
    c68a:	d8d7      	bhi.n	c63c <usbdc_cb_ctl_req+0x34>
    c68c:	a101      	add	r1, pc, #4	; (adr r1, c694 <usbdc_cb_ctl_req+0x8c>)
    c68e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c692:	bf00      	nop
    c694:	0000c88f 	.word	0x0000c88f
    c698:	0000c63d 	.word	0x0000c63d
    c69c:	0000c85f 	.word	0x0000c85f
    c6a0:	0000c63d 	.word	0x0000c63d
    c6a4:	0000c841 	.word	0x0000c841
    c6a8:	0000c63d 	.word	0x0000c63d
    c6ac:	0000c63d 	.word	0x0000c63d
    c6b0:	0000c63d 	.word	0x0000c63d
    c6b4:	0000c81b 	.word	0x0000c81b
    c6b8:	0000c63d 	.word	0x0000c63d
    c6bc:	0000c7bf 	.word	0x0000c7bf
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c6c0:	7f7b      	ldrb	r3, [r7, #29]
    c6c2:	88aa      	ldrh	r2, [r5, #4]
    c6c4:	4113      	asrs	r3, r2
    c6c6:	f013 0301 	ands.w	r3, r3, #1
    c6ca:	f000 818e 	beq.w	c9ea <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c6ce:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c6d0:	b91c      	cbnz	r4, c6da <usbdc_cb_ctl_req+0xd2>
    c6d2:	e7b3      	b.n	c63c <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c6d4:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c6d6:	2c00      	cmp	r4, #0
    c6d8:	d0b0      	beq.n	c63c <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c6da:	6863      	ldr	r3, [r4, #4]
    c6dc:	462a      	mov	r2, r5
    c6de:	2102      	movs	r1, #2
    c6e0:	4620      	mov	r0, r4
    c6e2:	4798      	blx	r3
    c6e4:	2800      	cmp	r0, #0
    c6e6:	dbf5      	blt.n	c6d4 <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c6e8:	697b      	ldr	r3, [r7, #20]
    c6ea:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c6ec:	697b      	ldr	r3, [r7, #20]
    c6ee:	9303      	str	r3, [sp, #12]
    c6f0:	2401      	movs	r4, #1
    c6f2:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c6f4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c6f6:	9404      	str	r4, [sp, #16]
    c6f8:	f88d 3014 	strb.w	r3, [sp, #20]
    c6fc:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c700:	f000 fd24 	bl	d14c <usb_d_ep_transfer>
			return true;
    c704:	4620      	mov	r0, r4
    c706:	e79a      	b.n	c63e <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c708:	697b      	ldr	r3, [r7, #20]
    c70a:	7efa      	ldrb	r2, [r7, #27]
    c70c:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c70e:	697b      	ldr	r3, [r7, #20]
    c710:	9303      	str	r3, [sp, #12]
    c712:	2401      	movs	r4, #1
    c714:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c716:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c718:	f88d 6014 	strb.w	r6, [sp, #20]
    c71c:	9404      	str	r4, [sp, #16]
    c71e:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c722:	f000 fd13 	bl	d14c <usb_d_ep_transfer>
		return true;
    c726:	4620      	mov	r0, r4
    c728:	e789      	b.n	c63e <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c72a:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    c72c:	0a1a      	lsrs	r2, r3, #8
    c72e:	2a02      	cmp	r2, #2
    c730:	f000 810a 	beq.w	c948 <usbdc_cb_ctl_req+0x340>
    c734:	2a03      	cmp	r2, #3
    c736:	f000 80f0 	beq.w	c91a <usbdc_cb_ctl_req+0x312>
    c73a:	2a01      	cmp	r2, #1
    c73c:	f47f af7e 	bne.w	c63c <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c740:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    c742:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c744:	e893 0003 	ldmia.w	r3, {r0, r1}
    c748:	2c12      	cmp	r4, #18
    c74a:	bf28      	it	cs
    c74c:	2412      	movcs	r4, #18
    c74e:	f000 fa19 	bl	cb84 <usb_find_desc>
	if (!dev_desc) {
    c752:	4603      	mov	r3, r0
    c754:	2800      	cmp	r0, #0
    c756:	f43f af71 	beq.w	c63c <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c75a:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    c75c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c75e:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c760:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c762:	f88d 6014 	strb.w	r6, [sp, #20]
    c766:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c76a:	f000 fcef 	bl	d14c <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c76e:	fab0 f080 	clz	r0, r0
    c772:	0940      	lsrs	r0, r0, #5
    c774:	e763      	b.n	c63e <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c776:	f003 011f 	and.w	r1, r3, #31
    c77a:	2901      	cmp	r1, #1
    c77c:	f240 8091 	bls.w	c8a2 <usbdc_cb_ctl_req+0x29a>
    c780:	2902      	cmp	r1, #2
    c782:	f47f af5b 	bne.w	c63c <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c786:	88a8      	ldrh	r0, [r5, #4]
    c788:	b2c0      	uxtb	r0, r0
    c78a:	f000 fd91 	bl	d2b0 <usb_d_ep_halt>
		if (st < 0) {
    c78e:	1e03      	subs	r3, r0, #0
    c790:	f6ff af54 	blt.w	c63c <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    c794:	f003 0301 	and.w	r3, r3, #1
    c798:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c79a:	697b      	ldr	r3, [r7, #20]
    c79c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c7a0:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c7a2:	697b      	ldr	r3, [r7, #20]
    c7a4:	9303      	str	r3, [sp, #12]
    c7a6:	2202      	movs	r2, #2
    c7a8:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c7aa:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c7ac:	f88d 6014 	strb.w	r6, [sp, #20]
    c7b0:	9204      	str	r2, [sp, #16]
    c7b2:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c7b6:	f000 fcc9 	bl	d14c <usb_d_ep_transfer>
	return true;
    c7ba:	2001      	movs	r0, #1
    c7bc:	e73f      	b.n	c63e <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c7be:	683b      	ldr	r3, [r7, #0]
    c7c0:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    c7c2:	886c      	ldrh	r4, [r5, #2]
    c7c4:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c7c6:	e893 0003 	ldmia.w	r3, {r0, r1}
    c7ca:	f000 fa0f 	bl	cbec <usb_find_cfg_desc>
	if (NULL == ifc) {
    c7ce:	2800      	cmp	r0, #0
    c7d0:	f43f af34 	beq.w	c63c <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    c7d4:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    c7d6:	78c1      	ldrb	r1, [r0, #3]
    c7d8:	7883      	ldrb	r3, [r0, #2]
    c7da:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c7de:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c7e2:	4619      	mov	r1, r3
    c7e4:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c7e6:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c7e8:	f000 f9cc 	bl	cb84 <usb_find_desc>
    c7ec:	2800      	cmp	r0, #0
    c7ee:	f43f af25 	beq.w	c63c <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c7f2:	7883      	ldrb	r3, [r0, #2]
    c7f4:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c7f6:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c7fa:	d103      	bne.n	c804 <usbdc_cb_ctl_req+0x1fc>
    c7fc:	78c3      	ldrb	r3, [r0, #3]
    c7fe:	42a3      	cmp	r3, r4
    c800:	f000 80c9 	beq.w	c996 <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c804:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c806:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c808:	7818      	ldrb	r0, [r3, #0]
    c80a:	4403      	add	r3, r0
    c80c:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c80e:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c810:	f000 f9b8 	bl	cb84 <usb_find_desc>
		if (NULL == ifc) {
    c814:	2800      	cmp	r0, #0
    c816:	d1ec      	bne.n	c7f2 <usbdc_cb_ctl_req+0x1ea>
    c818:	e710      	b.n	c63c <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c81a:	886a      	ldrh	r2, [r5, #2]
    c81c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c81e:	2a00      	cmp	r2, #0
    c820:	d142      	bne.n	c8a8 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c822:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c824:	b13c      	cbz	r4, c836 <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c826:	6863      	ldr	r3, [r4, #4]
    c828:	4620      	mov	r0, r4
    c82a:	2200      	movs	r2, #0
    c82c:	2101      	movs	r1, #1
    c82e:	4798      	blx	r3
		func = func->next;
    c830:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c832:	2c00      	cmp	r4, #0
    c834:	d1f7      	bne.n	c826 <usbdc_cb_ctl_req+0x21e>
    c836:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c838:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c83a:	2300      	movs	r3, #0
    c83c:	2201      	movs	r2, #1
    c83e:	e002      	b.n	c846 <usbdc_cb_ctl_req+0x23e>
    c840:	2300      	movs	r3, #0
    c842:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c844:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c846:	f88d 6014 	strb.w	r6, [sp, #20]
    c84a:	9303      	str	r3, [sp, #12]
    c84c:	9304      	str	r3, [sp, #16]
    c84e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c852:	f000 fc7b 	bl	d14c <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c856:	fab0 f080 	clz	r0, r0
    c85a:	0940      	lsrs	r0, r0, #5
    c85c:	e6ef      	b.n	c63e <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c85e:	2b02      	cmp	r3, #2
    c860:	f47f aeec 	bne.w	c63c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c864:	88ef      	ldrh	r7, [r5, #6]
    c866:	2f00      	cmp	r7, #0
    c868:	f47f aee8 	bne.w	c63c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c86c:	88a8      	ldrh	r0, [r5, #4]
    c86e:	2101      	movs	r1, #1
    c870:	b2c0      	uxtb	r0, r0
    c872:	f000 fd1d 	bl	d2b0 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c876:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c878:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c87a:	9703      	str	r7, [sp, #12]
    c87c:	9704      	str	r7, [sp, #16]
    c87e:	f88d 6014 	strb.w	r6, [sp, #20]
    c882:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c886:	f000 fc61 	bl	d14c <usb_d_ep_transfer>
		return true;
    c88a:	4620      	mov	r0, r4
    c88c:	e6d7      	b.n	c63e <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c88e:	2b02      	cmp	r3, #2
    c890:	f47f aed4 	bne.w	c63c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c894:	88ef      	ldrh	r7, [r5, #6]
    c896:	2f00      	cmp	r7, #0
    c898:	f47f aed0 	bne.w	c63c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c89c:	88a8      	ldrh	r0, [r5, #4]
    c89e:	4639      	mov	r1, r7
    c8a0:	e7e6      	b.n	c870 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c8a2:	2300      	movs	r3, #0
    c8a4:	9301      	str	r3, [sp, #4]
    c8a6:	e778      	b.n	c79a <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c8a8:	683b      	ldr	r3, [r7, #0]
    c8aa:	e893 0003 	ldmia.w	r3, {r0, r1}
    c8ae:	f000 f99d 	bl	cbec <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c8b2:	2800      	cmp	r0, #0
    c8b4:	f43f aec2 	beq.w	c63c <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c8b8:	78c1      	ldrb	r1, [r0, #3]
    c8ba:	7882      	ldrb	r2, [r0, #2]
    c8bc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c8c0:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c8c4:	4619      	mov	r1, r3
    c8c6:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c8c8:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c8ca:	f000 f95b 	bl	cb84 <usb_find_desc>
    c8ce:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c8d0:	2800      	cmp	r0, #0
    c8d2:	d0b0      	beq.n	c836 <usbdc_cb_ctl_req+0x22e>
    c8d4:	24ff      	movs	r4, #255	; 0xff
    c8d6:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c8d8:	f890 8002 	ldrb.w	r8, [r0, #2]
    c8dc:	45a0      	cmp	r8, r4
    c8de:	d010      	beq.n	c902 <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c8e0:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c8e2:	b92c      	cbnz	r4, c8f0 <usbdc_cb_ctl_req+0x2e8>
    c8e4:	e092      	b.n	ca0c <usbdc_cb_ctl_req+0x404>
    c8e6:	bf00      	nop
    c8e8:	20001c30 	.word	0x20001c30
					func = func->next;
    c8ec:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c8ee:	b134      	cbz	r4, c8fe <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c8f0:	6863      	ldr	r3, [r4, #4]
    c8f2:	462a      	mov	r2, r5
    c8f4:	2100      	movs	r1, #0
    c8f6:	4620      	mov	r0, r4
    c8f8:	4798      	blx	r3
    c8fa:	2800      	cmp	r0, #0
    c8fc:	d1f6      	bne.n	c8ec <usbdc_cb_ctl_req+0x2e4>
    c8fe:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c900:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c902:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c904:	9904      	ldr	r1, [sp, #16]
    c906:	4403      	add	r3, r0
    c908:	4618      	mov	r0, r3
    c90a:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c90c:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c90e:	f000 f939 	bl	cb84 <usb_find_desc>
    c912:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c914:	2800      	cmp	r0, #0
    c916:	d1df      	bne.n	c8d8 <usbdc_cb_ctl_req+0x2d0>
    c918:	e78e      	b.n	c838 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c91a:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c91c:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c91e:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c920:	e892 0003 	ldmia.w	r2, {r0, r1}
    c924:	b2da      	uxtb	r2, r3
    c926:	f000 f98d 	bl	cc44 <usb_find_str_desc>
	if (NULL == str_desc) {
    c92a:	4603      	mov	r3, r0
    c92c:	2800      	cmp	r0, #0
    c92e:	f43f ae85 	beq.w	c63c <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c932:	7801      	ldrb	r1, [r0, #0]
    c934:	428c      	cmp	r4, r1
    c936:	f67f af10 	bls.w	c75a <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c93a:	3d01      	subs	r5, #1
    c93c:	4225      	tst	r5, r4
    c93e:	bf0c      	ite	eq
    c940:	2201      	moveq	r2, #1
    c942:	2200      	movne	r2, #0
    c944:	460c      	mov	r4, r1
    c946:	e709      	b.n	c75c <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c948:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c94a:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c94c:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c94e:	3301      	adds	r3, #1
    c950:	e892 0003 	ldmia.w	r2, {r0, r1}
    c954:	b2da      	uxtb	r2, r3
    c956:	f000 f949 	bl	cbec <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c95a:	4602      	mov	r2, r0
    c95c:	2800      	cmp	r0, #0
    c95e:	f43f ae6d 	beq.w	c63c <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c962:	78c1      	ldrb	r1, [r0, #3]
    c964:	7883      	ldrb	r3, [r0, #2]
    c966:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c96a:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c96c:	429c      	cmp	r4, r3
    c96e:	d94b      	bls.n	ca08 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c970:	3d01      	subs	r5, #1
    c972:	4225      	tst	r5, r4
    c974:	bf0c      	ite	eq
    c976:	2101      	moveq	r1, #1
    c978:	2100      	movne	r1, #0
    c97a:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c97c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c97e:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c980:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c982:	f88d 6014 	strb.w	r6, [sp, #20]
    c986:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c98a:	f000 fbdf 	bl	d14c <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c98e:	fab0 f080 	clz	r0, r0
    c992:	0940      	lsrs	r0, r0, #5
    c994:	e653      	b.n	c63e <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c996:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c998:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c99a:	b926      	cbnz	r6, c9a6 <usbdc_cb_ctl_req+0x39e>
    c99c:	e64e      	b.n	c63c <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c99e:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c9a0:	2e00      	cmp	r6, #0
    c9a2:	f43f ae4b 	beq.w	c63c <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c9a6:	6873      	ldr	r3, [r6, #4]
    c9a8:	aa01      	add	r2, sp, #4
    c9aa:	2101      	movs	r1, #1
    c9ac:	4630      	mov	r0, r6
    c9ae:	4798      	blx	r3
    c9b0:	2800      	cmp	r0, #0
    c9b2:	d1f4      	bne.n	c99e <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c9b4:	4601      	mov	r1, r0
    c9b6:	aa01      	add	r2, sp, #4
    c9b8:	6873      	ldr	r3, [r6, #4]
    c9ba:	4630      	mov	r0, r6
    c9bc:	4798      	blx	r3
    c9be:	2800      	cmp	r0, #0
    c9c0:	f47f ae3c 	bne.w	c63c <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c9c4:	b12c      	cbz	r4, c9d2 <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c9c6:	7f7b      	ldrb	r3, [r7, #29]
    c9c8:	2201      	movs	r2, #1
    c9ca:	fa02 f505 	lsl.w	r5, r2, r5
    c9ce:	432b      	orrs	r3, r5
    c9d0:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c9d2:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c9d4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c9d6:	9303      	str	r3, [sp, #12]
    c9d8:	9304      	str	r3, [sp, #16]
    c9da:	f88d 3014 	strb.w	r3, [sp, #20]
    c9de:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c9e2:	f000 fbb3 	bl	d14c <usb_d_ep_transfer>
			return true;
    c9e6:	2001      	movs	r0, #1
    c9e8:	e629      	b.n	c63e <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c9ea:	697a      	ldr	r2, [r7, #20]
    c9ec:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c9ee:	697a      	ldr	r2, [r7, #20]
    c9f0:	9203      	str	r2, [sp, #12]
    c9f2:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c9f4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c9f6:	f88d 3014 	strb.w	r3, [sp, #20]
    c9fa:	f88d 3015 	strb.w	r3, [sp, #21]
    c9fe:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    ca00:	f000 fba4 	bl	d14c <usb_d_ep_transfer>
		return true;
    ca04:	4620      	mov	r0, r4
    ca06:	e61a      	b.n	c63e <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    ca08:	2100      	movs	r1, #0
    ca0a:	e7b7      	b.n	c97c <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    ca0c:	4644      	mov	r4, r8
    ca0e:	e778      	b.n	c902 <usbdc_cb_ctl_req+0x2fa>

0000ca10 <usbd_event_cb>:
{
    ca10:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    ca12:	b338      	cbz	r0, ca64 <usbd_event_cb+0x54>
    ca14:	2801      	cmp	r0, #1
    ca16:	d124      	bne.n	ca62 <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ca18:	4d19      	ldr	r5, [pc, #100]	; (ca80 <usbd_event_cb+0x70>)
    ca1a:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    ca1c:	b13c      	cbz	r4, ca2e <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ca1e:	6863      	ldr	r3, [r4, #4]
    ca20:	4620      	mov	r0, r4
    ca22:	2200      	movs	r2, #0
    ca24:	2101      	movs	r1, #1
    ca26:	4798      	blx	r3
		func = func->next;
    ca28:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    ca2a:	2c00      	cmp	r4, #0
    ca2c:	d1f7      	bne.n	ca1e <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    ca2e:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    ca30:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    ca32:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    ca34:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    ca36:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    ca38:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    ca3a:	f000 fb41 	bl	d0c0 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    ca3e:	7f28      	ldrb	r0, [r5, #28]
    ca40:	f000 faba 	bl	cfb8 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ca44:	4621      	mov	r1, r4
    ca46:	4620      	mov	r0, r4
    ca48:	4a0e      	ldr	r2, [pc, #56]	; (ca84 <usbd_event_cb+0x74>)
    ca4a:	f000 fc69 	bl	d320 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ca4e:	4620      	mov	r0, r4
    ca50:	4631      	mov	r1, r6
    ca52:	4a0d      	ldr	r2, [pc, #52]	; (ca88 <usbd_event_cb+0x78>)
    ca54:	f000 fc64 	bl	d320 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    ca58:	4620      	mov	r0, r4
}
    ca5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    ca5e:	f000 bb4b 	b.w	d0f8 <usb_d_ep_enable>
    ca62:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ca64:	4b06      	ldr	r3, [pc, #24]	; (ca80 <usbd_event_cb+0x70>)
    ca66:	68dc      	ldr	r4, [r3, #12]
    ca68:	460d      	mov	r5, r1
	while (cg != NULL) {
    ca6a:	b144      	cbz	r4, ca7e <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    ca6c:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    ca6e:	4629      	mov	r1, r5
    ca70:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    ca72:	b103      	cbz	r3, ca76 <usbd_event_cb+0x66>
			cg->cb(change, value);
    ca74:	4798      	blx	r3
		cg = cg->next;
    ca76:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    ca78:	2c00      	cmp	r4, #0
    ca7a:	d1f7      	bne.n	ca6c <usbd_event_cb+0x5c>
    ca7c:	bd70      	pop	{r4, r5, r6, pc}
    ca7e:	bd70      	pop	{r4, r5, r6, pc}
    ca80:	20001c30 	.word	0x20001c30
    ca84:	0000c609 	.word	0x0000c609
    ca88:	0000c56d 	.word	0x0000c56d

0000ca8c <usbdc_xfer>:
{
    ca8c:	b500      	push	{lr}
    ca8e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ca90:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    ca94:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ca96:	9101      	str	r1, [sp, #4]
    ca98:	9202      	str	r2, [sp, #8]
    ca9a:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    ca9e:	f000 fb55 	bl	d14c <usb_d_ep_transfer>
}
    caa2:	b005      	add	sp, #20
    caa4:	f85d fb04 	ldr.w	pc, [sp], #4

0000caa8 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    caa8:	2801      	cmp	r0, #1
    caaa:	d009      	beq.n	cac0 <usbdc_register_handler+0x18>
    caac:	d305      	bcc.n	caba <usbdc_register_handler+0x12>
    caae:	2802      	cmp	r0, #2
    cab0:	d102      	bne.n	cab8 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cab2:	4805      	ldr	r0, [pc, #20]	; (cac8 <usbdc_register_handler+0x20>)
    cab4:	f000 bc66 	b.w	d384 <list_insert_at_end>
    cab8:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    caba:	4804      	ldr	r0, [pc, #16]	; (cacc <usbdc_register_handler+0x24>)
    cabc:	f000 bc62 	b.w	d384 <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cac0:	4803      	ldr	r0, [pc, #12]	; (cad0 <usbdc_register_handler+0x28>)
    cac2:	f000 bc5f 	b.w	d384 <list_insert_at_end>
    cac6:	bf00      	nop
    cac8:	20001c3c 	.word	0x20001c3c
    cacc:	20001c34 	.word	0x20001c34
    cad0:	20001c38 	.word	0x20001c38

0000cad4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cad4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    cad6:	4605      	mov	r5, r0
    cad8:	3000      	adds	r0, #0
    cada:	bf18      	it	ne
    cadc:	2001      	movne	r0, #1
    cade:	f240 3255 	movw	r2, #853	; 0x355
    cae2:	490c      	ldr	r1, [pc, #48]	; (cb14 <usbdc_init+0x40>)
    cae4:	f000 fc4a 	bl	d37c <assert>

	int32_t rc;

	rc = usb_d_init();
    cae8:	f000 f9dc 	bl	cea4 <usb_d_init>
	if (rc < 0) {
    caec:	2800      	cmp	r0, #0
    caee:	db0f      	blt.n	cb10 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    caf0:	4c09      	ldr	r4, [pc, #36]	; (cb18 <usbdc_init+0x44>)
    caf2:	2220      	movs	r2, #32
    caf4:	2100      	movs	r1, #0
    caf6:	4620      	mov	r0, r4
    caf8:	f011 fd38 	bl	1e56c <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cafc:	4907      	ldr	r1, [pc, #28]	; (cb1c <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    cafe:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cb00:	2000      	movs	r0, #0
    cb02:	f000 fa51 	bl	cfa8 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cb06:	2001      	movs	r0, #1
    cb08:	4905      	ldr	r1, [pc, #20]	; (cb20 <usbdc_init+0x4c>)
    cb0a:	f000 fa4d 	bl	cfa8 <usb_d_register_callback>

	return 0;
    cb0e:	2000      	movs	r0, #0
}
    cb10:	bd38      	pop	{r3, r4, r5, pc}
    cb12:	bf00      	nop
    cb14:	0002331c 	.word	0x0002331c
    cb18:	20001c30 	.word	0x20001c30
    cb1c:	0000c551 	.word	0x0000c551
    cb20:	0000ca11 	.word	0x0000ca11

0000cb24 <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    cb24:	4601      	mov	r1, r0
    cb26:	4801      	ldr	r0, [pc, #4]	; (cb2c <usbdc_register_function+0x8>)
    cb28:	f000 bc2c 	b.w	d384 <list_insert_at_end>
    cb2c:	20001c40 	.word	0x20001c40

0000cb30 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cb30:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    cb32:	4b0a      	ldr	r3, [pc, #40]	; (cb5c <usbdc_start+0x2c>)
    cb34:	7e9c      	ldrb	r4, [r3, #26]
    cb36:	b954      	cbnz	r4, cb4e <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    cb38:	b160      	cbz	r0, cb54 <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cb3a:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    cb3c:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    cb3e:	79d2      	ldrb	r2, [r2, #7]
    cb40:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cb42:	2201      	movs	r2, #1
    cb44:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cb46:	f000 fa31 	bl	cfac <usb_d_enable>
	return ERR_NONE;
    cb4a:	4620      	mov	r0, r4
    cb4c:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    cb4e:	f06f 0003 	mvn.w	r0, #3
    cb52:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    cb54:	f06f 0008 	mvn.w	r0, #8
}
    cb58:	bd10      	pop	{r4, pc}
    cb5a:	bf00      	nop
    cb5c:	20001c30 	.word	0x20001c30

0000cb60 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    cb60:	f000 ba26 	b.w	cfb0 <usb_d_attach>

0000cb64 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    cb64:	4b01      	ldr	r3, [pc, #4]	; (cb6c <usbdc_get_ctrl_buffer+0x8>)
}
    cb66:	6958      	ldr	r0, [r3, #20]
    cb68:	4770      	bx	lr
    cb6a:	bf00      	nop
    cb6c:	20001c30 	.word	0x20001c30

0000cb70 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    cb70:	4b03      	ldr	r3, [pc, #12]	; (cb80 <usbdc_get_state+0x10>)
    cb72:	7e98      	ldrb	r0, [r3, #26]
    cb74:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    cb78:	bf18      	it	ne
    cb7a:	2010      	movne	r0, #16
    cb7c:	4770      	bx	lr
    cb7e:	bf00      	nop
    cb80:	20001c30 	.word	0x20001c30

0000cb84 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cb84:	4288      	cmp	r0, r1
    cb86:	d214      	bcs.n	cbb2 <usb_find_desc+0x2e>
    cb88:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cb8a:	2b01      	cmp	r3, #1
    cb8c:	d911      	bls.n	cbb2 <usb_find_desc+0x2e>
{
    cb8e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    cb90:	7844      	ldrb	r4, [r0, #1]
    cb92:	4294      	cmp	r4, r2
    cb94:	d106      	bne.n	cba4 <usb_find_desc+0x20>
    cb96:	e009      	b.n	cbac <usb_find_desc+0x28>
    cb98:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cb9a:	2b01      	cmp	r3, #1
    cb9c:	d905      	bls.n	cbaa <usb_find_desc+0x26>
	return desc[1];
    cb9e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    cba0:	4294      	cmp	r4, r2
    cba2:	d003      	beq.n	cbac <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    cba4:	4418      	add	r0, r3
	while (desc < eof) {
    cba6:	4281      	cmp	r1, r0
    cba8:	d8f6      	bhi.n	cb98 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    cbaa:	2000      	movs	r0, #0
}
    cbac:	f85d 4b04 	ldr.w	r4, [sp], #4
    cbb0:	4770      	bx	lr
	return NULL;
    cbb2:	2000      	movs	r0, #0
    cbb4:	4770      	bx	lr
    cbb6:	bf00      	nop

0000cbb8 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cbb8:	4288      	cmp	r0, r1
    cbba:	d213      	bcs.n	cbe4 <usb_find_ep_desc+0x2c>
    cbbc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cbbe:	2b01      	cmp	r3, #1
    cbc0:	d910      	bls.n	cbe4 <usb_find_ep_desc+0x2c>
	return desc[1];
    cbc2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cbc4:	2a04      	cmp	r2, #4
    cbc6:	d00d      	beq.n	cbe4 <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cbc8:	2a05      	cmp	r2, #5
    cbca:	d108      	bne.n	cbde <usb_find_ep_desc+0x26>
    cbcc:	e00c      	b.n	cbe8 <usb_find_ep_desc+0x30>
    cbce:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cbd0:	2b01      	cmp	r3, #1
    cbd2:	d907      	bls.n	cbe4 <usb_find_ep_desc+0x2c>
    cbd4:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cbd6:	2a04      	cmp	r2, #4
    cbd8:	d004      	beq.n	cbe4 <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cbda:	2a05      	cmp	r2, #5
    cbdc:	d003      	beq.n	cbe6 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    cbde:	4418      	add	r0, r3
	while (desc < eof) {
    cbe0:	4281      	cmp	r1, r0
    cbe2:	d8f4      	bhi.n	cbce <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    cbe4:	2000      	movs	r0, #0
}
    cbe6:	4770      	bx	lr
    cbe8:	4770      	bx	lr
    cbea:	bf00      	nop

0000cbec <usb_find_cfg_desc>:
	while (desc < eof) {
    cbec:	4288      	cmp	r0, r1
    cbee:	d226      	bcs.n	cc3e <usb_find_cfg_desc+0x52>
    cbf0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cbf2:	2b01      	cmp	r3, #1
    cbf4:	d923      	bls.n	cc3e <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cbf6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    cbf8:	7844      	ldrb	r4, [r0, #1]
    cbfa:	2c02      	cmp	r4, #2
    cbfc:	d106      	bne.n	cc0c <usb_find_cfg_desc+0x20>
    cbfe:	e012      	b.n	cc26 <usb_find_cfg_desc+0x3a>
    cc00:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cc02:	2b01      	cmp	r3, #1
    cc04:	d905      	bls.n	cc12 <usb_find_cfg_desc+0x26>
	return desc[1];
    cc06:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    cc08:	2c02      	cmp	r4, #2
    cc0a:	d00c      	beq.n	cc26 <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    cc0c:	4418      	add	r0, r3
	while (desc < eof) {
    cc0e:	4281      	cmp	r1, r0
    cc10:	d8f6      	bhi.n	cc00 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    cc12:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    cc14:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc18:	4770      	bx	lr
		_desc_len_check();
    cc1a:	7803      	ldrb	r3, [r0, #0]
    cc1c:	2b01      	cmp	r3, #1
    cc1e:	d9f8      	bls.n	cc12 <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    cc20:	7843      	ldrb	r3, [r0, #1]
    cc22:	2b02      	cmp	r3, #2
    cc24:	d1f5      	bne.n	cc12 <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    cc26:	7943      	ldrb	r3, [r0, #5]
    cc28:	4293      	cmp	r3, r2
    cc2a:	d0f3      	beq.n	cc14 <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    cc2c:	78c4      	ldrb	r4, [r0, #3]
    cc2e:	7883      	ldrb	r3, [r0, #2]
    cc30:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cc34:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    cc38:	4281      	cmp	r1, r0
    cc3a:	d8ee      	bhi.n	cc1a <usb_find_cfg_desc+0x2e>
    cc3c:	e7e9      	b.n	cc12 <usb_find_cfg_desc+0x26>
		return NULL;
    cc3e:	2000      	movs	r0, #0
    cc40:	4770      	bx	lr
    cc42:	bf00      	nop

0000cc44 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    cc44:	4288      	cmp	r0, r1
    cc46:	d216      	bcs.n	cc76 <usb_find_str_desc+0x32>
{
    cc48:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    cc4a:	2500      	movs	r5, #0
    cc4c:	e005      	b.n	cc5a <usb_find_str_desc+0x16>
	return desc[1];
    cc4e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    cc50:	2c03      	cmp	r4, #3
    cc52:	d008      	beq.n	cc66 <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    cc54:	4418      	add	r0, r3
	while (desc < eof) {
    cc56:	4281      	cmp	r1, r0
    cc58:	d902      	bls.n	cc60 <usb_find_str_desc+0x1c>
    cc5a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cc5c:	2b01      	cmp	r3, #1
    cc5e:	d8f6      	bhi.n	cc4e <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    cc60:	2000      	movs	r0, #0
}
    cc62:	bc30      	pop	{r4, r5}
    cc64:	4770      	bx	lr
			if (i == str_index) {
    cc66:	4295      	cmp	r5, r2
    cc68:	d0fb      	beq.n	cc62 <usb_find_str_desc+0x1e>
    cc6a:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    cc6c:	4281      	cmp	r1, r0
    cc6e:	f105 0501 	add.w	r5, r5, #1
    cc72:	d8f2      	bhi.n	cc5a <usb_find_str_desc+0x16>
    cc74:	e7f4      	b.n	cc60 <usb_find_str_desc+0x1c>
	return NULL;
    cc76:	2000      	movs	r0, #0
    cc78:	4770      	bx	lr
    cc7a:	bf00      	nop

0000cc7c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    cc7c:	2000      	movs	r0, #0
    cc7e:	4770      	bx	lr

0000cc80 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc82:	4f0f      	ldr	r7, [pc, #60]	; (ccc0 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc84:	f000 0e0f 	and.w	lr, r0, #15
    cc88:	463a      	mov	r2, r7
{
    cc8a:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cc8c:	7854      	ldrb	r4, [r2, #1]
    cc8e:	42a0      	cmp	r0, r4
    cc90:	461e      	mov	r6, r3
    cc92:	f103 0301 	add.w	r3, r3, #1
    cc96:	d008      	beq.n	ccaa <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cc98:	7815      	ldrb	r5, [r2, #0]
    cc9a:	3220      	adds	r2, #32
    cc9c:	b90d      	cbnz	r5, cca2 <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cc9e:	4574      	cmp	r4, lr
    cca0:	d003      	beq.n	ccaa <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cca2:	2b0d      	cmp	r3, #13
    cca4:	d1f2      	bne.n	cc8c <usb_d_cb_trans_more+0xc>
    cca6:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    ccaa:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    ccae:	78b3      	ldrb	r3, [r6, #2]
    ccb0:	2b03      	cmp	r3, #3
    ccb2:	d001      	beq.n	ccb8 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    ccb4:	2000      	movs	r0, #0
    ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    ccb8:	69b3      	ldr	r3, [r6, #24]
}
    ccba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    ccbe:	4718      	bx	r3
    ccc0:	20001c50 	.word	0x20001c50

0000ccc4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    ccc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ccc8:	f8df 9130 	ldr.w	r9, [pc, #304]	; cdfc <_usb_d_cb_trans_done+0x138>
    cccc:	4607      	mov	r7, r0
    ccce:	4688      	mov	r8, r1
    ccd0:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccd2:	f000 010f 	and.w	r1, r0, #15
{
    ccd6:	2300      	movs	r3, #0
    ccd8:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ccda:	7844      	ldrb	r4, [r0, #1]
    ccdc:	42a7      	cmp	r7, r4
    ccde:	461e      	mov	r6, r3
    cce0:	f103 0301 	add.w	r3, r3, #1
    cce4:	d008      	beq.n	ccf8 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cce6:	7805      	ldrb	r5, [r0, #0]
    cce8:	3020      	adds	r0, #32
    ccea:	b90d      	cbnz	r5, ccf0 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccec:	428c      	cmp	r4, r1
    ccee:	d003      	beq.n	ccf8 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ccf0:	2b0d      	cmp	r3, #13
    ccf2:	d1f2      	bne.n	ccda <_usb_d_cb_trans_done+0x16>
    ccf4:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    ccf8:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    ccfa:	f1b8 0f00 	cmp.w	r8, #0
    ccfe:	d110      	bne.n	cd22 <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    cd00:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cd04:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    cd08:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cd0c:	b32b      	cbz	r3, cd5a <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    cd0e:	2301      	movs	r3, #1
    cd10:	4641      	mov	r1, r8
    cd12:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    cd14:	444e      	add	r6, r9
    cd16:	4638      	mov	r0, r7
    cd18:	69f3      	ldr	r3, [r6, #28]
    cd1a:	4798      	blx	r3
}
    cd1c:	b007      	add	sp, #28
    cd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    cd22:	f1b8 0f01 	cmp.w	r8, #1
    cd26:	d00b      	beq.n	cd40 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    cd28:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    cd2c:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    cd30:	d025      	beq.n	cd7e <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    cd32:	f1b8 0f03 	cmp.w	r8, #3
    cd36:	d01d      	beq.n	cd74 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    cd38:	2106      	movs	r1, #6
    cd3a:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    cd3c:	70d9      	strb	r1, [r3, #3]
    cd3e:	e7e9      	b.n	cd14 <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    cd40:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cd44:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    cd48:	f04f 0802 	mov.w	r8, #2
    cd4c:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cd50:	b1e9      	cbz	r1, cd8e <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    cd52:	2305      	movs	r3, #5
    cd54:	4641      	mov	r1, r8
    cd56:	70a3      	strb	r3, [r4, #2]
    cd58:	e7dc      	b.n	cd14 <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    cd5a:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cd5c:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    cd5e:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cd60:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    cd64:	d01f      	beq.n	cda6 <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    cd66:	69e3      	ldr	r3, [r4, #28]
    cd68:	7860      	ldrb	r0, [r4, #1]
    cd6a:	4641      	mov	r1, r8
    cd6c:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cd6e:	2302      	movs	r3, #2
    cd70:	70a3      	strb	r3, [r4, #2]
    cd72:	e7d3      	b.n	cd1c <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    cd74:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    cd76:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    cd78:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    cd7a:	70d9      	strb	r1, [r3, #3]
    cd7c:	e7ca      	b.n	cd14 <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cd7e:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    cd82:	2104      	movs	r1, #4
    cd84:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cd86:	b158      	cbz	r0, cda0 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    cd88:	2001      	movs	r0, #1
    cd8a:	7098      	strb	r0, [r3, #2]
    cd8c:	e7c2      	b.n	cd14 <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cd8e:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cd90:	f884 8002 	strb.w	r8, [r4, #2]
    cd94:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cd96:	f005 ffb7 	bl	12d08 <_usb_d_dev_ep_stall>
    cd9a:	78e1      	ldrb	r1, [r4, #3]
    cd9c:	9a01      	ldr	r2, [sp, #4]
    cd9e:	e7b9      	b.n	cd14 <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cda0:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    cda4:	e7ba      	b.n	cd1c <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cda6:	69e3      	ldr	r3, [r4, #28]
    cda8:	7860      	ldrb	r0, [r4, #1]
    cdaa:	f994 500c 	ldrsb.w	r5, [r4, #12]
    cdae:	2101      	movs	r1, #1
    cdb0:	4798      	blx	r3
		if (err) {
    cdb2:	b160      	cbz	r0, cdce <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cdb4:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cdb6:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    cdb8:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cdba:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cdbc:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    cdbe:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cdc0:	bfa8      	it	ge
    cdc2:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    cdc6:	2101      	movs	r1, #1
    cdc8:	f005 ff9e 	bl	12d08 <_usb_d_dev_ep_stall>
    cdcc:	e7a6      	b.n	cd1c <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cdce:	2304      	movs	r3, #4
    cdd0:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    cdd2:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    cdd4:	f8cd 800c 	str.w	r8, [sp, #12]
    cdd8:	2d00      	cmp	r5, #0
    cdda:	bfac      	ite	ge
    cddc:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    cde0:	f003 030f 	andlt.w	r3, r3, #15
    cde4:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    cde6:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cde8:	f8cd 8010 	str.w	r8, [sp, #16]
    cdec:	f88d 3014 	strb.w	r3, [sp, #20]
    cdf0:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cdf4:	f006 f844 	bl	12e80 <_usb_d_dev_ep_trans>
    cdf8:	e790      	b.n	cd1c <_usb_d_cb_trans_done+0x58>
    cdfa:	bf00      	nop
    cdfc:	20001c50 	.word	0x20001c50

0000ce00 <usb_d_cb_trans_setup>:
{
    ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce04:	4f26      	ldr	r7, [pc, #152]	; (cea0 <usb_d_cb_trans_setup+0xa0>)
    ce06:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce08:	f000 060f 	and.w	r6, r0, #15
    ce0c:	463a      	mov	r2, r7
{
    ce0e:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce10:	7851      	ldrb	r1, [r2, #1]
    ce12:	428c      	cmp	r4, r1
    ce14:	461d      	mov	r5, r3
    ce16:	f103 0301 	add.w	r3, r3, #1
    ce1a:	d032      	beq.n	ce82 <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ce1c:	7810      	ldrb	r0, [r2, #0]
    ce1e:	3220      	adds	r2, #32
    ce20:	b908      	cbnz	r0, ce26 <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce22:	42b1      	cmp	r1, r6
    ce24:	d02d      	beq.n	ce82 <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce26:	2b0d      	cmp	r3, #13
    ce28:	d1f2      	bne.n	ce10 <usb_d_cb_trans_setup+0x10>
    ce2a:	f06f 0613 	mvn.w	r6, #19
    ce2e:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    ce32:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    ce34:	4631      	mov	r1, r6
    ce36:	4620      	mov	r0, r4
    ce38:	f005 fff8 	bl	12e2c <_usb_d_dev_ep_read_req>
	if (n != 8) {
    ce3c:	b2c0      	uxtb	r0, r0
    ce3e:	2808      	cmp	r0, #8
    ce40:	d00a      	beq.n	ce58 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    ce42:	2101      	movs	r1, #1
    ce44:	4620      	mov	r0, r4
    ce46:	f005 ff5f 	bl	12d08 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ce4a:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    ce4e:	2101      	movs	r1, #1
}
    ce50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ce54:	f005 bf58 	b.w	12d08 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    ce58:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    ce5c:	2100      	movs	r1, #0
    ce5e:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    ce60:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    ce64:	f005 ff50 	bl	12d08 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    ce68:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    ce6a:	2100      	movs	r1, #0
    ce6c:	4640      	mov	r0, r8
    ce6e:	f005 ff4b 	bl	12d08 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    ce72:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    ce74:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    ce76:	696b      	ldr	r3, [r5, #20]
    ce78:	4620      	mov	r0, r4
    ce7a:	4798      	blx	r3
    ce7c:	b120      	cbz	r0, ce88 <usb_d_cb_trans_setup+0x88>
    ce7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce82:	016e      	lsls	r6, r5, #5
    ce84:	360c      	adds	r6, #12
    ce86:	e7d4      	b.n	ce32 <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    ce88:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    ce8a:	4639      	mov	r1, r7
    ce8c:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    ce8e:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    ce90:	f005 ff3a 	bl	12d08 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ce94:	4639      	mov	r1, r7
    ce96:	4640      	mov	r0, r8
}
    ce98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ce9c:	f005 bf34 	b.w	12d08 <_usb_d_dev_ep_stall>
    cea0:	20001c50 	.word	0x20001c50

0000cea4 <usb_d_init>:

int32_t usb_d_init(void)
{
    cea4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    cea6:	f005 fc2b 	bl	12700 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    ceaa:	2800      	cmp	r0, #0
    ceac:	db70      	blt.n	cf90 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    ceae:	4c39      	ldr	r4, [pc, #228]	; (cf94 <usb_d_init+0xf0>)
    ceb0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    ceb4:	2100      	movs	r1, #0
    ceb6:	4620      	mov	r0, r4
    ceb8:	f011 fb58 	bl	1e56c <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cebc:	4b36      	ldr	r3, [pc, #216]	; (cf98 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cebe:	4937      	ldr	r1, [pc, #220]	; (cf9c <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cec0:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    cec2:	22ff      	movs	r2, #255	; 0xff
    cec4:	7062      	strb	r2, [r4, #1]
    cec6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    ceca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    cece:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    ced2:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    ced6:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    ceda:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    cede:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cee2:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cee4:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cee6:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cee8:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ceea:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ceec:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ceee:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cef0:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cef2:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cef4:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cef6:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cef8:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cefa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cefe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf02:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf06:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf0a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf0e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf12:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf16:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf1a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf1e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf22:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf26:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    cf2a:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    cf2e:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    cf32:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    cf36:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    cf3a:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf3e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf42:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf46:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf4a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf4e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf52:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf56:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf5a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf5e:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf62:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf66:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf6a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cf6e:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cf72:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cf76:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cf7a:	f006 f8b9 	bl	130f0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    cf7e:	4908      	ldr	r1, [pc, #32]	; (cfa0 <usb_d_init+0xfc>)
    cf80:	2001      	movs	r0, #1
    cf82:	f006 f8b5 	bl	130f0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    cf86:	2002      	movs	r0, #2
    cf88:	4906      	ldr	r1, [pc, #24]	; (cfa4 <usb_d_init+0x100>)
    cf8a:	f006 f8b1 	bl	130f0 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    cf8e:	2000      	movs	r0, #0
}
    cf90:	bd10      	pop	{r4, pc}
    cf92:	bf00      	nop
    cf94:	20001c50 	.word	0x20001c50
    cf98:	0000cc7d 	.word	0x0000cc7d
    cf9c:	0000ce01 	.word	0x0000ce01
    cfa0:	0000cc81 	.word	0x0000cc81
    cfa4:	0000ccc5 	.word	0x0000ccc5

0000cfa8 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    cfa8:	f006 b890 	b.w	130cc <_usb_d_dev_register_callback>

0000cfac <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    cfac:	f005 bc48 	b.w	12840 <_usb_d_dev_enable>

0000cfb0 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    cfb0:	f005 bc76 	b.w	128a0 <_usb_d_dev_attach>

0000cfb4 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    cfb4:	f005 bc7e 	b.w	128b4 <_usb_d_dev_set_address>

0000cfb8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    cfb8:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cfba:	4e25      	ldr	r6, [pc, #148]	; (d050 <usb_d_ep0_init+0x98>)
    cfbc:	7873      	ldrb	r3, [r6, #1]
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d043      	beq.n	d04a <usb_d_ep0_init+0x92>
    cfc2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d03f      	beq.n	d04a <usb_d_ep0_init+0x92>
    cfca:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d03b      	beq.n	d04a <usb_d_ep0_init+0x92>
    cfd2:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    cfd6:	b3c3      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    cfd8:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    cfdc:	b3ab      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    cfde:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    cfe2:	b393      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    cfe4:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    cfe8:	b37b      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    cfea:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    cfee:	b363      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    cff0:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    cff4:	b34b      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    cff6:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    cffa:	b333      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    cffc:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    d000:	b31b      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    d002:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    d006:	b303      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    d008:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    d00c:	b1eb      	cbz	r3, d04a <usb_d_ep0_init+0x92>
    d00e:	4633      	mov	r3, r6
    d010:	2400      	movs	r4, #0
    d012:	7859      	ldrb	r1, [r3, #1]
    d014:	29ff      	cmp	r1, #255	; 0xff
    d016:	d00a      	beq.n	d02e <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d018:	781d      	ldrb	r5, [r3, #0]
    d01a:	3320      	adds	r3, #32
    d01c:	b90d      	cbnz	r5, d022 <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d01e:	290f      	cmp	r1, #15
    d020:	d005      	beq.n	d02e <usb_d_ep0_init+0x76>
    d022:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d024:	2c0d      	cmp	r4, #13
    d026:	d1f4      	bne.n	d012 <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    d028:	f06f 0014 	mvn.w	r0, #20
    d02c:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    d02e:	2100      	movs	r1, #0
    d030:	4602      	mov	r2, r0
    d032:	4608      	mov	r0, r1
    d034:	f005 fc44 	bl	128c0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    d038:	2800      	cmp	r0, #0
    d03a:	db05      	blt.n	d048 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    d03c:	0164      	lsls	r4, r4, #5
    d03e:	1933      	adds	r3, r6, r4
    d040:	2000      	movs	r0, #0
    d042:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    d044:	5530      	strb	r0, [r6, r4]
    d046:	bd70      	pop	{r4, r5, r6, pc}
}
    d048:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    d04a:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    d04e:	bd70      	pop	{r4, r5, r6, pc}
    d050:	20001c50 	.word	0x20001c50

0000d054 <usb_d_ep_init>:
{
    d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d056:	4c19      	ldr	r4, [pc, #100]	; (d0bc <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d058:	f000 0c0f 	and.w	ip, r0, #15
    d05c:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    d060:	4627      	mov	r7, r4
    d062:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d064:	785d      	ldrb	r5, [r3, #1]
    d066:	42a8      	cmp	r0, r5
    d068:	d024      	beq.n	d0b4 <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d06a:	781e      	ldrb	r6, [r3, #0]
    d06c:	3320      	adds	r3, #32
    d06e:	b90e      	cbnz	r6, d074 <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d070:	4565      	cmp	r5, ip
    d072:	d01f      	beq.n	d0b4 <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d074:	459e      	cmp	lr, r3
    d076:	d1f5      	bne.n	d064 <usb_d_ep_init+0x10>
    d078:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d07a:	7863      	ldrb	r3, [r4, #1]
    d07c:	2bff      	cmp	r3, #255	; 0xff
    d07e:	d00a      	beq.n	d096 <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d080:	7826      	ldrb	r6, [r4, #0]
    d082:	3420      	adds	r4, #32
    d084:	b90e      	cbnz	r6, d08a <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d086:	2b0f      	cmp	r3, #15
    d088:	d005      	beq.n	d096 <usb_d_ep_init+0x42>
    d08a:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d08c:	2d0d      	cmp	r5, #13
    d08e:	d1f4      	bne.n	d07a <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    d090:	f06f 0014 	mvn.w	r0, #20
    d094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d096:	460e      	mov	r6, r1
    d098:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    d09a:	f005 fc11 	bl	128c0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    d09e:	2800      	cmp	r0, #0
    d0a0:	db07      	blt.n	d0b2 <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    d0a2:	016d      	lsls	r5, r5, #5
    d0a4:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    d0a6:	f006 0603 	and.w	r6, r6, #3
    d0aa:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    d0ac:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    d0ae:	2000      	movs	r0, #0
    d0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    d0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    d0b4:	f06f 0013 	mvn.w	r0, #19
    d0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0ba:	bf00      	nop
    d0bc:	20001c50 	.word	0x20001c50

0000d0c0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    d0c0:	b570      	push	{r4, r5, r6, lr}
    d0c2:	4e0c      	ldr	r6, [pc, #48]	; (d0f4 <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d0c4:	f000 050f 	and.w	r5, r0, #15
    d0c8:	4633      	mov	r3, r6
{
    d0ca:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d0cc:	785a      	ldrb	r2, [r3, #1]
    d0ce:	4290      	cmp	r0, r2
    d0d0:	d008      	beq.n	d0e4 <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d0d2:	7819      	ldrb	r1, [r3, #0]
    d0d4:	3320      	adds	r3, #32
    d0d6:	b909      	cbnz	r1, d0dc <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d0d8:	42aa      	cmp	r2, r5
    d0da:	d003      	beq.n	d0e4 <usb_d_ep_deinit+0x24>
    d0dc:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d0de:	2c0d      	cmp	r4, #13
    d0e0:	d1f4      	bne.n	d0cc <usb_d_ep_deinit+0xc>
    d0e2:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    d0e4:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    d0e8:	f005 fc5c 	bl	129a4 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    d0ec:	23ff      	movs	r3, #255	; 0xff
    d0ee:	7063      	strb	r3, [r4, #1]
    d0f0:	bd70      	pop	{r4, r5, r6, pc}
    d0f2:	bf00      	nop
    d0f4:	20001c50 	.word	0x20001c50

0000d0f8 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    d0f8:	b570      	push	{r4, r5, r6, lr}
    d0fa:	4d13      	ldr	r5, [pc, #76]	; (d148 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d0fc:	f000 060f 	and.w	r6, r0, #15
    d100:	462b      	mov	r3, r5
{
    d102:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d104:	7859      	ldrb	r1, [r3, #1]
    d106:	4288      	cmp	r0, r1
    d108:	d00a      	beq.n	d120 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d10a:	781c      	ldrb	r4, [r3, #0]
    d10c:	3320      	adds	r3, #32
    d10e:	b90c      	cbnz	r4, d114 <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d110:	42b1      	cmp	r1, r6
    d112:	d015      	beq.n	d140 <usb_d_ep_enable+0x48>
    d114:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d116:	2a0d      	cmp	r2, #13
    d118:	d1f4      	bne.n	d104 <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    d11a:	f06f 0011 	mvn.w	r0, #17
    d11e:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    d120:	0152      	lsls	r2, r2, #5
    d122:	5cab      	ldrb	r3, [r5, r2]
    d124:	2b00      	cmp	r3, #0
    d126:	bf14      	ite	ne
    d128:	2301      	movne	r3, #1
    d12a:	2302      	moveq	r3, #2
    d12c:	4415      	add	r5, r2
    d12e:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    d130:	f005 fcca 	bl	12ac8 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    d134:	2800      	cmp	r0, #0
    d136:	db00      	blt.n	d13a <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    d138:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    d13a:	2300      	movs	r3, #0
    d13c:	70ab      	strb	r3, [r5, #2]
    d13e:	bd70      	pop	{r4, r5, r6, pc}
    d140:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    d142:	2302      	movs	r3, #2
    d144:	e7f2      	b.n	d12c <usb_d_ep_enable+0x34>
    d146:	bf00      	nop
    d148:	20001c50 	.word	0x20001c50

0000d14c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d150:	f8df 811c 	ldr.w	r8, [pc, #284]	; d270 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    d154:	7a05      	ldrb	r5, [r0, #8]
{
    d156:	b087      	sub	sp, #28
    d158:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d15a:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    d15e:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d160:	7859      	ldrb	r1, [r3, #1]
    d162:	428d      	cmp	r5, r1
    d164:	d00c      	beq.n	d180 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d166:	781c      	ldrb	r4, [r3, #0]
    d168:	3320      	adds	r3, #32
    d16a:	b90c      	cbnz	r4, d170 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d16c:	42b9      	cmp	r1, r7
    d16e:	d007      	beq.n	d180 <usb_d_ep_transfer+0x34>
    d170:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d172:	2a0d      	cmp	r2, #13
    d174:	d1f4      	bne.n	d160 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    d176:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    d17a:	b007      	add	sp, #28
    d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    d180:	0154      	lsls	r4, r2, #5
    d182:	4606      	mov	r6, r0
    d184:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    d188:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    d18a:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    d18e:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    d192:	f005 ffcb 	bl	1312c <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    d196:	f89b 3002 	ldrb.w	r3, [fp, #2]
    d19a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    d19e:	f89d 7007 	ldrb.w	r7, [sp, #7]
    d1a2:	b2ff      	uxtb	r7, r7
    d1a4:	2f01      	cmp	r7, #1
    d1a6:	d011      	beq.n	d1cc <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    d1a8:	a802      	add	r0, sp, #8
    d1aa:	f005 ffc7 	bl	1313c <atomic_leave_critical>
		switch (state) {
    d1ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1b2:	b2db      	uxtb	r3, r3
    d1b4:	2b05      	cmp	r3, #5
    d1b6:	d040      	beq.n	d23a <usb_d_ep_transfer+0xee>
    d1b8:	2b06      	cmp	r3, #6
    d1ba:	d022      	beq.n	d202 <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    d1bc:	2b00      	cmp	r3, #0
    d1be:	bf0c      	ite	eq
    d1c0:	f06f 0012 	mvneq.w	r0, #18
    d1c4:	2001      	movne	r0, #1
}
    d1c6:	b007      	add	sp, #28
    d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    d1cc:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    d1ce:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    d1d0:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    d1d4:	f005 ffb2 	bl	1313c <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d1d8:	f818 2004 	ldrb.w	r2, [r8, r4]
    d1dc:	b9b2      	cbnz	r2, d20c <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    d1de:	f89b 1013 	ldrb.w	r1, [fp, #19]
    d1e2:	f89b 3012 	ldrb.w	r3, [fp, #18]
    d1e6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    d1ea:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    d1ec:	bb4b      	cbnz	r3, d242 <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    d1ee:	2204      	movs	r2, #4
    d1f0:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    d1f4:	9304      	str	r3, [sp, #16]
    d1f6:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d1f8:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    d1fa:	9203      	str	r2, [sp, #12]
    d1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d200:	e011      	b.n	d226 <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    d202:	f06f 000f 	mvn.w	r0, #15
}
    d206:	b007      	add	sp, #28
    d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d20c:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    d210:	6833      	ldr	r3, [r6, #0]
    d212:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d214:	bf18      	it	ne
    d216:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    d218:	062a      	lsls	r2, r5, #24
    d21a:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d21e:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    d220:	d4ec      	bmi.n	d1fc <usb_d_ep_transfer+0xb0>
    d222:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    d226:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    d228:	f88d 3014 	strb.w	r3, [sp, #20]
    d22c:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    d230:	f005 fe26 	bl	12e80 <_usb_d_dev_ep_trans>
}
    d234:	b007      	add	sp, #28
    d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    d23a:	2002      	movs	r0, #2
}
    d23c:	b007      	add	sp, #28
    d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    d242:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    d246:	4599      	cmp	r9, r3
    d248:	464f      	mov	r7, r9
    d24a:	bf28      	it	cs
    d24c:	461f      	movcs	r7, r3
    d24e:	2900      	cmp	r1, #0
    d250:	db05      	blt.n	d25e <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    d252:	6833      	ldr	r3, [r6, #0]
    d254:	9704      	str	r7, [sp, #16]
    d256:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d258:	4617      	mov	r7, r2
    d25a:	7a33      	ldrb	r3, [r6, #8]
    d25c:	e7e1      	b.n	d222 <usb_d_ep_transfer+0xd6>
    d25e:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    d260:	6832      	ldr	r2, [r6, #0]
    d262:	9704      	str	r7, [sp, #16]
    d264:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d266:	bf94      	ite	ls
    d268:	2700      	movls	r7, #0
    d26a:	2701      	movhi	r7, #1
    d26c:	7a33      	ldrb	r3, [r6, #8]
    d26e:	e7c5      	b.n	d1fc <usb_d_ep_transfer+0xb0>
    d270:	20001c50 	.word	0x20001c50

0000d274 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    d274:	b570      	push	{r4, r5, r6, lr}
    d276:	4e0d      	ldr	r6, [pc, #52]	; (d2ac <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d278:	f000 050f 	and.w	r5, r0, #15
    d27c:	4633      	mov	r3, r6
{
    d27e:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d280:	785a      	ldrb	r2, [r3, #1]
    d282:	4290      	cmp	r0, r2
    d284:	d008      	beq.n	d298 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d286:	7819      	ldrb	r1, [r3, #0]
    d288:	3320      	adds	r3, #32
    d28a:	b909      	cbnz	r1, d290 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d28c:	42aa      	cmp	r2, r5
    d28e:	d003      	beq.n	d298 <usb_d_ep_abort+0x24>
    d290:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d292:	2c0d      	cmp	r4, #13
    d294:	d1f4      	bne.n	d280 <usb_d_ep_abort+0xc>
    d296:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d298:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    d29c:	f005 febe 	bl	1301c <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d2a0:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d2a2:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d2a4:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d2a6:	70e3      	strb	r3, [r4, #3]
    d2a8:	bd70      	pop	{r4, r5, r6, pc}
    d2aa:	bf00      	nop
    d2ac:	20001c50 	.word	0x20001c50

0000d2b0 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    d2b0:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    d2b2:	460c      	mov	r4, r1
    d2b4:	b131      	cbz	r1, d2c4 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    d2b6:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d2b8:	bf18      	it	ne
    d2ba:	2102      	movne	r1, #2
	}
}
    d2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d2c0:	f005 bd22 	b.w	12d08 <_usb_d_dev_ep_stall>
    d2c4:	4e15      	ldr	r6, [pc, #84]	; (d31c <usb_d_ep_halt+0x6c>)
    d2c6:	4605      	mov	r5, r0
    d2c8:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d2ca:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d2ce:	785a      	ldrb	r2, [r3, #1]
    d2d0:	4295      	cmp	r5, r2
    d2d2:	d00a      	beq.n	d2ea <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d2d4:	7819      	ldrb	r1, [r3, #0]
    d2d6:	3320      	adds	r3, #32
    d2d8:	b909      	cbnz	r1, d2de <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d2da:	4282      	cmp	r2, r0
    d2dc:	d005      	beq.n	d2ea <usb_d_ep_halt+0x3a>
    d2de:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d2e0:	2c0d      	cmp	r4, #13
    d2e2:	d1f4      	bne.n	d2ce <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    d2e4:	f06f 0011 	mvn.w	r0, #17
    d2e8:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    d2ea:	2102      	movs	r1, #2
    d2ec:	4628      	mov	r0, r5
    d2ee:	f005 fd0b 	bl	12d08 <_usb_d_dev_ep_stall>
    d2f2:	b900      	cbnz	r0, d2f6 <usb_d_ep_halt+0x46>
}
    d2f4:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d2f6:	2100      	movs	r1, #0
    d2f8:	4628      	mov	r0, r5
    d2fa:	f005 fd05 	bl	12d08 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    d2fe:	2800      	cmp	r0, #0
    d300:	dbf8      	blt.n	d2f4 <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d302:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d306:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d308:	2301      	movs	r3, #1
    d30a:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d30c:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d30e:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d310:	69e3      	ldr	r3, [r4, #28]
    d312:	2200      	movs	r2, #0
    d314:	4798      	blx	r3
	return ERR_NONE;
    d316:	2000      	movs	r0, #0
    d318:	bd70      	pop	{r4, r5, r6, pc}
    d31a:	bf00      	nop
    d31c:	20001c50 	.word	0x20001c50

0000d320 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    d320:	b5f0      	push	{r4, r5, r6, r7, lr}
    d322:	f8df e054 	ldr.w	lr, [pc, #84]	; d378 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d326:	f000 070f 	and.w	r7, r0, #15
    d32a:	4673      	mov	r3, lr
{
    d32c:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d32e:	785d      	ldrb	r5, [r3, #1]
    d330:	42a8      	cmp	r0, r5
    d332:	d008      	beq.n	d346 <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d334:	781e      	ldrb	r6, [r3, #0]
    d336:	3320      	adds	r3, #32
    d338:	b90e      	cbnz	r6, d33e <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d33a:	42bd      	cmp	r5, r7
    d33c:	d003      	beq.n	d346 <usb_d_ep_register_callback+0x26>
    d33e:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d340:	2c0d      	cmp	r4, #13
    d342:	d1f4      	bne.n	d32e <usb_d_ep_register_callback+0xe>
    d344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    d346:	4b0b      	ldr	r3, [pc, #44]	; (d374 <usb_d_ep_register_callback+0x54>)
    d348:	2a00      	cmp	r2, #0
    d34a:	bf08      	it	eq
    d34c:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    d34e:	2901      	cmp	r1, #1
    d350:	d003      	beq.n	d35a <usb_d_ep_register_callback+0x3a>
    d352:	d30a      	bcc.n	d36a <usb_d_ep_register_callback+0x4a>
    d354:	2902      	cmp	r1, #2
    d356:	d004      	beq.n	d362 <usb_d_ep_register_callback+0x42>
    d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    d35a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d35e:	61a2      	str	r2, [r4, #24]
		break;
    d360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    d362:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d366:	61e2      	str	r2, [r4, #28]
    d368:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    d36a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d36e:	6162      	str	r2, [r4, #20]
		break;
    d370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d372:	bf00      	nop
    d374:	0000cc7d 	.word	0x0000cc7d
    d378:	20001c50 	.word	0x20001c50

0000d37c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    d37c:	b900      	cbnz	r0, d380 <assert+0x4>
		__asm("BKPT #0");
    d37e:	be00      	bkpt	0x0000
    d380:	4770      	bx	lr
    d382:	bf00      	nop

0000d384 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    d384:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    d386:	6804      	ldr	r4, [r0, #0]
{
    d388:	4606      	mov	r6, r0
    d38a:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    d38c:	b144      	cbz	r4, d3a0 <list_insert_at_end+0x1c>
		if (it == element) {
    d38e:	428c      	cmp	r4, r1
    d390:	d015      	beq.n	d3be <list_insert_at_end+0x3a>
    d392:	4623      	mov	r3, r4
    d394:	e001      	b.n	d39a <list_insert_at_end+0x16>
    d396:	429d      	cmp	r5, r3
    d398:	d011      	beq.n	d3be <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    d39a:	681b      	ldr	r3, [r3, #0]
    d39c:	2b00      	cmp	r3, #0
    d39e:	d1fa      	bne.n	d396 <list_insert_at_end+0x12>
    d3a0:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    d3a2:	224f      	movs	r2, #79	; 0x4f
    d3a4:	4908      	ldr	r1, [pc, #32]	; (d3c8 <list_insert_at_end+0x44>)
    d3a6:	f7ff ffe9 	bl	d37c <assert>

	if (!list->head) {
    d3aa:	6833      	ldr	r3, [r6, #0]
    d3ac:	b90b      	cbnz	r3, d3b2 <list_insert_at_end+0x2e>
    d3ae:	e008      	b.n	d3c2 <list_insert_at_end+0x3e>
    d3b0:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    d3b2:	6823      	ldr	r3, [r4, #0]
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d1fb      	bne.n	d3b0 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    d3b8:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    d3ba:	602b      	str	r3, [r5, #0]
    d3bc:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    d3be:	2000      	movs	r0, #0
    d3c0:	e7ef      	b.n	d3a2 <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    d3c2:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    d3c4:	602b      	str	r3, [r5, #0]
		return;
    d3c6:	bd70      	pop	{r4, r5, r6, pc}
    d3c8:	00023334 	.word	0x00023334

0000d3cc <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    d3ce:	4d1f      	ldr	r5, [pc, #124]	; (d44c <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    d3d0:	682c      	ldr	r4, [r5, #0]
    d3d2:	f014 0401 	ands.w	r4, r4, #1
    d3d6:	d002      	beq.n	d3de <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    d3d8:	4b1d      	ldr	r3, [pc, #116]	; (d450 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    d3da:	6818      	ldr	r0, [r3, #0]
    d3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3de:	2074      	movs	r0, #116	; 0x74
    d3e0:	f006 f826 	bl	13430 <_Znwj>
    d3e4:	4e1a      	ldr	r6, [pc, #104]	; (d450 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    d3e6:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    d3e8:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    d3ea:	210c      	movs	r1, #12
    d3ec:	f04f 30ff 	mov.w	r0, #4294967295
    d3f0:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    d3f2:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    d3f4:	605c      	str	r4, [r3, #4]
    d3f6:	6658      	str	r0, [r3, #100]	; 0x64
    d3f8:	609c      	str	r4, [r3, #8]
    d3fa:	6698      	str	r0, [r3, #104]	; 0x68
    d3fc:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    d3fe:	841c      	strh	r4, [r3, #32]
    d400:	611c      	str	r4, [r3, #16]
    d402:	625c      	str	r4, [r3, #36]	; 0x24
    d404:	615c      	str	r4, [r3, #20]
    d406:	851c      	strh	r4, [r3, #40]	; 0x28
    d408:	619c      	str	r4, [r3, #24]
    d40a:	62dc      	str	r4, [r3, #44]	; 0x2c
    d40c:	61dc      	str	r4, [r3, #28]
    d40e:	861c      	strh	r4, [r3, #48]	; 0x30
    d410:	635c      	str	r4, [r3, #52]	; 0x34
    d412:	871c      	strh	r4, [r3, #56]	; 0x38
    d414:	63dc      	str	r4, [r3, #60]	; 0x3c
    d416:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    d41a:	645c      	str	r4, [r3, #68]	; 0x44
    d41c:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    d420:	64dc      	str	r4, [r3, #76]	; 0x4c
    d422:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    d426:	655c      	str	r4, [r3, #84]	; 0x54
    d428:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    d42c:	65dc      	str	r4, [r3, #92]	; 0x5c
    d42e:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    d432:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    d436:	671c      	str	r4, [r3, #112]	; 0x70
    d438:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    d43c:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    d440:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    d444:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    d446:	6033      	str	r3, [r6, #0]
    d448:	602a      	str	r2, [r5, #0]
}
    d44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d44c:	20001df0 	.word	0x20001df0
    d450:	20001e28 	.word	0x20001e28

0000d454 <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    d454:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    d456:	4bbd      	ldr	r3, [pc, #756]	; (d74c <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    d458:	4605      	mov	r5, r0
    };
    d45a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    d45c:	b085      	sub	sp, #20
    };
    d45e:	ac04      	add	r4, sp, #16
    d460:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d464:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d466:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d468:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    d46c:	2303      	movs	r3, #3
    d46e:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    d472:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d476:	f245 03c3 	movw	r3, #20675	; 0x50c3
    d47a:	842b      	strh	r3, [r5, #32]
    d47c:	852b      	strh	r3, [r5, #40]	; 0x28
    d47e:	862b      	strh	r3, [r5, #48]	; 0x30
    d480:	872b      	strh	r3, [r5, #56]	; 0x38
    d482:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    d486:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    d48a:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    d48e:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d492:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    d496:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    d498:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    d49c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    d4a0:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    d4a4:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    d4a6:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    d4a8:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d4aa:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    d4ac:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d4ae:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    d4b2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d4b6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d4ba:	07cf      	lsls	r7, r1, #31
    d4bc:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d4c0:	f04f 0401 	mov.w	r4, #1
    d4c4:	bf54      	ite	pl
    d4c6:	f364 0003 	bfipl	r0, r4, #0, #4
    d4ca:	f364 1007 	bfimi	r0, r4, #4, #4
    d4ce:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d4d2:	4a9f      	ldr	r2, [pc, #636]	; (d750 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d4d4:	4413      	add	r3, r2
    d4d6:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d4d8:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d4da:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d4de:	f041 0101 	orr.w	r1, r1, #1
    d4e2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d4e6:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d4e8:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d4ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d4ee:	01db      	lsls	r3, r3, #7
    d4f0:	441a      	add	r2, r3
    d4f2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d4f6:	07ce      	lsls	r6, r1, #31
    d4f8:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d4fc:	bf54      	ite	pl
    d4fe:	f364 0003 	bfipl	r0, r4, #0, #4
    d502:	f364 1007 	bfimi	r0, r4, #4, #4
    d506:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d50a:	4a91      	ldr	r2, [pc, #580]	; (d750 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d50c:	4413      	add	r3, r2
    d50e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d510:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d512:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d516:	f041 0101 	orr.w	r1, r1, #1
    d51a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d51e:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d520:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d522:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d526:	01db      	lsls	r3, r3, #7
    d528:	441a      	add	r2, r3
    d52a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d52e:	07cf      	lsls	r7, r1, #31
    d530:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d534:	bf54      	ite	pl
    d536:	f364 0003 	bfipl	r0, r4, #0, #4
    d53a:	f364 1007 	bfimi	r0, r4, #4, #4
    d53e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d542:	4a83      	ldr	r2, [pc, #524]	; (d750 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d544:	4413      	add	r3, r2
    d546:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d548:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d54a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d54e:	f041 0101 	orr.w	r1, r1, #1
    d552:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d556:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d558:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d55a:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d55e:	01db      	lsls	r3, r3, #7
    d560:	441a      	add	r2, r3
    d562:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d566:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d56a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d56e:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d570:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d574:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d576:	bf4c      	ite	mi
    d578:	f364 1007 	bfimi	r0, r4, #4, #4
    d57c:	f364 0003 	bfipl	r0, r4, #0, #4
    d580:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d584:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d588:	4a72      	ldr	r2, [pc, #456]	; (d754 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d58a:	f041 0101 	orr.w	r1, r1, #1
    d58e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d592:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d596:	f36f 1386 	bfc	r3, #6, #1
    d59a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d59e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d5a2:	065f      	lsls	r7, r3, #25
    d5a4:	d4fb      	bmi.n	d59e <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    d5a6:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d5aa:	496a      	ldr	r1, [pc, #424]	; (d754 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    d5ac:	2004      	movs	r0, #4
    d5ae:	f360 0303 	bfi	r3, r0, #0, #4
    d5b2:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d5b6:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d5be:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d5c2:	684b      	ldr	r3, [r1, #4]
    d5c4:	06de      	lsls	r6, r3, #27
    d5c6:	d4fc      	bmi.n	d5c2 <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d5c8:	4963      	ldr	r1, [pc, #396]	; (d758 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    d5ca:	4a64      	ldr	r2, [pc, #400]	; (d75c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d5cc:	6a0b      	ldr	r3, [r1, #32]
    d5ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d5d2:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    d5d4:	8813      	ldrh	r3, [r2, #0]
    d5d6:	f043 0301 	orr.w	r3, r3, #1
    d5da:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    d5dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d5de:	f013 0301 	ands.w	r3, r3, #1
    d5e2:	d1fb      	bne.n	d5dc <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    d5e4:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    d5e8:	290a      	cmp	r1, #10
    d5ea:	f000 80e7 	beq.w	d7bc <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    d5ee:	290c      	cmp	r1, #12
    d5f0:	f000 80df 	beq.w	d7b2 <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    d5f4:	2908      	cmp	r1, #8
    d5f6:	f000 80d5 	beq.w	d7a4 <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    d5fa:	4b58      	ldr	r3, [pc, #352]	; (d75c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d5fc:	881a      	ldrh	r2, [r3, #0]
    d5fe:	2101      	movs	r1, #1
    d600:	f361 220a 	bfi	r2, r1, #8, #3
    d604:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    d606:	889a      	ldrh	r2, [r3, #4]
    d608:	b292      	uxth	r2, r2
    d60a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    d60e:	f042 0204 	orr.w	r2, r2, #4
    d612:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d614:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    d616:	f014 0404 	ands.w	r4, r4, #4
    d61a:	d1fb      	bne.n	d614 <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    d61c:	4620      	mov	r0, r4
    d61e:	f001 fc79 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d622:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d624:	4620      	mov	r0, r4
    d626:	f001 fc7f 	bl	ef28 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d62a:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d62c:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d62e:	f023 0302 	bic.w	r3, r3, #2
    d632:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d634:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d636:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d638:	6833      	ldr	r3, [r6, #0]
    d63a:	2b01      	cmp	r3, #1
    d63c:	d0fc      	beq.n	d638 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    d63e:	4b48      	ldr	r3, [pc, #288]	; (d760 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    d640:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d642:	4948      	ldr	r1, [pc, #288]	; (d764 <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d644:	4f48      	ldr	r7, [pc, #288]	; (d768 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    d646:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d64a:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d64c:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d64e:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d650:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d652:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d654:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d656:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    d658:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d65a:	f001 fc5b 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d65e:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d660:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d662:	f023 0302 	bic.w	r3, r3, #2
    d666:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d668:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d66a:	6803      	ldr	r3, [r0, #0]
    d66c:	2b01      	cmp	r3, #1
    d66e:	d0fc      	beq.n	d66a <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    d670:	4b3e      	ldr	r3, [pc, #248]	; (d76c <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    d672:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    d674:	2001      	movs	r0, #1
    d676:	f001 fc57 	bl	ef28 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d67a:	2300      	movs	r3, #0
    d67c:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d67e:	4a37      	ldr	r2, [pc, #220]	; (d75c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    d680:	4e3b      	ldr	r6, [pc, #236]	; (d770 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    d682:	493c      	ldr	r1, [pc, #240]	; (d774 <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    d684:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d686:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d68a:	2408      	movs	r4, #8
    d68c:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    d68e:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d690:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d692:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d694:	f043 0301 	orr.w	r3, r3, #1
    d698:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d69a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d69c:	075c      	lsls	r4, r3, #29
    d69e:	d4fc      	bmi.n	d69a <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d6a0:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d6a2:	492e      	ldr	r1, [pc, #184]	; (d75c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d6a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d6a8:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    d6aa:	7a13      	ldrb	r3, [r2, #8]
    d6ac:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    d6b0:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d6b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d6b4:	06d8      	lsls	r0, r3, #27
    d6b6:	d4fc      	bmi.n	d6b2 <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d6b8:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d6ba:	4c28      	ldr	r4, [pc, #160]	; (d75c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d6bc:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d6be:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d6c0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    d6c4:	d1fb      	bne.n	d6be <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    d6c6:	78e3      	ldrb	r3, [r4, #3]
    d6c8:	f043 0301 	orr.w	r3, r3, #1
    d6cc:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6ce:	f001 fc21 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d6d2:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6d4:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6d6:	6813      	ldr	r3, [r2, #0]
    d6d8:	f043 0302 	orr.w	r3, r3, #2
    d6dc:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6de:	f001 fc19 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d6e2:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d6e4:	4a1d      	ldr	r2, [pc, #116]	; (d75c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6e6:	f043 0302 	orr.w	r3, r3, #2
    d6ea:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d6ec:	88a3      	ldrh	r3, [r4, #4]
    d6ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d6f2:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    d6f4:	8823      	ldrh	r3, [r4, #0]
    d6f6:	f043 0302 	orr.w	r3, r3, #2
    d6fa:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d6fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d6fe:	0799      	lsls	r1, r3, #30
    d700:	d4fc      	bmi.n	d6fc <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d702:	2000      	movs	r0, #0
    d704:	f001 fc06 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d708:	6803      	ldr	r3, [r0, #0]
    d70a:	079a      	lsls	r2, r3, #30
    d70c:	d4f9      	bmi.n	d702 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    d70e:	2001      	movs	r0, #1
    d710:	f001 fc00 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d714:	6803      	ldr	r3, [r0, #0]
    d716:	079b      	lsls	r3, r3, #30
    d718:	d4f9      	bmi.n	d70e <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    d71a:	4a10      	ldr	r2, [pc, #64]	; (d75c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d71c:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    d720:	f013 0301 	ands.w	r3, r3, #1
    d724:	d1fa      	bne.n	d71c <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    d726:	4e14      	ldr	r6, [pc, #80]	; (d778 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    d728:	4c14      	ldr	r4, [pc, #80]	; (d77c <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    d72a:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    d72c:	f242 51ff 	movw	r1, #9727	; 0x25ff
    d730:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    d734:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    d736:	8029      	strh	r1, [r5, #0]
    d738:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    d73a:	8229      	strh	r1, [r5, #16]
    d73c:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    d73e:	806b      	strh	r3, [r5, #2]
    d740:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    d742:	826b      	strh	r3, [r5, #18]
    d744:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    d746:	80aa      	strh	r2, [r5, #4]
    d748:	e01a      	b.n	d780 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    d74a:	bf00      	nop
    d74c:	00023354 	.word	0x00023354
    d750:	41008000 	.word	0x41008000
    d754:	40001c00 	.word	0x40001c00
    d758:	40000800 	.word	0x40000800
    d75c:	43002000 	.word	0x43002000
    d760:	00204600 	.word	0x00204600
    d764:	20001e04 	.word	0x20001e04
    d768:	43002040 	.word	0x43002040
    d76c:	00204700 	.word	0x00204700
    d770:	20001e28 	.word	0x20001e28
    d774:	43002034 	.word	0x43002034
    d778:	25ff0000 	.word	0x25ff0000
    d77c:	60f80000 	.word	0x60f80000
    d780:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    d782:	82aa      	strh	r2, [r5, #20]
    d784:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    d786:	80eb      	strh	r3, [r5, #6]
    d788:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    d78a:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    d78c:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    d790:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    d792:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    d794:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    d796:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    d798:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    d79a:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    d79c:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    d79e:	83eb      	strh	r3, [r5, #30]
}
    d7a0:	b005      	add	sp, #20
    d7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d7a4:	88d3      	ldrh	r3, [r2, #6]
    d7a6:	f043 0318 	orr.w	r3, r3, #24
    d7aa:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    d7ac:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    d7b0:	e723      	b.n	d5fa <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d7b2:	88d0      	ldrh	r0, [r2, #6]
    d7b4:	f363 00c4 	bfi	r0, r3, #3, #2
    d7b8:	80d0      	strh	r0, [r2, #6]
    d7ba:	e7f7      	b.n	d7ac <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d7bc:	88d3      	ldrh	r3, [r2, #6]
    d7be:	2002      	movs	r0, #2
    d7c0:	f360 03c4 	bfi	r3, r0, #3, #2
    d7c4:	80d3      	strh	r3, [r2, #6]
    d7c6:	e7f1      	b.n	d7ac <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000d7c8 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    d7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    d7cc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    d7d0:	2b00      	cmp	r3, #0
    d7d2:	f000 80ab 	beq.w	d92c <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    d7d6:	4b89      	ldr	r3, [pc, #548]	; (d9fc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d7d8:	4604      	mov	r4, r0
    d7da:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    d7de:	f010 0001 	ands.w	r0, r0, #1
    d7e2:	f000 80a5 	beq.w	d930 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    d7e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d7e8:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d7ec:	3301      	adds	r3, #1
    d7ee:	4293      	cmp	r3, r2
    d7f0:	6723      	str	r3, [r4, #112]	; 0x70
    d7f2:	d302      	bcc.n	d7fa <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d7f4:	2301      	movs	r3, #1
    d7f6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d7fa:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d7fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d7fe:	8821      	ldrh	r1, [r4, #0]
    d800:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d802:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d804:	fb83 6706 	smull	r6, r7, r3, r6
    d808:	0bf2      	lsrs	r2, r6, #15
    d80a:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d80e:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d810:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d814:	fb01 f103 	mul.w	r1, r1, r3
    d818:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d81c:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d81e:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d820:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d822:	6262      	str	r2, [r4, #36]	; 0x24
    d824:	fb80 8905 	smull	r8, r9, r0, r5
    d828:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d82c:	b2b2      	uxth	r2, r6
    d82e:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d832:	fb02 f000 	mul.w	r0, r2, r0
    d836:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d83a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d83e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d840:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d842:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d844:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d846:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d848:	88a0      	ldrh	r0, [r4, #4]
    d84a:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d84c:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d850:	fb81 2302 	smull	r2, r3, r1, r2
    d854:	0bd2      	lsrs	r2, r2, #15
    d856:	b280      	uxth	r0, r0
    d858:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d85c:	fb00 f101 	mul.w	r1, r0, r1
    d860:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d864:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d868:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d86a:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d86c:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d86e:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d870:	88e1      	ldrh	r1, [r4, #6]
    d872:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d876:	fb86 8903 	smull	r8, r9, r6, r3
    d87a:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d87e:	b289      	uxth	r1, r1
    d880:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d884:	fb01 f606 	mul.w	r6, r1, r6
    d888:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d88c:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d890:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d892:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d894:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d896:	8923      	ldrh	r3, [r4, #8]
    d898:	63e1      	str	r1, [r4, #60]	; 0x3c
    d89a:	fb85 6706 	smull	r6, r7, r5, r6
    d89e:	0bf2      	lsrs	r2, r6, #15
    d8a0:	b29b      	uxth	r3, r3
    d8a2:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d8a6:	fb03 f505 	mul.w	r5, r3, r5
    d8aa:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d8ae:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d8b2:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d8b4:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d8b6:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d8b8:	8961      	ldrh	r1, [r4, #10]
    d8ba:	6462      	str	r2, [r4, #68]	; 0x44
    d8bc:	fb80 6706 	smull	r6, r7, r0, r6
    d8c0:	0bf3      	lsrs	r3, r6, #15
    d8c2:	b28a      	uxth	r2, r1
    d8c4:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d8c8:	fb02 f000 	mul.w	r0, r2, r0
    d8cc:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d8d0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d8d4:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d8d6:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d8d8:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d8da:	89a0      	ldrh	r0, [r4, #12]
    d8dc:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d8e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d8e2:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d8e6:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d8e8:	fb83 8902 	smull	r8, r9, r3, r2
    d8ec:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d8f0:	b280      	uxth	r0, r0
    d8f2:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d8f6:	fb00 f303 	mul.w	r3, r0, r3
    d8fa:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d8fe:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d902:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d904:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d906:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d90a:	89e0      	ldrh	r0, [r4, #14]
    d90c:	6562      	str	r2, [r4, #84]	; 0x54
    d90e:	0bf3      	lsrs	r3, r6, #15
    d910:	b282      	uxth	r2, r0
    d912:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d916:	fb02 f101 	mul.w	r1, r2, r1
    d91a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d91e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d922:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d924:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d926:	83e2      	strh	r2, [r4, #30]
    d928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d930:	f001 faf0 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d934:	6803      	ldr	r3, [r0, #0]
    d936:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d93a:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d93c:	2e00      	cmp	r6, #0
    d93e:	f47f af52 	bne.w	d7e6 <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d942:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d944:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d948:	2501      	movs	r5, #1
    d94a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; da08 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d94e:	4f2c      	ldr	r7, [pc, #176]	; (da00 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d950:	e00f      	b.n	d972 <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d952:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d956:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d95a:	b29b      	uxth	r3, r3
    d95c:	f1c2 010f 	rsb	r1, r2, #15
    d960:	408b      	lsls	r3, r1
    d962:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d964:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d966:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d96a:	462e      	mov	r6, r5
    d96c:	dc0c      	bgt.n	d988 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d96e:	3501      	adds	r5, #1
    d970:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d972:	2d01      	cmp	r5, #1
    d974:	d1ed      	bne.n	d952 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d976:	f04f 31ff 	mov.w	r1, #4294967295
    d97a:	6838      	ldr	r0, [r7, #0]
    d97c:	f003 ff24 	bl	117c8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d980:	0703      	lsls	r3, r0, #28
    d982:	d5e6      	bpl.n	d952 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d984:	462e      	mov	r6, r5
    d986:	e7f2      	b.n	d96e <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d988:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d98c:	429a      	cmp	r2, r3
    d98e:	d005      	beq.n	d99c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d990:	2b0a      	cmp	r3, #10
    d992:	d02c      	beq.n	d9ee <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d994:	2b0c      	cmp	r3, #12
    d996:	d024      	beq.n	d9e2 <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d998:	2b08      	cmp	r3, #8
    d99a:	d01a      	beq.n	d9d2 <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d99c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d99e:	4b19      	ldr	r3, [pc, #100]	; (da04 <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d9a0:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d9a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d9a6:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d9a8:	2000      	movs	r0, #0
    d9aa:	f001 fab3 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d9ae:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d9b0:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d9b2:	6813      	ldr	r3, [r2, #0]
    d9b4:	f043 0302 	orr.w	r3, r3, #2
    d9b8:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d9ba:	f001 faab 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d9be:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d9c0:	4a0e      	ldr	r2, [pc, #56]	; (d9fc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d9c2:	f043 0302 	orr.w	r3, r3, #2
    d9c6:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d9c8:	8893      	ldrh	r3, [r2, #4]
    d9ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d9ce:	8093      	strh	r3, [r2, #4]
    d9d0:	e713      	b.n	d7fa <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d9d2:	490a      	ldr	r1, [pc, #40]	; (d9fc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d9d4:	88ca      	ldrh	r2, [r1, #6]
    d9d6:	f042 0218 	orr.w	r2, r2, #24
    d9da:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d9dc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d9e0:	e7dc      	b.n	d99c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d9e2:	4a06      	ldr	r2, [pc, #24]	; (d9fc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d9e4:	88d1      	ldrh	r1, [r2, #6]
    d9e6:	f36f 01c4 	bfc	r1, #3, #2
    d9ea:	80d1      	strh	r1, [r2, #6]
    d9ec:	e7f6      	b.n	d9dc <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d9ee:	4a03      	ldr	r2, [pc, #12]	; (d9fc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d9f0:	88d1      	ldrh	r1, [r2, #6]
    d9f2:	2002      	movs	r0, #2
    d9f4:	f360 01c4 	bfi	r1, r0, #3, #2
    d9f8:	80d1      	strh	r1, [r2, #6]
    d9fa:	e7ef      	b.n	d9dc <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d9fc:	43002000 	.word	0x43002000
    da00:	20001f0c 	.word	0x20001f0c
    da04:	200019d8 	.word	0x200019d8
    da08:	20001df4 	.word	0x20001df4

0000da0c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    da0c:	2907      	cmp	r1, #7
    da0e:	dc33      	bgt.n	da78 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    da10:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    da12:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    da14:	b083      	sub	sp, #12
    da16:	4605      	mov	r5, r0
    switch (theUnits) {
    da18:	d033      	beq.n	da82 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    da1a:	d336      	bcc.n	da8a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    da1c:	2b02      	cmp	r3, #2
    da1e:	d12d      	bne.n	da7c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    da20:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    da22:	1d0c      	adds	r4, r1, #4
    da24:	f00e f86c 	bl	1bb00 <__aeabi_i2d>
    da28:	460b      	mov	r3, r1
    da2a:	4602      	mov	r2, r0
    da2c:	491a      	ldr	r1, [pc, #104]	; (da98 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    da2e:	2000      	movs	r0, #0
    da30:	f00e f9f6 	bl	1be20 <__aeabi_ddiv>
    da34:	f00e fbac 	bl	1c190 <__aeabi_d2f>
    da38:	ed9f 0a18 	vldr	s0, [pc, #96]	; da9c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    da3c:	ee00 0a90 	vmov	s1, r0
    da40:	f00d f906 	bl	1ac50 <powf>
    da44:	eddf 6a16 	vldr	s13, [pc, #88]	; daa0 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    da48:	ed9f 7a16 	vldr	s14, [pc, #88]	; daa4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    da4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    da50:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    da54:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    da56:	eef4 7ac7 	vcmpe.f32	s15, s14
    da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da5e:	bf49      	itett	mi
    da60:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    da64:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    da68:	edcd 7a01 	vstrmi	s15, [sp, #4]
    da6c:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    da70:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    da74:	b003      	add	sp, #12
    da76:	bd30      	pop	{r4, r5, pc}
        return false;
    da78:	2000      	movs	r0, #0
    da7a:	4770      	bx	lr
            return false;
    da7c:	2000      	movs	r0, #0
}
    da7e:	b003      	add	sp, #12
    da80:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    da82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    da86:	b290      	uxth	r0, r2
    da88:	e7cb      	b.n	da22 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    da8a:	3104      	adds	r1, #4
            return true;
    da8c:	2001      	movs	r0, #1
        m_tc = newTc;
    da8e:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    da92:	b003      	add	sp, #12
    da94:	bd30      	pop	{r4, r5, pc}
    da96:	bf00      	nop
    da98:	3ff00000 	.word	0x3ff00000
    da9c:	3c23d70a 	.word	0x3c23d70a
    daa0:	47000000 	.word	0x47000000
    daa4:	46fffe00 	.word	0x46fffe00

0000daa8 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    daaa:	f7ff fc8f 	bl	d3cc <_ZN9ClearCore10AdcManager8InstanceEv>
    daae:	4a0f      	ldr	r2, [pc, #60]	; (daec <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    dab0:	4b0f      	ldr	r3, [pc, #60]	; (daf0 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    dab2:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    dab4:	2104      	movs	r1, #4
    dab6:	2205      	movs	r2, #5
    dab8:	2706      	movs	r7, #6
    daba:	2607      	movs	r6, #7
    dabc:	2508      	movs	r5, #8
    dabe:	2409      	movs	r4, #9
    dac0:	200a      	movs	r0, #10
    dac2:	8019      	strh	r1, [r3, #0]
    dac4:	809a      	strh	r2, [r3, #4]
    dac6:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    daca:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    dacc:	811f      	strh	r7, [r3, #8]
    dace:	819e      	strh	r6, [r3, #12]
    dad0:	821d      	strh	r5, [r3, #16]
    dad2:	829c      	strh	r4, [r3, #20]
    dad4:	8318      	strh	r0, [r3, #24]
    dad6:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    dad8:	805a      	strh	r2, [r3, #2]
    dada:	80da      	strh	r2, [r3, #6]
    dadc:	815a      	strh	r2, [r3, #10]
    dade:	81da      	strh	r2, [r3, #14]
    dae0:	825a      	strh	r2, [r3, #18]
    dae2:	82da      	strh	r2, [r3, #22]
    dae4:	835a      	strh	r2, [r3, #26]
    dae6:	83da      	strh	r2, [r3, #30]
    dae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    daea:	bf00      	nop
    daec:	20001e04 	.word	0x20001e04
    daf0:	20001e08 	.word	0x20001e08

0000daf4 <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    daf4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    daf8:	4770      	bx	lr
    dafa:	bf00      	nop

0000dafc <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    dafc:	7980      	ldrb	r0, [r0, #6]
    dafe:	4770      	bx	lr

0000db00 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    db00:	2004      	movs	r0, #4
    db02:	4770      	bx	lr

0000db04 <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    db04:	7980      	ldrb	r0, [r0, #6]
    db06:	1ec3      	subs	r3, r0, #3
    db08:	2b01      	cmp	r3, #1
    db0a:	bf83      	ittte	hi
    db0c:	3806      	subhi	r0, #6
    db0e:	fab0 f080 	clzhi	r0, r0
    db12:	0940      	lsrhi	r0, r0, #5
    db14:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    db16:	4770      	bx	lr

0000db18 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    db18:	b530      	push	{r4, r5, lr}
    db1a:	b083      	sub	sp, #12
    db1c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    db20:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    db22:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    db24:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    db26:	f000 fcfb 	bl	e520 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    db2a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    db2e:	4a05      	ldr	r2, [pc, #20]	; (db44 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    db30:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    db32:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    db34:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    db36:	4b04      	ldr	r3, [pc, #16]	; (db48 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    db38:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    db3a:	4620      	mov	r0, r4
    db3c:	66a3      	str	r3, [r4, #104]	; 0x68
    db3e:	b003      	add	sp, #12
    db40:	bd30      	pop	{r4, r5, pc}
    db42:	bf00      	nop
    db44:	000233ac 	.word	0x000233ac
    db48:	06a40000 	.word	0x06a40000

0000db4c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    db4c:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    db4e:	4a3a      	ldr	r2, [pc, #232]	; (dc38 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    db50:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    db54:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    db58:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    db5a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    db5e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    db62:	065d      	lsls	r5, r3, #25
    db64:	d4fb      	bmi.n	db5e <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    db66:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    db6a:	4933      	ldr	r1, [pc, #204]	; (dc38 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    db6c:	2004      	movs	r0, #4
    db6e:	f360 0303 	bfi	r3, r0, #0, #4
    db72:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    db76:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    db7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db7e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    db82:	684b      	ldr	r3, [r1, #4]
    db84:	06d8      	lsls	r0, r3, #27
    db86:	d4fc      	bmi.n	db82 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    db88:	4a2c      	ldr	r2, [pc, #176]	; (dc3c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    db8a:	492d      	ldr	r1, [pc, #180]	; (dc40 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    db8c:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    db8e:	4b2d      	ldr	r3, [pc, #180]	; (dc44 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    db90:	2507      	movs	r5, #7
    db92:	f365 4013 	bfi	r0, r5, #16, #4
    db96:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    db98:	6a0a      	ldr	r2, [r1, #32]
    db9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    db9e:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    dba0:	781a      	ldrb	r2, [r3, #0]
    dba2:	f042 0201 	orr.w	r2, r2, #1
    dba6:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    dba8:	689a      	ldr	r2, [r3, #8]
    dbaa:	07d2      	lsls	r2, r2, #31
    dbac:	d4fc      	bmi.n	dba8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    dbae:	785a      	ldrb	r2, [r3, #1]
    dbb0:	f042 0201 	orr.w	r2, r2, #1
    dbb4:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    dbb6:	785a      	ldrb	r2, [r3, #1]
    dbb8:	f042 0206 	orr.w	r2, r2, #6
    dbbc:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    dbbe:	899a      	ldrh	r2, [r3, #12]
    dbc0:	f042 0202 	orr.w	r2, r2, #2
    dbc4:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    dbc6:	899a      	ldrh	r2, [r3, #12]
    dbc8:	2105      	movs	r1, #5
    dbca:	f361 220b 	bfi	r2, r1, #8, #4
    dbce:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    dbd0:	899a      	ldrh	r2, [r3, #12]
    dbd2:	2102      	movs	r1, #2
    dbd4:	f361 0283 	bfi	r2, r1, #2, #2
    dbd8:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    dbda:	8a1b      	ldrh	r3, [r3, #16]
    dbdc:	b29b      	uxth	r3, r3
    dbde:	bb23      	cbnz	r3, dc2a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    dbe0:	4b19      	ldr	r3, [pc, #100]	; (dc48 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    dbe2:	681d      	ldr	r5, [r3, #0]
    dbe4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    dbe8:	4628      	mov	r0, r5
    dbea:	f004 f839 	bl	11c60 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    dbee:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    dbf2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    dbf6:	4628      	mov	r0, r5
    dbf8:	f004 f832 	bl	11c60 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    dbfc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    dc00:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    dc02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    dc06:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    dc0a:	461a      	mov	r2, r3
    dc0c:	db03      	blt.n	dc16 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    dc0e:	2300      	movs	r3, #0
    dc10:	461a      	mov	r2, r3
    dc12:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    dc16:	4410      	add	r0, r2
    dc18:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    dc1c:	db04      	blt.n	dc28 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    dc1e:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    dc22:	3304      	adds	r3, #4
    dc24:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dc28:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    dc2a:	4a06      	ldr	r2, [pc, #24]	; (dc44 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    dc2c:	6893      	ldr	r3, [r2, #8]
    dc2e:	f013 0304 	ands.w	r3, r3, #4
    dc32:	d1fb      	bne.n	dc2c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    dc34:	8213      	strh	r3, [r2, #16]
    dc36:	e7d3      	b.n	dbe0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    dc38:	40001c00 	.word	0x40001c00
    dc3c:	40001800 	.word	0x40001800
    dc40:	40000800 	.word	0x40000800
    dc44:	43002400 	.word	0x43002400
    dc48:	20001f18 	.word	0x20001f18

0000dc4c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    dc4c:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    dc4e:	4a2e      	ldr	r2, [pc, #184]	; (dd08 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    dc50:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    dc54:	8a13      	ldrh	r3, [r2, #16]
    dc56:	b29b      	uxth	r3, r3
    dc58:	4299      	cmp	r1, r3
    dc5a:	d003      	beq.n	dc64 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    dc5c:	6893      	ldr	r3, [r2, #8]
    dc5e:	075d      	lsls	r5, r3, #29
    dc60:	d4fc      	bmi.n	dc5c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    dc62:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dc64:	68c3      	ldr	r3, [r0, #12]
    dc66:	4929      	ldr	r1, [pc, #164]	; (dd0c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    dc68:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dc6a:	4a27      	ldr	r2, [pc, #156]	; (dd08 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dc6c:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    dc70:	4423      	add	r3, r4
    dc72:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    dc76:	f044 0401 	orr.w	r4, r4, #1
    dc7a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    dc7e:	6e03      	ldr	r3, [r0, #96]	; 0x60
    dc80:	6e44      	ldr	r4, [r0, #100]	; 0x64
    dc82:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    dc86:	4423      	add	r3, r4
    dc88:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    dc8c:	f041 0101 	orr.w	r1, r1, #1
    dc90:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dc94:	6893      	ldr	r3, [r2, #8]
    dc96:	079c      	lsls	r4, r3, #30
    dc98:	d4fc      	bmi.n	dc94 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    dc9a:	7813      	ldrb	r3, [r2, #0]
    dc9c:	0799      	lsls	r1, r3, #30
    dc9e:	d407      	bmi.n	dcb0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    dca0:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dca2:	4919      	ldr	r1, [pc, #100]	; (dd08 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    dca4:	f043 0302 	orr.w	r3, r3, #2
    dca8:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dcaa:	688b      	ldr	r3, [r1, #8]
    dcac:	079a      	lsls	r2, r3, #30
    dcae:	d4fc      	bmi.n	dcaa <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    dcb0:	4a15      	ldr	r2, [pc, #84]	; (dd08 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    dcb2:	79d3      	ldrb	r3, [r2, #7]
    dcb4:	079b      	lsls	r3, r3, #30
    dcb6:	d0fc      	beq.n	dcb2 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    dcb8:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dcba:	4b15      	ldr	r3, [pc, #84]	; (dd10 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    dcbc:	f002 010f 	and.w	r1, r2, #15
    dcc0:	185a      	adds	r2, r3, r1
    dcc2:	2400      	movs	r4, #0
    dcc4:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dcc8:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dcca:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    dcce:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dcd2:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dcd4:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dcd8:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    dcda:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dcdc:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    dcde:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dce2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dce6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    dcea:	33f4      	adds	r3, #244	; 0xf4
    dcec:	f3bf 8f5b 	dmb	ish
    dcf0:	e853 2f00 	ldrex	r2, [r3]
    dcf4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    dcf8:	e843 2100 	strex	r1, r2, [r3]
    dcfc:	2900      	cmp	r1, #0
    dcfe:	d1f7      	bne.n	dcf0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    dd00:	f3bf 8f5b 	dmb	ish
}
    dd04:	bc70      	pop	{r4, r5, r6}
    dd06:	4770      	bx	lr
    dd08:	43002400 	.word	0x43002400
    dd0c:	41008000 	.word	0x41008000
    dd10:	200019d8 	.word	0x200019d8

0000dd14 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    dd14:	7983      	ldrb	r3, [r0, #6]
    dd16:	2b06      	cmp	r3, #6
    dd18:	d805      	bhi.n	dd26 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    dd1a:	2201      	movs	r2, #1
    dd1c:	fa02 f303 	lsl.w	r3, r2, r3
    dd20:	f013 0f54 	tst.w	r3, #84	; 0x54
    dd24:	d100      	bne.n	dd28 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    dd26:	4770      	bx	lr
            DigitalInOut::Refresh();
    dd28:	f000 bc30 	b.w	e58c <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000dd2c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    dd2e:	7983      	ldrb	r3, [r0, #6]
    dd30:	428b      	cmp	r3, r1
    dd32:	d06e      	beq.n	de12 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    dd34:	1e8a      	subs	r2, r1, #2
    dd36:	460c      	mov	r4, r1
    dd38:	4605      	mov	r5, r0
    dd3a:	2a04      	cmp	r2, #4
    dd3c:	d80d      	bhi.n	dd5a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    dd3e:	e8df f002 	tbb	[pc, r2]
    dd42:	0311      	.short	0x0311
    dd44:	0c11      	.short	0x0c11
    dd46:	11          	.byte	0x11
    dd47:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    dd48:	2102      	movs	r1, #2
    dd4a:	f000 fad7 	bl	e2fc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    dd4e:	4628      	mov	r0, r5
    dd50:	f7ff ff7c 	bl	dc4c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    dd54:	2303      	movs	r3, #3
    dd56:	71ab      	strb	r3, [r5, #6]
            break;
    dd58:	4623      	mov	r3, r4
    return (m_mode == newMode);
    dd5a:	1ae0      	subs	r0, r4, r3
    dd5c:	fab0 f080 	clz	r0, r0
    dd60:	0940      	lsrs	r0, r0, #5
    dd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    dd64:	4b2c      	ldr	r3, [pc, #176]	; (de18 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    dd66:	f3bf 8f5b 	dmb	ish
    dd6a:	e853 2f00 	ldrex	r2, [r3]
    dd6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    dd72:	e843 2100 	strex	r1, r2, [r3]
    dd76:	2900      	cmp	r1, #0
    dd78:	d1f7      	bne.n	dd6a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    dd7a:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    dd7e:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd80:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dd84:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dd86:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dd88:	4924      	ldr	r1, [pc, #144]	; (de1c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd8a:	3bf4      	subs	r3, #244	; 0xf4
    dd8c:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd90:	f04f 0e01 	mov.w	lr, #1
    dd94:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd98:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd9c:	ea27 070e 	bic.w	r7, r7, lr
    dda0:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    dda4:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dda6:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ddaa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    ddae:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    ddb2:	4438      	add	r0, r7
    ddb4:	ea22 0606 	bic.w	r6, r2, r6
    ddb8:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    ddbc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    ddc0:	4a17      	ldr	r2, [pc, #92]	; (de20 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    ddc2:	f36f 0300 	bfc	r3, #0, #1
    ddc6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    ddca:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    ddcc:	6e68      	ldr	r0, [r5, #100]	; 0x64
    ddce:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    ddd2:	4403      	add	r3, r0
    ddd4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    ddd8:	f36f 0100 	bfc	r1, #0, #1
    dddc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dde0:	6893      	ldr	r3, [r2, #8]
    dde2:	f013 0302 	ands.w	r3, r3, #2
    dde6:	d1fb      	bne.n	dde0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    dde8:	7811      	ldrb	r1, [r2, #0]
    ddea:	0789      	lsls	r1, r1, #30
    ddec:	d507      	bpl.n	ddfe <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    ddee:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    ddf0:	490b      	ldr	r1, [pc, #44]	; (de20 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    ddf2:	f363 0041 	bfi	r0, r3, #1, #1
    ddf6:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    ddf8:	688b      	ldr	r3, [r1, #8]
    ddfa:	079b      	lsls	r3, r3, #30
    ddfc:	d4fc      	bmi.n	ddf8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    ddfe:	4621      	mov	r1, r4
    de00:	4628      	mov	r0, r5
    de02:	f000 fa7b 	bl	e2fc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    de06:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    de08:	1ae0      	subs	r0, r4, r3
    de0a:	fab0 f080 	clz	r0, r0
    de0e:	0940      	lsrs	r0, r0, #5
    de10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    de12:	2001      	movs	r0, #1
}
    de14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de16:	bf00      	nop
    de18:	20001acc 	.word	0x20001acc
    de1c:	41008000 	.word	0x41008000
    de20:	43002400 	.word	0x43002400

0000de24 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    de24:	7983      	ldrb	r3, [r0, #6]
    de26:	2b06      	cmp	r3, #6
    de28:	d805      	bhi.n	de36 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    de2a:	2201      	movs	r2, #1
    de2c:	fa02 f303 	lsl.w	r3, r2, r3
    de30:	f013 0f54 	tst.w	r3, #84	; 0x54
    de34:	d101      	bne.n	de3a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    de36:	2000      	movs	r0, #0
    de38:	4770      	bx	lr
            state = DigitalInOut::State();
    de3a:	f000 bcad 	b.w	e798 <_ZN9ClearCore12DigitalInOut5StateEv>
    de3e:	bf00      	nop

0000de40 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    de40:	7983      	ldrb	r3, [r0, #6]
    de42:	3b02      	subs	r3, #2
    de44:	2b04      	cmp	r3, #4
    de46:	d83c      	bhi.n	dec2 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    de48:	e8df f003 	tbb	[pc, r3]
    de4c:	3b390339 	.word	0x3b390339
    de50:	39          	.byte	0x39
    de51:	00          	.byte	0x00
            newState = max(newState, 0);
    de52:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    de56:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    de58:	b289      	uxth	r1, r1
    de5a:	f240 74ff 	movw	r4, #2047	; 0x7ff
    de5e:	42a1      	cmp	r1, r4
    de60:	bf28      	it	cs
    de62:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    de64:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    de66:	4d19      	ldr	r5, [pc, #100]	; (decc <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    de68:	4e19      	ldr	r6, [pc, #100]	; (ded0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    de6a:	4a1a      	ldr	r2, [pc, #104]	; (ded4 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    de6c:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    de70:	fb85 e503 	smull	lr, r5, r5, r3
    de74:	f007 070f 	and.w	r7, r7, #15
    de78:	441d      	add	r5, r3
    de7a:	443e      	add	r6, r7
    de7c:	17db      	asrs	r3, r3, #31
    de7e:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    de82:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    de86:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    de8a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    de8e:	4812      	ldr	r0, [pc, #72]	; (ded8 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    de90:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    de94:	fba2 5201 	umull	r5, r2, r2, r1
    de98:	1a89      	subs	r1, r1, r2
    de9a:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    de9e:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    dea2:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    dea4:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    dea6:	42a1      	cmp	r1, r4
    dea8:	bf28      	it	cs
    deaa:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    deac:	b29b      	uxth	r3, r3
    deae:	4299      	cmp	r1, r3
    deb0:	d009      	beq.n	dec6 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    deb2:	6883      	ldr	r3, [r0, #8]
    deb4:	075b      	lsls	r3, r3, #29
    deb6:	d4fc      	bmi.n	deb2 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    deb8:	8201      	strh	r1, [r0, #16]
            success = true;
    deba:	2001      	movs	r0, #1
    debc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    debe:	f000 b9c1 	b.w	e244 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    dec2:	2000      	movs	r0, #0
    dec4:	4770      	bx	lr
            success = true;
    dec6:	2001      	movs	r0, #1
}
    dec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    deca:	bf00      	nop
    decc:	80100201 	.word	0x80100201
    ded0:	200019d8 	.word	0x200019d8
    ded4:	00200401 	.word	0x00200401
    ded8:	43002400 	.word	0x43002400

0000dedc <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    dedc:	b538      	push	{r3, r4, r5, lr}
    dede:	4604      	mov	r4, r0
    dee0:	460d      	mov	r5, r1
    DacInitialize();
    dee2:	f7ff fe33 	bl	db4c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    dee6:	4620      	mov	r0, r4
    dee8:	4629      	mov	r1, r5
    deea:	f000 fc75 	bl	e7d8 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    deee:	6920      	ldr	r0, [r4, #16]
    def0:	07c2      	lsls	r2, r0, #31
    def2:	d521      	bpl.n	df38 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    def4:	68e1      	ldr	r1, [r4, #12]
    def6:	01c9      	lsls	r1, r1, #7
    def8:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    defc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    df00:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    df04:	2101      	movs	r1, #1
    df06:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    df0a:	f361 1307 	bfi	r3, r1, #4, #4
    df0e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    df12:	6e61      	ldr	r1, [r4, #100]	; 0x64
    df14:	07cb      	lsls	r3, r1, #31
    df16:	d421      	bmi.n	df5c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    df18:	6e23      	ldr	r3, [r4, #96]	; 0x60
    df1a:	01db      	lsls	r3, r3, #7
    df1c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    df20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    df24:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    df28:	2101      	movs	r1, #1
    df2a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    df2e:	f361 0203 	bfi	r2, r1, #0, #4
    df32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    df36:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    df38:	68e2      	ldr	r2, [r4, #12]
    df3a:	01d2      	lsls	r2, r2, #7
    df3c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    df40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    df44:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    df48:	2101      	movs	r1, #1
    df4a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    df4e:	f361 0203 	bfi	r2, r1, #0, #4
    df52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    df56:	6e61      	ldr	r1, [r4, #100]	; 0x64
    df58:	07cb      	lsls	r3, r1, #31
    df5a:	d5dd      	bpl.n	df18 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    df5c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    df5e:	01d2      	lsls	r2, r2, #7
    df60:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    df64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    df68:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    df6c:	2101      	movs	r1, #1
    df6e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    df72:	f361 1307 	bfi	r3, r1, #4, #4
    df76:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    df7a:	bd38      	pop	{r3, r4, r5, pc}

0000df7c <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    df7c:	7980      	ldrb	r0, [r0, #6]
    df7e:	4770      	bx	lr

0000df80 <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    df80:	2003      	movs	r0, #3
    df82:	4770      	bx	lr

0000df84 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    df84:	2000      	movs	r0, #0
    df86:	4770      	bx	lr

0000df88 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    df88:	2000      	movs	r0, #0
    df8a:	4770      	bx	lr

0000df8c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    df8e:	7983      	ldrb	r3, [r0, #6]
    df90:	428b      	cmp	r3, r1
    df92:	d072      	beq.n	e07a <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    df94:	2901      	cmp	r1, #1
    df96:	460c      	mov	r4, r1
    df98:	4605      	mov	r5, r0
    df9a:	d03c      	beq.n	e016 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    df9c:	2902      	cmp	r1, #2
    df9e:	d135      	bne.n	e00c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    dfa0:	4e37      	ldr	r6, [pc, #220]	; (e080 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    dfa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dfa4:	f3bf 8f5b 	dmb	ish
    dfa8:	e856 2f00 	ldrex	r2, [r6]
    dfac:	431a      	orrs	r2, r3
    dfae:	e846 2100 	strex	r1, r2, [r6]
    dfb2:	2900      	cmp	r1, #0
    dfb4:	d1f8      	bne.n	dfa8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    dfb6:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    dfba:	3ef4      	subs	r6, #244	; 0xf4
    dfbc:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    dfc0:	b143      	cbz	r3, dfd4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    dfc2:	4b30      	ldr	r3, [pc, #192]	; (e084 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    dfc4:	6b29      	ldr	r1, [r5, #48]	; 0x30
    dfc6:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    dfc8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    dfca:	420b      	tst	r3, r1
    dfcc:	d0fc      	beq.n	dfc8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    dfce:	4628      	mov	r0, r5
    dfd0:	f7f6 fdb8 	bl	4b44 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    dfd4:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dfd6:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dfda:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    dfdc:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dfe0:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dfe4:	2001      	movs	r0, #1
    dfe6:	4098      	lsls	r0, r3
    dfe8:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dfec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dff0:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    dff4:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    dff6:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    dffa:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dffc:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e000:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    e004:	4603      	mov	r3, r0
            m_mode = newMode;
    e006:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    e008:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    e00c:	1ae0      	subs	r0, r4, r3
    e00e:	fab0 f080 	clz	r0, r0
    e012:	0940      	lsrs	r0, r0, #5
    e014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e016:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e018:	4e19      	ldr	r6, [pc, #100]	; (e080 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    e01a:	f3bf 8f5b 	dmb	ish
    e01e:	43db      	mvns	r3, r3
    e020:	e856 2f00 	ldrex	r2, [r6]
    e024:	401a      	ands	r2, r3
    e026:	e846 2100 	strex	r1, r2, [r6]
    e02a:	2900      	cmp	r1, #0
    e02c:	d1f8      	bne.n	e020 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    e02e:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    e032:	3ef4      	subs	r6, #244	; 0xf4
    e034:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    e038:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    e03a:	b11b      	cbz	r3, e044 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    e03c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    e040:	2b00      	cmp	r3, #0
    e042:	d0fb      	beq.n	e03c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    e044:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e046:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e04a:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    e04c:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e050:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e052:	f003 030f 	and.w	r3, r3, #15
    e056:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e05a:	fa00 f303 	lsl.w	r3, r0, r3
    e05e:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    e060:	4603      	mov	r3, r0
    return (m_mode == newMode);
    e062:	1ae0      	subs	r0, r4, r3
    e064:	4329      	orrs	r1, r5
    e066:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e06a:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e06e:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e072:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    e076:	0940      	lsrs	r0, r0, #5
    e078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    e07a:	2001      	movs	r0, #1
}
    e07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e07e:	bf00      	nop
    e080:	20001acc 	.word	0x20001acc
    e084:	20001e04 	.word	0x20001e04

0000e088 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    e088:	b570      	push	{r4, r5, r6, lr}
    e08a:	4604      	mov	r4, r0
    e08c:	4616      	mov	r6, r2
      m_analogValid(false) {}
    e08e:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    e090:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    e094:	f7f6 fd0e 	bl	4ab4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    e098:	2300      	movs	r3, #0
    e09a:	4a05      	ldr	r2, [pc, #20]	; (e0b0 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    e09c:	6326      	str	r6, [r4, #48]	; 0x30
    e09e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    e0a2:	6022      	str	r2, [r4, #0]
    e0a4:	63a3      	str	r3, [r4, #56]	; 0x38
    e0a6:	63e3      	str	r3, [r4, #60]	; 0x3c
    e0a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    e0ac:	4620      	mov	r0, r4
    e0ae:	bd70      	pop	{r4, r5, r6, pc}
    e0b0:	000233dc 	.word	0x000233dc

0000e0b4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    e0b4:	7982      	ldrb	r2, [r0, #6]
    e0b6:	2a01      	cmp	r2, #1
    e0b8:	d004      	beq.n	e0c4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    e0ba:	2a02      	cmp	r2, #2
    e0bc:	d101      	bne.n	e0c2 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    e0be:	f7f6 bc49 	b.w	4954 <_ZN9ClearCore9DigitalIn7RefreshEv>
    e0c2:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    e0c4:	4a17      	ldr	r2, [pc, #92]	; (e124 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    e0c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    e0c8:	6812      	ldr	r2, [r2, #0]
    e0ca:	4603      	mov	r3, r0
    e0cc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    e0ce:	4208      	tst	r0, r1
    e0d0:	d126      	bne.n	e120 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    e0d2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    e0d6:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    e0d8:	b991      	cbnz	r1, e100 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    e0da:	6b99      	ldr	r1, [r3, #56]	; 0x38
    e0dc:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    e0e0:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    e0e2:	2c07      	cmp	r4, #7
    e0e4:	b280      	uxth	r0, r0
    e0e6:	dc07      	bgt.n	e0f8 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    e0e8:	0400      	lsls	r0, r0, #16
    e0ea:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    e0ee:	3408      	adds	r4, #8
        return (m_z >> 16);
    e0f0:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    e0f2:	6270      	str	r0, [r6, #36]	; 0x24
    e0f4:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    e0f8:	2201      	movs	r2, #1
    e0fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e0fe:	e000      	b.n	e102 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    e100:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    e102:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    e104:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e106:	4908      	ldr	r1, [pc, #32]	; (e128 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    e108:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    e10c:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    e110:	b2d8      	uxtb	r0, r3
    e112:	440a      	add	r2, r1
    e114:	2802      	cmp	r0, #2
    e116:	bfd8      	it	le
    e118:	2300      	movle	r3, #0
    e11a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    e11e:	bc70      	pop	{r4, r5, r6}
    e120:	4770      	bx	lr
    e122:	bf00      	nop
    e124:	20001e04 	.word	0x20001e04
    e128:	200019d8 	.word	0x200019d8

0000e12c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    e12c:	4b29      	ldr	r3, [pc, #164]	; (e1d4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    e12e:	b570      	push	{r4, r5, r6, lr}
    e130:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    e132:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    e134:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    e136:	4628      	mov	r0, r5
    e138:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    e13c:	2301      	movs	r3, #1
    e13e:	2202      	movs	r2, #2
    e140:	f7ff fc64 	bl	da0c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    e144:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e148:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    e14a:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    e14e:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    e150:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    e152:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    e154:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    e156:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    e158:	4620      	mov	r0, r4
    e15a:	f7f6 fb95 	bl	4888 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    e15e:	6823      	ldr	r3, [r4, #0]
    e160:	4a1d      	ldr	r2, [pc, #116]	; (e1d8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    e162:	685b      	ldr	r3, [r3, #4]
    e164:	4293      	cmp	r3, r2
    e166:	d130      	bne.n	e1ca <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    e168:	79a3      	ldrb	r3, [r4, #6]
    e16a:	2b01      	cmp	r3, #1
    e16c:	d02c      	beq.n	e1c8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e16e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e170:	4a1a      	ldr	r2, [pc, #104]	; (e1dc <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    e172:	f3bf 8f5b 	dmb	ish
    e176:	43db      	mvns	r3, r3
    e178:	e852 1f00 	ldrex	r1, [r2]
    e17c:	4019      	ands	r1, r3
    e17e:	e842 1000 	strex	r0, r1, [r2]
    e182:	2800      	cmp	r0, #0
    e184:	d1f8      	bne.n	e178 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    e186:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    e18a:	3af4      	subs	r2, #244	; 0xf4
    e18c:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    e190:	2101      	movs	r1, #1
    e192:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    e194:	b11b      	cbz	r3, e19e <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    e196:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    e19a:	2b00      	cmp	r3, #0
    e19c:	d0fb      	beq.n	e196 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    e19e:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e1a0:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e1a4:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    e1a6:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1aa:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e1ae:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1b0:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e1b4:	408b      	lsls	r3, r1
    e1b6:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    e1b8:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1ba:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e1be:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e1c2:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    e1c6:	bd70      	pop	{r4, r5, r6, pc}
    e1c8:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    e1ca:	4620      	mov	r0, r4
    e1cc:	2101      	movs	r1, #1
}
    e1ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    e1d2:	4718      	bx	r3
    e1d4:	20001e04 	.word	0x20001e04
    e1d8:	0000df8d 	.word	0x0000df8d
    e1dc:	20001acc 	.word	0x20001acc

0000e1e0 <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    e1e0:	7982      	ldrb	r2, [r0, #6]
    e1e2:	2a01      	cmp	r2, #1
    e1e4:	d005      	beq.n	e1f2 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    e1e6:	2a02      	cmp	r2, #2
    e1e8:	d101      	bne.n	e1ee <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    e1ea:	f7f6 bb39 	b.w	4860 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    e1ee:	2000      	movs	r0, #0
    e1f0:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    e1f2:	4b0b      	ldr	r3, [pc, #44]	; (e220 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    e1f4:	b510      	push	{r4, lr}
    e1f6:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    e1f8:	6818      	ldr	r0, [r3, #0]
    e1fa:	f003 faeb 	bl	117d4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    e1fe:	b958      	cbnz	r0, e218 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    e200:	4b08      	ldr	r3, [pc, #32]	; (e224 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    e202:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    e204:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    e206:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    e208:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    e20c:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    e20e:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    e212:	4118      	asrs	r0, r3
    e214:	b200      	sxth	r0, r0
    e216:	bd10      	pop	{r4, pc}
                state = -1;
    e218:	f04f 30ff 	mov.w	r0, #4294967295
}
    e21c:	bd10      	pop	{r4, pc}
    e21e:	bf00      	nop
    e220:	20001f0c 	.word	0x20001f0c
    e224:	20001e04 	.word	0x20001e04

0000e228 <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    e228:	7980      	ldrb	r0, [r0, #6]
    e22a:	4770      	bx	lr

0000e22c <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    e22c:	2001      	movs	r0, #1
    e22e:	4770      	bx	lr

0000e230 <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    e230:	7980      	ldrb	r0, [r0, #6]
    e232:	2804      	cmp	r0, #4
    e234:	bf1d      	ittte	ne
    e236:	3806      	subne	r0, #6
    e238:	fab0 f080 	clzne	r0, r0
    e23c:	0940      	lsrne	r0, r0, #5
    e23e:	2001      	moveq	r0, #1
    }
    e240:	4770      	bx	lr
    e242:	bf00      	nop

0000e244 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    e244:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    e246:	2300      	movs	r3, #0
    switch (m_mode) {
    e248:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    e24a:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e24e:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    e252:	d02a      	beq.n	e2aa <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    e254:	2a06      	cmp	r2, #6
    e256:	d126      	bne.n	e2a6 <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e258:	b28b      	uxth	r3, r1
    e25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e25e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e262:	bf28      	it	cs
    e264:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    e266:	b470      	push	{r4, r5, r6}
    e268:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e26a:	2b00      	cmp	r3, #0
    e26c:	d040      	beq.n	e2f0 <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    e26e:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e270:	6c02      	ldr	r2, [r0, #64]	; 0x40
    e272:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    e276:	18d6      	adds	r6, r2, r3
    e278:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    e27c:	42ac      	cmp	r4, r5
    e27e:	d008      	beq.n	e292 <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e280:	2b00      	cmp	r3, #0
    e282:	bf0c      	ite	eq
    e284:	2440      	moveq	r4, #64	; 0x40
    e286:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e288:	6913      	ldr	r3, [r2, #16]
    e28a:	4223      	tst	r3, r4
    e28c:	d1fc      	bne.n	e288 <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e28e:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    e292:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e294:	4b18      	ldr	r3, [pc, #96]	; (e2f8 <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    e296:	f002 020f 	and.w	r2, r2, #15
    e29a:	4413      	add	r3, r2
    e29c:	2001      	movs	r0, #1
    e29e:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    e2a2:	bc70      	pop	{r4, r5, r6}
    e2a4:	4770      	bx	lr
    bool success = false;
    e2a6:	4618      	mov	r0, r3
    e2a8:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    e2aa:	1c0b      	adds	r3, r1, #0
    e2ac:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    e2b0:	bf18      	it	ne
    e2b2:	2301      	movne	r3, #1
    e2b4:	429a      	cmp	r2, r3
    e2b6:	d004      	beq.n	e2c2 <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e2b8:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    e2ba:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e2be:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    e2c2:	b121      	cbz	r1, e2ce <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    e2c4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    e2c8:	fab1 f181 	clz	r1, r1
    e2cc:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    e2ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    e2d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e2d4:	428b      	cmp	r3, r1
    e2d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e2d8:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e2dc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e2e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e2e4:	f04f 0001 	mov.w	r0, #1
    e2e8:	bf14      	ite	ne
    e2ea:	619a      	strne	r2, [r3, #24]
    e2ec:	615a      	streq	r2, [r3, #20]
    e2ee:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e2f0:	43cd      	mvns	r5, r1
    e2f2:	b2ed      	uxtb	r5, r5
    e2f4:	e7bc      	b.n	e270 <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    e2f6:	bf00      	nop
    e2f8:	200019d8 	.word	0x200019d8

0000e2fc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    e2fc:	7983      	ldrb	r3, [r0, #6]
    e2fe:	428b      	cmp	r3, r1
    e300:	f000 80cb 	beq.w	e49a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    e308:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e30a:	b082      	sub	sp, #8
    e30c:	4604      	mov	r4, r0
    e30e:	460d      	mov	r5, r1
    switch (newMode) {
    e310:	f000 8087 	beq.w	e422 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    e314:	2906      	cmp	r1, #6
    e316:	d008      	beq.n	e32a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e318:	2902      	cmp	r1, #2
    e31a:	d033      	beq.n	e384 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    e31c:	1ae8      	subs	r0, r5, r3
    e31e:	fab0 f080 	clz	r0, r0
    e322:	0940      	lsrs	r0, r0, #5
}
    e324:	b002      	add	sp, #8
    e326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    e32a:	6803      	ldr	r3, [r0, #0]
    e32c:	4a79      	ldr	r2, [pc, #484]	; (e514 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    e32e:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    e330:	71a1      	strb	r1, [r4, #6]
    e332:	4293      	cmp	r3, r2
    e334:	f040 80b3 	bne.w	e49e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e338:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e33a:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e33e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    e342:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e344:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e346:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    e34a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    e34e:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e352:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e354:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e358:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e35a:	429a      	cmp	r2, r3
    e35c:	d008      	beq.n	e370 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e35e:	2e00      	cmp	r6, #0
    e360:	bf0c      	ite	eq
    e362:	2640      	moveq	r6, #64	; 0x40
    e364:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e366:	690a      	ldr	r2, [r1, #16]
    e368:	4232      	tst	r2, r6
    e36a:	d1fc      	bne.n	e366 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e36c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    e370:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e374:	4e68      	ldr	r6, [pc, #416]	; (e518 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e376:	f001 020f 	and.w	r2, r1, #15
    e37a:	18b3      	adds	r3, r6, r2
    e37c:	2000      	movs	r0, #0
    e37e:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    e382:	e093      	b.n	e4ac <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    e384:	2300      	movs	r3, #0
    e386:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    e38a:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    e38c:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    e390:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    e394:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e396:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e398:	01db      	lsls	r3, r3, #7
    e39a:	2a00      	cmp	r2, #0
    e39c:	d177      	bne.n	e48e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    e39e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e3a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e3a6:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e3a8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e3ac:	4e5a      	ldr	r6, [pc, #360]	; (e518 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e3ae:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e3b0:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e3b4:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e3b8:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e3bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e3c0:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e3c4:	f04f 0e01 	mov.w	lr, #1
    e3c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e3cc:	443b      	add	r3, r7
    e3ce:	fa0e f702 	lsl.w	r7, lr, r2
    e3d2:	ea28 0707 	bic.w	r7, r8, r7
    e3d6:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e3da:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e3de:	ea6f 070c 	mvn.w	r7, ip
    e3e2:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e3e4:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e3e8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e3ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e3f0:	f36f 0200 	bfc	r2, #0, #1
    e3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    e3f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	f000 8086 	beq.w	e50e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e402:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e406:	4845      	ldr	r0, [pc, #276]	; (e51c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e408:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    e40c:	2200      	movs	r2, #0
    e40e:	401f      	ands	r7, r3
    e410:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e414:	6800      	ldr	r0, [r0, #0]
    e416:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    e41a:	f003 fbcf 	bl	11bbc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    e41e:	79a3      	ldrb	r3, [r4, #6]
    e420:	e77c      	b.n	e31c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e422:	220c      	movs	r2, #12
            State(m_outState);
    e424:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e426:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    e42a:	2600      	movs	r6, #0
            m_mode = newMode;
    e42c:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    e42e:	695b      	ldr	r3, [r3, #20]
    e430:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    e434:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    e438:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    e43a:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e43c:	4936      	ldr	r1, [pc, #216]	; (e518 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e43e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    e440:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e442:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e446:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e44a:	f04f 0e01 	mov.w	lr, #1
    e44e:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    e452:	fa0e f002 	lsl.w	r0, lr, r2
    e456:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e45a:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e45e:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e462:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e466:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e46a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e46e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    e472:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e476:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e47a:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    e47e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e482:	f366 0200 	bfi	r2, r6, #0, #1
    e486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e48a:	79a3      	ldrb	r3, [r4, #6]
            break;
    e48c:	e746      	b.n	e31c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e48e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e492:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e496:	6191      	str	r1, [r2, #24]
    e498:	e786      	b.n	e3a8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    e49a:	2001      	movs	r0, #1
    e49c:	4770      	bx	lr
            State(0);
    e49e:	2100      	movs	r1, #0
    e4a0:	4798      	blx	r3
    e4a2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e4a6:	4e1c      	ldr	r6, [pc, #112]	; (e518 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e4a8:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    e4ac:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e4b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e4b2:	9301      	str	r3, [sp, #4]
    e4b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e4b6:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e4b8:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e4bc:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    e4c0:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    e4c4:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e4c6:	fa0c fe02 	lsl.w	lr, ip, r2
    e4ca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e4ce:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e4d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e4d6:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    e4da:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e4dc:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e4e0:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e4e4:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e4e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e4ec:	ea42 020c 	orr.w	r2, r2, ip
    e4f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    e4f4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e4f8:	2b00      	cmp	r3, #0
    e4fa:	d090      	beq.n	e41e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e4fc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e500:	4806      	ldr	r0, [pc, #24]	; (e51c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e502:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    e506:	2200      	movs	r2, #0
    e508:	ea23 0707 	bic.w	r7, r3, r7
    e50c:	e780      	b.n	e410 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    e50e:	2302      	movs	r3, #2
    e510:	e704      	b.n	e31c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e512:	bf00      	nop
    e514:	0000e245 	.word	0x0000e245
    e518:	200019d8 	.word	0x200019d8
    e51c:	20001f0c 	.word	0x20001f0c

0000e520 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    e520:	b570      	push	{r4, r5, r6, lr}
    e522:	461d      	mov	r5, r3
    e524:	4604      	mov	r4, r0
    e526:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    e52a:	f7f6 fac3 	bl	4ab4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    e52e:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    e532:	4a14      	ldr	r2, [pc, #80]	; (e584 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    e534:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    e536:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    e538:	78aa      	ldrb	r2, [r5, #2]
    e53a:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    e53c:	2301      	movs	r3, #1
    e53e:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    e540:	2200      	movs	r2, #0
    e542:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    e546:	63a3      	str	r3, [r4, #56]	; 0x38
    e548:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    e54c:	7aeb      	ldrb	r3, [r5, #11]
    e54e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    e552:	230c      	movs	r3, #12
    e554:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e558:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e55c:	64a2      	str	r2, [r4, #72]	; 0x48
    e55e:	64e2      	str	r2, [r4, #76]	; 0x4c
    e560:	6522      	str	r2, [r4, #80]	; 0x50
    e562:	6562      	str	r2, [r4, #84]	; 0x54
    e564:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    e568:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    e56c:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    e570:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    e574:	7aaa      	ldrb	r2, [r5, #10]
    e576:	4b04      	ldr	r3, [pc, #16]	; (e588 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    e578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e57c:	6423      	str	r3, [r4, #64]	; 0x40
}
    e57e:	4620      	mov	r0, r4
    e580:	bd70      	pop	{r4, r5, r6, pc}
    e582:	bf00      	nop
    e584:	0002340c 	.word	0x0002340c
    e588:	00023434 	.word	0x00023434

0000e58c <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e58e:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    e590:	f7f6 f9e0 	bl	4954 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    e594:	79a3      	ldrb	r3, [r4, #6]
    e596:	2b04      	cmp	r3, #4
    e598:	d12d      	bne.n	e5f6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    e59a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e59e:	bb5b      	cbnz	r3, e5f8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    e5a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e5a4:	2b00      	cmp	r3, #0
    e5a6:	f040 809d 	bne.w	e6e4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    e5aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e5ae:	220c      	movs	r2, #12
    e5b0:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    e5b4:	b19b      	cbz	r3, e5de <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e5b6:	4d75      	ldr	r5, [pc, #468]	; (e78c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    e5b8:	68a7      	ldr	r7, [r4, #8]
    e5ba:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e5be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e5c2:	4873      	ldr	r0, [pc, #460]	; (e790 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    e5c4:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e5c6:	2601      	movs	r6, #1
    e5c8:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    e5cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e5d0:	fa06 f101 	lsl.w	r1, r6, r1
    e5d4:	6800      	ldr	r0, [r0, #0]
    e5d6:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    e5da:	f003 faef 	bl	11bbc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    e5de:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    e5e2:	b143      	cbz	r3, e5f6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    e5e4:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    e5e8:	b303      	cbz	r3, e62c <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    e5ea:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    e5ee:	429a      	cmp	r2, r3
    e5f0:	db1c      	blt.n	e62c <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    e5f2:	4293      	cmp	r3, r2
    e5f4:	d070      	beq.n	e6d8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    e5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    e5f8:	3b01      	subs	r3, #1
    e5fa:	b29b      	uxth	r3, r3
    e5fc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e600:	2b00      	cmp	r3, #0
    e602:	d1ec      	bne.n	e5de <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e604:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    e608:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e60c:	429a      	cmp	r2, r3
    e60e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e610:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e612:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e616:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e61a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e61e:	bf14      	ite	ne
    e620:	619a      	strne	r2, [r3, #24]
    e622:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e624:	230c      	movs	r3, #12
    e626:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e62a:	e7d8      	b.n	e5de <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    e62c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    e630:	bb5b      	cbnz	r3, e68a <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    e632:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    e636:	2b00      	cmp	r3, #0
    e638:	d14e      	bne.n	e6d8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    e63a:	4a56      	ldr	r2, [pc, #344]	; (e794 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e63c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e63e:	6813      	ldr	r3, [r2, #0]
    e640:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e642:	1a1b      	subs	r3, r3, r0
    e644:	428b      	cmp	r3, r1
    e646:	d3d6      	bcc.n	e5f6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    e648:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e64c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    e650:	6812      	ldr	r2, [r2, #0]
    e652:	6522      	str	r2, [r4, #80]	; 0x50
    e654:	fab3 f383 	clz	r3, r3
    e658:	095b      	lsrs	r3, r3, #5
    e65a:	428b      	cmp	r3, r1
    e65c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e65e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e662:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e666:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e66a:	f04f 020c 	mov.w	r2, #12
    e66e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    e672:	f04f 0001 	mov.w	r0, #1
    e676:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e678:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    e67c:	bf14      	ite	ne
    e67e:	619a      	strne	r2, [r3, #24]
    e680:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    e682:	2301      	movs	r3, #1
    e684:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    e68a:	4a42      	ldr	r2, [pc, #264]	; (e794 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e68c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e68e:	6813      	ldr	r3, [r2, #0]
    e690:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e692:	1a1b      	subs	r3, r3, r0
    e694:	428b      	cmp	r3, r1
    e696:	d3ae      	bcc.n	e5f6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    e698:	6812      	ldr	r2, [r2, #0]
    e69a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e69e:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    e6a0:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e6a2:	220c      	movs	r2, #12
                        m_pulseValue = false;
    e6a4:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e6a8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d15b      	bne.n	e768 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    e6b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e6b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e6b4:	01db      	lsls	r3, r3, #7
    e6b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e6ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e6be:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    e6c0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    e6c4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    e6c8:	3301      	adds	r3, #1
                        m_outState = false;
    e6ca:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    e6cc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    e6d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    e6d4:	2a00      	cmp	r2, #0
    e6d6:	d08e      	beq.n	e5f6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    e6d8:	2300      	movs	r3, #0
    e6da:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    e6de:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    e6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    e6e4:	4620      	mov	r0, r4
    e6e6:	f7f6 fa09 	bl	4afc <_ZN9ClearCore9DigitalIn7StateRTEv>
    e6ea:	2800      	cmp	r0, #0
    e6ec:	f47f af5d 	bne.w	e5aa <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    e6f0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    e6f4:	2b00      	cmp	r3, #0
    e6f6:	f43f af72 	beq.w	e5de <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e6fa:	3b01      	subs	r3, #1
    e6fc:	b2db      	uxtb	r3, r3
    e6fe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e702:	2b00      	cmp	r3, #0
    e704:	f47f af6b 	bne.w	e5de <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    e708:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e70c:	b9e6      	cbnz	r6, e748 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    e70e:	4a1f      	ldr	r2, [pc, #124]	; (e78c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e710:	491f      	ldr	r1, [pc, #124]	; (e790 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    e712:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    e716:	68a3      	ldr	r3, [r4, #8]
    e718:	680f      	ldr	r7, [r1, #0]
    e71a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    e71e:	2501      	movs	r5, #1
    e720:	4303      	orrs	r3, r0
    e722:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e726:	fa05 f101 	lsl.w	r1, r5, r1
    e72a:	4638      	mov	r0, r7
    e72c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e730:	462a      	mov	r2, r5
    e732:	f003 fa43 	bl	11bbc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    e736:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e73a:	fa05 f202 	lsl.w	r2, r5, r2
    e73e:	4638      	mov	r0, r7
    e740:	4631      	mov	r1, r6
    e742:	b2d2      	uxtb	r2, r2
    e744:	f003 f88e 	bl	11864 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e748:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e74c:	b9ab      	cbnz	r3, e77a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    e74e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e750:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e752:	01db      	lsls	r3, r3, #7
    e754:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e758:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e75c:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    e75e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e762:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e766:	e73a      	b.n	e5de <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e768:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e76a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e76c:	01db      	lsls	r3, r3, #7
    e76e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e772:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e776:	619a      	str	r2, [r3, #24]
    e778:	e7a2      	b.n	e6c0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    e77a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e77c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e77e:	01db      	lsls	r3, r3, #7
    e780:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e784:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e788:	619a      	str	r2, [r3, #24]
    e78a:	e7e8      	b.n	e75e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    e78c:	200019d8 	.word	0x200019d8
    e790:	20001f0c 	.word	0x20001f0c
    e794:	20001be8 	.word	0x20001be8

0000e798 <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    e798:	7983      	ldrb	r3, [r0, #6]
    e79a:	2b04      	cmp	r3, #4
    e79c:	d014      	beq.n	e7c8 <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    e79e:	2b06      	cmp	r3, #6
    e7a0:	d005      	beq.n	e7ae <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    e7a2:	2b02      	cmp	r3, #2
    e7a4:	d001      	beq.n	e7aa <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    e7a6:	2000      	movs	r0, #0
    e7a8:	4770      	bx	lr
            state = DigitalIn::State();
    e7aa:	f7f6 b859 	b.w	4860 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    e7ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e7b0:	b173      	cbz	r3, e7d0 <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e7b2:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    e7b6:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e7ba:	4413      	add	r3, r2
    e7bc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    e7c0:	b929      	cbnz	r1, e7ce <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e7c2:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    e7c6:	4770      	bx	lr
            state = m_outState;
    e7c8:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    e7cc:	4770      	bx	lr
    e7ce:	4770      	bx	lr
    int16_t state = -1;
    e7d0:	f04f 30ff 	mov.w	r0, #4294967295
}
    e7d4:	4770      	bx	lr
    e7d6:	bf00      	nop

0000e7d8 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e7d8:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e7da:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    e7dc:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e7de:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e7e0:	4604      	mov	r4, r0
    m_outState = false;
    e7e2:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e7e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e7ea:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e7ee:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e7f2:	d41a      	bmi.n	e82a <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e7f4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e7f6:	01d2      	lsls	r2, r2, #7
    e7f8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e7fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e800:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e804:	2004      	movs	r0, #4
    e806:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e80a:	f360 0203 	bfi	r2, r0, #0, #4
    e80e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e812:	4620      	mov	r0, r4
    e814:	f7f6 f838 	bl	4888 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e818:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e81a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e81c:	01db      	lsls	r3, r3, #7
    e81e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e822:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e826:	609a      	str	r2, [r3, #8]
    e828:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e82a:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e82c:	01c0      	lsls	r0, r0, #7
    e82e:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e832:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e836:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e83a:	2004      	movs	r0, #4
    e83c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e840:	f360 1307 	bfi	r3, r0, #4, #4
    e844:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e848:	e7e3      	b.n	e812 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e84a:	bf00      	nop

0000e84c <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e84c:	7980      	ldrb	r0, [r0, #6]
    e84e:	4770      	bx	lr

0000e850 <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e850:	2005      	movs	r0, #5
    e852:	4770      	bx	lr

0000e854 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e854:	7980      	ldrb	r0, [r0, #6]
    e856:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e858:	2804      	cmp	r0, #4
    e85a:	bf8c      	ite	hi
    e85c:	2000      	movhi	r0, #0
    e85e:	2001      	movls	r0, #1
    e860:	4770      	bx	lr
    e862:	bf00      	nop

0000e864 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e864:	b5f0      	push	{r4, r5, r6, r7, lr}
    e866:	b083      	sub	sp, #12
    e868:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e86c:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e86e:	4604      	mov	r4, r0
    e870:	9d08      	ldr	r5, [sp, #32]
    e872:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e874:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e878:	f7ff fe52 	bl	e520 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e87c:	2300      	movs	r3, #0
    e87e:	490f      	ldr	r1, [pc, #60]	; (e8bc <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e880:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e884:	f640 42cc 	movw	r2, #3276	; 0xccc
    e888:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e88c:	6663      	str	r3, [r4, #100]	; 0x64
    e88e:	66a3      	str	r3, [r4, #104]	; 0x68
    e890:	66e3      	str	r3, [r4, #108]	; 0x6c
    e892:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e896:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e89a:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e89e:	6765      	str	r5, [r4, #116]	; 0x74
    e8a0:	67a6      	str	r6, [r4, #120]	; 0x78
    e8a2:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e8a6:	6021      	str	r1, [r4, #0]
    e8a8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e8ac:	7b2a      	ldrb	r2, [r5, #12]
    e8ae:	4b04      	ldr	r3, [pc, #16]	; (e8c0 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e8b4:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e8b6:	4620      	mov	r0, r4
    e8b8:	b003      	add	sp, #12
    e8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8bc:	0002345c 	.word	0x0002345c
    e8c0:	00023484 	.word	0x00023484

0000e8c4 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e8c4:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    e8c6:	6803      	ldr	r3, [r0, #0]
    e8c8:	4a12      	ldr	r2, [pc, #72]	; (e914 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    e8ca:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    e8cc:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    e8d0:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e8d2:	b082      	sub	sp, #8
    e8d4:	4604      	mov	r4, r0
    e8d6:	d115      	bne.n	e904 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    e8d8:	7980      	ldrb	r0, [r0, #6]
    e8da:	2808      	cmp	r0, #8
    e8dc:	d805      	bhi.n	e8ea <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    e8de:	2301      	movs	r3, #1
    e8e0:	fa03 f000 	lsl.w	r0, r3, r0
    e8e4:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    e8e8:	d101      	bne.n	e8ee <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    e8ea:	b002      	add	sp, #8
    e8ec:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e8ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e8f2:	01db      	lsls	r3, r3, #7
    e8f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e8f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e8fc:	b131      	cbz	r1, e90c <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    e8fe:	615a      	str	r2, [r3, #20]
}
    e900:	b002      	add	sp, #8
    e902:	bd10      	pop	{r4, pc}
    e904:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    e906:	4798      	blx	r3
    e908:	9901      	ldr	r1, [sp, #4]
    e90a:	e7e6      	b.n	e8da <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e90c:	619a      	str	r2, [r3, #24]
}
    e90e:	b002      	add	sp, #8
    e910:	bd10      	pop	{r4, pc}
    e912:	bf00      	nop
    e914:	0000e84d 	.word	0x0000e84d

0000e918 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    e918:	7982      	ldrb	r2, [r0, #6]
    e91a:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    e91c:	4601      	mov	r1, r0
    e91e:	d808      	bhi.n	e932 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    e920:	2301      	movs	r3, #1
    e922:	4093      	lsls	r3, r2
    e924:	f013 0f54 	tst.w	r3, #84	; 0x54
    e928:	d112      	bne.n	e950 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    e92a:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    e92e:	d102      	bne.n	e936 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    e930:	4770      	bx	lr
            state = 0;
    e932:	2000      	movs	r0, #0
}
    e934:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e936:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e938:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e93a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e93e:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e942:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    e946:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    e94a:	f340 004f 	sbfx	r0, r0, #1, #16
    e94e:	4770      	bx	lr
            state = DigitalInOut::State();
    e950:	f7ff bf22 	b.w	e798 <_ZN9ClearCore12DigitalInOut5StateEv>

0000e954 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    e954:	b510      	push	{r4, lr}
    switch (m_mode) {
    e956:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e958:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    e95a:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e95c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    e95e:	2b05      	cmp	r3, #5
    e960:	d82a      	bhi.n	e9b8 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    e962:	e8df f003 	tbb	[pc, r3]
    e966:	2925      	.short	0x2925
    e968:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    e96c:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e96e:	4b13      	ldr	r3, [pc, #76]	; (e9bc <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    e970:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    e974:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e978:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e97a:	bf1b      	ittet	ne
    e97c:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    e980:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    e984:	20ff      	moveq	r0, #255	; 0xff
    e986:	11c0      	asrne	r0, r0, #7
    e988:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e98c:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e990:	4b0b      	ldr	r3, [pc, #44]	; (e9c0 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    e992:	fb01 f102 	mul.w	r1, r1, r2
    e996:	fb83 0301 	smull	r0, r3, r3, r1
    e99a:	440b      	add	r3, r1
    e99c:	139b      	asrs	r3, r3, #14
    e99e:	17c9      	asrs	r1, r1, #31
    e9a0:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9a2:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e9a4:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9a6:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e9a8:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9aa:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    e9ac:	2001      	movs	r0, #1
            break;
    e9ae:	bd10      	pop	{r4, pc}
}
    e9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    e9b4:	f7ff bc46 	b.w	e244 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e9b8:	2000      	movs	r0, #0
}
    e9ba:	bd10      	pop	{r4, pc}
    e9bc:	200019d8 	.word	0x200019d8
    e9c0:	80010003 	.word	0x80010003

0000e9c4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e9c4:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    e9c8:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e9cc:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    e9d0:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e9d2:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e9d4:	b302      	cbz	r2, ea18 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e9d6:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    e9da:	2a04      	cmp	r2, #4
    e9dc:	d01c      	beq.n	ea18 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e9de:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    e9e0:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    e9e4:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    e9e6:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    e9ea:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    e9ec:	f004 fd04 	bl	133f8 <arm_sin_q15>
    e9f0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    e9f4:	4b41      	ldr	r3, [pc, #260]	; (eafc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e9f6:	fb11 f100 	smulbb	r1, r1, r0
    e9fa:	429d      	cmp	r5, r3
    e9fc:	f341 31cf 	sbfx	r1, r1, #15, #16
    ea00:	d177      	bne.n	eaf2 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    ea02:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ea04:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    ea06:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ea08:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    ea0a:	2b05      	cmp	r3, #5
    ea0c:	d81e      	bhi.n	ea4c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    ea0e:	e8df f003 	tbb	[pc, r3]
    ea12:	1d6b      	.short	0x1d6b
    ea14:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    ea18:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    ea1a:	2a07      	cmp	r2, #7
    ea1c:	d017      	beq.n	ea4e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    ea1e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    ea20:	4c36      	ldr	r4, [pc, #216]	; (eafc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    ea22:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    ea24:	f043 0301 	orr.w	r3, r3, #1
    ea28:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    ea2a:	6803      	ldr	r3, [r0, #0]
    ea2c:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    ea2e:	2500      	movs	r5, #0
    ea30:	42a3      	cmp	r3, r4
    ea32:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    ea36:	d132      	bne.n	ea9e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ea38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    ea3a:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ea3c:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    ea3e:	2a04      	cmp	r2, #4
    ea40:	d804      	bhi.n	ea4c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    ea42:	e8df f002 	tbb	[pc, r2]
    ea46:	0327      	.short	0x0327
    ea48:	1b27      	.short	0x1b27
    ea4a:	27          	.byte	0x27
    ea4b:	00          	.byte	0x00
    ea4c:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    ea4e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    ea52:	4293      	cmp	r3, r2
    ea54:	ddc3      	ble.n	e9de <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    ea56:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    ea58:	4a28      	ldr	r2, [pc, #160]	; (eafc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    ea5a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    ea5c:	f043 0301 	orr.w	r3, r3, #1
    ea60:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    ea62:	6803      	ldr	r3, [r0, #0]
    ea64:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    ea66:	2400      	movs	r4, #0
    ea68:	4293      	cmp	r3, r2
    ea6a:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    ea6e:	d116      	bne.n	ea9e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ea70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    ea72:	085b      	lsrs	r3, r3, #1
    ea74:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ea76:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ea78:	674b      	str	r3, [r1, #116]	; 0x74
    ea7a:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    ea7c:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ea7e:	4a20      	ldr	r2, [pc, #128]	; (eb00 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    ea80:	f000 000f 	and.w	r0, r0, #15
    ea84:	4402      	add	r2, r0
    ea86:	b29b      	uxth	r3, r3
    ea88:	2000      	movs	r0, #0
    ea8a:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ea8e:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ea90:	674b      	str	r3, [r1, #116]	; 0x74
    ea92:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    ea94:	2100      	movs	r1, #0
}
    ea96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    ea9a:	f7ff bbd3 	b.w	e244 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    ea9e:	2100      	movs	r1, #0
}
    eaa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    eaa4:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    eaa6:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    eaa8:	4b15      	ldr	r3, [pc, #84]	; (eb00 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    eaaa:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    eaae:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    eab2:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    eab4:	bf1b      	ittet	ne
    eab6:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    eaba:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    eabe:	24ff      	moveq	r4, #255	; 0xff
    eac0:	11e4      	asrne	r4, r4, #7
    eac2:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eac6:	f3c2 024f 	ubfx	r2, r2, #1, #16
    eaca:	4b0e      	ldr	r3, [pc, #56]	; (eb04 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    eacc:	fb01 f102 	mul.w	r1, r1, r2
    ead0:	fb83 4301 	smull	r4, r3, r3, r1
    ead4:	440b      	add	r3, r1
    ead6:	139b      	asrs	r3, r3, #14
    ead8:	17c9      	asrs	r1, r1, #31
    eada:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eadc:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eade:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eae0:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eae2:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eae4:	6741      	str	r1, [r0, #116]	; 0x74
    eae6:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    eae8:	4620      	mov	r0, r4
}
    eaea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    eaee:	f7ff bba9 	b.w	e244 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    eaf2:	4620      	mov	r0, r4
    eaf4:	462b      	mov	r3, r5
}
    eaf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    eafa:	4718      	bx	r3
    eafc:	0000e955 	.word	0x0000e955
    eb00:	200019d8 	.word	0x200019d8
    eb04:	80010003 	.word	0x80010003

0000eb08 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    eb08:	7983      	ldrb	r3, [r0, #6]
    eb0a:	3b02      	subs	r3, #2
    eb0c:	2b05      	cmp	r3, #5
    eb0e:	d804      	bhi.n	eb1a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    eb10:	e8df f003 	tbb	[pc, r3]
    eb14:	03040304 	.word	0x03040304
    eb18:	0604      	.short	0x0604
    eb1a:	4770      	bx	lr
            DigitalInOut::Refresh();
    eb1c:	f7ff bd36 	b.w	e58c <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    eb20:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    eb24:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    eb26:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    eb28:	d02c      	beq.n	eb84 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    eb2a:	2b04      	cmp	r3, #4
    eb2c:	d003      	beq.n	eb36 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    eb2e:	2b02      	cmp	r3, #2
    eb30:	d04c      	beq.n	ebcc <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    eb32:	bcf0      	pop	{r4, r5, r6, r7}
    eb34:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    eb36:	4937      	ldr	r1, [pc, #220]	; (ec14 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    eb38:	6e44      	ldr	r4, [r0, #100]	; 0x64
    eb3a:	680b      	ldr	r3, [r1, #0]
    eb3c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    eb3e:	1b1b      	subs	r3, r3, r4
    eb40:	4293      	cmp	r3, r2
    eb42:	d9f6      	bls.n	eb32 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    eb44:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    eb46:	2303      	movs	r3, #3
    eb48:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    eb4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb4e:	4b32      	ldr	r3, [pc, #200]	; (ec18 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    eb50:	f042 0201 	orr.w	r2, r2, #1
    eb54:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    eb56:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    eb58:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    eb5a:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eb5c:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    eb60:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    eb64:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb66:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eb6a:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb6c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eb70:	408a      	lsls	r2, r1
    eb72:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    eb74:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb76:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eb7a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    eb7e:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    eb82:	e7d6      	b.n	eb32 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    eb84:	4923      	ldr	r1, [pc, #140]	; (ec14 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    eb86:	6e44      	ldr	r4, [r0, #100]	; 0x64
    eb88:	680b      	ldr	r3, [r1, #0]
    eb8a:	6e82      	ldr	r2, [r0, #104]	; 0x68
    eb8c:	1b1b      	subs	r3, r3, r4
    eb8e:	4293      	cmp	r3, r2
    eb90:	d9cf      	bls.n	eb32 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb92:	4a21      	ldr	r2, [pc, #132]	; (ec18 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    eb94:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    eb96:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    eb98:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb9a:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb9e:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    eba2:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eba4:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eba8:	2101      	movs	r1, #1
    ebaa:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebb0:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    ebb4:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    ebb6:	ea24 0406 	bic.w	r4, r4, r6
    ebba:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebbe:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebc2:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ebc6:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    ebca:	e7b2      	b.n	eb32 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ebcc:	4b11      	ldr	r3, [pc, #68]	; (ec14 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ebce:	6e41      	ldr	r1, [r0, #100]	; 0x64
    ebd0:	681b      	ldr	r3, [r3, #0]
    ebd2:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ebd4:	1a5b      	subs	r3, r3, r1
    ebd6:	4293      	cmp	r3, r2
    ebd8:	d9ab      	bls.n	eb32 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebda:	4a0f      	ldr	r2, [pc, #60]	; (ec18 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ebdc:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ebde:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    ebe0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebe4:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebe8:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebec:	2501      	movs	r5, #1
    ebee:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ebf4:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    ebf8:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    ebfc:	2500      	movs	r5, #0
    ebfe:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    ec02:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec06:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec0a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec0e:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    ec12:	e78e      	b.n	eb32 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    ec14:	20001be8 	.word	0x20001be8
    ec18:	200019d8 	.word	0x200019d8

0000ec1c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    ec1c:	b570      	push	{r4, r5, r6, lr}
    ec1e:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    ec20:	f7ff fdda 	bl	e7d8 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    ec24:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    ec26:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    ec28:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    ec2c:	6813      	ldr	r3, [r2, #0]
    ec2e:	f043 0301 	orr.w	r3, r3, #1
    ec32:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    ec34:	6893      	ldr	r3, [r2, #8]
    ec36:	f013 0301 	ands.w	r3, r3, #1
    ec3a:	d1fb      	bne.n	ec34 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ec3c:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    ec3e:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ec40:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ec42:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ec44:	4b24      	ldr	r3, [pc, #144]	; (ecd8 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    ec46:	4e25      	ldr	r6, [pc, #148]	; (ecdc <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    ec48:	4825      	ldr	r0, [pc, #148]	; (ece0 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ec4a:	f045 0502 	orr.w	r5, r5, #2
    ec4e:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    ec50:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    ec52:	f045 0505 	orr.w	r5, r5, #5
    ec56:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    ec58:	6a55      	ldr	r5, [r2, #36]	; 0x24
    ec5a:	430d      	orrs	r5, r1
    ec5c:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ec5e:	681b      	ldr	r3, [r3, #0]
    ec60:	fba6 5303 	umull	r5, r3, r6, r3
    ec64:	0bdb      	lsrs	r3, r3, #15
    ec66:	3b01      	subs	r3, #1
    ec68:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    ec6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    ec6c:	6453      	str	r3, [r2, #68]	; 0x44
    ec6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    ec70:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    ec72:	6f63      	ldr	r3, [r4, #116]	; 0x74
    ec74:	f993 2001 	ldrsb.w	r2, [r3, #1]
    ec78:	789d      	ldrb	r5, [r3, #2]
    ec7a:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    ec7e:	fa01 f605 	lsl.w	r6, r1, r5
    ec82:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    ec84:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    ec86:	f994 3001 	ldrsb.w	r3, [r4, #1]
    ec8a:	78a4      	ldrb	r4, [r4, #2]
    ec8c:	01db      	lsls	r3, r3, #7
    ec8e:	4418      	add	r0, r3
    ec90:	40a1      	lsls	r1, r4
    ec92:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    ec94:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ec96:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    ec9a:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ec9c:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eca0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eca4:	2005      	movs	r0, #5
    eca6:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eca8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ecac:	bf4c      	ite	mi
    ecae:	f360 1107 	bfimi	r1, r0, #4, #4
    ecb2:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ecb6:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ecba:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ecbe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    ecc2:	2105      	movs	r1, #5
    ecc4:	07e0      	lsls	r0, r4, #31
    ecc6:	bf4c      	ite	mi
    ecc8:	f361 1207 	bfimi	r2, r1, #4, #4
    eccc:	f361 0203 	bfipl	r2, r1, #0, #4
    ecd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ecd4:	bd70      	pop	{r4, r5, r6, pc}
    ecd6:	bf00      	nop
    ecd8:	200000e0 	.word	0x200000e0
    ecdc:	be37c63b 	.word	0xbe37c63b
    ece0:	41008000 	.word	0x41008000

0000ece4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    ece4:	7982      	ldrb	r2, [r0, #6]
    ece6:	428a      	cmp	r2, r1
    ece8:	d07a      	beq.n	ede0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    ecea:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    ecec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecee:	460d      	mov	r5, r1
    ecf0:	d867      	bhi.n	edc2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    ecf2:	2201      	movs	r2, #1
    ecf4:	fa02 f301 	lsl.w	r3, r2, r1
    ecf8:	f013 0f54 	tst.w	r3, #84	; 0x54
    ecfc:	4604      	mov	r4, r0
    ecfe:	d171      	bne.n	ede4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    ed00:	f413 7f90 	tst.w	r3, #288	; 0x120
    ed04:	d05f      	beq.n	edc6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    ed06:	7901      	ldrb	r1, [r0, #4]
    ed08:	4a5d      	ldr	r2, [pc, #372]	; (ee80 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    ed0a:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ed0e:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    ed12:	2b00      	cmp	r3, #0
    ed14:	f040 809e 	bne.w	ee54 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    ed18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ed1c:	01db      	lsls	r3, r3, #7
    ed1e:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ed22:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ed26:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    ed28:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ed2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ed2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ed32:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ed34:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    ed38:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ed3c:	f36f 0000 	bfc	r0, #0, #1
    ed40:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    ed44:	68a3      	ldr	r3, [r4, #8]
    ed46:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ed4a:	2d05      	cmp	r5, #5
    ed4c:	f000 808b 	beq.w	ee66 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    ed50:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ed54:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ed58:	2701      	movs	r7, #1
    ed5a:	fa07 f101 	lsl.w	r1, r7, r1
    ed5e:	ea20 0101 	bic.w	r1, r0, r1
    ed62:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ed66:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ed6a:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ed6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    ed70:	f991 3001 	ldrsb.w	r3, [r1, #1]
    ed74:	4a43      	ldr	r2, [pc, #268]	; (ee84 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ed76:	7889      	ldrb	r1, [r1, #2]
    ed78:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ed7c:	440b      	add	r3, r1
    ed7e:	2101      	movs	r1, #1
    ed80:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ed84:	4308      	orrs	r0, r1
    ed86:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ed8a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    ed8c:	f990 3001 	ldrsb.w	r3, [r0, #1]
    ed90:	7880      	ldrb	r0, [r0, #2]
    ed92:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ed96:	4403      	add	r3, r0
    ed98:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ed9c:	430a      	orrs	r2, r1
    ed9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    eda2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    eda4:	6813      	ldr	r3, [r2, #0]
    eda6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    edaa:	428b      	cmp	r3, r1
    edac:	d006      	beq.n	edbc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    edae:	6813      	ldr	r3, [r2, #0]
    edb0:	f361 0341 	bfi	r3, r1, #1, #1
    edb4:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    edb6:	6893      	ldr	r3, [r2, #8]
    edb8:	079b      	lsls	r3, r3, #30
    edba:	d4fc      	bmi.n	edb6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    edbc:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    edbe:	2001      	movs	r0, #1
    edc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    edc2:	2000      	movs	r0, #0
    edc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edc6:	061a      	lsls	r2, r3, #24
    edc8:	d5fb      	bpl.n	edc2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    edca:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    edcc:	4a2c      	ldr	r2, [pc, #176]	; (ee80 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    edce:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    edd2:	f001 010f 	and.w	r1, r1, #15
    edd6:	1850      	adds	r0, r2, r1
    edd8:	11db      	asrs	r3, r3, #7
    edda:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    edde:	e796      	b.n	ed0e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    ede0:	2001      	movs	r0, #1
    ede2:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ede4:	4f26      	ldr	r7, [pc, #152]	; (ee80 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    ede6:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ede8:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    edec:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    edf0:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    edf4:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    edf8:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    edfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    edfe:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ee02:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ee06:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ee0a:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ee0e:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    ee12:	f7ff fa73 	bl	e2fc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    ee16:	2800      	cmp	r0, #0
    ee18:	d0d3      	beq.n	edc2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ee1a:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ee1c:	4b19      	ldr	r3, [pc, #100]	; (ee84 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ee1e:	f991 2001 	ldrsb.w	r2, [r1, #1]
    ee22:	7889      	ldrb	r1, [r1, #2]
    ee24:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    ee28:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ee2a:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ee2c:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    ee30:	f36f 0000 	bfc	r0, #0, #1
    ee34:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ee38:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    ee3a:	f992 0001 	ldrsb.w	r0, [r2, #1]
    ee3e:	7892      	ldrb	r2, [r2, #2]
    ee40:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    ee44:	4413      	add	r3, r2
    ee46:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ee4a:	f36f 0200 	bfc	r2, #0, #1
    ee4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ee52:	e7a6      	b.n	eda2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ee54:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ee58:	01db      	lsls	r3, r3, #7
    ee5a:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ee5e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ee62:	6146      	str	r6, [r0, #20]
    ee64:	e760      	b.n	ed28 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ee66:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ee6a:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ee6e:	2601      	movs	r6, #1
    ee70:	fa06 f101 	lsl.w	r1, r6, r1
    ee74:	4339      	orrs	r1, r7
    ee76:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ee7a:	4303      	orrs	r3, r0
    ee7c:	e775      	b.n	ed6a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    ee7e:	bf00      	nop
    ee80:	200019d8 	.word	0x200019d8
    ee84:	41008000 	.word	0x41008000

0000ee88 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ee88:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ee8a:	4c07      	ldr	r4, [pc, #28]	; (eea8 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ee8c:	6823      	ldr	r3, [r4, #0]
    ee8e:	07db      	lsls	r3, r3, #31
    ee90:	d502      	bpl.n	ee98 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ee92:	4b06      	ldr	r3, [pc, #24]	; (eeac <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ee94:	6818      	ldr	r0, [r3, #0]
    ee96:	bd10      	pop	{r4, pc}
    ee98:	2001      	movs	r0, #1
    ee9a:	f004 fac9 	bl	13430 <_Znwj>
    ee9e:	4a03      	ldr	r2, [pc, #12]	; (eeac <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    eea0:	2301      	movs	r3, #1
    eea2:	6010      	str	r0, [r2, #0]
    eea4:	6023      	str	r3, [r4, #0]
    return *instance;
}
    eea6:	bd10      	pop	{r4, pc}
    eea8:	20001e2c 	.word	0x20001e2c
    eeac:	20001ef4 	.word	0x20001ef4

0000eeb0 <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    eeb0:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    eeb2:	4a13      	ldr	r2, [pc, #76]	; (ef00 <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    eeb4:	4913      	ldr	r1, [pc, #76]	; (ef04 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    eeb6:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    eeb8:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    eeba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    eebe:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    eec0:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    eec2:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    eec4:	8813      	ldrh	r3, [r2, #0]
    eec6:	b29b      	uxth	r3, r3
    eec8:	2b01      	cmp	r3, #1
    eeca:	d0fb      	beq.n	eec4 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    eecc:	4b0e      	ldr	r3, [pc, #56]	; (ef08 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    eece:	4d0f      	ldr	r5, [pc, #60]	; (ef0c <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    eed0:	4c0f      	ldr	r4, [pc, #60]	; (ef10 <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    eed2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eed6:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    eed8:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    eedc:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eee0:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    eee4:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    eee6:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    eee8:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    eeea:	7b51      	ldrb	r1, [r2, #13]
    eeec:	f041 0101 	orr.w	r1, r1, #1
    eef0:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    eef2:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    eef4:	6913      	ldr	r3, [r2, #16]
    eef6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    eefa:	6113      	str	r3, [r2, #16]
}
    eefc:	bc70      	pop	{r4, r5, r6}
    eefe:	4770      	bx	lr
    ef00:	40000800 	.word	0x40000800
    ef04:	4100a000 	.word	0x4100a000
    ef08:	e000e100 	.word	0xe000e100
    ef0c:	20001e30 	.word	0x20001e30
    ef10:	20001e90 	.word	0x20001e90

0000ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ef14:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    ef16:	bfda      	itte	le
    ef18:	4b02      	ldrle	r3, [pc, #8]	; (ef24 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    ef1a:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ef1e:	2000      	movgt	r0, #0
}
    ef20:	4770      	bx	lr
    ef22:	bf00      	nop
    ef24:	4100a040 	.word	0x4100a040

0000ef28 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ef28:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    ef2a:	bfda      	itte	le
    ef2c:	4b02      	ldrle	r3, [pc, #8]	; (ef38 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    ef2e:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    ef32:	2000      	movgt	r0, #0
}
    ef34:	4770      	bx	lr
    ef36:	bf00      	nop
    ef38:	20001e30 	.word	0x20001e30

0000ef3c <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    ef3c:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    ef3e:	f7ff ffa3 	bl	ee88 <_ZN9ClearCore10DmaManager8InstanceEv>
    ef42:	4b01      	ldr	r3, [pc, #4]	; (ef48 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    ef44:	6018      	str	r0, [r3, #0]
    ef46:	bd08      	pop	{r3, pc}
    ef48:	20001ef0 	.word	0x20001ef0

0000ef4c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    ef4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef50:	4604      	mov	r4, r0
    ef52:	4267      	negs	r7, r4
    ef54:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    ef58:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    ef5c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    ef60:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    ef64:	4608      	mov	r0, r1
    ef66:	ea4f 0999 	mov.w	r9, r9, lsr #2
    ef6a:	2101      	movs	r1, #1
    ef6c:	f001 ff84 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    ef70:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    ef74:	2600      	movs	r6, #0
    bool sendData = true;
    ef76:	2201      	movs	r2, #1
    ef78:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ef7c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    ef80:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    ef84:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    ef86:	4690      	mov	r8, r2
    ef88:	2b02      	cmp	r3, #2
    ef8a:	f000 821b 	beq.w	f3c4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    ef8e:	2d03      	cmp	r5, #3
    ef90:	f300 8159 	bgt.w	f246 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    ef94:	b1a3      	cbz	r3, efc0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    ef96:	2b01      	cmp	r3, #1
    ef98:	d1fc      	bne.n	ef94 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    ef9a:	b1da      	cbz	r2, efd4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    ef9c:	2e00      	cmp	r6, #0
    ef9e:	f040 808d 	bne.w	f0bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    efa2:	6026      	str	r6, [r4, #0]
    efa4:	6066      	str	r6, [r4, #4]
    efa6:	60a6      	str	r6, [r4, #8]
    efa8:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    efaa:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    efac:	f104 0212 	add.w	r2, r4, #18
    efb0:	4621      	mov	r1, r4
    efb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    efb4:	f002 f80a 	bl	10fcc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    efb8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    efbc:	2200      	movs	r2, #0
    efbe:	e7e3      	b.n	ef88 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    efc0:	2a00      	cmp	r2, #0
    efc2:	d053      	beq.n	f06c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    efc4:	f04f 33ff 	mov.w	r3, #4294967295
    efc8:	6023      	str	r3, [r4, #0]
    efca:	6063      	str	r3, [r4, #4]
    efcc:	60a3      	str	r3, [r4, #8]
    efce:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    efd0:	2310      	movs	r3, #16
    efd2:	e7eb      	b.n	efac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    efd4:	2e00      	cmp	r6, #0
    efd6:	f040 80a2 	bne.w	f11e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    efda:	7ca2      	ldrb	r2, [r4, #18]
    efdc:	2aff      	cmp	r2, #255	; 0xff
    efde:	f040 8128 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    efe2:	7ce2      	ldrb	r2, [r4, #19]
    efe4:	2aff      	cmp	r2, #255	; 0xff
    efe6:	f040 8124 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    efea:	7d22      	ldrb	r2, [r4, #20]
    efec:	2aff      	cmp	r2, #255	; 0xff
    efee:	f040 8120 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eff2:	7d62      	ldrb	r2, [r4, #21]
    eff4:	2aff      	cmp	r2, #255	; 0xff
    eff6:	f040 811c 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    effa:	7da2      	ldrb	r2, [r4, #22]
    effc:	2aff      	cmp	r2, #255	; 0xff
    effe:	f040 8118 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f002:	7de2      	ldrb	r2, [r4, #23]
    f004:	2aff      	cmp	r2, #255	; 0xff
    f006:	f040 8114 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f00a:	7e22      	ldrb	r2, [r4, #24]
    f00c:	2aff      	cmp	r2, #255	; 0xff
    f00e:	f040 8110 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f012:	7e62      	ldrb	r2, [r4, #25]
    f014:	2aff      	cmp	r2, #255	; 0xff
    f016:	f040 810c 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f01a:	7ea2      	ldrb	r2, [r4, #26]
    f01c:	2aff      	cmp	r2, #255	; 0xff
    f01e:	f040 8108 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f022:	7ee2      	ldrb	r2, [r4, #27]
    f024:	2aff      	cmp	r2, #255	; 0xff
    f026:	f040 8104 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f02a:	7f22      	ldrb	r2, [r4, #28]
    f02c:	2aff      	cmp	r2, #255	; 0xff
    f02e:	f040 8100 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f032:	7f62      	ldrb	r2, [r4, #29]
    f034:	2aff      	cmp	r2, #255	; 0xff
    f036:	f040 80fc 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f03a:	7fa2      	ldrb	r2, [r4, #30]
    f03c:	2aff      	cmp	r2, #255	; 0xff
    f03e:	f040 80f8 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f042:	7fe2      	ldrb	r2, [r4, #31]
    f044:	2aff      	cmp	r2, #255	; 0xff
    f046:	f040 80f4 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f04a:	f894 2020 	ldrb.w	r2, [r4, #32]
    f04e:	2aff      	cmp	r2, #255	; 0xff
    f050:	f040 80ef 	bne.w	f232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f054:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    f058:	3eff      	subs	r6, #255	; 0xff
    f05a:	bf18      	it	ne
    f05c:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    f05e:	3501      	adds	r5, #1
    f060:	b2ed      	uxtb	r5, r5
    f062:	2d03      	cmp	r5, #3
    f064:	f04f 0201 	mov.w	r2, #1
    f068:	dd94      	ble.n	ef94 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    f06a:	e0ec      	b.n	f246 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    f06c:	7ca2      	ldrb	r2, [r4, #18]
    f06e:	bb02      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f070:	7ce2      	ldrb	r2, [r4, #19]
    f072:	b9f2      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f074:	7d22      	ldrb	r2, [r4, #20]
    f076:	b9e2      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f078:	7d62      	ldrb	r2, [r4, #21]
    f07a:	b9d2      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f07c:	7da2      	ldrb	r2, [r4, #22]
    f07e:	b9c2      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f080:	7de2      	ldrb	r2, [r4, #23]
    f082:	b9b2      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f084:	7e22      	ldrb	r2, [r4, #24]
    f086:	b9a2      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f088:	7e62      	ldrb	r2, [r4, #25]
    f08a:	b992      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f08c:	7ea2      	ldrb	r2, [r4, #26]
    f08e:	b982      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f090:	7ee2      	ldrb	r2, [r4, #27]
    f092:	b972      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f094:	7f22      	ldrb	r2, [r4, #28]
    f096:	b962      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f098:	7f62      	ldrb	r2, [r4, #29]
    f09a:	b952      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f09c:	7fa2      	ldrb	r2, [r4, #30]
    f09e:	b942      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f0a0:	7fe2      	ldrb	r2, [r4, #31]
    f0a2:	b932      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f0a4:	f894 2020 	ldrb.w	r2, [r4, #32]
    f0a8:	b91a      	cbnz	r2, f0b2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f0aa:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    f0ae:	2a00      	cmp	r2, #0
    f0b0:	d0d5      	beq.n	f05e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    f0b2:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    f0b6:	2501      	movs	r5, #1
                        flush0Success = false;
    f0b8:	2600      	movs	r6, #0
    f0ba:	e772      	b.n	efa2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    f0bc:	2f00      	cmp	r7, #0
    f0be:	f000 80ba 	beq.w	f236 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    f0c2:	23aa      	movs	r3, #170	; 0xaa
    f0c4:	2f01      	cmp	r7, #1
    f0c6:	7023      	strb	r3, [r4, #0]
    f0c8:	f104 0101 	add.w	r1, r4, #1
    f0cc:	f000 80db 	beq.w	f286 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    f0d0:	2f02      	cmp	r7, #2
    f0d2:	7063      	strb	r3, [r4, #1]
    f0d4:	f104 0102 	add.w	r1, r4, #2
    f0d8:	f000 80d3 	beq.w	f282 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    f0dc:	70a3      	strb	r3, [r4, #2]
    f0de:	1ce1      	adds	r1, r4, #3
    f0e0:	220e      	movs	r2, #14
    f0e2:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    f0e6:	51e3      	str	r3, [r4, r7]
    f0e8:	19e3      	adds	r3, r4, r7
    f0ea:	3304      	adds	r3, #4
    f0ec:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    f0f0:	f1b9 0f03 	cmp.w	r9, #3
    f0f4:	6018      	str	r0, [r3, #0]
    f0f6:	6058      	str	r0, [r3, #4]
    f0f8:	d000      	beq.n	f0fc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    f0fa:	6098      	str	r0, [r3, #8]
    f0fc:	45d3      	cmp	fp, sl
    f0fe:	eba2 020a 	sub.w	r2, r2, sl
    f102:	eb01 000a 	add.w	r0, r1, sl
    f106:	d008      	beq.n	f11a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f108:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    f10a:	2a01      	cmp	r2, #1
            *buf++ = val;
    f10c:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    f110:	d003      	beq.n	f11a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f112:	2a02      	cmp	r2, #2
            *buf++ = val;
    f114:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    f116:	d000      	beq.n	f11a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    f118:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    f11a:	2311      	movs	r3, #17
    f11c:	e746      	b.n	efac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    f11e:	7ca1      	ldrb	r1, [r4, #18]
    f120:	29aa      	cmp	r1, #170	; 0xaa
    f122:	f000 80aa 	beq.w	f27a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    f126:	7ce2      	ldrb	r2, [r4, #19]
    f128:	2aaa      	cmp	r2, #170	; 0xaa
    f12a:	d040      	beq.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f12c:	7d23      	ldrb	r3, [r4, #20]
    f12e:	2baa      	cmp	r3, #170	; 0xaa
    f130:	f000 80a5 	beq.w	f27e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    f134:	7d63      	ldrb	r3, [r4, #21]
    f136:	2baa      	cmp	r3, #170	; 0xaa
    f138:	f000 80a7 	beq.w	f28a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    f13c:	7da3      	ldrb	r3, [r4, #22]
    f13e:	2baa      	cmp	r3, #170	; 0xaa
    f140:	f000 8118 	beq.w	f374 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    f144:	7de3      	ldrb	r3, [r4, #23]
    f146:	2baa      	cmp	r3, #170	; 0xaa
    f148:	f000 80a1 	beq.w	f28e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    f14c:	7e23      	ldrb	r3, [r4, #24]
    f14e:	2baa      	cmp	r3, #170	; 0xaa
    f150:	f000 8112 	beq.w	f378 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    f154:	7e63      	ldrb	r3, [r4, #25]
    f156:	2baa      	cmp	r3, #170	; 0xaa
    f158:	f000 8110 	beq.w	f37c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    f15c:	7ea3      	ldrb	r3, [r4, #26]
    f15e:	2baa      	cmp	r3, #170	; 0xaa
    f160:	f000 810e 	beq.w	f380 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    f164:	7ee3      	ldrb	r3, [r4, #27]
    f166:	2baa      	cmp	r3, #170	; 0xaa
    f168:	f000 8102 	beq.w	f370 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    f16c:	7f23      	ldrb	r3, [r4, #28]
    f16e:	2baa      	cmp	r3, #170	; 0xaa
    f170:	f000 8108 	beq.w	f384 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    f174:	7f63      	ldrb	r3, [r4, #29]
    f176:	2baa      	cmp	r3, #170	; 0xaa
    f178:	f000 811c 	beq.w	f3b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    f17c:	7fa3      	ldrb	r3, [r4, #30]
    f17e:	2baa      	cmp	r3, #170	; 0xaa
    f180:	f000 811a 	beq.w	f3b8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    f184:	7fe3      	ldrb	r3, [r4, #31]
    f186:	2baa      	cmp	r3, #170	; 0xaa
    f188:	f000 8118 	beq.w	f3bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    f18c:	f894 3020 	ldrb.w	r3, [r4, #32]
    f190:	2baa      	cmp	r3, #170	; 0xaa
    f192:	f000 8115 	beq.w	f3c0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    f196:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f19a:	2baa      	cmp	r3, #170	; 0xaa
    f19c:	f000 8108 	beq.w	f3b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    f1a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f1a4:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    f1a6:	bf08      	it	eq
    f1a8:	2310      	moveq	r3, #16
                        if (!foundAA &&
    f1aa:	f040 80ed 	bne.w	f388 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    f1ae:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    f1b0:	2502      	movs	r5, #2
    f1b2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    f1b6:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    f1b8:	74e2      	strb	r2, [r4, #19]
    f1ba:	7522      	strb	r2, [r4, #20]
    f1bc:	7562      	strb	r2, [r4, #21]
    f1be:	75a2      	strb	r2, [r4, #22]
    f1c0:	75e2      	strb	r2, [r4, #23]
    f1c2:	7622      	strb	r2, [r4, #24]
    f1c4:	7662      	strb	r2, [r4, #25]
    f1c6:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    f1c8:	76e2      	strb	r2, [r4, #27]
    f1ca:	7722      	strb	r2, [r4, #28]
    f1cc:	7762      	strb	r2, [r4, #29]
    f1ce:	77a2      	strb	r2, [r4, #30]
    f1d0:	77e2      	strb	r2, [r4, #31]
    f1d2:	f884 2020 	strb.w	r2, [r4, #32]
    f1d6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    f1da:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    f1de:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    f1e2:	105b      	asrs	r3, r3, #1
    f1e4:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f1e6:	2701      	movs	r7, #1
    f1e8:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    f1ea:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f1ee:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    f1f2:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    f1f6:	3a01      	subs	r2, #1
    f1f8:	4610      	mov	r0, r2
    f1fa:	17d1      	asrs	r1, r2, #31
    f1fc:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    f1fe:	42ba      	cmp	r2, r7
    f200:	bfc8      	it	gt
    f202:	fa42 f707 	asrgt.w	r7, r2, r7
    f206:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    f20a:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    f20e:	2b00      	cmp	r3, #0
    f210:	d13f      	bne.n	f292 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    f212:	4b6d      	ldr	r3, [pc, #436]	; (f3c8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    f214:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f218:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f21c:	43c9      	mvns	r1, r1
    f21e:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f220:	4a6a      	ldr	r2, [pc, #424]	; (f3cc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f222:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f226:	6813      	ldr	r3, [r2, #0]
    f228:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f22c:	4628      	mov	r0, r5
    f22e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f232:	2601      	movs	r6, #1
    f234:	e713      	b.n	f05e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f236:	4623      	mov	r3, r4
    f238:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f23c:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f240:	4621      	mov	r1, r4
    f242:	2211      	movs	r2, #17
    f244:	e752      	b.n	f0ec <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f246:	4a62      	ldr	r2, [pc, #392]	; (f3d0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f248:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f24a:	2301      	movs	r3, #1
    f24c:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f250:	2208      	movs	r2, #8
    f252:	2102      	movs	r1, #2
    f254:	f002 fb06 	bl	11864 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f258:	4a5b      	ldr	r2, [pc, #364]	; (f3c8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f25a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f25e:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f262:	495a      	ldr	r1, [pc, #360]	; (f3cc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f264:	ea23 0300 	bic.w	r3, r3, r0
    f268:	6809      	ldr	r1, [r1, #0]
    f26a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f26e:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f270:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f274:	4628      	mov	r0, r5
    f276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f27a:	4613      	mov	r3, r2
    f27c:	e797      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f27e:	2302      	movs	r3, #2
    f280:	e795      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f282:	220f      	movs	r2, #15
    f284:	e72d      	b.n	f0e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f286:	2210      	movs	r2, #16
    f288:	e72b      	b.n	f0e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f28a:	2303      	movs	r3, #3
    f28c:	e78f      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f28e:	2305      	movs	r3, #5
    f290:	e78d      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f292:	f1c3 0108 	rsb	r1, r3, #8
    f296:	00ce      	lsls	r6, r1, #3
    f298:	f04f 30ff 	mov.w	r0, #4294967295
    f29c:	f1c6 0220 	rsb	r2, r6, #32
    f2a0:	fa00 f202 	lsl.w	r2, r0, r2
    f2a4:	fa20 fe06 	lsr.w	lr, r0, r6
    f2a8:	f1a6 0720 	sub.w	r7, r6, #32
    f2ac:	fa20 f707 	lsr.w	r7, r0, r7
    f2b0:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f2b4:	4622      	mov	r2, r4
    f2b6:	ea4e 0e07 	orr.w	lr, lr, r7
    f2ba:	40f0      	lsrs	r0, r6
    f2bc:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f2be:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f2c2:	65e0      	str	r0, [r4, #92]	; 0x5c
    f2c4:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f2c8:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f2ca:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f2cc:	f104 0812 	add.w	r8, r4, #18
    f2d0:	7056      	strb	r6, [r2, #1]
    f2d2:	7096      	strb	r6, [r2, #2]
    f2d4:	70d6      	strb	r6, [r2, #3]
    f2d6:	7116      	strb	r6, [r2, #4]
    f2d8:	7156      	strb	r6, [r2, #5]
    f2da:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f2dc:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f2e0:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f2e2:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f2e6:	4442      	add	r2, r8
    f2e8:	3301      	adds	r3, #1
    f2ea:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f2ec:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f2f0:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f2f2:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f2f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f2f6:	f001 fe69 	bl	10fcc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f2fa:	4631      	mov	r1, r6
    f2fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f2fe:	f001 fdbb 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f302:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f306:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f30a:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f30c:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f30e:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f310:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f312:	f001 fdb1 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f316:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f31a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f31c:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f320:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f324:	2701      	movs	r7, #1
    f326:	4442      	add	r2, r8
    f328:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f32c:	4421      	add	r1, r4
    f32e:	f001 fe4d 	bl	10fcc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f332:	4631      	mov	r1, r6
    f334:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f336:	f001 fd9f 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f33a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f33e:	4b22      	ldr	r3, [pc, #136]	; (f3c8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f340:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f344:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f348:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f34c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f350:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f354:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f358:	f04f 0800 	mov.w	r8, #0
    f35c:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f360:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f364:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f368:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f36a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f36e:	e757      	b.n	f220 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f370:	2309      	movs	r3, #9
    f372:	e71c      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f374:	2304      	movs	r3, #4
    f376:	e71a      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f378:	2306      	movs	r3, #6
    f37a:	e718      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f37c:	2307      	movs	r3, #7
    f37e:	e716      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f380:	2308      	movs	r3, #8
    f382:	e714      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f384:	230a      	movs	r3, #10
    f386:	e712      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f388:	2300      	movs	r3, #0
    f38a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f38e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f392:	4a0f      	ldr	r2, [pc, #60]	; (f3d0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f394:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f396:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f398:	f04f 0000 	mov.w	r0, #0
    f39c:	f04f 0100 	mov.w	r1, #0
    f3a0:	bfcc      	ite	gt
    f3a2:	105b      	asrgt	r3, r3, #1
    f3a4:	2301      	movle	r3, #1
    f3a6:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f3aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f3ae:	e74b      	b.n	f248 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f3b0:	230f      	movs	r3, #15
    f3b2:	e6fc      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f3b4:	230b      	movs	r3, #11
    f3b6:	e6fa      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f3b8:	230c      	movs	r3, #12
    f3ba:	e6f8      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f3bc:	230d      	movs	r3, #13
    f3be:	e6f6      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f3c0:	230e      	movs	r3, #14
    f3c2:	e6f4      	b.n	f1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f3c4:	2300      	movs	r3, #0
    f3c6:	e70c      	b.n	f1e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f3c8:	200019d8 	.word	0x200019d8
    f3cc:	20001be8 	.word	0x20001be8
    f3d0:	20001f0c 	.word	0x20001f0c

0000f3d4 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f3d8:	4f42      	ldr	r7, [pc, #264]	; (f4e4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f3da:	683c      	ldr	r4, [r7, #0]
    f3dc:	f014 0401 	ands.w	r4, r4, #1
    f3e0:	d003      	beq.n	f3ea <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f3e2:	4b41      	ldr	r3, [pc, #260]	; (f4e8 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f3e4:	6818      	ldr	r0, [r3, #0]
    f3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3ea:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f3ee:	f004 f81f 	bl	13430 <_Znwj>
            buf64.writeMarker = 0;
    f3f2:	4603      	mov	r3, r0
    f3f4:	4606      	mov	r6, r0
    f3f6:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f3fa:	f04f 38ff 	mov.w	r8, #4294967295
    f3fe:	f04f 39ff 	mov.w	r9, #4294967295
    f402:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f404:	7074      	strb	r4, [r6, #1]
    f406:	705c      	strb	r4, [r3, #1]
    f408:	709c      	strb	r4, [r3, #2]
    f40a:	70dc      	strb	r4, [r3, #3]
    f40c:	711c      	strb	r4, [r3, #4]
    f40e:	715c      	strb	r4, [r3, #5]
    f410:	719c      	strb	r4, [r3, #6]
    f412:	71dc      	strb	r4, [r3, #7]
    f414:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f416:	7274      	strb	r4, [r6, #9]
    f418:	72b4      	strb	r4, [r6, #10]
    f41a:	72f4      	strb	r4, [r6, #11]
    f41c:	7334      	strb	r4, [r6, #12]
    f41e:	7374      	strb	r4, [r6, #13]
    f420:	73b4      	strb	r4, [r6, #14]
    f422:	73f4      	strb	r4, [r6, #15]
    f424:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f426:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f428:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f42a:	74f4      	strb	r4, [r6, #19]
    f42c:	7534      	strb	r4, [r6, #20]
    f42e:	7574      	strb	r4, [r6, #21]
    f430:	75b4      	strb	r4, [r6, #22]
    f432:	75f4      	strb	r4, [r6, #23]
    f434:	7634      	strb	r4, [r6, #24]
    f436:	7674      	strb	r4, [r6, #25]
    f438:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f43a:	76f4      	strb	r4, [r6, #27]
    f43c:	7734      	strb	r4, [r6, #28]
    f43e:	7774      	strb	r4, [r6, #29]
    f440:	77b4      	strb	r4, [r6, #30]
    f442:	77f4      	strb	r4, [r6, #31]
    f444:	f886 4020 	strb.w	r4, [r6, #32]
    f448:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f44c:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f450:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f454:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f458:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f45c:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f460:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f464:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f468:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f46c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f470:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f474:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f478:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f47c:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f480:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f484:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f488:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f48c:	2301      	movs	r3, #1
    f48e:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f492:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f496:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f49a:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f49e:	62b4      	str	r4, [r6, #40]	; 0x28
    f4a0:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f4a4:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f4a8:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f4ac:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f4b0:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f4b4:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f4b8:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f4bc:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f4c0:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f4c4:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f4c8:	4620      	mov	r0, r4
    f4ca:	3428      	adds	r4, #40	; 0x28
    f4cc:	f000 fc8a 	bl	fde4 <_ZN9ClearCore7CcioPinC1Ev>
    f4d0:	42ac      	cmp	r4, r5
    f4d2:	d1f9      	bne.n	f4c8 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f4d4:	4a04      	ldr	r2, [pc, #16]	; (f4e8 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f4d6:	2301      	movs	r3, #1
    f4d8:	6016      	str	r6, [r2, #0]
    f4da:	4630      	mov	r0, r6
    f4dc:	603b      	str	r3, [r7, #0]
}
    f4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f4e2:	bf00      	nop
    f4e4:	20001ef8 	.word	0x20001ef8
    f4e8:	20001f00 	.word	0x20001f00

0000f4ec <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f4ec:	b570      	push	{r4, r5, r6, lr}
    f4ee:	4606      	mov	r6, r0
    f4f0:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f4f4:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f4f6:	682b      	ldr	r3, [r5, #0]
    f4f8:	b221      	sxth	r1, r4
    f4fa:	3401      	adds	r4, #1
    f4fc:	4628      	mov	r0, r5
    f4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f500:	b2a4      	uxth	r4, r4
    f502:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f504:	2c80      	cmp	r4, #128	; 0x80
    f506:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f50a:	d1f4      	bne.n	f4f6 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f50c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f510:	2b02      	cmp	r3, #2
    f512:	d00b      	beq.n	f52c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f514:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f518:	2b00      	cmp	r3, #0
    f51a:	d13c      	bne.n	f596 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f51c:	4a20      	ldr	r2, [pc, #128]	; (f5a0 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f51e:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f520:	6812      	ldr	r2, [r2, #0]
    f522:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f526:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f528:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f52c:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f52e:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f530:	2200      	movs	r2, #0
    f532:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f534:	f04f 34ff 	mov.w	r4, #4294967295
    f538:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f53c:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f540:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f544:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f548:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f54c:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f550:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f554:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f558:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f55c:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f560:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f564:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f568:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f56c:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f570:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f574:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f578:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f57c:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f580:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f584:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f588:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f58c:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f590:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f594:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f596:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f59a:	2b00      	cmp	r3, #0
    f59c:	d1be      	bne.n	f51c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f59e:	e7c5      	b.n	f52c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f5a0:	20001be8 	.word	0x20001be8

0000f5a4 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f5a4:	3940      	subs	r1, #64	; 0x40
    f5a6:	b28b      	uxth	r3, r1
    f5a8:	2b3f      	cmp	r3, #63	; 0x3f
    f5aa:	d80f      	bhi.n	f5cc <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f5ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f5ae:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f5b0:	b2c9      	uxtb	r1, r1
    f5b2:	f1c1 0320 	rsb	r3, r1, #32
    f5b6:	fa02 f303 	lsl.w	r3, r2, r3
    f5ba:	40c8      	lsrs	r0, r1
    f5bc:	3920      	subs	r1, #32
    f5be:	4318      	orrs	r0, r3
    f5c0:	fa22 f101 	lsr.w	r1, r2, r1
    f5c4:	4308      	orrs	r0, r1
}
    f5c6:	f000 0001 	and.w	r0, r0, #1
    f5ca:	4770      	bx	lr
    f5cc:	2000      	movs	r0, #0
    f5ce:	f000 0001 	and.w	r0, r0, #1
    f5d2:	4770      	bx	lr

0000f5d4 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f5d4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f5d6:	2900      	cmp	r1, #0
    f5d8:	f000 8084 	beq.w	f6e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f5dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d07f      	beq.n	f6e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f5e4:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f5e8:	2a00      	cmp	r2, #0
    f5ea:	d17b      	bne.n	f6e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f5f0:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f5f4:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f5f8:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f5fa:	f000 80a3 	beq.w	f744 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f5fe:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f602:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f606:	2400      	movs	r4, #0
    f608:	2500      	movs	r5, #0
    f60a:	4690      	mov	r8, r2
    f60c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f610:	4696      	mov	lr, r2
    f612:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f616:	e9cd 4500 	strd	r4, r5, [sp]
    f61a:	2201      	movs	r2, #1
    f61c:	2300      	movs	r3, #0
    f61e:	4626      	mov	r6, r4
    f620:	462f      	mov	r7, r5
    f622:	9106      	str	r1, [sp, #24]
    f624:	e037      	b.n	f696 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f626:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f62a:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f62e:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f632:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f636:	f108 0501 	add.w	r5, r8, #1
    f63a:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f63c:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f63e:	ea46 0602 	orr.w	r6, r6, r2
    f642:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f646:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f64a:	db06      	blt.n	f65a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f64c:	b12c      	cbz	r4, f65a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f64e:	e9dd 4500 	ldrd	r4, r5, [sp]
    f652:	4314      	orrs	r4, r2
    f654:	431d      	orrs	r5, r3
    f656:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f65a:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f65e:	ea04 0802 	and.w	r8, r4, r2
    f662:	ea05 0903 	and.w	r9, r5, r3
    f666:	ea58 0109 	orrs.w	r1, r8, r9
    f66a:	d00b      	beq.n	f684 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f66c:	ea24 0402 	bic.w	r4, r4, r2
    f670:	ea25 0503 	bic.w	r5, r5, r3
    f674:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f678:	e9dd 4500 	ldrd	r4, r5, [sp]
    f67c:	4314      	orrs	r4, r2
    f67e:	431d      	orrs	r5, r3
    f680:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f684:	f10e 0e01 	add.w	lr, lr, #1
    f688:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f68c:	1892      	adds	r2, r2, r2
    f68e:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f690:	45e6      	cmp	lr, ip
    f692:	46f0      	mov	r8, lr
    f694:	da27      	bge.n	f6e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f696:	ea0a 0402 	and.w	r4, sl, r2
    f69a:	ea0b 0503 	and.w	r5, fp, r3
    f69e:	ea54 0105 	orrs.w	r1, r4, r5
    f6a2:	d0ef      	beq.n	f684 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f6a4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f6a8:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f6ac:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f6b0:	3c01      	subs	r4, #1
    f6b2:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f6b6:	2c00      	cmp	r4, #0
    f6b8:	d1e4      	bne.n	f684 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f6ba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f6be:	4014      	ands	r4, r2
    f6c0:	401d      	ands	r5, r3
    f6c2:	432c      	orrs	r4, r5
    f6c4:	d1af      	bne.n	f626 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f6c6:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f6ca:	ea04 0802 	and.w	r8, r4, r2
    f6ce:	ea05 0903 	and.w	r9, r5, r3
    f6d2:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f6d6:	ea58 0409 	orrs.w	r4, r8, r9
    f6da:	f000 8115 	beq.w	f908 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f6de:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f6e2:	e7c3      	b.n	f66c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f6e4:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f6e6:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f6ea:	9906      	ldr	r1, [sp, #24]
    f6ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f6f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f6f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f6f8:	4642      	mov	r2, r8
    f6fa:	464b      	mov	r3, r9
    f6fc:	4322      	orrs	r2, r4
    f6fe:	432b      	orrs	r3, r5
    f700:	4614      	mov	r4, r2
    f702:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f704:	4642      	mov	r2, r8
    f706:	464b      	mov	r3, r9
    f708:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f70c:	43f6      	mvns	r6, r6
    f70e:	43ff      	mvns	r7, r7
    f710:	ea48 0802 	orr.w	r8, r8, r2
    f714:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f718:	ea04 0206 	and.w	r2, r4, r6
    f71c:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f720:	e9dd 4500 	ldrd	r4, r5, [sp]
    f724:	ea2a 0404 	bic.w	r4, sl, r4
    f728:	ea2b 0505 	bic.w	r5, fp, r5
    f72c:	46a2      	mov	sl, r4
    f72e:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f730:	ea08 0406 	and.w	r4, r8, r6
    f734:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f738:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f73c:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f740:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f744:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f748:	3d01      	subs	r5, #1
    f74a:	b2ed      	uxtb	r5, r5
    f74c:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f750:	b115      	cbz	r5, f758 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f752:	b011      	add	sp, #68	; 0x44
    f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f758:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f75a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f75e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f762:	4608      	mov	r0, r1
    f764:	f001 fcb4 	bl	110d0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f768:	4629      	mov	r1, r5
    f76a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f76c:	f001 fb84 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f770:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f774:	f10c 0309 	add.w	r3, ip, #9
    f778:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f77a:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f77e:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f780:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f782:	2acc      	cmp	r2, #204	; 0xcc
    f784:	f000 814e 	beq.w	fa24 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f788:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f78c:	1c5a      	adds	r2, r3, #1
    f78e:	b292      	uxth	r2, r2
    f790:	3b04      	subs	r3, #4
    f792:	4616      	mov	r6, r2
    f794:	920b      	str	r2, [sp, #44]	; 0x2c
    f796:	b29b      	uxth	r3, r3
    f798:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f79c:	4293      	cmp	r3, r2
    f79e:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f7a2:	f240 81c6 	bls.w	fb32 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f7a6:	2200      	movs	r2, #0
    f7a8:	2300      	movs	r3, #0
    f7aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f7ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f7b2:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f7b6:	ea22 0000 	bic.w	r0, r2, r0
    f7ba:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f7be:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f7c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f7c6:	4610      	mov	r0, r2
    f7c8:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f7ca:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f7ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f7d2:	f1bc 0f00 	cmp.w	ip, #0
    f7d6:	f000 81d3 	beq.w	fb80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f7da:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f7de:	2200      	movs	r2, #0
    f7e0:	2000      	movs	r0, #0
    f7e2:	2100      	movs	r1, #0
    f7e4:	4613      	mov	r3, r2
    f7e6:	e9cd 0100 	strd	r0, r1, [sp]
    f7ea:	f04f 0801 	mov.w	r8, #1
    f7ee:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f7f2:	f04f 0a0c 	mov.w	sl, #12
    f7f6:	e038      	b.n	f86a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f7f8:	0099      	lsls	r1, r3, #2
    f7fa:	18c8      	adds	r0, r1, r3
    f7fc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f800:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f804:	f10b 3bff 	add.w	fp, fp, #4294967295
    f808:	fa1f fb8b 	uxth.w	fp, fp
    f80c:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f810:	f1bb 0f00 	cmp.w	fp, #0
    f814:	d107      	bne.n	f826 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f816:	ea26 0608 	bic.w	r6, r6, r8
    f81a:	ea27 0709 	bic.w	r7, r7, r9
    f81e:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f822:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f826:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f82a:	ea06 0608 	and.w	r6, r6, r8
    f82e:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f832:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f834:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f838:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f83c:	d04e      	beq.n	f8dc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f83e:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f842:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f846:	b93b      	cbnz	r3, f858 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f848:	e9dd 0100 	ldrd	r0, r1, [sp]
    f84c:	ea40 0008 	orr.w	r0, r0, r8
    f850:	ea41 0109 	orr.w	r1, r1, r9
    f854:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f858:	3201      	adds	r2, #1
    f85a:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f85c:	eb18 0808 	adds.w	r8, r8, r8
    f860:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f864:	4596      	cmp	lr, r2
    f866:	4613      	mov	r3, r2
    f868:	dd59      	ble.n	f91e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f86a:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f86e:	4606      	mov	r6, r0
    f870:	460f      	mov	r7, r1
    f872:	ea00 0008 	and.w	r0, r0, r8
    f876:	ea01 0109 	and.w	r1, r1, r9
    f87a:	4301      	orrs	r1, r0
    f87c:	d1bc      	bne.n	f7f8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f87e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f882:	ea00 0008 	and.w	r0, r0, r8
    f886:	ea01 0109 	and.w	r1, r1, r9
    f88a:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f88c:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f890:	eb01 0003 	add.w	r0, r1, r3
    f894:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f898:	d02b      	beq.n	f8f2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f89a:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f89e:	f1bb 0f00 	cmp.w	fp, #0
    f8a2:	d0c0      	beq.n	f826 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f8a4:	f10b 3bff 	add.w	fp, fp, #4294967295
    f8a8:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f8ac:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f8b0:	f1bb 0f00 	cmp.w	fp, #0
    f8b4:	d1b7      	bne.n	f826 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f8b6:	ea46 0608 	orr.w	r6, r6, r8
    f8ba:	ea47 0709 	orr.w	r7, r7, r9
    f8be:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f8c2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f8c6:	ea46 0608 	orr.w	r6, r6, r8
    f8ca:	ea47 0709 	orr.w	r7, r7, r9
    f8ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    f8d2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    f8d6:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    f8da:	e7a4      	b.n	f826 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    f8dc:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    f8e0:	2800      	cmp	r0, #0
    f8e2:	d0b9      	beq.n	f858 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    f8e4:	3801      	subs	r0, #1
    f8e6:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    f8e8:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f8ec:	2800      	cmp	r0, #0
    f8ee:	d0ab      	beq.n	f848 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    f8f0:	e7b2      	b.n	f858 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    f8f2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f8f6:	ea26 0608 	bic.w	r6, r6, r8
    f8fa:	ea27 0709 	bic.w	r7, r7, r9
    f8fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f902:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    f906:	e78e      	b.n	f826 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    f908:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    f90c:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    f910:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f914:	4314      	orrs	r4, r2
    f916:	431d      	orrs	r5, r3
    f918:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f91c:	e6b2      	b.n	f684 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    f91e:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    f922:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f926:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f92a:	ea80 000a 	eor.w	r0, r0, sl
    f92e:	ea81 010b 	eor.w	r1, r1, fp
    f932:	4002      	ands	r2, r0
    f934:	400b      	ands	r3, r1
    f936:	ea82 080a 	eor.w	r8, r2, sl
    f93a:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f93e:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    f942:	ea28 000a 	bic.w	r0, r8, sl
    f946:	ea29 010b 	bic.w	r1, r9, fp
    f94a:	ea40 0602 	orr.w	r6, r0, r2
    f94e:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f952:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    f956:	e9cd 8900 	strd	r8, r9, [sp]
    f95a:	ea2a 0808 	bic.w	r8, sl, r8
    f95e:	ea2b 0909 	bic.w	r9, fp, r9
    f962:	ea43 0109 	orr.w	r1, r3, r9
    f966:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f96a:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    f96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f970:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f974:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f978:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    f97c:	2b00      	cmp	r3, #0
    f97e:	f000 8083 	beq.w	fa88 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    f982:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f986:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    f98a:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f98e:	ea03 0907 	and.w	r9, r3, r7
    f992:	ea29 0101 	bic.w	r1, r9, r1
    f996:	ea02 0806 	and.w	r8, r2, r6
    f99a:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f99c:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f9a0:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f9a2:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f9a6:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f9a8:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f9aa:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f9ae:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f9b2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f9b6:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f9b8:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f9ba:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f9be:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f9c2:	fa01 f505 	lsl.w	r5, r1, r5
    f9c6:	fa20 f203 	lsr.w	r2, r0, r3
    f9ca:	432a      	orrs	r2, r5
    f9cc:	f1a3 0520 	sub.w	r5, r3, #32
    f9d0:	fa21 f505 	lsr.w	r5, r1, r5
    f9d4:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    f9d6:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f9da:	f8d4 500d 	ldr.w	r5, [r4, #13]
    f9de:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    f9e2:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f9e6:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f9ea:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    f9ec:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f9f0:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    f9f2:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f9f6:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f9f8:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f9fc:	2101      	movs	r1, #1
    f9fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fa00:	f001 fa3a 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    fa04:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fa08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fa0a:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    fa0c:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fa10:	2501      	movs	r5, #1
    fa12:	321b      	adds	r2, #27
    fa14:	4421      	add	r1, r4
    fa16:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    fa1a:	b011      	add	sp, #68	; 0x44
    fa1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fa20:	f001 bb04 	b.w	1102c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    fa24:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    fa28:	f8d4 701f 	ldr.w	r7, [r4, #31]
    fa2c:	f8d4 601b 	ldr.w	r6, [r4, #27]
    fa30:	42bb      	cmp	r3, r7
    fa32:	bf08      	it	eq
    fa34:	42b2      	cmpeq	r2, r6
    fa36:	f47f aea7 	bne.w	f788 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fa3a:	f8d4 2013 	ldr.w	r2, [r4, #19]
    fa3e:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    fa42:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fa46:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    fa4a:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fa4c:	ea6f 0903 	mvn.w	r9, r3
    fa50:	ea6f 0802 	mvn.w	r8, r2
    fa54:	f1c6 0720 	rsb	r7, r6, #32
    fa58:	fa28 f306 	lsr.w	r3, r8, r6
    fa5c:	fa09 f707 	lsl.w	r7, r9, r7
    fa60:	f1a6 0220 	sub.w	r2, r6, #32
    fa64:	fa29 f202 	lsr.w	r2, r9, r2
    fa68:	433b      	orrs	r3, r7
    fa6a:	4313      	orrs	r3, r2
    fa6c:	9308      	str	r3, [sp, #32]
    fa6e:	fa29 f306 	lsr.w	r3, r9, r6
    fa72:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    fa74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    fa78:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    fa7c:	4042      	eors	r2, r0
    fa7e:	404b      	eors	r3, r1
    fa80:	e9cd 2302 	strd	r2, r3, [sp, #8]
    fa84:	950b      	str	r5, [sp, #44]	; 0x2c
    fa86:	e694      	b.n	f7b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fa88:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    fa8c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    fa90:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fa94:	4016      	ands	r6, r2
    fa96:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    fa98:	ea40 0206 	orr.w	r2, r0, r6
    fa9c:	ea41 0307 	orr.w	r3, r1, r7
    faa0:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    faa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    faa8:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    faaa:	46b0      	mov	r8, r6
    faac:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    faae:	bf08      	it	eq
    fab0:	42b2      	cmpeq	r2, r6
    fab2:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    fab6:	f43f af64 	beq.w	f982 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    faba:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    fabe:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    fac2:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    fac6:	d053      	beq.n	fb70 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    fac8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; fb94 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    facc:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fad0:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    fad4:	433e      	orrs	r6, r7
    fad6:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    fada:	ea29 0701 	bic.w	r7, r9, r1
    fade:	ea28 0600 	bic.w	r6, r8, r0
    fae2:	ea56 0307 	orrs.w	r3, r6, r7
    fae6:	f43f af4c 	beq.w	f982 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    faea:	ea48 0200 	orr.w	r2, r8, r0
    faee:	ea49 0301 	orr.w	r3, r9, r1
    faf2:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    faf6:	f1bc 0f00 	cmp.w	ip, #0
    fafa:	f43f af42 	beq.w	f982 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    fafe:	4e24      	ldr	r6, [pc, #144]	; (fb90 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fb00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fb02:	2701      	movs	r7, #1
    fb04:	e005      	b.n	fb12 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fb06:	3501      	adds	r5, #1
    fb08:	b2ed      	uxtb	r5, r5
    fb0a:	4565      	cmp	r5, ip
    fb0c:	462a      	mov	r2, r5
    fb0e:	f6bf af38 	bge.w	f982 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    fb12:	ab10      	add	r3, sp, #64	; 0x40
    fb14:	442b      	add	r3, r5
    fb16:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    fb1a:	2b00      	cmp	r3, #0
    fb1c:	d0f3      	beq.n	fb06 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fb1e:	fa07 f202 	lsl.w	r2, r7, r2
    fb22:	b2d2      	uxtb	r2, r2
    fb24:	2103      	movs	r1, #3
    fb26:	6830      	ldr	r0, [r6, #0]
    fb28:	f001 fe9c 	bl	11864 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    fb2c:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    fb30:	e7e9      	b.n	fb06 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    fb32:	2101      	movs	r1, #1
    fb34:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fb38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fb3a:	f001 f99d 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    fb3e:	4914      	ldr	r1, [pc, #80]	; (fb90 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    fb40:	2300      	movs	r3, #0
    fb42:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fb44:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    fb46:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fb4a:	2102      	movs	r1, #2
    fb4c:	2208      	movs	r2, #8
    fb4e:	f001 fe89 	bl	11864 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fb52:	4b10      	ldr	r3, [pc, #64]	; (fb94 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    fb54:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    fb58:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fb5c:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fb60:	43d2      	mvns	r2, r2
    fb62:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    fb64:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fb66:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fb6a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    fb6e:	e5f0      	b.n	f752 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    fb70:	4a08      	ldr	r2, [pc, #32]	; (fb94 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fb72:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    fb76:	ea23 0307 	bic.w	r3, r3, r7
    fb7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    fb7e:	e700      	b.n	f982 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fb80:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    fb84:	2200      	movs	r2, #0
    fb86:	2300      	movs	r3, #0
    fb88:	e9cd 2300 	strd	r2, r3, [sp]
    fb8c:	e6c9      	b.n	f922 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    fb8e:	bf00      	nop
    fb90:	20001f0c 	.word	0x20001f0c
    fb94:	200019d8 	.word	0x200019d8

0000fb98 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fb98:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fb9a:	b1c1      	cbz	r1, fbce <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fb9c:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    fba0:	b1aa      	cbz	r2, fbce <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fba2:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    fba6:	b192      	cbz	r2, fbce <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fba8:	4a09      	ldr	r2, [pc, #36]	; (fbd0 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    fbaa:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fbac:	6812      	ldr	r2, [r2, #0]
    fbae:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fbb2:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fbb6:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fbb8:	42a2      	cmp	r2, r4
    fbba:	d907      	bls.n	fbcc <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    fbbc:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fbbe:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    fbc2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    fbc6:	bc30      	pop	{r4, r5}
    fbc8:	f7ff b9c0 	b.w	ef4c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    fbcc:	bc30      	pop	{r4, r5}
    fbce:	4770      	bx	lr
    fbd0:	20001be8 	.word	0x20001be8

0000fbd4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    fbd4:	4a0e      	ldr	r2, [pc, #56]	; (fc10 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    fbd6:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    fbd8:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    fbdc:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fbe0:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    fbe4:	43f3      	mvns	r3, r6
    fbe6:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    fbe8:	2700      	movs	r7, #0
    fbea:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    fbee:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fbf2:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fbf6:	bf15      	itete	ne
    fbf8:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fbfc:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fc00:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc02:	400b      	andeq	r3, r1
    fc04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    fc08:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    fc0a:	f7ff bc6f 	b.w	f4ec <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    fc0e:	bf00      	nop
    fc10:	200019d8 	.word	0x200019d8

0000fc14 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fc14:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    fc18:	2b02      	cmp	r3, #2
    fc1a:	d005      	beq.n	fc28 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    fc1c:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    fc20:	b12b      	cbz	r3, fc2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    fc22:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    fc26:	b913      	cbnz	r3, fc2e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    fc28:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    fc2c:	4770      	bx	lr
    m_serPort = comInstance;
    fc2e:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    fc30:	b109      	cbz	r1, fc36 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    fc32:	f7ff b98b 	b.w	ef4c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    fc36:	4b04      	ldr	r3, [pc, #16]	; (fc48 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    fc38:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    fc3c:	681b      	ldr	r3, [r3, #0]
    fc3e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    fc42:	4608      	mov	r0, r1
    fc44:	4770      	bx	lr
    fc46:	bf00      	nop
    fc48:	20001be8 	.word	0x20001be8

0000fc4c <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    fc4c:	3940      	subs	r1, #64	; 0x40
    fc4e:	b28b      	uxth	r3, r1
    fc50:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    fc52:	bf9d      	ittte	ls
    fc54:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    fc58:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    fc5c:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    fc5e:	2000      	movhi	r0, #0
    }
}
    fc60:	4770      	bx	lr
    fc62:	bf00      	nop

0000fc64 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    fc64:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    fc66:	f7ff fbb5 	bl	f3d4 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    fc6a:	4b01      	ldr	r3, [pc, #4]	; (fc70 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    fc6c:	6018      	str	r0, [r3, #0]
    fc6e:	bd08      	pop	{r3, pc}
    fc70:	20001efc 	.word	0x20001efc

0000fc74 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    fc74:	7980      	ldrb	r0, [r0, #6]
    fc76:	4770      	bx	lr

0000fc78 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    fc78:	2009      	movs	r0, #9
    fc7a:	4770      	bx	lr

0000fc7c <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    fc7c:	7980      	ldrb	r0, [r0, #6]
    }
    fc7e:	f1a0 0004 	sub.w	r0, r0, #4
    fc82:	fab0 f080 	clz	r0, r0
    fc86:	0940      	lsrs	r0, r0, #5
    fc88:	4770      	bx	lr
    fc8a:	bf00      	nop

0000fc8c <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    fc8c:	4770      	bx	lr
    fc8e:	bf00      	nop

0000fc90 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    fc90:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fc92:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    fc96:	2201      	movs	r2, #1
    fc98:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    fc9c:	f1c5 0420 	rsb	r4, r5, #32
    fca0:	fa22 f404 	lsr.w	r4, r2, r4
    fca4:	fa02 f303 	lsl.w	r3, r2, r3
    fca8:	4323      	orrs	r3, r4
    fcaa:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fcac:	2602      	movs	r6, #2
    m_filterLength = 3;
    fcae:	4d07      	ldr	r5, [pc, #28]	; (fccc <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    fcb0:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    fcb2:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fcb4:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fcb6:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    fcb8:	6105      	str	r5, [r0, #16]
    fcba:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fcbc:	6082      	str	r2, [r0, #8]
    fcbe:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    fcc0:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    fcc2:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    fcc4:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    fcc6:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    fcc8:	bc70      	pop	{r4, r5, r6}
    fcca:	4770      	bx	lr
    fccc:	00010003 	.word	0x00010003

0000fcd0 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    fcd0:	7983      	ldrb	r3, [r0, #6]
    fcd2:	428b      	cmp	r3, r1
    fcd4:	d02f      	beq.n	fd36 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    fcd6:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    fcd8:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    fcdc:	d014      	beq.n	fd08 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    fcde:	2904      	cmp	r1, #4
    fce0:	d10b      	bne.n	fcfa <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    fce2:	4b16      	ldr	r3, [pc, #88]	; (fd3c <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fce4:	681e      	ldr	r6, [r3, #0]
    fce6:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fcea:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    fcee:	432b      	orrs	r3, r5
    fcf0:	4322      	orrs	r2, r4
    fcf2:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    fcf6:	460b      	mov	r3, r1
            m_mode = newMode;
    fcf8:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    fcfa:	1ac8      	subs	r0, r1, r3
    fcfc:	fab0 f080 	clz	r0, r0
    fd00:	0940      	lsrs	r0, r0, #5
}
    fd02:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    fd06:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    fd08:	4b0c      	ldr	r3, [pc, #48]	; (fd3c <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fd0a:	681e      	ldr	r6, [r3, #0]
    fd0c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fd10:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fd14:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fd18:	43d2      	mvns	r2, r2
    fd1a:	43db      	mvns	r3, r3
    fd1c:	4014      	ands	r4, r2
    fd1e:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fd20:	ea02 0208 	and.w	r2, r2, r8
    fd24:	ea03 0309 	and.w	r3, r3, r9
    fd28:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fd2c:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    fd30:	460b      	mov	r3, r1
            m_mode = newMode;
    fd32:	7181      	strb	r1, [r0, #6]
            break;
    fd34:	e7e1      	b.n	fcfa <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    fd36:	2001      	movs	r0, #1
    fd38:	4770      	bx	lr
    fd3a:	bf00      	nop
    fd3c:	20001efc 	.word	0x20001efc

0000fd40 <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    fd40:	7983      	ldrb	r3, [r0, #6]
    fd42:	2b02      	cmp	r3, #2
    fd44:	d010      	beq.n	fd68 <_ZN9ClearCore7CcioPin5StateEv+0x28>
    fd46:	2b04      	cmp	r3, #4
    fd48:	d10c      	bne.n	fd64 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    fd4a:	4b0b      	ldr	r3, [pc, #44]	; (fd78 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fd4c:	681b      	ldr	r3, [r3, #0]
    fd4e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fd52:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fd56:	4002      	ands	r2, r0
    fd58:	400b      	ands	r3, r1
    fd5a:	4313      	orrs	r3, r2
    fd5c:	bf14      	ite	ne
    fd5e:	2001      	movne	r0, #1
    fd60:	2000      	moveq	r0, #0
            break;
    fd62:	4770      	bx	lr
    switch (m_mode) {
    fd64:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    fd66:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fd68:	4b03      	ldr	r3, [pc, #12]	; (fd78 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fd6a:	681b      	ldr	r3, [r3, #0]
    fd6c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fd70:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    fd74:	e7ef      	b.n	fd56 <_ZN9ClearCore7CcioPin5StateEv+0x16>
    fd76:	bf00      	nop
    fd78:	20001efc 	.word	0x20001efc

0000fd7c <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    fd7c:	4b06      	ldr	r3, [pc, #24]	; (fd98 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    fd7e:	681b      	ldr	r3, [r3, #0]
    fd80:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fd84:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    fd88:	4002      	ands	r2, r0
    fd8a:	400b      	ands	r3, r1
    fd8c:	4313      	orrs	r3, r2
}
    fd8e:	bf14      	ite	ne
    fd90:	2001      	movne	r0, #1
    fd92:	2000      	moveq	r0, #0
    fd94:	4770      	bx	lr
    fd96:	bf00      	nop
    fd98:	20001efc 	.word	0x20001efc

0000fd9c <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    fd9c:	7983      	ldrb	r3, [r0, #6]
    fd9e:	2b04      	cmp	r3, #4
    fda0:	d11c      	bne.n	fddc <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    fda2:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    fda4:	4b0e      	ldr	r3, [pc, #56]	; (fde0 <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    fda6:	b969      	cbnz	r1, fdc4 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fda8:	6819      	ldr	r1, [r3, #0]
    fdaa:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fdae:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    fdb2:	ea24 0202 	bic.w	r2, r4, r2
    fdb6:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    fdba:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fdbc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fdc0:	bc30      	pop	{r4, r5}
    fdc2:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    fdc4:	6819      	ldr	r1, [r3, #0]
    fdc6:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fdca:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    fdce:	4322      	orrs	r2, r4
    fdd0:	432b      	orrs	r3, r5
    fdd2:	2001      	movs	r0, #1
    fdd4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fdd8:	bc30      	pop	{r4, r5}
    fdda:	4770      	bx	lr
    bool success = false;
    fddc:	2000      	movs	r0, #0
    fdde:	4770      	bx	lr
    fde0:	20001efc 	.word	0x20001efc

0000fde4 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    fde4:	b5d0      	push	{r4, r6, r7, lr}
    fde6:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    fde8:	f7f4 fe5a 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
    fdec:	4b08      	ldr	r3, [pc, #32]	; (fe10 <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    fdee:	4909      	ldr	r1, [pc, #36]	; (fe14 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    fdf0:	6023      	str	r3, [r4, #0]
    fdf2:	2600      	movs	r6, #0
    fdf4:	2300      	movs	r3, #0
    fdf6:	2700      	movs	r7, #0
    fdf8:	220c      	movs	r2, #12
    fdfa:	e9c4 6702 	strd	r6, r7, [r4, #8]
    fdfe:	6121      	str	r1, [r4, #16]
    fe00:	6162      	str	r2, [r4, #20]
    fe02:	61a3      	str	r3, [r4, #24]
    fe04:	61e3      	str	r3, [r4, #28]
    fe06:	6223      	str	r3, [r4, #32]
    fe08:	6263      	str	r3, [r4, #36]	; 0x24
    fe0a:	4620      	mov	r0, r4
    fe0c:	bdd0      	pop	{r4, r6, r7, pc}
    fe0e:	bf00      	nop
    fe10:	000234a0 	.word	0x000234a0
    fe14:	00010003 	.word	0x00010003

0000fe18 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fe18:	b530      	push	{r4, r5, lr}
    fe1a:	b083      	sub	sp, #12
    fe1c:	9d06      	ldr	r5, [sp, #24]
    fe1e:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
    fe22:	9500      	str	r5, [sp, #0]
    fe24:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fe26:	4604      	mov	r4, r0
      m_errorCode(0) {
    fe28:	2500      	movs	r5, #0
    fe2a:	f000 ffbb 	bl	10da4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
    fe2e:	4b09      	ldr	r3, [pc, #36]	; (fe54 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
    fe30:	6023      	str	r3, [r4, #0]
    fe32:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
    fe36:	4620      	mov	r0, r4
    fe38:	2101      	movs	r1, #1
    fe3a:	f001 f811 	bl	10e60 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
    fe3e:	462a      	mov	r2, r5
    fe40:	4629      	mov	r1, r5
    fe42:	4620      	mov	r0, r4
    fe44:	f001 f852 	bl	10eec <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
    fe48:	4620      	mov	r0, r4
    fe4a:	f000 ff9f 	bl	10d8c <_ZN9ClearCore10SerialBase8PortOpenEv>
}
    fe4e:	4620      	mov	r0, r4
    fe50:	b003      	add	sp, #12
    fe52:	bd30      	pop	{r4, r5, pc}
    fe54:	00022e44 	.word	0x00022e44

0000fe58 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
    fe58:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fe5c:	4770      	bx	lr
    fe5e:	bf00      	nop

0000fe60 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
    fe60:	2300      	movs	r3, #0
    m_outTail = 0;
    fe62:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
    fe66:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
    fe6a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    fe6e:	4770      	bx	lr

0000fe70 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe70:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
    fe72:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe74:	2104      	movs	r1, #4
    m_inTail = 0;
    fe76:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
    fe7a:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
    fe7c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe80:	7591      	strb	r1, [r2, #22]
    fe82:	4770      	bx	lr

0000fe84 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
    fe84:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
    fe88:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    fe8c:	4291      	cmp	r1, r2
    fe8e:	d012      	beq.n	feb6 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
    fe90:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
    fe92:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
    fe96:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fe9a:	6904      	ldr	r4, [r0, #16]
    fe9c:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
    fe9e:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
    fea0:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fea2:	2504      	movs	r5, #4
    fea4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
    fea8:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
    feac:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    feb0:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
    feb2:	bc30      	pop	{r4, r5}
    feb4:	4770      	bx	lr
        return SerialBase::EOB;
    feb6:	f04f 30ff 	mov.w	r0, #4294967295
    feba:	4770      	bx	lr

0000febc <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
    febc:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    fec0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    fec4:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
    fec6:	bf1d      	ittte	ne
    fec8:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
    fecc:	3318      	addne	r3, #24
    fece:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
    fed2:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
    fed6:	4770      	bx	lr

0000fed8 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
    fed8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    fedc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
    fee0:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
    fee2:	bf48      	it	mi
    fee4:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
    fee6:	4770      	bx	lr

0000fee8 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
    fee8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    feec:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
    fef0:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
    fef2:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
    fef4:	bf48      	it	mi
    fef6:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
    fef8:	4770      	bx	lr
    fefa:	bf00      	nop

0000fefc <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
    fefc:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
    fefe:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    ff02:	b1b8      	cbz	r0, ff34 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
    ff04:	79d3      	ldrb	r3, [r2, #7]
    ff06:	2b01      	cmp	r3, #1
    ff08:	d015      	beq.n	ff36 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
    ff0a:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
    ff0c:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
    ff10:	3401      	adds	r4, #1
    ff12:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
    ff16:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
    ff1a:	429c      	cmp	r4, r3
    ff1c:	d0fb      	beq.n	ff16 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
    ff1e:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    ff22:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
    ff24:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    ff26:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
    ff28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
    ff2c:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    ff30:	75ae      	strb	r6, [r5, #22]
}
    ff32:	bc70      	pop	{r4, r5, r6}
    ff34:	4770      	bx	lr
        return false;
    ff36:	2000      	movs	r0, #0
    ff38:	4770      	bx	lr
    ff3a:	bf00      	nop

0000ff3c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
    ff3c:	79c3      	ldrb	r3, [r0, #7]
    ff3e:	b113      	cbz	r3, ff46 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
    ff40:	2b01      	cmp	r3, #1
    ff42:	d00e      	beq.n	ff62 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
    ff44:	4770      	bx	lr
        while (m_outHead != m_outTail) {
    ff46:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
    ff4a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    ff4e:	429a      	cmp	r2, r3
    ff50:	d1f9      	bne.n	ff46 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
    ff52:	6902      	ldr	r2, [r0, #16]
    ff54:	7e13      	ldrb	r3, [r2, #24]
    ff56:	07d8      	lsls	r0, r3, #31
    ff58:	d4f4      	bmi.n	ff44 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
    ff5a:	7e13      	ldrb	r3, [r2, #24]
    ff5c:	0799      	lsls	r1, r3, #30
    ff5e:	d5fc      	bpl.n	ff5a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
    ff60:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    ff62:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    ff66:	2b07      	cmp	r3, #7
    ff68:	d0ec      	beq.n	ff44 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
    ff6a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    ff6e:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
    ff70:	b510      	push	{r4, lr}
    ff72:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    ff74:	d005      	beq.n	ff82 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
    ff76:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    ff7a:	b113      	cbz	r3, ff82 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    ff7c:	79e3      	ldrb	r3, [r4, #7]
    ff7e:	2b01      	cmp	r3, #1
    ff80:	d000      	beq.n	ff84 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
    ff82:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
    ff84:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    ff88:	f7fe ffc4 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    ff8c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
    ff8e:	079b      	lsls	r3, r3, #30
    ff90:	d4f1      	bmi.n	ff76 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
    ff92:	e7f6      	b.n	ff82 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

0000ff94 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    ff94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff98:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
    ff9a:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ff9c:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    ff9e:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ffa0:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ffa4:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ffa6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    ffaa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ffae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ffb2:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ffb4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    ffb8:	f36f 0100 	bfc	r1, #0, #1
    ffbc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    ffc0:	6813      	ldr	r3, [r2, #0]
    ffc2:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    ffc4:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    ffc6:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    ffca:	d503      	bpl.n	ffd4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    ffcc:	6813      	ldr	r3, [r2, #0]
    ffce:	f36f 0341 	bfc	r3, #1, #1
    ffd2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    ffd4:	69d3      	ldr	r3, [r2, #28]
    ffd6:	f013 0302 	ands.w	r3, r3, #2
    ffda:	d1fb      	bne.n	ffd4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
    ffdc:	6822      	ldr	r2, [r4, #0]
    ffde:	483a      	ldr	r0, [pc, #232]	; (100c8 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
    ffe0:	6811      	ldr	r1, [r2, #0]
    ffe2:	4281      	cmp	r1, r0
    ffe4:	d165      	bne.n	100b2 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
    ffe6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
    ffea:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
    ffee:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
    fff2:	6853      	ldr	r3, [r2, #4]
    fff4:	4a35      	ldr	r2, [pc, #212]	; (100cc <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    fff6:	4293      	cmp	r3, r2
    fff8:	d162      	bne.n	100c0 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fffa:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
    fffc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fffe:	2204      	movs	r2, #4
    m_inTail = 0;
   10000:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10004:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10006:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1000a:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   1000c:	79e0      	ldrb	r0, [r4, #7]
   1000e:	2801      	cmp	r0, #1
   10010:	d124      	bne.n	1005c <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10012:	4b2f      	ldr	r3, [pc, #188]	; (100d0 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   10014:	443b      	add	r3, r7
   10016:	fbb3 f3f7 	udiv	r3, r3, r7
   1001a:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   1001c:	2bff      	cmp	r3, #255	; 0xff
   1001e:	bf92      	itee	ls
   10020:	b2db      	uxtbls	r3, r3
   10022:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   10024:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10026:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10028:	b1b6      	cbz	r6, 10058 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1002a:	682b      	ldr	r3, [r5, #0]
   1002c:	f043 0302 	orr.w	r3, r3, #2
   10030:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10032:	69eb      	ldr	r3, [r5, #28]
   10034:	079b      	lsls	r3, r3, #30
   10036:	d4fc      	bmi.n	10032 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10038:	6a22      	ldr	r2, [r4, #32]
   1003a:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1003e:	7893      	ldrb	r3, [r2, #2]
   10040:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10044:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10048:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1004c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10050:	f042 0201 	orr.w	r2, r2, #1
   10054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   10058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   1005c:	4638      	mov	r0, r7
   1005e:	f00b fd3f 	bl	1bae0 <__aeabi_ui2d>
   10062:	2200      	movs	r2, #0
   10064:	4b1b      	ldr	r3, [pc, #108]	; (100d4 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   10066:	f00b fdb1 	bl	1bbcc <__aeabi_dmul>
   1006a:	4b1b      	ldr	r3, [pc, #108]	; (100d8 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   1006c:	4680      	mov	r8, r0
   1006e:	6818      	ldr	r0, [r3, #0]
   10070:	4689      	mov	r9, r1
   10072:	f00b fd35 	bl	1bae0 <__aeabi_ui2d>
   10076:	4602      	mov	r2, r0
   10078:	460b      	mov	r3, r1
   1007a:	4640      	mov	r0, r8
   1007c:	4649      	mov	r1, r9
   1007e:	f00b fecf 	bl	1be20 <__aeabi_ddiv>
   10082:	4602      	mov	r2, r0
   10084:	460b      	mov	r3, r1
   10086:	2000      	movs	r0, #0
   10088:	4914      	ldr	r1, [pc, #80]	; (100dc <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   1008a:	f00b fbeb 	bl	1b864 <__aeabi_dsub>
   1008e:	2200      	movs	r2, #0
   10090:	4b13      	ldr	r3, [pc, #76]	; (100e0 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   10092:	f00b fd9b 	bl	1bbcc <__aeabi_dmul>
   10096:	f00c f87b 	bl	1c190 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   1009a:	f00b fd43 	bl	1bb24 <__aeabi_f2d>
   1009e:	2200      	movs	r2, #0
   100a0:	4b10      	ldr	r3, [pc, #64]	; (100e4 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   100a2:	f00b fbe1 	bl	1b868 <__adddf3>
   100a6:	f00c f853 	bl	1c150 <__aeabi_d2uiz>
   100aa:	b280      	uxth	r0, r0
   100ac:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   100ae:	2001      	movs	r0, #1
            break;
   100b0:	e7ba      	b.n	10028 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   100b2:	4620      	mov	r0, r4
   100b4:	4788      	blx	r1
   100b6:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   100b8:	6853      	ldr	r3, [r2, #4]
   100ba:	4a04      	ldr	r2, [pc, #16]	; (100cc <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   100bc:	4293      	cmp	r3, r2
   100be:	d09c      	beq.n	fffa <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   100c0:	4620      	mov	r0, r4
   100c2:	4798      	blx	r3
   100c4:	6925      	ldr	r5, [r4, #16]
   100c6:	e7a1      	b.n	1000c <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   100c8:	0000fe61 	.word	0x0000fe61
   100cc:	0000fe71 	.word	0x0000fe71
   100d0:	004c4b3f 	.word	0x004c4b3f
   100d4:	40300000 	.word	0x40300000
   100d8:	200000e0 	.word	0x200000e0
   100dc:	3ff00000 	.word	0x3ff00000
   100e0:	40f00000 	.word	0x40f00000
   100e4:	3fe00000 	.word	0x3fe00000

000100e8 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   100e8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   100ec:	b903      	cbnz	r3, 100f0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   100ee:	4770      	bx	lr
void SerialBase::PortClose() {
   100f0:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   100f2:	6805      	ldr	r5, [r0, #0]
   100f4:	4a3e      	ldr	r2, [pc, #248]	; (101f0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   100f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   100f8:	4293      	cmp	r3, r2
   100fa:	4604      	mov	r4, r0
   100fc:	d157      	bne.n	101ae <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   100fe:	79c3      	ldrb	r3, [r0, #7]
   10100:	2b00      	cmp	r3, #0
   10102:	d03f      	beq.n	10184 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   10104:	2b01      	cmp	r3, #1
   10106:	d056      	beq.n	101b6 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   10108:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1010a:	69a0      	ldr	r0, [r4, #24]
   1010c:	4939      	ldr	r1, [pc, #228]	; (101f4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   1010e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10112:	7886      	ldrb	r6, [r0, #2]
   10114:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10118:	2001      	movs	r0, #1
   1011a:	40b0      	lsls	r0, r6
   1011c:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1011e:	6a20      	ldr	r0, [r4, #32]
   10120:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10124:	7880      	ldrb	r0, [r0, #2]
   10126:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   1012a:	4403      	add	r3, r0
   1012c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10130:	f36f 0100 	bfc	r1, #0, #1
   10134:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10138:	6813      	ldr	r3, [r2, #0]
   1013a:	079b      	lsls	r3, r3, #30
   1013c:	d503      	bpl.n	10146 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1013e:	6813      	ldr	r3, [r2, #0]
   10140:	f36f 0341 	bfc	r3, #1, #1
   10144:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10146:	69d3      	ldr	r3, [r2, #28]
   10148:	f013 0302 	ands.w	r3, r3, #2
   1014c:	d1fb      	bne.n	10146 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   1014e:	682a      	ldr	r2, [r5, #0]
   10150:	4929      	ldr	r1, [pc, #164]	; (101f8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   10152:	428a      	cmp	r2, r1
   10154:	d124      	bne.n	101a0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   10156:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1015a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1015e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10162:	686b      	ldr	r3, [r5, #4]
   10164:	4a25      	ldr	r2, [pc, #148]	; (101fc <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10166:	4293      	cmp	r3, r2
   10168:	d11e      	bne.n	101a8 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1016a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1016c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1016e:	2104      	movs	r1, #4
    m_inTail = 0;
   10170:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10174:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10176:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1017a:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   1017c:	2300      	movs	r3, #0
   1017e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   10182:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   10184:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10188:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1018c:	429a      	cmp	r2, r3
   1018e:	d1f9      	bne.n	10184 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10190:	6922      	ldr	r2, [r4, #16]
   10192:	7e13      	ldrb	r3, [r2, #24]
   10194:	07d8      	lsls	r0, r3, #31
   10196:	d4b8      	bmi.n	1010a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10198:	7e13      	ldrb	r3, [r2, #24]
   1019a:	0799      	lsls	r1, r3, #30
   1019c:	d5fc      	bpl.n	10198 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   1019e:	e7b4      	b.n	1010a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   101a0:	4620      	mov	r0, r4
   101a2:	4790      	blx	r2
   101a4:	6825      	ldr	r5, [r4, #0]
   101a6:	e7dc      	b.n	10162 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   101a8:	4620      	mov	r0, r4
   101aa:	4798      	blx	r3
   101ac:	e7e6      	b.n	1017c <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   101ae:	4798      	blx	r3
   101b0:	6922      	ldr	r2, [r4, #16]
   101b2:	6825      	ldr	r5, [r4, #0]
   101b4:	e7a9      	b.n	1010a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   101b6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   101ba:	2807      	cmp	r0, #7
   101bc:	d0a4      	beq.n	10108 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   101be:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   101c2:	2b07      	cmp	r3, #7
   101c4:	d0a0      	beq.n	10108 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   101c6:	f7fe fea5 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   101ca:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   101cc:	079a      	lsls	r2, r3, #30
   101ce:	d5ef      	bpl.n	101b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   101d0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   101d4:	2b00      	cmp	r3, #0
   101d6:	d0eb      	beq.n	101b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   101d8:	79e3      	ldrb	r3, [r4, #7]
   101da:	2b01      	cmp	r3, #1
   101dc:	d1e8      	bne.n	101b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   101de:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   101e2:	f7fe fe97 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   101e6:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   101e8:	079a      	lsls	r2, r3, #30
   101ea:	d4f1      	bmi.n	101d0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   101ec:	e7e0      	b.n	101b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   101ee:	bf00      	nop
   101f0:	0000ff3d 	.word	0x0000ff3d
   101f4:	41008000 	.word	0x41008000
   101f8:	0000fe61 	.word	0x0000fe61
   101fc:	0000fe71 	.word	0x0000fe71

00010200 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   10200:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   10202:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   10204:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   10206:	2b01      	cmp	r3, #1
   10208:	d101      	bne.n	1020e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   1020a:	2000      	movs	r0, #0
   1020c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1020e:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10210:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10212:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10216:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10218:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1021a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1021e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10222:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10226:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1022a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1022e:	f36f 0100 	bfc	r1, #0, #1
   10232:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10236:	6813      	ldr	r3, [r2, #0]
   10238:	0799      	lsls	r1, r3, #30
   1023a:	d503      	bpl.n	10244 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1023c:	6813      	ldr	r3, [r2, #0]
   1023e:	f36f 0341 	bfc	r3, #1, #1
   10242:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10244:	69d3      	ldr	r3, [r2, #28]
   10246:	f013 0302 	ands.w	r3, r3, #2
   1024a:	d1fb      	bne.n	10244 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   1024c:	6802      	ldr	r2, [r0, #0]
   1024e:	4604      	mov	r4, r0
   10250:	6811      	ldr	r1, [r2, #0]
   10252:	4825      	ldr	r0, [pc, #148]	; (102e8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   10254:	4281      	cmp	r1, r0
   10256:	d142      	bne.n	102de <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10258:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1025c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10260:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10264:	6853      	ldr	r3, [r2, #4]
   10266:	4a21      	ldr	r2, [pc, #132]	; (102ec <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10268:	4293      	cmp	r3, r2
   1026a:	d134      	bne.n	102d6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1026c:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1026e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10270:	2104      	movs	r1, #4
    m_inTail = 0;
   10272:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10276:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10278:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1027c:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   1027e:	7923      	ldrb	r3, [r4, #4]
   10280:	2b02      	cmp	r3, #2
   10282:	d023      	beq.n	102cc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   10284:	6811      	ldr	r1, [r2, #0]
   10286:	2001      	movs	r0, #1
   10288:	f360 611b 	bfi	r1, r0, #24, #4
   1028c:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   1028e:	6851      	ldr	r1, [r2, #4]
   10290:	f363 314d 	bfi	r1, r3, #13, #1
   10294:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   10296:	b1bd      	cbz	r5, 102c8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10298:	6813      	ldr	r3, [r2, #0]
   1029a:	f043 0302 	orr.w	r3, r3, #2
   1029e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102a0:	69d3      	ldr	r3, [r2, #28]
   102a2:	079b      	lsls	r3, r3, #30
   102a4:	d4fc      	bmi.n	102a0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102a6:	6a22      	ldr	r2, [r4, #32]
   102a8:	f992 1001 	ldrsb.w	r1, [r2, #1]
   102ac:	7893      	ldrb	r3, [r2, #2]
   102ae:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   102b2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   102ba:	2001      	movs	r0, #1
   102bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   102c0:	4302      	orrs	r2, r0
   102c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   102c6:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   102c8:	2001      	movs	r0, #1
}
   102ca:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   102cc:	6813      	ldr	r3, [r2, #0]
   102ce:	f36f 631b 	bfc	r3, #24, #4
   102d2:	6013      	str	r3, [r2, #0]
   102d4:	e7df      	b.n	10296 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   102d6:	4620      	mov	r0, r4
   102d8:	4798      	blx	r3
   102da:	6922      	ldr	r2, [r4, #16]
   102dc:	e7cf      	b.n	1027e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   102de:	4620      	mov	r0, r4
   102e0:	4788      	blx	r1
   102e2:	6822      	ldr	r2, [r4, #0]
   102e4:	e7be      	b.n	10264 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   102e6:	bf00      	nop
   102e8:	0000fe61 	.word	0x0000fe61
   102ec:	0000fe71 	.word	0x0000fe71

000102f0 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   102f2:	1f4b      	subs	r3, r1, #5
   102f4:	2b04      	cmp	r3, #4
   102f6:	d85d      	bhi.n	103b4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   102f8:	79c3      	ldrb	r3, [r0, #7]
   102fa:	2b01      	cmp	r3, #1
   102fc:	d056      	beq.n	103ac <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102fe:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   10300:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10302:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10306:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10308:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1030a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1030e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10312:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10316:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10318:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   1031c:	f36f 0400 	bfc	r4, #0, #1
   10320:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10324:	6813      	ldr	r3, [r2, #0]
   10326:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10328:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1032c:	d503      	bpl.n	10336 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1032e:	6813      	ldr	r3, [r2, #0]
   10330:	f36f 0341 	bfc	r3, #1, #1
   10334:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10336:	69d3      	ldr	r3, [r2, #28]
   10338:	f013 0302 	ands.w	r3, r3, #2
   1033c:	d1fb      	bne.n	10336 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   1033e:	6802      	ldr	r2, [r0, #0]
   10340:	460f      	mov	r7, r1
   10342:	6816      	ldr	r6, [r2, #0]
   10344:	4921      	ldr	r1, [pc, #132]	; (103cc <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   10346:	428e      	cmp	r6, r1
   10348:	4604      	mov	r4, r0
   1034a:	d13b      	bne.n	103c4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   1034c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10350:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10354:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10358:	6853      	ldr	r3, [r2, #4]
   1035a:	4a1d      	ldr	r2, [pc, #116]	; (103d0 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   1035c:	4293      	cmp	r3, r2
   1035e:	d12d      	bne.n	103bc <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10360:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10362:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10364:	2104      	movs	r1, #4
    m_inTail = 0;
   10366:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1036a:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   1036c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10370:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   10372:	6853      	ldr	r3, [r2, #4]
   10374:	f367 0302 	bfi	r3, r7, #0, #3
   10378:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   1037a:	b1ed      	cbz	r5, 103b8 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1037c:	6813      	ldr	r3, [r2, #0]
   1037e:	f043 0302 	orr.w	r3, r3, #2
   10382:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10384:	69d3      	ldr	r3, [r2, #28]
   10386:	079b      	lsls	r3, r3, #30
   10388:	d4fc      	bmi.n	10384 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1038a:	6a22      	ldr	r2, [r4, #32]
   1038c:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10390:	7893      	ldrb	r3, [r2, #2]
   10392:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10396:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1039a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1039e:	2001      	movs	r0, #1
   103a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   103a4:	4302      	orrs	r2, r0
   103a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   103aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   103ac:	f1a1 0308 	sub.w	r3, r1, #8
   103b0:	2b01      	cmp	r3, #1
   103b2:	d9a4      	bls.n	102fe <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   103b4:	2000      	movs	r0, #0
   103b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   103b8:	2001      	movs	r0, #1
}
   103ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   103bc:	4620      	mov	r0, r4
   103be:	4798      	blx	r3
   103c0:	6922      	ldr	r2, [r4, #16]
   103c2:	e7d6      	b.n	10372 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   103c4:	47b0      	blx	r6
   103c6:	6822      	ldr	r2, [r4, #0]
   103c8:	e7c6      	b.n	10358 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   103ca:	bf00      	nop
   103cc:	0000fe61 	.word	0x0000fe61
   103d0:	0000fe71 	.word	0x0000fe71

000103d4 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   103d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   103d6:	1e4c      	subs	r4, r1, #1
   103d8:	b2e4      	uxtb	r4, r4
   103da:	2c01      	cmp	r4, #1
   103dc:	d901      	bls.n	103e2 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   103de:	2000      	movs	r0, #0
}
   103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   103e2:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   103e4:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   103e6:	b10d      	cbz	r5, 103ec <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   103e8:	2001      	movs	r0, #1
   103ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103ec:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103ee:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103f0:	f991 7001 	ldrsb.w	r7, [r1, #1]
   103f4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   103f6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103f8:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   103fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10400:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10404:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10408:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1040c:	f365 0100 	bfi	r1, r5, #0, #1
   10410:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10414:	6813      	ldr	r3, [r2, #0]
   10416:	0799      	lsls	r1, r3, #30
   10418:	d503      	bpl.n	10422 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1041a:	6813      	ldr	r3, [r2, #0]
   1041c:	f365 0341 	bfi	r3, r5, #1, #1
   10420:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10422:	69d3      	ldr	r3, [r2, #28]
   10424:	f013 0302 	ands.w	r3, r3, #2
   10428:	d1fb      	bne.n	10422 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   1042a:	6802      	ldr	r2, [r0, #0]
   1042c:	4605      	mov	r5, r0
   1042e:	6811      	ldr	r1, [r2, #0]
   10430:	481d      	ldr	r0, [pc, #116]	; (104a8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   10432:	4281      	cmp	r1, r0
   10434:	d130      	bne.n	10498 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   10436:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1043a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   1043e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   10442:	6853      	ldr	r3, [r2, #4]
   10444:	4a19      	ldr	r2, [pc, #100]	; (104ac <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   10446:	4293      	cmp	r3, r2
   10448:	d12a      	bne.n	104a0 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1044a:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   1044c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1044e:	2104      	movs	r1, #4
    m_inTail = 0;
   10450:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   10454:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   10456:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1045a:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   1045c:	6853      	ldr	r3, [r2, #4]
   1045e:	f364 1386 	bfi	r3, r4, #6, #1
   10462:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10464:	2e00      	cmp	r6, #0
   10466:	d0bf      	beq.n	103e8 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10468:	6813      	ldr	r3, [r2, #0]
   1046a:	f043 0302 	orr.w	r3, r3, #2
   1046e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10470:	69d3      	ldr	r3, [r2, #28]
   10472:	079b      	lsls	r3, r3, #30
   10474:	d4fc      	bmi.n	10470 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10476:	6a2a      	ldr	r2, [r5, #32]
   10478:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1047c:	7893      	ldrb	r3, [r2, #2]
   1047e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10482:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10486:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   1048a:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1048c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10490:	4302      	orrs	r2, r0
   10492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10498:	4628      	mov	r0, r5
   1049a:	4788      	blx	r1
   1049c:	682a      	ldr	r2, [r5, #0]
   1049e:	e7d0      	b.n	10442 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   104a0:	4628      	mov	r0, r5
   104a2:	4798      	blx	r3
   104a4:	692a      	ldr	r2, [r5, #16]
   104a6:	e7d9      	b.n	1045c <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   104a8:	0000fe61 	.word	0x0000fe61
   104ac:	0000fe71 	.word	0x0000fe71

000104b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   104b4:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   104b6:	682b      	ldr	r3, [r5, #0]
   104b8:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   104bc:	b089      	sub	sp, #36	; 0x24
   104be:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   104c0:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   104c2:	69eb      	ldr	r3, [r5, #28]
   104c4:	f013 0301 	ands.w	r3, r3, #1
   104c8:	d1fb      	bne.n	104c2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   104ca:	6822      	ldr	r2, [r4, #0]
   104cc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 105a4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   104d0:	6811      	ldr	r1, [r2, #0]
   104d2:	4541      	cmp	r1, r8
   104d4:	d153      	bne.n	1057e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   104d6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   104da:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   104de:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   104e2:	6853      	ldr	r3, [r2, #4]
   104e4:	4a28      	ldr	r2, [pc, #160]	; (10588 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   104e6:	4293      	cmp	r3, r2
   104e8:	d122      	bne.n	10530 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   104ea:	2200      	movs	r2, #0
    m_inTail = 0;
   104ec:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104f0:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   104f2:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   104f4:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   104f8:	4a24      	ldr	r2, [pc, #144]	; (1058c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104fa:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   104fc:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104fe:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10500:	d01c      	beq.n	1053c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10502:	4a23      	ldr	r2, [pc, #140]	; (10590 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10504:	4293      	cmp	r3, r2
   10506:	f000 8310 	beq.w	10b2a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   1050a:	4a22      	ldr	r2, [pc, #136]	; (10594 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   1050c:	4293      	cmp	r3, r2
   1050e:	f000 8341 	beq.w	10b94 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10512:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10516:	f000 839a 	beq.w	10c4e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   1051a:	4a1f      	ldr	r2, [pc, #124]	; (10598 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   1051c:	4293      	cmp	r3, r2
   1051e:	d043      	beq.n	105a8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10520:	4a1e      	ldr	r2, [pc, #120]	; (1059c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10522:	4293      	cmp	r3, r2
   10524:	f000 8372 	beq.w	10c0c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10528:	2000      	movs	r0, #0
}
   1052a:	b009      	add	sp, #36	; 0x24
   1052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   10530:	4620      	mov	r0, r4
   10532:	4798      	blx	r3
   10534:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   10536:	4a15      	ldr	r2, [pc, #84]	; (1058c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   10538:	4293      	cmp	r3, r2
   1053a:	d1e2      	bne.n	10502 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1053c:	2203      	movs	r2, #3
   1053e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10542:	4a17      	ldr	r2, [pc, #92]	; (105a0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   10544:	9207      	str	r2, [sp, #28]
   10546:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   1054a:	9206      	str	r2, [sp, #24]
   1054c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10550:	9202      	str	r2, [sp, #8]
   10552:	2231      	movs	r2, #49	; 0x31
   10554:	9205      	str	r2, [sp, #20]
   10556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1055a:	9201      	str	r2, [sp, #4]
   1055c:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1055e:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10560:	2601      	movs	r6, #1
   10562:	f04f 092e 	mov.w	r9, #46	; 0x2e
   10566:	9204      	str	r2, [sp, #16]
   10568:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1056c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10570:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   10572:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10576:	f04f 0a07 	mov.w	sl, #7
   1057a:	9200      	str	r2, [sp, #0]
   1057c:	e02f      	b.n	105de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   1057e:	4620      	mov	r0, r4
   10580:	4788      	blx	r1
   10582:	6822      	ldr	r2, [r4, #0]
   10584:	e7ad      	b.n	104e2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   10586:	bf00      	nop
   10588:	0000fe71 	.word	0x0000fe71
   1058c:	40003000 	.word	0x40003000
   10590:	41012000 	.word	0x41012000
   10594:	41014000 	.word	0x41014000
   10598:	43000400 	.word	0x43000400
   1059c:	43000c00 	.word	0x43000c00
   105a0:	00200500 	.word	0x00200500
   105a4:	0000fe61 	.word	0x0000fe61
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   105a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   105ac:	9207      	str	r2, [sp, #28]
   105ae:	9206      	str	r2, [sp, #24]
   105b0:	2220      	movs	r2, #32
   105b2:	9202      	str	r2, [sp, #8]
   105b4:	2245      	movs	r2, #69	; 0x45
   105b6:	9205      	str	r2, [sp, #20]
   105b8:	2210      	movs	r2, #16
   105ba:	9201      	str	r2, [sp, #4]
   105bc:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   105be:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   105c0:	2602      	movs	r6, #2
   105c2:	f04f 0942 	mov.w	r9, #66	; 0x42
   105c6:	9204      	str	r2, [sp, #16]
   105c8:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   105ca:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   105ce:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   105d2:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   105d4:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   105d8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   105dc:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   105de:	6a21      	ldr	r1, [r4, #32]
   105e0:	f991 2001 	ldrsb.w	r2, [r1, #1]
   105e4:	f891 b002 	ldrb.w	fp, [r1, #2]
   105e8:	01d2      	lsls	r2, r2, #7
   105ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   105ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   105f2:	f04f 0e01 	mov.w	lr, #1
   105f6:	fa0e fc0b 	lsl.w	ip, lr, fp
   105fa:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   105fe:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   10602:	f894 c007 	ldrb.w	ip, [r4, #7]
   10606:	45f4      	cmp	ip, lr
   10608:	f040 819d 	bne.w	10946 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1060c:	4dc4      	ldr	r5, [pc, #784]	; (10920 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   1060e:	4ac5      	ldr	r2, [pc, #788]	; (10924 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10610:	f107 0e20 	add.w	lr, r7, #32
   10614:	3620      	adds	r6, #32
   10616:	9f00      	ldr	r7, [sp, #0]
   10618:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   1061c:	9f01      	ldr	r7, [sp, #4]
   1061e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10622:	9f02      	ldr	r7, [sp, #8]
   10624:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10628:	f10a 0e20 	add.w	lr, sl, #32
   1062c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10630:	f36f 1586 	bfc	r5, #6, #1
   10634:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10638:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1063c:	066d      	lsls	r5, r5, #25
   1063e:	d4fb      	bmi.n	10638 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   10640:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10644:	4eb7      	ldr	r6, [pc, #732]	; (10924 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10646:	f04f 0c07 	mov.w	ip, #7
   1064a:	f36c 0503 	bfi	r5, ip, #0, #4
   1064e:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10652:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10656:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1065a:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1065e:	6875      	ldr	r5, [r6, #4]
   10660:	f015 051c 	ands.w	r5, r5, #28
   10664:	d1fb      	bne.n	1065e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   10666:	681a      	ldr	r2, [r3, #0]
   10668:	2603      	movs	r6, #3
   1066a:	f366 0284 	bfi	r2, r6, #2, #3
   1066e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10670:	681a      	ldr	r2, [r3, #0]
   10672:	7a26      	ldrb	r6, [r4, #8]
   10674:	f366 725d 	bfi	r2, r6, #29, #1
   10678:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   1067a:	681a      	ldr	r2, [r3, #0]
   1067c:	7a66      	ldrb	r6, [r4, #9]
   1067e:	f366 721c 	bfi	r2, r6, #28, #1
   10682:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   10684:	681a      	ldr	r2, [r3, #0]
   10686:	f365 621b 	bfi	r2, r5, #24, #4
   1068a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   1068c:	6962      	ldr	r2, [r4, #20]
   1068e:	681e      	ldr	r6, [r3, #0]
   10690:	7a52      	ldrb	r2, [r2, #9]
   10692:	f362 5615 	bfi	r6, r2, #20, #2
   10696:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10698:	7a49      	ldrb	r1, [r1, #9]
   1069a:	681a      	ldr	r2, [r3, #0]
   1069c:	2900      	cmp	r1, #0
   1069e:	bf0c      	ite	eq
   106a0:	2100      	moveq	r1, #0
   106a2:	2102      	movne	r1, #2
   106a4:	f361 4211 	bfi	r2, r1, #16, #2
   106a8:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   106aa:	685a      	ldr	r2, [r3, #4]
   106ac:	79a1      	ldrb	r1, [r4, #6]
   106ae:	f361 0202 	bfi	r2, r1, #0, #3
   106b2:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   106b4:	681a      	ldr	r2, [r3, #0]
   106b6:	f365 729e 	bfi	r2, r5, #30, #1
   106ba:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   106bc:	681a      	ldr	r2, [r3, #0]
   106be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   106c2:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   106c4:	685a      	ldr	r2, [r3, #4]
   106c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   106ca:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   106cc:	685a      	ldr	r2, [r3, #4]
   106ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   106d2:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   106d4:	69a3      	ldr	r3, [r4, #24]
   106d6:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   106da:	789a      	ldrb	r2, [r3, #2]
   106dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
   106e0:	01db      	lsls	r3, r3, #7
   106e2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   106e6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   106ea:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   106ee:	07d7      	lsls	r7, r2, #31
   106f0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   106f4:	bf4c      	ite	mi
   106f6:	f366 1507 	bfimi	r5, r6, #4, #4
   106fa:	f366 0503 	bfipl	r5, r6, #0, #4
   106fe:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10702:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10704:	2901      	cmp	r1, #1
   10706:	f240 822f 	bls.w	10b68 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   1070a:	2902      	cmp	r1, #2
   1070c:	d10a      	bne.n	10724 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1070e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10712:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10716:	4413      	add	r3, r2
   10718:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1071c:	f042 0201 	orr.w	r2, r2, #1
   10720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10724:	2807      	cmp	r0, #7
   10726:	d031      	beq.n	1078c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10728:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1072c:	2b07      	cmp	r3, #7
   1072e:	d02d      	beq.n	1078c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   10730:	f7fe fbf0 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10734:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10736:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10738:	f023 0302 	bic.w	r3, r3, #2
   1073c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1073e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10740:	6803      	ldr	r3, [r0, #0]
   10742:	2b01      	cmp	r3, #1
   10744:	d0fc      	beq.n	10740 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   10746:	9b06      	ldr	r3, [sp, #24]
   10748:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1074a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   1074e:	f7fe fbeb 	bl	ef28 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10752:	2300      	movs	r3, #0
   10754:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10756:	6923      	ldr	r3, [r4, #16]
   10758:	3328      	adds	r3, #40	; 0x28
   1075a:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   1075c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10760:	f7fe fbd8 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10764:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10766:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10768:	f023 0302 	bic.w	r3, r3, #2
   1076c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1076e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10770:	6803      	ldr	r3, [r0, #0]
   10772:	2b01      	cmp	r3, #1
   10774:	d0fc      	beq.n	10770 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   10776:	9b07      	ldr	r3, [sp, #28]
   10778:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   1077a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1077e:	f7fe fbd3 	bl	ef28 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10782:	2300      	movs	r3, #0
   10784:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10786:	6923      	ldr	r3, [r4, #16]
   10788:	3328      	adds	r3, #40	; 0x28
   1078a:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   1078c:	6820      	ldr	r0, [r4, #0]
   1078e:	4a66      	ldr	r2, [pc, #408]	; (10928 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10790:	6903      	ldr	r3, [r0, #16]
   10792:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   10796:	4293      	cmp	r3, r2
   10798:	f040 81bd 	bne.w	10b16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1079c:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1079e:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   107a0:	f991 5001 	ldrsb.w	r5, [r1, #1]
   107a4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   107a6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   107a8:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   107ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   107b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   107b4:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   107b8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   107bc:	f36f 0100 	bfc	r1, #0, #1
   107c0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   107c4:	6813      	ldr	r3, [r2, #0]
   107c6:	0799      	lsls	r1, r3, #30
   107c8:	d503      	bpl.n	107d2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   107ca:	6813      	ldr	r3, [r2, #0]
   107cc:	f36f 0341 	bfc	r3, #1, #1
   107d0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   107d2:	69d3      	ldr	r3, [r2, #28]
   107d4:	f013 0302 	ands.w	r3, r3, #2
   107d8:	d1fb      	bne.n	107d2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   107da:	6802      	ldr	r2, [r0, #0]
   107dc:	4542      	cmp	r2, r8
   107de:	f040 8211 	bne.w	10c04 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   107e2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   107e6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   107ea:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   107ee:	6843      	ldr	r3, [r0, #4]
   107f0:	4a4e      	ldr	r2, [pc, #312]	; (1092c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   107f2:	4293      	cmp	r3, r2
   107f4:	f040 8202 	bne.w	10bfc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107f8:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   107fa:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107fc:	2204      	movs	r2, #4
    m_inTail = 0;
   107fe:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10802:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10804:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10808:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   1080a:	79e3      	ldrb	r3, [r4, #7]
   1080c:	2b01      	cmp	r3, #1
   1080e:	f040 8150 	bne.w	10ab2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10812:	4b47      	ldr	r3, [pc, #284]	; (10930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10814:	444b      	add	r3, r9
   10816:	fbb3 f3f9 	udiv	r3, r3, r9
   1081a:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   1081c:	2bff      	cmp	r3, #255	; 0xff
   1081e:	bf28      	it	cs
   10820:	23ff      	movcs	r3, #255	; 0xff
   10822:	b2db      	uxtb	r3, r3
   10824:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10826:	2e00      	cmp	r6, #0
   10828:	f000 816f 	beq.w	10b0a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1082c:	682b      	ldr	r3, [r5, #0]
   1082e:	f043 0302 	orr.w	r3, r3, #2
   10832:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10834:	69eb      	ldr	r3, [r5, #28]
   10836:	079b      	lsls	r3, r3, #30
   10838:	d4fc      	bmi.n	10834 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1083a:	6a22      	ldr	r2, [r4, #32]
   1083c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10840:	7890      	ldrb	r0, [r2, #2]
   10842:	01db      	lsls	r3, r3, #7
   10844:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10848:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   1084c:	4402      	add	r2, r0
   1084e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10852:	f041 0101 	orr.w	r1, r1, #1
   10856:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1085a:	69a6      	ldr	r6, [r4, #24]
   1085c:	4a35      	ldr	r2, [pc, #212]	; (10934 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   1085e:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10862:	78b7      	ldrb	r7, [r6, #2]
   10864:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10868:	2601      	movs	r6, #1
   1086a:	40be      	lsls	r6, r7
   1086c:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1086e:	6961      	ldr	r1, [r4, #20]
   10870:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10874:	f891 c002 	ldrb.w	ip, [r1, #2]
   10878:	f991 e001 	ldrsb.w	lr, [r1, #1]
   1087c:	f01c 0f01 	tst.w	ip, #1
   10880:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   10884:	f000 8108 	beq.w	10a98 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10888:	4472      	add	r2, lr
   1088a:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   1088e:	f006 060f 	and.w	r6, r6, #15
   10892:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   10896:	f366 1107 	bfi	r1, r6, #4, #4
   1089a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1089e:	4925      	ldr	r1, [pc, #148]	; (10934 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   108a0:	eb01 020e 	add.w	r2, r1, lr
   108a4:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   108a8:	2701      	movs	r7, #1
   108aa:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   108ae:	f04f 0803 	mov.w	r8, #3
   108b2:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   108b6:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   108b8:	69e2      	ldr	r2, [r4, #28]
   108ba:	7894      	ldrb	r4, [r2, #2]
   108bc:	f992 2001 	ldrsb.w	r2, [r2, #1]
   108c0:	01d2      	lsls	r2, r2, #7
   108c2:	4411      	add	r1, r2
   108c4:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   108c8:	f014 0f01 	tst.w	r4, #1
   108cc:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   108d0:	bf14      	ite	ne
   108d2:	f366 1707 	bfine	r7, r6, #4, #4
   108d6:	f366 0703 	bfieq	r7, r6, #0, #4
   108da:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   108de:	4915      	ldr	r1, [pc, #84]	; (10934 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   108e0:	440a      	add	r2, r1
   108e2:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108e4:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   108e6:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108e8:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   108ec:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108f0:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108f8:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   108fe:	bf4c      	ite	mi
   10900:	f366 1207 	bfimi	r2, r6, #4, #4
   10904:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10908:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1090a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   1090e:	2201      	movs	r2, #1
   10910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10914:	682b      	ldr	r3, [r5, #0]
   10916:	f043 0302 	orr.w	r3, r3, #2
   1091a:	602b      	str	r3, [r5, #0]
   1091c:	e00c      	b.n	10938 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   1091e:	bf00      	nop
   10920:	e000e100 	.word	0xe000e100
   10924:	40001c00 	.word	0x40001c00
   10928:	0000ff95 	.word	0x0000ff95
   1092c:	0000fe71 	.word	0x0000fe71
   10930:	004c4b3f 	.word	0x004c4b3f
   10934:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10938:	69eb      	ldr	r3, [r5, #28]
   1093a:	079b      	lsls	r3, r3, #30
   1093c:	d4fc      	bmi.n	10938 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   1093e:	2001      	movs	r0, #1
}
   10940:	b009      	add	sp, #36	; 0x24
   10942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10946:	6829      	ldr	r1, [r5, #0]
   10948:	f36e 0184 	bfi	r1, lr, #2, #3
   1094c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   1094e:	6829      	ldr	r1, [r5, #0]
   10950:	f36f 314f 	bfc	r1, #13, #3
   10954:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10956:	6829      	ldr	r1, [r5, #0]
   10958:	f36f 711c 	bfc	r1, #28, #1
   1095c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   1095e:	6829      	ldr	r1, [r5, #0]
   10960:	f36e 5115 	bfi	r1, lr, #20, #2
   10964:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10966:	f1bc 0f00 	cmp.w	ip, #0
   1096a:	d104      	bne.n	10976 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   1096c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10970:	2900      	cmp	r1, #0
   10972:	f040 81af 	bne.w	10cd4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10976:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10978:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   1097a:	f362 0302 	bfi	r3, r2, #0, #3
   1097e:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10980:	682b      	ldr	r3, [r5, #0]
   10982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10986:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10988:	7923      	ldrb	r3, [r4, #4]
   1098a:	2b02      	cmp	r3, #2
   1098c:	f000 817c 	beq.w	10c88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10990:	682a      	ldr	r2, [r5, #0]
   10992:	2101      	movs	r1, #1
   10994:	f361 621b 	bfi	r2, r1, #24, #4
   10998:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   1099a:	686a      	ldr	r2, [r5, #4]
   1099c:	f363 324d 	bfi	r2, r3, #13, #1
   109a0:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   109a2:	7963      	ldrb	r3, [r4, #5]
   109a4:	686a      	ldr	r2, [r5, #4]
   109a6:	3b01      	subs	r3, #1
   109a8:	f363 1286 	bfi	r2, r3, #6, #1
   109ac:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   109ae:	686b      	ldr	r3, [r5, #4]
   109b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   109b4:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   109b6:	686b      	ldr	r3, [r5, #4]
   109b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   109bc:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   109be:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   109c0:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   109c2:	f36f 2349 	bfc	r3, #9, #1
   109c6:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   109c8:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   109ca:	69eb      	ldr	r3, [r5, #28]
   109cc:	075b      	lsls	r3, r3, #29
   109ce:	d4fc      	bmi.n	109ca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   109d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   109d4:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109d6:	4bb7      	ldr	r3, [pc, #732]	; (10cb4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109d8:	9a04      	ldr	r2, [sp, #16]
   109da:	441a      	add	r2, r3
   109dc:	4610      	mov	r0, r2
   109de:	9a05      	ldr	r2, [sp, #20]
   109e0:	eb03 0109 	add.w	r1, r3, r9
   109e4:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109e6:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109e8:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109ea:	9f00      	ldr	r7, [sp, #0]
   109ec:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109f0:	2220      	movs	r2, #32
   109f2:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109f6:	9901      	ldr	r1, [sp, #4]
   109f8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109fc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10a00:	9a02      	ldr	r2, [sp, #8]
   10a02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10a06:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   10a0a:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10a0e:	69a3      	ldr	r3, [r4, #24]
   10a10:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10a14:	789a      	ldrb	r2, [r3, #2]
   10a16:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10a1a:	01db      	lsls	r3, r3, #7
   10a1c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10a20:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10a24:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10a28:	07d6      	lsls	r6, r2, #31
   10a2a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   10a2e:	bf4c      	ite	mi
   10a30:	f365 1007 	bfimi	r0, r5, #4, #4
   10a34:	f365 0003 	bfipl	r0, r5, #0, #4
   10a38:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   10a3c:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   10a3e:	2901      	cmp	r1, #1
   10a40:	f240 80c7 	bls.w	10bd2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10a44:	2902      	cmp	r1, #2
   10a46:	d10a      	bne.n	10a5e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10a48:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10a50:	4413      	add	r3, r2
   10a52:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10a56:	f042 0201 	orr.w	r2, r2, #1
   10a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   10a5e:	f10a 0e20 	add.w	lr, sl, #32
   10a62:	4a95      	ldr	r2, [pc, #596]	; (10cb8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10a64:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10a68:	f36f 1386 	bfc	r3, #6, #1
   10a6c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10a70:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10a74:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10a78:	2b00      	cmp	r3, #0
   10a7a:	d1f9      	bne.n	10a70 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   10a7c:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10a80:	f363 0103 	bfi	r1, r3, #0, #4
   10a84:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10a88:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a90:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10a94:	6853      	ldr	r3, [r2, #4]
   10a96:	e679      	b.n	1078c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10a98:	eb02 010e 	add.w	r1, r2, lr
   10a9c:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10aa0:	f006 060f 	and.w	r6, r6, #15
   10aa4:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10aa8:	f366 0203 	bfi	r2, r6, #0, #4
   10aac:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10ab0:	e6f5      	b.n	1089e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10ab2:	4648      	mov	r0, r9
   10ab4:	f00b f814 	bl	1bae0 <__aeabi_ui2d>
   10ab8:	2200      	movs	r2, #0
   10aba:	4b80      	ldr	r3, [pc, #512]	; (10cbc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   10abc:	f00b f886 	bl	1bbcc <__aeabi_dmul>
   10ac0:	4b7f      	ldr	r3, [pc, #508]	; (10cc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10ac2:	4680      	mov	r8, r0
   10ac4:	6818      	ldr	r0, [r3, #0]
   10ac6:	4689      	mov	r9, r1
   10ac8:	f00b f80a 	bl	1bae0 <__aeabi_ui2d>
   10acc:	4602      	mov	r2, r0
   10ace:	460b      	mov	r3, r1
   10ad0:	4640      	mov	r0, r8
   10ad2:	4649      	mov	r1, r9
   10ad4:	f00b f9a4 	bl	1be20 <__aeabi_ddiv>
   10ad8:	4602      	mov	r2, r0
   10ada:	460b      	mov	r3, r1
   10adc:	2000      	movs	r0, #0
   10ade:	4979      	ldr	r1, [pc, #484]	; (10cc4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10ae0:	f00a fec0 	bl	1b864 <__aeabi_dsub>
   10ae4:	2200      	movs	r2, #0
   10ae6:	4b78      	ldr	r3, [pc, #480]	; (10cc8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10ae8:	f00b f870 	bl	1bbcc <__aeabi_dmul>
   10aec:	f00b fb50 	bl	1c190 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10af0:	f00b f818 	bl	1bb24 <__aeabi_f2d>
   10af4:	2200      	movs	r2, #0
   10af6:	4b75      	ldr	r3, [pc, #468]	; (10ccc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10af8:	f00a feb6 	bl	1b868 <__adddf3>
   10afc:	f00b fb28 	bl	1c150 <__aeabi_d2uiz>
   10b00:	b280      	uxth	r0, r0
   10b02:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10b04:	2e00      	cmp	r6, #0
   10b06:	f47f ae91 	bne.w	1082c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10b0a:	6a22      	ldr	r2, [r4, #32]
   10b0c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10b10:	7890      	ldrb	r0, [r2, #2]
   10b12:	01db      	lsls	r3, r3, #7
   10b14:	e6a1      	b.n	1085a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10b16:	4649      	mov	r1, r9
   10b18:	4620      	mov	r0, r4
   10b1a:	4798      	blx	r3
   10b1c:	6a22      	ldr	r2, [r4, #32]
   10b1e:	6925      	ldr	r5, [r4, #16]
   10b20:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10b24:	7890      	ldrb	r0, [r2, #2]
   10b26:	01db      	lsls	r3, r3, #7
   10b28:	e697      	b.n	1085a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10b2e:	9207      	str	r2, [sp, #28]
   10b30:	9206      	str	r2, [sp, #24]
   10b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10b36:	9202      	str	r2, [sp, #8]
   10b38:	2239      	movs	r2, #57	; 0x39
   10b3a:	9205      	str	r2, [sp, #20]
   10b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10b40:	9201      	str	r2, [sp, #4]
   10b42:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b44:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b46:	2601      	movs	r6, #1
   10b48:	f04f 0936 	mov.w	r9, #54	; 0x36
   10b4c:	9204      	str	r2, [sp, #16]
   10b4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b52:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b56:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10b5a:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10b5c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b60:	f04f 0a17 	mov.w	sl, #23
   10b64:	9200      	str	r2, [sp, #0]
   10b66:	e53a      	b.n	105de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10b68:	2900      	cmp	r1, #0
   10b6a:	f040 8092 	bne.w	10c92 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10b6e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10b72:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10b76:	2501      	movs	r5, #1
   10b78:	4095      	lsls	r5, r2
   10b7a:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10b7c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10b80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10b84:	4413      	add	r3, r2
   10b86:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10b8a:	f36f 0200 	bfc	r2, #0, #1
   10b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10b92:	e5c7      	b.n	10724 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10b98:	9207      	str	r2, [sp, #28]
   10b9a:	9206      	str	r2, [sp, #24]
   10b9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10ba0:	9202      	str	r2, [sp, #8]
   10ba2:	223d      	movs	r2, #61	; 0x3d
   10ba4:	9205      	str	r2, [sp, #20]
   10ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10baa:	9201      	str	r2, [sp, #4]
   10bac:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10bae:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10bb0:	2601      	movs	r6, #1
   10bb2:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10bb6:	9204      	str	r2, [sp, #16]
   10bb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10bbc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10bc0:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10bc4:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10bc6:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10bca:	f04f 0a18 	mov.w	sl, #24
   10bce:	9200      	str	r2, [sp, #0]
   10bd0:	e505      	b.n	105de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10bd2:	2900      	cmp	r1, #0
   10bd4:	d165      	bne.n	10ca2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10bd6:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10bda:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10bde:	2001      	movs	r0, #1
   10be0:	4090      	lsls	r0, r2
   10be2:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10be4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10be8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10bec:	4413      	add	r3, r2
   10bee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10bf2:	f36f 0200 	bfc	r2, #0, #1
   10bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10bfa:	e730      	b.n	10a5e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10bfc:	4620      	mov	r0, r4
   10bfe:	4798      	blx	r3
   10c00:	6925      	ldr	r5, [r4, #16]
   10c02:	e602      	b.n	1080a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10c04:	4620      	mov	r0, r4
   10c06:	4790      	blx	r2
   10c08:	6820      	ldr	r0, [r4, #0]
   10c0a:	e5f0      	b.n	107ee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10c0c:	2205      	movs	r2, #5
   10c0e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10c16:	9202      	str	r2, [sp, #8]
   10c18:	224d      	movs	r2, #77	; 0x4d
   10c1a:	492d      	ldr	r1, [pc, #180]	; (10cd0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10c1c:	9205      	str	r2, [sp, #20]
   10c1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10c22:	9201      	str	r2, [sp, #4]
   10c24:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10c26:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10c28:	2602      	movs	r6, #2
   10c2a:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10c2e:	9107      	str	r1, [sp, #28]
   10c30:	9204      	str	r2, [sp, #16]
   10c32:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10c3a:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10c3c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10c40:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10c42:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10c46:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10c4a:	9200      	str	r2, [sp, #0]
   10c4c:	e4c7      	b.n	105de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10c52:	9207      	str	r2, [sp, #28]
   10c54:	9206      	str	r2, [sp, #24]
   10c56:	2241      	movs	r2, #65	; 0x41
   10c58:	9205      	str	r2, [sp, #20]
   10c5a:	2240      	movs	r2, #64	; 0x40
   10c5c:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10c5e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c60:	2102      	movs	r1, #2
   10c62:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10c66:	9204      	str	r2, [sp, #16]
   10c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10c6c:	4637      	mov	r7, r6
   10c6e:	9601      	str	r6, [sp, #4]
   10c70:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10c72:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c76:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10c7a:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10c7c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10c80:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10c84:	9200      	str	r2, [sp, #0]
   10c86:	e4aa      	b.n	105de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10c88:	682b      	ldr	r3, [r5, #0]
   10c8a:	f36f 631b 	bfc	r3, #24, #4
   10c8e:	602b      	str	r3, [r5, #0]
   10c90:	e687      	b.n	109a2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10c92:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c96:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c9a:	2501      	movs	r5, #1
   10c9c:	4095      	lsls	r5, r2
   10c9e:	614d      	str	r5, [r1, #20]
   10ca0:	e76c      	b.n	10b7c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10ca2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10ca6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10caa:	2001      	movs	r0, #1
   10cac:	4090      	lsls	r0, r2
   10cae:	6148      	str	r0, [r1, #20]
   10cb0:	e798      	b.n	10be4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10cb2:	bf00      	nop
   10cb4:	e000e100 	.word	0xe000e100
   10cb8:	40001c00 	.word	0x40001c00
   10cbc:	40300000 	.word	0x40300000
   10cc0:	200000e0 	.word	0x200000e0
   10cc4:	3ff00000 	.word	0x3ff00000
   10cc8:	40f00000 	.word	0x40f00000
   10ccc:	3fe00000 	.word	0x3fe00000
   10cd0:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10cd4:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10cd6:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10cd8:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10cdc:	f36c 0100 	bfi	r1, ip, #0, #1
   10ce0:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ce4:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ce6:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10cea:	0790      	lsls	r0, r2, #30
   10cec:	d503      	bpl.n	10cf6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10cee:	681a      	ldr	r2, [r3, #0]
   10cf0:	f36c 0241 	bfi	r2, ip, #1, #1
   10cf4:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10cf6:	69da      	ldr	r2, [r3, #28]
   10cf8:	f012 0202 	ands.w	r2, r2, #2
   10cfc:	d1fb      	bne.n	10cf6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10cfe:	6821      	ldr	r1, [r4, #0]
   10d00:	680b      	ldr	r3, [r1, #0]
   10d02:	4543      	cmp	r3, r8
   10d04:	d13b      	bne.n	10d7e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   10d06:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10d0a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   10d0e:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   10d12:	684b      	ldr	r3, [r1, #4]
   10d14:	4a1c      	ldr	r2, [pc, #112]	; (10d88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   10d16:	4293      	cmp	r3, r2
   10d18:	d12d      	bne.n	10d76 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10d1a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10d1c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10d1e:	2104      	movs	r1, #4
    m_inTail = 0;
   10d20:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10d24:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10d26:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10d2a:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   10d2c:	7b21      	ldrb	r1, [r4, #12]
   10d2e:	6813      	ldr	r3, [r2, #0]
   10d30:	2900      	cmp	r1, #0
   10d32:	bf0c      	ite	eq
   10d34:	2100      	moveq	r1, #0
   10d36:	2102      	movne	r1, #2
   10d38:	f361 4311 	bfi	r3, r1, #16, #2
   10d3c:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   10d3e:	f1bb 0f00 	cmp.w	fp, #0
   10d42:	f43f ae18 	beq.w	10976 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10d46:	6813      	ldr	r3, [r2, #0]
   10d48:	f043 0302 	orr.w	r3, r3, #2
   10d4c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10d4e:	69d3      	ldr	r3, [r2, #28]
   10d50:	0799      	lsls	r1, r3, #30
   10d52:	d4fc      	bmi.n	10d4e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10d54:	6a23      	ldr	r3, [r4, #32]
   10d56:	f993 2001 	ldrsb.w	r2, [r3, #1]
   10d5a:	789b      	ldrb	r3, [r3, #2]
   10d5c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10d60:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d68:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d6c:	f042 0201 	orr.w	r2, r2, #1
   10d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10d74:	e5ff      	b.n	10976 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   10d76:	4620      	mov	r0, r4
   10d78:	4798      	blx	r3
   10d7a:	6922      	ldr	r2, [r4, #16]
   10d7c:	e7d6      	b.n	10d2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   10d7e:	4620      	mov	r0, r4
   10d80:	4798      	blx	r3
   10d82:	6821      	ldr	r1, [r4, #0]
   10d84:	e7c5      	b.n	10d12 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   10d86:	bf00      	nop
   10d88:	0000fe71 	.word	0x0000fe71

00010d8c <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   10d8c:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   10d90:	b92a      	cbnz	r2, 10d9e <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   10d92:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   10d94:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   10d96:	428a      	cmp	r2, r1
        m_portOpen = true;
   10d98:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   10d9c:	d900      	bls.n	10da0 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   10d9e:	4770      	bx	lr
   10da0:	f7ff bb86 	b.w	104b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00010da4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10da6:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   10da8:	4f20      	ldr	r7, [pc, #128]	; (10e2c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   10daa:	6182      	str	r2, [r0, #24]
   10dac:	61c3      	str	r3, [r0, #28]
   10dae:	4d20      	ldr	r5, [pc, #128]	; (10e30 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   10db0:	60a7      	str	r7, [r4, #8]
   10db2:	9f06      	ldr	r7, [sp, #24]
   10db4:	f8df c080 	ldr.w	ip, [pc, #128]	; 10e38 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10db8:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   10dbc:	6065      	str	r5, [r4, #4]
   10dbe:	2307      	movs	r3, #7
   10dc0:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10dc2:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   10dc4:	6227      	str	r7, [r4, #32]
   10dc6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   10dca:	2780      	movs	r7, #128	; 0x80
   10dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10dd0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   10dd4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   10dd8:	f8c4 c000 	str.w	ip, [r4]
   10ddc:	6261      	str	r1, [r4, #36]	; 0x24
   10dde:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   10de2:	85a2      	strh	r2, [r4, #44]	; 0x2c
   10de4:	4629      	mov	r1, r5
   10de6:	463a      	mov	r2, r7
   10de8:	6166      	str	r6, [r4, #20]
   10dea:	7325      	strb	r5, [r4, #12]
   10dec:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   10df0:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   10df4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10df8:	f00d fbb8 	bl	1e56c <memset>
   10dfc:	463a      	mov	r2, r7
   10dfe:	4629      	mov	r1, r5
   10e00:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10e04:	f00d fbb2 	bl	1e56c <memset>
   10e08:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   10e0c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10e10:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   10e14:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   10e18:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   10e1c:	7a32      	ldrb	r2, [r6, #8]
   10e1e:	4b05      	ldr	r3, [pc, #20]	; (10e34 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   10e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10e24:	6123      	str	r3, [r4, #16]
}
   10e26:	4620      	mov	r0, r4
   10e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e2a:	bf00      	nop
   10e2c:	02000100 	.word	0x02000100
   10e30:	00080102 	.word	0x00080102
   10e34:	00023518 	.word	0x00023518
   10e38:	000234d0 	.word	0x000234d0

00010e3c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10e3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   10e3e:	4907      	ldr	r1, [pc, #28]	; (10e5c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10e40:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   10e44:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   10e46:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10e48:	fbb2 f2f3 	udiv	r2, r2, r3
   10e4c:	2a02      	cmp	r2, #2
   10e4e:	bf38      	it	cc
   10e50:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   10e52:	680b      	ldr	r3, [r1, #0]
   10e54:	1a1b      	subs	r3, r3, r0
   10e56:	429a      	cmp	r2, r3
   10e58:	d8fb      	bhi.n	10e52 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   10e5a:	4770      	bx	lr
   10e5c:	20001be8 	.word	0x20001be8

00010e60 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   10e60:	2901      	cmp	r1, #1
   10e62:	d901      	bls.n	10e68 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   10e64:	2000      	movs	r0, #0
   10e66:	4770      	bx	lr
    if (!m_portOpen) {
   10e68:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   10e6c:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   10e6e:	b10a      	cbz	r2, 10e74 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   10e70:	f7ff bb1e 	b.w	104b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   10e74:	2001      	movs	r0, #1
}
   10e76:	4770      	bx	lr

00010e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   10e78:	2901      	cmp	r1, #1
    m_ssMode = mode;
   10e7a:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   10e7c:	d914      	bls.n	10ea8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   10e7e:	2902      	cmp	r1, #2
   10e80:	d110      	bne.n	10ea4 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e82:	6982      	ldr	r2, [r0, #24]
   10e84:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10e88:	7893      	ldrb	r3, [r2, #2]
   10e8a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10e8e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   10e96:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e98:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e9c:	4302      	orrs	r2, r0
   10e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10ea2:	4770      	bx	lr
            success = false;
   10ea4:	2000      	movs	r0, #0
}
   10ea6:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10ea8:	6982      	ldr	r2, [r0, #24]
   10eaa:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10eae:	7892      	ldrb	r2, [r2, #2]
   10eb0:	01db      	lsls	r3, r3, #7
   10eb2:	b199      	cbz	r1, 10edc <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   10eb4:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10eb8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10ebc:	2001      	movs	r0, #1
   10ebe:	4090      	lsls	r0, r2
   10ec0:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10ec2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ec6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10eca:	4413      	add	r3, r2
   10ecc:	2001      	movs	r0, #1
   10ece:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10ed2:	f36f 0200 	bfc	r2, #0, #1
   10ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10eda:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10edc:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10ee0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10ee4:	2001      	movs	r0, #1
   10ee6:	4090      	lsls	r0, r2
   10ee8:	6188      	str	r0, [r1, #24]
   10eea:	e7ea      	b.n	10ec2 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

00010eec <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   10eec:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   10eee:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   10ef0:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   10ef2:	2b01      	cmp	r3, #1
    m_phase = phase;
   10ef4:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   10ef6:	d000      	beq.n	10efa <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   10ef8:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10efa:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10efc:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10efe:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10f02:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10f04:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f06:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10f0a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10f0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10f12:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f16:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10f1a:	f36f 0100 	bfc	r1, #0, #1
   10f1e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10f22:	6813      	ldr	r3, [r2, #0]
   10f24:	0799      	lsls	r1, r3, #30
   10f26:	d503      	bpl.n	10f30 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10f28:	6813      	ldr	r3, [r2, #0]
   10f2a:	f36f 0341 	bfc	r3, #1, #1
   10f2e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10f30:	69d3      	ldr	r3, [r2, #28]
   10f32:	f013 0302 	ands.w	r3, r3, #2
   10f36:	d1fb      	bne.n	10f30 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   10f38:	6802      	ldr	r2, [r0, #0]
   10f3a:	4604      	mov	r4, r0
   10f3c:	6811      	ldr	r1, [r2, #0]
   10f3e:	4821      	ldr	r0, [pc, #132]	; (10fc4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   10f40:	4281      	cmp	r1, r0
   10f42:	d136      	bne.n	10fb2 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   10f44:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10f48:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10f4c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10f50:	6853      	ldr	r3, [r2, #4]
   10f52:	4a1d      	ldr	r2, [pc, #116]	; (10fc8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   10f54:	4293      	cmp	r3, r2
   10f56:	d130      	bne.n	10fba <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f58:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10f5a:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f5c:	2104      	movs	r1, #4
    m_inTail = 0;
   10f5e:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10f62:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10f64:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f68:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10f6a:	7a21      	ldrb	r1, [r4, #8]
   10f6c:	681a      	ldr	r2, [r3, #0]
   10f6e:	f361 725d 	bfi	r2, r1, #29, #1
   10f72:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10f74:	7a61      	ldrb	r1, [r4, #9]
   10f76:	681a      	ldr	r2, [r3, #0]
   10f78:	f361 721c 	bfi	r2, r1, #28, #1
   10f7c:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   10f7e:	2d00      	cmp	r5, #0
   10f80:	d0ba      	beq.n	10ef8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10f82:	681a      	ldr	r2, [r3, #0]
   10f84:	f042 0202 	orr.w	r2, r2, #2
   10f88:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10f8a:	69da      	ldr	r2, [r3, #28]
   10f8c:	0792      	lsls	r2, r2, #30
   10f8e:	d4fc      	bmi.n	10f8a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f90:	6a22      	ldr	r2, [r4, #32]
   10f92:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10f96:	7893      	ldrb	r3, [r2, #2]
   10f98:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10f9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10fa0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10fa4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10fa8:	f042 0201 	orr.w	r2, r2, #1
   10fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10fb0:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   10fb2:	4620      	mov	r0, r4
   10fb4:	4788      	blx	r1
   10fb6:	6822      	ldr	r2, [r4, #0]
   10fb8:	e7ca      	b.n	10f50 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   10fba:	4620      	mov	r0, r4
   10fbc:	4798      	blx	r3
   10fbe:	6923      	ldr	r3, [r4, #16]
   10fc0:	e7d3      	b.n	10f6a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   10fc2:	bf00      	nop
   10fc4:	0000fe61 	.word	0x0000fe61
   10fc8:	0000fe71 	.word	0x0000fe71

00010fcc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10fcc:	b470      	push	{r4, r5, r6}
   10fce:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   10fd0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10fd4:	b120      	cbz	r0, 10fe0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   10fd6:	79e0      	ldrb	r0, [r4, #7]
   10fd8:	2801      	cmp	r0, #1
        return 0;
   10fda:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   10fde:	d001      	beq.n	10fe4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   10fe0:	bc70      	pop	{r4, r5, r6}
   10fe2:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	ddfb      	ble.n	10fe0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   10fe8:	6925      	ldr	r5, [r4, #16]
   10fea:	b1b9      	cbz	r1, 1101c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   10fec:	1c4e      	adds	r6, r1, #1
   10fee:	7809      	ldrb	r1, [r1, #0]
   10ff0:	62a9      	str	r1, [r5, #40]	; 0x28
   10ff2:	e003      	b.n	10ffc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   10ff4:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10ff8:	2900      	cmp	r1, #0
   10ffa:	d0f1      	beq.n	10fe0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10ffc:	7e29      	ldrb	r1, [r5, #24]
   10ffe:	0749      	lsls	r1, r1, #29
   11000:	d5f8      	bpl.n	10ff4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   11002:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11004:	0789      	lsls	r1, r1, #30
   11006:	d5f5      	bpl.n	10ff4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   11008:	b152      	cbz	r2, 11020 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   1100a:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   1100c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1100e:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   11010:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   11012:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   11016:	d007      	beq.n	11028 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   11018:	4631      	mov	r1, r6
   1101a:	e7e5      	b.n	10fe8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   1101c:	460e      	mov	r6, r1
   1101e:	e7e7      	b.n	10ff0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   11020:	3001      	adds	r0, #1
   11022:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   11024:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   11026:	d1f7      	bne.n	11018 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   11028:	4618      	mov	r0, r3
   1102a:	e7d9      	b.n	10fe0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

0001102c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   1102c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   11030:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   11034:	b12d      	cbz	r5, 11042 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   11036:	f890 8007 	ldrb.w	r8, [r0, #7]
   1103a:	f1b8 0f01 	cmp.w	r8, #1
   1103e:	d003      	beq.n	11048 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   11040:	2500      	movs	r5, #0
}
   11042:	4628      	mov	r0, r5
   11044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11048:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   1104c:	f1be 0f07 	cmp.w	lr, #7
   11050:	d0f6      	beq.n	11040 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11052:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   11056:	2c07      	cmp	r4, #7
   11058:	d0f2      	beq.n	11040 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   1105a:	4616      	mov	r6, r2
   1105c:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1105e:	4670      	mov	r0, lr
   11060:	461f      	mov	r7, r3
   11062:	4689      	mov	r9, r1
   11064:	f7fd ff60 	bl	ef28 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11068:	b336      	cbz	r6, 110b8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   1106a:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   1106c:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11070:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   11072:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11074:	b2be      	uxth	r6, r7
   11076:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11078:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   1107c:	f7fd ff4a 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11080:	6803      	ldr	r3, [r0, #0]
   11082:	f043 0302 	orr.w	r3, r3, #2
   11086:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11088:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1108c:	f7fd ff4c 	bl	ef28 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   11090:	f1b9 0f00 	cmp.w	r9, #0
   11094:	d015      	beq.n	110c2 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11096:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11098:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   1109c:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   1109e:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   110a0:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   110a2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   110a6:	f7fd ff35 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   110aa:	6803      	ldr	r3, [r0, #0]
   110ac:	f043 0302 	orr.w	r3, r3, #2
   110b0:	6003      	str	r3, [r0, #0]
}
   110b2:	4628      	mov	r0, r5
   110b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   110b8:	4b04      	ldr	r3, [pc, #16]	; (110cc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   110ba:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   110bc:	f8a0 8000 	strh.w	r8, [r0]
   110c0:	e7d8      	b.n	11074 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   110c2:	4b02      	ldr	r3, [pc, #8]	; (110cc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   110c4:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   110c6:	2301      	movs	r3, #1
   110c8:	8003      	strh	r3, [r0, #0]
   110ca:	e7e9      	b.n	110a0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   110cc:	20001f04 	.word	0x20001f04

000110d0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   110d0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   110d4:	2b07      	cmp	r3, #7
   110d6:	d016      	beq.n	11106 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   110d8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   110dc:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   110de:	b510      	push	{r4, lr}
   110e0:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   110e2:	d005      	beq.n	110f0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   110e4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   110e8:	b113      	cbz	r3, 110f0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   110ea:	79e3      	ldrb	r3, [r4, #7]
   110ec:	2b01      	cmp	r3, #1
   110ee:	d001      	beq.n	110f4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   110f0:	2001      	movs	r0, #1
   110f2:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   110f4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   110f8:	f7fd ff0c 	bl	ef14 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   110fc:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   110fe:	079b      	lsls	r3, r3, #30
   11100:	d4f0      	bmi.n	110e4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   11102:	2001      	movs	r0, #1
   11104:	bd10      	pop	{r4, pc}
   11106:	2001      	movs	r0, #1
   11108:	4770      	bx	lr
   1110a:	bf00      	nop

0001110c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   1110c:	79c3      	ldrb	r3, [r0, #7]
   1110e:	2b01      	cmp	r3, #1
   11110:	d022      	beq.n	11158 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   11112:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11116:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   1111a:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   1111c:	429a      	cmp	r2, r3
   1111e:	d019      	beq.n	11154 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11120:	7e0b      	ldrb	r3, [r1, #24]
   11122:	07da      	lsls	r2, r3, #31
   11124:	d403      	bmi.n	1112e <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   11126:	e018      	b.n	1115a <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   11128:	7e0b      	ldrb	r3, [r1, #24]
   1112a:	07db      	lsls	r3, r3, #31
   1112c:	d514      	bpl.n	11158 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   1112e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   11132:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11136:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   11138:	3301      	adds	r3, #1
   1113a:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   1113e:	628a      	str	r2, [r1, #40]	; 0x28
   11140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   11144:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11148:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   1114c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11150:	429a      	cmp	r2, r3
   11152:	d1e9      	bne.n	11128 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   11154:	2301      	movs	r3, #1
   11156:	750b      	strb	r3, [r1, #20]
   11158:	4770      	bx	lr
   1115a:	4770      	bx	lr

0001115c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   1115c:	79c3      	ldrb	r3, [r0, #7]
   1115e:	2b01      	cmp	r3, #1
   11160:	d100      	bne.n	11164 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   11162:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11164:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11166:	6901      	ldr	r1, [r0, #16]
   11168:	f891 3020 	ldrb.w	r3, [r1, #32]
   1116c:	b303      	cbz	r3, 111b0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   1116e:	2300      	movs	r3, #0
   11170:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11174:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11178:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   1117c:	f103 0218 	add.w	r2, r3, #24
   11180:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   11184:	3301      	adds	r3, #1
   11186:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1118a:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   1118e:	7e0b      	ldrb	r3, [r1, #24]
   11190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11194:	760b      	strb	r3, [r1, #24]
   11196:	e00b      	b.n	111b0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11198:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1119c:	429a      	cmp	r2, r3
   1119e:	d00f      	beq.n	111c0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   111a0:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   111a4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   111a6:	3218      	adds	r2, #24
   111a8:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   111ac:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   111b0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   111b4:	7e0a      	ldrb	r2, [r1, #24]
   111b6:	3301      	adds	r3, #1
   111b8:	0752      	lsls	r2, r2, #29
   111ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   111be:	d4eb      	bmi.n	11198 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   111c0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   111c4:	429a      	cmp	r2, r3
   111c6:	d002      	beq.n	111ce <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   111c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   111cc:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   111ce:	2304      	movs	r3, #4
   111d0:	750b      	strb	r3, [r1, #20]
}
   111d2:	e7f9      	b.n	111c8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

000111d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   111d4:	79c3      	ldrb	r3, [r0, #7]
   111d6:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   111d8:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   111da:	d022      	beq.n	11222 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   111dc:	7e1a      	ldrb	r2, [r3, #24]
   111de:	09d2      	lsrs	r2, r2, #7
   111e0:	d01e      	beq.n	11220 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   111e2:	2280      	movs	r2, #128	; 0x80
   111e4:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   111e6:	8b5a      	ldrh	r2, [r3, #26]
   111e8:	0792      	lsls	r2, r2, #30
   111ea:	d509      	bpl.n	11200 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   111ec:	8b5a      	ldrh	r2, [r3, #26]
   111ee:	f042 0202 	orr.w	r2, r2, #2
   111f2:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   111f4:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   111f8:	f042 0201 	orr.w	r2, r2, #1
   111fc:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   11200:	8b5a      	ldrh	r2, [r3, #26]
   11202:	07d1      	lsls	r1, r2, #31
   11204:	d410      	bmi.n	11228 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   11206:	8b5a      	ldrh	r2, [r3, #26]
   11208:	0752      	lsls	r2, r2, #29
   1120a:	d509      	bpl.n	11220 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   1120c:	8b5a      	ldrh	r2, [r3, #26]
   1120e:	f042 0204 	orr.w	r2, r2, #4
   11212:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   11214:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11218:	f043 0304 	orr.w	r3, r3, #4
   1121c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   11220:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11222:	2280      	movs	r2, #128	; 0x80
   11224:	761a      	strb	r2, [r3, #24]
            break;
   11226:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   11228:	8b5a      	ldrh	r2, [r3, #26]
   1122a:	f042 0201 	orr.w	r2, r2, #1
   1122e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   11230:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11234:	f042 0202 	orr.w	r2, r2, #2
   11238:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   1123c:	e7e3      	b.n	11206 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   1123e:	bf00      	nop

00011240 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11240:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   11244:	4770      	bx	lr
   11246:	bf00      	nop

00011248 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11248:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1124c:	e7f8      	b.n	11240 <_ZN9ClearCore12SerialDriver4ModeEv>
   1124e:	bf00      	nop

00011250 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11250:	2007      	movs	r0, #7
   11252:	4770      	bx	lr

00011254 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   11254:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11258:	e7fa      	b.n	11250 <_ZN9ClearCore12SerialDriver4TypeEv>
   1125a:	bf00      	nop

0001125c <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   1125c:	6803      	ldr	r3, [r0, #0]
   1125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11260:	4718      	bx	r3
   11262:	bf00      	nop

00011264 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11264:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11268:	e7f8      	b.n	1125c <_ZN9ClearCore12SerialDriver10IsWritableEv>
   1126a:	bf00      	nop

0001126c <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   1126c:	b508      	push	{r3, lr}
        return PortIsOpen();
   1126e:	6803      	ldr	r3, [r0, #0]
   11270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11272:	4798      	blx	r3
    }
   11274:	b200      	sxth	r0, r0
   11276:	bd08      	pop	{r3, pc}

00011278 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11278:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1127c:	e7f6      	b.n	1126c <_ZN9ClearCore12SerialDriver5StateEv>
   1127e:	bf00      	nop

00011280 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   11280:	2000      	movs	r0, #0
   11282:	4770      	bx	lr

00011284 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   11284:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11288:	e7fa      	b.n	11280 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   1128a:	bf00      	nop

0001128c <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   1128c:	4770      	bx	lr
   1128e:	bf00      	nop

00011290 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   11290:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11294:	e7fa      	b.n	1128c <_ZN9ClearCore12SerialDriver7RefreshEv>
   11296:	bf00      	nop

00011298 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1129c:	b082      	sub	sp, #8
   1129e:	4688      	mov	r8, r1
   112a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   112a2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   112a6:	9500      	str	r5, [sp, #0]
   112a8:	9401      	str	r4, [sp, #4]
   112aa:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   112ac:	4604      	mov	r4, r0
   112ae:	4617      	mov	r7, r2
   112b0:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   112b2:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   112b4:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   112b6:	f7ff fd75 	bl	10da4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   112ba:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   112be:	f7f3 fbef 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
   112c2:	4b09      	ldr	r3, [pc, #36]	; (112e8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   112c4:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   112c8:	f103 0208 	add.w	r2, r3, #8
   112cc:	4620      	mov	r0, r4
   112ce:	337c      	adds	r3, #124	; 0x7c
   112d0:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   112d4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   112d8:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   112dc:	6022      	str	r2, [r4, #0]
   112de:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   112e2:	b002      	add	sp, #8
   112e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112e8:	00023538 	.word	0x00023538

000112ec <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   112ec:	b538      	push	{r3, r4, r5, lr}
   112ee:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   112f0:	f7fe fe50 	bl	ff94 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   112f4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   112f8:	4605      	mov	r5, r0
        if (m_portOpen) {
   112fa:	b113      	cbz	r3, 11302 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   112fc:	4620      	mov	r0, r4
   112fe:	f7ff fd9d 	bl	10e3c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   11302:	4628      	mov	r0, r5
   11304:	bd38      	pop	{r3, r4, r5, pc}
   11306:	bf00      	nop

00011308 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11308:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   1130a:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   1130e:	428b      	cmp	r3, r1
   11310:	d00d      	beq.n	1132e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   11312:	2b10      	cmp	r3, #16
   11314:	460d      	mov	r5, r1
   11316:	4604      	mov	r4, r0
   11318:	f000 808c 	beq.w	11434 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   1131c:	f1a5 030d 	sub.w	r3, r5, #13
   11320:	2b03      	cmp	r3, #3
   11322:	f200 808c 	bhi.w	1143e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11326:	e8df f003 	tbb	[pc, r3]
   1132a:	3169      	.short	0x3169
   1132c:	4f06      	.short	0x4f06
        return true;
   1132e:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   11330:	4628      	mov	r0, r5
   11332:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11334:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11336:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1133a:	4b42      	ldr	r3, [pc, #264]	; (11444 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1133c:	f3bf 8f5b 	dmb	ish
   11340:	43d2      	mvns	r2, r2
   11342:	e853 1f00 	ldrex	r1, [r3]
   11346:	4011      	ands	r1, r2
   11348:	e843 1000 	strex	r0, r1, [r3]
   1134c:	2800      	cmp	r0, #0
   1134e:	d1f8      	bne.n	11342 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11350:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11354:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11358:	f3bf 8f5b 	dmb	ish
   1135c:	e853 1f00 	ldrex	r1, [r3]
   11360:	4311      	orrs	r1, r2
   11362:	e843 1000 	strex	r0, r1, [r3]
   11366:	2800      	cmp	r0, #0
   11368:	d1f8      	bne.n	1135c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   1136a:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   1136e:	2101      	movs	r1, #1
    m_mode = newMode;
   11370:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11374:	4620      	mov	r0, r4
   11376:	f7ff fd73 	bl	10e60 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1137a:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1137e:	2d00      	cmp	r5, #0
   11380:	d0d5      	beq.n	1132e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   11382:	4620      	mov	r0, r4
   11384:	f7ff fd5a 	bl	10e3c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11388:	4628      	mov	r0, r5
   1138a:	bd38      	pop	{r3, r4, r5, pc}
   1138c:	4b2d      	ldr	r3, [pc, #180]	; (11444 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1138e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11392:	f3bf 8f5b 	dmb	ish
   11396:	e853 1f00 	ldrex	r1, [r3]
   1139a:	4311      	orrs	r1, r2
   1139c:	e843 1000 	strex	r0, r1, [r3]
   113a0:	2800      	cmp	r0, #0
   113a2:	d1f8      	bne.n	11396 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   113a4:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   113a8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   113ac:	f3bf 8f5b 	dmb	ish
   113b0:	43d2      	mvns	r2, r2
   113b2:	e853 1f00 	ldrex	r1, [r3]
   113b6:	4011      	ands	r1, r2
   113b8:	e843 1000 	strex	r0, r1, [r3]
   113bc:	2800      	cmp	r0, #0
   113be:	d1f8      	bne.n	113b2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   113c0:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   113c4:	2100      	movs	r1, #0
   113c6:	e7d3      	b.n	11370 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   113c8:	2201      	movs	r2, #1
   113ca:	2100      	movs	r1, #0
   113cc:	4620      	mov	r0, r4
   113ce:	f7ff fd8d 	bl	10eec <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   113d2:	2101      	movs	r1, #1
   113d4:	4620      	mov	r0, r4
   113d6:	f7ff fd4f 	bl	10e78 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   113da:	6823      	ldr	r3, [r4, #0]
   113dc:	4a1a      	ldr	r2, [pc, #104]	; (11448 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   113de:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   113e0:	491a      	ldr	r1, [pc, #104]	; (1144c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   113e2:	4293      	cmp	r3, r2
   113e4:	4620      	mov	r0, r4
   113e6:	d1a5      	bne.n	11334 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   113e8:	f7fe fdd4 	bl	ff94 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   113ec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   113f0:	2b00      	cmp	r3, #0
   113f2:	d0a0      	beq.n	11336 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   113f4:	4620      	mov	r0, r4
   113f6:	f7ff fd21 	bl	10e3c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   113fa:	e79c      	b.n	11336 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   113fc:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11400:	4b10      	ldr	r3, [pc, #64]	; (11444 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11402:	f3bf 8f5b 	dmb	ish
   11406:	43d2      	mvns	r2, r2
   11408:	e853 1f00 	ldrex	r1, [r3]
   1140c:	4011      	ands	r1, r2
   1140e:	e843 1000 	strex	r0, r1, [r3]
   11412:	2800      	cmp	r0, #0
   11414:	d1f8      	bne.n	11408 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11416:	f3bf 8f5b 	dmb	ish
   1141a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1141e:	f3bf 8f5b 	dmb	ish
   11422:	43d2      	mvns	r2, r2
   11424:	e853 1f00 	ldrex	r1, [r3]
   11428:	4011      	ands	r1, r2
   1142a:	e843 1000 	strex	r0, r1, [r3]
   1142e:	2800      	cmp	r0, #0
   11430:	d0c6      	beq.n	113c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   11432:	e7f7      	b.n	11424 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   11434:	4b06      	ldr	r3, [pc, #24]	; (11450 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   11436:	6818      	ldr	r0, [r3, #0]
   11438:	f7fe fbcc 	bl	fbd4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1143c:	e76e      	b.n	1131c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   1143e:	2500      	movs	r5, #0
   11440:	e776      	b.n	11330 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   11442:	bf00      	nop
   11444:	20001acc 	.word	0x20001acc
   11448:	000112ed 	.word	0x000112ed
   1144c:	0007a120 	.word	0x0007a120
   11450:	20001efc 	.word	0x20001efc

00011454 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   11454:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11458:	f7ff bf56 	b.w	11308 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

0001145c <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   1145c:	b510      	push	{r4, lr}
   1145e:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11460:	f7fe fcfa 	bl	fe58 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11464:	b100      	cbz	r0, 11468 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11466:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11468:	4620      	mov	r0, r4
   1146a:	f7ff fc8f 	bl	10d8c <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   1146e:	4620      	mov	r0, r4
   11470:	f7ff fce4 	bl	10e3c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11474:	4b0c      	ldr	r3, [pc, #48]	; (114a8 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11476:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1147a:	f3bf 8f5b 	dmb	ish
   1147e:	e853 1f00 	ldrex	r1, [r3]
   11482:	4311      	orrs	r1, r2
   11484:	e843 1000 	strex	r0, r1, [r3]
   11488:	2800      	cmp	r0, #0
   1148a:	d1f8      	bne.n	1147e <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   1148c:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11490:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11494:	2b10      	cmp	r3, #16
   11496:	d1e6      	bne.n	11466 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11498:	4b04      	ldr	r3, [pc, #16]	; (114ac <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   1149a:	4621      	mov	r1, r4
   1149c:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   1149e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   114a2:	f7fe bbb7 	b.w	fc14 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   114a6:	bf00      	nop
   114a8:	20001acc 	.word	0x20001acc
   114ac:	20001efc 	.word	0x20001efc

000114b0 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   114b0:	b510      	push	{r4, lr}
   114b2:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   114b4:	f7fe fcd0 	bl	fe58 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   114b8:	b1a8      	cbz	r0, 114e6 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   114ba:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   114be:	2b10      	cmp	r3, #16
   114c0:	d012      	beq.n	114e8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   114c2:	4620      	mov	r0, r4
   114c4:	f7fe fe10 	bl	100e8 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   114c8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   114cc:	4a09      	ldr	r2, [pc, #36]	; (114f4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   114ce:	f3bf 8f5b 	dmb	ish
   114d2:	43db      	mvns	r3, r3
   114d4:	e852 1f00 	ldrex	r1, [r2]
   114d8:	4019      	ands	r1, r3
   114da:	e842 1000 	strex	r0, r1, [r2]
   114de:	2800      	cmp	r0, #0
   114e0:	d1f8      	bne.n	114d4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   114e2:	f3bf 8f5b 	dmb	ish
   114e6:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   114e8:	4b03      	ldr	r3, [pc, #12]	; (114f8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   114ea:	6818      	ldr	r0, [r3, #0]
   114ec:	f7fe fb72 	bl	fbd4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   114f0:	e7e7      	b.n	114c2 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   114f2:	bf00      	nop
   114f4:	20001acc 	.word	0x20001acc
   114f8:	20001efc 	.word	0x20001efc

000114fc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   114fc:	6803      	ldr	r3, [r0, #0]
   114fe:	4a37      	ldr	r2, [pc, #220]	; (115dc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11500:	68db      	ldr	r3, [r3, #12]
   11502:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11504:	b510      	push	{r4, lr}
   11506:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11508:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   1150c:	d150      	bne.n	115b0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   1150e:	f7fe fca3 	bl	fe58 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11512:	b1a8      	cbz	r0, 11540 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11514:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11518:	2b10      	cmp	r3, #16
   1151a:	d059      	beq.n	115d0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   1151c:	4620      	mov	r0, r4
   1151e:	f7fe fde3 	bl	100e8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11522:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11526:	4a2e      	ldr	r2, [pc, #184]	; (115e0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11528:	f3bf 8f5b 	dmb	ish
   1152c:	43db      	mvns	r3, r3
   1152e:	e852 1f00 	ldrex	r1, [r2]
   11532:	4019      	ands	r1, r3
   11534:	e842 1000 	strex	r0, r1, [r2]
   11538:	2800      	cmp	r0, #0
   1153a:	d1f8      	bne.n	1152e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   1153c:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   11540:	6823      	ldr	r3, [r4, #0]
   11542:	4a28      	ldr	r2, [pc, #160]	; (115e4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11546:	4293      	cmp	r3, r2
   11548:	d138      	bne.n	115bc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   1154a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1154e:	2b0d      	cmp	r3, #13
   11550:	d028      	beq.n	115a4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   11552:	2b10      	cmp	r3, #16
   11554:	d037      	beq.n	115c6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   11556:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1155a:	4b21      	ldr	r3, [pc, #132]	; (115e0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   1155c:	f3bf 8f5b 	dmb	ish
   11560:	43d2      	mvns	r2, r2
   11562:	e853 1f00 	ldrex	r1, [r3]
   11566:	4011      	ands	r1, r2
   11568:	e843 1000 	strex	r0, r1, [r3]
   1156c:	2800      	cmp	r0, #0
   1156e:	d1f8      	bne.n	11562 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11570:	f3bf 8f5b 	dmb	ish
   11574:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11578:	f3bf 8f5b 	dmb	ish
   1157c:	43d2      	mvns	r2, r2
   1157e:	e853 1f00 	ldrex	r1, [r3]
   11582:	4011      	ands	r1, r2
   11584:	e843 1000 	strex	r0, r1, [r3]
   11588:	2800      	cmp	r0, #0
   1158a:	d1f8      	bne.n	1157e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   1158c:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   11590:	230d      	movs	r3, #13
   11592:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   11596:	4620      	mov	r0, r4
   11598:	2100      	movs	r1, #0
   1159a:	f7ff fc61 	bl	10e60 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1159e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   115a2:	b903      	cbnz	r3, 115a6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   115a4:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   115a6:	4620      	mov	r0, r4
}
   115a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   115ac:	f7ff bc46 	b.w	10e3c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   115b0:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   115b2:	6823      	ldr	r3, [r4, #0]
   115b4:	4a0b      	ldr	r2, [pc, #44]	; (115e4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   115b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   115b8:	4293      	cmp	r3, r2
   115ba:	d0c6      	beq.n	1154a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   115bc:	4620      	mov	r0, r4
   115be:	210d      	movs	r1, #13
}
   115c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   115c4:	4718      	bx	r3
        CcioMgr.LinkClose();
   115c6:	4b08      	ldr	r3, [pc, #32]	; (115e8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   115c8:	6818      	ldr	r0, [r3, #0]
   115ca:	f7fe fb03 	bl	fbd4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   115ce:	e7c2      	b.n	11556 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   115d0:	4b05      	ldr	r3, [pc, #20]	; (115e8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   115d2:	6818      	ldr	r0, [r3, #0]
   115d4:	f7fe fafe 	bl	fbd4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   115d8:	e7a0      	b.n	1151c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   115da:	bf00      	nop
   115dc:	000114b1 	.word	0x000114b1
   115e0:	20001acc 	.word	0x20001acc
   115e4:	00011309 	.word	0x00011309
   115e8:	20001efc 	.word	0x20001efc

000115ec <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   115ec:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   115f0:	f7ff bf84 	b.w	114fc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

000115f4 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   115f4:	b510      	push	{r4, lr}
            PortOpen();
   115f6:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   115f8:	4604      	mov	r4, r0
        if (newState) {
   115fa:	bb09      	cbnz	r1, 11640 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   115fc:	4a26      	ldr	r2, [pc, #152]	; (11698 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   115fe:	68db      	ldr	r3, [r3, #12]
   11600:	4293      	cmp	r3, r2
   11602:	d11a      	bne.n	1163a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   11604:	f7fe fc28 	bl	fe58 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11608:	b1a8      	cbz	r0, 11636 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   1160a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1160e:	2b10      	cmp	r3, #16
   11610:	d03c      	beq.n	1168c <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   11612:	4620      	mov	r0, r4
   11614:	f7fe fd68 	bl	100e8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11618:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1161c:	4a1f      	ldr	r2, [pc, #124]	; (1169c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1161e:	f3bf 8f5b 	dmb	ish
   11622:	43db      	mvns	r3, r3
   11624:	e852 1f00 	ldrex	r1, [r2]
   11628:	4019      	ands	r1, r3
   1162a:	e842 1000 	strex	r0, r1, [r2]
   1162e:	2800      	cmp	r0, #0
   11630:	d1f8      	bne.n	11624 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   11632:	f3bf 8f5b 	dmb	ish
    }
   11636:	2001      	movs	r0, #1
   11638:	bd10      	pop	{r4, pc}
            PortClose();
   1163a:	4798      	blx	r3
    }
   1163c:	2001      	movs	r0, #1
   1163e:	bd10      	pop	{r4, pc}
   11640:	4a17      	ldr	r2, [pc, #92]	; (116a0 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   11642:	689b      	ldr	r3, [r3, #8]
   11644:	4293      	cmp	r3, r2
   11646:	d1f8      	bne.n	1163a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11648:	f7fe fc06 	bl	fe58 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1164c:	2800      	cmp	r0, #0
   1164e:	d1f2      	bne.n	11636 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11650:	4620      	mov	r0, r4
   11652:	f7ff fb9b 	bl	10d8c <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   11656:	4620      	mov	r0, r4
   11658:	f7ff fbf0 	bl	10e3c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1165c:	4b0f      	ldr	r3, [pc, #60]	; (1169c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1165e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11662:	f3bf 8f5b 	dmb	ish
   11666:	e853 1f00 	ldrex	r1, [r3]
   1166a:	4311      	orrs	r1, r2
   1166c:	e843 1000 	strex	r0, r1, [r3]
   11670:	2800      	cmp	r0, #0
   11672:	d1f8      	bne.n	11666 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   11674:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11678:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1167c:	2b10      	cmp	r3, #16
   1167e:	d1da      	bne.n	11636 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11680:	4b08      	ldr	r3, [pc, #32]	; (116a4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11682:	4621      	mov	r1, r4
   11684:	6818      	ldr	r0, [r3, #0]
   11686:	f7fe fac5 	bl	fc14 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   1168a:	e7d4      	b.n	11636 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   1168c:	4b05      	ldr	r3, [pc, #20]	; (116a4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   1168e:	6818      	ldr	r0, [r3, #0]
   11690:	f7fe faa0 	bl	fbd4 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11694:	e7bd      	b.n	11612 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   11696:	bf00      	nop
   11698:	000114b1 	.word	0x000114b1
   1169c:	20001acc 	.word	0x20001acc
   116a0:	0001145d 	.word	0x0001145d
   116a4:	20001efc 	.word	0x20001efc

000116a8 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   116a8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   116ac:	e7a2      	b.n	115f4 <_ZN9ClearCore12SerialDriver5StateEs>
   116ae:	bf00      	nop

000116b0 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   116b0:	7980      	ldrb	r0, [r0, #6]
   116b2:	4770      	bx	lr

000116b4 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   116b4:	f1a1 0004 	sub.w	r0, r1, #4
   116b8:	fab0 f080 	clz	r0, r0
   116bc:	0940      	lsrs	r0, r0, #5
   116be:	4770      	bx	lr

000116c0 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   116c0:	2002      	movs	r0, #2
   116c2:	4770      	bx	lr

000116c4 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   116c4:	2001      	movs	r0, #1
   116c6:	4770      	bx	lr

000116c8 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   116c8:	2000      	movs	r0, #0
   116ca:	4770      	bx	lr

000116cc <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   116cc:	4770      	bx	lr
   116ce:	bf00      	nop

000116d0 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   116d0:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   116d2:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   116d4:	7183      	strb	r3, [r0, #6]
   116d6:	4770      	bx	lr

000116d8 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   116d8:	4b04      	ldr	r3, [pc, #16]	; (116ec <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   116da:	681a      	ldr	r2, [r3, #0]
   116dc:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   116e0:	6883      	ldr	r3, [r0, #8]
   116e2:	421a      	tst	r2, r3
}
   116e4:	bf14      	ite	ne
   116e6:	2001      	movne	r0, #1
   116e8:	2000      	moveq	r0, #0
   116ea:	4770      	bx	lr
   116ec:	20001acc 	.word	0x20001acc

000116f0 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   116f0:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   116f2:	b971      	cbnz	r1, 11712 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   116f4:	f3bf 8f5b 	dmb	ish
   116f8:	4a0d      	ldr	r2, [pc, #52]	; (11730 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   116fa:	43db      	mvns	r3, r3
   116fc:	e852 1f00 	ldrex	r1, [r2]
   11700:	4019      	ands	r1, r3
   11702:	e842 1000 	strex	r0, r1, [r2]
   11706:	2800      	cmp	r0, #0
   11708:	d1f8      	bne.n	116fc <_ZN9ClearCore9LedDriver5StateEs+0xc>
   1170a:	f3bf 8f5b 	dmb	ish
    return true;
}
   1170e:	2001      	movs	r0, #1
   11710:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11712:	4a07      	ldr	r2, [pc, #28]	; (11730 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11714:	f3bf 8f5b 	dmb	ish
   11718:	e852 1f00 	ldrex	r1, [r2]
   1171c:	4319      	orrs	r1, r3
   1171e:	e842 1000 	strex	r0, r1, [r2]
   11722:	2800      	cmp	r0, #0
   11724:	d1f8      	bne.n	11718 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11726:	f3bf 8f5b 	dmb	ish
   1172a:	2001      	movs	r0, #1
   1172c:	4770      	bx	lr
   1172e:	bf00      	nop
   11730:	20001acc 	.word	0x20001acc

00011734 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   11734:	b538      	push	{r3, r4, r5, lr}
   11736:	4604      	mov	r4, r0
   11738:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   1173a:	f7f3 f9b1 	bl	4aa0 <_ZN9ClearCore9ConnectorC1Ev>
   1173e:	4b02      	ldr	r3, [pc, #8]	; (11748 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   11740:	60a5      	str	r5, [r4, #8]
   11742:	6023      	str	r3, [r4, #0]
   11744:	4620      	mov	r0, r4
   11746:	bd38      	pop	{r3, r4, r5, pc}
   11748:	000235e4 	.word	0x000235e4

0001174c <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   1174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   1174e:	4d19      	ldr	r5, [pc, #100]	; (117b4 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   11750:	682c      	ldr	r4, [r5, #0]
   11752:	f014 0401 	ands.w	r4, r4, #1
   11756:	d002      	beq.n	1175e <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   11758:	4b17      	ldr	r3, [pc, #92]	; (117b8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   1175a:	6818      	ldr	r0, [r3, #0]
   1175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1175e:	2044      	movs	r0, #68	; 0x44
   11760:	f001 fe66 	bl	13430 <_Znwj>
   11764:	4a14      	ldr	r2, [pc, #80]	; (117b8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   11766:	4f15      	ldr	r7, [pc, #84]	; (117bc <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   11768:	4e15      	ldr	r6, [pc, #84]	; (117c0 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   1176a:	4916      	ldr	r1, [pc, #88]	; (117c4 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   1176c:	6004      	str	r4, [r0, #0]
   1176e:	2301      	movs	r3, #1
   11770:	6044      	str	r4, [r0, #4]
   11772:	6084      	str	r4, [r0, #8]
   11774:	60c4      	str	r4, [r0, #12]
   11776:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   11778:	6144      	str	r4, [r0, #20]
   1177a:	6184      	str	r4, [r0, #24]
   1177c:	61c4      	str	r4, [r0, #28]
   1177e:	6244      	str	r4, [r0, #36]	; 0x24
   11780:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   11784:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   11788:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   1178c:	6204      	str	r4, [r0, #32]
   1178e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   11792:	8584      	strh	r4, [r0, #44]	; 0x2c
   11794:	85c4      	strh	r4, [r0, #46]	; 0x2e
   11796:	8604      	strh	r4, [r0, #48]	; 0x30
   11798:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   1179c:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   117a0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   117a4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   117a8:	6347      	str	r7, [r0, #52]	; 0x34
   117aa:	6386      	str	r6, [r0, #56]	; 0x38
   117ac:	63c1      	str	r1, [r0, #60]	; 0x3c
   117ae:	6010      	str	r0, [r2, #0]
   117b0:	602b      	str	r3, [r5, #0]
    return *instance;
}
   117b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117b4:	20001f08 	.word	0x20001f08
   117b8:	20001f10 	.word	0x20001f10
   117bc:	09c400fa 	.word	0x09c400fa
   117c0:	2cec1388 	.word	0x2cec1388
   117c4:	09c41388 	.word	0x09c41388

000117c8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   117c8:	6840      	ldr	r0, [r0, #4]
   117ca:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   117ce:	4008      	ands	r0, r1
   117d0:	4770      	bx	lr
   117d2:	bf00      	nop

000117d4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   117d4:	6840      	ldr	r0, [r0, #4]
   117d6:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   117da:	f3c0 2000 	ubfx	r0, r0, #8, #1
   117de:	4770      	bx	lr

000117e0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   117e0:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   117e2:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   117e4:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   117e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   117ea:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   117ec:	4802      	ldr	r0, [pc, #8]	; (117f8 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   117ee:	f7f9 fcb1 	bl	b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   117f2:	2001      	movs	r0, #1
   117f4:	bd08      	pop	{r3, pc}
   117f6:	bf00      	nop
   117f8:	200019d8 	.word	0x200019d8

000117fc <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   117fc:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   11800:	b951      	cbnz	r1, 11818 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   11802:	4b17      	ldr	r3, [pc, #92]	; (11860 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   11804:	2204      	movs	r2, #4
   11806:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   1180a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   1180e:	f042 0201 	orr.w	r2, r2, #1
   11812:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   11816:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   11818:	1d03      	adds	r3, r0, #4
   1181a:	f3bf 8f5b 	dmb	ish
   1181e:	e853 2f00 	ldrex	r2, [r3]
   11822:	f042 0208 	orr.w	r2, r2, #8
   11826:	e843 2100 	strex	r1, r2, [r3]
   1182a:	2900      	cmp	r1, #0
   1182c:	d1f7      	bne.n	1181e <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   1182e:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   11832:	f3bf 8f5b 	dmb	ish
   11836:	300c      	adds	r0, #12
   11838:	e850 3f00 	ldrex	r3, [r0]
   1183c:	f043 0308 	orr.w	r3, r3, #8
   11840:	e840 3200 	strex	r2, r3, [r0]
   11844:	2a00      	cmp	r2, #0
   11846:	d1f7      	bne.n	11838 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11848:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   1184c:	4b04      	ldr	r3, [pc, #16]	; (11860 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   1184e:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11850:	2102      	movs	r1, #2
   11852:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11856:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   1185a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1185e:	4770      	bx	lr
   11860:	41008000 	.word	0x41008000

00011864 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   11864:	4401      	add	r1, r0
   11866:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   1186a:	431a      	orrs	r2, r3
   1186c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11870:	4770      	bx	lr
   11872:	bf00      	nop

00011874 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   11874:	b2cb      	uxtb	r3, r1
   11876:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11878:	b510      	push	{r4, lr}
   1187a:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   1187c:	d505      	bpl.n	1188a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   1187e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   11882:	f042 0202 	orr.w	r2, r2, #2
   11886:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   1188a:	0798      	lsls	r0, r3, #30
   1188c:	d505      	bpl.n	1189a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   1188e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11892:	f042 0201 	orr.w	r2, r2, #1
   11896:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   1189a:	075a      	lsls	r2, r3, #29
   1189c:	d505      	bpl.n	118aa <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   1189e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   118a2:	f042 0201 	orr.w	r2, r2, #1
   118a6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   118aa:	06d8      	lsls	r0, r3, #27
   118ac:	d505      	bpl.n	118ba <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   118ae:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   118b2:	f042 0204 	orr.w	r2, r2, #4
   118b6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   118ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
   118be:	06ca      	lsls	r2, r1, #27
   118c0:	d505      	bpl.n	118ce <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   118c2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   118c6:	f042 0202 	orr.w	r2, r2, #2
   118ca:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   118ce:	4a14      	ldr	r2, [pc, #80]	; (11920 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   118d0:	6812      	ldr	r2, [r2, #0]
   118d2:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   118d6:	b112      	cbz	r2, 118de <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   118d8:	f011 0f0c 	tst.w	r1, #12
   118dc:	d118      	bne.n	11910 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   118de:	061b      	lsls	r3, r3, #24
   118e0:	d505      	bpl.n	118ee <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   118e2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   118e6:	f043 0308 	orr.w	r3, r3, #8
   118ea:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   118ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
   118f2:	f001 fc29 	bl	13148 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   118f6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   118fa:	4a0a      	ldr	r2, [pc, #40]	; (11924 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   118fc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   11900:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   11904:	3300      	adds	r3, #0
   11906:	bf18      	it	ne
   11908:	2301      	movne	r3, #1
   1190a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   1190e:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   11910:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11914:	f042 0204 	orr.w	r2, r2, #4
   11918:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   1191c:	e7df      	b.n	118de <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   1191e:	bf00      	nop
   11920:	20001bf8 	.word	0x20001bf8
   11924:	200019d8 	.word	0x200019d8

00011928 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   11928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1192c:	b082      	sub	sp, #8
            reg = 0;
   1192e:	2300      	movs	r3, #0
   11930:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11932:	4b98      	ldr	r3, [pc, #608]	; (11b94 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   11934:	6844      	ldr	r4, [r0, #4]
   11936:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1193a:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   1193c:	4f96      	ldr	r7, [pc, #600]	; (11b98 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1193e:	8a13      	ldrh	r3, [r2, #16]
   11940:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11bb8 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   11944:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11946:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11948:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1194a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1194c:	bf4c      	ite	mi
   1194e:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11952:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   11956:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11958:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1195c:	4e8f      	ldr	r6, [pc, #572]	; (11b9c <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1195e:	bfd4      	ite	le
   11960:	2300      	movle	r3, #0
   11962:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   11964:	f363 0000 	bfi	r0, r3, #0, #1
   11968:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   1196c:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1196e:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11970:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11972:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11974:	bf4c      	ite	mi
   11976:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1197a:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   1197e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   11980:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11984:	bfcc      	ite	gt
   11986:	2300      	movgt	r3, #0
   11988:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   1198a:	f363 0041 	bfi	r0, r3, #1, #1
   1198e:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11992:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   11994:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11998:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   1199a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1199c:	bf4c      	ite	mi
   1199e:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   119a2:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   119a6:	428b      	cmp	r3, r1
   119a8:	bfcc      	ite	gt
   119aa:	2300      	movgt	r3, #0
   119ac:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   119ae:	f363 1004 	bfi	r0, r3, #4, #1
   119b2:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   119b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   119ba:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   119be:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   119c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   119c6:	4976      	ldr	r1, [pc, #472]	; (11ba0 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   119c8:	4f76      	ldr	r7, [pc, #472]	; (11ba4 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   119ca:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   119cc:	43db      	mvns	r3, r3
   119ce:	b2c0      	uxtb	r0, r0
   119d0:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   119d4:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   119d8:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   119da:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   119de:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   119e2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   119e6:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   119ea:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   119ee:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   119f2:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   119f4:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   119f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   119fc:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   11a00:	bf18      	it	ne
   11a02:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   11a04:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11a08:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   11a0c:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11a10:	f083 0301 	eor.w	r3, r3, #1
   11a14:	f363 0241 	bfi	r2, r3, #1, #1
   11a18:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11a1c:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11a1e:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11a22:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11a26:	b2d2      	uxtb	r2, r2
   11a28:	f361 0282 	bfi	r2, r1, #2, #1
   11a2c:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11a30:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   11a34:	4a5c      	ldr	r2, [pc, #368]	; (11ba8 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   11a36:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11a3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11a3e:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11a42:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11a46:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11a48:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11a4c:	4857      	ldr	r0, [pc, #348]	; (11bac <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11a4e:	f88d 1004 	strb.w	r1, [sp, #4]
   11a52:	bf18      	it	ne
   11a54:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11a56:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   11a5a:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11a5e:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11a60:	4e53      	ldr	r6, [pc, #332]	; (11bb0 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11a62:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11a66:	f362 1345 	bfi	r3, r2, #5, #1
   11a6a:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   11a6e:	4628      	mov	r0, r5
   11a70:	9901      	ldr	r1, [sp, #4]
   11a72:	f7ff feff 	bl	11874 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11a76:	6830      	ldr	r0, [r6, #0]
   11a78:	6803      	ldr	r3, [r0, #0]
   11a7a:	681b      	ldr	r3, [r3, #0]
   11a7c:	4543      	cmp	r3, r8
   11a7e:	f040 8084 	bne.w	11b8a <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   11a82:	7980      	ldrb	r0, [r0, #6]
   11a84:	2804      	cmp	r0, #4
   11a86:	d00c      	beq.n	11aa2 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   11a88:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11a8c:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11a90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11a94:	bf14      	ite	ne
   11a96:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11a9a:	f023 0308 	biceq.w	r3, r3, #8
   11a9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11aa2:	6870      	ldr	r0, [r6, #4]
   11aa4:	6803      	ldr	r3, [r0, #0]
   11aa6:	681b      	ldr	r3, [r3, #0]
   11aa8:	4543      	cmp	r3, r8
   11aaa:	d170      	bne.n	11b8e <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   11aac:	7980      	ldrb	r0, [r0, #6]
   11aae:	2804      	cmp	r0, #4
   11ab0:	d00c      	beq.n	11acc <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11ab2:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11ab6:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11aba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11abe:	bf14      	ite	ne
   11ac0:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11ac4:	f023 0304 	biceq.w	r3, r3, #4
   11ac8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11acc:	9a01      	ldr	r2, [sp, #4]
   11ace:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11ad2:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11ad4:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11ad6:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   11ada:	f105 0210 	add.w	r2, r5, #16
   11ade:	f3bf 8f5b 	dmb	ish
   11ae2:	e852 1f00 	ldrex	r1, [r2]
   11ae6:	4319      	orrs	r1, r3
   11ae8:	e842 1000 	strex	r0, r1, [r2]
   11aec:	2800      	cmp	r0, #0
   11aee:	d1f8      	bne.n	11ae2 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11af0:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11af4:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11af6:	f3bf 8f5b 	dmb	ish
   11afa:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   11afe:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11b02:	e853 2f00 	ldrex	r2, [r3]
   11b06:	4322      	orrs	r2, r4
   11b08:	e843 2100 	strex	r1, r2, [r3]
   11b0c:	2900      	cmp	r1, #0
   11b0e:	d1f8      	bne.n	11b02 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11b10:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11b14:	f105 0308 	add.w	r3, r5, #8
   11b18:	9a01      	ldr	r2, [sp, #4]
   11b1a:	f3bf 8f5b 	dmb	ish
   11b1e:	e853 1f00 	ldrex	r1, [r3]
   11b22:	4311      	orrs	r1, r2
   11b24:	e843 1000 	strex	r0, r1, [r3]
   11b28:	2800      	cmp	r0, #0
   11b2a:	d1f8      	bne.n	11b1e <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   11b2c:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11b30:	9b01      	ldr	r3, [sp, #4]
   11b32:	f3bf 8f5b 	dmb	ish
   11b36:	e855 2f00 	ldrex	r2, [r5]
   11b3a:	431a      	orrs	r2, r3
   11b3c:	e845 2100 	strex	r1, r2, [r5]
   11b40:	2900      	cmp	r1, #0
   11b42:	d1f8      	bne.n	11b36 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11b44:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11b48:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11b4a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11b4e:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11b52:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11b56:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11b58:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11b5c:	d012      	beq.n	11b84 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11b5e:	4c15      	ldr	r4, [pc, #84]	; (11bb4 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11b60:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11b64:	f854 0b04 	ldr.w	r0, [r4], #4
   11b68:	f7f3 fcdc 	bl	5524 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11b6c:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11b6e:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11b72:	d1f7      	bne.n	11b64 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11b74:	6830      	ldr	r0, [r6, #0]
   11b76:	f7fc fea5 	bl	e8c4 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11b7a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11b7e:	6870      	ldr	r0, [r6, #4]
   11b80:	f7fc fea0 	bl	e8c4 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11b84:	b002      	add	sp, #8
   11b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11b8a:	4798      	blx	r3
   11b8c:	e77a      	b.n	11a84 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11b8e:	4798      	blx	r3
   11b90:	e78d      	b.n	11aae <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11b92:	bf00      	nop
   11b94:	20001e04 	.word	0x20001e04
   11b98:	41008000 	.word	0x41008000
   11b9c:	20001bf8 	.word	0x20001bf8
   11ba0:	20001efc 	.word	0x20001efc
   11ba4:	200019d8 	.word	0x200019d8
   11ba8:	2000188c 	.word	0x2000188c
   11bac:	20001f18 	.word	0x20001f18
   11bb0:	00022ee8 	.word	0x00022ee8
   11bb4:	00022ef0 	.word	0x00022ef0
   11bb8:	0000e84d 	.word	0x0000e84d

00011bbc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11bbc:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11bbe:	b94a      	cbnz	r2, 11bd4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11bc0:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11bc4:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11bc6:	6983      	ldr	r3, [r0, #24]
   11bc8:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11bca:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11bcc:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11bce:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11bd0:	6181      	str	r1, [r0, #24]
   11bd2:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11bd4:	4319      	orrs	r1, r3
   11bd6:	e7f5      	b.n	11bc4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011bd8 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11bd8:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11bda:	f7ff fdb7 	bl	1174c <_ZN9ClearCore13StatusManager8InstanceEv>
   11bde:	4b01      	ldr	r3, [pc, #4]	; (11be4 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11be0:	6018      	str	r0, [r3, #0]
   11be2:	bd08      	pop	{r3, pc}
   11be4:	20001f0c 	.word	0x20001f0c

00011be8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11be8:	b530      	push	{r4, r5, lr}
   11bea:	b083      	sub	sp, #12
   11bec:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11bf0:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11bf2:	9401      	str	r4, [sp, #4]
   11bf4:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11bf6:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11bf8:	f7ff f8d4 	bl	10da4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11bfc:	4b04      	ldr	r3, [pc, #16]	; (11c10 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11bfe:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11c00:	4620      	mov	r0, r4
   11c02:	2100      	movs	r1, #0
   11c04:	f7ff f92c 	bl	10e60 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11c08:	4620      	mov	r0, r4
   11c0a:	b003      	add	sp, #12
   11c0c:	bd30      	pop	{r4, r5, pc}
   11c0e:	bf00      	nop
   11c10:	00022e94 	.word	0x00022e94

00011c14 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11c14:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11c16:	4d0f      	ldr	r5, [pc, #60]	; (11c54 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11c18:	682b      	ldr	r3, [r5, #0]
   11c1a:	f013 0401 	ands.w	r4, r3, #1
   11c1e:	d002      	beq.n	11c26 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11c20:	4b0d      	ldr	r3, [pc, #52]	; (11c58 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11c22:	6818      	ldr	r0, [r3, #0]
   11c24:	bd38      	pop	{r3, r4, r5, pc}
   11c26:	f44f 7002 	mov.w	r0, #520	; 0x208
   11c2a:	f001 fc01 	bl	13430 <_Znwj>
   11c2e:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11c30:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11c34:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11c38:	4908      	ldr	r1, [pc, #32]	; (11c5c <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11c3a:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11c3e:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11c42:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11c46:	f00c fb93 	bl	1e370 <memcpy>
    static NvmManager *instance = new NvmManager();
   11c4a:	4903      	ldr	r1, [pc, #12]	; (11c58 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11c4c:	2201      	movs	r2, #1
   11c4e:	6008      	str	r0, [r1, #0]
   11c50:	602a      	str	r2, [r5, #0]
}
   11c52:	bd38      	pop	{r3, r4, r5, pc}
   11c54:	20001f14 	.word	0x20001f14
   11c58:	20001f1c 	.word	0x20001f1c
   11c5c:	00804000 	.word	0x00804000

00011c60 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11c60:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11c64:	bf9a      	itte	ls
   11c66:	1840      	addls	r0, r0, r1
   11c68:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11c6c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11c70:	4770      	bx	lr
   11c72:	bf00      	nop

00011c74 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11c74:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11c76:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11c7a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11c7e:	2400      	movs	r4, #0
   11c80:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11c84:	1c6b      	adds	r3, r5, #1
   11c86:	bf08      	it	eq
   11c88:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11c8c:	d005      	beq.n	11c9a <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11c8e:	0c2e      	lsrs	r6, r5, #16
   11c90:	4627      	mov	r7, r4
   11c92:	ea56 0007 	orrs.w	r0, r6, r7
   11c96:	462b      	mov	r3, r5
   11c98:	d002      	beq.n	11ca0 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11c9a:	4a07      	ldr	r2, [pc, #28]	; (11cb8 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11c9c:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11ca0:	0a1e      	lsrs	r6, r3, #8
   11ca2:	0e15      	lsrs	r5, r2, #24
   11ca4:	0c14      	lsrs	r4, r2, #16
   11ca6:	0a10      	lsrs	r0, r2, #8
   11ca8:	700e      	strb	r6, [r1, #0]
   11caa:	708d      	strb	r5, [r1, #2]
   11cac:	70cc      	strb	r4, [r1, #3]
   11cae:	704b      	strb	r3, [r1, #1]
   11cb0:	714a      	strb	r2, [r1, #5]
   11cb2:	7108      	strb	r0, [r1, #4]
    }
}
   11cb4:	bcf0      	pop	{r4, r5, r6, r7}
   11cb6:	4770      	bx	lr
   11cb8:	10b00000 	.word	0x10b00000

00011cbc <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11cbc:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11cbe:	f7ff ffa9 	bl	11c14 <_ZN9ClearCore10NvmManager8InstanceEv>
   11cc2:	4b01      	ldr	r3, [pc, #4]	; (11cc8 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11cc4:	6018      	str	r0, [r3, #0]
   11cc6:	bd08      	pop	{r3, pc}
   11cc8:	20001f18 	.word	0x20001f18

00011ccc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11ccc:	2000      	movs	r0, #0
   11cce:	4770      	bx	lr

00011cd0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cd4:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11cd6:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11cd8:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11cda:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11cde:	2900      	cmp	r1, #0
   11ce0:	d04f      	beq.n	11d82 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11ce2:	4b55      	ldr	r3, [pc, #340]	; (11e38 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ce4:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11ce8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11cec:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11cf0:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11cf2:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11cf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11cf8:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11cfa:	f000 8095 	beq.w	11e28 <_usb_d_dev_in_next+0x158>
   11cfe:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11d02:	f895 c013 	ldrb.w	ip, [r5, #19]
   11d06:	401a      	ands	r2, r3
   11d08:	b292      	uxth	r2, r2
   11d0a:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11d0e:	0163      	lsls	r3, r4, #5
   11d10:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11d14:	2602      	movs	r6, #2
   11d16:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11d1a:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11d1c:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11d1e:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11d20:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11d22:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11d24:	d235      	bcs.n	11d92 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11d26:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11d28:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11d2c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11d2e:	d05e      	beq.n	11dee <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11d30:	682b      	ldr	r3, [r5, #0]
   11d32:	68e8      	ldr	r0, [r5, #12]
   11d34:	4576      	cmp	r6, lr
   11d36:	bf28      	it	cs
   11d38:	4676      	movcs	r6, lr
   11d3a:	4419      	add	r1, r3
   11d3c:	4632      	mov	r2, r6
   11d3e:	f00c fb17 	bl	1e370 <memcpy>
	bank->ADDR.reg          = addr;
   11d42:	4b3d      	ldr	r3, [pc, #244]	; (11e38 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11d44:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11d46:	0162      	lsls	r2, r4, #5
   11d48:	1899      	adds	r1, r3, r2
   11d4a:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11d4c:	4413      	add	r3, r2
   11d4e:	6959      	ldr	r1, [r3, #20]
   11d50:	f366 010d 	bfi	r1, r6, #0, #14
   11d54:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11d56:	6959      	ldr	r1, [r3, #20]
   11d58:	f36f 319b 	bfc	r1, #14, #14
   11d5c:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11d5e:	b947      	cbnz	r7, 11d72 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11d60:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11d64:	f1b8 0f01 	cmp.w	r8, #1
   11d68:	bf14      	ite	ne
   11d6a:	224a      	movne	r2, #74	; 0x4a
   11d6c:	224e      	moveq	r2, #78	; 0x4e
   11d6e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11d72:	0164      	lsls	r4, r4, #5
   11d74:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11d78:	2380      	movs	r3, #128	; 0x80
   11d7a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11d82:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11d86:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11d8a:	f00c 0807 	and.w	r8, ip, #7
   11d8e:	460a      	mov	r2, r1
   11d90:	e7c3      	b.n	11d1a <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11d92:	f01c 0f10 	tst.w	ip, #16
   11d96:	d11a      	bne.n	11dce <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11d98:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11d9a:	f1b8 0f01 	cmp.w	r8, #1
   11d9e:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11da2:	bf0c      	ite	eq
   11da4:	234b      	moveq	r3, #75	; 0x4b
   11da6:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11da8:	4596      	cmp	lr, r2
   11daa:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11dae:	d02c      	beq.n	11e0a <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11db0:	28ff      	cmp	r0, #255	; 0xff
   11db2:	d028      	beq.n	11e06 <_usb_d_dev_in_next+0x136>
   11db4:	7ceb      	ldrb	r3, [r5, #19]
   11db6:	065a      	lsls	r2, r3, #25
   11db8:	d525      	bpl.n	11e06 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11dba:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11dbe:	491f      	ldr	r1, [pc, #124]	; (11e3c <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11dc0:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11dc2:	68aa      	ldr	r2, [r5, #8]
   11dc4:	690b      	ldr	r3, [r1, #16]
}
   11dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11dca:	2100      	movs	r1, #0
   11dcc:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11dce:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11dd0:	4b1b      	ldr	r3, [pc, #108]	; (11e40 <_usb_d_dev_in_next+0x170>)
   11dd2:	0162      	lsls	r2, r4, #5
   11dd4:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11dd6:	f36f 1104 	bfc	r1, #4, #1
   11dda:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11ddc:	6859      	ldr	r1, [r3, #4]
   11dde:	f36f 010d 	bfc	r1, #0, #14
   11de2:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11de4:	6859      	ldr	r1, [r3, #4]
   11de6:	f36f 319b 	bfc	r1, #14, #14
   11dea:	6059      	str	r1, [r3, #4]
   11dec:	e7b7      	b.n	11d5e <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11dee:	4b12      	ldr	r3, [pc, #72]	; (11e38 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11df0:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11df2:	0162      	lsls	r2, r4, #5
   11df4:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11df6:	4401      	add	r1, r0
   11df8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11dfc:	bf28      	it	cs
   11dfe:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11e02:	6129      	str	r1, [r5, #16]
   11e04:	e7a2      	b.n	11d4c <_usb_d_dev_in_next+0x7c>
   11e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11e0a:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11e0c:	4a0b      	ldr	r2, [pc, #44]	; (11e3c <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11e0e:	f36f 1386 	bfc	r3, #6, #1
   11e12:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11e14:	68d3      	ldr	r3, [r2, #12]
   11e16:	4798      	blx	r3
   11e18:	2800      	cmp	r0, #0
   11e1a:	d1f4      	bne.n	11e06 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11e1c:	7ceb      	ldrb	r3, [r5, #19]
   11e1e:	7ca8      	ldrb	r0, [r5, #18]
   11e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11e24:	74eb      	strb	r3, [r5, #19]
   11e26:	e7c3      	b.n	11db0 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11e28:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11e2c:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11e30:	f00c 0807 	and.w	r8, ip, #7
   11e34:	e76b      	b.n	11d0e <_usb_d_dev_in_next+0x3e>
   11e36:	bf00      	nop
   11e38:	20002210 	.word	0x20002210
   11e3c:	20001fe0 	.word	0x20001fe0
   11e40:	20002220 	.word	0x20002220

00011e44 <_usb_d_dev_out_next>:
{
   11e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11e48:	7c85      	ldrb	r5, [r0, #18]
{
   11e4a:	b083      	sub	sp, #12
   11e4c:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e4e:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11e50:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e54:	2900      	cmp	r1, #0
   11e56:	f000 8085 	beq.w	11f64 <_usb_d_dev_out_next+0x120>
   11e5a:	4b76      	ldr	r3, [pc, #472]	; (12034 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e5c:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e5e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11e62:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e64:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e68:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11e6a:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e6c:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e6e:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11e72:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e76:	f000 80d7 	beq.w	12028 <_usb_d_dev_out_next+0x1e4>
   11e7a:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e7c:	7cc2      	ldrb	r2, [r0, #19]
   11e7e:	b2b6      	uxth	r6, r6
   11e80:	ea09 0306 	and.w	r3, r9, r6
   11e84:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11e88:	0169      	lsls	r1, r5, #5
   11e8a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11e8e:	2001      	movs	r0, #1
   11e90:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11e94:	0691      	lsls	r1, r2, #26
   11e96:	d512      	bpl.n	11ebe <_usb_d_dev_out_next+0x7a>
   11e98:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11e9c:	f1be 0f00 	cmp.w	lr, #0
   11ea0:	d048      	beq.n	11f34 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11ea2:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11ea4:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11ea6:	ebae 0200 	sub.w	r2, lr, r0
   11eaa:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11eac:	429a      	cmp	r2, r3
   11eae:	bf28      	it	cs
   11eb0:	461a      	movcs	r2, r3
   11eb2:	6823      	ldr	r3, [r4, #0]
   11eb4:	68e1      	ldr	r1, [r4, #12]
   11eb6:	4418      	add	r0, r3
   11eb8:	f00c fa5a 	bl	1e370 <memcpy>
   11ebc:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11ebe:	6862      	ldr	r2, [r4, #4]
   11ec0:	2a00      	cmp	r2, #0
   11ec2:	d036      	beq.n	11f32 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11ec4:	2f00      	cmp	r7, #0
   11ec6:	d15b      	bne.n	11f80 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11ec8:	68a3      	ldr	r3, [r4, #8]
   11eca:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11ecc:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11ece:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11ed0:	d960      	bls.n	11f94 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11ed2:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11ed4:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11ed6:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11ed8:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11eda:	f140 808b 	bpl.w	11ff4 <_usb_d_dev_out_next+0x1b0>
   11ede:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11ee0:	4954      	ldr	r1, [pc, #336]	; (12034 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11ee2:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11ee4:	f841 3008 	str.w	r3, [r1, r8]
   11ee8:	42b2      	cmp	r2, r6
   11eea:	bf28      	it	cs
   11eec:	4632      	movcs	r2, r6
   11eee:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11ef2:	eb01 0308 	add.w	r3, r1, r8
   11ef6:	6858      	ldr	r0, [r3, #4]
   11ef8:	f362 309b 	bfi	r0, r2, #14, #14
   11efc:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11efe:	685a      	ldr	r2, [r3, #4]
   11f00:	f36f 020d 	bfc	r2, #0, #14
   11f04:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11f06:	b95f      	cbnz	r7, 11f20 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11f08:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11f0c:	bf08      	it	eq
   11f0e:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11f10:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11f14:	bf0a      	itet	eq
   11f16:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11f18:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11f1a:	768f      	strbeq	r7, [r1, #26]
   11f1c:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11f20:	016d      	lsls	r5, r5, #5
   11f22:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11f26:	2340      	movs	r3, #64	; 0x40
   11f28:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11f2c:	b003      	add	sp, #12
   11f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f32:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11f34:	06d6      	lsls	r6, r2, #27
   11f36:	d54b      	bpl.n	11fd0 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11f38:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11f3a:	493e      	ldr	r1, [pc, #248]	; (12034 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11f3c:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11f3e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11f42:	f043 0320 	orr.w	r3, r3, #32
   11f46:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11f48:	f841 2008 	str.w	r2, [r1, r8]
   11f4c:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11f50:	8a20      	ldrh	r0, [r4, #16]
   11f52:	685a      	ldr	r2, [r3, #4]
   11f54:	f360 329b 	bfi	r2, r0, #14, #14
   11f58:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11f5a:	685a      	ldr	r2, [r3, #4]
   11f5c:	f36f 020d 	bfc	r2, #0, #14
   11f60:	605a      	str	r2, [r3, #4]
   11f62:	e7d0      	b.n	11f06 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f64:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f66:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f68:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11f6c:	429e      	cmp	r6, r3
   11f6e:	d137      	bne.n	11fe0 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f70:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f72:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   11f76:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11f78:	46b9      	mov	r9, r7
   11f7a:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11f7e:	e789      	b.n	11e94 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   11f80:	8a21      	ldrh	r1, [r4, #16]
   11f82:	4299      	cmp	r1, r3
   11f84:	d9a0      	bls.n	11ec8 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   11f86:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11f88:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   11f8a:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   11f8e:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   11f90:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11f92:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   11f94:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f98:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   11f9c:	bf0c      	ite	eq
   11f9e:	232d      	moveq	r3, #45	; 0x2d
   11fa0:	2325      	movne	r3, #37	; 0x25
   11fa2:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   11fa6:	b915      	cbnz	r5, 11fae <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   11fa8:	4b22      	ldr	r3, [pc, #136]	; (12034 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11faa:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   11fac:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11fae:	7ca0      	ldrb	r0, [r4, #18]
   11fb0:	28ff      	cmp	r0, #255	; 0xff
   11fb2:	d0bb      	beq.n	11f2c <_usb_d_dev_out_next+0xe8>
   11fb4:	7ce3      	ldrb	r3, [r4, #19]
   11fb6:	065a      	lsls	r2, r3, #25
   11fb8:	d5b8      	bpl.n	11f2c <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   11fba:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11fbe:	491e      	ldr	r1, [pc, #120]	; (12038 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   11fc0:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11fc2:	690b      	ldr	r3, [r1, #16]
   11fc4:	68a2      	ldr	r2, [r4, #8]
   11fc6:	2100      	movs	r1, #0
}
   11fc8:	b003      	add	sp, #12
   11fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11fce:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   11fd0:	b117      	cbz	r7, 11fd8 <_usb_d_dev_out_next+0x194>
   11fd2:	8a22      	ldrh	r2, [r4, #16]
   11fd4:	429a      	cmp	r2, r3
   11fd6:	d8d6      	bhi.n	11f86 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   11fd8:	68a3      	ldr	r3, [r4, #8]
   11fda:	4453      	add	r3, sl
   11fdc:	60a3      	str	r3, [r4, #8]
   11fde:	e7d9      	b.n	11f94 <_usb_d_dev_out_next+0x150>
   11fe0:	3e01      	subs	r6, #1
   11fe2:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11fe4:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11fe8:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11fea:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11fec:	4689      	mov	r9, r1
   11fee:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11ff2:	e74f      	b.n	11e94 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   11ff4:	8a20      	ldrh	r0, [r4, #16]
   11ff6:	4282      	cmp	r2, r0
   11ff8:	d905      	bls.n	12006 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   11ffa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11ffe:	d90e      	bls.n	1201e <_usb_d_dev_out_next+0x1da>
   12000:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12004:	e005      	b.n	12012 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   12006:	bf3c      	itt	cc
   12008:	f041 0120 	orrcc.w	r1, r1, #32
   1200c:	74e1      	strbcc	r1, [r4, #19]
   1200e:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12012:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   12014:	4907      	ldr	r1, [pc, #28]	; (12034 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12016:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   12018:	f841 3008 	str.w	r3, [r1, r8]
   1201c:	e769      	b.n	11ef2 <_usb_d_dev_out_next+0xae>
   1201e:	ea22 0206 	bic.w	r2, r2, r6
   12022:	f3c2 020d 	ubfx	r2, r2, #0, #14
   12026:	e7f4      	b.n	12012 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12028:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   1202a:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1202e:	f002 0b07 	and.w	fp, r2, #7
   12032:	e729      	b.n	11e88 <_usb_d_dev_out_next+0x44>
   12034:	20002210 	.word	0x20002210
   12038:	20001fe0 	.word	0x20001fe0

0001203c <_usb_d_dev_handler>:
{
   1203c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12040:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   12044:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12046:	8c16      	ldrh	r6, [r2, #32]
   12048:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   1204a:	2e00      	cmp	r6, #0
   1204c:	f000 812c 	beq.w	122a8 <_usb_d_dev_handler+0x26c>
   12050:	4dc4      	ldr	r5, [pc, #784]	; (12364 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12052:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   12054:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   12056:	7ca8      	ldrb	r0, [r5, #18]
   12058:	28ff      	cmp	r0, #255	; 0xff
   1205a:	d030      	beq.n	120be <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1205c:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   12060:	fa07 f203 	lsl.w	r2, r7, r3
   12064:	4232      	tst	r2, r6
   12066:	d02a      	beq.n	120be <_usb_d_dev_handler+0x82>
   12068:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   1206c:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12070:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   12072:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12076:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   1207a:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   1207c:	46c1      	mov	r9, r8
	if (flags) {
   1207e:	d01e      	beq.n	120be <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   12080:	49b9      	ldr	r1, [pc, #740]	; (12368 <_usb_d_dev_handler+0x32c>)
   12082:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   12086:	eb0a 0c04 	add.w	ip, sl, r4
   1208a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   1208e:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   12092:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   12096:	2901      	cmp	r1, #1
   12098:	f000 80f4 	beq.w	12284 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   1209c:	f01b 0f80 	tst.w	fp, #128	; 0x80
   120a0:	d115      	bne.n	120ce <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   120a2:	f013 0120 	ands.w	r1, r3, #32
   120a6:	d15a      	bne.n	1215e <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   120a8:	f013 0f04 	tst.w	r3, #4
   120ac:	f040 8098 	bne.w	121e0 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   120b0:	07d9      	lsls	r1, r3, #31
   120b2:	f100 80e2 	bmi.w	1227a <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   120b6:	f00b 0107 	and.w	r1, fp, #7
   120ba:	2901      	cmp	r1, #1
   120bc:	d058      	beq.n	12170 <_usb_d_dev_handler+0x134>
   120be:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   120c0:	2c1b      	cmp	r4, #27
   120c2:	f105 0514 	add.w	r5, r5, #20
   120c6:	d1c6      	bne.n	12056 <_usb_d_dev_handler+0x1a>
}
   120c8:	b001      	add	sp, #4
   120ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   120ce:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   120d2:	f040 8143 	bne.w	1235c <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   120d6:	f013 0f08 	tst.w	r3, #8
   120da:	f040 8189 	bne.w	123f0 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   120de:	0799      	lsls	r1, r3, #30
   120e0:	f100 8137 	bmi.w	12352 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   120e4:	f00b 0107 	and.w	r1, fp, #7
   120e8:	2901      	cmp	r1, #1
   120ea:	d1e8      	bne.n	120be <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   120ec:	0759      	lsls	r1, r3, #29
   120ee:	f100 8241 	bmi.w	12574 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   120f2:	06db      	lsls	r3, r3, #27
   120f4:	d5e3      	bpl.n	120be <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   120f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   120fa:	d011      	beq.n	12120 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   120fc:	499a      	ldr	r1, [pc, #616]	; (12368 <_usb_d_dev_handler+0x32c>)
   120fe:	eb0a 0304 	add.w	r3, sl, r4
   12102:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12106:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1210a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1210e:	f36f 1186 	bfc	r1, #6, #1
   12112:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12116:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12118:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1211c:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12120:	4b91      	ldr	r3, [pc, #580]	; (12368 <_usb_d_dev_handler+0x32c>)
   12122:	eb0a 0104 	add.w	r1, sl, r4
   12126:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   1212a:	4b90      	ldr	r3, [pc, #576]	; (1236c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   1212c:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12130:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12134:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12138:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1213c:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12140:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12144:	216f      	movs	r1, #111	; 0x6f
   12146:	f88e c00a 	strb.w	ip, [lr, #10]
   1214a:	f88e c01a 	strb.w	ip, [lr, #26]
   1214e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12152:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12156:	4b84      	ldr	r3, [pc, #528]	; (12368 <_usb_d_dev_handler+0x32c>)
   12158:	689b      	ldr	r3, [r3, #8]
   1215a:	4798      	blx	r3
   1215c:	e7af      	b.n	120be <_usb_d_dev_handler+0x82>
   1215e:	68aa      	ldr	r2, [r5, #8]
   12160:	2320      	movs	r3, #32
   12162:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12166:	4b80      	ldr	r3, [pc, #512]	; (12368 <_usb_d_dev_handler+0x32c>)
   12168:	2101      	movs	r1, #1
   1216a:	691b      	ldr	r3, [r3, #16]
   1216c:	4798      	blx	r3
   1216e:	e7a6      	b.n	120be <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12170:	0719      	lsls	r1, r3, #28
   12172:	f100 80fd 	bmi.w	12370 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12176:	06db      	lsls	r3, r3, #27
   12178:	d5a1      	bpl.n	120be <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1217a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1217e:	d011      	beq.n	121a4 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12180:	4979      	ldr	r1, [pc, #484]	; (12368 <_usb_d_dev_handler+0x32c>)
   12182:	eb0a 0304 	add.w	r3, sl, r4
   12186:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1218a:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1218e:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   12192:	f36f 1186 	bfc	r1, #6, #1
   12196:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1219a:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1219c:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   121a0:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   121a4:	4b70      	ldr	r3, [pc, #448]	; (12368 <_usb_d_dev_handler+0x32c>)
   121a6:	eb0a 0104 	add.w	r1, sl, r4
   121aa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   121ae:	4b6f      	ldr	r3, [pc, #444]	; (1236c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   121b0:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   121b4:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   121b8:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121bc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   121c0:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121c4:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   121c6:	2100      	movs	r1, #0
   121c8:	f88e 100a 	strb.w	r1, [lr, #10]
   121cc:	f88e 101a 	strb.w	r1, [lr, #26]
   121d0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121d4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   121d8:	4b63      	ldr	r3, [pc, #396]	; (12368 <_usb_d_dev_handler+0x32c>)
   121da:	689b      	ldr	r3, [r3, #8]
   121dc:	4798      	blx	r3
   121de:	e76e      	b.n	120be <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   121e0:	4b62      	ldr	r3, [pc, #392]	; (1236c <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   121e2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   121e6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121e8:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   121ec:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121f0:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   121f4:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121f6:	d07c      	beq.n	122f2 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   121f8:	f013 0302 	ands.w	r3, r3, #2
   121fc:	d032      	beq.n	12264 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   121fe:	f89e 100a 	ldrb.w	r1, [lr, #10]
   12202:	f36f 0141 	bfc	r1, #1, #1
   12206:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1220a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1220e:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12212:	2204      	movs	r2, #4
   12214:	2901      	cmp	r1, #1
   12216:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1221a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1221e:	f47f af4e 	bne.w	120be <_usb_d_dev_handler+0x82>
   12222:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12226:	f43f af4a 	beq.w	120be <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1222a:	494f      	ldr	r1, [pc, #316]	; (12368 <_usb_d_dev_handler+0x32c>)
   1222c:	eb0a 0204 	add.w	r2, sl, r4
   12230:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   12234:	3220      	adds	r2, #32
   12236:	79d1      	ldrb	r1, [r2, #7]
   12238:	09c9      	lsrs	r1, r1, #7
   1223a:	f43f af40 	beq.w	120be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1223e:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12240:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12244:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12248:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1224c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12250:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12252:	4b45      	ldr	r3, [pc, #276]	; (12368 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12254:	f36f 1186 	bfc	r1, #6, #1
   12258:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1225a:	691b      	ldr	r3, [r3, #16]
   1225c:	68aa      	ldr	r2, [r5, #8]
   1225e:	2100      	movs	r1, #0
   12260:	4798      	blx	r3
   12262:	e72c      	b.n	120be <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   12264:	4941      	ldr	r1, [pc, #260]	; (1236c <_usb_d_dev_handler+0x330>)
   12266:	1888      	adds	r0, r1, r2
   12268:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1226c:	2104      	movs	r1, #4
   1226e:	7283      	strb	r3, [r0, #10]
   12270:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12274:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12278:	e721      	b.n	120be <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   1227a:	2101      	movs	r1, #1
   1227c:	4628      	mov	r0, r5
   1227e:	f7ff fde1 	bl	11e44 <_usb_d_dev_out_next>
   12282:	e71c      	b.n	120be <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12284:	f013 0f10 	tst.w	r3, #16
   12288:	f040 80e0 	bne.w	1244c <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   1228c:	065a      	lsls	r2, r3, #25
   1228e:	f100 80e7 	bmi.w	12460 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   12292:	069b      	lsls	r3, r3, #26
   12294:	f57f af13 	bpl.w	120be <_usb_d_dev_handler+0x82>
   12298:	2320      	movs	r3, #32
   1229a:	68aa      	ldr	r2, [r5, #8]
   1229c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   122a0:	4b31      	ldr	r3, [pc, #196]	; (12368 <_usb_d_dev_handler+0x32c>)
   122a2:	691b      	ldr	r3, [r3, #16]
   122a4:	4798      	blx	r3
   122a6:	e70a      	b.n	120be <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   122a8:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   122aa:	8b13      	ldrh	r3, [r2, #24]
   122ac:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   122ae:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   122b0:	f013 0004 	ands.w	r0, r3, #4
   122b4:	f040 80dc 	bne.w	12470 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   122b8:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   122bc:	f040 80e0 	bne.w	12480 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   122c0:	0618      	lsls	r0, r3, #24
   122c2:	f100 8140 	bmi.w	12546 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   122c6:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   122ca:	f040 8191 	bne.w	125f0 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   122ce:	f013 0108 	ands.w	r1, r3, #8
   122d2:	f040 819e 	bne.w	12612 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   122d6:	07db      	lsls	r3, r3, #31
   122d8:	f57f aeba 	bpl.w	12050 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   122dc:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   122e0:	4821      	ldr	r0, [pc, #132]	; (12368 <_usb_d_dev_handler+0x32c>)
   122e2:	8393      	strh	r3, [r2, #28]
   122e4:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   122e6:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   122e8:	2570      	movs	r5, #112	; 0x70
   122ea:	2004      	movs	r0, #4
   122ec:	8315      	strh	r5, [r2, #24]
   122ee:	4623      	mov	r3, r4
   122f0:	e0de      	b.n	124b0 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122f2:	f013 0f01 	tst.w	r3, #1
   122f6:	f43f af7f 	beq.w	121f8 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   122fa:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   122fe:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12302:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12306:	f04f 0104 	mov.w	r1, #4
   1230a:	f88e 300a 	strb.w	r3, [lr, #10]
   1230e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12312:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12316:	f43f aed2 	beq.w	120be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1231a:	4b13      	ldr	r3, [pc, #76]	; (12368 <_usb_d_dev_handler+0x32c>)
   1231c:	eb0a 0104 	add.w	r1, sl, r4
   12320:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12324:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12328:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1232c:	2240      	movs	r2, #64	; 0x40
   1232e:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12332:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12336:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   1233a:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1233e:	4b0a      	ldr	r3, [pc, #40]	; (12368 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12340:	f36f 1286 	bfc	r2, #6, #1
   12344:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12348:	691b      	ldr	r3, [r3, #16]
   1234a:	68aa      	ldr	r2, [r5, #8]
   1234c:	2104      	movs	r1, #4
   1234e:	4798      	blx	r3
   12350:	e6b5      	b.n	120be <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   12352:	2101      	movs	r1, #1
   12354:	4628      	mov	r0, r5
   12356:	f7ff fcbb 	bl	11cd0 <_usb_d_dev_in_next>
   1235a:	e6b0      	b.n	120be <_usb_d_dev_handler+0x82>
   1235c:	68aa      	ldr	r2, [r5, #8]
   1235e:	2340      	movs	r3, #64	; 0x40
   12360:	e6ff      	b.n	12162 <_usb_d_dev_handler+0x126>
   12362:	bf00      	nop
   12364:	20001ff4 	.word	0x20001ff4
   12368:	20001fe0 	.word	0x20001fe0
   1236c:	20002210 	.word	0x20002210
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12370:	4bc3      	ldr	r3, [pc, #780]	; (12680 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12372:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12376:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12378:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1237c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12380:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12382:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12384:	f000 8098 	beq.w	124b8 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12388:	f013 0302 	ands.w	r3, r3, #2
   1238c:	d053      	beq.n	12436 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1238e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12392:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12396:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1239a:	2208      	movs	r2, #8
   1239c:	f88e 101a 	strb.w	r1, [lr, #26]
   123a0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123a4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   123a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   123ac:	f43f ae87 	beq.w	120be <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   123b0:	4ab4      	ldr	r2, [pc, #720]	; (12684 <_usb_d_dev_handler+0x648>)
   123b2:	eb0a 0e04 	add.w	lr, sl, r4
   123b6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   123ba:	f10e 0e20 	add.w	lr, lr, #32
   123be:	f89e 1007 	ldrb.w	r1, [lr, #7]
   123c2:	09c9      	lsrs	r1, r1, #7
   123c4:	f47f ae7b 	bne.w	120be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123c8:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   123ca:	f04f 0c40 	mov.w	ip, #64	; 0x40
   123ce:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123d2:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123d6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   123da:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   123de:	4ba9      	ldr	r3, [pc, #676]	; (12684 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   123e0:	f361 1286 	bfi	r2, r1, #6, #1
   123e4:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   123e8:	691b      	ldr	r3, [r3, #16]
   123ea:	68aa      	ldr	r2, [r5, #8]
   123ec:	4798      	blx	r3
   123ee:	e666      	b.n	120be <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   123f0:	4ba3      	ldr	r3, [pc, #652]	; (12680 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   123f2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   123f6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123f8:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   123fc:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12400:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12404:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12406:	d07a      	beq.n	124fe <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12408:	f013 0302 	ands.w	r3, r3, #2
   1240c:	d013      	beq.n	12436 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1240e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12412:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12416:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1241a:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1241e:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12422:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12424:	f88e 101a 	strb.w	r1, [lr, #26]
   12428:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1242c:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12430:	f47f ae45 	bne.w	120be <_usb_d_dev_handler+0x82>
   12434:	e7b8      	b.n	123a8 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   12436:	4992      	ldr	r1, [pc, #584]	; (12680 <_usb_d_dev_handler+0x644>)
   12438:	1888      	adds	r0, r1, r2
   1243a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1243e:	2108      	movs	r1, #8
   12440:	7683      	strb	r3, [r0, #26]
   12442:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12446:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   1244a:	e638      	b.n	120be <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   1244c:	f00b 0307 	and.w	r3, fp, #7
   12450:	2b01      	cmp	r3, #1
   12452:	d07e      	beq.n	12552 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12454:	2310      	movs	r3, #16
   12456:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   1245a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   1245e:	e62e      	b.n	120be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12460:	2340      	movs	r3, #64	; 0x40
   12462:	68aa      	ldr	r2, [r5, #8]
   12464:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12468:	4b86      	ldr	r3, [pc, #536]	; (12684 <_usb_d_dev_handler+0x648>)
   1246a:	691b      	ldr	r3, [r3, #16]
   1246c:	4798      	blx	r3
   1246e:	e626      	b.n	120be <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12470:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   12472:	4b84      	ldr	r3, [pc, #528]	; (12684 <_usb_d_dev_handler+0x648>)
   12474:	8391      	strh	r1, [r2, #28]
   12476:	681b      	ldr	r3, [r3, #0]
}
   12478:	b001      	add	sp, #4
   1247a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   1247e:	4718      	bx	r3
   12480:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12484:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12486:	4b7e      	ldr	r3, [pc, #504]	; (12680 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12488:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1248a:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1248c:	8314      	strh	r4, [r2, #24]
   1248e:	891a      	ldrh	r2, [r3, #8]
   12490:	f002 020f 	and.w	r2, r2, #15
   12494:	2a03      	cmp	r2, #3
   12496:	f000 8128 	beq.w	126ea <_usb_d_dev_handler+0x6ae>
   1249a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1249c:	f002 020f 	and.w	r2, r2, #15
   124a0:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   124a2:	bf18      	it	ne
   124a4:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   124a6:	f000 811f 	beq.w	126e8 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   124aa:	4b76      	ldr	r3, [pc, #472]	; (12684 <_usb_d_dev_handler+0x648>)
   124ac:	685b      	ldr	r3, [r3, #4]
   124ae:	2003      	movs	r0, #3
}
   124b0:	b001      	add	sp, #4
   124b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   124b6:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124b8:	07d9      	lsls	r1, r3, #31
   124ba:	f57f af65 	bpl.w	12388 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   124be:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124c2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   124c6:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124ca:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   124cc:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   124d0:	f88e 101a 	strb.w	r1, [lr, #26]
   124d4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124d8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   124dc:	f43f adef 	beq.w	120be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   124e0:	4a68      	ldr	r2, [pc, #416]	; (12684 <_usb_d_dev_handler+0x648>)
   124e2:	eb0a 0104 	add.w	r1, sl, r4
   124e6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124ea:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124ee:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124f0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124f4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124f8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   124fc:	e71d      	b.n	1233a <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124fe:	f013 0f01 	tst.w	r3, #1
   12502:	d081      	beq.n	12408 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12504:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12508:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1250c:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12510:	f04f 0108 	mov.w	r1, #8
   12514:	f88e 301a 	strb.w	r3, [lr, #26]
   12518:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1251c:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12520:	f43f adcd 	beq.w	120be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12524:	4b57      	ldr	r3, [pc, #348]	; (12684 <_usb_d_dev_handler+0x648>)
   12526:	eb0a 0104 	add.w	r1, sl, r4
   1252a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1252e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12532:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12536:	2280      	movs	r2, #128	; 0x80
   12538:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1253c:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12540:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   12544:	e6f9      	b.n	1233a <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   12546:	4b4f      	ldr	r3, [pc, #316]	; (12684 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12548:	2080      	movs	r0, #128	; 0x80
   1254a:	685b      	ldr	r3, [r3, #4]
   1254c:	8390      	strh	r0, [r2, #28]
   1254e:	2005      	movs	r0, #5
   12550:	e7ae      	b.n	124b0 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12552:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12556:	f43f ade3 	beq.w	12120 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1255a:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   1255e:	f36f 1386 	bfc	r3, #6, #1
   12562:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12566:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12568:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1256a:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1256e:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   12572:	e5d5      	b.n	12120 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12574:	4b42      	ldr	r3, [pc, #264]	; (12680 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12576:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1257a:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1257c:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12580:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12584:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12586:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12588:	f000 8080 	beq.w	1268c <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   1258c:	f013 0302 	ands.w	r3, r3, #2
   12590:	f43f ae68 	beq.w	12264 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12594:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12598:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1259c:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125a0:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   125a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   125a6:	f88e 100a 	strb.w	r1, [lr, #10]
   125aa:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125ae:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   125b2:	f43f ad84 	beq.w	120be <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   125b6:	4a33      	ldr	r2, [pc, #204]	; (12684 <_usb_d_dev_handler+0x648>)
   125b8:	eb0a 0104 	add.w	r1, sl, r4
   125bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   125c0:	3120      	adds	r1, #32
   125c2:	79ca      	ldrb	r2, [r1, #7]
   125c4:	09d2      	lsrs	r2, r2, #7
   125c6:	f43f ad7a 	beq.w	120be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125ca:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   125cc:	f04f 0e80 	mov.w	lr, #128	; 0x80
   125d0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125d4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125d8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   125dc:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   125de:	4b29      	ldr	r3, [pc, #164]	; (12684 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   125e0:	f36f 1286 	bfc	r2, #6, #1
   125e4:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   125e6:	691b      	ldr	r3, [r3, #16]
   125e8:	68aa      	ldr	r2, [r5, #8]
   125ea:	2100      	movs	r1, #0
   125ec:	4798      	blx	r3
   125ee:	e566      	b.n	120be <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125f0:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125f2:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   125f6:	4924      	ldr	r1, [pc, #144]	; (12688 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125f8:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   125fa:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125fc:	8310      	strh	r0, [r2, #24]
   125fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   12600:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   12604:	2b03      	cmp	r3, #3
   12606:	d1fa      	bne.n	125fe <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   12608:	4b1e      	ldr	r3, [pc, #120]	; (12684 <_usb_d_dev_handler+0x648>)
   1260a:	2100      	movs	r1, #0
   1260c:	685b      	ldr	r3, [r3, #4]
   1260e:	2002      	movs	r0, #2
   12610:	e74e      	b.n	124b0 <_usb_d_dev_handler+0x474>
   12612:	4e1c      	ldr	r6, [pc, #112]	; (12684 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12614:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12618:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1261a:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1261c:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12620:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   12622:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12624:	8291      	strh	r1, [r2, #20]
   12626:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12628:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   1262a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1262e:	e007      	b.n	12640 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   12630:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12632:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12636:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   1263a:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1263e:	d016      	beq.n	1266e <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12640:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12644:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12648:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1264c:	28ff      	cmp	r0, #255	; 0xff
   1264e:	f103 0320 	add.w	r3, r3, #32
   12652:	f104 0401 	add.w	r4, r4, #1
   12656:	d0eb      	beq.n	12630 <_usb_d_dev_handler+0x5f4>
   12658:	79da      	ldrb	r2, [r3, #7]
   1265a:	0651      	lsls	r1, r2, #25
   1265c:	d5e8      	bpl.n	12630 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   1265e:	f36f 1286 	bfc	r2, #6, #1
   12662:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12664:	69ea      	ldr	r2, [r5, #28]
   12666:	6933      	ldr	r3, [r6, #16]
   12668:	2103      	movs	r1, #3
   1266a:	4798      	blx	r3
   1266c:	e7e0      	b.n	12630 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1266e:	2100      	movs	r1, #0
   12670:	2260      	movs	r2, #96	; 0x60
   12672:	4803      	ldr	r0, [pc, #12]	; (12680 <_usb_d_dev_handler+0x644>)
   12674:	f00b ff7a 	bl	1e56c <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12678:	6873      	ldr	r3, [r6, #4]
   1267a:	2100      	movs	r1, #0
   1267c:	2001      	movs	r0, #1
   1267e:	e717      	b.n	124b0 <_usb_d_dev_handler+0x474>
   12680:	20002210 	.word	0x20002210
   12684:	20001fe0 	.word	0x20001fe0
   12688:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1268c:	07d9      	lsls	r1, r3, #31
   1268e:	f57f af7d 	bpl.w	1258c <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12692:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12696:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1269a:	460a      	mov	r2, r1
   1269c:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126a0:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   126a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   126a6:	f88e 200a 	strb.w	r2, [lr, #10]
   126aa:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126ae:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   126b2:	f43f ad04 	beq.w	120be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   126b6:	4a11      	ldr	r2, [pc, #68]	; (126fc <_usb_d_dev_handler+0x6c0>)
   126b8:	eb0a 0e04 	add.w	lr, sl, r4
   126bc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   126c0:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126c4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   126c6:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126ca:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126ce:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   126d2:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   126d6:	4b09      	ldr	r3, [pc, #36]	; (126fc <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   126d8:	f36f 1286 	bfc	r2, #6, #1
   126dc:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   126e0:	691b      	ldr	r3, [r3, #16]
   126e2:	68aa      	ldr	r2, [r5, #8]
   126e4:	4798      	blx	r3
   126e6:	e4ea      	b.n	120be <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   126e8:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   126ea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   126ee:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   126f0:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   126f2:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   126f4:	f3c1 110a 	ubfx	r1, r1, #4, #11
   126f8:	e6d7      	b.n	124aa <_usb_d_dev_handler+0x46e>
   126fa:	bf00      	nop
   126fc:	20001fe0 	.word	0x20001fe0

00012700 <_usb_d_dev_init>:
{
   12700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   12704:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12708:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   1270a:	07db      	lsls	r3, r3, #31
   1270c:	d551      	bpl.n	127b2 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1270e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   12712:	789c      	ldrb	r4, [r3, #2]
   12714:	f014 0401 	ands.w	r4, r4, #1
   12718:	d1fb      	bne.n	12712 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   1271a:	4b45      	ldr	r3, [pc, #276]	; (12830 <_usb_d_dev_init+0x130>)
   1271c:	4a45      	ldr	r2, [pc, #276]	; (12834 <_usb_d_dev_init+0x134>)
   1271e:	601a      	str	r2, [r3, #0]
   12720:	461e      	mov	r6, r3
   12722:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   12724:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   12726:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   12728:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   1272a:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   1272c:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   1272e:	27ff      	movs	r7, #255	; 0xff
   12730:	e007      	b.n	12742 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   12732:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12734:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12738:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   1273c:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12740:	d01d      	beq.n	1277e <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12742:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12746:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1274a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1274e:	28ff      	cmp	r0, #255	; 0xff
   12750:	f103 0320 	add.w	r3, r3, #32
   12754:	f104 0401 	add.w	r4, r4, #1
   12758:	d0eb      	beq.n	12732 <_usb_d_dev_init+0x32>
   1275a:	79da      	ldrb	r2, [r3, #7]
   1275c:	0651      	lsls	r1, r2, #25
   1275e:	d5e8      	bpl.n	12732 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12760:	f36f 1286 	bfc	r2, #6, #1
   12764:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12766:	69ea      	ldr	r2, [r5, #28]
   12768:	6933      	ldr	r3, [r6, #16]
   1276a:	2103      	movs	r1, #3
   1276c:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   1276e:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12770:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12774:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12778:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1277c:	d1e1      	bne.n	12742 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1277e:	2260      	movs	r2, #96	; 0x60
   12780:	2100      	movs	r1, #0
   12782:	482d      	ldr	r0, [pc, #180]	; (12838 <_usb_d_dev_init+0x138>)
   12784:	f00b fef2 	bl	1e56c <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   12788:	4b2c      	ldr	r3, [pc, #176]	; (1283c <_usb_d_dev_init+0x13c>)
   1278a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   1278c:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12790:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12794:	f013 031f 	ands.w	r3, r3, #31
   12798:	d027      	beq.n	127ea <_usb_d_dev_init+0xea>
   1279a:	2b1f      	cmp	r3, #31
   1279c:	d025      	beq.n	127ea <_usb_d_dev_init+0xea>
   1279e:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   127a0:	b338      	cbz	r0, 127f2 <_usb_d_dev_init+0xf2>
   127a2:	281f      	cmp	r0, #31
   127a4:	d025      	beq.n	127f2 <_usb_d_dev_init+0xf2>
   127a6:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   127a8:	b332      	cbz	r2, 127f8 <_usb_d_dev_init+0xf8>
   127aa:	2a07      	cmp	r2, #7
   127ac:	d024      	beq.n	127f8 <_usb_d_dev_init+0xf8>
   127ae:	0311      	lsls	r1, r2, #12
   127b0:	e024      	b.n	127fc <_usb_d_dev_init+0xfc>
   127b2:	7893      	ldrb	r3, [r2, #2]
   127b4:	079f      	lsls	r7, r3, #30
   127b6:	d1fc      	bne.n	127b2 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   127b8:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   127ba:	079e      	lsls	r6, r3, #30
   127bc:	d50d      	bpl.n	127da <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   127be:	7813      	ldrb	r3, [r2, #0]
   127c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   127c4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   127c6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127ca:	7893      	ldrb	r3, [r2, #2]
   127cc:	079d      	lsls	r5, r3, #30
   127ce:	d1fc      	bne.n	127ca <_usb_d_dev_init+0xca>
   127d0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127d4:	7893      	ldrb	r3, [r2, #2]
   127d6:	079c      	lsls	r4, r3, #30
   127d8:	d4fc      	bmi.n	127d4 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   127da:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127de:	2301      	movs	r3, #1
   127e0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   127e2:	7893      	ldrb	r3, [r2, #2]
   127e4:	0798      	lsls	r0, r3, #30
   127e6:	d1fc      	bne.n	127e2 <_usb_d_dev_init+0xe2>
   127e8:	e791      	b.n	1270e <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   127ea:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   127ee:	2800      	cmp	r0, #0
   127f0:	d1d7      	bne.n	127a2 <_usb_d_dev_init+0xa2>
   127f2:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   127f4:	2a00      	cmp	r2, #0
   127f6:	d1d8      	bne.n	127aa <_usb_d_dev_init+0xaa>
   127f8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   127fc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12800:	4303      	orrs	r3, r0
   12802:	430b      	orrs	r3, r1
   12804:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   12806:	78d3      	ldrb	r3, [r2, #3]
   12808:	f043 0303 	orr.w	r3, r3, #3
   1280c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   1280e:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12810:	2104      	movs	r1, #4
   12812:	f043 030c 	orr.w	r3, r3, #12
   12816:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12818:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1281a:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1281c:	7898      	ldrb	r0, [r3, #2]
   1281e:	f010 0003 	ands.w	r0, r0, #3
   12822:	d1fb      	bne.n	1281c <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   12824:	4a04      	ldr	r2, [pc, #16]	; (12838 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   12826:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   12828:	2201      	movs	r2, #1
   1282a:	811a      	strh	r2, [r3, #8]
}
   1282c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12830:	20001fe0 	.word	0x20001fe0
   12834:	00011ccd 	.word	0x00011ccd
   12838:	20002210 	.word	0x20002210
   1283c:	00800084 	.word	0x00800084

00012840 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   12840:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12844:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   12846:	079b      	lsls	r3, r3, #30
   12848:	d124      	bne.n	12894 <_usb_d_dev_enable+0x54>
{
   1284a:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1284c:	7893      	ldrb	r3, [r2, #2]
   1284e:	0798      	lsls	r0, r3, #30
   12850:	d1fc      	bne.n	1284c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   12852:	7813      	ldrb	r3, [r2, #0]
   12854:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   12856:	0799      	lsls	r1, r3, #30
   12858:	d407      	bmi.n	1286a <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   1285a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1285e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12860:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12864:	7893      	ldrb	r3, [r2, #2]
   12866:	079b      	lsls	r3, r3, #30
   12868:	d1fc      	bne.n	12864 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1286a:	4b0c      	ldr	r3, [pc, #48]	; (1289c <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1286c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12870:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12874:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12878:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1287c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12880:	f240 218d 	movw	r1, #653	; 0x28d
   12884:	6098      	str	r0, [r3, #8]
   12886:	609e      	str	r6, [r3, #8]
   12888:	609d      	str	r5, [r3, #8]
   1288a:	609c      	str	r4, [r3, #8]
   1288c:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   1288e:	2000      	movs	r0, #0
}
   12890:	bc70      	pop	{r4, r5, r6}
   12892:	4770      	bx	lr
		return -USB_ERR_DENIED;
   12894:	f06f 0010 	mvn.w	r0, #16
   12898:	4770      	bx	lr
   1289a:	bf00      	nop
   1289c:	e000e100 	.word	0xe000e100

000128a0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   128a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   128a4:	8913      	ldrh	r3, [r2, #8]
   128a6:	f023 0301 	bic.w	r3, r3, #1
   128aa:	041b      	lsls	r3, r3, #16
   128ac:	0c1b      	lsrs	r3, r3, #16
   128ae:	8113      	strh	r3, [r2, #8]
   128b0:	4770      	bx	lr
   128b2:	bf00      	nop

000128b4 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   128b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   128b8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   128bc:	7298      	strb	r0, [r3, #10]
   128be:	4770      	bx	lr

000128c0 <_usb_d_dev_ep_init>:
{
   128c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   128c4:	f010 050f 	ands.w	r5, r0, #15
   128c8:	fa4f fc80 	sxtb.w	ip, r0
   128cc:	d02a      	beq.n	12924 <_usb_d_dev_ep_init+0x64>
   128ce:	f1bc 0f00 	cmp.w	ip, #0
   128d2:	bfb4      	ite	lt
   128d4:	1cab      	addlt	r3, r5, #2
   128d6:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   128d8:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   128da:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   128de:	d859      	bhi.n	12994 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   128e0:	009c      	lsls	r4, r3, #2
   128e2:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 1299c <_usb_d_dev_ep_init+0xdc>
   128e6:	18e6      	adds	r6, r4, r3
   128e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   128ec:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   128f0:	2eff      	cmp	r6, #255	; 0xff
   128f2:	d14b      	bne.n	1298c <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   128f4:	b1d1      	cbz	r1, 1292c <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   128f6:	f1bc 0f00 	cmp.w	ip, #0
   128fa:	db3a      	blt.n	12972 <_usb_d_dev_ep_init+0xb2>
   128fc:	006f      	lsls	r7, r5, #1
   128fe:	197e      	adds	r6, r7, r5
   12900:	f8df 809c 	ldr.w	r8, [pc, #156]	; 129a0 <_usb_d_dev_ep_init+0xe0>
   12904:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12908:	bb4e      	cbnz	r6, 1295e <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   1290a:	4423      	add	r3, r4
   1290c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   12910:	3101      	adds	r1, #1
   12912:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   12916:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   1291a:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   1291c:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   1291e:	2000      	movs	r0, #0
   12920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12924:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   12928:	462b      	mov	r3, r5
   1292a:	e7d9      	b.n	128e0 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1292c:	b125      	cbz	r5, 12938 <_usb_d_dev_ep_init+0x78>
   1292e:	f1bc 0f00 	cmp.w	ip, #0
   12932:	db01      	blt.n	12938 <_usb_d_dev_ep_init+0x78>
   12934:	1cae      	adds	r6, r5, #2
   12936:	e000      	b.n	1293a <_usb_d_dev_ep_init+0x7a>
   12938:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   1293a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1293e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12942:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12946:	2eff      	cmp	r6, #255	; 0xff
   12948:	d120      	bne.n	1298c <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   1294a:	006f      	lsls	r7, r5, #1
   1294c:	197e      	adds	r6, r7, r5
   1294e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 129a0 <_usb_d_dev_ep_init+0xe0>
   12952:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12956:	b146      	cbz	r6, 1296a <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12958:	f1bc 0f00 	cmp.w	ip, #0
   1295c:	db0c      	blt.n	12978 <_usb_d_dev_ep_init+0xb8>
   1295e:	443d      	add	r5, r7
   12960:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12964:	892d      	ldrh	r5, [r5, #8]
   12966:	4295      	cmp	r5, r2
   12968:	dacf      	bge.n	1290a <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   1296a:	f06f 0012 	mvn.w	r0, #18
   1296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12972:	f8df 802c 	ldr.w	r8, [pc, #44]	; 129a0 <_usb_d_dev_ep_init+0xe0>
   12976:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12978:	442f      	add	r7, r5
   1297a:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   1297e:	687d      	ldr	r5, [r7, #4]
   12980:	b115      	cbz	r5, 12988 <_usb_d_dev_ep_init+0xc8>
   12982:	897e      	ldrh	r6, [r7, #10]
   12984:	4296      	cmp	r6, r2
   12986:	dbf0      	blt.n	1296a <_usb_d_dev_ep_init+0xaa>
   12988:	462e      	mov	r6, r5
   1298a:	e7be      	b.n	1290a <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   1298c:	f06f 0013 	mvn.w	r0, #19
   12990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   12994:	f06f 0011 	mvn.w	r0, #17
   12998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1299c:	20001fe0 	.word	0x20001fe0
   129a0:	0002360c 	.word	0x0002360c

000129a4 <_usb_d_dev_ep_deinit>:
{
   129a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   129a8:	f010 070f 	ands.w	r7, r0, #15
{
   129ac:	b082      	sub	sp, #8
   129ae:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   129b2:	d009      	beq.n	129c8 <_usb_d_dev_ep_deinit+0x24>
   129b4:	f1b9 0f00 	cmp.w	r9, #0
   129b8:	bfb4      	ite	lt
   129ba:	1cbe      	addlt	r6, r7, #2
   129bc:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   129be:	2f02      	cmp	r7, #2
   129c0:	d903      	bls.n	129ca <_usb_d_dev_ep_deinit+0x26>
}
   129c2:	b002      	add	sp, #8
   129c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   129c8:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   129ca:	ea4f 0886 	mov.w	r8, r6, lsl #2
   129ce:	4d3d      	ldr	r5, [pc, #244]	; (12ac4 <_usb_d_dev_ep_deinit+0x120>)
   129d0:	eb08 0306 	add.w	r3, r8, r6
   129d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   129d8:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   129dc:	29ff      	cmp	r1, #255	; 0xff
   129de:	d0f0      	beq.n	129c2 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   129e4:	224a      	movs	r2, #74	; 0x4a
   129e6:	4604      	mov	r4, r0
   129e8:	f88d 2005 	strb.w	r2, [sp, #5]
   129ec:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129ee:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   129f0:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129f4:	d41b      	bmi.n	12a2e <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   129f6:	f003 0307 	and.w	r3, r3, #7
   129fa:	2b01      	cmp	r3, #1
   129fc:	d050      	beq.n	12aa0 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   129fe:	f1b9 0f00 	cmp.w	r9, #0
   12a02:	db54      	blt.n	12aae <_usb_d_dev_ep_deinit+0x10a>
   12a04:	0160      	lsls	r0, r4, #5
   12a06:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   12a0a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   12a0e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12a12:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12a16:	4446      	add	r6, r8
   12a18:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   12a1c:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   12a1e:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12a20:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12a24:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12a28:	b002      	add	sp, #8
   12a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12a2e:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12a32:	f103 0208 	add.w	r2, r3, #8
   12a36:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12a38:	f1b9 0f00 	cmp.w	r9, #0
   12a3c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12a40:	bfb5      	itete	lt
   12a42:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12a46:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12a4a:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12a4e:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12a52:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12a56:	0150      	lsls	r0, r2, #5
   12a58:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12a5c:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12a5e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12a62:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12a66:	eb08 0306 	add.w	r3, r8, r6
   12a6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12a6e:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12a72:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12a76:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12a7a:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a7e:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12a80:	f103 0a20 	add.w	sl, r3, #32
   12a84:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a88:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   12a8a:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a8e:	4608      	mov	r0, r1
   12a90:	2103      	movs	r1, #3
   12a92:	4798      	blx	r3
   12a94:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12a98:	f003 0307 	and.w	r3, r3, #7
   12a9c:	2b01      	cmp	r3, #1
   12a9e:	d1ae      	bne.n	129fe <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12aa0:	0160      	lsls	r0, r4, #5
   12aa2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12aa6:	2300      	movs	r3, #0
   12aa8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   12aac:	e7b3      	b.n	12a16 <_usb_d_dev_ep_deinit+0x72>
   12aae:	017f      	lsls	r7, r7, #5
   12ab0:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12ab4:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12ab8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12abc:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12ac0:	e7a9      	b.n	12a16 <_usb_d_dev_ep_deinit+0x72>
   12ac2:	bf00      	nop
   12ac4:	20001fe0 	.word	0x20001fe0

00012ac8 <_usb_d_dev_ep_enable>:
{
   12ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aca:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12acc:	f010 000f 	ands.w	r0, r0, #15
   12ad0:	d045      	beq.n	12b5e <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12ad2:	0142      	lsls	r2, r0, #5
   12ad4:	2e00      	cmp	r6, #0
   12ad6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12ada:	bfb4      	ite	lt
   12adc:	1c83      	addlt	r3, r0, #2
   12ade:	4603      	movge	r3, r0
   12ae0:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12ae4:	4a84      	ldr	r2, [pc, #528]	; (12cf8 <_usb_d_dev_ep_enable+0x230>)
   12ae6:	1c59      	adds	r1, r3, #1
   12ae8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12aec:	2802      	cmp	r0, #2
   12aee:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12af0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12af4:	f200 809f 	bhi.w	12c36 <_usb_d_dev_ep_enable+0x16e>
   12af8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12afc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12b00:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12b04:	2aff      	cmp	r2, #255	; 0xff
   12b06:	f000 8096 	beq.w	12c36 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12b0a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12b0e:	4d7b      	ldr	r5, [pc, #492]	; (12cfc <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12b10:	f002 0e07 	and.w	lr, r2, #7
   12b14:	0140      	lsls	r0, r0, #5
   12b16:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12b1a:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12b1e:	d028      	beq.n	12b72 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12b20:	2e00      	cmp	r6, #0
   12b22:	db65      	blt.n	12bf0 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12b24:	0761      	lsls	r1, r4, #29
   12b26:	f040 80a4 	bne.w	12c72 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b2a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12b2c:	4b74      	ldr	r3, [pc, #464]	; (12d00 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12b2e:	f002 0207 	and.w	r2, r2, #7
   12b32:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12b36:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b38:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12b3c:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b40:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b44:	d97a      	bls.n	12c3c <_usb_d_dev_ep_enable+0x174>
   12b46:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12b4a:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b4c:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12b4e:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12b50:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b52:	607a      	str	r2, [r7, #4]
   12b54:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12b58:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12b5a:	4608      	mov	r0, r1
   12b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12b5e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12b62:	4968      	ldr	r1, [pc, #416]	; (12d04 <_usb_d_dev_ep_enable+0x23c>)
   12b64:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12b68:	f1a1 0214 	sub.w	r2, r1, #20
   12b6c:	b2e4      	uxtb	r4, r4
   12b6e:	4603      	mov	r3, r0
   12b70:	e7c2      	b.n	12af8 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12b72:	f014 0f77 	tst.w	r4, #119	; 0x77
   12b76:	d17c      	bne.n	12c72 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12b7a:	4a61      	ldr	r2, [pc, #388]	; (12d00 <_usb_d_dev_ep_enable+0x238>)
   12b7c:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12b80:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12b86:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12b8a:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b8e:	d94c      	bls.n	12c2a <_usb_d_dev_ep_enable+0x162>
   12b90:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b94:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12b98:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12b9a:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12b9c:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12ba0:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12ba2:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ba4:	617b      	str	r3, [r7, #20]
   12ba6:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12baa:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12bae:	7c8a      	ldrb	r2, [r1, #18]
   12bb0:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12bb2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12bb6:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12bba:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12bbc:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12bbe:	2000      	movs	r0, #0
   12bc0:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12bc2:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12bc4:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12bc6:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12bca:	6873      	ldr	r3, [r6, #4]
   12bcc:	f367 339b 	bfi	r3, r7, #14, #14
   12bd0:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12bd2:	6872      	ldr	r2, [r6, #4]
   12bd4:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12bd8:	f360 020d 	bfi	r2, r0, #0, #14
   12bdc:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12bde:	2510      	movs	r5, #16
   12be0:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12be2:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12be6:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12bea:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12bf0:	f014 0f70 	tst.w	r4, #112	; 0x70
   12bf4:	d13d      	bne.n	12c72 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12bf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12bf8:	0112      	lsls	r2, r2, #4
   12bfa:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12bfe:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12c02:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12c08:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c0c:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c10:	d91a      	bls.n	12c48 <_usb_d_dev_ep_enable+0x180>
   12c12:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12c16:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c18:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c1a:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12c1c:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c1e:	617a      	str	r2, [r7, #20]
   12c20:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12c24:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12c26:	4608      	mov	r0, r1
   12c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12c2e:	d923      	bls.n	12c78 <_usb_d_dev_ep_enable+0x1b0>
   12c30:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12c34:	e7ae      	b.n	12b94 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12c36:	f06f 0011 	mvn.w	r0, #17
   12c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12c40:	d908      	bls.n	12c54 <_usb_d_dev_ep_enable+0x18c>
   12c42:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12c46:	e780      	b.n	12b4a <_usb_d_dev_ep_enable+0x82>
   12c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12c4c:	d907      	bls.n	12c5e <_usb_d_dev_ep_enable+0x196>
   12c4e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12c52:	e7e0      	b.n	12c16 <_usb_d_dev_ep_enable+0x14e>
   12c54:	2980      	cmp	r1, #128	; 0x80
   12c56:	d907      	bls.n	12c68 <_usb_d_dev_ep_enable+0x1a0>
   12c58:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12c5c:	e775      	b.n	12b4a <_usb_d_dev_ep_enable+0x82>
   12c5e:	2b80      	cmp	r3, #128	; 0x80
   12c60:	d914      	bls.n	12c8c <_usb_d_dev_ep_enable+0x1c4>
   12c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12c66:	e7d6      	b.n	12c16 <_usb_d_dev_ep_enable+0x14e>
   12c68:	2940      	cmp	r1, #64	; 0x40
   12c6a:	d914      	bls.n	12c96 <_usb_d_dev_ep_enable+0x1ce>
   12c6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12c70:	e76b      	b.n	12b4a <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12c72:	f06f 0013 	mvn.w	r0, #19
   12c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c78:	2b80      	cmp	r3, #128	; 0x80
   12c7a:	d902      	bls.n	12c82 <_usb_d_dev_ep_enable+0x1ba>
   12c7c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12c80:	e788      	b.n	12b94 <_usb_d_dev_ep_enable+0xcc>
   12c82:	2b40      	cmp	r3, #64	; 0x40
   12c84:	d90c      	bls.n	12ca0 <_usb_d_dev_ep_enable+0x1d8>
   12c86:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12c8a:	e783      	b.n	12b94 <_usb_d_dev_ep_enable+0xcc>
   12c8c:	2b40      	cmp	r3, #64	; 0x40
   12c8e:	d90c      	bls.n	12caa <_usb_d_dev_ep_enable+0x1e2>
   12c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12c94:	e7bf      	b.n	12c16 <_usb_d_dev_ep_enable+0x14e>
   12c96:	2920      	cmp	r1, #32
   12c98:	d90c      	bls.n	12cb4 <_usb_d_dev_ep_enable+0x1ec>
   12c9a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12c9e:	e754      	b.n	12b4a <_usb_d_dev_ep_enable+0x82>
   12ca0:	2b20      	cmp	r3, #32
   12ca2:	d90c      	bls.n	12cbe <_usb_d_dev_ep_enable+0x1f6>
   12ca4:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12ca8:	e774      	b.n	12b94 <_usb_d_dev_ep_enable+0xcc>
   12caa:	2b20      	cmp	r3, #32
   12cac:	d90c      	bls.n	12cc8 <_usb_d_dev_ep_enable+0x200>
   12cae:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12cb2:	e7b0      	b.n	12c16 <_usb_d_dev_ep_enable+0x14e>
   12cb4:	2910      	cmp	r1, #16
   12cb6:	d90c      	bls.n	12cd2 <_usb_d_dev_ep_enable+0x20a>
   12cb8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12cbc:	e745      	b.n	12b4a <_usb_d_dev_ep_enable+0x82>
   12cbe:	2b10      	cmp	r3, #16
   12cc0:	d90d      	bls.n	12cde <_usb_d_dev_ep_enable+0x216>
   12cc2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12cc6:	e765      	b.n	12b94 <_usb_d_dev_ep_enable+0xcc>
   12cc8:	2b10      	cmp	r3, #16
   12cca:	d90e      	bls.n	12cea <_usb_d_dev_ep_enable+0x222>
   12ccc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12cd0:	e7a1      	b.n	12c16 <_usb_d_dev_ep_enable+0x14e>
   12cd2:	2908      	cmp	r1, #8
   12cd4:	bf94      	ite	ls
   12cd6:	2100      	movls	r1, #0
   12cd8:	2101      	movhi	r1, #1
   12cda:	0709      	lsls	r1, r1, #28
   12cdc:	e735      	b.n	12b4a <_usb_d_dev_ep_enable+0x82>
   12cde:	2b08      	cmp	r3, #8
   12ce0:	bf94      	ite	ls
   12ce2:	2400      	movls	r4, #0
   12ce4:	2401      	movhi	r4, #1
   12ce6:	0724      	lsls	r4, r4, #28
   12ce8:	e754      	b.n	12b94 <_usb_d_dev_ep_enable+0xcc>
   12cea:	2b08      	cmp	r3, #8
   12cec:	bf94      	ite	ls
   12cee:	2300      	movls	r3, #0
   12cf0:	2301      	movhi	r3, #1
   12cf2:	071a      	lsls	r2, r3, #28
   12cf4:	e78f      	b.n	12c16 <_usb_d_dev_ep_enable+0x14e>
   12cf6:	bf00      	nop
   12cf8:	20001fe0 	.word	0x20001fe0
   12cfc:	20002210 	.word	0x20002210
   12d00:	0fffc000 	.word	0x0fffc000
   12d04:	20001ff4 	.word	0x20001ff4

00012d08 <_usb_d_dev_ep_stall>:
{
   12d08:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12d0a:	f010 000f 	ands.w	r0, r0, #15
{
   12d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12d10:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12d14:	d01e      	beq.n	12d54 <_usb_d_dev_ep_stall+0x4c>
   12d16:	2b00      	cmp	r3, #0
   12d18:	bfb4      	ite	lt
   12d1a:	1c83      	addlt	r3, r0, #2
   12d1c:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12d1e:	1c5c      	adds	r4, r3, #1
   12d20:	4a40      	ldr	r2, [pc, #256]	; (12e24 <_usb_d_dev_ep_stall+0x11c>)
   12d22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12d26:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12d28:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12d2c:	d86d      	bhi.n	12e0a <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12d2e:	2901      	cmp	r1, #1
   12d30:	d014      	beq.n	12d5c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12d32:	b389      	cbz	r1, 12d98 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d34:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12d36:	f003 030f 	and.w	r3, r3, #15
   12d3a:	015b      	lsls	r3, r3, #5
   12d3c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d40:	2210      	movs	r2, #16
   12d42:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12d46:	fa02 f305 	lsl.w	r3, r2, r5
   12d4a:	420b      	tst	r3, r1
   12d4c:	bf14      	ite	ne
   12d4e:	2001      	movne	r0, #1
   12d50:	2000      	moveq	r0, #0
   12d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12d54:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12d56:	4a34      	ldr	r2, [pc, #208]	; (12e28 <_usb_d_dev_ep_stall+0x120>)
   12d58:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12d5a:	d1ea      	bne.n	12d32 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d5c:	4931      	ldr	r1, [pc, #196]	; (12e24 <_usb_d_dev_ep_stall+0x11c>)
   12d5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12d62:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d66:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d68:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12d6c:	f002 020f 	and.w	r2, r2, #15
   12d70:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12d72:	2320      	movs	r3, #32
   12d74:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d78:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12d7a:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12d7c:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12d7e:	b2db      	uxtb	r3, r3
   12d80:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12d84:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12d88:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12d8c:	f043 0308 	orr.w	r3, r3, #8
   12d90:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12d94:	2000      	movs	r0, #0
   12d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12d98:	009e      	lsls	r6, r3, #2
   12d9a:	4c22      	ldr	r4, [pc, #136]	; (12e24 <_usb_d_dev_ep_stall+0x11c>)
   12d9c:	18f2      	adds	r2, r6, r3
   12d9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12da2:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12da4:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12da8:	f002 020f 	and.w	r2, r2, #15
   12dac:	0151      	lsls	r1, r2, #5
   12dae:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12db2:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12db4:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12db8:	4207      	tst	r7, r0
   12dba:	d01b      	beq.n	12df4 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12dbc:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12dbe:	2720      	movs	r7, #32
   12dc0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12dc4:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12dc6:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12dc8:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12dcc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12dd0:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12dd4:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12dd8:	423a      	tst	r2, r7
   12dda:	d10d      	bne.n	12df8 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12ddc:	4433      	add	r3, r6
   12dde:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12de2:	3420      	adds	r4, #32
   12de4:	79e3      	ldrb	r3, [r4, #7]
   12de6:	f003 0207 	and.w	r2, r3, #7
   12dea:	2a01      	cmp	r2, #1
   12dec:	d010      	beq.n	12e10 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12dee:	f36f 03c3 	bfc	r3, #3, #1
   12df2:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12df4:	2000      	movs	r0, #0
   12df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12df8:	2201      	movs	r2, #1
   12dfa:	fa02 f505 	lsl.w	r5, r2, r5
   12dfe:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12e00:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e04:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12e08:	e7e8      	b.n	12ddc <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12e0a:	f06f 0011 	mvn.w	r0, #17
}
   12e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12e10:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12e14:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12e18:	d1ec      	bne.n	12df4 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12e1a:	f360 03c3 	bfi	r3, r0, #3, #1
   12e1e:	71e3      	strb	r3, [r4, #7]
   12e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e22:	bf00      	nop
   12e24:	20001fe0 	.word	0x20001fe0
   12e28:	20001ff4 	.word	0x20001ff4

00012e2c <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12e2c:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12e2e:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12e32:	4a12      	ldr	r2, [pc, #72]	; (12e7c <_usb_d_dev_ep_read_req+0x50>)
   12e34:	0143      	lsls	r3, r0, #5
   12e36:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12e38:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12e3a:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12e3c:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12e3e:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12e42:	d818      	bhi.n	12e76 <_usb_d_dev_ep_read_req+0x4a>
   12e44:	b1b9      	cbz	r1, 12e76 <_usb_d_dev_ep_read_req+0x4a>
   12e46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12e4a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12e4e:	2a11      	cmp	r2, #17
   12e50:	d10e      	bne.n	12e70 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12e52:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12e56:	f012 0010 	ands.w	r0, r2, #16
   12e5a:	d007      	beq.n	12e6c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12e5c:	686a      	ldr	r2, [r5, #4]
   12e5e:	682e      	ldr	r6, [r5, #0]
   12e60:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12e62:	2210      	movs	r2, #16
   12e64:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12e66:	4620      	mov	r0, r4
   12e68:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12e6c:	bc70      	pop	{r4, r5, r6}
   12e6e:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12e70:	f06f 0012 	mvn.w	r0, #18
   12e74:	e7fa      	b.n	12e6c <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12e76:	f06f 0011 	mvn.w	r0, #17
   12e7a:	e7f7      	b.n	12e6c <_usb_d_dev_ep_read_req+0x40>
   12e7c:	20002210 	.word	0x20002210

00012e80 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12e84:	7a03      	ldrb	r3, [r0, #8]
   12e86:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12e8a:	f013 030f 	ands.w	r3, r3, #15
{
   12e8e:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12e90:	d03a      	beq.n	12f08 <_usb_d_dev_ep_trans+0x88>
   12e92:	f1b9 0f00 	cmp.w	r9, #0
   12e96:	bfb4      	ite	lt
   12e98:	1c9d      	addlt	r5, r3, #2
   12e9a:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12e9c:	4e5d      	ldr	r6, [pc, #372]	; (13014 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12e9e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12ea2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12ea6:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12eaa:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12eac:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12eb0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12eb4:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12eb6:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12eba:	d050      	beq.n	12f5e <_usb_d_dev_ep_trans+0xde>
   12ebc:	1e57      	subs	r7, r2, #1
   12ebe:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12ec0:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12ec2:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12ec4:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12ec8:	f200 8091 	bhi.w	12fee <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12ecc:	6803      	ldr	r3, [r0, #0]
   12ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12ed2:	d223      	bcs.n	12f1c <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12ed4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12ed8:	eb0b 0305 	add.w	r3, fp, r5
   12edc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12ee0:	6a1b      	ldr	r3, [r3, #32]
   12ee2:	2b00      	cmp	r3, #0
   12ee4:	f000 8092 	beq.w	1300c <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12ee8:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12eec:	eb0b 0405 	add.w	r4, fp, r5
   12ef0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12ef4:	f104 0220 	add.w	r2, r4, #32
   12ef8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12efc:	071b      	lsls	r3, r3, #28
   12efe:	d530      	bpl.n	12f62 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12f00:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12f02:	b007      	add	sp, #28
   12f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f08:	4e42      	ldr	r6, [pc, #264]	; (13014 <_usb_d_dev_ep_trans+0x194>)
   12f0a:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12f0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12f10:	428a      	cmp	r2, r1
   12f12:	d01d      	beq.n	12f50 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12f14:	f106 0814 	add.w	r8, r6, #20
   12f18:	461d      	mov	r5, r3
   12f1a:	e7cf      	b.n	12ebc <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12f1c:	4c3e      	ldr	r4, [pc, #248]	; (13018 <_usb_d_dev_ep_trans+0x198>)
   12f1e:	eb03 0e01 	add.w	lr, r3, r1
   12f22:	45a6      	cmp	lr, r4
   12f24:	d8d6      	bhi.n	12ed4 <_usb_d_dev_ep_trans+0x54>
   12f26:	f013 0303 	ands.w	r3, r3, #3
   12f2a:	d1d3      	bne.n	12ed4 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12f2c:	f1b9 0f00 	cmp.w	r9, #0
   12f30:	db60      	blt.n	12ff4 <_usb_d_dev_ep_trans+0x174>
   12f32:	428a      	cmp	r2, r1
   12f34:	d8ce      	bhi.n	12ed4 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12f36:	2f00      	cmp	r7, #0
   12f38:	d060      	beq.n	12ffc <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12f3a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12f3e:	eb0b 0205 	add.w	r2, fp, r5
   12f42:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12f46:	6a12      	ldr	r2, [r2, #32]
   12f48:	2a00      	cmp	r2, #0
   12f4a:	d050      	beq.n	12fee <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   12f4c:	469a      	mov	sl, r3
   12f4e:	e7cd      	b.n	12eec <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   12f50:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   12f52:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   12f54:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   12f58:	f106 0814 	add.w	r8, r6, #20
   12f5c:	e7b6      	b.n	12ecc <_usb_d_dev_ep_trans+0x4c>
   12f5e:	4617      	mov	r7, r2
   12f60:	e7ae      	b.n	12ec0 <_usb_d_dev_ep_trans+0x40>
   12f62:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   12f64:	a805      	add	r0, sp, #20
   12f66:	9202      	str	r2, [sp, #8]
   12f68:	f000 f8e0 	bl	1312c <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12f6c:	9a02      	ldr	r2, [sp, #8]
   12f6e:	9b01      	ldr	r3, [sp, #4]
   12f70:	79d0      	ldrb	r0, [r2, #7]
   12f72:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   12f76:	d131      	bne.n	12fdc <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   12f78:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   12f7c:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   12f80:	a805      	add	r0, sp, #20
   12f82:	9303      	str	r3, [sp, #12]
   12f84:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   12f86:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   12f88:	f000 f8d8 	bl	1313c <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   12f8c:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   12f8e:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   12f90:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   12f92:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   12f96:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   12f98:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   12f9c:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   12fa0:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   12fa4:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   12fa6:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   12fa8:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   12faa:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   12fae:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12fb0:	7a5b      	ldrb	r3, [r3, #9]
   12fb2:	b9c3      	cbnz	r3, 12fe6 <_usb_d_dev_ep_trans+0x166>
   12fb4:	461f      	mov	r7, r3
   12fb6:	445d      	add	r5, fp
   12fb8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   12fbc:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12fc0:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   12fc4:	f367 1304 	bfi	r3, r7, #4, #1
   12fc8:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   12fcc:	4640      	mov	r0, r8
   12fce:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   12fd2:	db17      	blt.n	13004 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   12fd4:	f7fe ff36 	bl	11e44 <_usb_d_dev_out_next>
	return ERR_NONE;
   12fd8:	2000      	movs	r0, #0
   12fda:	e792      	b.n	12f02 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   12fdc:	a805      	add	r0, sp, #20
   12fde:	f000 f8ad 	bl	1313c <atomic_leave_critical>
		return USB_BUSY;
   12fe2:	2001      	movs	r0, #1
   12fe4:	e78d      	b.n	12f02 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12fe6:	fab7 f787 	clz	r7, r7
   12fea:	097f      	lsrs	r7, r7, #5
   12fec:	e7e3      	b.n	12fb6 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   12fee:	f06f 0011 	mvn.w	r0, #17
   12ff2:	e786      	b.n	12f02 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   12ff4:	469a      	mov	sl, r3
   12ff6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12ffa:	e777      	b.n	12eec <_usb_d_dev_ep_trans+0x6c>
   12ffc:	46ba      	mov	sl, r7
   12ffe:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13002:	e773      	b.n	12eec <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   13004:	f7fe fe64 	bl	11cd0 <_usb_d_dev_in_next>
	return ERR_NONE;
   13008:	2000      	movs	r0, #0
   1300a:	e77a      	b.n	12f02 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   1300c:	f06f 0012 	mvn.w	r0, #18
   13010:	e777      	b.n	12f02 <_usb_d_dev_ep_trans+0x82>
   13012:	bf00      	nop
   13014:	20001fe0 	.word	0x20001fe0
   13018:	20031fff 	.word	0x20031fff

0001301c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   1301c:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1301e:	f010 000f 	ands.w	r0, r0, #15
   13022:	d117      	bne.n	13054 <_usb_d_dev_ep_abort+0x38>
{
   13024:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13026:	0081      	lsls	r1, r0, #2
   13028:	4d27      	ldr	r5, [pc, #156]	; (130c8 <_usb_d_dev_ep_abort+0xac>)
   1302a:	180a      	adds	r2, r1, r0
   1302c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   13030:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13032:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   13036:	2625      	movs	r6, #37	; 0x25
   13038:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1303c:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   1303e:	f04f 064a 	mov.w	r6, #74	; 0x4a
   13042:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13046:	d003      	beq.n	13050 <_usb_d_dev_ep_abort+0x34>
   13048:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   1304c:	0652      	lsls	r2, r2, #25
   1304e:	d408      	bmi.n	13062 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   13050:	b003      	add	sp, #12
   13052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13054:	2b00      	cmp	r3, #0
   13056:	bfb4      	ite	lt
   13058:	1c82      	addlt	r2, r0, #2
   1305a:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   1305c:	2802      	cmp	r0, #2
   1305e:	d931      	bls.n	130c4 <_usb_d_dev_ep_abort+0xa8>
   13060:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13062:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13066:	f102 0608 	add.w	r6, r2, #8
   1306a:	0177      	lsls	r7, r6, #5
	if (dir) {
   1306c:	2b00      	cmp	r3, #0
   1306e:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   13072:	bfb5      	itete	lt
   13074:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13078:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1307c:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13080:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   13084:	af02      	add	r7, sp, #8
   13086:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1308a:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1308c:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   1308e:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13090:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13094:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13098:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   1309c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   130a0:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   130a2:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   130a6:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   130aa:	692d      	ldr	r5, [r5, #16]
   130ac:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   130ae:	f36f 1686 	bfc	r6, #6, #1
   130b2:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   130b6:	4620      	mov	r0, r4
   130b8:	2102      	movs	r1, #2
   130ba:	462b      	mov	r3, r5
}
   130bc:	b003      	add	sp, #12
   130be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   130c2:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   130c4:	4610      	mov	r0, r2
   130c6:	e7ad      	b.n	13024 <_usb_d_dev_ep_abort+0x8>
   130c8:	20001fe0 	.word	0x20001fe0

000130cc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   130cc:	4b06      	ldr	r3, [pc, #24]	; (130e8 <_usb_d_dev_register_callback+0x1c>)
   130ce:	2900      	cmp	r1, #0
   130d0:	bf08      	it	eq
   130d2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   130d4:	2801      	cmp	r0, #1
   130d6:	d003      	beq.n	130e0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   130d8:	b908      	cbnz	r0, 130de <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   130da:	4b04      	ldr	r3, [pc, #16]	; (130ec <_usb_d_dev_register_callback+0x20>)
   130dc:	6019      	str	r1, [r3, #0]
   130de:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   130e0:	4b02      	ldr	r3, [pc, #8]	; (130ec <_usb_d_dev_register_callback+0x20>)
   130e2:	6059      	str	r1, [r3, #4]
   130e4:	4770      	bx	lr
   130e6:	bf00      	nop
   130e8:	00011ccd 	.word	0x00011ccd
   130ec:	20001fe0 	.word	0x20001fe0

000130f0 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   130f0:	4b08      	ldr	r3, [pc, #32]	; (13114 <_usb_d_dev_register_ep_callback+0x24>)
   130f2:	2900      	cmp	r1, #0
   130f4:	bf08      	it	eq
   130f6:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   130f8:	b130      	cbz	r0, 13108 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   130fa:	2801      	cmp	r0, #1
   130fc:	d007      	beq.n	1310e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   130fe:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   13100:	bf04      	itt	eq
   13102:	4b05      	ldreq	r3, [pc, #20]	; (13118 <_usb_d_dev_register_ep_callback+0x28>)
   13104:	6119      	streq	r1, [r3, #16]
   13106:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   13108:	4b03      	ldr	r3, [pc, #12]	; (13118 <_usb_d_dev_register_ep_callback+0x28>)
   1310a:	6099      	str	r1, [r3, #8]
   1310c:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   1310e:	4b02      	ldr	r3, [pc, #8]	; (13118 <_usb_d_dev_register_ep_callback+0x28>)
   13110:	60d9      	str	r1, [r3, #12]
   13112:	4770      	bx	lr
   13114:	00011ccd 	.word	0x00011ccd
   13118:	20001fe0 	.word	0x20001fe0

0001311c <USB_0_Handler>:
   1311c:	f7fe bf8e 	b.w	1203c <_usb_d_dev_handler>

00013120 <USB_1_Handler>:
   13120:	f7fe bf8c 	b.w	1203c <_usb_d_dev_handler>

00013124 <USB_2_Handler>:
   13124:	f7fe bf8a 	b.w	1203c <_usb_d_dev_handler>

00013128 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   13128:	f7fe bf88 	b.w	1203c <_usb_d_dev_handler>

0001312c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1312c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   13130:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   13132:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   13134:	f3bf 8f5f 	dmb	sy
   13138:	4770      	bx	lr
   1313a:	bf00      	nop

0001313c <atomic_leave_critical>:
   1313c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   13140:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13142:	f383 8810 	msr	PRIMASK, r3
   13146:	4770      	bx	lr

00013148 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13148:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   1314a:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   1314c:	2b08      	cmp	r3, #8
   1314e:	d810      	bhi.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13150:	e8df f003 	tbb	[pc, r3]
   13154:	604d3b25 	.word	0x604d3b25
   13158:	05a18a74 	.word	0x05a18a74
   1315c:	11          	.byte	0x11
   1315d:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   1315e:	8903      	ldrh	r3, [r0, #8]
   13160:	3b01      	subs	r3, #1
   13162:	b29b      	uxth	r3, r3
   13164:	8103      	strh	r3, [r0, #8]
   13166:	b923      	cbnz	r3, 13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13168:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1316a:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   1316c:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   1316e:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13170:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   13172:	bc30      	pop	{r4, r5}
   13174:	4770      	bx	lr
            if (--m_timer) {
   13176:	8903      	ldrh	r3, [r0, #8]
   13178:	3b01      	subs	r3, #1
   1317a:	b29b      	uxth	r3, r3
   1317c:	8103      	strh	r3, [r0, #8]
   1317e:	2b00      	cmp	r3, #0
   13180:	d1f7      	bne.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13182:	8981      	ldrh	r1, [r0, #12]
   13184:	3901      	subs	r1, #1
   13186:	b289      	uxth	r1, r1
   13188:	8181      	strh	r1, [r0, #12]
   1318a:	2900      	cmp	r1, #0
   1318c:	f000 80b3 	beq.w	132f6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   13190:	8a43      	ldrh	r3, [r0, #18]
   13192:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   13194:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   13196:	2307      	movs	r3, #7
                m_ledOn = true;
   13198:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   1319a:	7143      	strb	r3, [r0, #5]
                break;
   1319c:	e7e9      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   1319e:	7801      	ldrb	r1, [r0, #0]
   131a0:	2900      	cmp	r1, #0
   131a2:	f040 8089 	bne.w	132b8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   131a6:	7841      	ldrb	r1, [r0, #1]
   131a8:	2900      	cmp	r1, #0
   131aa:	f040 80cb 	bne.w	13344 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   131ae:	7883      	ldrb	r3, [r0, #2]
   131b0:	2b00      	cmp	r3, #0
   131b2:	f040 811a 	bne.w	133ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   131b6:	78c3      	ldrb	r3, [r0, #3]
   131b8:	2b00      	cmp	r3, #0
   131ba:	f040 8118 	bne.w	133ee <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   131be:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   131c0:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   131c2:	2b00      	cmp	r3, #0
   131c4:	d0d5      	beq.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   131c6:	5d41      	ldrb	r1, [r0, r5]
   131c8:	e077      	b.n	132ba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   131ca:	8903      	ldrh	r3, [r0, #8]
   131cc:	3b01      	subs	r3, #1
   131ce:	b29b      	uxth	r3, r3
   131d0:	8103      	strh	r3, [r0, #8]
   131d2:	2b00      	cmp	r3, #0
   131d4:	d1cd      	bne.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   131d6:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   131d8:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   131da:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   131dc:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   131de:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   131e0:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   131e2:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   131e6:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   131e8:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   131ea:	8143      	strh	r3, [r0, #10]
            break;
   131ec:	e7c1      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   131ee:	8903      	ldrh	r3, [r0, #8]
   131f0:	3b01      	subs	r3, #1
   131f2:	b29b      	uxth	r3, r3
   131f4:	8103      	strh	r3, [r0, #8]
   131f6:	2b00      	cmp	r3, #0
   131f8:	d1bb      	bne.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   131fa:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   131fc:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   131fe:	3b01      	subs	r3, #1
   13200:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13202:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13206:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13208:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1320a:	2b00      	cmp	r3, #0
   1320c:	d06d      	beq.n	132ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   1320e:	8a03      	ldrh	r3, [r0, #16]
   13210:	8103      	strh	r3, [r0, #8]
                break;
   13212:	e7ae      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13214:	8903      	ldrh	r3, [r0, #8]
   13216:	3b01      	subs	r3, #1
   13218:	b29b      	uxth	r3, r3
   1321a:	8103      	strh	r3, [r0, #8]
   1321c:	2b00      	cmp	r3, #0
   1321e:	d1a8      	bne.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   13220:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13222:	8a01      	ldrh	r1, [r0, #16]
   13224:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   13226:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   13228:	3201      	adds	r2, #1
            m_ledOn = true;
   1322a:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   1322c:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1322e:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   13232:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   13234:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   13236:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13238:	8143      	strh	r3, [r0, #10]
            break;
   1323a:	e79a      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1323c:	8903      	ldrh	r3, [r0, #8]
   1323e:	3b01      	subs	r3, #1
   13240:	b29b      	uxth	r3, r3
   13242:	8103      	strh	r3, [r0, #8]
   13244:	2b00      	cmp	r3, #0
   13246:	d194      	bne.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13248:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1324a:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1324c:	3b01      	subs	r3, #1
   1324e:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13250:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13254:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13256:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13258:	2b00      	cmp	r3, #0
   1325a:	d1d8      	bne.n	1320e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   1325c:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1325e:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13260:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   13262:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   13264:	7143      	strb	r3, [r0, #5]
            break;
   13266:	e784      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13268:	8903      	ldrh	r3, [r0, #8]
   1326a:	3b01      	subs	r3, #1
   1326c:	b29b      	uxth	r3, r3
   1326e:	8103      	strh	r3, [r0, #8]
   13270:	2b00      	cmp	r3, #0
   13272:	f47f af7e 	bne.w	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13276:	8983      	ldrh	r3, [r0, #12]
   13278:	3b01      	subs	r3, #1
   1327a:	b29b      	uxth	r3, r3
   1327c:	8183      	strh	r3, [r0, #12]
   1327e:	b373      	cbz	r3, 132de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13280:	8a02      	ldrh	r2, [r0, #16]
   13282:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   13284:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   13286:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   13288:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1328a:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   1328e:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   13290:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13292:	8143      	strh	r3, [r0, #10]
                break;
   13294:	e76d      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13296:	8903      	ldrh	r3, [r0, #8]
   13298:	3b01      	subs	r3, #1
   1329a:	b29b      	uxth	r3, r3
   1329c:	8103      	strh	r3, [r0, #8]
   1329e:	2b00      	cmp	r3, #0
   132a0:	f47f af67 	bne.w	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   132a4:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   132a6:	8a42      	ldrh	r2, [r0, #18]
   132a8:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   132aa:	3301      	adds	r3, #1
            m_ledOn = true;
   132ac:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   132ae:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   132b0:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   132b2:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   132b4:	7142      	strb	r2, [r0, #5]
            break;
   132b6:	e75c      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   132b8:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   132ba:	f011 0301 	ands.w	r3, r1, #1
   132be:	d149      	bne.n	13354 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   132c0:	3301      	adds	r3, #1
   132c2:	b2db      	uxtb	r3, r3
   132c4:	fa41 f203 	asr.w	r2, r1, r3
   132c8:	07d4      	lsls	r4, r2, #31
   132ca:	d5f9      	bpl.n	132c0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   132cc:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   132ce:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   132d0:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   132d2:	2201      	movs	r2, #1
    m_currentCode = code;
   132d4:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   132d6:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   132d8:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   132da:	7142      	strb	r2, [r0, #5]
            break;
   132dc:	e749      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   132de:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   132e0:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   132e2:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   132e4:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   132e6:	7143      	strb	r3, [r0, #5]
            break;
   132e8:	e743      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   132ea:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   132ec:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   132ee:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   132f0:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   132f2:	7143      	strb	r3, [r0, #5]
            break;
   132f4:	e73d      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   132f6:	7983      	ldrb	r3, [r0, #6]
   132f8:	79c2      	ldrb	r2, [r0, #7]
   132fa:	3301      	adds	r3, #1
   132fc:	b2db      	uxtb	r3, r3
    if (code > 7) {
   132fe:	2b07      	cmp	r3, #7
        group++;
   13300:	bf85      	ittet	hi
   13302:	3201      	addhi	r2, #1
   13304:	b2d2      	uxtbhi	r2, r2
   13306:	4619      	movls	r1, r3
        code = 0;
   13308:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   1330a:	2a04      	cmp	r2, #4
   1330c:	4615      	mov	r5, r2
   1330e:	dd1b      	ble.n	13348 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   13310:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   13312:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   13314:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   13318:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   1331a:	d01d      	beq.n	13358 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   1331c:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   1331e:	07e9      	lsls	r1, r5, #31
   13320:	d452      	bmi.n	133c8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   13322:	2501      	movs	r5, #1
   13324:	3301      	adds	r3, #1
   13326:	b2db      	uxtb	r3, r3
   13328:	fa44 f103 	asr.w	r1, r4, r3
   1332c:	07c9      	lsls	r1, r1, #31
   1332e:	d5f9      	bpl.n	13324 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   13330:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13332:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   13334:	2d00      	cmp	r5, #0
   13336:	d149      	bne.n	133cc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   13338:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   1333a:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   1333c:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   1333e:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   13340:	7143      	strb	r3, [r0, #5]
}
   13342:	e716      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   13344:	2501      	movs	r5, #1
   13346:	e7b8      	b.n	132ba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13348:	5c84      	ldrb	r4, [r0, r2]
   1334a:	fa54 f101 	asrs.w	r1, r4, r1
   1334e:	d029      	beq.n	133a4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13350:	7bc5      	ldrb	r5, [r0, #15]
   13352:	e7eb      	b.n	1332c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   13354:	2300      	movs	r3, #0
   13356:	e7b9      	b.n	132cc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13358:	7843      	ldrb	r3, [r0, #1]
   1335a:	bb83      	cbnz	r3, 133be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1335c:	2102      	movs	r1, #2
   1335e:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13360:	5cc3      	ldrb	r3, [r0, r3]
   13362:	2b00      	cmp	r3, #0
   13364:	d145      	bne.n	133f2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13366:	1c4a      	adds	r2, r1, #1
   13368:	b2d2      	uxtb	r2, r2
   1336a:	2a05      	cmp	r2, #5
   1336c:	d00d      	beq.n	1338a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1336e:	5c83      	ldrb	r3, [r0, r2]
   13370:	bb2b      	cbnz	r3, 133be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13372:	1c8a      	adds	r2, r1, #2
   13374:	b2d2      	uxtb	r2, r2
   13376:	2a05      	cmp	r2, #5
   13378:	d007      	beq.n	1338a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1337a:	5c83      	ldrb	r3, [r0, r2]
   1337c:	b9fb      	cbnz	r3, 133be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1337e:	1ccb      	adds	r3, r1, #3
   13380:	b2db      	uxtb	r3, r3
   13382:	2b05      	cmp	r3, #5
   13384:	d001      	beq.n	1338a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13386:	5cc3      	ldrb	r3, [r0, r3]
   13388:	b9c3      	cbnz	r3, 133bc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   1338a:	7802      	ldrb	r2, [r0, #0]
   1338c:	b112      	cbz	r2, 13394 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   1338e:	e024      	b.n	133da <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   13390:	5c83      	ldrb	r3, [r0, r2]
   13392:	bb23      	cbnz	r3, 133de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   13394:	3201      	adds	r2, #1
   13396:	b2d2      	uxtb	r2, r2
   13398:	42aa      	cmp	r2, r5
   1339a:	ddf9      	ble.n	13390 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   1339c:	2300      	movs	r3, #0
   1339e:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   133a0:	7143      	strb	r3, [r0, #5]
   133a2:	e6e6      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   133a4:	3201      	adds	r2, #1
   133a6:	b2d2      	uxtb	r2, r2
   133a8:	2a04      	cmp	r2, #4
   133aa:	d8ee      	bhi.n	1338a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   133ac:	5c83      	ldrb	r3, [r0, r2]
   133ae:	b933      	cbnz	r3, 133be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   133b0:	1ca9      	adds	r1, r5, #2
   133b2:	b2c9      	uxtb	r1, r1
   133b4:	2905      	cmp	r1, #5
   133b6:	460b      	mov	r3, r1
   133b8:	d1d2      	bne.n	13360 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   133ba:	e7e6      	b.n	1338a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   133bc:	2204      	movs	r2, #4
   133be:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   133c0:	461c      	mov	r4, r3
   133c2:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   133c4:	2300      	movs	r3, #0
   133c6:	e7b1      	b.n	1332c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   133c8:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   133ca:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   133cc:	8a83      	ldrh	r3, [r0, #20]
   133ce:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   133d0:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   133d2:	2301      	movs	r3, #1
                m_ledOn = false;
   133d4:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   133d6:	7143      	strb	r3, [r0, #5]
   133d8:	e6cb      	b.n	13172 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   133da:	4613      	mov	r3, r2
   133dc:	2200      	movs	r2, #0
   133de:	461d      	mov	r5, r3
            m_patternWrap = true;
   133e0:	2301      	movs	r3, #1
   133e2:	73c3      	strb	r3, [r0, #15]
   133e4:	462c      	mov	r4, r5
        code = 0;
   133e6:	2300      	movs	r3, #0
   133e8:	e799      	b.n	1331e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   133ea:	2502      	movs	r5, #2
   133ec:	e6eb      	b.n	131c6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   133ee:	2503      	movs	r5, #3
   133f0:	e6e9      	b.n	131c6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   133f2:	460a      	mov	r2, r1
   133f4:	e7e3      	b.n	133be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   133f6:	bf00      	nop

000133f8 <arm_sin_q15>:
   133f8:	0982      	lsrs	r2, r0, #6
   133fa:	490c      	ldr	r1, [pc, #48]	; (1342c <arm_sin_q15+0x34>)
   133fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13400:	0240      	lsls	r0, r0, #9
   13402:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   13406:	b410      	push	{r4}
   13408:	3201      	adds	r2, #1
   1340a:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   1340e:	fb03 f304 	mul.w	r3, r3, r4
   13412:	0c1b      	lsrs	r3, r3, #16
   13414:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13418:	f85d 4b04 	ldr.w	r4, [sp], #4
   1341c:	041b      	lsls	r3, r3, #16
   1341e:	fb10 3002 	smlabb	r0, r0, r2, r3
   13422:	f340 30cf 	sbfx	r0, r0, #15, #16
   13426:	f020 0001 	bic.w	r0, r0, #1
   1342a:	4770      	bx	lr
   1342c:	00023630 	.word	0x00023630

00013430 <_Znwj>:
   13430:	b510      	push	{r4, lr}
   13432:	2800      	cmp	r0, #0
   13434:	bf14      	ite	ne
   13436:	4604      	movne	r4, r0
   13438:	2401      	moveq	r4, #1
   1343a:	4620      	mov	r0, r4
   1343c:	f00a fc40 	bl	1dcc0 <malloc>
   13440:	b100      	cbz	r0, 13444 <_Znwj+0x14>
   13442:	bd10      	pop	{r4, pc}
   13444:	f000 f9c8 	bl	137d8 <_ZSt15get_new_handlerv>
   13448:	b108      	cbz	r0, 1344e <_Znwj+0x1e>
   1344a:	4780      	blx	r0
   1344c:	e7f5      	b.n	1343a <_Znwj+0xa>
   1344e:	2004      	movs	r0, #4
   13450:	f000 f8a2 	bl	13598 <__cxa_allocate_exception>
   13454:	4b02      	ldr	r3, [pc, #8]	; (13460 <_Znwj+0x30>)
   13456:	6003      	str	r3, [r0, #0]
   13458:	4a02      	ldr	r2, [pc, #8]	; (13464 <_Znwj+0x34>)
   1345a:	4903      	ldr	r1, [pc, #12]	; (13468 <_Znwj+0x38>)
   1345c:	f000 f946 	bl	136ec <__cxa_throw>
   13460:	00023a84 	.word	0x00023a84
   13464:	00013489 	.word	0x00013489
   13468:	00023a60 	.word	0x00023a60

0001346c <__cxa_pure_virtual>:
   1346c:	b508      	push	{r3, lr}
   1346e:	221b      	movs	r2, #27
   13470:	4902      	ldr	r1, [pc, #8]	; (1347c <__cxa_pure_virtual+0x10>)
   13472:	2002      	movs	r0, #2
   13474:	f00c ffce 	bl	20414 <write>
   13478:	f000 f8ee 	bl	13658 <_ZSt9terminatev>
   1347c:	00023a34 	.word	0x00023a34

00013480 <_ZNKSt9bad_alloc4whatEv>:
   13480:	4800      	ldr	r0, [pc, #0]	; (13484 <_ZNKSt9bad_alloc4whatEv+0x4>)
   13482:	4770      	bx	lr
   13484:	00023a50 	.word	0x00023a50

00013488 <_ZNSt9bad_allocD1Ev>:
   13488:	b510      	push	{r4, lr}
   1348a:	4b03      	ldr	r3, [pc, #12]	; (13498 <_ZNSt9bad_allocD1Ev+0x10>)
   1348c:	6003      	str	r3, [r0, #0]
   1348e:	4604      	mov	r4, r0
   13490:	f000 f8be 	bl	13610 <_ZNSt9exceptionD1Ev>
   13494:	4620      	mov	r0, r4
   13496:	bd10      	pop	{r4, pc}
   13498:	00023a84 	.word	0x00023a84

0001349c <_ZNSt9bad_allocD0Ev>:
   1349c:	b510      	push	{r4, lr}
   1349e:	4b05      	ldr	r3, [pc, #20]	; (134b4 <_ZNSt9bad_allocD0Ev+0x18>)
   134a0:	6003      	str	r3, [r0, #0]
   134a2:	4604      	mov	r4, r0
   134a4:	f000 f8b4 	bl	13610 <_ZNSt9exceptionD1Ev>
   134a8:	4620      	mov	r0, r4
   134aa:	2104      	movs	r1, #4
   134ac:	f000 f804 	bl	134b8 <_ZdlPvj>
   134b0:	4620      	mov	r0, r4
   134b2:	bd10      	pop	{r4, pc}
   134b4:	00023a84 	.word	0x00023a84

000134b8 <_ZdlPvj>:
   134b8:	f000 bac0 	b.w	13a3c <_ZdlPv>

000134bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   134bc:	b4f0      	push	{r4, r5, r6, r7}
   134be:	4c1b      	ldr	r4, [pc, #108]	; (1352c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   134c0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   134c4:	6861      	ldr	r1, [r4, #4]
   134c6:	f1a0 0608 	sub.w	r6, r0, #8
   134ca:	b1c9      	cbz	r1, 13500 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   134cc:	19f5      	adds	r5, r6, r7
   134ce:	42a9      	cmp	r1, r5
   134d0:	d01b      	beq.n	1350a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   134d2:	684a      	ldr	r2, [r1, #4]
   134d4:	b32a      	cbz	r2, 13522 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   134d6:	4295      	cmp	r5, r2
   134d8:	d303      	bcc.n	134e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   134da:	e022      	b.n	13522 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   134dc:	429d      	cmp	r5, r3
   134de:	d205      	bcs.n	134ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   134e0:	461a      	mov	r2, r3
   134e2:	6853      	ldr	r3, [r2, #4]
   134e4:	1d0c      	adds	r4, r1, #4
   134e6:	4611      	mov	r1, r2
   134e8:	2b00      	cmp	r3, #0
   134ea:	d1f7      	bne.n	134dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   134ec:	6811      	ldr	r1, [r2, #0]
   134ee:	1855      	adds	r5, r2, r1
   134f0:	42ae      	cmp	r6, r5
   134f2:	d013      	beq.n	1351c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   134f4:	f840 3c04 	str.w	r3, [r0, #-4]
   134f8:	6823      	ldr	r3, [r4, #0]
   134fa:	605e      	str	r6, [r3, #4]
   134fc:	bcf0      	pop	{r4, r5, r6, r7}
   134fe:	4770      	bx	lr
   13500:	f840 1c04 	str.w	r1, [r0, #-4]
   13504:	6066      	str	r6, [r4, #4]
   13506:	bcf0      	pop	{r4, r5, r6, r7}
   13508:	4770      	bx	lr
   1350a:	680b      	ldr	r3, [r1, #0]
   1350c:	684a      	ldr	r2, [r1, #4]
   1350e:	f840 2c04 	str.w	r2, [r0, #-4]
   13512:	441f      	add	r7, r3
   13514:	f840 7c08 	str.w	r7, [r0, #-8]
   13518:	6066      	str	r6, [r4, #4]
   1351a:	e7ef      	b.n	134fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1351c:	440f      	add	r7, r1
   1351e:	6017      	str	r7, [r2, #0]
   13520:	e7ec      	b.n	134fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13522:	4613      	mov	r3, r2
   13524:	3404      	adds	r4, #4
   13526:	460a      	mov	r2, r1
   13528:	e7e0      	b.n	134ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   1352a:	bf00      	nop
   1352c:	20002270 	.word	0x20002270

00013530 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   13530:	b430      	push	{r4, r5}
   13532:	4c18      	ldr	r4, [pc, #96]	; (13594 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   13534:	f100 0108 	add.w	r1, r0, #8
   13538:	6863      	ldr	r3, [r4, #4]
   1353a:	2908      	cmp	r1, #8
   1353c:	bf38      	it	cc
   1353e:	2108      	movcc	r1, #8
   13540:	b313      	cbz	r3, 13588 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   13542:	3107      	adds	r1, #7
   13544:	681a      	ldr	r2, [r3, #0]
   13546:	f021 0107 	bic.w	r1, r1, #7
   1354a:	4291      	cmp	r1, r2
   1354c:	d804      	bhi.n	13558 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   1354e:	e01d      	b.n	1358c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   13550:	6802      	ldr	r2, [r0, #0]
   13552:	4291      	cmp	r1, r2
   13554:	d905      	bls.n	13562 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   13556:	4603      	mov	r3, r0
   13558:	6858      	ldr	r0, [r3, #4]
   1355a:	2800      	cmp	r0, #0
   1355c:	d1f8      	bne.n	13550 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   1355e:	bc30      	pop	{r4, r5}
   13560:	4770      	bx	lr
   13562:	3304      	adds	r3, #4
   13564:	1a52      	subs	r2, r2, r1
   13566:	2a07      	cmp	r2, #7
   13568:	d90a      	bls.n	13580 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   1356a:	1845      	adds	r5, r0, r1
   1356c:	6844      	ldr	r4, [r0, #4]
   1356e:	606c      	str	r4, [r5, #4]
   13570:	681c      	ldr	r4, [r3, #0]
   13572:	5042      	str	r2, [r0, r1]
   13574:	6021      	str	r1, [r4, #0]
   13576:	601d      	str	r5, [r3, #0]
   13578:	f104 0008 	add.w	r0, r4, #8
   1357c:	bc30      	pop	{r4, r5}
   1357e:	4770      	bx	lr
   13580:	6842      	ldr	r2, [r0, #4]
   13582:	601a      	str	r2, [r3, #0]
   13584:	4604      	mov	r4, r0
   13586:	e7f7      	b.n	13578 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   13588:	4618      	mov	r0, r3
   1358a:	e7e8      	b.n	1355e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   1358c:	4618      	mov	r0, r3
   1358e:	1d23      	adds	r3, r4, #4
   13590:	e7e8      	b.n	13564 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   13592:	bf00      	nop
   13594:	20002270 	.word	0x20002270

00013598 <__cxa_allocate_exception>:
   13598:	b538      	push	{r3, r4, r5, lr}
   1359a:	f100 0580 	add.w	r5, r0, #128	; 0x80
   1359e:	4628      	mov	r0, r5
   135a0:	f00a fb8e 	bl	1dcc0 <malloc>
   135a4:	4604      	mov	r4, r0
   135a6:	b138      	cbz	r0, 135b8 <__cxa_allocate_exception+0x20>
   135a8:	2280      	movs	r2, #128	; 0x80
   135aa:	2100      	movs	r1, #0
   135ac:	4620      	mov	r0, r4
   135ae:	f00a ffdd 	bl	1e56c <memset>
   135b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
   135b6:	bd38      	pop	{r3, r4, r5, pc}
   135b8:	4628      	mov	r0, r5
   135ba:	f7ff ffb9 	bl	13530 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   135be:	4604      	mov	r4, r0
   135c0:	2800      	cmp	r0, #0
   135c2:	d1f1      	bne.n	135a8 <__cxa_allocate_exception+0x10>
   135c4:	f000 f848 	bl	13658 <_ZSt9terminatev>

000135c8 <__cxa_free_exception>:
   135c8:	4a06      	ldr	r2, [pc, #24]	; (135e4 <__cxa_free_exception+0x1c>)
   135ca:	6893      	ldr	r3, [r2, #8]
   135cc:	3880      	subs	r0, #128	; 0x80
   135ce:	4298      	cmp	r0, r3
   135d0:	d905      	bls.n	135de <__cxa_free_exception+0x16>
   135d2:	68d2      	ldr	r2, [r2, #12]
   135d4:	4413      	add	r3, r2
   135d6:	4298      	cmp	r0, r3
   135d8:	d201      	bcs.n	135de <__cxa_free_exception+0x16>
   135da:	f7ff bf6f 	b.w	134bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   135de:	f00a bb77 	b.w	1dcd0 <free>
   135e2:	bf00      	nop
   135e4:	20002270 	.word	0x20002270

000135e8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   135e8:	b538      	push	{r3, r4, r5, lr}
   135ea:	4c08      	ldr	r4, [pc, #32]	; (1360c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   135ec:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   135f0:	4628      	mov	r0, r5
   135f2:	60e5      	str	r5, [r4, #12]
   135f4:	f00a fb64 	bl	1dcc0 <malloc>
   135f8:	60a0      	str	r0, [r4, #8]
   135fa:	b120      	cbz	r0, 13606 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   135fc:	2300      	movs	r3, #0
   135fe:	6060      	str	r0, [r4, #4]
   13600:	6005      	str	r5, [r0, #0]
   13602:	6043      	str	r3, [r0, #4]
   13604:	bd38      	pop	{r3, r4, r5, pc}
   13606:	60e0      	str	r0, [r4, #12]
   13608:	6060      	str	r0, [r4, #4]
   1360a:	bd38      	pop	{r3, r4, r5, pc}
   1360c:	20002270 	.word	0x20002270

00013610 <_ZNSt9exceptionD1Ev>:
   13610:	4770      	bx	lr
   13612:	bf00      	nop

00013614 <_ZNSt13bad_exceptionD1Ev>:
   13614:	4770      	bx	lr
   13616:	bf00      	nop

00013618 <_ZGTtNKSt13bad_exception4whatEv>:
   13618:	4800      	ldr	r0, [pc, #0]	; (1361c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   1361a:	4770      	bx	lr
   1361c:	00023a90 	.word	0x00023a90

00013620 <_ZNSt13bad_exceptionD0Ev>:
   13620:	b510      	push	{r4, lr}
   13622:	2104      	movs	r1, #4
   13624:	4604      	mov	r4, r0
   13626:	f7ff ff47 	bl	134b8 <_ZdlPvj>
   1362a:	4620      	mov	r0, r4
   1362c:	bd10      	pop	{r4, pc}
   1362e:	bf00      	nop

00013630 <_ZN10__cxxabiv111__terminateEPFvvE>:
   13630:	b508      	push	{r3, lr}
   13632:	4780      	blx	r0
   13634:	f00a f896 	bl	1d764 <abort>
   13638:	f000 fb6c 	bl	13d14 <__cxa_begin_catch>
   1363c:	f00a f892 	bl	1d764 <abort>
   13640:	460d      	mov	r5, r1
   13642:	4604      	mov	r4, r0
   13644:	f000 fba4 	bl	13d90 <__cxa_end_catch>
   13648:	3501      	adds	r5, #1
   1364a:	d001      	beq.n	13650 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   1364c:	f000 f9f8 	bl	13a40 <__cxa_end_cleanup>
   13650:	4620      	mov	r0, r4
   13652:	f000 faef 	bl	13c34 <__cxa_call_unexpected>
   13656:	bf00      	nop

00013658 <_ZSt9terminatev>:
   13658:	b508      	push	{r3, lr}
   1365a:	4b03      	ldr	r3, [pc, #12]	; (13668 <_ZSt9terminatev+0x10>)
   1365c:	6818      	ldr	r0, [r3, #0]
   1365e:	f3bf 8f5b 	dmb	ish
   13662:	f7ff ffe5 	bl	13630 <_ZN10__cxxabiv111__terminateEPFvvE>
   13666:	bf00      	nop
   13668:	200000f0 	.word	0x200000f0

0001366c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1366c:	b508      	push	{r3, lr}
   1366e:	4780      	blx	r0
   13670:	f7ff fff2 	bl	13658 <_ZSt9terminatev>

00013674 <_ZSt10unexpectedv>:
   13674:	b508      	push	{r3, lr}
   13676:	4b03      	ldr	r3, [pc, #12]	; (13684 <_ZSt10unexpectedv+0x10>)
   13678:	6818      	ldr	r0, [r3, #0]
   1367a:	f3bf 8f5b 	dmb	ish
   1367e:	f7ff fff5 	bl	1366c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13682:	bf00      	nop
   13684:	200000ec 	.word	0x200000ec

00013688 <_ZSt13get_terminatev>:
   13688:	4b02      	ldr	r3, [pc, #8]	; (13694 <_ZSt13get_terminatev+0xc>)
   1368a:	6818      	ldr	r0, [r3, #0]
   1368c:	f3bf 8f5b 	dmb	ish
   13690:	4770      	bx	lr
   13692:	bf00      	nop
   13694:	200000f0 	.word	0x200000f0

00013698 <_ZSt14get_unexpectedv>:
   13698:	4b02      	ldr	r3, [pc, #8]	; (136a4 <_ZSt14get_unexpectedv+0xc>)
   1369a:	6818      	ldr	r0, [r3, #0]
   1369c:	f3bf 8f5b 	dmb	ish
   136a0:	4770      	bx	lr
   136a2:	bf00      	nop
   136a4:	200000ec 	.word	0x200000ec

000136a8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   136a8:	2801      	cmp	r0, #1
   136aa:	b510      	push	{r4, lr}
   136ac:	d81a      	bhi.n	136e4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   136ae:	f3bf 8f5b 	dmb	ish
   136b2:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   136b6:	e853 2f00 	ldrex	r2, [r3]
   136ba:	3a01      	subs	r2, #1
   136bc:	e843 2000 	strex	r0, r2, [r3]
   136c0:	2800      	cmp	r0, #0
   136c2:	d1f8      	bne.n	136b6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   136c4:	f3bf 8f5b 	dmb	ish
   136c8:	b95a      	cbnz	r2, 136e2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   136ca:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   136ce:	f101 0458 	add.w	r4, r1, #88	; 0x58
   136d2:	b10b      	cbz	r3, 136d8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   136d4:	4620      	mov	r0, r4
   136d6:	4798      	blx	r3
   136d8:	4620      	mov	r0, r4
   136da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136de:	f7ff bf73 	b.w	135c8 <__cxa_free_exception>
   136e2:	bd10      	pop	{r4, pc}
   136e4:	f851 0c14 	ldr.w	r0, [r1, #-20]
   136e8:	f7ff ffa2 	bl	13630 <_ZN10__cxxabiv111__terminateEPFvvE>

000136ec <__cxa_throw>:
   136ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136ee:	4604      	mov	r4, r0
   136f0:	460f      	mov	r7, r1
   136f2:	4616      	mov	r6, r2
   136f4:	f000 fb96 	bl	13e24 <__cxa_get_globals>
   136f8:	6843      	ldr	r3, [r0, #4]
   136fa:	2501      	movs	r5, #1
   136fc:	442b      	add	r3, r5
   136fe:	6043      	str	r3, [r0, #4]
   13700:	f844 7c78 	str.w	r7, [r4, #-120]
   13704:	f844 6c74 	str.w	r6, [r4, #-116]
   13708:	f844 5c80 	str.w	r5, [r4, #-128]
   1370c:	f7ff ffc4 	bl	13698 <_ZSt14get_unexpectedv>
   13710:	f844 0c70 	str.w	r0, [r4, #-112]
   13714:	f7ff ffb8 	bl	13688 <_ZSt13get_terminatev>
   13718:	2347      	movs	r3, #71	; 0x47
   1371a:	2243      	movs	r2, #67	; 0x43
   1371c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   13720:	4910      	ldr	r1, [pc, #64]	; (13764 <__cxa_throw+0x78>)
   13722:	f804 3c58 	strb.w	r3, [r4, #-88]
   13726:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   1372a:	232b      	movs	r3, #43	; 0x2b
   1372c:	2755      	movs	r7, #85	; 0x55
   1372e:	2600      	movs	r6, #0
   13730:	f844 0c6c 	str.w	r0, [r4, #-108]
   13734:	f804 ec57 	strb.w	lr, [r4, #-87]
   13738:	f844 1c50 	str.w	r1, [r4, #-80]
   1373c:	f804 2c55 	strb.w	r2, [r4, #-85]
   13740:	f804 2c54 	strb.w	r2, [r4, #-84]
   13744:	f804 3c53 	strb.w	r3, [r4, #-83]
   13748:	f804 3c52 	strb.w	r3, [r4, #-82]
   1374c:	f804 7c56 	strb.w	r7, [r4, #-86]
   13750:	f804 6c51 	strb.w	r6, [r4, #-81]
   13754:	4628      	mov	r0, r5
   13756:	f009 fde9 	bl	1d32c <_Unwind_RaiseException>
   1375a:	4628      	mov	r0, r5
   1375c:	f000 fada 	bl	13d14 <__cxa_begin_catch>
   13760:	f7ff ff7a 	bl	13658 <_ZSt9terminatev>
   13764:	000136a9 	.word	0x000136a9

00013768 <__cxa_rethrow>:
   13768:	b510      	push	{r4, lr}
   1376a:	f000 fb5b 	bl	13e24 <__cxa_get_globals>
   1376e:	6842      	ldr	r2, [r0, #4]
   13770:	6804      	ldr	r4, [r0, #0]
   13772:	3201      	adds	r2, #1
   13774:	6042      	str	r2, [r0, #4]
   13776:	b164      	cbz	r4, 13792 <__cxa_rethrow+0x2a>
   13778:	f894 2020 	ldrb.w	r2, [r4, #32]
   1377c:	2a47      	cmp	r2, #71	; 0x47
   1377e:	d00a      	beq.n	13796 <__cxa_rethrow+0x2e>
   13780:	2200      	movs	r2, #0
   13782:	6002      	str	r2, [r0, #0]
   13784:	3420      	adds	r4, #32
   13786:	4620      	mov	r0, r4
   13788:	f009 fdf4 	bl	1d374 <_Unwind_Resume_or_Rethrow>
   1378c:	4620      	mov	r0, r4
   1378e:	f000 fac1 	bl	13d14 <__cxa_begin_catch>
   13792:	f7ff ff61 	bl	13658 <_ZSt9terminatev>
   13796:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1379a:	2a4e      	cmp	r2, #78	; 0x4e
   1379c:	d1f0      	bne.n	13780 <__cxa_rethrow+0x18>
   1379e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   137a2:	2a55      	cmp	r2, #85	; 0x55
   137a4:	d1ec      	bne.n	13780 <__cxa_rethrow+0x18>
   137a6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   137aa:	2a43      	cmp	r2, #67	; 0x43
   137ac:	d1e8      	bne.n	13780 <__cxa_rethrow+0x18>
   137ae:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   137b2:	2a43      	cmp	r2, #67	; 0x43
   137b4:	d1e4      	bne.n	13780 <__cxa_rethrow+0x18>
   137b6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   137ba:	2a2b      	cmp	r2, #43	; 0x2b
   137bc:	d1e0      	bne.n	13780 <__cxa_rethrow+0x18>
   137be:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   137c2:	2a2b      	cmp	r2, #43	; 0x2b
   137c4:	d1dc      	bne.n	13780 <__cxa_rethrow+0x18>
   137c6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   137ca:	2a01      	cmp	r2, #1
   137cc:	d8d8      	bhi.n	13780 <__cxa_rethrow+0x18>
   137ce:	6962      	ldr	r2, [r4, #20]
   137d0:	4252      	negs	r2, r2
   137d2:	6162      	str	r2, [r4, #20]
   137d4:	e7d6      	b.n	13784 <__cxa_rethrow+0x1c>
   137d6:	bf00      	nop

000137d8 <_ZSt15get_new_handlerv>:
   137d8:	4b02      	ldr	r3, [pc, #8]	; (137e4 <_ZSt15get_new_handlerv+0xc>)
   137da:	6818      	ldr	r0, [r3, #0]
   137dc:	f3bf 8f5b 	dmb	ish
   137e0:	4770      	bx	lr
   137e2:	bf00      	nop
   137e4:	20002280 	.word	0x20002280

000137e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   137e8:	b510      	push	{r4, lr}
   137ea:	4b03      	ldr	r3, [pc, #12]	; (137f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   137ec:	6003      	str	r3, [r0, #0]
   137ee:	4604      	mov	r4, r0
   137f0:	f000 f8ca 	bl	13988 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   137f4:	4620      	mov	r0, r4
   137f6:	bd10      	pop	{r4, pc}
   137f8:	00023b80 	.word	0x00023b80

000137fc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   137fc:	b510      	push	{r4, lr}
   137fe:	4b05      	ldr	r3, [pc, #20]	; (13814 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   13800:	6003      	str	r3, [r0, #0]
   13802:	4604      	mov	r4, r0
   13804:	f000 f8c0 	bl	13988 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13808:	4620      	mov	r0, r4
   1380a:	210c      	movs	r1, #12
   1380c:	f7ff fe54 	bl	134b8 <_ZdlPvj>
   13810:	4620      	mov	r0, r4
   13812:	bd10      	pop	{r4, pc}
   13814:	00023b80 	.word	0x00023b80

00013818 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13818:	b570      	push	{r4, r5, r6, lr}
   1381a:	b082      	sub	sp, #8
   1381c:	460d      	mov	r5, r1
   1381e:	9c06      	ldr	r4, [sp, #24]
   13820:	4294      	cmp	r4, r2
   13822:	4606      	mov	r6, r0
   13824:	d009      	beq.n	1383a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   13826:	68b0      	ldr	r0, [r6, #8]
   13828:	6806      	ldr	r6, [r0, #0]
   1382a:	9406      	str	r4, [sp, #24]
   1382c:	6a34      	ldr	r4, [r6, #32]
   1382e:	4629      	mov	r1, r5
   13830:	46a4      	mov	ip, r4
   13832:	b002      	add	sp, #8
   13834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13838:	4760      	bx	ip
   1383a:	4619      	mov	r1, r3
   1383c:	9201      	str	r2, [sp, #4]
   1383e:	9300      	str	r3, [sp, #0]
   13840:	f000 f86a 	bl	13918 <_ZNKSt9type_infoeqERKS_>
   13844:	9b00      	ldr	r3, [sp, #0]
   13846:	9a01      	ldr	r2, [sp, #4]
   13848:	2800      	cmp	r0, #0
   1384a:	d0ec      	beq.n	13826 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   1384c:	2006      	movs	r0, #6
   1384e:	b002      	add	sp, #8
   13850:	bd70      	pop	{r4, r5, r6, pc}
   13852:	bf00      	nop

00013854 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   13854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13858:	b081      	sub	sp, #4
   1385a:	460e      	mov	r6, r1
   1385c:	4619      	mov	r1, r3
   1385e:	461f      	mov	r7, r3
   13860:	4691      	mov	r9, r2
   13862:	4683      	mov	fp, r0
   13864:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13866:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1386a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1386e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13870:	f000 f852 	bl	13918 <_ZNKSt9type_infoeqERKS_>
   13874:	b170      	cbz	r0, 13894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   13876:	2e00      	cmp	r6, #0
   13878:	602c      	str	r4, [r5, #0]
   1387a:	f885 9004 	strb.w	r9, [r5, #4]
   1387e:	db1f      	blt.n	138c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13880:	4434      	add	r4, r6
   13882:	45a0      	cmp	r8, r4
   13884:	bf0c      	ite	eq
   13886:	2406      	moveq	r4, #6
   13888:	2401      	movne	r4, #1
   1388a:	71ac      	strb	r4, [r5, #6]
   1388c:	2000      	movs	r0, #0
   1388e:	b001      	add	sp, #4
   13890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13894:	4544      	cmp	r4, r8
   13896:	d018      	beq.n	138ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13898:	f8db 0008 	ldr.w	r0, [fp, #8]
   1389c:	f8d0 e000 	ldr.w	lr, [r0]
   138a0:	950d      	str	r5, [sp, #52]	; 0x34
   138a2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   138a6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   138aa:	940a      	str	r4, [sp, #40]	; 0x28
   138ac:	f8de 401c 	ldr.w	r4, [lr, #28]
   138b0:	463b      	mov	r3, r7
   138b2:	464a      	mov	r2, r9
   138b4:	4631      	mov	r1, r6
   138b6:	46a4      	mov	ip, r4
   138b8:	b001      	add	sp, #4
   138ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138be:	4760      	bx	ip
   138c0:	3602      	adds	r6, #2
   138c2:	d1e3      	bne.n	1388c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   138c4:	2301      	movs	r3, #1
   138c6:	71ab      	strb	r3, [r5, #6]
   138c8:	e7e0      	b.n	1388c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   138ca:	4651      	mov	r1, sl
   138cc:	4658      	mov	r0, fp
   138ce:	f000 f823 	bl	13918 <_ZNKSt9type_infoeqERKS_>
   138d2:	2800      	cmp	r0, #0
   138d4:	d0e0      	beq.n	13898 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   138d6:	2000      	movs	r0, #0
   138d8:	f885 9005 	strb.w	r9, [r5, #5]
   138dc:	b001      	add	sp, #4
   138de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138e2:	bf00      	nop

000138e4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   138e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138e8:	4607      	mov	r7, r0
   138ea:	460c      	mov	r4, r1
   138ec:	4615      	mov	r5, r2
   138ee:	461e      	mov	r6, r3
   138f0:	f000 f862 	bl	139b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   138f4:	b108      	cbz	r0, 138fa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   138f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138fa:	68b8      	ldr	r0, [r7, #8]
   138fc:	6807      	ldr	r7, [r0, #0]
   138fe:	4621      	mov	r1, r4
   13900:	69bc      	ldr	r4, [r7, #24]
   13902:	4633      	mov	r3, r6
   13904:	462a      	mov	r2, r5
   13906:	46a4      	mov	ip, r4
   13908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1390c:	4760      	bx	ip
   1390e:	bf00      	nop

00013910 <_ZNSt9type_infoD1Ev>:
   13910:	4770      	bx	lr
   13912:	bf00      	nop

00013914 <_ZNKSt9type_info14__is_pointer_pEv>:
   13914:	2000      	movs	r0, #0
   13916:	4770      	bx	lr

00013918 <_ZNKSt9type_infoeqERKS_>:
   13918:	4281      	cmp	r1, r0
   1391a:	d011      	beq.n	13940 <_ZNKSt9type_infoeqERKS_+0x28>
   1391c:	b508      	push	{r3, lr}
   1391e:	6840      	ldr	r0, [r0, #4]
   13920:	7803      	ldrb	r3, [r0, #0]
   13922:	2b2a      	cmp	r3, #42	; 0x2a
   13924:	d00a      	beq.n	1393c <_ZNKSt9type_infoeqERKS_+0x24>
   13926:	6849      	ldr	r1, [r1, #4]
   13928:	780b      	ldrb	r3, [r1, #0]
   1392a:	2b2a      	cmp	r3, #42	; 0x2a
   1392c:	bf08      	it	eq
   1392e:	3101      	addeq	r1, #1
   13930:	f00b f8ea 	bl	1eb08 <strcmp>
   13934:	fab0 f080 	clz	r0, r0
   13938:	0940      	lsrs	r0, r0, #5
   1393a:	bd08      	pop	{r3, pc}
   1393c:	2000      	movs	r0, #0
   1393e:	bd08      	pop	{r3, pc}
   13940:	2001      	movs	r0, #1
   13942:	4770      	bx	lr

00013944 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   13944:	b570      	push	{r4, r5, r6, lr}
   13946:	6803      	ldr	r3, [r0, #0]
   13948:	b084      	sub	sp, #16
   1394a:	2400      	movs	r4, #0
   1394c:	699e      	ldr	r6, [r3, #24]
   1394e:	9400      	str	r4, [sp, #0]
   13950:	2310      	movs	r3, #16
   13952:	4615      	mov	r5, r2
   13954:	9302      	str	r3, [sp, #8]
   13956:	6812      	ldr	r2, [r2, #0]
   13958:	f88d 4004 	strb.w	r4, [sp, #4]
   1395c:	466b      	mov	r3, sp
   1395e:	9403      	str	r4, [sp, #12]
   13960:	47b0      	blx	r6
   13962:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13966:	f003 0306 	and.w	r3, r3, #6
   1396a:	2b06      	cmp	r3, #6
   1396c:	bf03      	ittte	eq
   1396e:	9b00      	ldreq	r3, [sp, #0]
   13970:	602b      	streq	r3, [r5, #0]
   13972:	2001      	moveq	r0, #1
   13974:	4620      	movne	r0, r4
   13976:	b004      	add	sp, #16
   13978:	bd70      	pop	{r4, r5, r6, pc}
   1397a:	bf00      	nop

0001397c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1397c:	9800      	ldr	r0, [sp, #0]
   1397e:	4290      	cmp	r0, r2
   13980:	bf0c      	ite	eq
   13982:	2006      	moveq	r0, #6
   13984:	2001      	movne	r0, #1
   13986:	4770      	bx	lr

00013988 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13988:	b510      	push	{r4, lr}
   1398a:	4b03      	ldr	r3, [pc, #12]	; (13998 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1398c:	6003      	str	r3, [r0, #0]
   1398e:	4604      	mov	r4, r0
   13990:	f7ff ffbe 	bl	13910 <_ZNSt9type_infoD1Ev>
   13994:	4620      	mov	r0, r4
   13996:	bd10      	pop	{r4, pc}
   13998:	00023bf4 	.word	0x00023bf4

0001399c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1399c:	b510      	push	{r4, lr}
   1399e:	4b05      	ldr	r3, [pc, #20]	; (139b4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   139a0:	6003      	str	r3, [r0, #0]
   139a2:	4604      	mov	r4, r0
   139a4:	f7ff ffb4 	bl	13910 <_ZNSt9type_infoD1Ev>
   139a8:	4620      	mov	r0, r4
   139aa:	2108      	movs	r1, #8
   139ac:	f7ff fd84 	bl	134b8 <_ZdlPvj>
   139b0:	4620      	mov	r0, r4
   139b2:	bd10      	pop	{r4, pc}
   139b4:	00023bf4 	.word	0x00023bf4

000139b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   139b8:	b538      	push	{r3, r4, r5, lr}
   139ba:	4615      	mov	r5, r2
   139bc:	461c      	mov	r4, r3
   139be:	f7ff ffab 	bl	13918 <_ZNKSt9type_infoeqERKS_>
   139c2:	b120      	cbz	r0, 139ce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   139c4:	2208      	movs	r2, #8
   139c6:	2306      	movs	r3, #6
   139c8:	6025      	str	r5, [r4, #0]
   139ca:	60e2      	str	r2, [r4, #12]
   139cc:	7123      	strb	r3, [r4, #4]
   139ce:	bd38      	pop	{r3, r4, r5, pc}

000139d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   139d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139d4:	4617      	mov	r7, r2
   139d6:	461c      	mov	r4, r3
   139d8:	4606      	mov	r6, r0
   139da:	460d      	mov	r5, r1
   139dc:	f7ff ff9c 	bl	13918 <_ZNKSt9type_infoeqERKS_>
   139e0:	b908      	cbnz	r0, 139e6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   139e2:	2c03      	cmp	r4, #3
   139e4:	d901      	bls.n	139ea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   139e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   139ea:	682b      	ldr	r3, [r5, #0]
   139ec:	463a      	mov	r2, r7
   139ee:	4631      	mov	r1, r6
   139f0:	4628      	mov	r0, r5
   139f2:	695b      	ldr	r3, [r3, #20]
   139f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   139f8:	4718      	bx	r3
   139fa:	bf00      	nop

000139fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   139fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   139fe:	b083      	sub	sp, #12
   13a00:	4617      	mov	r7, r2
   13a02:	9d08      	ldr	r5, [sp, #32]
   13a04:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13a08:	428d      	cmp	r5, r1
   13a0a:	4606      	mov	r6, r0
   13a0c:	d00b      	beq.n	13a26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   13a0e:	4619      	mov	r1, r3
   13a10:	4630      	mov	r0, r6
   13a12:	f7ff ff81 	bl	13918 <_ZNKSt9type_infoeqERKS_>
   13a16:	b118      	cbz	r0, 13a20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   13a18:	2301      	movs	r3, #1
   13a1a:	6025      	str	r5, [r4, #0]
   13a1c:	7127      	strb	r7, [r4, #4]
   13a1e:	71a3      	strb	r3, [r4, #6]
   13a20:	2000      	movs	r0, #0
   13a22:	b003      	add	sp, #12
   13a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a26:	9909      	ldr	r1, [sp, #36]	; 0x24
   13a28:	9301      	str	r3, [sp, #4]
   13a2a:	f7ff ff75 	bl	13918 <_ZNKSt9type_infoeqERKS_>
   13a2e:	b118      	cbz	r0, 13a38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   13a30:	2000      	movs	r0, #0
   13a32:	7167      	strb	r7, [r4, #5]
   13a34:	b003      	add	sp, #12
   13a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a38:	9b01      	ldr	r3, [sp, #4]
   13a3a:	e7e8      	b.n	13a0e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

00013a3c <_ZdlPv>:
   13a3c:	f00a b948 	b.w	1dcd0 <free>

00013a40 <__cxa_end_cleanup>:
   13a40:	b41e      	push	{r1, r2, r3, r4}
   13a42:	f000 f891 	bl	13b68 <__gnu_end_cleanup>
   13a46:	bc1e      	pop	{r1, r2, r3, r4}
   13a48:	f009 fc82 	bl	1d350 <_Unwind_Resume>

00013a4c <__cxa_type_match>:
   13a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a4e:	7802      	ldrb	r2, [r0, #0]
   13a50:	2a47      	cmp	r2, #71	; 0x47
   13a52:	b083      	sub	sp, #12
   13a54:	460d      	mov	r5, r1
   13a56:	461f      	mov	r7, r3
   13a58:	d01e      	beq.n	13a98 <__cxa_type_match+0x4c>
   13a5a:	2300      	movs	r3, #0
   13a5c:	4c27      	ldr	r4, [pc, #156]	; (13afc <__cxa_type_match+0xb0>)
   13a5e:	9301      	str	r3, [sp, #4]
   13a60:	6823      	ldr	r3, [r4, #0]
   13a62:	4620      	mov	r0, r4
   13a64:	689b      	ldr	r3, [r3, #8]
   13a66:	4798      	blx	r3
   13a68:	b180      	cbz	r0, 13a8c <__cxa_type_match+0x40>
   13a6a:	9b01      	ldr	r3, [sp, #4]
   13a6c:	681b      	ldr	r3, [r3, #0]
   13a6e:	9301      	str	r3, [sp, #4]
   13a70:	2602      	movs	r6, #2
   13a72:	682b      	ldr	r3, [r5, #0]
   13a74:	4621      	mov	r1, r4
   13a76:	4628      	mov	r0, r5
   13a78:	691c      	ldr	r4, [r3, #16]
   13a7a:	aa01      	add	r2, sp, #4
   13a7c:	2301      	movs	r3, #1
   13a7e:	47a0      	blx	r4
   13a80:	b130      	cbz	r0, 13a90 <__cxa_type_match+0x44>
   13a82:	9b01      	ldr	r3, [sp, #4]
   13a84:	603b      	str	r3, [r7, #0]
   13a86:	4630      	mov	r0, r6
   13a88:	b003      	add	sp, #12
   13a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a8c:	2601      	movs	r6, #1
   13a8e:	e7f0      	b.n	13a72 <__cxa_type_match+0x26>
   13a90:	4606      	mov	r6, r0
   13a92:	4630      	mov	r0, r6
   13a94:	b003      	add	sp, #12
   13a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a98:	7843      	ldrb	r3, [r0, #1]
   13a9a:	2b4e      	cmp	r3, #78	; 0x4e
   13a9c:	d1dd      	bne.n	13a5a <__cxa_type_match+0xe>
   13a9e:	7883      	ldrb	r3, [r0, #2]
   13aa0:	2b55      	cmp	r3, #85	; 0x55
   13aa2:	d1da      	bne.n	13a5a <__cxa_type_match+0xe>
   13aa4:	78c3      	ldrb	r3, [r0, #3]
   13aa6:	2b43      	cmp	r3, #67	; 0x43
   13aa8:	d019      	beq.n	13ade <__cxa_type_match+0x92>
   13aaa:	78c3      	ldrb	r3, [r0, #3]
   13aac:	2b43      	cmp	r3, #67	; 0x43
   13aae:	d1d4      	bne.n	13a5a <__cxa_type_match+0xe>
   13ab0:	7903      	ldrb	r3, [r0, #4]
   13ab2:	2b43      	cmp	r3, #67	; 0x43
   13ab4:	d1d1      	bne.n	13a5a <__cxa_type_match+0xe>
   13ab6:	7943      	ldrb	r3, [r0, #5]
   13ab8:	2b2b      	cmp	r3, #43	; 0x2b
   13aba:	d1ce      	bne.n	13a5a <__cxa_type_match+0xe>
   13abc:	7983      	ldrb	r3, [r0, #6]
   13abe:	2b2b      	cmp	r3, #43	; 0x2b
   13ac0:	d1cb      	bne.n	13a5a <__cxa_type_match+0xe>
   13ac2:	79c3      	ldrb	r3, [r0, #7]
   13ac4:	2b01      	cmp	r3, #1
   13ac6:	d8c8      	bhi.n	13a5a <__cxa_type_match+0xe>
   13ac8:	d004      	beq.n	13ad4 <__cxa_type_match+0x88>
   13aca:	f850 4c20 	ldr.w	r4, [r0, #-32]
   13ace:	3058      	adds	r0, #88	; 0x58
   13ad0:	9001      	str	r0, [sp, #4]
   13ad2:	e7c5      	b.n	13a60 <__cxa_type_match+0x14>
   13ad4:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13ad8:	f850 4c78 	ldr.w	r4, [r0, #-120]
   13adc:	e7f8      	b.n	13ad0 <__cxa_type_match+0x84>
   13ade:	7903      	ldrb	r3, [r0, #4]
   13ae0:	2b46      	cmp	r3, #70	; 0x46
   13ae2:	d1e2      	bne.n	13aaa <__cxa_type_match+0x5e>
   13ae4:	7943      	ldrb	r3, [r0, #5]
   13ae6:	2b4f      	cmp	r3, #79	; 0x4f
   13ae8:	d1df      	bne.n	13aaa <__cxa_type_match+0x5e>
   13aea:	7983      	ldrb	r3, [r0, #6]
   13aec:	2b52      	cmp	r3, #82	; 0x52
   13aee:	d1dc      	bne.n	13aaa <__cxa_type_match+0x5e>
   13af0:	79c3      	ldrb	r3, [r0, #7]
   13af2:	2b00      	cmp	r3, #0
   13af4:	d1d9      	bne.n	13aaa <__cxa_type_match+0x5e>
   13af6:	9301      	str	r3, [sp, #4]
   13af8:	4c01      	ldr	r4, [pc, #4]	; (13b00 <__cxa_type_match+0xb4>)
   13afa:	e7b1      	b.n	13a60 <__cxa_type_match+0x14>
   13afc:	00023aac 	.word	0x00023aac
   13b00:	00023aa4 	.word	0x00023aa4

00013b04 <__cxa_begin_cleanup>:
   13b04:	b510      	push	{r4, lr}
   13b06:	4604      	mov	r4, r0
   13b08:	f000 f98c 	bl	13e24 <__cxa_get_globals>
   13b0c:	7823      	ldrb	r3, [r4, #0]
   13b0e:	2b47      	cmp	r3, #71	; 0x47
   13b10:	f1a4 0220 	sub.w	r2, r4, #32
   13b14:	d004      	beq.n	13b20 <__cxa_begin_cleanup+0x1c>
   13b16:	6883      	ldr	r3, [r0, #8]
   13b18:	bb23      	cbnz	r3, 13b64 <__cxa_begin_cleanup+0x60>
   13b1a:	6082      	str	r2, [r0, #8]
   13b1c:	2001      	movs	r0, #1
   13b1e:	bd10      	pop	{r4, pc}
   13b20:	7863      	ldrb	r3, [r4, #1]
   13b22:	2b4e      	cmp	r3, #78	; 0x4e
   13b24:	d1f7      	bne.n	13b16 <__cxa_begin_cleanup+0x12>
   13b26:	78a3      	ldrb	r3, [r4, #2]
   13b28:	2b55      	cmp	r3, #85	; 0x55
   13b2a:	d1f4      	bne.n	13b16 <__cxa_begin_cleanup+0x12>
   13b2c:	78e3      	ldrb	r3, [r4, #3]
   13b2e:	2b43      	cmp	r3, #67	; 0x43
   13b30:	d1f1      	bne.n	13b16 <__cxa_begin_cleanup+0x12>
   13b32:	7923      	ldrb	r3, [r4, #4]
   13b34:	2b43      	cmp	r3, #67	; 0x43
   13b36:	d1ee      	bne.n	13b16 <__cxa_begin_cleanup+0x12>
   13b38:	7963      	ldrb	r3, [r4, #5]
   13b3a:	2b2b      	cmp	r3, #43	; 0x2b
   13b3c:	d1eb      	bne.n	13b16 <__cxa_begin_cleanup+0x12>
   13b3e:	79a3      	ldrb	r3, [r4, #6]
   13b40:	2b2b      	cmp	r3, #43	; 0x2b
   13b42:	d1e8      	bne.n	13b16 <__cxa_begin_cleanup+0x12>
   13b44:	79e3      	ldrb	r3, [r4, #7]
   13b46:	2b01      	cmp	r3, #1
   13b48:	d8e5      	bhi.n	13b16 <__cxa_begin_cleanup+0x12>
   13b4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13b4e:	3301      	adds	r3, #1
   13b50:	2b01      	cmp	r3, #1
   13b52:	f844 3c04 	str.w	r3, [r4, #-4]
   13b56:	d1e1      	bne.n	13b1c <__cxa_begin_cleanup+0x18>
   13b58:	6883      	ldr	r3, [r0, #8]
   13b5a:	f844 3c08 	str.w	r3, [r4, #-8]
   13b5e:	6082      	str	r2, [r0, #8]
   13b60:	2001      	movs	r0, #1
   13b62:	bd10      	pop	{r4, pc}
   13b64:	f7ff fd78 	bl	13658 <_ZSt9terminatev>

00013b68 <__gnu_end_cleanup>:
   13b68:	b508      	push	{r3, lr}
   13b6a:	f000 f95b 	bl	13e24 <__cxa_get_globals>
   13b6e:	6883      	ldr	r3, [r0, #8]
   13b70:	b383      	cbz	r3, 13bd4 <__gnu_end_cleanup+0x6c>
   13b72:	f893 2020 	ldrb.w	r2, [r3, #32]
   13b76:	2a47      	cmp	r2, #71	; 0x47
   13b78:	d004      	beq.n	13b84 <__gnu_end_cleanup+0x1c>
   13b7a:	2200      	movs	r2, #0
   13b7c:	6082      	str	r2, [r0, #8]
   13b7e:	f103 0020 	add.w	r0, r3, #32
   13b82:	bd08      	pop	{r3, pc}
   13b84:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13b88:	2a4e      	cmp	r2, #78	; 0x4e
   13b8a:	d1f6      	bne.n	13b7a <__gnu_end_cleanup+0x12>
   13b8c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13b90:	2a55      	cmp	r2, #85	; 0x55
   13b92:	d1f2      	bne.n	13b7a <__gnu_end_cleanup+0x12>
   13b94:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13b98:	2a43      	cmp	r2, #67	; 0x43
   13b9a:	d1ee      	bne.n	13b7a <__gnu_end_cleanup+0x12>
   13b9c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13ba0:	2a43      	cmp	r2, #67	; 0x43
   13ba2:	d1ea      	bne.n	13b7a <__gnu_end_cleanup+0x12>
   13ba4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13ba8:	2a2b      	cmp	r2, #43	; 0x2b
   13baa:	d1e6      	bne.n	13b7a <__gnu_end_cleanup+0x12>
   13bac:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13bb0:	2a2b      	cmp	r2, #43	; 0x2b
   13bb2:	d1e2      	bne.n	13b7a <__gnu_end_cleanup+0x12>
   13bb4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13bb8:	2a01      	cmp	r2, #1
   13bba:	d8de      	bhi.n	13b7a <__gnu_end_cleanup+0x12>
   13bbc:	69da      	ldr	r2, [r3, #28]
   13bbe:	3a01      	subs	r2, #1
   13bc0:	61da      	str	r2, [r3, #28]
   13bc2:	2a00      	cmp	r2, #0
   13bc4:	d1db      	bne.n	13b7e <__gnu_end_cleanup+0x16>
   13bc6:	699a      	ldr	r2, [r3, #24]
   13bc8:	6082      	str	r2, [r0, #8]
   13bca:	2200      	movs	r2, #0
   13bcc:	619a      	str	r2, [r3, #24]
   13bce:	f103 0020 	add.w	r0, r3, #32
   13bd2:	bd08      	pop	{r3, pc}
   13bd4:	f7ff fd40 	bl	13658 <_ZSt9terminatev>

00013bd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13bd8:	7803      	ldrb	r3, [r0, #0]
   13bda:	2b47      	cmp	r3, #71	; 0x47
   13bdc:	d001      	beq.n	13be2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13bde:	2000      	movs	r0, #0
   13be0:	4770      	bx	lr
   13be2:	7843      	ldrb	r3, [r0, #1]
   13be4:	2b4e      	cmp	r3, #78	; 0x4e
   13be6:	d1fa      	bne.n	13bde <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13be8:	7883      	ldrb	r3, [r0, #2]
   13bea:	2b55      	cmp	r3, #85	; 0x55
   13bec:	d1f7      	bne.n	13bde <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13bee:	78c3      	ldrb	r3, [r0, #3]
   13bf0:	2b43      	cmp	r3, #67	; 0x43
   13bf2:	d1f4      	bne.n	13bde <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13bf4:	7903      	ldrb	r3, [r0, #4]
   13bf6:	2b43      	cmp	r3, #67	; 0x43
   13bf8:	d1f1      	bne.n	13bde <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13bfa:	7943      	ldrb	r3, [r0, #5]
   13bfc:	2b2b      	cmp	r3, #43	; 0x2b
   13bfe:	d1ee      	bne.n	13bde <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13c00:	7983      	ldrb	r3, [r0, #6]
   13c02:	2b2b      	cmp	r3, #43	; 0x2b
   13c04:	d1eb      	bne.n	13bde <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13c06:	79c0      	ldrb	r0, [r0, #7]
   13c08:	2801      	cmp	r0, #1
   13c0a:	bf8c      	ite	hi
   13c0c:	2000      	movhi	r0, #0
   13c0e:	2001      	movls	r0, #1
   13c10:	4770      	bx	lr
   13c12:	bf00      	nop

00013c14 <__cxa_call_terminate>:
   13c14:	b510      	push	{r4, lr}
   13c16:	b130      	cbz	r0, 13c26 <__cxa_call_terminate+0x12>
   13c18:	4604      	mov	r4, r0
   13c1a:	f000 f87b 	bl	13d14 <__cxa_begin_catch>
   13c1e:	4620      	mov	r0, r4
   13c20:	f7ff ffda 	bl	13bd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13c24:	b908      	cbnz	r0, 13c2a <__cxa_call_terminate+0x16>
   13c26:	f7ff fd17 	bl	13658 <_ZSt9terminatev>
   13c2a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13c2e:	f7ff fcff 	bl	13630 <_ZN10__cxxabiv111__terminateEPFvvE>
   13c32:	bf00      	nop

00013c34 <__cxa_call_unexpected>:
   13c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c38:	b085      	sub	sp, #20
   13c3a:	4602      	mov	r2, r0
   13c3c:	f7ff ffcc 	bl	13bd8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13c40:	b160      	cbz	r0, 13c5c <__cxa_call_unexpected+0x28>
   13c42:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13c46:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13c4a:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13c4c:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13c4e:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13c50:	4610      	mov	r0, r2
   13c52:	f000 f85f 	bl	13d14 <__cxa_begin_catch>
   13c56:	4640      	mov	r0, r8
   13c58:	f7ff fd08 	bl	1366c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13c5c:	4610      	mov	r0, r2
   13c5e:	f000 f859 	bl	13d14 <__cxa_begin_catch>
   13c62:	f7ff fd07 	bl	13674 <_ZSt10unexpectedv>
   13c66:	f000 f855 	bl	13d14 <__cxa_begin_catch>
   13c6a:	f7ff fcf5 	bl	13658 <_ZSt9terminatev>
   13c6e:	f000 f851 	bl	13d14 <__cxa_begin_catch>
   13c72:	f000 f8d3 	bl	13e1c <__cxa_get_globals_fast>
   13c76:	6803      	ldr	r3, [r0, #0]
   13c78:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13c7c:	2a01      	cmp	r2, #1
   13c7e:	d036      	beq.n	13cee <__cxa_call_unexpected+0xba>
   13c80:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13c84:	f10d 0a10 	add.w	sl, sp, #16
   13c88:	f04f 0800 	mov.w	r8, #0
   13c8c:	3320      	adds	r3, #32
   13c8e:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13c92:	f027 0b03 	bic.w	fp, r7, #3
   13c96:	9301      	str	r3, [sp, #4]
   13c98:	46c1      	mov	r9, r8
   13c9a:	45b1      	cmp	r9, r6
   13c9c:	da1b      	bge.n	13cd6 <__cxa_call_unexpected+0xa2>
   13c9e:	6827      	ldr	r7, [r4, #0]
   13ca0:	b107      	cbz	r7, 13ca4 <__cxa_call_unexpected+0x70>
   13ca2:	4427      	add	r7, r4
   13ca4:	4653      	mov	r3, sl
   13ca6:	2200      	movs	r2, #0
   13ca8:	4639      	mov	r1, r7
   13caa:	9801      	ldr	r0, [sp, #4]
   13cac:	f7ff fece 	bl	13a4c <__cxa_type_match>
   13cb0:	bb10      	cbnz	r0, 13cf8 <__cxa_call_unexpected+0xc4>
   13cb2:	683b      	ldr	r3, [r7, #0]
   13cb4:	4914      	ldr	r1, [pc, #80]	; (13d08 <__cxa_call_unexpected+0xd4>)
   13cb6:	691b      	ldr	r3, [r3, #16]
   13cb8:	9300      	str	r3, [sp, #0]
   13cba:	aa04      	add	r2, sp, #16
   13cbc:	2301      	movs	r3, #1
   13cbe:	f842 0d04 	str.w	r0, [r2, #-4]!
   13cc2:	4638      	mov	r0, r7
   13cc4:	9f00      	ldr	r7, [sp, #0]
   13cc6:	47b8      	blx	r7
   13cc8:	2800      	cmp	r0, #0
   13cca:	bf18      	it	ne
   13ccc:	4680      	movne	r8, r0
   13cce:	f109 0901 	add.w	r9, r9, #1
   13cd2:	445c      	add	r4, fp
   13cd4:	e7e1      	b.n	13c9a <__cxa_call_unexpected+0x66>
   13cd6:	f1b8 0f00 	cmp.w	r8, #0
   13cda:	d00a      	beq.n	13cf2 <__cxa_call_unexpected+0xbe>
   13cdc:	2004      	movs	r0, #4
   13cde:	f7ff fc5b 	bl	13598 <__cxa_allocate_exception>
   13ce2:	4b0a      	ldr	r3, [pc, #40]	; (13d0c <__cxa_call_unexpected+0xd8>)
   13ce4:	6003      	str	r3, [r0, #0]
   13ce6:	4a0a      	ldr	r2, [pc, #40]	; (13d10 <__cxa_call_unexpected+0xdc>)
   13ce8:	4907      	ldr	r1, [pc, #28]	; (13d08 <__cxa_call_unexpected+0xd4>)
   13cea:	f7ff fcff 	bl	136ec <__cxa_throw>
   13cee:	681a      	ldr	r2, [r3, #0]
   13cf0:	e7c8      	b.n	13c84 <__cxa_call_unexpected+0x50>
   13cf2:	4628      	mov	r0, r5
   13cf4:	f7ff fc9c 	bl	13630 <_ZN10__cxxabiv111__terminateEPFvvE>
   13cf8:	f7ff fd36 	bl	13768 <__cxa_rethrow>
   13cfc:	f000 f848 	bl	13d90 <__cxa_end_catch>
   13d00:	f000 f846 	bl	13d90 <__cxa_end_catch>
   13d04:	f7ff fe9c 	bl	13a40 <__cxa_end_cleanup>
   13d08:	00023ab4 	.word	0x00023ab4
   13d0c:	00023b38 	.word	0x00023b38
   13d10:	00013615 	.word	0x00013615

00013d14 <__cxa_begin_catch>:
   13d14:	b538      	push	{r3, r4, r5, lr}
   13d16:	4604      	mov	r4, r0
   13d18:	f000 f884 	bl	13e24 <__cxa_get_globals>
   13d1c:	7822      	ldrb	r2, [r4, #0]
   13d1e:	6803      	ldr	r3, [r0, #0]
   13d20:	2a47      	cmp	r2, #71	; 0x47
   13d22:	f1a4 0120 	sub.w	r1, r4, #32
   13d26:	d004      	beq.n	13d32 <__cxa_begin_catch+0x1e>
   13d28:	bb83      	cbnz	r3, 13d8c <__cxa_begin_catch+0x78>
   13d2a:	461c      	mov	r4, r3
   13d2c:	6001      	str	r1, [r0, #0]
   13d2e:	4620      	mov	r0, r4
   13d30:	bd38      	pop	{r3, r4, r5, pc}
   13d32:	7862      	ldrb	r2, [r4, #1]
   13d34:	2a4e      	cmp	r2, #78	; 0x4e
   13d36:	d1f7      	bne.n	13d28 <__cxa_begin_catch+0x14>
   13d38:	78a2      	ldrb	r2, [r4, #2]
   13d3a:	2a55      	cmp	r2, #85	; 0x55
   13d3c:	d1f4      	bne.n	13d28 <__cxa_begin_catch+0x14>
   13d3e:	78e2      	ldrb	r2, [r4, #3]
   13d40:	2a43      	cmp	r2, #67	; 0x43
   13d42:	d1f1      	bne.n	13d28 <__cxa_begin_catch+0x14>
   13d44:	7922      	ldrb	r2, [r4, #4]
   13d46:	2a43      	cmp	r2, #67	; 0x43
   13d48:	d1ee      	bne.n	13d28 <__cxa_begin_catch+0x14>
   13d4a:	7962      	ldrb	r2, [r4, #5]
   13d4c:	2a2b      	cmp	r2, #43	; 0x2b
   13d4e:	d1eb      	bne.n	13d28 <__cxa_begin_catch+0x14>
   13d50:	79a2      	ldrb	r2, [r4, #6]
   13d52:	2a2b      	cmp	r2, #43	; 0x2b
   13d54:	d1e8      	bne.n	13d28 <__cxa_begin_catch+0x14>
   13d56:	79e2      	ldrb	r2, [r4, #7]
   13d58:	2a01      	cmp	r2, #1
   13d5a:	d8e5      	bhi.n	13d28 <__cxa_begin_catch+0x14>
   13d5c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13d60:	2a00      	cmp	r2, #0
   13d62:	db10      	blt.n	13d86 <__cxa_begin_catch+0x72>
   13d64:	3201      	adds	r2, #1
   13d66:	6845      	ldr	r5, [r0, #4]
   13d68:	f844 2c0c 	str.w	r2, [r4, #-12]
   13d6c:	3d01      	subs	r5, #1
   13d6e:	6045      	str	r5, [r0, #4]
   13d70:	428b      	cmp	r3, r1
   13d72:	bf1c      	itt	ne
   13d74:	f844 3c10 	strne.w	r3, [r4, #-16]
   13d78:	6001      	strne	r1, [r0, #0]
   13d7a:	4620      	mov	r0, r4
   13d7c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13d7e:	f008 ff39 	bl	1cbf4 <_Unwind_Complete>
   13d82:	4620      	mov	r0, r4
   13d84:	bd38      	pop	{r3, r4, r5, pc}
   13d86:	f1c2 0201 	rsb	r2, r2, #1
   13d8a:	e7ec      	b.n	13d66 <__cxa_begin_catch+0x52>
   13d8c:	f7ff fc64 	bl	13658 <_ZSt9terminatev>

00013d90 <__cxa_end_catch>:
   13d90:	b508      	push	{r3, lr}
   13d92:	f000 f843 	bl	13e1c <__cxa_get_globals_fast>
   13d96:	4602      	mov	r2, r0
   13d98:	6800      	ldr	r0, [r0, #0]
   13d9a:	2800      	cmp	r0, #0
   13d9c:	d03d      	beq.n	13e1a <__cxa_end_catch+0x8a>
   13d9e:	f890 3020 	ldrb.w	r3, [r0, #32]
   13da2:	2b47      	cmp	r3, #71	; 0x47
   13da4:	d006      	beq.n	13db4 <__cxa_end_catch+0x24>
   13da6:	2300      	movs	r3, #0
   13da8:	6013      	str	r3, [r2, #0]
   13daa:	3020      	adds	r0, #32
   13dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13db0:	f008 bf22 	b.w	1cbf8 <_Unwind_DeleteException>
   13db4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13db8:	2b4e      	cmp	r3, #78	; 0x4e
   13dba:	d1f4      	bne.n	13da6 <__cxa_end_catch+0x16>
   13dbc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13dc0:	2b55      	cmp	r3, #85	; 0x55
   13dc2:	d1f0      	bne.n	13da6 <__cxa_end_catch+0x16>
   13dc4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13dc8:	2b43      	cmp	r3, #67	; 0x43
   13dca:	d1ec      	bne.n	13da6 <__cxa_end_catch+0x16>
   13dcc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13dd0:	2b43      	cmp	r3, #67	; 0x43
   13dd2:	d1e8      	bne.n	13da6 <__cxa_end_catch+0x16>
   13dd4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13dd8:	2b2b      	cmp	r3, #43	; 0x2b
   13dda:	d1e4      	bne.n	13da6 <__cxa_end_catch+0x16>
   13ddc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13de0:	2b2b      	cmp	r3, #43	; 0x2b
   13de2:	d1e0      	bne.n	13da6 <__cxa_end_catch+0x16>
   13de4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13de8:	2b01      	cmp	r3, #1
   13dea:	d8dc      	bhi.n	13da6 <__cxa_end_catch+0x16>
   13dec:	6943      	ldr	r3, [r0, #20]
   13dee:	2b00      	cmp	r3, #0
   13df0:	db05      	blt.n	13dfe <__cxa_end_catch+0x6e>
   13df2:	3b01      	subs	r3, #1
   13df4:	d008      	beq.n	13e08 <__cxa_end_catch+0x78>
   13df6:	1c5a      	adds	r2, r3, #1
   13df8:	d00d      	beq.n	13e16 <__cxa_end_catch+0x86>
   13dfa:	6143      	str	r3, [r0, #20]
   13dfc:	bd08      	pop	{r3, pc}
   13dfe:	3301      	adds	r3, #1
   13e00:	d1fb      	bne.n	13dfa <__cxa_end_catch+0x6a>
   13e02:	6901      	ldr	r1, [r0, #16]
   13e04:	6011      	str	r1, [r2, #0]
   13e06:	e7f8      	b.n	13dfa <__cxa_end_catch+0x6a>
   13e08:	6903      	ldr	r3, [r0, #16]
   13e0a:	6013      	str	r3, [r2, #0]
   13e0c:	3020      	adds	r0, #32
   13e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13e12:	f008 bef1 	b.w	1cbf8 <_Unwind_DeleteException>
   13e16:	f7ff fc1f 	bl	13658 <_ZSt9terminatev>
   13e1a:	bd08      	pop	{r3, pc}

00013e1c <__cxa_get_globals_fast>:
   13e1c:	4800      	ldr	r0, [pc, #0]	; (13e20 <__cxa_get_globals_fast+0x4>)
   13e1e:	4770      	bx	lr
   13e20:	20002284 	.word	0x20002284

00013e24 <__cxa_get_globals>:
   13e24:	4800      	ldr	r0, [pc, #0]	; (13e28 <__cxa_get_globals+0x4>)
   13e26:	4770      	bx	lr
   13e28:	20002284 	.word	0x20002284

00013e2c <_ZL28read_encoded_value_with_basehjPKhPj>:
   13e2c:	2850      	cmp	r0, #80	; 0x50
   13e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e30:	d054      	beq.n	13edc <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   13e32:	f000 040f 	and.w	r4, r0, #15
   13e36:	2c0c      	cmp	r4, #12
   13e38:	d84e      	bhi.n	13ed8 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   13e3a:	e8df f004 	tbb	[pc, r4]
   13e3e:	3907      	.short	0x3907
   13e40:	4d170749 	.word	0x4d170749
   13e44:	1f4d4d4d 	.word	0x1f4d4d4d
   13e48:	071b      	.short	0x071b
   13e4a:	17          	.byte	0x17
   13e4b:	00          	.byte	0x00
   13e4c:	4615      	mov	r5, r2
   13e4e:	f855 4b04 	ldr.w	r4, [r5], #4
   13e52:	b144      	cbz	r4, 13e66 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   13e54:	f000 0670 	and.w	r6, r0, #112	; 0x70
   13e58:	2e10      	cmp	r6, #16
   13e5a:	bf08      	it	eq
   13e5c:	4611      	moveq	r1, r2
   13e5e:	440c      	add	r4, r1
   13e60:	0602      	lsls	r2, r0, #24
   13e62:	bf48      	it	mi
   13e64:	6824      	ldrmi	r4, [r4, #0]
   13e66:	601c      	str	r4, [r3, #0]
   13e68:	4628      	mov	r0, r5
   13e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e6c:	4615      	mov	r5, r2
   13e6e:	f855 4b08 	ldr.w	r4, [r5], #8
   13e72:	e7ee      	b.n	13e52 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e74:	4615      	mov	r5, r2
   13e76:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13e7a:	e7ea      	b.n	13e52 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e7c:	2400      	movs	r4, #0
   13e7e:	4627      	mov	r7, r4
   13e80:	4615      	mov	r5, r2
   13e82:	f815 eb01 	ldrb.w	lr, [r5], #1
   13e86:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13e8a:	40be      	lsls	r6, r7
   13e8c:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13e90:	ea44 0406 	orr.w	r4, r4, r6
   13e94:	f107 0707 	add.w	r7, r7, #7
   13e98:	d1f3      	bne.n	13e82 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13e9a:	2f1f      	cmp	r7, #31
   13e9c:	d8d9      	bhi.n	13e52 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13e9e:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13ea2:	d0d6      	beq.n	13e52 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13ea4:	f04f 36ff 	mov.w	r6, #4294967295
   13ea8:	fa06 f707 	lsl.w	r7, r6, r7
   13eac:	433c      	orrs	r4, r7
   13eae:	e7d1      	b.n	13e54 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13eb0:	2400      	movs	r4, #0
   13eb2:	4627      	mov	r7, r4
   13eb4:	4615      	mov	r5, r2
   13eb6:	f815 eb01 	ldrb.w	lr, [r5], #1
   13eba:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13ebe:	40be      	lsls	r6, r7
   13ec0:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13ec4:	ea44 0406 	orr.w	r4, r4, r6
   13ec8:	f107 0707 	add.w	r7, r7, #7
   13ecc:	d1f3      	bne.n	13eb6 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13ece:	e7c0      	b.n	13e52 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13ed0:	4615      	mov	r5, r2
   13ed2:	f835 4b02 	ldrh.w	r4, [r5], #2
   13ed6:	e7bc      	b.n	13e52 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13ed8:	f009 fc44 	bl	1d764 <abort>
   13edc:	3203      	adds	r2, #3
   13ede:	f022 0503 	bic.w	r5, r2, #3
   13ee2:	f855 4b04 	ldr.w	r4, [r5], #4
   13ee6:	601c      	str	r4, [r3, #0]
   13ee8:	4628      	mov	r0, r5
   13eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013eec <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13eec:	28ff      	cmp	r0, #255	; 0xff
   13eee:	d00d      	beq.n	13f0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13ef0:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13ef4:	2820      	cmp	r0, #32
   13ef6:	d015      	beq.n	13f24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13ef8:	d90a      	bls.n	13f10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13efa:	2840      	cmp	r0, #64	; 0x40
   13efc:	d00f      	beq.n	13f1e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13efe:	2850      	cmp	r0, #80	; 0x50
   13f00:	d004      	beq.n	13f0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13f02:	2830      	cmp	r0, #48	; 0x30
   13f04:	d108      	bne.n	13f18 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13f06:	4608      	mov	r0, r1
   13f08:	f009 bc26 	b.w	1d758 <_Unwind_GetDataRelBase>
   13f0c:	2000      	movs	r0, #0
   13f0e:	4770      	bx	lr
   13f10:	2800      	cmp	r0, #0
   13f12:	d0fb      	beq.n	13f0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13f14:	2810      	cmp	r0, #16
   13f16:	d0f9      	beq.n	13f0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13f18:	b508      	push	{r3, lr}
   13f1a:	f009 fc23 	bl	1d764 <abort>
   13f1e:	4608      	mov	r0, r1
   13f20:	f009 bc06 	b.w	1d730 <_Unwind_GetRegionStart>
   13f24:	4608      	mov	r0, r1
   13f26:	f009 bc13 	b.w	1d750 <_Unwind_GetTextRelBase>
   13f2a:	bf00      	nop

00013f2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f2e:	460c      	mov	r4, r1
   13f30:	4615      	mov	r5, r2
   13f32:	4607      	mov	r7, r0
   13f34:	2800      	cmp	r0, #0
   13f36:	d044      	beq.n	13fc2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13f38:	f009 fbfa 	bl	1d730 <_Unwind_GetRegionStart>
   13f3c:	6028      	str	r0, [r5, #0]
   13f3e:	7826      	ldrb	r6, [r4, #0]
   13f40:	2eff      	cmp	r6, #255	; 0xff
   13f42:	f104 0401 	add.w	r4, r4, #1
   13f46:	d032      	beq.n	13fae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   13f48:	4639      	mov	r1, r7
   13f4a:	4630      	mov	r0, r6
   13f4c:	f7ff ffce 	bl	13eec <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f50:	4622      	mov	r2, r4
   13f52:	4601      	mov	r1, r0
   13f54:	1d2b      	adds	r3, r5, #4
   13f56:	4630      	mov	r0, r6
   13f58:	f7ff ff68 	bl	13e2c <_ZL28read_encoded_value_with_basehjPKhPj>
   13f5c:	4604      	mov	r4, r0
   13f5e:	1c60      	adds	r0, r4, #1
   13f60:	7823      	ldrb	r3, [r4, #0]
   13f62:	752b      	strb	r3, [r5, #20]
   13f64:	2bff      	cmp	r3, #255	; 0xff
   13f66:	d029      	beq.n	13fbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   13f68:	2310      	movs	r3, #16
   13f6a:	2400      	movs	r4, #0
   13f6c:	752b      	strb	r3, [r5, #20]
   13f6e:	4622      	mov	r2, r4
   13f70:	f810 1b01 	ldrb.w	r1, [r0], #1
   13f74:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13f78:	4093      	lsls	r3, r2
   13f7a:	0609      	lsls	r1, r1, #24
   13f7c:	ea44 0403 	orr.w	r4, r4, r3
   13f80:	f102 0207 	add.w	r2, r2, #7
   13f84:	d4f4      	bmi.n	13f70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   13f86:	4404      	add	r4, r0
   13f88:	60ec      	str	r4, [r5, #12]
   13f8a:	7803      	ldrb	r3, [r0, #0]
   13f8c:	756b      	strb	r3, [r5, #21]
   13f8e:	2400      	movs	r4, #0
   13f90:	3001      	adds	r0, #1
   13f92:	4622      	mov	r2, r4
   13f94:	f810 1b01 	ldrb.w	r1, [r0], #1
   13f98:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13f9c:	4093      	lsls	r3, r2
   13f9e:	431c      	orrs	r4, r3
   13fa0:	060b      	lsls	r3, r1, #24
   13fa2:	f102 0207 	add.w	r2, r2, #7
   13fa6:	d4f5      	bmi.n	13f94 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   13fa8:	4404      	add	r4, r0
   13faa:	612c      	str	r4, [r5, #16]
   13fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fae:	6068      	str	r0, [r5, #4]
   13fb0:	7823      	ldrb	r3, [r4, #0]
   13fb2:	752b      	strb	r3, [r5, #20]
   13fb4:	2bff      	cmp	r3, #255	; 0xff
   13fb6:	f104 0001 	add.w	r0, r4, #1
   13fba:	d1d5      	bne.n	13f68 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   13fbc:	2300      	movs	r3, #0
   13fbe:	60eb      	str	r3, [r5, #12]
   13fc0:	e7e3      	b.n	13f8a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   13fc2:	e7bb      	b.n	13f3c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00013fc4 <__gxx_personality_v0>:
   13fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc8:	f000 0403 	and.w	r4, r0, #3
   13fcc:	b097      	sub	sp, #92	; 0x5c
   13fce:	2300      	movs	r3, #0
   13fd0:	2c01      	cmp	r4, #1
   13fd2:	4689      	mov	r9, r1
   13fd4:	4617      	mov	r7, r2
   13fd6:	930a      	str	r3, [sp, #40]	; 0x28
   13fd8:	d01e      	beq.n	14018 <__gxx_personality_v0+0x54>
   13fda:	d30e      	bcc.n	13ffa <__gxx_personality_v0+0x36>
   13fdc:	2c02      	cmp	r4, #2
   13fde:	d10a      	bne.n	13ff6 <__gxx_personality_v0+0x32>
   13fe0:	4639      	mov	r1, r7
   13fe2:	4648      	mov	r0, r9
   13fe4:	f009 fb90 	bl	1d708 <__gnu_unwind_frame>
   13fe8:	2800      	cmp	r0, #0
   13fea:	f000 80a5 	beq.w	14138 <__gxx_personality_v0+0x174>
   13fee:	2009      	movs	r0, #9
   13ff0:	b017      	add	sp, #92	; 0x5c
   13ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff6:	f009 fbb5 	bl	1d764 <abort>
   13ffa:	0700      	lsls	r0, r0, #28
   13ffc:	d4f0      	bmi.n	13fe0 <__gxx_personality_v0+0x1c>
   13ffe:	2301      	movs	r3, #1
   14000:	9303      	str	r3, [sp, #12]
   14002:	aa16      	add	r2, sp, #88	; 0x58
   14004:	2300      	movs	r3, #0
   14006:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1400a:	4619      	mov	r1, r3
   1400c:	9200      	str	r2, [sp, #0]
   1400e:	4638      	mov	r0, r7
   14010:	220c      	movs	r2, #12
   14012:	f008 fe1d 	bl	1cc50 <_Unwind_VRS_Set>
   14016:	e00f      	b.n	14038 <__gxx_personality_v0+0x74>
   14018:	f010 0408 	ands.w	r4, r0, #8
   1401c:	f000 8090 	beq.w	14140 <__gxx_personality_v0+0x17c>
   14020:	aa16      	add	r2, sp, #88	; 0x58
   14022:	f044 0402 	orr.w	r4, r4, #2
   14026:	f842 1d2c 	str.w	r1, [r2, #-44]!
   1402a:	4638      	mov	r0, r7
   1402c:	9200      	str	r2, [sp, #0]
   1402e:	4619      	mov	r1, r3
   14030:	220c      	movs	r2, #12
   14032:	9403      	str	r4, [sp, #12]
   14034:	f008 fe0c 	bl	1cc50 <_Unwind_VRS_Set>
   14038:	4638      	mov	r0, r7
   1403a:	f009 fb7f 	bl	1d73c <_Unwind_GetLanguageSpecificData>
   1403e:	9005      	str	r0, [sp, #20]
   14040:	2800      	cmp	r0, #0
   14042:	d0cd      	beq.n	13fe0 <__gxx_personality_v0+0x1c>
   14044:	ab10      	add	r3, sp, #64	; 0x40
   14046:	461a      	mov	r2, r3
   14048:	9905      	ldr	r1, [sp, #20]
   1404a:	9306      	str	r3, [sp, #24]
   1404c:	4638      	mov	r0, r7
   1404e:	f7ff ff6d 	bl	13f2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   14052:	4639      	mov	r1, r7
   14054:	4604      	mov	r4, r0
   14056:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1405a:	f7ff ff47 	bl	13eec <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1405e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   14062:	2300      	movs	r3, #0
   14064:	9012      	str	r0, [sp, #72]	; 0x48
   14066:	4619      	mov	r1, r3
   14068:	220f      	movs	r2, #15
   1406a:	f8cd b000 	str.w	fp, [sp]
   1406e:	4638      	mov	r0, r7
   14070:	f008 fdc8 	bl	1cc04 <_Unwind_VRS_Get>
   14074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14076:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14078:	f023 0301 	bic.w	r3, r3, #1
   1407c:	42a2      	cmp	r2, r4
   1407e:	f103 36ff 	add.w	r6, r3, #4294967295
   14082:	d975      	bls.n	14170 <__gxx_personality_v0+0x1ac>
   14084:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14088:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1408c:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   14090:	2100      	movs	r1, #0
   14092:	4628      	mov	r0, r5
   14094:	f7ff ff2a 	bl	13eec <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14098:	4622      	mov	r2, r4
   1409a:	4653      	mov	r3, sl
   1409c:	4601      	mov	r1, r0
   1409e:	4628      	mov	r0, r5
   140a0:	f7ff fec4 	bl	13e2c <_ZL28read_encoded_value_with_basehjPKhPj>
   140a4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   140a8:	4605      	mov	r5, r0
   140aa:	2100      	movs	r1, #0
   140ac:	4620      	mov	r0, r4
   140ae:	f7ff ff1d 	bl	13eec <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   140b2:	462a      	mov	r2, r5
   140b4:	4643      	mov	r3, r8
   140b6:	4601      	mov	r1, r0
   140b8:	4620      	mov	r0, r4
   140ba:	f7ff feb7 	bl	13e2c <_ZL28read_encoded_value_with_basehjPKhPj>
   140be:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   140c2:	4605      	mov	r5, r0
   140c4:	2100      	movs	r1, #0
   140c6:	4620      	mov	r0, r4
   140c8:	f7ff ff10 	bl	13eec <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   140cc:	462a      	mov	r2, r5
   140ce:	4601      	mov	r1, r0
   140d0:	465b      	mov	r3, fp
   140d2:	4620      	mov	r0, r4
   140d4:	f7ff feaa 	bl	13e2c <_ZL28read_encoded_value_with_basehjPKhPj>
   140d8:	4604      	mov	r4, r0
   140da:	2000      	movs	r0, #0
   140dc:	4602      	mov	r2, r0
   140de:	f814 1b01 	ldrb.w	r1, [r4], #1
   140e2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   140e6:	4093      	lsls	r3, r2
   140e8:	0609      	lsls	r1, r1, #24
   140ea:	ea40 0003 	orr.w	r0, r0, r3
   140ee:	f102 0207 	add.w	r2, r2, #7
   140f2:	d4f4      	bmi.n	140de <__gxx_personality_v0+0x11a>
   140f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   140f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   140f8:	4413      	add	r3, r2
   140fa:	429e      	cmp	r6, r3
   140fc:	d231      	bcs.n	14162 <__gxx_personality_v0+0x19e>
   140fe:	9b03      	ldr	r3, [sp, #12]
   14100:	07db      	lsls	r3, r3, #31
   14102:	d539      	bpl.n	14178 <__gxx_personality_v0+0x1b4>
   14104:	2500      	movs	r5, #0
   14106:	9504      	str	r5, [sp, #16]
   14108:	2300      	movs	r3, #0
   1410a:	4619      	mov	r1, r3
   1410c:	220d      	movs	r2, #13
   1410e:	f8cd 8000 	str.w	r8, [sp]
   14112:	4638      	mov	r0, r7
   14114:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14116:	f008 fd75 	bl	1cc04 <_Unwind_VRS_Get>
   1411a:	9a05      	ldr	r2, [sp, #20]
   1411c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1411e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   14122:	9a04      	ldr	r2, [sp, #16]
   14124:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   14128:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   1412c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14130:	f8c9 3020 	str.w	r3, [r9, #32]
   14134:	2006      	movs	r0, #6
   14136:	e75b      	b.n	13ff0 <__gxx_personality_v0+0x2c>
   14138:	2008      	movs	r0, #8
   1413a:	b017      	add	sp, #92	; 0x5c
   1413c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14140:	ab10      	add	r3, sp, #64	; 0x40
   14142:	9300      	str	r3, [sp, #0]
   14144:	9306      	str	r3, [sp, #24]
   14146:	220d      	movs	r2, #13
   14148:	4623      	mov	r3, r4
   1414a:	4621      	mov	r1, r4
   1414c:	4638      	mov	r0, r7
   1414e:	f8d9 5020 	ldr.w	r5, [r9, #32]
   14152:	f008 fd57 	bl	1cc04 <_Unwind_VRS_Get>
   14156:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14158:	429d      	cmp	r5, r3
   1415a:	d012      	beq.n	14182 <__gxx_personality_v0+0x1be>
   1415c:	2302      	movs	r3, #2
   1415e:	9303      	str	r3, [sp, #12]
   14160:	e74f      	b.n	14002 <__gxx_personality_v0+0x3e>
   14162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14164:	4413      	add	r3, r2
   14166:	429e      	cmp	r6, r3
   14168:	d359      	bcc.n	1421e <__gxx_personality_v0+0x25a>
   1416a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1416c:	42a3      	cmp	r3, r4
   1416e:	d88d      	bhi.n	1408c <__gxx_personality_v0+0xc8>
   14170:	2500      	movs	r5, #0
   14172:	9504      	str	r5, [sp, #16]
   14174:	2401      	movs	r4, #1
   14176:	e105      	b.n	14384 <__gxx_personality_v0+0x3c0>
   14178:	9b03      	ldr	r3, [sp, #12]
   1417a:	071b      	lsls	r3, r3, #28
   1417c:	d54c      	bpl.n	14218 <__gxx_personality_v0+0x254>
   1417e:	f7ff fa6b 	bl	13658 <_ZSt9terminatev>
   14182:	aa16      	add	r2, sp, #88	; 0x58
   14184:	4623      	mov	r3, r4
   14186:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1418a:	4621      	mov	r1, r4
   1418c:	9200      	str	r2, [sp, #0]
   1418e:	4638      	mov	r0, r7
   14190:	220c      	movs	r2, #12
   14192:	f008 fd5d 	bl	1cc50 <_Unwind_VRS_Set>
   14196:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   1419a:	9304      	str	r3, [sp, #16]
   1419c:	2b00      	cmp	r3, #0
   1419e:	d03b      	beq.n	14218 <__gxx_personality_v0+0x254>
   141a0:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   141a4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   141a8:	2403      	movs	r4, #3
   141aa:	2d00      	cmp	r5, #0
   141ac:	f2c0 8106 	blt.w	143bc <__gxx_personality_v0+0x3f8>
   141b0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   141b4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   141b8:	a916      	add	r1, sp, #88	; 0x58
   141ba:	2300      	movs	r3, #0
   141bc:	f841 9d28 	str.w	r9, [r1, #-40]!
   141c0:	461a      	mov	r2, r3
   141c2:	9100      	str	r1, [sp, #0]
   141c4:	4638      	mov	r0, r7
   141c6:	4619      	mov	r1, r3
   141c8:	f008 fd42 	bl	1cc50 <_Unwind_VRS_Set>
   141cc:	2300      	movs	r3, #0
   141ce:	4619      	mov	r1, r3
   141d0:	2201      	movs	r2, #1
   141d2:	f8cd a000 	str.w	sl, [sp]
   141d6:	4638      	mov	r0, r7
   141d8:	950d      	str	r5, [sp, #52]	; 0x34
   141da:	f008 fd39 	bl	1cc50 <_Unwind_VRS_Set>
   141de:	2300      	movs	r3, #0
   141e0:	4619      	mov	r1, r3
   141e2:	220f      	movs	r2, #15
   141e4:	f8cd 8000 	str.w	r8, [sp]
   141e8:	4638      	mov	r0, r7
   141ea:	f008 fd0b 	bl	1cc04 <_Unwind_VRS_Get>
   141ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   141f0:	9a04      	ldr	r2, [sp, #16]
   141f2:	f8cd 8000 	str.w	r8, [sp]
   141f6:	f003 0501 	and.w	r5, r3, #1
   141fa:	2300      	movs	r3, #0
   141fc:	4315      	orrs	r5, r2
   141fe:	4638      	mov	r0, r7
   14200:	4619      	mov	r1, r3
   14202:	220f      	movs	r2, #15
   14204:	950e      	str	r5, [sp, #56]	; 0x38
   14206:	f008 fd23 	bl	1cc50 <_Unwind_VRS_Set>
   1420a:	2c02      	cmp	r4, #2
   1420c:	f000 8080 	beq.w	14310 <__gxx_personality_v0+0x34c>
   14210:	2007      	movs	r0, #7
   14212:	b017      	add	sp, #92	; 0x5c
   14214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14218:	4648      	mov	r0, r9
   1421a:	f7ff fcfb 	bl	13c14 <__cxa_call_terminate>
   1421e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14220:	9304      	str	r3, [sp, #16]
   14222:	461a      	mov	r2, r3
   14224:	2b00      	cmp	r3, #0
   14226:	d178      	bne.n	1431a <__gxx_personality_v0+0x356>
   14228:	2800      	cmp	r0, #0
   1422a:	f43f aed9 	beq.w	13fe0 <__gxx_personality_v0+0x1c>
   1422e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14230:	9a04      	ldr	r2, [sp, #16]
   14232:	3801      	subs	r0, #1
   14234:	4403      	add	r3, r0
   14236:	2a00      	cmp	r2, #0
   14238:	f43f aed2 	beq.w	13fe0 <__gxx_personality_v0+0x1c>
   1423c:	2b00      	cmp	r3, #0
   1423e:	d075      	beq.n	1432c <__gxx_personality_v0+0x368>
   14240:	9a03      	ldr	r2, [sp, #12]
   14242:	f012 0208 	ands.w	r2, r2, #8
   14246:	9209      	str	r2, [sp, #36]	; 0x24
   14248:	f000 80f6 	beq.w	14438 <__gxx_personality_v0+0x474>
   1424c:	2147      	movs	r1, #71	; 0x47
   1424e:	224e      	movs	r2, #78	; 0x4e
   14250:	f889 1000 	strb.w	r1, [r9]
   14254:	f889 2001 	strb.w	r2, [r9, #1]
   14258:	2155      	movs	r1, #85	; 0x55
   1425a:	2243      	movs	r2, #67	; 0x43
   1425c:	f889 1002 	strb.w	r1, [r9, #2]
   14260:	f889 2003 	strb.w	r2, [r9, #3]
   14264:	2146      	movs	r1, #70	; 0x46
   14266:	224f      	movs	r2, #79	; 0x4f
   14268:	f889 1004 	strb.w	r1, [r9, #4]
   1426c:	f889 2005 	strb.w	r2, [r9, #5]
   14270:	2152      	movs	r1, #82	; 0x52
   14272:	2200      	movs	r2, #0
   14274:	f889 1006 	strb.w	r1, [r9, #6]
   14278:	f889 2007 	strb.w	r2, [r9, #7]
   1427c:	2200      	movs	r2, #0
   1427e:	9208      	str	r2, [sp, #32]
   14280:	9707      	str	r7, [sp, #28]
   14282:	2500      	movs	r5, #0
   14284:	4629      	mov	r1, r5
   14286:	e000      	b.n	1428a <__gxx_personality_v0+0x2c6>
   14288:	4623      	mov	r3, r4
   1428a:	461c      	mov	r4, r3
   1428c:	f814 0b01 	ldrb.w	r0, [r4], #1
   14290:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14294:	408a      	lsls	r2, r1
   14296:	0606      	lsls	r6, r0, #24
   14298:	ea45 0502 	orr.w	r5, r5, r2
   1429c:	f101 0107 	add.w	r1, r1, #7
   142a0:	d4f2      	bmi.n	14288 <__gxx_personality_v0+0x2c4>
   142a2:	291f      	cmp	r1, #31
   142a4:	d805      	bhi.n	142b2 <__gxx_personality_v0+0x2ee>
   142a6:	0642      	lsls	r2, r0, #25
   142a8:	d503      	bpl.n	142b2 <__gxx_personality_v0+0x2ee>
   142aa:	2201      	movs	r2, #1
   142ac:	408a      	lsls	r2, r1
   142ae:	4252      	negs	r2, r2
   142b0:	4315      	orrs	r5, r2
   142b2:	2600      	movs	r6, #0
   142b4:	4631      	mov	r1, r6
   142b6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   142ba:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   142be:	408a      	lsls	r2, r1
   142c0:	0607      	lsls	r7, r0, #24
   142c2:	ea46 0602 	orr.w	r6, r6, r2
   142c6:	f101 0107 	add.w	r1, r1, #7
   142ca:	d4f4      	bmi.n	142b6 <__gxx_personality_v0+0x2f2>
   142cc:	291f      	cmp	r1, #31
   142ce:	d805      	bhi.n	142dc <__gxx_personality_v0+0x318>
   142d0:	0640      	lsls	r0, r0, #25
   142d2:	d503      	bpl.n	142dc <__gxx_personality_v0+0x318>
   142d4:	2301      	movs	r3, #1
   142d6:	408b      	lsls	r3, r1
   142d8:	425b      	negs	r3, r3
   142da:	431e      	orrs	r6, r3
   142dc:	2d00      	cmp	r5, #0
   142de:	d05c      	beq.n	1439a <__gxx_personality_v0+0x3d6>
   142e0:	dd5e      	ble.n	143a0 <__gxx_personality_v0+0x3dc>
   142e2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   142e6:	28ff      	cmp	r0, #255	; 0xff
   142e8:	f000 80a4 	beq.w	14434 <__gxx_personality_v0+0x470>
   142ec:	f000 0307 	and.w	r3, r0, #7
   142f0:	2b04      	cmp	r3, #4
   142f2:	f63f ae80 	bhi.w	13ff6 <__gxx_personality_v0+0x32>
   142f6:	a201      	add	r2, pc, #4	; (adr r2, 142fc <__gxx_personality_v0+0x338>)
   142f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   142fc:	00014367 	.word	0x00014367
   14300:	00013ff7 	.word	0x00013ff7
   14304:	0001436d 	.word	0x0001436d
   14308:	00014367 	.word	0x00014367
   1430c:	00014345 	.word	0x00014345
   14310:	4648      	mov	r0, r9
   14312:	f7ff fbf7 	bl	13b04 <__cxa_begin_cleanup>
   14316:	2007      	movs	r0, #7
   14318:	e66a      	b.n	13ff0 <__gxx_personality_v0+0x2c>
   1431a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1431c:	441a      	add	r2, r3
   1431e:	9204      	str	r2, [sp, #16]
   14320:	2800      	cmp	r0, #0
   14322:	d184      	bne.n	1422e <__gxx_personality_v0+0x26a>
   14324:	9b04      	ldr	r3, [sp, #16]
   14326:	2b00      	cmp	r3, #0
   14328:	f43f ae5a 	beq.w	13fe0 <__gxx_personality_v0+0x1c>
   1432c:	9b03      	ldr	r3, [sp, #12]
   1432e:	f013 0301 	ands.w	r3, r3, #1
   14332:	f47f ae55 	bne.w	13fe0 <__gxx_personality_v0+0x1c>
   14336:	9a03      	ldr	r2, [sp, #12]
   14338:	f012 0508 	ands.w	r5, r2, #8
   1433c:	f040 8097 	bne.w	1446e <__gxx_personality_v0+0x4aa>
   14340:	2402      	movs	r4, #2
   14342:	e739      	b.n	141b8 <__gxx_personality_v0+0x1f4>
   14344:	00eb      	lsls	r3, r5, #3
   14346:	425b      	negs	r3, r3
   14348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1434a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1434c:	441a      	add	r2, r3
   1434e:	4643      	mov	r3, r8
   14350:	f7ff fd6c 	bl	13e2c <_ZL28read_encoded_value_with_basehjPKhPj>
   14354:	990e      	ldr	r1, [sp, #56]	; 0x38
   14356:	b199      	cbz	r1, 14380 <__gxx_personality_v0+0x3bc>
   14358:	f1b9 0f00 	cmp.w	r9, #0
   1435c:	d109      	bne.n	14372 <__gxx_personality_v0+0x3ae>
   1435e:	2e00      	cmp	r6, #0
   14360:	d077      	beq.n	14452 <__gxx_personality_v0+0x48e>
   14362:	19a3      	adds	r3, r4, r6
   14364:	e78d      	b.n	14282 <__gxx_personality_v0+0x2be>
   14366:	00ab      	lsls	r3, r5, #2
   14368:	425b      	negs	r3, r3
   1436a:	e7ed      	b.n	14348 <__gxx_personality_v0+0x384>
   1436c:	006b      	lsls	r3, r5, #1
   1436e:	425b      	negs	r3, r3
   14370:	e7ea      	b.n	14348 <__gxx_personality_v0+0x384>
   14372:	ab0a      	add	r3, sp, #40	; 0x28
   14374:	2200      	movs	r2, #0
   14376:	4648      	mov	r0, r9
   14378:	f7ff fb68 	bl	13a4c <__cxa_type_match>
   1437c:	2800      	cmp	r0, #0
   1437e:	d0ee      	beq.n	1435e <__gxx_personality_v0+0x39a>
   14380:	9f07      	ldr	r7, [sp, #28]
   14382:	2403      	movs	r4, #3
   14384:	9b03      	ldr	r3, [sp, #12]
   14386:	07da      	lsls	r2, r3, #31
   14388:	d460      	bmi.n	1444c <__gxx_personality_v0+0x488>
   1438a:	9b03      	ldr	r3, [sp, #12]
   1438c:	0719      	lsls	r1, r3, #28
   1438e:	d466      	bmi.n	1445e <__gxx_personality_v0+0x49a>
   14390:	2c01      	cmp	r4, #1
   14392:	f43f af41 	beq.w	14218 <__gxx_personality_v0+0x254>
   14396:	9905      	ldr	r1, [sp, #20]
   14398:	e707      	b.n	141aa <__gxx_personality_v0+0x1e6>
   1439a:	2301      	movs	r3, #1
   1439c:	9308      	str	r3, [sp, #32]
   1439e:	e7de      	b.n	1435e <__gxx_personality_v0+0x39a>
   143a0:	f1b9 0f00 	cmp.w	r9, #0
   143a4:	d001      	beq.n	143aa <__gxx_personality_v0+0x3e6>
   143a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   143a8:	b35b      	cbz	r3, 14402 <__gxx_personality_v0+0x43e>
   143aa:	1c6b      	adds	r3, r5, #1
   143ac:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   143b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   143b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143b6:	2b00      	cmp	r3, #0
   143b8:	d1d1      	bne.n	1435e <__gxx_personality_v0+0x39a>
   143ba:	e7e1      	b.n	14380 <__gxx_personality_v0+0x3bc>
   143bc:	9a06      	ldr	r2, [sp, #24]
   143be:	4638      	mov	r0, r7
   143c0:	f7ff fdb4 	bl	13f2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   143c4:	4639      	mov	r1, r7
   143c6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   143ca:	f7ff fd8f 	bl	13eec <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   143ce:	00aa      	lsls	r2, r5, #2
   143d0:	f082 0203 	eor.w	r2, r2, #3
   143d4:	43d2      	mvns	r2, r2
   143d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   143d8:	9012      	str	r0, [sp, #72]	; 0x48
   143da:	58b3      	ldr	r3, [r6, r2]
   143dc:	4416      	add	r6, r2
   143de:	b133      	cbz	r3, 143ee <__gxx_personality_v0+0x42a>
   143e0:	4632      	mov	r2, r6
   143e2:	2300      	movs	r3, #0
   143e4:	f852 1f04 	ldr.w	r1, [r2, #4]!
   143e8:	3301      	adds	r3, #1
   143ea:	2900      	cmp	r1, #0
   143ec:	d1fa      	bne.n	143e4 <__gxx_personality_v0+0x420>
   143ee:	2204      	movs	r2, #4
   143f0:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   143f4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   143f8:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   143fc:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14400:	e6d6      	b.n	141b0 <__gxx_personality_v0+0x1ec>
   14402:	1c6f      	adds	r7, r5, #1
   14404:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   14408:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1440a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1440c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   14410:	920f      	str	r2, [sp, #60]	; 0x3c
   14412:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   14416:	b921      	cbnz	r1, 14422 <__gxx_personality_v0+0x45e>
   14418:	e7b2      	b.n	14380 <__gxx_personality_v0+0x3bc>
   1441a:	f857 1f04 	ldr.w	r1, [r7, #4]!
   1441e:	2900      	cmp	r1, #0
   14420:	d0ae      	beq.n	14380 <__gxx_personality_v0+0x3bc>
   14422:	4439      	add	r1, r7
   14424:	465b      	mov	r3, fp
   14426:	2200      	movs	r2, #0
   14428:	4648      	mov	r0, r9
   1442a:	f7ff fb0f 	bl	13a4c <__cxa_type_match>
   1442e:	2800      	cmp	r0, #0
   14430:	d0f3      	beq.n	1441a <__gxx_personality_v0+0x456>
   14432:	e794      	b.n	1435e <__gxx_personality_v0+0x39a>
   14434:	2300      	movs	r3, #0
   14436:	e787      	b.n	14348 <__gxx_personality_v0+0x384>
   14438:	f899 2007 	ldrb.w	r2, [r9, #7]
   1443c:	2a01      	cmp	r2, #1
   1443e:	bf0c      	ite	eq
   14440:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   14444:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14448:	920a      	str	r2, [sp, #40]	; 0x28
   1444a:	e717      	b.n	1427c <__gxx_personality_v0+0x2b8>
   1444c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14450:	e65a      	b.n	14108 <__gxx_personality_v0+0x144>
   14452:	9b08      	ldr	r3, [sp, #32]
   14454:	9f07      	ldr	r7, [sp, #28]
   14456:	2b00      	cmp	r3, #0
   14458:	f47f af68 	bne.w	1432c <__gxx_personality_v0+0x368>
   1445c:	e5c0      	b.n	13fe0 <__gxx_personality_v0+0x1c>
   1445e:	2c01      	cmp	r4, #1
   14460:	f43f ae8d 	beq.w	1417e <__gxx_personality_v0+0x1ba>
   14464:	2d00      	cmp	r5, #0
   14466:	f6bf aea3 	bge.w	141b0 <__gxx_personality_v0+0x1ec>
   1446a:	f7ff f903 	bl	13674 <_ZSt10unexpectedv>
   1446e:	461d      	mov	r5, r3
   14470:	2402      	movs	r4, #2
   14472:	e6a1      	b.n	141b8 <__gxx_personality_v0+0x1f4>
   14474:	f7ff fc4e 	bl	13d14 <__cxa_begin_catch>
   14478:	e681      	b.n	1417e <__gxx_personality_v0+0x1ba>
   1447a:	bf00      	nop

0001447c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1447c:	b570      	push	{r4, r5, r6, lr}
   1447e:	4b3c      	ldr	r3, [pc, #240]	; (14570 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14480:	781a      	ldrb	r2, [r3, #0]
   14482:	b082      	sub	sp, #8
   14484:	2a00      	cmp	r2, #0
   14486:	d135      	bne.n	144f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14488:	2401      	movs	r4, #1
   1448a:	701c      	strb	r4, [r3, #0]
   1448c:	f006 fbd2 	bl	1ac34 <__cxa_current_exception_type>
   14490:	2800      	cmp	r0, #0
   14492:	d05b      	beq.n	1454c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   14494:	6844      	ldr	r4, [r0, #4]
   14496:	4d37      	ldr	r5, [pc, #220]	; (14574 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14498:	7823      	ldrb	r3, [r4, #0]
   1449a:	2b2a      	cmp	r3, #42	; 0x2a
   1449c:	ab02      	add	r3, sp, #8
   1449e:	f04f 32ff 	mov.w	r2, #4294967295
   144a2:	bf08      	it	eq
   144a4:	3401      	addeq	r4, #1
   144a6:	f843 2d04 	str.w	r2, [r3, #-4]!
   144aa:	2200      	movs	r2, #0
   144ac:	4611      	mov	r1, r2
   144ae:	4620      	mov	r0, r4
   144b0:	f006 fb52 	bl	1ab58 <__cxa_demangle>
   144b4:	682b      	ldr	r3, [r5, #0]
   144b6:	4606      	mov	r6, r0
   144b8:	68db      	ldr	r3, [r3, #12]
   144ba:	482f      	ldr	r0, [pc, #188]	; (14578 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   144bc:	2230      	movs	r2, #48	; 0x30
   144be:	2101      	movs	r1, #1
   144c0:	f009 fba4 	bl	1dc0c <fwrite>
   144c4:	9b01      	ldr	r3, [sp, #4]
   144c6:	b17b      	cbz	r3, 144e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   144c8:	682b      	ldr	r3, [r5, #0]
   144ca:	4620      	mov	r0, r4
   144cc:	68d9      	ldr	r1, [r3, #12]
   144ce:	f009 f9c7 	bl	1d860 <fputs>
   144d2:	682b      	ldr	r3, [r5, #0]
   144d4:	4829      	ldr	r0, [pc, #164]	; (1457c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   144d6:	68db      	ldr	r3, [r3, #12]
   144d8:	2202      	movs	r2, #2
   144da:	2101      	movs	r1, #1
   144dc:	f009 fb96 	bl	1dc0c <fwrite>
   144e0:	9b01      	ldr	r3, [sp, #4]
   144e2:	b18b      	cbz	r3, 14508 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   144e4:	f7ff f940 	bl	13768 <__cxa_rethrow>
   144e8:	682b      	ldr	r3, [r5, #0]
   144ea:	4630      	mov	r0, r6
   144ec:	68d9      	ldr	r1, [r3, #12]
   144ee:	f009 f9b7 	bl	1d860 <fputs>
   144f2:	e7ee      	b.n	144d2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   144f4:	4b1f      	ldr	r3, [pc, #124]	; (14574 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   144f6:	4822      	ldr	r0, [pc, #136]	; (14580 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   144f8:	681b      	ldr	r3, [r3, #0]
   144fa:	221d      	movs	r2, #29
   144fc:	68db      	ldr	r3, [r3, #12]
   144fe:	2101      	movs	r1, #1
   14500:	f009 fb84 	bl	1dc0c <fwrite>
   14504:	f009 f92e 	bl	1d764 <abort>
   14508:	4630      	mov	r0, r6
   1450a:	f009 fbe1 	bl	1dcd0 <free>
   1450e:	e7e9      	b.n	144e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   14510:	2901      	cmp	r1, #1
   14512:	460c      	mov	r4, r1
   14514:	d127      	bne.n	14566 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   14516:	f7ff fbfd 	bl	13d14 <__cxa_begin_catch>
   1451a:	6803      	ldr	r3, [r0, #0]
   1451c:	689b      	ldr	r3, [r3, #8]
   1451e:	4798      	blx	r3
   14520:	682b      	ldr	r3, [r5, #0]
   14522:	4606      	mov	r6, r0
   14524:	68db      	ldr	r3, [r3, #12]
   14526:	4817      	ldr	r0, [pc, #92]	; (14584 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   14528:	4621      	mov	r1, r4
   1452a:	220b      	movs	r2, #11
   1452c:	f009 fb6e 	bl	1dc0c <fwrite>
   14530:	682b      	ldr	r3, [r5, #0]
   14532:	4630      	mov	r0, r6
   14534:	68d9      	ldr	r1, [r3, #12]
   14536:	f009 f993 	bl	1d860 <fputs>
   1453a:	682b      	ldr	r3, [r5, #0]
   1453c:	200a      	movs	r0, #10
   1453e:	68d9      	ldr	r1, [r3, #12]
   14540:	f009 f91e 	bl	1d780 <fputc>
   14544:	f7ff fc24 	bl	13d90 <__cxa_end_catch>
   14548:	f009 f90c 	bl	1d764 <abort>
   1454c:	4b09      	ldr	r3, [pc, #36]	; (14574 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1454e:	480e      	ldr	r0, [pc, #56]	; (14588 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   14550:	681b      	ldr	r3, [r3, #0]
   14552:	4621      	mov	r1, r4
   14554:	68db      	ldr	r3, [r3, #12]
   14556:	222d      	movs	r2, #45	; 0x2d
   14558:	f009 fb58 	bl	1dc0c <fwrite>
   1455c:	e7f4      	b.n	14548 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   1455e:	f7ff fc17 	bl	13d90 <__cxa_end_catch>
   14562:	f7ff fa6d 	bl	13a40 <__cxa_end_cleanup>
   14566:	f7ff fbd5 	bl	13d14 <__cxa_begin_catch>
   1456a:	f7ff fc11 	bl	13d90 <__cxa_end_catch>
   1456e:	e7eb      	b.n	14548 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14570:	20002290 	.word	0x20002290
   14574:	200000f8 	.word	0x200000f8
   14578:	00023c38 	.word	0x00023c38
   1457c:	00023c6c 	.word	0x00023c6c
   14580:	00023c18 	.word	0x00023c18
   14584:	00023ca0 	.word	0x00023ca0
   14588:	00023c70 	.word	0x00023c70

0001458c <d_make_comp>:
   1458c:	b470      	push	{r4, r5, r6}
   1458e:	1e4c      	subs	r4, r1, #1
   14590:	2c4c      	cmp	r4, #76	; 0x4c
   14592:	d82d      	bhi.n	145f0 <d_make_comp+0x64>
   14594:	e8df f004 	tbb	[pc, r4]
   14598:	3c3c3c3c 	.word	0x3c3c3c3c
   1459c:	2c2c2c2c 	.word	0x2c2c2c2c
   145a0:	273c2727 	.word	0x273c2727
   145a4:	27272727 	.word	0x27272727
   145a8:	27272727 	.word	0x27272727
   145ac:	2c272727 	.word	0x2c272727
   145b0:	28282828 	.word	0x28282828
   145b4:	28282828 	.word	0x28282828
   145b8:	2727273c 	.word	0x2727273c
   145bc:	272c2727 	.word	0x272c2727
   145c0:	2c3c3e28 	.word	0x2c3c3e28
   145c4:	3e28283c 	.word	0x3e28283c
   145c8:	27272c2c 	.word	0x27272c2c
   145cc:	3c3c3c27 	.word	0x3c3c3c27
   145d0:	3c273c3c 	.word	0x3c273c3c
   145d4:	2c3c273c 	.word	0x2c3c273c
   145d8:	2727272c 	.word	0x2727272c
   145dc:	272c2c2c 	.word	0x272c2c2c
   145e0:	283c2727 	.word	0x283c2727
   145e4:	3c          	.byte	0x3c
   145e5:	00          	.byte	0x00
   145e6:	b11a      	cbz	r2, 145f0 <d_make_comp+0x64>
   145e8:	6944      	ldr	r4, [r0, #20]
   145ea:	6985      	ldr	r5, [r0, #24]
   145ec:	42ac      	cmp	r4, r5
   145ee:	db02      	blt.n	145f6 <d_make_comp+0x6a>
   145f0:	2000      	movs	r0, #0
   145f2:	bc70      	pop	{r4, r5, r6}
   145f4:	4770      	bx	lr
   145f6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   145fa:	6906      	ldr	r6, [r0, #16]
   145fc:	00ad      	lsls	r5, r5, #2
   145fe:	3401      	adds	r4, #1
   14600:	6144      	str	r4, [r0, #20]
   14602:	1970      	adds	r0, r6, r5
   14604:	d0f5      	beq.n	145f2 <d_make_comp+0x66>
   14606:	5571      	strb	r1, [r6, r5]
   14608:	6042      	str	r2, [r0, #4]
   1460a:	6083      	str	r3, [r0, #8]
   1460c:	bc70      	pop	{r4, r5, r6}
   1460e:	4770      	bx	lr
   14610:	2a00      	cmp	r2, #0
   14612:	d0ed      	beq.n	145f0 <d_make_comp+0x64>
   14614:	2b00      	cmp	r3, #0
   14616:	d0eb      	beq.n	145f0 <d_make_comp+0x64>
   14618:	6944      	ldr	r4, [r0, #20]
   1461a:	6985      	ldr	r5, [r0, #24]
   1461c:	42ac      	cmp	r4, r5
   1461e:	dae7      	bge.n	145f0 <d_make_comp+0x64>
   14620:	e7e9      	b.n	145f6 <d_make_comp+0x6a>
   14622:	bf00      	nop

00014624 <d_cv_qualifiers>:
   14624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14628:	68c3      	ldr	r3, [r0, #12]
   1462a:	f1b2 0a00 	subs.w	sl, r2, #0
   1462e:	4604      	mov	r4, r0
   14630:	460e      	mov	r6, r1
   14632:	781a      	ldrb	r2, [r3, #0]
   14634:	bf15      	itete	ne
   14636:	f04f 091e 	movne.w	r9, #30
   1463a:	f04f 091b 	moveq.w	r9, #27
   1463e:	f04f 081d 	movne.w	r8, #29
   14642:	f04f 081a 	moveq.w	r8, #26
   14646:	bf14      	ite	ne
   14648:	271c      	movne	r7, #28
   1464a:	2719      	moveq	r7, #25
   1464c:	460d      	mov	r5, r1
   1464e:	e018      	b.n	14682 <d_cv_qualifiers+0x5e>
   14650:	2a56      	cmp	r2, #86	; 0x56
   14652:	d01f      	beq.n	14694 <d_cv_qualifiers+0x70>
   14654:	2a4b      	cmp	r2, #75	; 0x4b
   14656:	d024      	beq.n	146a2 <d_cv_qualifiers+0x7e>
   14658:	2a44      	cmp	r2, #68	; 0x44
   1465a:	d12d      	bne.n	146b8 <d_cv_qualifiers+0x94>
   1465c:	785a      	ldrb	r2, [r3, #1]
   1465e:	2a78      	cmp	r2, #120	; 0x78
   14660:	d127      	bne.n	146b2 <d_cv_qualifiers+0x8e>
   14662:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14664:	3302      	adds	r3, #2
   14666:	3211      	adds	r2, #17
   14668:	60e3      	str	r3, [r4, #12]
   1466a:	6322      	str	r2, [r4, #48]	; 0x30
   1466c:	214c      	movs	r1, #76	; 0x4c
   1466e:	2300      	movs	r3, #0
   14670:	461a      	mov	r2, r3
   14672:	4620      	mov	r0, r4
   14674:	f7ff ff8a 	bl	1458c <d_make_comp>
   14678:	6028      	str	r0, [r5, #0]
   1467a:	b1c8      	cbz	r0, 146b0 <d_cv_qualifiers+0x8c>
   1467c:	68e3      	ldr	r3, [r4, #12]
   1467e:	781a      	ldrb	r2, [r3, #0]
   14680:	1d05      	adds	r5, r0, #4
   14682:	2a72      	cmp	r2, #114	; 0x72
   14684:	d1e4      	bne.n	14650 <d_cv_qualifiers+0x2c>
   14686:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14688:	3301      	adds	r3, #1
   1468a:	3209      	adds	r2, #9
   1468c:	60e3      	str	r3, [r4, #12]
   1468e:	6322      	str	r2, [r4, #48]	; 0x30
   14690:	4639      	mov	r1, r7
   14692:	e7ec      	b.n	1466e <d_cv_qualifiers+0x4a>
   14694:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14696:	3301      	adds	r3, #1
   14698:	3209      	adds	r2, #9
   1469a:	60e3      	str	r3, [r4, #12]
   1469c:	6322      	str	r2, [r4, #48]	; 0x30
   1469e:	4641      	mov	r1, r8
   146a0:	e7e5      	b.n	1466e <d_cv_qualifiers+0x4a>
   146a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   146a4:	3301      	adds	r3, #1
   146a6:	3206      	adds	r2, #6
   146a8:	60e3      	str	r3, [r4, #12]
   146aa:	6322      	str	r2, [r4, #48]	; 0x30
   146ac:	4649      	mov	r1, r9
   146ae:	e7de      	b.n	1466e <d_cv_qualifiers+0x4a>
   146b0:	4605      	mov	r5, r0
   146b2:	4628      	mov	r0, r5
   146b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   146b8:	f1ba 0f00 	cmp.w	sl, #0
   146bc:	d1f9      	bne.n	146b2 <d_cv_qualifiers+0x8e>
   146be:	2a46      	cmp	r2, #70	; 0x46
   146c0:	d1f7      	bne.n	146b2 <d_cv_qualifiers+0x8e>
   146c2:	42b5      	cmp	r5, r6
   146c4:	d0f5      	beq.n	146b2 <d_cv_qualifiers+0x8e>
   146c6:	201d      	movs	r0, #29
   146c8:	211e      	movs	r1, #30
   146ca:	221c      	movs	r2, #28
   146cc:	e007      	b.n	146de <d_cv_qualifiers+0xba>
   146ce:	2b1b      	cmp	r3, #27
   146d0:	d00b      	beq.n	146ea <d_cv_qualifiers+0xc6>
   146d2:	2b19      	cmp	r3, #25
   146d4:	d100      	bne.n	146d8 <d_cv_qualifiers+0xb4>
   146d6:	7032      	strb	r2, [r6, #0]
   146d8:	3604      	adds	r6, #4
   146da:	42b5      	cmp	r5, r6
   146dc:	d0e9      	beq.n	146b2 <d_cv_qualifiers+0x8e>
   146de:	6836      	ldr	r6, [r6, #0]
   146e0:	7833      	ldrb	r3, [r6, #0]
   146e2:	2b1a      	cmp	r3, #26
   146e4:	d1f3      	bne.n	146ce <d_cv_qualifiers+0xaa>
   146e6:	7030      	strb	r0, [r6, #0]
   146e8:	e7f6      	b.n	146d8 <d_cv_qualifiers+0xb4>
   146ea:	7031      	strb	r1, [r6, #0]
   146ec:	e7f4      	b.n	146d8 <d_cv_qualifiers+0xb4>
   146ee:	bf00      	nop

000146f0 <d_ref_qualifier>:
   146f0:	b410      	push	{r4}
   146f2:	68c3      	ldr	r3, [r0, #12]
   146f4:	781c      	ldrb	r4, [r3, #0]
   146f6:	2c52      	cmp	r4, #82	; 0x52
   146f8:	460a      	mov	r2, r1
   146fa:	d00f      	beq.n	1471c <d_ref_qualifier+0x2c>
   146fc:	2c4f      	cmp	r4, #79	; 0x4f
   146fe:	d003      	beq.n	14708 <d_ref_qualifier+0x18>
   14700:	4608      	mov	r0, r1
   14702:	f85d 4b04 	ldr.w	r4, [sp], #4
   14706:	4770      	bx	lr
   14708:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1470a:	3103      	adds	r1, #3
   1470c:	6301      	str	r1, [r0, #48]	; 0x30
   1470e:	2120      	movs	r1, #32
   14710:	3301      	adds	r3, #1
   14712:	60c3      	str	r3, [r0, #12]
   14714:	f85d 4b04 	ldr.w	r4, [sp], #4
   14718:	2300      	movs	r3, #0
   1471a:	e737      	b.n	1458c <d_make_comp>
   1471c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1471e:	3102      	adds	r1, #2
   14720:	6301      	str	r1, [r0, #48]	; 0x30
   14722:	211f      	movs	r1, #31
   14724:	e7f4      	b.n	14710 <d_ref_qualifier+0x20>
   14726:	bf00      	nop

00014728 <d_count_templates_scopes>:
   14728:	2a00      	cmp	r2, #0
   1472a:	d04d      	beq.n	147c8 <d_count_templates_scopes+0xa0>
   1472c:	b570      	push	{r4, r5, r6, lr}
   1472e:	4605      	mov	r5, r0
   14730:	460e      	mov	r6, r1
   14732:	4614      	mov	r4, r2
   14734:	7823      	ldrb	r3, [r4, #0]
   14736:	3b01      	subs	r3, #1
   14738:	2b4c      	cmp	r3, #76	; 0x4c
   1473a:	d82b      	bhi.n	14794 <d_count_templates_scopes+0x6c>
   1473c:	e8df f003 	tbb	[pc, r3]
   14740:	3f363636 	.word	0x3f363636
   14744:	27272a2a 	.word	0x27272a2a
   14748:	36363636 	.word	0x36363636
   1474c:	36363636 	.word	0x36363636
   14750:	36363636 	.word	0x36363636
   14754:	2a363636 	.word	0x2a363636
   14758:	36363636 	.word	0x36363636
   1475c:	36363636 	.word	0x36363636
   14760:	2f2f3636 	.word	0x2f2f3636
   14764:	362a3636 	.word	0x362a3636
   14768:	2b363636 	.word	0x2b363636
   1476c:	36363636 	.word	0x36363636
   14770:	3636272a 	.word	0x3636272a
   14774:	36363636 	.word	0x36363636
   14778:	36363636 	.word	0x36363636
   1477c:	2a363636 	.word	0x2a363636
   14780:	2b2b362a 	.word	0x2b2b362a
   14784:	362a2b2b 	.word	0x362a2b2b
   14788:	36363636 	.word	0x36363636
   1478c:	36          	.byte	0x36
   1478d:	00          	.byte	0x00
   1478e:	68a4      	ldr	r4, [r4, #8]
   14790:	2c00      	cmp	r4, #0
   14792:	d1cf      	bne.n	14734 <d_count_templates_scopes+0xc>
   14794:	bd70      	pop	{r4, r5, r6, pc}
   14796:	6864      	ldr	r4, [r4, #4]
   14798:	2c00      	cmp	r4, #0
   1479a:	d1cb      	bne.n	14734 <d_count_templates_scopes+0xc>
   1479c:	e7fa      	b.n	14794 <d_count_templates_scopes+0x6c>
   1479e:	6862      	ldr	r2, [r4, #4]
   147a0:	7813      	ldrb	r3, [r2, #0]
   147a2:	2b05      	cmp	r3, #5
   147a4:	d103      	bne.n	147ae <d_count_templates_scopes+0x86>
   147a6:	6833      	ldr	r3, [r6, #0]
   147a8:	3301      	adds	r3, #1
   147aa:	6033      	str	r3, [r6, #0]
   147ac:	6862      	ldr	r2, [r4, #4]
   147ae:	4631      	mov	r1, r6
   147b0:	4628      	mov	r0, r5
   147b2:	f7ff ffb9 	bl	14728 <d_count_templates_scopes>
   147b6:	68a4      	ldr	r4, [r4, #8]
   147b8:	2c00      	cmp	r4, #0
   147ba:	d1bb      	bne.n	14734 <d_count_templates_scopes+0xc>
   147bc:	e7ea      	b.n	14794 <d_count_templates_scopes+0x6c>
   147be:	682b      	ldr	r3, [r5, #0]
   147c0:	3301      	adds	r3, #1
   147c2:	602b      	str	r3, [r5, #0]
   147c4:	6862      	ldr	r2, [r4, #4]
   147c6:	e7f2      	b.n	147ae <d_count_templates_scopes+0x86>
   147c8:	4770      	bx	lr
   147ca:	bf00      	nop

000147cc <d_append_buffer>:
   147cc:	b37a      	cbz	r2, 1482e <d_append_buffer+0x62>
   147ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147d2:	460d      	mov	r5, r1
   147d4:	4604      	mov	r4, r0
   147d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   147da:	18af      	adds	r7, r5, r2
   147dc:	f04f 0800 	mov.w	r8, #0
   147e0:	e009      	b.n	147f6 <d_append_buffer+0x2a>
   147e2:	460b      	mov	r3, r1
   147e4:	42bd      	cmp	r5, r7
   147e6:	f101 0101 	add.w	r1, r1, #1
   147ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   147ee:	54e6      	strb	r6, [r4, r3]
   147f0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   147f4:	d019      	beq.n	1482a <d_append_buffer+0x5e>
   147f6:	29ff      	cmp	r1, #255	; 0xff
   147f8:	f815 6b01 	ldrb.w	r6, [r5], #1
   147fc:	d1f1      	bne.n	147e2 <d_append_buffer+0x16>
   147fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14802:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14806:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1480a:	4620      	mov	r0, r4
   1480c:	4798      	blx	r3
   1480e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14812:	3301      	adds	r3, #1
   14814:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14818:	2300      	movs	r3, #0
   1481a:	2101      	movs	r1, #1
   1481c:	42bd      	cmp	r5, r7
   1481e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14822:	54e6      	strb	r6, [r4, r3]
   14824:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14828:	d1e5      	bne.n	147f6 <d_append_buffer+0x2a>
   1482a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1482e:	4770      	bx	lr

00014830 <d_number.isra.0>:
   14830:	b470      	push	{r4, r5, r6}
   14832:	6802      	ldr	r2, [r0, #0]
   14834:	7811      	ldrb	r1, [r2, #0]
   14836:	296e      	cmp	r1, #110	; 0x6e
   14838:	d018      	beq.n	1486c <d_number.isra.0+0x3c>
   1483a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1483e:	2b09      	cmp	r3, #9
   14840:	d81e      	bhi.n	14880 <d_number.isra.0+0x50>
   14842:	2600      	movs	r6, #0
   14844:	2300      	movs	r3, #0
   14846:	3201      	adds	r2, #1
   14848:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1484c:	6002      	str	r2, [r0, #0]
   1484e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   14852:	7811      	ldrb	r1, [r2, #0]
   14854:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14858:	2d09      	cmp	r5, #9
   1485a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1485e:	d9f2      	bls.n	14846 <d_number.isra.0+0x16>
   14860:	b10e      	cbz	r6, 14866 <d_number.isra.0+0x36>
   14862:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   14866:	4618      	mov	r0, r3
   14868:	bc70      	pop	{r4, r5, r6}
   1486a:	4770      	bx	lr
   1486c:	1c53      	adds	r3, r2, #1
   1486e:	6003      	str	r3, [r0, #0]
   14870:	7851      	ldrb	r1, [r2, #1]
   14872:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14876:	2a09      	cmp	r2, #9
   14878:	d802      	bhi.n	14880 <d_number.isra.0+0x50>
   1487a:	461a      	mov	r2, r3
   1487c:	2601      	movs	r6, #1
   1487e:	e7e1      	b.n	14844 <d_number.isra.0+0x14>
   14880:	2300      	movs	r3, #0
   14882:	e7f0      	b.n	14866 <d_number.isra.0+0x36>

00014884 <d_number_component>:
   14884:	6943      	ldr	r3, [r0, #20]
   14886:	6982      	ldr	r2, [r0, #24]
   14888:	4293      	cmp	r3, r2
   1488a:	b510      	push	{r4, lr}
   1488c:	da0f      	bge.n	148ae <d_number_component+0x2a>
   1488e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14892:	6901      	ldr	r1, [r0, #16]
   14894:	0092      	lsls	r2, r2, #2
   14896:	3301      	adds	r3, #1
   14898:	188c      	adds	r4, r1, r2
   1489a:	6143      	str	r3, [r0, #20]
   1489c:	d005      	beq.n	148aa <d_number_component+0x26>
   1489e:	2341      	movs	r3, #65	; 0x41
   148a0:	300c      	adds	r0, #12
   148a2:	548b      	strb	r3, [r1, r2]
   148a4:	f7ff ffc4 	bl	14830 <d_number.isra.0>
   148a8:	6060      	str	r0, [r4, #4]
   148aa:	4620      	mov	r0, r4
   148ac:	bd10      	pop	{r4, pc}
   148ae:	2400      	movs	r4, #0
   148b0:	4620      	mov	r0, r4
   148b2:	bd10      	pop	{r4, pc}

000148b4 <d_compact_number>:
   148b4:	b510      	push	{r4, lr}
   148b6:	68c3      	ldr	r3, [r0, #12]
   148b8:	781a      	ldrb	r2, [r3, #0]
   148ba:	2a5f      	cmp	r2, #95	; 0x5f
   148bc:	4604      	mov	r4, r0
   148be:	d00d      	beq.n	148dc <d_compact_number+0x28>
   148c0:	2a6e      	cmp	r2, #110	; 0x6e
   148c2:	d00f      	beq.n	148e4 <d_compact_number+0x30>
   148c4:	300c      	adds	r0, #12
   148c6:	f7ff ffb3 	bl	14830 <d_number.isra.0>
   148ca:	3001      	adds	r0, #1
   148cc:	d40a      	bmi.n	148e4 <d_compact_number+0x30>
   148ce:	68e3      	ldr	r3, [r4, #12]
   148d0:	781a      	ldrb	r2, [r3, #0]
   148d2:	2a5f      	cmp	r2, #95	; 0x5f
   148d4:	d106      	bne.n	148e4 <d_compact_number+0x30>
   148d6:	3301      	adds	r3, #1
   148d8:	60e3      	str	r3, [r4, #12]
   148da:	bd10      	pop	{r4, pc}
   148dc:	3301      	adds	r3, #1
   148de:	2000      	movs	r0, #0
   148e0:	60e3      	str	r3, [r4, #12]
   148e2:	bd10      	pop	{r4, pc}
   148e4:	f04f 30ff 	mov.w	r0, #4294967295
   148e8:	bd10      	pop	{r4, pc}
   148ea:	bf00      	nop

000148ec <d_template_param>:
   148ec:	b538      	push	{r3, r4, r5, lr}
   148ee:	68c3      	ldr	r3, [r0, #12]
   148f0:	781a      	ldrb	r2, [r3, #0]
   148f2:	2a54      	cmp	r2, #84	; 0x54
   148f4:	d001      	beq.n	148fa <d_template_param+0xe>
   148f6:	2000      	movs	r0, #0
   148f8:	bd38      	pop	{r3, r4, r5, pc}
   148fa:	3301      	adds	r3, #1
   148fc:	60c3      	str	r3, [r0, #12]
   148fe:	4604      	mov	r4, r0
   14900:	f7ff ffd8 	bl	148b4 <d_compact_number>
   14904:	1e05      	subs	r5, r0, #0
   14906:	dbf6      	blt.n	148f6 <d_template_param+0xa>
   14908:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1490a:	6963      	ldr	r3, [r4, #20]
   1490c:	69a1      	ldr	r1, [r4, #24]
   1490e:	3201      	adds	r2, #1
   14910:	428b      	cmp	r3, r1
   14912:	62a2      	str	r2, [r4, #40]	; 0x28
   14914:	daef      	bge.n	148f6 <d_template_param+0xa>
   14916:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1491a:	6921      	ldr	r1, [r4, #16]
   1491c:	0092      	lsls	r2, r2, #2
   1491e:	3301      	adds	r3, #1
   14920:	1888      	adds	r0, r1, r2
   14922:	6163      	str	r3, [r4, #20]
   14924:	d002      	beq.n	1492c <d_template_param+0x40>
   14926:	2305      	movs	r3, #5
   14928:	548b      	strb	r3, [r1, r2]
   1492a:	6045      	str	r5, [r0, #4]
   1492c:	bd38      	pop	{r3, r4, r5, pc}
   1492e:	bf00      	nop

00014930 <d_source_name>:
   14930:	b570      	push	{r4, r5, r6, lr}
   14932:	4604      	mov	r4, r0
   14934:	300c      	adds	r0, #12
   14936:	f7ff ff7b 	bl	14830 <d_number.isra.0>
   1493a:	1e06      	subs	r6, r0, #0
   1493c:	dd4d      	ble.n	149da <d_source_name+0xaa>
   1493e:	68e5      	ldr	r5, [r4, #12]
   14940:	6863      	ldr	r3, [r4, #4]
   14942:	1b5b      	subs	r3, r3, r5
   14944:	429e      	cmp	r6, r3
   14946:	dc2b      	bgt.n	149a0 <d_source_name+0x70>
   14948:	68a2      	ldr	r2, [r4, #8]
   1494a:	19ab      	adds	r3, r5, r6
   1494c:	0752      	lsls	r2, r2, #29
   1494e:	60e3      	str	r3, [r4, #12]
   14950:	d504      	bpl.n	1495c <d_source_name+0x2c>
   14952:	5daa      	ldrb	r2, [r5, r6]
   14954:	2a24      	cmp	r2, #36	; 0x24
   14956:	bf04      	itt	eq
   14958:	3301      	addeq	r3, #1
   1495a:	60e3      	streq	r3, [r4, #12]
   1495c:	2e09      	cmp	r6, #9
   1495e:	dd0c      	ble.n	1497a <d_source_name+0x4a>
   14960:	2208      	movs	r2, #8
   14962:	491f      	ldr	r1, [pc, #124]	; (149e0 <d_source_name+0xb0>)
   14964:	4628      	mov	r0, r5
   14966:	f009 fcd3 	bl	1e310 <memcmp>
   1496a:	b930      	cbnz	r0, 1497a <d_source_name+0x4a>
   1496c:	7a2b      	ldrb	r3, [r5, #8]
   1496e:	2b2e      	cmp	r3, #46	; 0x2e
   14970:	d019      	beq.n	149a6 <d_source_name+0x76>
   14972:	2b5f      	cmp	r3, #95	; 0x5f
   14974:	d017      	beq.n	149a6 <d_source_name+0x76>
   14976:	2b24      	cmp	r3, #36	; 0x24
   14978:	d015      	beq.n	149a6 <d_source_name+0x76>
   1497a:	6963      	ldr	r3, [r4, #20]
   1497c:	69a2      	ldr	r2, [r4, #24]
   1497e:	4293      	cmp	r3, r2
   14980:	da0e      	bge.n	149a0 <d_source_name+0x70>
   14982:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14986:	6921      	ldr	r1, [r4, #16]
   14988:	0092      	lsls	r2, r2, #2
   1498a:	3301      	adds	r3, #1
   1498c:	1888      	adds	r0, r1, r2
   1498e:	6163      	str	r3, [r4, #20]
   14990:	d006      	beq.n	149a0 <d_source_name+0x70>
   14992:	b12d      	cbz	r5, 149a0 <d_source_name+0x70>
   14994:	2300      	movs	r3, #0
   14996:	548b      	strb	r3, [r1, r2]
   14998:	6045      	str	r5, [r0, #4]
   1499a:	6086      	str	r6, [r0, #8]
   1499c:	62e0      	str	r0, [r4, #44]	; 0x2c
   1499e:	bd70      	pop	{r4, r5, r6, pc}
   149a0:	2000      	movs	r0, #0
   149a2:	62e0      	str	r0, [r4, #44]	; 0x2c
   149a4:	bd70      	pop	{r4, r5, r6, pc}
   149a6:	7a6b      	ldrb	r3, [r5, #9]
   149a8:	2b4e      	cmp	r3, #78	; 0x4e
   149aa:	d1e6      	bne.n	1497a <d_source_name+0x4a>
   149ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   149ae:	6962      	ldr	r2, [r4, #20]
   149b0:	69a1      	ldr	r1, [r4, #24]
   149b2:	3316      	adds	r3, #22
   149b4:	1b9e      	subs	r6, r3, r6
   149b6:	428a      	cmp	r2, r1
   149b8:	6326      	str	r6, [r4, #48]	; 0x30
   149ba:	daf1      	bge.n	149a0 <d_source_name+0x70>
   149bc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   149c0:	6921      	ldr	r1, [r4, #16]
   149c2:	009b      	lsls	r3, r3, #2
   149c4:	3201      	adds	r2, #1
   149c6:	18c8      	adds	r0, r1, r3
   149c8:	6162      	str	r2, [r4, #20]
   149ca:	d0ea      	beq.n	149a2 <d_source_name+0x72>
   149cc:	2500      	movs	r5, #0
   149ce:	54cd      	strb	r5, [r1, r3]
   149d0:	4a04      	ldr	r2, [pc, #16]	; (149e4 <d_source_name+0xb4>)
   149d2:	6042      	str	r2, [r0, #4]
   149d4:	2315      	movs	r3, #21
   149d6:	6083      	str	r3, [r0, #8]
   149d8:	e7e3      	b.n	149a2 <d_source_name+0x72>
   149da:	2000      	movs	r0, #0
   149dc:	bd70      	pop	{r4, r5, r6, pc}
   149de:	bf00      	nop
   149e0:	00024444 	.word	0x00024444
   149e4:	00024450 	.word	0x00024450

000149e8 <d_abi_tags>:
   149e8:	b570      	push	{r4, r5, r6, lr}
   149ea:	68c3      	ldr	r3, [r0, #12]
   149ec:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   149ee:	781a      	ldrb	r2, [r3, #0]
   149f0:	2a42      	cmp	r2, #66	; 0x42
   149f2:	4604      	mov	r4, r0
   149f4:	460d      	mov	r5, r1
   149f6:	d10f      	bne.n	14a18 <d_abi_tags+0x30>
   149f8:	3301      	adds	r3, #1
   149fa:	60e3      	str	r3, [r4, #12]
   149fc:	4620      	mov	r0, r4
   149fe:	f7ff ff97 	bl	14930 <d_source_name>
   14a02:	462a      	mov	r2, r5
   14a04:	4603      	mov	r3, r0
   14a06:	214b      	movs	r1, #75	; 0x4b
   14a08:	4620      	mov	r0, r4
   14a0a:	f7ff fdbf 	bl	1458c <d_make_comp>
   14a0e:	68e3      	ldr	r3, [r4, #12]
   14a10:	781a      	ldrb	r2, [r3, #0]
   14a12:	2a42      	cmp	r2, #66	; 0x42
   14a14:	4605      	mov	r5, r0
   14a16:	d0ef      	beq.n	149f8 <d_abi_tags+0x10>
   14a18:	62e6      	str	r6, [r4, #44]	; 0x2c
   14a1a:	4628      	mov	r0, r5
   14a1c:	bd70      	pop	{r4, r5, r6, pc}
   14a1e:	bf00      	nop

00014a20 <d_substitution>:
   14a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a24:	4605      	mov	r5, r0
   14a26:	68c0      	ldr	r0, [r0, #12]
   14a28:	7803      	ldrb	r3, [r0, #0]
   14a2a:	2b53      	cmp	r3, #83	; 0x53
   14a2c:	d002      	beq.n	14a34 <d_substitution+0x14>
   14a2e:	2000      	movs	r0, #0
   14a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a34:	1c43      	adds	r3, r0, #1
   14a36:	60eb      	str	r3, [r5, #12]
   14a38:	7842      	ldrb	r2, [r0, #1]
   14a3a:	b1a2      	cbz	r2, 14a66 <d_substitution+0x46>
   14a3c:	1c83      	adds	r3, r0, #2
   14a3e:	60eb      	str	r3, [r5, #12]
   14a40:	7842      	ldrb	r2, [r0, #1]
   14a42:	2a5f      	cmp	r2, #95	; 0x5f
   14a44:	d15a      	bne.n	14afc <d_substitution+0xdc>
   14a46:	2300      	movs	r3, #0
   14a48:	6a2a      	ldr	r2, [r5, #32]
   14a4a:	4293      	cmp	r3, r2
   14a4c:	d2ef      	bcs.n	14a2e <d_substitution+0xe>
   14a4e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a50:	69e9      	ldr	r1, [r5, #28]
   14a52:	3201      	adds	r2, #1
   14a54:	62aa      	str	r2, [r5, #40]	; 0x28
   14a56:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   14a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a5e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   14a62:	2b19      	cmp	r3, #25
   14a64:	d94f      	bls.n	14b06 <d_substitution+0xe6>
   14a66:	68ab      	ldr	r3, [r5, #8]
   14a68:	f003 0308 	and.w	r3, r3, #8
   14a6c:	2b00      	cmp	r3, #0
   14a6e:	bf14      	ite	ne
   14a70:	2401      	movne	r4, #1
   14a72:	2400      	moveq	r4, #0
   14a74:	d101      	bne.n	14a7a <d_substitution+0x5a>
   14a76:	2900      	cmp	r1, #0
   14a78:	d169      	bne.n	14b4e <d_substitution+0x12e>
   14a7a:	4b46      	ldr	r3, [pc, #280]	; (14b94 <d_substitution+0x174>)
   14a7c:	2174      	movs	r1, #116	; 0x74
   14a7e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   14a82:	e003      	b.n	14a8c <d_substitution+0x6c>
   14a84:	331c      	adds	r3, #28
   14a86:	4283      	cmp	r3, r0
   14a88:	d2d1      	bcs.n	14a2e <d_substitution+0xe>
   14a8a:	7819      	ldrb	r1, [r3, #0]
   14a8c:	428a      	cmp	r2, r1
   14a8e:	d1f9      	bne.n	14a84 <d_substitution+0x64>
   14a90:	695e      	ldr	r6, [r3, #20]
   14a92:	2e00      	cmp	r6, #0
   14a94:	d07b      	beq.n	14b8e <d_substitution+0x16e>
   14a96:	696a      	ldr	r2, [r5, #20]
   14a98:	69a9      	ldr	r1, [r5, #24]
   14a9a:	428a      	cmp	r2, r1
   14a9c:	da63      	bge.n	14b66 <d_substitution+0x146>
   14a9e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   14aa2:	f8d5 e010 	ldr.w	lr, [r5, #16]
   14aa6:	f8d3 8018 	ldr.w	r8, [r3, #24]
   14aaa:	00bf      	lsls	r7, r7, #2
   14aac:	3201      	adds	r2, #1
   14aae:	eb1e 0007 	adds.w	r0, lr, r7
   14ab2:	616a      	str	r2, [r5, #20]
   14ab4:	d006      	beq.n	14ac4 <d_substitution+0xa4>
   14ab6:	f04f 0c18 	mov.w	ip, #24
   14aba:	f80e c007 	strb.w	ip, [lr, r7]
   14abe:	6046      	str	r6, [r0, #4]
   14ac0:	f8c0 8008 	str.w	r8, [r0, #8]
   14ac4:	62e8      	str	r0, [r5, #44]	; 0x2c
   14ac6:	2c00      	cmp	r4, #0
   14ac8:	d04a      	beq.n	14b60 <d_substitution+0x140>
   14aca:	68de      	ldr	r6, [r3, #12]
   14acc:	691c      	ldr	r4, [r3, #16]
   14ace:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14ad0:	4291      	cmp	r1, r2
   14ad2:	4423      	add	r3, r4
   14ad4:	632b      	str	r3, [r5, #48]	; 0x30
   14ad6:	dd41      	ble.n	14b5c <d_substitution+0x13c>
   14ad8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14adc:	6929      	ldr	r1, [r5, #16]
   14ade:	009b      	lsls	r3, r3, #2
   14ae0:	3201      	adds	r2, #1
   14ae2:	18c8      	adds	r0, r1, r3
   14ae4:	616a      	str	r2, [r5, #20]
   14ae6:	d003      	beq.n	14af0 <d_substitution+0xd0>
   14ae8:	2218      	movs	r2, #24
   14aea:	54ca      	strb	r2, [r1, r3]
   14aec:	6046      	str	r6, [r0, #4]
   14aee:	6084      	str	r4, [r0, #8]
   14af0:	68eb      	ldr	r3, [r5, #12]
   14af2:	781b      	ldrb	r3, [r3, #0]
   14af4:	2b42      	cmp	r3, #66	; 0x42
   14af6:	d038      	beq.n	14b6a <d_substitution+0x14a>
   14af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14afc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14b00:	b2e3      	uxtb	r3, r4
   14b02:	2b09      	cmp	r3, #9
   14b04:	d8ab      	bhi.n	14a5e <d_substitution+0x3e>
   14b06:	2100      	movs	r1, #0
   14b08:	e00d      	b.n	14b26 <d_substitution+0x106>
   14b0a:	3b30      	subs	r3, #48	; 0x30
   14b0c:	4299      	cmp	r1, r3
   14b0e:	d88e      	bhi.n	14a2e <d_substitution+0xe>
   14b10:	68e9      	ldr	r1, [r5, #12]
   14b12:	780a      	ldrb	r2, [r1, #0]
   14b14:	1c48      	adds	r0, r1, #1
   14b16:	b11a      	cbz	r2, 14b20 <d_substitution+0x100>
   14b18:	60e8      	str	r0, [r5, #12]
   14b1a:	780a      	ldrb	r2, [r1, #0]
   14b1c:	2a5f      	cmp	r2, #95	; 0x5f
   14b1e:	d014      	beq.n	14b4a <d_substitution+0x12a>
   14b20:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14b24:	4619      	mov	r1, r3
   14b26:	b2e4      	uxtb	r4, r4
   14b28:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14b2c:	2c09      	cmp	r4, #9
   14b2e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   14b32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14b36:	d9e8      	bls.n	14b0a <d_substitution+0xea>
   14b38:	2819      	cmp	r0, #25
   14b3a:	f63f af78 	bhi.w	14a2e <d_substitution+0xe>
   14b3e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14b42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14b46:	3b37      	subs	r3, #55	; 0x37
   14b48:	e7e0      	b.n	14b0c <d_substitution+0xec>
   14b4a:	3301      	adds	r3, #1
   14b4c:	e77c      	b.n	14a48 <d_substitution+0x28>
   14b4e:	68eb      	ldr	r3, [r5, #12]
   14b50:	781b      	ldrb	r3, [r3, #0]
   14b52:	3b43      	subs	r3, #67	; 0x43
   14b54:	2b01      	cmp	r3, #1
   14b56:	bf98      	it	ls
   14b58:	2401      	movls	r4, #1
   14b5a:	e78e      	b.n	14a7a <d_substitution+0x5a>
   14b5c:	2000      	movs	r0, #0
   14b5e:	e7c7      	b.n	14af0 <d_substitution+0xd0>
   14b60:	685e      	ldr	r6, [r3, #4]
   14b62:	689c      	ldr	r4, [r3, #8]
   14b64:	e7b3      	b.n	14ace <d_substitution+0xae>
   14b66:	2000      	movs	r0, #0
   14b68:	e7ac      	b.n	14ac4 <d_substitution+0xa4>
   14b6a:	4601      	mov	r1, r0
   14b6c:	4628      	mov	r0, r5
   14b6e:	f7ff ff3b 	bl	149e8 <d_abi_tags>
   14b72:	2800      	cmp	r0, #0
   14b74:	f43f af5b 	beq.w	14a2e <d_substitution+0xe>
   14b78:	6a2b      	ldr	r3, [r5, #32]
   14b7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14b7c:	4293      	cmp	r3, r2
   14b7e:	dabb      	bge.n	14af8 <d_substitution+0xd8>
   14b80:	69e9      	ldr	r1, [r5, #28]
   14b82:	1c5a      	adds	r2, r3, #1
   14b84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14b88:	622a      	str	r2, [r5, #32]
   14b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b8e:	69a9      	ldr	r1, [r5, #24]
   14b90:	696a      	ldr	r2, [r5, #20]
   14b92:	e798      	b.n	14ac6 <d_substitution+0xa6>
   14b94:	00023cac 	.word	0x00023cac

00014b98 <d_call_offset>:
   14b98:	b538      	push	{r3, r4, r5, lr}
   14b9a:	4604      	mov	r4, r0
   14b9c:	b929      	cbnz	r1, 14baa <d_call_offset+0x12>
   14b9e:	68c3      	ldr	r3, [r0, #12]
   14ba0:	781a      	ldrb	r2, [r3, #0]
   14ba2:	b132      	cbz	r2, 14bb2 <d_call_offset+0x1a>
   14ba4:	1c5a      	adds	r2, r3, #1
   14ba6:	60c2      	str	r2, [r0, #12]
   14ba8:	7819      	ldrb	r1, [r3, #0]
   14baa:	2968      	cmp	r1, #104	; 0x68
   14bac:	d019      	beq.n	14be2 <d_call_offset+0x4a>
   14bae:	2976      	cmp	r1, #118	; 0x76
   14bb0:	d001      	beq.n	14bb6 <d_call_offset+0x1e>
   14bb2:	2000      	movs	r0, #0
   14bb4:	bd38      	pop	{r3, r4, r5, pc}
   14bb6:	f104 050c 	add.w	r5, r4, #12
   14bba:	4628      	mov	r0, r5
   14bbc:	f7ff fe38 	bl	14830 <d_number.isra.0>
   14bc0:	68e3      	ldr	r3, [r4, #12]
   14bc2:	781a      	ldrb	r2, [r3, #0]
   14bc4:	2a5f      	cmp	r2, #95	; 0x5f
   14bc6:	d1f4      	bne.n	14bb2 <d_call_offset+0x1a>
   14bc8:	3301      	adds	r3, #1
   14bca:	60e3      	str	r3, [r4, #12]
   14bcc:	4628      	mov	r0, r5
   14bce:	f7ff fe2f 	bl	14830 <d_number.isra.0>
   14bd2:	68e3      	ldr	r3, [r4, #12]
   14bd4:	781a      	ldrb	r2, [r3, #0]
   14bd6:	2a5f      	cmp	r2, #95	; 0x5f
   14bd8:	d1eb      	bne.n	14bb2 <d_call_offset+0x1a>
   14bda:	3301      	adds	r3, #1
   14bdc:	60e3      	str	r3, [r4, #12]
   14bde:	2001      	movs	r0, #1
   14be0:	bd38      	pop	{r3, r4, r5, pc}
   14be2:	f104 000c 	add.w	r0, r4, #12
   14be6:	f7ff fe23 	bl	14830 <d_number.isra.0>
   14bea:	e7f2      	b.n	14bd2 <d_call_offset+0x3a>

00014bec <d_lookup_template_argument.isra.6>:
   14bec:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14bf0:	b19b      	cbz	r3, 14c1a <d_lookup_template_argument.isra.6+0x2e>
   14bf2:	680a      	ldr	r2, [r1, #0]
   14bf4:	685b      	ldr	r3, [r3, #4]
   14bf6:	2a00      	cmp	r2, #0
   14bf8:	689b      	ldr	r3, [r3, #8]
   14bfa:	db09      	blt.n	14c10 <d_lookup_template_argument.isra.6+0x24>
   14bfc:	b923      	cbnz	r3, 14c08 <d_lookup_template_argument.isra.6+0x1c>
   14bfe:	e007      	b.n	14c10 <d_lookup_template_argument.isra.6+0x24>
   14c00:	b142      	cbz	r2, 14c14 <d_lookup_template_argument.isra.6+0x28>
   14c02:	689b      	ldr	r3, [r3, #8]
   14c04:	3a01      	subs	r2, #1
   14c06:	b11b      	cbz	r3, 14c10 <d_lookup_template_argument.isra.6+0x24>
   14c08:	7819      	ldrb	r1, [r3, #0]
   14c0a:	292f      	cmp	r1, #47	; 0x2f
   14c0c:	d0f8      	beq.n	14c00 <d_lookup_template_argument.isra.6+0x14>
   14c0e:	2300      	movs	r3, #0
   14c10:	4618      	mov	r0, r3
   14c12:	4770      	bx	lr
   14c14:	685b      	ldr	r3, [r3, #4]
   14c16:	4618      	mov	r0, r3
   14c18:	4770      	bx	lr
   14c1a:	2201      	movs	r2, #1
   14c1c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14c20:	e7f6      	b.n	14c10 <d_lookup_template_argument.isra.6+0x24>
   14c22:	bf00      	nop

00014c24 <d_find_pack>:
   14c24:	2900      	cmp	r1, #0
   14c26:	d041      	beq.n	14cac <d_find_pack+0x88>
   14c28:	b538      	push	{r3, r4, r5, lr}
   14c2a:	4605      	mov	r5, r0
   14c2c:	460c      	mov	r4, r1
   14c2e:	7823      	ldrb	r3, [r4, #0]
   14c30:	2b4b      	cmp	r3, #75	; 0x4b
   14c32:	d827      	bhi.n	14c84 <d_find_pack+0x60>
   14c34:	e8df f003 	tbb	[pc, r3]
   14c38:	2626262e 	.word	0x2626262e
   14c3c:	2b2e3026 	.word	0x2b2e3026
   14c40:	2626262b 	.word	0x2626262b
   14c44:	26262626 	.word	0x26262626
   14c48:	26262626 	.word	0x26262626
   14c4c:	26262626 	.word	0x26262626
   14c50:	2626262e 	.word	0x2626262e
   14c54:	26262626 	.word	0x26262626
   14c58:	26262626 	.word	0x26262626
   14c5c:	2e262626 	.word	0x2e262626
   14c60:	26262626 	.word	0x26262626
   14c64:	2626262e 	.word	0x2626262e
   14c68:	262b2e26 	.word	0x262b2e26
   14c6c:	26262626 	.word	0x26262626
   14c70:	26262626 	.word	0x26262626
   14c74:	26262626 	.word	0x26262626
   14c78:	26262e2e 	.word	0x26262e2e
   14c7c:	2e2e2e26 	.word	0x2e2e2e26
   14c80:	2e2e2626 	.word	0x2e2e2626
   14c84:	6861      	ldr	r1, [r4, #4]
   14c86:	4628      	mov	r0, r5
   14c88:	f7ff ffcc 	bl	14c24 <d_find_pack>
   14c8c:	b918      	cbnz	r0, 14c96 <d_find_pack+0x72>
   14c8e:	68a4      	ldr	r4, [r4, #8]
   14c90:	2c00      	cmp	r4, #0
   14c92:	d1cc      	bne.n	14c2e <d_find_pack+0xa>
   14c94:	2000      	movs	r0, #0
   14c96:	bd38      	pop	{r3, r4, r5, pc}
   14c98:	1d21      	adds	r1, r4, #4
   14c9a:	4628      	mov	r0, r5
   14c9c:	f7ff ffa6 	bl	14bec <d_lookup_template_argument.isra.6>
   14ca0:	2800      	cmp	r0, #0
   14ca2:	d0f7      	beq.n	14c94 <d_find_pack+0x70>
   14ca4:	7803      	ldrb	r3, [r0, #0]
   14ca6:	2b2f      	cmp	r3, #47	; 0x2f
   14ca8:	d1f4      	bne.n	14c94 <d_find_pack+0x70>
   14caa:	bd38      	pop	{r3, r4, r5, pc}
   14cac:	2000      	movs	r0, #0
   14cae:	4770      	bx	lr

00014cb0 <d_growable_string_callback_adapter>:
   14cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cb2:	4615      	mov	r5, r2
   14cb4:	6852      	ldr	r2, [r2, #4]
   14cb6:	68ac      	ldr	r4, [r5, #8]
   14cb8:	1c4b      	adds	r3, r1, #1
   14cba:	4413      	add	r3, r2
   14cbc:	42a3      	cmp	r3, r4
   14cbe:	b083      	sub	sp, #12
   14cc0:	460e      	mov	r6, r1
   14cc2:	4607      	mov	r7, r0
   14cc4:	d813      	bhi.n	14cee <d_growable_string_callback_adapter+0x3e>
   14cc6:	68ec      	ldr	r4, [r5, #12]
   14cc8:	b10c      	cbz	r4, 14cce <d_growable_string_callback_adapter+0x1e>
   14cca:	b003      	add	sp, #12
   14ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cce:	e895 0009 	ldmia.w	r5, {r0, r3}
   14cd2:	4632      	mov	r2, r6
   14cd4:	4639      	mov	r1, r7
   14cd6:	4418      	add	r0, r3
   14cd8:	f009 fb4a 	bl	1e370 <memcpy>
   14cdc:	682b      	ldr	r3, [r5, #0]
   14cde:	686a      	ldr	r2, [r5, #4]
   14ce0:	4433      	add	r3, r6
   14ce2:	549c      	strb	r4, [r3, r2]
   14ce4:	686b      	ldr	r3, [r5, #4]
   14ce6:	441e      	add	r6, r3
   14ce8:	606e      	str	r6, [r5, #4]
   14cea:	b003      	add	sp, #12
   14cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cee:	68ea      	ldr	r2, [r5, #12]
   14cf0:	2a00      	cmp	r2, #0
   14cf2:	d1ea      	bne.n	14cca <d_growable_string_callback_adapter+0x1a>
   14cf4:	b91c      	cbnz	r4, 14cfe <d_growable_string_callback_adapter+0x4e>
   14cf6:	2b02      	cmp	r3, #2
   14cf8:	f04f 0402 	mov.w	r4, #2
   14cfc:	d902      	bls.n	14d04 <d_growable_string_callback_adapter+0x54>
   14cfe:	0064      	lsls	r4, r4, #1
   14d00:	42a3      	cmp	r3, r4
   14d02:	d8fc      	bhi.n	14cfe <d_growable_string_callback_adapter+0x4e>
   14d04:	4621      	mov	r1, r4
   14d06:	6828      	ldr	r0, [r5, #0]
   14d08:	f009 fcc2 	bl	1e690 <realloc>
   14d0c:	b110      	cbz	r0, 14d14 <d_growable_string_callback_adapter+0x64>
   14d0e:	6028      	str	r0, [r5, #0]
   14d10:	60ac      	str	r4, [r5, #8]
   14d12:	e7d8      	b.n	14cc6 <d_growable_string_callback_adapter+0x16>
   14d14:	9001      	str	r0, [sp, #4]
   14d16:	6828      	ldr	r0, [r5, #0]
   14d18:	f008 ffda 	bl	1dcd0 <free>
   14d1c:	9b01      	ldr	r3, [sp, #4]
   14d1e:	602b      	str	r3, [r5, #0]
   14d20:	2201      	movs	r2, #1
   14d22:	606b      	str	r3, [r5, #4]
   14d24:	60ab      	str	r3, [r5, #8]
   14d26:	60ea      	str	r2, [r5, #12]
   14d28:	e7cf      	b.n	14cca <d_growable_string_callback_adapter+0x1a>
   14d2a:	bf00      	nop

00014d2c <d_append_num>:
   14d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d30:	b088      	sub	sp, #32
   14d32:	460a      	mov	r2, r1
   14d34:	4604      	mov	r4, r0
   14d36:	491b      	ldr	r1, [pc, #108]	; (14da4 <d_append_num+0x78>)
   14d38:	a801      	add	r0, sp, #4
   14d3a:	f009 feb7 	bl	1eaac <sprintf>
   14d3e:	a801      	add	r0, sp, #4
   14d40:	f00a f85e 	bl	1ee00 <strlen>
   14d44:	b350      	cbz	r0, 14d9c <d_append_num+0x70>
   14d46:	ad01      	add	r5, sp, #4
   14d48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14d4c:	182f      	adds	r7, r5, r0
   14d4e:	f04f 0800 	mov.w	r8, #0
   14d52:	e009      	b.n	14d68 <d_append_num+0x3c>
   14d54:	460b      	mov	r3, r1
   14d56:	42bd      	cmp	r5, r7
   14d58:	f101 0101 	add.w	r1, r1, #1
   14d5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14d60:	54e6      	strb	r6, [r4, r3]
   14d62:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14d66:	d019      	beq.n	14d9c <d_append_num+0x70>
   14d68:	29ff      	cmp	r1, #255	; 0xff
   14d6a:	f815 6b01 	ldrb.w	r6, [r5], #1
   14d6e:	d1f1      	bne.n	14d54 <d_append_num+0x28>
   14d70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14d74:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14d78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14d7c:	4620      	mov	r0, r4
   14d7e:	4798      	blx	r3
   14d80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14d84:	3301      	adds	r3, #1
   14d86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14d8a:	2300      	movs	r3, #0
   14d8c:	2101      	movs	r1, #1
   14d8e:	42bd      	cmp	r5, r7
   14d90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14d94:	54e6      	strb	r6, [r4, r3]
   14d96:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14d9a:	d1e5      	bne.n	14d68 <d_append_num+0x3c>
   14d9c:	b008      	add	sp, #32
   14d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14da2:	bf00      	nop
   14da4:	00024468 	.word	0x00024468

00014da8 <d_exprlist>:
   14da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dac:	68c3      	ldr	r3, [r0, #12]
   14dae:	781d      	ldrb	r5, [r3, #0]
   14db0:	b083      	sub	sp, #12
   14db2:	2200      	movs	r2, #0
   14db4:	428d      	cmp	r5, r1
   14db6:	4604      	mov	r4, r0
   14db8:	9201      	str	r2, [sp, #4]
   14dba:	f000 81c6 	beq.w	1514a <d_exprlist+0x3a2>
   14dbe:	4688      	mov	r8, r1
   14dc0:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15260 <d_exprlist+0x4b8>
   14dc4:	ae01      	add	r6, sp, #4
   14dc6:	e023      	b.n	14e10 <d_exprlist+0x68>
   14dc8:	2a66      	cmp	r2, #102	; 0x66
   14dca:	d04c      	beq.n	14e66 <d_exprlist+0xbe>
   14dcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14dd0:	2909      	cmp	r1, #9
   14dd2:	f200 8217 	bhi.w	15204 <d_exprlist+0x45c>
   14dd6:	4620      	mov	r0, r4
   14dd8:	f001 fb10 	bl	163fc <d_unqualified_name>
   14ddc:	4605      	mov	r5, r0
   14dde:	2800      	cmp	r0, #0
   14de0:	f000 8170 	beq.w	150c4 <d_exprlist+0x31c>
   14de4:	68e3      	ldr	r3, [r4, #12]
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	2b49      	cmp	r3, #73	; 0x49
   14dea:	f000 8092 	beq.w	14f12 <d_exprlist+0x16a>
   14dee:	6367      	str	r7, [r4, #52]	; 0x34
   14df0:	462a      	mov	r2, r5
   14df2:	2300      	movs	r3, #0
   14df4:	212e      	movs	r1, #46	; 0x2e
   14df6:	4620      	mov	r0, r4
   14df8:	f7ff fbc8 	bl	1458c <d_make_comp>
   14dfc:	6030      	str	r0, [r6, #0]
   14dfe:	2800      	cmp	r0, #0
   14e00:	d05b      	beq.n	14eba <d_exprlist+0x112>
   14e02:	68e3      	ldr	r3, [r4, #12]
   14e04:	781a      	ldrb	r2, [r3, #0]
   14e06:	4542      	cmp	r2, r8
   14e08:	f100 0608 	add.w	r6, r0, #8
   14e0c:	f000 8107 	beq.w	1501e <d_exprlist+0x276>
   14e10:	2501      	movs	r5, #1
   14e12:	6b67      	ldr	r7, [r4, #52]	; 0x34
   14e14:	6365      	str	r5, [r4, #52]	; 0x34
   14e16:	781a      	ldrb	r2, [r3, #0]
   14e18:	2a4c      	cmp	r2, #76	; 0x4c
   14e1a:	d047      	beq.n	14eac <d_exprlist+0x104>
   14e1c:	2a54      	cmp	r2, #84	; 0x54
   14e1e:	d051      	beq.n	14ec4 <d_exprlist+0x11c>
   14e20:	2a73      	cmp	r2, #115	; 0x73
   14e22:	d1d1      	bne.n	14dc8 <d_exprlist+0x20>
   14e24:	785a      	ldrb	r2, [r3, #1]
   14e26:	2a72      	cmp	r2, #114	; 0x72
   14e28:	f000 80e2 	beq.w	14ff0 <d_exprlist+0x248>
   14e2c:	2a70      	cmp	r2, #112	; 0x70
   14e2e:	f000 80fd 	beq.w	1502c <d_exprlist+0x284>
   14e32:	4620      	mov	r0, r4
   14e34:	f001 fa22 	bl	1627c <d_operator_name>
   14e38:	4605      	mov	r5, r0
   14e3a:	2800      	cmp	r0, #0
   14e3c:	f000 8142 	beq.w	150c4 <d_exprlist+0x31c>
   14e40:	782b      	ldrb	r3, [r5, #0]
   14e42:	2b31      	cmp	r3, #49	; 0x31
   14e44:	d043      	beq.n	14ece <d_exprlist+0x126>
   14e46:	2b32      	cmp	r3, #50	; 0x32
   14e48:	d05c      	beq.n	14f04 <d_exprlist+0x15c>
   14e4a:	2b33      	cmp	r3, #51	; 0x33
   14e4c:	d17b      	bne.n	14f46 <d_exprlist+0x19e>
   14e4e:	68e3      	ldr	r3, [r4, #12]
   14e50:	781a      	ldrb	r2, [r3, #0]
   14e52:	2a5f      	cmp	r2, #95	; 0x5f
   14e54:	f040 80c1 	bne.w	14fda <d_exprlist+0x232>
   14e58:	3301      	adds	r3, #1
   14e5a:	60e3      	str	r3, [r4, #12]
   14e5c:	2145      	movs	r1, #69	; 0x45
   14e5e:	4620      	mov	r0, r4
   14e60:	f7ff ffa2 	bl	14da8 <d_exprlist>
   14e64:	e0bc      	b.n	14fe0 <d_exprlist+0x238>
   14e66:	785a      	ldrb	r2, [r3, #1]
   14e68:	2a70      	cmp	r2, #112	; 0x70
   14e6a:	d1e2      	bne.n	14e32 <d_exprlist+0x8a>
   14e6c:	1c9a      	adds	r2, r3, #2
   14e6e:	60e2      	str	r2, [r4, #12]
   14e70:	789a      	ldrb	r2, [r3, #2]
   14e72:	2a54      	cmp	r2, #84	; 0x54
   14e74:	d069      	beq.n	14f4a <d_exprlist+0x1a2>
   14e76:	4620      	mov	r0, r4
   14e78:	f7ff fd1c 	bl	148b4 <d_compact_number>
   14e7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14e80:	4298      	cmp	r0, r3
   14e82:	d060      	beq.n	14f46 <d_exprlist+0x19e>
   14e84:	1c43      	adds	r3, r0, #1
   14e86:	d05e      	beq.n	14f46 <d_exprlist+0x19e>
   14e88:	3001      	adds	r0, #1
   14e8a:	6963      	ldr	r3, [r4, #20]
   14e8c:	69a2      	ldr	r2, [r4, #24]
   14e8e:	4293      	cmp	r3, r2
   14e90:	da59      	bge.n	14f46 <d_exprlist+0x19e>
   14e92:	6922      	ldr	r2, [r4, #16]
   14e94:	1c59      	adds	r1, r3, #1
   14e96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14e9a:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14e9e:	6161      	str	r1, [r4, #20]
   14ea0:	d051      	beq.n	14f46 <d_exprlist+0x19e>
   14ea2:	2106      	movs	r1, #6
   14ea4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14ea8:	6068      	str	r0, [r5, #4]
   14eaa:	e7a0      	b.n	14dee <d_exprlist+0x46>
   14eac:	4620      	mov	r0, r4
   14eae:	f001 fef3 	bl	16c98 <d_expr_primary>
   14eb2:	4605      	mov	r5, r0
   14eb4:	6367      	str	r7, [r4, #52]	; 0x34
   14eb6:	2d00      	cmp	r5, #0
   14eb8:	d19a      	bne.n	14df0 <d_exprlist+0x48>
   14eba:	2500      	movs	r5, #0
   14ebc:	4628      	mov	r0, r5
   14ebe:	b003      	add	sp, #12
   14ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec4:	4620      	mov	r0, r4
   14ec6:	f7ff fd11 	bl	148ec <d_template_param>
   14eca:	4605      	mov	r5, r0
   14ecc:	e7f2      	b.n	14eb4 <d_exprlist+0x10c>
   14ece:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14ed2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14ed4:	f8db 2008 	ldr.w	r2, [fp, #8]
   14ed8:	f8db a000 	ldr.w	sl, [fp]
   14edc:	3a02      	subs	r2, #2
   14ede:	4413      	add	r3, r2
   14ee0:	6323      	str	r3, [r4, #48]	; 0x30
   14ee2:	4650      	mov	r0, sl
   14ee4:	4649      	mov	r1, r9
   14ee6:	f009 fe0f 	bl	1eb08 <strcmp>
   14eea:	2800      	cmp	r0, #0
   14eec:	f000 80e6 	beq.w	150bc <d_exprlist+0x314>
   14ef0:	f8db 300c 	ldr.w	r3, [fp, #12]
   14ef4:	2b03      	cmp	r3, #3
   14ef6:	d826      	bhi.n	14f46 <d_exprlist+0x19e>
   14ef8:	e8df f013 	tbh	[pc, r3, lsl #1]
   14efc:	0135002b 	.word	0x0135002b
   14f00:	00a50033 	.word	0x00a50033
   14f04:	686b      	ldr	r3, [r5, #4]
   14f06:	2b03      	cmp	r3, #3
   14f08:	d81d      	bhi.n	14f46 <d_exprlist+0x19e>
   14f0a:	e8df f003 	tbb	[pc, r3]
   14f0e:	6622      	.short	0x6622
   14f10:	1c1c      	.short	0x1c1c
   14f12:	4620      	mov	r0, r4
   14f14:	f000 fc04 	bl	15720 <d_template_args>
   14f18:	462a      	mov	r2, r5
   14f1a:	4603      	mov	r3, r0
   14f1c:	2104      	movs	r1, #4
   14f1e:	4620      	mov	r0, r4
   14f20:	f7ff fb34 	bl	1458c <d_make_comp>
   14f24:	4605      	mov	r5, r0
   14f26:	e7c5      	b.n	14eb4 <d_exprlist+0x10c>
   14f28:	2a74      	cmp	r2, #116	; 0x74
   14f2a:	d182      	bne.n	14e32 <d_exprlist+0x8a>
   14f2c:	785b      	ldrb	r3, [r3, #1]
   14f2e:	2b6c      	cmp	r3, #108	; 0x6c
   14f30:	f47f af7f 	bne.w	14e32 <d_exprlist+0x8a>
   14f34:	4620      	mov	r0, r4
   14f36:	f000 fdb9 	bl	15aac <d_type>
   14f3a:	68e3      	ldr	r3, [r4, #12]
   14f3c:	785a      	ldrb	r2, [r3, #1]
   14f3e:	4605      	mov	r5, r0
   14f40:	2a00      	cmp	r2, #0
   14f42:	f040 8169 	bne.w	15218 <d_exprlist+0x470>
   14f46:	6367      	str	r7, [r4, #52]	; 0x34
   14f48:	e7b7      	b.n	14eba <d_exprlist+0x112>
   14f4a:	3303      	adds	r3, #3
   14f4c:	60e3      	str	r3, [r4, #12]
   14f4e:	2000      	movs	r0, #0
   14f50:	e79b      	b.n	14e8a <d_exprlist+0xe2>
   14f52:	462a      	mov	r2, r5
   14f54:	2300      	movs	r3, #0
   14f56:	2135      	movs	r1, #53	; 0x35
   14f58:	4620      	mov	r0, r4
   14f5a:	f7ff fb17 	bl	1458c <d_make_comp>
   14f5e:	4605      	mov	r5, r0
   14f60:	e7a8      	b.n	14eb4 <d_exprlist+0x10c>
   14f62:	f1ba 0f00 	cmp.w	sl, #0
   14f66:	d0ee      	beq.n	14f46 <d_exprlist+0x19e>
   14f68:	686b      	ldr	r3, [r5, #4]
   14f6a:	681b      	ldr	r3, [r3, #0]
   14f6c:	785a      	ldrb	r2, [r3, #1]
   14f6e:	2a63      	cmp	r2, #99	; 0x63
   14f70:	f000 80d2 	beq.w	15118 <d_exprlist+0x370>
   14f74:	f89a 3000 	ldrb.w	r3, [sl]
   14f78:	2b66      	cmp	r3, #102	; 0x66
   14f7a:	f000 80ef 	beq.w	1515c <d_exprlist+0x3b4>
   14f7e:	4620      	mov	r0, r4
   14f80:	f000 f970 	bl	15264 <d_expression_1>
   14f84:	4683      	mov	fp, r0
   14f86:	49b1      	ldr	r1, [pc, #708]	; (1524c <d_exprlist+0x4a4>)
   14f88:	4650      	mov	r0, sl
   14f8a:	f009 fdbd 	bl	1eb08 <strcmp>
   14f8e:	2800      	cmp	r0, #0
   14f90:	f000 809d 	beq.w	150ce <d_exprlist+0x326>
   14f94:	49ae      	ldr	r1, [pc, #696]	; (15250 <d_exprlist+0x4a8>)
   14f96:	4650      	mov	r0, sl
   14f98:	f009 fdb6 	bl	1eb08 <strcmp>
   14f9c:	b130      	cbz	r0, 14fac <d_exprlist+0x204>
   14f9e:	4650      	mov	r0, sl
   14fa0:	49ac      	ldr	r1, [pc, #688]	; (15254 <d_exprlist+0x4ac>)
   14fa2:	f009 fdb1 	bl	1eb08 <strcmp>
   14fa6:	2800      	cmp	r0, #0
   14fa8:	f040 8083 	bne.w	150b2 <d_exprlist+0x30a>
   14fac:	4620      	mov	r0, r4
   14fae:	f001 fa25 	bl	163fc <d_unqualified_name>
   14fb2:	68e3      	ldr	r3, [r4, #12]
   14fb4:	781b      	ldrb	r3, [r3, #0]
   14fb6:	2b49      	cmp	r3, #73	; 0x49
   14fb8:	4682      	mov	sl, r0
   14fba:	f000 80e9 	beq.w	15190 <d_exprlist+0x3e8>
   14fbe:	4653      	mov	r3, sl
   14fc0:	465a      	mov	r2, fp
   14fc2:	2138      	movs	r1, #56	; 0x38
   14fc4:	4620      	mov	r0, r4
   14fc6:	f7ff fae1 	bl	1458c <d_make_comp>
   14fca:	462a      	mov	r2, r5
   14fcc:	4603      	mov	r3, r0
   14fce:	2137      	movs	r1, #55	; 0x37
   14fd0:	4620      	mov	r0, r4
   14fd2:	f7ff fadb 	bl	1458c <d_make_comp>
   14fd6:	4605      	mov	r5, r0
   14fd8:	e76c      	b.n	14eb4 <d_exprlist+0x10c>
   14fda:	4620      	mov	r0, r4
   14fdc:	f000 f942 	bl	15264 <d_expression_1>
   14fe0:	4603      	mov	r3, r0
   14fe2:	462a      	mov	r2, r5
   14fe4:	2136      	movs	r1, #54	; 0x36
   14fe6:	4620      	mov	r0, r4
   14fe8:	f7ff fad0 	bl	1458c <d_make_comp>
   14fec:	4605      	mov	r5, r0
   14fee:	e761      	b.n	14eb4 <d_exprlist+0x10c>
   14ff0:	3302      	adds	r3, #2
   14ff2:	60e3      	str	r3, [r4, #12]
   14ff4:	4620      	mov	r0, r4
   14ff6:	f000 fd59 	bl	15aac <d_type>
   14ffa:	4682      	mov	sl, r0
   14ffc:	4620      	mov	r0, r4
   14ffe:	f001 f9fd 	bl	163fc <d_unqualified_name>
   15002:	68e3      	ldr	r3, [r4, #12]
   15004:	781b      	ldrb	r3, [r3, #0]
   15006:	2b49      	cmp	r3, #73	; 0x49
   15008:	4683      	mov	fp, r0
   1500a:	f000 8093 	beq.w	15134 <d_exprlist+0x38c>
   1500e:	4603      	mov	r3, r0
   15010:	4629      	mov	r1, r5
   15012:	4652      	mov	r2, sl
   15014:	4620      	mov	r0, r4
   15016:	f7ff fab9 	bl	1458c <d_make_comp>
   1501a:	4605      	mov	r5, r0
   1501c:	e74a      	b.n	14eb4 <d_exprlist+0x10c>
   1501e:	9d01      	ldr	r5, [sp, #4]
   15020:	3301      	adds	r3, #1
   15022:	4628      	mov	r0, r5
   15024:	60e3      	str	r3, [r4, #12]
   15026:	b003      	add	sp, #12
   15028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1502c:	3302      	adds	r3, #2
   1502e:	60e3      	str	r3, [r4, #12]
   15030:	4620      	mov	r0, r4
   15032:	f000 f917 	bl	15264 <d_expression_1>
   15036:	2300      	movs	r3, #0
   15038:	4602      	mov	r2, r0
   1503a:	214a      	movs	r1, #74	; 0x4a
   1503c:	4620      	mov	r0, r4
   1503e:	f7ff faa5 	bl	1458c <d_make_comp>
   15042:	4605      	mov	r5, r0
   15044:	e736      	b.n	14eb4 <d_exprlist+0x10c>
   15046:	f1ba 0f00 	cmp.w	sl, #0
   1504a:	f43f af7c 	beq.w	14f46 <d_exprlist+0x19e>
   1504e:	4982      	ldr	r1, [pc, #520]	; (15258 <d_exprlist+0x4b0>)
   15050:	4650      	mov	r0, sl
   15052:	f009 fd59 	bl	1eb08 <strcmp>
   15056:	2800      	cmp	r0, #0
   15058:	d03f      	beq.n	150da <d_exprlist+0x332>
   1505a:	f89a 3000 	ldrb.w	r3, [sl]
   1505e:	2b66      	cmp	r3, #102	; 0x66
   15060:	f000 80bd 	beq.w	151de <d_exprlist+0x436>
   15064:	2b6e      	cmp	r3, #110	; 0x6e
   15066:	f47f af6e 	bne.w	14f46 <d_exprlist+0x19e>
   1506a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1506e:	2b77      	cmp	r3, #119	; 0x77
   15070:	d002      	beq.n	15078 <d_exprlist+0x2d0>
   15072:	2b61      	cmp	r3, #97	; 0x61
   15074:	f47f af67 	bne.w	14f46 <d_exprlist+0x19e>
   15078:	215f      	movs	r1, #95	; 0x5f
   1507a:	4620      	mov	r0, r4
   1507c:	f7ff fe94 	bl	14da8 <d_exprlist>
   15080:	4682      	mov	sl, r0
   15082:	4620      	mov	r0, r4
   15084:	f000 fd12 	bl	15aac <d_type>
   15088:	68e3      	ldr	r3, [r4, #12]
   1508a:	781a      	ldrb	r2, [r3, #0]
   1508c:	2a45      	cmp	r2, #69	; 0x45
   1508e:	4683      	mov	fp, r0
   15090:	f000 80a1 	beq.w	151d6 <d_exprlist+0x42e>
   15094:	2a70      	cmp	r2, #112	; 0x70
   15096:	f000 80a6 	beq.w	151e6 <d_exprlist+0x43e>
   1509a:	2a69      	cmp	r2, #105	; 0x69
   1509c:	f47f af53 	bne.w	14f46 <d_exprlist+0x19e>
   150a0:	785b      	ldrb	r3, [r3, #1]
   150a2:	2b6c      	cmp	r3, #108	; 0x6c
   150a4:	f47f af4f 	bne.w	14f46 <d_exprlist+0x19e>
   150a8:	4620      	mov	r0, r4
   150aa:	f000 f8db 	bl	15264 <d_expression_1>
   150ae:	4603      	mov	r3, r0
   150b0:	e01f      	b.n	150f2 <d_exprlist+0x34a>
   150b2:	4620      	mov	r0, r4
   150b4:	f000 f8d6 	bl	15264 <d_expression_1>
   150b8:	4682      	mov	sl, r0
   150ba:	e780      	b.n	14fbe <d_exprlist+0x216>
   150bc:	4620      	mov	r0, r4
   150be:	f000 fcf5 	bl	15aac <d_type>
   150c2:	e78d      	b.n	14fe0 <d_exprlist+0x238>
   150c4:	4628      	mov	r0, r5
   150c6:	6367      	str	r7, [r4, #52]	; 0x34
   150c8:	b003      	add	sp, #12
   150ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ce:	2145      	movs	r1, #69	; 0x45
   150d0:	4620      	mov	r0, r4
   150d2:	f7ff fe69 	bl	14da8 <d_exprlist>
   150d6:	4682      	mov	sl, r0
   150d8:	e771      	b.n	14fbe <d_exprlist+0x216>
   150da:	4620      	mov	r0, r4
   150dc:	f000 f8c2 	bl	15264 <d_expression_1>
   150e0:	4682      	mov	sl, r0
   150e2:	4620      	mov	r0, r4
   150e4:	f000 f8be 	bl	15264 <d_expression_1>
   150e8:	4683      	mov	fp, r0
   150ea:	4620      	mov	r0, r4
   150ec:	f000 f8ba 	bl	15264 <d_expression_1>
   150f0:	4603      	mov	r3, r0
   150f2:	465a      	mov	r2, fp
   150f4:	213b      	movs	r1, #59	; 0x3b
   150f6:	4620      	mov	r0, r4
   150f8:	f7ff fa48 	bl	1458c <d_make_comp>
   150fc:	4652      	mov	r2, sl
   150fe:	4603      	mov	r3, r0
   15100:	213a      	movs	r1, #58	; 0x3a
   15102:	4620      	mov	r0, r4
   15104:	f7ff fa42 	bl	1458c <d_make_comp>
   15108:	462a      	mov	r2, r5
   1510a:	4603      	mov	r3, r0
   1510c:	2139      	movs	r1, #57	; 0x39
   1510e:	4620      	mov	r0, r4
   15110:	f7ff fa3c 	bl	1458c <d_make_comp>
   15114:	4605      	mov	r5, r0
   15116:	e6cd      	b.n	14eb4 <d_exprlist+0x10c>
   15118:	781b      	ldrb	r3, [r3, #0]
   1511a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1511e:	2a01      	cmp	r2, #1
   15120:	d903      	bls.n	1512a <d_exprlist+0x382>
   15122:	3b72      	subs	r3, #114	; 0x72
   15124:	2b01      	cmp	r3, #1
   15126:	f63f af25 	bhi.w	14f74 <d_exprlist+0x1cc>
   1512a:	4620      	mov	r0, r4
   1512c:	f000 fcbe 	bl	15aac <d_type>
   15130:	4683      	mov	fp, r0
   15132:	e728      	b.n	14f86 <d_exprlist+0x1de>
   15134:	4620      	mov	r0, r4
   15136:	f000 faf3 	bl	15720 <d_template_args>
   1513a:	465a      	mov	r2, fp
   1513c:	4603      	mov	r3, r0
   1513e:	2104      	movs	r1, #4
   15140:	4620      	mov	r0, r4
   15142:	f7ff fa23 	bl	1458c <d_make_comp>
   15146:	4603      	mov	r3, r0
   15148:	e762      	b.n	15010 <d_exprlist+0x268>
   1514a:	3301      	adds	r3, #1
   1514c:	60c3      	str	r3, [r0, #12]
   1514e:	212e      	movs	r1, #46	; 0x2e
   15150:	4613      	mov	r3, r2
   15152:	b003      	add	sp, #12
   15154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15158:	f7ff ba18 	b.w	1458c <d_make_comp>
   1515c:	4620      	mov	r0, r4
   1515e:	f001 f88d 	bl	1627c <d_operator_name>
   15162:	4683      	mov	fp, r0
   15164:	e70f      	b.n	14f86 <d_exprlist+0x1de>
   15166:	f1ba 0f00 	cmp.w	sl, #0
   1516a:	f43f af36 	beq.w	14fda <d_exprlist+0x232>
   1516e:	f89a 3000 	ldrb.w	r3, [sl]
   15172:	2b70      	cmp	r3, #112	; 0x70
   15174:	d017      	beq.n	151a6 <d_exprlist+0x3fe>
   15176:	2b6d      	cmp	r3, #109	; 0x6d
   15178:	d015      	beq.n	151a6 <d_exprlist+0x3fe>
   1517a:	4650      	mov	r0, sl
   1517c:	4937      	ldr	r1, [pc, #220]	; (1525c <d_exprlist+0x4b4>)
   1517e:	f009 fcc3 	bl	1eb08 <strcmp>
   15182:	2800      	cmp	r0, #0
   15184:	f47f af29 	bne.w	14fda <d_exprlist+0x232>
   15188:	4620      	mov	r0, r4
   1518a:	f000 fa65 	bl	15658 <d_template_args_1>
   1518e:	e727      	b.n	14fe0 <d_exprlist+0x238>
   15190:	4620      	mov	r0, r4
   15192:	f000 fac5 	bl	15720 <d_template_args>
   15196:	4652      	mov	r2, sl
   15198:	4603      	mov	r3, r0
   1519a:	2104      	movs	r1, #4
   1519c:	4620      	mov	r0, r4
   1519e:	f7ff f9f5 	bl	1458c <d_make_comp>
   151a2:	4682      	mov	sl, r0
   151a4:	e70b      	b.n	14fbe <d_exprlist+0x216>
   151a6:	f89a 2001 	ldrb.w	r2, [sl, #1]
   151aa:	429a      	cmp	r2, r3
   151ac:	d1e5      	bne.n	1517a <d_exprlist+0x3d2>
   151ae:	68e3      	ldr	r3, [r4, #12]
   151b0:	781a      	ldrb	r2, [r3, #0]
   151b2:	2a5f      	cmp	r2, #95	; 0x5f
   151b4:	d023      	beq.n	151fe <d_exprlist+0x456>
   151b6:	4650      	mov	r0, sl
   151b8:	4928      	ldr	r1, [pc, #160]	; (1525c <d_exprlist+0x4b4>)
   151ba:	f009 fca5 	bl	1eb08 <strcmp>
   151be:	2800      	cmp	r0, #0
   151c0:	d03f      	beq.n	15242 <d_exprlist+0x49a>
   151c2:	4620      	mov	r0, r4
   151c4:	f000 f84e 	bl	15264 <d_expression_1>
   151c8:	4603      	mov	r3, r0
   151ca:	461a      	mov	r2, r3
   151cc:	2138      	movs	r1, #56	; 0x38
   151ce:	4620      	mov	r0, r4
   151d0:	f7ff f9dc 	bl	1458c <d_make_comp>
   151d4:	e704      	b.n	14fe0 <d_exprlist+0x238>
   151d6:	3301      	adds	r3, #1
   151d8:	60e3      	str	r3, [r4, #12]
   151da:	2300      	movs	r3, #0
   151dc:	e789      	b.n	150f2 <d_exprlist+0x34a>
   151de:	4620      	mov	r0, r4
   151e0:	f001 f84c 	bl	1627c <d_operator_name>
   151e4:	e77c      	b.n	150e0 <d_exprlist+0x338>
   151e6:	785a      	ldrb	r2, [r3, #1]
   151e8:	2a69      	cmp	r2, #105	; 0x69
   151ea:	f47f aeac 	bne.w	14f46 <d_exprlist+0x19e>
   151ee:	3302      	adds	r3, #2
   151f0:	60e3      	str	r3, [r4, #12]
   151f2:	2145      	movs	r1, #69	; 0x45
   151f4:	4620      	mov	r0, r4
   151f6:	f7ff fdd7 	bl	14da8 <d_exprlist>
   151fa:	4603      	mov	r3, r0
   151fc:	e779      	b.n	150f2 <d_exprlist+0x34a>
   151fe:	3301      	adds	r3, #1
   15200:	60e3      	str	r3, [r4, #12]
   15202:	e7ba      	b.n	1517a <d_exprlist+0x3d2>
   15204:	2a6f      	cmp	r2, #111	; 0x6f
   15206:	d015      	beq.n	15234 <d_exprlist+0x48c>
   15208:	2a69      	cmp	r2, #105	; 0x69
   1520a:	f47f ae8d 	bne.w	14f28 <d_exprlist+0x180>
   1520e:	785a      	ldrb	r2, [r3, #1]
   15210:	2a6c      	cmp	r2, #108	; 0x6c
   15212:	f47f ae0e 	bne.w	14e32 <d_exprlist+0x8a>
   15216:	2500      	movs	r5, #0
   15218:	3302      	adds	r3, #2
   1521a:	60e3      	str	r3, [r4, #12]
   1521c:	2145      	movs	r1, #69	; 0x45
   1521e:	4620      	mov	r0, r4
   15220:	f7ff fdc2 	bl	14da8 <d_exprlist>
   15224:	462a      	mov	r2, r5
   15226:	4603      	mov	r3, r0
   15228:	2130      	movs	r1, #48	; 0x30
   1522a:	4620      	mov	r0, r4
   1522c:	f7ff f9ae 	bl	1458c <d_make_comp>
   15230:	4605      	mov	r5, r0
   15232:	e63f      	b.n	14eb4 <d_exprlist+0x10c>
   15234:	785a      	ldrb	r2, [r3, #1]
   15236:	2a6e      	cmp	r2, #110	; 0x6e
   15238:	f47f adfb 	bne.w	14e32 <d_exprlist+0x8a>
   1523c:	3302      	adds	r3, #2
   1523e:	60e3      	str	r3, [r4, #12]
   15240:	e5c9      	b.n	14dd6 <d_exprlist+0x2e>
   15242:	4620      	mov	r0, r4
   15244:	f000 fa08 	bl	15658 <d_template_args_1>
   15248:	4603      	mov	r3, r0
   1524a:	e7be      	b.n	151ca <d_exprlist+0x422>
   1524c:	00024470 	.word	0x00024470
   15250:	00024474 	.word	0x00024474
   15254:	00024478 	.word	0x00024478
   15258:	0002447c 	.word	0x0002447c
   1525c:	0002446c 	.word	0x0002446c
   15260:	00024970 	.word	0x00024970

00015264 <d_expression_1>:
   15264:	68c1      	ldr	r1, [r0, #12]
   15266:	780b      	ldrb	r3, [r1, #0]
   15268:	2b4c      	cmp	r3, #76	; 0x4c
   1526a:	f000 8087 	beq.w	1537c <d_expression_1+0x118>
   1526e:	2b54      	cmp	r3, #84	; 0x54
   15270:	f000 8086 	beq.w	15380 <d_expression_1+0x11c>
   15274:	2b73      	cmp	r3, #115	; 0x73
   15276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1527a:	4604      	mov	r4, r0
   1527c:	d037      	beq.n	152ee <d_expression_1+0x8a>
   1527e:	2b66      	cmp	r3, #102	; 0x66
   15280:	d012      	beq.n	152a8 <d_expression_1+0x44>
   15282:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15286:	2a09      	cmp	r2, #9
   15288:	f200 81b8 	bhi.w	155fc <d_expression_1+0x398>
   1528c:	4620      	mov	r0, r4
   1528e:	f001 f8b5 	bl	163fc <d_unqualified_name>
   15292:	4605      	mov	r5, r0
   15294:	2800      	cmp	r0, #0
   15296:	d06d      	beq.n	15374 <d_expression_1+0x110>
   15298:	68e3      	ldr	r3, [r4, #12]
   1529a:	781b      	ldrb	r3, [r3, #0]
   1529c:	2b49      	cmp	r3, #73	; 0x49
   1529e:	f000 8088 	beq.w	153b2 <d_expression_1+0x14e>
   152a2:	4628      	mov	r0, r5
   152a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   152a8:	784b      	ldrb	r3, [r1, #1]
   152aa:	2b70      	cmp	r3, #112	; 0x70
   152ac:	d039      	beq.n	15322 <d_expression_1+0xbe>
   152ae:	4620      	mov	r0, r4
   152b0:	f000 ffe4 	bl	1627c <d_operator_name>
   152b4:	4605      	mov	r5, r0
   152b6:	2800      	cmp	r0, #0
   152b8:	d05c      	beq.n	15374 <d_expression_1+0x110>
   152ba:	7803      	ldrb	r3, [r0, #0]
   152bc:	2b31      	cmp	r3, #49	; 0x31
   152be:	d061      	beq.n	15384 <d_expression_1+0x120>
   152c0:	2b32      	cmp	r3, #50	; 0x32
   152c2:	d025      	beq.n	15310 <d_expression_1+0xac>
   152c4:	2b33      	cmp	r3, #51	; 0x33
   152c6:	d155      	bne.n	15374 <d_expression_1+0x110>
   152c8:	68e3      	ldr	r3, [r4, #12]
   152ca:	781a      	ldrb	r2, [r3, #0]
   152cc:	2a5f      	cmp	r2, #95	; 0x5f
   152ce:	f040 81b4 	bne.w	1563a <d_expression_1+0x3d6>
   152d2:	3301      	adds	r3, #1
   152d4:	60e3      	str	r3, [r4, #12]
   152d6:	2145      	movs	r1, #69	; 0x45
   152d8:	4620      	mov	r0, r4
   152da:	f7ff fd65 	bl	14da8 <d_exprlist>
   152de:	4603      	mov	r3, r0
   152e0:	462a      	mov	r2, r5
   152e2:	4620      	mov	r0, r4
   152e4:	2136      	movs	r1, #54	; 0x36
   152e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152ea:	f7ff b94f 	b.w	1458c <d_make_comp>
   152ee:	784b      	ldrb	r3, [r1, #1]
   152f0:	2b72      	cmp	r3, #114	; 0x72
   152f2:	d069      	beq.n	153c8 <d_expression_1+0x164>
   152f4:	2b70      	cmp	r3, #112	; 0x70
   152f6:	d1da      	bne.n	152ae <d_expression_1+0x4a>
   152f8:	3102      	adds	r1, #2
   152fa:	60c1      	str	r1, [r0, #12]
   152fc:	f7ff ffb2 	bl	15264 <d_expression_1>
   15300:	2300      	movs	r3, #0
   15302:	4602      	mov	r2, r0
   15304:	214a      	movs	r1, #74	; 0x4a
   15306:	4620      	mov	r0, r4
   15308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1530c:	f7ff b93e 	b.w	1458c <d_make_comp>
   15310:	6843      	ldr	r3, [r0, #4]
   15312:	2b03      	cmp	r3, #3
   15314:	d82e      	bhi.n	15374 <d_expression_1+0x110>
   15316:	e8df f013 	tbh	[pc, r3, lsl #1]
   1531a:	0071      	.short	0x0071
   1531c:	002d0190 	.word	0x002d0190
   15320:	002d      	.short	0x002d
   15322:	1c8b      	adds	r3, r1, #2
   15324:	60c3      	str	r3, [r0, #12]
   15326:	788b      	ldrb	r3, [r1, #2]
   15328:	2b54      	cmp	r3, #84	; 0x54
   1532a:	d063      	beq.n	153f4 <d_expression_1+0x190>
   1532c:	f7ff fac2 	bl	148b4 <d_compact_number>
   15330:	43c3      	mvns	r3, r0
   15332:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   15336:	d01d      	beq.n	15374 <d_expression_1+0x110>
   15338:	3001      	adds	r0, #1
   1533a:	6963      	ldr	r3, [r4, #20]
   1533c:	69a2      	ldr	r2, [r4, #24]
   1533e:	4293      	cmp	r3, r2
   15340:	da18      	bge.n	15374 <d_expression_1+0x110>
   15342:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15346:	6921      	ldr	r1, [r4, #16]
   15348:	0092      	lsls	r2, r2, #2
   1534a:	3301      	adds	r3, #1
   1534c:	188d      	adds	r5, r1, r2
   1534e:	6163      	str	r3, [r4, #20]
   15350:	d0a7      	beq.n	152a2 <d_expression_1+0x3e>
   15352:	2306      	movs	r3, #6
   15354:	548b      	strb	r3, [r1, r2]
   15356:	6068      	str	r0, [r5, #4]
   15358:	e7a3      	b.n	152a2 <d_expression_1+0x3e>
   1535a:	2b74      	cmp	r3, #116	; 0x74
   1535c:	d1a7      	bne.n	152ae <d_expression_1+0x4a>
   1535e:	784b      	ldrb	r3, [r1, #1]
   15360:	2b6c      	cmp	r3, #108	; 0x6c
   15362:	d1a4      	bne.n	152ae <d_expression_1+0x4a>
   15364:	f000 fba2 	bl	15aac <d_type>
   15368:	68e1      	ldr	r1, [r4, #12]
   1536a:	784b      	ldrb	r3, [r1, #1]
   1536c:	4605      	mov	r5, r0
   1536e:	2b00      	cmp	r3, #0
   15370:	f040 814e 	bne.w	15610 <d_expression_1+0x3ac>
   15374:	2500      	movs	r5, #0
   15376:	4628      	mov	r0, r5
   15378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1537c:	f001 bc8c 	b.w	16c98 <d_expr_primary>
   15380:	f7ff bab4 	b.w	148ec <d_template_param>
   15384:	6847      	ldr	r7, [r0, #4]
   15386:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15388:	68ba      	ldr	r2, [r7, #8]
   1538a:	683e      	ldr	r6, [r7, #0]
   1538c:	49ac      	ldr	r1, [pc, #688]	; (15640 <d_expression_1+0x3dc>)
   1538e:	3a02      	subs	r2, #2
   15390:	4413      	add	r3, r2
   15392:	6323      	str	r3, [r4, #48]	; 0x30
   15394:	4630      	mov	r0, r6
   15396:	f009 fbb7 	bl	1eb08 <strcmp>
   1539a:	2800      	cmp	r0, #0
   1539c:	f000 80ab 	beq.w	154f6 <d_expression_1+0x292>
   153a0:	68ff      	ldr	r7, [r7, #12]
   153a2:	2f03      	cmp	r7, #3
   153a4:	d8e6      	bhi.n	15374 <d_expression_1+0x110>
   153a6:	e8df f017 	tbh	[pc, r7, lsl #1]
   153aa:	0029      	.short	0x0029
   153ac:	007100ff 	.word	0x007100ff
   153b0:	0031      	.short	0x0031
   153b2:	4620      	mov	r0, r4
   153b4:	f000 f9b4 	bl	15720 <d_template_args>
   153b8:	462a      	mov	r2, r5
   153ba:	4603      	mov	r3, r0
   153bc:	2104      	movs	r1, #4
   153be:	4620      	mov	r0, r4
   153c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153c4:	f7ff b8e2 	b.w	1458c <d_make_comp>
   153c8:	3102      	adds	r1, #2
   153ca:	60c1      	str	r1, [r0, #12]
   153cc:	f000 fb6e 	bl	15aac <d_type>
   153d0:	4605      	mov	r5, r0
   153d2:	4620      	mov	r0, r4
   153d4:	f001 f812 	bl	163fc <d_unqualified_name>
   153d8:	68e3      	ldr	r3, [r4, #12]
   153da:	781b      	ldrb	r3, [r3, #0]
   153dc:	2b49      	cmp	r3, #73	; 0x49
   153de:	4606      	mov	r6, r0
   153e0:	f000 80ae 	beq.w	15540 <d_expression_1+0x2dc>
   153e4:	4603      	mov	r3, r0
   153e6:	462a      	mov	r2, r5
   153e8:	4620      	mov	r0, r4
   153ea:	2101      	movs	r1, #1
   153ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153f0:	f7ff b8cc 	b.w	1458c <d_make_comp>
   153f4:	3103      	adds	r1, #3
   153f6:	60c1      	str	r1, [r0, #12]
   153f8:	2000      	movs	r0, #0
   153fa:	e79e      	b.n	1533a <d_expression_1+0xd6>
   153fc:	462a      	mov	r2, r5
   153fe:	4620      	mov	r0, r4
   15400:	2300      	movs	r3, #0
   15402:	2135      	movs	r1, #53	; 0x35
   15404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15408:	f7ff b8c0 	b.w	1458c <d_make_comp>
   1540c:	2e00      	cmp	r6, #0
   1540e:	d0b1      	beq.n	15374 <d_expression_1+0x110>
   15410:	498c      	ldr	r1, [pc, #560]	; (15644 <d_expression_1+0x3e0>)
   15412:	4630      	mov	r0, r6
   15414:	f009 fb78 	bl	1eb08 <strcmp>
   15418:	2800      	cmp	r0, #0
   1541a:	d071      	beq.n	15500 <d_expression_1+0x29c>
   1541c:	7833      	ldrb	r3, [r6, #0]
   1541e:	2b66      	cmp	r3, #102	; 0x66
   15420:	f000 80b2 	beq.w	15588 <d_expression_1+0x324>
   15424:	2b6e      	cmp	r3, #110	; 0x6e
   15426:	d1a5      	bne.n	15374 <d_expression_1+0x110>
   15428:	7873      	ldrb	r3, [r6, #1]
   1542a:	2b77      	cmp	r3, #119	; 0x77
   1542c:	d001      	beq.n	15432 <d_expression_1+0x1ce>
   1542e:	2b61      	cmp	r3, #97	; 0x61
   15430:	d1a0      	bne.n	15374 <d_expression_1+0x110>
   15432:	215f      	movs	r1, #95	; 0x5f
   15434:	4620      	mov	r0, r4
   15436:	f7ff fcb7 	bl	14da8 <d_exprlist>
   1543a:	4606      	mov	r6, r0
   1543c:	4620      	mov	r0, r4
   1543e:	f000 fb35 	bl	15aac <d_type>
   15442:	68e3      	ldr	r3, [r4, #12]
   15444:	781a      	ldrb	r2, [r3, #0]
   15446:	2a45      	cmp	r2, #69	; 0x45
   15448:	4607      	mov	r7, r0
   1544a:	f000 8099 	beq.w	15580 <d_expression_1+0x31c>
   1544e:	2a70      	cmp	r2, #112	; 0x70
   15450:	f000 809e 	beq.w	15590 <d_expression_1+0x32c>
   15454:	2a69      	cmp	r2, #105	; 0x69
   15456:	d18d      	bne.n	15374 <d_expression_1+0x110>
   15458:	785b      	ldrb	r3, [r3, #1]
   1545a:	2b6c      	cmp	r3, #108	; 0x6c
   1545c:	d18a      	bne.n	15374 <d_expression_1+0x110>
   1545e:	4620      	mov	r0, r4
   15460:	f7ff ff00 	bl	15264 <d_expression_1>
   15464:	4603      	mov	r3, r0
   15466:	463a      	mov	r2, r7
   15468:	213b      	movs	r1, #59	; 0x3b
   1546a:	4620      	mov	r0, r4
   1546c:	f7ff f88e 	bl	1458c <d_make_comp>
   15470:	4632      	mov	r2, r6
   15472:	4603      	mov	r3, r0
   15474:	213a      	movs	r1, #58	; 0x3a
   15476:	4620      	mov	r0, r4
   15478:	f7ff f888 	bl	1458c <d_make_comp>
   1547c:	462a      	mov	r2, r5
   1547e:	4603      	mov	r3, r0
   15480:	2139      	movs	r1, #57	; 0x39
   15482:	4620      	mov	r0, r4
   15484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15488:	f7ff b880 	b.w	1458c <d_make_comp>
   1548c:	2e00      	cmp	r6, #0
   1548e:	f43f af71 	beq.w	15374 <d_expression_1+0x110>
   15492:	686b      	ldr	r3, [r5, #4]
   15494:	681b      	ldr	r3, [r3, #0]
   15496:	785a      	ldrb	r2, [r3, #1]
   15498:	2a63      	cmp	r2, #99	; 0x63
   1549a:	d044      	beq.n	15526 <d_expression_1+0x2c2>
   1549c:	7833      	ldrb	r3, [r6, #0]
   1549e:	2b66      	cmp	r3, #102	; 0x66
   154a0:	d059      	beq.n	15556 <d_expression_1+0x2f2>
   154a2:	4620      	mov	r0, r4
   154a4:	f7ff fede 	bl	15264 <d_expression_1>
   154a8:	4607      	mov	r7, r0
   154aa:	4967      	ldr	r1, [pc, #412]	; (15648 <d_expression_1+0x3e4>)
   154ac:	4630      	mov	r0, r6
   154ae:	f009 fb2b 	bl	1eb08 <strcmp>
   154b2:	b390      	cbz	r0, 1551a <d_expression_1+0x2b6>
   154b4:	4965      	ldr	r1, [pc, #404]	; (1564c <d_expression_1+0x3e8>)
   154b6:	4630      	mov	r0, r6
   154b8:	f009 fb26 	bl	1eb08 <strcmp>
   154bc:	b128      	cbz	r0, 154ca <d_expression_1+0x266>
   154be:	4630      	mov	r0, r6
   154c0:	4963      	ldr	r1, [pc, #396]	; (15650 <d_expression_1+0x3ec>)
   154c2:	f009 fb21 	bl	1eb08 <strcmp>
   154c6:	2800      	cmp	r0, #0
   154c8:	d14a      	bne.n	15560 <d_expression_1+0x2fc>
   154ca:	4620      	mov	r0, r4
   154cc:	f000 ff96 	bl	163fc <d_unqualified_name>
   154d0:	68e3      	ldr	r3, [r4, #12]
   154d2:	781b      	ldrb	r3, [r3, #0]
   154d4:	2b49      	cmp	r3, #73	; 0x49
   154d6:	4606      	mov	r6, r0
   154d8:	d047      	beq.n	1556a <d_expression_1+0x306>
   154da:	4633      	mov	r3, r6
   154dc:	463a      	mov	r2, r7
   154de:	2138      	movs	r1, #56	; 0x38
   154e0:	4620      	mov	r0, r4
   154e2:	f7ff f853 	bl	1458c <d_make_comp>
   154e6:	462a      	mov	r2, r5
   154e8:	4603      	mov	r3, r0
   154ea:	2137      	movs	r1, #55	; 0x37
   154ec:	4620      	mov	r0, r4
   154ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   154f2:	f7ff b84b 	b.w	1458c <d_make_comp>
   154f6:	4620      	mov	r0, r4
   154f8:	f000 fad8 	bl	15aac <d_type>
   154fc:	4603      	mov	r3, r0
   154fe:	e6ef      	b.n	152e0 <d_expression_1+0x7c>
   15500:	4620      	mov	r0, r4
   15502:	f7ff feaf 	bl	15264 <d_expression_1>
   15506:	4606      	mov	r6, r0
   15508:	4620      	mov	r0, r4
   1550a:	f7ff feab 	bl	15264 <d_expression_1>
   1550e:	4607      	mov	r7, r0
   15510:	4620      	mov	r0, r4
   15512:	f7ff fea7 	bl	15264 <d_expression_1>
   15516:	4603      	mov	r3, r0
   15518:	e7a5      	b.n	15466 <d_expression_1+0x202>
   1551a:	2145      	movs	r1, #69	; 0x45
   1551c:	4620      	mov	r0, r4
   1551e:	f7ff fc43 	bl	14da8 <d_exprlist>
   15522:	4606      	mov	r6, r0
   15524:	e7d9      	b.n	154da <d_expression_1+0x276>
   15526:	781b      	ldrb	r3, [r3, #0]
   15528:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1552c:	2a01      	cmp	r2, #1
   1552e:	d902      	bls.n	15536 <d_expression_1+0x2d2>
   15530:	3b72      	subs	r3, #114	; 0x72
   15532:	2b01      	cmp	r3, #1
   15534:	d8b2      	bhi.n	1549c <d_expression_1+0x238>
   15536:	4620      	mov	r0, r4
   15538:	f000 fab8 	bl	15aac <d_type>
   1553c:	4607      	mov	r7, r0
   1553e:	e7b4      	b.n	154aa <d_expression_1+0x246>
   15540:	4620      	mov	r0, r4
   15542:	f000 f8ed 	bl	15720 <d_template_args>
   15546:	4632      	mov	r2, r6
   15548:	4603      	mov	r3, r0
   1554a:	2104      	movs	r1, #4
   1554c:	4620      	mov	r0, r4
   1554e:	f7ff f81d 	bl	1458c <d_make_comp>
   15552:	4603      	mov	r3, r0
   15554:	e747      	b.n	153e6 <d_expression_1+0x182>
   15556:	4620      	mov	r0, r4
   15558:	f000 fe90 	bl	1627c <d_operator_name>
   1555c:	4607      	mov	r7, r0
   1555e:	e7a4      	b.n	154aa <d_expression_1+0x246>
   15560:	4620      	mov	r0, r4
   15562:	f7ff fe7f 	bl	15264 <d_expression_1>
   15566:	4606      	mov	r6, r0
   15568:	e7b7      	b.n	154da <d_expression_1+0x276>
   1556a:	4620      	mov	r0, r4
   1556c:	f000 f8d8 	bl	15720 <d_template_args>
   15570:	4632      	mov	r2, r6
   15572:	4603      	mov	r3, r0
   15574:	2104      	movs	r1, #4
   15576:	4620      	mov	r0, r4
   15578:	f7ff f808 	bl	1458c <d_make_comp>
   1557c:	4606      	mov	r6, r0
   1557e:	e7ac      	b.n	154da <d_expression_1+0x276>
   15580:	3301      	adds	r3, #1
   15582:	60e3      	str	r3, [r4, #12]
   15584:	2300      	movs	r3, #0
   15586:	e76e      	b.n	15466 <d_expression_1+0x202>
   15588:	4620      	mov	r0, r4
   1558a:	f000 fe77 	bl	1627c <d_operator_name>
   1558e:	e7ba      	b.n	15506 <d_expression_1+0x2a2>
   15590:	785a      	ldrb	r2, [r3, #1]
   15592:	2a69      	cmp	r2, #105	; 0x69
   15594:	f47f aeee 	bne.w	15374 <d_expression_1+0x110>
   15598:	3302      	adds	r3, #2
   1559a:	60e3      	str	r3, [r4, #12]
   1559c:	2145      	movs	r1, #69	; 0x45
   1559e:	4620      	mov	r0, r4
   155a0:	f7ff fc02 	bl	14da8 <d_exprlist>
   155a4:	4603      	mov	r3, r0
   155a6:	e75e      	b.n	15466 <d_expression_1+0x202>
   155a8:	2e00      	cmp	r6, #0
   155aa:	d046      	beq.n	1563a <d_expression_1+0x3d6>
   155ac:	7833      	ldrb	r3, [r6, #0]
   155ae:	2b70      	cmp	r3, #112	; 0x70
   155b0:	d015      	beq.n	155de <d_expression_1+0x37a>
   155b2:	2b6d      	cmp	r3, #109	; 0x6d
   155b4:	d013      	beq.n	155de <d_expression_1+0x37a>
   155b6:	2700      	movs	r7, #0
   155b8:	4630      	mov	r0, r6
   155ba:	4926      	ldr	r1, [pc, #152]	; (15654 <d_expression_1+0x3f0>)
   155bc:	f009 faa4 	bl	1eb08 <strcmp>
   155c0:	b1b8      	cbz	r0, 155f2 <d_expression_1+0x38e>
   155c2:	4620      	mov	r0, r4
   155c4:	f7ff fe4e 	bl	15264 <d_expression_1>
   155c8:	4603      	mov	r3, r0
   155ca:	2f00      	cmp	r7, #0
   155cc:	f43f ae88 	beq.w	152e0 <d_expression_1+0x7c>
   155d0:	461a      	mov	r2, r3
   155d2:	2138      	movs	r1, #56	; 0x38
   155d4:	4620      	mov	r0, r4
   155d6:	f7fe ffd9 	bl	1458c <d_make_comp>
   155da:	4603      	mov	r3, r0
   155dc:	e680      	b.n	152e0 <d_expression_1+0x7c>
   155de:	7872      	ldrb	r2, [r6, #1]
   155e0:	429a      	cmp	r2, r3
   155e2:	d1e8      	bne.n	155b6 <d_expression_1+0x352>
   155e4:	68e3      	ldr	r3, [r4, #12]
   155e6:	781a      	ldrb	r2, [r3, #0]
   155e8:	2a5f      	cmp	r2, #95	; 0x5f
   155ea:	d1e5      	bne.n	155b8 <d_expression_1+0x354>
   155ec:	3301      	adds	r3, #1
   155ee:	60e3      	str	r3, [r4, #12]
   155f0:	e7e1      	b.n	155b6 <d_expression_1+0x352>
   155f2:	4620      	mov	r0, r4
   155f4:	f000 f830 	bl	15658 <d_template_args_1>
   155f8:	4603      	mov	r3, r0
   155fa:	e7e6      	b.n	155ca <d_expression_1+0x366>
   155fc:	2b6f      	cmp	r3, #111	; 0x6f
   155fe:	d015      	beq.n	1562c <d_expression_1+0x3c8>
   15600:	2b69      	cmp	r3, #105	; 0x69
   15602:	f47f aeaa 	bne.w	1535a <d_expression_1+0xf6>
   15606:	784b      	ldrb	r3, [r1, #1]
   15608:	2b6c      	cmp	r3, #108	; 0x6c
   1560a:	f47f ae50 	bne.w	152ae <d_expression_1+0x4a>
   1560e:	2500      	movs	r5, #0
   15610:	3102      	adds	r1, #2
   15612:	60e1      	str	r1, [r4, #12]
   15614:	4620      	mov	r0, r4
   15616:	2145      	movs	r1, #69	; 0x45
   15618:	f7ff fbc6 	bl	14da8 <d_exprlist>
   1561c:	462a      	mov	r2, r5
   1561e:	4603      	mov	r3, r0
   15620:	2130      	movs	r1, #48	; 0x30
   15622:	4620      	mov	r0, r4
   15624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15628:	f7fe bfb0 	b.w	1458c <d_make_comp>
   1562c:	784b      	ldrb	r3, [r1, #1]
   1562e:	2b6e      	cmp	r3, #110	; 0x6e
   15630:	f47f ae3d 	bne.w	152ae <d_expression_1+0x4a>
   15634:	3102      	adds	r1, #2
   15636:	60c1      	str	r1, [r0, #12]
   15638:	e628      	b.n	1528c <d_expression_1+0x28>
   1563a:	2700      	movs	r7, #0
   1563c:	e7c1      	b.n	155c2 <d_expression_1+0x35e>
   1563e:	bf00      	nop
   15640:	00024970 	.word	0x00024970
   15644:	0002447c 	.word	0x0002447c
   15648:	00024470 	.word	0x00024470
   1564c:	00024474 	.word	0x00024474
   15650:	00024478 	.word	0x00024478
   15654:	0002446c 	.word	0x0002446c

00015658 <d_template_args_1>:
   15658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1565c:	68c2      	ldr	r2, [r0, #12]
   1565e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   15662:	7813      	ldrb	r3, [r2, #0]
   15664:	2b45      	cmp	r3, #69	; 0x45
   15666:	b083      	sub	sp, #12
   15668:	4604      	mov	r4, r0
   1566a:	d04e      	beq.n	1570a <d_template_args_1+0xb2>
   1566c:	ae02      	add	r6, sp, #8
   1566e:	2100      	movs	r1, #0
   15670:	f846 1d04 	str.w	r1, [r6, #-4]!
   15674:	2701      	movs	r7, #1
   15676:	3b49      	subs	r3, #73	; 0x49
   15678:	2b0f      	cmp	r3, #15
   1567a:	d83e      	bhi.n	156fa <d_template_args_1+0xa2>
   1567c:	e8df f003 	tbb	[pc, r3]
   15680:	1b3d3838 	.word	0x1b3d3838
   15684:	3d3d3d3d 	.word	0x3d3d3d3d
   15688:	3d3d3d3d 	.word	0x3d3d3d3d
   1568c:	083d3d3d 	.word	0x083d3d3d
   15690:	3201      	adds	r2, #1
   15692:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   15696:	60e2      	str	r2, [r4, #12]
   15698:	6367      	str	r7, [r4, #52]	; 0x34
   1569a:	4620      	mov	r0, r4
   1569c:	f7ff fde2 	bl	15264 <d_expression_1>
   156a0:	68e3      	ldr	r3, [r4, #12]
   156a2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   156a6:	781a      	ldrb	r2, [r3, #0]
   156a8:	2a45      	cmp	r2, #69	; 0x45
   156aa:	4605      	mov	r5, r0
   156ac:	d02a      	beq.n	15704 <d_template_args_1+0xac>
   156ae:	2000      	movs	r0, #0
   156b0:	b003      	add	sp, #12
   156b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156b6:	4620      	mov	r0, r4
   156b8:	f001 faee 	bl	16c98 <d_expr_primary>
   156bc:	4605      	mov	r5, r0
   156be:	2300      	movs	r3, #0
   156c0:	212f      	movs	r1, #47	; 0x2f
   156c2:	462a      	mov	r2, r5
   156c4:	4620      	mov	r0, r4
   156c6:	2d00      	cmp	r5, #0
   156c8:	d0f1      	beq.n	156ae <d_template_args_1+0x56>
   156ca:	f7fe ff5f 	bl	1458c <d_make_comp>
   156ce:	6030      	str	r0, [r6, #0]
   156d0:	f100 0608 	add.w	r6, r0, #8
   156d4:	2800      	cmp	r0, #0
   156d6:	d0ea      	beq.n	156ae <d_template_args_1+0x56>
   156d8:	68e2      	ldr	r2, [r4, #12]
   156da:	7813      	ldrb	r3, [r2, #0]
   156dc:	2b45      	cmp	r3, #69	; 0x45
   156de:	d1ca      	bne.n	15676 <d_template_args_1+0x1e>
   156e0:	9801      	ldr	r0, [sp, #4]
   156e2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   156e6:	3201      	adds	r2, #1
   156e8:	60e2      	str	r2, [r4, #12]
   156ea:	b003      	add	sp, #12
   156ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156f0:	4620      	mov	r0, r4
   156f2:	f000 f815 	bl	15720 <d_template_args>
   156f6:	4605      	mov	r5, r0
   156f8:	e7e1      	b.n	156be <d_template_args_1+0x66>
   156fa:	4620      	mov	r0, r4
   156fc:	f000 f9d6 	bl	15aac <d_type>
   15700:	4605      	mov	r5, r0
   15702:	e7dc      	b.n	156be <d_template_args_1+0x66>
   15704:	3301      	adds	r3, #1
   15706:	60e3      	str	r3, [r4, #12]
   15708:	e7d9      	b.n	156be <d_template_args_1+0x66>
   1570a:	3201      	adds	r2, #1
   1570c:	2300      	movs	r3, #0
   1570e:	60c2      	str	r2, [r0, #12]
   15710:	212f      	movs	r1, #47	; 0x2f
   15712:	461a      	mov	r2, r3
   15714:	b003      	add	sp, #12
   15716:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1571a:	f7fe bf37 	b.w	1458c <d_make_comp>
   1571e:	bf00      	nop

00015720 <d_template_args>:
   15720:	68c2      	ldr	r2, [r0, #12]
   15722:	7813      	ldrb	r3, [r2, #0]
   15724:	3b49      	subs	r3, #73	; 0x49
   15726:	2b01      	cmp	r3, #1
   15728:	d802      	bhi.n	15730 <d_template_args+0x10>
   1572a:	3201      	adds	r2, #1
   1572c:	60c2      	str	r2, [r0, #12]
   1572e:	e793      	b.n	15658 <d_template_args_1>
   15730:	2000      	movs	r0, #0
   15732:	4770      	bx	lr

00015734 <d_name>:
   15734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15738:	68c2      	ldr	r2, [r0, #12]
   1573a:	7813      	ldrb	r3, [r2, #0]
   1573c:	3b4e      	subs	r3, #78	; 0x4e
   1573e:	b085      	sub	sp, #20
   15740:	4605      	mov	r5, r0
   15742:	2b0c      	cmp	r3, #12
   15744:	d870      	bhi.n	15828 <d_name+0xf4>
   15746:	e8df f003 	tbb	[pc, r3]
   1574a:	6f1e      	.short	0x6f1e
   1574c:	5b6f6f6f 	.word	0x5b6f6f6f
   15750:	6f6f176f 	.word	0x6f6f176f
   15754:	6f6f      	.short	0x6f6f
   15756:	07          	.byte	0x07
   15757:	00          	.byte	0x00
   15758:	3201      	adds	r2, #1
   1575a:	2100      	movs	r1, #0
   1575c:	60c2      	str	r2, [r0, #12]
   1575e:	f000 ffbd 	bl	166dc <d_encoding>
   15762:	68eb      	ldr	r3, [r5, #12]
   15764:	7819      	ldrb	r1, [r3, #0]
   15766:	2945      	cmp	r1, #69	; 0x45
   15768:	4606      	mov	r6, r0
   1576a:	f000 8099 	beq.w	158a0 <d_name+0x16c>
   1576e:	2200      	movs	r2, #0
   15770:	4610      	mov	r0, r2
   15772:	b005      	add	sp, #20
   15774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15778:	f000 fe40 	bl	163fc <d_unqualified_name>
   1577c:	4602      	mov	r2, r0
   1577e:	4610      	mov	r0, r2
   15780:	b005      	add	sp, #20
   15782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15786:	3201      	adds	r2, #1
   15788:	60c2      	str	r2, [r0, #12]
   1578a:	a903      	add	r1, sp, #12
   1578c:	2201      	movs	r2, #1
   1578e:	f7fe ff49 	bl	14624 <d_cv_qualifiers>
   15792:	4681      	mov	r9, r0
   15794:	2800      	cmp	r0, #0
   15796:	d0ea      	beq.n	1576e <d_name+0x3a>
   15798:	2100      	movs	r1, #0
   1579a:	4628      	mov	r0, r5
   1579c:	f7fe ffa8 	bl	146f0 <d_ref_qualifier>
   157a0:	68ea      	ldr	r2, [r5, #12]
   157a2:	4eb4      	ldr	r6, [pc, #720]	; (15a74 <d_name+0x340>)
   157a4:	7814      	ldrb	r4, [r2, #0]
   157a6:	4680      	mov	r8, r0
   157a8:	2700      	movs	r7, #0
   157aa:	2c00      	cmp	r4, #0
   157ac:	f000 80e8 	beq.w	15980 <d_name+0x24c>
   157b0:	2c44      	cmp	r4, #68	; 0x44
   157b2:	f000 80d1 	beq.w	15958 <d_name+0x224>
   157b6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   157ba:	b2db      	uxtb	r3, r3
   157bc:	2b1c      	cmp	r3, #28
   157be:	f240 80a8 	bls.w	15912 <d_name+0x1de>
   157c2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   157c6:	2b19      	cmp	r3, #25
   157c8:	f240 80a8 	bls.w	1591c <d_name+0x1e8>
   157cc:	2c55      	cmp	r4, #85	; 0x55
   157ce:	f000 80de 	beq.w	1598e <d_name+0x25a>
   157d2:	2c53      	cmp	r4, #83	; 0x53
   157d4:	f000 80f1 	beq.w	159ba <d_name+0x286>
   157d8:	2c49      	cmp	r4, #73	; 0x49
   157da:	f000 80da 	beq.w	15992 <d_name+0x25e>
   157de:	2c54      	cmp	r4, #84	; 0x54
   157e0:	f000 811f 	beq.w	15a22 <d_name+0x2ee>
   157e4:	2c45      	cmp	r4, #69	; 0x45
   157e6:	f000 814b 	beq.w	15a80 <d_name+0x34c>
   157ea:	2c4d      	cmp	r4, #77	; 0x4d
   157ec:	f040 80c8 	bne.w	15980 <d_name+0x24c>
   157f0:	2f00      	cmp	r7, #0
   157f2:	f000 80c5 	beq.w	15980 <d_name+0x24c>
   157f6:	1c53      	adds	r3, r2, #1
   157f8:	60eb      	str	r3, [r5, #12]
   157fa:	7854      	ldrb	r4, [r2, #1]
   157fc:	461a      	mov	r2, r3
   157fe:	e7d4      	b.n	157aa <d_name+0x76>
   15800:	7853      	ldrb	r3, [r2, #1]
   15802:	2b74      	cmp	r3, #116	; 0x74
   15804:	d031      	beq.n	1586a <d_name+0x136>
   15806:	2100      	movs	r1, #0
   15808:	f7ff f90a 	bl	14a20 <d_substitution>
   1580c:	68eb      	ldr	r3, [r5, #12]
   1580e:	7819      	ldrb	r1, [r3, #0]
   15810:	2949      	cmp	r1, #73	; 0x49
   15812:	4602      	mov	r2, r0
   15814:	d1b3      	bne.n	1577e <d_name+0x4a>
   15816:	3301      	adds	r3, #1
   15818:	60eb      	str	r3, [r5, #12]
   1581a:	4628      	mov	r0, r5
   1581c:	9201      	str	r2, [sp, #4]
   1581e:	f7ff ff1b 	bl	15658 <d_template_args_1>
   15822:	9a01      	ldr	r2, [sp, #4]
   15824:	4603      	mov	r3, r0
   15826:	e017      	b.n	15858 <d_name+0x124>
   15828:	f000 fde8 	bl	163fc <d_unqualified_name>
   1582c:	68eb      	ldr	r3, [r5, #12]
   1582e:	7819      	ldrb	r1, [r3, #0]
   15830:	2949      	cmp	r1, #73	; 0x49
   15832:	4602      	mov	r2, r0
   15834:	d1a3      	bne.n	1577e <d_name+0x4a>
   15836:	2a00      	cmp	r2, #0
   15838:	d099      	beq.n	1576e <d_name+0x3a>
   1583a:	6a29      	ldr	r1, [r5, #32]
   1583c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1583e:	4281      	cmp	r1, r0
   15840:	da95      	bge.n	1576e <d_name+0x3a>
   15842:	69ec      	ldr	r4, [r5, #28]
   15844:	1c48      	adds	r0, r1, #1
   15846:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   1584a:	6228      	str	r0, [r5, #32]
   1584c:	7819      	ldrb	r1, [r3, #0]
   1584e:	3949      	subs	r1, #73	; 0x49
   15850:	2901      	cmp	r1, #1
   15852:	bf88      	it	hi
   15854:	2300      	movhi	r3, #0
   15856:	d9de      	bls.n	15816 <d_name+0xe2>
   15858:	4628      	mov	r0, r5
   1585a:	2104      	movs	r1, #4
   1585c:	f7fe fe96 	bl	1458c <d_make_comp>
   15860:	4602      	mov	r2, r0
   15862:	4610      	mov	r0, r2
   15864:	b005      	add	sp, #20
   15866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1586a:	6943      	ldr	r3, [r0, #20]
   1586c:	6981      	ldr	r1, [r0, #24]
   1586e:	3202      	adds	r2, #2
   15870:	428b      	cmp	r3, r1
   15872:	60c2      	str	r2, [r0, #12]
   15874:	f2c0 80ab 	blt.w	159ce <d_name+0x29a>
   15878:	2400      	movs	r4, #0
   1587a:	4628      	mov	r0, r5
   1587c:	f000 fdbe 	bl	163fc <d_unqualified_name>
   15880:	4622      	mov	r2, r4
   15882:	4603      	mov	r3, r0
   15884:	2101      	movs	r1, #1
   15886:	4628      	mov	r0, r5
   15888:	f7fe fe80 	bl	1458c <d_make_comp>
   1588c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1588e:	68eb      	ldr	r3, [r5, #12]
   15890:	3103      	adds	r1, #3
   15892:	6329      	str	r1, [r5, #48]	; 0x30
   15894:	7819      	ldrb	r1, [r3, #0]
   15896:	2949      	cmp	r1, #73	; 0x49
   15898:	4602      	mov	r2, r0
   1589a:	f47f af70 	bne.w	1577e <d_name+0x4a>
   1589e:	e7ca      	b.n	15836 <d_name+0x102>
   158a0:	1c5a      	adds	r2, r3, #1
   158a2:	60ea      	str	r2, [r5, #12]
   158a4:	7859      	ldrb	r1, [r3, #1]
   158a6:	2973      	cmp	r1, #115	; 0x73
   158a8:	f000 80a3 	beq.w	159f2 <d_name+0x2be>
   158ac:	2964      	cmp	r1, #100	; 0x64
   158ae:	f000 80bc 	beq.w	15a2a <d_name+0x2f6>
   158b2:	4628      	mov	r0, r5
   158b4:	f7ff ff3e 	bl	15734 <d_name>
   158b8:	4604      	mov	r4, r0
   158ba:	2800      	cmp	r0, #0
   158bc:	d072      	beq.n	159a4 <d_name+0x270>
   158be:	7803      	ldrb	r3, [r0, #0]
   158c0:	2b45      	cmp	r3, #69	; 0x45
   158c2:	f000 8094 	beq.w	159ee <d_name+0x2ba>
   158c6:	2b47      	cmp	r3, #71	; 0x47
   158c8:	f000 8091 	beq.w	159ee <d_name+0x2ba>
   158cc:	68eb      	ldr	r3, [r5, #12]
   158ce:	781a      	ldrb	r2, [r3, #0]
   158d0:	2a5f      	cmp	r2, #95	; 0x5f
   158d2:	f040 808c 	bne.w	159ee <d_name+0x2ba>
   158d6:	f04f 37ff 	mov.w	r7, #4294967295
   158da:	4628      	mov	r0, r5
   158dc:	3301      	adds	r3, #1
   158de:	f840 3f0c 	str.w	r3, [r0, #12]!
   158e2:	f7fe ffa5 	bl	14830 <d_number.isra.0>
   158e6:	2800      	cmp	r0, #0
   158e8:	f6ff af41 	blt.w	1576e <d_name+0x3a>
   158ec:	1c7b      	adds	r3, r7, #1
   158ee:	d07e      	beq.n	159ee <d_name+0x2ba>
   158f0:	696b      	ldr	r3, [r5, #20]
   158f2:	69aa      	ldr	r2, [r5, #24]
   158f4:	4293      	cmp	r3, r2
   158f6:	da55      	bge.n	159a4 <d_name+0x270>
   158f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   158fc:	6929      	ldr	r1, [r5, #16]
   158fe:	3301      	adds	r3, #1
   15900:	0092      	lsls	r2, r2, #2
   15902:	616b      	str	r3, [r5, #20]
   15904:	188b      	adds	r3, r1, r2
   15906:	d04e      	beq.n	159a6 <d_name+0x272>
   15908:	2046      	movs	r0, #70	; 0x46
   1590a:	5488      	strb	r0, [r1, r2]
   1590c:	609f      	str	r7, [r3, #8]
   1590e:	605c      	str	r4, [r3, #4]
   15910:	e049      	b.n	159a6 <d_name+0x272>
   15912:	fa26 f303 	lsr.w	r3, r6, r3
   15916:	07d9      	lsls	r1, r3, #31
   15918:	f57f af53 	bpl.w	157c2 <d_name+0x8e>
   1591c:	4628      	mov	r0, r5
   1591e:	f000 fd6d 	bl	163fc <d_unqualified_name>
   15922:	b347      	cbz	r7, 15976 <d_name+0x242>
   15924:	2101      	movs	r1, #1
   15926:	4603      	mov	r3, r0
   15928:	463a      	mov	r2, r7
   1592a:	4628      	mov	r0, r5
   1592c:	f7fe fe2e 	bl	1458c <d_make_comp>
   15930:	4607      	mov	r7, r0
   15932:	2c53      	cmp	r4, #83	; 0x53
   15934:	d01c      	beq.n	15970 <d_name+0x23c>
   15936:	68ea      	ldr	r2, [r5, #12]
   15938:	7814      	ldrb	r4, [r2, #0]
   1593a:	2c45      	cmp	r4, #69	; 0x45
   1593c:	f43f af3b 	beq.w	157b6 <d_name+0x82>
   15940:	b1f7      	cbz	r7, 15980 <d_name+0x24c>
   15942:	6a2b      	ldr	r3, [r5, #32]
   15944:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15946:	428b      	cmp	r3, r1
   15948:	da1a      	bge.n	15980 <d_name+0x24c>
   1594a:	69e9      	ldr	r1, [r5, #28]
   1594c:	1c58      	adds	r0, r3, #1
   1594e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   15952:	6228      	str	r0, [r5, #32]
   15954:	7814      	ldrb	r4, [r2, #0]
   15956:	e728      	b.n	157aa <d_name+0x76>
   15958:	7853      	ldrb	r3, [r2, #1]
   1595a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1595e:	2b54      	cmp	r3, #84	; 0x54
   15960:	4628      	mov	r0, r5
   15962:	d00a      	beq.n	1597a <d_name+0x246>
   15964:	f000 fd4a 	bl	163fc <d_unqualified_name>
   15968:	2f00      	cmp	r7, #0
   1596a:	d1db      	bne.n	15924 <d_name+0x1f0>
   1596c:	4607      	mov	r7, r0
   1596e:	e7e2      	b.n	15936 <d_name+0x202>
   15970:	68ea      	ldr	r2, [r5, #12]
   15972:	7814      	ldrb	r4, [r2, #0]
   15974:	e719      	b.n	157aa <d_name+0x76>
   15976:	4607      	mov	r7, r0
   15978:	e7db      	b.n	15932 <d_name+0x1fe>
   1597a:	f000 f897 	bl	15aac <d_type>
   1597e:	e7f3      	b.n	15968 <d_name+0x234>
   15980:	2200      	movs	r2, #0
   15982:	4610      	mov	r0, r2
   15984:	f8c9 2000 	str.w	r2, [r9]
   15988:	b005      	add	sp, #20
   1598a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1598e:	4628      	mov	r0, r5
   15990:	e7e8      	b.n	15964 <d_name+0x230>
   15992:	2f00      	cmp	r7, #0
   15994:	d0f4      	beq.n	15980 <d_name+0x24c>
   15996:	3201      	adds	r2, #1
   15998:	60ea      	str	r2, [r5, #12]
   1599a:	4628      	mov	r0, r5
   1599c:	f7ff fe5c 	bl	15658 <d_template_args_1>
   159a0:	2104      	movs	r1, #4
   159a2:	e7c0      	b.n	15926 <d_name+0x1f2>
   159a4:	2300      	movs	r3, #0
   159a6:	4632      	mov	r2, r6
   159a8:	4628      	mov	r0, r5
   159aa:	2102      	movs	r1, #2
   159ac:	f7fe fdee 	bl	1458c <d_make_comp>
   159b0:	4602      	mov	r2, r0
   159b2:	4610      	mov	r0, r2
   159b4:	b005      	add	sp, #20
   159b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   159ba:	2101      	movs	r1, #1
   159bc:	4628      	mov	r0, r5
   159be:	f7ff f82f 	bl	14a20 <d_substitution>
   159c2:	2f00      	cmp	r7, #0
   159c4:	d1ae      	bne.n	15924 <d_name+0x1f0>
   159c6:	68ea      	ldr	r2, [r5, #12]
   159c8:	4607      	mov	r7, r0
   159ca:	7814      	ldrb	r4, [r2, #0]
   159cc:	e6ed      	b.n	157aa <d_name+0x76>
   159ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   159d2:	6901      	ldr	r1, [r0, #16]
   159d4:	0092      	lsls	r2, r2, #2
   159d6:	3301      	adds	r3, #1
   159d8:	188c      	adds	r4, r1, r2
   159da:	6143      	str	r3, [r0, #20]
   159dc:	f43f af4d 	beq.w	1587a <d_name+0x146>
   159e0:	2300      	movs	r3, #0
   159e2:	548b      	strb	r3, [r1, r2]
   159e4:	4824      	ldr	r0, [pc, #144]	; (15a78 <d_name+0x344>)
   159e6:	6060      	str	r0, [r4, #4]
   159e8:	2303      	movs	r3, #3
   159ea:	60a3      	str	r3, [r4, #8]
   159ec:	e745      	b.n	1587a <d_name+0x146>
   159ee:	4623      	mov	r3, r4
   159f0:	e7d9      	b.n	159a6 <d_name+0x272>
   159f2:	1c9a      	adds	r2, r3, #2
   159f4:	60ea      	str	r2, [r5, #12]
   159f6:	789a      	ldrb	r2, [r3, #2]
   159f8:	2a5f      	cmp	r2, #95	; 0x5f
   159fa:	d032      	beq.n	15a62 <d_name+0x32e>
   159fc:	696b      	ldr	r3, [r5, #20]
   159fe:	69aa      	ldr	r2, [r5, #24]
   15a00:	4293      	cmp	r3, r2
   15a02:	dacf      	bge.n	159a4 <d_name+0x270>
   15a04:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15a08:	6929      	ldr	r1, [r5, #16]
   15a0a:	3301      	adds	r3, #1
   15a0c:	0092      	lsls	r2, r2, #2
   15a0e:	616b      	str	r3, [r5, #20]
   15a10:	188b      	adds	r3, r1, r2
   15a12:	d0c8      	beq.n	159a6 <d_name+0x272>
   15a14:	2400      	movs	r4, #0
   15a16:	548c      	strb	r4, [r1, r2]
   15a18:	4818      	ldr	r0, [pc, #96]	; (15a7c <d_name+0x348>)
   15a1a:	6058      	str	r0, [r3, #4]
   15a1c:	220e      	movs	r2, #14
   15a1e:	609a      	str	r2, [r3, #8]
   15a20:	e7c1      	b.n	159a6 <d_name+0x272>
   15a22:	4628      	mov	r0, r5
   15a24:	f7fe ff62 	bl	148ec <d_template_param>
   15a28:	e79e      	b.n	15968 <d_name+0x234>
   15a2a:	3302      	adds	r3, #2
   15a2c:	60eb      	str	r3, [r5, #12]
   15a2e:	4628      	mov	r0, r5
   15a30:	f7fe ff40 	bl	148b4 <d_compact_number>
   15a34:	1e07      	subs	r7, r0, #0
   15a36:	f6ff ae9a 	blt.w	1576e <d_name+0x3a>
   15a3a:	4628      	mov	r0, r5
   15a3c:	f7ff fe7a 	bl	15734 <d_name>
   15a40:	4604      	mov	r4, r0
   15a42:	2800      	cmp	r0, #0
   15a44:	f43f af54 	beq.w	158f0 <d_name+0x1bc>
   15a48:	7803      	ldrb	r3, [r0, #0]
   15a4a:	2b45      	cmp	r3, #69	; 0x45
   15a4c:	f43f af50 	beq.w	158f0 <d_name+0x1bc>
   15a50:	2b47      	cmp	r3, #71	; 0x47
   15a52:	f43f af4d 	beq.w	158f0 <d_name+0x1bc>
   15a56:	68eb      	ldr	r3, [r5, #12]
   15a58:	781a      	ldrb	r2, [r3, #0]
   15a5a:	2a5f      	cmp	r2, #95	; 0x5f
   15a5c:	f47f af48 	bne.w	158f0 <d_name+0x1bc>
   15a60:	e73b      	b.n	158da <d_name+0x1a6>
   15a62:	4628      	mov	r0, r5
   15a64:	3303      	adds	r3, #3
   15a66:	f840 3f0c 	str.w	r3, [r0, #12]!
   15a6a:	f7fe fee1 	bl	14830 <d_number.isra.0>
   15a6e:	2800      	cmp	r0, #0
   15a70:	dac4      	bge.n	159fc <d_name+0x2c8>
   15a72:	e67c      	b.n	1576e <d_name+0x3a>
   15a74:	100803ff 	.word	0x100803ff
   15a78:	00024490 	.word	0x00024490
   15a7c:	00024480 	.word	0x00024480
   15a80:	f8c9 7000 	str.w	r7, [r9]
   15a84:	2f00      	cmp	r7, #0
   15a86:	f43f ae72 	beq.w	1576e <d_name+0x3a>
   15a8a:	f1b8 0f00 	cmp.w	r8, #0
   15a8e:	d004      	beq.n	15a9a <d_name+0x366>
   15a90:	9b03      	ldr	r3, [sp, #12]
   15a92:	f8c8 3004 	str.w	r3, [r8, #4]
   15a96:	f8cd 800c 	str.w	r8, [sp, #12]
   15a9a:	7813      	ldrb	r3, [r2, #0]
   15a9c:	2b45      	cmp	r3, #69	; 0x45
   15a9e:	f47f ae66 	bne.w	1576e <d_name+0x3a>
   15aa2:	3201      	adds	r2, #1
   15aa4:	60ea      	str	r2, [r5, #12]
   15aa6:	9a03      	ldr	r2, [sp, #12]
   15aa8:	e669      	b.n	1577e <d_name+0x4a>
   15aaa:	bf00      	nop

00015aac <d_type>:
   15aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ab0:	68c2      	ldr	r2, [r0, #12]
   15ab2:	7813      	ldrb	r3, [r2, #0]
   15ab4:	2b72      	cmp	r3, #114	; 0x72
   15ab6:	b083      	sub	sp, #12
   15ab8:	4604      	mov	r4, r0
   15aba:	d058      	beq.n	15b6e <d_type+0xc2>
   15abc:	2b56      	cmp	r3, #86	; 0x56
   15abe:	d056      	beq.n	15b6e <d_type+0xc2>
   15ac0:	2b4b      	cmp	r3, #75	; 0x4b
   15ac2:	d054      	beq.n	15b6e <d_type+0xc2>
   15ac4:	2b44      	cmp	r3, #68	; 0x44
   15ac6:	f000 809f 	beq.w	15c08 <d_type+0x15c>
   15aca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   15ace:	294a      	cmp	r1, #74	; 0x4a
   15ad0:	f200 808a 	bhi.w	15be8 <d_type+0x13c>
   15ad4:	e8df f011 	tbh	[pc, r1, lsl #1]
   15ad8:	012a012a 	.word	0x012a012a
   15adc:	012a012a 	.word	0x012a012a
   15ae0:	012a012a 	.word	0x012a012a
   15ae4:	012a012a 	.word	0x012a012a
   15ae8:	012a012a 	.word	0x012a012a
   15aec:	00880088 	.word	0x00880088
   15af0:	00880088 	.word	0x00880088
   15af4:	00880088 	.word	0x00880088
   15af8:	020b0088 	.word	0x020b0088
   15afc:	01520088 	.word	0x01520088
   15b00:	00880088 	.word	0x00880088
   15b04:	0160014c 	.word	0x0160014c
   15b08:	00880088 	.word	0x00880088
   15b0c:	00880088 	.word	0x00880088
   15b10:	016e0088 	.word	0x016e0088
   15b14:	0186012a 	.word	0x0186012a
   15b18:	008801c3 	.word	0x008801c3
   15b1c:	01a20194 	.word	0x01a20194
   15b20:	01f301d1 	.word	0x01f301d1
   15b24:	00880088 	.word	0x00880088
   15b28:	00880088 	.word	0x00880088
   15b2c:	0088012a 	.word	0x0088012a
   15b30:	00880088 	.word	0x00880088
   15b34:	00880088 	.word	0x00880088
   15b38:	010c0088 	.word	0x010c0088
   15b3c:	010c010c 	.word	0x010c010c
   15b40:	010c010c 	.word	0x010c010c
   15b44:	010c010c 	.word	0x010c010c
   15b48:	010c010c 	.word	0x010c010c
   15b4c:	0088010c 	.word	0x0088010c
   15b50:	010c010c 	.word	0x010c010c
   15b54:	010c010c 	.word	0x010c010c
   15b58:	00880088 	.word	0x00880088
   15b5c:	010c0088 	.word	0x010c0088
   15b60:	013e010c 	.word	0x013e010c
   15b64:	010c010c 	.word	0x010c010c
   15b68:	010c010c 	.word	0x010c010c
   15b6c:	010c      	.short	0x010c
   15b6e:	2200      	movs	r2, #0
   15b70:	a901      	add	r1, sp, #4
   15b72:	4620      	mov	r0, r4
   15b74:	f7fe fd56 	bl	14624 <d_cv_qualifiers>
   15b78:	4605      	mov	r5, r0
   15b7a:	2800      	cmp	r0, #0
   15b7c:	d034      	beq.n	15be8 <d_type+0x13c>
   15b7e:	68e3      	ldr	r3, [r4, #12]
   15b80:	781b      	ldrb	r3, [r3, #0]
   15b82:	2b46      	cmp	r3, #70	; 0x46
   15b84:	4620      	mov	r0, r4
   15b86:	d034      	beq.n	15bf2 <d_type+0x146>
   15b88:	f7ff ff90 	bl	15aac <d_type>
   15b8c:	6028      	str	r0, [r5, #0]
   15b8e:	b358      	cbz	r0, 15be8 <d_type+0x13c>
   15b90:	7803      	ldrb	r3, [r0, #0]
   15b92:	3b1f      	subs	r3, #31
   15b94:	2b01      	cmp	r3, #1
   15b96:	d930      	bls.n	15bfa <d_type+0x14e>
   15b98:	9a01      	ldr	r2, [sp, #4]
   15b9a:	b32a      	cbz	r2, 15be8 <d_type+0x13c>
   15b9c:	6a23      	ldr	r3, [r4, #32]
   15b9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15ba0:	428b      	cmp	r3, r1
   15ba2:	da21      	bge.n	15be8 <d_type+0x13c>
   15ba4:	69e0      	ldr	r0, [r4, #28]
   15ba6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15baa:	9d01      	ldr	r5, [sp, #4]
   15bac:	1c59      	adds	r1, r3, #1
   15bae:	4628      	mov	r0, r5
   15bb0:	6221      	str	r1, [r4, #32]
   15bb2:	b003      	add	sp, #12
   15bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15bb8:	2301      	movs	r3, #1
   15bba:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15bbc:	6343      	str	r3, [r0, #52]	; 0x34
   15bbe:	f7ff fb51 	bl	15264 <d_expression_1>
   15bc2:	6365      	str	r5, [r4, #52]	; 0x34
   15bc4:	4602      	mov	r2, r0
   15bc6:	2300      	movs	r3, #0
   15bc8:	2142      	movs	r1, #66	; 0x42
   15bca:	4620      	mov	r0, r4
   15bcc:	f7fe fcde 	bl	1458c <d_make_comp>
   15bd0:	4605      	mov	r5, r0
   15bd2:	9001      	str	r0, [sp, #4]
   15bd4:	b140      	cbz	r0, 15be8 <d_type+0x13c>
   15bd6:	68e3      	ldr	r3, [r4, #12]
   15bd8:	781a      	ldrb	r2, [r3, #0]
   15bda:	b12a      	cbz	r2, 15be8 <d_type+0x13c>
   15bdc:	1c5a      	adds	r2, r3, #1
   15bde:	60e2      	str	r2, [r4, #12]
   15be0:	781b      	ldrb	r3, [r3, #0]
   15be2:	2b45      	cmp	r3, #69	; 0x45
   15be4:	f000 80aa 	beq.w	15d3c <d_type+0x290>
   15be8:	2500      	movs	r5, #0
   15bea:	4628      	mov	r0, r5
   15bec:	b003      	add	sp, #12
   15bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15bf2:	f000 fd53 	bl	1669c <d_function_type>
   15bf6:	6028      	str	r0, [r5, #0]
   15bf8:	e7c9      	b.n	15b8e <d_type+0xe2>
   15bfa:	9a01      	ldr	r2, [sp, #4]
   15bfc:	6843      	ldr	r3, [r0, #4]
   15bfe:	6042      	str	r2, [r0, #4]
   15c00:	682a      	ldr	r2, [r5, #0]
   15c02:	9201      	str	r2, [sp, #4]
   15c04:	602b      	str	r3, [r5, #0]
   15c06:	e7c7      	b.n	15b98 <d_type+0xec>
   15c08:	7853      	ldrb	r3, [r2, #1]
   15c0a:	2b78      	cmp	r3, #120	; 0x78
   15c0c:	d0af      	beq.n	15b6e <d_type+0xc2>
   15c0e:	1c53      	adds	r3, r2, #1
   15c10:	60c3      	str	r3, [r0, #12]
   15c12:	7853      	ldrb	r3, [r2, #1]
   15c14:	2b00      	cmp	r3, #0
   15c16:	d0e7      	beq.n	15be8 <d_type+0x13c>
   15c18:	1c93      	adds	r3, r2, #2
   15c1a:	60c3      	str	r3, [r0, #12]
   15c1c:	7853      	ldrb	r3, [r2, #1]
   15c1e:	3b46      	subs	r3, #70	; 0x46
   15c20:	2b30      	cmp	r3, #48	; 0x30
   15c22:	d8e1      	bhi.n	15be8 <d_type+0x13c>
   15c24:	a101      	add	r1, pc, #4	; (adr r1, 15c2c <d_type+0x180>)
   15c26:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15c2a:	bf00      	nop
   15c2c:	00016117 	.word	0x00016117
   15c30:	00015be9 	.word	0x00015be9
   15c34:	00015be9 	.word	0x00015be9
   15c38:	00015be9 	.word	0x00015be9
   15c3c:	00015be9 	.word	0x00015be9
   15c40:	00015be9 	.word	0x00015be9
   15c44:	00015be9 	.word	0x00015be9
   15c48:	00015be9 	.word	0x00015be9
   15c4c:	00015be9 	.word	0x00015be9
   15c50:	00015be9 	.word	0x00015be9
   15c54:	00015be9 	.word	0x00015be9
   15c58:	00015be9 	.word	0x00015be9
   15c5c:	00015be9 	.word	0x00015be9
   15c60:	00015be9 	.word	0x00015be9
   15c64:	00015bb9 	.word	0x00015bb9
   15c68:	00015be9 	.word	0x00015be9
   15c6c:	00015be9 	.word	0x00015be9
   15c70:	00015be9 	.word	0x00015be9
   15c74:	00015be9 	.word	0x00015be9
   15c78:	00015be9 	.word	0x00015be9
   15c7c:	00015be9 	.word	0x00015be9
   15c80:	00015be9 	.word	0x00015be9
   15c84:	00015be9 	.word	0x00015be9
   15c88:	00015be9 	.word	0x00015be9
   15c8c:	00015be9 	.word	0x00015be9
   15c90:	00015be9 	.word	0x00015be9
   15c94:	00015be9 	.word	0x00015be9
   15c98:	000160eb 	.word	0x000160eb
   15c9c:	00015be9 	.word	0x00015be9
   15ca0:	000160bf 	.word	0x000160bf
   15ca4:	0001609f 	.word	0x0001609f
   15ca8:	00016075 	.word	0x00016075
   15cac:	00016047 	.word	0x00016047
   15cb0:	00015be9 	.word	0x00015be9
   15cb4:	00016019 	.word	0x00016019
   15cb8:	00015ff5 	.word	0x00015ff5
   15cbc:	00015be9 	.word	0x00015be9
   15cc0:	00015be9 	.word	0x00015be9
   15cc4:	00015be9 	.word	0x00015be9
   15cc8:	00015be9 	.word	0x00015be9
   15ccc:	00015fbb 	.word	0x00015fbb
   15cd0:	00015be9 	.word	0x00015be9
   15cd4:	00015fa5 	.word	0x00015fa5
   15cd8:	00015be9 	.word	0x00015be9
   15cdc:	00015be9 	.word	0x00015be9
   15ce0:	00015f77 	.word	0x00015f77
   15ce4:	00015bb9 	.word	0x00015bb9
   15ce8:	00015be9 	.word	0x00015be9
   15cec:	00015f41 	.word	0x00015f41
   15cf0:	6960      	ldr	r0, [r4, #20]
   15cf2:	69a5      	ldr	r5, [r4, #24]
   15cf4:	49bc      	ldr	r1, [pc, #752]	; (15fe8 <d_type+0x53c>)
   15cf6:	3b61      	subs	r3, #97	; 0x61
   15cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15cfc:	42a8      	cmp	r0, r5
   15cfe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15d02:	f280 823a 	bge.w	1617a <d_type+0x6ce>
   15d06:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15d0a:	6926      	ldr	r6, [r4, #16]
   15d0c:	0089      	lsls	r1, r1, #2
   15d0e:	3001      	adds	r0, #1
   15d10:	1875      	adds	r5, r6, r1
   15d12:	6160      	str	r0, [r4, #20]
   15d14:	f000 8231 	beq.w	1617a <d_type+0x6ce>
   15d18:	2027      	movs	r0, #39	; 0x27
   15d1a:	5470      	strb	r0, [r6, r1]
   15d1c:	606b      	str	r3, [r5, #4]
   15d1e:	6859      	ldr	r1, [r3, #4]
   15d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15d22:	3201      	adds	r2, #1
   15d24:	440b      	add	r3, r1
   15d26:	60e2      	str	r2, [r4, #12]
   15d28:	6323      	str	r3, [r4, #48]	; 0x30
   15d2a:	e75e      	b.n	15bea <d_type+0x13e>
   15d2c:	4620      	mov	r0, r4
   15d2e:	f7ff fd01 	bl	15734 <d_name>
   15d32:	4605      	mov	r5, r0
   15d34:	9001      	str	r0, [sp, #4]
   15d36:	2d00      	cmp	r5, #0
   15d38:	f43f af56 	beq.w	15be8 <d_type+0x13c>
   15d3c:	6a23      	ldr	r3, [r4, #32]
   15d3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15d40:	4293      	cmp	r3, r2
   15d42:	f6bf af51 	bge.w	15be8 <d_type+0x13c>
   15d46:	69e1      	ldr	r1, [r4, #28]
   15d48:	1c5a      	adds	r2, r3, #1
   15d4a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15d4e:	9d01      	ldr	r5, [sp, #4]
   15d50:	6222      	str	r2, [r4, #32]
   15d52:	e74a      	b.n	15bea <d_type+0x13e>
   15d54:	3201      	adds	r2, #1
   15d56:	60e2      	str	r2, [r4, #12]
   15d58:	4620      	mov	r0, r4
   15d5a:	f7fe fde9 	bl	14930 <d_source_name>
   15d5e:	2300      	movs	r3, #0
   15d60:	4602      	mov	r2, r0
   15d62:	2128      	movs	r1, #40	; 0x28
   15d64:	4620      	mov	r0, r4
   15d66:	f7fe fc11 	bl	1458c <d_make_comp>
   15d6a:	4605      	mov	r5, r0
   15d6c:	9001      	str	r0, [sp, #4]
   15d6e:	e7e2      	b.n	15d36 <d_type+0x28a>
   15d70:	4620      	mov	r0, r4
   15d72:	f000 fc93 	bl	1669c <d_function_type>
   15d76:	4605      	mov	r5, r0
   15d78:	9001      	str	r0, [sp, #4]
   15d7a:	e7dc      	b.n	15d36 <d_type+0x28a>
   15d7c:	3201      	adds	r2, #1
   15d7e:	60e2      	str	r2, [r4, #12]
   15d80:	4620      	mov	r0, r4
   15d82:	f7ff fe93 	bl	15aac <d_type>
   15d86:	2300      	movs	r3, #0
   15d88:	4602      	mov	r2, r0
   15d8a:	2125      	movs	r1, #37	; 0x25
   15d8c:	4620      	mov	r0, r4
   15d8e:	f7fe fbfd 	bl	1458c <d_make_comp>
   15d92:	4605      	mov	r5, r0
   15d94:	9001      	str	r0, [sp, #4]
   15d96:	e7ce      	b.n	15d36 <d_type+0x28a>
   15d98:	3201      	adds	r2, #1
   15d9a:	60e2      	str	r2, [r4, #12]
   15d9c:	4620      	mov	r0, r4
   15d9e:	f7ff fe85 	bl	15aac <d_type>
   15da2:	2300      	movs	r3, #0
   15da4:	4602      	mov	r2, r0
   15da6:	2126      	movs	r1, #38	; 0x26
   15da8:	4620      	mov	r0, r4
   15daa:	f7fe fbef 	bl	1458c <d_make_comp>
   15dae:	4605      	mov	r5, r0
   15db0:	9001      	str	r0, [sp, #4]
   15db2:	e7c0      	b.n	15d36 <d_type+0x28a>
   15db4:	3201      	adds	r2, #1
   15db6:	60e2      	str	r2, [r4, #12]
   15db8:	4620      	mov	r0, r4
   15dba:	f7ff fe77 	bl	15aac <d_type>
   15dbe:	4605      	mov	r5, r0
   15dc0:	2800      	cmp	r0, #0
   15dc2:	f000 80bb 	beq.w	15f3c <d_type+0x490>
   15dc6:	4620      	mov	r0, r4
   15dc8:	f7ff fe70 	bl	15aac <d_type>
   15dcc:	2800      	cmp	r0, #0
   15dce:	f000 80b5 	beq.w	15f3c <d_type+0x490>
   15dd2:	4603      	mov	r3, r0
   15dd4:	462a      	mov	r2, r5
   15dd6:	212b      	movs	r1, #43	; 0x2b
   15dd8:	4620      	mov	r0, r4
   15dda:	f7fe fbd7 	bl	1458c <d_make_comp>
   15dde:	4605      	mov	r5, r0
   15de0:	9501      	str	r5, [sp, #4]
   15de2:	e7a8      	b.n	15d36 <d_type+0x28a>
   15de4:	3201      	adds	r2, #1
   15de6:	60e2      	str	r2, [r4, #12]
   15de8:	4620      	mov	r0, r4
   15dea:	f7ff fe5f 	bl	15aac <d_type>
   15dee:	2300      	movs	r3, #0
   15df0:	4602      	mov	r2, r0
   15df2:	2124      	movs	r1, #36	; 0x24
   15df4:	4620      	mov	r0, r4
   15df6:	f7fe fbc9 	bl	1458c <d_make_comp>
   15dfa:	4605      	mov	r5, r0
   15dfc:	9001      	str	r0, [sp, #4]
   15dfe:	e79a      	b.n	15d36 <d_type+0x28a>
   15e00:	3201      	adds	r2, #1
   15e02:	60e2      	str	r2, [r4, #12]
   15e04:	4620      	mov	r0, r4
   15e06:	f7ff fe51 	bl	15aac <d_type>
   15e0a:	2300      	movs	r3, #0
   15e0c:	4602      	mov	r2, r0
   15e0e:	2123      	movs	r1, #35	; 0x23
   15e10:	4620      	mov	r0, r4
   15e12:	f7fe fbbb 	bl	1458c <d_make_comp>
   15e16:	4605      	mov	r5, r0
   15e18:	9001      	str	r0, [sp, #4]
   15e1a:	e78c      	b.n	15d36 <d_type+0x28a>
   15e1c:	7853      	ldrb	r3, [r2, #1]
   15e1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15e22:	2a09      	cmp	r2, #9
   15e24:	d905      	bls.n	15e32 <d_type+0x386>
   15e26:	2b5f      	cmp	r3, #95	; 0x5f
   15e28:	d003      	beq.n	15e32 <d_type+0x386>
   15e2a:	3b41      	subs	r3, #65	; 0x41
   15e2c:	2b19      	cmp	r3, #25
   15e2e:	f200 81c3 	bhi.w	161b8 <d_type+0x70c>
   15e32:	2100      	movs	r1, #0
   15e34:	4620      	mov	r0, r4
   15e36:	f7fe fdf3 	bl	14a20 <d_substitution>
   15e3a:	68e3      	ldr	r3, [r4, #12]
   15e3c:	9001      	str	r0, [sp, #4]
   15e3e:	781b      	ldrb	r3, [r3, #0]
   15e40:	2b49      	cmp	r3, #73	; 0x49
   15e42:	4605      	mov	r5, r0
   15e44:	f47f aed1 	bne.w	15bea <d_type+0x13e>
   15e48:	4620      	mov	r0, r4
   15e4a:	f7ff fc69 	bl	15720 <d_template_args>
   15e4e:	462a      	mov	r2, r5
   15e50:	4603      	mov	r3, r0
   15e52:	2104      	movs	r1, #4
   15e54:	4620      	mov	r0, r4
   15e56:	f7fe fb99 	bl	1458c <d_make_comp>
   15e5a:	4605      	mov	r5, r0
   15e5c:	e7c0      	b.n	15de0 <d_type+0x334>
   15e5e:	3201      	adds	r2, #1
   15e60:	60e2      	str	r2, [r4, #12]
   15e62:	4620      	mov	r0, r4
   15e64:	f7ff fe22 	bl	15aac <d_type>
   15e68:	2300      	movs	r3, #0
   15e6a:	4602      	mov	r2, r0
   15e6c:	2122      	movs	r1, #34	; 0x22
   15e6e:	4620      	mov	r0, r4
   15e70:	f7fe fb8c 	bl	1458c <d_make_comp>
   15e74:	4605      	mov	r5, r0
   15e76:	9001      	str	r0, [sp, #4]
   15e78:	e75d      	b.n	15d36 <d_type+0x28a>
   15e7a:	4620      	mov	r0, r4
   15e7c:	f7fe fd36 	bl	148ec <d_template_param>
   15e80:	68e6      	ldr	r6, [r4, #12]
   15e82:	9001      	str	r0, [sp, #4]
   15e84:	7833      	ldrb	r3, [r6, #0]
   15e86:	2b49      	cmp	r3, #73	; 0x49
   15e88:	4605      	mov	r5, r0
   15e8a:	f47f af54 	bne.w	15d36 <d_type+0x28a>
   15e8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15e90:	2b00      	cmp	r3, #0
   15e92:	f040 81a9 	bne.w	161e8 <d_type+0x73c>
   15e96:	2800      	cmp	r0, #0
   15e98:	f43f aea6 	beq.w	15be8 <d_type+0x13c>
   15e9c:	6a23      	ldr	r3, [r4, #32]
   15e9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15ea0:	4293      	cmp	r3, r2
   15ea2:	f6bf aea1 	bge.w	15be8 <d_type+0x13c>
   15ea6:	69e1      	ldr	r1, [r4, #28]
   15ea8:	1c5a      	adds	r2, r3, #1
   15eaa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15eae:	6222      	str	r2, [r4, #32]
   15eb0:	4620      	mov	r0, r4
   15eb2:	9d01      	ldr	r5, [sp, #4]
   15eb4:	f7ff fc34 	bl	15720 <d_template_args>
   15eb8:	462a      	mov	r2, r5
   15eba:	4603      	mov	r3, r0
   15ebc:	e7c9      	b.n	15e52 <d_type+0x3a6>
   15ebe:	3201      	adds	r2, #1
   15ec0:	60e2      	str	r2, [r4, #12]
   15ec2:	4620      	mov	r0, r4
   15ec4:	f7fe fd34 	bl	14930 <d_source_name>
   15ec8:	68e3      	ldr	r3, [r4, #12]
   15eca:	9001      	str	r0, [sp, #4]
   15ecc:	781b      	ldrb	r3, [r3, #0]
   15ece:	2b49      	cmp	r3, #73	; 0x49
   15ed0:	4605      	mov	r5, r0
   15ed2:	f000 817e 	beq.w	161d2 <d_type+0x726>
   15ed6:	4620      	mov	r0, r4
   15ed8:	f7ff fde8 	bl	15aac <d_type>
   15edc:	9b01      	ldr	r3, [sp, #4]
   15ede:	4602      	mov	r2, r0
   15ee0:	2121      	movs	r1, #33	; 0x21
   15ee2:	4620      	mov	r0, r4
   15ee4:	f7fe fb52 	bl	1458c <d_make_comp>
   15ee8:	4605      	mov	r5, r0
   15eea:	9001      	str	r0, [sp, #4]
   15eec:	e723      	b.n	15d36 <d_type+0x28a>
   15eee:	1c51      	adds	r1, r2, #1
   15ef0:	60e1      	str	r1, [r4, #12]
   15ef2:	7853      	ldrb	r3, [r2, #1]
   15ef4:	2b5f      	cmp	r3, #95	; 0x5f
   15ef6:	f000 8144 	beq.w	16182 <d_type+0x6d6>
   15efa:	3b30      	subs	r3, #48	; 0x30
   15efc:	2b09      	cmp	r3, #9
   15efe:	f200 814e 	bhi.w	1619e <d_type+0x6f2>
   15f02:	460b      	mov	r3, r1
   15f04:	3301      	adds	r3, #1
   15f06:	60e3      	str	r3, [r4, #12]
   15f08:	781a      	ldrb	r2, [r3, #0]
   15f0a:	3a30      	subs	r2, #48	; 0x30
   15f0c:	2a09      	cmp	r2, #9
   15f0e:	d9f9      	bls.n	15f04 <d_type+0x458>
   15f10:	6962      	ldr	r2, [r4, #20]
   15f12:	69a0      	ldr	r0, [r4, #24]
   15f14:	4282      	cmp	r2, r0
   15f16:	da11      	bge.n	15f3c <d_type+0x490>
   15f18:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15f1c:	6926      	ldr	r6, [r4, #16]
   15f1e:	0080      	lsls	r0, r0, #2
   15f20:	3201      	adds	r2, #1
   15f22:	1835      	adds	r5, r6, r0
   15f24:	6162      	str	r2, [r4, #20]
   15f26:	d009      	beq.n	15f3c <d_type+0x490>
   15f28:	1a5a      	subs	r2, r3, r1
   15f2a:	d007      	beq.n	15f3c <d_type+0x490>
   15f2c:	2700      	movs	r7, #0
   15f2e:	5437      	strb	r7, [r6, r0]
   15f30:	6069      	str	r1, [r5, #4]
   15f32:	60aa      	str	r2, [r5, #8]
   15f34:	781a      	ldrb	r2, [r3, #0]
   15f36:	2a5f      	cmp	r2, #95	; 0x5f
   15f38:	f000 8190 	beq.w	1625c <d_type+0x7b0>
   15f3c:	2500      	movs	r5, #0
   15f3e:	e74f      	b.n	15de0 <d_type+0x334>
   15f40:	7893      	ldrb	r3, [r2, #2]
   15f42:	2b5f      	cmp	r3, #95	; 0x5f
   15f44:	f000 8180 	beq.w	16248 <d_type+0x79c>
   15f48:	f7fe fc9c 	bl	14884 <d_number_component>
   15f4c:	4605      	mov	r5, r0
   15f4e:	2d00      	cmp	r5, #0
   15f50:	f43f af46 	beq.w	15de0 <d_type+0x334>
   15f54:	68e3      	ldr	r3, [r4, #12]
   15f56:	781a      	ldrb	r2, [r3, #0]
   15f58:	2a5f      	cmp	r2, #95	; 0x5f
   15f5a:	d1ef      	bne.n	15f3c <d_type+0x490>
   15f5c:	3301      	adds	r3, #1
   15f5e:	60e3      	str	r3, [r4, #12]
   15f60:	4620      	mov	r0, r4
   15f62:	f7ff fda3 	bl	15aac <d_type>
   15f66:	462a      	mov	r2, r5
   15f68:	4603      	mov	r3, r0
   15f6a:	212d      	movs	r1, #45	; 0x2d
   15f6c:	4620      	mov	r0, r4
   15f6e:	f7fe fb0d 	bl	1458c <d_make_comp>
   15f72:	4605      	mov	r5, r0
   15f74:	e734      	b.n	15de0 <d_type+0x334>
   15f76:	6942      	ldr	r2, [r0, #20]
   15f78:	6983      	ldr	r3, [r0, #24]
   15f7a:	429a      	cmp	r2, r3
   15f7c:	f280 80fd 	bge.w	1617a <d_type+0x6ce>
   15f80:	230c      	movs	r3, #12
   15f82:	6901      	ldr	r1, [r0, #16]
   15f84:	fb03 f302 	mul.w	r3, r3, r2
   15f88:	18cd      	adds	r5, r1, r3
   15f8a:	f102 0201 	add.w	r2, r2, #1
   15f8e:	6142      	str	r2, [r0, #20]
   15f90:	f000 80f3 	beq.w	1617a <d_type+0x6ce>
   15f94:	4a15      	ldr	r2, [pc, #84]	; (15fec <d_type+0x540>)
   15f96:	2027      	movs	r0, #39	; 0x27
   15f98:	54c8      	strb	r0, [r1, r3]
   15f9a:	606a      	str	r2, [r5, #4]
   15f9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f9e:	3308      	adds	r3, #8
   15fa0:	6323      	str	r3, [r4, #48]	; 0x30
   15fa2:	e622      	b.n	15bea <d_type+0x13e>
   15fa4:	f7ff fd82 	bl	15aac <d_type>
   15fa8:	2300      	movs	r3, #0
   15faa:	4602      	mov	r2, r0
   15fac:	214a      	movs	r1, #74	; 0x4a
   15fae:	4620      	mov	r0, r4
   15fb0:	f7fe faec 	bl	1458c <d_make_comp>
   15fb4:	4605      	mov	r5, r0
   15fb6:	9001      	str	r0, [sp, #4]
   15fb8:	e6bd      	b.n	15d36 <d_type+0x28a>
   15fba:	6942      	ldr	r2, [r0, #20]
   15fbc:	6983      	ldr	r3, [r0, #24]
   15fbe:	429a      	cmp	r2, r3
   15fc0:	f280 80db 	bge.w	1617a <d_type+0x6ce>
   15fc4:	230c      	movs	r3, #12
   15fc6:	6901      	ldr	r1, [r0, #16]
   15fc8:	fb03 f302 	mul.w	r3, r3, r2
   15fcc:	18cd      	adds	r5, r1, r3
   15fce:	f102 0201 	add.w	r2, r2, #1
   15fd2:	6142      	str	r2, [r0, #20]
   15fd4:	f000 80d1 	beq.w	1617a <d_type+0x6ce>
   15fd8:	2027      	movs	r0, #39	; 0x27
   15fda:	4a05      	ldr	r2, [pc, #20]	; (15ff0 <d_type+0x544>)
   15fdc:	54c8      	strb	r0, [r1, r3]
   15fde:	606a      	str	r2, [r5, #4]
   15fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15fe2:	3311      	adds	r3, #17
   15fe4:	6323      	str	r3, [r4, #48]	; 0x30
   15fe6:	e600      	b.n	15bea <d_type+0x13e>
   15fe8:	00023d70 	.word	0x00023d70
   15fec:	00023fc8 	.word	0x00023fc8
   15ff0:	00023ff0 	.word	0x00023ff0
   15ff4:	6942      	ldr	r2, [r0, #20]
   15ff6:	6983      	ldr	r3, [r0, #24]
   15ff8:	429a      	cmp	r2, r3
   15ffa:	f280 80be 	bge.w	1617a <d_type+0x6ce>
   15ffe:	230c      	movs	r3, #12
   16000:	6901      	ldr	r1, [r0, #16]
   16002:	fb03 f302 	mul.w	r3, r3, r2
   16006:	18cd      	adds	r5, r1, r3
   16008:	f102 0201 	add.w	r2, r2, #1
   1600c:	6142      	str	r2, [r0, #20]
   1600e:	f000 80b4 	beq.w	1617a <d_type+0x6ce>
   16012:	2027      	movs	r0, #39	; 0x27
   16014:	4a92      	ldr	r2, [pc, #584]	; (16260 <d_type+0x7b4>)
   16016:	e7bf      	b.n	15f98 <d_type+0x4ec>
   16018:	6942      	ldr	r2, [r0, #20]
   1601a:	6983      	ldr	r3, [r0, #24]
   1601c:	429a      	cmp	r2, r3
   1601e:	f280 80ac 	bge.w	1617a <d_type+0x6ce>
   16022:	230c      	movs	r3, #12
   16024:	6901      	ldr	r1, [r0, #16]
   16026:	fb03 f302 	mul.w	r3, r3, r2
   1602a:	18cd      	adds	r5, r1, r3
   1602c:	f102 0201 	add.w	r2, r2, #1
   16030:	6142      	str	r2, [r0, #20]
   16032:	f000 80a2 	beq.w	1617a <d_type+0x6ce>
   16036:	2027      	movs	r0, #39	; 0x27
   16038:	4a8a      	ldr	r2, [pc, #552]	; (16264 <d_type+0x7b8>)
   1603a:	54c8      	strb	r0, [r1, r3]
   1603c:	606a      	str	r2, [r5, #4]
   1603e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16040:	3304      	adds	r3, #4
   16042:	6323      	str	r3, [r4, #48]	; 0x30
   16044:	e5d1      	b.n	15bea <d_type+0x13e>
   16046:	6942      	ldr	r2, [r0, #20]
   16048:	6983      	ldr	r3, [r0, #24]
   1604a:	429a      	cmp	r2, r3
   1604c:	f280 8095 	bge.w	1617a <d_type+0x6ce>
   16050:	230c      	movs	r3, #12
   16052:	6901      	ldr	r1, [r0, #16]
   16054:	fb03 f302 	mul.w	r3, r3, r2
   16058:	18cd      	adds	r5, r1, r3
   1605a:	f102 0201 	add.w	r2, r2, #1
   1605e:	6142      	str	r2, [r0, #20]
   16060:	f000 808b 	beq.w	1617a <d_type+0x6ce>
   16064:	4a80      	ldr	r2, [pc, #512]	; (16268 <d_type+0x7bc>)
   16066:	2027      	movs	r0, #39	; 0x27
   16068:	54c8      	strb	r0, [r1, r3]
   1606a:	606a      	str	r2, [r5, #4]
   1606c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1606e:	3309      	adds	r3, #9
   16070:	6323      	str	r3, [r4, #48]	; 0x30
   16072:	e5ba      	b.n	15bea <d_type+0x13e>
   16074:	6942      	ldr	r2, [r0, #20]
   16076:	6983      	ldr	r3, [r0, #24]
   16078:	429a      	cmp	r2, r3
   1607a:	da7e      	bge.n	1617a <d_type+0x6ce>
   1607c:	230c      	movs	r3, #12
   1607e:	6901      	ldr	r1, [r0, #16]
   16080:	fb03 f302 	mul.w	r3, r3, r2
   16084:	18cd      	adds	r5, r1, r3
   16086:	f102 0201 	add.w	r2, r2, #1
   1608a:	6142      	str	r2, [r0, #20]
   1608c:	d075      	beq.n	1617a <d_type+0x6ce>
   1608e:	2027      	movs	r0, #39	; 0x27
   16090:	4a76      	ldr	r2, [pc, #472]	; (1626c <d_type+0x7c0>)
   16092:	54c8      	strb	r0, [r1, r3]
   16094:	606a      	str	r2, [r5, #4]
   16096:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16098:	330a      	adds	r3, #10
   1609a:	6323      	str	r3, [r4, #48]	; 0x30
   1609c:	e5a5      	b.n	15bea <d_type+0x13e>
   1609e:	6942      	ldr	r2, [r0, #20]
   160a0:	6983      	ldr	r3, [r0, #24]
   160a2:	429a      	cmp	r2, r3
   160a4:	da69      	bge.n	1617a <d_type+0x6ce>
   160a6:	230c      	movs	r3, #12
   160a8:	6901      	ldr	r1, [r0, #16]
   160aa:	fb03 f302 	mul.w	r3, r3, r2
   160ae:	18cd      	adds	r5, r1, r3
   160b0:	f102 0201 	add.w	r2, r2, #1
   160b4:	6142      	str	r2, [r0, #20]
   160b6:	d060      	beq.n	1617a <d_type+0x6ce>
   160b8:	2027      	movs	r0, #39	; 0x27
   160ba:	4a6d      	ldr	r2, [pc, #436]	; (16270 <d_type+0x7c4>)
   160bc:	e7d4      	b.n	16068 <d_type+0x5bc>
   160be:	6942      	ldr	r2, [r0, #20]
   160c0:	6983      	ldr	r3, [r0, #24]
   160c2:	429a      	cmp	r2, r3
   160c4:	f6bf ad90 	bge.w	15be8 <d_type+0x13c>
   160c8:	230c      	movs	r3, #12
   160ca:	6901      	ldr	r1, [r0, #16]
   160cc:	fb03 f302 	mul.w	r3, r3, r2
   160d0:	18cd      	adds	r5, r1, r3
   160d2:	f102 0201 	add.w	r2, r2, #1
   160d6:	6142      	str	r2, [r0, #20]
   160d8:	f43f ad87 	beq.w	15bea <d_type+0x13e>
   160dc:	2000      	movs	r0, #0
   160de:	54c8      	strb	r0, [r1, r3]
   160e0:	4a64      	ldr	r2, [pc, #400]	; (16274 <d_type+0x7c8>)
   160e2:	606a      	str	r2, [r5, #4]
   160e4:	230e      	movs	r3, #14
   160e6:	60ab      	str	r3, [r5, #8]
   160e8:	e57f      	b.n	15bea <d_type+0x13e>
   160ea:	6942      	ldr	r2, [r0, #20]
   160ec:	6983      	ldr	r3, [r0, #24]
   160ee:	429a      	cmp	r2, r3
   160f0:	f6bf ad7a 	bge.w	15be8 <d_type+0x13c>
   160f4:	230c      	movs	r3, #12
   160f6:	6901      	ldr	r1, [r0, #16]
   160f8:	fb03 f302 	mul.w	r3, r3, r2
   160fc:	18cd      	adds	r5, r1, r3
   160fe:	f102 0201 	add.w	r2, r2, #1
   16102:	6142      	str	r2, [r0, #20]
   16104:	f43f ad71 	beq.w	15bea <d_type+0x13e>
   16108:	2000      	movs	r0, #0
   1610a:	54c8      	strb	r0, [r1, r3]
   1610c:	4a5a      	ldr	r2, [pc, #360]	; (16278 <d_type+0x7cc>)
   1610e:	606a      	str	r2, [r5, #4]
   16110:	2304      	movs	r3, #4
   16112:	60ab      	str	r3, [r5, #8]
   16114:	e569      	b.n	15bea <d_type+0x13e>
   16116:	6943      	ldr	r3, [r0, #20]
   16118:	6981      	ldr	r1, [r0, #24]
   1611a:	428b      	cmp	r3, r1
   1611c:	da7a      	bge.n	16214 <d_type+0x768>
   1611e:	6900      	ldr	r0, [r0, #16]
   16120:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16124:	0089      	lsls	r1, r1, #2
   16126:	3301      	adds	r3, #1
   16128:	1845      	adds	r5, r0, r1
   1612a:	262c      	movs	r6, #44	; 0x2c
   1612c:	6163      	str	r3, [r4, #20]
   1612e:	9501      	str	r5, [sp, #4]
   16130:	5446      	strb	r6, [r0, r1]
   16132:	7893      	ldrb	r3, [r2, #2]
   16134:	3b30      	subs	r3, #48	; 0x30
   16136:	b2db      	uxtb	r3, r3
   16138:	2b09      	cmp	r3, #9
   1613a:	bf94      	ite	ls
   1613c:	2301      	movls	r3, #1
   1613e:	2300      	movhi	r3, #0
   16140:	812b      	strh	r3, [r5, #8]
   16142:	d97b      	bls.n	1623c <d_type+0x790>
   16144:	4620      	mov	r0, r4
   16146:	f7ff fcb1 	bl	15aac <d_type>
   1614a:	9b01      	ldr	r3, [sp, #4]
   1614c:	6068      	str	r0, [r5, #4]
   1614e:	685b      	ldr	r3, [r3, #4]
   16150:	2b00      	cmp	r3, #0
   16152:	f43f ad49 	beq.w	15be8 <d_type+0x13c>
   16156:	f104 000c 	add.w	r0, r4, #12
   1615a:	f7fe fb69 	bl	14830 <d_number.isra.0>
   1615e:	68e2      	ldr	r2, [r4, #12]
   16160:	7813      	ldrb	r3, [r2, #0]
   16162:	b113      	cbz	r3, 1616a <d_type+0x6be>
   16164:	1c53      	adds	r3, r2, #1
   16166:	60e3      	str	r3, [r4, #12]
   16168:	7813      	ldrb	r3, [r2, #0]
   1616a:	9d01      	ldr	r5, [sp, #4]
   1616c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   16170:	fab3 f383 	clz	r3, r3
   16174:	095b      	lsrs	r3, r3, #5
   16176:	816b      	strh	r3, [r5, #10]
   16178:	e537      	b.n	15bea <d_type+0x13e>
   1617a:	2300      	movs	r3, #0
   1617c:	9301      	str	r3, [sp, #4]
   1617e:	685b      	ldr	r3, [r3, #4]
   16180:	deff      	udf	#255	; 0xff
   16182:	2500      	movs	r5, #0
   16184:	3101      	adds	r1, #1
   16186:	60e1      	str	r1, [r4, #12]
   16188:	4620      	mov	r0, r4
   1618a:	f7ff fc8f 	bl	15aac <d_type>
   1618e:	462a      	mov	r2, r5
   16190:	4603      	mov	r3, r0
   16192:	212a      	movs	r1, #42	; 0x2a
   16194:	4620      	mov	r0, r4
   16196:	f7fe f9f9 	bl	1458c <d_make_comp>
   1619a:	4605      	mov	r5, r0
   1619c:	e620      	b.n	15de0 <d_type+0x334>
   1619e:	2301      	movs	r3, #1
   161a0:	6b65      	ldr	r5, [r4, #52]	; 0x34
   161a2:	6363      	str	r3, [r4, #52]	; 0x34
   161a4:	4620      	mov	r0, r4
   161a6:	f7ff f85d 	bl	15264 <d_expression_1>
   161aa:	6365      	str	r5, [r4, #52]	; 0x34
   161ac:	4605      	mov	r5, r0
   161ae:	2800      	cmp	r0, #0
   161b0:	f43f aec4 	beq.w	15f3c <d_type+0x490>
   161b4:	68e3      	ldr	r3, [r4, #12]
   161b6:	e6bd      	b.n	15f34 <d_type+0x488>
   161b8:	4620      	mov	r0, r4
   161ba:	f7ff fabb 	bl	15734 <d_name>
   161be:	4605      	mov	r5, r0
   161c0:	9001      	str	r0, [sp, #4]
   161c2:	2800      	cmp	r0, #0
   161c4:	f43f ad10 	beq.w	15be8 <d_type+0x13c>
   161c8:	7803      	ldrb	r3, [r0, #0]
   161ca:	2b18      	cmp	r3, #24
   161cc:	f47f adb6 	bne.w	15d3c <d_type+0x290>
   161d0:	e50b      	b.n	15bea <d_type+0x13e>
   161d2:	4620      	mov	r0, r4
   161d4:	f7ff faa4 	bl	15720 <d_template_args>
   161d8:	462a      	mov	r2, r5
   161da:	4603      	mov	r3, r0
   161dc:	2104      	movs	r1, #4
   161de:	4620      	mov	r0, r4
   161e0:	f7fe f9d4 	bl	1458c <d_make_comp>
   161e4:	9001      	str	r0, [sp, #4]
   161e6:	e676      	b.n	15ed6 <d_type+0x42a>
   161e8:	4620      	mov	r0, r4
   161ea:	f8d4 9014 	ldr.w	r9, [r4, #20]
   161ee:	f8d4 8020 	ldr.w	r8, [r4, #32]
   161f2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   161f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
   161f6:	f7ff fa93 	bl	15720 <d_template_args>
   161fa:	68e2      	ldr	r2, [r4, #12]
   161fc:	7812      	ldrb	r2, [r2, #0]
   161fe:	2a49      	cmp	r2, #73	; 0x49
   16200:	d00b      	beq.n	1621a <d_type+0x76e>
   16202:	6325      	str	r5, [r4, #48]	; 0x30
   16204:	60e6      	str	r6, [r4, #12]
   16206:	f8c4 9014 	str.w	r9, [r4, #20]
   1620a:	f8c4 8020 	str.w	r8, [r4, #32]
   1620e:	62a7      	str	r7, [r4, #40]	; 0x28
   16210:	9d01      	ldr	r5, [sp, #4]
   16212:	e590      	b.n	15d36 <d_type+0x28a>
   16214:	2300      	movs	r3, #0
   16216:	701b      	strb	r3, [r3, #0]
   16218:	deff      	udf	#255	; 0xff
   1621a:	9b01      	ldr	r3, [sp, #4]
   1621c:	2b00      	cmp	r3, #0
   1621e:	f43f ace3 	beq.w	15be8 <d_type+0x13c>
   16222:	6a22      	ldr	r2, [r4, #32]
   16224:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16226:	428a      	cmp	r2, r1
   16228:	f6bf acde 	bge.w	15be8 <d_type+0x13c>
   1622c:	69e5      	ldr	r5, [r4, #28]
   1622e:	1c51      	adds	r1, r2, #1
   16230:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   16234:	9a01      	ldr	r2, [sp, #4]
   16236:	6221      	str	r1, [r4, #32]
   16238:	4603      	mov	r3, r0
   1623a:	e60a      	b.n	15e52 <d_type+0x3a6>
   1623c:	f104 000c 	add.w	r0, r4, #12
   16240:	f7fe faf6 	bl	14830 <d_number.isra.0>
   16244:	9d01      	ldr	r5, [sp, #4]
   16246:	e77d      	b.n	16144 <d_type+0x698>
   16248:	3203      	adds	r2, #3
   1624a:	2301      	movs	r3, #1
   1624c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   1624e:	60c2      	str	r2, [r0, #12]
   16250:	6343      	str	r3, [r0, #52]	; 0x34
   16252:	f7ff f807 	bl	15264 <d_expression_1>
   16256:	6366      	str	r6, [r4, #52]	; 0x34
   16258:	4605      	mov	r5, r0
   1625a:	e678      	b.n	15f4e <d_type+0x4a2>
   1625c:	4619      	mov	r1, r3
   1625e:	e791      	b.n	16184 <d_type+0x6d8>
   16260:	00023fdc 	.word	0x00023fdc
   16264:	00023fb4 	.word	0x00023fb4
   16268:	00023f78 	.word	0x00023f78
   1626c:	00023fa0 	.word	0x00023fa0
   16270:	00023f8c 	.word	0x00023f8c
   16274:	0002449c 	.word	0x0002449c
   16278:	00024494 	.word	0x00024494

0001627c <d_operator_name>:
   1627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1627e:	68c3      	ldr	r3, [r0, #12]
   16280:	781e      	ldrb	r6, [r3, #0]
   16282:	4684      	mov	ip, r0
   16284:	b326      	cbz	r6, 162d0 <d_operator_name+0x54>
   16286:	1c5a      	adds	r2, r3, #1
   16288:	60c2      	str	r2, [r0, #12]
   1628a:	785a      	ldrb	r2, [r3, #1]
   1628c:	781e      	ldrb	r6, [r3, #0]
   1628e:	2a00      	cmp	r2, #0
   16290:	d058      	beq.n	16344 <d_operator_name+0xc8>
   16292:	1c9a      	adds	r2, r3, #2
   16294:	60c2      	str	r2, [r0, #12]
   16296:	2e76      	cmp	r6, #118	; 0x76
   16298:	4604      	mov	r4, r0
   1629a:	f893 e001 	ldrb.w	lr, [r3, #1]
   1629e:	d043      	beq.n	16328 <d_operator_name+0xac>
   162a0:	2e63      	cmp	r6, #99	; 0x63
   162a2:	d116      	bne.n	162d2 <d_operator_name+0x56>
   162a4:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   162a8:	d113      	bne.n	162d2 <d_operator_name+0x56>
   162aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   162ac:	6b85      	ldr	r5, [r0, #56]	; 0x38
   162ae:	fab3 f383 	clz	r3, r3
   162b2:	095b      	lsrs	r3, r3, #5
   162b4:	6383      	str	r3, [r0, #56]	; 0x38
   162b6:	f7ff fbf9 	bl	15aac <d_type>
   162ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   162bc:	4602      	mov	r2, r0
   162be:	2b00      	cmp	r3, #0
   162c0:	d052      	beq.n	16368 <d_operator_name+0xec>
   162c2:	2300      	movs	r3, #0
   162c4:	2134      	movs	r1, #52	; 0x34
   162c6:	4620      	mov	r0, r4
   162c8:	f7fe f960 	bl	1458c <d_make_comp>
   162cc:	63a5      	str	r5, [r4, #56]	; 0x38
   162ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   162d0:	46b6      	mov	lr, r6
   162d2:	4c28      	ldr	r4, [pc, #160]	; (16374 <d_operator_name+0xf8>)
   162d4:	2043      	movs	r0, #67	; 0x43
   162d6:	2200      	movs	r2, #0
   162d8:	e004      	b.n	162e4 <d_operator_name+0x68>
   162da:	bf94      	ite	ls
   162dc:	1c5a      	addls	r2, r3, #1
   162de:	4618      	movhi	r0, r3
   162e0:	4282      	cmp	r2, r0
   162e2:	d02d      	beq.n	16340 <d_operator_name+0xc4>
   162e4:	1a83      	subs	r3, r0, r2
   162e6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   162ea:	eb02 0363 	add.w	r3, r2, r3, asr #1
   162ee:	0119      	lsls	r1, r3, #4
   162f0:	1867      	adds	r7, r4, r1
   162f2:	5861      	ldr	r1, [r4, r1]
   162f4:	780d      	ldrb	r5, [r1, #0]
   162f6:	42b5      	cmp	r5, r6
   162f8:	d1ef      	bne.n	162da <d_operator_name+0x5e>
   162fa:	7849      	ldrb	r1, [r1, #1]
   162fc:	4571      	cmp	r1, lr
   162fe:	d1ec      	bne.n	162da <d_operator_name+0x5e>
   16300:	f8dc 3014 	ldr.w	r3, [ip, #20]
   16304:	f8dc 2018 	ldr.w	r2, [ip, #24]
   16308:	4293      	cmp	r3, r2
   1630a:	da19      	bge.n	16340 <d_operator_name+0xc4>
   1630c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16310:	f8dc 1010 	ldr.w	r1, [ip, #16]
   16314:	0092      	lsls	r2, r2, #2
   16316:	3301      	adds	r3, #1
   16318:	1888      	adds	r0, r1, r2
   1631a:	f8cc 3014 	str.w	r3, [ip, #20]
   1631e:	d013      	beq.n	16348 <d_operator_name+0xcc>
   16320:	2331      	movs	r3, #49	; 0x31
   16322:	548b      	strb	r3, [r1, r2]
   16324:	6047      	str	r7, [r0, #4]
   16326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16328:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   1632c:	b2eb      	uxtb	r3, r5
   1632e:	2b09      	cmp	r3, #9
   16330:	d8cf      	bhi.n	162d2 <d_operator_name+0x56>
   16332:	f7fe fafd 	bl	14930 <d_source_name>
   16336:	6963      	ldr	r3, [r4, #20]
   16338:	69a2      	ldr	r2, [r4, #24]
   1633a:	4293      	cmp	r3, r2
   1633c:	4601      	mov	r1, r0
   1633e:	db04      	blt.n	1634a <d_operator_name+0xce>
   16340:	2000      	movs	r0, #0
   16342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16344:	4696      	mov	lr, r2
   16346:	e7c4      	b.n	162d2 <d_operator_name+0x56>
   16348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1634a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1634e:	6926      	ldr	r6, [r4, #16]
   16350:	0092      	lsls	r2, r2, #2
   16352:	3301      	adds	r3, #1
   16354:	18b0      	adds	r0, r6, r2
   16356:	6163      	str	r3, [r4, #20]
   16358:	d0f2      	beq.n	16340 <d_operator_name+0xc4>
   1635a:	2900      	cmp	r1, #0
   1635c:	d0f0      	beq.n	16340 <d_operator_name+0xc4>
   1635e:	2332      	movs	r3, #50	; 0x32
   16360:	54b3      	strb	r3, [r6, r2]
   16362:	6045      	str	r5, [r0, #4]
   16364:	6081      	str	r1, [r0, #8]
   16366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16368:	2133      	movs	r1, #51	; 0x33
   1636a:	4620      	mov	r0, r4
   1636c:	f7fe f90e 	bl	1458c <d_make_comp>
   16370:	e7ac      	b.n	162cc <d_operator_name+0x50>
   16372:	bf00      	nop
   16374:	00024004 	.word	0x00024004

00016378 <d_parmlist>:
   16378:	b530      	push	{r4, r5, lr}
   1637a:	68c2      	ldr	r2, [r0, #12]
   1637c:	b083      	sub	sp, #12
   1637e:	2300      	movs	r3, #0
   16380:	9301      	str	r3, [sp, #4]
   16382:	7813      	ldrb	r3, [r2, #0]
   16384:	b343      	cbz	r3, 163d8 <d_parmlist+0x60>
   16386:	2b45      	cmp	r3, #69	; 0x45
   16388:	d026      	beq.n	163d8 <d_parmlist+0x60>
   1638a:	2b2e      	cmp	r3, #46	; 0x2e
   1638c:	d024      	beq.n	163d8 <d_parmlist+0x60>
   1638e:	4604      	mov	r4, r0
   16390:	ad01      	add	r5, sp, #4
   16392:	e015      	b.n	163c0 <d_parmlist+0x48>
   16394:	2b4f      	cmp	r3, #79	; 0x4f
   16396:	d016      	beq.n	163c6 <d_parmlist+0x4e>
   16398:	f7ff fb88 	bl	15aac <d_type>
   1639c:	2300      	movs	r3, #0
   1639e:	4602      	mov	r2, r0
   163a0:	212e      	movs	r1, #46	; 0x2e
   163a2:	b1c8      	cbz	r0, 163d8 <d_parmlist+0x60>
   163a4:	4620      	mov	r0, r4
   163a6:	f7fe f8f1 	bl	1458c <d_make_comp>
   163aa:	6028      	str	r0, [r5, #0]
   163ac:	b1a0      	cbz	r0, 163d8 <d_parmlist+0x60>
   163ae:	68e2      	ldr	r2, [r4, #12]
   163b0:	7813      	ldrb	r3, [r2, #0]
   163b2:	f100 0508 	add.w	r5, r0, #8
   163b6:	b14b      	cbz	r3, 163cc <d_parmlist+0x54>
   163b8:	2b45      	cmp	r3, #69	; 0x45
   163ba:	d007      	beq.n	163cc <d_parmlist+0x54>
   163bc:	2b2e      	cmp	r3, #46	; 0x2e
   163be:	d005      	beq.n	163cc <d_parmlist+0x54>
   163c0:	2b52      	cmp	r3, #82	; 0x52
   163c2:	4620      	mov	r0, r4
   163c4:	d1e6      	bne.n	16394 <d_parmlist+0x1c>
   163c6:	7853      	ldrb	r3, [r2, #1]
   163c8:	2b45      	cmp	r3, #69	; 0x45
   163ca:	d1e5      	bne.n	16398 <d_parmlist+0x20>
   163cc:	9801      	ldr	r0, [sp, #4]
   163ce:	b118      	cbz	r0, 163d8 <d_parmlist+0x60>
   163d0:	6883      	ldr	r3, [r0, #8]
   163d2:	b123      	cbz	r3, 163de <d_parmlist+0x66>
   163d4:	b003      	add	sp, #12
   163d6:	bd30      	pop	{r4, r5, pc}
   163d8:	2000      	movs	r0, #0
   163da:	b003      	add	sp, #12
   163dc:	bd30      	pop	{r4, r5, pc}
   163de:	6842      	ldr	r2, [r0, #4]
   163e0:	7811      	ldrb	r1, [r2, #0]
   163e2:	2927      	cmp	r1, #39	; 0x27
   163e4:	d1f6      	bne.n	163d4 <d_parmlist+0x5c>
   163e6:	6852      	ldr	r2, [r2, #4]
   163e8:	7c11      	ldrb	r1, [r2, #16]
   163ea:	2909      	cmp	r1, #9
   163ec:	d1f2      	bne.n	163d4 <d_parmlist+0x5c>
   163ee:	6851      	ldr	r1, [r2, #4]
   163f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   163f2:	1a52      	subs	r2, r2, r1
   163f4:	6322      	str	r2, [r4, #48]	; 0x30
   163f6:	6043      	str	r3, [r0, #4]
   163f8:	e7ec      	b.n	163d4 <d_parmlist+0x5c>
   163fa:	bf00      	nop

000163fc <d_unqualified_name>:
   163fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163fe:	68c1      	ldr	r1, [r0, #12]
   16400:	780b      	ldrb	r3, [r1, #0]
   16402:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16406:	2a09      	cmp	r2, #9
   16408:	4604      	mov	r4, r0
   1640a:	d920      	bls.n	1644e <d_unqualified_name+0x52>
   1640c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16410:	2a19      	cmp	r2, #25
   16412:	d925      	bls.n	16460 <d_unqualified_name+0x64>
   16414:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   16418:	2a01      	cmp	r2, #1
   1641a:	d92c      	bls.n	16476 <d_unqualified_name+0x7a>
   1641c:	2b4c      	cmp	r3, #76	; 0x4c
   1641e:	f000 8088 	beq.w	16532 <d_unqualified_name+0x136>
   16422:	2b55      	cmp	r3, #85	; 0x55
   16424:	d133      	bne.n	1648e <d_unqualified_name+0x92>
   16426:	784b      	ldrb	r3, [r1, #1]
   16428:	2b6c      	cmp	r3, #108	; 0x6c
   1642a:	d033      	beq.n	16494 <d_unqualified_name+0x98>
   1642c:	2b74      	cmp	r3, #116	; 0x74
   1642e:	d12e      	bne.n	1648e <d_unqualified_name+0x92>
   16430:	1c4b      	adds	r3, r1, #1
   16432:	60c3      	str	r3, [r0, #12]
   16434:	784b      	ldrb	r3, [r1, #1]
   16436:	2b74      	cmp	r3, #116	; 0x74
   16438:	d05a      	beq.n	164f0 <d_unqualified_name+0xf4>
   1643a:	2b42      	cmp	r3, #66	; 0x42
   1643c:	f04f 0500 	mov.w	r5, #0
   16440:	d10c      	bne.n	1645c <d_unqualified_name+0x60>
   16442:	4629      	mov	r1, r5
   16444:	4620      	mov	r0, r4
   16446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1644a:	f7fe bacd 	b.w	149e8 <d_abi_tags>
   1644e:	f7fe fa6f 	bl	14930 <d_source_name>
   16452:	68e3      	ldr	r3, [r4, #12]
   16454:	781b      	ldrb	r3, [r3, #0]
   16456:	4605      	mov	r5, r0
   16458:	2b42      	cmp	r3, #66	; 0x42
   1645a:	d0f2      	beq.n	16442 <d_unqualified_name+0x46>
   1645c:	4628      	mov	r0, r5
   1645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16460:	f7ff ff0c 	bl	1627c <d_operator_name>
   16464:	4605      	mov	r5, r0
   16466:	b118      	cbz	r0, 16470 <d_unqualified_name+0x74>
   16468:	7803      	ldrb	r3, [r0, #0]
   1646a:	2b31      	cmp	r3, #49	; 0x31
   1646c:	f000 80b2 	beq.w	165d4 <d_unqualified_name+0x1d8>
   16470:	68e3      	ldr	r3, [r4, #12]
   16472:	781b      	ldrb	r3, [r3, #0]
   16474:	e7f0      	b.n	16458 <d_unqualified_name+0x5c>
   16476:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16478:	b125      	cbz	r5, 16484 <d_unqualified_name+0x88>
   1647a:	782a      	ldrb	r2, [r5, #0]
   1647c:	2a00      	cmp	r2, #0
   1647e:	d06c      	beq.n	1655a <d_unqualified_name+0x15e>
   16480:	2a18      	cmp	r2, #24
   16482:	d06a      	beq.n	1655a <d_unqualified_name+0x15e>
   16484:	2b43      	cmp	r3, #67	; 0x43
   16486:	f000 80bf 	beq.w	16608 <d_unqualified_name+0x20c>
   1648a:	2b44      	cmp	r3, #68	; 0x44
   1648c:	d06f      	beq.n	1656e <d_unqualified_name+0x172>
   1648e:	2500      	movs	r5, #0
   16490:	4628      	mov	r0, r5
   16492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16494:	1c4b      	adds	r3, r1, #1
   16496:	60c3      	str	r3, [r0, #12]
   16498:	784b      	ldrb	r3, [r1, #1]
   1649a:	2b6c      	cmp	r3, #108	; 0x6c
   1649c:	d1cd      	bne.n	1643a <d_unqualified_name+0x3e>
   1649e:	3102      	adds	r1, #2
   164a0:	60c1      	str	r1, [r0, #12]
   164a2:	f7ff ff69 	bl	16378 <d_parmlist>
   164a6:	4606      	mov	r6, r0
   164a8:	b1f0      	cbz	r0, 164e8 <d_unqualified_name+0xec>
   164aa:	68e2      	ldr	r2, [r4, #12]
   164ac:	7813      	ldrb	r3, [r2, #0]
   164ae:	2b45      	cmp	r3, #69	; 0x45
   164b0:	d1c3      	bne.n	1643a <d_unqualified_name+0x3e>
   164b2:	3201      	adds	r2, #1
   164b4:	60e2      	str	r2, [r4, #12]
   164b6:	4620      	mov	r0, r4
   164b8:	f7fe f9fc 	bl	148b4 <d_compact_number>
   164bc:	2800      	cmp	r0, #0
   164be:	db13      	blt.n	164e8 <d_unqualified_name+0xec>
   164c0:	6963      	ldr	r3, [r4, #20]
   164c2:	69a2      	ldr	r2, [r4, #24]
   164c4:	4293      	cmp	r3, r2
   164c6:	da0f      	bge.n	164e8 <d_unqualified_name+0xec>
   164c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   164cc:	6921      	ldr	r1, [r4, #16]
   164ce:	0092      	lsls	r2, r2, #2
   164d0:	3301      	adds	r3, #1
   164d2:	188d      	adds	r5, r1, r2
   164d4:	6163      	str	r3, [r4, #20]
   164d6:	d0cb      	beq.n	16470 <d_unqualified_name+0x74>
   164d8:	2345      	movs	r3, #69	; 0x45
   164da:	548b      	strb	r3, [r1, r2]
   164dc:	606e      	str	r6, [r5, #4]
   164de:	60a8      	str	r0, [r5, #8]
   164e0:	6a23      	ldr	r3, [r4, #32]
   164e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   164e4:	4293      	cmp	r3, r2
   164e6:	db1c      	blt.n	16522 <d_unqualified_name+0x126>
   164e8:	68e3      	ldr	r3, [r4, #12]
   164ea:	2500      	movs	r5, #0
   164ec:	781b      	ldrb	r3, [r3, #0]
   164ee:	e7b3      	b.n	16458 <d_unqualified_name+0x5c>
   164f0:	3102      	adds	r1, #2
   164f2:	60c1      	str	r1, [r0, #12]
   164f4:	f7fe f9de 	bl	148b4 <d_compact_number>
   164f8:	2800      	cmp	r0, #0
   164fa:	dbf5      	blt.n	164e8 <d_unqualified_name+0xec>
   164fc:	6963      	ldr	r3, [r4, #20]
   164fe:	69a2      	ldr	r2, [r4, #24]
   16500:	4293      	cmp	r3, r2
   16502:	daf1      	bge.n	164e8 <d_unqualified_name+0xec>
   16504:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16508:	6921      	ldr	r1, [r4, #16]
   1650a:	0092      	lsls	r2, r2, #2
   1650c:	3301      	adds	r3, #1
   1650e:	188d      	adds	r5, r1, r2
   16510:	6163      	str	r3, [r4, #20]
   16512:	d0ad      	beq.n	16470 <d_unqualified_name+0x74>
   16514:	2347      	movs	r3, #71	; 0x47
   16516:	548b      	strb	r3, [r1, r2]
   16518:	6068      	str	r0, [r5, #4]
   1651a:	6a23      	ldr	r3, [r4, #32]
   1651c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1651e:	4293      	cmp	r3, r2
   16520:	dae2      	bge.n	164e8 <d_unqualified_name+0xec>
   16522:	69e1      	ldr	r1, [r4, #28]
   16524:	68e2      	ldr	r2, [r4, #12]
   16526:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1652a:	3301      	adds	r3, #1
   1652c:	6223      	str	r3, [r4, #32]
   1652e:	7813      	ldrb	r3, [r2, #0]
   16530:	e792      	b.n	16458 <d_unqualified_name+0x5c>
   16532:	3101      	adds	r1, #1
   16534:	60c1      	str	r1, [r0, #12]
   16536:	f7fe f9fb 	bl	14930 <d_source_name>
   1653a:	4605      	mov	r5, r0
   1653c:	2800      	cmp	r0, #0
   1653e:	d0a6      	beq.n	1648e <d_unqualified_name+0x92>
   16540:	68e2      	ldr	r2, [r4, #12]
   16542:	7813      	ldrb	r3, [r2, #0]
   16544:	2b5f      	cmp	r3, #95	; 0x5f
   16546:	d187      	bne.n	16458 <d_unqualified_name+0x5c>
   16548:	4620      	mov	r0, r4
   1654a:	3201      	adds	r2, #1
   1654c:	f840 2f0c 	str.w	r2, [r0, #12]!
   16550:	f7fe f96e 	bl	14830 <d_number.isra.0>
   16554:	2800      	cmp	r0, #0
   16556:	da8b      	bge.n	16470 <d_unqualified_name+0x74>
   16558:	e799      	b.n	1648e <d_unqualified_name+0x92>
   1655a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1655c:	68aa      	ldr	r2, [r5, #8]
   1655e:	4413      	add	r3, r2
   16560:	6323      	str	r3, [r4, #48]	; 0x30
   16562:	780b      	ldrb	r3, [r1, #0]
   16564:	2b43      	cmp	r3, #67	; 0x43
   16566:	d04f      	beq.n	16608 <d_unqualified_name+0x20c>
   16568:	2b44      	cmp	r3, #68	; 0x44
   1656a:	f47f af66 	bne.w	1643a <d_unqualified_name+0x3e>
   1656e:	784b      	ldrb	r3, [r1, #1]
   16570:	3b30      	subs	r3, #48	; 0x30
   16572:	2b05      	cmp	r3, #5
   16574:	d88b      	bhi.n	1648e <d_unqualified_name+0x92>
   16576:	a201      	add	r2, pc, #4	; (adr r2, 1657c <d_unqualified_name+0x180>)
   16578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1657c:	000165d1 	.word	0x000165d1
   16580:	00016595 	.word	0x00016595
   16584:	000165cd 	.word	0x000165cd
   16588:	0001648f 	.word	0x0001648f
   1658c:	000165c9 	.word	0x000165c9
   16590:	000165c5 	.word	0x000165c5
   16594:	2702      	movs	r7, #2
   16596:	6963      	ldr	r3, [r4, #20]
   16598:	69a2      	ldr	r2, [r4, #24]
   1659a:	1c88      	adds	r0, r1, #2
   1659c:	4293      	cmp	r3, r2
   1659e:	60e0      	str	r0, [r4, #12]
   165a0:	da56      	bge.n	16650 <d_unqualified_name+0x254>
   165a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   165a6:	6920      	ldr	r0, [r4, #16]
   165a8:	0092      	lsls	r2, r2, #2
   165aa:	3301      	adds	r3, #1
   165ac:	1886      	adds	r6, r0, r2
   165ae:	6163      	str	r3, [r4, #20]
   165b0:	d005      	beq.n	165be <d_unqualified_name+0x1c2>
   165b2:	2d00      	cmp	r5, #0
   165b4:	d04f      	beq.n	16656 <d_unqualified_name+0x25a>
   165b6:	2308      	movs	r3, #8
   165b8:	5483      	strb	r3, [r0, r2]
   165ba:	7137      	strb	r7, [r6, #4]
   165bc:	60b5      	str	r5, [r6, #8]
   165be:	788b      	ldrb	r3, [r1, #2]
   165c0:	4635      	mov	r5, r6
   165c2:	e749      	b.n	16458 <d_unqualified_name+0x5c>
   165c4:	2705      	movs	r7, #5
   165c6:	e7e6      	b.n	16596 <d_unqualified_name+0x19a>
   165c8:	2704      	movs	r7, #4
   165ca:	e7e4      	b.n	16596 <d_unqualified_name+0x19a>
   165cc:	2703      	movs	r7, #3
   165ce:	e7e2      	b.n	16596 <d_unqualified_name+0x19a>
   165d0:	2701      	movs	r7, #1
   165d2:	e7e0      	b.n	16596 <d_unqualified_name+0x19a>
   165d4:	6842      	ldr	r2, [r0, #4]
   165d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   165d8:	6896      	ldr	r6, [r2, #8]
   165da:	6810      	ldr	r0, [r2, #0]
   165dc:	491f      	ldr	r1, [pc, #124]	; (1665c <d_unqualified_name+0x260>)
   165de:	3307      	adds	r3, #7
   165e0:	4433      	add	r3, r6
   165e2:	6323      	str	r3, [r4, #48]	; 0x30
   165e4:	f008 fa90 	bl	1eb08 <strcmp>
   165e8:	2800      	cmp	r0, #0
   165ea:	f47f af41 	bne.w	16470 <d_unqualified_name+0x74>
   165ee:	4620      	mov	r0, r4
   165f0:	f7fe f99e 	bl	14930 <d_source_name>
   165f4:	462a      	mov	r2, r5
   165f6:	4603      	mov	r3, r0
   165f8:	2136      	movs	r1, #54	; 0x36
   165fa:	4620      	mov	r0, r4
   165fc:	f7fd ffc6 	bl	1458c <d_make_comp>
   16600:	68e3      	ldr	r3, [r4, #12]
   16602:	4605      	mov	r5, r0
   16604:	781b      	ldrb	r3, [r3, #0]
   16606:	e727      	b.n	16458 <d_unqualified_name+0x5c>
   16608:	784b      	ldrb	r3, [r1, #1]
   1660a:	3b31      	subs	r3, #49	; 0x31
   1660c:	2b04      	cmp	r3, #4
   1660e:	f63f af3e 	bhi.w	1648e <d_unqualified_name+0x92>
   16612:	e8df f003 	tbb	[pc, r3]
   16616:	0315      	.short	0x0315
   16618:	191b      	.short	0x191b
   1661a:	17          	.byte	0x17
   1661b:	00          	.byte	0x00
   1661c:	2702      	movs	r7, #2
   1661e:	6963      	ldr	r3, [r4, #20]
   16620:	69a2      	ldr	r2, [r4, #24]
   16622:	1c88      	adds	r0, r1, #2
   16624:	4293      	cmp	r3, r2
   16626:	60e0      	str	r0, [r4, #12]
   16628:	da12      	bge.n	16650 <d_unqualified_name+0x254>
   1662a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1662e:	6920      	ldr	r0, [r4, #16]
   16630:	0092      	lsls	r2, r2, #2
   16632:	3301      	adds	r3, #1
   16634:	1886      	adds	r6, r0, r2
   16636:	6163      	str	r3, [r4, #20]
   16638:	d0c1      	beq.n	165be <d_unqualified_name+0x1c2>
   1663a:	b165      	cbz	r5, 16656 <d_unqualified_name+0x25a>
   1663c:	2307      	movs	r3, #7
   1663e:	e7bb      	b.n	165b8 <d_unqualified_name+0x1bc>
   16640:	2701      	movs	r7, #1
   16642:	e7ec      	b.n	1661e <d_unqualified_name+0x222>
   16644:	2705      	movs	r7, #5
   16646:	e7ea      	b.n	1661e <d_unqualified_name+0x222>
   16648:	2704      	movs	r7, #4
   1664a:	e7e8      	b.n	1661e <d_unqualified_name+0x222>
   1664c:	2703      	movs	r7, #3
   1664e:	e7e6      	b.n	1661e <d_unqualified_name+0x222>
   16650:	788b      	ldrb	r3, [r1, #2]
   16652:	2500      	movs	r5, #0
   16654:	e700      	b.n	16458 <d_unqualified_name+0x5c>
   16656:	788b      	ldrb	r3, [r1, #2]
   16658:	e6fe      	b.n	16458 <d_unqualified_name+0x5c>
   1665a:	bf00      	nop
   1665c:	000244ac 	.word	0x000244ac

00016660 <d_bare_function_type>:
   16660:	b570      	push	{r4, r5, r6, lr}
   16662:	68c3      	ldr	r3, [r0, #12]
   16664:	781a      	ldrb	r2, [r3, #0]
   16666:	2a4a      	cmp	r2, #74	; 0x4a
   16668:	4604      	mov	r4, r0
   1666a:	d00d      	beq.n	16688 <d_bare_function_type+0x28>
   1666c:	b971      	cbnz	r1, 1668c <d_bare_function_type+0x2c>
   1666e:	460d      	mov	r5, r1
   16670:	4620      	mov	r0, r4
   16672:	f7ff fe81 	bl	16378 <d_parmlist>
   16676:	b178      	cbz	r0, 16698 <d_bare_function_type+0x38>
   16678:	4603      	mov	r3, r0
   1667a:	462a      	mov	r2, r5
   1667c:	4620      	mov	r0, r4
   1667e:	2129      	movs	r1, #41	; 0x29
   16680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16684:	f7fd bf82 	b.w	1458c <d_make_comp>
   16688:	3301      	adds	r3, #1
   1668a:	60c3      	str	r3, [r0, #12]
   1668c:	4620      	mov	r0, r4
   1668e:	f7ff fa0d 	bl	15aac <d_type>
   16692:	4605      	mov	r5, r0
   16694:	2800      	cmp	r0, #0
   16696:	d1eb      	bne.n	16670 <d_bare_function_type+0x10>
   16698:	2000      	movs	r0, #0
   1669a:	bd70      	pop	{r4, r5, r6, pc}

0001669c <d_function_type>:
   1669c:	68c3      	ldr	r3, [r0, #12]
   1669e:	781a      	ldrb	r2, [r3, #0]
   166a0:	2a46      	cmp	r2, #70	; 0x46
   166a2:	d001      	beq.n	166a8 <d_function_type+0xc>
   166a4:	2000      	movs	r0, #0
   166a6:	4770      	bx	lr
   166a8:	b510      	push	{r4, lr}
   166aa:	1c5a      	adds	r2, r3, #1
   166ac:	60c2      	str	r2, [r0, #12]
   166ae:	785a      	ldrb	r2, [r3, #1]
   166b0:	2a59      	cmp	r2, #89	; 0x59
   166b2:	bf04      	itt	eq
   166b4:	3302      	addeq	r3, #2
   166b6:	60c3      	streq	r3, [r0, #12]
   166b8:	2101      	movs	r1, #1
   166ba:	4604      	mov	r4, r0
   166bc:	f7ff ffd0 	bl	16660 <d_bare_function_type>
   166c0:	4601      	mov	r1, r0
   166c2:	4620      	mov	r0, r4
   166c4:	f7fe f814 	bl	146f0 <d_ref_qualifier>
   166c8:	68e3      	ldr	r3, [r4, #12]
   166ca:	781a      	ldrb	r2, [r3, #0]
   166cc:	2a45      	cmp	r2, #69	; 0x45
   166ce:	d001      	beq.n	166d4 <d_function_type+0x38>
   166d0:	2000      	movs	r0, #0
   166d2:	bd10      	pop	{r4, pc}
   166d4:	3301      	adds	r3, #1
   166d6:	60e3      	str	r3, [r4, #12]
   166d8:	bd10      	pop	{r4, pc}
   166da:	bf00      	nop

000166dc <d_encoding>:
   166dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166e0:	68c3      	ldr	r3, [r0, #12]
   166e2:	781a      	ldrb	r2, [r3, #0]
   166e4:	2a47      	cmp	r2, #71	; 0x47
   166e6:	4605      	mov	r5, r0
   166e8:	d01f      	beq.n	1672a <d_encoding+0x4e>
   166ea:	2a54      	cmp	r2, #84	; 0x54
   166ec:	d01d      	beq.n	1672a <d_encoding+0x4e>
   166ee:	460e      	mov	r6, r1
   166f0:	f7ff f820 	bl	15734 <d_name>
   166f4:	4604      	mov	r4, r0
   166f6:	b310      	cbz	r0, 1673e <d_encoding+0x62>
   166f8:	b32e      	cbz	r6, 16746 <d_encoding+0x6a>
   166fa:	68ab      	ldr	r3, [r5, #8]
   166fc:	07db      	lsls	r3, r3, #31
   166fe:	d422      	bmi.n	16746 <d_encoding+0x6a>
   16700:	7823      	ldrb	r3, [r4, #0]
   16702:	f1a3 021c 	sub.w	r2, r3, #28
   16706:	2a04      	cmp	r2, #4
   16708:	d940      	bls.n	1678c <d_encoding+0xb0>
   1670a:	2b4c      	cmp	r3, #76	; 0x4c
   1670c:	d03e      	beq.n	1678c <d_encoding+0xb0>
   1670e:	2b02      	cmp	r3, #2
   16710:	d116      	bne.n	16740 <d_encoding+0x64>
   16712:	68a3      	ldr	r3, [r4, #8]
   16714:	781a      	ldrb	r2, [r3, #0]
   16716:	f1a2 011c 	sub.w	r1, r2, #28
   1671a:	2904      	cmp	r1, #4
   1671c:	f240 8283 	bls.w	16c26 <d_encoding+0x54a>
   16720:	2a4c      	cmp	r2, #76	; 0x4c
   16722:	f000 8280 	beq.w	16c26 <d_encoding+0x54a>
   16726:	60a3      	str	r3, [r4, #8]
   16728:	e00a      	b.n	16740 <d_encoding+0x64>
   1672a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1672c:	f101 0214 	add.w	r2, r1, #20
   16730:	632a      	str	r2, [r5, #48]	; 0x30
   16732:	781a      	ldrb	r2, [r3, #0]
   16734:	2a54      	cmp	r2, #84	; 0x54
   16736:	d02b      	beq.n	16790 <d_encoding+0xb4>
   16738:	2a47      	cmp	r2, #71	; 0x47
   1673a:	f000 809f 	beq.w	1687c <d_encoding+0x1a0>
   1673e:	2400      	movs	r4, #0
   16740:	4620      	mov	r0, r4
   16742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16746:	68eb      	ldr	r3, [r5, #12]
   16748:	781b      	ldrb	r3, [r3, #0]
   1674a:	2b00      	cmp	r3, #0
   1674c:	d0f8      	beq.n	16740 <d_encoding+0x64>
   1674e:	2b45      	cmp	r3, #69	; 0x45
   16750:	d0f6      	beq.n	16740 <d_encoding+0x64>
   16752:	4621      	mov	r1, r4
   16754:	780a      	ldrb	r2, [r1, #0]
   16756:	2a20      	cmp	r2, #32
   16758:	f200 8113 	bhi.w	16982 <d_encoding+0x2a6>
   1675c:	2a1c      	cmp	r2, #28
   1675e:	f080 8112 	bcs.w	16986 <d_encoding+0x2aa>
   16762:	2a04      	cmp	r2, #4
   16764:	f040 8101 	bne.w	1696a <d_encoding+0x28e>
   16768:	684a      	ldr	r2, [r1, #4]
   1676a:	b16a      	cbz	r2, 16788 <d_encoding+0xac>
   1676c:	7813      	ldrb	r3, [r2, #0]
   1676e:	2b08      	cmp	r3, #8
   16770:	f103 31ff 	add.w	r1, r3, #4294967295
   16774:	f200 80f6 	bhi.w	16964 <d_encoding+0x288>
   16778:	2b07      	cmp	r3, #7
   1677a:	f080 80f6 	bcs.w	1696a <d_encoding+0x28e>
   1677e:	2901      	cmp	r1, #1
   16780:	d802      	bhi.n	16788 <d_encoding+0xac>
   16782:	6892      	ldr	r2, [r2, #8]
   16784:	2a00      	cmp	r2, #0
   16786:	d1f1      	bne.n	1676c <d_encoding+0x90>
   16788:	2101      	movs	r1, #1
   1678a:	e0ef      	b.n	1696c <d_encoding+0x290>
   1678c:	6864      	ldr	r4, [r4, #4]
   1678e:	e7b7      	b.n	16700 <d_encoding+0x24>
   16790:	1c5a      	adds	r2, r3, #1
   16792:	60ea      	str	r2, [r5, #12]
   16794:	785a      	ldrb	r2, [r3, #1]
   16796:	2a00      	cmp	r2, #0
   16798:	d0d1      	beq.n	1673e <d_encoding+0x62>
   1679a:	1c9a      	adds	r2, r3, #2
   1679c:	60ea      	str	r2, [r5, #12]
   1679e:	785b      	ldrb	r3, [r3, #1]
   167a0:	3b43      	subs	r3, #67	; 0x43
   167a2:	2b33      	cmp	r3, #51	; 0x33
   167a4:	d8cb      	bhi.n	1673e <d_encoding+0x62>
   167a6:	a201      	add	r2, pc, #4	; (adr r2, 167ac <d_encoding+0xd0>)
   167a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   167ac:	00016be7 	.word	0x00016be7
   167b0:	0001673f 	.word	0x0001673f
   167b4:	0001673f 	.word	0x0001673f
   167b8:	00016bd1 	.word	0x00016bd1
   167bc:	0001673f 	.word	0x0001673f
   167c0:	00016bbb 	.word	0x00016bbb
   167c4:	00016ba5 	.word	0x00016ba5
   167c8:	00016b8f 	.word	0x00016b8f
   167cc:	0001673f 	.word	0x0001673f
   167d0:	0001673f 	.word	0x0001673f
   167d4:	0001673f 	.word	0x0001673f
   167d8:	0001673f 	.word	0x0001673f
   167dc:	0001673f 	.word	0x0001673f
   167e0:	0001673f 	.word	0x0001673f
   167e4:	0001673f 	.word	0x0001673f
   167e8:	0001673f 	.word	0x0001673f
   167ec:	00016b79 	.word	0x00016b79
   167f0:	00016b5f 	.word	0x00016b5f
   167f4:	0001673f 	.word	0x0001673f
   167f8:	00016b45 	.word	0x00016b45
   167fc:	00016b2f 	.word	0x00016b2f
   16800:	0001673f 	.word	0x0001673f
   16804:	0001673f 	.word	0x0001673f
   16808:	0001673f 	.word	0x0001673f
   1680c:	0001673f 	.word	0x0001673f
   16810:	0001673f 	.word	0x0001673f
   16814:	0001673f 	.word	0x0001673f
   16818:	0001673f 	.word	0x0001673f
   1681c:	0001673f 	.word	0x0001673f
   16820:	0001673f 	.word	0x0001673f
   16824:	0001673f 	.word	0x0001673f
   16828:	0001673f 	.word	0x0001673f
   1682c:	00016afb 	.word	0x00016afb
   16830:	0001673f 	.word	0x0001673f
   16834:	0001673f 	.word	0x0001673f
   16838:	0001673f 	.word	0x0001673f
   1683c:	0001673f 	.word	0x0001673f
   16840:	00016ad5 	.word	0x00016ad5
   16844:	0001673f 	.word	0x0001673f
   16848:	0001673f 	.word	0x0001673f
   1684c:	0001673f 	.word	0x0001673f
   16850:	0001673f 	.word	0x0001673f
   16854:	0001673f 	.word	0x0001673f
   16858:	0001673f 	.word	0x0001673f
   1685c:	0001673f 	.word	0x0001673f
   16860:	0001673f 	.word	0x0001673f
   16864:	0001673f 	.word	0x0001673f
   16868:	0001673f 	.word	0x0001673f
   1686c:	0001673f 	.word	0x0001673f
   16870:	0001673f 	.word	0x0001673f
   16874:	0001673f 	.word	0x0001673f
   16878:	00016aaf 	.word	0x00016aaf
   1687c:	1c5a      	adds	r2, r3, #1
   1687e:	60ea      	str	r2, [r5, #12]
   16880:	785a      	ldrb	r2, [r3, #1]
   16882:	2a00      	cmp	r2, #0
   16884:	f43f af5b 	beq.w	1673e <d_encoding+0x62>
   16888:	1c9a      	adds	r2, r3, #2
   1688a:	60ea      	str	r2, [r5, #12]
   1688c:	785a      	ldrb	r2, [r3, #1]
   1688e:	3a41      	subs	r2, #65	; 0x41
   16890:	2a31      	cmp	r2, #49	; 0x31
   16892:	f63f af54 	bhi.w	1673e <d_encoding+0x62>
   16896:	a101      	add	r1, pc, #4	; (adr r1, 1689c <d_encoding+0x1c0>)
   16898:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1689c:	00016991 	.word	0x00016991
   168a0:	0001673f 	.word	0x0001673f
   168a4:	0001673f 	.word	0x0001673f
   168a8:	0001673f 	.word	0x0001673f
   168ac:	0001673f 	.word	0x0001673f
   168b0:	0001673f 	.word	0x0001673f
   168b4:	0001673f 	.word	0x0001673f
   168b8:	0001673f 	.word	0x0001673f
   168bc:	0001673f 	.word	0x0001673f
   168c0:	0001673f 	.word	0x0001673f
   168c4:	0001673f 	.word	0x0001673f
   168c8:	0001673f 	.word	0x0001673f
   168cc:	0001673f 	.word	0x0001673f
   168d0:	0001673f 	.word	0x0001673f
   168d4:	0001673f 	.word	0x0001673f
   168d8:	0001673f 	.word	0x0001673f
   168dc:	0001673f 	.word	0x0001673f
   168e0:	00016a91 	.word	0x00016a91
   168e4:	0001673f 	.word	0x0001673f
   168e8:	00016a65 	.word	0x00016a65
   168ec:	0001673f 	.word	0x0001673f
   168f0:	00016a4f 	.word	0x00016a4f
   168f4:	0001673f 	.word	0x0001673f
   168f8:	0001673f 	.word	0x0001673f
   168fc:	0001673f 	.word	0x0001673f
   16900:	0001673f 	.word	0x0001673f
   16904:	0001673f 	.word	0x0001673f
   16908:	0001673f 	.word	0x0001673f
   1690c:	0001673f 	.word	0x0001673f
   16910:	0001673f 	.word	0x0001673f
   16914:	0001673f 	.word	0x0001673f
   16918:	0001673f 	.word	0x0001673f
   1691c:	0001673f 	.word	0x0001673f
   16920:	0001673f 	.word	0x0001673f
   16924:	0001673f 	.word	0x0001673f
   16928:	0001673f 	.word	0x0001673f
   1692c:	0001673f 	.word	0x0001673f
   16930:	0001673f 	.word	0x0001673f
   16934:	0001673f 	.word	0x0001673f
   16938:	0001673f 	.word	0x0001673f
   1693c:	0001673f 	.word	0x0001673f
   16940:	0001673f 	.word	0x0001673f
   16944:	0001673f 	.word	0x0001673f
   16948:	0001673f 	.word	0x0001673f
   1694c:	0001673f 	.word	0x0001673f
   16950:	0001673f 	.word	0x0001673f
   16954:	0001673f 	.word	0x0001673f
   16958:	0001673f 	.word	0x0001673f
   1695c:	0001673f 	.word	0x0001673f
   16960:	000169a9 	.word	0x000169a9
   16964:	2b34      	cmp	r3, #52	; 0x34
   16966:	f47f af0f 	bne.w	16788 <d_encoding+0xac>
   1696a:	2100      	movs	r1, #0
   1696c:	4628      	mov	r0, r5
   1696e:	f7ff fe77 	bl	16660 <d_bare_function_type>
   16972:	4622      	mov	r2, r4
   16974:	4603      	mov	r3, r0
   16976:	2103      	movs	r1, #3
   16978:	4628      	mov	r0, r5
   1697a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1697e:	f7fd be05 	b.w	1458c <d_make_comp>
   16982:	2a4c      	cmp	r2, #76	; 0x4c
   16984:	d1f1      	bne.n	1696a <d_encoding+0x28e>
   16986:	6849      	ldr	r1, [r1, #4]
   16988:	2900      	cmp	r1, #0
   1698a:	f47f aee3 	bne.w	16754 <d_encoding+0x78>
   1698e:	e7ed      	b.n	1696c <d_encoding+0x290>
   16990:	2100      	movs	r1, #0
   16992:	4628      	mov	r0, r5
   16994:	f7ff fea2 	bl	166dc <d_encoding>
   16998:	2300      	movs	r3, #0
   1699a:	4602      	mov	r2, r0
   1699c:	2117      	movs	r1, #23
   1699e:	4628      	mov	r0, r5
   169a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169a4:	f7fd bdf2 	b.w	1458c <d_make_comp>
   169a8:	f105 000c 	add.w	r0, r5, #12
   169ac:	f7fd ff40 	bl	14830 <d_number.isra.0>
   169b0:	2801      	cmp	r0, #1
   169b2:	f77f aec4 	ble.w	1673e <d_encoding+0x62>
   169b6:	68eb      	ldr	r3, [r5, #12]
   169b8:	781a      	ldrb	r2, [r3, #0]
   169ba:	2a00      	cmp	r2, #0
   169bc:	f43f aebf 	beq.w	1673e <d_encoding+0x62>
   169c0:	1c5f      	adds	r7, r3, #1
   169c2:	60ef      	str	r7, [r5, #12]
   169c4:	781b      	ldrb	r3, [r3, #0]
   169c6:	2b5f      	cmp	r3, #95	; 0x5f
   169c8:	f47f aeb9 	bne.w	1673e <d_encoding+0x62>
   169cc:	2200      	movs	r2, #0
   169ce:	1e46      	subs	r6, r0, #1
   169d0:	4690      	mov	r8, r2
   169d2:	f04f 0940 	mov.w	r9, #64	; 0x40
   169d6:	783b      	ldrb	r3, [r7, #0]
   169d8:	2b00      	cmp	r3, #0
   169da:	f43f aeb0 	beq.w	1673e <d_encoding+0x62>
   169de:	2b24      	cmp	r3, #36	; 0x24
   169e0:	f000 8128 	beq.w	16c34 <d_encoding+0x558>
   169e4:	463c      	mov	r4, r7
   169e6:	2100      	movs	r1, #0
   169e8:	e004      	b.n	169f4 <d_encoding+0x318>
   169ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   169ee:	b123      	cbz	r3, 169fa <d_encoding+0x31e>
   169f0:	2b24      	cmp	r3, #36	; 0x24
   169f2:	d002      	beq.n	169fa <d_encoding+0x31e>
   169f4:	3101      	adds	r1, #1
   169f6:	42b1      	cmp	r1, r6
   169f8:	dbf7      	blt.n	169ea <d_encoding+0x30e>
   169fa:	696c      	ldr	r4, [r5, #20]
   169fc:	69a8      	ldr	r0, [r5, #24]
   169fe:	4284      	cmp	r4, r0
   16a00:	f280 8113 	bge.w	16c2a <d_encoding+0x54e>
   16a04:	6928      	ldr	r0, [r5, #16]
   16a06:	1c63      	adds	r3, r4, #1
   16a08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16a0c:	616b      	str	r3, [r5, #20]
   16a0e:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   16a12:	f000 810a 	beq.w	16c2a <d_encoding+0x54e>
   16a16:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   16a1a:	605f      	str	r7, [r3, #4]
   16a1c:	6099      	str	r1, [r3, #8]
   16a1e:	68ef      	ldr	r7, [r5, #12]
   16a20:	440f      	add	r7, r1
   16a22:	1a76      	subs	r6, r6, r1
   16a24:	60ef      	str	r7, [r5, #12]
   16a26:	2a00      	cmp	r2, #0
   16a28:	f000 8121 	beq.w	16c6e <d_encoding+0x592>
   16a2c:	213f      	movs	r1, #63	; 0x3f
   16a2e:	4628      	mov	r0, r5
   16a30:	f7fd fdac 	bl	1458c <d_make_comp>
   16a34:	4602      	mov	r2, r0
   16a36:	2800      	cmp	r0, #0
   16a38:	f43f ae81 	beq.w	1673e <d_encoding+0x62>
   16a3c:	2e00      	cmp	r6, #0
   16a3e:	dcca      	bgt.n	169d6 <d_encoding+0x2fa>
   16a40:	4628      	mov	r0, r5
   16a42:	2300      	movs	r3, #0
   16a44:	213e      	movs	r1, #62	; 0x3e
   16a46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a4a:	f7fd bd9f 	b.w	1458c <d_make_comp>
   16a4e:	4628      	mov	r0, r5
   16a50:	f7fe fe70 	bl	15734 <d_name>
   16a54:	2300      	movs	r3, #0
   16a56:	4602      	mov	r2, r0
   16a58:	2113      	movs	r1, #19
   16a5a:	4628      	mov	r0, r5
   16a5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a60:	f7fd bd94 	b.w	1458c <d_make_comp>
   16a64:	789a      	ldrb	r2, [r3, #2]
   16a66:	2100      	movs	r1, #0
   16a68:	4628      	mov	r0, r5
   16a6a:	2a00      	cmp	r2, #0
   16a6c:	f000 8101 	beq.w	16c72 <d_encoding+0x596>
   16a70:	1cda      	adds	r2, r3, #3
   16a72:	60ea      	str	r2, [r5, #12]
   16a74:	789b      	ldrb	r3, [r3, #2]
   16a76:	2b6e      	cmp	r3, #110	; 0x6e
   16a78:	f040 80fb 	bne.w	16c72 <d_encoding+0x596>
   16a7c:	f7ff fe2e 	bl	166dc <d_encoding>
   16a80:	2300      	movs	r3, #0
   16a82:	4602      	mov	r2, r0
   16a84:	2149      	movs	r1, #73	; 0x49
   16a86:	4628      	mov	r0, r5
   16a88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a8c:	f7fd bd7e 	b.w	1458c <d_make_comp>
   16a90:	4628      	mov	r0, r5
   16a92:	f7fe fe4f 	bl	15734 <d_name>
   16a96:	4604      	mov	r4, r0
   16a98:	4628      	mov	r0, r5
   16a9a:	f7fd fef3 	bl	14884 <d_number_component>
   16a9e:	4622      	mov	r2, r4
   16aa0:	4603      	mov	r3, r0
   16aa2:	2116      	movs	r1, #22
   16aa4:	4628      	mov	r0, r5
   16aa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16aaa:	f7fd bd6f 	b.w	1458c <d_make_comp>
   16aae:	2176      	movs	r1, #118	; 0x76
   16ab0:	4628      	mov	r0, r5
   16ab2:	f7fe f871 	bl	14b98 <d_call_offset>
   16ab6:	2800      	cmp	r0, #0
   16ab8:	f43f ae41 	beq.w	1673e <d_encoding+0x62>
   16abc:	2100      	movs	r1, #0
   16abe:	4628      	mov	r0, r5
   16ac0:	f7ff fe0c 	bl	166dc <d_encoding>
   16ac4:	2300      	movs	r3, #0
   16ac6:	4602      	mov	r2, r0
   16ac8:	2110      	movs	r1, #16
   16aca:	4628      	mov	r0, r5
   16acc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ad0:	f7fd bd5c 	b.w	1458c <d_make_comp>
   16ad4:	2168      	movs	r1, #104	; 0x68
   16ad6:	4628      	mov	r0, r5
   16ad8:	f7fe f85e 	bl	14b98 <d_call_offset>
   16adc:	2800      	cmp	r0, #0
   16ade:	f43f ae2e 	beq.w	1673e <d_encoding+0x62>
   16ae2:	2100      	movs	r1, #0
   16ae4:	4628      	mov	r0, r5
   16ae6:	f7ff fdf9 	bl	166dc <d_encoding>
   16aea:	2300      	movs	r3, #0
   16aec:	4602      	mov	r2, r0
   16aee:	210f      	movs	r1, #15
   16af0:	4628      	mov	r0, r5
   16af2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16af6:	f7fd bd49 	b.w	1458c <d_make_comp>
   16afa:	2100      	movs	r1, #0
   16afc:	4628      	mov	r0, r5
   16afe:	f7fe f84b 	bl	14b98 <d_call_offset>
   16b02:	2800      	cmp	r0, #0
   16b04:	f43f ae1b 	beq.w	1673e <d_encoding+0x62>
   16b08:	2100      	movs	r1, #0
   16b0a:	4628      	mov	r0, r5
   16b0c:	f7fe f844 	bl	14b98 <d_call_offset>
   16b10:	2800      	cmp	r0, #0
   16b12:	f43f ae14 	beq.w	1673e <d_encoding+0x62>
   16b16:	2100      	movs	r1, #0
   16b18:	4628      	mov	r0, r5
   16b1a:	f7ff fddf 	bl	166dc <d_encoding>
   16b1e:	2300      	movs	r3, #0
   16b20:	4602      	mov	r2, r0
   16b22:	2111      	movs	r1, #17
   16b24:	4628      	mov	r0, r5
   16b26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b2a:	f7fd bd2f 	b.w	1458c <d_make_comp>
   16b2e:	4628      	mov	r0, r5
   16b30:	f7fe fe00 	bl	15734 <d_name>
   16b34:	2300      	movs	r3, #0
   16b36:	4602      	mov	r2, r0
   16b38:	2115      	movs	r1, #21
   16b3a:	4628      	mov	r0, r5
   16b3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b40:	f7fd bd24 	b.w	1458c <d_make_comp>
   16b44:	310f      	adds	r1, #15
   16b46:	6329      	str	r1, [r5, #48]	; 0x30
   16b48:	4628      	mov	r0, r5
   16b4a:	f7fe ffaf 	bl	15aac <d_type>
   16b4e:	2300      	movs	r3, #0
   16b50:	4602      	mov	r2, r0
   16b52:	2109      	movs	r1, #9
   16b54:	4628      	mov	r0, r5
   16b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b5a:	f7fd bd17 	b.w	1458c <d_make_comp>
   16b5e:	310a      	adds	r1, #10
   16b60:	6329      	str	r1, [r5, #48]	; 0x30
   16b62:	4628      	mov	r0, r5
   16b64:	f7fe ffa2 	bl	15aac <d_type>
   16b68:	2300      	movs	r3, #0
   16b6a:	4602      	mov	r2, r0
   16b6c:	210a      	movs	r1, #10
   16b6e:	4628      	mov	r0, r5
   16b70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b74:	f7fd bd0a 	b.w	1458c <d_make_comp>
   16b78:	4628      	mov	r0, r5
   16b7a:	f7fe ff97 	bl	15aac <d_type>
   16b7e:	2300      	movs	r3, #0
   16b80:	4602      	mov	r2, r0
   16b82:	210d      	movs	r1, #13
   16b84:	4628      	mov	r0, r5
   16b86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b8a:	f7fd bcff 	b.w	1458c <d_make_comp>
   16b8e:	4628      	mov	r0, r5
   16b90:	f7fe ff8c 	bl	15aac <d_type>
   16b94:	2300      	movs	r3, #0
   16b96:	4602      	mov	r2, r0
   16b98:	2112      	movs	r1, #18
   16b9a:	4628      	mov	r0, r5
   16b9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ba0:	f7fd bcf4 	b.w	1458c <d_make_comp>
   16ba4:	4628      	mov	r0, r5
   16ba6:	f7fe ff81 	bl	15aac <d_type>
   16baa:	2300      	movs	r3, #0
   16bac:	4602      	mov	r2, r0
   16bae:	210c      	movs	r1, #12
   16bb0:	4628      	mov	r0, r5
   16bb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bb6:	f7fd bce9 	b.w	1458c <d_make_comp>
   16bba:	4628      	mov	r0, r5
   16bbc:	f7fe fdba 	bl	15734 <d_name>
   16bc0:	2300      	movs	r3, #0
   16bc2:	4602      	mov	r2, r0
   16bc4:	2114      	movs	r1, #20
   16bc6:	4628      	mov	r0, r5
   16bc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bcc:	f7fd bcde 	b.w	1458c <d_make_comp>
   16bd0:	4628      	mov	r0, r5
   16bd2:	f7fe ff6b 	bl	15aac <d_type>
   16bd6:	2300      	movs	r3, #0
   16bd8:	4602      	mov	r2, r0
   16bda:	210e      	movs	r1, #14
   16bdc:	4628      	mov	r0, r5
   16bde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16be2:	f7fd bcd3 	b.w	1458c <d_make_comp>
   16be6:	4628      	mov	r0, r5
   16be8:	f7fe ff60 	bl	15aac <d_type>
   16bec:	4604      	mov	r4, r0
   16bee:	f105 000c 	add.w	r0, r5, #12
   16bf2:	f7fd fe1d 	bl	14830 <d_number.isra.0>
   16bf6:	2800      	cmp	r0, #0
   16bf8:	f6ff ada1 	blt.w	1673e <d_encoding+0x62>
   16bfc:	68eb      	ldr	r3, [r5, #12]
   16bfe:	781a      	ldrb	r2, [r3, #0]
   16c00:	2a5f      	cmp	r2, #95	; 0x5f
   16c02:	f47f ad9c 	bne.w	1673e <d_encoding+0x62>
   16c06:	3301      	adds	r3, #1
   16c08:	60eb      	str	r3, [r5, #12]
   16c0a:	4628      	mov	r0, r5
   16c0c:	f7fe ff4e 	bl	15aac <d_type>
   16c10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16c12:	1d59      	adds	r1, r3, #5
   16c14:	6329      	str	r1, [r5, #48]	; 0x30
   16c16:	4602      	mov	r2, r0
   16c18:	4623      	mov	r3, r4
   16c1a:	4628      	mov	r0, r5
   16c1c:	210b      	movs	r1, #11
   16c1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c22:	f7fd bcb3 	b.w	1458c <d_make_comp>
   16c26:	685b      	ldr	r3, [r3, #4]
   16c28:	e574      	b.n	16714 <d_encoding+0x38>
   16c2a:	68eb      	ldr	r3, [r5, #12]
   16c2c:	440b      	add	r3, r1
   16c2e:	60eb      	str	r3, [r5, #12]
   16c30:	2400      	movs	r4, #0
   16c32:	e585      	b.n	16740 <d_encoding+0x64>
   16c34:	787b      	ldrb	r3, [r7, #1]
   16c36:	2b53      	cmp	r3, #83	; 0x53
   16c38:	d027      	beq.n	16c8a <d_encoding+0x5ae>
   16c3a:	2b5f      	cmp	r3, #95	; 0x5f
   16c3c:	d023      	beq.n	16c86 <d_encoding+0x5aa>
   16c3e:	2b24      	cmp	r3, #36	; 0x24
   16c40:	f47f ad7d 	bne.w	1673e <d_encoding+0x62>
   16c44:	4618      	mov	r0, r3
   16c46:	6969      	ldr	r1, [r5, #20]
   16c48:	69ab      	ldr	r3, [r5, #24]
   16c4a:	4299      	cmp	r1, r3
   16c4c:	da1f      	bge.n	16c8e <d_encoding+0x5b2>
   16c4e:	692c      	ldr	r4, [r5, #16]
   16c50:	1c4f      	adds	r7, r1, #1
   16c52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16c56:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16c5a:	616f      	str	r7, [r5, #20]
   16c5c:	d017      	beq.n	16c8e <d_encoding+0x5b2>
   16c5e:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16c62:	6058      	str	r0, [r3, #4]
   16c64:	68ef      	ldr	r7, [r5, #12]
   16c66:	3702      	adds	r7, #2
   16c68:	3e02      	subs	r6, #2
   16c6a:	60ef      	str	r7, [r5, #12]
   16c6c:	e6db      	b.n	16a26 <d_encoding+0x34a>
   16c6e:	461a      	mov	r2, r3
   16c70:	e6e4      	b.n	16a3c <d_encoding+0x360>
   16c72:	f7ff fd33 	bl	166dc <d_encoding>
   16c76:	2300      	movs	r3, #0
   16c78:	4602      	mov	r2, r0
   16c7a:	2148      	movs	r1, #72	; 0x48
   16c7c:	4628      	mov	r0, r5
   16c7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c82:	f7fd bc83 	b.w	1458c <d_make_comp>
   16c86:	202e      	movs	r0, #46	; 0x2e
   16c88:	e7dd      	b.n	16c46 <d_encoding+0x56a>
   16c8a:	202f      	movs	r0, #47	; 0x2f
   16c8c:	e7db      	b.n	16c46 <d_encoding+0x56a>
   16c8e:	68eb      	ldr	r3, [r5, #12]
   16c90:	3302      	adds	r3, #2
   16c92:	60eb      	str	r3, [r5, #12]
   16c94:	2400      	movs	r4, #0
   16c96:	e553      	b.n	16740 <d_encoding+0x64>

00016c98 <d_expr_primary>:
   16c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c9a:	68c2      	ldr	r2, [r0, #12]
   16c9c:	7813      	ldrb	r3, [r2, #0]
   16c9e:	2b4c      	cmp	r3, #76	; 0x4c
   16ca0:	d001      	beq.n	16ca6 <d_expr_primary+0xe>
   16ca2:	2000      	movs	r0, #0
   16ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ca6:	1c53      	adds	r3, r2, #1
   16ca8:	60c3      	str	r3, [r0, #12]
   16caa:	7851      	ldrb	r1, [r2, #1]
   16cac:	295f      	cmp	r1, #95	; 0x5f
   16cae:	4605      	mov	r5, r0
   16cb0:	d03a      	beq.n	16d28 <d_expr_primary+0x90>
   16cb2:	295a      	cmp	r1, #90	; 0x5a
   16cb4:	d03f      	beq.n	16d36 <d_expr_primary+0x9e>
   16cb6:	f7fe fef9 	bl	15aac <d_type>
   16cba:	2800      	cmp	r0, #0
   16cbc:	d0f1      	beq.n	16ca2 <d_expr_primary+0xa>
   16cbe:	7803      	ldrb	r3, [r0, #0]
   16cc0:	2b27      	cmp	r3, #39	; 0x27
   16cc2:	d046      	beq.n	16d52 <d_expr_primary+0xba>
   16cc4:	68ee      	ldr	r6, [r5, #12]
   16cc6:	7833      	ldrb	r3, [r6, #0]
   16cc8:	2b6e      	cmp	r3, #110	; 0x6e
   16cca:	d04b      	beq.n	16d64 <d_expr_primary+0xcc>
   16ccc:	213c      	movs	r1, #60	; 0x3c
   16cce:	2b45      	cmp	r3, #69	; 0x45
   16cd0:	d04e      	beq.n	16d70 <d_expr_primary+0xd8>
   16cd2:	2b00      	cmp	r3, #0
   16cd4:	d0e5      	beq.n	16ca2 <d_expr_primary+0xa>
   16cd6:	4633      	mov	r3, r6
   16cd8:	e001      	b.n	16cde <d_expr_primary+0x46>
   16cda:	2c00      	cmp	r4, #0
   16cdc:	d0e1      	beq.n	16ca2 <d_expr_primary+0xa>
   16cde:	3301      	adds	r3, #1
   16ce0:	60eb      	str	r3, [r5, #12]
   16ce2:	781c      	ldrb	r4, [r3, #0]
   16ce4:	2c45      	cmp	r4, #69	; 0x45
   16ce6:	d1f8      	bne.n	16cda <d_expr_primary+0x42>
   16ce8:	1b9c      	subs	r4, r3, r6
   16cea:	696b      	ldr	r3, [r5, #20]
   16cec:	69aa      	ldr	r2, [r5, #24]
   16cee:	4293      	cmp	r3, r2
   16cf0:	da2d      	bge.n	16d4e <d_expr_primary+0xb6>
   16cf2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16cf6:	692f      	ldr	r7, [r5, #16]
   16cf8:	3301      	adds	r3, #1
   16cfa:	0092      	lsls	r2, r2, #2
   16cfc:	616b      	str	r3, [r5, #20]
   16cfe:	18bb      	adds	r3, r7, r2
   16d00:	d025      	beq.n	16d4e <d_expr_primary+0xb6>
   16d02:	b326      	cbz	r6, 16d4e <d_expr_primary+0xb6>
   16d04:	b31c      	cbz	r4, 16d4e <d_expr_primary+0xb6>
   16d06:	f04f 0e00 	mov.w	lr, #0
   16d0a:	f807 e002 	strb.w	lr, [r7, r2]
   16d0e:	605e      	str	r6, [r3, #4]
   16d10:	609c      	str	r4, [r3, #8]
   16d12:	4602      	mov	r2, r0
   16d14:	4628      	mov	r0, r5
   16d16:	f7fd fc39 	bl	1458c <d_make_comp>
   16d1a:	68eb      	ldr	r3, [r5, #12]
   16d1c:	781a      	ldrb	r2, [r3, #0]
   16d1e:	2a45      	cmp	r2, #69	; 0x45
   16d20:	d1bf      	bne.n	16ca2 <d_expr_primary+0xa>
   16d22:	3301      	adds	r3, #1
   16d24:	60eb      	str	r3, [r5, #12]
   16d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d28:	1c93      	adds	r3, r2, #2
   16d2a:	60c3      	str	r3, [r0, #12]
   16d2c:	7892      	ldrb	r2, [r2, #2]
   16d2e:	2a5a      	cmp	r2, #90	; 0x5a
   16d30:	bf18      	it	ne
   16d32:	2000      	movne	r0, #0
   16d34:	d107      	bne.n	16d46 <d_expr_primary+0xae>
   16d36:	3301      	adds	r3, #1
   16d38:	60eb      	str	r3, [r5, #12]
   16d3a:	2100      	movs	r1, #0
   16d3c:	4628      	mov	r0, r5
   16d3e:	f7ff fccd 	bl	166dc <d_encoding>
   16d42:	68eb      	ldr	r3, [r5, #12]
   16d44:	781a      	ldrb	r2, [r3, #0]
   16d46:	2a45      	cmp	r2, #69	; 0x45
   16d48:	d0eb      	beq.n	16d22 <d_expr_primary+0x8a>
   16d4a:	2000      	movs	r0, #0
   16d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d4e:	2300      	movs	r3, #0
   16d50:	e7df      	b.n	16d12 <d_expr_primary+0x7a>
   16d52:	6843      	ldr	r3, [r0, #4]
   16d54:	7c1a      	ldrb	r2, [r3, #16]
   16d56:	2a00      	cmp	r2, #0
   16d58:	d0b4      	beq.n	16cc4 <d_expr_primary+0x2c>
   16d5a:	685a      	ldr	r2, [r3, #4]
   16d5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16d5e:	1a9b      	subs	r3, r3, r2
   16d60:	632b      	str	r3, [r5, #48]	; 0x30
   16d62:	e7af      	b.n	16cc4 <d_expr_primary+0x2c>
   16d64:	1c72      	adds	r2, r6, #1
   16d66:	60ea      	str	r2, [r5, #12]
   16d68:	7873      	ldrb	r3, [r6, #1]
   16d6a:	213d      	movs	r1, #61	; 0x3d
   16d6c:	4616      	mov	r6, r2
   16d6e:	e7ae      	b.n	16cce <d_expr_primary+0x36>
   16d70:	2400      	movs	r4, #0
   16d72:	e7ba      	b.n	16cea <d_expr_primary+0x52>

00016d74 <d_print_comp_inner>:
   16d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d78:	4604      	mov	r4, r0
   16d7a:	b095      	sub	sp, #84	; 0x54
   16d7c:	2a00      	cmp	r2, #0
   16d7e:	f000 80db 	beq.w	16f38 <d_print_comp_inner+0x1c4>
   16d82:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16d86:	2f00      	cmp	r7, #0
   16d88:	f040 80c2 	bne.w	16f10 <d_print_comp_inner+0x19c>
   16d8c:	7813      	ldrb	r3, [r2, #0]
   16d8e:	4688      	mov	r8, r1
   16d90:	4615      	mov	r5, r2
   16d92:	2b4d      	cmp	r3, #77	; 0x4d
   16d94:	f201 81e6 	bhi.w	18164 <d_print_comp_inner+0x13f0>
   16d98:	e8df f013 	tbh	[pc, r3, lsl #1]
   16d9c:	043c045a 	.word	0x043c045a
   16da0:	03a4043c 	.word	0x03a4043c
   16da4:	048904a5 	.word	0x048904a5
   16da8:	038e04ea 	.word	0x038e04ea
   16dac:	0330037c 	.word	0x0330037c
   16db0:	030a0356 	.word	0x030a0356
   16db4:	029802e4 	.word	0x029802e4
   16db8:	027202be 	.word	0x027202be
   16dbc:	01f0024c 	.word	0x01f0024c
   16dc0:	01ca0226 	.word	0x01ca0226
   16dc4:	015801a4 	.word	0x015801a4
   16dc8:	0132017e 	.word	0x0132017e
   16dcc:	00f2010b 	.word	0x00f2010b
   16dd0:	00f200f2 	.word	0x00f200f2
   16dd4:	00d400d4 	.word	0x00d400d4
   16dd8:	00d400d4 	.word	0x00d400d4
   16ddc:	00d400d4 	.word	0x00d400d4
   16de0:	06d500d4 	.word	0x06d500d4
   16de4:	00d406d5 	.word	0x00d406d5
   16de8:	06a900d4 	.word	0x06a900d4
   16dec:	069306fc 	.word	0x069306fc
   16df0:	0701071d 	.word	0x0701071d
   16df4:	07010788 	.word	0x07010788
   16df8:	057b057b 	.word	0x057b057b
   16dfc:	06060630 	.word	0x06060630
   16e00:	09e405e0 	.word	0x09e405e0
   16e04:	068e05ad 	.word	0x068e05ad
   16e08:	004e0654 	.word	0x004e0654
   16e0c:	094c0485 	.word	0x094c0485
   16e10:	08df08df 	.word	0x08df08df
   16e14:	08ae08ae 	.word	0x08ae08ae
   16e18:	05480888 	.word	0x05480888
   16e1c:	08e4053a 	.word	0x08e4053a
   16e20:	09be0514 	.word	0x09be0514
   16e24:	09980914 	.word	0x09980914
   16e28:	07cb09e4 	.word	0x07cb09e4
   16e2c:	07f10862 	.word	0x07f10862
   16e30:	04130817 	.word	0x04130817
   16e34:	055200d4 	.word	0x055200d4
   16e38:	68ab      	ldr	r3, [r5, #8]
   16e3a:	781b      	ldrb	r3, [r3, #0]
   16e3c:	2b38      	cmp	r3, #56	; 0x38
   16e3e:	d17b      	bne.n	16f38 <d_print_comp_inner+0x1c4>
   16e40:	686a      	ldr	r2, [r5, #4]
   16e42:	6853      	ldr	r3, [r2, #4]
   16e44:	681b      	ldr	r3, [r3, #0]
   16e46:	7859      	ldrb	r1, [r3, #1]
   16e48:	2963      	cmp	r1, #99	; 0x63
   16e4a:	f002 814a 	beq.w	190e2 <d_print_comp_inner+0x236e>
   16e4e:	f105 0308 	add.w	r3, r5, #8
   16e52:	4641      	mov	r1, r8
   16e54:	4620      	mov	r0, r4
   16e56:	f003 fbbb 	bl	1a5d0 <d_maybe_print_fold_expression.isra.15>
   16e5a:	4606      	mov	r6, r0
   16e5c:	2800      	cmp	r0, #0
   16e5e:	d157      	bne.n	16f10 <d_print_comp_inner+0x19c>
   16e60:	686b      	ldr	r3, [r5, #4]
   16e62:	781a      	ldrb	r2, [r3, #0]
   16e64:	2a31      	cmp	r2, #49	; 0x31
   16e66:	f002 836b 	beq.w	19540 <d_print_comp_inner+0x27cc>
   16e6a:	685b      	ldr	r3, [r3, #4]
   16e6c:	49c7      	ldr	r1, [pc, #796]	; (1718c <d_print_comp_inner+0x418>)
   16e6e:	6818      	ldr	r0, [r3, #0]
   16e70:	f007 fe4a 	bl	1eb08 <strcmp>
   16e74:	68ab      	ldr	r3, [r5, #8]
   16e76:	b920      	cbnz	r0, 16e82 <d_print_comp_inner+0x10e>
   16e78:	685a      	ldr	r2, [r3, #4]
   16e7a:	7811      	ldrb	r1, [r2, #0]
   16e7c:	2903      	cmp	r1, #3
   16e7e:	f002 83a5 	beq.w	195cc <d_print_comp_inner+0x2858>
   16e82:	685a      	ldr	r2, [r3, #4]
   16e84:	4641      	mov	r1, r8
   16e86:	4620      	mov	r0, r4
   16e88:	f003 fb3e 	bl	1a508 <d_print_subexpr>
   16e8c:	686f      	ldr	r7, [r5, #4]
   16e8e:	49c0      	ldr	r1, [pc, #768]	; (17190 <d_print_comp_inner+0x41c>)
   16e90:	687b      	ldr	r3, [r7, #4]
   16e92:	f8d3 9000 	ldr.w	r9, [r3]
   16e96:	4648      	mov	r0, r9
   16e98:	f007 fe36 	bl	1eb08 <strcmp>
   16e9c:	4606      	mov	r6, r0
   16e9e:	2800      	cmp	r0, #0
   16ea0:	f042 826f 	bne.w	19382 <d_print_comp_inner+0x260e>
   16ea4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16ea8:	29ff      	cmp	r1, #255	; 0xff
   16eaa:	f002 844a 	beq.w	19742 <d_print_comp_inner+0x29ce>
   16eae:	1c4a      	adds	r2, r1, #1
   16eb0:	235b      	movs	r3, #91	; 0x5b
   16eb2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16eb6:	5463      	strb	r3, [r4, r1]
   16eb8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16ebc:	68ab      	ldr	r3, [r5, #8]
   16ebe:	4641      	mov	r1, r8
   16ec0:	689a      	ldr	r2, [r3, #8]
   16ec2:	4620      	mov	r0, r4
   16ec4:	f002 fcfa 	bl	198bc <d_print_comp>
   16ec8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16ecc:	29ff      	cmp	r1, #255	; 0xff
   16ece:	f002 8425 	beq.w	1971c <d_print_comp_inner+0x29a8>
   16ed2:	235d      	movs	r3, #93	; 0x5d
   16ed4:	1c4a      	adds	r2, r1, #1
   16ed6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16eda:	5463      	strb	r3, [r4, r1]
   16edc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16ee0:	686b      	ldr	r3, [r5, #4]
   16ee2:	781a      	ldrb	r2, [r3, #0]
   16ee4:	2a31      	cmp	r2, #49	; 0x31
   16ee6:	d113      	bne.n	16f10 <d_print_comp_inner+0x19c>
   16ee8:	685b      	ldr	r3, [r3, #4]
   16eea:	689a      	ldr	r2, [r3, #8]
   16eec:	2a01      	cmp	r2, #1
   16eee:	d10f      	bne.n	16f10 <d_print_comp_inner+0x19c>
   16ef0:	685b      	ldr	r3, [r3, #4]
   16ef2:	781b      	ldrb	r3, [r3, #0]
   16ef4:	2b3e      	cmp	r3, #62	; 0x3e
   16ef6:	d10b      	bne.n	16f10 <d_print_comp_inner+0x19c>
   16ef8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16efc:	29ff      	cmp	r1, #255	; 0xff
   16efe:	f002 8482 	beq.w	19806 <d_print_comp_inner+0x2a92>
   16f02:	2329      	movs	r3, #41	; 0x29
   16f04:	1c4a      	adds	r2, r1, #1
   16f06:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16f0a:	5463      	strb	r3, [r4, r1]
   16f0c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16f10:	b015      	add	sp, #84	; 0x54
   16f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f16:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16f1a:	2b00      	cmp	r3, #0
   16f1c:	f2c1 84a4 	blt.w	18868 <d_print_comp_inner+0x1af4>
   16f20:	2b00      	cmp	r3, #0
   16f22:	f002 8432 	beq.w	1978a <d_print_comp_inner+0x2a16>
   16f26:	6880      	ldr	r0, [r0, #8]
   16f28:	3b01      	subs	r3, #1
   16f2a:	b110      	cbz	r0, 16f32 <d_print_comp_inner+0x1be>
   16f2c:	7802      	ldrb	r2, [r0, #0]
   16f2e:	2a2f      	cmp	r2, #47	; 0x2f
   16f30:	d0f6      	beq.n	16f20 <d_print_comp_inner+0x1ac>
   16f32:	b10f      	cbz	r7, 16f38 <d_print_comp_inner+0x1c4>
   16f34:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16f38:	2301      	movs	r3, #1
   16f3a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16f3e:	b015      	add	sp, #84	; 0x54
   16f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f44:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16f48:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16f4c:	9505      	str	r5, [sp, #20]
   16f4e:	ab14      	add	r3, sp, #80	; 0x50
   16f50:	2100      	movs	r1, #0
   16f52:	f843 cd40 	str.w	ip, [r3, #-64]!
   16f56:	9106      	str	r1, [sp, #24]
   16f58:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16f5c:	9207      	str	r2, [sp, #28]
   16f5e:	686a      	ldr	r2, [r5, #4]
   16f60:	4641      	mov	r1, r8
   16f62:	4620      	mov	r0, r4
   16f64:	f002 fcaa 	bl	198bc <d_print_comp>
   16f68:	9b06      	ldr	r3, [sp, #24]
   16f6a:	2b00      	cmp	r3, #0
   16f6c:	f001 8389 	beq.w	18682 <d_print_comp_inner+0x190e>
   16f70:	9b04      	ldr	r3, [sp, #16]
   16f72:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16f76:	2f00      	cmp	r7, #0
   16f78:	d0ca      	beq.n	16f10 <d_print_comp_inner+0x19c>
   16f7a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16f7e:	e7c7      	b.n	16f10 <d_print_comp_inner+0x19c>
   16f80:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   16f84:	f1bc 0f00 	cmp.w	ip, #0
   16f88:	d0de      	beq.n	16f48 <d_print_comp_inner+0x1d4>
   16f8a:	4662      	mov	r2, ip
   16f8c:	e005      	b.n	16f9a <d_print_comp_inner+0x226>
   16f8e:	428b      	cmp	r3, r1
   16f90:	f001 86b8 	beq.w	18d04 <d_print_comp_inner+0x1f90>
   16f94:	6812      	ldr	r2, [r2, #0]
   16f96:	2a00      	cmp	r2, #0
   16f98:	d0d6      	beq.n	16f48 <d_print_comp_inner+0x1d4>
   16f9a:	6890      	ldr	r0, [r2, #8]
   16f9c:	2800      	cmp	r0, #0
   16f9e:	d1f9      	bne.n	16f94 <d_print_comp_inner+0x220>
   16fa0:	6851      	ldr	r1, [r2, #4]
   16fa2:	7809      	ldrb	r1, [r1, #0]
   16fa4:	f1a1 0e19 	sub.w	lr, r1, #25
   16fa8:	f1be 0f02 	cmp.w	lr, #2
   16fac:	d9ef      	bls.n	16f8e <d_print_comp_inner+0x21a>
   16fae:	4607      	mov	r7, r0
   16fb0:	e7ca      	b.n	16f48 <d_print_comp_inner+0x1d4>
   16fb2:	68af      	ldr	r7, [r5, #8]
   16fb4:	686d      	ldr	r5, [r5, #4]
   16fb6:	2f00      	cmp	r7, #0
   16fb8:	d0aa      	beq.n	16f10 <d_print_comp_inner+0x19c>
   16fba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16fbe:	442f      	add	r7, r5
   16fc0:	f04f 0800 	mov.w	r8, #0
   16fc4:	e008      	b.n	16fd8 <d_print_comp_inner+0x264>
   16fc6:	460b      	mov	r3, r1
   16fc8:	3101      	adds	r1, #1
   16fca:	42bd      	cmp	r5, r7
   16fcc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16fd0:	54e6      	strb	r6, [r4, r3]
   16fd2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   16fd6:	d09b      	beq.n	16f10 <d_print_comp_inner+0x19c>
   16fd8:	29ff      	cmp	r1, #255	; 0xff
   16fda:	f815 6b01 	ldrb.w	r6, [r5], #1
   16fde:	d1f2      	bne.n	16fc6 <d_print_comp_inner+0x252>
   16fe0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16fe4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   16fe8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16fec:	4620      	mov	r0, r4
   16fee:	4798      	blx	r3
   16ff0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16ff4:	3301      	adds	r3, #1
   16ff6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16ffa:	2101      	movs	r1, #1
   16ffc:	2300      	movs	r3, #0
   16ffe:	e7e4      	b.n	16fca <d_print_comp_inner+0x256>
   17000:	4e64      	ldr	r6, [pc, #400]	; (17194 <d_print_comp_inner+0x420>)
   17002:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17006:	f106 0a11 	add.w	sl, r6, #17
   1700a:	f04f 0900 	mov.w	r9, #0
   1700e:	e009      	b.n	17024 <d_print_comp_inner+0x2b0>
   17010:	460b      	mov	r3, r1
   17012:	3101      	adds	r1, #1
   17014:	4556      	cmp	r6, sl
   17016:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1701a:	54e7      	strb	r7, [r4, r3]
   1701c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17020:	f001 8296 	beq.w	18550 <d_print_comp_inner+0x17dc>
   17024:	29ff      	cmp	r1, #255	; 0xff
   17026:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1702a:	d1f1      	bne.n	17010 <d_print_comp_inner+0x29c>
   1702c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17030:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17034:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17038:	4620      	mov	r0, r4
   1703a:	4798      	blx	r3
   1703c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17040:	3301      	adds	r3, #1
   17042:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17046:	2101      	movs	r1, #1
   17048:	2300      	movs	r3, #0
   1704a:	e7e3      	b.n	17014 <d_print_comp_inner+0x2a0>
   1704c:	4e52      	ldr	r6, [pc, #328]	; (17198 <d_print_comp_inner+0x424>)
   1704e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17052:	f106 0a19 	add.w	sl, r6, #25
   17056:	f04f 0900 	mov.w	r9, #0
   1705a:	e009      	b.n	17070 <d_print_comp_inner+0x2fc>
   1705c:	460b      	mov	r3, r1
   1705e:	3101      	adds	r1, #1
   17060:	4556      	cmp	r6, sl
   17062:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17066:	54e7      	strb	r7, [r4, r3]
   17068:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1706c:	f001 82a8 	beq.w	185c0 <d_print_comp_inner+0x184c>
   17070:	29ff      	cmp	r1, #255	; 0xff
   17072:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17076:	d1f1      	bne.n	1705c <d_print_comp_inner+0x2e8>
   17078:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1707c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17080:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17084:	4620      	mov	r0, r4
   17086:	4798      	blx	r3
   17088:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1708c:	3301      	adds	r3, #1
   1708e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17092:	2101      	movs	r1, #1
   17094:	2300      	movs	r3, #0
   17096:	e7e3      	b.n	17060 <d_print_comp_inner+0x2ec>
   17098:	4e40      	ldr	r6, [pc, #256]	; (1719c <d_print_comp_inner+0x428>)
   1709a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1709e:	f106 0a15 	add.w	sl, r6, #21
   170a2:	f04f 0900 	mov.w	r9, #0
   170a6:	e009      	b.n	170bc <d_print_comp_inner+0x348>
   170a8:	460b      	mov	r3, r1
   170aa:	3101      	adds	r1, #1
   170ac:	4556      	cmp	r6, sl
   170ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170b2:	54e7      	strb	r7, [r4, r3]
   170b4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   170b8:	f001 8251 	beq.w	1855e <d_print_comp_inner+0x17ea>
   170bc:	29ff      	cmp	r1, #255	; 0xff
   170be:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170c2:	d1f1      	bne.n	170a8 <d_print_comp_inner+0x334>
   170c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170c8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170d0:	4620      	mov	r0, r4
   170d2:	4798      	blx	r3
   170d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170d8:	3301      	adds	r3, #1
   170da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170de:	2101      	movs	r1, #1
   170e0:	2300      	movs	r3, #0
   170e2:	e7e3      	b.n	170ac <d_print_comp_inner+0x338>
   170e4:	4e2e      	ldr	r6, [pc, #184]	; (171a0 <d_print_comp_inner+0x42c>)
   170e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170ea:	f106 0a16 	add.w	sl, r6, #22
   170ee:	f04f 0900 	mov.w	r9, #0
   170f2:	e009      	b.n	17108 <d_print_comp_inner+0x394>
   170f4:	460b      	mov	r3, r1
   170f6:	3101      	adds	r1, #1
   170f8:	4556      	cmp	r6, sl
   170fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170fe:	54e7      	strb	r7, [r4, r3]
   17100:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17104:	f001 8263 	beq.w	185ce <d_print_comp_inner+0x185a>
   17108:	29ff      	cmp	r1, #255	; 0xff
   1710a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1710e:	d1f1      	bne.n	170f4 <d_print_comp_inner+0x380>
   17110:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17114:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17118:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1711c:	4620      	mov	r0, r4
   1711e:	4798      	blx	r3
   17120:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17124:	3301      	adds	r3, #1
   17126:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1712a:	2101      	movs	r1, #1
   1712c:	2300      	movs	r3, #0
   1712e:	e7e3      	b.n	170f8 <d_print_comp_inner+0x384>
   17130:	4e1c      	ldr	r6, [pc, #112]	; (171a4 <d_print_comp_inner+0x430>)
   17132:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17136:	f106 0a13 	add.w	sl, r6, #19
   1713a:	f04f 0900 	mov.w	r9, #0
   1713e:	e009      	b.n	17154 <d_print_comp_inner+0x3e0>
   17140:	460b      	mov	r3, r1
   17142:	3101      	adds	r1, #1
   17144:	45b2      	cmp	sl, r6
   17146:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1714a:	54e7      	strb	r7, [r4, r3]
   1714c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17150:	f001 8077 	beq.w	18242 <d_print_comp_inner+0x14ce>
   17154:	29ff      	cmp	r1, #255	; 0xff
   17156:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1715a:	d1f1      	bne.n	17140 <d_print_comp_inner+0x3cc>
   1715c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17160:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17164:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17168:	4620      	mov	r0, r4
   1716a:	4798      	blx	r3
   1716c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17170:	3301      	adds	r3, #1
   17172:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17176:	2101      	movs	r1, #1
   17178:	2300      	movs	r3, #0
   1717a:	e7e3      	b.n	17144 <d_print_comp_inner+0x3d0>
   1717c:	4e0a      	ldr	r6, [pc, #40]	; (171a8 <d_print_comp_inner+0x434>)
   1717e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17182:	f106 0a1a 	add.w	sl, r6, #26
   17186:	f04f 0900 	mov.w	r9, #0
   1718a:	e019      	b.n	171c0 <d_print_comp_inner+0x44c>
   1718c:	00024470 	.word	0x00024470
   17190:	0002466c 	.word	0x0002466c
   17194:	000245fb 	.word	0x000245fb
   17198:	000245c7 	.word	0x000245c7
   1719c:	000245e3 	.word	0x000245e3
   171a0:	000245af 	.word	0x000245af
   171a4:	0002459b 	.word	0x0002459b
   171a8:	0002456f 	.word	0x0002456f
   171ac:	460b      	mov	r3, r1
   171ae:	3101      	adds	r1, #1
   171b0:	4556      	cmp	r6, sl
   171b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171b6:	54e7      	strb	r7, [r4, r3]
   171b8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171bc:	f001 804f 	beq.w	1825e <d_print_comp_inner+0x14ea>
   171c0:	29ff      	cmp	r1, #255	; 0xff
   171c2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   171c6:	d1f1      	bne.n	171ac <d_print_comp_inner+0x438>
   171c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   171cc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   171d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   171d4:	4620      	mov	r0, r4
   171d6:	4798      	blx	r3
   171d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171dc:	3301      	adds	r3, #1
   171de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171e2:	2101      	movs	r1, #1
   171e4:	2300      	movs	r3, #0
   171e6:	e7e3      	b.n	171b0 <d_print_comp_inner+0x43c>
   171e8:	4eb5      	ldr	r6, [pc, #724]	; (174c0 <d_print_comp_inner+0x74c>)
   171ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171ee:	f106 0a0f 	add.w	sl, r6, #15
   171f2:	f04f 0900 	mov.w	r9, #0
   171f6:	e009      	b.n	1720c <d_print_comp_inner+0x498>
   171f8:	460b      	mov	r3, r1
   171fa:	3101      	adds	r1, #1
   171fc:	4556      	cmp	r6, sl
   171fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17202:	54e7      	strb	r7, [r4, r3]
   17204:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17208:	f001 8022 	beq.w	18250 <d_print_comp_inner+0x14dc>
   1720c:	29ff      	cmp	r1, #255	; 0xff
   1720e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17212:	d1f1      	bne.n	171f8 <d_print_comp_inner+0x484>
   17214:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17218:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1721c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17220:	4620      	mov	r0, r4
   17222:	4798      	blx	r3
   17224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17228:	3301      	adds	r3, #1
   1722a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1722e:	2101      	movs	r1, #1
   17230:	2300      	movs	r3, #0
   17232:	e7e3      	b.n	171fc <d_print_comp_inner+0x488>
   17234:	4ea3      	ldr	r6, [pc, #652]	; (174c4 <d_print_comp_inner+0x750>)
   17236:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1723a:	f106 0a11 	add.w	sl, r6, #17
   1723e:	f04f 0900 	mov.w	r9, #0
   17242:	e009      	b.n	17258 <d_print_comp_inner+0x4e4>
   17244:	460b      	mov	r3, r1
   17246:	3101      	adds	r1, #1
   17248:	4556      	cmp	r6, sl
   1724a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1724e:	54e7      	strb	r7, [r4, r3]
   17250:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17254:	f001 800a 	beq.w	1826c <d_print_comp_inner+0x14f8>
   17258:	29ff      	cmp	r1, #255	; 0xff
   1725a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1725e:	d1f1      	bne.n	17244 <d_print_comp_inner+0x4d0>
   17260:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17264:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17268:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1726c:	4620      	mov	r0, r4
   1726e:	4798      	blx	r3
   17270:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17274:	3301      	adds	r3, #1
   17276:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1727a:	2101      	movs	r1, #1
   1727c:	2300      	movs	r3, #0
   1727e:	e7e3      	b.n	17248 <d_print_comp_inner+0x4d4>
   17280:	4e91      	ldr	r6, [pc, #580]	; (174c8 <d_print_comp_inner+0x754>)
   17282:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17286:	f106 0a15 	add.w	sl, r6, #21
   1728a:	f04f 0900 	mov.w	r9, #0
   1728e:	e009      	b.n	172a4 <d_print_comp_inner+0x530>
   17290:	460b      	mov	r3, r1
   17292:	3101      	adds	r1, #1
   17294:	4556      	cmp	r6, sl
   17296:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1729a:	54e7      	strb	r7, [r4, r3]
   1729c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172a0:	f000 87b3 	beq.w	1820a <d_print_comp_inner+0x1496>
   172a4:	29ff      	cmp	r1, #255	; 0xff
   172a6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   172aa:	d1f1      	bne.n	17290 <d_print_comp_inner+0x51c>
   172ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172b0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172b8:	4620      	mov	r0, r4
   172ba:	4798      	blx	r3
   172bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172c0:	3301      	adds	r3, #1
   172c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   172c6:	2101      	movs	r1, #1
   172c8:	2300      	movs	r3, #0
   172ca:	e7e3      	b.n	17294 <d_print_comp_inner+0x520>
   172cc:	4e7f      	ldr	r6, [pc, #508]	; (174cc <d_print_comp_inner+0x758>)
   172ce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172d2:	f106 0a12 	add.w	sl, r6, #18
   172d6:	f04f 0900 	mov.w	r9, #0
   172da:	e009      	b.n	172f0 <d_print_comp_inner+0x57c>
   172dc:	460b      	mov	r3, r1
   172de:	3101      	adds	r1, #1
   172e0:	45b2      	cmp	sl, r6
   172e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172e6:	54e7      	strb	r7, [r4, r3]
   172e8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172ec:	f000 879b 	beq.w	18226 <d_print_comp_inner+0x14b2>
   172f0:	29ff      	cmp	r1, #255	; 0xff
   172f2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   172f6:	d1f1      	bne.n	172dc <d_print_comp_inner+0x568>
   172f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172fc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17300:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17304:	4620      	mov	r0, r4
   17306:	4798      	blx	r3
   17308:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1730c:	3301      	adds	r3, #1
   1730e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17312:	2101      	movs	r1, #1
   17314:	2300      	movs	r3, #0
   17316:	e7e3      	b.n	172e0 <d_print_comp_inner+0x56c>
   17318:	4e6d      	ldr	r6, [pc, #436]	; (174d0 <d_print_comp_inner+0x75c>)
   1731a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1731e:	f106 0a10 	add.w	sl, r6, #16
   17322:	f04f 0900 	mov.w	r9, #0
   17326:	e009      	b.n	1733c <d_print_comp_inner+0x5c8>
   17328:	460b      	mov	r3, r1
   1732a:	3101      	adds	r1, #1
   1732c:	4556      	cmp	r6, sl
   1732e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17332:	54e7      	strb	r7, [r4, r3]
   17334:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17338:	f000 876e 	beq.w	18218 <d_print_comp_inner+0x14a4>
   1733c:	29ff      	cmp	r1, #255	; 0xff
   1733e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17342:	d1f1      	bne.n	17328 <d_print_comp_inner+0x5b4>
   17344:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17348:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1734c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17350:	4620      	mov	r0, r4
   17352:	4798      	blx	r3
   17354:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17358:	3301      	adds	r3, #1
   1735a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1735e:	2101      	movs	r1, #1
   17360:	2300      	movs	r3, #0
   17362:	e7e3      	b.n	1732c <d_print_comp_inner+0x5b8>
   17364:	4e5b      	ldr	r6, [pc, #364]	; (174d4 <d_print_comp_inner+0x760>)
   17366:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1736a:	f106 0a0d 	add.w	sl, r6, #13
   1736e:	f04f 0900 	mov.w	r9, #0
   17372:	e009      	b.n	17388 <d_print_comp_inner+0x614>
   17374:	460b      	mov	r3, r1
   17376:	3101      	adds	r1, #1
   17378:	4556      	cmp	r6, sl
   1737a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1737e:	54e7      	strb	r7, [r4, r3]
   17380:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17384:	f000 8756 	beq.w	18234 <d_print_comp_inner+0x14c0>
   17388:	29ff      	cmp	r1, #255	; 0xff
   1738a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1738e:	d1f1      	bne.n	17374 <d_print_comp_inner+0x600>
   17390:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17394:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17398:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1739c:	4620      	mov	r0, r4
   1739e:	4798      	blx	r3
   173a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173a4:	3301      	adds	r3, #1
   173a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173aa:	2101      	movs	r1, #1
   173ac:	2300      	movs	r3, #0
   173ae:	e7e3      	b.n	17378 <d_print_comp_inner+0x604>
   173b0:	4e49      	ldr	r6, [pc, #292]	; (174d8 <d_print_comp_inner+0x764>)
   173b2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173b6:	f106 0a18 	add.w	sl, r6, #24
   173ba:	f04f 0900 	mov.w	r9, #0
   173be:	e009      	b.n	173d4 <d_print_comp_inner+0x660>
   173c0:	460b      	mov	r3, r1
   173c2:	3101      	adds	r1, #1
   173c4:	45b2      	cmp	sl, r6
   173c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173ca:	54e7      	strb	r7, [r4, r3]
   173cc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173d0:	f000 86e3 	beq.w	1819a <d_print_comp_inner+0x1426>
   173d4:	29ff      	cmp	r1, #255	; 0xff
   173d6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   173da:	d1f1      	bne.n	173c0 <d_print_comp_inner+0x64c>
   173dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   173e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   173e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173e8:	4620      	mov	r0, r4
   173ea:	4798      	blx	r3
   173ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173f0:	3301      	adds	r3, #1
   173f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173f6:	2101      	movs	r1, #1
   173f8:	2300      	movs	r3, #0
   173fa:	e7e3      	b.n	173c4 <d_print_comp_inner+0x650>
   173fc:	4e37      	ldr	r6, [pc, #220]	; (174dc <d_print_comp_inner+0x768>)
   173fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17402:	f106 0a0b 	add.w	sl, r6, #11
   17406:	f04f 0900 	mov.w	r9, #0
   1740a:	e009      	b.n	17420 <d_print_comp_inner+0x6ac>
   1740c:	460b      	mov	r3, r1
   1740e:	3101      	adds	r1, #1
   17410:	45b2      	cmp	sl, r6
   17412:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17416:	54e7      	strb	r7, [r4, r3]
   17418:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1741c:	f000 87ca 	beq.w	183b4 <d_print_comp_inner+0x1640>
   17420:	29ff      	cmp	r1, #255	; 0xff
   17422:	f816 7b01 	ldrb.w	r7, [r6], #1
   17426:	d1f1      	bne.n	1740c <d_print_comp_inner+0x698>
   17428:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1742c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17430:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17434:	4620      	mov	r0, r4
   17436:	4798      	blx	r3
   17438:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1743c:	3301      	adds	r3, #1
   1743e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17442:	2101      	movs	r1, #1
   17444:	2300      	movs	r3, #0
   17446:	e7e3      	b.n	17410 <d_print_comp_inner+0x69c>
   17448:	4e25      	ldr	r6, [pc, #148]	; (174e0 <d_print_comp_inner+0x76c>)
   1744a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1744e:	f106 0a08 	add.w	sl, r6, #8
   17452:	f04f 0900 	mov.w	r9, #0
   17456:	e009      	b.n	1746c <d_print_comp_inner+0x6f8>
   17458:	460b      	mov	r3, r1
   1745a:	3101      	adds	r1, #1
   1745c:	45b2      	cmp	sl, r6
   1745e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17462:	54e7      	strb	r7, [r4, r3]
   17464:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17468:	f000 86c8 	beq.w	181fc <d_print_comp_inner+0x1488>
   1746c:	29ff      	cmp	r1, #255	; 0xff
   1746e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17472:	d1f1      	bne.n	17458 <d_print_comp_inner+0x6e4>
   17474:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17478:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1747c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17480:	4620      	mov	r0, r4
   17482:	4798      	blx	r3
   17484:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17488:	3301      	adds	r3, #1
   1748a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1748e:	2101      	movs	r1, #1
   17490:	2300      	movs	r3, #0
   17492:	e7e3      	b.n	1745c <d_print_comp_inner+0x6e8>
   17494:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17498:	29ff      	cmp	r1, #255	; 0xff
   1749a:	f001 847c 	beq.w	18d96 <d_print_comp_inner+0x2022>
   1749e:	1c4a      	adds	r2, r1, #1
   174a0:	237e      	movs	r3, #126	; 0x7e
   174a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   174a6:	5463      	strb	r3, [r4, r1]
   174a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   174ac:	4641      	mov	r1, r8
   174ae:	68aa      	ldr	r2, [r5, #8]
   174b0:	4620      	mov	r0, r4
   174b2:	f002 fa03 	bl	198bc <d_print_comp>
   174b6:	e52b      	b.n	16f10 <d_print_comp_inner+0x19c>
   174b8:	68aa      	ldr	r2, [r5, #8]
   174ba:	f002 f9ff 	bl	198bc <d_print_comp>
   174be:	e527      	b.n	16f10 <d_print_comp_inner+0x19c>
   174c0:	0002458b 	.word	0x0002458b
   174c4:	0002455b 	.word	0x0002455b
   174c8:	00024557 	.word	0x00024557
   174cc:	0002452f 	.word	0x0002452f
   174d0:	00024543 	.word	0x00024543
   174d4:	00024520 	.word	0x00024520
   174d8:	000244fb 	.word	0x000244fb
   174dc:	000244e4 	.word	0x000244e4
   174e0:	000244ef 	.word	0x000244ef
   174e4:	2200      	movs	r2, #0
   174e6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   174ea:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   174ee:	686e      	ldr	r6, [r5, #4]
   174f0:	9300      	str	r3, [sp, #0]
   174f2:	2e00      	cmp	r6, #0
   174f4:	f000 864c 	beq.w	18190 <d_print_comp_inner+0x141c>
   174f8:	f10d 0910 	add.w	r9, sp, #16
   174fc:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   17500:	4617      	mov	r7, r2
   17502:	4696      	mov	lr, r2
   17504:	464b      	mov	r3, r9
   17506:	7831      	ldrb	r1, [r6, #0]
   17508:	601a      	str	r2, [r3, #0]
   1750a:	f1a1 021c 	sub.w	r2, r1, #28
   1750e:	2a04      	cmp	r2, #4
   17510:	605e      	str	r6, [r3, #4]
   17512:	f8c3 e008 	str.w	lr, [r3, #8]
   17516:	f8c3 c00c 	str.w	ip, [r3, #12]
   1751a:	f107 0701 	add.w	r7, r7, #1
   1751e:	4618      	mov	r0, r3
   17520:	461a      	mov	r2, r3
   17522:	f240 862a 	bls.w	1817a <d_print_comp_inner+0x1406>
   17526:	294c      	cmp	r1, #76	; 0x4c
   17528:	f000 8627 	beq.w	1817a <d_print_comp_inner+0x1406>
   1752c:	2904      	cmp	r1, #4
   1752e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17532:	f001 87bb 	beq.w	194ac <d_print_comp_inner+0x2738>
   17536:	2902      	cmp	r1, #2
   17538:	d11a      	bne.n	17570 <d_print_comp_inner+0x7fc>
   1753a:	f8d6 b008 	ldr.w	fp, [r6, #8]
   1753e:	f89b 3000 	ldrb.w	r3, [fp]
   17542:	2b46      	cmp	r3, #70	; 0x46
   17544:	f002 8035 	beq.w	195b2 <d_print_comp_inner+0x283e>
   17548:	462b      	mov	r3, r5
   1754a:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   1754e:	9601      	str	r6, [sp, #4]
   17550:	465d      	mov	r5, fp
   17552:	4676      	mov	r6, lr
   17554:	46a2      	mov	sl, r4
   17556:	469b      	mov	fp, r3
   17558:	782b      	ldrb	r3, [r5, #0]
   1755a:	f1a3 021c 	sub.w	r2, r3, #28
   1755e:	2a04      	cmp	r2, #4
   17560:	f241 805d 	bls.w	1861e <d_print_comp_inner+0x18aa>
   17564:	2b4c      	cmp	r3, #76	; 0x4c
   17566:	f001 805a 	beq.w	1861e <d_print_comp_inner+0x18aa>
   1756a:	9e01      	ldr	r6, [sp, #4]
   1756c:	4654      	mov	r4, sl
   1756e:	465d      	mov	r5, fp
   17570:	68aa      	ldr	r2, [r5, #8]
   17572:	4641      	mov	r1, r8
   17574:	4620      	mov	r0, r4
   17576:	f002 f9a1 	bl	198bc <d_print_comp>
   1757a:	7833      	ldrb	r3, [r6, #0]
   1757c:	2b04      	cmp	r3, #4
   1757e:	f002 8020 	beq.w	195c2 <d_print_comp_inner+0x284e>
   17582:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17586:	2620      	movs	r6, #32
   17588:	f859 5c08 	ldr.w	r5, [r9, #-8]
   1758c:	3f01      	subs	r7, #1
   1758e:	b985      	cbnz	r5, 175b2 <d_print_comp_inner+0x83e>
   17590:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17594:	29ff      	cmp	r1, #255	; 0xff
   17596:	f002 8043 	beq.w	19620 <d_print_comp_inner+0x28ac>
   1759a:	1c4b      	adds	r3, r1, #1
   1759c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   175a0:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   175a4:	5466      	strb	r6, [r4, r1]
   175a6:	4620      	mov	r0, r4
   175a8:	4641      	mov	r1, r8
   175aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   175ae:	f002 f995 	bl	198dc <d_print_mod>
   175b2:	f1a9 0910 	sub.w	r9, r9, #16
   175b6:	2f00      	cmp	r7, #0
   175b8:	d1e6      	bne.n	17588 <d_print_comp_inner+0x814>
   175ba:	9b00      	ldr	r3, [sp, #0]
   175bc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   175c0:	e4a6      	b.n	16f10 <d_print_comp_inner+0x19c>
   175c2:	4ed1      	ldr	r6, [pc, #836]	; (17908 <d_print_comp_inner+0xb94>)
   175c4:	686a      	ldr	r2, [r5, #4]
   175c6:	f002 f979 	bl	198bc <d_print_comp>
   175ca:	f106 0a05 	add.w	sl, r6, #5
   175ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   175d2:	f04f 0900 	mov.w	r9, #0
   175d6:	e009      	b.n	175ec <d_print_comp_inner+0x878>
   175d8:	460b      	mov	r3, r1
   175da:	3101      	adds	r1, #1
   175dc:	45b2      	cmp	sl, r6
   175de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175e2:	54e7      	strb	r7, [r4, r3]
   175e4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175e8:	f000 86d1 	beq.w	1838e <d_print_comp_inner+0x161a>
   175ec:	29ff      	cmp	r1, #255	; 0xff
   175ee:	f816 7b01 	ldrb.w	r7, [r6], #1
   175f2:	d1f1      	bne.n	175d8 <d_print_comp_inner+0x864>
   175f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175f8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   175fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17600:	4620      	mov	r0, r4
   17602:	4798      	blx	r3
   17604:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17608:	3301      	adds	r3, #1
   1760a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1760e:	2101      	movs	r1, #1
   17610:	2300      	movs	r3, #0
   17612:	e7e3      	b.n	175dc <d_print_comp_inner+0x868>
   17614:	686a      	ldr	r2, [r5, #4]
   17616:	f002 f951 	bl	198bc <d_print_comp>
   1761a:	f018 0904 	ands.w	r9, r8, #4
   1761e:	f001 82aa 	beq.w	18b76 <d_print_comp_inner+0x1e02>
   17622:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17626:	29ff      	cmp	r1, #255	; 0xff
   17628:	f001 859a 	beq.w	19160 <d_print_comp_inner+0x23ec>
   1762c:	1c4a      	adds	r2, r1, #1
   1762e:	232e      	movs	r3, #46	; 0x2e
   17630:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17634:	5463      	strb	r3, [r4, r1]
   17636:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1763a:	68ad      	ldr	r5, [r5, #8]
   1763c:	782b      	ldrb	r3, [r5, #0]
   1763e:	2b46      	cmp	r3, #70	; 0x46
   17640:	f001 83cc 	beq.w	18ddc <d_print_comp_inner+0x2068>
   17644:	462a      	mov	r2, r5
   17646:	4641      	mov	r1, r8
   17648:	4620      	mov	r0, r4
   1764a:	f002 f937 	bl	198bc <d_print_comp>
   1764e:	e45f      	b.n	16f10 <d_print_comp_inner+0x19c>
   17650:	f011 0804 	ands.w	r8, r1, #4
   17654:	f041 808b 	bne.w	1876e <d_print_comp_inner+0x19fa>
   17658:	68af      	ldr	r7, [r5, #8]
   1765a:	686d      	ldr	r5, [r5, #4]
   1765c:	2f00      	cmp	r7, #0
   1765e:	f43f ac57 	beq.w	16f10 <d_print_comp_inner+0x19c>
   17662:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17666:	442f      	add	r7, r5
   17668:	e009      	b.n	1767e <d_print_comp_inner+0x90a>
   1766a:	460b      	mov	r3, r1
   1766c:	3101      	adds	r1, #1
   1766e:	42bd      	cmp	r5, r7
   17670:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17674:	54e6      	strb	r6, [r4, r3]
   17676:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1767a:	f43f ac49 	beq.w	16f10 <d_print_comp_inner+0x19c>
   1767e:	29ff      	cmp	r1, #255	; 0xff
   17680:	f815 6b01 	ldrb.w	r6, [r5], #1
   17684:	d1f1      	bne.n	1766a <d_print_comp_inner+0x8f6>
   17686:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1768a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1768e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17692:	4620      	mov	r0, r4
   17694:	4798      	blx	r3
   17696:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1769a:	3301      	adds	r3, #1
   1769c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176a0:	2101      	movs	r1, #1
   176a2:	2300      	movs	r3, #0
   176a4:	e7e3      	b.n	1766e <d_print_comp_inner+0x8fa>
   176a6:	2301      	movs	r3, #1
   176a8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   176ac:	e430      	b.n	16f10 <d_print_comp_inner+0x19c>
   176ae:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   176b2:	2b00      	cmp	r3, #0
   176b4:	f041 8106 	bne.w	188c4 <d_print_comp_inner+0x1b50>
   176b8:	1d29      	adds	r1, r5, #4
   176ba:	f7fd fa97 	bl	14bec <d_lookup_template_argument.isra.6>
   176be:	2800      	cmp	r0, #0
   176c0:	f43f ac3a 	beq.w	16f38 <d_print_comp_inner+0x1c4>
   176c4:	7803      	ldrb	r3, [r0, #0]
   176c6:	2b2f      	cmp	r3, #47	; 0x2f
   176c8:	f001 83fc 	beq.w	18ec4 <d_print_comp_inner+0x2150>
   176cc:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   176d0:	682b      	ldr	r3, [r5, #0]
   176d2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   176d6:	4602      	mov	r2, r0
   176d8:	4641      	mov	r1, r8
   176da:	4620      	mov	r0, r4
   176dc:	f002 f8ee 	bl	198bc <d_print_comp>
   176e0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   176e4:	e414      	b.n	16f10 <d_print_comp_inner+0x19c>
   176e6:	2300      	movs	r3, #0
   176e8:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   176ec:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   176f0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   176f4:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   176f8:	f011 0f04 	tst.w	r1, #4
   176fc:	686e      	ldr	r6, [r5, #4]
   176fe:	d005      	beq.n	1770c <d_print_comp_inner+0x998>
   17700:	7833      	ldrb	r3, [r6, #0]
   17702:	b91b      	cbnz	r3, 1770c <d_print_comp_inner+0x998>
   17704:	68b2      	ldr	r2, [r6, #8]
   17706:	2a06      	cmp	r2, #6
   17708:	f001 853c 	beq.w	19184 <d_print_comp_inner+0x2410>
   1770c:	4632      	mov	r2, r6
   1770e:	4641      	mov	r1, r8
   17710:	4620      	mov	r0, r4
   17712:	f002 f8d3 	bl	198bc <d_print_comp>
   17716:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1771a:	2b3c      	cmp	r3, #60	; 0x3c
   1771c:	f001 8274 	beq.w	18c08 <d_print_comp_inner+0x1e94>
   17720:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17724:	2bff      	cmp	r3, #255	; 0xff
   17726:	f001 8489 	beq.w	1903c <d_print_comp_inner+0x22c8>
   1772a:	1c59      	adds	r1, r3, #1
   1772c:	223c      	movs	r2, #60	; 0x3c
   1772e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17732:	54e2      	strb	r2, [r4, r3]
   17734:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17738:	4641      	mov	r1, r8
   1773a:	68aa      	ldr	r2, [r5, #8]
   1773c:	4620      	mov	r0, r4
   1773e:	f002 f8bd 	bl	198bc <d_print_comp>
   17742:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   17746:	2b3e      	cmp	r3, #62	; 0x3e
   17748:	f001 8239 	beq.w	18bbe <d_print_comp_inner+0x1e4a>
   1774c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17750:	2bff      	cmp	r3, #255	; 0xff
   17752:	f001 8460 	beq.w	19016 <d_print_comp_inner+0x22a2>
   17756:	1c59      	adds	r1, r3, #1
   17758:	223e      	movs	r2, #62	; 0x3e
   1775a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1775e:	54e2      	strb	r2, [r4, r3]
   17760:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17764:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17768:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   1776c:	f7ff bbd0 	b.w	16f10 <d_print_comp_inner+0x19c>
   17770:	686f      	ldr	r7, [r5, #4]
   17772:	2f00      	cmp	r7, #0
   17774:	f001 8082 	beq.w	1887c <d_print_comp_inner+0x1b08>
   17778:	4d64      	ldr	r5, [pc, #400]	; (1790c <d_print_comp_inner+0xb98>)
   1777a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1777e:	f105 0906 	add.w	r9, r5, #6
   17782:	f04f 0800 	mov.w	r8, #0
   17786:	e009      	b.n	1779c <d_print_comp_inner+0xa28>
   17788:	460b      	mov	r3, r1
   1778a:	3101      	adds	r1, #1
   1778c:	45a9      	cmp	r9, r5
   1778e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17792:	54e6      	strb	r6, [r4, r3]
   17794:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17798:	f000 8782 	beq.w	186a0 <d_print_comp_inner+0x192c>
   1779c:	29ff      	cmp	r1, #255	; 0xff
   1779e:	f815 6b01 	ldrb.w	r6, [r5], #1
   177a2:	d1f1      	bne.n	17788 <d_print_comp_inner+0xa14>
   177a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   177a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   177ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   177b0:	4620      	mov	r0, r4
   177b2:	4798      	blx	r3
   177b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177b8:	3301      	adds	r3, #1
   177ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   177be:	2101      	movs	r1, #1
   177c0:	2300      	movs	r3, #0
   177c2:	e7e3      	b.n	1778c <d_print_comp_inner+0xa18>
   177c4:	4e52      	ldr	r6, [pc, #328]	; (17910 <d_print_comp_inner+0xb9c>)
   177c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   177ca:	f106 0a0a 	add.w	sl, r6, #10
   177ce:	f04f 0900 	mov.w	r9, #0
   177d2:	e009      	b.n	177e8 <d_print_comp_inner+0xa74>
   177d4:	460b      	mov	r3, r1
   177d6:	3101      	adds	r1, #1
   177d8:	4556      	cmp	r6, sl
   177da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   177de:	54e7      	strb	r7, [r4, r3]
   177e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   177e4:	f000 8701 	beq.w	185ea <d_print_comp_inner+0x1876>
   177e8:	29ff      	cmp	r1, #255	; 0xff
   177ea:	f816 7b01 	ldrb.w	r7, [r6], #1
   177ee:	d1f1      	bne.n	177d4 <d_print_comp_inner+0xa60>
   177f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   177f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   177f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   177fc:	4620      	mov	r0, r4
   177fe:	4798      	blx	r3
   17800:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17804:	3301      	adds	r3, #1
   17806:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1780a:	2101      	movs	r1, #1
   1780c:	2300      	movs	r3, #0
   1780e:	e7e3      	b.n	177d8 <d_print_comp_inner+0xa64>
   17810:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17814:	792d      	ldrb	r5, [r5, #4]
   17816:	29ff      	cmp	r1, #255	; 0xff
   17818:	f001 82ab 	beq.w	18d72 <d_print_comp_inner+0x1ffe>
   1781c:	1c4b      	adds	r3, r1, #1
   1781e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17822:	5465      	strb	r5, [r4, r1]
   17824:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17828:	f7ff bb72 	b.w	16f10 <d_print_comp_inner+0x19c>
   1782c:	686a      	ldr	r2, [r5, #4]
   1782e:	f002 f845 	bl	198bc <d_print_comp>
   17832:	68aa      	ldr	r2, [r5, #8]
   17834:	4641      	mov	r1, r8
   17836:	4620      	mov	r0, r4
   17838:	f002 f840 	bl	198bc <d_print_comp>
   1783c:	f7ff bb68 	b.w	16f10 <d_print_comp_inner+0x19c>
   17840:	4e34      	ldr	r6, [pc, #208]	; (17914 <d_print_comp_inner+0xba0>)
   17842:	686a      	ldr	r2, [r5, #4]
   17844:	f002 f83a 	bl	198bc <d_print_comp>
   17848:	f106 0a08 	add.w	sl, r6, #8
   1784c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17850:	f04f 0900 	mov.w	r9, #0
   17854:	e009      	b.n	1786a <d_print_comp_inner+0xaf6>
   17856:	460b      	mov	r3, r1
   17858:	3101      	adds	r1, #1
   1785a:	4556      	cmp	r6, sl
   1785c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17860:	54e7      	strb	r7, [r4, r3]
   17862:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17866:	f000 8508 	beq.w	1827a <d_print_comp_inner+0x1506>
   1786a:	29ff      	cmp	r1, #255	; 0xff
   1786c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17870:	d1f1      	bne.n	17856 <d_print_comp_inner+0xae2>
   17872:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17876:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1787a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1787e:	4620      	mov	r0, r4
   17880:	4798      	blx	r3
   17882:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17886:	3301      	adds	r3, #1
   17888:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1788c:	2101      	movs	r1, #1
   1788e:	2300      	movs	r3, #0
   17890:	e7e3      	b.n	1785a <d_print_comp_inner+0xae6>
   17892:	686a      	ldr	r2, [r5, #4]
   17894:	b10a      	cbz	r2, 1789a <d_print_comp_inner+0xb26>
   17896:	f002 f811 	bl	198bc <d_print_comp>
   1789a:	68ab      	ldr	r3, [r5, #8]
   1789c:	2b00      	cmp	r3, #0
   1789e:	f43f ab37 	beq.w	16f10 <d_print_comp_inner+0x19c>
   178a2:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   178a6:	2efd      	cmp	r6, #253	; 0xfd
   178a8:	f201 81bc 	bhi.w	18c24 <d_print_comp_inner+0x1eb0>
   178ac:	4f1a      	ldr	r7, [pc, #104]	; (17918 <d_print_comp_inner+0xba4>)
   178ae:	f04f 0a00 	mov.w	sl, #0
   178b2:	f107 0b02 	add.w	fp, r7, #2
   178b6:	4631      	mov	r1, r6
   178b8:	e009      	b.n	178ce <d_print_comp_inner+0xb5a>
   178ba:	460b      	mov	r3, r1
   178bc:	3101      	adds	r1, #1
   178be:	455f      	cmp	r7, fp
   178c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   178c4:	54e6      	strb	r6, [r4, r3]
   178c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   178ca:	f000 86c1 	beq.w	18650 <d_print_comp_inner+0x18dc>
   178ce:	29ff      	cmp	r1, #255	; 0xff
   178d0:	f817 6b01 	ldrb.w	r6, [r7], #1
   178d4:	d1f1      	bne.n	178ba <d_print_comp_inner+0xb46>
   178d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178da:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   178de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   178e2:	4620      	mov	r0, r4
   178e4:	4798      	blx	r3
   178e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   178ea:	3301      	adds	r3, #1
   178ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   178f0:	2101      	movs	r1, #1
   178f2:	2300      	movs	r3, #0
   178f4:	e7e3      	b.n	178be <d_print_comp_inner+0xb4a>
   178f6:	4e09      	ldr	r6, [pc, #36]	; (1791c <d_print_comp_inner+0xba8>)
   178f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178fc:	f106 0a09 	add.w	sl, r6, #9
   17900:	f04f 0900 	mov.w	r9, #0
   17904:	e016      	b.n	17934 <d_print_comp_inner+0xbc0>
   17906:	bf00      	nop
   17908:	000244b0 	.word	0x000244b0
   1790c:	000246bc 	.word	0x000246bc
   17910:	000246a8 	.word	0x000246a8
   17914:	00024723 	.word	0x00024723
   17918:	00024644 	.word	0x00024644
   1791c:	00024653 	.word	0x00024653
   17920:	460b      	mov	r3, r1
   17922:	3101      	adds	r1, #1
   17924:	4556      	cmp	r6, sl
   17926:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1792a:	54e7      	strb	r7, [r4, r3]
   1792c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17930:	f000 8594 	beq.w	1845c <d_print_comp_inner+0x16e8>
   17934:	29ff      	cmp	r1, #255	; 0xff
   17936:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1793a:	d1f1      	bne.n	17920 <d_print_comp_inner+0xbac>
   1793c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17940:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17944:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17948:	4620      	mov	r0, r4
   1794a:	4798      	blx	r3
   1794c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17950:	3301      	adds	r3, #1
   17952:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17956:	2101      	movs	r1, #1
   17958:	2300      	movs	r3, #0
   1795a:	e7e3      	b.n	17924 <d_print_comp_inner+0xbb0>
   1795c:	4ed1      	ldr	r6, [pc, #836]	; (17ca4 <d_print_comp_inner+0xf30>)
   1795e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17962:	f106 0a09 	add.w	sl, r6, #9
   17966:	f04f 0900 	mov.w	r9, #0
   1796a:	e009      	b.n	17980 <d_print_comp_inner+0xc0c>
   1796c:	460b      	mov	r3, r1
   1796e:	3101      	adds	r1, #1
   17970:	4556      	cmp	r6, sl
   17972:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17976:	54e7      	strb	r7, [r4, r3]
   17978:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1797c:	f000 8597 	beq.w	184ae <d_print_comp_inner+0x173a>
   17980:	29ff      	cmp	r1, #255	; 0xff
   17982:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17986:	d1f1      	bne.n	1796c <d_print_comp_inner+0xbf8>
   17988:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1798c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17990:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17994:	4620      	mov	r0, r4
   17996:	4798      	blx	r3
   17998:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1799c:	3301      	adds	r3, #1
   1799e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   179a2:	2101      	movs	r1, #1
   179a4:	2300      	movs	r3, #0
   179a6:	e7e3      	b.n	17970 <d_print_comp_inner+0xbfc>
   179a8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   179ac:	4dbe      	ldr	r5, [pc, #760]	; (17ca8 <d_print_comp_inner+0xf34>)
   179ae:	f8da 7008 	ldr.w	r7, [sl, #8]
   179b2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   179b6:	f105 0808 	add.w	r8, r5, #8
   179ba:	f04f 0900 	mov.w	r9, #0
   179be:	e009      	b.n	179d4 <d_print_comp_inner+0xc60>
   179c0:	460b      	mov	r3, r1
   179c2:	3101      	adds	r1, #1
   179c4:	45a8      	cmp	r8, r5
   179c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   179ca:	54e6      	strb	r6, [r4, r3]
   179cc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   179d0:	f000 8506 	beq.w	183e0 <d_print_comp_inner+0x166c>
   179d4:	29ff      	cmp	r1, #255	; 0xff
   179d6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   179da:	d1f1      	bne.n	179c0 <d_print_comp_inner+0xc4c>
   179dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   179e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   179e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   179e8:	4620      	mov	r0, r4
   179ea:	4798      	blx	r3
   179ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179f0:	3301      	adds	r3, #1
   179f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   179f6:	2101      	movs	r1, #1
   179f8:	2300      	movs	r3, #0
   179fa:	e7e3      	b.n	179c4 <d_print_comp_inner+0xc50>
   179fc:	686a      	ldr	r2, [r5, #4]
   179fe:	68ae      	ldr	r6, [r5, #8]
   17a00:	b10a      	cbz	r2, 17a06 <d_print_comp_inner+0xc92>
   17a02:	f001 ff5b 	bl	198bc <d_print_comp>
   17a06:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17a0a:	2bff      	cmp	r3, #255	; 0xff
   17a0c:	f001 82b1 	beq.w	18f72 <d_print_comp_inner+0x21fe>
   17a10:	1c5a      	adds	r2, r3, #1
   17a12:	257b      	movs	r5, #123	; 0x7b
   17a14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17a18:	4641      	mov	r1, r8
   17a1a:	54e5      	strb	r5, [r4, r3]
   17a1c:	4632      	mov	r2, r6
   17a1e:	4620      	mov	r0, r4
   17a20:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17a24:	f001 ff4a 	bl	198bc <d_print_comp>
   17a28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17a2c:	29ff      	cmp	r1, #255	; 0xff
   17a2e:	f001 81e7 	beq.w	18e00 <d_print_comp_inner+0x208c>
   17a32:	1c4a      	adds	r2, r1, #1
   17a34:	237d      	movs	r3, #125	; 0x7d
   17a36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17a3a:	5463      	strb	r3, [r4, r1]
   17a3c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17a40:	f7ff ba66 	b.w	16f10 <d_print_comp_inner+0x19c>
   17a44:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17a48:	68ae      	ldr	r6, [r5, #8]
   17a4a:	f899 3000 	ldrb.w	r3, [r9]
   17a4e:	2b31      	cmp	r3, #49	; 0x31
   17a50:	f000 87cb 	beq.w	189ea <d_print_comp_inner+0x1c76>
   17a54:	2b33      	cmp	r3, #51	; 0x33
   17a56:	f041 86d3 	bne.w	19800 <d_print_comp_inner+0x2a8c>
   17a5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a5e:	29ff      	cmp	r1, #255	; 0xff
   17a60:	f001 84c3 	beq.w	193ea <d_print_comp_inner+0x2676>
   17a64:	1c4a      	adds	r2, r1, #1
   17a66:	2328      	movs	r3, #40	; 0x28
   17a68:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17a6c:	5463      	strb	r3, [r4, r1]
   17a6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17a72:	a904      	add	r1, sp, #16
   17a74:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17a78:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   17a7c:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17a80:	4620      	mov	r0, r4
   17a82:	4641      	mov	r1, r8
   17a84:	9305      	str	r3, [sp, #20]
   17a86:	9204      	str	r2, [sp, #16]
   17a88:	f7ff f974 	bl	16d74 <d_print_comp_inner>
   17a8c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17a90:	9b05      	ldr	r3, [sp, #20]
   17a92:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   17a96:	29ff      	cmp	r1, #255	; 0xff
   17a98:	f001 8496 	beq.w	193c8 <d_print_comp_inner+0x2654>
   17a9c:	2329      	movs	r3, #41	; 0x29
   17a9e:	1c4a      	adds	r2, r1, #1
   17aa0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17aa4:	5463      	strb	r3, [r4, r1]
   17aa6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17aaa:	4632      	mov	r2, r6
   17aac:	4641      	mov	r1, r8
   17aae:	4620      	mov	r0, r4
   17ab0:	f002 fd2a 	bl	1a508 <d_print_subexpr>
   17ab4:	f7ff ba2c 	b.w	16f10 <d_print_comp_inner+0x19c>
   17ab8:	686a      	ldr	r2, [r5, #4]
   17aba:	f002 fce7 	bl	1a48c <d_print_expr_op>
   17abe:	f7ff ba27 	b.w	16f10 <d_print_comp_inner+0x19c>
   17ac2:	f011 0f20 	tst.w	r1, #32
   17ac6:	f040 8753 	bne.w	18970 <d_print_comp_inner+0x1bfc>
   17aca:	686a      	ldr	r2, [r5, #4]
   17acc:	b11a      	cbz	r2, 17ad6 <d_print_comp_inner+0xd62>
   17ace:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   17ad2:	f001 81d0 	beq.w	18e76 <d_print_comp_inner+0x2102>
   17ad6:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   17ada:	f105 0208 	add.w	r2, r5, #8
   17ade:	4641      	mov	r1, r8
   17ae0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17ae4:	4620      	mov	r0, r4
   17ae6:	f002 fbdd 	bl	1a2a4 <d_print_function_type.isra.11>
   17aea:	f7ff ba11 	b.w	16f10 <d_print_comp_inner+0x19c>
   17aee:	f011 0804 	ands.w	r8, r1, #4
   17af2:	686b      	ldr	r3, [r5, #4]
   17af4:	f040 8612 	bne.w	1871c <d_print_comp_inner+0x19a8>
   17af8:	e893 00a0 	ldmia.w	r3, {r5, r7}
   17afc:	2f00      	cmp	r7, #0
   17afe:	f43f aa07 	beq.w	16f10 <d_print_comp_inner+0x19c>
   17b02:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b06:	442f      	add	r7, r5
   17b08:	e009      	b.n	17b1e <d_print_comp_inner+0xdaa>
   17b0a:	460b      	mov	r3, r1
   17b0c:	3101      	adds	r1, #1
   17b0e:	42bd      	cmp	r5, r7
   17b10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b14:	54e6      	strb	r6, [r4, r3]
   17b16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17b1a:	f43f a9f9 	beq.w	16f10 <d_print_comp_inner+0x19c>
   17b1e:	29ff      	cmp	r1, #255	; 0xff
   17b20:	f815 6b01 	ldrb.w	r6, [r5], #1
   17b24:	d1f1      	bne.n	17b0a <d_print_comp_inner+0xd96>
   17b26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b2a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17b2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b32:	4620      	mov	r0, r4
   17b34:	4798      	blx	r3
   17b36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b3a:	3301      	adds	r3, #1
   17b3c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b40:	2101      	movs	r1, #1
   17b42:	2300      	movs	r3, #0
   17b44:	e7e3      	b.n	17b0e <d_print_comp_inner+0xd9a>
   17b46:	6869      	ldr	r1, [r5, #4]
   17b48:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17b4c:	780b      	ldrb	r3, [r1, #0]
   17b4e:	2f00      	cmp	r7, #0
   17b50:	f040 85e1 	bne.w	18716 <d_print_comp_inner+0x19a2>
   17b54:	2b05      	cmp	r3, #5
   17b56:	f001 81c7 	beq.w	18ee8 <d_print_comp_inner+0x2174>
   17b5a:	2b23      	cmp	r3, #35	; 0x23
   17b5c:	f000 8689 	beq.w	18872 <d_print_comp_inner+0x1afe>
   17b60:	782a      	ldrb	r2, [r5, #0]
   17b62:	429a      	cmp	r2, r3
   17b64:	f000 8685 	beq.w	18872 <d_print_comp_inner+0x1afe>
   17b68:	2b24      	cmp	r3, #36	; 0x24
   17b6a:	f47f a9eb 	bne.w	16f44 <d_print_comp_inner+0x1d0>
   17b6e:	a814      	add	r0, sp, #80	; 0x50
   17b70:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17b74:	684a      	ldr	r2, [r1, #4]
   17b76:	f840 3d40 	str.w	r3, [r0, #-64]!
   17b7a:	2100      	movs	r1, #0
   17b7c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17b80:	9505      	str	r5, [sp, #20]
   17b82:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17b86:	9106      	str	r1, [sp, #24]
   17b88:	9307      	str	r3, [sp, #28]
   17b8a:	2a00      	cmp	r2, #0
   17b8c:	f47f a9e8 	bne.w	16f60 <d_print_comp_inner+0x1ec>
   17b90:	f7ff b9e5 	b.w	16f5e <d_print_comp_inner+0x1ea>
   17b94:	686a      	ldr	r2, [r5, #4]
   17b96:	f001 fe91 	bl	198bc <d_print_comp>
   17b9a:	f7ff b9b9 	b.w	16f10 <d_print_comp_inner+0x19c>
   17b9e:	ab14      	add	r3, sp, #80	; 0x50
   17ba0:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17ba4:	f843 2d40 	str.w	r2, [r3, #-64]!
   17ba8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17bac:	68aa      	ldr	r2, [r5, #8]
   17bae:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17bb2:	9307      	str	r3, [sp, #28]
   17bb4:	2600      	movs	r6, #0
   17bb6:	9505      	str	r5, [sp, #20]
   17bb8:	9606      	str	r6, [sp, #24]
   17bba:	f001 fe7f 	bl	198bc <d_print_comp>
   17bbe:	9b06      	ldr	r3, [sp, #24]
   17bc0:	b923      	cbnz	r3, 17bcc <d_print_comp_inner+0xe58>
   17bc2:	462a      	mov	r2, r5
   17bc4:	4641      	mov	r1, r8
   17bc6:	4620      	mov	r0, r4
   17bc8:	f001 fe88 	bl	198dc <d_print_mod>
   17bcc:	9b04      	ldr	r3, [sp, #16]
   17bce:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17bd2:	f7ff b99d 	b.w	16f10 <d_print_comp_inner+0x19c>
   17bd6:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17bda:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17bde:	f849 bd40 	str.w	fp, [r9, #-64]!
   17be2:	2200      	movs	r2, #0
   17be4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17be8:	f8cd b000 	str.w	fp, [sp]
   17bec:	4659      	mov	r1, fp
   17bee:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17bf2:	9505      	str	r5, [sp, #20]
   17bf4:	9206      	str	r2, [sp, #24]
   17bf6:	9307      	str	r3, [sp, #28]
   17bf8:	2900      	cmp	r1, #0
   17bfa:	f001 83a0 	beq.w	1933e <d_print_comp_inner+0x25ca>
   17bfe:	684b      	ldr	r3, [r1, #4]
   17c00:	781b      	ldrb	r3, [r3, #0]
   17c02:	3b19      	subs	r3, #25
   17c04:	2b02      	cmp	r3, #2
   17c06:	f201 839a 	bhi.w	1933e <d_print_comp_inner+0x25ca>
   17c0a:	46ac      	mov	ip, r5
   17c0c:	2701      	movs	r7, #1
   17c0e:	460e      	mov	r6, r1
   17c10:	464d      	mov	r5, r9
   17c12:	e004      	b.n	17c1e <d_print_comp_inner+0xeaa>
   17c14:	6873      	ldr	r3, [r6, #4]
   17c16:	781b      	ldrb	r3, [r3, #0]
   17c18:	3b19      	subs	r3, #25
   17c1a:	2b02      	cmp	r3, #2
   17c1c:	d81b      	bhi.n	17c56 <d_print_comp_inner+0xee2>
   17c1e:	68b3      	ldr	r3, [r6, #8]
   17c20:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17c24:	aa14      	add	r2, sp, #80	; 0x50
   17c26:	eb02 0b0e 	add.w	fp, r2, lr
   17c2a:	b98b      	cbnz	r3, 17c50 <d_print_comp_inner+0xedc>
   17c2c:	2f03      	cmp	r7, #3
   17c2e:	f201 80f9 	bhi.w	18e24 <d_print_comp_inner+0x20b0>
   17c32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17c36:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17c3a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17c3e:	f84b 5c40 	str.w	r5, [fp, #-64]
   17c42:	2301      	movs	r3, #1
   17c44:	eb09 050e 	add.w	r5, r9, lr
   17c48:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17c4c:	3701      	adds	r7, #1
   17c4e:	60b3      	str	r3, [r6, #8]
   17c50:	6836      	ldr	r6, [r6, #0]
   17c52:	2e00      	cmp	r6, #0
   17c54:	d1de      	bne.n	17c14 <d_print_comp_inner+0xea0>
   17c56:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17c5a:	4641      	mov	r1, r8
   17c5c:	4620      	mov	r0, r4
   17c5e:	4665      	mov	r5, ip
   17c60:	f001 fe2c 	bl	198bc <d_print_comp>
   17c64:	9b06      	ldr	r3, [sp, #24]
   17c66:	9a00      	ldr	r2, [sp, #0]
   17c68:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17c6c:	2b00      	cmp	r3, #0
   17c6e:	f47f a94f 	bne.w	16f10 <d_print_comp_inner+0x19c>
   17c72:	2f01      	cmp	r7, #1
   17c74:	d00c      	beq.n	17c90 <d_print_comp_inner+0xf1c>
   17c76:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17c7a:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17c7e:	3f01      	subs	r7, #1
   17c80:	4641      	mov	r1, r8
   17c82:	4620      	mov	r0, r4
   17c84:	f001 fe2a 	bl	198dc <d_print_mod>
   17c88:	2f01      	cmp	r7, #1
   17c8a:	f1a9 0910 	sub.w	r9, r9, #16
   17c8e:	d1f4      	bne.n	17c7a <d_print_comp_inner+0xf06>
   17c90:	1d2a      	adds	r2, r5, #4
   17c92:	4641      	mov	r1, r8
   17c94:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17c98:	4620      	mov	r0, r4
   17c9a:	f002 fa27 	bl	1a0ec <d_print_array_type.isra.10>
   17c9e:	f7ff b937 	b.w	16f10 <d_print_comp_inner+0x19c>
   17ca2:	bf00      	nop
   17ca4:	00024653 	.word	0x00024653
   17ca8:	00024647 	.word	0x00024647
   17cac:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17cb0:	2b00      	cmp	r3, #0
   17cb2:	f040 8674 	bne.w	1899e <d_print_comp_inner+0x1c2a>
   17cb6:	686a      	ldr	r2, [r5, #4]
   17cb8:	4bd5      	ldr	r3, [pc, #852]	; (18010 <d_print_comp_inner+0x129c>)
   17cba:	6851      	ldr	r1, [r2, #4]
   17cbc:	4299      	cmp	r1, r3
   17cbe:	f000 866a 	beq.w	18996 <d_print_comp_inner+0x1c22>
   17cc2:	4641      	mov	r1, r8
   17cc4:	4620      	mov	r0, r4
   17cc6:	f001 fdf9 	bl	198bc <d_print_comp>
   17cca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17cce:	2bff      	cmp	r3, #255	; 0xff
   17cd0:	f001 82b2 	beq.w	19238 <d_print_comp_inner+0x24c4>
   17cd4:	1c59      	adds	r1, r3, #1
   17cd6:	2220      	movs	r2, #32
   17cd8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cdc:	54e2      	strb	r2, [r4, r3]
   17cde:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17ce2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17ce6:	2b00      	cmp	r3, #0
   17ce8:	f000 8595 	beq.w	18816 <d_print_comp_inner+0x1aa2>
   17cec:	4dc9      	ldr	r5, [pc, #804]	; (18014 <d_print_comp_inner+0x12a0>)
   17cee:	f04f 0800 	mov.w	r8, #0
   17cf2:	1daf      	adds	r7, r5, #6
   17cf4:	e009      	b.n	17d0a <d_print_comp_inner+0xf96>
   17cf6:	460b      	mov	r3, r1
   17cf8:	3101      	adds	r1, #1
   17cfa:	42bd      	cmp	r5, r7
   17cfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d00:	54e6      	strb	r6, [r4, r3]
   17d02:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17d06:	f43f a903 	beq.w	16f10 <d_print_comp_inner+0x19c>
   17d0a:	29ff      	cmp	r1, #255	; 0xff
   17d0c:	f815 6b01 	ldrb.w	r6, [r5], #1
   17d10:	d1f1      	bne.n	17cf6 <d_print_comp_inner+0xf82>
   17d12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d16:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17d1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d1e:	4620      	mov	r0, r4
   17d20:	4798      	blx	r3
   17d22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d26:	3301      	adds	r3, #1
   17d28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d2c:	2101      	movs	r1, #1
   17d2e:	2300      	movs	r3, #0
   17d30:	e7e3      	b.n	17cfa <d_print_comp_inner+0xf86>
   17d32:	4eb9      	ldr	r6, [pc, #740]	; (18018 <d_print_comp_inner+0x12a4>)
   17d34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d38:	f106 090e 	add.w	r9, r6, #14
   17d3c:	f04f 0800 	mov.w	r8, #0
   17d40:	e009      	b.n	17d56 <d_print_comp_inner+0xfe2>
   17d42:	460b      	mov	r3, r1
   17d44:	3101      	adds	r1, #1
   17d46:	45b1      	cmp	r9, r6
   17d48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d4c:	54e7      	strb	r7, [r4, r3]
   17d4e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d52:	f000 83b3 	beq.w	184bc <d_print_comp_inner+0x1748>
   17d56:	29ff      	cmp	r1, #255	; 0xff
   17d58:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d5c:	d1f1      	bne.n	17d42 <d_print_comp_inner+0xfce>
   17d5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d62:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17d66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d6a:	4620      	mov	r0, r4
   17d6c:	4798      	blx	r3
   17d6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d72:	3301      	adds	r3, #1
   17d74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d78:	2101      	movs	r1, #1
   17d7a:	2300      	movs	r3, #0
   17d7c:	e7e3      	b.n	17d46 <d_print_comp_inner+0xfd2>
   17d7e:	4ea7      	ldr	r6, [pc, #668]	; (1801c <d_print_comp_inner+0x12a8>)
   17d80:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d84:	f106 0a1a 	add.w	sl, r6, #26
   17d88:	f04f 0900 	mov.w	r9, #0
   17d8c:	e009      	b.n	17da2 <d_print_comp_inner+0x102e>
   17d8e:	460b      	mov	r3, r1
   17d90:	3101      	adds	r1, #1
   17d92:	4556      	cmp	r6, sl
   17d94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d98:	54e7      	strb	r7, [r4, r3]
   17d9a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d9e:	f000 82ef 	beq.w	18380 <d_print_comp_inner+0x160c>
   17da2:	29ff      	cmp	r1, #255	; 0xff
   17da4:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17da8:	d1f1      	bne.n	17d8e <d_print_comp_inner+0x101a>
   17daa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17dae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17db2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17db6:	4620      	mov	r0, r4
   17db8:	4798      	blx	r3
   17dba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17dbe:	3301      	adds	r3, #1
   17dc0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17dc4:	2101      	movs	r1, #1
   17dc6:	2300      	movs	r3, #0
   17dc8:	e7e3      	b.n	17d92 <d_print_comp_inner+0x101e>
   17dca:	6869      	ldr	r1, [r5, #4]
   17dcc:	f7fc ff2a 	bl	14c24 <d_find_pack>
   17dd0:	f04f 0900 	mov.w	r9, #0
   17dd4:	2800      	cmp	r0, #0
   17dd6:	f001 835d 	beq.w	19494 <d_print_comp_inner+0x2720>
   17dda:	7803      	ldrb	r3, [r0, #0]
   17ddc:	2b2f      	cmp	r3, #47	; 0x2f
   17dde:	f040 8457 	bne.w	18690 <d_print_comp_inner+0x191c>
   17de2:	6843      	ldr	r3, [r0, #4]
   17de4:	2b00      	cmp	r3, #0
   17de6:	f000 8453 	beq.w	18690 <d_print_comp_inner+0x191c>
   17dea:	6880      	ldr	r0, [r0, #8]
   17dec:	f109 0901 	add.w	r9, r9, #1
   17df0:	2800      	cmp	r0, #0
   17df2:	d1f2      	bne.n	17dda <d_print_comp_inner+0x1066>
   17df4:	686b      	ldr	r3, [r5, #4]
   17df6:	9300      	str	r3, [sp, #0]
   17df8:	f109 33ff 	add.w	r3, r9, #4294967295
   17dfc:	9301      	str	r3, [sp, #4]
   17dfe:	f04f 0a00 	mov.w	sl, #0
   17e02:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   17e06:	9a00      	ldr	r2, [sp, #0]
   17e08:	4641      	mov	r1, r8
   17e0a:	4620      	mov	r0, r4
   17e0c:	f001 fd56 	bl	198bc <d_print_comp>
   17e10:	9b01      	ldr	r3, [sp, #4]
   17e12:	42bb      	cmp	r3, r7
   17e14:	f340 81ab 	ble.w	1816e <d_print_comp_inner+0x13fa>
   17e18:	4d81      	ldr	r5, [pc, #516]	; (18020 <d_print_comp_inner+0x12ac>)
   17e1a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17e1e:	f105 0b02 	add.w	fp, r5, #2
   17e22:	e009      	b.n	17e38 <d_print_comp_inner+0x10c4>
   17e24:	460b      	mov	r3, r1
   17e26:	3101      	adds	r1, #1
   17e28:	45ab      	cmp	fp, r5
   17e2a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e2e:	54e6      	strb	r6, [r4, r3]
   17e30:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17e34:	f000 819b 	beq.w	1816e <d_print_comp_inner+0x13fa>
   17e38:	29ff      	cmp	r1, #255	; 0xff
   17e3a:	f815 6b01 	ldrb.w	r6, [r5], #1
   17e3e:	d1f1      	bne.n	17e24 <d_print_comp_inner+0x10b0>
   17e40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e44:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17e48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e4c:	4620      	mov	r0, r4
   17e4e:	4798      	blx	r3
   17e50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e54:	3301      	adds	r3, #1
   17e56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e5a:	2101      	movs	r1, #1
   17e5c:	2300      	movs	r3, #0
   17e5e:	e7e3      	b.n	17e28 <d_print_comp_inner+0x10b4>
   17e60:	4e70      	ldr	r6, [pc, #448]	; (18024 <d_print_comp_inner+0x12b0>)
   17e62:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e66:	f106 0a16 	add.w	sl, r6, #22
   17e6a:	f04f 0900 	mov.w	r9, #0
   17e6e:	e009      	b.n	17e84 <d_print_comp_inner+0x1110>
   17e70:	460b      	mov	r3, r1
   17e72:	3101      	adds	r1, #1
   17e74:	45b2      	cmp	sl, r6
   17e76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e7a:	54e7      	strb	r7, [r4, r3]
   17e7c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e80:	f000 835f 	beq.w	18542 <d_print_comp_inner+0x17ce>
   17e84:	29ff      	cmp	r1, #255	; 0xff
   17e86:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17e8a:	d1f1      	bne.n	17e70 <d_print_comp_inner+0x10fc>
   17e8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e90:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17e94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e98:	4620      	mov	r0, r4
   17e9a:	4798      	blx	r3
   17e9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ea0:	3301      	adds	r3, #1
   17ea2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ea6:	2101      	movs	r1, #1
   17ea8:	2300      	movs	r3, #0
   17eaa:	e7e3      	b.n	17e74 <d_print_comp_inner+0x1100>
   17eac:	4e5e      	ldr	r6, [pc, #376]	; (18028 <d_print_comp_inner+0x12b4>)
   17eae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17eb2:	f106 0a0e 	add.w	sl, r6, #14
   17eb6:	f04f 0900 	mov.w	r9, #0
   17eba:	e009      	b.n	17ed0 <d_print_comp_inner+0x115c>
   17ebc:	460b      	mov	r3, r1
   17ebe:	3101      	adds	r1, #1
   17ec0:	4556      	cmp	r6, sl
   17ec2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ec6:	54e7      	strb	r7, [r4, r3]
   17ec8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ecc:	f000 83a0 	beq.w	18610 <d_print_comp_inner+0x189c>
   17ed0:	29ff      	cmp	r1, #255	; 0xff
   17ed2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17ed6:	d1f1      	bne.n	17ebc <d_print_comp_inner+0x1148>
   17ed8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17edc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17ee0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ee4:	4620      	mov	r0, r4
   17ee6:	4798      	blx	r3
   17ee8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17eec:	3301      	adds	r3, #1
   17eee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ef2:	2101      	movs	r1, #1
   17ef4:	2300      	movs	r3, #0
   17ef6:	e7e3      	b.n	17ec0 <d_print_comp_inner+0x114c>
   17ef8:	686a      	ldr	r2, [r5, #4]
   17efa:	7811      	ldrb	r1, [r2, #0]
   17efc:	2927      	cmp	r1, #39	; 0x27
   17efe:	f000 8615 	beq.w	18b2c <d_print_comp_inner+0x1db8>
   17f02:	2600      	movs	r6, #0
   17f04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17f08:	29ff      	cmp	r1, #255	; 0xff
   17f0a:	f001 80c5 	beq.w	19098 <d_print_comp_inner+0x2324>
   17f0e:	2328      	movs	r3, #40	; 0x28
   17f10:	1c4a      	adds	r2, r1, #1
   17f12:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17f16:	5463      	strb	r3, [r4, r1]
   17f18:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17f1c:	686a      	ldr	r2, [r5, #4]
   17f1e:	4641      	mov	r1, r8
   17f20:	4620      	mov	r0, r4
   17f22:	f001 fccb 	bl	198bc <d_print_comp>
   17f26:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17f2a:	2bff      	cmp	r3, #255	; 0xff
   17f2c:	f001 8099 	beq.w	19062 <d_print_comp_inner+0x22ee>
   17f30:	1c59      	adds	r1, r3, #1
   17f32:	2229      	movs	r2, #41	; 0x29
   17f34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f38:	54e2      	strb	r2, [r4, r3]
   17f3a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17f3e:	782b      	ldrb	r3, [r5, #0]
   17f40:	2b3d      	cmp	r3, #61	; 0x3d
   17f42:	f000 86e6 	beq.w	18d12 <d_print_comp_inner+0x1f9e>
   17f46:	2e08      	cmp	r6, #8
   17f48:	f000 867f 	beq.w	18c4a <d_print_comp_inner+0x1ed6>
   17f4c:	68aa      	ldr	r2, [r5, #8]
   17f4e:	4641      	mov	r1, r8
   17f50:	4620      	mov	r0, r4
   17f52:	f001 fcb3 	bl	198bc <d_print_comp>
   17f56:	f7fe bfdb 	b.w	16f10 <d_print_comp_inner+0x19c>
   17f5a:	2301      	movs	r3, #1
   17f5c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17f60:	f7fe bfd6 	b.w	16f10 <d_print_comp_inner+0x19c>
   17f64:	686a      	ldr	r2, [r5, #4]
   17f66:	4931      	ldr	r1, [pc, #196]	; (1802c <d_print_comp_inner+0x12b8>)
   17f68:	a804      	add	r0, sp, #16
   17f6a:	f006 fd9f 	bl	1eaac <sprintf>
   17f6e:	a804      	add	r0, sp, #16
   17f70:	f006 ff46 	bl	1ee00 <strlen>
   17f74:	2800      	cmp	r0, #0
   17f76:	f43e afcb 	beq.w	16f10 <d_print_comp_inner+0x19c>
   17f7a:	ad04      	add	r5, sp, #16
   17f7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17f80:	182f      	adds	r7, r5, r0
   17f82:	f04f 0800 	mov.w	r8, #0
   17f86:	e009      	b.n	17f9c <d_print_comp_inner+0x1228>
   17f88:	460b      	mov	r3, r1
   17f8a:	3101      	adds	r1, #1
   17f8c:	42bd      	cmp	r5, r7
   17f8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f92:	54e6      	strb	r6, [r4, r3]
   17f94:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17f98:	f43e afba 	beq.w	16f10 <d_print_comp_inner+0x19c>
   17f9c:	29ff      	cmp	r1, #255	; 0xff
   17f9e:	f815 6b01 	ldrb.w	r6, [r5], #1
   17fa2:	d1f1      	bne.n	17f88 <d_print_comp_inner+0x1214>
   17fa4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fa8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17fac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17fb0:	4620      	mov	r0, r4
   17fb2:	4798      	blx	r3
   17fb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17fb8:	3301      	adds	r3, #1
   17fba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17fbe:	2101      	movs	r1, #1
   17fc0:	2300      	movs	r3, #0
   17fc2:	e7e3      	b.n	17f8c <d_print_comp_inner+0x1218>
   17fc4:	4e1a      	ldr	r6, [pc, #104]	; (18030 <d_print_comp_inner+0x12bc>)
   17fc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17fca:	f106 0a1c 	add.w	sl, r6, #28
   17fce:	f04f 0900 	mov.w	r9, #0
   17fd2:	e009      	b.n	17fe8 <d_print_comp_inner+0x1274>
   17fd4:	460b      	mov	r3, r1
   17fd6:	3101      	adds	r1, #1
   17fd8:	4556      	cmp	r6, sl
   17fda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17fde:	54e7      	strb	r7, [r4, r3]
   17fe0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17fe4:	f000 82fa 	beq.w	185dc <d_print_comp_inner+0x1868>
   17fe8:	29ff      	cmp	r1, #255	; 0xff
   17fea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17fee:	d1f1      	bne.n	17fd4 <d_print_comp_inner+0x1260>
   17ff0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ff4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17ff8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ffc:	4620      	mov	r0, r4
   17ffe:	4798      	blx	r3
   18000:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18004:	3301      	adds	r3, #1
   18006:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1800a:	2101      	movs	r1, #1
   1800c:	2300      	movs	r3, #0
   1800e:	e7e3      	b.n	17fd8 <d_print_comp_inner+0x1264>
   18010:	00023e10 	.word	0x00023e10
   18014:	00024634 	.word	0x00024634
   18018:	00024713 	.word	0x00024713
   1801c:	0002460f 	.word	0x0002460f
   18020:	00024644 	.word	0x00024644
   18024:	00024613 	.word	0x00024613
   18028:	00024697 	.word	0x00024697
   1802c:	00024468 	.word	0x00024468
   18030:	000246e3 	.word	0x000246e3
   18034:	68ab      	ldr	r3, [r5, #8]
   18036:	781a      	ldrb	r2, [r3, #0]
   18038:	2a3a      	cmp	r2, #58	; 0x3a
   1803a:	f47e af7d 	bne.w	16f38 <d_print_comp_inner+0x1c4>
   1803e:	689b      	ldr	r3, [r3, #8]
   18040:	781b      	ldrb	r3, [r3, #0]
   18042:	2b3b      	cmp	r3, #59	; 0x3b
   18044:	f47e af78 	bne.w	16f38 <d_print_comp_inner+0x1c4>
   18048:	f105 0308 	add.w	r3, r5, #8
   1804c:	686a      	ldr	r2, [r5, #4]
   1804e:	f002 fabf 	bl	1a5d0 <d_maybe_print_fold_expression.isra.15>
   18052:	4606      	mov	r6, r0
   18054:	2800      	cmp	r0, #0
   18056:	f47e af5b 	bne.w	16f10 <d_print_comp_inner+0x19c>
   1805a:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1805e:	68aa      	ldr	r2, [r5, #8]
   18060:	f8da 1004 	ldr.w	r1, [sl, #4]
   18064:	6893      	ldr	r3, [r2, #8]
   18066:	6808      	ldr	r0, [r1, #0]
   18068:	49d6      	ldr	r1, [pc, #856]	; (183c4 <d_print_comp_inner+0x1650>)
   1806a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   1806e:	685f      	ldr	r7, [r3, #4]
   18070:	689d      	ldr	r5, [r3, #8]
   18072:	f006 fd49 	bl	1eb08 <strcmp>
   18076:	2800      	cmp	r0, #0
   18078:	f001 82e2 	beq.w	19640 <d_print_comp_inner+0x28cc>
   1807c:	2204      	movs	r2, #4
   1807e:	49d2      	ldr	r1, [pc, #840]	; (183c8 <d_print_comp_inner+0x1654>)
   18080:	4620      	mov	r0, r4
   18082:	f7fc fba3 	bl	147cc <d_append_buffer>
   18086:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1808a:	b183      	cbz	r3, 180ae <d_print_comp_inner+0x133a>
   1808c:	4641      	mov	r1, r8
   1808e:	464a      	mov	r2, r9
   18090:	4620      	mov	r0, r4
   18092:	f002 fa39 	bl	1a508 <d_print_subexpr>
   18096:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1809a:	29ff      	cmp	r1, #255	; 0xff
   1809c:	f001 83ec 	beq.w	19878 <d_print_comp_inner+0x2b04>
   180a0:	2320      	movs	r3, #32
   180a2:	1c4a      	adds	r2, r1, #1
   180a4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   180a8:	5463      	strb	r3, [r4, r1]
   180aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   180ae:	463a      	mov	r2, r7
   180b0:	4641      	mov	r1, r8
   180b2:	4620      	mov	r0, r4
   180b4:	f001 fc02 	bl	198bc <d_print_comp>
   180b8:	2d00      	cmp	r5, #0
   180ba:	f43e af29 	beq.w	16f10 <d_print_comp_inner+0x19c>
   180be:	462a      	mov	r2, r5
   180c0:	4641      	mov	r1, r8
   180c2:	4620      	mov	r0, r4
   180c4:	f002 fa20 	bl	1a508 <d_print_subexpr>
   180c8:	f7fe bf22 	b.w	16f10 <d_print_comp_inner+0x19c>
   180cc:	4ebf      	ldr	r6, [pc, #764]	; (183cc <d_print_comp_inner+0x1658>)
   180ce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   180d2:	f106 0a08 	add.w	sl, r6, #8
   180d6:	f04f 0900 	mov.w	r9, #0
   180da:	e009      	b.n	180f0 <d_print_comp_inner+0x137c>
   180dc:	460b      	mov	r3, r1
   180de:	3101      	adds	r1, #1
   180e0:	4556      	cmp	r6, sl
   180e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   180e6:	54e7      	strb	r7, [r4, r3]
   180e8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180ec:	f000 80d8 	beq.w	182a0 <d_print_comp_inner+0x152c>
   180f0:	29ff      	cmp	r1, #255	; 0xff
   180f2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   180f6:	d1f1      	bne.n	180dc <d_print_comp_inner+0x1368>
   180f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180fc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18100:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18104:	4620      	mov	r0, r4
   18106:	4798      	blx	r3
   18108:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1810c:	3301      	adds	r3, #1
   1810e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18112:	2101      	movs	r1, #1
   18114:	2300      	movs	r3, #0
   18116:	e7e3      	b.n	180e0 <d_print_comp_inner+0x136c>
   18118:	4ead      	ldr	r6, [pc, #692]	; (183d0 <d_print_comp_inner+0x165c>)
   1811a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1811e:	f106 0a1d 	add.w	sl, r6, #29
   18122:	f04f 0900 	mov.w	r9, #0
   18126:	e009      	b.n	1813c <d_print_comp_inner+0x13c8>
   18128:	460b      	mov	r3, r1
   1812a:	3101      	adds	r1, #1
   1812c:	45b2      	cmp	sl, r6
   1812e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18132:	54e7      	strb	r7, [r4, r3]
   18134:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18138:	f000 81fc 	beq.w	18534 <d_print_comp_inner+0x17c0>
   1813c:	29ff      	cmp	r1, #255	; 0xff
   1813e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18142:	d1f1      	bne.n	18128 <d_print_comp_inner+0x13b4>
   18144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18148:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1814c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18150:	4620      	mov	r0, r4
   18152:	4798      	blx	r3
   18154:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18158:	3301      	adds	r3, #1
   1815a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1815e:	2101      	movs	r1, #1
   18160:	2300      	movs	r3, #0
   18162:	e7e3      	b.n	1812c <d_print_comp_inner+0x13b8>
   18164:	2301      	movs	r3, #1
   18166:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1816a:	f7fe bed1 	b.w	16f10 <d_print_comp_inner+0x19c>
   1816e:	3701      	adds	r7, #1
   18170:	454f      	cmp	r7, r9
   18172:	f47f ae46 	bne.w	17e02 <d_print_comp_inner+0x108e>
   18176:	f7fe becb 	b.w	16f10 <d_print_comp_inner+0x19c>
   1817a:	6876      	ldr	r6, [r6, #4]
   1817c:	2e00      	cmp	r6, #0
   1817e:	f001 806e 	beq.w	1925e <d_print_comp_inner+0x24ea>
   18182:	2f04      	cmp	r7, #4
   18184:	f103 0310 	add.w	r3, r3, #16
   18188:	f47f a9bd 	bne.w	17506 <d_print_comp_inner+0x792>
   1818c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   18190:	2301      	movs	r3, #1
   18192:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18196:	f7fe bebb 	b.w	16f10 <d_print_comp_inner+0x19c>
   1819a:	4e8e      	ldr	r6, [pc, #568]	; (183d4 <d_print_comp_inner+0x1660>)
   1819c:	686a      	ldr	r2, [r5, #4]
   1819e:	4641      	mov	r1, r8
   181a0:	4620      	mov	r0, r4
   181a2:	f001 fb8b 	bl	198bc <d_print_comp>
   181a6:	f106 0a04 	add.w	sl, r6, #4
   181aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   181ae:	f04f 0900 	mov.w	r9, #0
   181b2:	e008      	b.n	181c6 <d_print_comp_inner+0x1452>
   181b4:	460b      	mov	r3, r1
   181b6:	3101      	adds	r1, #1
   181b8:	45b2      	cmp	sl, r6
   181ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   181be:	54e7      	strb	r7, [r4, r3]
   181c0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   181c4:	d013      	beq.n	181ee <d_print_comp_inner+0x147a>
   181c6:	29ff      	cmp	r1, #255	; 0xff
   181c8:	f816 7b01 	ldrb.w	r7, [r6], #1
   181cc:	d1f2      	bne.n	181b4 <d_print_comp_inner+0x1440>
   181ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181d2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   181d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   181da:	4620      	mov	r0, r4
   181dc:	4798      	blx	r3
   181de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   181e2:	3301      	adds	r3, #1
   181e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   181e8:	2101      	movs	r1, #1
   181ea:	2300      	movs	r3, #0
   181ec:	e7e4      	b.n	181b8 <d_print_comp_inner+0x1444>
   181ee:	68aa      	ldr	r2, [r5, #8]
   181f0:	4641      	mov	r1, r8
   181f2:	4620      	mov	r0, r4
   181f4:	f001 fb62 	bl	198bc <d_print_comp>
   181f8:	f7fe be8a 	b.w	16f10 <d_print_comp_inner+0x19c>
   181fc:	686a      	ldr	r2, [r5, #4]
   181fe:	4641      	mov	r1, r8
   18200:	4620      	mov	r0, r4
   18202:	f001 fb5b 	bl	198bc <d_print_comp>
   18206:	f7fe be83 	b.w	16f10 <d_print_comp_inner+0x19c>
   1820a:	686a      	ldr	r2, [r5, #4]
   1820c:	4641      	mov	r1, r8
   1820e:	4620      	mov	r0, r4
   18210:	f001 fb54 	bl	198bc <d_print_comp>
   18214:	f7fe be7c 	b.w	16f10 <d_print_comp_inner+0x19c>
   18218:	686a      	ldr	r2, [r5, #4]
   1821a:	4641      	mov	r1, r8
   1821c:	4620      	mov	r0, r4
   1821e:	f001 fb4d 	bl	198bc <d_print_comp>
   18222:	f7fe be75 	b.w	16f10 <d_print_comp_inner+0x19c>
   18226:	686a      	ldr	r2, [r5, #4]
   18228:	4641      	mov	r1, r8
   1822a:	4620      	mov	r0, r4
   1822c:	f001 fb46 	bl	198bc <d_print_comp>
   18230:	f7fe be6e 	b.w	16f10 <d_print_comp_inner+0x19c>
   18234:	686a      	ldr	r2, [r5, #4]
   18236:	4641      	mov	r1, r8
   18238:	4620      	mov	r0, r4
   1823a:	f001 fb3f 	bl	198bc <d_print_comp>
   1823e:	f7fe be67 	b.w	16f10 <d_print_comp_inner+0x19c>
   18242:	686a      	ldr	r2, [r5, #4]
   18244:	4641      	mov	r1, r8
   18246:	4620      	mov	r0, r4
   18248:	f001 fb38 	bl	198bc <d_print_comp>
   1824c:	f7fe be60 	b.w	16f10 <d_print_comp_inner+0x19c>
   18250:	686a      	ldr	r2, [r5, #4]
   18252:	4641      	mov	r1, r8
   18254:	4620      	mov	r0, r4
   18256:	f001 fb31 	bl	198bc <d_print_comp>
   1825a:	f7fe be59 	b.w	16f10 <d_print_comp_inner+0x19c>
   1825e:	686a      	ldr	r2, [r5, #4]
   18260:	4641      	mov	r1, r8
   18262:	4620      	mov	r0, r4
   18264:	f001 fb2a 	bl	198bc <d_print_comp>
   18268:	f7fe be52 	b.w	16f10 <d_print_comp_inner+0x19c>
   1826c:	686a      	ldr	r2, [r5, #4]
   1826e:	4641      	mov	r1, r8
   18270:	4620      	mov	r0, r4
   18272:	f001 fb23 	bl	198bc <d_print_comp>
   18276:	f7fe be4b 	b.w	16f10 <d_print_comp_inner+0x19c>
   1827a:	4641      	mov	r1, r8
   1827c:	68aa      	ldr	r2, [r5, #8]
   1827e:	4620      	mov	r0, r4
   18280:	f001 fb1c 	bl	198bc <d_print_comp>
   18284:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18288:	29ff      	cmp	r1, #255	; 0xff
   1828a:	f000 8560 	beq.w	18d4e <d_print_comp_inner+0x1fda>
   1828e:	1c4a      	adds	r2, r1, #1
   18290:	235d      	movs	r3, #93	; 0x5d
   18292:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18296:	5463      	strb	r3, [r4, r1]
   18298:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1829c:	f7fe be38 	b.w	16f10 <d_print_comp_inner+0x19c>
   182a0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   182a4:	4e4c      	ldr	r6, [pc, #304]	; (183d8 <d_print_comp_inner+0x1664>)
   182a6:	3301      	adds	r3, #1
   182a8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   182ac:	4641      	mov	r1, r8
   182ae:	686a      	ldr	r2, [r5, #4]
   182b0:	4620      	mov	r0, r4
   182b2:	f001 fb03 	bl	198bc <d_print_comp>
   182b6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   182ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   182be:	3b01      	subs	r3, #1
   182c0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   182c4:	f106 0902 	add.w	r9, r6, #2
   182c8:	f04f 0800 	mov.w	r8, #0
   182cc:	e008      	b.n	182e0 <d_print_comp_inner+0x156c>
   182ce:	460b      	mov	r3, r1
   182d0:	3101      	adds	r1, #1
   182d2:	454e      	cmp	r6, r9
   182d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182d8:	54e7      	strb	r7, [r4, r3]
   182da:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   182de:	d013      	beq.n	18308 <d_print_comp_inner+0x1594>
   182e0:	29ff      	cmp	r1, #255	; 0xff
   182e2:	f816 7b01 	ldrb.w	r7, [r6], #1
   182e6:	d1f2      	bne.n	182ce <d_print_comp_inner+0x155a>
   182e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   182ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   182f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   182f4:	4620      	mov	r0, r4
   182f6:	4798      	blx	r3
   182f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182fc:	3301      	adds	r3, #1
   182fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18302:	2101      	movs	r1, #1
   18304:	2300      	movs	r3, #0
   18306:	e7e4      	b.n	182d2 <d_print_comp_inner+0x155e>
   18308:	68aa      	ldr	r2, [r5, #8]
   1830a:	4934      	ldr	r1, [pc, #208]	; (183dc <d_print_comp_inner+0x1668>)
   1830c:	3201      	adds	r2, #1
   1830e:	a804      	add	r0, sp, #16
   18310:	f006 fbcc 	bl	1eaac <sprintf>
   18314:	a804      	add	r0, sp, #16
   18316:	f006 fd73 	bl	1ee00 <strlen>
   1831a:	b318      	cbz	r0, 18364 <d_print_comp_inner+0x15f0>
   1831c:	ad04      	add	r5, sp, #16
   1831e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18322:	182f      	adds	r7, r5, r0
   18324:	f04f 0800 	mov.w	r8, #0
   18328:	e008      	b.n	1833c <d_print_comp_inner+0x15c8>
   1832a:	460b      	mov	r3, r1
   1832c:	3101      	adds	r1, #1
   1832e:	42af      	cmp	r7, r5
   18330:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18334:	54e6      	strb	r6, [r4, r3]
   18336:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1833a:	d015      	beq.n	18368 <d_print_comp_inner+0x15f4>
   1833c:	29ff      	cmp	r1, #255	; 0xff
   1833e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18342:	d1f2      	bne.n	1832a <d_print_comp_inner+0x15b6>
   18344:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18348:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1834c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18350:	4620      	mov	r0, r4
   18352:	4798      	blx	r3
   18354:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18358:	3301      	adds	r3, #1
   1835a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1835e:	2101      	movs	r1, #1
   18360:	2300      	movs	r3, #0
   18362:	e7e4      	b.n	1832e <d_print_comp_inner+0x15ba>
   18364:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18368:	29ff      	cmp	r1, #255	; 0xff
   1836a:	f000 8560 	beq.w	18e2e <d_print_comp_inner+0x20ba>
   1836e:	1c4a      	adds	r2, r1, #1
   18370:	237d      	movs	r3, #125	; 0x7d
   18372:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18376:	5463      	strb	r3, [r4, r1]
   18378:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1837c:	f7fe bdc8 	b.w	16f10 <d_print_comp_inner+0x19c>
   18380:	686a      	ldr	r2, [r5, #4]
   18382:	4641      	mov	r1, r8
   18384:	4620      	mov	r0, r4
   18386:	f001 fa99 	bl	198bc <d_print_comp>
   1838a:	f7fe bdc1 	b.w	16f10 <d_print_comp_inner+0x19c>
   1838e:	4641      	mov	r1, r8
   18390:	68aa      	ldr	r2, [r5, #8]
   18392:	4620      	mov	r0, r4
   18394:	f001 fa92 	bl	198bc <d_print_comp>
   18398:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1839c:	29ff      	cmp	r1, #255	; 0xff
   1839e:	f000 850b 	beq.w	18db8 <d_print_comp_inner+0x2044>
   183a2:	1c4a      	adds	r2, r1, #1
   183a4:	235d      	movs	r3, #93	; 0x5d
   183a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   183aa:	5463      	strb	r3, [r4, r1]
   183ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   183b0:	f7fe bdae 	b.w	16f10 <d_print_comp_inner+0x19c>
   183b4:	686a      	ldr	r2, [r5, #4]
   183b6:	4641      	mov	r1, r8
   183b8:	4620      	mov	r0, r4
   183ba:	f001 fa7f 	bl	198bc <d_print_comp>
   183be:	f7fe bda7 	b.w	16f10 <d_print_comp_inner+0x19c>
   183c2:	bf00      	nop
   183c4:	0002447c 	.word	0x0002447c
   183c8:	00024674 	.word	0x00024674
   183cc:	00024703 	.word	0x00024703
   183d0:	000246c3 	.word	0x000246c3
   183d4:	00024518 	.word	0x00024518
   183d8:	00024710 	.word	0x00024710
   183dc:	00024468 	.word	0x00024468
   183e0:	f8da 5004 	ldr.w	r5, [sl, #4]
   183e4:	782b      	ldrb	r3, [r5, #0]
   183e6:	3b61      	subs	r3, #97	; 0x61
   183e8:	2b19      	cmp	r3, #25
   183ea:	d809      	bhi.n	18400 <d_print_comp_inner+0x168c>
   183ec:	29ff      	cmp	r1, #255	; 0xff
   183ee:	f000 8793 	beq.w	19318 <d_print_comp_inner+0x25a4>
   183f2:	2320      	movs	r3, #32
   183f4:	1c4a      	adds	r2, r1, #1
   183f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   183fa:	5463      	strb	r3, [r4, r1]
   183fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18400:	19eb      	adds	r3, r5, r7
   18402:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18406:	2b20      	cmp	r3, #32
   18408:	bf08      	it	eq
   1840a:	f107 37ff 	addeq.w	r7, r7, #4294967295
   1840e:	2f00      	cmp	r7, #0
   18410:	f43e ad7e 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18414:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18418:	442f      	add	r7, r5
   1841a:	f04f 0800 	mov.w	r8, #0
   1841e:	e009      	b.n	18434 <d_print_comp_inner+0x16c0>
   18420:	460b      	mov	r3, r1
   18422:	3101      	adds	r1, #1
   18424:	42af      	cmp	r7, r5
   18426:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1842a:	54e6      	strb	r6, [r4, r3]
   1842c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18430:	f43e ad6e 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18434:	29ff      	cmp	r1, #255	; 0xff
   18436:	f815 6b01 	ldrb.w	r6, [r5], #1
   1843a:	d1f1      	bne.n	18420 <d_print_comp_inner+0x16ac>
   1843c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18440:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18444:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18448:	4620      	mov	r0, r4
   1844a:	4798      	blx	r3
   1844c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18450:	3301      	adds	r3, #1
   18452:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18456:	2101      	movs	r1, #1
   18458:	2300      	movs	r3, #0
   1845a:	e7e3      	b.n	18424 <d_print_comp_inner+0x16b0>
   1845c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18460:	b13a      	cbz	r2, 18472 <d_print_comp_inner+0x16fe>
   18462:	ab14      	add	r3, sp, #80	; 0x50
   18464:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18468:	f843 1d48 	str.w	r1, [r3, #-72]!
   1846c:	9203      	str	r2, [sp, #12]
   1846e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18472:	686b      	ldr	r3, [r5, #4]
   18474:	781a      	ldrb	r2, [r3, #0]
   18476:	2a04      	cmp	r2, #4
   18478:	f000 830e 	beq.w	18a98 <d_print_comp_inner+0x1d24>
   1847c:	a804      	add	r0, sp, #16
   1847e:	461a      	mov	r2, r3
   18480:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18484:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18488:	4641      	mov	r1, r8
   1848a:	4620      	mov	r0, r4
   1848c:	9304      	str	r3, [sp, #16]
   1848e:	9505      	str	r5, [sp, #20]
   18490:	f7fe fc70 	bl	16d74 <d_print_comp_inner>
   18494:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18498:	9a05      	ldr	r2, [sp, #20]
   1849a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1849e:	2b00      	cmp	r3, #0
   184a0:	f43e ad36 	beq.w	16f10 <d_print_comp_inner+0x19c>
   184a4:	9b02      	ldr	r3, [sp, #8]
   184a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   184aa:	f7fe bd31 	b.w	16f10 <d_print_comp_inner+0x19c>
   184ae:	68aa      	ldr	r2, [r5, #8]
   184b0:	4641      	mov	r1, r8
   184b2:	4620      	mov	r0, r4
   184b4:	f001 fa02 	bl	198bc <d_print_comp>
   184b8:	f7fe bd2a 	b.w	16f10 <d_print_comp_inner+0x19c>
   184bc:	686a      	ldr	r2, [r5, #4]
   184be:	49d8      	ldr	r1, [pc, #864]	; (18820 <d_print_comp_inner+0x1aac>)
   184c0:	3201      	adds	r2, #1
   184c2:	a804      	add	r0, sp, #16
   184c4:	f006 faf2 	bl	1eaac <sprintf>
   184c8:	a804      	add	r0, sp, #16
   184ca:	f006 fc99 	bl	1ee00 <strlen>
   184ce:	b318      	cbz	r0, 18518 <d_print_comp_inner+0x17a4>
   184d0:	ad04      	add	r5, sp, #16
   184d2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184d6:	182f      	adds	r7, r5, r0
   184d8:	f04f 0800 	mov.w	r8, #0
   184dc:	e008      	b.n	184f0 <d_print_comp_inner+0x177c>
   184de:	460b      	mov	r3, r1
   184e0:	3101      	adds	r1, #1
   184e2:	42bd      	cmp	r5, r7
   184e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   184e8:	54e6      	strb	r6, [r4, r3]
   184ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   184ee:	d015      	beq.n	1851c <d_print_comp_inner+0x17a8>
   184f0:	29ff      	cmp	r1, #255	; 0xff
   184f2:	f815 6b01 	ldrb.w	r6, [r5], #1
   184f6:	d1f2      	bne.n	184de <d_print_comp_inner+0x176a>
   184f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18500:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18504:	4620      	mov	r0, r4
   18506:	4798      	blx	r3
   18508:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1850c:	3301      	adds	r3, #1
   1850e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18512:	2101      	movs	r1, #1
   18514:	2300      	movs	r3, #0
   18516:	e7e4      	b.n	184e2 <d_print_comp_inner+0x176e>
   18518:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1851c:	29ff      	cmp	r1, #255	; 0xff
   1851e:	f000 8404 	beq.w	18d2a <d_print_comp_inner+0x1fb6>
   18522:	1c4a      	adds	r2, r1, #1
   18524:	237d      	movs	r3, #125	; 0x7d
   18526:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1852a:	5463      	strb	r3, [r4, r1]
   1852c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18530:	f7fe bcee 	b.w	16f10 <d_print_comp_inner+0x19c>
   18534:	686a      	ldr	r2, [r5, #4]
   18536:	4641      	mov	r1, r8
   18538:	4620      	mov	r0, r4
   1853a:	f001 f9bf 	bl	198bc <d_print_comp>
   1853e:	f7fe bce7 	b.w	16f10 <d_print_comp_inner+0x19c>
   18542:	686a      	ldr	r2, [r5, #4]
   18544:	4641      	mov	r1, r8
   18546:	4620      	mov	r0, r4
   18548:	f001 f9b8 	bl	198bc <d_print_comp>
   1854c:	f7fe bce0 	b.w	16f10 <d_print_comp_inner+0x19c>
   18550:	686a      	ldr	r2, [r5, #4]
   18552:	4641      	mov	r1, r8
   18554:	4620      	mov	r0, r4
   18556:	f001 f9b1 	bl	198bc <d_print_comp>
   1855a:	f7fe bcd9 	b.w	16f10 <d_print_comp_inner+0x19c>
   1855e:	4eb1      	ldr	r6, [pc, #708]	; (18824 <d_print_comp_inner+0x1ab0>)
   18560:	68aa      	ldr	r2, [r5, #8]
   18562:	4641      	mov	r1, r8
   18564:	4620      	mov	r0, r4
   18566:	f001 f9a9 	bl	198bc <d_print_comp>
   1856a:	f106 0a05 	add.w	sl, r6, #5
   1856e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18572:	f04f 0900 	mov.w	r9, #0
   18576:	e008      	b.n	1858a <d_print_comp_inner+0x1816>
   18578:	460b      	mov	r3, r1
   1857a:	3101      	adds	r1, #1
   1857c:	4556      	cmp	r6, sl
   1857e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18582:	54e7      	strb	r7, [r4, r3]
   18584:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18588:	d013      	beq.n	185b2 <d_print_comp_inner+0x183e>
   1858a:	29ff      	cmp	r1, #255	; 0xff
   1858c:	f816 7b01 	ldrb.w	r7, [r6], #1
   18590:	d1f2      	bne.n	18578 <d_print_comp_inner+0x1804>
   18592:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18596:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1859a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1859e:	4620      	mov	r0, r4
   185a0:	4798      	blx	r3
   185a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   185a6:	3301      	adds	r3, #1
   185a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   185ac:	2101      	movs	r1, #1
   185ae:	2300      	movs	r3, #0
   185b0:	e7e4      	b.n	1857c <d_print_comp_inner+0x1808>
   185b2:	686a      	ldr	r2, [r5, #4]
   185b4:	4641      	mov	r1, r8
   185b6:	4620      	mov	r0, r4
   185b8:	f001 f980 	bl	198bc <d_print_comp>
   185bc:	f7fe bca8 	b.w	16f10 <d_print_comp_inner+0x19c>
   185c0:	686a      	ldr	r2, [r5, #4]
   185c2:	4641      	mov	r1, r8
   185c4:	4620      	mov	r0, r4
   185c6:	f001 f979 	bl	198bc <d_print_comp>
   185ca:	f7fe bca1 	b.w	16f10 <d_print_comp_inner+0x19c>
   185ce:	686a      	ldr	r2, [r5, #4]
   185d0:	4641      	mov	r1, r8
   185d2:	4620      	mov	r0, r4
   185d4:	f001 f972 	bl	198bc <d_print_comp>
   185d8:	f7fe bc9a 	b.w	16f10 <d_print_comp_inner+0x19c>
   185dc:	686a      	ldr	r2, [r5, #4]
   185de:	4641      	mov	r1, r8
   185e0:	4620      	mov	r0, r4
   185e2:	f001 f96b 	bl	198bc <d_print_comp>
   185e6:	f7fe bc93 	b.w	16f10 <d_print_comp_inner+0x19c>
   185ea:	4641      	mov	r1, r8
   185ec:	686a      	ldr	r2, [r5, #4]
   185ee:	4620      	mov	r0, r4
   185f0:	f001 f964 	bl	198bc <d_print_comp>
   185f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   185f8:	29ff      	cmp	r1, #255	; 0xff
   185fa:	f000 842a 	beq.w	18e52 <d_print_comp_inner+0x20de>
   185fe:	1c4a      	adds	r2, r1, #1
   18600:	2329      	movs	r3, #41	; 0x29
   18602:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18606:	5463      	strb	r3, [r4, r1]
   18608:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1860c:	f7fe bc80 	b.w	16f10 <d_print_comp_inner+0x19c>
   18610:	686a      	ldr	r2, [r5, #4]
   18612:	4641      	mov	r1, r8
   18614:	4620      	mov	r0, r4
   18616:	f001 f951 	bl	198bc <d_print_comp>
   1861a:	f7fe bc79 	b.w	16f10 <d_print_comp_inner+0x19c>
   1861e:	2f04      	cmp	r7, #4
   18620:	f1a6 0410 	sub.w	r4, r6, #16
   18624:	f106 0e10 	add.w	lr, r6, #16
   18628:	f000 8722 	beq.w	19470 <d_print_comp_inner+0x26fc>
   1862c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   18630:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   18634:	2300      	movs	r3, #0
   18636:	f84e 4c10 	str.w	r4, [lr, #-16]
   1863a:	e906 1008 	stmdb	r6, {r3, ip}
   1863e:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   18642:	f846 5c0c 	str.w	r5, [r6, #-12]
   18646:	686d      	ldr	r5, [r5, #4]
   18648:	3701      	adds	r7, #1
   1864a:	4676      	mov	r6, lr
   1864c:	f7fe bf84 	b.w	17558 <d_print_comp_inner+0x7e4>
   18650:	68aa      	ldr	r2, [r5, #8]
   18652:	9300      	str	r3, [sp, #0]
   18654:	460e      	mov	r6, r1
   18656:	4620      	mov	r0, r4
   18658:	4641      	mov	r1, r8
   1865a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   1865e:	f001 f92d 	bl	198bc <d_print_comp>
   18662:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18666:	9b00      	ldr	r3, [sp, #0]
   18668:	4295      	cmp	r5, r2
   1866a:	f47e ac51 	bne.w	16f10 <d_print_comp_inner+0x19c>
   1866e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   18672:	42b2      	cmp	r2, r6
   18674:	f47e ac4c 	bne.w	16f10 <d_print_comp_inner+0x19c>
   18678:	3b01      	subs	r3, #1
   1867a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1867e:	f7fe bc47 	b.w	16f10 <d_print_comp_inner+0x19c>
   18682:	462a      	mov	r2, r5
   18684:	4641      	mov	r1, r8
   18686:	4620      	mov	r0, r4
   18688:	f001 f928 	bl	198dc <d_print_mod>
   1868c:	f7fe bc70 	b.w	16f70 <d_print_comp_inner+0x1fc>
   18690:	686b      	ldr	r3, [r5, #4]
   18692:	9300      	str	r3, [sp, #0]
   18694:	f1b9 0f00 	cmp.w	r9, #0
   18698:	f47f abae 	bne.w	17df8 <d_print_comp_inner+0x1084>
   1869c:	f7fe bc38 	b.w	16f10 <d_print_comp_inner+0x19c>
   186a0:	463a      	mov	r2, r7
   186a2:	a804      	add	r0, sp, #16
   186a4:	495e      	ldr	r1, [pc, #376]	; (18820 <d_print_comp_inner+0x1aac>)
   186a6:	f006 fa01 	bl	1eaac <sprintf>
   186aa:	a804      	add	r0, sp, #16
   186ac:	f006 fba8 	bl	1ee00 <strlen>
   186b0:	b318      	cbz	r0, 186fa <d_print_comp_inner+0x1986>
   186b2:	ad04      	add	r5, sp, #16
   186b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186b8:	182f      	adds	r7, r5, r0
   186ba:	f04f 0800 	mov.w	r8, #0
   186be:	e008      	b.n	186d2 <d_print_comp_inner+0x195e>
   186c0:	460b      	mov	r3, r1
   186c2:	3101      	adds	r1, #1
   186c4:	42af      	cmp	r7, r5
   186c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   186ca:	54e6      	strb	r6, [r4, r3]
   186cc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   186d0:	d015      	beq.n	186fe <d_print_comp_inner+0x198a>
   186d2:	29ff      	cmp	r1, #255	; 0xff
   186d4:	f815 6b01 	ldrb.w	r6, [r5], #1
   186d8:	d1f2      	bne.n	186c0 <d_print_comp_inner+0x194c>
   186da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   186de:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   186e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   186e6:	4620      	mov	r0, r4
   186e8:	4798      	blx	r3
   186ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   186ee:	3301      	adds	r3, #1
   186f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   186f4:	2101      	movs	r1, #1
   186f6:	2300      	movs	r3, #0
   186f8:	e7e4      	b.n	186c4 <d_print_comp_inner+0x1950>
   186fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186fe:	29ff      	cmp	r1, #255	; 0xff
   18700:	f000 84dd 	beq.w	190be <d_print_comp_inner+0x234a>
   18704:	1c4a      	adds	r2, r1, #1
   18706:	237d      	movs	r3, #125	; 0x7d
   18708:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1870c:	5463      	strb	r3, [r4, r1]
   1870e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18712:	f7fe bbfd 	b.w	16f10 <d_print_comp_inner+0x19c>
   18716:	2700      	movs	r7, #0
   18718:	f7ff ba1f 	b.w	17b5a <d_print_comp_inner+0xde6>
   1871c:	68df      	ldr	r7, [r3, #12]
   1871e:	689d      	ldr	r5, [r3, #8]
   18720:	2f00      	cmp	r7, #0
   18722:	f43e abf5 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18726:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1872a:	442f      	add	r7, r5
   1872c:	f04f 0800 	mov.w	r8, #0
   18730:	e009      	b.n	18746 <d_print_comp_inner+0x19d2>
   18732:	460b      	mov	r3, r1
   18734:	3101      	adds	r1, #1
   18736:	42bd      	cmp	r5, r7
   18738:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1873c:	54e6      	strb	r6, [r4, r3]
   1873e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18742:	f43e abe5 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18746:	29ff      	cmp	r1, #255	; 0xff
   18748:	f815 6b01 	ldrb.w	r6, [r5], #1
   1874c:	d1f1      	bne.n	18732 <d_print_comp_inner+0x19be>
   1874e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18752:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18756:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1875a:	4620      	mov	r0, r4
   1875c:	4798      	blx	r3
   1875e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18762:	3301      	adds	r3, #1
   18764:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18768:	2101      	movs	r1, #1
   1876a:	2300      	movs	r3, #0
   1876c:	e7e3      	b.n	18736 <d_print_comp_inner+0x19c2>
   1876e:	686e      	ldr	r6, [r5, #4]
   18770:	68af      	ldr	r7, [r5, #8]
   18772:	4437      	add	r7, r6
   18774:	42be      	cmp	r6, r7
   18776:	f4be abcb 	bcs.w	16f10 <d_print_comp_inner+0x19c>
   1877a:	f04f 0800 	mov.w	r8, #0
   1877e:	e00d      	b.n	1879c <d_print_comp_inner+0x1a28>
   18780:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18784:	29ff      	cmp	r1, #255	; 0xff
   18786:	d036      	beq.n	187f6 <d_print_comp_inner+0x1a82>
   18788:	1c4b      	adds	r3, r1, #1
   1878a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1878e:	5465      	strb	r5, [r4, r1]
   18790:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18794:	3601      	adds	r6, #1
   18796:	42b7      	cmp	r7, r6
   18798:	f67e abba 	bls.w	16f10 <d_print_comp_inner+0x19c>
   1879c:	1bbb      	subs	r3, r7, r6
   1879e:	2b03      	cmp	r3, #3
   187a0:	7835      	ldrb	r5, [r6, #0]
   187a2:	dded      	ble.n	18780 <d_print_comp_inner+0x1a0c>
   187a4:	2d5f      	cmp	r5, #95	; 0x5f
   187a6:	d1eb      	bne.n	18780 <d_print_comp_inner+0x1a0c>
   187a8:	7873      	ldrb	r3, [r6, #1]
   187aa:	2b5f      	cmp	r3, #95	; 0x5f
   187ac:	d1e8      	bne.n	18780 <d_print_comp_inner+0x1a0c>
   187ae:	78b3      	ldrb	r3, [r6, #2]
   187b0:	2b55      	cmp	r3, #85	; 0x55
   187b2:	d1e5      	bne.n	18780 <d_print_comp_inner+0x1a0c>
   187b4:	1cf3      	adds	r3, r6, #3
   187b6:	429f      	cmp	r7, r3
   187b8:	d9e2      	bls.n	18780 <d_print_comp_inner+0x1a0c>
   187ba:	2000      	movs	r0, #0
   187bc:	e006      	b.n	187cc <d_print_comp_inner+0x1a58>
   187be:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   187c2:	429f      	cmp	r7, r3
   187c4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   187c8:	f000 85c7 	beq.w	1935a <d_print_comp_inner+0x25e6>
   187cc:	4699      	mov	r9, r3
   187ce:	f813 5b01 	ldrb.w	r5, [r3], #1
   187d2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   187d6:	b2d1      	uxtb	r1, r2
   187d8:	2909      	cmp	r1, #9
   187da:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   187de:	d9f0      	bls.n	187c2 <d_print_comp_inner+0x1a4e>
   187e0:	f1be 0f05 	cmp.w	lr, #5
   187e4:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   187e8:	d9e9      	bls.n	187be <d_print_comp_inner+0x1a4a>
   187ea:	2a05      	cmp	r2, #5
   187ec:	f200 8743 	bhi.w	19676 <d_print_comp_inner+0x2902>
   187f0:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   187f4:	e7e5      	b.n	187c2 <d_print_comp_inner+0x1a4e>
   187f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   187fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   187fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18802:	4620      	mov	r0, r4
   18804:	4798      	blx	r3
   18806:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1880a:	3301      	adds	r3, #1
   1880c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18810:	2100      	movs	r1, #0
   18812:	2301      	movs	r3, #1
   18814:	e7b9      	b.n	1878a <d_print_comp_inner+0x1a16>
   18816:	4d04      	ldr	r5, [pc, #16]	; (18828 <d_print_comp_inner+0x1ab4>)
   18818:	4698      	mov	r8, r3
   1881a:	1daf      	adds	r7, r5, #6
   1881c:	e010      	b.n	18840 <d_print_comp_inner+0x1acc>
   1881e:	bf00      	nop
   18820:	00024468 	.word	0x00024468
   18824:	000245dc 	.word	0x000245dc
   18828:	0002463c 	.word	0x0002463c
   1882c:	460b      	mov	r3, r1
   1882e:	3101      	adds	r1, #1
   18830:	42bd      	cmp	r5, r7
   18832:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18836:	54e6      	strb	r6, [r4, r3]
   18838:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1883c:	f43e ab68 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18840:	29ff      	cmp	r1, #255	; 0xff
   18842:	f815 6b01 	ldrb.w	r6, [r5], #1
   18846:	d1f1      	bne.n	1882c <d_print_comp_inner+0x1ab8>
   18848:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1884c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18850:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18854:	4620      	mov	r0, r4
   18856:	4798      	blx	r3
   18858:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1885c:	3301      	adds	r3, #1
   1885e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18862:	2101      	movs	r1, #1
   18864:	2300      	movs	r3, #0
   18866:	e7e3      	b.n	18830 <d_print_comp_inner+0x1abc>
   18868:	782b      	ldrb	r3, [r5, #0]
   1886a:	2b2f      	cmp	r3, #47	; 0x2f
   1886c:	f47e ab6a 	bne.w	16f44 <d_print_comp_inner+0x1d0>
   18870:	4601      	mov	r1, r0
   18872:	460d      	mov	r5, r1
   18874:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18878:	f7fe bb66 	b.w	16f48 <d_print_comp_inner+0x1d4>
   1887c:	4dd7      	ldr	r5, [pc, #860]	; (18bdc <d_print_comp_inner+0x1e68>)
   1887e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18882:	f105 0804 	add.w	r8, r5, #4
   18886:	e009      	b.n	1889c <d_print_comp_inner+0x1b28>
   18888:	460b      	mov	r3, r1
   1888a:	3101      	adds	r1, #1
   1888c:	45a8      	cmp	r8, r5
   1888e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18892:	54e6      	strb	r6, [r4, r3]
   18894:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18898:	f43e ab3a 	beq.w	16f10 <d_print_comp_inner+0x19c>
   1889c:	29ff      	cmp	r1, #255	; 0xff
   1889e:	f815 6b01 	ldrb.w	r6, [r5], #1
   188a2:	d1f1      	bne.n	18888 <d_print_comp_inner+0x1b14>
   188a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188a8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   188ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188b0:	4620      	mov	r0, r4
   188b2:	4798      	blx	r3
   188b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   188b8:	3301      	adds	r3, #1
   188ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   188be:	2101      	movs	r1, #1
   188c0:	2300      	movs	r3, #0
   188c2:	e7e3      	b.n	1888c <d_print_comp_inner+0x1b18>
   188c4:	4ec6      	ldr	r6, [pc, #792]	; (18be0 <d_print_comp_inner+0x1e6c>)
   188c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   188ca:	f106 0905 	add.w	r9, r6, #5
   188ce:	f04f 0800 	mov.w	r8, #0
   188d2:	e008      	b.n	188e6 <d_print_comp_inner+0x1b72>
   188d4:	460b      	mov	r3, r1
   188d6:	3101      	adds	r1, #1
   188d8:	45b1      	cmp	r9, r6
   188da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   188de:	54e7      	strb	r7, [r4, r3]
   188e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   188e4:	d013      	beq.n	1890e <d_print_comp_inner+0x1b9a>
   188e6:	29ff      	cmp	r1, #255	; 0xff
   188e8:	f816 7b01 	ldrb.w	r7, [r6], #1
   188ec:	d1f2      	bne.n	188d4 <d_print_comp_inner+0x1b60>
   188ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   188f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188fa:	4620      	mov	r0, r4
   188fc:	4798      	blx	r3
   188fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18902:	3301      	adds	r3, #1
   18904:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18908:	2101      	movs	r1, #1
   1890a:	2300      	movs	r3, #0
   1890c:	e7e4      	b.n	188d8 <d_print_comp_inner+0x1b64>
   1890e:	686a      	ldr	r2, [r5, #4]
   18910:	49b4      	ldr	r1, [pc, #720]	; (18be4 <d_print_comp_inner+0x1e70>)
   18912:	3201      	adds	r2, #1
   18914:	a804      	add	r0, sp, #16
   18916:	f006 f8c9 	bl	1eaac <sprintf>
   1891a:	a804      	add	r0, sp, #16
   1891c:	f006 fa70 	bl	1ee00 <strlen>
   18920:	2800      	cmp	r0, #0
   18922:	f43e aaf5 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18926:	ad04      	add	r5, sp, #16
   18928:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1892c:	182f      	adds	r7, r5, r0
   1892e:	f04f 0800 	mov.w	r8, #0
   18932:	e009      	b.n	18948 <d_print_comp_inner+0x1bd4>
   18934:	460b      	mov	r3, r1
   18936:	3101      	adds	r1, #1
   18938:	42af      	cmp	r7, r5
   1893a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1893e:	54e6      	strb	r6, [r4, r3]
   18940:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18944:	f43e aae4 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18948:	29ff      	cmp	r1, #255	; 0xff
   1894a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1894e:	d1f1      	bne.n	18934 <d_print_comp_inner+0x1bc0>
   18950:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18954:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18958:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1895c:	4620      	mov	r0, r4
   1895e:	4798      	blx	r3
   18960:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18964:	3301      	adds	r3, #1
   18966:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1896a:	2101      	movs	r1, #1
   1896c:	2300      	movs	r3, #0
   1896e:	e7e3      	b.n	18938 <d_print_comp_inner+0x1bc4>
   18970:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   18974:	f105 0208 	add.w	r2, r5, #8
   18978:	4641      	mov	r1, r8
   1897a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1897e:	f001 fc91 	bl	1a2a4 <d_print_function_type.isra.11>
   18982:	686a      	ldr	r2, [r5, #4]
   18984:	2a00      	cmp	r2, #0
   18986:	f43e aac3 	beq.w	16f10 <d_print_comp_inner+0x19c>
   1898a:	4641      	mov	r1, r8
   1898c:	4620      	mov	r0, r4
   1898e:	f000 ff95 	bl	198bc <d_print_comp>
   18992:	f7fe babd 	b.w	16f10 <d_print_comp_inner+0x19c>
   18996:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1899a:	f7ff b9a2 	b.w	17ce2 <d_print_comp_inner+0xf6e>
   1899e:	4e92      	ldr	r6, [pc, #584]	; (18be8 <d_print_comp_inner+0x1e74>)
   189a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   189a4:	f106 0a05 	add.w	sl, r6, #5
   189a8:	f04f 0900 	mov.w	r9, #0
   189ac:	e009      	b.n	189c2 <d_print_comp_inner+0x1c4e>
   189ae:	460b      	mov	r3, r1
   189b0:	3101      	adds	r1, #1
   189b2:	45b2      	cmp	sl, r6
   189b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   189b8:	54e7      	strb	r7, [r4, r3]
   189ba:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   189be:	f43f a97a 	beq.w	17cb6 <d_print_comp_inner+0xf42>
   189c2:	29ff      	cmp	r1, #255	; 0xff
   189c4:	f816 7b01 	ldrb.w	r7, [r6], #1
   189c8:	d1f1      	bne.n	189ae <d_print_comp_inner+0x1c3a>
   189ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   189d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189d6:	4620      	mov	r0, r4
   189d8:	4798      	blx	r3
   189da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189de:	3301      	adds	r3, #1
   189e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189e4:	2101      	movs	r1, #1
   189e6:	2300      	movs	r3, #0
   189e8:	e7e3      	b.n	189b2 <d_print_comp_inner+0x1c3e>
   189ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
   189ee:	497f      	ldr	r1, [pc, #508]	; (18bec <d_print_comp_inner+0x1e78>)
   189f0:	681f      	ldr	r7, [r3, #0]
   189f2:	4638      	mov	r0, r7
   189f4:	f006 f888 	bl	1eb08 <strcmp>
   189f8:	f896 a000 	ldrb.w	sl, [r6]
   189fc:	b918      	cbnz	r0, 18a06 <d_print_comp_inner+0x1c92>
   189fe:	f1ba 0f03 	cmp.w	sl, #3
   18a02:	f000 851b 	beq.w	1943c <d_print_comp_inner+0x26c8>
   18a06:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   18a0a:	f000 85fd 	beq.w	19608 <d_print_comp_inner+0x2894>
   18a0e:	4978      	ldr	r1, [pc, #480]	; (18bf0 <d_print_comp_inner+0x1e7c>)
   18a10:	4638      	mov	r0, r7
   18a12:	f006 f879 	bl	1eb08 <strcmp>
   18a16:	4605      	mov	r5, r0
   18a18:	2800      	cmp	r0, #0
   18a1a:	f000 8135 	beq.w	18c88 <d_print_comp_inner+0x1f14>
   18a1e:	4975      	ldr	r1, [pc, #468]	; (18bf4 <d_print_comp_inner+0x1e80>)
   18a20:	4638      	mov	r0, r7
   18a22:	f006 f871 	bl	1eb08 <strcmp>
   18a26:	2800      	cmp	r0, #0
   18a28:	f000 82b6 	beq.w	18f98 <d_print_comp_inner+0x2224>
   18a2c:	464a      	mov	r2, r9
   18a2e:	4641      	mov	r1, r8
   18a30:	4620      	mov	r0, r4
   18a32:	f001 fd2b 	bl	1a48c <d_print_expr_op>
   18a36:	2f00      	cmp	r7, #0
   18a38:	f43f a837 	beq.w	17aaa <d_print_comp_inner+0xd36>
   18a3c:	496e      	ldr	r1, [pc, #440]	; (18bf8 <d_print_comp_inner+0x1e84>)
   18a3e:	4638      	mov	r0, r7
   18a40:	f006 f862 	bl	1eb08 <strcmp>
   18a44:	2800      	cmp	r0, #0
   18a46:	f000 8384 	beq.w	19152 <d_print_comp_inner+0x23de>
   18a4a:	4638      	mov	r0, r7
   18a4c:	496b      	ldr	r1, [pc, #428]	; (18bfc <d_print_comp_inner+0x1e88>)
   18a4e:	f006 f85b 	bl	1eb08 <strcmp>
   18a52:	4605      	mov	r5, r0
   18a54:	2800      	cmp	r0, #0
   18a56:	f47f a828 	bne.w	17aaa <d_print_comp_inner+0xd36>
   18a5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18a5e:	2bff      	cmp	r3, #255	; 0xff
   18a60:	f000 84db 	beq.w	1941a <d_print_comp_inner+0x26a6>
   18a64:	1c58      	adds	r0, r3, #1
   18a66:	2528      	movs	r5, #40	; 0x28
   18a68:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   18a6c:	4641      	mov	r1, r8
   18a6e:	54e5      	strb	r5, [r4, r3]
   18a70:	4632      	mov	r2, r6
   18a72:	4620      	mov	r0, r4
   18a74:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18a78:	f000 ff20 	bl	198bc <d_print_comp>
   18a7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a80:	29ff      	cmp	r1, #255	; 0xff
   18a82:	f000 846d 	beq.w	19360 <d_print_comp_inner+0x25ec>
   18a86:	2329      	movs	r3, #41	; 0x29
   18a88:	1c4a      	adds	r2, r1, #1
   18a8a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a8e:	5463      	strb	r3, [r4, r1]
   18a90:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a94:	f7fe ba3c 	b.w	16f10 <d_print_comp_inner+0x19c>
   18a98:	f10d 0910 	add.w	r9, sp, #16
   18a9c:	685a      	ldr	r2, [r3, #4]
   18a9e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   18aa2:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18aa6:	4641      	mov	r1, r8
   18aa8:	4620      	mov	r0, r4
   18aaa:	9204      	str	r2, [sp, #16]
   18aac:	9305      	str	r3, [sp, #20]
   18aae:	f7fe f961 	bl	16d74 <d_print_comp_inner>
   18ab2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18ab6:	9a05      	ldr	r2, [sp, #20]
   18ab8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18abc:	b113      	cbz	r3, 18ac4 <d_print_comp_inner+0x1d50>
   18abe:	9b02      	ldr	r3, [sp, #8]
   18ac0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18ac4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18ac8:	2b3c      	cmp	r3, #60	; 0x3c
   18aca:	f000 83d9 	beq.w	19280 <d_print_comp_inner+0x250c>
   18ace:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ad2:	29ff      	cmp	r1, #255	; 0xff
   18ad4:	f000 8467 	beq.w	193a6 <d_print_comp_inner+0x2632>
   18ad8:	1c4a      	adds	r2, r1, #1
   18ada:	233c      	movs	r3, #60	; 0x3c
   18adc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ae0:	5463      	strb	r3, [r4, r1]
   18ae2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ae6:	686b      	ldr	r3, [r5, #4]
   18ae8:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18aec:	689b      	ldr	r3, [r3, #8]
   18aee:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18af2:	461a      	mov	r2, r3
   18af4:	4641      	mov	r1, r8
   18af6:	4620      	mov	r0, r4
   18af8:	9304      	str	r3, [sp, #16]
   18afa:	9505      	str	r5, [sp, #20]
   18afc:	f7fe f93a 	bl	16d74 <d_print_comp_inner>
   18b00:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18b04:	9a05      	ldr	r2, [sp, #20]
   18b06:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18b0a:	2b3e      	cmp	r3, #62	; 0x3e
   18b0c:	f000 83ab 	beq.w	19266 <d_print_comp_inner+0x24f2>
   18b10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b14:	29ff      	cmp	r1, #255	; 0xff
   18b16:	f000 849a 	beq.w	1944e <d_print_comp_inner+0x26da>
   18b1a:	233e      	movs	r3, #62	; 0x3e
   18b1c:	1c4a      	adds	r2, r1, #1
   18b1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b22:	5463      	strb	r3, [r4, r1]
   18b24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b28:	f7fe b9f2 	b.w	16f10 <d_print_comp_inner+0x19c>
   18b2c:	6852      	ldr	r2, [r2, #4]
   18b2e:	7c16      	ldrb	r6, [r2, #16]
   18b30:	2e00      	cmp	r6, #0
   18b32:	f43f a9e7 	beq.w	17f04 <d_print_comp_inner+0x1190>
   18b36:	2e06      	cmp	r6, #6
   18b38:	f240 8337 	bls.w	191aa <d_print_comp_inner+0x2436>
   18b3c:	2e07      	cmp	r6, #7
   18b3e:	f47f a9e1 	bne.w	17f04 <d_print_comp_inner+0x1190>
   18b42:	68aa      	ldr	r2, [r5, #8]
   18b44:	7811      	ldrb	r1, [r2, #0]
   18b46:	2900      	cmp	r1, #0
   18b48:	f47f a9dc 	bne.w	17f04 <d_print_comp_inner+0x1190>
   18b4c:	6891      	ldr	r1, [r2, #8]
   18b4e:	2901      	cmp	r1, #1
   18b50:	f47f a9d8 	bne.w	17f04 <d_print_comp_inner+0x1190>
   18b54:	2b3c      	cmp	r3, #60	; 0x3c
   18b56:	f47f a9d5 	bne.w	17f04 <d_print_comp_inner+0x1190>
   18b5a:	6853      	ldr	r3, [r2, #4]
   18b5c:	781b      	ldrb	r3, [r3, #0]
   18b5e:	2b30      	cmp	r3, #48	; 0x30
   18b60:	f000 8626 	beq.w	197b0 <d_print_comp_inner+0x2a3c>
   18b64:	2b31      	cmp	r3, #49	; 0x31
   18b66:	f47f a9cd 	bne.w	17f04 <d_print_comp_inner+0x1190>
   18b6a:	2204      	movs	r2, #4
   18b6c:	4924      	ldr	r1, [pc, #144]	; (18c00 <d_print_comp_inner+0x1e8c>)
   18b6e:	f7fb fe2d 	bl	147cc <d_append_buffer>
   18b72:	f7fe b9cd 	b.w	16f10 <d_print_comp_inner+0x19c>
   18b76:	4e23      	ldr	r6, [pc, #140]	; (18c04 <d_print_comp_inner+0x1e90>)
   18b78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b7c:	f106 0a02 	add.w	sl, r6, #2
   18b80:	e009      	b.n	18b96 <d_print_comp_inner+0x1e22>
   18b82:	460b      	mov	r3, r1
   18b84:	3101      	adds	r1, #1
   18b86:	45b2      	cmp	sl, r6
   18b88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18b8c:	54e7      	strb	r7, [r4, r3]
   18b8e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18b92:	f43e ad52 	beq.w	1763a <d_print_comp_inner+0x8c6>
   18b96:	29ff      	cmp	r1, #255	; 0xff
   18b98:	f816 7b01 	ldrb.w	r7, [r6], #1
   18b9c:	d1f1      	bne.n	18b82 <d_print_comp_inner+0x1e0e>
   18b9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ba2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18ba6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18baa:	4620      	mov	r0, r4
   18bac:	4798      	blx	r3
   18bae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bb2:	3301      	adds	r3, #1
   18bb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bb8:	2101      	movs	r1, #1
   18bba:	2300      	movs	r3, #0
   18bbc:	e7e3      	b.n	18b86 <d_print_comp_inner+0x1e12>
   18bbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18bc2:	29ff      	cmp	r1, #255	; 0xff
   18bc4:	f000 84e4 	beq.w	19590 <d_print_comp_inner+0x281c>
   18bc8:	2220      	movs	r2, #32
   18bca:	1c4b      	adds	r3, r1, #1
   18bcc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18bd0:	5462      	strb	r2, [r4, r1]
   18bd2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18bd6:	f7fe bdbb 	b.w	17750 <d_print_comp_inner+0x9dc>
   18bda:	bf00      	nop
   18bdc:	000246b4 	.word	0x000246b4
   18be0:	000244dc 	.word	0x000244dc
   18be4:	00024468 	.word	0x00024468
   18be8:	0002462c 	.word	0x0002462c
   18bec:	00024660 	.word	0x00024660
   18bf0:	00024730 	.word	0x00024730
   18bf4:	0002446c 	.word	0x0002446c
   18bf8:	00024664 	.word	0x00024664
   18bfc:	00024970 	.word	0x00024970
   18c00:	00024690 	.word	0x00024690
   18c04:	000244b8 	.word	0x000244b8
   18c08:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c0c:	29ff      	cmp	r1, #255	; 0xff
   18c0e:	f000 8465 	beq.w	194dc <d_print_comp_inner+0x2768>
   18c12:	2220      	movs	r2, #32
   18c14:	1c4b      	adds	r3, r1, #1
   18c16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18c1a:	5462      	strb	r2, [r4, r1]
   18c1c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18c20:	f7fe bd80 	b.w	17724 <d_print_comp_inner+0x9b0>
   18c24:	2700      	movs	r7, #0
   18c26:	55a7      	strb	r7, [r4, r6]
   18c28:	4631      	mov	r1, r6
   18c2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c32:	4620      	mov	r0, r4
   18c34:	4798      	blx	r3
   18c36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c3a:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18c3e:	3301      	adds	r3, #1
   18c40:	463e      	mov	r6, r7
   18c42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c46:	f7fe be31 	b.w	178ac <d_print_comp_inner+0xb38>
   18c4a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c4e:	29ff      	cmp	r1, #255	; 0xff
   18c50:	f000 8465 	beq.w	1951e <d_print_comp_inner+0x27aa>
   18c54:	1c4a      	adds	r2, r1, #1
   18c56:	235b      	movs	r3, #91	; 0x5b
   18c58:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18c5c:	5463      	strb	r3, [r4, r1]
   18c5e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18c62:	4641      	mov	r1, r8
   18c64:	68aa      	ldr	r2, [r5, #8]
   18c66:	4620      	mov	r0, r4
   18c68:	f000 fe28 	bl	198bc <d_print_comp>
   18c6c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c70:	29ff      	cmp	r1, #255	; 0xff
   18c72:	f000 8312 	beq.w	1929a <d_print_comp_inner+0x2526>
   18c76:	235d      	movs	r3, #93	; 0x5d
   18c78:	1c4a      	adds	r2, r1, #1
   18c7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18c7e:	5463      	strb	r3, [r4, r1]
   18c80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18c84:	f7fe b944 	b.w	16f10 <d_print_comp_inner+0x19c>
   18c88:	4631      	mov	r1, r6
   18c8a:	4620      	mov	r0, r4
   18c8c:	f7fb ffca 	bl	14c24 <d_find_pack>
   18c90:	b928      	cbnz	r0, 18c9e <d_print_comp_inner+0x1f2a>
   18c92:	e007      	b.n	18ca4 <d_print_comp_inner+0x1f30>
   18c94:	6843      	ldr	r3, [r0, #4]
   18c96:	b12b      	cbz	r3, 18ca4 <d_print_comp_inner+0x1f30>
   18c98:	6880      	ldr	r0, [r0, #8]
   18c9a:	3501      	adds	r5, #1
   18c9c:	b110      	cbz	r0, 18ca4 <d_print_comp_inner+0x1f30>
   18c9e:	7803      	ldrb	r3, [r0, #0]
   18ca0:	2b2f      	cmp	r3, #47	; 0x2f
   18ca2:	d0f7      	beq.n	18c94 <d_print_comp_inner+0x1f20>
   18ca4:	462a      	mov	r2, r5
   18ca6:	a804      	add	r0, sp, #16
   18ca8:	49d4      	ldr	r1, [pc, #848]	; (18ffc <d_print_comp_inner+0x2288>)
   18caa:	f005 feff 	bl	1eaac <sprintf>
   18cae:	a804      	add	r0, sp, #16
   18cb0:	f006 f8a6 	bl	1ee00 <strlen>
   18cb4:	2800      	cmp	r0, #0
   18cb6:	f43e a92b 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18cba:	ad04      	add	r5, sp, #16
   18cbc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18cc0:	182f      	adds	r7, r5, r0
   18cc2:	f04f 0800 	mov.w	r8, #0
   18cc6:	e009      	b.n	18cdc <d_print_comp_inner+0x1f68>
   18cc8:	460b      	mov	r3, r1
   18cca:	3101      	adds	r1, #1
   18ccc:	42bd      	cmp	r5, r7
   18cce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18cd2:	54e6      	strb	r6, [r4, r3]
   18cd4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18cd8:	f43e a91a 	beq.w	16f10 <d_print_comp_inner+0x19c>
   18cdc:	29ff      	cmp	r1, #255	; 0xff
   18cde:	f815 6b01 	ldrb.w	r6, [r5], #1
   18ce2:	d1f1      	bne.n	18cc8 <d_print_comp_inner+0x1f54>
   18ce4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ce8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18cec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18cf0:	4620      	mov	r0, r4
   18cf2:	4798      	blx	r3
   18cf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cf8:	3301      	adds	r3, #1
   18cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cfe:	2101      	movs	r1, #1
   18d00:	2300      	movs	r3, #0
   18d02:	e7e3      	b.n	18ccc <d_print_comp_inner+0x1f58>
   18d04:	686a      	ldr	r2, [r5, #4]
   18d06:	4641      	mov	r1, r8
   18d08:	4620      	mov	r0, r4
   18d0a:	f000 fdd7 	bl	198bc <d_print_comp>
   18d0e:	f7fe b8ff 	b.w	16f10 <d_print_comp_inner+0x19c>
   18d12:	29ff      	cmp	r1, #255	; 0xff
   18d14:	f000 83d2 	beq.w	194bc <d_print_comp_inner+0x2748>
   18d18:	232d      	movs	r3, #45	; 0x2d
   18d1a:	1c4a      	adds	r2, r1, #1
   18d1c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d20:	5463      	strb	r3, [r4, r1]
   18d22:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d26:	f7ff b90e 	b.w	17f46 <d_print_comp_inner+0x11d2>
   18d2a:	2500      	movs	r5, #0
   18d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d34:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d38:	4620      	mov	r0, r4
   18d3a:	4798      	blx	r3
   18d3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d40:	3301      	adds	r3, #1
   18d42:	4629      	mov	r1, r5
   18d44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d48:	2201      	movs	r2, #1
   18d4a:	f7ff bbeb 	b.w	18524 <d_print_comp_inner+0x17b0>
   18d4e:	2500      	movs	r5, #0
   18d50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d58:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d5c:	4620      	mov	r0, r4
   18d5e:	4798      	blx	r3
   18d60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d64:	3301      	adds	r3, #1
   18d66:	4629      	mov	r1, r5
   18d68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d6c:	2201      	movs	r2, #1
   18d6e:	f7ff ba8f 	b.w	18290 <d_print_comp_inner+0x151c>
   18d72:	2600      	movs	r6, #0
   18d74:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18d78:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18d7c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18d80:	4798      	blx	r3
   18d82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d86:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18d8a:	3301      	adds	r3, #1
   18d8c:	4631      	mov	r1, r6
   18d8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d92:	f7fe bd43 	b.w	1781c <d_print_comp_inner+0xaa8>
   18d96:	2600      	movs	r6, #0
   18d98:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18d9c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18da0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18da4:	4798      	blx	r3
   18da6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18daa:	3301      	adds	r3, #1
   18dac:	4631      	mov	r1, r6
   18dae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18db2:	2201      	movs	r2, #1
   18db4:	f7fe bb74 	b.w	174a0 <d_print_comp_inner+0x72c>
   18db8:	2500      	movs	r5, #0
   18dba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18dbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18dc2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18dc6:	4620      	mov	r0, r4
   18dc8:	4798      	blx	r3
   18dca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18dce:	3301      	adds	r3, #1
   18dd0:	4629      	mov	r1, r5
   18dd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18dd6:	2201      	movs	r2, #1
   18dd8:	f7ff bae4 	b.w	183a4 <d_print_comp_inner+0x1630>
   18ddc:	220d      	movs	r2, #13
   18dde:	4988      	ldr	r1, [pc, #544]	; (19000 <d_print_comp_inner+0x228c>)
   18de0:	4620      	mov	r0, r4
   18de2:	f7fb fcf3 	bl	147cc <d_append_buffer>
   18de6:	68a9      	ldr	r1, [r5, #8]
   18de8:	4620      	mov	r0, r4
   18dea:	3101      	adds	r1, #1
   18dec:	f7fb ff9e 	bl	14d2c <d_append_num>
   18df0:	2203      	movs	r2, #3
   18df2:	4984      	ldr	r1, [pc, #528]	; (19004 <d_print_comp_inner+0x2290>)
   18df4:	4620      	mov	r0, r4
   18df6:	f7fb fce9 	bl	147cc <d_append_buffer>
   18dfa:	686d      	ldr	r5, [r5, #4]
   18dfc:	f7fe bc22 	b.w	17644 <d_print_comp_inner+0x8d0>
   18e00:	2500      	movs	r5, #0
   18e02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e0a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e0e:	4620      	mov	r0, r4
   18e10:	4798      	blx	r3
   18e12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e16:	3301      	adds	r3, #1
   18e18:	4629      	mov	r1, r5
   18e1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e1e:	2201      	movs	r2, #1
   18e20:	f7fe be08 	b.w	17a34 <d_print_comp_inner+0xcc0>
   18e24:	2301      	movs	r3, #1
   18e26:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18e2a:	f7fe b871 	b.w	16f10 <d_print_comp_inner+0x19c>
   18e2e:	2500      	movs	r5, #0
   18e30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e38:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e3c:	4620      	mov	r0, r4
   18e3e:	4798      	blx	r3
   18e40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e44:	3301      	adds	r3, #1
   18e46:	4629      	mov	r1, r5
   18e48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e4c:	2201      	movs	r2, #1
   18e4e:	f7ff ba8f 	b.w	18370 <d_print_comp_inner+0x15fc>
   18e52:	2500      	movs	r5, #0
   18e54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e5c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e60:	4620      	mov	r0, r4
   18e62:	4798      	blx	r3
   18e64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e68:	3301      	adds	r3, #1
   18e6a:	4629      	mov	r1, r5
   18e6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e70:	2201      	movs	r2, #1
   18e72:	f7ff bbc5 	b.w	18600 <d_print_comp_inner+0x188c>
   18e76:	a914      	add	r1, sp, #80	; 0x50
   18e78:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18e7c:	f841 0d40 	str.w	r0, [r1, #-64]!
   18e80:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18e84:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18e88:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18e8c:	4620      	mov	r0, r4
   18e8e:	4641      	mov	r1, r8
   18e90:	9306      	str	r3, [sp, #24]
   18e92:	9607      	str	r6, [sp, #28]
   18e94:	9505      	str	r5, [sp, #20]
   18e96:	f000 fd11 	bl	198bc <d_print_comp>
   18e9a:	9e06      	ldr	r6, [sp, #24]
   18e9c:	9b04      	ldr	r3, [sp, #16]
   18e9e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18ea2:	2e00      	cmp	r6, #0
   18ea4:	f47e a834 	bne.w	16f10 <d_print_comp_inner+0x19c>
   18ea8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18eac:	29ff      	cmp	r1, #255	; 0xff
   18eae:	f000 8409 	beq.w	196c4 <d_print_comp_inner+0x2950>
   18eb2:	2320      	movs	r3, #32
   18eb4:	1c4a      	adds	r2, r1, #1
   18eb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18eba:	5463      	strb	r3, [r4, r1]
   18ebc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ec0:	f7fe be0b 	b.w	17ada <d_print_comp_inner+0xd66>
   18ec4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18ec8:	2b00      	cmp	r3, #0
   18eca:	f6fe abff 	blt.w	176cc <d_print_comp_inner+0x958>
   18ece:	2b00      	cmp	r3, #0
   18ed0:	f000 829d 	beq.w	1940e <d_print_comp_inner+0x269a>
   18ed4:	6880      	ldr	r0, [r0, #8]
   18ed6:	3b01      	subs	r3, #1
   18ed8:	2800      	cmp	r0, #0
   18eda:	f43e a82d 	beq.w	16f38 <d_print_comp_inner+0x1c4>
   18ede:	7802      	ldrb	r2, [r0, #0]
   18ee0:	2a2f      	cmp	r2, #47	; 0x2f
   18ee2:	d0f4      	beq.n	18ece <d_print_comp_inner+0x215a>
   18ee4:	f7fe b828 	b.w	16f38 <d_print_comp_inner+0x1c4>
   18ee8:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18eec:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18ef0:	f1be 0f00 	cmp.w	lr, #0
   18ef4:	dd14      	ble.n	18f20 <d_print_comp_inner+0x21ac>
   18ef6:	6813      	ldr	r3, [r2, #0]
   18ef8:	4299      	cmp	r1, r3
   18efa:	f000 83f5 	beq.w	196e8 <d_print_comp_inner+0x2974>
   18efe:	f102 0008 	add.w	r0, r2, #8
   18f02:	463b      	mov	r3, r7
   18f04:	46a4      	mov	ip, r4
   18f06:	e004      	b.n	18f12 <d_print_comp_inner+0x219e>
   18f08:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18f0c:	42a1      	cmp	r1, r4
   18f0e:	f000 81d4 	beq.w	192ba <d_print_comp_inner+0x2546>
   18f12:	3301      	adds	r3, #1
   18f14:	459e      	cmp	lr, r3
   18f16:	4681      	mov	r9, r0
   18f18:	f100 0008 	add.w	r0, r0, #8
   18f1c:	d1f4      	bne.n	18f08 <d_print_comp_inner+0x2194>
   18f1e:	4664      	mov	r4, ip
   18f20:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18f24:	459e      	cmp	lr, r3
   18f26:	f280 84b9 	bge.w	1989c <d_print_comp_inner+0x2b28>
   18f2a:	f10e 0301 	add.w	r3, lr, #1
   18f2e:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18f32:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18f36:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18f3a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18f3e:	3004      	adds	r0, #4
   18f40:	468e      	mov	lr, r1
   18f42:	2a00      	cmp	r2, #0
   18f44:	f000 848d 	beq.w	19862 <d_print_comp_inner+0x2aee>
   18f48:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18f4c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   18f50:	428b      	cmp	r3, r1
   18f52:	f103 0c01 	add.w	ip, r3, #1
   18f56:	f280 84a1 	bge.w	1989c <d_print_comp_inner+0x2b28>
   18f5a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   18f5e:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   18f62:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18f66:	6851      	ldr	r1, [r2, #4]
   18f68:	6059      	str	r1, [r3, #4]
   18f6a:	6003      	str	r3, [r0, #0]
   18f6c:	6812      	ldr	r2, [r2, #0]
   18f6e:	4618      	mov	r0, r3
   18f70:	e7e7      	b.n	18f42 <d_print_comp_inner+0x21ce>
   18f72:	2500      	movs	r5, #0
   18f74:	4619      	mov	r1, r3
   18f76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f7a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f7e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18f82:	4620      	mov	r0, r4
   18f84:	4798      	blx	r3
   18f86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f8a:	1c5a      	adds	r2, r3, #1
   18f8c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18f90:	462b      	mov	r3, r5
   18f92:	2201      	movs	r2, #1
   18f94:	f7fe bd3d 	b.w	17a12 <d_print_comp_inner+0xc9e>
   18f98:	2e00      	cmp	r6, #0
   18f9a:	f000 844d 	beq.w	19838 <d_print_comp_inner+0x2ac4>
   18f9e:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   18fa2:	f040 8488 	bne.w	198b6 <d_print_comp_inner+0x2b42>
   18fa6:	6873      	ldr	r3, [r6, #4]
   18fa8:	b373      	cbz	r3, 19008 <d_print_comp_inner+0x2294>
   18faa:	4607      	mov	r7, r0
   18fac:	e007      	b.n	18fbe <d_print_comp_inner+0x224a>
   18fae:	3701      	adds	r7, #1
   18fb0:	68b6      	ldr	r6, [r6, #8]
   18fb2:	b356      	cbz	r6, 1900a <d_print_comp_inner+0x2296>
   18fb4:	7833      	ldrb	r3, [r6, #0]
   18fb6:	2b2f      	cmp	r3, #47	; 0x2f
   18fb8:	d127      	bne.n	1900a <d_print_comp_inner+0x2296>
   18fba:	6873      	ldr	r3, [r6, #4]
   18fbc:	b32b      	cbz	r3, 1900a <d_print_comp_inner+0x2296>
   18fbe:	781a      	ldrb	r2, [r3, #0]
   18fc0:	2a4a      	cmp	r2, #74	; 0x4a
   18fc2:	d1f4      	bne.n	18fae <d_print_comp_inner+0x223a>
   18fc4:	6859      	ldr	r1, [r3, #4]
   18fc6:	4620      	mov	r0, r4
   18fc8:	f7fb fe2c 	bl	14c24 <d_find_pack>
   18fcc:	b198      	cbz	r0, 18ff6 <d_print_comp_inner+0x2282>
   18fce:	7803      	ldrb	r3, [r0, #0]
   18fd0:	2b2f      	cmp	r3, #47	; 0x2f
   18fd2:	f040 846c 	bne.w	198ae <d_print_comp_inner+0x2b3a>
   18fd6:	6843      	ldr	r3, [r0, #4]
   18fd8:	2b00      	cmp	r3, #0
   18fda:	f000 8464 	beq.w	198a6 <d_print_comp_inner+0x2b32>
   18fde:	4603      	mov	r3, r0
   18fe0:	2000      	movs	r0, #0
   18fe2:	e004      	b.n	18fee <d_print_comp_inner+0x227a>
   18fe4:	781a      	ldrb	r2, [r3, #0]
   18fe6:	2a2f      	cmp	r2, #47	; 0x2f
   18fe8:	d105      	bne.n	18ff6 <d_print_comp_inner+0x2282>
   18fea:	685a      	ldr	r2, [r3, #4]
   18fec:	b11a      	cbz	r2, 18ff6 <d_print_comp_inner+0x2282>
   18fee:	689b      	ldr	r3, [r3, #8]
   18ff0:	3001      	adds	r0, #1
   18ff2:	2b00      	cmp	r3, #0
   18ff4:	d1f6      	bne.n	18fe4 <d_print_comp_inner+0x2270>
   18ff6:	4407      	add	r7, r0
   18ff8:	e7da      	b.n	18fb0 <d_print_comp_inner+0x223c>
   18ffa:	bf00      	nop
   18ffc:	00024468 	.word	0x00024468
   19000:	000244bc 	.word	0x000244bc
   19004:	000244cc 	.word	0x000244cc
   19008:	461f      	mov	r7, r3
   1900a:	4639      	mov	r1, r7
   1900c:	4620      	mov	r0, r4
   1900e:	f7fb fe8d 	bl	14d2c <d_append_num>
   19012:	f7fd bf7d 	b.w	16f10 <d_print_comp_inner+0x19c>
   19016:	2500      	movs	r5, #0
   19018:	4619      	mov	r1, r3
   1901a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1901e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19022:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19026:	4620      	mov	r0, r4
   19028:	4798      	blx	r3
   1902a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1902e:	1c5a      	adds	r2, r3, #1
   19030:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19034:	462b      	mov	r3, r5
   19036:	2101      	movs	r1, #1
   19038:	f7fe bb8e 	b.w	17758 <d_print_comp_inner+0x9e4>
   1903c:	2600      	movs	r6, #0
   1903e:	4619      	mov	r1, r3
   19040:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19044:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19048:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1904c:	4620      	mov	r0, r4
   1904e:	4798      	blx	r3
   19050:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19054:	1c5a      	adds	r2, r3, #1
   19056:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1905a:	4633      	mov	r3, r6
   1905c:	2101      	movs	r1, #1
   1905e:	f7fe bb65 	b.w	1772c <d_print_comp_inner+0x9b8>
   19062:	2200      	movs	r2, #0
   19064:	4619      	mov	r1, r3
   19066:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1906a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1906e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19072:	4620      	mov	r0, r4
   19074:	4798      	blx	r3
   19076:	2329      	movs	r3, #41	; 0x29
   19078:	7023      	strb	r3, [r4, #0]
   1907a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1907e:	782a      	ldrb	r2, [r5, #0]
   19080:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19084:	2101      	movs	r1, #1
   19086:	3301      	adds	r3, #1
   19088:	2a3d      	cmp	r2, #61	; 0x3d
   1908a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1908e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19092:	f47e af58 	bne.w	17f46 <d_print_comp_inner+0x11d2>
   19096:	e63f      	b.n	18d18 <d_print_comp_inner+0x1fa4>
   19098:	2700      	movs	r7, #0
   1909a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1909e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   190a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190a6:	4620      	mov	r0, r4
   190a8:	4798      	blx	r3
   190aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190ae:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   190b2:	3301      	adds	r3, #1
   190b4:	4639      	mov	r1, r7
   190b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190ba:	f7fe bf28 	b.w	17f0e <d_print_comp_inner+0x119a>
   190be:	2500      	movs	r5, #0
   190c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190c8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   190cc:	4620      	mov	r0, r4
   190ce:	4798      	blx	r3
   190d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190d4:	3301      	adds	r3, #1
   190d6:	4629      	mov	r1, r5
   190d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190dc:	2201      	movs	r2, #1
   190de:	f7ff bb12 	b.w	18706 <d_print_comp_inner+0x1992>
   190e2:	781b      	ldrb	r3, [r3, #0]
   190e4:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   190e8:	2901      	cmp	r1, #1
   190ea:	d903      	bls.n	190f4 <d_print_comp_inner+0x2380>
   190ec:	3b72      	subs	r3, #114	; 0x72
   190ee:	2b01      	cmp	r3, #1
   190f0:	f63d aead 	bhi.w	16e4e <d_print_comp_inner+0xda>
   190f4:	4641      	mov	r1, r8
   190f6:	4620      	mov	r0, r4
   190f8:	f001 f9c8 	bl	1a48c <d_print_expr_op>
   190fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19100:	29ff      	cmp	r1, #255	; 0xff
   19102:	f000 8271 	beq.w	195e8 <d_print_comp_inner+0x2874>
   19106:	1c4a      	adds	r2, r1, #1
   19108:	233c      	movs	r3, #60	; 0x3c
   1910a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1910e:	5463      	strb	r3, [r4, r1]
   19110:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19114:	68ab      	ldr	r3, [r5, #8]
   19116:	4641      	mov	r1, r8
   19118:	685a      	ldr	r2, [r3, #4]
   1911a:	4620      	mov	r0, r4
   1911c:	f000 fbce 	bl	198bc <d_print_comp>
   19120:	2202      	movs	r2, #2
   19122:	49d5      	ldr	r1, [pc, #852]	; (19478 <d_print_comp_inner+0x2704>)
   19124:	4620      	mov	r0, r4
   19126:	f7fb fb51 	bl	147cc <d_append_buffer>
   1912a:	68ab      	ldr	r3, [r5, #8]
   1912c:	4641      	mov	r1, r8
   1912e:	689a      	ldr	r2, [r3, #8]
   19130:	4620      	mov	r0, r4
   19132:	f000 fbc3 	bl	198bc <d_print_comp>
   19136:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1913a:	29ff      	cmp	r1, #255	; 0xff
   1913c:	f000 81df 	beq.w	194fe <d_print_comp_inner+0x278a>
   19140:	2329      	movs	r3, #41	; 0x29
   19142:	1c4a      	adds	r2, r1, #1
   19144:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19148:	5463      	strb	r3, [r4, r1]
   1914a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1914e:	f7fd bedf 	b.w	16f10 <d_print_comp_inner+0x19c>
   19152:	4632      	mov	r2, r6
   19154:	4641      	mov	r1, r8
   19156:	4620      	mov	r0, r4
   19158:	f000 fbb0 	bl	198bc <d_print_comp>
   1915c:	f7fd bed8 	b.w	16f10 <d_print_comp_inner+0x19c>
   19160:	2600      	movs	r6, #0
   19162:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19166:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1916a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1916e:	4620      	mov	r0, r4
   19170:	4798      	blx	r3
   19172:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19176:	3301      	adds	r3, #1
   19178:	4631      	mov	r1, r6
   1917a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1917e:	2201      	movs	r2, #1
   19180:	f7fe ba55 	b.w	1762e <d_print_comp_inner+0x8ba>
   19184:	49bd      	ldr	r1, [pc, #756]	; (1947c <d_print_comp_inner+0x2708>)
   19186:	6870      	ldr	r0, [r6, #4]
   19188:	f005 fea8 	bl	1eedc <strncmp>
   1918c:	2800      	cmp	r0, #0
   1918e:	f47e aabd 	bne.w	1770c <d_print_comp_inner+0x998>
   19192:	68aa      	ldr	r2, [r5, #8]
   19194:	4641      	mov	r1, r8
   19196:	4620      	mov	r0, r4
   19198:	f000 fb90 	bl	198bc <d_print_comp>
   1919c:	2202      	movs	r2, #2
   1919e:	49b8      	ldr	r1, [pc, #736]	; (19480 <d_print_comp_inner+0x270c>)
   191a0:	4620      	mov	r0, r4
   191a2:	f7fb fb13 	bl	147cc <d_append_buffer>
   191a6:	f7fe badd 	b.w	17764 <d_print_comp_inner+0x9f0>
   191aa:	68aa      	ldr	r2, [r5, #8]
   191ac:	7817      	ldrb	r7, [r2, #0]
   191ae:	2f00      	cmp	r7, #0
   191b0:	f47e aea8 	bne.w	17f04 <d_print_comp_inner+0x1190>
   191b4:	2b3d      	cmp	r3, #61	; 0x3d
   191b6:	f000 82ef 	beq.w	19798 <d_print_comp_inner+0x2a24>
   191ba:	68aa      	ldr	r2, [r5, #8]
   191bc:	4641      	mov	r1, r8
   191be:	4620      	mov	r0, r4
   191c0:	3e02      	subs	r6, #2
   191c2:	f000 fb7b 	bl	198bc <d_print_comp>
   191c6:	2e04      	cmp	r6, #4
   191c8:	f63d aea2 	bhi.w	16f10 <d_print_comp_inner+0x19c>
   191cc:	e8df f006 	tbb	[pc, r6]
   191d0:	0a111826 	.word	0x0a111826
   191d4:	03          	.byte	0x03
   191d5:	00          	.byte	0x00
   191d6:	4620      	mov	r0, r4
   191d8:	2203      	movs	r2, #3
   191da:	49aa      	ldr	r1, [pc, #680]	; (19484 <d_print_comp_inner+0x2710>)
   191dc:	f7fb faf6 	bl	147cc <d_append_buffer>
   191e0:	f7fd be96 	b.w	16f10 <d_print_comp_inner+0x19c>
   191e4:	4620      	mov	r0, r4
   191e6:	2202      	movs	r2, #2
   191e8:	49a7      	ldr	r1, [pc, #668]	; (19488 <d_print_comp_inner+0x2714>)
   191ea:	f7fb faef 	bl	147cc <d_append_buffer>
   191ee:	f7fd be8f 	b.w	16f10 <d_print_comp_inner+0x19c>
   191f2:	4620      	mov	r0, r4
   191f4:	2202      	movs	r2, #2
   191f6:	49a5      	ldr	r1, [pc, #660]	; (1948c <d_print_comp_inner+0x2718>)
   191f8:	f7fb fae8 	bl	147cc <d_append_buffer>
   191fc:	f7fd be88 	b.w	16f10 <d_print_comp_inner+0x19c>
   19200:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19204:	29ff      	cmp	r1, #255	; 0xff
   19206:	f000 831a 	beq.w	1983e <d_print_comp_inner+0x2aca>
   1920a:	236c      	movs	r3, #108	; 0x6c
   1920c:	1c4a      	adds	r2, r1, #1
   1920e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19212:	5463      	strb	r3, [r4, r1]
   19214:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19218:	f7fd be7a 	b.w	16f10 <d_print_comp_inner+0x19c>
   1921c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19220:	29ff      	cmp	r1, #255	; 0xff
   19222:	f000 82db 	beq.w	197dc <d_print_comp_inner+0x2a68>
   19226:	2375      	movs	r3, #117	; 0x75
   19228:	1c4a      	adds	r2, r1, #1
   1922a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1922e:	5463      	strb	r3, [r4, r1]
   19230:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19234:	f7fd be6c 	b.w	16f10 <d_print_comp_inner+0x19c>
   19238:	2600      	movs	r6, #0
   1923a:	4619      	mov	r1, r3
   1923c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19240:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19244:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19248:	4620      	mov	r0, r4
   1924a:	4798      	blx	r3
   1924c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19250:	1c5a      	adds	r2, r3, #1
   19252:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19256:	4633      	mov	r3, r6
   19258:	2101      	movs	r1, #1
   1925a:	f7fe bd3c 	b.w	17cd6 <d_print_comp_inner+0xf62>
   1925e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19262:	f7fe bf95 	b.w	18190 <d_print_comp_inner+0x141c>
   19266:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1926a:	29ff      	cmp	r1, #255	; 0xff
   1926c:	f000 8244 	beq.w	196f8 <d_print_comp_inner+0x2984>
   19270:	2320      	movs	r3, #32
   19272:	1c4a      	adds	r2, r1, #1
   19274:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19278:	5463      	strb	r3, [r4, r1]
   1927a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1927e:	e447      	b.n	18b10 <d_print_comp_inner+0x1d9c>
   19280:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19284:	29ff      	cmp	r1, #255	; 0xff
   19286:	f000 826e 	beq.w	19766 <d_print_comp_inner+0x29f2>
   1928a:	2320      	movs	r3, #32
   1928c:	1c4a      	adds	r2, r1, #1
   1928e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19292:	5463      	strb	r3, [r4, r1]
   19294:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19298:	e419      	b.n	18ace <d_print_comp_inner+0x1d5a>
   1929a:	2500      	movs	r5, #0
   1929c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192a0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   192a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192a8:	4620      	mov	r0, r4
   192aa:	4798      	blx	r3
   192ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192b0:	3301      	adds	r3, #1
   192b2:	4629      	mov	r1, r5
   192b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192b8:	e4dd      	b.n	18c76 <d_print_comp_inner+0x1f02>
   192ba:	4664      	mov	r4, ip
   192bc:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   192c0:	b1d8      	cbz	r0, 192fa <d_print_comp_inner+0x2586>
   192c2:	6802      	ldr	r2, [r0, #0]
   192c4:	4291      	cmp	r1, r2
   192c6:	d00a      	beq.n	192de <d_print_comp_inner+0x256a>
   192c8:	4603      	mov	r3, r0
   192ca:	e004      	b.n	192d6 <d_print_comp_inner+0x2562>
   192cc:	685b      	ldr	r3, [r3, #4]
   192ce:	b1a3      	cbz	r3, 192fa <d_print_comp_inner+0x2586>
   192d0:	681a      	ldr	r2, [r3, #0]
   192d2:	4291      	cmp	r1, r2
   192d4:	d003      	beq.n	192de <d_print_comp_inner+0x256a>
   192d6:	4295      	cmp	r5, r2
   192d8:	d1f8      	bne.n	192cc <d_print_comp_inner+0x2558>
   192da:	4298      	cmp	r0, r3
   192dc:	d0f6      	beq.n	192cc <d_print_comp_inner+0x2558>
   192de:	3104      	adds	r1, #4
   192e0:	4620      	mov	r0, r4
   192e2:	f7fb fc83 	bl	14bec <d_lookup_template_argument.isra.6>
   192e6:	2800      	cmp	r0, #0
   192e8:	f43d ae26 	beq.w	16f38 <d_print_comp_inner+0x1c4>
   192ec:	7803      	ldrb	r3, [r0, #0]
   192ee:	2b2f      	cmp	r3, #47	; 0x2f
   192f0:	f43d ae11 	beq.w	16f16 <d_print_comp_inner+0x1a2>
   192f4:	4601      	mov	r1, r0
   192f6:	f7fe bc30 	b.w	17b5a <d_print_comp_inner+0xde6>
   192fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   192fe:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19302:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19306:	3104      	adds	r1, #4
   19308:	4620      	mov	r0, r4
   1930a:	f7fb fc6f 	bl	14bec <d_lookup_template_argument.isra.6>
   1930e:	2800      	cmp	r0, #0
   19310:	f43d ae10 	beq.w	16f34 <d_print_comp_inner+0x1c0>
   19314:	2701      	movs	r7, #1
   19316:	e7e9      	b.n	192ec <d_print_comp_inner+0x2578>
   19318:	2600      	movs	r6, #0
   1931a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1931e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19322:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19326:	4620      	mov	r0, r4
   19328:	4798      	blx	r3
   1932a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1932e:	f8da 5004 	ldr.w	r5, [sl, #4]
   19332:	3301      	adds	r3, #1
   19334:	4631      	mov	r1, r6
   19336:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1933a:	f7ff b85a 	b.w	183f2 <d_print_comp_inner+0x167e>
   1933e:	68aa      	ldr	r2, [r5, #8]
   19340:	4641      	mov	r1, r8
   19342:	4620      	mov	r0, r4
   19344:	f000 faba 	bl	198bc <d_print_comp>
   19348:	9b06      	ldr	r3, [sp, #24]
   1934a:	9a00      	ldr	r2, [sp, #0]
   1934c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19350:	2b00      	cmp	r3, #0
   19352:	f43e ac9d 	beq.w	17c90 <d_print_comp_inner+0xf1c>
   19356:	f7fd bddb 	b.w	16f10 <d_print_comp_inner+0x19c>
   1935a:	255f      	movs	r5, #95	; 0x5f
   1935c:	f7ff ba10 	b.w	18780 <d_print_comp_inner+0x1a0c>
   19360:	2500      	movs	r5, #0
   19362:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19366:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1936a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1936e:	4620      	mov	r0, r4
   19370:	4798      	blx	r3
   19372:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19376:	3301      	adds	r3, #1
   19378:	4629      	mov	r1, r5
   1937a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1937e:	f7ff bb82 	b.w	18a86 <d_print_comp_inner+0x1d12>
   19382:	4648      	mov	r0, r9
   19384:	4942      	ldr	r1, [pc, #264]	; (19490 <d_print_comp_inner+0x271c>)
   19386:	f005 fbbf 	bl	1eb08 <strcmp>
   1938a:	b120      	cbz	r0, 19396 <d_print_comp_inner+0x2622>
   1938c:	463a      	mov	r2, r7
   1938e:	4641      	mov	r1, r8
   19390:	4620      	mov	r0, r4
   19392:	f001 f87b 	bl	1a48c <d_print_expr_op>
   19396:	68ab      	ldr	r3, [r5, #8]
   19398:	4641      	mov	r1, r8
   1939a:	689a      	ldr	r2, [r3, #8]
   1939c:	4620      	mov	r0, r4
   1939e:	f001 f8b3 	bl	1a508 <d_print_subexpr>
   193a2:	f7fd bd9d 	b.w	16ee0 <d_print_comp_inner+0x16c>
   193a6:	2600      	movs	r6, #0
   193a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193ac:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   193b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193b4:	4620      	mov	r0, r4
   193b6:	4798      	blx	r3
   193b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193bc:	3301      	adds	r3, #1
   193be:	4631      	mov	r1, r6
   193c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193c4:	f7ff bb88 	b.w	18ad8 <d_print_comp_inner+0x1d64>
   193c8:	2500      	movs	r5, #0
   193ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193ce:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   193d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193d6:	4620      	mov	r0, r4
   193d8:	4798      	blx	r3
   193da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193de:	3301      	adds	r3, #1
   193e0:	4629      	mov	r1, r5
   193e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193e6:	f7fe bb59 	b.w	17a9c <d_print_comp_inner+0xd28>
   193ea:	2500      	movs	r5, #0
   193ec:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   193f0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   193f4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   193f8:	4798      	blx	r3
   193fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193fe:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19402:	3301      	adds	r3, #1
   19404:	4629      	mov	r1, r5
   19406:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1940a:	f7fe bb2b 	b.w	17a64 <d_print_comp_inner+0xcf0>
   1940e:	6840      	ldr	r0, [r0, #4]
   19410:	2800      	cmp	r0, #0
   19412:	f43d ad91 	beq.w	16f38 <d_print_comp_inner+0x1c4>
   19416:	f7fe b959 	b.w	176cc <d_print_comp_inner+0x958>
   1941a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   1941e:	4619      	mov	r1, r3
   19420:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19424:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19428:	4620      	mov	r0, r4
   1942a:	4798      	blx	r3
   1942c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19430:	1c5a      	adds	r2, r3, #1
   19432:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19436:	462b      	mov	r3, r5
   19438:	f7ff bb14 	b.w	18a64 <d_print_comp_inner+0x1cf0>
   1943c:	6873      	ldr	r3, [r6, #4]
   1943e:	781a      	ldrb	r2, [r3, #0]
   19440:	2a01      	cmp	r2, #1
   19442:	f000 8153 	beq.w	196ec <d_print_comp_inner+0x2978>
   19446:	f896 a000 	ldrb.w	sl, [r6]
   1944a:	f7ff bae0 	b.w	18a0e <d_print_comp_inner+0x1c9a>
   1944e:	2500      	movs	r5, #0
   19450:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19454:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19458:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1945c:	4620      	mov	r0, r4
   1945e:	4798      	blx	r3
   19460:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19464:	3301      	adds	r3, #1
   19466:	4629      	mov	r1, r5
   19468:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1946c:	f7ff bb55 	b.w	18b1a <d_print_comp_inner+0x1da6>
   19470:	4654      	mov	r4, sl
   19472:	f7fe be8d 	b.w	18190 <d_print_comp_inner+0x141c>
   19476:	bf00      	nop
   19478:	00024668 	.word	0x00024668
   1947c:	000244d0 	.word	0x000244d0
   19480:	000244d8 	.word	0x000244d8
   19484:	00024684 	.word	0x00024684
   19488:	00024680 	.word	0x00024680
   1948c:	0002467c 	.word	0x0002467c
   19490:	00024470 	.word	0x00024470
   19494:	686a      	ldr	r2, [r5, #4]
   19496:	4641      	mov	r1, r8
   19498:	4620      	mov	r0, r4
   1949a:	f001 f835 	bl	1a508 <d_print_subexpr>
   1949e:	4620      	mov	r0, r4
   194a0:	2203      	movs	r2, #3
   194a2:	49e2      	ldr	r1, [pc, #904]	; (1982c <d_print_comp_inner+0x2ab8>)
   194a4:	f7fb f992 	bl	147cc <d_append_buffer>
   194a8:	f7fd bd32 	b.w	16f10 <d_print_comp_inner+0x19c>
   194ac:	ab14      	add	r3, sp, #80	; 0x50
   194ae:	9603      	str	r6, [sp, #12]
   194b0:	f843 cd48 	str.w	ip, [r3, #-72]!
   194b4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   194b8:	f7fe b85a 	b.w	17570 <d_print_comp_inner+0x7fc>
   194bc:	2700      	movs	r7, #0
   194be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194c2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   194c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194ca:	4620      	mov	r0, r4
   194cc:	4798      	blx	r3
   194ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194d2:	3301      	adds	r3, #1
   194d4:	4639      	mov	r1, r7
   194d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194da:	e41d      	b.n	18d18 <d_print_comp_inner+0x1fa4>
   194dc:	2600      	movs	r6, #0
   194de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194e2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   194e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194ea:	4620      	mov	r0, r4
   194ec:	4798      	blx	r3
   194ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194f2:	3301      	adds	r3, #1
   194f4:	4631      	mov	r1, r6
   194f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194fa:	f7ff bb8a 	b.w	18c12 <d_print_comp_inner+0x1e9e>
   194fe:	2500      	movs	r5, #0
   19500:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19504:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19508:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1950c:	4620      	mov	r0, r4
   1950e:	4798      	blx	r3
   19510:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19514:	3301      	adds	r3, #1
   19516:	4629      	mov	r1, r5
   19518:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1951c:	e610      	b.n	19140 <d_print_comp_inner+0x23cc>
   1951e:	2600      	movs	r6, #0
   19520:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19524:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19528:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1952c:	4620      	mov	r0, r4
   1952e:	4798      	blx	r3
   19530:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19534:	3301      	adds	r3, #1
   19536:	4631      	mov	r1, r6
   19538:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1953c:	f7ff bb8a 	b.w	18c54 <d_print_comp_inner+0x1ee0>
   19540:	685a      	ldr	r2, [r3, #4]
   19542:	6891      	ldr	r1, [r2, #8]
   19544:	2901      	cmp	r1, #1
   19546:	f47d ac90 	bne.w	16e6a <d_print_comp_inner+0xf6>
   1954a:	6852      	ldr	r2, [r2, #4]
   1954c:	7812      	ldrb	r2, [r2, #0]
   1954e:	2a3e      	cmp	r2, #62	; 0x3e
   19550:	f47d ac8b 	bne.w	16e6a <d_print_comp_inner+0xf6>
   19554:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19558:	29ff      	cmp	r1, #255	; 0xff
   1955a:	d10f      	bne.n	1957c <d_print_comp_inner+0x2808>
   1955c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19560:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19564:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19568:	4620      	mov	r0, r4
   1956a:	4798      	blx	r3
   1956c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19570:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19574:	3301      	adds	r3, #1
   19576:	4631      	mov	r1, r6
   19578:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1957c:	2328      	movs	r3, #40	; 0x28
   1957e:	1c4a      	adds	r2, r1, #1
   19580:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19584:	5463      	strb	r3, [r4, r1]
   19586:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1958a:	686b      	ldr	r3, [r5, #4]
   1958c:	f7fd bc6d 	b.w	16e6a <d_print_comp_inner+0xf6>
   19590:	2500      	movs	r5, #0
   19592:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19596:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1959a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1959e:	4620      	mov	r0, r4
   195a0:	4798      	blx	r3
   195a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195a6:	3301      	adds	r3, #1
   195a8:	4629      	mov	r1, r5
   195aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195ae:	f7ff bb0b 	b.w	18bc8 <d_print_comp_inner+0x1e54>
   195b2:	f8db b004 	ldr.w	fp, [fp, #4]
   195b6:	f1bb 0f00 	cmp.w	fp, #0
   195ba:	f43e ade9 	beq.w	18190 <d_print_comp_inner+0x141c>
   195be:	f7fd bfc3 	b.w	17548 <d_print_comp_inner+0x7d4>
   195c2:	9b02      	ldr	r3, [sp, #8]
   195c4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   195c8:	f7fd bfdb 	b.w	17582 <d_print_comp_inner+0x80e>
   195cc:	6893      	ldr	r3, [r2, #8]
   195ce:	781b      	ldrb	r3, [r3, #0]
   195d0:	2b29      	cmp	r3, #41	; 0x29
   195d2:	bf1c      	itt	ne
   195d4:	2301      	movne	r3, #1
   195d6:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   195da:	6852      	ldr	r2, [r2, #4]
   195dc:	4641      	mov	r1, r8
   195de:	4620      	mov	r0, r4
   195e0:	f000 ff92 	bl	1a508 <d_print_subexpr>
   195e4:	f7fd bc52 	b.w	16e8c <d_print_comp_inner+0x118>
   195e8:	2600      	movs	r6, #0
   195ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195ee:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   195f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195f6:	4620      	mov	r0, r4
   195f8:	4798      	blx	r3
   195fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195fe:	3301      	adds	r3, #1
   19600:	4631      	mov	r1, r6
   19602:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19606:	e57e      	b.n	19106 <d_print_comp_inner+0x2392>
   19608:	6872      	ldr	r2, [r6, #4]
   1960a:	4641      	mov	r1, r8
   1960c:	4620      	mov	r0, r4
   1960e:	f000 ff7b 	bl	1a508 <d_print_subexpr>
   19612:	464a      	mov	r2, r9
   19614:	4641      	mov	r1, r8
   19616:	4620      	mov	r0, r4
   19618:	f000 ff38 	bl	1a48c <d_print_expr_op>
   1961c:	f7fd bc78 	b.w	16f10 <d_print_comp_inner+0x19c>
   19620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19624:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19628:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1962c:	4620      	mov	r0, r4
   1962e:	4798      	blx	r3
   19630:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19634:	3301      	adds	r3, #1
   19636:	4629      	mov	r1, r5
   19638:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1963c:	f7fd bfad 	b.w	1759a <d_print_comp_inner+0x826>
   19640:	464a      	mov	r2, r9
   19642:	4641      	mov	r1, r8
   19644:	4620      	mov	r0, r4
   19646:	f000 ff5f 	bl	1a508 <d_print_subexpr>
   1964a:	4652      	mov	r2, sl
   1964c:	4641      	mov	r1, r8
   1964e:	4620      	mov	r0, r4
   19650:	f000 ff1c 	bl	1a48c <d_print_expr_op>
   19654:	463a      	mov	r2, r7
   19656:	4641      	mov	r1, r8
   19658:	4620      	mov	r0, r4
   1965a:	f000 ff55 	bl	1a508 <d_print_subexpr>
   1965e:	4620      	mov	r0, r4
   19660:	2203      	movs	r2, #3
   19662:	4973      	ldr	r1, [pc, #460]	; (19830 <d_print_comp_inner+0x2abc>)
   19664:	f7fb f8b2 	bl	147cc <d_append_buffer>
   19668:	462a      	mov	r2, r5
   1966a:	4641      	mov	r1, r8
   1966c:	4620      	mov	r0, r4
   1966e:	f000 ff4b 	bl	1a508 <d_print_subexpr>
   19672:	f7fd bc4d 	b.w	16f10 <d_print_comp_inner+0x19c>
   19676:	454f      	cmp	r7, r9
   19678:	f67f ae6f 	bls.w	1935a <d_print_comp_inner+0x25e6>
   1967c:	2d5f      	cmp	r5, #95	; 0x5f
   1967e:	f47f ae6c 	bne.w	1935a <d_print_comp_inner+0x25e6>
   19682:	28ff      	cmp	r0, #255	; 0xff
   19684:	f63f a87c 	bhi.w	18780 <d_print_comp_inner+0x1a0c>
   19688:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1968c:	29ff      	cmp	r1, #255	; 0xff
   1968e:	b2c5      	uxtb	r5, r0
   19690:	d10f      	bne.n	196b2 <d_print_comp_inner+0x293e>
   19692:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19696:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1969a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1969e:	4620      	mov	r0, r4
   196a0:	4798      	blx	r3
   196a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196a6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   196aa:	3301      	adds	r3, #1
   196ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196b0:	2100      	movs	r1, #0
   196b2:	1c4b      	adds	r3, r1, #1
   196b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   196b8:	464e      	mov	r6, r9
   196ba:	5465      	strb	r5, [r4, r1]
   196bc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   196c0:	f7ff b868 	b.w	18794 <d_print_comp_inner+0x1a20>
   196c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   196cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196d0:	4620      	mov	r0, r4
   196d2:	4798      	blx	r3
   196d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196d8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   196dc:	3301      	adds	r3, #1
   196de:	4631      	mov	r1, r6
   196e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196e4:	f7ff bbe5 	b.w	18eb2 <d_print_comp_inner+0x213e>
   196e8:	4691      	mov	r9, r2
   196ea:	e5e7      	b.n	192bc <d_print_comp_inner+0x2548>
   196ec:	68b2      	ldr	r2, [r6, #8]
   196ee:	7812      	ldrb	r2, [r2, #0]
   196f0:	2a29      	cmp	r2, #41	; 0x29
   196f2:	bf08      	it	eq
   196f4:	461e      	moveq	r6, r3
   196f6:	e6a6      	b.n	19446 <d_print_comp_inner+0x26d2>
   196f8:	2500      	movs	r5, #0
   196fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196fe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19702:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19706:	4620      	mov	r0, r4
   19708:	4798      	blx	r3
   1970a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1970e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19712:	3301      	adds	r3, #1
   19714:	4629      	mov	r1, r5
   19716:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1971a:	e5a9      	b.n	19270 <d_print_comp_inner+0x24fc>
   1971c:	2600      	movs	r6, #0
   1971e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19722:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19726:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1972a:	4620      	mov	r0, r4
   1972c:	4798      	blx	r3
   1972e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19732:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19736:	3301      	adds	r3, #1
   19738:	4631      	mov	r1, r6
   1973a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1973e:	f7fd bbc8 	b.w	16ed2 <d_print_comp_inner+0x15e>
   19742:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   19746:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1974a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1974e:	4620      	mov	r0, r4
   19750:	4798      	blx	r3
   19752:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19756:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1975a:	3301      	adds	r3, #1
   1975c:	4631      	mov	r1, r6
   1975e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19762:	f7fd bba4 	b.w	16eae <d_print_comp_inner+0x13a>
   19766:	2600      	movs	r6, #0
   19768:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1976c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19770:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19774:	4620      	mov	r0, r4
   19776:	4798      	blx	r3
   19778:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1977c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19780:	3301      	adds	r3, #1
   19782:	4631      	mov	r1, r6
   19784:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19788:	e57f      	b.n	1928a <d_print_comp_inner+0x2516>
   1978a:	6841      	ldr	r1, [r0, #4]
   1978c:	2900      	cmp	r1, #0
   1978e:	f43d abd0 	beq.w	16f32 <d_print_comp_inner+0x1be>
   19792:	780b      	ldrb	r3, [r1, #0]
   19794:	f7fe b9e1 	b.w	17b5a <d_print_comp_inner+0xde6>
   19798:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1979c:	29ff      	cmp	r1, #255	; 0xff
   1979e:	d00d      	beq.n	197bc <d_print_comp_inner+0x2a48>
   197a0:	232d      	movs	r3, #45	; 0x2d
   197a2:	1c4a      	adds	r2, r1, #1
   197a4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   197a8:	5463      	strb	r3, [r4, r1]
   197aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   197ae:	e504      	b.n	191ba <d_print_comp_inner+0x2446>
   197b0:	2205      	movs	r2, #5
   197b2:	4920      	ldr	r1, [pc, #128]	; (19834 <d_print_comp_inner+0x2ac0>)
   197b4:	f7fb f80a 	bl	147cc <d_append_buffer>
   197b8:	f7fd bbaa 	b.w	16f10 <d_print_comp_inner+0x19c>
   197bc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   197c0:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   197c4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   197c8:	4798      	blx	r3
   197ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197ce:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   197d2:	3301      	adds	r3, #1
   197d4:	4639      	mov	r1, r7
   197d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197da:	e7e1      	b.n	197a0 <d_print_comp_inner+0x2a2c>
   197dc:	2500      	movs	r5, #0
   197de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197e2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   197e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197ea:	4620      	mov	r0, r4
   197ec:	4798      	blx	r3
   197ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197f2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   197f6:	3301      	adds	r3, #1
   197f8:	4629      	mov	r1, r5
   197fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197fe:	e512      	b.n	19226 <d_print_comp_inner+0x24b2>
   19800:	2700      	movs	r7, #0
   19802:	f7ff b913 	b.w	18a2c <d_print_comp_inner+0x1cb8>
   19806:	2500      	movs	r5, #0
   19808:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1980c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19814:	4620      	mov	r0, r4
   19816:	4798      	blx	r3
   19818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1981c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19820:	3301      	adds	r3, #1
   19822:	4629      	mov	r1, r5
   19824:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19828:	f7fd bb6b 	b.w	16f02 <d_print_comp_inner+0x18e>
   1982c:	00022be4 	.word	0x00022be4
   19830:	00024670 	.word	0x00024670
   19834:	00024688 	.word	0x00024688
   19838:	4637      	mov	r7, r6
   1983a:	f7ff bbe6 	b.w	1900a <d_print_comp_inner+0x2296>
   1983e:	2500      	movs	r5, #0
   19840:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19844:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19848:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1984c:	4620      	mov	r0, r4
   1984e:	4798      	blx	r3
   19850:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19854:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19858:	3301      	adds	r3, #1
   1985a:	4629      	mov	r1, r5
   1985c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19860:	e4d3      	b.n	1920a <d_print_comp_inner+0x2496>
   19862:	4671      	mov	r1, lr
   19864:	6002      	str	r2, [r0, #0]
   19866:	3104      	adds	r1, #4
   19868:	4620      	mov	r0, r4
   1986a:	f7fb f9bf 	bl	14bec <d_lookup_template_argument.isra.6>
   1986e:	2800      	cmp	r0, #0
   19870:	f47f ad3c 	bne.w	192ec <d_print_comp_inner+0x2578>
   19874:	f7fd bb60 	b.w	16f38 <d_print_comp_inner+0x1c4>
   19878:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1987c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19880:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19884:	4620      	mov	r0, r4
   19886:	4798      	blx	r3
   19888:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1988c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19890:	3301      	adds	r3, #1
   19892:	4631      	mov	r1, r6
   19894:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19898:	f7fe bc02 	b.w	180a0 <d_print_comp_inner+0x132c>
   1989c:	2301      	movs	r3, #1
   1989e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   198a2:	f7fd bb35 	b.w	16f10 <d_print_comp_inner+0x19c>
   198a6:	4618      	mov	r0, r3
   198a8:	4407      	add	r7, r0
   198aa:	f7ff bb81 	b.w	18fb0 <d_print_comp_inner+0x223c>
   198ae:	2000      	movs	r0, #0
   198b0:	4407      	add	r7, r0
   198b2:	f7ff bb7d 	b.w	18fb0 <d_print_comp_inner+0x223c>
   198b6:	4607      	mov	r7, r0
   198b8:	f7ff bba7 	b.w	1900a <d_print_comp_inner+0x2296>

000198bc <d_print_comp>:
   198bc:	b510      	push	{r4, lr}
   198be:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   198c2:	b082      	sub	sp, #8
   198c4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   198c8:	4604      	mov	r4, r0
   198ca:	e88d 000c 	stmia.w	sp, {r2, r3}
   198ce:	f7fd fa51 	bl	16d74 <d_print_comp_inner>
   198d2:	9b01      	ldr	r3, [sp, #4]
   198d4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   198d8:	b002      	add	sp, #8
   198da:	bd10      	pop	{r4, pc}

000198dc <d_print_mod>:
   198dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   198e0:	7813      	ldrb	r3, [r2, #0]
   198e2:	3b03      	subs	r3, #3
   198e4:	b082      	sub	sp, #8
   198e6:	4615      	mov	r5, r2
   198e8:	4604      	mov	r4, r0
   198ea:	4688      	mov	r8, r1
   198ec:	2b49      	cmp	r3, #73	; 0x49
   198ee:	f200 8223 	bhi.w	19d38 <d_print_mod+0x45c>
   198f2:	e8df f013 	tbh	[pc, r3, lsl #1]
   198f6:	01e7      	.short	0x01e7
   198f8:	02210221 	.word	0x02210221
   198fc:	02210221 	.word	0x02210221
   19900:	02210221 	.word	0x02210221
   19904:	02210221 	.word	0x02210221
   19908:	02210221 	.word	0x02210221
   1990c:	02210221 	.word	0x02210221
   19910:	02210221 	.word	0x02210221
   19914:	02210221 	.word	0x02210221
   19918:	02210221 	.word	0x02210221
   1991c:	02210221 	.word	0x02210221
   19920:	01e90221 	.word	0x01e90221
   19924:	01a80182 	.word	0x01a80182
   19928:	018201e9 	.word	0x018201e9
   1992c:	01cd01a8 	.word	0x01cd01a8
   19930:	006f01da 	.word	0x006f01da
   19934:	009c008c 	.word	0x009c008c
   19938:	00cf00ab 	.word	0x00cf00ab
   1993c:	022100f4 	.word	0x022100f4
   19940:	02210221 	.word	0x02210221
   19944:	01190221 	.word	0x01190221
   19948:	015c0221 	.word	0x015c0221
   1994c:	02210221 	.word	0x02210221
   19950:	02210221 	.word	0x02210221
   19954:	02210221 	.word	0x02210221
   19958:	02210221 	.word	0x02210221
   1995c:	02210221 	.word	0x02210221
   19960:	02210221 	.word	0x02210221
   19964:	02210221 	.word	0x02210221
   19968:	02210221 	.word	0x02210221
   1996c:	02210221 	.word	0x02210221
   19970:	02210221 	.word	0x02210221
   19974:	02210221 	.word	0x02210221
   19978:	02210221 	.word	0x02210221
   1997c:	02210221 	.word	0x02210221
   19980:	02210221 	.word	0x02210221
   19984:	02210221 	.word	0x02210221
   19988:	004a      	.short	0x004a
   1998a:	4dd3      	ldr	r5, [pc, #844]	; (19cd8 <d_print_mod+0x3fc>)
   1998c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19990:	f105 0711 	add.w	r7, r5, #17
   19994:	f04f 0800 	mov.w	r8, #0
   19998:	e008      	b.n	199ac <d_print_mod+0xd0>
   1999a:	460b      	mov	r3, r1
   1999c:	3101      	adds	r1, #1
   1999e:	42bd      	cmp	r5, r7
   199a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199a4:	54e6      	strb	r6, [r4, r3]
   199a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   199aa:	d02d      	beq.n	19a08 <d_print_mod+0x12c>
   199ac:	29ff      	cmp	r1, #255	; 0xff
   199ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   199b2:	d1f2      	bne.n	1999a <d_print_mod+0xbe>
   199b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   199bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199c0:	4620      	mov	r0, r4
   199c2:	4798      	blx	r3
   199c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199c8:	3301      	adds	r3, #1
   199ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199ce:	2101      	movs	r1, #1
   199d0:	2300      	movs	r3, #0
   199d2:	e7e4      	b.n	1999e <d_print_mod+0xc2>
   199d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   199d8:	29ff      	cmp	r1, #255	; 0xff
   199da:	f000 81f7 	beq.w	19dcc <d_print_mod+0x4f0>
   199de:	1c4a      	adds	r2, r1, #1
   199e0:	2320      	movs	r3, #32
   199e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   199e6:	5463      	strb	r3, [r4, r1]
   199e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   199ec:	68aa      	ldr	r2, [r5, #8]
   199ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   199f2:	9200      	str	r2, [sp, #0]
   199f4:	4641      	mov	r1, r8
   199f6:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   199fa:	4620      	mov	r0, r4
   199fc:	9301      	str	r3, [sp, #4]
   199fe:	f7fd f9b9 	bl	16d74 <d_print_comp_inner>
   19a02:	9b01      	ldr	r3, [sp, #4]
   19a04:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19a08:	b002      	add	sp, #8
   19a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a0e:	f011 0504 	ands.w	r5, r1, #4
   19a12:	d1f9      	bne.n	19a08 <d_print_mod+0x12c>
   19a14:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19a18:	2bff      	cmp	r3, #255	; 0xff
   19a1a:	f000 821c 	beq.w	19e56 <d_print_mod+0x57a>
   19a1e:	222a      	movs	r2, #42	; 0x2a
   19a20:	1c59      	adds	r1, r3, #1
   19a22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a26:	54e2      	strb	r2, [r4, r3]
   19a28:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19a2c:	e7ec      	b.n	19a08 <d_print_mod+0x12c>
   19a2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a32:	29ff      	cmp	r1, #255	; 0xff
   19a34:	f000 81b9 	beq.w	19daa <d_print_mod+0x4ce>
   19a38:	1c4a      	adds	r2, r1, #1
   19a3a:	2326      	movs	r3, #38	; 0x26
   19a3c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19a40:	5463      	strb	r3, [r4, r1]
   19a42:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19a46:	b002      	add	sp, #8
   19a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a4c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a50:	4da2      	ldr	r5, [pc, #648]	; (19cdc <d_print_mod+0x400>)
   19a52:	f04f 0800 	mov.w	r8, #0
   19a56:	1caf      	adds	r7, r5, #2
   19a58:	e008      	b.n	19a6c <d_print_mod+0x190>
   19a5a:	460b      	mov	r3, r1
   19a5c:	3101      	adds	r1, #1
   19a5e:	42bd      	cmp	r5, r7
   19a60:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a64:	54e6      	strb	r6, [r4, r3]
   19a66:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a6a:	d0cd      	beq.n	19a08 <d_print_mod+0x12c>
   19a6c:	29ff      	cmp	r1, #255	; 0xff
   19a6e:	f815 6b01 	ldrb.w	r6, [r5], #1
   19a72:	d1f2      	bne.n	19a5a <d_print_mod+0x17e>
   19a74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a78:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a80:	4620      	mov	r0, r4
   19a82:	4798      	blx	r3
   19a84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a88:	3301      	adds	r3, #1
   19a8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a8e:	2101      	movs	r1, #1
   19a90:	2300      	movs	r3, #0
   19a92:	e7e4      	b.n	19a5e <d_print_mod+0x182>
   19a94:	4d92      	ldr	r5, [pc, #584]	; (19ce0 <d_print_mod+0x404>)
   19a96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a9a:	f105 0708 	add.w	r7, r5, #8
   19a9e:	f04f 0800 	mov.w	r8, #0
   19aa2:	e008      	b.n	19ab6 <d_print_mod+0x1da>
   19aa4:	460b      	mov	r3, r1
   19aa6:	3101      	adds	r1, #1
   19aa8:	42bd      	cmp	r5, r7
   19aaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19aae:	54e6      	strb	r6, [r4, r3]
   19ab0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19ab4:	d0a8      	beq.n	19a08 <d_print_mod+0x12c>
   19ab6:	29ff      	cmp	r1, #255	; 0xff
   19ab8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19abc:	d1f2      	bne.n	19aa4 <d_print_mod+0x1c8>
   19abe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ac2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19ac6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19aca:	4620      	mov	r0, r4
   19acc:	4798      	blx	r3
   19ace:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ad2:	3301      	adds	r3, #1
   19ad4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ad8:	2101      	movs	r1, #1
   19ada:	2300      	movs	r3, #0
   19adc:	e7e4      	b.n	19aa8 <d_print_mod+0x1cc>
   19ade:	4d81      	ldr	r5, [pc, #516]	; (19ce4 <d_print_mod+0x408>)
   19ae0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ae4:	f105 070a 	add.w	r7, r5, #10
   19ae8:	f04f 0800 	mov.w	r8, #0
   19aec:	e008      	b.n	19b00 <d_print_mod+0x224>
   19aee:	460b      	mov	r3, r1
   19af0:	3101      	adds	r1, #1
   19af2:	42bd      	cmp	r5, r7
   19af4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19af8:	54e6      	strb	r6, [r4, r3]
   19afa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19afe:	d083      	beq.n	19a08 <d_print_mod+0x12c>
   19b00:	29ff      	cmp	r1, #255	; 0xff
   19b02:	f815 6b01 	ldrb.w	r6, [r5], #1
   19b06:	d1f2      	bne.n	19aee <d_print_mod+0x212>
   19b08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b14:	4620      	mov	r0, r4
   19b16:	4798      	blx	r3
   19b18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b1c:	3301      	adds	r3, #1
   19b1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b22:	2101      	movs	r1, #1
   19b24:	2300      	movs	r3, #0
   19b26:	e7e4      	b.n	19af2 <d_print_mod+0x216>
   19b28:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   19b2c:	2b28      	cmp	r3, #40	; 0x28
   19b2e:	d00b      	beq.n	19b48 <d_print_mod+0x26c>
   19b30:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19b34:	2bff      	cmp	r3, #255	; 0xff
   19b36:	f000 8126 	beq.w	19d86 <d_print_mod+0x4aa>
   19b3a:	2220      	movs	r2, #32
   19b3c:	1c59      	adds	r1, r3, #1
   19b3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b42:	54e2      	strb	r2, [r4, r3]
   19b44:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19b48:	686a      	ldr	r2, [r5, #4]
   19b4a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19b4e:	4d66      	ldr	r5, [pc, #408]	; (19ce8 <d_print_mod+0x40c>)
   19b50:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19b54:	4641      	mov	r1, r8
   19b56:	4620      	mov	r0, r4
   19b58:	9301      	str	r3, [sp, #4]
   19b5a:	9200      	str	r2, [sp, #0]
   19b5c:	f7fd f90a 	bl	16d74 <d_print_comp_inner>
   19b60:	9b01      	ldr	r3, [sp, #4]
   19b62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19b66:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19b6a:	1cef      	adds	r7, r5, #3
   19b6c:	f04f 0800 	mov.w	r8, #0
   19b70:	e009      	b.n	19b86 <d_print_mod+0x2aa>
   19b72:	460b      	mov	r3, r1
   19b74:	3101      	adds	r1, #1
   19b76:	42bd      	cmp	r5, r7
   19b78:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b7c:	54e6      	strb	r6, [r4, r3]
   19b7e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b82:	f43f af41 	beq.w	19a08 <d_print_mod+0x12c>
   19b86:	29ff      	cmp	r1, #255	; 0xff
   19b88:	f815 6b01 	ldrb.w	r6, [r5], #1
   19b8c:	d1f1      	bne.n	19b72 <d_print_mod+0x296>
   19b8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b92:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b9a:	4620      	mov	r0, r4
   19b9c:	4798      	blx	r3
   19b9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ba2:	3301      	adds	r3, #1
   19ba4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ba8:	2101      	movs	r1, #1
   19baa:	2300      	movs	r3, #0
   19bac:	e7e3      	b.n	19b76 <d_print_mod+0x29a>
   19bae:	4e4f      	ldr	r6, [pc, #316]	; (19cec <d_print_mod+0x410>)
   19bb0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19bb4:	f106 0a0a 	add.w	sl, r6, #10
   19bb8:	f04f 0900 	mov.w	r9, #0
   19bbc:	e009      	b.n	19bd2 <d_print_mod+0x2f6>
   19bbe:	460b      	mov	r3, r1
   19bc0:	3101      	adds	r1, #1
   19bc2:	4556      	cmp	r6, sl
   19bc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19bc8:	54e7      	strb	r7, [r4, r3]
   19bca:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19bce:	f000 80c0 	beq.w	19d52 <d_print_mod+0x476>
   19bd2:	29ff      	cmp	r1, #255	; 0xff
   19bd4:	f816 7b01 	ldrb.w	r7, [r6], #1
   19bd8:	d1f1      	bne.n	19bbe <d_print_mod+0x2e2>
   19bda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19bde:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19be6:	4620      	mov	r0, r4
   19be8:	4798      	blx	r3
   19bea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bee:	3301      	adds	r3, #1
   19bf0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bf4:	2101      	movs	r1, #1
   19bf6:	2300      	movs	r3, #0
   19bf8:	e7e3      	b.n	19bc2 <d_print_mod+0x2e6>
   19bfa:	4d3d      	ldr	r5, [pc, #244]	; (19cf0 <d_print_mod+0x414>)
   19bfc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19c00:	f105 0709 	add.w	r7, r5, #9
   19c04:	f04f 0800 	mov.w	r8, #0
   19c08:	e009      	b.n	19c1e <d_print_mod+0x342>
   19c0a:	460b      	mov	r3, r1
   19c0c:	3101      	adds	r1, #1
   19c0e:	42bd      	cmp	r5, r7
   19c10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c14:	54e6      	strb	r6, [r4, r3]
   19c16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19c1a:	f43f aef5 	beq.w	19a08 <d_print_mod+0x12c>
   19c1e:	29ff      	cmp	r1, #255	; 0xff
   19c20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19c24:	d1f1      	bne.n	19c0a <d_print_mod+0x32e>
   19c26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c2a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19c2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c32:	4620      	mov	r0, r4
   19c34:	4798      	blx	r3
   19c36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c3a:	3301      	adds	r3, #1
   19c3c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c40:	2101      	movs	r1, #1
   19c42:	2300      	movs	r3, #0
   19c44:	e7e3      	b.n	19c0e <d_print_mod+0x332>
   19c46:	4d2b      	ldr	r5, [pc, #172]	; (19cf4 <d_print_mod+0x418>)
   19c48:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19c4c:	1daf      	adds	r7, r5, #6
   19c4e:	f04f 0800 	mov.w	r8, #0
   19c52:	e009      	b.n	19c68 <d_print_mod+0x38c>
   19c54:	460b      	mov	r3, r1
   19c56:	3101      	adds	r1, #1
   19c58:	42bd      	cmp	r5, r7
   19c5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c5e:	54e6      	strb	r6, [r4, r3]
   19c60:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19c64:	f43f aed0 	beq.w	19a08 <d_print_mod+0x12c>
   19c68:	29ff      	cmp	r1, #255	; 0xff
   19c6a:	f815 6b01 	ldrb.w	r6, [r5], #1
   19c6e:	d1f1      	bne.n	19c54 <d_print_mod+0x378>
   19c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c74:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19c78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c7c:	4620      	mov	r0, r4
   19c7e:	4798      	blx	r3
   19c80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c84:	3301      	adds	r3, #1
   19c86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c8a:	2101      	movs	r1, #1
   19c8c:	2300      	movs	r3, #0
   19c8e:	e7e3      	b.n	19c58 <d_print_mod+0x37c>
   19c90:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19c94:	2bff      	cmp	r3, #255	; 0xff
   19c96:	f000 80cc 	beq.w	19e32 <d_print_mod+0x556>
   19c9a:	2220      	movs	r2, #32
   19c9c:	1c59      	adds	r1, r3, #1
   19c9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ca2:	54e2      	strb	r2, [r4, r3]
   19ca4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19ca8:	e6c3      	b.n	19a32 <d_print_mod+0x156>
   19caa:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19cae:	2bff      	cmp	r3, #255	; 0xff
   19cb0:	f000 80ad 	beq.w	19e0e <d_print_mod+0x532>
   19cb4:	2220      	movs	r2, #32
   19cb6:	1c59      	adds	r1, r3, #1
   19cb8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19cbc:	54e2      	strb	r2, [r4, r3]
   19cbe:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19cc2:	e6c5      	b.n	19a50 <d_print_mod+0x174>
   19cc4:	686a      	ldr	r2, [r5, #4]
   19cc6:	e692      	b.n	199ee <d_print_mod+0x112>
   19cc8:	4d0b      	ldr	r5, [pc, #44]	; (19cf8 <d_print_mod+0x41c>)
   19cca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19cce:	f105 0709 	add.w	r7, r5, #9
   19cd2:	f04f 0800 	mov.w	r8, #0
   19cd6:	e01b      	b.n	19d10 <d_print_mod+0x434>
   19cd8:	00024753 	.word	0x00024753
   19cdc:	00024768 	.word	0x00024768
   19ce0:	0002476b 	.word	0x0002476b
   19ce4:	00024778 	.word	0x00024778
   19ce8:	00024784 	.word	0x00024784
   19cec:	00024788 	.word	0x00024788
   19cf0:	0002473f 	.word	0x0002473f
   19cf4:	0002474c 	.word	0x0002474c
   19cf8:	00024733 	.word	0x00024733
   19cfc:	460b      	mov	r3, r1
   19cfe:	3101      	adds	r1, #1
   19d00:	42af      	cmp	r7, r5
   19d02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d06:	54e6      	strb	r6, [r4, r3]
   19d08:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19d0c:	f43f ae7c 	beq.w	19a08 <d_print_mod+0x12c>
   19d10:	29ff      	cmp	r1, #255	; 0xff
   19d12:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19d16:	d1f1      	bne.n	19cfc <d_print_mod+0x420>
   19d18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19d20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d24:	4620      	mov	r0, r4
   19d26:	4798      	blx	r3
   19d28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d2c:	3301      	adds	r3, #1
   19d2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d32:	2101      	movs	r1, #1
   19d34:	2300      	movs	r3, #0
   19d36:	e7e3      	b.n	19d00 <d_print_mod+0x424>
   19d38:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19d3c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19d40:	462a      	mov	r2, r5
   19d42:	9301      	str	r3, [sp, #4]
   19d44:	9500      	str	r5, [sp, #0]
   19d46:	f7fd f815 	bl	16d74 <d_print_comp_inner>
   19d4a:	9b01      	ldr	r3, [sp, #4]
   19d4c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19d50:	e65a      	b.n	19a08 <d_print_mod+0x12c>
   19d52:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19d56:	686a      	ldr	r2, [r5, #4]
   19d58:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19d5c:	4641      	mov	r1, r8
   19d5e:	4620      	mov	r0, r4
   19d60:	9301      	str	r3, [sp, #4]
   19d62:	9200      	str	r2, [sp, #0]
   19d64:	f7fd f806 	bl	16d74 <d_print_comp_inner>
   19d68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19d6c:	9b01      	ldr	r3, [sp, #4]
   19d6e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19d72:	29ff      	cmp	r1, #255	; 0xff
   19d74:	d03a      	beq.n	19dec <d_print_mod+0x510>
   19d76:	1c4a      	adds	r2, r1, #1
   19d78:	2329      	movs	r3, #41	; 0x29
   19d7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19d7e:	5463      	strb	r3, [r4, r1]
   19d80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19d84:	e640      	b.n	19a08 <d_print_mod+0x12c>
   19d86:	2600      	movs	r6, #0
   19d88:	4619      	mov	r1, r3
   19d8a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19d8e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19d92:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19d96:	4798      	blx	r3
   19d98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d9c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19da0:	1c5a      	adds	r2, r3, #1
   19da2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19da6:	4633      	mov	r3, r6
   19da8:	e6c7      	b.n	19b3a <d_print_mod+0x25e>
   19daa:	2500      	movs	r5, #0
   19dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19db0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19db4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19db8:	4620      	mov	r0, r4
   19dba:	4798      	blx	r3
   19dbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19dc0:	3301      	adds	r3, #1
   19dc2:	4629      	mov	r1, r5
   19dc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19dc8:	2201      	movs	r2, #1
   19dca:	e636      	b.n	19a3a <d_print_mod+0x15e>
   19dcc:	2600      	movs	r6, #0
   19dce:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19dd2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19dd6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19dda:	4798      	blx	r3
   19ddc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19de0:	3301      	adds	r3, #1
   19de2:	4631      	mov	r1, r6
   19de4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19de8:	2201      	movs	r2, #1
   19dea:	e5f9      	b.n	199e0 <d_print_mod+0x104>
   19dec:	2500      	movs	r5, #0
   19dee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19df2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19df6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19dfa:	4620      	mov	r0, r4
   19dfc:	4798      	blx	r3
   19dfe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e02:	3301      	adds	r3, #1
   19e04:	4629      	mov	r1, r5
   19e06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e0a:	2201      	movs	r2, #1
   19e0c:	e7b4      	b.n	19d78 <d_print_mod+0x49c>
   19e0e:	2500      	movs	r5, #0
   19e10:	4619      	mov	r1, r3
   19e12:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19e16:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19e1a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19e1e:	4798      	blx	r3
   19e20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e24:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19e28:	1c5a      	adds	r2, r3, #1
   19e2a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e2e:	462b      	mov	r3, r5
   19e30:	e740      	b.n	19cb4 <d_print_mod+0x3d8>
   19e32:	2500      	movs	r5, #0
   19e34:	4619      	mov	r1, r3
   19e36:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19e3a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19e3e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19e42:	4798      	blx	r3
   19e44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e48:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19e4c:	1c5a      	adds	r2, r3, #1
   19e4e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e52:	462b      	mov	r3, r5
   19e54:	e721      	b.n	19c9a <d_print_mod+0x3be>
   19e56:	4619      	mov	r1, r3
   19e58:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19e5c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19e60:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19e64:	4798      	blx	r3
   19e66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e6a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19e6e:	1c5a      	adds	r2, r3, #1
   19e70:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e74:	462b      	mov	r3, r5
   19e76:	e5d2      	b.n	19a1e <d_print_mod+0x142>

00019e78 <d_print_mod_list>:
   19e78:	2a00      	cmp	r2, #0
   19e7a:	f000 80a1 	beq.w	19fc0 <d_print_mod_list+0x148>
   19e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e82:	461e      	mov	r6, r3
   19e84:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19e88:	b089      	sub	sp, #36	; 0x24
   19e8a:	4605      	mov	r5, r0
   19e8c:	bb43      	cbnz	r3, 19ee0 <d_print_mod_list+0x68>
   19e8e:	460f      	mov	r7, r1
   19e90:	4614      	mov	r4, r2
   19e92:	f04f 0801 	mov.w	r8, #1
   19e96:	e002      	b.n	19e9e <d_print_mod_list+0x26>
   19e98:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19e9c:	bb03      	cbnz	r3, 19ee0 <d_print_mod_list+0x68>
   19e9e:	68a3      	ldr	r3, [r4, #8]
   19ea0:	b9db      	cbnz	r3, 19eda <d_print_mod_list+0x62>
   19ea2:	6862      	ldr	r2, [r4, #4]
   19ea4:	7813      	ldrb	r3, [r2, #0]
   19ea6:	b92e      	cbnz	r6, 19eb4 <d_print_mod_list+0x3c>
   19ea8:	f1a3 011c 	sub.w	r1, r3, #28
   19eac:	2904      	cmp	r1, #4
   19eae:	d914      	bls.n	19eda <d_print_mod_list+0x62>
   19eb0:	2b4c      	cmp	r3, #76	; 0x4c
   19eb2:	d012      	beq.n	19eda <d_print_mod_list+0x62>
   19eb4:	68e1      	ldr	r1, [r4, #12]
   19eb6:	f8c4 8008 	str.w	r8, [r4, #8]
   19eba:	2b29      	cmp	r3, #41	; 0x29
   19ebc:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19ec0:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19ec4:	d00f      	beq.n	19ee6 <d_print_mod_list+0x6e>
   19ec6:	2b2a      	cmp	r3, #42	; 0x2a
   19ec8:	d018      	beq.n	19efc <d_print_mod_list+0x84>
   19eca:	2b02      	cmp	r3, #2
   19ecc:	d021      	beq.n	19f12 <d_print_mod_list+0x9a>
   19ece:	4639      	mov	r1, r7
   19ed0:	4628      	mov	r0, r5
   19ed2:	f7ff fd03 	bl	198dc <d_print_mod>
   19ed6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19eda:	6824      	ldr	r4, [r4, #0]
   19edc:	2c00      	cmp	r4, #0
   19ede:	d1db      	bne.n	19e98 <d_print_mod_list+0x20>
   19ee0:	b009      	add	sp, #36	; 0x24
   19ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ee6:	6823      	ldr	r3, [r4, #0]
   19ee8:	3208      	adds	r2, #8
   19eea:	4639      	mov	r1, r7
   19eec:	4628      	mov	r0, r5
   19eee:	f000 f9d9 	bl	1a2a4 <d_print_function_type.isra.11>
   19ef2:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19ef6:	b009      	add	sp, #36	; 0x24
   19ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19efc:	6823      	ldr	r3, [r4, #0]
   19efe:	3204      	adds	r2, #4
   19f00:	4639      	mov	r1, r7
   19f02:	4628      	mov	r0, r5
   19f04:	f000 f8f2 	bl	1a0ec <d_print_array_type.isra.10>
   19f08:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19f0c:	b009      	add	sp, #36	; 0x24
   19f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f12:	2600      	movs	r6, #0
   19f14:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19f18:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19f1c:	6852      	ldr	r2, [r2, #4]
   19f1e:	4639      	mov	r1, r7
   19f20:	4628      	mov	r0, r5
   19f22:	f7ff fccb 	bl	198bc <d_print_comp>
   19f26:	f017 0a04 	ands.w	sl, r7, #4
   19f2a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19f2e:	d023      	beq.n	19f78 <d_print_mod_list+0x100>
   19f30:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19f34:	29ff      	cmp	r1, #255	; 0xff
   19f36:	f000 80c1 	beq.w	1a0bc <d_print_mod_list+0x244>
   19f3a:	1c4a      	adds	r2, r1, #1
   19f3c:	232e      	movs	r3, #46	; 0x2e
   19f3e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19f42:	546b      	strb	r3, [r5, r1]
   19f44:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   19f48:	6863      	ldr	r3, [r4, #4]
   19f4a:	689c      	ldr	r4, [r3, #8]
   19f4c:	7823      	ldrb	r3, [r4, #0]
   19f4e:	2b46      	cmp	r3, #70	; 0x46
   19f50:	d037      	beq.n	19fc2 <d_print_mod_list+0x14a>
   19f52:	f1a3 021c 	sub.w	r2, r3, #28
   19f56:	2a04      	cmp	r2, #4
   19f58:	d90b      	bls.n	19f72 <d_print_mod_list+0xfa>
   19f5a:	2b4c      	cmp	r3, #76	; 0x4c
   19f5c:	d009      	beq.n	19f72 <d_print_mod_list+0xfa>
   19f5e:	4622      	mov	r2, r4
   19f60:	4639      	mov	r1, r7
   19f62:	4628      	mov	r0, r5
   19f64:	f7ff fcaa 	bl	198bc <d_print_comp>
   19f68:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19f6c:	b009      	add	sp, #36	; 0x24
   19f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f72:	6864      	ldr	r4, [r4, #4]
   19f74:	7823      	ldrb	r3, [r4, #0]
   19f76:	e7ec      	b.n	19f52 <d_print_mod_list+0xda>
   19f78:	4e58      	ldr	r6, [pc, #352]	; (1a0dc <d_print_mod_list+0x264>)
   19f7a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19f7e:	f106 0b02 	add.w	fp, r6, #2
   19f82:	e009      	b.n	19f98 <d_print_mod_list+0x120>
   19f84:	460b      	mov	r3, r1
   19f86:	3101      	adds	r1, #1
   19f88:	455e      	cmp	r6, fp
   19f8a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19f8e:	f805 8003 	strb.w	r8, [r5, r3]
   19f92:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19f96:	d0d7      	beq.n	19f48 <d_print_mod_list+0xd0>
   19f98:	29ff      	cmp	r1, #255	; 0xff
   19f9a:	f816 8b01 	ldrb.w	r8, [r6], #1
   19f9e:	d1f1      	bne.n	19f84 <d_print_mod_list+0x10c>
   19fa0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19fa4:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   19fa8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19fac:	4628      	mov	r0, r5
   19fae:	4798      	blx	r3
   19fb0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19fb4:	3301      	adds	r3, #1
   19fb6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19fba:	2101      	movs	r1, #1
   19fbc:	2300      	movs	r3, #0
   19fbe:	e7e3      	b.n	19f88 <d_print_mod_list+0x110>
   19fc0:	4770      	bx	lr
   19fc2:	4e47      	ldr	r6, [pc, #284]	; (1a0e0 <d_print_mod_list+0x268>)
   19fc4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19fc8:	f106 0a0d 	add.w	sl, r6, #13
   19fcc:	f04f 0b00 	mov.w	fp, #0
   19fd0:	e009      	b.n	19fe6 <d_print_mod_list+0x16e>
   19fd2:	460b      	mov	r3, r1
   19fd4:	3101      	adds	r1, #1
   19fd6:	45b2      	cmp	sl, r6
   19fd8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19fdc:	f805 8003 	strb.w	r8, [r5, r3]
   19fe0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19fe4:	d013      	beq.n	1a00e <d_print_mod_list+0x196>
   19fe6:	29ff      	cmp	r1, #255	; 0xff
   19fe8:	f816 8b01 	ldrb.w	r8, [r6], #1
   19fec:	d1f1      	bne.n	19fd2 <d_print_mod_list+0x15a>
   19fee:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19ff2:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19ff6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19ffa:	4628      	mov	r0, r5
   19ffc:	4798      	blx	r3
   19ffe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a002:	3301      	adds	r3, #1
   1a004:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a008:	2101      	movs	r1, #1
   1a00a:	2300      	movs	r3, #0
   1a00c:	e7e3      	b.n	19fd6 <d_print_mod_list+0x15e>
   1a00e:	68a2      	ldr	r2, [r4, #8]
   1a010:	4934      	ldr	r1, [pc, #208]	; (1a0e4 <d_print_mod_list+0x26c>)
   1a012:	3201      	adds	r2, #1
   1a014:	a801      	add	r0, sp, #4
   1a016:	f004 fd49 	bl	1eaac <sprintf>
   1a01a:	a801      	add	r0, sp, #4
   1a01c:	f004 fef0 	bl	1ee00 <strlen>
   1a020:	b328      	cbz	r0, 1a06e <d_print_mod_list+0x1f6>
   1a022:	ae01      	add	r6, sp, #4
   1a024:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a028:	eb06 0a00 	add.w	sl, r6, r0
   1a02c:	f04f 0b00 	mov.w	fp, #0
   1a030:	e009      	b.n	1a046 <d_print_mod_list+0x1ce>
   1a032:	460b      	mov	r3, r1
   1a034:	3101      	adds	r1, #1
   1a036:	45b2      	cmp	sl, r6
   1a038:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a03c:	f805 8003 	strb.w	r8, [r5, r3]
   1a040:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a044:	d015      	beq.n	1a072 <d_print_mod_list+0x1fa>
   1a046:	29ff      	cmp	r1, #255	; 0xff
   1a048:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a04c:	d1f1      	bne.n	1a032 <d_print_mod_list+0x1ba>
   1a04e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a052:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a056:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a05a:	4628      	mov	r0, r5
   1a05c:	4798      	blx	r3
   1a05e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a062:	3301      	adds	r3, #1
   1a064:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a068:	2101      	movs	r1, #1
   1a06a:	2300      	movs	r3, #0
   1a06c:	e7e3      	b.n	1a036 <d_print_mod_list+0x1be>
   1a06e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a072:	4e1d      	ldr	r6, [pc, #116]	; (1a0e8 <d_print_mod_list+0x270>)
   1a074:	f04f 0b00 	mov.w	fp, #0
   1a078:	f106 0a03 	add.w	sl, r6, #3
   1a07c:	e00a      	b.n	1a094 <d_print_mod_list+0x21c>
   1a07e:	460b      	mov	r3, r1
   1a080:	3101      	adds	r1, #1
   1a082:	45b2      	cmp	sl, r6
   1a084:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a088:	f805 8003 	strb.w	r8, [r5, r3]
   1a08c:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a090:	f43f af6f 	beq.w	19f72 <d_print_mod_list+0xfa>
   1a094:	29ff      	cmp	r1, #255	; 0xff
   1a096:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a09a:	d1f0      	bne.n	1a07e <d_print_mod_list+0x206>
   1a09c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a0a0:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a0a4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a0a8:	4628      	mov	r0, r5
   1a0aa:	4798      	blx	r3
   1a0ac:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a0b0:	3301      	adds	r3, #1
   1a0b2:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a0b6:	2101      	movs	r1, #1
   1a0b8:	2300      	movs	r3, #0
   1a0ba:	e7e2      	b.n	1a082 <d_print_mod_list+0x20a>
   1a0bc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a0c0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a0c4:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1a0c8:	4628      	mov	r0, r5
   1a0ca:	4798      	blx	r3
   1a0cc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a0d0:	3301      	adds	r3, #1
   1a0d2:	4631      	mov	r1, r6
   1a0d4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a0d8:	2201      	movs	r2, #1
   1a0da:	e72f      	b.n	19f3c <d_print_mod_list+0xc4>
   1a0dc:	000244b8 	.word	0x000244b8
   1a0e0:	000244bc 	.word	0x000244bc
   1a0e4:	00024468 	.word	0x00024468
   1a0e8:	000244cc 	.word	0x000244cc

0001a0ec <d_print_array_type.isra.10>:
   1a0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0f0:	4604      	mov	r4, r0
   1a0f2:	460f      	mov	r7, r1
   1a0f4:	4690      	mov	r8, r2
   1a0f6:	b163      	cbz	r3, 1a112 <d_print_array_type.isra.10+0x26>
   1a0f8:	461e      	mov	r6, r3
   1a0fa:	461a      	mov	r2, r3
   1a0fc:	6893      	ldr	r3, [r2, #8]
   1a0fe:	b393      	cbz	r3, 1a166 <d_print_array_type.isra.10+0x7a>
   1a100:	6812      	ldr	r2, [r2, #0]
   1a102:	2a00      	cmp	r2, #0
   1a104:	d1fa      	bne.n	1a0fc <d_print_array_type.isra.10+0x10>
   1a106:	4613      	mov	r3, r2
   1a108:	4639      	mov	r1, r7
   1a10a:	4632      	mov	r2, r6
   1a10c:	4620      	mov	r0, r4
   1a10e:	f7ff feb3 	bl	19e78 <d_print_mod_list>
   1a112:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a116:	29ff      	cmp	r1, #255	; 0xff
   1a118:	f000 808d 	beq.w	1a236 <d_print_array_type.isra.10+0x14a>
   1a11c:	1c4b      	adds	r3, r1, #1
   1a11e:	2220      	movs	r2, #32
   1a120:	2bff      	cmp	r3, #255	; 0xff
   1a122:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a126:	5462      	strb	r2, [r4, r1]
   1a128:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a12c:	d068      	beq.n	1a200 <d_print_array_type.isra.10+0x114>
   1a12e:	225b      	movs	r2, #91	; 0x5b
   1a130:	1c59      	adds	r1, r3, #1
   1a132:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a136:	54e2      	strb	r2, [r4, r3]
   1a138:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a13c:	f8d8 2000 	ldr.w	r2, [r8]
   1a140:	b12a      	cbz	r2, 1a14e <d_print_array_type.isra.10+0x62>
   1a142:	4639      	mov	r1, r7
   1a144:	4620      	mov	r0, r4
   1a146:	f7ff fbb9 	bl	198bc <d_print_comp>
   1a14a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a14e:	29ff      	cmp	r1, #255	; 0xff
   1a150:	f000 8082 	beq.w	1a258 <d_print_array_type.isra.10+0x16c>
   1a154:	1c4a      	adds	r2, r1, #1
   1a156:	235d      	movs	r3, #93	; 0x5d
   1a158:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a15c:	5463      	strb	r3, [r4, r1]
   1a15e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a166:	6852      	ldr	r2, [r2, #4]
   1a168:	7812      	ldrb	r2, [r2, #0]
   1a16a:	2a2a      	cmp	r2, #42	; 0x2a
   1a16c:	d03f      	beq.n	1a1ee <d_print_array_type.isra.10+0x102>
   1a16e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a2a0 <d_print_array_type.isra.10+0x1b4>
   1a172:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a176:	461d      	mov	r5, r3
   1a178:	f109 0b02 	add.w	fp, r9, #2
   1a17c:	e00a      	b.n	1a194 <d_print_array_type.isra.10+0xa8>
   1a17e:	460b      	mov	r3, r1
   1a180:	45cb      	cmp	fp, r9
   1a182:	f101 0101 	add.w	r1, r1, #1
   1a186:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a18a:	f804 a003 	strb.w	sl, [r4, r3]
   1a18e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a192:	d01a      	beq.n	1a1ca <d_print_array_type.isra.10+0xde>
   1a194:	29ff      	cmp	r1, #255	; 0xff
   1a196:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a19a:	d1f0      	bne.n	1a17e <d_print_array_type.isra.10+0x92>
   1a19c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1a0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a1a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1a8:	4620      	mov	r0, r4
   1a1aa:	4798      	blx	r3
   1a1ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1b0:	3301      	adds	r3, #1
   1a1b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1b6:	2300      	movs	r3, #0
   1a1b8:	2101      	movs	r1, #1
   1a1ba:	45cb      	cmp	fp, r9
   1a1bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a1c0:	f804 a003 	strb.w	sl, [r4, r3]
   1a1c4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a1c8:	d1e4      	bne.n	1a194 <d_print_array_type.isra.10+0xa8>
   1a1ca:	2300      	movs	r3, #0
   1a1cc:	4632      	mov	r2, r6
   1a1ce:	4639      	mov	r1, r7
   1a1d0:	4620      	mov	r0, r4
   1a1d2:	f7ff fe51 	bl	19e78 <d_print_mod_list>
   1a1d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a1da:	2bff      	cmp	r3, #255	; 0xff
   1a1dc:	d04d      	beq.n	1a27a <d_print_array_type.isra.10+0x18e>
   1a1de:	1c59      	adds	r1, r3, #1
   1a1e0:	2229      	movs	r2, #41	; 0x29
   1a1e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a1e6:	54e2      	strb	r2, [r4, r3]
   1a1e8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a1ec:	e793      	b.n	1a116 <d_print_array_type.isra.10+0x2a>
   1a1ee:	4632      	mov	r2, r6
   1a1f0:	4639      	mov	r1, r7
   1a1f2:	4620      	mov	r0, r4
   1a1f4:	f7ff fe40 	bl	19e78 <d_print_mod_list>
   1a1f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a1fc:	2bff      	cmp	r3, #255	; 0xff
   1a1fe:	d196      	bne.n	1a12e <d_print_array_type.isra.10+0x42>
   1a200:	2200      	movs	r2, #0
   1a202:	4619      	mov	r1, r3
   1a204:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a208:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a20c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a210:	4620      	mov	r0, r4
   1a212:	4798      	blx	r3
   1a214:	235b      	movs	r3, #91	; 0x5b
   1a216:	7023      	strb	r3, [r4, #0]
   1a218:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a21c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a220:	f8d8 2000 	ldr.w	r2, [r8]
   1a224:	3301      	adds	r3, #1
   1a226:	2101      	movs	r1, #1
   1a228:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a22c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a230:	2a00      	cmp	r2, #0
   1a232:	d186      	bne.n	1a142 <d_print_array_type.isra.10+0x56>
   1a234:	e78e      	b.n	1a154 <d_print_array_type.isra.10+0x68>
   1a236:	2500      	movs	r5, #0
   1a238:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a23c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a240:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a244:	4620      	mov	r0, r4
   1a246:	4798      	blx	r3
   1a248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a24c:	3301      	adds	r3, #1
   1a24e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a252:	4629      	mov	r1, r5
   1a254:	2301      	movs	r3, #1
   1a256:	e762      	b.n	1a11e <d_print_array_type.isra.10+0x32>
   1a258:	2500      	movs	r5, #0
   1a25a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a25e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a262:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a266:	4620      	mov	r0, r4
   1a268:	4798      	blx	r3
   1a26a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a26e:	3301      	adds	r3, #1
   1a270:	4629      	mov	r1, r5
   1a272:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a276:	2201      	movs	r2, #1
   1a278:	e76d      	b.n	1a156 <d_print_array_type.isra.10+0x6a>
   1a27a:	2500      	movs	r5, #0
   1a27c:	4619      	mov	r1, r3
   1a27e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a282:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a286:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a28a:	4620      	mov	r0, r4
   1a28c:	4798      	blx	r3
   1a28e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a292:	1c5a      	adds	r2, r3, #1
   1a294:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a298:	462b      	mov	r3, r5
   1a29a:	2101      	movs	r1, #1
   1a29c:	e7a0      	b.n	1a1e0 <d_print_array_type.isra.10+0xf4>
   1a29e:	bf00      	nop
   1a2a0:	000246b0 	.word	0x000246b0

0001a2a4 <d_print_function_type.isra.11>:
   1a2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a2a8:	4604      	mov	r4, r0
   1a2aa:	b083      	sub	sp, #12
   1a2ac:	460e      	mov	r6, r1
   1a2ae:	4617      	mov	r7, r2
   1a2b0:	461d      	mov	r5, r3
   1a2b2:	b34b      	cbz	r3, 1a308 <d_print_function_type.isra.11+0x64>
   1a2b4:	689b      	ldr	r3, [r3, #8]
   1a2b6:	bb3b      	cbnz	r3, 1a308 <d_print_function_type.isra.11+0x64>
   1a2b8:	462a      	mov	r2, r5
   1a2ba:	2001      	movs	r0, #1
   1a2bc:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a488 <d_print_function_type.isra.11+0x1e4>
   1a2c0:	e006      	b.n	1a2d0 <d_print_function_type.isra.11+0x2c>
   1a2c2:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a2c6:	d15a      	bne.n	1a37e <d_print_function_type.isra.11+0xda>
   1a2c8:	6812      	ldr	r2, [r2, #0]
   1a2ca:	b1ea      	cbz	r2, 1a308 <d_print_function_type.isra.11+0x64>
   1a2cc:	6893      	ldr	r3, [r2, #8]
   1a2ce:	b9db      	cbnz	r3, 1a308 <d_print_function_type.isra.11+0x64>
   1a2d0:	6853      	ldr	r3, [r2, #4]
   1a2d2:	781b      	ldrb	r3, [r3, #0]
   1a2d4:	3b19      	subs	r3, #25
   1a2d6:	b2db      	uxtb	r3, r3
   1a2d8:	2b12      	cmp	r3, #18
   1a2da:	fa00 f103 	lsl.w	r1, r0, r3
   1a2de:	d8f3      	bhi.n	1a2c8 <d_print_function_type.isra.11+0x24>
   1a2e0:	ea11 0f0e 	tst.w	r1, lr
   1a2e4:	d0ed      	beq.n	1a2c2 <d_print_function_type.isra.11+0x1e>
   1a2e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a2ea:	2b20      	cmp	r3, #32
   1a2ec:	d04d      	beq.n	1a38a <d_print_function_type.isra.11+0xe6>
   1a2ee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a2f2:	2bff      	cmp	r3, #255	; 0xff
   1a2f4:	f000 80b4 	beq.w	1a460 <d_print_function_type.isra.11+0x1bc>
   1a2f8:	1c59      	adds	r1, r3, #1
   1a2fa:	2220      	movs	r2, #32
   1a2fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a300:	54e2      	strb	r2, [r4, r3]
   1a302:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a306:	e042      	b.n	1a38e <d_print_function_type.isra.11+0xea>
   1a308:	2300      	movs	r3, #0
   1a30a:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a30e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a312:	4631      	mov	r1, r6
   1a314:	462a      	mov	r2, r5
   1a316:	4620      	mov	r0, r4
   1a318:	f7ff fdae 	bl	19e78 <d_print_mod_list>
   1a31c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a320:	29ff      	cmp	r1, #255	; 0xff
   1a322:	d056      	beq.n	1a3d2 <d_print_function_type.isra.11+0x12e>
   1a324:	1c4b      	adds	r3, r1, #1
   1a326:	2228      	movs	r2, #40	; 0x28
   1a328:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a32c:	5462      	strb	r2, [r4, r1]
   1a32e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a332:	6838      	ldr	r0, [r7, #0]
   1a334:	b178      	cbz	r0, 1a356 <d_print_function_type.isra.11+0xb2>
   1a336:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a33a:	9000      	str	r0, [sp, #0]
   1a33c:	4602      	mov	r2, r0
   1a33e:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a342:	4631      	mov	r1, r6
   1a344:	4620      	mov	r0, r4
   1a346:	9301      	str	r3, [sp, #4]
   1a348:	f7fc fd14 	bl	16d74 <d_print_comp_inner>
   1a34c:	9a01      	ldr	r2, [sp, #4]
   1a34e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a352:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a356:	2bff      	cmp	r3, #255	; 0xff
   1a358:	d04d      	beq.n	1a3f6 <d_print_function_type.isra.11+0x152>
   1a35a:	1c5a      	adds	r2, r3, #1
   1a35c:	2029      	movs	r0, #41	; 0x29
   1a35e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a362:	4631      	mov	r1, r6
   1a364:	54e0      	strb	r0, [r4, r3]
   1a366:	462a      	mov	r2, r5
   1a368:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a36c:	2301      	movs	r3, #1
   1a36e:	4620      	mov	r0, r4
   1a370:	f7ff fd82 	bl	19e78 <d_print_mod_list>
   1a374:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a378:	b003      	add	sp, #12
   1a37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a37e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a382:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a386:	2a28      	cmp	r2, #40	; 0x28
   1a388:	d1af      	bne.n	1a2ea <d_print_function_type.isra.11+0x46>
   1a38a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a38e:	29ff      	cmp	r1, #255	; 0xff
   1a390:	d054      	beq.n	1a43c <d_print_function_type.isra.11+0x198>
   1a392:	1c4a      	adds	r2, r1, #1
   1a394:	2328      	movs	r3, #40	; 0x28
   1a396:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a39a:	5463      	strb	r3, [r4, r1]
   1a39c:	f04f 0900 	mov.w	r9, #0
   1a3a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a3a4:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a3a8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a3ac:	464b      	mov	r3, r9
   1a3ae:	462a      	mov	r2, r5
   1a3b0:	4631      	mov	r1, r6
   1a3b2:	4620      	mov	r0, r4
   1a3b4:	f7ff fd60 	bl	19e78 <d_print_mod_list>
   1a3b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a3bc:	2bff      	cmp	r3, #255	; 0xff
   1a3be:	d02c      	beq.n	1a41a <d_print_function_type.isra.11+0x176>
   1a3c0:	1c59      	adds	r1, r3, #1
   1a3c2:	2229      	movs	r2, #41	; 0x29
   1a3c4:	29ff      	cmp	r1, #255	; 0xff
   1a3c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a3ca:	54e2      	strb	r2, [r4, r3]
   1a3cc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a3d0:	d1a8      	bne.n	1a324 <d_print_function_type.isra.11+0x80>
   1a3d2:	f04f 0900 	mov.w	r9, #0
   1a3d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a3da:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a3de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a3e2:	4620      	mov	r0, r4
   1a3e4:	4798      	blx	r3
   1a3e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a3ea:	3301      	adds	r3, #1
   1a3ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3f0:	4649      	mov	r1, r9
   1a3f2:	2301      	movs	r3, #1
   1a3f4:	e797      	b.n	1a326 <d_print_function_type.isra.11+0x82>
   1a3f6:	2700      	movs	r7, #0
   1a3f8:	4619      	mov	r1, r3
   1a3fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a3fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a402:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a406:	4620      	mov	r0, r4
   1a408:	4798      	blx	r3
   1a40a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a40e:	1c5a      	adds	r2, r3, #1
   1a410:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a414:	463b      	mov	r3, r7
   1a416:	2201      	movs	r2, #1
   1a418:	e7a0      	b.n	1a35c <d_print_function_type.isra.11+0xb8>
   1a41a:	4619      	mov	r1, r3
   1a41c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a420:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a424:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a428:	4620      	mov	r0, r4
   1a42a:	4798      	blx	r3
   1a42c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a430:	1c5a      	adds	r2, r3, #1
   1a432:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a436:	464b      	mov	r3, r9
   1a438:	2101      	movs	r1, #1
   1a43a:	e7c2      	b.n	1a3c2 <d_print_function_type.isra.11+0x11e>
   1a43c:	f04f 0800 	mov.w	r8, #0
   1a440:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a444:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a448:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a44c:	4620      	mov	r0, r4
   1a44e:	4798      	blx	r3
   1a450:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a454:	3301      	adds	r3, #1
   1a456:	4641      	mov	r1, r8
   1a458:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a45c:	2201      	movs	r2, #1
   1a45e:	e799      	b.n	1a394 <d_print_function_type.isra.11+0xf0>
   1a460:	f04f 0800 	mov.w	r8, #0
   1a464:	4619      	mov	r1, r3
   1a466:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a46a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a46e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a472:	4620      	mov	r0, r4
   1a474:	4798      	blx	r3
   1a476:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a47a:	1c5a      	adds	r2, r3, #1
   1a47c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a480:	4643      	mov	r3, r8
   1a482:	2101      	movs	r1, #1
   1a484:	e739      	b.n	1a2fa <d_print_function_type.isra.11+0x56>
   1a486:	bf00      	nop
   1a488:	00043107 	.word	0x00043107

0001a48c <d_print_expr_op>:
   1a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a490:	7815      	ldrb	r5, [r2, #0]
   1a492:	2d31      	cmp	r5, #49	; 0x31
   1a494:	b082      	sub	sp, #8
   1a496:	4613      	mov	r3, r2
   1a498:	4604      	mov	r4, r0
   1a49a:	d00d      	beq.n	1a4b8 <d_print_expr_op+0x2c>
   1a49c:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a4a0:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a4a4:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a4a8:	f7fc fc64 	bl	16d74 <d_print_comp_inner>
   1a4ac:	9b01      	ldr	r3, [sp, #4]
   1a4ae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a4b2:	b002      	add	sp, #8
   1a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a4b8:	6853      	ldr	r3, [r2, #4]
   1a4ba:	689f      	ldr	r7, [r3, #8]
   1a4bc:	685d      	ldr	r5, [r3, #4]
   1a4be:	2f00      	cmp	r7, #0
   1a4c0:	d0f7      	beq.n	1a4b2 <d_print_expr_op+0x26>
   1a4c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a4c6:	442f      	add	r7, r5
   1a4c8:	f04f 0800 	mov.w	r8, #0
   1a4cc:	e008      	b.n	1a4e0 <d_print_expr_op+0x54>
   1a4ce:	460b      	mov	r3, r1
   1a4d0:	3101      	adds	r1, #1
   1a4d2:	42bd      	cmp	r5, r7
   1a4d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4d8:	54e6      	strb	r6, [r4, r3]
   1a4da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a4de:	d0e8      	beq.n	1a4b2 <d_print_expr_op+0x26>
   1a4e0:	29ff      	cmp	r1, #255	; 0xff
   1a4e2:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a4e6:	d1f2      	bne.n	1a4ce <d_print_expr_op+0x42>
   1a4e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a4f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4f4:	4620      	mov	r0, r4
   1a4f6:	4798      	blx	r3
   1a4f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4fc:	3301      	adds	r3, #1
   1a4fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a502:	2101      	movs	r1, #1
   1a504:	2300      	movs	r3, #0
   1a506:	e7e4      	b.n	1a4d2 <d_print_expr_op+0x46>

0001a508 <d_print_subexpr>:
   1a508:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a50a:	7813      	ldrb	r3, [r2, #0]
   1a50c:	2b01      	cmp	r3, #1
   1a50e:	b083      	sub	sp, #12
   1a510:	4615      	mov	r5, r2
   1a512:	460e      	mov	r6, r1
   1a514:	4604      	mov	r4, r0
   1a516:	d929      	bls.n	1a56c <d_print_subexpr+0x64>
   1a518:	2b30      	cmp	r3, #48	; 0x30
   1a51a:	d027      	beq.n	1a56c <d_print_subexpr+0x64>
   1a51c:	2b06      	cmp	r3, #6
   1a51e:	d025      	beq.n	1a56c <d_print_subexpr+0x64>
   1a520:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a524:	29ff      	cmp	r1, #255	; 0xff
   1a526:	d031      	beq.n	1a58c <d_print_subexpr+0x84>
   1a528:	1c4a      	adds	r2, r1, #1
   1a52a:	2328      	movs	r3, #40	; 0x28
   1a52c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a530:	5463      	strb	r3, [r4, r1]
   1a532:	462a      	mov	r2, r5
   1a534:	4631      	mov	r1, r6
   1a536:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a53a:	4620      	mov	r0, r4
   1a53c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a540:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a544:	9301      	str	r3, [sp, #4]
   1a546:	9500      	str	r5, [sp, #0]
   1a548:	f7fc fc14 	bl	16d74 <d_print_comp_inner>
   1a54c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a550:	9b01      	ldr	r3, [sp, #4]
   1a552:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a556:	29ff      	cmp	r1, #255	; 0xff
   1a558:	d028      	beq.n	1a5ac <d_print_subexpr+0xa4>
   1a55a:	1c4a      	adds	r2, r1, #1
   1a55c:	2329      	movs	r3, #41	; 0x29
   1a55e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a562:	5463      	strb	r3, [r4, r1]
   1a564:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a568:	b003      	add	sp, #12
   1a56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a56c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a570:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a574:	4631      	mov	r1, r6
   1a576:	462a      	mov	r2, r5
   1a578:	4620      	mov	r0, r4
   1a57a:	9301      	str	r3, [sp, #4]
   1a57c:	9500      	str	r5, [sp, #0]
   1a57e:	f7fc fbf9 	bl	16d74 <d_print_comp_inner>
   1a582:	9b01      	ldr	r3, [sp, #4]
   1a584:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a588:	b003      	add	sp, #12
   1a58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a58c:	2700      	movs	r7, #0
   1a58e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a592:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a596:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a59a:	4798      	blx	r3
   1a59c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5a0:	3301      	adds	r3, #1
   1a5a2:	4639      	mov	r1, r7
   1a5a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5a8:	2201      	movs	r2, #1
   1a5aa:	e7be      	b.n	1a52a <d_print_subexpr+0x22>
   1a5ac:	2500      	movs	r5, #0
   1a5ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a5b6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a5ba:	4620      	mov	r0, r4
   1a5bc:	4798      	blx	r3
   1a5be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5c2:	3301      	adds	r3, #1
   1a5c4:	4629      	mov	r1, r5
   1a5c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5ca:	2201      	movs	r2, #1
   1a5cc:	e7c6      	b.n	1a55c <d_print_subexpr+0x54>
   1a5ce:	bf00      	nop

0001a5d0 <d_maybe_print_fold_expression.isra.15>:
   1a5d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5d4:	6852      	ldr	r2, [r2, #4]
   1a5d6:	6812      	ldr	r2, [r2, #0]
   1a5d8:	7815      	ldrb	r5, [r2, #0]
   1a5da:	2d66      	cmp	r5, #102	; 0x66
   1a5dc:	d002      	beq.n	1a5e4 <d_maybe_print_fold_expression.isra.15+0x14>
   1a5de:	2000      	movs	r0, #0
   1a5e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5e4:	681b      	ldr	r3, [r3, #0]
   1a5e6:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a5ea:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a5ee:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a5f2:	f899 3000 	ldrb.w	r3, [r9]
   1a5f6:	2b3b      	cmp	r3, #59	; 0x3b
   1a5f8:	f04f 33ff 	mov.w	r3, #4294967295
   1a5fc:	bf04      	itt	eq
   1a5fe:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a602:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a606:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a60a:	7853      	ldrb	r3, [r2, #1]
   1a60c:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a610:	bf18      	it	ne
   1a612:	2500      	movne	r5, #0
   1a614:	460e      	mov	r6, r1
   1a616:	4604      	mov	r4, r0
   1a618:	2b26      	cmp	r3, #38	; 0x26
   1a61a:	d82b      	bhi.n	1a674 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a61c:	e8df f003 	tbb	[pc, r3]
   1a620:	2a2a2a90 	.word	0x2a2a2a90
   1a624:	2a902a2a 	.word	0x2a902a2a
   1a628:	2a2a2a2a 	.word	0x2a2a2a2a
   1a62c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a630:	2a2a2a2a 	.word	0x2a2a2a2a
   1a634:	2a2a2a2a 	.word	0x2a2a2a2a
   1a638:	2a2a2a2a 	.word	0x2a2a2a2a
   1a63c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a640:	2a2a2a6a 	.word	0x2a2a2a6a
   1a644:	2a2a      	.short	0x2a2a
   1a646:	2f          	.byte	0x2f
   1a647:	00          	.byte	0x00
   1a648:	4642      	mov	r2, r8
   1a64a:	4631      	mov	r1, r6
   1a64c:	4620      	mov	r0, r4
   1a64e:	f7ff ff1d 	bl	1a48c <d_print_expr_op>
   1a652:	464a      	mov	r2, r9
   1a654:	4631      	mov	r1, r6
   1a656:	4620      	mov	r0, r4
   1a658:	f7ff ff56 	bl	1a508 <d_print_subexpr>
   1a65c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a660:	29ff      	cmp	r1, #255	; 0xff
   1a662:	f000 80b2 	beq.w	1a7ca <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a666:	1c4a      	adds	r2, r1, #1
   1a668:	2329      	movs	r3, #41	; 0x29
   1a66a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a66e:	5463      	strb	r3, [r4, r1]
   1a670:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a674:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a678:	2001      	movs	r0, #1
   1a67a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a67e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a682:	29ff      	cmp	r1, #255	; 0xff
   1a684:	f000 80c5 	beq.w	1a812 <d_maybe_print_fold_expression.isra.15+0x242>
   1a688:	1c4a      	adds	r2, r1, #1
   1a68a:	2328      	movs	r3, #40	; 0x28
   1a68c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a690:	4620      	mov	r0, r4
   1a692:	5463      	strb	r3, [r4, r1]
   1a694:	464a      	mov	r2, r9
   1a696:	4631      	mov	r1, r6
   1a698:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a69c:	4d65      	ldr	r5, [pc, #404]	; (1a834 <d_maybe_print_fold_expression.isra.15+0x264>)
   1a69e:	f7ff ff33 	bl	1a508 <d_print_subexpr>
   1a6a2:	4642      	mov	r2, r8
   1a6a4:	4631      	mov	r1, r6
   1a6a6:	4620      	mov	r0, r4
   1a6a8:	f7ff fef0 	bl	1a48c <d_print_expr_op>
   1a6ac:	f105 0904 	add.w	r9, r5, #4
   1a6b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a6b4:	f04f 0800 	mov.w	r8, #0
   1a6b8:	e008      	b.n	1a6cc <d_maybe_print_fold_expression.isra.15+0xfc>
   1a6ba:	460b      	mov	r3, r1
   1a6bc:	3101      	adds	r1, #1
   1a6be:	45a9      	cmp	r9, r5
   1a6c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a6c4:	54e6      	strb	r6, [r4, r3]
   1a6c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a6ca:	d0d3      	beq.n	1a674 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a6cc:	29ff      	cmp	r1, #255	; 0xff
   1a6ce:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a6d2:	d1f2      	bne.n	1a6ba <d_maybe_print_fold_expression.isra.15+0xea>
   1a6d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6d8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a6dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6e0:	4620      	mov	r0, r4
   1a6e2:	4798      	blx	r3
   1a6e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6e8:	3301      	adds	r3, #1
   1a6ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6ee:	2101      	movs	r1, #1
   1a6f0:	2300      	movs	r3, #0
   1a6f2:	e7e4      	b.n	1a6be <d_maybe_print_fold_expression.isra.15+0xee>
   1a6f4:	4d50      	ldr	r5, [pc, #320]	; (1a838 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a6f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a6fa:	f105 0b04 	add.w	fp, r5, #4
   1a6fe:	e009      	b.n	1a714 <d_maybe_print_fold_expression.isra.15+0x144>
   1a700:	460b      	mov	r3, r1
   1a702:	3101      	adds	r1, #1
   1a704:	455d      	cmp	r5, fp
   1a706:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a70a:	f804 a003 	strb.w	sl, [r4, r3]
   1a70e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a712:	d099      	beq.n	1a648 <d_maybe_print_fold_expression.isra.15+0x78>
   1a714:	29ff      	cmp	r1, #255	; 0xff
   1a716:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a71a:	d1f1      	bne.n	1a700 <d_maybe_print_fold_expression.isra.15+0x130>
   1a71c:	f04f 0300 	mov.w	r3, #0
   1a720:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a724:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a728:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a72c:	4620      	mov	r0, r4
   1a72e:	4798      	blx	r3
   1a730:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a734:	3301      	adds	r3, #1
   1a736:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a73a:	2101      	movs	r1, #1
   1a73c:	2300      	movs	r3, #0
   1a73e:	e7e1      	b.n	1a704 <d_maybe_print_fold_expression.isra.15+0x134>
   1a740:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a744:	2bff      	cmp	r3, #255	; 0xff
   1a746:	d051      	beq.n	1a7ec <d_maybe_print_fold_expression.isra.15+0x21c>
   1a748:	1c59      	adds	r1, r3, #1
   1a74a:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a74e:	464a      	mov	r2, r9
   1a750:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a754:	4620      	mov	r0, r4
   1a756:	f804 e003 	strb.w	lr, [r4, r3]
   1a75a:	4631      	mov	r1, r6
   1a75c:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a760:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a83c <d_maybe_print_fold_expression.isra.15+0x26c>
   1a764:	f7ff fed0 	bl	1a508 <d_print_subexpr>
   1a768:	4631      	mov	r1, r6
   1a76a:	4642      	mov	r2, r8
   1a76c:	4620      	mov	r0, r4
   1a76e:	f7ff fe8d 	bl	1a48c <d_print_expr_op>
   1a772:	f109 0b03 	add.w	fp, r9, #3
   1a776:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a77a:	e009      	b.n	1a790 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a77c:	460b      	mov	r3, r1
   1a77e:	3101      	adds	r1, #1
   1a780:	45cb      	cmp	fp, r9
   1a782:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a786:	f804 a003 	strb.w	sl, [r4, r3]
   1a78a:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a78e:	d015      	beq.n	1a7bc <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a790:	29ff      	cmp	r1, #255	; 0xff
   1a792:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a796:	d1f1      	bne.n	1a77c <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a798:	f04f 0300 	mov.w	r3, #0
   1a79c:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a7a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a7a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a7a8:	4620      	mov	r0, r4
   1a7aa:	4798      	blx	r3
   1a7ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7b0:	3301      	adds	r3, #1
   1a7b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a7b6:	2101      	movs	r1, #1
   1a7b8:	2300      	movs	r3, #0
   1a7ba:	e7e1      	b.n	1a780 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a7bc:	4642      	mov	r2, r8
   1a7be:	4631      	mov	r1, r6
   1a7c0:	4620      	mov	r0, r4
   1a7c2:	f7ff fe63 	bl	1a48c <d_print_expr_op>
   1a7c6:	462a      	mov	r2, r5
   1a7c8:	e744      	b.n	1a654 <d_maybe_print_fold_expression.isra.15+0x84>
   1a7ca:	2500      	movs	r5, #0
   1a7cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a7d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a7d4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a7d8:	4620      	mov	r0, r4
   1a7da:	4798      	blx	r3
   1a7dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7e0:	3301      	adds	r3, #1
   1a7e2:	4629      	mov	r1, r5
   1a7e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a7e8:	2201      	movs	r2, #1
   1a7ea:	e73d      	b.n	1a668 <d_maybe_print_fold_expression.isra.15+0x98>
   1a7ec:	f04f 0a00 	mov.w	sl, #0
   1a7f0:	4619      	mov	r1, r3
   1a7f2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a7f6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a7fa:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a7fe:	4798      	blx	r3
   1a800:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a804:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a808:	1c5a      	adds	r2, r3, #1
   1a80a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a80e:	4653      	mov	r3, sl
   1a810:	e79a      	b.n	1a748 <d_maybe_print_fold_expression.isra.15+0x178>
   1a812:	2500      	movs	r5, #0
   1a814:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a818:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a81c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a820:	4798      	blx	r3
   1a822:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a826:	3301      	adds	r3, #1
   1a828:	4629      	mov	r1, r5
   1a82a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a82e:	2201      	movs	r2, #1
   1a830:	e72b      	b.n	1a68a <d_maybe_print_fold_expression.isra.15+0xba>
   1a832:	bf00      	nop
   1a834:	0002479c 	.word	0x0002479c
   1a838:	00024794 	.word	0x00024794
   1a83c:	00022be4 	.word	0x00022be4

0001a840 <d_demangle_callback.constprop.17>:
   1a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a844:	b0e7      	sub	sp, #412	; 0x19c
   1a846:	f890 9000 	ldrb.w	r9, [r0]
   1a84a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a84e:	af00      	add	r7, sp, #0
   1a850:	4605      	mov	r5, r0
   1a852:	4688      	mov	r8, r1
   1a854:	4616      	mov	r6, r2
   1a856:	f000 80f1 	beq.w	1aa3c <d_demangle_callback.constprop.17+0x1fc>
   1a85a:	2208      	movs	r2, #8
   1a85c:	49bd      	ldr	r1, [pc, #756]	; (1ab54 <d_demangle_callback.constprop.17+0x314>)
   1a85e:	4628      	mov	r0, r5
   1a860:	f004 fb3c 	bl	1eedc <strncmp>
   1a864:	b948      	cbnz	r0, 1a87a <d_demangle_callback.constprop.17+0x3a>
   1a866:	7a2b      	ldrb	r3, [r5, #8]
   1a868:	2b2e      	cmp	r3, #46	; 0x2e
   1a86a:	f000 80d6 	beq.w	1aa1a <d_demangle_callback.constprop.17+0x1da>
   1a86e:	2b5f      	cmp	r3, #95	; 0x5f
   1a870:	f000 80d3 	beq.w	1aa1a <d_demangle_callback.constprop.17+0x1da>
   1a874:	2b24      	cmp	r3, #36	; 0x24
   1a876:	f000 80d0 	beq.w	1aa1a <d_demangle_callback.constprop.17+0x1da>
   1a87a:	f04f 0a00 	mov.w	sl, #0
   1a87e:	4628      	mov	r0, r5
   1a880:	f004 fabe 	bl	1ee00 <strlen>
   1a884:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a888:	0083      	lsls	r3, r0, #2
   1a88a:	eb03 020b 	add.w	r2, r3, fp
   1a88e:	0092      	lsls	r2, r2, #2
   1a890:	3208      	adds	r2, #8
   1a892:	330a      	adds	r3, #10
   1a894:	ebad 0d02 	sub.w	sp, sp, r2
   1a898:	f023 0307 	bic.w	r3, r3, #7
   1a89c:	2400      	movs	r4, #0
   1a89e:	466a      	mov	r2, sp
   1a8a0:	1829      	adds	r1, r5, r0
   1a8a2:	ebad 0d03 	sub.w	sp, sp, r3
   1a8a6:	f1ba 0f01 	cmp.w	sl, #1
   1a8aa:	f04f 0311 	mov.w	r3, #17
   1a8ae:	627a      	str	r2, [r7, #36]	; 0x24
   1a8b0:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a8b4:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a8b8:	617d      	str	r5, [r7, #20]
   1a8ba:	623d      	str	r5, [r7, #32]
   1a8bc:	63b8      	str	r0, [r7, #56]	; 0x38
   1a8be:	61b9      	str	r1, [r7, #24]
   1a8c0:	61fb      	str	r3, [r7, #28]
   1a8c2:	62bc      	str	r4, [r7, #40]	; 0x28
   1a8c4:	637c      	str	r4, [r7, #52]	; 0x34
   1a8c6:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a8c8:	643c      	str	r4, [r7, #64]	; 0x40
   1a8ca:	647c      	str	r4, [r7, #68]	; 0x44
   1a8cc:	64bc      	str	r4, [r7, #72]	; 0x48
   1a8ce:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a8d0:	f000 80bb 	beq.w	1aa4a <d_demangle_callback.constprop.17+0x20a>
   1a8d4:	f0c0 80cf 	bcc.w	1aa76 <d_demangle_callback.constprop.17+0x236>
   1a8d8:	7aeb      	ldrb	r3, [r5, #11]
   1a8da:	f1ba 0f02 	cmp.w	sl, #2
   1a8de:	bf18      	it	ne
   1a8e0:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a8e4:	f105 0a0b 	add.w	sl, r5, #11
   1a8e8:	bf08      	it	eq
   1a8ea:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a8ee:	2b5f      	cmp	r3, #95	; 0x5f
   1a8f0:	f8c7 a020 	str.w	sl, [r7, #32]
   1a8f4:	f000 80b2 	beq.w	1aa5c <d_demangle_callback.constprop.17+0x21c>
   1a8f8:	4650      	mov	r0, sl
   1a8fa:	607a      	str	r2, [r7, #4]
   1a8fc:	f004 fa80 	bl	1ee00 <strlen>
   1a900:	f1bb 0f00 	cmp.w	fp, #0
   1a904:	687a      	ldr	r2, [r7, #4]
   1a906:	f340 80bf 	ble.w	1aa88 <d_demangle_callback.constprop.17+0x248>
   1a90a:	2301      	movs	r3, #1
   1a90c:	62bb      	str	r3, [r7, #40]	; 0x28
   1a90e:	2800      	cmp	r0, #0
   1a910:	f000 80ba 	beq.w	1aa88 <d_demangle_callback.constprop.17+0x248>
   1a914:	2300      	movs	r3, #0
   1a916:	f8c2 a004 	str.w	sl, [r2, #4]
   1a91a:	6090      	str	r0, [r2, #8]
   1a91c:	7013      	strb	r3, [r2, #0]
   1a91e:	4649      	mov	r1, r9
   1a920:	2300      	movs	r3, #0
   1a922:	f107 0014 	add.w	r0, r7, #20
   1a926:	f7f9 fe31 	bl	1458c <d_make_comp>
   1a92a:	6a3c      	ldr	r4, [r7, #32]
   1a92c:	4605      	mov	r5, r0
   1a92e:	4620      	mov	r0, r4
   1a930:	f004 fa66 	bl	1ee00 <strlen>
   1a934:	1823      	adds	r3, r4, r0
   1a936:	623b      	str	r3, [r7, #32]
   1a938:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a93c:	f1b9 0f00 	cmp.w	r9, #0
   1a940:	f040 8086 	bne.w	1aa50 <d_demangle_callback.constprop.17+0x210>
   1a944:	2d00      	cmp	r5, #0
   1a946:	f000 8083 	beq.w	1aa50 <d_demangle_callback.constprop.17+0x210>
   1a94a:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1a94e:	462a      	mov	r2, r5
   1a950:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1a954:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1a958:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1a95c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1a960:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1a964:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1a968:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1a96c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a970:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1a974:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1a978:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1a97c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1a980:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1a984:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1a988:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1a98c:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1a990:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1a994:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1a998:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1a99c:	f7f9 fec4 	bl	14728 <d_count_templates_scopes>
   1a9a0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1a9a4:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1a9a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a9ac:	613b      	str	r3, [r7, #16]
   1a9ae:	00d0      	lsls	r0, r2, #3
   1a9b0:	fb01 f102 	mul.w	r1, r1, r2
   1a9b4:	3008      	adds	r0, #8
   1a9b6:	46e8      	mov	r8, sp
   1a9b8:	00ca      	lsls	r2, r1, #3
   1a9ba:	ebad 0d00 	sub.w	sp, sp, r0
   1a9be:	4668      	mov	r0, sp
   1a9c0:	3208      	adds	r2, #8
   1a9c2:	ebad 0d02 	sub.w	sp, sp, r2
   1a9c6:	f107 060c 	add.w	r6, r7, #12
   1a9ca:	462a      	mov	r2, r5
   1a9cc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1a9d0:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1a9d4:	4620      	mov	r0, r4
   1a9d6:	2111      	movs	r1, #17
   1a9d8:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1a9dc:	60fd      	str	r5, [r7, #12]
   1a9de:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1a9e2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1a9e6:	f7fc f9c5 	bl	16d74 <d_print_comp_inner>
   1a9ea:	693b      	ldr	r3, [r7, #16]
   1a9ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a9f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a9f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a9f8:	f804 9001 	strb.w	r9, [r4, r1]
   1a9fc:	4620      	mov	r0, r4
   1a9fe:	46c5      	mov	sp, r8
   1aa00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aa04:	4798      	blx	r3
   1aa06:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1aa0a:	fab0 f080 	clz	r0, r0
   1aa0e:	0940      	lsrs	r0, r0, #5
   1aa10:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1aa14:	46bd      	mov	sp, r7
   1aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa1a:	7a6b      	ldrb	r3, [r5, #9]
   1aa1c:	2b44      	cmp	r3, #68	; 0x44
   1aa1e:	d002      	beq.n	1aa26 <d_demangle_callback.constprop.17+0x1e6>
   1aa20:	2b49      	cmp	r3, #73	; 0x49
   1aa22:	f47f af2a 	bne.w	1a87a <d_demangle_callback.constprop.17+0x3a>
   1aa26:	7aaa      	ldrb	r2, [r5, #10]
   1aa28:	2a5f      	cmp	r2, #95	; 0x5f
   1aa2a:	f47f af26 	bne.w	1a87a <d_demangle_callback.constprop.17+0x3a>
   1aa2e:	2b49      	cmp	r3, #73	; 0x49
   1aa30:	bf14      	ite	ne
   1aa32:	f04f 0a03 	movne.w	sl, #3
   1aa36:	f04f 0a02 	moveq.w	sl, #2
   1aa3a:	e720      	b.n	1a87e <d_demangle_callback.constprop.17+0x3e>
   1aa3c:	7843      	ldrb	r3, [r0, #1]
   1aa3e:	2b5a      	cmp	r3, #90	; 0x5a
   1aa40:	f47f af0b 	bne.w	1a85a <d_demangle_callback.constprop.17+0x1a>
   1aa44:	f04f 0a01 	mov.w	sl, #1
   1aa48:	e719      	b.n	1a87e <d_demangle_callback.constprop.17+0x3e>
   1aa4a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1aa4e:	d01d      	beq.n	1aa8c <d_demangle_callback.constprop.17+0x24c>
   1aa50:	2000      	movs	r0, #0
   1aa52:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1aa56:	46bd      	mov	sp, r7
   1aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa5c:	7b2b      	ldrb	r3, [r5, #12]
   1aa5e:	2b5a      	cmp	r3, #90	; 0x5a
   1aa60:	f47f af4a 	bne.w	1a8f8 <d_demangle_callback.constprop.17+0xb8>
   1aa64:	350d      	adds	r5, #13
   1aa66:	4621      	mov	r1, r4
   1aa68:	f107 0014 	add.w	r0, r7, #20
   1aa6c:	623d      	str	r5, [r7, #32]
   1aa6e:	f7fb fe35 	bl	166dc <d_encoding>
   1aa72:	4602      	mov	r2, r0
   1aa74:	e753      	b.n	1a91e <d_demangle_callback.constprop.17+0xde>
   1aa76:	f107 0014 	add.w	r0, r7, #20
   1aa7a:	f7fb f817 	bl	15aac <d_type>
   1aa7e:	6a3b      	ldr	r3, [r7, #32]
   1aa80:	4605      	mov	r5, r0
   1aa82:	f893 9000 	ldrb.w	r9, [r3]
   1aa86:	e759      	b.n	1a93c <d_demangle_callback.constprop.17+0xfc>
   1aa88:	2200      	movs	r2, #0
   1aa8a:	e748      	b.n	1a91e <d_demangle_callback.constprop.17+0xde>
   1aa8c:	786b      	ldrb	r3, [r5, #1]
   1aa8e:	2b5a      	cmp	r3, #90	; 0x5a
   1aa90:	d1de      	bne.n	1aa50 <d_demangle_callback.constprop.17+0x210>
   1aa92:	3502      	adds	r5, #2
   1aa94:	4651      	mov	r1, sl
   1aa96:	f107 0014 	add.w	r0, r7, #20
   1aa9a:	623d      	str	r5, [r7, #32]
   1aa9c:	f7fb fe1e 	bl	166dc <d_encoding>
   1aaa0:	69fb      	ldr	r3, [r7, #28]
   1aaa2:	07db      	lsls	r3, r3, #31
   1aaa4:	4605      	mov	r5, r0
   1aaa6:	d551      	bpl.n	1ab4c <d_demangle_callback.constprop.17+0x30c>
   1aaa8:	6a38      	ldr	r0, [r7, #32]
   1aaaa:	f890 9000 	ldrb.w	r9, [r0]
   1aaae:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1aab2:	f47f af43 	bne.w	1a93c <d_demangle_callback.constprop.17+0xfc>
   1aab6:	7843      	ldrb	r3, [r0, #1]
   1aab8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1aabc:	2a19      	cmp	r2, #25
   1aabe:	d939      	bls.n	1ab34 <d_demangle_callback.constprop.17+0x2f4>
   1aac0:	2b5f      	cmp	r3, #95	; 0x5f
   1aac2:	d037      	beq.n	1ab34 <d_demangle_callback.constprop.17+0x2f4>
   1aac4:	3b30      	subs	r3, #48	; 0x30
   1aac6:	2b09      	cmp	r3, #9
   1aac8:	d840      	bhi.n	1ab4c <d_demangle_callback.constprop.17+0x30c>
   1aaca:	7803      	ldrb	r3, [r0, #0]
   1aacc:	4602      	mov	r2, r0
   1aace:	2b2e      	cmp	r3, #46	; 0x2e
   1aad0:	d112      	bne.n	1aaf8 <d_demangle_callback.constprop.17+0x2b8>
   1aad2:	7853      	ldrb	r3, [r2, #1]
   1aad4:	3b30      	subs	r3, #48	; 0x30
   1aad6:	2b09      	cmp	r3, #9
   1aad8:	d80e      	bhi.n	1aaf8 <d_demangle_callback.constprop.17+0x2b8>
   1aada:	7893      	ldrb	r3, [r2, #2]
   1aadc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aae0:	2909      	cmp	r1, #9
   1aae2:	f102 0202 	add.w	r2, r2, #2
   1aae6:	d8f2      	bhi.n	1aace <d_demangle_callback.constprop.17+0x28e>
   1aae8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1aaec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1aaf0:	2909      	cmp	r1, #9
   1aaf2:	d9f9      	bls.n	1aae8 <d_demangle_callback.constprop.17+0x2a8>
   1aaf4:	2b2e      	cmp	r3, #46	; 0x2e
   1aaf6:	d0ec      	beq.n	1aad2 <d_demangle_callback.constprop.17+0x292>
   1aaf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aafc:	623a      	str	r2, [r7, #32]
   1aafe:	4299      	cmp	r1, r3
   1ab00:	da16      	bge.n	1ab30 <d_demangle_callback.constprop.17+0x2f0>
   1ab02:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1ab06:	1c4b      	adds	r3, r1, #1
   1ab08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1ab0c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ab0e:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1ab12:	d00d      	beq.n	1ab30 <d_demangle_callback.constprop.17+0x2f0>
   1ab14:	1a12      	subs	r2, r2, r0
   1ab16:	d00b      	beq.n	1ab30 <d_demangle_callback.constprop.17+0x2f0>
   1ab18:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1ab1c:	6058      	str	r0, [r3, #4]
   1ab1e:	609a      	str	r2, [r3, #8]
   1ab20:	462a      	mov	r2, r5
   1ab22:	214d      	movs	r1, #77	; 0x4d
   1ab24:	f107 0014 	add.w	r0, r7, #20
   1ab28:	f7f9 fd30 	bl	1458c <d_make_comp>
   1ab2c:	4605      	mov	r5, r0
   1ab2e:	e7bb      	b.n	1aaa8 <d_demangle_callback.constprop.17+0x268>
   1ab30:	2300      	movs	r3, #0
   1ab32:	e7f5      	b.n	1ab20 <d_demangle_callback.constprop.17+0x2e0>
   1ab34:	1c81      	adds	r1, r0, #2
   1ab36:	460a      	mov	r2, r1
   1ab38:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ab3c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1ab40:	f1be 0f19 	cmp.w	lr, #25
   1ab44:	d9f7      	bls.n	1ab36 <d_demangle_callback.constprop.17+0x2f6>
   1ab46:	2b5f      	cmp	r3, #95	; 0x5f
   1ab48:	d0f5      	beq.n	1ab36 <d_demangle_callback.constprop.17+0x2f6>
   1ab4a:	e7c0      	b.n	1aace <d_demangle_callback.constprop.17+0x28e>
   1ab4c:	6a3b      	ldr	r3, [r7, #32]
   1ab4e:	f893 9000 	ldrb.w	r9, [r3]
   1ab52:	e6f3      	b.n	1a93c <d_demangle_callback.constprop.17+0xfc>
   1ab54:	00024444 	.word	0x00024444

0001ab58 <__cxa_demangle>:
   1ab58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab5c:	b084      	sub	sp, #16
   1ab5e:	b378      	cbz	r0, 1abc0 <__cxa_demangle+0x68>
   1ab60:	b101      	cbz	r1, 1ab64 <__cxa_demangle+0xc>
   1ab62:	b36a      	cbz	r2, 1abc0 <__cxa_demangle+0x68>
   1ab64:	2400      	movs	r4, #0
   1ab66:	4616      	mov	r6, r2
   1ab68:	460d      	mov	r5, r1
   1ab6a:	466a      	mov	r2, sp
   1ab6c:	4927      	ldr	r1, [pc, #156]	; (1ac0c <__cxa_demangle+0xb4>)
   1ab6e:	9400      	str	r4, [sp, #0]
   1ab70:	461f      	mov	r7, r3
   1ab72:	9401      	str	r4, [sp, #4]
   1ab74:	9402      	str	r4, [sp, #8]
   1ab76:	9403      	str	r4, [sp, #12]
   1ab78:	f7ff fe62 	bl	1a840 <d_demangle_callback.constprop.17>
   1ab7c:	2800      	cmp	r0, #0
   1ab7e:	d03f      	beq.n	1ac00 <__cxa_demangle+0xa8>
   1ab80:	9b03      	ldr	r3, [sp, #12]
   1ab82:	b1d3      	cbz	r3, 1abba <__cxa_demangle+0x62>
   1ab84:	f04f 0801 	mov.w	r8, #1
   1ab88:	9c00      	ldr	r4, [sp, #0]
   1ab8a:	b35c      	cbz	r4, 1abe4 <__cxa_demangle+0x8c>
   1ab8c:	b33d      	cbz	r5, 1abde <__cxa_demangle+0x86>
   1ab8e:	4620      	mov	r0, r4
   1ab90:	f004 f936 	bl	1ee00 <strlen>
   1ab94:	6833      	ldr	r3, [r6, #0]
   1ab96:	4298      	cmp	r0, r3
   1ab98:	d21b      	bcs.n	1abd2 <__cxa_demangle+0x7a>
   1ab9a:	1c42      	adds	r2, r0, #1
   1ab9c:	4621      	mov	r1, r4
   1ab9e:	4628      	mov	r0, r5
   1aba0:	f003 fbe6 	bl	1e370 <memcpy>
   1aba4:	4620      	mov	r0, r4
   1aba6:	f003 f893 	bl	1dcd0 <free>
   1abaa:	462c      	mov	r4, r5
   1abac:	b10f      	cbz	r7, 1abb2 <__cxa_demangle+0x5a>
   1abae:	2300      	movs	r3, #0
   1abb0:	603b      	str	r3, [r7, #0]
   1abb2:	4620      	mov	r0, r4
   1abb4:	b004      	add	sp, #16
   1abb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abba:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1abbe:	e7e3      	b.n	1ab88 <__cxa_demangle+0x30>
   1abc0:	b113      	cbz	r3, 1abc8 <__cxa_demangle+0x70>
   1abc2:	f06f 0202 	mvn.w	r2, #2
   1abc6:	601a      	str	r2, [r3, #0]
   1abc8:	2400      	movs	r4, #0
   1abca:	4620      	mov	r0, r4
   1abcc:	b004      	add	sp, #16
   1abce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abd2:	4628      	mov	r0, r5
   1abd4:	f003 f87c 	bl	1dcd0 <free>
   1abd8:	f8c6 8000 	str.w	r8, [r6]
   1abdc:	e7e6      	b.n	1abac <__cxa_demangle+0x54>
   1abde:	2e00      	cmp	r6, #0
   1abe0:	d1fa      	bne.n	1abd8 <__cxa_demangle+0x80>
   1abe2:	e7e3      	b.n	1abac <__cxa_demangle+0x54>
   1abe4:	2f00      	cmp	r7, #0
   1abe6:	d0ef      	beq.n	1abc8 <__cxa_demangle+0x70>
   1abe8:	f1b8 0f01 	cmp.w	r8, #1
   1abec:	d004      	beq.n	1abf8 <__cxa_demangle+0xa0>
   1abee:	f06f 0301 	mvn.w	r3, #1
   1abf2:	603b      	str	r3, [r7, #0]
   1abf4:	2400      	movs	r4, #0
   1abf6:	e7dc      	b.n	1abb2 <__cxa_demangle+0x5a>
   1abf8:	f04f 33ff 	mov.w	r3, #4294967295
   1abfc:	603b      	str	r3, [r7, #0]
   1abfe:	e7d8      	b.n	1abb2 <__cxa_demangle+0x5a>
   1ac00:	9800      	ldr	r0, [sp, #0]
   1ac02:	f003 f865 	bl	1dcd0 <free>
   1ac06:	2f00      	cmp	r7, #0
   1ac08:	d1f1      	bne.n	1abee <__cxa_demangle+0x96>
   1ac0a:	e7dd      	b.n	1abc8 <__cxa_demangle+0x70>
   1ac0c:	00014cb1 	.word	0x00014cb1

0001ac10 <__gcclibcxx_demangle_callback>:
   1ac10:	b160      	cbz	r0, 1ac2c <__gcclibcxx_demangle_callback+0x1c>
   1ac12:	b508      	push	{r3, lr}
   1ac14:	b139      	cbz	r1, 1ac26 <__gcclibcxx_demangle_callback+0x16>
   1ac16:	f7ff fe13 	bl	1a840 <d_demangle_callback.constprop.17>
   1ac1a:	2800      	cmp	r0, #0
   1ac1c:	bf0c      	ite	eq
   1ac1e:	f06f 0001 	mvneq.w	r0, #1
   1ac22:	2000      	movne	r0, #0
   1ac24:	bd08      	pop	{r3, pc}
   1ac26:	f06f 0002 	mvn.w	r0, #2
   1ac2a:	bd08      	pop	{r3, pc}
   1ac2c:	f06f 0002 	mvn.w	r0, #2
   1ac30:	4770      	bx	lr
   1ac32:	bf00      	nop

0001ac34 <__cxa_current_exception_type>:
   1ac34:	b508      	push	{r3, lr}
   1ac36:	f7f9 f8f5 	bl	13e24 <__cxa_get_globals>
   1ac3a:	6800      	ldr	r0, [r0, #0]
   1ac3c:	b130      	cbz	r0, 1ac4c <__cxa_current_exception_type+0x18>
   1ac3e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1ac42:	2b01      	cmp	r3, #1
   1ac44:	bf04      	itt	eq
   1ac46:	6800      	ldreq	r0, [r0, #0]
   1ac48:	3878      	subeq	r0, #120	; 0x78
   1ac4a:	6800      	ldr	r0, [r0, #0]
   1ac4c:	bd08      	pop	{r3, pc}
   1ac4e:	bf00      	nop

0001ac50 <powf>:
   1ac50:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac52:	ed2d 8b04 	vpush	{d8-d9}
   1ac56:	4db3      	ldr	r5, [pc, #716]	; (1af24 <powf+0x2d4>)
   1ac58:	b08b      	sub	sp, #44	; 0x2c
   1ac5a:	eef0 8a40 	vmov.f32	s17, s0
   1ac5e:	eeb0 8a60 	vmov.f32	s16, s1
   1ac62:	f000 f9df 	bl	1b024 <__ieee754_powf>
   1ac66:	f995 4000 	ldrsb.w	r4, [r5]
   1ac6a:	1c63      	adds	r3, r4, #1
   1ac6c:	eeb0 9a40 	vmov.f32	s18, s0
   1ac70:	d02e      	beq.n	1acd0 <powf+0x80>
   1ac72:	eeb4 8a48 	vcmp.f32	s16, s16
   1ac76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac7a:	d629      	bvs.n	1acd0 <powf+0x80>
   1ac7c:	eef4 8a68 	vcmp.f32	s17, s17
   1ac80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac84:	f180 80a2 	bvs.w	1adcc <powf+0x17c>
   1ac88:	eef5 8a40 	vcmp.f32	s17, #0.0
   1ac8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac90:	d124      	bne.n	1acdc <powf+0x8c>
   1ac92:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ac96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac9a:	d159      	bne.n	1ad50 <powf+0x100>
   1ac9c:	2301      	movs	r3, #1
   1ac9e:	4aa2      	ldr	r2, [pc, #648]	; (1af28 <powf+0x2d8>)
   1aca0:	9300      	str	r3, [sp, #0]
   1aca2:	ee18 0a90 	vmov	r0, s17
   1aca6:	2300      	movs	r3, #0
   1aca8:	9201      	str	r2, [sp, #4]
   1acaa:	9308      	str	r3, [sp, #32]
   1acac:	f000 ff3a 	bl	1bb24 <__aeabi_f2d>
   1acb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1acb4:	ee18 0a10 	vmov	r0, s16
   1acb8:	f000 ff34 	bl	1bb24 <__aeabi_f2d>
   1acbc:	2200      	movs	r2, #0
   1acbe:	2300      	movs	r3, #0
   1acc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1acc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1acc8:	2c00      	cmp	r4, #0
   1acca:	d067      	beq.n	1ad9c <powf+0x14c>
   1accc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1acd0:	eeb0 0a49 	vmov.f32	s0, s18
   1acd4:	b00b      	add	sp, #44	; 0x2c
   1acd6:	ecbd 8b04 	vpop	{d8-d9}
   1acda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1acdc:	f000 fd3a 	bl	1b754 <finitef>
   1ace0:	4604      	mov	r4, r0
   1ace2:	2800      	cmp	r0, #0
   1ace4:	f000 8091 	beq.w	1ae0a <powf+0x1ba>
   1ace8:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1acf0:	d1ee      	bne.n	1acd0 <powf+0x80>
   1acf2:	eeb0 0a68 	vmov.f32	s0, s17
   1acf6:	f000 fd2d 	bl	1b754 <finitef>
   1acfa:	2800      	cmp	r0, #0
   1acfc:	d0e8      	beq.n	1acd0 <powf+0x80>
   1acfe:	eeb0 0a48 	vmov.f32	s0, s16
   1ad02:	f000 fd27 	bl	1b754 <finitef>
   1ad06:	2800      	cmp	r0, #0
   1ad08:	d0e2      	beq.n	1acd0 <powf+0x80>
   1ad0a:	2304      	movs	r3, #4
   1ad0c:	4a86      	ldr	r2, [pc, #536]	; (1af28 <powf+0x2d8>)
   1ad0e:	9300      	str	r3, [sp, #0]
   1ad10:	ee18 0a90 	vmov	r0, s17
   1ad14:	2300      	movs	r3, #0
   1ad16:	9308      	str	r3, [sp, #32]
   1ad18:	9201      	str	r2, [sp, #4]
   1ad1a:	f000 ff03 	bl	1bb24 <__aeabi_f2d>
   1ad1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad22:	ee18 0a10 	vmov	r0, s16
   1ad26:	f000 fefd 	bl	1bb24 <__aeabi_f2d>
   1ad2a:	2600      	movs	r6, #0
   1ad2c:	2700      	movs	r7, #0
   1ad2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad32:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1ad36:	f995 3000 	ldrsb.w	r3, [r5]
   1ad3a:	2b02      	cmp	r3, #2
   1ad3c:	d003      	beq.n	1ad46 <powf+0xf6>
   1ad3e:	4668      	mov	r0, sp
   1ad40:	f000 fc6c 	bl	1b61c <matherr>
   1ad44:	bb80      	cbnz	r0, 1ada8 <powf+0x158>
   1ad46:	f002 fd15 	bl	1d774 <__errno>
   1ad4a:	2322      	movs	r3, #34	; 0x22
   1ad4c:	6003      	str	r3, [r0, #0]
   1ad4e:	e02b      	b.n	1ada8 <powf+0x158>
   1ad50:	eeb0 0a48 	vmov.f32	s0, s16
   1ad54:	f000 fcfe 	bl	1b754 <finitef>
   1ad58:	2800      	cmp	r0, #0
   1ad5a:	d0b9      	beq.n	1acd0 <powf+0x80>
   1ad5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ad60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad64:	d5b4      	bpl.n	1acd0 <powf+0x80>
   1ad66:	2301      	movs	r3, #1
   1ad68:	4a6f      	ldr	r2, [pc, #444]	; (1af28 <powf+0x2d8>)
   1ad6a:	9300      	str	r3, [sp, #0]
   1ad6c:	ee18 0a90 	vmov	r0, s17
   1ad70:	2300      	movs	r3, #0
   1ad72:	9308      	str	r3, [sp, #32]
   1ad74:	9201      	str	r2, [sp, #4]
   1ad76:	f000 fed5 	bl	1bb24 <__aeabi_f2d>
   1ad7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad7e:	ee18 0a10 	vmov	r0, s16
   1ad82:	f000 fecf 	bl	1bb24 <__aeabi_f2d>
   1ad86:	f995 3000 	ldrsb.w	r3, [r5]
   1ad8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad8e:	2b00      	cmp	r3, #0
   1ad90:	f040 809b 	bne.w	1aeca <powf+0x27a>
   1ad94:	2200      	movs	r2, #0
   1ad96:	2300      	movs	r3, #0
   1ad98:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad9c:	4668      	mov	r0, sp
   1ad9e:	f000 fc3d 	bl	1b61c <matherr>
   1ada2:	2800      	cmp	r0, #0
   1ada4:	f000 808c 	beq.w	1aec0 <powf+0x270>
   1ada8:	9b08      	ldr	r3, [sp, #32]
   1adaa:	b11b      	cbz	r3, 1adb4 <powf+0x164>
   1adac:	f002 fce2 	bl	1d774 <__errno>
   1adb0:	9b08      	ldr	r3, [sp, #32]
   1adb2:	6003      	str	r3, [r0, #0]
   1adb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1adb8:	f001 f9ea 	bl	1c190 <__aeabi_d2f>
   1adbc:	ee09 0a10 	vmov	s18, r0
   1adc0:	eeb0 0a49 	vmov.f32	s0, s18
   1adc4:	b00b      	add	sp, #44	; 0x2c
   1adc6:	ecbd 8b04 	vpop	{d8-d9}
   1adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1adcc:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1add0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1add4:	f47f af7c 	bne.w	1acd0 <powf+0x80>
   1add8:	2301      	movs	r3, #1
   1adda:	4a53      	ldr	r2, [pc, #332]	; (1af28 <powf+0x2d8>)
   1addc:	9300      	str	r3, [sp, #0]
   1adde:	ee18 0a90 	vmov	r0, s17
   1ade2:	2300      	movs	r3, #0
   1ade4:	9201      	str	r2, [sp, #4]
   1ade6:	9308      	str	r3, [sp, #32]
   1ade8:	f000 fe9c 	bl	1bb24 <__aeabi_f2d>
   1adec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1adf0:	ee18 0a10 	vmov	r0, s16
   1adf4:	f000 fe96 	bl	1bb24 <__aeabi_f2d>
   1adf8:	4b4c      	ldr	r3, [pc, #304]	; (1af2c <powf+0x2dc>)
   1adfa:	2200      	movs	r2, #0
   1adfc:	2c02      	cmp	r4, #2
   1adfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae02:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae06:	d1c9      	bne.n	1ad9c <powf+0x14c>
   1ae08:	e760      	b.n	1accc <powf+0x7c>
   1ae0a:	eeb0 0a68 	vmov.f32	s0, s17
   1ae0e:	f000 fca1 	bl	1b754 <finitef>
   1ae12:	2800      	cmp	r0, #0
   1ae14:	f43f af68 	beq.w	1ace8 <powf+0x98>
   1ae18:	eeb0 0a48 	vmov.f32	s0, s16
   1ae1c:	f000 fc9a 	bl	1b754 <finitef>
   1ae20:	2800      	cmp	r0, #0
   1ae22:	f43f af61 	beq.w	1ace8 <powf+0x98>
   1ae26:	eeb4 9a49 	vcmp.f32	s18, s18
   1ae2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae2e:	f180 8087 	bvs.w	1af40 <powf+0x2f0>
   1ae32:	4b3d      	ldr	r3, [pc, #244]	; (1af28 <powf+0x2d8>)
   1ae34:	9408      	str	r4, [sp, #32]
   1ae36:	2203      	movs	r2, #3
   1ae38:	ee18 0a90 	vmov	r0, s17
   1ae3c:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ae40:	f000 fe70 	bl	1bb24 <__aeabi_f2d>
   1ae44:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ae48:	ee18 0a10 	vmov	r0, s16
   1ae4c:	f000 fe6a 	bl	1bb24 <__aeabi_f2d>
   1ae50:	f995 3000 	ldrsb.w	r3, [r5]
   1ae54:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae58:	2b00      	cmp	r3, #0
   1ae5a:	d13d      	bne.n	1aed8 <powf+0x288>
   1ae5c:	4b34      	ldr	r3, [pc, #208]	; (1af30 <powf+0x2e0>)
   1ae5e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ae62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1ae66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae6e:	f57f af66 	bpl.w	1ad3e <powf+0xee>
   1ae72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ae76:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ae7a:	ee17 0a90 	vmov	r0, s15
   1ae7e:	f000 fe51 	bl	1bb24 <__aeabi_f2d>
   1ae82:	4606      	mov	r6, r0
   1ae84:	460f      	mov	r7, r1
   1ae86:	ec47 6b10 	vmov	d0, r6, r7
   1ae8a:	f000 fbc9 	bl	1b620 <rint>
   1ae8e:	4630      	mov	r0, r6
   1ae90:	ec53 2b10 	vmov	r2, r3, d0
   1ae94:	4639      	mov	r1, r7
   1ae96:	f001 f901 	bl	1c09c <__aeabi_dcmpeq>
   1ae9a:	2800      	cmp	r0, #0
   1ae9c:	d13f      	bne.n	1af1e <powf+0x2ce>
   1ae9e:	4925      	ldr	r1, [pc, #148]	; (1af34 <powf+0x2e4>)
   1aea0:	f995 3000 	ldrsb.w	r3, [r5]
   1aea4:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1aea8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aeac:	e745      	b.n	1ad3a <powf+0xea>
   1aeae:	4610      	mov	r0, r2
   1aeb0:	4619      	mov	r1, r3
   1aeb2:	f000 ffb5 	bl	1be20 <__aeabi_ddiv>
   1aeb6:	2c02      	cmp	r4, #2
   1aeb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aebc:	f47f af6e 	bne.w	1ad9c <powf+0x14c>
   1aec0:	f002 fc58 	bl	1d774 <__errno>
   1aec4:	2321      	movs	r3, #33	; 0x21
   1aec6:	6003      	str	r3, [r0, #0]
   1aec8:	e76e      	b.n	1ada8 <powf+0x158>
   1aeca:	491b      	ldr	r1, [pc, #108]	; (1af38 <powf+0x2e8>)
   1aecc:	2000      	movs	r0, #0
   1aece:	2b02      	cmp	r3, #2
   1aed0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aed4:	d0f4      	beq.n	1aec0 <powf+0x270>
   1aed6:	e761      	b.n	1ad9c <powf+0x14c>
   1aed8:	4918      	ldr	r1, [pc, #96]	; (1af3c <powf+0x2ec>)
   1aeda:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1aede:	2000      	movs	r0, #0
   1aee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aee4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aee8:	f57f af27 	bpl.w	1ad3a <powf+0xea>
   1aeec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1aef0:	ee68 7a27 	vmul.f32	s15, s16, s15
   1aef4:	ee17 0a90 	vmov	r0, s15
   1aef8:	f000 fe14 	bl	1bb24 <__aeabi_f2d>
   1aefc:	4606      	mov	r6, r0
   1aefe:	460f      	mov	r7, r1
   1af00:	ec47 6b10 	vmov	d0, r6, r7
   1af04:	f000 fb8c 	bl	1b620 <rint>
   1af08:	4630      	mov	r0, r6
   1af0a:	ec53 2b10 	vmov	r2, r3, d0
   1af0e:	4639      	mov	r1, r7
   1af10:	f001 f8c4 	bl	1c09c <__aeabi_dcmpeq>
   1af14:	b918      	cbnz	r0, 1af1e <powf+0x2ce>
   1af16:	4b08      	ldr	r3, [pc, #32]	; (1af38 <powf+0x2e8>)
   1af18:	2200      	movs	r2, #0
   1af1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1af1e:	f995 3000 	ldrsb.w	r3, [r5]
   1af22:	e70a      	b.n	1ad3a <powf+0xea>
   1af24:	200000f4 	.word	0x200000f4
   1af28:	00024c90 	.word	0x00024c90
   1af2c:	3ff00000 	.word	0x3ff00000
   1af30:	47efffff 	.word	0x47efffff
   1af34:	c7efffff 	.word	0xc7efffff
   1af38:	fff00000 	.word	0xfff00000
   1af3c:	7ff00000 	.word	0x7ff00000
   1af40:	4b0c      	ldr	r3, [pc, #48]	; (1af74 <powf+0x324>)
   1af42:	9408      	str	r4, [sp, #32]
   1af44:	2201      	movs	r2, #1
   1af46:	ee18 0a90 	vmov	r0, s17
   1af4a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1af4e:	f000 fde9 	bl	1bb24 <__aeabi_f2d>
   1af52:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1af56:	ee18 0a10 	vmov	r0, s16
   1af5a:	f000 fde3 	bl	1bb24 <__aeabi_f2d>
   1af5e:	f995 4000 	ldrsb.w	r4, [r5]
   1af62:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1af66:	2200      	movs	r2, #0
   1af68:	2300      	movs	r3, #0
   1af6a:	2c00      	cmp	r4, #0
   1af6c:	d19f      	bne.n	1aeae <powf+0x25e>
   1af6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1af72:	e713      	b.n	1ad9c <powf+0x14c>
   1af74:	00024c90 	.word	0x00024c90

0001af78 <sqrtf>:
   1af78:	b510      	push	{r4, lr}
   1af7a:	ed2d 8b02 	vpush	{d8}
   1af7e:	b08a      	sub	sp, #40	; 0x28
   1af80:	eeb0 8a40 	vmov.f32	s16, s0
   1af84:	f000 fb46 	bl	1b614 <__ieee754_sqrtf>
   1af88:	4b24      	ldr	r3, [pc, #144]	; (1b01c <sqrtf+0xa4>)
   1af8a:	f993 4000 	ldrsb.w	r4, [r3]
   1af8e:	1c63      	adds	r3, r4, #1
   1af90:	d009      	beq.n	1afa6 <sqrtf+0x2e>
   1af92:	eeb4 8a48 	vcmp.f32	s16, s16
   1af96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af9a:	d604      	bvs.n	1afa6 <sqrtf+0x2e>
   1af9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1afa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1afa4:	d403      	bmi.n	1afae <sqrtf+0x36>
   1afa6:	b00a      	add	sp, #40	; 0x28
   1afa8:	ecbd 8b02 	vpop	{d8}
   1afac:	bd10      	pop	{r4, pc}
   1afae:	2301      	movs	r3, #1
   1afb0:	4a1b      	ldr	r2, [pc, #108]	; (1b020 <sqrtf+0xa8>)
   1afb2:	9300      	str	r3, [sp, #0]
   1afb4:	ee18 0a10 	vmov	r0, s16
   1afb8:	2300      	movs	r3, #0
   1afba:	9201      	str	r2, [sp, #4]
   1afbc:	9308      	str	r3, [sp, #32]
   1afbe:	f000 fdb1 	bl	1bb24 <__aeabi_f2d>
   1afc2:	2200      	movs	r2, #0
   1afc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1afc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1afcc:	2300      	movs	r3, #0
   1afce:	b1bc      	cbz	r4, 1b000 <sqrtf+0x88>
   1afd0:	4610      	mov	r0, r2
   1afd2:	4619      	mov	r1, r3
   1afd4:	f000 ff24 	bl	1be20 <__aeabi_ddiv>
   1afd8:	2c02      	cmp	r4, #2
   1afda:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1afde:	d111      	bne.n	1b004 <sqrtf+0x8c>
   1afe0:	f002 fbc8 	bl	1d774 <__errno>
   1afe4:	2321      	movs	r3, #33	; 0x21
   1afe6:	6003      	str	r3, [r0, #0]
   1afe8:	9b08      	ldr	r3, [sp, #32]
   1afea:	b98b      	cbnz	r3, 1b010 <sqrtf+0x98>
   1afec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1aff0:	f001 f8ce 	bl	1c190 <__aeabi_d2f>
   1aff4:	ee00 0a10 	vmov	s0, r0
   1aff8:	b00a      	add	sp, #40	; 0x28
   1affa:	ecbd 8b02 	vpop	{d8}
   1affe:	bd10      	pop	{r4, pc}
   1b000:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b004:	4668      	mov	r0, sp
   1b006:	f000 fb09 	bl	1b61c <matherr>
   1b00a:	2800      	cmp	r0, #0
   1b00c:	d1ec      	bne.n	1afe8 <sqrtf+0x70>
   1b00e:	e7e7      	b.n	1afe0 <sqrtf+0x68>
   1b010:	f002 fbb0 	bl	1d774 <__errno>
   1b014:	9b08      	ldr	r3, [sp, #32]
   1b016:	6003      	str	r3, [r0, #0]
   1b018:	e7e8      	b.n	1afec <sqrtf+0x74>
   1b01a:	bf00      	nop
   1b01c:	200000f4 	.word	0x200000f4
   1b020:	00024c98 	.word	0x00024c98

0001b024 <__ieee754_powf>:
   1b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b028:	ed2d 8b02 	vpush	{d8}
   1b02c:	b082      	sub	sp, #8
   1b02e:	edcd 0a00 	vstr	s1, [sp]
   1b032:	9c00      	ldr	r4, [sp, #0]
   1b034:	ed8d 0a01 	vstr	s0, [sp, #4]
   1b038:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1b03c:	d014      	beq.n	1b068 <__ieee754_powf+0x44>
   1b03e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1b042:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1b046:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b04a:	dd07      	ble.n	1b05c <__ieee754_powf+0x38>
   1b04c:	4858      	ldr	r0, [pc, #352]	; (1b1b0 <__ieee754_powf+0x18c>)
   1b04e:	b002      	add	sp, #8
   1b050:	ecbd 8b02 	vpop	{d8}
   1b054:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b058:	f000 bb86 	b.w	1b768 <nanf>
   1b05c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b060:	dd09      	ble.n	1b076 <__ieee754_powf+0x52>
   1b062:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b066:	d1f1      	bne.n	1b04c <__ieee754_powf+0x28>
   1b068:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1b06c:	b002      	add	sp, #8
   1b06e:	ecbd 8b02 	vpop	{d8}
   1b072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b076:	f1b8 0f00 	cmp.w	r8, #0
   1b07a:	db4d      	blt.n	1b118 <__ieee754_powf+0xf4>
   1b07c:	f04f 0a00 	mov.w	sl, #0
   1b080:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b084:	d03f      	beq.n	1b106 <__ieee754_powf+0xe2>
   1b086:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b08a:	d058      	beq.n	1b13e <__ieee754_powf+0x11a>
   1b08c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b090:	d06e      	beq.n	1b170 <__ieee754_powf+0x14c>
   1b092:	9d01      	ldr	r5, [sp, #4]
   1b094:	f8dd 9000 	ldr.w	r9, [sp]
   1b098:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1b09c:	ee00 5a10 	vmov	s0, r5
   1b0a0:	d01c      	beq.n	1b0dc <__ieee754_powf+0xb8>
   1b0a2:	f000 fb4f 	bl	1b744 <fabsf>
   1b0a6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b0aa:	d04d      	beq.n	1b148 <__ieee754_powf+0x124>
   1b0ac:	2f00      	cmp	r7, #0
   1b0ae:	d04b      	beq.n	1b148 <__ieee754_powf+0x124>
   1b0b0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b0b4:	d048      	beq.n	1b148 <__ieee754_powf+0x124>
   1b0b6:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1b0ba:	3b01      	subs	r3, #1
   1b0bc:	ea5a 0203 	orrs.w	r2, sl, r3
   1b0c0:	d06e      	beq.n	1b1a0 <__ieee754_powf+0x17c>
   1b0c2:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1b0c6:	dd7b      	ble.n	1b1c0 <__ieee754_powf+0x19c>
   1b0c8:	4a3a      	ldr	r2, [pc, #232]	; (1b1b4 <__ieee754_powf+0x190>)
   1b0ca:	4297      	cmp	r7, r2
   1b0cc:	f300 81c8 	bgt.w	1b460 <__ieee754_powf+0x43c>
   1b0d0:	2c00      	cmp	r4, #0
   1b0d2:	f2c0 81cb 	blt.w	1b46c <__ieee754_powf+0x448>
   1b0d6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b1b8 <__ieee754_powf+0x194>
   1b0da:	e7c7      	b.n	1b06c <__ieee754_powf+0x48>
   1b0dc:	f1b8 0f00 	cmp.w	r8, #0
   1b0e0:	da4b      	bge.n	1b17a <__ieee754_powf+0x156>
   1b0e2:	f000 fb2f 	bl	1b744 <fabsf>
   1b0e6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b0ea:	d001      	beq.n	1b0f0 <__ieee754_powf+0xcc>
   1b0ec:	2f00      	cmp	r7, #0
   1b0ee:	d1df      	bne.n	1b0b0 <__ieee754_powf+0x8c>
   1b0f0:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1b0f4:	ea57 030a 	orrs.w	r3, r7, sl
   1b0f8:	d04d      	beq.n	1b196 <__ieee754_powf+0x172>
   1b0fa:	f1ba 0f01 	cmp.w	sl, #1
   1b0fe:	d1b5      	bne.n	1b06c <__ieee754_powf+0x48>
   1b100:	eeb1 0a40 	vneg.f32	s0, s0
   1b104:	e7b2      	b.n	1b06c <__ieee754_powf+0x48>
   1b106:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b10a:	d0ad      	beq.n	1b068 <__ieee754_powf+0x44>
   1b10c:	dd29      	ble.n	1b162 <__ieee754_powf+0x13e>
   1b10e:	2c00      	cmp	r4, #0
   1b110:	dbe1      	blt.n	1b0d6 <__ieee754_powf+0xb2>
   1b112:	ed9d 0a00 	vldr	s0, [sp]
   1b116:	e7a9      	b.n	1b06c <__ieee754_powf+0x48>
   1b118:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1b11c:	da1e      	bge.n	1b15c <__ieee754_powf+0x138>
   1b11e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b122:	db09      	blt.n	1b138 <__ieee754_powf+0x114>
   1b124:	15f3      	asrs	r3, r6, #23
   1b126:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1b12a:	fa46 f203 	asr.w	r2, r6, r3
   1b12e:	fa02 f303 	lsl.w	r3, r2, r3
   1b132:	429e      	cmp	r6, r3
   1b134:	f000 818f 	beq.w	1b456 <__ieee754_powf+0x432>
   1b138:	f04f 0a00 	mov.w	sl, #0
   1b13c:	e7a3      	b.n	1b086 <__ieee754_powf+0x62>
   1b13e:	2c00      	cmp	r4, #0
   1b140:	db22      	blt.n	1b188 <__ieee754_powf+0x164>
   1b142:	ed9d 0a01 	vldr	s0, [sp, #4]
   1b146:	e791      	b.n	1b06c <__ieee754_powf+0x48>
   1b148:	2c00      	cmp	r4, #0
   1b14a:	bfbc      	itt	lt
   1b14c:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1b150:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1b154:	f1b8 0f00 	cmp.w	r8, #0
   1b158:	da88      	bge.n	1b06c <__ieee754_powf+0x48>
   1b15a:	e7c9      	b.n	1b0f0 <__ieee754_powf+0xcc>
   1b15c:	f04f 0a02 	mov.w	sl, #2
   1b160:	e78e      	b.n	1b080 <__ieee754_powf+0x5c>
   1b162:	2c00      	cmp	r4, #0
   1b164:	dab7      	bge.n	1b0d6 <__ieee754_powf+0xb2>
   1b166:	eddd 7a00 	vldr	s15, [sp]
   1b16a:	eeb1 0a67 	vneg.f32	s0, s15
   1b16e:	e77d      	b.n	1b06c <__ieee754_powf+0x48>
   1b170:	eddd 7a01 	vldr	s15, [sp, #4]
   1b174:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b178:	e778      	b.n	1b06c <__ieee754_powf+0x48>
   1b17a:	b002      	add	sp, #8
   1b17c:	ecbd 8b02 	vpop	{d8}
   1b180:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b184:	f000 ba46 	b.w	1b614 <__ieee754_sqrtf>
   1b188:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b18c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b190:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b194:	e76a      	b.n	1b06c <__ieee754_powf+0x48>
   1b196:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b19a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b19e:	e765      	b.n	1b06c <__ieee754_powf+0x48>
   1b1a0:	ee07 5a90 	vmov	s15, r5
   1b1a4:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b1a8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b1ac:	e75e      	b.n	1b06c <__ieee754_powf+0x48>
   1b1ae:	bf00      	nop
   1b1b0:	0002472c 	.word	0x0002472c
   1b1b4:	3f7ffff7 	.word	0x3f7ffff7
   1b1b8:	00000000 	.word	0x00000000
   1b1bc:	4b800000 	.word	0x4b800000
   1b1c0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b1c4:	f280 815f 	bge.w	1b486 <__ieee754_powf+0x462>
   1b1c8:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b1bc <__ieee754_powf+0x198>
   1b1cc:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b1d0:	f06f 0217 	mvn.w	r2, #23
   1b1d4:	ee17 7a90 	vmov	r7, s15
   1b1d8:	48ee      	ldr	r0, [pc, #952]	; (1b594 <__ieee754_powf+0x570>)
   1b1da:	15f9      	asrs	r1, r7, #23
   1b1dc:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b1e0:	397f      	subs	r1, #127	; 0x7f
   1b1e2:	4287      	cmp	r7, r0
   1b1e4:	4411      	add	r1, r2
   1b1e6:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b1ea:	f340 8144 	ble.w	1b476 <__ieee754_powf+0x452>
   1b1ee:	48ea      	ldr	r0, [pc, #936]	; (1b598 <__ieee754_powf+0x574>)
   1b1f0:	4287      	cmp	r7, r0
   1b1f2:	f340 8191 	ble.w	1b518 <__ieee754_powf+0x4f4>
   1b1f6:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b59c <__ieee754_powf+0x578>
   1b1fa:	3101      	adds	r1, #1
   1b1fc:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b200:	eef0 3a64 	vmov.f32	s7, s9
   1b204:	2500      	movs	r5, #0
   1b206:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b20a:	ee06 2a90 	vmov	s13, r2
   1b20e:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b216:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b21a:	1052      	asrs	r2, r2, #1
   1b21c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b220:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b224:	442a      	add	r2, r5
   1b226:	48de      	ldr	r0, [pc, #888]	; (1b5a0 <__ieee754_powf+0x57c>)
   1b228:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b22c:	ee07 2a90 	vmov	s15, r2
   1b230:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b234:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b238:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b5a4 <__ieee754_powf+0x580>
   1b23c:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b5a8 <__ieee754_powf+0x584>
   1b240:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b5ac <__ieee754_powf+0x588>
   1b244:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b5b0 <__ieee754_powf+0x58c>
   1b248:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b5b4 <__ieee754_powf+0x590>
   1b24c:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b5b8 <__ieee754_powf+0x594>
   1b250:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b5bc <__ieee754_powf+0x598>
   1b254:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b5c0 <__ieee754_powf+0x59c>
   1b258:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b25c:	ee14 2a10 	vmov	r2, s8
   1b260:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b264:	4002      	ands	r2, r0
   1b266:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b26a:	eeb0 5a61 	vmov.f32	s10, s3
   1b26e:	ee05 2a90 	vmov	s11, r2
   1b272:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b276:	eef1 1a65 	vneg.f32	s3, s11
   1b27a:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b27e:	eef0 7a60 	vmov.f32	s15, s1
   1b282:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b286:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b28a:	eeb0 5a41 	vmov.f32	s10, s2
   1b28e:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b292:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b296:	eeb0 7a42 	vmov.f32	s14, s4
   1b29a:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b29e:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b2a2:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b2a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b2aa:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b2ae:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b2b2:	eeb0 7a45 	vmov.f32	s14, s10
   1b2b6:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b2ba:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b5c4 <__ieee754_powf+0x5a0>
   1b2be:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b2c2:	ee07 1a10 	vmov	s14, r1
   1b2c6:	ee16 2a10 	vmov	r2, s12
   1b2ca:	4002      	ands	r2, r0
   1b2cc:	ee06 2a10 	vmov	s12, r2
   1b2d0:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b2d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b2d8:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b2dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b2e0:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b2e4:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b2e8:	eef0 6a67 	vmov.f32	s13, s15
   1b2ec:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b2f0:	ee16 2a90 	vmov	r2, s13
   1b2f4:	4002      	ands	r2, r0
   1b2f6:	ee06 2a90 	vmov	s13, r2
   1b2fa:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b2fe:	ee05 2a90 	vmov	s11, r2
   1b302:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b306:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b30a:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b30e:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b312:	eef0 6a67 	vmov.f32	s13, s15
   1b316:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b31a:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b31e:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b322:	ee16 2a90 	vmov	r2, s13
   1b326:	4002      	ands	r2, r0
   1b328:	ee06 2a90 	vmov	s13, r2
   1b32c:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b330:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b334:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b338:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b33c:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b340:	f024 040f 	bic.w	r4, r4, #15
   1b344:	ee07 9a10 	vmov	s14, r9
   1b348:	ee06 4a10 	vmov	s12, r4
   1b34c:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b350:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b354:	ee07 4a10 	vmov	s14, r4
   1b358:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b35c:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b360:	ea5a 0303 	orrs.w	r3, sl, r3
   1b364:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b368:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b36c:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b370:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b374:	ee16 2a90 	vmov	r2, s13
   1b378:	bf14      	ite	ne
   1b37a:	eeb0 8a46 	vmovne.f32	s16, s12
   1b37e:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b382:	2a00      	cmp	r2, #0
   1b384:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b388:	f340 80b3 	ble.w	1b4f2 <__ieee754_powf+0x4ce>
   1b38c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b390:	f300 8086 	bgt.w	1b4a0 <__ieee754_powf+0x47c>
   1b394:	d079      	beq.n	1b48a <__ieee754_powf+0x466>
   1b396:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b39a:	f300 8088 	bgt.w	1b4ae <__ieee754_powf+0x48a>
   1b39e:	2100      	movs	r1, #0
   1b3a0:	4608      	mov	r0, r1
   1b3a2:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b3a6:	f023 030f 	bic.w	r3, r3, #15
   1b3aa:	ee06 3a10 	vmov	s12, r3
   1b3ae:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b5c8 <__ieee754_powf+0x5a4>
   1b3b2:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b5cc <__ieee754_powf+0x5a8>
   1b3b6:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b5d0 <__ieee754_powf+0x5ac>
   1b3ba:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b5d4 <__ieee754_powf+0x5b0>
   1b3be:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b5d8 <__ieee754_powf+0x5b4>
   1b3c2:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b5dc <__ieee754_powf+0x5b8>
   1b3c6:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b5e0 <__ieee754_powf+0x5bc>
   1b3ca:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b5e4 <__ieee754_powf+0x5c0>
   1b3ce:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b3d2:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b3d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b3da:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b3de:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b3e2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b3e6:	eef0 7a47 	vmov.f32	s15, s14
   1b3ea:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b3ee:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b3f2:	eef0 1a47 	vmov.f32	s3, s14
   1b3f6:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b3fa:	eeb0 6a63 	vmov.f32	s12, s7
   1b3fe:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b402:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b406:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b40a:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b40e:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b412:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b416:	eeb0 6a45 	vmov.f32	s12, s10
   1b41a:	eeb0 5a47 	vmov.f32	s10, s14
   1b41e:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b422:	eef0 6a45 	vmov.f32	s13, s10
   1b426:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b42a:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b42e:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b432:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b436:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b43a:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b43e:	ee10 3a10 	vmov	r3, s0
   1b442:	440b      	add	r3, r1
   1b444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b448:	f2c0 80a0 	blt.w	1b58c <__ieee754_powf+0x568>
   1b44c:	ee00 3a10 	vmov	s0, r3
   1b450:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b454:	e60a      	b.n	1b06c <__ieee754_powf+0x48>
   1b456:	f002 0201 	and.w	r2, r2, #1
   1b45a:	f1c2 0a02 	rsb	sl, r2, #2
   1b45e:	e612      	b.n	1b086 <__ieee754_powf+0x62>
   1b460:	4a61      	ldr	r2, [pc, #388]	; (1b5e8 <__ieee754_powf+0x5c4>)
   1b462:	4297      	cmp	r7, r2
   1b464:	dd61      	ble.n	1b52a <__ieee754_powf+0x506>
   1b466:	2c00      	cmp	r4, #0
   1b468:	f77f ae35 	ble.w	1b0d6 <__ieee754_powf+0xb2>
   1b46c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b5ec <__ieee754_powf+0x5c8>
   1b470:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b474:	e5fa      	b.n	1b06c <__ieee754_powf+0x48>
   1b476:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b59c <__ieee754_powf+0x578>
   1b47a:	2500      	movs	r5, #0
   1b47c:	eef0 3a64 	vmov.f32	s7, s9
   1b480:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b484:	e6c1      	b.n	1b20a <__ieee754_powf+0x1e6>
   1b486:	2200      	movs	r2, #0
   1b488:	e6a6      	b.n	1b1d8 <__ieee754_powf+0x1b4>
   1b48a:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b5f0 <__ieee754_powf+0x5cc>
   1b48e:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b492:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b496:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b49e:	dd06      	ble.n	1b4ae <__ieee754_powf+0x48a>
   1b4a0:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b5ec <__ieee754_powf+0x5c8>
   1b4a4:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b4a8:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b4ac:	e5de      	b.n	1b06c <__ieee754_powf+0x48>
   1b4ae:	15db      	asrs	r3, r3, #23
   1b4b0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b4b4:	3b7e      	subs	r3, #126	; 0x7e
   1b4b6:	fa41 f303 	asr.w	r3, r1, r3
   1b4ba:	4413      	add	r3, r2
   1b4bc:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b4c0:	4c4c      	ldr	r4, [pc, #304]	; (1b5f4 <__ieee754_powf+0x5d0>)
   1b4c2:	397f      	subs	r1, #127	; 0x7f
   1b4c4:	410c      	asrs	r4, r1
   1b4c6:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b4ca:	ea23 0304 	bic.w	r3, r3, r4
   1b4ce:	ee06 3a90 	vmov	s13, r3
   1b4d2:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b4d6:	f1c1 0117 	rsb	r1, r1, #23
   1b4da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b4de:	4108      	asrs	r0, r1
   1b4e0:	2a00      	cmp	r2, #0
   1b4e2:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b4e6:	bfb8      	it	lt
   1b4e8:	4240      	neglt	r0, r0
   1b4ea:	05c1      	lsls	r1, r0, #23
   1b4ec:	ee16 2a90 	vmov	r2, s13
   1b4f0:	e757      	b.n	1b3a2 <__ieee754_powf+0x37e>
   1b4f2:	4941      	ldr	r1, [pc, #260]	; (1b5f8 <__ieee754_powf+0x5d4>)
   1b4f4:	428b      	cmp	r3, r1
   1b4f6:	dc08      	bgt.n	1b50a <__ieee754_powf+0x4e6>
   1b4f8:	f47f af4d 	bne.w	1b396 <__ieee754_powf+0x372>
   1b4fc:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b500:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b508:	d8d1      	bhi.n	1b4ae <__ieee754_powf+0x48a>
   1b50a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b5fc <__ieee754_powf+0x5d8>
   1b50e:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b512:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b516:	e5a9      	b.n	1b06c <__ieee754_powf+0x48>
   1b518:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b600 <__ieee754_powf+0x5dc>
   1b51c:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b604 <__ieee754_powf+0x5e0>
   1b520:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b524:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b528:	e66f      	b.n	1b20a <__ieee754_powf+0x1e6>
   1b52a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b52e:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b532:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b5b0 <__ieee754_powf+0x58c>
   1b536:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b608 <__ieee754_powf+0x5e4>
   1b53a:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b60c <__ieee754_powf+0x5e8>
   1b53e:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b610 <__ieee754_powf+0x5ec>
   1b542:	eeb1 6a40 	vneg.f32	s12, s0
   1b546:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b54a:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b54e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b552:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b556:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b55a:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b55e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b562:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b566:	eef0 6a67 	vmov.f32	s13, s15
   1b56a:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b56e:	ee16 2a90 	vmov	r2, s13
   1b572:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b576:	f022 020f 	bic.w	r2, r2, #15
   1b57a:	ee07 2a10 	vmov	s14, r2
   1b57e:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b582:	ee06 2a90 	vmov	s13, r2
   1b586:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b58a:	e6d7      	b.n	1b33c <__ieee754_powf+0x318>
   1b58c:	f000 f8f2 	bl	1b774 <scalbnf>
   1b590:	e75e      	b.n	1b450 <__ieee754_powf+0x42c>
   1b592:	bf00      	nop
   1b594:	001cc471 	.word	0x001cc471
   1b598:	005db3d6 	.word	0x005db3d6
   1b59c:	00000000 	.word	0x00000000
   1b5a0:	fffff000 	.word	0xfffff000
   1b5a4:	3e53f142 	.word	0x3e53f142
   1b5a8:	3e6c3255 	.word	0x3e6c3255
   1b5ac:	3e8ba305 	.word	0x3e8ba305
   1b5b0:	3eaaaaab 	.word	0x3eaaaaab
   1b5b4:	3edb6db7 	.word	0x3edb6db7
   1b5b8:	3f19999a 	.word	0x3f19999a
   1b5bc:	3f76384f 	.word	0x3f76384f
   1b5c0:	369dc3a0 	.word	0x369dc3a0
   1b5c4:	3f763800 	.word	0x3f763800
   1b5c8:	35bfbe8c 	.word	0x35bfbe8c
   1b5cc:	3f317218 	.word	0x3f317218
   1b5d0:	3f317200 	.word	0x3f317200
   1b5d4:	b5ddea0e 	.word	0xb5ddea0e
   1b5d8:	3331bb4c 	.word	0x3331bb4c
   1b5dc:	388ab355 	.word	0x388ab355
   1b5e0:	bb360b61 	.word	0xbb360b61
   1b5e4:	3e2aaaab 	.word	0x3e2aaaab
   1b5e8:	3f800007 	.word	0x3f800007
   1b5ec:	7149f2ca 	.word	0x7149f2ca
   1b5f0:	3338aa3c 	.word	0x3338aa3c
   1b5f4:	007fffff 	.word	0x007fffff
   1b5f8:	43160000 	.word	0x43160000
   1b5fc:	0da24260 	.word	0x0da24260
   1b600:	3f15c000 	.word	0x3f15c000
   1b604:	35d1cfdc 	.word	0x35d1cfdc
   1b608:	3fb8aa3b 	.word	0x3fb8aa3b
   1b60c:	36eca570 	.word	0x36eca570
   1b610:	3fb8aa00 	.word	0x3fb8aa00

0001b614 <__ieee754_sqrtf>:
   1b614:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b618:	4770      	bx	lr
   1b61a:	bf00      	nop

0001b61c <matherr>:
   1b61c:	2000      	movs	r0, #0
   1b61e:	4770      	bx	lr

0001b620 <rint>:
   1b620:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b622:	ec53 2b10 	vmov	r2, r3, d0
   1b626:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b62a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b62e:	2813      	cmp	r0, #19
   1b630:	b083      	sub	sp, #12
   1b632:	4619      	mov	r1, r3
   1b634:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b638:	ee10 5a10 	vmov	r5, s0
   1b63c:	dc2f      	bgt.n	1b69e <rint+0x7e>
   1b63e:	2800      	cmp	r0, #0
   1b640:	db49      	blt.n	1b6d6 <rint+0xb6>
   1b642:	4e3e      	ldr	r6, [pc, #248]	; (1b73c <rint+0x11c>)
   1b644:	4106      	asrs	r6, r0
   1b646:	ea03 0706 	and.w	r7, r3, r6
   1b64a:	4317      	orrs	r7, r2
   1b64c:	d02c      	beq.n	1b6a8 <rint+0x88>
   1b64e:	0876      	lsrs	r6, r6, #1
   1b650:	4033      	ands	r3, r6
   1b652:	431d      	orrs	r5, r3
   1b654:	d00c      	beq.n	1b670 <rint+0x50>
   1b656:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b65a:	2813      	cmp	r0, #19
   1b65c:	ea21 0606 	bic.w	r6, r1, r6
   1b660:	fa43 f100 	asr.w	r1, r3, r0
   1b664:	ea41 0106 	orr.w	r1, r1, r6
   1b668:	bf0c      	ite	eq
   1b66a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b66e:	2500      	movne	r5, #0
   1b670:	4833      	ldr	r0, [pc, #204]	; (1b740 <rint+0x120>)
   1b672:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b676:	462a      	mov	r2, r5
   1b678:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b67c:	4610      	mov	r0, r2
   1b67e:	462b      	mov	r3, r5
   1b680:	4622      	mov	r2, r4
   1b682:	f000 f8f1 	bl	1b868 <__adddf3>
   1b686:	e9cd 0100 	strd	r0, r1, [sp]
   1b68a:	4622      	mov	r2, r4
   1b68c:	462b      	mov	r3, r5
   1b68e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b692:	f000 f8e7 	bl	1b864 <__aeabi_dsub>
   1b696:	ec41 0b10 	vmov	d0, r0, r1
   1b69a:	b003      	add	sp, #12
   1b69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b69e:	2833      	cmp	r0, #51	; 0x33
   1b6a0:	dd06      	ble.n	1b6b0 <rint+0x90>
   1b6a2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b6a6:	d040      	beq.n	1b72a <rint+0x10a>
   1b6a8:	ec43 2b10 	vmov	d0, r2, r3
   1b6ac:	b003      	add	sp, #12
   1b6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b6b0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b6b4:	f04f 30ff 	mov.w	r0, #4294967295
   1b6b8:	40f0      	lsrs	r0, r6
   1b6ba:	4202      	tst	r2, r0
   1b6bc:	d0f4      	beq.n	1b6a8 <rint+0x88>
   1b6be:	0840      	lsrs	r0, r0, #1
   1b6c0:	4202      	tst	r2, r0
   1b6c2:	d0d5      	beq.n	1b670 <rint+0x50>
   1b6c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b6c8:	ea25 0000 	bic.w	r0, r5, r0
   1b6cc:	fa43 f606 	asr.w	r6, r3, r6
   1b6d0:	ea46 0500 	orr.w	r5, r6, r0
   1b6d4:	e7cc      	b.n	1b670 <rint+0x50>
   1b6d6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b6da:	4310      	orrs	r0, r2
   1b6dc:	d0e4      	beq.n	1b6a8 <rint+0x88>
   1b6de:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b6e2:	4310      	orrs	r0, r2
   1b6e4:	4247      	negs	r7, r0
   1b6e6:	4307      	orrs	r7, r0
   1b6e8:	4d15      	ldr	r5, [pc, #84]	; (1b740 <rint+0x120>)
   1b6ea:	0c5e      	lsrs	r6, r3, #17
   1b6ec:	0b3f      	lsrs	r7, r7, #12
   1b6ee:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b6f2:	0476      	lsls	r6, r6, #17
   1b6f4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b6f8:	ea43 0106 	orr.w	r1, r3, r6
   1b6fc:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b700:	ee10 0a10 	vmov	r0, s0
   1b704:	4632      	mov	r2, r6
   1b706:	463b      	mov	r3, r7
   1b708:	f000 f8ae 	bl	1b868 <__adddf3>
   1b70c:	e9cd 0100 	strd	r0, r1, [sp]
   1b710:	463b      	mov	r3, r7
   1b712:	4632      	mov	r2, r6
   1b714:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b718:	f000 f8a4 	bl	1b864 <__aeabi_dsub>
   1b71c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b720:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b724:	ec41 0b10 	vmov	d0, r0, r1
   1b728:	e7c0      	b.n	1b6ac <rint+0x8c>
   1b72a:	ee10 0a10 	vmov	r0, s0
   1b72e:	4619      	mov	r1, r3
   1b730:	f000 f89a 	bl	1b868 <__adddf3>
   1b734:	ec41 0b10 	vmov	d0, r0, r1
   1b738:	e7b8      	b.n	1b6ac <rint+0x8c>
   1b73a:	bf00      	nop
   1b73c:	000fffff 	.word	0x000fffff
   1b740:	00024ca0 	.word	0x00024ca0

0001b744 <fabsf>:
   1b744:	ee10 3a10 	vmov	r3, s0
   1b748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b74c:	ee00 3a10 	vmov	s0, r3
   1b750:	4770      	bx	lr
   1b752:	bf00      	nop

0001b754 <finitef>:
   1b754:	ee10 3a10 	vmov	r3, s0
   1b758:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b75c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b760:	bfac      	ite	ge
   1b762:	2000      	movge	r0, #0
   1b764:	2001      	movlt	r0, #1
   1b766:	4770      	bx	lr

0001b768 <nanf>:
   1b768:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b770 <nanf+0x8>
   1b76c:	4770      	bx	lr
   1b76e:	bf00      	nop
   1b770:	7fc00000 	.word	0x7fc00000

0001b774 <scalbnf>:
   1b774:	b508      	push	{r3, lr}
   1b776:	ee10 3a10 	vmov	r3, s0
   1b77a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b77e:	ed2d 8b02 	vpush	{d8}
   1b782:	d011      	beq.n	1b7a8 <scalbnf+0x34>
   1b784:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b788:	d211      	bcs.n	1b7ae <scalbnf+0x3a>
   1b78a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b78e:	d313      	bcc.n	1b7b8 <scalbnf+0x44>
   1b790:	0dd2      	lsrs	r2, r2, #23
   1b792:	4402      	add	r2, r0
   1b794:	2afe      	cmp	r2, #254	; 0xfe
   1b796:	dc2e      	bgt.n	1b7f6 <scalbnf+0x82>
   1b798:	2a00      	cmp	r2, #0
   1b79a:	dd1a      	ble.n	1b7d2 <scalbnf+0x5e>
   1b79c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b7a0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b7a4:	ee00 3a10 	vmov	s0, r3
   1b7a8:	ecbd 8b02 	vpop	{d8}
   1b7ac:	bd08      	pop	{r3, pc}
   1b7ae:	ecbd 8b02 	vpop	{d8}
   1b7b2:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b7b6:	bd08      	pop	{r3, pc}
   1b7b8:	4b1d      	ldr	r3, [pc, #116]	; (1b830 <scalbnf+0xbc>)
   1b7ba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b834 <scalbnf+0xc0>
   1b7be:	4298      	cmp	r0, r3
   1b7c0:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b7c4:	db22      	blt.n	1b80c <scalbnf+0x98>
   1b7c6:	ee10 3a10 	vmov	r3, s0
   1b7ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b7ce:	3a19      	subs	r2, #25
   1b7d0:	e7df      	b.n	1b792 <scalbnf+0x1e>
   1b7d2:	f112 0f16 	cmn.w	r2, #22
   1b7d6:	da1e      	bge.n	1b816 <scalbnf+0xa2>
   1b7d8:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b7dc:	4298      	cmp	r0, r3
   1b7de:	dc0a      	bgt.n	1b7f6 <scalbnf+0x82>
   1b7e0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b838 <scalbnf+0xc4>
   1b7e4:	eef0 0a40 	vmov.f32	s1, s0
   1b7e8:	eeb0 0a48 	vmov.f32	s0, s16
   1b7ec:	f000 f82a 	bl	1b844 <copysignf>
   1b7f0:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b7f4:	e7d8      	b.n	1b7a8 <scalbnf+0x34>
   1b7f6:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b83c <scalbnf+0xc8>
   1b7fa:	eef0 0a40 	vmov.f32	s1, s0
   1b7fe:	eeb0 0a48 	vmov.f32	s0, s16
   1b802:	f000 f81f 	bl	1b844 <copysignf>
   1b806:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b80a:	e7cd      	b.n	1b7a8 <scalbnf+0x34>
   1b80c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b838 <scalbnf+0xc4>
   1b810:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b814:	e7c8      	b.n	1b7a8 <scalbnf+0x34>
   1b816:	3219      	adds	r2, #25
   1b818:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b81c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b820:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b840 <scalbnf+0xcc>
   1b824:	ee00 3a10 	vmov	s0, r3
   1b828:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b82c:	e7bc      	b.n	1b7a8 <scalbnf+0x34>
   1b82e:	bf00      	nop
   1b830:	ffff3cb0 	.word	0xffff3cb0
   1b834:	4c000000 	.word	0x4c000000
   1b838:	0da24260 	.word	0x0da24260
   1b83c:	7149f2ca 	.word	0x7149f2ca
   1b840:	33000000 	.word	0x33000000

0001b844 <copysignf>:
   1b844:	ee10 3a10 	vmov	r3, s0
   1b848:	ee10 2a90 	vmov	r2, s1
   1b84c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b850:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b854:	4313      	orrs	r3, r2
   1b856:	ee00 3a10 	vmov	s0, r3
   1b85a:	4770      	bx	lr

0001b85c <__aeabi_drsub>:
   1b85c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b860:	e002      	b.n	1b868 <__adddf3>
   1b862:	bf00      	nop

0001b864 <__aeabi_dsub>:
   1b864:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b868 <__adddf3>:
   1b868:	b530      	push	{r4, r5, lr}
   1b86a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b86e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b872:	ea94 0f05 	teq	r4, r5
   1b876:	bf08      	it	eq
   1b878:	ea90 0f02 	teqeq	r0, r2
   1b87c:	bf1f      	itttt	ne
   1b87e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b882:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b886:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b88a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b88e:	f000 80e2 	beq.w	1ba56 <__adddf3+0x1ee>
   1b892:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b896:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b89a:	bfb8      	it	lt
   1b89c:	426d      	neglt	r5, r5
   1b89e:	dd0c      	ble.n	1b8ba <__adddf3+0x52>
   1b8a0:	442c      	add	r4, r5
   1b8a2:	ea80 0202 	eor.w	r2, r0, r2
   1b8a6:	ea81 0303 	eor.w	r3, r1, r3
   1b8aa:	ea82 0000 	eor.w	r0, r2, r0
   1b8ae:	ea83 0101 	eor.w	r1, r3, r1
   1b8b2:	ea80 0202 	eor.w	r2, r0, r2
   1b8b6:	ea81 0303 	eor.w	r3, r1, r3
   1b8ba:	2d36      	cmp	r5, #54	; 0x36
   1b8bc:	bf88      	it	hi
   1b8be:	bd30      	pophi	{r4, r5, pc}
   1b8c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b8c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b8c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b8cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b8d0:	d002      	beq.n	1b8d8 <__adddf3+0x70>
   1b8d2:	4240      	negs	r0, r0
   1b8d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b8d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b8dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b8e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b8e4:	d002      	beq.n	1b8ec <__adddf3+0x84>
   1b8e6:	4252      	negs	r2, r2
   1b8e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b8ec:	ea94 0f05 	teq	r4, r5
   1b8f0:	f000 80a7 	beq.w	1ba42 <__adddf3+0x1da>
   1b8f4:	f1a4 0401 	sub.w	r4, r4, #1
   1b8f8:	f1d5 0e20 	rsbs	lr, r5, #32
   1b8fc:	db0d      	blt.n	1b91a <__adddf3+0xb2>
   1b8fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b902:	fa22 f205 	lsr.w	r2, r2, r5
   1b906:	1880      	adds	r0, r0, r2
   1b908:	f141 0100 	adc.w	r1, r1, #0
   1b90c:	fa03 f20e 	lsl.w	r2, r3, lr
   1b910:	1880      	adds	r0, r0, r2
   1b912:	fa43 f305 	asr.w	r3, r3, r5
   1b916:	4159      	adcs	r1, r3
   1b918:	e00e      	b.n	1b938 <__adddf3+0xd0>
   1b91a:	f1a5 0520 	sub.w	r5, r5, #32
   1b91e:	f10e 0e20 	add.w	lr, lr, #32
   1b922:	2a01      	cmp	r2, #1
   1b924:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b928:	bf28      	it	cs
   1b92a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b92e:	fa43 f305 	asr.w	r3, r3, r5
   1b932:	18c0      	adds	r0, r0, r3
   1b934:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b93c:	d507      	bpl.n	1b94e <__adddf3+0xe6>
   1b93e:	f04f 0e00 	mov.w	lr, #0
   1b942:	f1dc 0c00 	rsbs	ip, ip, #0
   1b946:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b94a:	eb6e 0101 	sbc.w	r1, lr, r1
   1b94e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b952:	d31b      	bcc.n	1b98c <__adddf3+0x124>
   1b954:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b958:	d30c      	bcc.n	1b974 <__adddf3+0x10c>
   1b95a:	0849      	lsrs	r1, r1, #1
   1b95c:	ea5f 0030 	movs.w	r0, r0, rrx
   1b960:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b964:	f104 0401 	add.w	r4, r4, #1
   1b968:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b96c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b970:	f080 809a 	bcs.w	1baa8 <__adddf3+0x240>
   1b974:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b978:	bf08      	it	eq
   1b97a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b97e:	f150 0000 	adcs.w	r0, r0, #0
   1b982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b986:	ea41 0105 	orr.w	r1, r1, r5
   1b98a:	bd30      	pop	{r4, r5, pc}
   1b98c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b990:	4140      	adcs	r0, r0
   1b992:	eb41 0101 	adc.w	r1, r1, r1
   1b996:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b99a:	f1a4 0401 	sub.w	r4, r4, #1
   1b99e:	d1e9      	bne.n	1b974 <__adddf3+0x10c>
   1b9a0:	f091 0f00 	teq	r1, #0
   1b9a4:	bf04      	itt	eq
   1b9a6:	4601      	moveq	r1, r0
   1b9a8:	2000      	moveq	r0, #0
   1b9aa:	fab1 f381 	clz	r3, r1
   1b9ae:	bf08      	it	eq
   1b9b0:	3320      	addeq	r3, #32
   1b9b2:	f1a3 030b 	sub.w	r3, r3, #11
   1b9b6:	f1b3 0220 	subs.w	r2, r3, #32
   1b9ba:	da0c      	bge.n	1b9d6 <__adddf3+0x16e>
   1b9bc:	320c      	adds	r2, #12
   1b9be:	dd08      	ble.n	1b9d2 <__adddf3+0x16a>
   1b9c0:	f102 0c14 	add.w	ip, r2, #20
   1b9c4:	f1c2 020c 	rsb	r2, r2, #12
   1b9c8:	fa01 f00c 	lsl.w	r0, r1, ip
   1b9cc:	fa21 f102 	lsr.w	r1, r1, r2
   1b9d0:	e00c      	b.n	1b9ec <__adddf3+0x184>
   1b9d2:	f102 0214 	add.w	r2, r2, #20
   1b9d6:	bfd8      	it	le
   1b9d8:	f1c2 0c20 	rsble	ip, r2, #32
   1b9dc:	fa01 f102 	lsl.w	r1, r1, r2
   1b9e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b9e4:	bfdc      	itt	le
   1b9e6:	ea41 010c 	orrle.w	r1, r1, ip
   1b9ea:	4090      	lslle	r0, r2
   1b9ec:	1ae4      	subs	r4, r4, r3
   1b9ee:	bfa2      	ittt	ge
   1b9f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b9f4:	4329      	orrge	r1, r5
   1b9f6:	bd30      	popge	{r4, r5, pc}
   1b9f8:	ea6f 0404 	mvn.w	r4, r4
   1b9fc:	3c1f      	subs	r4, #31
   1b9fe:	da1c      	bge.n	1ba3a <__adddf3+0x1d2>
   1ba00:	340c      	adds	r4, #12
   1ba02:	dc0e      	bgt.n	1ba22 <__adddf3+0x1ba>
   1ba04:	f104 0414 	add.w	r4, r4, #20
   1ba08:	f1c4 0220 	rsb	r2, r4, #32
   1ba0c:	fa20 f004 	lsr.w	r0, r0, r4
   1ba10:	fa01 f302 	lsl.w	r3, r1, r2
   1ba14:	ea40 0003 	orr.w	r0, r0, r3
   1ba18:	fa21 f304 	lsr.w	r3, r1, r4
   1ba1c:	ea45 0103 	orr.w	r1, r5, r3
   1ba20:	bd30      	pop	{r4, r5, pc}
   1ba22:	f1c4 040c 	rsb	r4, r4, #12
   1ba26:	f1c4 0220 	rsb	r2, r4, #32
   1ba2a:	fa20 f002 	lsr.w	r0, r0, r2
   1ba2e:	fa01 f304 	lsl.w	r3, r1, r4
   1ba32:	ea40 0003 	orr.w	r0, r0, r3
   1ba36:	4629      	mov	r1, r5
   1ba38:	bd30      	pop	{r4, r5, pc}
   1ba3a:	fa21 f004 	lsr.w	r0, r1, r4
   1ba3e:	4629      	mov	r1, r5
   1ba40:	bd30      	pop	{r4, r5, pc}
   1ba42:	f094 0f00 	teq	r4, #0
   1ba46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1ba4a:	bf06      	itte	eq
   1ba4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1ba50:	3401      	addeq	r4, #1
   1ba52:	3d01      	subne	r5, #1
   1ba54:	e74e      	b.n	1b8f4 <__adddf3+0x8c>
   1ba56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1ba5a:	bf18      	it	ne
   1ba5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1ba60:	d029      	beq.n	1bab6 <__adddf3+0x24e>
   1ba62:	ea94 0f05 	teq	r4, r5
   1ba66:	bf08      	it	eq
   1ba68:	ea90 0f02 	teqeq	r0, r2
   1ba6c:	d005      	beq.n	1ba7a <__adddf3+0x212>
   1ba6e:	ea54 0c00 	orrs.w	ip, r4, r0
   1ba72:	bf04      	itt	eq
   1ba74:	4619      	moveq	r1, r3
   1ba76:	4610      	moveq	r0, r2
   1ba78:	bd30      	pop	{r4, r5, pc}
   1ba7a:	ea91 0f03 	teq	r1, r3
   1ba7e:	bf1e      	ittt	ne
   1ba80:	2100      	movne	r1, #0
   1ba82:	2000      	movne	r0, #0
   1ba84:	bd30      	popne	{r4, r5, pc}
   1ba86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1ba8a:	d105      	bne.n	1ba98 <__adddf3+0x230>
   1ba8c:	0040      	lsls	r0, r0, #1
   1ba8e:	4149      	adcs	r1, r1
   1ba90:	bf28      	it	cs
   1ba92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1ba96:	bd30      	pop	{r4, r5, pc}
   1ba98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1ba9c:	bf3c      	itt	cc
   1ba9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1baa2:	bd30      	popcc	{r4, r5, pc}
   1baa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1baa8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1baac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bab0:	f04f 0000 	mov.w	r0, #0
   1bab4:	bd30      	pop	{r4, r5, pc}
   1bab6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1baba:	bf1a      	itte	ne
   1babc:	4619      	movne	r1, r3
   1babe:	4610      	movne	r0, r2
   1bac0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1bac4:	bf1c      	itt	ne
   1bac6:	460b      	movne	r3, r1
   1bac8:	4602      	movne	r2, r0
   1baca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bace:	bf06      	itte	eq
   1bad0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1bad4:	ea91 0f03 	teqeq	r1, r3
   1bad8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1badc:	bd30      	pop	{r4, r5, pc}
   1bade:	bf00      	nop

0001bae0 <__aeabi_ui2d>:
   1bae0:	f090 0f00 	teq	r0, #0
   1bae4:	bf04      	itt	eq
   1bae6:	2100      	moveq	r1, #0
   1bae8:	4770      	bxeq	lr
   1baea:	b530      	push	{r4, r5, lr}
   1baec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1baf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1baf4:	f04f 0500 	mov.w	r5, #0
   1baf8:	f04f 0100 	mov.w	r1, #0
   1bafc:	e750      	b.n	1b9a0 <__adddf3+0x138>
   1bafe:	bf00      	nop

0001bb00 <__aeabi_i2d>:
   1bb00:	f090 0f00 	teq	r0, #0
   1bb04:	bf04      	itt	eq
   1bb06:	2100      	moveq	r1, #0
   1bb08:	4770      	bxeq	lr
   1bb0a:	b530      	push	{r4, r5, lr}
   1bb0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bb10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bb14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1bb18:	bf48      	it	mi
   1bb1a:	4240      	negmi	r0, r0
   1bb1c:	f04f 0100 	mov.w	r1, #0
   1bb20:	e73e      	b.n	1b9a0 <__adddf3+0x138>
   1bb22:	bf00      	nop

0001bb24 <__aeabi_f2d>:
   1bb24:	0042      	lsls	r2, r0, #1
   1bb26:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1bb2a:	ea4f 0131 	mov.w	r1, r1, rrx
   1bb2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1bb32:	bf1f      	itttt	ne
   1bb34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1bb38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bb3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1bb40:	4770      	bxne	lr
   1bb42:	f092 0f00 	teq	r2, #0
   1bb46:	bf14      	ite	ne
   1bb48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bb4c:	4770      	bxeq	lr
   1bb4e:	b530      	push	{r4, r5, lr}
   1bb50:	f44f 7460 	mov.w	r4, #896	; 0x380
   1bb54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bb58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bb5c:	e720      	b.n	1b9a0 <__adddf3+0x138>
   1bb5e:	bf00      	nop

0001bb60 <__aeabi_ul2d>:
   1bb60:	ea50 0201 	orrs.w	r2, r0, r1
   1bb64:	bf08      	it	eq
   1bb66:	4770      	bxeq	lr
   1bb68:	b530      	push	{r4, r5, lr}
   1bb6a:	f04f 0500 	mov.w	r5, #0
   1bb6e:	e00a      	b.n	1bb86 <__aeabi_l2d+0x16>

0001bb70 <__aeabi_l2d>:
   1bb70:	ea50 0201 	orrs.w	r2, r0, r1
   1bb74:	bf08      	it	eq
   1bb76:	4770      	bxeq	lr
   1bb78:	b530      	push	{r4, r5, lr}
   1bb7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1bb7e:	d502      	bpl.n	1bb86 <__aeabi_l2d+0x16>
   1bb80:	4240      	negs	r0, r0
   1bb82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1bb86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bb8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bb8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1bb92:	f43f aedc 	beq.w	1b94e <__adddf3+0xe6>
   1bb96:	f04f 0203 	mov.w	r2, #3
   1bb9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bb9e:	bf18      	it	ne
   1bba0:	3203      	addne	r2, #3
   1bba2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1bba6:	bf18      	it	ne
   1bba8:	3203      	addne	r2, #3
   1bbaa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1bbae:	f1c2 0320 	rsb	r3, r2, #32
   1bbb2:	fa00 fc03 	lsl.w	ip, r0, r3
   1bbb6:	fa20 f002 	lsr.w	r0, r0, r2
   1bbba:	fa01 fe03 	lsl.w	lr, r1, r3
   1bbbe:	ea40 000e 	orr.w	r0, r0, lr
   1bbc2:	fa21 f102 	lsr.w	r1, r1, r2
   1bbc6:	4414      	add	r4, r2
   1bbc8:	e6c1      	b.n	1b94e <__adddf3+0xe6>
   1bbca:	bf00      	nop

0001bbcc <__aeabi_dmul>:
   1bbcc:	b570      	push	{r4, r5, r6, lr}
   1bbce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bbd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bbd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bbda:	bf1d      	ittte	ne
   1bbdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bbe0:	ea94 0f0c 	teqne	r4, ip
   1bbe4:	ea95 0f0c 	teqne	r5, ip
   1bbe8:	f000 f8de 	bleq	1bda8 <__aeabi_dmul+0x1dc>
   1bbec:	442c      	add	r4, r5
   1bbee:	ea81 0603 	eor.w	r6, r1, r3
   1bbf2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1bbf6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1bbfa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1bbfe:	bf18      	it	ne
   1bc00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1bc04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bc08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bc0c:	d038      	beq.n	1bc80 <__aeabi_dmul+0xb4>
   1bc0e:	fba0 ce02 	umull	ip, lr, r0, r2
   1bc12:	f04f 0500 	mov.w	r5, #0
   1bc16:	fbe1 e502 	umlal	lr, r5, r1, r2
   1bc1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1bc1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   1bc22:	f04f 0600 	mov.w	r6, #0
   1bc26:	fbe1 5603 	umlal	r5, r6, r1, r3
   1bc2a:	f09c 0f00 	teq	ip, #0
   1bc2e:	bf18      	it	ne
   1bc30:	f04e 0e01 	orrne.w	lr, lr, #1
   1bc34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1bc38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1bc3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1bc40:	d204      	bcs.n	1bc4c <__aeabi_dmul+0x80>
   1bc42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1bc46:	416d      	adcs	r5, r5
   1bc48:	eb46 0606 	adc.w	r6, r6, r6
   1bc4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1bc50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1bc54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1bc58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1bc5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1bc60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bc64:	bf88      	it	hi
   1bc66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bc6a:	d81e      	bhi.n	1bcaa <__aeabi_dmul+0xde>
   1bc6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1bc70:	bf08      	it	eq
   1bc72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1bc76:	f150 0000 	adcs.w	r0, r0, #0
   1bc7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bc7e:	bd70      	pop	{r4, r5, r6, pc}
   1bc80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1bc84:	ea46 0101 	orr.w	r1, r6, r1
   1bc88:	ea40 0002 	orr.w	r0, r0, r2
   1bc8c:	ea81 0103 	eor.w	r1, r1, r3
   1bc90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1bc94:	bfc2      	ittt	gt
   1bc96:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bc9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bc9e:	bd70      	popgt	{r4, r5, r6, pc}
   1bca0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bca4:	f04f 0e00 	mov.w	lr, #0
   1bca8:	3c01      	subs	r4, #1
   1bcaa:	f300 80ab 	bgt.w	1be04 <__aeabi_dmul+0x238>
   1bcae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1bcb2:	bfde      	ittt	le
   1bcb4:	2000      	movle	r0, #0
   1bcb6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1bcba:	bd70      	pople	{r4, r5, r6, pc}
   1bcbc:	f1c4 0400 	rsb	r4, r4, #0
   1bcc0:	3c20      	subs	r4, #32
   1bcc2:	da35      	bge.n	1bd30 <__aeabi_dmul+0x164>
   1bcc4:	340c      	adds	r4, #12
   1bcc6:	dc1b      	bgt.n	1bd00 <__aeabi_dmul+0x134>
   1bcc8:	f104 0414 	add.w	r4, r4, #20
   1bccc:	f1c4 0520 	rsb	r5, r4, #32
   1bcd0:	fa00 f305 	lsl.w	r3, r0, r5
   1bcd4:	fa20 f004 	lsr.w	r0, r0, r4
   1bcd8:	fa01 f205 	lsl.w	r2, r1, r5
   1bcdc:	ea40 0002 	orr.w	r0, r0, r2
   1bce0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1bce4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bce8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bcec:	fa21 f604 	lsr.w	r6, r1, r4
   1bcf0:	eb42 0106 	adc.w	r1, r2, r6
   1bcf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bcf8:	bf08      	it	eq
   1bcfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bcfe:	bd70      	pop	{r4, r5, r6, pc}
   1bd00:	f1c4 040c 	rsb	r4, r4, #12
   1bd04:	f1c4 0520 	rsb	r5, r4, #32
   1bd08:	fa00 f304 	lsl.w	r3, r0, r4
   1bd0c:	fa20 f005 	lsr.w	r0, r0, r5
   1bd10:	fa01 f204 	lsl.w	r2, r1, r4
   1bd14:	ea40 0002 	orr.w	r0, r0, r2
   1bd18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bd1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bd20:	f141 0100 	adc.w	r1, r1, #0
   1bd24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bd28:	bf08      	it	eq
   1bd2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bd2e:	bd70      	pop	{r4, r5, r6, pc}
   1bd30:	f1c4 0520 	rsb	r5, r4, #32
   1bd34:	fa00 f205 	lsl.w	r2, r0, r5
   1bd38:	ea4e 0e02 	orr.w	lr, lr, r2
   1bd3c:	fa20 f304 	lsr.w	r3, r0, r4
   1bd40:	fa01 f205 	lsl.w	r2, r1, r5
   1bd44:	ea43 0302 	orr.w	r3, r3, r2
   1bd48:	fa21 f004 	lsr.w	r0, r1, r4
   1bd4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bd50:	fa21 f204 	lsr.w	r2, r1, r4
   1bd54:	ea20 0002 	bic.w	r0, r0, r2
   1bd58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1bd5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bd60:	bf08      	it	eq
   1bd62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bd66:	bd70      	pop	{r4, r5, r6, pc}
   1bd68:	f094 0f00 	teq	r4, #0
   1bd6c:	d10f      	bne.n	1bd8e <__aeabi_dmul+0x1c2>
   1bd6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1bd72:	0040      	lsls	r0, r0, #1
   1bd74:	eb41 0101 	adc.w	r1, r1, r1
   1bd78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bd7c:	bf08      	it	eq
   1bd7e:	3c01      	subeq	r4, #1
   1bd80:	d0f7      	beq.n	1bd72 <__aeabi_dmul+0x1a6>
   1bd82:	ea41 0106 	orr.w	r1, r1, r6
   1bd86:	f095 0f00 	teq	r5, #0
   1bd8a:	bf18      	it	ne
   1bd8c:	4770      	bxne	lr
   1bd8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1bd92:	0052      	lsls	r2, r2, #1
   1bd94:	eb43 0303 	adc.w	r3, r3, r3
   1bd98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1bd9c:	bf08      	it	eq
   1bd9e:	3d01      	subeq	r5, #1
   1bda0:	d0f7      	beq.n	1bd92 <__aeabi_dmul+0x1c6>
   1bda2:	ea43 0306 	orr.w	r3, r3, r6
   1bda6:	4770      	bx	lr
   1bda8:	ea94 0f0c 	teq	r4, ip
   1bdac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bdb0:	bf18      	it	ne
   1bdb2:	ea95 0f0c 	teqne	r5, ip
   1bdb6:	d00c      	beq.n	1bdd2 <__aeabi_dmul+0x206>
   1bdb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bdbc:	bf18      	it	ne
   1bdbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bdc2:	d1d1      	bne.n	1bd68 <__aeabi_dmul+0x19c>
   1bdc4:	ea81 0103 	eor.w	r1, r1, r3
   1bdc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bdcc:	f04f 0000 	mov.w	r0, #0
   1bdd0:	bd70      	pop	{r4, r5, r6, pc}
   1bdd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bdd6:	bf06      	itte	eq
   1bdd8:	4610      	moveq	r0, r2
   1bdda:	4619      	moveq	r1, r3
   1bddc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bde0:	d019      	beq.n	1be16 <__aeabi_dmul+0x24a>
   1bde2:	ea94 0f0c 	teq	r4, ip
   1bde6:	d102      	bne.n	1bdee <__aeabi_dmul+0x222>
   1bde8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bdec:	d113      	bne.n	1be16 <__aeabi_dmul+0x24a>
   1bdee:	ea95 0f0c 	teq	r5, ip
   1bdf2:	d105      	bne.n	1be00 <__aeabi_dmul+0x234>
   1bdf4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1bdf8:	bf1c      	itt	ne
   1bdfa:	4610      	movne	r0, r2
   1bdfc:	4619      	movne	r1, r3
   1bdfe:	d10a      	bne.n	1be16 <__aeabi_dmul+0x24a>
   1be00:	ea81 0103 	eor.w	r1, r1, r3
   1be04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1be08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1be0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1be10:	f04f 0000 	mov.w	r0, #0
   1be14:	bd70      	pop	{r4, r5, r6, pc}
   1be16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1be1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1be1e:	bd70      	pop	{r4, r5, r6, pc}

0001be20 <__aeabi_ddiv>:
   1be20:	b570      	push	{r4, r5, r6, lr}
   1be22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1be26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1be2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1be2e:	bf1d      	ittte	ne
   1be30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1be34:	ea94 0f0c 	teqne	r4, ip
   1be38:	ea95 0f0c 	teqne	r5, ip
   1be3c:	f000 f8a7 	bleq	1bf8e <__aeabi_ddiv+0x16e>
   1be40:	eba4 0405 	sub.w	r4, r4, r5
   1be44:	ea81 0e03 	eor.w	lr, r1, r3
   1be48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1be4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1be50:	f000 8088 	beq.w	1bf64 <__aeabi_ddiv+0x144>
   1be54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1be58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1be5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1be60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1be64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1be68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1be6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1be70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1be74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1be78:	429d      	cmp	r5, r3
   1be7a:	bf08      	it	eq
   1be7c:	4296      	cmpeq	r6, r2
   1be7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1be82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1be86:	d202      	bcs.n	1be8e <__aeabi_ddiv+0x6e>
   1be88:	085b      	lsrs	r3, r3, #1
   1be8a:	ea4f 0232 	mov.w	r2, r2, rrx
   1be8e:	1ab6      	subs	r6, r6, r2
   1be90:	eb65 0503 	sbc.w	r5, r5, r3
   1be94:	085b      	lsrs	r3, r3, #1
   1be96:	ea4f 0232 	mov.w	r2, r2, rrx
   1be9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1be9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1bea2:	ebb6 0e02 	subs.w	lr, r6, r2
   1bea6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1beaa:	bf22      	ittt	cs
   1beac:	1ab6      	subcs	r6, r6, r2
   1beae:	4675      	movcs	r5, lr
   1beb0:	ea40 000c 	orrcs.w	r0, r0, ip
   1beb4:	085b      	lsrs	r3, r3, #1
   1beb6:	ea4f 0232 	mov.w	r2, r2, rrx
   1beba:	ebb6 0e02 	subs.w	lr, r6, r2
   1bebe:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bec2:	bf22      	ittt	cs
   1bec4:	1ab6      	subcs	r6, r6, r2
   1bec6:	4675      	movcs	r5, lr
   1bec8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1becc:	085b      	lsrs	r3, r3, #1
   1bece:	ea4f 0232 	mov.w	r2, r2, rrx
   1bed2:	ebb6 0e02 	subs.w	lr, r6, r2
   1bed6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1beda:	bf22      	ittt	cs
   1bedc:	1ab6      	subcs	r6, r6, r2
   1bede:	4675      	movcs	r5, lr
   1bee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bee4:	085b      	lsrs	r3, r3, #1
   1bee6:	ea4f 0232 	mov.w	r2, r2, rrx
   1beea:	ebb6 0e02 	subs.w	lr, r6, r2
   1beee:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bef2:	bf22      	ittt	cs
   1bef4:	1ab6      	subcs	r6, r6, r2
   1bef6:	4675      	movcs	r5, lr
   1bef8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1befc:	ea55 0e06 	orrs.w	lr, r5, r6
   1bf00:	d018      	beq.n	1bf34 <__aeabi_ddiv+0x114>
   1bf02:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bf06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bf0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bf0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1bf12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bf16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bf1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bf1e:	d1c0      	bne.n	1bea2 <__aeabi_ddiv+0x82>
   1bf20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bf24:	d10b      	bne.n	1bf3e <__aeabi_ddiv+0x11e>
   1bf26:	ea41 0100 	orr.w	r1, r1, r0
   1bf2a:	f04f 0000 	mov.w	r0, #0
   1bf2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1bf32:	e7b6      	b.n	1bea2 <__aeabi_ddiv+0x82>
   1bf34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bf38:	bf04      	itt	eq
   1bf3a:	4301      	orreq	r1, r0
   1bf3c:	2000      	moveq	r0, #0
   1bf3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bf42:	bf88      	it	hi
   1bf44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bf48:	f63f aeaf 	bhi.w	1bcaa <__aeabi_dmul+0xde>
   1bf4c:	ebb5 0c03 	subs.w	ip, r5, r3
   1bf50:	bf04      	itt	eq
   1bf52:	ebb6 0c02 	subseq.w	ip, r6, r2
   1bf56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bf5a:	f150 0000 	adcs.w	r0, r0, #0
   1bf5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bf62:	bd70      	pop	{r4, r5, r6, pc}
   1bf64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1bf68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1bf6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1bf70:	bfc2      	ittt	gt
   1bf72:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bf76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bf7a:	bd70      	popgt	{r4, r5, r6, pc}
   1bf7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bf80:	f04f 0e00 	mov.w	lr, #0
   1bf84:	3c01      	subs	r4, #1
   1bf86:	e690      	b.n	1bcaa <__aeabi_dmul+0xde>
   1bf88:	ea45 0e06 	orr.w	lr, r5, r6
   1bf8c:	e68d      	b.n	1bcaa <__aeabi_dmul+0xde>
   1bf8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bf92:	ea94 0f0c 	teq	r4, ip
   1bf96:	bf08      	it	eq
   1bf98:	ea95 0f0c 	teqeq	r5, ip
   1bf9c:	f43f af3b 	beq.w	1be16 <__aeabi_dmul+0x24a>
   1bfa0:	ea94 0f0c 	teq	r4, ip
   1bfa4:	d10a      	bne.n	1bfbc <__aeabi_ddiv+0x19c>
   1bfa6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bfaa:	f47f af34 	bne.w	1be16 <__aeabi_dmul+0x24a>
   1bfae:	ea95 0f0c 	teq	r5, ip
   1bfb2:	f47f af25 	bne.w	1be00 <__aeabi_dmul+0x234>
   1bfb6:	4610      	mov	r0, r2
   1bfb8:	4619      	mov	r1, r3
   1bfba:	e72c      	b.n	1be16 <__aeabi_dmul+0x24a>
   1bfbc:	ea95 0f0c 	teq	r5, ip
   1bfc0:	d106      	bne.n	1bfd0 <__aeabi_ddiv+0x1b0>
   1bfc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bfc6:	f43f aefd 	beq.w	1bdc4 <__aeabi_dmul+0x1f8>
   1bfca:	4610      	mov	r0, r2
   1bfcc:	4619      	mov	r1, r3
   1bfce:	e722      	b.n	1be16 <__aeabi_dmul+0x24a>
   1bfd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bfd4:	bf18      	it	ne
   1bfd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bfda:	f47f aec5 	bne.w	1bd68 <__aeabi_dmul+0x19c>
   1bfde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1bfe2:	f47f af0d 	bne.w	1be00 <__aeabi_dmul+0x234>
   1bfe6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1bfea:	f47f aeeb 	bne.w	1bdc4 <__aeabi_dmul+0x1f8>
   1bfee:	e712      	b.n	1be16 <__aeabi_dmul+0x24a>

0001bff0 <__gedf2>:
   1bff0:	f04f 3cff 	mov.w	ip, #4294967295
   1bff4:	e006      	b.n	1c004 <__cmpdf2+0x4>
   1bff6:	bf00      	nop

0001bff8 <__ledf2>:
   1bff8:	f04f 0c01 	mov.w	ip, #1
   1bffc:	e002      	b.n	1c004 <__cmpdf2+0x4>
   1bffe:	bf00      	nop

0001c000 <__cmpdf2>:
   1c000:	f04f 0c01 	mov.w	ip, #1
   1c004:	f84d cd04 	str.w	ip, [sp, #-4]!
   1c008:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c00c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c014:	bf18      	it	ne
   1c016:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1c01a:	d01b      	beq.n	1c054 <__cmpdf2+0x54>
   1c01c:	b001      	add	sp, #4
   1c01e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1c022:	bf0c      	ite	eq
   1c024:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1c028:	ea91 0f03 	teqne	r1, r3
   1c02c:	bf02      	ittt	eq
   1c02e:	ea90 0f02 	teqeq	r0, r2
   1c032:	2000      	moveq	r0, #0
   1c034:	4770      	bxeq	lr
   1c036:	f110 0f00 	cmn.w	r0, #0
   1c03a:	ea91 0f03 	teq	r1, r3
   1c03e:	bf58      	it	pl
   1c040:	4299      	cmppl	r1, r3
   1c042:	bf08      	it	eq
   1c044:	4290      	cmpeq	r0, r2
   1c046:	bf2c      	ite	cs
   1c048:	17d8      	asrcs	r0, r3, #31
   1c04a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1c04e:	f040 0001 	orr.w	r0, r0, #1
   1c052:	4770      	bx	lr
   1c054:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c05c:	d102      	bne.n	1c064 <__cmpdf2+0x64>
   1c05e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c062:	d107      	bne.n	1c074 <__cmpdf2+0x74>
   1c064:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c068:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c06c:	d1d6      	bne.n	1c01c <__cmpdf2+0x1c>
   1c06e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c072:	d0d3      	beq.n	1c01c <__cmpdf2+0x1c>
   1c074:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c078:	4770      	bx	lr
   1c07a:	bf00      	nop

0001c07c <__aeabi_cdrcmple>:
   1c07c:	4684      	mov	ip, r0
   1c07e:	4610      	mov	r0, r2
   1c080:	4662      	mov	r2, ip
   1c082:	468c      	mov	ip, r1
   1c084:	4619      	mov	r1, r3
   1c086:	4663      	mov	r3, ip
   1c088:	e000      	b.n	1c08c <__aeabi_cdcmpeq>
   1c08a:	bf00      	nop

0001c08c <__aeabi_cdcmpeq>:
   1c08c:	b501      	push	{r0, lr}
   1c08e:	f7ff ffb7 	bl	1c000 <__cmpdf2>
   1c092:	2800      	cmp	r0, #0
   1c094:	bf48      	it	mi
   1c096:	f110 0f00 	cmnmi.w	r0, #0
   1c09a:	bd01      	pop	{r0, pc}

0001c09c <__aeabi_dcmpeq>:
   1c09c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c0a0:	f7ff fff4 	bl	1c08c <__aeabi_cdcmpeq>
   1c0a4:	bf0c      	ite	eq
   1c0a6:	2001      	moveq	r0, #1
   1c0a8:	2000      	movne	r0, #0
   1c0aa:	f85d fb08 	ldr.w	pc, [sp], #8
   1c0ae:	bf00      	nop

0001c0b0 <__aeabi_dcmplt>:
   1c0b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c0b4:	f7ff ffea 	bl	1c08c <__aeabi_cdcmpeq>
   1c0b8:	bf34      	ite	cc
   1c0ba:	2001      	movcc	r0, #1
   1c0bc:	2000      	movcs	r0, #0
   1c0be:	f85d fb08 	ldr.w	pc, [sp], #8
   1c0c2:	bf00      	nop

0001c0c4 <__aeabi_dcmple>:
   1c0c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c0c8:	f7ff ffe0 	bl	1c08c <__aeabi_cdcmpeq>
   1c0cc:	bf94      	ite	ls
   1c0ce:	2001      	movls	r0, #1
   1c0d0:	2000      	movhi	r0, #0
   1c0d2:	f85d fb08 	ldr.w	pc, [sp], #8
   1c0d6:	bf00      	nop

0001c0d8 <__aeabi_dcmpge>:
   1c0d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c0dc:	f7ff ffce 	bl	1c07c <__aeabi_cdrcmple>
   1c0e0:	bf94      	ite	ls
   1c0e2:	2001      	movls	r0, #1
   1c0e4:	2000      	movhi	r0, #0
   1c0e6:	f85d fb08 	ldr.w	pc, [sp], #8
   1c0ea:	bf00      	nop

0001c0ec <__aeabi_dcmpgt>:
   1c0ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c0f0:	f7ff ffc4 	bl	1c07c <__aeabi_cdrcmple>
   1c0f4:	bf34      	ite	cc
   1c0f6:	2001      	movcc	r0, #1
   1c0f8:	2000      	movcs	r0, #0
   1c0fa:	f85d fb08 	ldr.w	pc, [sp], #8
   1c0fe:	bf00      	nop

0001c100 <__aeabi_d2iz>:
   1c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c104:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c108:	d215      	bcs.n	1c136 <__aeabi_d2iz+0x36>
   1c10a:	d511      	bpl.n	1c130 <__aeabi_d2iz+0x30>
   1c10c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c110:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c114:	d912      	bls.n	1c13c <__aeabi_d2iz+0x3c>
   1c116:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c11a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c11e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c122:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c126:	fa23 f002 	lsr.w	r0, r3, r2
   1c12a:	bf18      	it	ne
   1c12c:	4240      	negne	r0, r0
   1c12e:	4770      	bx	lr
   1c130:	f04f 0000 	mov.w	r0, #0
   1c134:	4770      	bx	lr
   1c136:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c13a:	d105      	bne.n	1c148 <__aeabi_d2iz+0x48>
   1c13c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c140:	bf08      	it	eq
   1c142:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c146:	4770      	bx	lr
   1c148:	f04f 0000 	mov.w	r0, #0
   1c14c:	4770      	bx	lr
   1c14e:	bf00      	nop

0001c150 <__aeabi_d2uiz>:
   1c150:	004a      	lsls	r2, r1, #1
   1c152:	d211      	bcs.n	1c178 <__aeabi_d2uiz+0x28>
   1c154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c158:	d211      	bcs.n	1c17e <__aeabi_d2uiz+0x2e>
   1c15a:	d50d      	bpl.n	1c178 <__aeabi_d2uiz+0x28>
   1c15c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c164:	d40e      	bmi.n	1c184 <__aeabi_d2uiz+0x34>
   1c166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c16a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c16e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c172:	fa23 f002 	lsr.w	r0, r3, r2
   1c176:	4770      	bx	lr
   1c178:	f04f 0000 	mov.w	r0, #0
   1c17c:	4770      	bx	lr
   1c17e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c182:	d102      	bne.n	1c18a <__aeabi_d2uiz+0x3a>
   1c184:	f04f 30ff 	mov.w	r0, #4294967295
   1c188:	4770      	bx	lr
   1c18a:	f04f 0000 	mov.w	r0, #0
   1c18e:	4770      	bx	lr

0001c190 <__aeabi_d2f>:
   1c190:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c194:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c198:	bf24      	itt	cs
   1c19a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c19e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c1a2:	d90d      	bls.n	1c1c0 <__aeabi_d2f+0x30>
   1c1a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c1a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c1ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c1b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c1b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c1b8:	bf08      	it	eq
   1c1ba:	f020 0001 	biceq.w	r0, r0, #1
   1c1be:	4770      	bx	lr
   1c1c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c1c4:	d121      	bne.n	1c20a <__aeabi_d2f+0x7a>
   1c1c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c1ca:	bfbc      	itt	lt
   1c1cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c1d0:	4770      	bxlt	lr
   1c1d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c1d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c1da:	f1c2 0218 	rsb	r2, r2, #24
   1c1de:	f1c2 0c20 	rsb	ip, r2, #32
   1c1e2:	fa10 f30c 	lsls.w	r3, r0, ip
   1c1e6:	fa20 f002 	lsr.w	r0, r0, r2
   1c1ea:	bf18      	it	ne
   1c1ec:	f040 0001 	orrne.w	r0, r0, #1
   1c1f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c1f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c1f8:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c1fc:	ea40 000c 	orr.w	r0, r0, ip
   1c200:	fa23 f302 	lsr.w	r3, r3, r2
   1c204:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c208:	e7cc      	b.n	1c1a4 <__aeabi_d2f+0x14>
   1c20a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c20e:	d107      	bne.n	1c220 <__aeabi_d2f+0x90>
   1c210:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c214:	bf1e      	ittt	ne
   1c216:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c21a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c21e:	4770      	bxne	lr
   1c220:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c224:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c228:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c22c:	4770      	bx	lr
   1c22e:	bf00      	nop

0001c230 <__aeabi_frsub>:
   1c230:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c234:	e002      	b.n	1c23c <__addsf3>
   1c236:	bf00      	nop

0001c238 <__aeabi_fsub>:
   1c238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c23c <__addsf3>:
   1c23c:	0042      	lsls	r2, r0, #1
   1c23e:	bf1f      	itttt	ne
   1c240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c244:	ea92 0f03 	teqne	r2, r3
   1c248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c24c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c250:	d06a      	beq.n	1c328 <__addsf3+0xec>
   1c252:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c25a:	bfc1      	itttt	gt
   1c25c:	18d2      	addgt	r2, r2, r3
   1c25e:	4041      	eorgt	r1, r0
   1c260:	4048      	eorgt	r0, r1
   1c262:	4041      	eorgt	r1, r0
   1c264:	bfb8      	it	lt
   1c266:	425b      	neglt	r3, r3
   1c268:	2b19      	cmp	r3, #25
   1c26a:	bf88      	it	hi
   1c26c:	4770      	bxhi	lr
   1c26e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c272:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c27a:	bf18      	it	ne
   1c27c:	4240      	negne	r0, r0
   1c27e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c282:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c286:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c28a:	bf18      	it	ne
   1c28c:	4249      	negne	r1, r1
   1c28e:	ea92 0f03 	teq	r2, r3
   1c292:	d03f      	beq.n	1c314 <__addsf3+0xd8>
   1c294:	f1a2 0201 	sub.w	r2, r2, #1
   1c298:	fa41 fc03 	asr.w	ip, r1, r3
   1c29c:	eb10 000c 	adds.w	r0, r0, ip
   1c2a0:	f1c3 0320 	rsb	r3, r3, #32
   1c2a4:	fa01 f103 	lsl.w	r1, r1, r3
   1c2a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c2ac:	d502      	bpl.n	1c2b4 <__addsf3+0x78>
   1c2ae:	4249      	negs	r1, r1
   1c2b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c2b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c2b8:	d313      	bcc.n	1c2e2 <__addsf3+0xa6>
   1c2ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c2be:	d306      	bcc.n	1c2ce <__addsf3+0x92>
   1c2c0:	0840      	lsrs	r0, r0, #1
   1c2c2:	ea4f 0131 	mov.w	r1, r1, rrx
   1c2c6:	f102 0201 	add.w	r2, r2, #1
   1c2ca:	2afe      	cmp	r2, #254	; 0xfe
   1c2cc:	d251      	bcs.n	1c372 <__addsf3+0x136>
   1c2ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c2d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c2d6:	bf08      	it	eq
   1c2d8:	f020 0001 	biceq.w	r0, r0, #1
   1c2dc:	ea40 0003 	orr.w	r0, r0, r3
   1c2e0:	4770      	bx	lr
   1c2e2:	0049      	lsls	r1, r1, #1
   1c2e4:	eb40 0000 	adc.w	r0, r0, r0
   1c2e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c2ec:	f1a2 0201 	sub.w	r2, r2, #1
   1c2f0:	d1ed      	bne.n	1c2ce <__addsf3+0x92>
   1c2f2:	fab0 fc80 	clz	ip, r0
   1c2f6:	f1ac 0c08 	sub.w	ip, ip, #8
   1c2fa:	ebb2 020c 	subs.w	r2, r2, ip
   1c2fe:	fa00 f00c 	lsl.w	r0, r0, ip
   1c302:	bfaa      	itet	ge
   1c304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c308:	4252      	neglt	r2, r2
   1c30a:	4318      	orrge	r0, r3
   1c30c:	bfbc      	itt	lt
   1c30e:	40d0      	lsrlt	r0, r2
   1c310:	4318      	orrlt	r0, r3
   1c312:	4770      	bx	lr
   1c314:	f092 0f00 	teq	r2, #0
   1c318:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c31c:	bf06      	itte	eq
   1c31e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c322:	3201      	addeq	r2, #1
   1c324:	3b01      	subne	r3, #1
   1c326:	e7b5      	b.n	1c294 <__addsf3+0x58>
   1c328:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c32c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c330:	bf18      	it	ne
   1c332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c336:	d021      	beq.n	1c37c <__addsf3+0x140>
   1c338:	ea92 0f03 	teq	r2, r3
   1c33c:	d004      	beq.n	1c348 <__addsf3+0x10c>
   1c33e:	f092 0f00 	teq	r2, #0
   1c342:	bf08      	it	eq
   1c344:	4608      	moveq	r0, r1
   1c346:	4770      	bx	lr
   1c348:	ea90 0f01 	teq	r0, r1
   1c34c:	bf1c      	itt	ne
   1c34e:	2000      	movne	r0, #0
   1c350:	4770      	bxne	lr
   1c352:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c356:	d104      	bne.n	1c362 <__addsf3+0x126>
   1c358:	0040      	lsls	r0, r0, #1
   1c35a:	bf28      	it	cs
   1c35c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c360:	4770      	bx	lr
   1c362:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c366:	bf3c      	itt	cc
   1c368:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c36c:	4770      	bxcc	lr
   1c36e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c372:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c376:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c37a:	4770      	bx	lr
   1c37c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c380:	bf16      	itet	ne
   1c382:	4608      	movne	r0, r1
   1c384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c388:	4601      	movne	r1, r0
   1c38a:	0242      	lsls	r2, r0, #9
   1c38c:	bf06      	itte	eq
   1c38e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c392:	ea90 0f01 	teqeq	r0, r1
   1c396:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c39a:	4770      	bx	lr

0001c39c <__aeabi_ui2f>:
   1c39c:	f04f 0300 	mov.w	r3, #0
   1c3a0:	e004      	b.n	1c3ac <__aeabi_i2f+0x8>
   1c3a2:	bf00      	nop

0001c3a4 <__aeabi_i2f>:
   1c3a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c3a8:	bf48      	it	mi
   1c3aa:	4240      	negmi	r0, r0
   1c3ac:	ea5f 0c00 	movs.w	ip, r0
   1c3b0:	bf08      	it	eq
   1c3b2:	4770      	bxeq	lr
   1c3b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c3b8:	4601      	mov	r1, r0
   1c3ba:	f04f 0000 	mov.w	r0, #0
   1c3be:	e01c      	b.n	1c3fa <__aeabi_l2f+0x2a>

0001c3c0 <__aeabi_ul2f>:
   1c3c0:	ea50 0201 	orrs.w	r2, r0, r1
   1c3c4:	bf08      	it	eq
   1c3c6:	4770      	bxeq	lr
   1c3c8:	f04f 0300 	mov.w	r3, #0
   1c3cc:	e00a      	b.n	1c3e4 <__aeabi_l2f+0x14>
   1c3ce:	bf00      	nop

0001c3d0 <__aeabi_l2f>:
   1c3d0:	ea50 0201 	orrs.w	r2, r0, r1
   1c3d4:	bf08      	it	eq
   1c3d6:	4770      	bxeq	lr
   1c3d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c3dc:	d502      	bpl.n	1c3e4 <__aeabi_l2f+0x14>
   1c3de:	4240      	negs	r0, r0
   1c3e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3e4:	ea5f 0c01 	movs.w	ip, r1
   1c3e8:	bf02      	ittt	eq
   1c3ea:	4684      	moveq	ip, r0
   1c3ec:	4601      	moveq	r1, r0
   1c3ee:	2000      	moveq	r0, #0
   1c3f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c3f4:	bf08      	it	eq
   1c3f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c3fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c3fe:	fabc f28c 	clz	r2, ip
   1c402:	3a08      	subs	r2, #8
   1c404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c408:	db10      	blt.n	1c42c <__aeabi_l2f+0x5c>
   1c40a:	fa01 fc02 	lsl.w	ip, r1, r2
   1c40e:	4463      	add	r3, ip
   1c410:	fa00 fc02 	lsl.w	ip, r0, r2
   1c414:	f1c2 0220 	rsb	r2, r2, #32
   1c418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c41c:	fa20 f202 	lsr.w	r2, r0, r2
   1c420:	eb43 0002 	adc.w	r0, r3, r2
   1c424:	bf08      	it	eq
   1c426:	f020 0001 	biceq.w	r0, r0, #1
   1c42a:	4770      	bx	lr
   1c42c:	f102 0220 	add.w	r2, r2, #32
   1c430:	fa01 fc02 	lsl.w	ip, r1, r2
   1c434:	f1c2 0220 	rsb	r2, r2, #32
   1c438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c43c:	fa21 f202 	lsr.w	r2, r1, r2
   1c440:	eb43 0002 	adc.w	r0, r3, r2
   1c444:	bf08      	it	eq
   1c446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c44a:	4770      	bx	lr

0001c44c <__aeabi_ldivmod>:
   1c44c:	b97b      	cbnz	r3, 1c46e <__aeabi_ldivmod+0x22>
   1c44e:	b972      	cbnz	r2, 1c46e <__aeabi_ldivmod+0x22>
   1c450:	2900      	cmp	r1, #0
   1c452:	bfbe      	ittt	lt
   1c454:	2000      	movlt	r0, #0
   1c456:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c45a:	e006      	blt.n	1c46a <__aeabi_ldivmod+0x1e>
   1c45c:	bf08      	it	eq
   1c45e:	2800      	cmpeq	r0, #0
   1c460:	bf1c      	itt	ne
   1c462:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c466:	f04f 30ff 	movne.w	r0, #4294967295
   1c46a:	f001 b979 	b.w	1d760 <__aeabi_idiv0>
   1c46e:	f1ad 0c08 	sub.w	ip, sp, #8
   1c472:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c476:	2900      	cmp	r1, #0
   1c478:	db09      	blt.n	1c48e <__aeabi_ldivmod+0x42>
   1c47a:	2b00      	cmp	r3, #0
   1c47c:	db1a      	blt.n	1c4b4 <__aeabi_ldivmod+0x68>
   1c47e:	f000 f885 	bl	1c58c <__udivmoddi4>
   1c482:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c48a:	b004      	add	sp, #16
   1c48c:	4770      	bx	lr
   1c48e:	4240      	negs	r0, r0
   1c490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c494:	2b00      	cmp	r3, #0
   1c496:	db1b      	blt.n	1c4d0 <__aeabi_ldivmod+0x84>
   1c498:	f000 f878 	bl	1c58c <__udivmoddi4>
   1c49c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c4a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c4a4:	b004      	add	sp, #16
   1c4a6:	4240      	negs	r0, r0
   1c4a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4ac:	4252      	negs	r2, r2
   1c4ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4b2:	4770      	bx	lr
   1c4b4:	4252      	negs	r2, r2
   1c4b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4ba:	f000 f867 	bl	1c58c <__udivmoddi4>
   1c4be:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c4c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c4c6:	b004      	add	sp, #16
   1c4c8:	4240      	negs	r0, r0
   1c4ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4ce:	4770      	bx	lr
   1c4d0:	4252      	negs	r2, r2
   1c4d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d6:	f000 f859 	bl	1c58c <__udivmoddi4>
   1c4da:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c4de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c4e2:	b004      	add	sp, #16
   1c4e4:	4252      	negs	r2, r2
   1c4e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4ea:	4770      	bx	lr

0001c4ec <__aeabi_uldivmod>:
   1c4ec:	b953      	cbnz	r3, 1c504 <__aeabi_uldivmod+0x18>
   1c4ee:	b94a      	cbnz	r2, 1c504 <__aeabi_uldivmod+0x18>
   1c4f0:	2900      	cmp	r1, #0
   1c4f2:	bf08      	it	eq
   1c4f4:	2800      	cmpeq	r0, #0
   1c4f6:	bf1c      	itt	ne
   1c4f8:	f04f 31ff 	movne.w	r1, #4294967295
   1c4fc:	f04f 30ff 	movne.w	r0, #4294967295
   1c500:	f001 b92e 	b.w	1d760 <__aeabi_idiv0>
   1c504:	f1ad 0c08 	sub.w	ip, sp, #8
   1c508:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c50c:	f000 f83e 	bl	1c58c <__udivmoddi4>
   1c510:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c518:	b004      	add	sp, #16
   1c51a:	4770      	bx	lr

0001c51c <__aeabi_f2lz>:
   1c51c:	ee07 0a90 	vmov	s15, r0
   1c520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c528:	d401      	bmi.n	1c52e <__aeabi_f2lz+0x12>
   1c52a:	f000 b809 	b.w	1c540 <__aeabi_f2ulz>
   1c52e:	b508      	push	{r3, lr}
   1c530:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c534:	f000 f804 	bl	1c540 <__aeabi_f2ulz>
   1c538:	4240      	negs	r0, r0
   1c53a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c53e:	bd08      	pop	{r3, pc}

0001c540 <__aeabi_f2ulz>:
   1c540:	b5d0      	push	{r4, r6, r7, lr}
   1c542:	f7ff faef 	bl	1bb24 <__aeabi_f2d>
   1c546:	2200      	movs	r2, #0
   1c548:	4b0e      	ldr	r3, [pc, #56]	; (1c584 <__aeabi_f2ulz+0x44>)
   1c54a:	4606      	mov	r6, r0
   1c54c:	460f      	mov	r7, r1
   1c54e:	f7ff fb3d 	bl	1bbcc <__aeabi_dmul>
   1c552:	f7ff fdfd 	bl	1c150 <__aeabi_d2uiz>
   1c556:	4604      	mov	r4, r0
   1c558:	f7ff fac2 	bl	1bae0 <__aeabi_ui2d>
   1c55c:	2200      	movs	r2, #0
   1c55e:	4b0a      	ldr	r3, [pc, #40]	; (1c588 <__aeabi_f2ulz+0x48>)
   1c560:	f7ff fb34 	bl	1bbcc <__aeabi_dmul>
   1c564:	4602      	mov	r2, r0
   1c566:	460b      	mov	r3, r1
   1c568:	4630      	mov	r0, r6
   1c56a:	4639      	mov	r1, r7
   1c56c:	f7ff f97a 	bl	1b864 <__aeabi_dsub>
   1c570:	f7ff fdee 	bl	1c150 <__aeabi_d2uiz>
   1c574:	4623      	mov	r3, r4
   1c576:	2200      	movs	r2, #0
   1c578:	ea42 0200 	orr.w	r2, r2, r0
   1c57c:	4610      	mov	r0, r2
   1c57e:	4619      	mov	r1, r3
   1c580:	bdd0      	pop	{r4, r6, r7, pc}
   1c582:	bf00      	nop
   1c584:	3df00000 	.word	0x3df00000
   1c588:	41f00000 	.word	0x41f00000

0001c58c <__udivmoddi4>:
   1c58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c590:	468c      	mov	ip, r1
   1c592:	460d      	mov	r5, r1
   1c594:	4604      	mov	r4, r0
   1c596:	9e08      	ldr	r6, [sp, #32]
   1c598:	2b00      	cmp	r3, #0
   1c59a:	d151      	bne.n	1c640 <__udivmoddi4+0xb4>
   1c59c:	428a      	cmp	r2, r1
   1c59e:	4617      	mov	r7, r2
   1c5a0:	d96d      	bls.n	1c67e <__udivmoddi4+0xf2>
   1c5a2:	fab2 fe82 	clz	lr, r2
   1c5a6:	f1be 0f00 	cmp.w	lr, #0
   1c5aa:	d00b      	beq.n	1c5c4 <__udivmoddi4+0x38>
   1c5ac:	f1ce 0c20 	rsb	ip, lr, #32
   1c5b0:	fa01 f50e 	lsl.w	r5, r1, lr
   1c5b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5b8:	fa02 f70e 	lsl.w	r7, r2, lr
   1c5bc:	ea4c 0c05 	orr.w	ip, ip, r5
   1c5c0:	fa00 f40e 	lsl.w	r4, r0, lr
   1c5c4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c5c8:	0c25      	lsrs	r5, r4, #16
   1c5ca:	fbbc f8fa 	udiv	r8, ip, sl
   1c5ce:	fa1f f987 	uxth.w	r9, r7
   1c5d2:	fb0a cc18 	mls	ip, sl, r8, ip
   1c5d6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c5da:	fb08 f309 	mul.w	r3, r8, r9
   1c5de:	42ab      	cmp	r3, r5
   1c5e0:	d90a      	bls.n	1c5f8 <__udivmoddi4+0x6c>
   1c5e2:	19ed      	adds	r5, r5, r7
   1c5e4:	f108 32ff 	add.w	r2, r8, #4294967295
   1c5e8:	f080 8123 	bcs.w	1c832 <__udivmoddi4+0x2a6>
   1c5ec:	42ab      	cmp	r3, r5
   1c5ee:	f240 8120 	bls.w	1c832 <__udivmoddi4+0x2a6>
   1c5f2:	f1a8 0802 	sub.w	r8, r8, #2
   1c5f6:	443d      	add	r5, r7
   1c5f8:	1aed      	subs	r5, r5, r3
   1c5fa:	b2a4      	uxth	r4, r4
   1c5fc:	fbb5 f0fa 	udiv	r0, r5, sl
   1c600:	fb0a 5510 	mls	r5, sl, r0, r5
   1c604:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c608:	fb00 f909 	mul.w	r9, r0, r9
   1c60c:	45a1      	cmp	r9, r4
   1c60e:	d909      	bls.n	1c624 <__udivmoddi4+0x98>
   1c610:	19e4      	adds	r4, r4, r7
   1c612:	f100 33ff 	add.w	r3, r0, #4294967295
   1c616:	f080 810a 	bcs.w	1c82e <__udivmoddi4+0x2a2>
   1c61a:	45a1      	cmp	r9, r4
   1c61c:	f240 8107 	bls.w	1c82e <__udivmoddi4+0x2a2>
   1c620:	3802      	subs	r0, #2
   1c622:	443c      	add	r4, r7
   1c624:	eba4 0409 	sub.w	r4, r4, r9
   1c628:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c62c:	2100      	movs	r1, #0
   1c62e:	2e00      	cmp	r6, #0
   1c630:	d061      	beq.n	1c6f6 <__udivmoddi4+0x16a>
   1c632:	fa24 f40e 	lsr.w	r4, r4, lr
   1c636:	2300      	movs	r3, #0
   1c638:	6034      	str	r4, [r6, #0]
   1c63a:	6073      	str	r3, [r6, #4]
   1c63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c640:	428b      	cmp	r3, r1
   1c642:	d907      	bls.n	1c654 <__udivmoddi4+0xc8>
   1c644:	2e00      	cmp	r6, #0
   1c646:	d054      	beq.n	1c6f2 <__udivmoddi4+0x166>
   1c648:	2100      	movs	r1, #0
   1c64a:	e886 0021 	stmia.w	r6, {r0, r5}
   1c64e:	4608      	mov	r0, r1
   1c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c654:	fab3 f183 	clz	r1, r3
   1c658:	2900      	cmp	r1, #0
   1c65a:	f040 808e 	bne.w	1c77a <__udivmoddi4+0x1ee>
   1c65e:	42ab      	cmp	r3, r5
   1c660:	d302      	bcc.n	1c668 <__udivmoddi4+0xdc>
   1c662:	4282      	cmp	r2, r0
   1c664:	f200 80fa 	bhi.w	1c85c <__udivmoddi4+0x2d0>
   1c668:	1a84      	subs	r4, r0, r2
   1c66a:	eb65 0503 	sbc.w	r5, r5, r3
   1c66e:	2001      	movs	r0, #1
   1c670:	46ac      	mov	ip, r5
   1c672:	2e00      	cmp	r6, #0
   1c674:	d03f      	beq.n	1c6f6 <__udivmoddi4+0x16a>
   1c676:	e886 1010 	stmia.w	r6, {r4, ip}
   1c67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c67e:	b912      	cbnz	r2, 1c686 <__udivmoddi4+0xfa>
   1c680:	2701      	movs	r7, #1
   1c682:	fbb7 f7f2 	udiv	r7, r7, r2
   1c686:	fab7 fe87 	clz	lr, r7
   1c68a:	f1be 0f00 	cmp.w	lr, #0
   1c68e:	d134      	bne.n	1c6fa <__udivmoddi4+0x16e>
   1c690:	1beb      	subs	r3, r5, r7
   1c692:	0c3a      	lsrs	r2, r7, #16
   1c694:	fa1f fc87 	uxth.w	ip, r7
   1c698:	2101      	movs	r1, #1
   1c69a:	fbb3 f8f2 	udiv	r8, r3, r2
   1c69e:	0c25      	lsrs	r5, r4, #16
   1c6a0:	fb02 3318 	mls	r3, r2, r8, r3
   1c6a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c6a8:	fb0c f308 	mul.w	r3, ip, r8
   1c6ac:	42ab      	cmp	r3, r5
   1c6ae:	d907      	bls.n	1c6c0 <__udivmoddi4+0x134>
   1c6b0:	19ed      	adds	r5, r5, r7
   1c6b2:	f108 30ff 	add.w	r0, r8, #4294967295
   1c6b6:	d202      	bcs.n	1c6be <__udivmoddi4+0x132>
   1c6b8:	42ab      	cmp	r3, r5
   1c6ba:	f200 80d1 	bhi.w	1c860 <__udivmoddi4+0x2d4>
   1c6be:	4680      	mov	r8, r0
   1c6c0:	1aed      	subs	r5, r5, r3
   1c6c2:	b2a3      	uxth	r3, r4
   1c6c4:	fbb5 f0f2 	udiv	r0, r5, r2
   1c6c8:	fb02 5510 	mls	r5, r2, r0, r5
   1c6cc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c6d0:	fb0c fc00 	mul.w	ip, ip, r0
   1c6d4:	45a4      	cmp	ip, r4
   1c6d6:	d907      	bls.n	1c6e8 <__udivmoddi4+0x15c>
   1c6d8:	19e4      	adds	r4, r4, r7
   1c6da:	f100 33ff 	add.w	r3, r0, #4294967295
   1c6de:	d202      	bcs.n	1c6e6 <__udivmoddi4+0x15a>
   1c6e0:	45a4      	cmp	ip, r4
   1c6e2:	f200 80b8 	bhi.w	1c856 <__udivmoddi4+0x2ca>
   1c6e6:	4618      	mov	r0, r3
   1c6e8:	eba4 040c 	sub.w	r4, r4, ip
   1c6ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c6f0:	e79d      	b.n	1c62e <__udivmoddi4+0xa2>
   1c6f2:	4631      	mov	r1, r6
   1c6f4:	4630      	mov	r0, r6
   1c6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6fa:	f1ce 0420 	rsb	r4, lr, #32
   1c6fe:	fa05 f30e 	lsl.w	r3, r5, lr
   1c702:	fa07 f70e 	lsl.w	r7, r7, lr
   1c706:	fa20 f804 	lsr.w	r8, r0, r4
   1c70a:	0c3a      	lsrs	r2, r7, #16
   1c70c:	fa25 f404 	lsr.w	r4, r5, r4
   1c710:	ea48 0803 	orr.w	r8, r8, r3
   1c714:	fbb4 f1f2 	udiv	r1, r4, r2
   1c718:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c71c:	fb02 4411 	mls	r4, r2, r1, r4
   1c720:	fa1f fc87 	uxth.w	ip, r7
   1c724:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c728:	fb01 f30c 	mul.w	r3, r1, ip
   1c72c:	42ab      	cmp	r3, r5
   1c72e:	fa00 f40e 	lsl.w	r4, r0, lr
   1c732:	d909      	bls.n	1c748 <__udivmoddi4+0x1bc>
   1c734:	19ed      	adds	r5, r5, r7
   1c736:	f101 30ff 	add.w	r0, r1, #4294967295
   1c73a:	f080 808a 	bcs.w	1c852 <__udivmoddi4+0x2c6>
   1c73e:	42ab      	cmp	r3, r5
   1c740:	f240 8087 	bls.w	1c852 <__udivmoddi4+0x2c6>
   1c744:	3902      	subs	r1, #2
   1c746:	443d      	add	r5, r7
   1c748:	1aeb      	subs	r3, r5, r3
   1c74a:	fa1f f588 	uxth.w	r5, r8
   1c74e:	fbb3 f0f2 	udiv	r0, r3, r2
   1c752:	fb02 3310 	mls	r3, r2, r0, r3
   1c756:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c75a:	fb00 f30c 	mul.w	r3, r0, ip
   1c75e:	42ab      	cmp	r3, r5
   1c760:	d907      	bls.n	1c772 <__udivmoddi4+0x1e6>
   1c762:	19ed      	adds	r5, r5, r7
   1c764:	f100 38ff 	add.w	r8, r0, #4294967295
   1c768:	d26f      	bcs.n	1c84a <__udivmoddi4+0x2be>
   1c76a:	42ab      	cmp	r3, r5
   1c76c:	d96d      	bls.n	1c84a <__udivmoddi4+0x2be>
   1c76e:	3802      	subs	r0, #2
   1c770:	443d      	add	r5, r7
   1c772:	1aeb      	subs	r3, r5, r3
   1c774:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c778:	e78f      	b.n	1c69a <__udivmoddi4+0x10e>
   1c77a:	f1c1 0720 	rsb	r7, r1, #32
   1c77e:	fa22 f807 	lsr.w	r8, r2, r7
   1c782:	408b      	lsls	r3, r1
   1c784:	fa05 f401 	lsl.w	r4, r5, r1
   1c788:	ea48 0303 	orr.w	r3, r8, r3
   1c78c:	fa20 fe07 	lsr.w	lr, r0, r7
   1c790:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c794:	40fd      	lsrs	r5, r7
   1c796:	ea4e 0e04 	orr.w	lr, lr, r4
   1c79a:	fbb5 f9fc 	udiv	r9, r5, ip
   1c79e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c7a2:	fb0c 5519 	mls	r5, ip, r9, r5
   1c7a6:	fa1f f883 	uxth.w	r8, r3
   1c7aa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c7ae:	fb09 f408 	mul.w	r4, r9, r8
   1c7b2:	42ac      	cmp	r4, r5
   1c7b4:	fa02 f201 	lsl.w	r2, r2, r1
   1c7b8:	fa00 fa01 	lsl.w	sl, r0, r1
   1c7bc:	d908      	bls.n	1c7d0 <__udivmoddi4+0x244>
   1c7be:	18ed      	adds	r5, r5, r3
   1c7c0:	f109 30ff 	add.w	r0, r9, #4294967295
   1c7c4:	d243      	bcs.n	1c84e <__udivmoddi4+0x2c2>
   1c7c6:	42ac      	cmp	r4, r5
   1c7c8:	d941      	bls.n	1c84e <__udivmoddi4+0x2c2>
   1c7ca:	f1a9 0902 	sub.w	r9, r9, #2
   1c7ce:	441d      	add	r5, r3
   1c7d0:	1b2d      	subs	r5, r5, r4
   1c7d2:	fa1f fe8e 	uxth.w	lr, lr
   1c7d6:	fbb5 f0fc 	udiv	r0, r5, ip
   1c7da:	fb0c 5510 	mls	r5, ip, r0, r5
   1c7de:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c7e2:	fb00 f808 	mul.w	r8, r0, r8
   1c7e6:	45a0      	cmp	r8, r4
   1c7e8:	d907      	bls.n	1c7fa <__udivmoddi4+0x26e>
   1c7ea:	18e4      	adds	r4, r4, r3
   1c7ec:	f100 35ff 	add.w	r5, r0, #4294967295
   1c7f0:	d229      	bcs.n	1c846 <__udivmoddi4+0x2ba>
   1c7f2:	45a0      	cmp	r8, r4
   1c7f4:	d927      	bls.n	1c846 <__udivmoddi4+0x2ba>
   1c7f6:	3802      	subs	r0, #2
   1c7f8:	441c      	add	r4, r3
   1c7fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c7fe:	eba4 0408 	sub.w	r4, r4, r8
   1c802:	fba0 8902 	umull	r8, r9, r0, r2
   1c806:	454c      	cmp	r4, r9
   1c808:	46c6      	mov	lr, r8
   1c80a:	464d      	mov	r5, r9
   1c80c:	d315      	bcc.n	1c83a <__udivmoddi4+0x2ae>
   1c80e:	d012      	beq.n	1c836 <__udivmoddi4+0x2aa>
   1c810:	b156      	cbz	r6, 1c828 <__udivmoddi4+0x29c>
   1c812:	ebba 030e 	subs.w	r3, sl, lr
   1c816:	eb64 0405 	sbc.w	r4, r4, r5
   1c81a:	fa04 f707 	lsl.w	r7, r4, r7
   1c81e:	40cb      	lsrs	r3, r1
   1c820:	431f      	orrs	r7, r3
   1c822:	40cc      	lsrs	r4, r1
   1c824:	6037      	str	r7, [r6, #0]
   1c826:	6074      	str	r4, [r6, #4]
   1c828:	2100      	movs	r1, #0
   1c82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c82e:	4618      	mov	r0, r3
   1c830:	e6f8      	b.n	1c624 <__udivmoddi4+0x98>
   1c832:	4690      	mov	r8, r2
   1c834:	e6e0      	b.n	1c5f8 <__udivmoddi4+0x6c>
   1c836:	45c2      	cmp	sl, r8
   1c838:	d2ea      	bcs.n	1c810 <__udivmoddi4+0x284>
   1c83a:	ebb8 0e02 	subs.w	lr, r8, r2
   1c83e:	eb69 0503 	sbc.w	r5, r9, r3
   1c842:	3801      	subs	r0, #1
   1c844:	e7e4      	b.n	1c810 <__udivmoddi4+0x284>
   1c846:	4628      	mov	r0, r5
   1c848:	e7d7      	b.n	1c7fa <__udivmoddi4+0x26e>
   1c84a:	4640      	mov	r0, r8
   1c84c:	e791      	b.n	1c772 <__udivmoddi4+0x1e6>
   1c84e:	4681      	mov	r9, r0
   1c850:	e7be      	b.n	1c7d0 <__udivmoddi4+0x244>
   1c852:	4601      	mov	r1, r0
   1c854:	e778      	b.n	1c748 <__udivmoddi4+0x1bc>
   1c856:	3802      	subs	r0, #2
   1c858:	443c      	add	r4, r7
   1c85a:	e745      	b.n	1c6e8 <__udivmoddi4+0x15c>
   1c85c:	4608      	mov	r0, r1
   1c85e:	e708      	b.n	1c672 <__udivmoddi4+0xe6>
   1c860:	f1a8 0802 	sub.w	r8, r8, #2
   1c864:	443d      	add	r5, r7
   1c866:	e72b      	b.n	1c6c0 <__udivmoddi4+0x134>

0001c868 <selfrel_offset31>:
   1c868:	6803      	ldr	r3, [r0, #0]
   1c86a:	005a      	lsls	r2, r3, #1
   1c86c:	bf4c      	ite	mi
   1c86e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c872:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c876:	4418      	add	r0, r3
   1c878:	4770      	bx	lr
   1c87a:	bf00      	nop

0001c87c <search_EIT_table>:
   1c87c:	b361      	cbz	r1, 1c8d8 <search_EIT_table+0x5c>
   1c87e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c882:	f101 3aff 	add.w	sl, r1, #4294967295
   1c886:	4690      	mov	r8, r2
   1c888:	4606      	mov	r6, r0
   1c88a:	46d1      	mov	r9, sl
   1c88c:	2700      	movs	r7, #0
   1c88e:	eb07 0409 	add.w	r4, r7, r9
   1c892:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c896:	1064      	asrs	r4, r4, #1
   1c898:	00e5      	lsls	r5, r4, #3
   1c89a:	1971      	adds	r1, r6, r5
   1c89c:	4608      	mov	r0, r1
   1c89e:	f7ff ffe3 	bl	1c868 <selfrel_offset31>
   1c8a2:	45a2      	cmp	sl, r4
   1c8a4:	4683      	mov	fp, r0
   1c8a6:	f105 0008 	add.w	r0, r5, #8
   1c8aa:	4430      	add	r0, r6
   1c8ac:	d009      	beq.n	1c8c2 <search_EIT_table+0x46>
   1c8ae:	f7ff ffdb 	bl	1c868 <selfrel_offset31>
   1c8b2:	45c3      	cmp	fp, r8
   1c8b4:	f100 30ff 	add.w	r0, r0, #4294967295
   1c8b8:	d805      	bhi.n	1c8c6 <search_EIT_table+0x4a>
   1c8ba:	4540      	cmp	r0, r8
   1c8bc:	d209      	bcs.n	1c8d2 <search_EIT_table+0x56>
   1c8be:	1c67      	adds	r7, r4, #1
   1c8c0:	e7e5      	b.n	1c88e <search_EIT_table+0x12>
   1c8c2:	45c3      	cmp	fp, r8
   1c8c4:	d905      	bls.n	1c8d2 <search_EIT_table+0x56>
   1c8c6:	42a7      	cmp	r7, r4
   1c8c8:	d002      	beq.n	1c8d0 <search_EIT_table+0x54>
   1c8ca:	f104 39ff 	add.w	r9, r4, #4294967295
   1c8ce:	e7de      	b.n	1c88e <search_EIT_table+0x12>
   1c8d0:	2100      	movs	r1, #0
   1c8d2:	4608      	mov	r0, r1
   1c8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8d8:	4608      	mov	r0, r1
   1c8da:	4770      	bx	lr

0001c8dc <__gnu_unwind_get_pr_addr>:
   1c8dc:	2801      	cmp	r0, #1
   1c8de:	d007      	beq.n	1c8f0 <__gnu_unwind_get_pr_addr+0x14>
   1c8e0:	2802      	cmp	r0, #2
   1c8e2:	d007      	beq.n	1c8f4 <__gnu_unwind_get_pr_addr+0x18>
   1c8e4:	4b04      	ldr	r3, [pc, #16]	; (1c8f8 <__gnu_unwind_get_pr_addr+0x1c>)
   1c8e6:	2800      	cmp	r0, #0
   1c8e8:	bf0c      	ite	eq
   1c8ea:	4618      	moveq	r0, r3
   1c8ec:	2000      	movne	r0, #0
   1c8ee:	4770      	bx	lr
   1c8f0:	4802      	ldr	r0, [pc, #8]	; (1c8fc <__gnu_unwind_get_pr_addr+0x20>)
   1c8f2:	4770      	bx	lr
   1c8f4:	4802      	ldr	r0, [pc, #8]	; (1c900 <__gnu_unwind_get_pr_addr+0x24>)
   1c8f6:	4770      	bx	lr
   1c8f8:	0001cfe1 	.word	0x0001cfe1
   1c8fc:	0001cfe5 	.word	0x0001cfe5
   1c900:	0001cfe9 	.word	0x0001cfe9

0001c904 <get_eit_entry>:
   1c904:	b530      	push	{r4, r5, lr}
   1c906:	4b24      	ldr	r3, [pc, #144]	; (1c998 <get_eit_entry+0x94>)
   1c908:	b083      	sub	sp, #12
   1c90a:	4604      	mov	r4, r0
   1c90c:	1e8d      	subs	r5, r1, #2
   1c90e:	b37b      	cbz	r3, 1c970 <get_eit_entry+0x6c>
   1c910:	a901      	add	r1, sp, #4
   1c912:	4628      	mov	r0, r5
   1c914:	f3af 8000 	nop.w
   1c918:	b320      	cbz	r0, 1c964 <get_eit_entry+0x60>
   1c91a:	9901      	ldr	r1, [sp, #4]
   1c91c:	462a      	mov	r2, r5
   1c91e:	f7ff ffad 	bl	1c87c <search_EIT_table>
   1c922:	4601      	mov	r1, r0
   1c924:	b1f0      	cbz	r0, 1c964 <get_eit_entry+0x60>
   1c926:	f7ff ff9f 	bl	1c868 <selfrel_offset31>
   1c92a:	684b      	ldr	r3, [r1, #4]
   1c92c:	64a0      	str	r0, [r4, #72]	; 0x48
   1c92e:	2b01      	cmp	r3, #1
   1c930:	d012      	beq.n	1c958 <get_eit_entry+0x54>
   1c932:	2b00      	cmp	r3, #0
   1c934:	f101 0004 	add.w	r0, r1, #4
   1c938:	db20      	blt.n	1c97c <get_eit_entry+0x78>
   1c93a:	f7ff ff95 	bl	1c868 <selfrel_offset31>
   1c93e:	2300      	movs	r3, #0
   1c940:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c942:	6523      	str	r3, [r4, #80]	; 0x50
   1c944:	6803      	ldr	r3, [r0, #0]
   1c946:	2b00      	cmp	r3, #0
   1c948:	db1c      	blt.n	1c984 <get_eit_entry+0x80>
   1c94a:	f7ff ff8d 	bl	1c868 <selfrel_offset31>
   1c94e:	2300      	movs	r3, #0
   1c950:	6120      	str	r0, [r4, #16]
   1c952:	4618      	mov	r0, r3
   1c954:	b003      	add	sp, #12
   1c956:	bd30      	pop	{r4, r5, pc}
   1c958:	2300      	movs	r3, #0
   1c95a:	6123      	str	r3, [r4, #16]
   1c95c:	2305      	movs	r3, #5
   1c95e:	4618      	mov	r0, r3
   1c960:	b003      	add	sp, #12
   1c962:	bd30      	pop	{r4, r5, pc}
   1c964:	2300      	movs	r3, #0
   1c966:	6123      	str	r3, [r4, #16]
   1c968:	2309      	movs	r3, #9
   1c96a:	4618      	mov	r0, r3
   1c96c:	b003      	add	sp, #12
   1c96e:	bd30      	pop	{r4, r5, pc}
   1c970:	490a      	ldr	r1, [pc, #40]	; (1c99c <get_eit_entry+0x98>)
   1c972:	480b      	ldr	r0, [pc, #44]	; (1c9a0 <get_eit_entry+0x9c>)
   1c974:	1a09      	subs	r1, r1, r0
   1c976:	10c9      	asrs	r1, r1, #3
   1c978:	9101      	str	r1, [sp, #4]
   1c97a:	e7cf      	b.n	1c91c <get_eit_entry+0x18>
   1c97c:	2301      	movs	r3, #1
   1c97e:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c980:	6523      	str	r3, [r4, #80]	; 0x50
   1c982:	e7df      	b.n	1c944 <get_eit_entry+0x40>
   1c984:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1c988:	f7ff ffa8 	bl	1c8dc <__gnu_unwind_get_pr_addr>
   1c98c:	2800      	cmp	r0, #0
   1c98e:	6120      	str	r0, [r4, #16]
   1c990:	bf14      	ite	ne
   1c992:	2300      	movne	r3, #0
   1c994:	2309      	moveq	r3, #9
   1c996:	e7dc      	b.n	1c952 <get_eit_entry+0x4e>
   1c998:	00000000 	.word	0x00000000
   1c99c:	000251e4 	.word	0x000251e4
   1c9a0:	0002505c 	.word	0x0002505c

0001c9a4 <restore_non_core_regs>:
   1c9a4:	6803      	ldr	r3, [r0, #0]
   1c9a6:	07da      	lsls	r2, r3, #31
   1c9a8:	b510      	push	{r4, lr}
   1c9aa:	4604      	mov	r4, r0
   1c9ac:	d406      	bmi.n	1c9bc <restore_non_core_regs+0x18>
   1c9ae:	079b      	lsls	r3, r3, #30
   1c9b0:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1c9b4:	d509      	bpl.n	1c9ca <restore_non_core_regs+0x26>
   1c9b6:	f000 fc51 	bl	1d25c <__gnu_Unwind_Restore_VFP_D>
   1c9ba:	6823      	ldr	r3, [r4, #0]
   1c9bc:	0759      	lsls	r1, r3, #29
   1c9be:	d509      	bpl.n	1c9d4 <restore_non_core_regs+0x30>
   1c9c0:	071a      	lsls	r2, r3, #28
   1c9c2:	d50e      	bpl.n	1c9e2 <restore_non_core_regs+0x3e>
   1c9c4:	06db      	lsls	r3, r3, #27
   1c9c6:	d513      	bpl.n	1c9f0 <restore_non_core_regs+0x4c>
   1c9c8:	bd10      	pop	{r4, pc}
   1c9ca:	f000 fc3f 	bl	1d24c <__gnu_Unwind_Restore_VFP>
   1c9ce:	6823      	ldr	r3, [r4, #0]
   1c9d0:	0759      	lsls	r1, r3, #29
   1c9d2:	d4f5      	bmi.n	1c9c0 <restore_non_core_regs+0x1c>
   1c9d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1c9d8:	f000 fc48 	bl	1d26c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c9dc:	6823      	ldr	r3, [r4, #0]
   1c9de:	071a      	lsls	r2, r3, #28
   1c9e0:	d4f0      	bmi.n	1c9c4 <restore_non_core_regs+0x20>
   1c9e2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1c9e6:	f000 fc49 	bl	1d27c <__gnu_Unwind_Restore_WMMXD>
   1c9ea:	6823      	ldr	r3, [r4, #0]
   1c9ec:	06db      	lsls	r3, r3, #27
   1c9ee:	d4eb      	bmi.n	1c9c8 <restore_non_core_regs+0x24>
   1c9f0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1c9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c9f8:	f000 bc84 	b.w	1d304 <__gnu_Unwind_Restore_WMMXC>

0001c9fc <_Unwind_decode_typeinfo_ptr.isra.0>:
   1c9fc:	6803      	ldr	r3, [r0, #0]
   1c9fe:	b103      	cbz	r3, 1ca02 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1ca00:	4403      	add	r3, r0
   1ca02:	4618      	mov	r0, r3
   1ca04:	4770      	bx	lr
   1ca06:	bf00      	nop

0001ca08 <__gnu_unwind_24bit.isra.1>:
   1ca08:	2009      	movs	r0, #9
   1ca0a:	4770      	bx	lr

0001ca0c <_Unwind_DebugHook>:
   1ca0c:	4770      	bx	lr
   1ca0e:	bf00      	nop

0001ca10 <unwind_phase2>:
   1ca10:	b570      	push	{r4, r5, r6, lr}
   1ca12:	4604      	mov	r4, r0
   1ca14:	460d      	mov	r5, r1
   1ca16:	e008      	b.n	1ca2a <unwind_phase2+0x1a>
   1ca18:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1ca1a:	6163      	str	r3, [r4, #20]
   1ca1c:	462a      	mov	r2, r5
   1ca1e:	6923      	ldr	r3, [r4, #16]
   1ca20:	4621      	mov	r1, r4
   1ca22:	2001      	movs	r0, #1
   1ca24:	4798      	blx	r3
   1ca26:	2808      	cmp	r0, #8
   1ca28:	d108      	bne.n	1ca3c <unwind_phase2+0x2c>
   1ca2a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1ca2c:	4620      	mov	r0, r4
   1ca2e:	f7ff ff69 	bl	1c904 <get_eit_entry>
   1ca32:	4606      	mov	r6, r0
   1ca34:	2800      	cmp	r0, #0
   1ca36:	d0ef      	beq.n	1ca18 <unwind_phase2+0x8>
   1ca38:	f000 fe94 	bl	1d764 <abort>
   1ca3c:	2807      	cmp	r0, #7
   1ca3e:	d1fb      	bne.n	1ca38 <unwind_phase2+0x28>
   1ca40:	4630      	mov	r0, r6
   1ca42:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1ca44:	f7ff ffe2 	bl	1ca0c <_Unwind_DebugHook>
   1ca48:	1d28      	adds	r0, r5, #4
   1ca4a:	f000 fbf3 	bl	1d234 <__restore_core_regs>
   1ca4e:	bf00      	nop

0001ca50 <unwind_phase2_forced>:
   1ca50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ca54:	1d0c      	adds	r4, r1, #4
   1ca56:	4605      	mov	r5, r0
   1ca58:	4692      	mov	sl, r2
   1ca5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ca5c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1ca60:	ae03      	add	r6, sp, #12
   1ca62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ca64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ca66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ca68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ca6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ca6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ca70:	ac02      	add	r4, sp, #8
   1ca72:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1ca76:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1ca7a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1ca7e:	2300      	movs	r3, #0
   1ca80:	4628      	mov	r0, r5
   1ca82:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1ca84:	6023      	str	r3, [r4, #0]
   1ca86:	f7ff ff3d 	bl	1c904 <get_eit_entry>
   1ca8a:	f1ba 0f00 	cmp.w	sl, #0
   1ca8e:	4607      	mov	r7, r0
   1ca90:	bf14      	ite	ne
   1ca92:	260a      	movne	r6, #10
   1ca94:	2609      	moveq	r6, #9
   1ca96:	b17f      	cbz	r7, 1cab8 <unwind_phase2_forced+0x68>
   1ca98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ca9a:	f046 0110 	orr.w	r1, r6, #16
   1ca9e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1caa2:	462a      	mov	r2, r5
   1caa4:	6463      	str	r3, [r4, #68]	; 0x44
   1caa6:	2001      	movs	r0, #1
   1caa8:	462b      	mov	r3, r5
   1caaa:	47c0      	blx	r8
   1caac:	bb78      	cbnz	r0, 1cb0e <unwind_phase2_forced+0xbe>
   1caae:	4638      	mov	r0, r7
   1cab0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1caba:	616b      	str	r3, [r5, #20]
   1cabc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1cac0:	4621      	mov	r1, r4
   1cac2:	a87a      	add	r0, sp, #488	; 0x1e8
   1cac4:	f001 fc54 	bl	1e370 <memcpy>
   1cac8:	692b      	ldr	r3, [r5, #16]
   1caca:	aa7a      	add	r2, sp, #488	; 0x1e8
   1cacc:	4629      	mov	r1, r5
   1cace:	4630      	mov	r0, r6
   1cad0:	4798      	blx	r3
   1cad2:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1cad4:	4682      	mov	sl, r0
   1cad6:	e88d 0210 	stmia.w	sp, {r4, r9}
   1cada:	4631      	mov	r1, r6
   1cadc:	6463      	str	r3, [r4, #68]	; 0x44
   1cade:	462a      	mov	r2, r5
   1cae0:	462b      	mov	r3, r5
   1cae2:	2001      	movs	r0, #1
   1cae4:	47c0      	blx	r8
   1cae6:	b990      	cbnz	r0, 1cb0e <unwind_phase2_forced+0xbe>
   1cae8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1caec:	a97a      	add	r1, sp, #488	; 0x1e8
   1caee:	4620      	mov	r0, r4
   1caf0:	f001 fc3e 	bl	1e370 <memcpy>
   1caf4:	f1ba 0f08 	cmp.w	sl, #8
   1caf8:	d106      	bne.n	1cb08 <unwind_phase2_forced+0xb8>
   1cafa:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cafc:	4628      	mov	r0, r5
   1cafe:	f7ff ff01 	bl	1c904 <get_eit_entry>
   1cb02:	2609      	movs	r6, #9
   1cb04:	4607      	mov	r7, r0
   1cb06:	e7c6      	b.n	1ca96 <unwind_phase2_forced+0x46>
   1cb08:	f1ba 0f07 	cmp.w	sl, #7
   1cb0c:	d005      	beq.n	1cb1a <unwind_phase2_forced+0xca>
   1cb0e:	2709      	movs	r7, #9
   1cb10:	4638      	mov	r0, r7
   1cb12:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1cb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cb1a:	4638      	mov	r0, r7
   1cb1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cb1e:	f7ff ff75 	bl	1ca0c <_Unwind_DebugHook>
   1cb22:	a803      	add	r0, sp, #12
   1cb24:	f000 fb86 	bl	1d234 <__restore_core_regs>

0001cb28 <_Unwind_GetCFA>:
   1cb28:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1cb2a:	4770      	bx	lr

0001cb2c <__gnu_Unwind_RaiseException>:
   1cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb2e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1cb30:	640b      	str	r3, [r1, #64]	; 0x40
   1cb32:	1d0e      	adds	r6, r1, #4
   1cb34:	460f      	mov	r7, r1
   1cb36:	4604      	mov	r4, r0
   1cb38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cb3a:	b0f9      	sub	sp, #484	; 0x1e4
   1cb3c:	ad01      	add	r5, sp, #4
   1cb3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cb40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cb42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cb44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cb46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cb48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1cb4c:	f04f 36ff 	mov.w	r6, #4294967295
   1cb50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1cb54:	9600      	str	r6, [sp, #0]
   1cb56:	e006      	b.n	1cb66 <__gnu_Unwind_RaiseException+0x3a>
   1cb58:	6923      	ldr	r3, [r4, #16]
   1cb5a:	466a      	mov	r2, sp
   1cb5c:	4621      	mov	r1, r4
   1cb5e:	4798      	blx	r3
   1cb60:	2808      	cmp	r0, #8
   1cb62:	4605      	mov	r5, r0
   1cb64:	d108      	bne.n	1cb78 <__gnu_Unwind_RaiseException+0x4c>
   1cb66:	9910      	ldr	r1, [sp, #64]	; 0x40
   1cb68:	4620      	mov	r0, r4
   1cb6a:	f7ff fecb 	bl	1c904 <get_eit_entry>
   1cb6e:	2800      	cmp	r0, #0
   1cb70:	d0f2      	beq.n	1cb58 <__gnu_Unwind_RaiseException+0x2c>
   1cb72:	2009      	movs	r0, #9
   1cb74:	b079      	add	sp, #484	; 0x1e4
   1cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb78:	4668      	mov	r0, sp
   1cb7a:	f7ff ff13 	bl	1c9a4 <restore_non_core_regs>
   1cb7e:	2d06      	cmp	r5, #6
   1cb80:	d1f7      	bne.n	1cb72 <__gnu_Unwind_RaiseException+0x46>
   1cb82:	4639      	mov	r1, r7
   1cb84:	4620      	mov	r0, r4
   1cb86:	f7ff ff43 	bl	1ca10 <unwind_phase2>
   1cb8a:	bf00      	nop

0001cb8c <__gnu_Unwind_ForcedUnwind>:
   1cb8c:	b430      	push	{r4, r5}
   1cb8e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1cb90:	60c1      	str	r1, [r0, #12]
   1cb92:	6182      	str	r2, [r0, #24]
   1cb94:	4619      	mov	r1, r3
   1cb96:	641d      	str	r5, [r3, #64]	; 0x40
   1cb98:	2200      	movs	r2, #0
   1cb9a:	bc30      	pop	{r4, r5}
   1cb9c:	e758      	b.n	1ca50 <unwind_phase2_forced>
   1cb9e:	bf00      	nop

0001cba0 <__gnu_Unwind_Resume>:
   1cba0:	b570      	push	{r4, r5, r6, lr}
   1cba2:	68c6      	ldr	r6, [r0, #12]
   1cba4:	6943      	ldr	r3, [r0, #20]
   1cba6:	640b      	str	r3, [r1, #64]	; 0x40
   1cba8:	b126      	cbz	r6, 1cbb4 <__gnu_Unwind_Resume+0x14>
   1cbaa:	2201      	movs	r2, #1
   1cbac:	f7ff ff50 	bl	1ca50 <unwind_phase2_forced>
   1cbb0:	f000 fdd8 	bl	1d764 <abort>
   1cbb4:	6903      	ldr	r3, [r0, #16]
   1cbb6:	460a      	mov	r2, r1
   1cbb8:	4604      	mov	r4, r0
   1cbba:	460d      	mov	r5, r1
   1cbbc:	4601      	mov	r1, r0
   1cbbe:	2002      	movs	r0, #2
   1cbc0:	4798      	blx	r3
   1cbc2:	2807      	cmp	r0, #7
   1cbc4:	d007      	beq.n	1cbd6 <__gnu_Unwind_Resume+0x36>
   1cbc6:	2808      	cmp	r0, #8
   1cbc8:	d103      	bne.n	1cbd2 <__gnu_Unwind_Resume+0x32>
   1cbca:	4629      	mov	r1, r5
   1cbcc:	4620      	mov	r0, r4
   1cbce:	f7ff ff1f 	bl	1ca10 <unwind_phase2>
   1cbd2:	f000 fdc7 	bl	1d764 <abort>
   1cbd6:	4630      	mov	r0, r6
   1cbd8:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cbda:	f7ff ff17 	bl	1ca0c <_Unwind_DebugHook>
   1cbde:	1d28      	adds	r0, r5, #4
   1cbe0:	f000 fb28 	bl	1d234 <__restore_core_regs>

0001cbe4 <__gnu_Unwind_Resume_or_Rethrow>:
   1cbe4:	68c2      	ldr	r2, [r0, #12]
   1cbe6:	b11a      	cbz	r2, 1cbf0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1cbe8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1cbea:	640a      	str	r2, [r1, #64]	; 0x40
   1cbec:	2200      	movs	r2, #0
   1cbee:	e72f      	b.n	1ca50 <unwind_phase2_forced>
   1cbf0:	e79c      	b.n	1cb2c <__gnu_Unwind_RaiseException>
   1cbf2:	bf00      	nop

0001cbf4 <_Unwind_Complete>:
   1cbf4:	4770      	bx	lr
   1cbf6:	bf00      	nop

0001cbf8 <_Unwind_DeleteException>:
   1cbf8:	6883      	ldr	r3, [r0, #8]
   1cbfa:	b113      	cbz	r3, 1cc02 <_Unwind_DeleteException+0xa>
   1cbfc:	4601      	mov	r1, r0
   1cbfe:	2001      	movs	r0, #1
   1cc00:	4718      	bx	r3
   1cc02:	4770      	bx	lr

0001cc04 <_Unwind_VRS_Get>:
   1cc04:	b500      	push	{lr}
   1cc06:	2904      	cmp	r1, #4
   1cc08:	d807      	bhi.n	1cc1a <_Unwind_VRS_Get+0x16>
   1cc0a:	e8df f001 	tbb	[pc, r1]
   1cc0e:	0903      	.short	0x0903
   1cc10:	0906      	.short	0x0906
   1cc12:	09          	.byte	0x09
   1cc13:	00          	.byte	0x00
   1cc14:	b90b      	cbnz	r3, 1cc1a <_Unwind_VRS_Get+0x16>
   1cc16:	2a0f      	cmp	r2, #15
   1cc18:	d905      	bls.n	1cc26 <_Unwind_VRS_Get+0x22>
   1cc1a:	2002      	movs	r0, #2
   1cc1c:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc20:	2001      	movs	r0, #1
   1cc22:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cc2a:	4618      	mov	r0, r3
   1cc2c:	6853      	ldr	r3, [r2, #4]
   1cc2e:	9a01      	ldr	r2, [sp, #4]
   1cc30:	6013      	str	r3, [r2, #0]
   1cc32:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc36:	bf00      	nop

0001cc38 <_Unwind_GetGR>:
   1cc38:	b510      	push	{r4, lr}
   1cc3a:	b084      	sub	sp, #16
   1cc3c:	2300      	movs	r3, #0
   1cc3e:	ac03      	add	r4, sp, #12
   1cc40:	460a      	mov	r2, r1
   1cc42:	9400      	str	r4, [sp, #0]
   1cc44:	4619      	mov	r1, r3
   1cc46:	f7ff ffdd 	bl	1cc04 <_Unwind_VRS_Get>
   1cc4a:	9803      	ldr	r0, [sp, #12]
   1cc4c:	b004      	add	sp, #16
   1cc4e:	bd10      	pop	{r4, pc}

0001cc50 <_Unwind_VRS_Set>:
   1cc50:	b500      	push	{lr}
   1cc52:	2904      	cmp	r1, #4
   1cc54:	d807      	bhi.n	1cc66 <_Unwind_VRS_Set+0x16>
   1cc56:	e8df f001 	tbb	[pc, r1]
   1cc5a:	0903      	.short	0x0903
   1cc5c:	0906      	.short	0x0906
   1cc5e:	09          	.byte	0x09
   1cc5f:	00          	.byte	0x00
   1cc60:	b90b      	cbnz	r3, 1cc66 <_Unwind_VRS_Set+0x16>
   1cc62:	2a0f      	cmp	r2, #15
   1cc64:	d905      	bls.n	1cc72 <_Unwind_VRS_Set+0x22>
   1cc66:	2002      	movs	r0, #2
   1cc68:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc6c:	2001      	movs	r0, #1
   1cc6e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc72:	9901      	ldr	r1, [sp, #4]
   1cc74:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cc78:	6809      	ldr	r1, [r1, #0]
   1cc7a:	6051      	str	r1, [r2, #4]
   1cc7c:	4618      	mov	r0, r3
   1cc7e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc82:	bf00      	nop

0001cc84 <_Unwind_SetGR>:
   1cc84:	b510      	push	{r4, lr}
   1cc86:	b084      	sub	sp, #16
   1cc88:	ac04      	add	r4, sp, #16
   1cc8a:	2300      	movs	r3, #0
   1cc8c:	f844 2d04 	str.w	r2, [r4, #-4]!
   1cc90:	460a      	mov	r2, r1
   1cc92:	9400      	str	r4, [sp, #0]
   1cc94:	4619      	mov	r1, r3
   1cc96:	f7ff ffdb 	bl	1cc50 <_Unwind_VRS_Set>
   1cc9a:	b004      	add	sp, #16
   1cc9c:	bd10      	pop	{r4, pc}
   1cc9e:	bf00      	nop

0001cca0 <__gnu_Unwind_Backtrace>:
   1cca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cca2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1cca4:	6413      	str	r3, [r2, #64]	; 0x40
   1cca6:	1d15      	adds	r5, r2, #4
   1cca8:	4607      	mov	r7, r0
   1ccaa:	460e      	mov	r6, r1
   1ccac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ccae:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1ccb2:	ac17      	add	r4, sp, #92	; 0x5c
   1ccb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ccb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ccb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ccba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ccbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ccbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1ccc2:	f04f 35ff 	mov.w	r5, #4294967295
   1ccc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1ccca:	9516      	str	r5, [sp, #88]	; 0x58
   1cccc:	e010      	b.n	1ccf0 <__gnu_Unwind_Backtrace+0x50>
   1ccce:	a816      	add	r0, sp, #88	; 0x58
   1ccd0:	f7ff ffd8 	bl	1cc84 <_Unwind_SetGR>
   1ccd4:	4631      	mov	r1, r6
   1ccd6:	a816      	add	r0, sp, #88	; 0x58
   1ccd8:	47b8      	blx	r7
   1ccda:	aa16      	add	r2, sp, #88	; 0x58
   1ccdc:	4669      	mov	r1, sp
   1ccde:	b978      	cbnz	r0, 1cd00 <__gnu_Unwind_Backtrace+0x60>
   1cce0:	9b04      	ldr	r3, [sp, #16]
   1cce2:	2008      	movs	r0, #8
   1cce4:	4798      	blx	r3
   1cce6:	2805      	cmp	r0, #5
   1cce8:	4604      	mov	r4, r0
   1ccea:	d00a      	beq.n	1cd02 <__gnu_Unwind_Backtrace+0x62>
   1ccec:	2809      	cmp	r0, #9
   1ccee:	d007      	beq.n	1cd00 <__gnu_Unwind_Backtrace+0x60>
   1ccf0:	9926      	ldr	r1, [sp, #152]	; 0x98
   1ccf2:	4668      	mov	r0, sp
   1ccf4:	f7ff fe06 	bl	1c904 <get_eit_entry>
   1ccf8:	466a      	mov	r2, sp
   1ccfa:	210c      	movs	r1, #12
   1ccfc:	2800      	cmp	r0, #0
   1ccfe:	d0e6      	beq.n	1ccce <__gnu_Unwind_Backtrace+0x2e>
   1cd00:	2409      	movs	r4, #9
   1cd02:	a816      	add	r0, sp, #88	; 0x58
   1cd04:	f7ff fe4e 	bl	1c9a4 <restore_non_core_regs>
   1cd08:	4620      	mov	r0, r4
   1cd0a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cd10 <__gnu_unwind_pr_common>:
   1cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd14:	460d      	mov	r5, r1
   1cd16:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1cd18:	b08b      	sub	sp, #44	; 0x2c
   1cd1a:	1d0c      	adds	r4, r1, #4
   1cd1c:	6809      	ldr	r1, [r1, #0]
   1cd1e:	9107      	str	r1, [sp, #28]
   1cd20:	4691      	mov	r9, r2
   1cd22:	9408      	str	r4, [sp, #32]
   1cd24:	f000 0b03 	and.w	fp, r0, #3
   1cd28:	461e      	mov	r6, r3
   1cd2a:	2b00      	cmp	r3, #0
   1cd2c:	d160      	bne.n	1cdf0 <__gnu_unwind_pr_common+0xe0>
   1cd2e:	0209      	lsls	r1, r1, #8
   1cd30:	2303      	movs	r3, #3
   1cd32:	9107      	str	r1, [sp, #28]
   1cd34:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1cd38:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cd3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cd3e:	f1bb 0f02 	cmp.w	fp, #2
   1cd42:	bf08      	it	eq
   1cd44:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1cd46:	f013 0301 	ands.w	r3, r3, #1
   1cd4a:	d140      	bne.n	1cdce <__gnu_unwind_pr_common+0xbe>
   1cd4c:	9301      	str	r3, [sp, #4]
   1cd4e:	f000 0308 	and.w	r3, r0, #8
   1cd52:	9303      	str	r3, [sp, #12]
   1cd54:	f8d4 8000 	ldr.w	r8, [r4]
   1cd58:	f1b8 0f00 	cmp.w	r8, #0
   1cd5c:	d039      	beq.n	1cdd2 <__gnu_unwind_pr_common+0xc2>
   1cd5e:	2e02      	cmp	r6, #2
   1cd60:	d043      	beq.n	1cdea <__gnu_unwind_pr_common+0xda>
   1cd62:	f8b4 8000 	ldrh.w	r8, [r4]
   1cd66:	8867      	ldrh	r7, [r4, #2]
   1cd68:	3404      	adds	r4, #4
   1cd6a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1cd6c:	f027 0a01 	bic.w	sl, r7, #1
   1cd70:	210f      	movs	r1, #15
   1cd72:	4648      	mov	r0, r9
   1cd74:	449a      	add	sl, r3
   1cd76:	f7ff ff5f 	bl	1cc38 <_Unwind_GetGR>
   1cd7a:	4582      	cmp	sl, r0
   1cd7c:	d833      	bhi.n	1cde6 <__gnu_unwind_pr_common+0xd6>
   1cd7e:	f028 0301 	bic.w	r3, r8, #1
   1cd82:	449a      	add	sl, r3
   1cd84:	4550      	cmp	r0, sl
   1cd86:	bf2c      	ite	cs
   1cd88:	2000      	movcs	r0, #0
   1cd8a:	2001      	movcc	r0, #1
   1cd8c:	007f      	lsls	r7, r7, #1
   1cd8e:	f007 0702 	and.w	r7, r7, #2
   1cd92:	f008 0801 	and.w	r8, r8, #1
   1cd96:	ea47 0708 	orr.w	r7, r7, r8
   1cd9a:	2f01      	cmp	r7, #1
   1cd9c:	d03e      	beq.n	1ce1c <__gnu_unwind_pr_common+0x10c>
   1cd9e:	d335      	bcc.n	1ce0c <__gnu_unwind_pr_common+0xfc>
   1cda0:	2f02      	cmp	r7, #2
   1cda2:	d11c      	bne.n	1cdde <__gnu_unwind_pr_common+0xce>
   1cda4:	6823      	ldr	r3, [r4, #0]
   1cda6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1cdaa:	9202      	str	r2, [sp, #8]
   1cdac:	f1bb 0f00 	cmp.w	fp, #0
   1cdb0:	d176      	bne.n	1cea0 <__gnu_unwind_pr_common+0x190>
   1cdb2:	b128      	cbz	r0, 1cdc0 <__gnu_unwind_pr_common+0xb0>
   1cdb4:	9903      	ldr	r1, [sp, #12]
   1cdb6:	2900      	cmp	r1, #0
   1cdb8:	d07e      	beq.n	1ceb8 <__gnu_unwind_pr_common+0x1a8>
   1cdba:	2a00      	cmp	r2, #0
   1cdbc:	f000 80a6 	beq.w	1cf0c <__gnu_unwind_pr_common+0x1fc>
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	db77      	blt.n	1ceb4 <__gnu_unwind_pr_common+0x1a4>
   1cdc4:	9b02      	ldr	r3, [sp, #8]
   1cdc6:	3301      	adds	r3, #1
   1cdc8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1cdcc:	e7c2      	b.n	1cd54 <__gnu_unwind_pr_common+0x44>
   1cdce:	2300      	movs	r3, #0
   1cdd0:	9301      	str	r3, [sp, #4]
   1cdd2:	2e02      	cmp	r6, #2
   1cdd4:	dd3e      	ble.n	1ce54 <__gnu_unwind_pr_common+0x144>
   1cdd6:	f7ff fe17 	bl	1ca08 <__gnu_unwind_24bit.isra.1>
   1cdda:	2800      	cmp	r0, #0
   1cddc:	d040      	beq.n	1ce60 <__gnu_unwind_pr_common+0x150>
   1cdde:	2009      	movs	r0, #9
   1cde0:	b00b      	add	sp, #44	; 0x2c
   1cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cde6:	2000      	movs	r0, #0
   1cde8:	e7d0      	b.n	1cd8c <__gnu_unwind_pr_common+0x7c>
   1cdea:	6867      	ldr	r7, [r4, #4]
   1cdec:	3408      	adds	r4, #8
   1cdee:	e7bc      	b.n	1cd6a <__gnu_unwind_pr_common+0x5a>
   1cdf0:	2b02      	cmp	r3, #2
   1cdf2:	dca3      	bgt.n	1cd3c <__gnu_unwind_pr_common+0x2c>
   1cdf4:	0c0b      	lsrs	r3, r1, #16
   1cdf6:	b2da      	uxtb	r2, r3
   1cdf8:	0409      	lsls	r1, r1, #16
   1cdfa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1cdfe:	2302      	movs	r3, #2
   1ce00:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1ce04:	9107      	str	r1, [sp, #28]
   1ce06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1ce0a:	e797      	b.n	1cd3c <__gnu_unwind_pr_common+0x2c>
   1ce0c:	f1bb 0f00 	cmp.w	fp, #0
   1ce10:	d002      	beq.n	1ce18 <__gnu_unwind_pr_common+0x108>
   1ce12:	2800      	cmp	r0, #0
   1ce14:	f040 80bd 	bne.w	1cf92 <__gnu_unwind_pr_common+0x282>
   1ce18:	3404      	adds	r4, #4
   1ce1a:	e79b      	b.n	1cd54 <__gnu_unwind_pr_common+0x44>
   1ce1c:	f1bb 0f00 	cmp.w	fp, #0
   1ce20:	d125      	bne.n	1ce6e <__gnu_unwind_pr_common+0x15e>
   1ce22:	b1a8      	cbz	r0, 1ce50 <__gnu_unwind_pr_common+0x140>
   1ce24:	e894 000c 	ldmia.w	r4, {r2, r3}
   1ce28:	1c99      	adds	r1, r3, #2
   1ce2a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1ce2e:	d0d6      	beq.n	1cdde <__gnu_unwind_pr_common+0xce>
   1ce30:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1ce34:	3301      	adds	r3, #1
   1ce36:	9106      	str	r1, [sp, #24]
   1ce38:	f000 80a3 	beq.w	1cf82 <__gnu_unwind_pr_common+0x272>
   1ce3c:	1d20      	adds	r0, r4, #4
   1ce3e:	f7ff fddd 	bl	1c9fc <_Unwind_decode_typeinfo_ptr.isra.0>
   1ce42:	ab06      	add	r3, sp, #24
   1ce44:	4601      	mov	r1, r0
   1ce46:	4628      	mov	r0, r5
   1ce48:	f7f6 fe00 	bl	13a4c <__cxa_type_match>
   1ce4c:	2800      	cmp	r0, #0
   1ce4e:	d177      	bne.n	1cf40 <__gnu_unwind_pr_common+0x230>
   1ce50:	3408      	adds	r4, #8
   1ce52:	e77f      	b.n	1cd54 <__gnu_unwind_pr_common+0x44>
   1ce54:	a907      	add	r1, sp, #28
   1ce56:	4648      	mov	r0, r9
   1ce58:	f000 faee 	bl	1d438 <__gnu_unwind_execute>
   1ce5c:	2800      	cmp	r0, #0
   1ce5e:	d1be      	bne.n	1cdde <__gnu_unwind_pr_common+0xce>
   1ce60:	9b01      	ldr	r3, [sp, #4]
   1ce62:	2b00      	cmp	r3, #0
   1ce64:	d15c      	bne.n	1cf20 <__gnu_unwind_pr_common+0x210>
   1ce66:	2008      	movs	r0, #8
   1ce68:	b00b      	add	sp, #44	; 0x2c
   1ce6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce6e:	210d      	movs	r1, #13
   1ce70:	4648      	mov	r0, r9
   1ce72:	6a2f      	ldr	r7, [r5, #32]
   1ce74:	f7ff fee0 	bl	1cc38 <_Unwind_GetGR>
   1ce78:	4287      	cmp	r7, r0
   1ce7a:	d1e9      	bne.n	1ce50 <__gnu_unwind_pr_common+0x140>
   1ce7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ce7e:	429c      	cmp	r4, r3
   1ce80:	d1e6      	bne.n	1ce50 <__gnu_unwind_pr_common+0x140>
   1ce82:	4620      	mov	r0, r4
   1ce84:	f7ff fcf0 	bl	1c868 <selfrel_offset31>
   1ce88:	210f      	movs	r1, #15
   1ce8a:	4602      	mov	r2, r0
   1ce8c:	4648      	mov	r0, r9
   1ce8e:	f7ff fef9 	bl	1cc84 <_Unwind_SetGR>
   1ce92:	4648      	mov	r0, r9
   1ce94:	462a      	mov	r2, r5
   1ce96:	2100      	movs	r1, #0
   1ce98:	f7ff fef4 	bl	1cc84 <_Unwind_SetGR>
   1ce9c:	2007      	movs	r0, #7
   1ce9e:	e79f      	b.n	1cde0 <__gnu_unwind_pr_common+0xd0>
   1cea0:	210d      	movs	r1, #13
   1cea2:	4648      	mov	r0, r9
   1cea4:	6a2f      	ldr	r7, [r5, #32]
   1cea6:	f7ff fec7 	bl	1cc38 <_Unwind_GetGR>
   1ceaa:	4287      	cmp	r7, r0
   1ceac:	d058      	beq.n	1cf60 <__gnu_unwind_pr_common+0x250>
   1ceae:	6823      	ldr	r3, [r4, #0]
   1ceb0:	2b00      	cmp	r3, #0
   1ceb2:	da87      	bge.n	1cdc4 <__gnu_unwind_pr_common+0xb4>
   1ceb4:	3404      	adds	r4, #4
   1ceb6:	e785      	b.n	1cdc4 <__gnu_unwind_pr_common+0xb4>
   1ceb8:	9b02      	ldr	r3, [sp, #8]
   1ceba:	b33b      	cbz	r3, 1cf0c <__gnu_unwind_pr_common+0x1fc>
   1cebc:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1cec0:	1d27      	adds	r7, r4, #4
   1cec2:	f8cd b010 	str.w	fp, [sp, #16]
   1cec6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1ceca:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cece:	9605      	str	r6, [sp, #20]
   1ced0:	46a3      	mov	fp, r4
   1ced2:	461c      	mov	r4, r3
   1ced4:	e002      	b.n	1cedc <__gnu_unwind_pr_common+0x1cc>
   1ced6:	45b2      	cmp	sl, r6
   1ced8:	46b0      	mov	r8, r6
   1ceda:	d016      	beq.n	1cf0a <__gnu_unwind_pr_common+0x1fa>
   1cedc:	4638      	mov	r0, r7
   1cede:	9406      	str	r4, [sp, #24]
   1cee0:	f7ff fd8c 	bl	1c9fc <_Unwind_decode_typeinfo_ptr.isra.0>
   1cee4:	ab06      	add	r3, sp, #24
   1cee6:	4601      	mov	r1, r0
   1cee8:	2200      	movs	r2, #0
   1ceea:	4628      	mov	r0, r5
   1ceec:	f7f6 fdae 	bl	13a4c <__cxa_type_match>
   1cef0:	f108 0601 	add.w	r6, r8, #1
   1cef4:	3704      	adds	r7, #4
   1cef6:	2800      	cmp	r0, #0
   1cef8:	d0ed      	beq.n	1ced6 <__gnu_unwind_pr_common+0x1c6>
   1cefa:	9b02      	ldr	r3, [sp, #8]
   1cefc:	9e05      	ldr	r6, [sp, #20]
   1cefe:	4543      	cmp	r3, r8
   1cf00:	465c      	mov	r4, fp
   1cf02:	f8dd b010 	ldr.w	fp, [sp, #16]
   1cf06:	d1d2      	bne.n	1ceae <__gnu_unwind_pr_common+0x19e>
   1cf08:	e000      	b.n	1cf0c <__gnu_unwind_pr_common+0x1fc>
   1cf0a:	465c      	mov	r4, fp
   1cf0c:	4648      	mov	r0, r9
   1cf0e:	210d      	movs	r1, #13
   1cf10:	f7ff fe92 	bl	1cc38 <_Unwind_GetGR>
   1cf14:	9b06      	ldr	r3, [sp, #24]
   1cf16:	6228      	str	r0, [r5, #32]
   1cf18:	62ac      	str	r4, [r5, #40]	; 0x28
   1cf1a:	626b      	str	r3, [r5, #36]	; 0x24
   1cf1c:	2006      	movs	r0, #6
   1cf1e:	e75f      	b.n	1cde0 <__gnu_unwind_pr_common+0xd0>
   1cf20:	210f      	movs	r1, #15
   1cf22:	4648      	mov	r0, r9
   1cf24:	f7ff fe88 	bl	1cc38 <_Unwind_GetGR>
   1cf28:	210e      	movs	r1, #14
   1cf2a:	4602      	mov	r2, r0
   1cf2c:	4648      	mov	r0, r9
   1cf2e:	f7ff fea9 	bl	1cc84 <_Unwind_SetGR>
   1cf32:	4648      	mov	r0, r9
   1cf34:	4a29      	ldr	r2, [pc, #164]	; (1cfdc <__gnu_unwind_pr_common+0x2cc>)
   1cf36:	210f      	movs	r1, #15
   1cf38:	f7ff fea4 	bl	1cc84 <_Unwind_SetGR>
   1cf3c:	2007      	movs	r0, #7
   1cf3e:	e74f      	b.n	1cde0 <__gnu_unwind_pr_common+0xd0>
   1cf40:	4607      	mov	r7, r0
   1cf42:	210d      	movs	r1, #13
   1cf44:	4648      	mov	r0, r9
   1cf46:	f7ff fe77 	bl	1cc38 <_Unwind_GetGR>
   1cf4a:	2f02      	cmp	r7, #2
   1cf4c:	6228      	str	r0, [r5, #32]
   1cf4e:	d11d      	bne.n	1cf8c <__gnu_unwind_pr_common+0x27c>
   1cf50:	462b      	mov	r3, r5
   1cf52:	9a06      	ldr	r2, [sp, #24]
   1cf54:	f843 2f2c 	str.w	r2, [r3, #44]!
   1cf58:	626b      	str	r3, [r5, #36]	; 0x24
   1cf5a:	62ac      	str	r4, [r5, #40]	; 0x28
   1cf5c:	2006      	movs	r0, #6
   1cf5e:	e73f      	b.n	1cde0 <__gnu_unwind_pr_common+0xd0>
   1cf60:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cf62:	429c      	cmp	r4, r3
   1cf64:	d1a3      	bne.n	1ceae <__gnu_unwind_pr_common+0x19e>
   1cf66:	2204      	movs	r2, #4
   1cf68:	2700      	movs	r7, #0
   1cf6a:	18a3      	adds	r3, r4, r2
   1cf6c:	9902      	ldr	r1, [sp, #8]
   1cf6e:	62a9      	str	r1, [r5, #40]	; 0x28
   1cf70:	62ef      	str	r7, [r5, #44]	; 0x2c
   1cf72:	632a      	str	r2, [r5, #48]	; 0x30
   1cf74:	636b      	str	r3, [r5, #52]	; 0x34
   1cf76:	6823      	ldr	r3, [r4, #0]
   1cf78:	42bb      	cmp	r3, r7
   1cf7a:	db1d      	blt.n	1cfb8 <__gnu_unwind_pr_common+0x2a8>
   1cf7c:	2301      	movs	r3, #1
   1cf7e:	9301      	str	r3, [sp, #4]
   1cf80:	e720      	b.n	1cdc4 <__gnu_unwind_pr_common+0xb4>
   1cf82:	4648      	mov	r0, r9
   1cf84:	210d      	movs	r1, #13
   1cf86:	f7ff fe57 	bl	1cc38 <_Unwind_GetGR>
   1cf8a:	6228      	str	r0, [r5, #32]
   1cf8c:	9b06      	ldr	r3, [sp, #24]
   1cf8e:	626b      	str	r3, [r5, #36]	; 0x24
   1cf90:	e7e3      	b.n	1cf5a <__gnu_unwind_pr_common+0x24a>
   1cf92:	4620      	mov	r0, r4
   1cf94:	f7ff fc68 	bl	1c868 <selfrel_offset31>
   1cf98:	3404      	adds	r4, #4
   1cf9a:	4606      	mov	r6, r0
   1cf9c:	63ac      	str	r4, [r5, #56]	; 0x38
   1cf9e:	4628      	mov	r0, r5
   1cfa0:	f7f6 fdb0 	bl	13b04 <__cxa_begin_cleanup>
   1cfa4:	2800      	cmp	r0, #0
   1cfa6:	f43f af1a 	beq.w	1cdde <__gnu_unwind_pr_common+0xce>
   1cfaa:	4648      	mov	r0, r9
   1cfac:	4632      	mov	r2, r6
   1cfae:	210f      	movs	r1, #15
   1cfb0:	f7ff fe68 	bl	1cc84 <_Unwind_SetGR>
   1cfb4:	2007      	movs	r0, #7
   1cfb6:	e713      	b.n	1cde0 <__gnu_unwind_pr_common+0xd0>
   1cfb8:	4608      	mov	r0, r1
   1cfba:	3001      	adds	r0, #1
   1cfbc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1cfc0:	f7ff fc52 	bl	1c868 <selfrel_offset31>
   1cfc4:	210f      	movs	r1, #15
   1cfc6:	4602      	mov	r2, r0
   1cfc8:	4648      	mov	r0, r9
   1cfca:	f7ff fe5b 	bl	1cc84 <_Unwind_SetGR>
   1cfce:	4648      	mov	r0, r9
   1cfd0:	462a      	mov	r2, r5
   1cfd2:	4639      	mov	r1, r7
   1cfd4:	f7ff fe56 	bl	1cc84 <_Unwind_SetGR>
   1cfd8:	2007      	movs	r0, #7
   1cfda:	e701      	b.n	1cde0 <__gnu_unwind_pr_common+0xd0>
   1cfdc:	00013c35 	.word	0x00013c35

0001cfe0 <__aeabi_unwind_cpp_pr0>:
   1cfe0:	2300      	movs	r3, #0
   1cfe2:	e695      	b.n	1cd10 <__gnu_unwind_pr_common>

0001cfe4 <__aeabi_unwind_cpp_pr1>:
   1cfe4:	2301      	movs	r3, #1
   1cfe6:	e693      	b.n	1cd10 <__gnu_unwind_pr_common>

0001cfe8 <__aeabi_unwind_cpp_pr2>:
   1cfe8:	2302      	movs	r3, #2
   1cfea:	e691      	b.n	1cd10 <__gnu_unwind_pr_common>

0001cfec <_Unwind_VRS_Pop>:
   1cfec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfee:	4604      	mov	r4, r0
   1cff0:	b0c5      	sub	sp, #276	; 0x114
   1cff2:	2904      	cmp	r1, #4
   1cff4:	d80d      	bhi.n	1d012 <_Unwind_VRS_Pop+0x26>
   1cff6:	e8df f001 	tbb	[pc, r1]
   1cffa:	0353      	.short	0x0353
   1cffc:	310c      	.short	0x310c
   1cffe:	0f          	.byte	0x0f
   1cfff:	00          	.byte	0x00
   1d000:	2b01      	cmp	r3, #1
   1d002:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1d006:	b295      	uxth	r5, r2
   1d008:	d162      	bne.n	1d0d0 <_Unwind_VRS_Pop+0xe4>
   1d00a:	1972      	adds	r2, r6, r5
   1d00c:	2a10      	cmp	r2, #16
   1d00e:	f240 809b 	bls.w	1d148 <_Unwind_VRS_Pop+0x15c>
   1d012:	2002      	movs	r0, #2
   1d014:	b045      	add	sp, #276	; 0x114
   1d016:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d018:	2b00      	cmp	r3, #0
   1d01a:	d1fa      	bne.n	1d012 <_Unwind_VRS_Pop+0x26>
   1d01c:	2a10      	cmp	r2, #16
   1d01e:	d8f8      	bhi.n	1d012 <_Unwind_VRS_Pop+0x26>
   1d020:	6823      	ldr	r3, [r4, #0]
   1d022:	06d8      	lsls	r0, r3, #27
   1d024:	f100 80c6 	bmi.w	1d1b4 <_Unwind_VRS_Pop+0x1c8>
   1d028:	ae22      	add	r6, sp, #136	; 0x88
   1d02a:	4630      	mov	r0, r6
   1d02c:	9201      	str	r2, [sp, #4]
   1d02e:	f000 f973 	bl	1d318 <__gnu_Unwind_Save_WMMXC>
   1d032:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d034:	9a01      	ldr	r2, [sp, #4]
   1d036:	2300      	movs	r3, #0
   1d038:	2501      	movs	r5, #1
   1d03a:	fa05 f103 	lsl.w	r1, r5, r3
   1d03e:	4211      	tst	r1, r2
   1d040:	d003      	beq.n	1d04a <_Unwind_VRS_Pop+0x5e>
   1d042:	6801      	ldr	r1, [r0, #0]
   1d044:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1d048:	3004      	adds	r0, #4
   1d04a:	3301      	adds	r3, #1
   1d04c:	2b04      	cmp	r3, #4
   1d04e:	d1f4      	bne.n	1d03a <_Unwind_VRS_Pop+0x4e>
   1d050:	63a0      	str	r0, [r4, #56]	; 0x38
   1d052:	4630      	mov	r0, r6
   1d054:	f000 f956 	bl	1d304 <__gnu_Unwind_Restore_WMMXC>
   1d058:	2000      	movs	r0, #0
   1d05a:	e7db      	b.n	1d014 <_Unwind_VRS_Pop+0x28>
   1d05c:	2b03      	cmp	r3, #3
   1d05e:	d1d8      	bne.n	1d012 <_Unwind_VRS_Pop+0x26>
   1d060:	0c15      	lsrs	r5, r2, #16
   1d062:	b297      	uxth	r7, r2
   1d064:	19eb      	adds	r3, r5, r7
   1d066:	2b10      	cmp	r3, #16
   1d068:	d8d3      	bhi.n	1d012 <_Unwind_VRS_Pop+0x26>
   1d06a:	6823      	ldr	r3, [r4, #0]
   1d06c:	071e      	lsls	r6, r3, #28
   1d06e:	f100 80b5 	bmi.w	1d1dc <_Unwind_VRS_Pop+0x1f0>
   1d072:	ae22      	add	r6, sp, #136	; 0x88
   1d074:	4630      	mov	r0, r6
   1d076:	f000 f923 	bl	1d2c0 <__gnu_Unwind_Save_WMMXD>
   1d07a:	00ed      	lsls	r5, r5, #3
   1d07c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d07e:	b14f      	cbz	r7, 1d094 <_Unwind_VRS_Pop+0xa8>
   1d080:	3d04      	subs	r5, #4
   1d082:	1971      	adds	r1, r6, r5
   1d084:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1d088:	f853 2b04 	ldr.w	r2, [r3], #4
   1d08c:	f841 2f04 	str.w	r2, [r1, #4]!
   1d090:	4283      	cmp	r3, r0
   1d092:	d1f9      	bne.n	1d088 <_Unwind_VRS_Pop+0x9c>
   1d094:	4630      	mov	r0, r6
   1d096:	63a3      	str	r3, [r4, #56]	; 0x38
   1d098:	f000 f8f0 	bl	1d27c <__gnu_Unwind_Restore_WMMXD>
   1d09c:	2000      	movs	r0, #0
   1d09e:	e7b9      	b.n	1d014 <_Unwind_VRS_Pop+0x28>
   1d0a0:	2b00      	cmp	r3, #0
   1d0a2:	d1b6      	bne.n	1d012 <_Unwind_VRS_Pop+0x26>
   1d0a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1d0a6:	b297      	uxth	r7, r2
   1d0a8:	1d20      	adds	r0, r4, #4
   1d0aa:	2601      	movs	r6, #1
   1d0ac:	fa06 f103 	lsl.w	r1, r6, r3
   1d0b0:	4239      	tst	r1, r7
   1d0b2:	f103 0301 	add.w	r3, r3, #1
   1d0b6:	d002      	beq.n	1d0be <_Unwind_VRS_Pop+0xd2>
   1d0b8:	6829      	ldr	r1, [r5, #0]
   1d0ba:	6001      	str	r1, [r0, #0]
   1d0bc:	3504      	adds	r5, #4
   1d0be:	2b10      	cmp	r3, #16
   1d0c0:	f100 0004 	add.w	r0, r0, #4
   1d0c4:	d1f2      	bne.n	1d0ac <_Unwind_VRS_Pop+0xc0>
   1d0c6:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1d0ca:	d13b      	bne.n	1d144 <_Unwind_VRS_Pop+0x158>
   1d0cc:	63a5      	str	r5, [r4, #56]	; 0x38
   1d0ce:	e7a1      	b.n	1d014 <_Unwind_VRS_Pop+0x28>
   1d0d0:	2b05      	cmp	r3, #5
   1d0d2:	d19e      	bne.n	1d012 <_Unwind_VRS_Pop+0x26>
   1d0d4:	1977      	adds	r7, r6, r5
   1d0d6:	2f20      	cmp	r7, #32
   1d0d8:	d89b      	bhi.n	1d012 <_Unwind_VRS_Pop+0x26>
   1d0da:	2e0f      	cmp	r6, #15
   1d0dc:	d966      	bls.n	1d1ac <_Unwind_VRS_Pop+0x1c0>
   1d0de:	462f      	mov	r7, r5
   1d0e0:	2d00      	cmp	r5, #0
   1d0e2:	d13a      	bne.n	1d15a <_Unwind_VRS_Pop+0x16e>
   1d0e4:	462a      	mov	r2, r5
   1d0e6:	2700      	movs	r7, #0
   1d0e8:	2a00      	cmp	r2, #0
   1d0ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d0ec:	dd72      	ble.n	1d1d4 <_Unwind_VRS_Pop+0x1e8>
   1d0ee:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1d0f2:	4601      	mov	r1, r0
   1d0f4:	a844      	add	r0, sp, #272	; 0x110
   1d0f6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d0fa:	388c      	subs	r0, #140	; 0x8c
   1d0fc:	f851 5b04 	ldr.w	r5, [r1], #4
   1d100:	f840 5f04 	str.w	r5, [r0, #4]!
   1d104:	4291      	cmp	r1, r2
   1d106:	d1f9      	bne.n	1d0fc <_Unwind_VRS_Pop+0x110>
   1d108:	4608      	mov	r0, r1
   1d10a:	b197      	cbz	r7, 1d132 <_Unwind_VRS_Pop+0x146>
   1d10c:	2e10      	cmp	r6, #16
   1d10e:	4632      	mov	r2, r6
   1d110:	a944      	add	r1, sp, #272	; 0x110
   1d112:	bf38      	it	cc
   1d114:	2210      	movcc	r2, #16
   1d116:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1d11a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1d11e:	0079      	lsls	r1, r7, #1
   1d120:	3a04      	subs	r2, #4
   1d122:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d126:	f850 5b04 	ldr.w	r5, [r0], #4
   1d12a:	f842 5f04 	str.w	r5, [r2, #4]!
   1d12e:	4288      	cmp	r0, r1
   1d130:	d1f9      	bne.n	1d126 <_Unwind_VRS_Pop+0x13a>
   1d132:	2b01      	cmp	r3, #1
   1d134:	d048      	beq.n	1d1c8 <_Unwind_VRS_Pop+0x1dc>
   1d136:	2e0f      	cmp	r6, #15
   1d138:	63a1      	str	r1, [r4, #56]	; 0x38
   1d13a:	d933      	bls.n	1d1a4 <_Unwind_VRS_Pop+0x1b8>
   1d13c:	b117      	cbz	r7, 1d144 <_Unwind_VRS_Pop+0x158>
   1d13e:	a802      	add	r0, sp, #8
   1d140:	f000 f894 	bl	1d26c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d144:	2000      	movs	r0, #0
   1d146:	e765      	b.n	1d014 <_Unwind_VRS_Pop+0x28>
   1d148:	2e0f      	cmp	r6, #15
   1d14a:	f63f af62 	bhi.w	1d012 <_Unwind_VRS_Pop+0x26>
   1d14e:	2700      	movs	r7, #0
   1d150:	6822      	ldr	r2, [r4, #0]
   1d152:	07d1      	lsls	r1, r2, #31
   1d154:	d417      	bmi.n	1d186 <_Unwind_VRS_Pop+0x19a>
   1d156:	2f00      	cmp	r7, #0
   1d158:	d060      	beq.n	1d21c <_Unwind_VRS_Pop+0x230>
   1d15a:	6822      	ldr	r2, [r4, #0]
   1d15c:	0751      	lsls	r1, r2, #29
   1d15e:	d445      	bmi.n	1d1ec <_Unwind_VRS_Pop+0x200>
   1d160:	2b01      	cmp	r3, #1
   1d162:	d04d      	beq.n	1d200 <_Unwind_VRS_Pop+0x214>
   1d164:	2e0f      	cmp	r6, #15
   1d166:	d806      	bhi.n	1d176 <_Unwind_VRS_Pop+0x18a>
   1d168:	a822      	add	r0, sp, #136	; 0x88
   1d16a:	9301      	str	r3, [sp, #4]
   1d16c:	f000 f87a 	bl	1d264 <__gnu_Unwind_Save_VFP_D>
   1d170:	9b01      	ldr	r3, [sp, #4]
   1d172:	2f00      	cmp	r7, #0
   1d174:	d0b6      	beq.n	1d0e4 <_Unwind_VRS_Pop+0xf8>
   1d176:	a802      	add	r0, sp, #8
   1d178:	9301      	str	r3, [sp, #4]
   1d17a:	f000 f87b 	bl	1d274 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d17e:	9b01      	ldr	r3, [sp, #4]
   1d180:	f1c6 0210 	rsb	r2, r6, #16
   1d184:	e7b0      	b.n	1d0e8 <_Unwind_VRS_Pop+0xfc>
   1d186:	f022 0101 	bic.w	r1, r2, #1
   1d18a:	2b05      	cmp	r3, #5
   1d18c:	6021      	str	r1, [r4, #0]
   1d18e:	9301      	str	r3, [sp, #4]
   1d190:	4620      	mov	r0, r4
   1d192:	d03b      	beq.n	1d20c <_Unwind_VRS_Pop+0x220>
   1d194:	f022 0203 	bic.w	r2, r2, #3
   1d198:	f840 2b48 	str.w	r2, [r0], #72
   1d19c:	f000 f85a 	bl	1d254 <__gnu_Unwind_Save_VFP>
   1d1a0:	9b01      	ldr	r3, [sp, #4]
   1d1a2:	e7d8      	b.n	1d156 <_Unwind_VRS_Pop+0x16a>
   1d1a4:	a822      	add	r0, sp, #136	; 0x88
   1d1a6:	f000 f859 	bl	1d25c <__gnu_Unwind_Restore_VFP_D>
   1d1aa:	e7c7      	b.n	1d13c <_Unwind_VRS_Pop+0x150>
   1d1ac:	2f10      	cmp	r7, #16
   1d1ae:	d9ce      	bls.n	1d14e <_Unwind_VRS_Pop+0x162>
   1d1b0:	3f10      	subs	r7, #16
   1d1b2:	e7cd      	b.n	1d150 <_Unwind_VRS_Pop+0x164>
   1d1b4:	f023 0310 	bic.w	r3, r3, #16
   1d1b8:	6023      	str	r3, [r4, #0]
   1d1ba:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d1be:	9201      	str	r2, [sp, #4]
   1d1c0:	f000 f8aa 	bl	1d318 <__gnu_Unwind_Save_WMMXC>
   1d1c4:	9a01      	ldr	r2, [sp, #4]
   1d1c6:	e72f      	b.n	1d028 <_Unwind_VRS_Pop+0x3c>
   1d1c8:	3104      	adds	r1, #4
   1d1ca:	63a1      	str	r1, [r4, #56]	; 0x38
   1d1cc:	a822      	add	r0, sp, #136	; 0x88
   1d1ce:	f000 f83d 	bl	1d24c <__gnu_Unwind_Restore_VFP>
   1d1d2:	e7b7      	b.n	1d144 <_Unwind_VRS_Pop+0x158>
   1d1d4:	2f00      	cmp	r7, #0
   1d1d6:	d199      	bne.n	1d10c <_Unwind_VRS_Pop+0x120>
   1d1d8:	4601      	mov	r1, r0
   1d1da:	e7aa      	b.n	1d132 <_Unwind_VRS_Pop+0x146>
   1d1dc:	f023 0308 	bic.w	r3, r3, #8
   1d1e0:	6023      	str	r3, [r4, #0]
   1d1e2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d1e6:	f000 f86b 	bl	1d2c0 <__gnu_Unwind_Save_WMMXD>
   1d1ea:	e742      	b.n	1d072 <_Unwind_VRS_Pop+0x86>
   1d1ec:	4620      	mov	r0, r4
   1d1ee:	f022 0204 	bic.w	r2, r2, #4
   1d1f2:	f840 2bd0 	str.w	r2, [r0], #208
   1d1f6:	9301      	str	r3, [sp, #4]
   1d1f8:	f000 f83c 	bl	1d274 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d1fc:	9b01      	ldr	r3, [sp, #4]
   1d1fe:	e7af      	b.n	1d160 <_Unwind_VRS_Pop+0x174>
   1d200:	a822      	add	r0, sp, #136	; 0x88
   1d202:	9301      	str	r3, [sp, #4]
   1d204:	f000 f826 	bl	1d254 <__gnu_Unwind_Save_VFP>
   1d208:	9b01      	ldr	r3, [sp, #4]
   1d20a:	e7b9      	b.n	1d180 <_Unwind_VRS_Pop+0x194>
   1d20c:	f041 0102 	orr.w	r1, r1, #2
   1d210:	f840 1b48 	str.w	r1, [r0], #72
   1d214:	f000 f826 	bl	1d264 <__gnu_Unwind_Save_VFP_D>
   1d218:	9b01      	ldr	r3, [sp, #4]
   1d21a:	e79c      	b.n	1d156 <_Unwind_VRS_Pop+0x16a>
   1d21c:	2b01      	cmp	r3, #1
   1d21e:	d003      	beq.n	1d228 <_Unwind_VRS_Pop+0x23c>
   1d220:	2e0f      	cmp	r6, #15
   1d222:	f63f af5f 	bhi.w	1d0e4 <_Unwind_VRS_Pop+0xf8>
   1d226:	e79f      	b.n	1d168 <_Unwind_VRS_Pop+0x17c>
   1d228:	a822      	add	r0, sp, #136	; 0x88
   1d22a:	9301      	str	r3, [sp, #4]
   1d22c:	f000 f812 	bl	1d254 <__gnu_Unwind_Save_VFP>
   1d230:	9b01      	ldr	r3, [sp, #4]
   1d232:	e757      	b.n	1d0e4 <_Unwind_VRS_Pop+0xf8>

0001d234 <__restore_core_regs>:
   1d234:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d238:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d23c:	469c      	mov	ip, r3
   1d23e:	46a6      	mov	lr, r4
   1d240:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d244:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d248:	46e5      	mov	sp, ip
   1d24a:	bd00      	pop	{pc}

0001d24c <__gnu_Unwind_Restore_VFP>:
   1d24c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d250:	4770      	bx	lr
   1d252:	bf00      	nop

0001d254 <__gnu_Unwind_Save_VFP>:
   1d254:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d258:	4770      	bx	lr
   1d25a:	bf00      	nop

0001d25c <__gnu_Unwind_Restore_VFP_D>:
   1d25c:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d260:	4770      	bx	lr
   1d262:	bf00      	nop

0001d264 <__gnu_Unwind_Save_VFP_D>:
   1d264:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d268:	4770      	bx	lr
   1d26a:	bf00      	nop

0001d26c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d26c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d270:	4770      	bx	lr
   1d272:	bf00      	nop

0001d274 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d274:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d278:	4770      	bx	lr
   1d27a:	bf00      	nop

0001d27c <__gnu_Unwind_Restore_WMMXD>:
   1d27c:	ecf0 0102 	ldfe	f0, [r0], #8
   1d280:	ecf0 1102 	ldfe	f1, [r0], #8
   1d284:	ecf0 2102 	ldfe	f2, [r0], #8
   1d288:	ecf0 3102 	ldfe	f3, [r0], #8
   1d28c:	ecf0 4102 	ldfe	f4, [r0], #8
   1d290:	ecf0 5102 	ldfe	f5, [r0], #8
   1d294:	ecf0 6102 	ldfe	f6, [r0], #8
   1d298:	ecf0 7102 	ldfe	f7, [r0], #8
   1d29c:	ecf0 8102 	ldfp	f0, [r0], #8
   1d2a0:	ecf0 9102 	ldfp	f1, [r0], #8
   1d2a4:	ecf0 a102 	ldfp	f2, [r0], #8
   1d2a8:	ecf0 b102 	ldfp	f3, [r0], #8
   1d2ac:	ecf0 c102 	ldfp	f4, [r0], #8
   1d2b0:	ecf0 d102 	ldfp	f5, [r0], #8
   1d2b4:	ecf0 e102 	ldfp	f6, [r0], #8
   1d2b8:	ecf0 f102 	ldfp	f7, [r0], #8
   1d2bc:	4770      	bx	lr
   1d2be:	bf00      	nop

0001d2c0 <__gnu_Unwind_Save_WMMXD>:
   1d2c0:	ece0 0102 	stfe	f0, [r0], #8
   1d2c4:	ece0 1102 	stfe	f1, [r0], #8
   1d2c8:	ece0 2102 	stfe	f2, [r0], #8
   1d2cc:	ece0 3102 	stfe	f3, [r0], #8
   1d2d0:	ece0 4102 	stfe	f4, [r0], #8
   1d2d4:	ece0 5102 	stfe	f5, [r0], #8
   1d2d8:	ece0 6102 	stfe	f6, [r0], #8
   1d2dc:	ece0 7102 	stfe	f7, [r0], #8
   1d2e0:	ece0 8102 	stfp	f0, [r0], #8
   1d2e4:	ece0 9102 	stfp	f1, [r0], #8
   1d2e8:	ece0 a102 	stfp	f2, [r0], #8
   1d2ec:	ece0 b102 	stfp	f3, [r0], #8
   1d2f0:	ece0 c102 	stfp	f4, [r0], #8
   1d2f4:	ece0 d102 	stfp	f5, [r0], #8
   1d2f8:	ece0 e102 	stfp	f6, [r0], #8
   1d2fc:	ece0 f102 	stfp	f7, [r0], #8
   1d300:	4770      	bx	lr
   1d302:	bf00      	nop

0001d304 <__gnu_Unwind_Restore_WMMXC>:
   1d304:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d308:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d30c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d310:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d314:	4770      	bx	lr
   1d316:	bf00      	nop

0001d318 <__gnu_Unwind_Save_WMMXC>:
   1d318:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d31c:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d320:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d324:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d328:	4770      	bx	lr
   1d32a:	bf00      	nop

0001d32c <_Unwind_RaiseException>:
   1d32c:	46ec      	mov	ip, sp
   1d32e:	b500      	push	{lr}
   1d330:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d334:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d338:	f04f 0300 	mov.w	r3, #0
   1d33c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d340:	a901      	add	r1, sp, #4
   1d342:	f7ff fbf3 	bl	1cb2c <__gnu_Unwind_RaiseException>
   1d346:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d34a:	b012      	add	sp, #72	; 0x48
   1d34c:	4770      	bx	lr
   1d34e:	bf00      	nop

0001d350 <_Unwind_Resume>:
   1d350:	46ec      	mov	ip, sp
   1d352:	b500      	push	{lr}
   1d354:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d358:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d35c:	f04f 0300 	mov.w	r3, #0
   1d360:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d364:	a901      	add	r1, sp, #4
   1d366:	f7ff fc1b 	bl	1cba0 <__gnu_Unwind_Resume>
   1d36a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d36e:	b012      	add	sp, #72	; 0x48
   1d370:	4770      	bx	lr
   1d372:	bf00      	nop

0001d374 <_Unwind_Resume_or_Rethrow>:
   1d374:	46ec      	mov	ip, sp
   1d376:	b500      	push	{lr}
   1d378:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d37c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d380:	f04f 0300 	mov.w	r3, #0
   1d384:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d388:	a901      	add	r1, sp, #4
   1d38a:	f7ff fc2b 	bl	1cbe4 <__gnu_Unwind_Resume_or_Rethrow>
   1d38e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d392:	b012      	add	sp, #72	; 0x48
   1d394:	4770      	bx	lr
   1d396:	bf00      	nop

0001d398 <_Unwind_ForcedUnwind>:
   1d398:	46ec      	mov	ip, sp
   1d39a:	b500      	push	{lr}
   1d39c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d3a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d3a4:	f04f 0300 	mov.w	r3, #0
   1d3a8:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d3ac:	ab01      	add	r3, sp, #4
   1d3ae:	f7ff fbed 	bl	1cb8c <__gnu_Unwind_ForcedUnwind>
   1d3b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d3b6:	b012      	add	sp, #72	; 0x48
   1d3b8:	4770      	bx	lr
   1d3ba:	bf00      	nop

0001d3bc <_Unwind_Backtrace>:
   1d3bc:	46ec      	mov	ip, sp
   1d3be:	b500      	push	{lr}
   1d3c0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d3c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d3c8:	f04f 0300 	mov.w	r3, #0
   1d3cc:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d3d0:	aa01      	add	r2, sp, #4
   1d3d2:	f7ff fc65 	bl	1cca0 <__gnu_Unwind_Backtrace>
   1d3d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d3da:	b012      	add	sp, #72	; 0x48
   1d3dc:	4770      	bx	lr
   1d3de:	bf00      	nop

0001d3e0 <next_unwind_byte>:
   1d3e0:	7a02      	ldrb	r2, [r0, #8]
   1d3e2:	b91a      	cbnz	r2, 1d3ec <next_unwind_byte+0xc>
   1d3e4:	7a43      	ldrb	r3, [r0, #9]
   1d3e6:	b943      	cbnz	r3, 1d3fa <next_unwind_byte+0x1a>
   1d3e8:	20b0      	movs	r0, #176	; 0xb0
   1d3ea:	4770      	bx	lr
   1d3ec:	6803      	ldr	r3, [r0, #0]
   1d3ee:	3a01      	subs	r2, #1
   1d3f0:	7202      	strb	r2, [r0, #8]
   1d3f2:	021a      	lsls	r2, r3, #8
   1d3f4:	6002      	str	r2, [r0, #0]
   1d3f6:	0e18      	lsrs	r0, r3, #24
   1d3f8:	4770      	bx	lr
   1d3fa:	6842      	ldr	r2, [r0, #4]
   1d3fc:	3b01      	subs	r3, #1
   1d3fe:	b410      	push	{r4}
   1d400:	7243      	strb	r3, [r0, #9]
   1d402:	6813      	ldr	r3, [r2, #0]
   1d404:	2103      	movs	r1, #3
   1d406:	1d14      	adds	r4, r2, #4
   1d408:	7201      	strb	r1, [r0, #8]
   1d40a:	021a      	lsls	r2, r3, #8
   1d40c:	6044      	str	r4, [r0, #4]
   1d40e:	6002      	str	r2, [r0, #0]
   1d410:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d414:	0e18      	lsrs	r0, r3, #24
   1d416:	4770      	bx	lr

0001d418 <_Unwind_GetGR.constprop.0>:
   1d418:	b500      	push	{lr}
   1d41a:	b085      	sub	sp, #20
   1d41c:	aa03      	add	r2, sp, #12
   1d41e:	2300      	movs	r3, #0
   1d420:	9200      	str	r2, [sp, #0]
   1d422:	4619      	mov	r1, r3
   1d424:	220c      	movs	r2, #12
   1d426:	f7ff fbed 	bl	1cc04 <_Unwind_VRS_Get>
   1d42a:	9803      	ldr	r0, [sp, #12]
   1d42c:	b005      	add	sp, #20
   1d42e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d432:	bf00      	nop

0001d434 <unwind_UCB_from_context>:
   1d434:	e7f0      	b.n	1d418 <_Unwind_GetGR.constprop.0>
   1d436:	bf00      	nop

0001d438 <__gnu_unwind_execute>:
   1d438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d43c:	4606      	mov	r6, r0
   1d43e:	b085      	sub	sp, #20
   1d440:	460f      	mov	r7, r1
   1d442:	f04f 0800 	mov.w	r8, #0
   1d446:	4638      	mov	r0, r7
   1d448:	f7ff ffca 	bl	1d3e0 <next_unwind_byte>
   1d44c:	28b0      	cmp	r0, #176	; 0xb0
   1d44e:	4604      	mov	r4, r0
   1d450:	d023      	beq.n	1d49a <__gnu_unwind_execute+0x62>
   1d452:	0605      	lsls	r5, r0, #24
   1d454:	d427      	bmi.n	1d4a6 <__gnu_unwind_execute+0x6e>
   1d456:	2300      	movs	r3, #0
   1d458:	f10d 090c 	add.w	r9, sp, #12
   1d45c:	4619      	mov	r1, r3
   1d45e:	0085      	lsls	r5, r0, #2
   1d460:	220d      	movs	r2, #13
   1d462:	f8cd 9000 	str.w	r9, [sp]
   1d466:	4630      	mov	r0, r6
   1d468:	f7ff fbcc 	bl	1cc04 <_Unwind_VRS_Get>
   1d46c:	b2ed      	uxtb	r5, r5
   1d46e:	9b03      	ldr	r3, [sp, #12]
   1d470:	f8cd 9000 	str.w	r9, [sp]
   1d474:	0660      	lsls	r0, r4, #25
   1d476:	f105 0504 	add.w	r5, r5, #4
   1d47a:	bf4c      	ite	mi
   1d47c:	1b5d      	submi	r5, r3, r5
   1d47e:	18ed      	addpl	r5, r5, r3
   1d480:	2300      	movs	r3, #0
   1d482:	4619      	mov	r1, r3
   1d484:	220d      	movs	r2, #13
   1d486:	4630      	mov	r0, r6
   1d488:	9503      	str	r5, [sp, #12]
   1d48a:	f7ff fbe1 	bl	1cc50 <_Unwind_VRS_Set>
   1d48e:	4638      	mov	r0, r7
   1d490:	f7ff ffa6 	bl	1d3e0 <next_unwind_byte>
   1d494:	28b0      	cmp	r0, #176	; 0xb0
   1d496:	4604      	mov	r4, r0
   1d498:	d1db      	bne.n	1d452 <__gnu_unwind_execute+0x1a>
   1d49a:	f1b8 0f00 	cmp.w	r8, #0
   1d49e:	f000 8095 	beq.w	1d5cc <__gnu_unwind_execute+0x194>
   1d4a2:	2000      	movs	r0, #0
   1d4a4:	e01c      	b.n	1d4e0 <__gnu_unwind_execute+0xa8>
   1d4a6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d4aa:	2b80      	cmp	r3, #128	; 0x80
   1d4ac:	d05d      	beq.n	1d56a <__gnu_unwind_execute+0x132>
   1d4ae:	2b90      	cmp	r3, #144	; 0x90
   1d4b0:	d019      	beq.n	1d4e6 <__gnu_unwind_execute+0xae>
   1d4b2:	2ba0      	cmp	r3, #160	; 0xa0
   1d4b4:	d02c      	beq.n	1d510 <__gnu_unwind_execute+0xd8>
   1d4b6:	2bb0      	cmp	r3, #176	; 0xb0
   1d4b8:	d03f      	beq.n	1d53a <__gnu_unwind_execute+0x102>
   1d4ba:	2bc0      	cmp	r3, #192	; 0xc0
   1d4bc:	d06c      	beq.n	1d598 <__gnu_unwind_execute+0x160>
   1d4be:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d4c2:	2bd0      	cmp	r3, #208	; 0xd0
   1d4c4:	d10b      	bne.n	1d4de <__gnu_unwind_execute+0xa6>
   1d4c6:	f000 0207 	and.w	r2, r0, #7
   1d4ca:	3201      	adds	r2, #1
   1d4cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d4d0:	2305      	movs	r3, #5
   1d4d2:	2101      	movs	r1, #1
   1d4d4:	4630      	mov	r0, r6
   1d4d6:	f7ff fd89 	bl	1cfec <_Unwind_VRS_Pop>
   1d4da:	2800      	cmp	r0, #0
   1d4dc:	d0b3      	beq.n	1d446 <__gnu_unwind_execute+0xe>
   1d4de:	2009      	movs	r0, #9
   1d4e0:	b005      	add	sp, #20
   1d4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d4e6:	f000 030d 	and.w	r3, r0, #13
   1d4ea:	2b0d      	cmp	r3, #13
   1d4ec:	d0f7      	beq.n	1d4de <__gnu_unwind_execute+0xa6>
   1d4ee:	ad03      	add	r5, sp, #12
   1d4f0:	2300      	movs	r3, #0
   1d4f2:	f000 020f 	and.w	r2, r0, #15
   1d4f6:	4619      	mov	r1, r3
   1d4f8:	9500      	str	r5, [sp, #0]
   1d4fa:	4630      	mov	r0, r6
   1d4fc:	f7ff fb82 	bl	1cc04 <_Unwind_VRS_Get>
   1d500:	2300      	movs	r3, #0
   1d502:	9500      	str	r5, [sp, #0]
   1d504:	4619      	mov	r1, r3
   1d506:	220d      	movs	r2, #13
   1d508:	4630      	mov	r0, r6
   1d50a:	f7ff fba1 	bl	1cc50 <_Unwind_VRS_Set>
   1d50e:	e79a      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d510:	43c2      	mvns	r2, r0
   1d512:	f002 0307 	and.w	r3, r2, #7
   1d516:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d51a:	411a      	asrs	r2, r3
   1d51c:	0701      	lsls	r1, r0, #28
   1d51e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d522:	f04f 0300 	mov.w	r3, #0
   1d526:	bf48      	it	mi
   1d528:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d52c:	4619      	mov	r1, r3
   1d52e:	4630      	mov	r0, r6
   1d530:	f7ff fd5c 	bl	1cfec <_Unwind_VRS_Pop>
   1d534:	2800      	cmp	r0, #0
   1d536:	d1d2      	bne.n	1d4de <__gnu_unwind_execute+0xa6>
   1d538:	e785      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d53a:	28b1      	cmp	r0, #177	; 0xb1
   1d53c:	d057      	beq.n	1d5ee <__gnu_unwind_execute+0x1b6>
   1d53e:	28b2      	cmp	r0, #178	; 0xb2
   1d540:	d068      	beq.n	1d614 <__gnu_unwind_execute+0x1dc>
   1d542:	28b3      	cmp	r0, #179	; 0xb3
   1d544:	f000 8095 	beq.w	1d672 <__gnu_unwind_execute+0x23a>
   1d548:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d54c:	2bb4      	cmp	r3, #180	; 0xb4
   1d54e:	d0c6      	beq.n	1d4de <__gnu_unwind_execute+0xa6>
   1d550:	f000 0207 	and.w	r2, r0, #7
   1d554:	3201      	adds	r2, #1
   1d556:	2301      	movs	r3, #1
   1d558:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d55c:	4619      	mov	r1, r3
   1d55e:	4630      	mov	r0, r6
   1d560:	f7ff fd44 	bl	1cfec <_Unwind_VRS_Pop>
   1d564:	2800      	cmp	r0, #0
   1d566:	d1ba      	bne.n	1d4de <__gnu_unwind_execute+0xa6>
   1d568:	e76d      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d56a:	4638      	mov	r0, r7
   1d56c:	f7ff ff38 	bl	1d3e0 <next_unwind_byte>
   1d570:	0224      	lsls	r4, r4, #8
   1d572:	4304      	orrs	r4, r0
   1d574:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d578:	d0b1      	beq.n	1d4de <__gnu_unwind_execute+0xa6>
   1d57a:	0124      	lsls	r4, r4, #4
   1d57c:	2300      	movs	r3, #0
   1d57e:	b2a2      	uxth	r2, r4
   1d580:	4619      	mov	r1, r3
   1d582:	4630      	mov	r0, r6
   1d584:	f7ff fd32 	bl	1cfec <_Unwind_VRS_Pop>
   1d588:	2800      	cmp	r0, #0
   1d58a:	d1a8      	bne.n	1d4de <__gnu_unwind_execute+0xa6>
   1d58c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d590:	bf18      	it	ne
   1d592:	f04f 0801 	movne.w	r8, #1
   1d596:	e756      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d598:	28c6      	cmp	r0, #198	; 0xc6
   1d59a:	d07d      	beq.n	1d698 <__gnu_unwind_execute+0x260>
   1d59c:	28c7      	cmp	r0, #199	; 0xc7
   1d59e:	f000 8086 	beq.w	1d6ae <__gnu_unwind_execute+0x276>
   1d5a2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d5a6:	2bc0      	cmp	r3, #192	; 0xc0
   1d5a8:	f000 8094 	beq.w	1d6d4 <__gnu_unwind_execute+0x29c>
   1d5ac:	28c8      	cmp	r0, #200	; 0xc8
   1d5ae:	f000 809f 	beq.w	1d6f0 <__gnu_unwind_execute+0x2b8>
   1d5b2:	28c9      	cmp	r0, #201	; 0xc9
   1d5b4:	d193      	bne.n	1d4de <__gnu_unwind_execute+0xa6>
   1d5b6:	4638      	mov	r0, r7
   1d5b8:	f7ff ff12 	bl	1d3e0 <next_unwind_byte>
   1d5bc:	0302      	lsls	r2, r0, #12
   1d5be:	f000 000f 	and.w	r0, r0, #15
   1d5c2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d5c6:	3001      	adds	r0, #1
   1d5c8:	4302      	orrs	r2, r0
   1d5ca:	e781      	b.n	1d4d0 <__gnu_unwind_execute+0x98>
   1d5cc:	ac03      	add	r4, sp, #12
   1d5ce:	4643      	mov	r3, r8
   1d5d0:	220e      	movs	r2, #14
   1d5d2:	4641      	mov	r1, r8
   1d5d4:	9400      	str	r4, [sp, #0]
   1d5d6:	4630      	mov	r0, r6
   1d5d8:	f7ff fb14 	bl	1cc04 <_Unwind_VRS_Get>
   1d5dc:	9400      	str	r4, [sp, #0]
   1d5de:	4630      	mov	r0, r6
   1d5e0:	4643      	mov	r3, r8
   1d5e2:	220f      	movs	r2, #15
   1d5e4:	4641      	mov	r1, r8
   1d5e6:	f7ff fb33 	bl	1cc50 <_Unwind_VRS_Set>
   1d5ea:	4640      	mov	r0, r8
   1d5ec:	e778      	b.n	1d4e0 <__gnu_unwind_execute+0xa8>
   1d5ee:	4638      	mov	r0, r7
   1d5f0:	f7ff fef6 	bl	1d3e0 <next_unwind_byte>
   1d5f4:	2800      	cmp	r0, #0
   1d5f6:	f43f af72 	beq.w	1d4de <__gnu_unwind_execute+0xa6>
   1d5fa:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d5fe:	f47f af6e 	bne.w	1d4de <__gnu_unwind_execute+0xa6>
   1d602:	4602      	mov	r2, r0
   1d604:	4619      	mov	r1, r3
   1d606:	4630      	mov	r0, r6
   1d608:	f7ff fcf0 	bl	1cfec <_Unwind_VRS_Pop>
   1d60c:	2800      	cmp	r0, #0
   1d60e:	f47f af66 	bne.w	1d4de <__gnu_unwind_execute+0xa6>
   1d612:	e718      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d614:	2300      	movs	r3, #0
   1d616:	f10d 090c 	add.w	r9, sp, #12
   1d61a:	220d      	movs	r2, #13
   1d61c:	4619      	mov	r1, r3
   1d61e:	f8cd 9000 	str.w	r9, [sp]
   1d622:	4630      	mov	r0, r6
   1d624:	f7ff faee 	bl	1cc04 <_Unwind_VRS_Get>
   1d628:	4638      	mov	r0, r7
   1d62a:	f7ff fed9 	bl	1d3e0 <next_unwind_byte>
   1d62e:	0602      	lsls	r2, r0, #24
   1d630:	f04f 0402 	mov.w	r4, #2
   1d634:	d50c      	bpl.n	1d650 <__gnu_unwind_execute+0x218>
   1d636:	9b03      	ldr	r3, [sp, #12]
   1d638:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d63c:	40a0      	lsls	r0, r4
   1d63e:	4403      	add	r3, r0
   1d640:	4638      	mov	r0, r7
   1d642:	9303      	str	r3, [sp, #12]
   1d644:	f7ff fecc 	bl	1d3e0 <next_unwind_byte>
   1d648:	0603      	lsls	r3, r0, #24
   1d64a:	f104 0407 	add.w	r4, r4, #7
   1d64e:	d4f2      	bmi.n	1d636 <__gnu_unwind_execute+0x1fe>
   1d650:	9b03      	ldr	r3, [sp, #12]
   1d652:	f8cd 9000 	str.w	r9, [sp]
   1d656:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d65a:	40a2      	lsls	r2, r4
   1d65c:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d660:	2300      	movs	r3, #0
   1d662:	4414      	add	r4, r2
   1d664:	4619      	mov	r1, r3
   1d666:	220d      	movs	r2, #13
   1d668:	4630      	mov	r0, r6
   1d66a:	9403      	str	r4, [sp, #12]
   1d66c:	f7ff faf0 	bl	1cc50 <_Unwind_VRS_Set>
   1d670:	e6e9      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d672:	4638      	mov	r0, r7
   1d674:	f7ff feb4 	bl	1d3e0 <next_unwind_byte>
   1d678:	0301      	lsls	r1, r0, #12
   1d67a:	f000 000f 	and.w	r0, r0, #15
   1d67e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d682:	1c42      	adds	r2, r0, #1
   1d684:	2301      	movs	r3, #1
   1d686:	430a      	orrs	r2, r1
   1d688:	4630      	mov	r0, r6
   1d68a:	4619      	mov	r1, r3
   1d68c:	f7ff fcae 	bl	1cfec <_Unwind_VRS_Pop>
   1d690:	2800      	cmp	r0, #0
   1d692:	f47f af24 	bne.w	1d4de <__gnu_unwind_execute+0xa6>
   1d696:	e6d6      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d698:	4638      	mov	r0, r7
   1d69a:	f7ff fea1 	bl	1d3e0 <next_unwind_byte>
   1d69e:	0301      	lsls	r1, r0, #12
   1d6a0:	f000 000f 	and.w	r0, r0, #15
   1d6a4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d6a8:	1c42      	adds	r2, r0, #1
   1d6aa:	2303      	movs	r3, #3
   1d6ac:	e7eb      	b.n	1d686 <__gnu_unwind_execute+0x24e>
   1d6ae:	4638      	mov	r0, r7
   1d6b0:	f7ff fe96 	bl	1d3e0 <next_unwind_byte>
   1d6b4:	2800      	cmp	r0, #0
   1d6b6:	f43f af12 	beq.w	1d4de <__gnu_unwind_execute+0xa6>
   1d6ba:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d6be:	f47f af0e 	bne.w	1d4de <__gnu_unwind_execute+0xa6>
   1d6c2:	4602      	mov	r2, r0
   1d6c4:	2104      	movs	r1, #4
   1d6c6:	4630      	mov	r0, r6
   1d6c8:	f7ff fc90 	bl	1cfec <_Unwind_VRS_Pop>
   1d6cc:	2800      	cmp	r0, #0
   1d6ce:	f47f af06 	bne.w	1d4de <__gnu_unwind_execute+0xa6>
   1d6d2:	e6b8      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d6d4:	f000 020f 	and.w	r2, r0, #15
   1d6d8:	3201      	adds	r2, #1
   1d6da:	2303      	movs	r3, #3
   1d6dc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d6e0:	4619      	mov	r1, r3
   1d6e2:	4630      	mov	r0, r6
   1d6e4:	f7ff fc82 	bl	1cfec <_Unwind_VRS_Pop>
   1d6e8:	2800      	cmp	r0, #0
   1d6ea:	f47f aef8 	bne.w	1d4de <__gnu_unwind_execute+0xa6>
   1d6ee:	e6aa      	b.n	1d446 <__gnu_unwind_execute+0xe>
   1d6f0:	4638      	mov	r0, r7
   1d6f2:	f7ff fe75 	bl	1d3e0 <next_unwind_byte>
   1d6f6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d6fa:	f000 030f 	and.w	r3, r0, #15
   1d6fe:	3210      	adds	r2, #16
   1d700:	3301      	adds	r3, #1
   1d702:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d706:	e6e3      	b.n	1d4d0 <__gnu_unwind_execute+0x98>

0001d708 <__gnu_unwind_frame>:
   1d708:	b510      	push	{r4, lr}
   1d70a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d70c:	b084      	sub	sp, #16
   1d70e:	685a      	ldr	r2, [r3, #4]
   1d710:	2003      	movs	r0, #3
   1d712:	f88d 000c 	strb.w	r0, [sp, #12]
   1d716:	79dc      	ldrb	r4, [r3, #7]
   1d718:	f88d 400d 	strb.w	r4, [sp, #13]
   1d71c:	0212      	lsls	r2, r2, #8
   1d71e:	3308      	adds	r3, #8
   1d720:	4608      	mov	r0, r1
   1d722:	a901      	add	r1, sp, #4
   1d724:	9201      	str	r2, [sp, #4]
   1d726:	9302      	str	r3, [sp, #8]
   1d728:	f7ff fe86 	bl	1d438 <__gnu_unwind_execute>
   1d72c:	b004      	add	sp, #16
   1d72e:	bd10      	pop	{r4, pc}

0001d730 <_Unwind_GetRegionStart>:
   1d730:	b508      	push	{r3, lr}
   1d732:	f7ff fe7f 	bl	1d434 <unwind_UCB_from_context>
   1d736:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d738:	bd08      	pop	{r3, pc}
   1d73a:	bf00      	nop

0001d73c <_Unwind_GetLanguageSpecificData>:
   1d73c:	b508      	push	{r3, lr}
   1d73e:	f7ff fe79 	bl	1d434 <unwind_UCB_from_context>
   1d742:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d744:	79c3      	ldrb	r3, [r0, #7]
   1d746:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d74a:	3008      	adds	r0, #8
   1d74c:	bd08      	pop	{r3, pc}
   1d74e:	bf00      	nop

0001d750 <_Unwind_GetTextRelBase>:
   1d750:	b508      	push	{r3, lr}
   1d752:	f000 f807 	bl	1d764 <abort>
   1d756:	bf00      	nop

0001d758 <_Unwind_GetDataRelBase>:
   1d758:	b508      	push	{r3, lr}
   1d75a:	f7ff fff9 	bl	1d750 <_Unwind_GetTextRelBase>
   1d75e:	bf00      	nop

0001d760 <__aeabi_idiv0>:
   1d760:	4770      	bx	lr
   1d762:	bf00      	nop

0001d764 <abort>:
   1d764:	b508      	push	{r3, lr}
   1d766:	2006      	movs	r0, #6
   1d768:	f001 f982 	bl	1ea70 <raise>
   1d76c:	2001      	movs	r0, #1
   1d76e:	f005 f927 	bl	229c0 <_exit>
   1d772:	bf00      	nop

0001d774 <__errno>:
   1d774:	4b01      	ldr	r3, [pc, #4]	; (1d77c <__errno+0x8>)
   1d776:	6818      	ldr	r0, [r3, #0]
   1d778:	4770      	bx	lr
   1d77a:	bf00      	nop
   1d77c:	200000f8 	.word	0x200000f8

0001d780 <fputc>:
   1d780:	4b14      	ldr	r3, [pc, #80]	; (1d7d4 <fputc+0x54>)
   1d782:	b570      	push	{r4, r5, r6, lr}
   1d784:	681d      	ldr	r5, [r3, #0]
   1d786:	4606      	mov	r6, r0
   1d788:	460c      	mov	r4, r1
   1d78a:	b10d      	cbz	r5, 1d790 <fputc+0x10>
   1d78c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d78e:	b1c3      	cbz	r3, 1d7c2 <fputc+0x42>
   1d790:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d792:	07d8      	lsls	r0, r3, #31
   1d794:	d402      	bmi.n	1d79c <fputc+0x1c>
   1d796:	89a3      	ldrh	r3, [r4, #12]
   1d798:	0599      	lsls	r1, r3, #22
   1d79a:	d516      	bpl.n	1d7ca <fputc+0x4a>
   1d79c:	4628      	mov	r0, r5
   1d79e:	4622      	mov	r2, r4
   1d7a0:	4631      	mov	r1, r6
   1d7a2:	f000 ff3d 	bl	1e620 <_putc_r>
   1d7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d7a8:	07da      	lsls	r2, r3, #31
   1d7aa:	4605      	mov	r5, r0
   1d7ac:	d402      	bmi.n	1d7b4 <fputc+0x34>
   1d7ae:	89a3      	ldrh	r3, [r4, #12]
   1d7b0:	059b      	lsls	r3, r3, #22
   1d7b2:	d501      	bpl.n	1d7b8 <fputc+0x38>
   1d7b4:	4628      	mov	r0, r5
   1d7b6:	bd70      	pop	{r4, r5, r6, pc}
   1d7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d7ba:	f000 fa7f 	bl	1dcbc <__retarget_lock_release_recursive>
   1d7be:	4628      	mov	r0, r5
   1d7c0:	bd70      	pop	{r4, r5, r6, pc}
   1d7c2:	4628      	mov	r0, r5
   1d7c4:	f004 f816 	bl	217f4 <__sinit>
   1d7c8:	e7e2      	b.n	1d790 <fputc+0x10>
   1d7ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d7cc:	f000 fa74 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   1d7d0:	e7e4      	b.n	1d79c <fputc+0x1c>
   1d7d2:	bf00      	nop
   1d7d4:	200000f8 	.word	0x200000f8

0001d7d8 <_fputs_r>:
   1d7d8:	b530      	push	{r4, r5, lr}
   1d7da:	b087      	sub	sp, #28
   1d7dc:	4605      	mov	r5, r0
   1d7de:	4608      	mov	r0, r1
   1d7e0:	4614      	mov	r4, r2
   1d7e2:	9101      	str	r1, [sp, #4]
   1d7e4:	f001 fb0c 	bl	1ee00 <strlen>
   1d7e8:	aa01      	add	r2, sp, #4
   1d7ea:	2301      	movs	r3, #1
   1d7ec:	9005      	str	r0, [sp, #20]
   1d7ee:	9002      	str	r0, [sp, #8]
   1d7f0:	9203      	str	r2, [sp, #12]
   1d7f2:	9304      	str	r3, [sp, #16]
   1d7f4:	b10d      	cbz	r5, 1d7fa <_fputs_r+0x22>
   1d7f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d7f8:	b333      	cbz	r3, 1d848 <_fputs_r+0x70>
   1d7fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d7fc:	f013 0f01 	tst.w	r3, #1
   1d800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d804:	b29a      	uxth	r2, r3
   1d806:	d101      	bne.n	1d80c <_fputs_r+0x34>
   1d808:	0590      	lsls	r0, r2, #22
   1d80a:	d521      	bpl.n	1d850 <_fputs_r+0x78>
   1d80c:	0491      	lsls	r1, r2, #18
   1d80e:	d406      	bmi.n	1d81e <_fputs_r+0x46>
   1d810:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d81a:	81a3      	strh	r3, [r4, #12]
   1d81c:	6662      	str	r2, [r4, #100]	; 0x64
   1d81e:	4628      	mov	r0, r5
   1d820:	aa03      	add	r2, sp, #12
   1d822:	4621      	mov	r1, r4
   1d824:	f000 f824 	bl	1d870 <__sfvwrite_r>
   1d828:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d82a:	07da      	lsls	r2, r3, #31
   1d82c:	4605      	mov	r5, r0
   1d82e:	d402      	bmi.n	1d836 <_fputs_r+0x5e>
   1d830:	89a3      	ldrh	r3, [r4, #12]
   1d832:	059b      	lsls	r3, r3, #22
   1d834:	d502      	bpl.n	1d83c <_fputs_r+0x64>
   1d836:	4628      	mov	r0, r5
   1d838:	b007      	add	sp, #28
   1d83a:	bd30      	pop	{r4, r5, pc}
   1d83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d83e:	f000 fa3d 	bl	1dcbc <__retarget_lock_release_recursive>
   1d842:	4628      	mov	r0, r5
   1d844:	b007      	add	sp, #28
   1d846:	bd30      	pop	{r4, r5, pc}
   1d848:	4628      	mov	r0, r5
   1d84a:	f003 ffd3 	bl	217f4 <__sinit>
   1d84e:	e7d4      	b.n	1d7fa <_fputs_r+0x22>
   1d850:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d852:	f000 fa31 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   1d856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d85a:	b29a      	uxth	r2, r3
   1d85c:	e7d6      	b.n	1d80c <_fputs_r+0x34>
   1d85e:	bf00      	nop

0001d860 <fputs>:
   1d860:	4b02      	ldr	r3, [pc, #8]	; (1d86c <fputs+0xc>)
   1d862:	460a      	mov	r2, r1
   1d864:	4601      	mov	r1, r0
   1d866:	6818      	ldr	r0, [r3, #0]
   1d868:	f7ff bfb6 	b.w	1d7d8 <_fputs_r>
   1d86c:	200000f8 	.word	0x200000f8

0001d870 <__sfvwrite_r>:
   1d870:	6893      	ldr	r3, [r2, #8]
   1d872:	2b00      	cmp	r3, #0
   1d874:	d073      	beq.n	1d95e <__sfvwrite_r+0xee>
   1d876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d87a:	898b      	ldrh	r3, [r1, #12]
   1d87c:	b083      	sub	sp, #12
   1d87e:	460c      	mov	r4, r1
   1d880:	0719      	lsls	r1, r3, #28
   1d882:	9000      	str	r0, [sp, #0]
   1d884:	4616      	mov	r6, r2
   1d886:	d526      	bpl.n	1d8d6 <__sfvwrite_r+0x66>
   1d888:	6922      	ldr	r2, [r4, #16]
   1d88a:	b322      	cbz	r2, 1d8d6 <__sfvwrite_r+0x66>
   1d88c:	f013 0002 	ands.w	r0, r3, #2
   1d890:	6835      	ldr	r5, [r6, #0]
   1d892:	d02c      	beq.n	1d8ee <__sfvwrite_r+0x7e>
   1d894:	f04f 0900 	mov.w	r9, #0
   1d898:	4fb0      	ldr	r7, [pc, #704]	; (1db5c <__sfvwrite_r+0x2ec>)
   1d89a:	46c8      	mov	r8, r9
   1d89c:	46b2      	mov	sl, r6
   1d89e:	45b8      	cmp	r8, r7
   1d8a0:	4643      	mov	r3, r8
   1d8a2:	464a      	mov	r2, r9
   1d8a4:	bf28      	it	cs
   1d8a6:	463b      	movcs	r3, r7
   1d8a8:	9800      	ldr	r0, [sp, #0]
   1d8aa:	f1b8 0f00 	cmp.w	r8, #0
   1d8ae:	d050      	beq.n	1d952 <__sfvwrite_r+0xe2>
   1d8b0:	69e1      	ldr	r1, [r4, #28]
   1d8b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d8b4:	47b0      	blx	r6
   1d8b6:	2800      	cmp	r0, #0
   1d8b8:	dd58      	ble.n	1d96c <__sfvwrite_r+0xfc>
   1d8ba:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d8be:	1a1b      	subs	r3, r3, r0
   1d8c0:	4481      	add	r9, r0
   1d8c2:	eba8 0800 	sub.w	r8, r8, r0
   1d8c6:	f8ca 3008 	str.w	r3, [sl, #8]
   1d8ca:	2b00      	cmp	r3, #0
   1d8cc:	d1e7      	bne.n	1d89e <__sfvwrite_r+0x2e>
   1d8ce:	2000      	movs	r0, #0
   1d8d0:	b003      	add	sp, #12
   1d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8d6:	4621      	mov	r1, r4
   1d8d8:	9800      	ldr	r0, [sp, #0]
   1d8da:	f002 fe65 	bl	205a8 <__swsetup_r>
   1d8de:	2800      	cmp	r0, #0
   1d8e0:	f040 8133 	bne.w	1db4a <__sfvwrite_r+0x2da>
   1d8e4:	89a3      	ldrh	r3, [r4, #12]
   1d8e6:	6835      	ldr	r5, [r6, #0]
   1d8e8:	f013 0002 	ands.w	r0, r3, #2
   1d8ec:	d1d2      	bne.n	1d894 <__sfvwrite_r+0x24>
   1d8ee:	f013 0901 	ands.w	r9, r3, #1
   1d8f2:	d145      	bne.n	1d980 <__sfvwrite_r+0x110>
   1d8f4:	464f      	mov	r7, r9
   1d8f6:	9601      	str	r6, [sp, #4]
   1d8f8:	b337      	cbz	r7, 1d948 <__sfvwrite_r+0xd8>
   1d8fa:	059a      	lsls	r2, r3, #22
   1d8fc:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d900:	f140 8083 	bpl.w	1da0a <__sfvwrite_r+0x19a>
   1d904:	4547      	cmp	r7, r8
   1d906:	46c3      	mov	fp, r8
   1d908:	f0c0 80ab 	bcc.w	1da62 <__sfvwrite_r+0x1f2>
   1d90c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d910:	f040 80ac 	bne.w	1da6c <__sfvwrite_r+0x1fc>
   1d914:	6820      	ldr	r0, [r4, #0]
   1d916:	46ba      	mov	sl, r7
   1d918:	465a      	mov	r2, fp
   1d91a:	4649      	mov	r1, r9
   1d91c:	f000 fdc2 	bl	1e4a4 <memmove>
   1d920:	68a2      	ldr	r2, [r4, #8]
   1d922:	6823      	ldr	r3, [r4, #0]
   1d924:	eba2 0208 	sub.w	r2, r2, r8
   1d928:	445b      	add	r3, fp
   1d92a:	60a2      	str	r2, [r4, #8]
   1d92c:	6023      	str	r3, [r4, #0]
   1d92e:	9a01      	ldr	r2, [sp, #4]
   1d930:	6893      	ldr	r3, [r2, #8]
   1d932:	eba3 030a 	sub.w	r3, r3, sl
   1d936:	44d1      	add	r9, sl
   1d938:	eba7 070a 	sub.w	r7, r7, sl
   1d93c:	6093      	str	r3, [r2, #8]
   1d93e:	2b00      	cmp	r3, #0
   1d940:	d0c5      	beq.n	1d8ce <__sfvwrite_r+0x5e>
   1d942:	89a3      	ldrh	r3, [r4, #12]
   1d944:	2f00      	cmp	r7, #0
   1d946:	d1d8      	bne.n	1d8fa <__sfvwrite_r+0x8a>
   1d948:	f8d5 9000 	ldr.w	r9, [r5]
   1d94c:	686f      	ldr	r7, [r5, #4]
   1d94e:	3508      	adds	r5, #8
   1d950:	e7d2      	b.n	1d8f8 <__sfvwrite_r+0x88>
   1d952:	f8d5 9000 	ldr.w	r9, [r5]
   1d956:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d95a:	3508      	adds	r5, #8
   1d95c:	e79f      	b.n	1d89e <__sfvwrite_r+0x2e>
   1d95e:	2000      	movs	r0, #0
   1d960:	4770      	bx	lr
   1d962:	4621      	mov	r1, r4
   1d964:	9800      	ldr	r0, [sp, #0]
   1d966:	f003 feed 	bl	21744 <_fflush_r>
   1d96a:	b370      	cbz	r0, 1d9ca <__sfvwrite_r+0x15a>
   1d96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d974:	f04f 30ff 	mov.w	r0, #4294967295
   1d978:	81a3      	strh	r3, [r4, #12]
   1d97a:	b003      	add	sp, #12
   1d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d980:	4681      	mov	r9, r0
   1d982:	4633      	mov	r3, r6
   1d984:	464e      	mov	r6, r9
   1d986:	46a8      	mov	r8, r5
   1d988:	469a      	mov	sl, r3
   1d98a:	464d      	mov	r5, r9
   1d98c:	b34e      	cbz	r6, 1d9e2 <__sfvwrite_r+0x172>
   1d98e:	b380      	cbz	r0, 1d9f2 <__sfvwrite_r+0x182>
   1d990:	6820      	ldr	r0, [r4, #0]
   1d992:	6923      	ldr	r3, [r4, #16]
   1d994:	6962      	ldr	r2, [r4, #20]
   1d996:	45b1      	cmp	r9, r6
   1d998:	46cb      	mov	fp, r9
   1d99a:	bf28      	it	cs
   1d99c:	46b3      	movcs	fp, r6
   1d99e:	4298      	cmp	r0, r3
   1d9a0:	465f      	mov	r7, fp
   1d9a2:	d904      	bls.n	1d9ae <__sfvwrite_r+0x13e>
   1d9a4:	68a3      	ldr	r3, [r4, #8]
   1d9a6:	4413      	add	r3, r2
   1d9a8:	459b      	cmp	fp, r3
   1d9aa:	f300 80a6 	bgt.w	1dafa <__sfvwrite_r+0x28a>
   1d9ae:	4593      	cmp	fp, r2
   1d9b0:	db4b      	blt.n	1da4a <__sfvwrite_r+0x1da>
   1d9b2:	4613      	mov	r3, r2
   1d9b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d9b6:	69e1      	ldr	r1, [r4, #28]
   1d9b8:	9800      	ldr	r0, [sp, #0]
   1d9ba:	462a      	mov	r2, r5
   1d9bc:	47b8      	blx	r7
   1d9be:	1e07      	subs	r7, r0, #0
   1d9c0:	ddd4      	ble.n	1d96c <__sfvwrite_r+0xfc>
   1d9c2:	ebb9 0907 	subs.w	r9, r9, r7
   1d9c6:	d0cc      	beq.n	1d962 <__sfvwrite_r+0xf2>
   1d9c8:	2001      	movs	r0, #1
   1d9ca:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d9ce:	1bdb      	subs	r3, r3, r7
   1d9d0:	443d      	add	r5, r7
   1d9d2:	1bf6      	subs	r6, r6, r7
   1d9d4:	f8ca 3008 	str.w	r3, [sl, #8]
   1d9d8:	2b00      	cmp	r3, #0
   1d9da:	f43f af78 	beq.w	1d8ce <__sfvwrite_r+0x5e>
   1d9de:	2e00      	cmp	r6, #0
   1d9e0:	d1d5      	bne.n	1d98e <__sfvwrite_r+0x11e>
   1d9e2:	f108 0308 	add.w	r3, r8, #8
   1d9e6:	e913 0060 	ldmdb	r3, {r5, r6}
   1d9ea:	4698      	mov	r8, r3
   1d9ec:	3308      	adds	r3, #8
   1d9ee:	2e00      	cmp	r6, #0
   1d9f0:	d0f9      	beq.n	1d9e6 <__sfvwrite_r+0x176>
   1d9f2:	4632      	mov	r2, r6
   1d9f4:	210a      	movs	r1, #10
   1d9f6:	4628      	mov	r0, r5
   1d9f8:	f000 fc3a 	bl	1e270 <memchr>
   1d9fc:	2800      	cmp	r0, #0
   1d9fe:	f000 80a1 	beq.w	1db44 <__sfvwrite_r+0x2d4>
   1da02:	3001      	adds	r0, #1
   1da04:	eba0 0905 	sub.w	r9, r0, r5
   1da08:	e7c2      	b.n	1d990 <__sfvwrite_r+0x120>
   1da0a:	6820      	ldr	r0, [r4, #0]
   1da0c:	6923      	ldr	r3, [r4, #16]
   1da0e:	4298      	cmp	r0, r3
   1da10:	d802      	bhi.n	1da18 <__sfvwrite_r+0x1a8>
   1da12:	6963      	ldr	r3, [r4, #20]
   1da14:	429f      	cmp	r7, r3
   1da16:	d25d      	bcs.n	1dad4 <__sfvwrite_r+0x264>
   1da18:	45b8      	cmp	r8, r7
   1da1a:	bf28      	it	cs
   1da1c:	46b8      	movcs	r8, r7
   1da1e:	4642      	mov	r2, r8
   1da20:	4649      	mov	r1, r9
   1da22:	f000 fd3f 	bl	1e4a4 <memmove>
   1da26:	68a3      	ldr	r3, [r4, #8]
   1da28:	6822      	ldr	r2, [r4, #0]
   1da2a:	eba3 0308 	sub.w	r3, r3, r8
   1da2e:	4442      	add	r2, r8
   1da30:	60a3      	str	r3, [r4, #8]
   1da32:	6022      	str	r2, [r4, #0]
   1da34:	b10b      	cbz	r3, 1da3a <__sfvwrite_r+0x1ca>
   1da36:	46c2      	mov	sl, r8
   1da38:	e779      	b.n	1d92e <__sfvwrite_r+0xbe>
   1da3a:	4621      	mov	r1, r4
   1da3c:	9800      	ldr	r0, [sp, #0]
   1da3e:	f003 fe81 	bl	21744 <_fflush_r>
   1da42:	2800      	cmp	r0, #0
   1da44:	d192      	bne.n	1d96c <__sfvwrite_r+0xfc>
   1da46:	46c2      	mov	sl, r8
   1da48:	e771      	b.n	1d92e <__sfvwrite_r+0xbe>
   1da4a:	465a      	mov	r2, fp
   1da4c:	4629      	mov	r1, r5
   1da4e:	f000 fd29 	bl	1e4a4 <memmove>
   1da52:	68a2      	ldr	r2, [r4, #8]
   1da54:	6823      	ldr	r3, [r4, #0]
   1da56:	eba2 020b 	sub.w	r2, r2, fp
   1da5a:	445b      	add	r3, fp
   1da5c:	60a2      	str	r2, [r4, #8]
   1da5e:	6023      	str	r3, [r4, #0]
   1da60:	e7af      	b.n	1d9c2 <__sfvwrite_r+0x152>
   1da62:	6820      	ldr	r0, [r4, #0]
   1da64:	46b8      	mov	r8, r7
   1da66:	46ba      	mov	sl, r7
   1da68:	46bb      	mov	fp, r7
   1da6a:	e755      	b.n	1d918 <__sfvwrite_r+0xa8>
   1da6c:	6962      	ldr	r2, [r4, #20]
   1da6e:	6820      	ldr	r0, [r4, #0]
   1da70:	6921      	ldr	r1, [r4, #16]
   1da72:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1da76:	eba0 0a01 	sub.w	sl, r0, r1
   1da7a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1da7e:	f10a 0001 	add.w	r0, sl, #1
   1da82:	ea4f 0868 	mov.w	r8, r8, asr #1
   1da86:	4438      	add	r0, r7
   1da88:	4540      	cmp	r0, r8
   1da8a:	4642      	mov	r2, r8
   1da8c:	bf84      	itt	hi
   1da8e:	4680      	movhi	r8, r0
   1da90:	4642      	movhi	r2, r8
   1da92:	055b      	lsls	r3, r3, #21
   1da94:	d544      	bpl.n	1db20 <__sfvwrite_r+0x2b0>
   1da96:	4611      	mov	r1, r2
   1da98:	9800      	ldr	r0, [sp, #0]
   1da9a:	f000 f921 	bl	1dce0 <_malloc_r>
   1da9e:	4683      	mov	fp, r0
   1daa0:	2800      	cmp	r0, #0
   1daa2:	d055      	beq.n	1db50 <__sfvwrite_r+0x2e0>
   1daa4:	4652      	mov	r2, sl
   1daa6:	6921      	ldr	r1, [r4, #16]
   1daa8:	f000 fc62 	bl	1e370 <memcpy>
   1daac:	89a3      	ldrh	r3, [r4, #12]
   1daae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1dab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1dab6:	81a3      	strh	r3, [r4, #12]
   1dab8:	eb0b 000a 	add.w	r0, fp, sl
   1dabc:	eba8 030a 	sub.w	r3, r8, sl
   1dac0:	f8c4 b010 	str.w	fp, [r4, #16]
   1dac4:	f8c4 8014 	str.w	r8, [r4, #20]
   1dac8:	6020      	str	r0, [r4, #0]
   1daca:	60a3      	str	r3, [r4, #8]
   1dacc:	46b8      	mov	r8, r7
   1dace:	46ba      	mov	sl, r7
   1dad0:	46bb      	mov	fp, r7
   1dad2:	e721      	b.n	1d918 <__sfvwrite_r+0xa8>
   1dad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1dad8:	42b9      	cmp	r1, r7
   1dada:	bf28      	it	cs
   1dadc:	4639      	movcs	r1, r7
   1dade:	464a      	mov	r2, r9
   1dae0:	fb91 f1f3 	sdiv	r1, r1, r3
   1dae4:	9800      	ldr	r0, [sp, #0]
   1dae6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1dae8:	fb03 f301 	mul.w	r3, r3, r1
   1daec:	69e1      	ldr	r1, [r4, #28]
   1daee:	47b0      	blx	r6
   1daf0:	f1b0 0a00 	subs.w	sl, r0, #0
   1daf4:	f73f af1b 	bgt.w	1d92e <__sfvwrite_r+0xbe>
   1daf8:	e738      	b.n	1d96c <__sfvwrite_r+0xfc>
   1dafa:	461a      	mov	r2, r3
   1dafc:	4629      	mov	r1, r5
   1dafe:	9301      	str	r3, [sp, #4]
   1db00:	f000 fcd0 	bl	1e4a4 <memmove>
   1db04:	6822      	ldr	r2, [r4, #0]
   1db06:	9b01      	ldr	r3, [sp, #4]
   1db08:	9800      	ldr	r0, [sp, #0]
   1db0a:	441a      	add	r2, r3
   1db0c:	6022      	str	r2, [r4, #0]
   1db0e:	4621      	mov	r1, r4
   1db10:	f003 fe18 	bl	21744 <_fflush_r>
   1db14:	9b01      	ldr	r3, [sp, #4]
   1db16:	2800      	cmp	r0, #0
   1db18:	f47f af28 	bne.w	1d96c <__sfvwrite_r+0xfc>
   1db1c:	461f      	mov	r7, r3
   1db1e:	e750      	b.n	1d9c2 <__sfvwrite_r+0x152>
   1db20:	9800      	ldr	r0, [sp, #0]
   1db22:	f000 fdbd 	bl	1e6a0 <_realloc_r>
   1db26:	4683      	mov	fp, r0
   1db28:	2800      	cmp	r0, #0
   1db2a:	d1c5      	bne.n	1dab8 <__sfvwrite_r+0x248>
   1db2c:	9d00      	ldr	r5, [sp, #0]
   1db2e:	6921      	ldr	r1, [r4, #16]
   1db30:	4628      	mov	r0, r5
   1db32:	f003 ff01 	bl	21938 <_free_r>
   1db36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1db3a:	220c      	movs	r2, #12
   1db3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1db40:	602a      	str	r2, [r5, #0]
   1db42:	e715      	b.n	1d970 <__sfvwrite_r+0x100>
   1db44:	f106 0901 	add.w	r9, r6, #1
   1db48:	e722      	b.n	1d990 <__sfvwrite_r+0x120>
   1db4a:	f04f 30ff 	mov.w	r0, #4294967295
   1db4e:	e6bf      	b.n	1d8d0 <__sfvwrite_r+0x60>
   1db50:	9a00      	ldr	r2, [sp, #0]
   1db52:	230c      	movs	r3, #12
   1db54:	6013      	str	r3, [r2, #0]
   1db56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1db5a:	e709      	b.n	1d970 <__sfvwrite_r+0x100>
   1db5c:	7ffffc00 	.word	0x7ffffc00

0001db60 <_fwrite_r>:
   1db60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db64:	b086      	sub	sp, #24
   1db66:	fb02 f503 	mul.w	r5, r2, r3
   1db6a:	4690      	mov	r8, r2
   1db6c:	461e      	mov	r6, r3
   1db6e:	aa01      	add	r2, sp, #4
   1db70:	2301      	movs	r3, #1
   1db72:	9101      	str	r1, [sp, #4]
   1db74:	9502      	str	r5, [sp, #8]
   1db76:	9505      	str	r5, [sp, #20]
   1db78:	9203      	str	r2, [sp, #12]
   1db7a:	9304      	str	r3, [sp, #16]
   1db7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1db7e:	4607      	mov	r7, r0
   1db80:	b110      	cbz	r0, 1db88 <_fwrite_r+0x28>
   1db82:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1db84:	2b00      	cmp	r3, #0
   1db86:	d031      	beq.n	1dbec <_fwrite_r+0x8c>
   1db88:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1db8a:	f013 0f01 	tst.w	r3, #1
   1db8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1db92:	b29a      	uxth	r2, r3
   1db94:	d101      	bne.n	1db9a <_fwrite_r+0x3a>
   1db96:	0591      	lsls	r1, r2, #22
   1db98:	d52b      	bpl.n	1dbf2 <_fwrite_r+0x92>
   1db9a:	0492      	lsls	r2, r2, #18
   1db9c:	d406      	bmi.n	1dbac <_fwrite_r+0x4c>
   1db9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1dba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1dba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1dba8:	81a3      	strh	r3, [r4, #12]
   1dbaa:	6662      	str	r2, [r4, #100]	; 0x64
   1dbac:	4638      	mov	r0, r7
   1dbae:	aa03      	add	r2, sp, #12
   1dbb0:	4621      	mov	r1, r4
   1dbb2:	f7ff fe5d 	bl	1d870 <__sfvwrite_r>
   1dbb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1dbb8:	b940      	cbnz	r0, 1dbcc <_fwrite_r+0x6c>
   1dbba:	07d8      	lsls	r0, r3, #31
   1dbbc:	d402      	bmi.n	1dbc4 <_fwrite_r+0x64>
   1dbbe:	89a3      	ldrh	r3, [r4, #12]
   1dbc0:	0599      	lsls	r1, r3, #22
   1dbc2:	d51d      	bpl.n	1dc00 <_fwrite_r+0xa0>
   1dbc4:	4630      	mov	r0, r6
   1dbc6:	b006      	add	sp, #24
   1dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dbcc:	07da      	lsls	r2, r3, #31
   1dbce:	d506      	bpl.n	1dbde <_fwrite_r+0x7e>
   1dbd0:	9805      	ldr	r0, [sp, #20]
   1dbd2:	1a2d      	subs	r5, r5, r0
   1dbd4:	fbb5 f0f8 	udiv	r0, r5, r8
   1dbd8:	b006      	add	sp, #24
   1dbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dbde:	89a3      	ldrh	r3, [r4, #12]
   1dbe0:	059b      	lsls	r3, r3, #22
   1dbe2:	d4f5      	bmi.n	1dbd0 <_fwrite_r+0x70>
   1dbe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dbe6:	f000 f869 	bl	1dcbc <__retarget_lock_release_recursive>
   1dbea:	e7f1      	b.n	1dbd0 <_fwrite_r+0x70>
   1dbec:	f003 fe02 	bl	217f4 <__sinit>
   1dbf0:	e7ca      	b.n	1db88 <_fwrite_r+0x28>
   1dbf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dbf4:	f000 f860 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   1dbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dbfc:	b29a      	uxth	r2, r3
   1dbfe:	e7cc      	b.n	1db9a <_fwrite_r+0x3a>
   1dc00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dc02:	f000 f85b 	bl	1dcbc <__retarget_lock_release_recursive>
   1dc06:	4630      	mov	r0, r6
   1dc08:	e7e6      	b.n	1dbd8 <_fwrite_r+0x78>
   1dc0a:	bf00      	nop

0001dc0c <fwrite>:
   1dc0c:	b510      	push	{r4, lr}
   1dc0e:	b082      	sub	sp, #8
   1dc10:	4c05      	ldr	r4, [pc, #20]	; (1dc28 <fwrite+0x1c>)
   1dc12:	9300      	str	r3, [sp, #0]
   1dc14:	6824      	ldr	r4, [r4, #0]
   1dc16:	4613      	mov	r3, r2
   1dc18:	460a      	mov	r2, r1
   1dc1a:	4601      	mov	r1, r0
   1dc1c:	4620      	mov	r0, r4
   1dc1e:	f7ff ff9f 	bl	1db60 <_fwrite_r>
   1dc22:	b002      	add	sp, #8
   1dc24:	bd10      	pop	{r4, pc}
   1dc26:	bf00      	nop
   1dc28:	200000f8 	.word	0x200000f8

0001dc2c <__libc_init_array>:
   1dc2c:	b570      	push	{r4, r5, r6, lr}
   1dc2e:	4e0f      	ldr	r6, [pc, #60]	; (1dc6c <__libc_init_array+0x40>)
   1dc30:	4d0f      	ldr	r5, [pc, #60]	; (1dc70 <__libc_init_array+0x44>)
   1dc32:	1b76      	subs	r6, r6, r5
   1dc34:	10b6      	asrs	r6, r6, #2
   1dc36:	bf18      	it	ne
   1dc38:	2400      	movne	r4, #0
   1dc3a:	d005      	beq.n	1dc48 <__libc_init_array+0x1c>
   1dc3c:	3401      	adds	r4, #1
   1dc3e:	f855 3b04 	ldr.w	r3, [r5], #4
   1dc42:	4798      	blx	r3
   1dc44:	42a6      	cmp	r6, r4
   1dc46:	d1f9      	bne.n	1dc3c <__libc_init_array+0x10>
   1dc48:	4e0a      	ldr	r6, [pc, #40]	; (1dc74 <__libc_init_array+0x48>)
   1dc4a:	4d0b      	ldr	r5, [pc, #44]	; (1dc78 <__libc_init_array+0x4c>)
   1dc4c:	1b76      	subs	r6, r6, r5
   1dc4e:	f004 fecb 	bl	229e8 <_init>
   1dc52:	10b6      	asrs	r6, r6, #2
   1dc54:	bf18      	it	ne
   1dc56:	2400      	movne	r4, #0
   1dc58:	d006      	beq.n	1dc68 <__libc_init_array+0x3c>
   1dc5a:	3401      	adds	r4, #1
   1dc5c:	f855 3b04 	ldr.w	r3, [r5], #4
   1dc60:	4798      	blx	r3
   1dc62:	42a6      	cmp	r6, r4
   1dc64:	d1f9      	bne.n	1dc5a <__libc_init_array+0x2e>
   1dc66:	bd70      	pop	{r4, r5, r6, pc}
   1dc68:	bd70      	pop	{r4, r5, r6, pc}
   1dc6a:	bf00      	nop
   1dc6c:	00022a00 	.word	0x00022a00
   1dc70:	00022a00 	.word	0x00022a00
   1dc74:	00022a38 	.word	0x00022a38
   1dc78:	00022a00 	.word	0x00022a00

0001dc7c <__itoa>:
   1dc7c:	1e93      	subs	r3, r2, #2
   1dc7e:	2b22      	cmp	r3, #34	; 0x22
   1dc80:	d810      	bhi.n	1dca4 <__itoa+0x28>
   1dc82:	2a0a      	cmp	r2, #10
   1dc84:	b510      	push	{r4, lr}
   1dc86:	d006      	beq.n	1dc96 <__itoa+0x1a>
   1dc88:	2300      	movs	r3, #0
   1dc8a:	460c      	mov	r4, r1
   1dc8c:	4419      	add	r1, r3
   1dc8e:	f002 fbcd 	bl	2042c <__utoa>
   1dc92:	4620      	mov	r0, r4
   1dc94:	bd10      	pop	{r4, pc}
   1dc96:	2800      	cmp	r0, #0
   1dc98:	daf6      	bge.n	1dc88 <__itoa+0xc>
   1dc9a:	232d      	movs	r3, #45	; 0x2d
   1dc9c:	700b      	strb	r3, [r1, #0]
   1dc9e:	4240      	negs	r0, r0
   1dca0:	2301      	movs	r3, #1
   1dca2:	e7f2      	b.n	1dc8a <__itoa+0xe>
   1dca4:	2000      	movs	r0, #0
   1dca6:	7008      	strb	r0, [r1, #0]
   1dca8:	4770      	bx	lr
   1dcaa:	bf00      	nop

0001dcac <itoa>:
   1dcac:	f7ff bfe6 	b.w	1dc7c <__itoa>

0001dcb0 <__retarget_lock_init_recursive>:
   1dcb0:	4770      	bx	lr
   1dcb2:	bf00      	nop

0001dcb4 <__retarget_lock_close_recursive>:
   1dcb4:	4770      	bx	lr
   1dcb6:	bf00      	nop

0001dcb8 <__retarget_lock_acquire_recursive>:
   1dcb8:	4770      	bx	lr
   1dcba:	bf00      	nop

0001dcbc <__retarget_lock_release_recursive>:
   1dcbc:	4770      	bx	lr
   1dcbe:	bf00      	nop

0001dcc0 <malloc>:
   1dcc0:	4b02      	ldr	r3, [pc, #8]	; (1dccc <malloc+0xc>)
   1dcc2:	4601      	mov	r1, r0
   1dcc4:	6818      	ldr	r0, [r3, #0]
   1dcc6:	f000 b80b 	b.w	1dce0 <_malloc_r>
   1dcca:	bf00      	nop
   1dccc:	200000f8 	.word	0x200000f8

0001dcd0 <free>:
   1dcd0:	4b02      	ldr	r3, [pc, #8]	; (1dcdc <free+0xc>)
   1dcd2:	4601      	mov	r1, r0
   1dcd4:	6818      	ldr	r0, [r3, #0]
   1dcd6:	f003 be2f 	b.w	21938 <_free_r>
   1dcda:	bf00      	nop
   1dcdc:	200000f8 	.word	0x200000f8

0001dce0 <_malloc_r>:
   1dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dce4:	f101 060b 	add.w	r6, r1, #11
   1dce8:	2e16      	cmp	r6, #22
   1dcea:	b083      	sub	sp, #12
   1dcec:	4605      	mov	r5, r0
   1dcee:	f240 809e 	bls.w	1de2e <_malloc_r+0x14e>
   1dcf2:	f036 0607 	bics.w	r6, r6, #7
   1dcf6:	f100 80bd 	bmi.w	1de74 <_malloc_r+0x194>
   1dcfa:	42b1      	cmp	r1, r6
   1dcfc:	f200 80ba 	bhi.w	1de74 <_malloc_r+0x194>
   1dd00:	f000 fc82 	bl	1e608 <__malloc_lock>
   1dd04:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1dd08:	f0c0 8293 	bcc.w	1e232 <_malloc_r+0x552>
   1dd0c:	0a73      	lsrs	r3, r6, #9
   1dd0e:	f000 80b8 	beq.w	1de82 <_malloc_r+0x1a2>
   1dd12:	2b04      	cmp	r3, #4
   1dd14:	f200 8179 	bhi.w	1e00a <_malloc_r+0x32a>
   1dd18:	09b3      	lsrs	r3, r6, #6
   1dd1a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1dd1e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1dd22:	00c3      	lsls	r3, r0, #3
   1dd24:	4fbf      	ldr	r7, [pc, #764]	; (1e024 <_malloc_r+0x344>)
   1dd26:	443b      	add	r3, r7
   1dd28:	f1a3 0108 	sub.w	r1, r3, #8
   1dd2c:	685c      	ldr	r4, [r3, #4]
   1dd2e:	42a1      	cmp	r1, r4
   1dd30:	d106      	bne.n	1dd40 <_malloc_r+0x60>
   1dd32:	e00c      	b.n	1dd4e <_malloc_r+0x6e>
   1dd34:	2a00      	cmp	r2, #0
   1dd36:	f280 80aa 	bge.w	1de8e <_malloc_r+0x1ae>
   1dd3a:	68e4      	ldr	r4, [r4, #12]
   1dd3c:	42a1      	cmp	r1, r4
   1dd3e:	d006      	beq.n	1dd4e <_malloc_r+0x6e>
   1dd40:	6863      	ldr	r3, [r4, #4]
   1dd42:	f023 0303 	bic.w	r3, r3, #3
   1dd46:	1b9a      	subs	r2, r3, r6
   1dd48:	2a0f      	cmp	r2, #15
   1dd4a:	ddf3      	ble.n	1dd34 <_malloc_r+0x54>
   1dd4c:	4670      	mov	r0, lr
   1dd4e:	693c      	ldr	r4, [r7, #16]
   1dd50:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1e038 <_malloc_r+0x358>
   1dd54:	4574      	cmp	r4, lr
   1dd56:	f000 81ab 	beq.w	1e0b0 <_malloc_r+0x3d0>
   1dd5a:	6863      	ldr	r3, [r4, #4]
   1dd5c:	f023 0303 	bic.w	r3, r3, #3
   1dd60:	1b9a      	subs	r2, r3, r6
   1dd62:	2a0f      	cmp	r2, #15
   1dd64:	f300 8190 	bgt.w	1e088 <_malloc_r+0x3a8>
   1dd68:	2a00      	cmp	r2, #0
   1dd6a:	f8c7 e014 	str.w	lr, [r7, #20]
   1dd6e:	f8c7 e010 	str.w	lr, [r7, #16]
   1dd72:	f280 809d 	bge.w	1deb0 <_malloc_r+0x1d0>
   1dd76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dd7a:	f080 8161 	bcs.w	1e040 <_malloc_r+0x360>
   1dd7e:	08db      	lsrs	r3, r3, #3
   1dd80:	f103 0c01 	add.w	ip, r3, #1
   1dd84:	1099      	asrs	r1, r3, #2
   1dd86:	687a      	ldr	r2, [r7, #4]
   1dd88:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1dd8c:	f8c4 8008 	str.w	r8, [r4, #8]
   1dd90:	2301      	movs	r3, #1
   1dd92:	408b      	lsls	r3, r1
   1dd94:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1dd98:	4313      	orrs	r3, r2
   1dd9a:	3908      	subs	r1, #8
   1dd9c:	60e1      	str	r1, [r4, #12]
   1dd9e:	607b      	str	r3, [r7, #4]
   1dda0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1dda4:	f8c8 400c 	str.w	r4, [r8, #12]
   1dda8:	1082      	asrs	r2, r0, #2
   1ddaa:	2401      	movs	r4, #1
   1ddac:	4094      	lsls	r4, r2
   1ddae:	429c      	cmp	r4, r3
   1ddb0:	f200 808b 	bhi.w	1deca <_malloc_r+0x1ea>
   1ddb4:	421c      	tst	r4, r3
   1ddb6:	d106      	bne.n	1ddc6 <_malloc_r+0xe6>
   1ddb8:	f020 0003 	bic.w	r0, r0, #3
   1ddbc:	0064      	lsls	r4, r4, #1
   1ddbe:	421c      	tst	r4, r3
   1ddc0:	f100 0004 	add.w	r0, r0, #4
   1ddc4:	d0fa      	beq.n	1ddbc <_malloc_r+0xdc>
   1ddc6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1ddca:	46cc      	mov	ip, r9
   1ddcc:	4680      	mov	r8, r0
   1ddce:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1ddd2:	459c      	cmp	ip, r3
   1ddd4:	d107      	bne.n	1dde6 <_malloc_r+0x106>
   1ddd6:	e16d      	b.n	1e0b4 <_malloc_r+0x3d4>
   1ddd8:	2a00      	cmp	r2, #0
   1ddda:	f280 817b 	bge.w	1e0d4 <_malloc_r+0x3f4>
   1ddde:	68db      	ldr	r3, [r3, #12]
   1dde0:	459c      	cmp	ip, r3
   1dde2:	f000 8167 	beq.w	1e0b4 <_malloc_r+0x3d4>
   1dde6:	6859      	ldr	r1, [r3, #4]
   1dde8:	f021 0103 	bic.w	r1, r1, #3
   1ddec:	1b8a      	subs	r2, r1, r6
   1ddee:	2a0f      	cmp	r2, #15
   1ddf0:	ddf2      	ble.n	1ddd8 <_malloc_r+0xf8>
   1ddf2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1ddf6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1ddfa:	9300      	str	r3, [sp, #0]
   1ddfc:	199c      	adds	r4, r3, r6
   1ddfe:	4628      	mov	r0, r5
   1de00:	f046 0601 	orr.w	r6, r6, #1
   1de04:	f042 0501 	orr.w	r5, r2, #1
   1de08:	605e      	str	r6, [r3, #4]
   1de0a:	f8c8 c00c 	str.w	ip, [r8, #12]
   1de0e:	f8cc 8008 	str.w	r8, [ip, #8]
   1de12:	617c      	str	r4, [r7, #20]
   1de14:	613c      	str	r4, [r7, #16]
   1de16:	f8c4 e00c 	str.w	lr, [r4, #12]
   1de1a:	f8c4 e008 	str.w	lr, [r4, #8]
   1de1e:	6065      	str	r5, [r4, #4]
   1de20:	505a      	str	r2, [r3, r1]
   1de22:	f000 fbf7 	bl	1e614 <__malloc_unlock>
   1de26:	9b00      	ldr	r3, [sp, #0]
   1de28:	f103 0408 	add.w	r4, r3, #8
   1de2c:	e01e      	b.n	1de6c <_malloc_r+0x18c>
   1de2e:	2910      	cmp	r1, #16
   1de30:	d820      	bhi.n	1de74 <_malloc_r+0x194>
   1de32:	f000 fbe9 	bl	1e608 <__malloc_lock>
   1de36:	2610      	movs	r6, #16
   1de38:	2318      	movs	r3, #24
   1de3a:	2002      	movs	r0, #2
   1de3c:	4f79      	ldr	r7, [pc, #484]	; (1e024 <_malloc_r+0x344>)
   1de3e:	443b      	add	r3, r7
   1de40:	f1a3 0208 	sub.w	r2, r3, #8
   1de44:	685c      	ldr	r4, [r3, #4]
   1de46:	4294      	cmp	r4, r2
   1de48:	f000 813d 	beq.w	1e0c6 <_malloc_r+0x3e6>
   1de4c:	6863      	ldr	r3, [r4, #4]
   1de4e:	68e1      	ldr	r1, [r4, #12]
   1de50:	68a6      	ldr	r6, [r4, #8]
   1de52:	f023 0303 	bic.w	r3, r3, #3
   1de56:	4423      	add	r3, r4
   1de58:	4628      	mov	r0, r5
   1de5a:	685a      	ldr	r2, [r3, #4]
   1de5c:	60f1      	str	r1, [r6, #12]
   1de5e:	f042 0201 	orr.w	r2, r2, #1
   1de62:	608e      	str	r6, [r1, #8]
   1de64:	605a      	str	r2, [r3, #4]
   1de66:	f000 fbd5 	bl	1e614 <__malloc_unlock>
   1de6a:	3408      	adds	r4, #8
   1de6c:	4620      	mov	r0, r4
   1de6e:	b003      	add	sp, #12
   1de70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de74:	2400      	movs	r4, #0
   1de76:	230c      	movs	r3, #12
   1de78:	4620      	mov	r0, r4
   1de7a:	602b      	str	r3, [r5, #0]
   1de7c:	b003      	add	sp, #12
   1de7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de82:	2040      	movs	r0, #64	; 0x40
   1de84:	f44f 7300 	mov.w	r3, #512	; 0x200
   1de88:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1de8c:	e74a      	b.n	1dd24 <_malloc_r+0x44>
   1de8e:	4423      	add	r3, r4
   1de90:	68e1      	ldr	r1, [r4, #12]
   1de92:	685a      	ldr	r2, [r3, #4]
   1de94:	68a6      	ldr	r6, [r4, #8]
   1de96:	f042 0201 	orr.w	r2, r2, #1
   1de9a:	60f1      	str	r1, [r6, #12]
   1de9c:	4628      	mov	r0, r5
   1de9e:	608e      	str	r6, [r1, #8]
   1dea0:	605a      	str	r2, [r3, #4]
   1dea2:	f000 fbb7 	bl	1e614 <__malloc_unlock>
   1dea6:	3408      	adds	r4, #8
   1dea8:	4620      	mov	r0, r4
   1deaa:	b003      	add	sp, #12
   1deac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1deb0:	4423      	add	r3, r4
   1deb2:	4628      	mov	r0, r5
   1deb4:	685a      	ldr	r2, [r3, #4]
   1deb6:	f042 0201 	orr.w	r2, r2, #1
   1deba:	605a      	str	r2, [r3, #4]
   1debc:	f000 fbaa 	bl	1e614 <__malloc_unlock>
   1dec0:	3408      	adds	r4, #8
   1dec2:	4620      	mov	r0, r4
   1dec4:	b003      	add	sp, #12
   1dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1deca:	68bc      	ldr	r4, [r7, #8]
   1decc:	6863      	ldr	r3, [r4, #4]
   1dece:	f023 0803 	bic.w	r8, r3, #3
   1ded2:	45b0      	cmp	r8, r6
   1ded4:	d304      	bcc.n	1dee0 <_malloc_r+0x200>
   1ded6:	eba8 0306 	sub.w	r3, r8, r6
   1deda:	2b0f      	cmp	r3, #15
   1dedc:	f300 8085 	bgt.w	1dfea <_malloc_r+0x30a>
   1dee0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1e03c <_malloc_r+0x35c>
   1dee4:	4b50      	ldr	r3, [pc, #320]	; (1e028 <_malloc_r+0x348>)
   1dee6:	f8d9 2000 	ldr.w	r2, [r9]
   1deea:	681b      	ldr	r3, [r3, #0]
   1deec:	3201      	adds	r2, #1
   1deee:	4433      	add	r3, r6
   1def0:	eb04 0a08 	add.w	sl, r4, r8
   1def4:	f000 8155 	beq.w	1e1a2 <_malloc_r+0x4c2>
   1def8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1defc:	330f      	adds	r3, #15
   1defe:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1df02:	f02b 0b0f 	bic.w	fp, fp, #15
   1df06:	4659      	mov	r1, fp
   1df08:	4628      	mov	r0, r5
   1df0a:	f000 fd6f 	bl	1e9ec <_sbrk_r>
   1df0e:	1c41      	adds	r1, r0, #1
   1df10:	4602      	mov	r2, r0
   1df12:	f000 80fc 	beq.w	1e10e <_malloc_r+0x42e>
   1df16:	4582      	cmp	sl, r0
   1df18:	f200 80f7 	bhi.w	1e10a <_malloc_r+0x42a>
   1df1c:	4b43      	ldr	r3, [pc, #268]	; (1e02c <_malloc_r+0x34c>)
   1df1e:	6819      	ldr	r1, [r3, #0]
   1df20:	4459      	add	r1, fp
   1df22:	6019      	str	r1, [r3, #0]
   1df24:	f000 814d 	beq.w	1e1c2 <_malloc_r+0x4e2>
   1df28:	f8d9 0000 	ldr.w	r0, [r9]
   1df2c:	3001      	adds	r0, #1
   1df2e:	bf1b      	ittet	ne
   1df30:	eba2 0a0a 	subne.w	sl, r2, sl
   1df34:	4451      	addne	r1, sl
   1df36:	f8c9 2000 	streq.w	r2, [r9]
   1df3a:	6019      	strne	r1, [r3, #0]
   1df3c:	f012 0107 	ands.w	r1, r2, #7
   1df40:	f000 8115 	beq.w	1e16e <_malloc_r+0x48e>
   1df44:	f1c1 0008 	rsb	r0, r1, #8
   1df48:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1df4c:	4402      	add	r2, r0
   1df4e:	3108      	adds	r1, #8
   1df50:	eb02 090b 	add.w	r9, r2, fp
   1df54:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1df58:	eba1 0909 	sub.w	r9, r1, r9
   1df5c:	4649      	mov	r1, r9
   1df5e:	4628      	mov	r0, r5
   1df60:	9301      	str	r3, [sp, #4]
   1df62:	9200      	str	r2, [sp, #0]
   1df64:	f000 fd42 	bl	1e9ec <_sbrk_r>
   1df68:	1c43      	adds	r3, r0, #1
   1df6a:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1df6e:	f000 8143 	beq.w	1e1f8 <_malloc_r+0x518>
   1df72:	1a80      	subs	r0, r0, r2
   1df74:	4448      	add	r0, r9
   1df76:	f040 0001 	orr.w	r0, r0, #1
   1df7a:	6819      	ldr	r1, [r3, #0]
   1df7c:	60ba      	str	r2, [r7, #8]
   1df7e:	4449      	add	r1, r9
   1df80:	42bc      	cmp	r4, r7
   1df82:	6050      	str	r0, [r2, #4]
   1df84:	6019      	str	r1, [r3, #0]
   1df86:	d017      	beq.n	1dfb8 <_malloc_r+0x2d8>
   1df88:	f1b8 0f0f 	cmp.w	r8, #15
   1df8c:	f240 80fb 	bls.w	1e186 <_malloc_r+0x4a6>
   1df90:	6860      	ldr	r0, [r4, #4]
   1df92:	f1a8 020c 	sub.w	r2, r8, #12
   1df96:	f022 0207 	bic.w	r2, r2, #7
   1df9a:	eb04 0e02 	add.w	lr, r4, r2
   1df9e:	f000 0001 	and.w	r0, r0, #1
   1dfa2:	f04f 0c05 	mov.w	ip, #5
   1dfa6:	4310      	orrs	r0, r2
   1dfa8:	2a0f      	cmp	r2, #15
   1dfaa:	6060      	str	r0, [r4, #4]
   1dfac:	f8ce c004 	str.w	ip, [lr, #4]
   1dfb0:	f8ce c008 	str.w	ip, [lr, #8]
   1dfb4:	f200 8117 	bhi.w	1e1e6 <_malloc_r+0x506>
   1dfb8:	4b1d      	ldr	r3, [pc, #116]	; (1e030 <_malloc_r+0x350>)
   1dfba:	68bc      	ldr	r4, [r7, #8]
   1dfbc:	681a      	ldr	r2, [r3, #0]
   1dfbe:	4291      	cmp	r1, r2
   1dfc0:	bf88      	it	hi
   1dfc2:	6019      	strhi	r1, [r3, #0]
   1dfc4:	4b1b      	ldr	r3, [pc, #108]	; (1e034 <_malloc_r+0x354>)
   1dfc6:	681a      	ldr	r2, [r3, #0]
   1dfc8:	4291      	cmp	r1, r2
   1dfca:	6862      	ldr	r2, [r4, #4]
   1dfcc:	bf88      	it	hi
   1dfce:	6019      	strhi	r1, [r3, #0]
   1dfd0:	f022 0203 	bic.w	r2, r2, #3
   1dfd4:	4296      	cmp	r6, r2
   1dfd6:	eba2 0306 	sub.w	r3, r2, r6
   1dfda:	d801      	bhi.n	1dfe0 <_malloc_r+0x300>
   1dfdc:	2b0f      	cmp	r3, #15
   1dfde:	dc04      	bgt.n	1dfea <_malloc_r+0x30a>
   1dfe0:	4628      	mov	r0, r5
   1dfe2:	f000 fb17 	bl	1e614 <__malloc_unlock>
   1dfe6:	2400      	movs	r4, #0
   1dfe8:	e740      	b.n	1de6c <_malloc_r+0x18c>
   1dfea:	19a2      	adds	r2, r4, r6
   1dfec:	f043 0301 	orr.w	r3, r3, #1
   1dff0:	f046 0601 	orr.w	r6, r6, #1
   1dff4:	6066      	str	r6, [r4, #4]
   1dff6:	4628      	mov	r0, r5
   1dff8:	60ba      	str	r2, [r7, #8]
   1dffa:	6053      	str	r3, [r2, #4]
   1dffc:	f000 fb0a 	bl	1e614 <__malloc_unlock>
   1e000:	3408      	adds	r4, #8
   1e002:	4620      	mov	r0, r4
   1e004:	b003      	add	sp, #12
   1e006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e00a:	2b14      	cmp	r3, #20
   1e00c:	d971      	bls.n	1e0f2 <_malloc_r+0x412>
   1e00e:	2b54      	cmp	r3, #84	; 0x54
   1e010:	f200 80a3 	bhi.w	1e15a <_malloc_r+0x47a>
   1e014:	0b33      	lsrs	r3, r6, #12
   1e016:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1e01a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1e01e:	00c3      	lsls	r3, r0, #3
   1e020:	e680      	b.n	1dd24 <_malloc_r+0x44>
   1e022:	bf00      	nop
   1e024:	20000694 	.word	0x20000694
   1e028:	200022c4 	.word	0x200022c4
   1e02c:	20002294 	.word	0x20002294
   1e030:	200022bc 	.word	0x200022bc
   1e034:	200022c0 	.word	0x200022c0
   1e038:	2000069c 	.word	0x2000069c
   1e03c:	20000a9c 	.word	0x20000a9c
   1e040:	0a5a      	lsrs	r2, r3, #9
   1e042:	2a04      	cmp	r2, #4
   1e044:	d95b      	bls.n	1e0fe <_malloc_r+0x41e>
   1e046:	2a14      	cmp	r2, #20
   1e048:	f200 80ae 	bhi.w	1e1a8 <_malloc_r+0x4c8>
   1e04c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1e050:	00c9      	lsls	r1, r1, #3
   1e052:	325b      	adds	r2, #91	; 0x5b
   1e054:	eb07 0c01 	add.w	ip, r7, r1
   1e058:	5879      	ldr	r1, [r7, r1]
   1e05a:	f1ac 0c08 	sub.w	ip, ip, #8
   1e05e:	458c      	cmp	ip, r1
   1e060:	f000 8088 	beq.w	1e174 <_malloc_r+0x494>
   1e064:	684a      	ldr	r2, [r1, #4]
   1e066:	f022 0203 	bic.w	r2, r2, #3
   1e06a:	4293      	cmp	r3, r2
   1e06c:	d273      	bcs.n	1e156 <_malloc_r+0x476>
   1e06e:	6889      	ldr	r1, [r1, #8]
   1e070:	458c      	cmp	ip, r1
   1e072:	d1f7      	bne.n	1e064 <_malloc_r+0x384>
   1e074:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1e078:	687b      	ldr	r3, [r7, #4]
   1e07a:	60e2      	str	r2, [r4, #12]
   1e07c:	f8c4 c008 	str.w	ip, [r4, #8]
   1e080:	6094      	str	r4, [r2, #8]
   1e082:	f8cc 400c 	str.w	r4, [ip, #12]
   1e086:	e68f      	b.n	1dda8 <_malloc_r+0xc8>
   1e088:	19a1      	adds	r1, r4, r6
   1e08a:	f046 0c01 	orr.w	ip, r6, #1
   1e08e:	f042 0601 	orr.w	r6, r2, #1
   1e092:	f8c4 c004 	str.w	ip, [r4, #4]
   1e096:	4628      	mov	r0, r5
   1e098:	6179      	str	r1, [r7, #20]
   1e09a:	6139      	str	r1, [r7, #16]
   1e09c:	f8c1 e00c 	str.w	lr, [r1, #12]
   1e0a0:	f8c1 e008 	str.w	lr, [r1, #8]
   1e0a4:	604e      	str	r6, [r1, #4]
   1e0a6:	50e2      	str	r2, [r4, r3]
   1e0a8:	f000 fab4 	bl	1e614 <__malloc_unlock>
   1e0ac:	3408      	adds	r4, #8
   1e0ae:	e6dd      	b.n	1de6c <_malloc_r+0x18c>
   1e0b0:	687b      	ldr	r3, [r7, #4]
   1e0b2:	e679      	b.n	1dda8 <_malloc_r+0xc8>
   1e0b4:	f108 0801 	add.w	r8, r8, #1
   1e0b8:	f018 0f03 	tst.w	r8, #3
   1e0bc:	f10c 0c08 	add.w	ip, ip, #8
   1e0c0:	f47f ae85 	bne.w	1ddce <_malloc_r+0xee>
   1e0c4:	e02d      	b.n	1e122 <_malloc_r+0x442>
   1e0c6:	68dc      	ldr	r4, [r3, #12]
   1e0c8:	42a3      	cmp	r3, r4
   1e0ca:	bf08      	it	eq
   1e0cc:	3002      	addeq	r0, #2
   1e0ce:	f43f ae3e 	beq.w	1dd4e <_malloc_r+0x6e>
   1e0d2:	e6bb      	b.n	1de4c <_malloc_r+0x16c>
   1e0d4:	4419      	add	r1, r3
   1e0d6:	461c      	mov	r4, r3
   1e0d8:	684a      	ldr	r2, [r1, #4]
   1e0da:	68db      	ldr	r3, [r3, #12]
   1e0dc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1e0e0:	f042 0201 	orr.w	r2, r2, #1
   1e0e4:	604a      	str	r2, [r1, #4]
   1e0e6:	4628      	mov	r0, r5
   1e0e8:	60f3      	str	r3, [r6, #12]
   1e0ea:	609e      	str	r6, [r3, #8]
   1e0ec:	f000 fa92 	bl	1e614 <__malloc_unlock>
   1e0f0:	e6bc      	b.n	1de6c <_malloc_r+0x18c>
   1e0f2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1e0f6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1e0fa:	00c3      	lsls	r3, r0, #3
   1e0fc:	e612      	b.n	1dd24 <_malloc_r+0x44>
   1e0fe:	099a      	lsrs	r2, r3, #6
   1e100:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1e104:	00c9      	lsls	r1, r1, #3
   1e106:	3238      	adds	r2, #56	; 0x38
   1e108:	e7a4      	b.n	1e054 <_malloc_r+0x374>
   1e10a:	42bc      	cmp	r4, r7
   1e10c:	d054      	beq.n	1e1b8 <_malloc_r+0x4d8>
   1e10e:	68bc      	ldr	r4, [r7, #8]
   1e110:	6862      	ldr	r2, [r4, #4]
   1e112:	f022 0203 	bic.w	r2, r2, #3
   1e116:	e75d      	b.n	1dfd4 <_malloc_r+0x2f4>
   1e118:	f859 3908 	ldr.w	r3, [r9], #-8
   1e11c:	4599      	cmp	r9, r3
   1e11e:	f040 8086 	bne.w	1e22e <_malloc_r+0x54e>
   1e122:	f010 0f03 	tst.w	r0, #3
   1e126:	f100 30ff 	add.w	r0, r0, #4294967295
   1e12a:	d1f5      	bne.n	1e118 <_malloc_r+0x438>
   1e12c:	687b      	ldr	r3, [r7, #4]
   1e12e:	ea23 0304 	bic.w	r3, r3, r4
   1e132:	607b      	str	r3, [r7, #4]
   1e134:	0064      	lsls	r4, r4, #1
   1e136:	429c      	cmp	r4, r3
   1e138:	f63f aec7 	bhi.w	1deca <_malloc_r+0x1ea>
   1e13c:	2c00      	cmp	r4, #0
   1e13e:	f43f aec4 	beq.w	1deca <_malloc_r+0x1ea>
   1e142:	421c      	tst	r4, r3
   1e144:	4640      	mov	r0, r8
   1e146:	f47f ae3e 	bne.w	1ddc6 <_malloc_r+0xe6>
   1e14a:	0064      	lsls	r4, r4, #1
   1e14c:	421c      	tst	r4, r3
   1e14e:	f100 0004 	add.w	r0, r0, #4
   1e152:	d0fa      	beq.n	1e14a <_malloc_r+0x46a>
   1e154:	e637      	b.n	1ddc6 <_malloc_r+0xe6>
   1e156:	468c      	mov	ip, r1
   1e158:	e78c      	b.n	1e074 <_malloc_r+0x394>
   1e15a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e15e:	d815      	bhi.n	1e18c <_malloc_r+0x4ac>
   1e160:	0bf3      	lsrs	r3, r6, #15
   1e162:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e166:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e16a:	00c3      	lsls	r3, r0, #3
   1e16c:	e5da      	b.n	1dd24 <_malloc_r+0x44>
   1e16e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e172:	e6ed      	b.n	1df50 <_malloc_r+0x270>
   1e174:	687b      	ldr	r3, [r7, #4]
   1e176:	1092      	asrs	r2, r2, #2
   1e178:	2101      	movs	r1, #1
   1e17a:	fa01 f202 	lsl.w	r2, r1, r2
   1e17e:	4313      	orrs	r3, r2
   1e180:	607b      	str	r3, [r7, #4]
   1e182:	4662      	mov	r2, ip
   1e184:	e779      	b.n	1e07a <_malloc_r+0x39a>
   1e186:	2301      	movs	r3, #1
   1e188:	6053      	str	r3, [r2, #4]
   1e18a:	e729      	b.n	1dfe0 <_malloc_r+0x300>
   1e18c:	f240 5254 	movw	r2, #1364	; 0x554
   1e190:	4293      	cmp	r3, r2
   1e192:	d822      	bhi.n	1e1da <_malloc_r+0x4fa>
   1e194:	0cb3      	lsrs	r3, r6, #18
   1e196:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e19a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e19e:	00c3      	lsls	r3, r0, #3
   1e1a0:	e5c0      	b.n	1dd24 <_malloc_r+0x44>
   1e1a2:	f103 0b10 	add.w	fp, r3, #16
   1e1a6:	e6ae      	b.n	1df06 <_malloc_r+0x226>
   1e1a8:	2a54      	cmp	r2, #84	; 0x54
   1e1aa:	d829      	bhi.n	1e200 <_malloc_r+0x520>
   1e1ac:	0b1a      	lsrs	r2, r3, #12
   1e1ae:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e1b2:	00c9      	lsls	r1, r1, #3
   1e1b4:	326e      	adds	r2, #110	; 0x6e
   1e1b6:	e74d      	b.n	1e054 <_malloc_r+0x374>
   1e1b8:	4b20      	ldr	r3, [pc, #128]	; (1e23c <_malloc_r+0x55c>)
   1e1ba:	6819      	ldr	r1, [r3, #0]
   1e1bc:	4459      	add	r1, fp
   1e1be:	6019      	str	r1, [r3, #0]
   1e1c0:	e6b2      	b.n	1df28 <_malloc_r+0x248>
   1e1c2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e1c6:	2800      	cmp	r0, #0
   1e1c8:	f47f aeae 	bne.w	1df28 <_malloc_r+0x248>
   1e1cc:	eb08 030b 	add.w	r3, r8, fp
   1e1d0:	68ba      	ldr	r2, [r7, #8]
   1e1d2:	f043 0301 	orr.w	r3, r3, #1
   1e1d6:	6053      	str	r3, [r2, #4]
   1e1d8:	e6ee      	b.n	1dfb8 <_malloc_r+0x2d8>
   1e1da:	207f      	movs	r0, #127	; 0x7f
   1e1dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e1e0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e1e4:	e59e      	b.n	1dd24 <_malloc_r+0x44>
   1e1e6:	f104 0108 	add.w	r1, r4, #8
   1e1ea:	4628      	mov	r0, r5
   1e1ec:	9300      	str	r3, [sp, #0]
   1e1ee:	f003 fba3 	bl	21938 <_free_r>
   1e1f2:	9b00      	ldr	r3, [sp, #0]
   1e1f4:	6819      	ldr	r1, [r3, #0]
   1e1f6:	e6df      	b.n	1dfb8 <_malloc_r+0x2d8>
   1e1f8:	2001      	movs	r0, #1
   1e1fa:	f04f 0900 	mov.w	r9, #0
   1e1fe:	e6bc      	b.n	1df7a <_malloc_r+0x29a>
   1e200:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e204:	d805      	bhi.n	1e212 <_malloc_r+0x532>
   1e206:	0bda      	lsrs	r2, r3, #15
   1e208:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e20c:	00c9      	lsls	r1, r1, #3
   1e20e:	3277      	adds	r2, #119	; 0x77
   1e210:	e720      	b.n	1e054 <_malloc_r+0x374>
   1e212:	f240 5154 	movw	r1, #1364	; 0x554
   1e216:	428a      	cmp	r2, r1
   1e218:	d805      	bhi.n	1e226 <_malloc_r+0x546>
   1e21a:	0c9a      	lsrs	r2, r3, #18
   1e21c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e220:	00c9      	lsls	r1, r1, #3
   1e222:	327c      	adds	r2, #124	; 0x7c
   1e224:	e716      	b.n	1e054 <_malloc_r+0x374>
   1e226:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e22a:	227e      	movs	r2, #126	; 0x7e
   1e22c:	e712      	b.n	1e054 <_malloc_r+0x374>
   1e22e:	687b      	ldr	r3, [r7, #4]
   1e230:	e780      	b.n	1e134 <_malloc_r+0x454>
   1e232:	08f0      	lsrs	r0, r6, #3
   1e234:	f106 0308 	add.w	r3, r6, #8
   1e238:	e600      	b.n	1de3c <_malloc_r+0x15c>
   1e23a:	bf00      	nop
   1e23c:	20002294 	.word	0x20002294

0001e240 <__ascii_mbtowc>:
   1e240:	b082      	sub	sp, #8
   1e242:	b149      	cbz	r1, 1e258 <__ascii_mbtowc+0x18>
   1e244:	b15a      	cbz	r2, 1e25e <__ascii_mbtowc+0x1e>
   1e246:	b16b      	cbz	r3, 1e264 <__ascii_mbtowc+0x24>
   1e248:	7813      	ldrb	r3, [r2, #0]
   1e24a:	600b      	str	r3, [r1, #0]
   1e24c:	7812      	ldrb	r2, [r2, #0]
   1e24e:	1c10      	adds	r0, r2, #0
   1e250:	bf18      	it	ne
   1e252:	2001      	movne	r0, #1
   1e254:	b002      	add	sp, #8
   1e256:	4770      	bx	lr
   1e258:	a901      	add	r1, sp, #4
   1e25a:	2a00      	cmp	r2, #0
   1e25c:	d1f3      	bne.n	1e246 <__ascii_mbtowc+0x6>
   1e25e:	4610      	mov	r0, r2
   1e260:	b002      	add	sp, #8
   1e262:	4770      	bx	lr
   1e264:	f06f 0001 	mvn.w	r0, #1
   1e268:	e7f4      	b.n	1e254 <__ascii_mbtowc+0x14>
   1e26a:	bf00      	nop
   1e26c:	0000      	movs	r0, r0
	...

0001e270 <memchr>:
   1e270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e274:	2a10      	cmp	r2, #16
   1e276:	db2b      	blt.n	1e2d0 <memchr+0x60>
   1e278:	f010 0f07 	tst.w	r0, #7
   1e27c:	d008      	beq.n	1e290 <memchr+0x20>
   1e27e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e282:	3a01      	subs	r2, #1
   1e284:	428b      	cmp	r3, r1
   1e286:	d02d      	beq.n	1e2e4 <memchr+0x74>
   1e288:	f010 0f07 	tst.w	r0, #7
   1e28c:	b342      	cbz	r2, 1e2e0 <memchr+0x70>
   1e28e:	d1f6      	bne.n	1e27e <memchr+0xe>
   1e290:	b4f0      	push	{r4, r5, r6, r7}
   1e292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e29a:	f022 0407 	bic.w	r4, r2, #7
   1e29e:	f07f 0700 	mvns.w	r7, #0
   1e2a2:	2300      	movs	r3, #0
   1e2a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e2a8:	3c08      	subs	r4, #8
   1e2aa:	ea85 0501 	eor.w	r5, r5, r1
   1e2ae:	ea86 0601 	eor.w	r6, r6, r1
   1e2b2:	fa85 f547 	uadd8	r5, r5, r7
   1e2b6:	faa3 f587 	sel	r5, r3, r7
   1e2ba:	fa86 f647 	uadd8	r6, r6, r7
   1e2be:	faa5 f687 	sel	r6, r5, r7
   1e2c2:	b98e      	cbnz	r6, 1e2e8 <memchr+0x78>
   1e2c4:	d1ee      	bne.n	1e2a4 <memchr+0x34>
   1e2c6:	bcf0      	pop	{r4, r5, r6, r7}
   1e2c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e2cc:	f002 0207 	and.w	r2, r2, #7
   1e2d0:	b132      	cbz	r2, 1e2e0 <memchr+0x70>
   1e2d2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e2d6:	3a01      	subs	r2, #1
   1e2d8:	ea83 0301 	eor.w	r3, r3, r1
   1e2dc:	b113      	cbz	r3, 1e2e4 <memchr+0x74>
   1e2de:	d1f8      	bne.n	1e2d2 <memchr+0x62>
   1e2e0:	2000      	movs	r0, #0
   1e2e2:	4770      	bx	lr
   1e2e4:	3801      	subs	r0, #1
   1e2e6:	4770      	bx	lr
   1e2e8:	2d00      	cmp	r5, #0
   1e2ea:	bf06      	itte	eq
   1e2ec:	4635      	moveq	r5, r6
   1e2ee:	3803      	subeq	r0, #3
   1e2f0:	3807      	subne	r0, #7
   1e2f2:	f015 0f01 	tst.w	r5, #1
   1e2f6:	d107      	bne.n	1e308 <memchr+0x98>
   1e2f8:	3001      	adds	r0, #1
   1e2fa:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e2fe:	bf02      	ittt	eq
   1e300:	3001      	addeq	r0, #1
   1e302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e306:	3001      	addeq	r0, #1
   1e308:	bcf0      	pop	{r4, r5, r6, r7}
   1e30a:	3801      	subs	r0, #1
   1e30c:	4770      	bx	lr
   1e30e:	bf00      	nop

0001e310 <memcmp>:
   1e310:	2a03      	cmp	r2, #3
   1e312:	b470      	push	{r4, r5, r6}
   1e314:	d922      	bls.n	1e35c <memcmp+0x4c>
   1e316:	ea40 0301 	orr.w	r3, r0, r1
   1e31a:	079b      	lsls	r3, r3, #30
   1e31c:	d011      	beq.n	1e342 <memcmp+0x32>
   1e31e:	7803      	ldrb	r3, [r0, #0]
   1e320:	780c      	ldrb	r4, [r1, #0]
   1e322:	42a3      	cmp	r3, r4
   1e324:	d11d      	bne.n	1e362 <memcmp+0x52>
   1e326:	440a      	add	r2, r1
   1e328:	3101      	adds	r1, #1
   1e32a:	e005      	b.n	1e338 <memcmp+0x28>
   1e32c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e330:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e334:	42a3      	cmp	r3, r4
   1e336:	d114      	bne.n	1e362 <memcmp+0x52>
   1e338:	4291      	cmp	r1, r2
   1e33a:	d1f7      	bne.n	1e32c <memcmp+0x1c>
   1e33c:	2000      	movs	r0, #0
   1e33e:	bc70      	pop	{r4, r5, r6}
   1e340:	4770      	bx	lr
   1e342:	680d      	ldr	r5, [r1, #0]
   1e344:	6806      	ldr	r6, [r0, #0]
   1e346:	42ae      	cmp	r6, r5
   1e348:	460c      	mov	r4, r1
   1e34a:	4603      	mov	r3, r0
   1e34c:	f101 0104 	add.w	r1, r1, #4
   1e350:	f100 0004 	add.w	r0, r0, #4
   1e354:	d108      	bne.n	1e368 <memcmp+0x58>
   1e356:	3a04      	subs	r2, #4
   1e358:	2a03      	cmp	r2, #3
   1e35a:	d8f2      	bhi.n	1e342 <memcmp+0x32>
   1e35c:	2a00      	cmp	r2, #0
   1e35e:	d1de      	bne.n	1e31e <memcmp+0xe>
   1e360:	e7ec      	b.n	1e33c <memcmp+0x2c>
   1e362:	1b18      	subs	r0, r3, r4
   1e364:	bc70      	pop	{r4, r5, r6}
   1e366:	4770      	bx	lr
   1e368:	4621      	mov	r1, r4
   1e36a:	4618      	mov	r0, r3
   1e36c:	e7d7      	b.n	1e31e <memcmp+0xe>
   1e36e:	bf00      	nop

0001e370 <memcpy>:
   1e370:	4684      	mov	ip, r0
   1e372:	ea41 0300 	orr.w	r3, r1, r0
   1e376:	f013 0303 	ands.w	r3, r3, #3
   1e37a:	d16d      	bne.n	1e458 <memcpy+0xe8>
   1e37c:	3a40      	subs	r2, #64	; 0x40
   1e37e:	d341      	bcc.n	1e404 <memcpy+0x94>
   1e380:	f851 3b04 	ldr.w	r3, [r1], #4
   1e384:	f840 3b04 	str.w	r3, [r0], #4
   1e388:	f851 3b04 	ldr.w	r3, [r1], #4
   1e38c:	f840 3b04 	str.w	r3, [r0], #4
   1e390:	f851 3b04 	ldr.w	r3, [r1], #4
   1e394:	f840 3b04 	str.w	r3, [r0], #4
   1e398:	f851 3b04 	ldr.w	r3, [r1], #4
   1e39c:	f840 3b04 	str.w	r3, [r0], #4
   1e3a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3a4:	f840 3b04 	str.w	r3, [r0], #4
   1e3a8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3ac:	f840 3b04 	str.w	r3, [r0], #4
   1e3b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3b4:	f840 3b04 	str.w	r3, [r0], #4
   1e3b8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3bc:	f840 3b04 	str.w	r3, [r0], #4
   1e3c0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3c4:	f840 3b04 	str.w	r3, [r0], #4
   1e3c8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3cc:	f840 3b04 	str.w	r3, [r0], #4
   1e3d0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3d4:	f840 3b04 	str.w	r3, [r0], #4
   1e3d8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3dc:	f840 3b04 	str.w	r3, [r0], #4
   1e3e0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3e4:	f840 3b04 	str.w	r3, [r0], #4
   1e3e8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3ec:	f840 3b04 	str.w	r3, [r0], #4
   1e3f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3f4:	f840 3b04 	str.w	r3, [r0], #4
   1e3f8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3fc:	f840 3b04 	str.w	r3, [r0], #4
   1e400:	3a40      	subs	r2, #64	; 0x40
   1e402:	d2bd      	bcs.n	1e380 <memcpy+0x10>
   1e404:	3230      	adds	r2, #48	; 0x30
   1e406:	d311      	bcc.n	1e42c <memcpy+0xbc>
   1e408:	f851 3b04 	ldr.w	r3, [r1], #4
   1e40c:	f840 3b04 	str.w	r3, [r0], #4
   1e410:	f851 3b04 	ldr.w	r3, [r1], #4
   1e414:	f840 3b04 	str.w	r3, [r0], #4
   1e418:	f851 3b04 	ldr.w	r3, [r1], #4
   1e41c:	f840 3b04 	str.w	r3, [r0], #4
   1e420:	f851 3b04 	ldr.w	r3, [r1], #4
   1e424:	f840 3b04 	str.w	r3, [r0], #4
   1e428:	3a10      	subs	r2, #16
   1e42a:	d2ed      	bcs.n	1e408 <memcpy+0x98>
   1e42c:	320c      	adds	r2, #12
   1e42e:	d305      	bcc.n	1e43c <memcpy+0xcc>
   1e430:	f851 3b04 	ldr.w	r3, [r1], #4
   1e434:	f840 3b04 	str.w	r3, [r0], #4
   1e438:	3a04      	subs	r2, #4
   1e43a:	d2f9      	bcs.n	1e430 <memcpy+0xc0>
   1e43c:	3204      	adds	r2, #4
   1e43e:	d008      	beq.n	1e452 <memcpy+0xe2>
   1e440:	07d2      	lsls	r2, r2, #31
   1e442:	bf1c      	itt	ne
   1e444:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e448:	f800 3b01 	strbne.w	r3, [r0], #1
   1e44c:	d301      	bcc.n	1e452 <memcpy+0xe2>
   1e44e:	880b      	ldrh	r3, [r1, #0]
   1e450:	8003      	strh	r3, [r0, #0]
   1e452:	4660      	mov	r0, ip
   1e454:	4770      	bx	lr
   1e456:	bf00      	nop
   1e458:	2a08      	cmp	r2, #8
   1e45a:	d313      	bcc.n	1e484 <memcpy+0x114>
   1e45c:	078b      	lsls	r3, r1, #30
   1e45e:	d08d      	beq.n	1e37c <memcpy+0xc>
   1e460:	f010 0303 	ands.w	r3, r0, #3
   1e464:	d08a      	beq.n	1e37c <memcpy+0xc>
   1e466:	f1c3 0304 	rsb	r3, r3, #4
   1e46a:	1ad2      	subs	r2, r2, r3
   1e46c:	07db      	lsls	r3, r3, #31
   1e46e:	bf1c      	itt	ne
   1e470:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e474:	f800 3b01 	strbne.w	r3, [r0], #1
   1e478:	d380      	bcc.n	1e37c <memcpy+0xc>
   1e47a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e47e:	f820 3b02 	strh.w	r3, [r0], #2
   1e482:	e77b      	b.n	1e37c <memcpy+0xc>
   1e484:	3a04      	subs	r2, #4
   1e486:	d3d9      	bcc.n	1e43c <memcpy+0xcc>
   1e488:	3a01      	subs	r2, #1
   1e48a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e48e:	f800 3b01 	strb.w	r3, [r0], #1
   1e492:	d2f9      	bcs.n	1e488 <memcpy+0x118>
   1e494:	780b      	ldrb	r3, [r1, #0]
   1e496:	7003      	strb	r3, [r0, #0]
   1e498:	784b      	ldrb	r3, [r1, #1]
   1e49a:	7043      	strb	r3, [r0, #1]
   1e49c:	788b      	ldrb	r3, [r1, #2]
   1e49e:	7083      	strb	r3, [r0, #2]
   1e4a0:	4660      	mov	r0, ip
   1e4a2:	4770      	bx	lr

0001e4a4 <memmove>:
   1e4a4:	4288      	cmp	r0, r1
   1e4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4a8:	d90d      	bls.n	1e4c6 <memmove+0x22>
   1e4aa:	188b      	adds	r3, r1, r2
   1e4ac:	4298      	cmp	r0, r3
   1e4ae:	d20a      	bcs.n	1e4c6 <memmove+0x22>
   1e4b0:	1884      	adds	r4, r0, r2
   1e4b2:	2a00      	cmp	r2, #0
   1e4b4:	d051      	beq.n	1e55a <memmove+0xb6>
   1e4b6:	4622      	mov	r2, r4
   1e4b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e4bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e4c0:	4299      	cmp	r1, r3
   1e4c2:	d1f9      	bne.n	1e4b8 <memmove+0x14>
   1e4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4c6:	2a0f      	cmp	r2, #15
   1e4c8:	d948      	bls.n	1e55c <memmove+0xb8>
   1e4ca:	ea41 0300 	orr.w	r3, r1, r0
   1e4ce:	079b      	lsls	r3, r3, #30
   1e4d0:	d146      	bne.n	1e560 <memmove+0xbc>
   1e4d2:	f100 0410 	add.w	r4, r0, #16
   1e4d6:	f101 0310 	add.w	r3, r1, #16
   1e4da:	4615      	mov	r5, r2
   1e4dc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e4e0:	f844 6c10 	str.w	r6, [r4, #-16]
   1e4e4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e4e8:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e4ec:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e4f0:	f844 6c08 	str.w	r6, [r4, #-8]
   1e4f4:	3d10      	subs	r5, #16
   1e4f6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e4fa:	f844 6c04 	str.w	r6, [r4, #-4]
   1e4fe:	2d0f      	cmp	r5, #15
   1e500:	f103 0310 	add.w	r3, r3, #16
   1e504:	f104 0410 	add.w	r4, r4, #16
   1e508:	d8e8      	bhi.n	1e4dc <memmove+0x38>
   1e50a:	f1a2 0310 	sub.w	r3, r2, #16
   1e50e:	f023 030f 	bic.w	r3, r3, #15
   1e512:	f002 0e0f 	and.w	lr, r2, #15
   1e516:	3310      	adds	r3, #16
   1e518:	f1be 0f03 	cmp.w	lr, #3
   1e51c:	4419      	add	r1, r3
   1e51e:	4403      	add	r3, r0
   1e520:	d921      	bls.n	1e566 <memmove+0xc2>
   1e522:	1f1e      	subs	r6, r3, #4
   1e524:	460d      	mov	r5, r1
   1e526:	4674      	mov	r4, lr
   1e528:	3c04      	subs	r4, #4
   1e52a:	f855 7b04 	ldr.w	r7, [r5], #4
   1e52e:	f846 7f04 	str.w	r7, [r6, #4]!
   1e532:	2c03      	cmp	r4, #3
   1e534:	d8f8      	bhi.n	1e528 <memmove+0x84>
   1e536:	f1ae 0404 	sub.w	r4, lr, #4
   1e53a:	f024 0403 	bic.w	r4, r4, #3
   1e53e:	3404      	adds	r4, #4
   1e540:	4421      	add	r1, r4
   1e542:	4423      	add	r3, r4
   1e544:	f002 0203 	and.w	r2, r2, #3
   1e548:	b162      	cbz	r2, 1e564 <memmove+0xc0>
   1e54a:	3b01      	subs	r3, #1
   1e54c:	440a      	add	r2, r1
   1e54e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e552:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e556:	428a      	cmp	r2, r1
   1e558:	d1f9      	bne.n	1e54e <memmove+0xaa>
   1e55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e55c:	4603      	mov	r3, r0
   1e55e:	e7f3      	b.n	1e548 <memmove+0xa4>
   1e560:	4603      	mov	r3, r0
   1e562:	e7f2      	b.n	1e54a <memmove+0xa6>
   1e564:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e566:	4672      	mov	r2, lr
   1e568:	e7ee      	b.n	1e548 <memmove+0xa4>
   1e56a:	bf00      	nop

0001e56c <memset>:
   1e56c:	b470      	push	{r4, r5, r6}
   1e56e:	0786      	lsls	r6, r0, #30
   1e570:	d046      	beq.n	1e600 <memset+0x94>
   1e572:	1e54      	subs	r4, r2, #1
   1e574:	2a00      	cmp	r2, #0
   1e576:	d041      	beq.n	1e5fc <memset+0x90>
   1e578:	b2ca      	uxtb	r2, r1
   1e57a:	4603      	mov	r3, r0
   1e57c:	e002      	b.n	1e584 <memset+0x18>
   1e57e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e582:	d33b      	bcc.n	1e5fc <memset+0x90>
   1e584:	f803 2b01 	strb.w	r2, [r3], #1
   1e588:	079d      	lsls	r5, r3, #30
   1e58a:	d1f8      	bne.n	1e57e <memset+0x12>
   1e58c:	2c03      	cmp	r4, #3
   1e58e:	d92e      	bls.n	1e5ee <memset+0x82>
   1e590:	b2cd      	uxtb	r5, r1
   1e592:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e596:	2c0f      	cmp	r4, #15
   1e598:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e59c:	d919      	bls.n	1e5d2 <memset+0x66>
   1e59e:	f103 0210 	add.w	r2, r3, #16
   1e5a2:	4626      	mov	r6, r4
   1e5a4:	3e10      	subs	r6, #16
   1e5a6:	2e0f      	cmp	r6, #15
   1e5a8:	f842 5c10 	str.w	r5, [r2, #-16]
   1e5ac:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e5b0:	f842 5c08 	str.w	r5, [r2, #-8]
   1e5b4:	f842 5c04 	str.w	r5, [r2, #-4]
   1e5b8:	f102 0210 	add.w	r2, r2, #16
   1e5bc:	d8f2      	bhi.n	1e5a4 <memset+0x38>
   1e5be:	f1a4 0210 	sub.w	r2, r4, #16
   1e5c2:	f022 020f 	bic.w	r2, r2, #15
   1e5c6:	f004 040f 	and.w	r4, r4, #15
   1e5ca:	3210      	adds	r2, #16
   1e5cc:	2c03      	cmp	r4, #3
   1e5ce:	4413      	add	r3, r2
   1e5d0:	d90d      	bls.n	1e5ee <memset+0x82>
   1e5d2:	461e      	mov	r6, r3
   1e5d4:	4622      	mov	r2, r4
   1e5d6:	3a04      	subs	r2, #4
   1e5d8:	2a03      	cmp	r2, #3
   1e5da:	f846 5b04 	str.w	r5, [r6], #4
   1e5de:	d8fa      	bhi.n	1e5d6 <memset+0x6a>
   1e5e0:	1f22      	subs	r2, r4, #4
   1e5e2:	f022 0203 	bic.w	r2, r2, #3
   1e5e6:	3204      	adds	r2, #4
   1e5e8:	4413      	add	r3, r2
   1e5ea:	f004 0403 	and.w	r4, r4, #3
   1e5ee:	b12c      	cbz	r4, 1e5fc <memset+0x90>
   1e5f0:	b2c9      	uxtb	r1, r1
   1e5f2:	441c      	add	r4, r3
   1e5f4:	f803 1b01 	strb.w	r1, [r3], #1
   1e5f8:	429c      	cmp	r4, r3
   1e5fa:	d1fb      	bne.n	1e5f4 <memset+0x88>
   1e5fc:	bc70      	pop	{r4, r5, r6}
   1e5fe:	4770      	bx	lr
   1e600:	4614      	mov	r4, r2
   1e602:	4603      	mov	r3, r0
   1e604:	e7c2      	b.n	1e58c <memset+0x20>
   1e606:	bf00      	nop

0001e608 <__malloc_lock>:
   1e608:	4801      	ldr	r0, [pc, #4]	; (1e610 <__malloc_lock+0x8>)
   1e60a:	f7ff bb55 	b.w	1dcb8 <__retarget_lock_acquire_recursive>
   1e60e:	bf00      	nop
   1e610:	2000237c 	.word	0x2000237c

0001e614 <__malloc_unlock>:
   1e614:	4801      	ldr	r0, [pc, #4]	; (1e61c <__malloc_unlock+0x8>)
   1e616:	f7ff bb51 	b.w	1dcbc <__retarget_lock_release_recursive>
   1e61a:	bf00      	nop
   1e61c:	2000237c 	.word	0x2000237c

0001e620 <_putc_r>:
   1e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e622:	460e      	mov	r6, r1
   1e624:	4614      	mov	r4, r2
   1e626:	4607      	mov	r7, r0
   1e628:	b108      	cbz	r0, 1e62e <_putc_r+0xe>
   1e62a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e62c:	b34b      	cbz	r3, 1e682 <_putc_r+0x62>
   1e62e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e630:	07d8      	lsls	r0, r3, #31
   1e632:	d402      	bmi.n	1e63a <_putc_r+0x1a>
   1e634:	89a3      	ldrh	r3, [r4, #12]
   1e636:	0599      	lsls	r1, r3, #22
   1e638:	d526      	bpl.n	1e688 <_putc_r+0x68>
   1e63a:	68a3      	ldr	r3, [r4, #8]
   1e63c:	3b01      	subs	r3, #1
   1e63e:	2b00      	cmp	r3, #0
   1e640:	60a3      	str	r3, [r4, #8]
   1e642:	db11      	blt.n	1e668 <_putc_r+0x48>
   1e644:	b2f5      	uxtb	r5, r6
   1e646:	6823      	ldr	r3, [r4, #0]
   1e648:	1c5a      	adds	r2, r3, #1
   1e64a:	6022      	str	r2, [r4, #0]
   1e64c:	701e      	strb	r6, [r3, #0]
   1e64e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e650:	07da      	lsls	r2, r3, #31
   1e652:	d402      	bmi.n	1e65a <_putc_r+0x3a>
   1e654:	89a3      	ldrh	r3, [r4, #12]
   1e656:	059b      	lsls	r3, r3, #22
   1e658:	d501      	bpl.n	1e65e <_putc_r+0x3e>
   1e65a:	4628      	mov	r0, r5
   1e65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e65e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e660:	f7ff fb2c 	bl	1dcbc <__retarget_lock_release_recursive>
   1e664:	4628      	mov	r0, r5
   1e666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e668:	69a2      	ldr	r2, [r4, #24]
   1e66a:	4293      	cmp	r3, r2
   1e66c:	db02      	blt.n	1e674 <_putc_r+0x54>
   1e66e:	b2f5      	uxtb	r5, r6
   1e670:	2d0a      	cmp	r5, #10
   1e672:	d1e8      	bne.n	1e646 <_putc_r+0x26>
   1e674:	4631      	mov	r1, r6
   1e676:	4638      	mov	r0, r7
   1e678:	4622      	mov	r2, r4
   1e67a:	f001 ff19 	bl	204b0 <__swbuf_r>
   1e67e:	4605      	mov	r5, r0
   1e680:	e7e5      	b.n	1e64e <_putc_r+0x2e>
   1e682:	f003 f8b7 	bl	217f4 <__sinit>
   1e686:	e7d2      	b.n	1e62e <_putc_r+0xe>
   1e688:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e68a:	f7ff fb15 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   1e68e:	e7d4      	b.n	1e63a <_putc_r+0x1a>

0001e690 <realloc>:
   1e690:	4b02      	ldr	r3, [pc, #8]	; (1e69c <realloc+0xc>)
   1e692:	460a      	mov	r2, r1
   1e694:	4601      	mov	r1, r0
   1e696:	6818      	ldr	r0, [r3, #0]
   1e698:	f000 b802 	b.w	1e6a0 <_realloc_r>
   1e69c:	200000f8 	.word	0x200000f8

0001e6a0 <_realloc_r>:
   1e6a0:	2900      	cmp	r1, #0
   1e6a2:	f000 8095 	beq.w	1e7d0 <_realloc_r+0x130>
   1e6a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6aa:	460d      	mov	r5, r1
   1e6ac:	4616      	mov	r6, r2
   1e6ae:	b083      	sub	sp, #12
   1e6b0:	4680      	mov	r8, r0
   1e6b2:	f106 070b 	add.w	r7, r6, #11
   1e6b6:	f7ff ffa7 	bl	1e608 <__malloc_lock>
   1e6ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e6be:	2f16      	cmp	r7, #22
   1e6c0:	f02e 0403 	bic.w	r4, lr, #3
   1e6c4:	f1a5 0908 	sub.w	r9, r5, #8
   1e6c8:	d83c      	bhi.n	1e744 <_realloc_r+0xa4>
   1e6ca:	2210      	movs	r2, #16
   1e6cc:	4617      	mov	r7, r2
   1e6ce:	42be      	cmp	r6, r7
   1e6d0:	d83d      	bhi.n	1e74e <_realloc_r+0xae>
   1e6d2:	4294      	cmp	r4, r2
   1e6d4:	da43      	bge.n	1e75e <_realloc_r+0xbe>
   1e6d6:	4bc4      	ldr	r3, [pc, #784]	; (1e9e8 <_realloc_r+0x348>)
   1e6d8:	6899      	ldr	r1, [r3, #8]
   1e6da:	eb09 0004 	add.w	r0, r9, r4
   1e6de:	4288      	cmp	r0, r1
   1e6e0:	f000 80b4 	beq.w	1e84c <_realloc_r+0x1ac>
   1e6e4:	6843      	ldr	r3, [r0, #4]
   1e6e6:	f023 0101 	bic.w	r1, r3, #1
   1e6ea:	4401      	add	r1, r0
   1e6ec:	6849      	ldr	r1, [r1, #4]
   1e6ee:	07c9      	lsls	r1, r1, #31
   1e6f0:	d54c      	bpl.n	1e78c <_realloc_r+0xec>
   1e6f2:	f01e 0f01 	tst.w	lr, #1
   1e6f6:	f000 809b 	beq.w	1e830 <_realloc_r+0x190>
   1e6fa:	4631      	mov	r1, r6
   1e6fc:	4640      	mov	r0, r8
   1e6fe:	f7ff faef 	bl	1dce0 <_malloc_r>
   1e702:	4606      	mov	r6, r0
   1e704:	2800      	cmp	r0, #0
   1e706:	d03a      	beq.n	1e77e <_realloc_r+0xde>
   1e708:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e70c:	f023 0301 	bic.w	r3, r3, #1
   1e710:	444b      	add	r3, r9
   1e712:	f1a0 0208 	sub.w	r2, r0, #8
   1e716:	429a      	cmp	r2, r3
   1e718:	f000 8121 	beq.w	1e95e <_realloc_r+0x2be>
   1e71c:	1f22      	subs	r2, r4, #4
   1e71e:	2a24      	cmp	r2, #36	; 0x24
   1e720:	f200 8107 	bhi.w	1e932 <_realloc_r+0x292>
   1e724:	2a13      	cmp	r2, #19
   1e726:	f200 80db 	bhi.w	1e8e0 <_realloc_r+0x240>
   1e72a:	4603      	mov	r3, r0
   1e72c:	462a      	mov	r2, r5
   1e72e:	6811      	ldr	r1, [r2, #0]
   1e730:	6019      	str	r1, [r3, #0]
   1e732:	6851      	ldr	r1, [r2, #4]
   1e734:	6059      	str	r1, [r3, #4]
   1e736:	6892      	ldr	r2, [r2, #8]
   1e738:	609a      	str	r2, [r3, #8]
   1e73a:	4629      	mov	r1, r5
   1e73c:	4640      	mov	r0, r8
   1e73e:	f003 f8fb 	bl	21938 <_free_r>
   1e742:	e01c      	b.n	1e77e <_realloc_r+0xde>
   1e744:	f027 0707 	bic.w	r7, r7, #7
   1e748:	2f00      	cmp	r7, #0
   1e74a:	463a      	mov	r2, r7
   1e74c:	dabf      	bge.n	1e6ce <_realloc_r+0x2e>
   1e74e:	2600      	movs	r6, #0
   1e750:	230c      	movs	r3, #12
   1e752:	4630      	mov	r0, r6
   1e754:	f8c8 3000 	str.w	r3, [r8]
   1e758:	b003      	add	sp, #12
   1e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e75e:	462e      	mov	r6, r5
   1e760:	1be3      	subs	r3, r4, r7
   1e762:	2b0f      	cmp	r3, #15
   1e764:	d81e      	bhi.n	1e7a4 <_realloc_r+0x104>
   1e766:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e76a:	f003 0301 	and.w	r3, r3, #1
   1e76e:	4323      	orrs	r3, r4
   1e770:	444c      	add	r4, r9
   1e772:	f8c9 3004 	str.w	r3, [r9, #4]
   1e776:	6863      	ldr	r3, [r4, #4]
   1e778:	f043 0301 	orr.w	r3, r3, #1
   1e77c:	6063      	str	r3, [r4, #4]
   1e77e:	4640      	mov	r0, r8
   1e780:	f7ff ff48 	bl	1e614 <__malloc_unlock>
   1e784:	4630      	mov	r0, r6
   1e786:	b003      	add	sp, #12
   1e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e78c:	f023 0303 	bic.w	r3, r3, #3
   1e790:	18e1      	adds	r1, r4, r3
   1e792:	4291      	cmp	r1, r2
   1e794:	db1f      	blt.n	1e7d6 <_realloc_r+0x136>
   1e796:	68c3      	ldr	r3, [r0, #12]
   1e798:	6882      	ldr	r2, [r0, #8]
   1e79a:	462e      	mov	r6, r5
   1e79c:	60d3      	str	r3, [r2, #12]
   1e79e:	460c      	mov	r4, r1
   1e7a0:	609a      	str	r2, [r3, #8]
   1e7a2:	e7dd      	b.n	1e760 <_realloc_r+0xc0>
   1e7a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e7a8:	eb09 0107 	add.w	r1, r9, r7
   1e7ac:	f002 0201 	and.w	r2, r2, #1
   1e7b0:	444c      	add	r4, r9
   1e7b2:	f043 0301 	orr.w	r3, r3, #1
   1e7b6:	4317      	orrs	r7, r2
   1e7b8:	f8c9 7004 	str.w	r7, [r9, #4]
   1e7bc:	604b      	str	r3, [r1, #4]
   1e7be:	6863      	ldr	r3, [r4, #4]
   1e7c0:	f043 0301 	orr.w	r3, r3, #1
   1e7c4:	3108      	adds	r1, #8
   1e7c6:	6063      	str	r3, [r4, #4]
   1e7c8:	4640      	mov	r0, r8
   1e7ca:	f003 f8b5 	bl	21938 <_free_r>
   1e7ce:	e7d6      	b.n	1e77e <_realloc_r+0xde>
   1e7d0:	4611      	mov	r1, r2
   1e7d2:	f7ff ba85 	b.w	1dce0 <_malloc_r>
   1e7d6:	f01e 0f01 	tst.w	lr, #1
   1e7da:	d18e      	bne.n	1e6fa <_realloc_r+0x5a>
   1e7dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e7e0:	eba9 0a01 	sub.w	sl, r9, r1
   1e7e4:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e7e8:	f021 0103 	bic.w	r1, r1, #3
   1e7ec:	440b      	add	r3, r1
   1e7ee:	4423      	add	r3, r4
   1e7f0:	4293      	cmp	r3, r2
   1e7f2:	db25      	blt.n	1e840 <_realloc_r+0x1a0>
   1e7f4:	68c2      	ldr	r2, [r0, #12]
   1e7f6:	6881      	ldr	r1, [r0, #8]
   1e7f8:	4656      	mov	r6, sl
   1e7fa:	60ca      	str	r2, [r1, #12]
   1e7fc:	6091      	str	r1, [r2, #8]
   1e7fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e802:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e806:	1f22      	subs	r2, r4, #4
   1e808:	2a24      	cmp	r2, #36	; 0x24
   1e80a:	60c1      	str	r1, [r0, #12]
   1e80c:	6088      	str	r0, [r1, #8]
   1e80e:	f200 8094 	bhi.w	1e93a <_realloc_r+0x29a>
   1e812:	2a13      	cmp	r2, #19
   1e814:	d96f      	bls.n	1e8f6 <_realloc_r+0x256>
   1e816:	6829      	ldr	r1, [r5, #0]
   1e818:	f8ca 1008 	str.w	r1, [sl, #8]
   1e81c:	6869      	ldr	r1, [r5, #4]
   1e81e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e822:	2a1b      	cmp	r2, #27
   1e824:	f200 80a2 	bhi.w	1e96c <_realloc_r+0x2cc>
   1e828:	3508      	adds	r5, #8
   1e82a:	f10a 0210 	add.w	r2, sl, #16
   1e82e:	e063      	b.n	1e8f8 <_realloc_r+0x258>
   1e830:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e834:	eba9 0a03 	sub.w	sl, r9, r3
   1e838:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e83c:	f021 0103 	bic.w	r1, r1, #3
   1e840:	1863      	adds	r3, r4, r1
   1e842:	4293      	cmp	r3, r2
   1e844:	f6ff af59 	blt.w	1e6fa <_realloc_r+0x5a>
   1e848:	4656      	mov	r6, sl
   1e84a:	e7d8      	b.n	1e7fe <_realloc_r+0x15e>
   1e84c:	6841      	ldr	r1, [r0, #4]
   1e84e:	f021 0b03 	bic.w	fp, r1, #3
   1e852:	44a3      	add	fp, r4
   1e854:	f107 0010 	add.w	r0, r7, #16
   1e858:	4583      	cmp	fp, r0
   1e85a:	da56      	bge.n	1e90a <_realloc_r+0x26a>
   1e85c:	f01e 0f01 	tst.w	lr, #1
   1e860:	f47f af4b 	bne.w	1e6fa <_realloc_r+0x5a>
   1e864:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e868:	eba9 0a01 	sub.w	sl, r9, r1
   1e86c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e870:	f021 0103 	bic.w	r1, r1, #3
   1e874:	448b      	add	fp, r1
   1e876:	4558      	cmp	r0, fp
   1e878:	dce2      	bgt.n	1e840 <_realloc_r+0x1a0>
   1e87a:	4656      	mov	r6, sl
   1e87c:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e880:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e884:	1f22      	subs	r2, r4, #4
   1e886:	2a24      	cmp	r2, #36	; 0x24
   1e888:	60c1      	str	r1, [r0, #12]
   1e88a:	6088      	str	r0, [r1, #8]
   1e88c:	f200 808f 	bhi.w	1e9ae <_realloc_r+0x30e>
   1e890:	2a13      	cmp	r2, #19
   1e892:	f240 808a 	bls.w	1e9aa <_realloc_r+0x30a>
   1e896:	6829      	ldr	r1, [r5, #0]
   1e898:	f8ca 1008 	str.w	r1, [sl, #8]
   1e89c:	6869      	ldr	r1, [r5, #4]
   1e89e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e8a2:	2a1b      	cmp	r2, #27
   1e8a4:	f200 808a 	bhi.w	1e9bc <_realloc_r+0x31c>
   1e8a8:	3508      	adds	r5, #8
   1e8aa:	f10a 0210 	add.w	r2, sl, #16
   1e8ae:	6829      	ldr	r1, [r5, #0]
   1e8b0:	6011      	str	r1, [r2, #0]
   1e8b2:	6869      	ldr	r1, [r5, #4]
   1e8b4:	6051      	str	r1, [r2, #4]
   1e8b6:	68a9      	ldr	r1, [r5, #8]
   1e8b8:	6091      	str	r1, [r2, #8]
   1e8ba:	eb0a 0107 	add.w	r1, sl, r7
   1e8be:	ebab 0207 	sub.w	r2, fp, r7
   1e8c2:	f042 0201 	orr.w	r2, r2, #1
   1e8c6:	6099      	str	r1, [r3, #8]
   1e8c8:	604a      	str	r2, [r1, #4]
   1e8ca:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e8ce:	f003 0301 	and.w	r3, r3, #1
   1e8d2:	431f      	orrs	r7, r3
   1e8d4:	4640      	mov	r0, r8
   1e8d6:	f8ca 7004 	str.w	r7, [sl, #4]
   1e8da:	f7ff fe9b 	bl	1e614 <__malloc_unlock>
   1e8de:	e751      	b.n	1e784 <_realloc_r+0xe4>
   1e8e0:	682b      	ldr	r3, [r5, #0]
   1e8e2:	6003      	str	r3, [r0, #0]
   1e8e4:	686b      	ldr	r3, [r5, #4]
   1e8e6:	6043      	str	r3, [r0, #4]
   1e8e8:	2a1b      	cmp	r2, #27
   1e8ea:	d82d      	bhi.n	1e948 <_realloc_r+0x2a8>
   1e8ec:	f100 0308 	add.w	r3, r0, #8
   1e8f0:	f105 0208 	add.w	r2, r5, #8
   1e8f4:	e71b      	b.n	1e72e <_realloc_r+0x8e>
   1e8f6:	4632      	mov	r2, r6
   1e8f8:	6829      	ldr	r1, [r5, #0]
   1e8fa:	6011      	str	r1, [r2, #0]
   1e8fc:	6869      	ldr	r1, [r5, #4]
   1e8fe:	6051      	str	r1, [r2, #4]
   1e900:	68a9      	ldr	r1, [r5, #8]
   1e902:	6091      	str	r1, [r2, #8]
   1e904:	461c      	mov	r4, r3
   1e906:	46d1      	mov	r9, sl
   1e908:	e72a      	b.n	1e760 <_realloc_r+0xc0>
   1e90a:	eb09 0107 	add.w	r1, r9, r7
   1e90e:	ebab 0b07 	sub.w	fp, fp, r7
   1e912:	f04b 0201 	orr.w	r2, fp, #1
   1e916:	6099      	str	r1, [r3, #8]
   1e918:	604a      	str	r2, [r1, #4]
   1e91a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e91e:	f003 0301 	and.w	r3, r3, #1
   1e922:	431f      	orrs	r7, r3
   1e924:	4640      	mov	r0, r8
   1e926:	f845 7c04 	str.w	r7, [r5, #-4]
   1e92a:	f7ff fe73 	bl	1e614 <__malloc_unlock>
   1e92e:	462e      	mov	r6, r5
   1e930:	e728      	b.n	1e784 <_realloc_r+0xe4>
   1e932:	4629      	mov	r1, r5
   1e934:	f7ff fdb6 	bl	1e4a4 <memmove>
   1e938:	e6ff      	b.n	1e73a <_realloc_r+0x9a>
   1e93a:	4629      	mov	r1, r5
   1e93c:	4630      	mov	r0, r6
   1e93e:	461c      	mov	r4, r3
   1e940:	46d1      	mov	r9, sl
   1e942:	f7ff fdaf 	bl	1e4a4 <memmove>
   1e946:	e70b      	b.n	1e760 <_realloc_r+0xc0>
   1e948:	68ab      	ldr	r3, [r5, #8]
   1e94a:	6083      	str	r3, [r0, #8]
   1e94c:	68eb      	ldr	r3, [r5, #12]
   1e94e:	60c3      	str	r3, [r0, #12]
   1e950:	2a24      	cmp	r2, #36	; 0x24
   1e952:	d017      	beq.n	1e984 <_realloc_r+0x2e4>
   1e954:	f100 0310 	add.w	r3, r0, #16
   1e958:	f105 0210 	add.w	r2, r5, #16
   1e95c:	e6e7      	b.n	1e72e <_realloc_r+0x8e>
   1e95e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e962:	f023 0303 	bic.w	r3, r3, #3
   1e966:	441c      	add	r4, r3
   1e968:	462e      	mov	r6, r5
   1e96a:	e6f9      	b.n	1e760 <_realloc_r+0xc0>
   1e96c:	68a9      	ldr	r1, [r5, #8]
   1e96e:	f8ca 1010 	str.w	r1, [sl, #16]
   1e972:	68e9      	ldr	r1, [r5, #12]
   1e974:	f8ca 1014 	str.w	r1, [sl, #20]
   1e978:	2a24      	cmp	r2, #36	; 0x24
   1e97a:	d00c      	beq.n	1e996 <_realloc_r+0x2f6>
   1e97c:	3510      	adds	r5, #16
   1e97e:	f10a 0218 	add.w	r2, sl, #24
   1e982:	e7b9      	b.n	1e8f8 <_realloc_r+0x258>
   1e984:	692b      	ldr	r3, [r5, #16]
   1e986:	6103      	str	r3, [r0, #16]
   1e988:	696b      	ldr	r3, [r5, #20]
   1e98a:	6143      	str	r3, [r0, #20]
   1e98c:	f105 0218 	add.w	r2, r5, #24
   1e990:	f100 0318 	add.w	r3, r0, #24
   1e994:	e6cb      	b.n	1e72e <_realloc_r+0x8e>
   1e996:	692a      	ldr	r2, [r5, #16]
   1e998:	f8ca 2018 	str.w	r2, [sl, #24]
   1e99c:	696a      	ldr	r2, [r5, #20]
   1e99e:	f8ca 201c 	str.w	r2, [sl, #28]
   1e9a2:	3518      	adds	r5, #24
   1e9a4:	f10a 0220 	add.w	r2, sl, #32
   1e9a8:	e7a6      	b.n	1e8f8 <_realloc_r+0x258>
   1e9aa:	4632      	mov	r2, r6
   1e9ac:	e77f      	b.n	1e8ae <_realloc_r+0x20e>
   1e9ae:	4629      	mov	r1, r5
   1e9b0:	4630      	mov	r0, r6
   1e9b2:	9301      	str	r3, [sp, #4]
   1e9b4:	f7ff fd76 	bl	1e4a4 <memmove>
   1e9b8:	9b01      	ldr	r3, [sp, #4]
   1e9ba:	e77e      	b.n	1e8ba <_realloc_r+0x21a>
   1e9bc:	68a9      	ldr	r1, [r5, #8]
   1e9be:	f8ca 1010 	str.w	r1, [sl, #16]
   1e9c2:	68e9      	ldr	r1, [r5, #12]
   1e9c4:	f8ca 1014 	str.w	r1, [sl, #20]
   1e9c8:	2a24      	cmp	r2, #36	; 0x24
   1e9ca:	d003      	beq.n	1e9d4 <_realloc_r+0x334>
   1e9cc:	3510      	adds	r5, #16
   1e9ce:	f10a 0218 	add.w	r2, sl, #24
   1e9d2:	e76c      	b.n	1e8ae <_realloc_r+0x20e>
   1e9d4:	692a      	ldr	r2, [r5, #16]
   1e9d6:	f8ca 2018 	str.w	r2, [sl, #24]
   1e9da:	696a      	ldr	r2, [r5, #20]
   1e9dc:	f8ca 201c 	str.w	r2, [sl, #28]
   1e9e0:	3518      	adds	r5, #24
   1e9e2:	f10a 0220 	add.w	r2, sl, #32
   1e9e6:	e762      	b.n	1e8ae <_realloc_r+0x20e>
   1e9e8:	20000694 	.word	0x20000694

0001e9ec <_sbrk_r>:
   1e9ec:	b538      	push	{r3, r4, r5, lr}
   1e9ee:	4c07      	ldr	r4, [pc, #28]	; (1ea0c <_sbrk_r+0x20>)
   1e9f0:	2300      	movs	r3, #0
   1e9f2:	4605      	mov	r5, r0
   1e9f4:	4608      	mov	r0, r1
   1e9f6:	6023      	str	r3, [r4, #0]
   1e9f8:	f003 ff6c 	bl	228d4 <_sbrk>
   1e9fc:	1c43      	adds	r3, r0, #1
   1e9fe:	d000      	beq.n	1ea02 <_sbrk_r+0x16>
   1ea00:	bd38      	pop	{r3, r4, r5, pc}
   1ea02:	6823      	ldr	r3, [r4, #0]
   1ea04:	2b00      	cmp	r3, #0
   1ea06:	d0fb      	beq.n	1ea00 <_sbrk_r+0x14>
   1ea08:	602b      	str	r3, [r5, #0]
   1ea0a:	bd38      	pop	{r3, r4, r5, pc}
   1ea0c:	20002390 	.word	0x20002390

0001ea10 <_raise_r>:
   1ea10:	291f      	cmp	r1, #31
   1ea12:	d828      	bhi.n	1ea66 <_raise_r+0x56>
   1ea14:	b520      	push	{r5, lr}
   1ea16:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1ea1a:	b082      	sub	sp, #8
   1ea1c:	4605      	mov	r5, r0
   1ea1e:	b1aa      	cbz	r2, 1ea4c <_raise_r+0x3c>
   1ea20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1ea24:	b193      	cbz	r3, 1ea4c <_raise_r+0x3c>
   1ea26:	2b01      	cmp	r3, #1
   1ea28:	d00e      	beq.n	1ea48 <_raise_r+0x38>
   1ea2a:	1c58      	adds	r0, r3, #1
   1ea2c:	d007      	beq.n	1ea3e <_raise_r+0x2e>
   1ea2e:	2500      	movs	r5, #0
   1ea30:	4608      	mov	r0, r1
   1ea32:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1ea36:	4798      	blx	r3
   1ea38:	4628      	mov	r0, r5
   1ea3a:	b002      	add	sp, #8
   1ea3c:	bd20      	pop	{r5, pc}
   1ea3e:	2316      	movs	r3, #22
   1ea40:	2001      	movs	r0, #1
   1ea42:	602b      	str	r3, [r5, #0]
   1ea44:	b002      	add	sp, #8
   1ea46:	bd20      	pop	{r5, pc}
   1ea48:	2000      	movs	r0, #0
   1ea4a:	e7f6      	b.n	1ea3a <_raise_r+0x2a>
   1ea4c:	4628      	mov	r0, r5
   1ea4e:	9101      	str	r1, [sp, #4]
   1ea50:	f000 f82a 	bl	1eaa8 <_getpid_r>
   1ea54:	9901      	ldr	r1, [sp, #4]
   1ea56:	460a      	mov	r2, r1
   1ea58:	4601      	mov	r1, r0
   1ea5a:	4628      	mov	r0, r5
   1ea5c:	b002      	add	sp, #8
   1ea5e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1ea62:	f000 b80d 	b.w	1ea80 <_kill_r>
   1ea66:	2316      	movs	r3, #22
   1ea68:	6003      	str	r3, [r0, #0]
   1ea6a:	f04f 30ff 	mov.w	r0, #4294967295
   1ea6e:	4770      	bx	lr

0001ea70 <raise>:
   1ea70:	4b02      	ldr	r3, [pc, #8]	; (1ea7c <raise+0xc>)
   1ea72:	4601      	mov	r1, r0
   1ea74:	6818      	ldr	r0, [r3, #0]
   1ea76:	f7ff bfcb 	b.w	1ea10 <_raise_r>
   1ea7a:	bf00      	nop
   1ea7c:	200000f8 	.word	0x200000f8

0001ea80 <_kill_r>:
   1ea80:	b538      	push	{r3, r4, r5, lr}
   1ea82:	460b      	mov	r3, r1
   1ea84:	4c07      	ldr	r4, [pc, #28]	; (1eaa4 <_kill_r+0x24>)
   1ea86:	4605      	mov	r5, r0
   1ea88:	4611      	mov	r1, r2
   1ea8a:	4618      	mov	r0, r3
   1ea8c:	2300      	movs	r3, #0
   1ea8e:	6023      	str	r3, [r4, #0]
   1ea90:	f003 ff9a 	bl	229c8 <_kill>
   1ea94:	1c43      	adds	r3, r0, #1
   1ea96:	d000      	beq.n	1ea9a <_kill_r+0x1a>
   1ea98:	bd38      	pop	{r3, r4, r5, pc}
   1ea9a:	6823      	ldr	r3, [r4, #0]
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d0fb      	beq.n	1ea98 <_kill_r+0x18>
   1eaa0:	602b      	str	r3, [r5, #0]
   1eaa2:	bd38      	pop	{r3, r4, r5, pc}
   1eaa4:	20002390 	.word	0x20002390

0001eaa8 <_getpid_r>:
   1eaa8:	f003 bf12 	b.w	228d0 <_getpid>

0001eaac <sprintf>:
   1eaac:	b40e      	push	{r1, r2, r3}
   1eaae:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eab0:	b09c      	sub	sp, #112	; 0x70
   1eab2:	ab21      	add	r3, sp, #132	; 0x84
   1eab4:	490f      	ldr	r1, [pc, #60]	; (1eaf4 <sprintf+0x48>)
   1eab6:	f853 2b04 	ldr.w	r2, [r3], #4
   1eaba:	9301      	str	r3, [sp, #4]
   1eabc:	4605      	mov	r5, r0
   1eabe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1eac2:	6808      	ldr	r0, [r1, #0]
   1eac4:	9502      	str	r5, [sp, #8]
   1eac6:	f44f 7702 	mov.w	r7, #520	; 0x208
   1eaca:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1eace:	a902      	add	r1, sp, #8
   1ead0:	9506      	str	r5, [sp, #24]
   1ead2:	f8ad 7014 	strh.w	r7, [sp, #20]
   1ead6:	9404      	str	r4, [sp, #16]
   1ead8:	9407      	str	r4, [sp, #28]
   1eada:	f8ad 6016 	strh.w	r6, [sp, #22]
   1eade:	f000 fa4f 	bl	1ef80 <_svfprintf_r>
   1eae2:	9b02      	ldr	r3, [sp, #8]
   1eae4:	2200      	movs	r2, #0
   1eae6:	701a      	strb	r2, [r3, #0]
   1eae8:	b01c      	add	sp, #112	; 0x70
   1eaea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1eaee:	b003      	add	sp, #12
   1eaf0:	4770      	bx	lr
   1eaf2:	bf00      	nop
   1eaf4:	200000f8 	.word	0x200000f8
	...
   1eb00:	eba2 0003 	sub.w	r0, r2, r3
   1eb04:	4770      	bx	lr
   1eb06:	bf00      	nop

0001eb08 <strcmp>:
   1eb08:	7802      	ldrb	r2, [r0, #0]
   1eb0a:	780b      	ldrb	r3, [r1, #0]
   1eb0c:	2a01      	cmp	r2, #1
   1eb0e:	bf28      	it	cs
   1eb10:	429a      	cmpcs	r2, r3
   1eb12:	d1f5      	bne.n	1eb00 <sprintf+0x54>
   1eb14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1eb18:	ea40 0401 	orr.w	r4, r0, r1
   1eb1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1eb20:	f06f 0c00 	mvn.w	ip, #0
   1eb24:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1eb28:	b312      	cbz	r2, 1eb70 <strcmp+0x68>
   1eb2a:	ea80 0401 	eor.w	r4, r0, r1
   1eb2e:	f014 0f07 	tst.w	r4, #7
   1eb32:	d16a      	bne.n	1ec0a <strcmp+0x102>
   1eb34:	f000 0407 	and.w	r4, r0, #7
   1eb38:	f020 0007 	bic.w	r0, r0, #7
   1eb3c:	f004 0503 	and.w	r5, r4, #3
   1eb40:	f021 0107 	bic.w	r1, r1, #7
   1eb44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1eb48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1eb4c:	f014 0f04 	tst.w	r4, #4
   1eb50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1eb54:	fa0c f405 	lsl.w	r4, ip, r5
   1eb58:	ea62 0204 	orn	r2, r2, r4
   1eb5c:	ea66 0604 	orn	r6, r6, r4
   1eb60:	d00a      	beq.n	1eb78 <strcmp+0x70>
   1eb62:	ea63 0304 	orn	r3, r3, r4
   1eb66:	4662      	mov	r2, ip
   1eb68:	ea67 0704 	orn	r7, r7, r4
   1eb6c:	4666      	mov	r6, ip
   1eb6e:	e003      	b.n	1eb78 <strcmp+0x70>
   1eb70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1eb74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1eb78:	fa82 f54c 	uadd8	r5, r2, ip
   1eb7c:	ea82 0406 	eor.w	r4, r2, r6
   1eb80:	faa4 f48c 	sel	r4, r4, ip
   1eb84:	bb6c      	cbnz	r4, 1ebe2 <strcmp+0xda>
   1eb86:	fa83 f54c 	uadd8	r5, r3, ip
   1eb8a:	ea83 0507 	eor.w	r5, r3, r7
   1eb8e:	faa5 f58c 	sel	r5, r5, ip
   1eb92:	b995      	cbnz	r5, 1ebba <strcmp+0xb2>
   1eb94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1eb98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1eb9c:	fa82 f54c 	uadd8	r5, r2, ip
   1eba0:	ea82 0406 	eor.w	r4, r2, r6
   1eba4:	faa4 f48c 	sel	r4, r4, ip
   1eba8:	fa83 f54c 	uadd8	r5, r3, ip
   1ebac:	ea83 0507 	eor.w	r5, r3, r7
   1ebb0:	faa5 f58c 	sel	r5, r5, ip
   1ebb4:	4325      	orrs	r5, r4
   1ebb6:	d0db      	beq.n	1eb70 <strcmp+0x68>
   1ebb8:	b99c      	cbnz	r4, 1ebe2 <strcmp+0xda>
   1ebba:	ba2d      	rev	r5, r5
   1ebbc:	fab5 f485 	clz	r4, r5
   1ebc0:	f024 0407 	bic.w	r4, r4, #7
   1ebc4:	fa27 f104 	lsr.w	r1, r7, r4
   1ebc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ebcc:	fa23 f304 	lsr.w	r3, r3, r4
   1ebd0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ebd4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ebd8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ebdc:	eba0 0001 	sub.w	r0, r0, r1
   1ebe0:	4770      	bx	lr
   1ebe2:	ba24      	rev	r4, r4
   1ebe4:	fab4 f484 	clz	r4, r4
   1ebe8:	f024 0407 	bic.w	r4, r4, #7
   1ebec:	fa26 f104 	lsr.w	r1, r6, r4
   1ebf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ebf4:	fa22 f204 	lsr.w	r2, r2, r4
   1ebf8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ebfc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ec00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec04:	eba0 0001 	sub.w	r0, r0, r1
   1ec08:	4770      	bx	lr
   1ec0a:	f014 0f03 	tst.w	r4, #3
   1ec0e:	d13c      	bne.n	1ec8a <strcmp+0x182>
   1ec10:	f010 0403 	ands.w	r4, r0, #3
   1ec14:	d128      	bne.n	1ec68 <strcmp+0x160>
   1ec16:	f850 2b08 	ldr.w	r2, [r0], #8
   1ec1a:	f851 3b08 	ldr.w	r3, [r1], #8
   1ec1e:	fa82 f54c 	uadd8	r5, r2, ip
   1ec22:	ea82 0503 	eor.w	r5, r2, r3
   1ec26:	faa5 f58c 	sel	r5, r5, ip
   1ec2a:	b95d      	cbnz	r5, 1ec44 <strcmp+0x13c>
   1ec2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1ec30:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ec34:	fa82 f54c 	uadd8	r5, r2, ip
   1ec38:	ea82 0503 	eor.w	r5, r2, r3
   1ec3c:	faa5 f58c 	sel	r5, r5, ip
   1ec40:	2d00      	cmp	r5, #0
   1ec42:	d0e8      	beq.n	1ec16 <strcmp+0x10e>
   1ec44:	ba2d      	rev	r5, r5
   1ec46:	fab5 f485 	clz	r4, r5
   1ec4a:	f024 0407 	bic.w	r4, r4, #7
   1ec4e:	fa23 f104 	lsr.w	r1, r3, r4
   1ec52:	fa22 f204 	lsr.w	r2, r2, r4
   1ec56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ec5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ec5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec62:	eba0 0001 	sub.w	r0, r0, r1
   1ec66:	4770      	bx	lr
   1ec68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1ec6c:	f020 0003 	bic.w	r0, r0, #3
   1ec70:	f850 2b08 	ldr.w	r2, [r0], #8
   1ec74:	f021 0103 	bic.w	r1, r1, #3
   1ec78:	f851 3b08 	ldr.w	r3, [r1], #8
   1ec7c:	fa0c f404 	lsl.w	r4, ip, r4
   1ec80:	ea62 0204 	orn	r2, r2, r4
   1ec84:	ea63 0304 	orn	r3, r3, r4
   1ec88:	e7c9      	b.n	1ec1e <strcmp+0x116>
   1ec8a:	f010 0403 	ands.w	r4, r0, #3
   1ec8e:	d01a      	beq.n	1ecc6 <strcmp+0x1be>
   1ec90:	eba1 0104 	sub.w	r1, r1, r4
   1ec94:	f020 0003 	bic.w	r0, r0, #3
   1ec98:	07e4      	lsls	r4, r4, #31
   1ec9a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec9e:	d006      	beq.n	1ecae <strcmp+0x1a6>
   1eca0:	d20f      	bcs.n	1ecc2 <strcmp+0x1ba>
   1eca2:	788b      	ldrb	r3, [r1, #2]
   1eca4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1eca8:	1ae4      	subs	r4, r4, r3
   1ecaa:	d106      	bne.n	1ecba <strcmp+0x1b2>
   1ecac:	b12b      	cbz	r3, 1ecba <strcmp+0x1b2>
   1ecae:	78cb      	ldrb	r3, [r1, #3]
   1ecb0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1ecb4:	1ae4      	subs	r4, r4, r3
   1ecb6:	d100      	bne.n	1ecba <strcmp+0x1b2>
   1ecb8:	b91b      	cbnz	r3, 1ecc2 <strcmp+0x1ba>
   1ecba:	4620      	mov	r0, r4
   1ecbc:	f85d 4b10 	ldr.w	r4, [sp], #16
   1ecc0:	4770      	bx	lr
   1ecc2:	f101 0104 	add.w	r1, r1, #4
   1ecc6:	f850 2b04 	ldr.w	r2, [r0], #4
   1ecca:	07cc      	lsls	r4, r1, #31
   1eccc:	f021 0103 	bic.w	r1, r1, #3
   1ecd0:	f851 3b04 	ldr.w	r3, [r1], #4
   1ecd4:	d848      	bhi.n	1ed68 <strcmp+0x260>
   1ecd6:	d224      	bcs.n	1ed22 <strcmp+0x21a>
   1ecd8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1ecdc:	fa82 f54c 	uadd8	r5, r2, ip
   1ece0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1ece4:	faa5 f58c 	sel	r5, r5, ip
   1ece8:	d10a      	bne.n	1ed00 <strcmp+0x1f8>
   1ecea:	b965      	cbnz	r5, 1ed06 <strcmp+0x1fe>
   1ecec:	f851 3b04 	ldr.w	r3, [r1], #4
   1ecf0:	ea84 0402 	eor.w	r4, r4, r2
   1ecf4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1ecf8:	d10e      	bne.n	1ed18 <strcmp+0x210>
   1ecfa:	f850 2b04 	ldr.w	r2, [r0], #4
   1ecfe:	e7eb      	b.n	1ecd8 <strcmp+0x1d0>
   1ed00:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1ed04:	e055      	b.n	1edb2 <strcmp+0x2aa>
   1ed06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1ed0a:	d14d      	bne.n	1eda8 <strcmp+0x2a0>
   1ed0c:	7808      	ldrb	r0, [r1, #0]
   1ed0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ed12:	f1c0 0000 	rsb	r0, r0, #0
   1ed16:	4770      	bx	lr
   1ed18:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ed1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1ed20:	e047      	b.n	1edb2 <strcmp+0x2aa>
   1ed22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1ed26:	fa82 f54c 	uadd8	r5, r2, ip
   1ed2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1ed2e:	faa5 f58c 	sel	r5, r5, ip
   1ed32:	d10a      	bne.n	1ed4a <strcmp+0x242>
   1ed34:	b965      	cbnz	r5, 1ed50 <strcmp+0x248>
   1ed36:	f851 3b04 	ldr.w	r3, [r1], #4
   1ed3a:	ea84 0402 	eor.w	r4, r4, r2
   1ed3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1ed42:	d10c      	bne.n	1ed5e <strcmp+0x256>
   1ed44:	f850 2b04 	ldr.w	r2, [r0], #4
   1ed48:	e7eb      	b.n	1ed22 <strcmp+0x21a>
   1ed4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ed4e:	e030      	b.n	1edb2 <strcmp+0x2aa>
   1ed50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1ed54:	d128      	bne.n	1eda8 <strcmp+0x2a0>
   1ed56:	880b      	ldrh	r3, [r1, #0]
   1ed58:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ed5c:	e029      	b.n	1edb2 <strcmp+0x2aa>
   1ed5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ed62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1ed66:	e024      	b.n	1edb2 <strcmp+0x2aa>
   1ed68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1ed6c:	fa82 f54c 	uadd8	r5, r2, ip
   1ed70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1ed74:	faa5 f58c 	sel	r5, r5, ip
   1ed78:	d10a      	bne.n	1ed90 <strcmp+0x288>
   1ed7a:	b965      	cbnz	r5, 1ed96 <strcmp+0x28e>
   1ed7c:	f851 3b04 	ldr.w	r3, [r1], #4
   1ed80:	ea84 0402 	eor.w	r4, r4, r2
   1ed84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1ed88:	d109      	bne.n	1ed9e <strcmp+0x296>
   1ed8a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ed8e:	e7eb      	b.n	1ed68 <strcmp+0x260>
   1ed90:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1ed94:	e00d      	b.n	1edb2 <strcmp+0x2aa>
   1ed96:	f015 0fff 	tst.w	r5, #255	; 0xff
   1ed9a:	d105      	bne.n	1eda8 <strcmp+0x2a0>
   1ed9c:	680b      	ldr	r3, [r1, #0]
   1ed9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1eda2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1eda6:	e004      	b.n	1edb2 <strcmp+0x2aa>
   1eda8:	f04f 0000 	mov.w	r0, #0
   1edac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1edb0:	4770      	bx	lr
   1edb2:	ba12      	rev	r2, r2
   1edb4:	ba1b      	rev	r3, r3
   1edb6:	fa82 f44c 	uadd8	r4, r2, ip
   1edba:	ea82 0403 	eor.w	r4, r2, r3
   1edbe:	faa4 f58c 	sel	r5, r4, ip
   1edc2:	fab5 f485 	clz	r4, r5
   1edc6:	fa02 f204 	lsl.w	r2, r2, r4
   1edca:	fa03 f304 	lsl.w	r3, r3, r4
   1edce:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1edd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1edd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1edda:	4770      	bx	lr
	...

0001ee00 <strlen>:
   1ee00:	f890 f000 	pld	[r0]
   1ee04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1ee08:	f020 0107 	bic.w	r1, r0, #7
   1ee0c:	f06f 0c00 	mvn.w	ip, #0
   1ee10:	f010 0407 	ands.w	r4, r0, #7
   1ee14:	f891 f020 	pld	[r1, #32]
   1ee18:	f040 8049 	bne.w	1eeae <strlen+0xae>
   1ee1c:	f04f 0400 	mov.w	r4, #0
   1ee20:	f06f 0007 	mvn.w	r0, #7
   1ee24:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ee28:	f891 f040 	pld	[r1, #64]	; 0x40
   1ee2c:	f100 0008 	add.w	r0, r0, #8
   1ee30:	fa82 f24c 	uadd8	r2, r2, ip
   1ee34:	faa4 f28c 	sel	r2, r4, ip
   1ee38:	fa83 f34c 	uadd8	r3, r3, ip
   1ee3c:	faa2 f38c 	sel	r3, r2, ip
   1ee40:	bb4b      	cbnz	r3, 1ee96 <strlen+0x96>
   1ee42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ee46:	fa82 f24c 	uadd8	r2, r2, ip
   1ee4a:	f100 0008 	add.w	r0, r0, #8
   1ee4e:	faa4 f28c 	sel	r2, r4, ip
   1ee52:	fa83 f34c 	uadd8	r3, r3, ip
   1ee56:	faa2 f38c 	sel	r3, r2, ip
   1ee5a:	b9e3      	cbnz	r3, 1ee96 <strlen+0x96>
   1ee5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1ee60:	fa82 f24c 	uadd8	r2, r2, ip
   1ee64:	f100 0008 	add.w	r0, r0, #8
   1ee68:	faa4 f28c 	sel	r2, r4, ip
   1ee6c:	fa83 f34c 	uadd8	r3, r3, ip
   1ee70:	faa2 f38c 	sel	r3, r2, ip
   1ee74:	b97b      	cbnz	r3, 1ee96 <strlen+0x96>
   1ee76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1ee7a:	f101 0120 	add.w	r1, r1, #32
   1ee7e:	fa82 f24c 	uadd8	r2, r2, ip
   1ee82:	f100 0008 	add.w	r0, r0, #8
   1ee86:	faa4 f28c 	sel	r2, r4, ip
   1ee8a:	fa83 f34c 	uadd8	r3, r3, ip
   1ee8e:	faa2 f38c 	sel	r3, r2, ip
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	d0c6      	beq.n	1ee24 <strlen+0x24>
   1ee96:	2a00      	cmp	r2, #0
   1ee98:	bf04      	itt	eq
   1ee9a:	3004      	addeq	r0, #4
   1ee9c:	461a      	moveq	r2, r3
   1ee9e:	ba12      	rev	r2, r2
   1eea0:	fab2 f282 	clz	r2, r2
   1eea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1eea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1eeac:	4770      	bx	lr
   1eeae:	e9d1 2300 	ldrd	r2, r3, [r1]
   1eeb2:	f004 0503 	and.w	r5, r4, #3
   1eeb6:	f1c4 0000 	rsb	r0, r4, #0
   1eeba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1eebe:	f014 0f04 	tst.w	r4, #4
   1eec2:	f891 f040 	pld	[r1, #64]	; 0x40
   1eec6:	fa0c f505 	lsl.w	r5, ip, r5
   1eeca:	ea62 0205 	orn	r2, r2, r5
   1eece:	bf1c      	itt	ne
   1eed0:	ea63 0305 	ornne	r3, r3, r5
   1eed4:	4662      	movne	r2, ip
   1eed6:	f04f 0400 	mov.w	r4, #0
   1eeda:	e7a9      	b.n	1ee30 <strlen+0x30>

0001eedc <strncmp>:
   1eedc:	2a00      	cmp	r2, #0
   1eede:	d041      	beq.n	1ef64 <strncmp+0x88>
   1eee0:	ea40 0301 	orr.w	r3, r0, r1
   1eee4:	f013 0303 	ands.w	r3, r3, #3
   1eee8:	b4f0      	push	{r4, r5, r6, r7}
   1eeea:	d125      	bne.n	1ef38 <strncmp+0x5c>
   1eeec:	2a03      	cmp	r2, #3
   1eeee:	d923      	bls.n	1ef38 <strncmp+0x5c>
   1eef0:	6804      	ldr	r4, [r0, #0]
   1eef2:	680d      	ldr	r5, [r1, #0]
   1eef4:	42ac      	cmp	r4, r5
   1eef6:	d11f      	bne.n	1ef38 <strncmp+0x5c>
   1eef8:	3a04      	subs	r2, #4
   1eefa:	d038      	beq.n	1ef6e <strncmp+0x92>
   1eefc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1ef00:	ea25 0404 	bic.w	r4, r5, r4
   1ef04:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ef08:	d12e      	bne.n	1ef68 <strncmp+0x8c>
   1ef0a:	3004      	adds	r0, #4
   1ef0c:	3104      	adds	r1, #4
   1ef0e:	e00f      	b.n	1ef30 <strncmp+0x54>
   1ef10:	f850 3b04 	ldr.w	r3, [r0], #4
   1ef14:	680e      	ldr	r6, [r1, #0]
   1ef16:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1ef1a:	42b3      	cmp	r3, r6
   1ef1c:	ea24 0403 	bic.w	r4, r4, r3
   1ef20:	f101 0104 	add.w	r1, r1, #4
   1ef24:	d126      	bne.n	1ef74 <strncmp+0x98>
   1ef26:	3a04      	subs	r2, #4
   1ef28:	d021      	beq.n	1ef6e <strncmp+0x92>
   1ef2a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ef2e:	d11b      	bne.n	1ef68 <strncmp+0x8c>
   1ef30:	2a03      	cmp	r2, #3
   1ef32:	4607      	mov	r7, r0
   1ef34:	460d      	mov	r5, r1
   1ef36:	d8eb      	bhi.n	1ef10 <strncmp+0x34>
   1ef38:	7805      	ldrb	r5, [r0, #0]
   1ef3a:	780c      	ldrb	r4, [r1, #0]
   1ef3c:	42ac      	cmp	r4, r5
   1ef3e:	f102 33ff 	add.w	r3, r2, #4294967295
   1ef42:	d11a      	bne.n	1ef7a <strncmp+0x9e>
   1ef44:	b183      	cbz	r3, 1ef68 <strncmp+0x8c>
   1ef46:	b914      	cbnz	r4, 1ef4e <strncmp+0x72>
   1ef48:	e00e      	b.n	1ef68 <strncmp+0x8c>
   1ef4a:	b16b      	cbz	r3, 1ef68 <strncmp+0x8c>
   1ef4c:	b17a      	cbz	r2, 1ef6e <strncmp+0x92>
   1ef4e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1ef52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ef56:	42a2      	cmp	r2, r4
   1ef58:	f103 33ff 	add.w	r3, r3, #4294967295
   1ef5c:	d0f5      	beq.n	1ef4a <strncmp+0x6e>
   1ef5e:	1b10      	subs	r0, r2, r4
   1ef60:	bcf0      	pop	{r4, r5, r6, r7}
   1ef62:	4770      	bx	lr
   1ef64:	4610      	mov	r0, r2
   1ef66:	4770      	bx	lr
   1ef68:	2000      	movs	r0, #0
   1ef6a:	bcf0      	pop	{r4, r5, r6, r7}
   1ef6c:	4770      	bx	lr
   1ef6e:	4610      	mov	r0, r2
   1ef70:	bcf0      	pop	{r4, r5, r6, r7}
   1ef72:	4770      	bx	lr
   1ef74:	4629      	mov	r1, r5
   1ef76:	4638      	mov	r0, r7
   1ef78:	e7de      	b.n	1ef38 <strncmp+0x5c>
   1ef7a:	462a      	mov	r2, r5
   1ef7c:	e7ef      	b.n	1ef5e <strncmp+0x82>
   1ef7e:	bf00      	nop

0001ef80 <_svfprintf_r>:
   1ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef84:	b0c1      	sub	sp, #260	; 0x104
   1ef86:	460c      	mov	r4, r1
   1ef88:	9107      	str	r1, [sp, #28]
   1ef8a:	4692      	mov	sl, r2
   1ef8c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ef8e:	9008      	str	r0, [sp, #32]
   1ef90:	f002 fde2 	bl	21b58 <_localeconv_r>
   1ef94:	6803      	ldr	r3, [r0, #0]
   1ef96:	9314      	str	r3, [sp, #80]	; 0x50
   1ef98:	4618      	mov	r0, r3
   1ef9a:	f7ff ff31 	bl	1ee00 <strlen>
   1ef9e:	89a3      	ldrh	r3, [r4, #12]
   1efa0:	9013      	str	r0, [sp, #76]	; 0x4c
   1efa2:	0619      	lsls	r1, r3, #24
   1efa4:	d503      	bpl.n	1efae <_svfprintf_r+0x2e>
   1efa6:	6923      	ldr	r3, [r4, #16]
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	f001 801b 	beq.w	1ffe4 <_svfprintf_r+0x1064>
   1efae:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f200 <_svfprintf_r+0x280>
   1efb2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1efb6:	2300      	movs	r3, #0
   1efb8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1efbc:	930f      	str	r3, [sp, #60]	; 0x3c
   1efbe:	9325      	str	r3, [sp, #148]	; 0x94
   1efc0:	9324      	str	r3, [sp, #144]	; 0x90
   1efc2:	9312      	str	r3, [sp, #72]	; 0x48
   1efc4:	9315      	str	r3, [sp, #84]	; 0x54
   1efc6:	9305      	str	r3, [sp, #20]
   1efc8:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1efcc:	46c8      	mov	r8, r9
   1efce:	f89a 3000 	ldrb.w	r3, [sl]
   1efd2:	4654      	mov	r4, sl
   1efd4:	b1e3      	cbz	r3, 1f010 <_svfprintf_r+0x90>
   1efd6:	2b25      	cmp	r3, #37	; 0x25
   1efd8:	d102      	bne.n	1efe0 <_svfprintf_r+0x60>
   1efda:	e019      	b.n	1f010 <_svfprintf_r+0x90>
   1efdc:	2b25      	cmp	r3, #37	; 0x25
   1efde:	d003      	beq.n	1efe8 <_svfprintf_r+0x68>
   1efe0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1efe4:	2b00      	cmp	r3, #0
   1efe6:	d1f9      	bne.n	1efdc <_svfprintf_r+0x5c>
   1efe8:	eba4 050a 	sub.w	r5, r4, sl
   1efec:	b185      	cbz	r5, 1f010 <_svfprintf_r+0x90>
   1efee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1eff0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1eff2:	f8c8 a000 	str.w	sl, [r8]
   1eff6:	3301      	adds	r3, #1
   1eff8:	442a      	add	r2, r5
   1effa:	2b07      	cmp	r3, #7
   1effc:	f8c8 5004 	str.w	r5, [r8, #4]
   1f000:	9225      	str	r2, [sp, #148]	; 0x94
   1f002:	9324      	str	r3, [sp, #144]	; 0x90
   1f004:	dc7f      	bgt.n	1f106 <_svfprintf_r+0x186>
   1f006:	f108 0808 	add.w	r8, r8, #8
   1f00a:	9b05      	ldr	r3, [sp, #20]
   1f00c:	442b      	add	r3, r5
   1f00e:	9305      	str	r3, [sp, #20]
   1f010:	7823      	ldrb	r3, [r4, #0]
   1f012:	2b00      	cmp	r3, #0
   1f014:	d07f      	beq.n	1f116 <_svfprintf_r+0x196>
   1f016:	2300      	movs	r3, #0
   1f018:	461a      	mov	r2, r3
   1f01a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f01e:	4619      	mov	r1, r3
   1f020:	9309      	str	r3, [sp, #36]	; 0x24
   1f022:	469b      	mov	fp, r3
   1f024:	f04f 30ff 	mov.w	r0, #4294967295
   1f028:	7863      	ldrb	r3, [r4, #1]
   1f02a:	9006      	str	r0, [sp, #24]
   1f02c:	f104 0a01 	add.w	sl, r4, #1
   1f030:	f10a 0a01 	add.w	sl, sl, #1
   1f034:	f1a3 0020 	sub.w	r0, r3, #32
   1f038:	2858      	cmp	r0, #88	; 0x58
   1f03a:	f200 83d3 	bhi.w	1f7e4 <_svfprintf_r+0x864>
   1f03e:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f042:	023f      	.short	0x023f
   1f044:	03d103d1 	.word	0x03d103d1
   1f048:	03d10247 	.word	0x03d10247
   1f04c:	03d103d1 	.word	0x03d103d1
   1f050:	03d103d1 	.word	0x03d103d1
   1f054:	024c03d1 	.word	0x024c03d1
   1f058:	03d1020a 	.word	0x03d1020a
   1f05c:	0273005d 	.word	0x0273005d
   1f060:	028e03d1 	.word	0x028e03d1
   1f064:	03c103c1 	.word	0x03c103c1
   1f068:	03c103c1 	.word	0x03c103c1
   1f06c:	03c103c1 	.word	0x03c103c1
   1f070:	03c103c1 	.word	0x03c103c1
   1f074:	03d103c1 	.word	0x03d103c1
   1f078:	03d103d1 	.word	0x03d103d1
   1f07c:	03d103d1 	.word	0x03d103d1
   1f080:	03d103d1 	.word	0x03d103d1
   1f084:	03d103d1 	.word	0x03d103d1
   1f088:	033f03d1 	.word	0x033f03d1
   1f08c:	03d1035f 	.word	0x03d1035f
   1f090:	03d1035f 	.word	0x03d1035f
   1f094:	03d103d1 	.word	0x03d103d1
   1f098:	03aa03d1 	.word	0x03aa03d1
   1f09c:	03d103d1 	.word	0x03d103d1
   1f0a0:	03d103af 	.word	0x03d103af
   1f0a4:	03d103d1 	.word	0x03d103d1
   1f0a8:	03d103d1 	.word	0x03d103d1
   1f0ac:	03d10261 	.word	0x03d10261
   1f0b0:	032603d1 	.word	0x032603d1
   1f0b4:	03d103d1 	.word	0x03d103d1
   1f0b8:	03d103d1 	.word	0x03d103d1
   1f0bc:	03d103d1 	.word	0x03d103d1
   1f0c0:	03d103d1 	.word	0x03d103d1
   1f0c4:	03d103d1 	.word	0x03d103d1
   1f0c8:	02e302ce 	.word	0x02e302ce
   1f0cc:	035f035f 	.word	0x035f035f
   1f0d0:	0293035f 	.word	0x0293035f
   1f0d4:	03d102e3 	.word	0x03d102e3
   1f0d8:	029803d1 	.word	0x029803d1
   1f0dc:	02a503d1 	.word	0x02a503d1
   1f0e0:	02bc01d3 	.word	0x02bc01d3
   1f0e4:	03d1020f 	.word	0x03d1020f
   1f0e8:	03d101e8 	.word	0x03d101e8
   1f0ec:	03d1007e 	.word	0x03d1007e
   1f0f0:	021403d1 	.word	0x021403d1
   1f0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f0f6:	930b      	str	r3, [sp, #44]	; 0x2c
   1f0f8:	4240      	negs	r0, r0
   1f0fa:	9009      	str	r0, [sp, #36]	; 0x24
   1f0fc:	f04b 0b04 	orr.w	fp, fp, #4
   1f100:	f89a 3000 	ldrb.w	r3, [sl]
   1f104:	e794      	b.n	1f030 <_svfprintf_r+0xb0>
   1f106:	aa23      	add	r2, sp, #140	; 0x8c
   1f108:	9907      	ldr	r1, [sp, #28]
   1f10a:	9808      	ldr	r0, [sp, #32]
   1f10c:	f003 f8ea 	bl	222e4 <__ssprint_r>
   1f110:	b940      	cbnz	r0, 1f124 <_svfprintf_r+0x1a4>
   1f112:	46c8      	mov	r8, r9
   1f114:	e779      	b.n	1f00a <_svfprintf_r+0x8a>
   1f116:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f118:	b123      	cbz	r3, 1f124 <_svfprintf_r+0x1a4>
   1f11a:	9808      	ldr	r0, [sp, #32]
   1f11c:	9907      	ldr	r1, [sp, #28]
   1f11e:	aa23      	add	r2, sp, #140	; 0x8c
   1f120:	f003 f8e0 	bl	222e4 <__ssprint_r>
   1f124:	9b07      	ldr	r3, [sp, #28]
   1f126:	899b      	ldrh	r3, [r3, #12]
   1f128:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f12c:	9b05      	ldr	r3, [sp, #20]
   1f12e:	bf18      	it	ne
   1f130:	f04f 33ff 	movne.w	r3, #4294967295
   1f134:	9305      	str	r3, [sp, #20]
   1f136:	9805      	ldr	r0, [sp, #20]
   1f138:	b041      	add	sp, #260	; 0x104
   1f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f13e:	f01b 0f20 	tst.w	fp, #32
   1f142:	930d      	str	r3, [sp, #52]	; 0x34
   1f144:	f040 81e5 	bne.w	1f512 <_svfprintf_r+0x592>
   1f148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f14a:	f01b 0f10 	tst.w	fp, #16
   1f14e:	4613      	mov	r3, r2
   1f150:	f040 8588 	bne.w	1fc64 <_svfprintf_r+0xce4>
   1f154:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f158:	f000 8584 	beq.w	1fc64 <_svfprintf_r+0xce4>
   1f15c:	8814      	ldrh	r4, [r2, #0]
   1f15e:	3204      	adds	r2, #4
   1f160:	2500      	movs	r5, #0
   1f162:	2301      	movs	r3, #1
   1f164:	920b      	str	r2, [sp, #44]	; 0x2c
   1f166:	2700      	movs	r7, #0
   1f168:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f16c:	9906      	ldr	r1, [sp, #24]
   1f16e:	1c4a      	adds	r2, r1, #1
   1f170:	f000 826d 	beq.w	1f64e <_svfprintf_r+0x6ce>
   1f174:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1f178:	9203      	str	r2, [sp, #12]
   1f17a:	ea54 0205 	orrs.w	r2, r4, r5
   1f17e:	f040 826c 	bne.w	1f65a <_svfprintf_r+0x6da>
   1f182:	2900      	cmp	r1, #0
   1f184:	f040 8451 	bne.w	1fa2a <_svfprintf_r+0xaaa>
   1f188:	2b00      	cmp	r3, #0
   1f18a:	f040 850b 	bne.w	1fba4 <_svfprintf_r+0xc24>
   1f18e:	f01b 0301 	ands.w	r3, fp, #1
   1f192:	930a      	str	r3, [sp, #40]	; 0x28
   1f194:	f000 861a 	beq.w	1fdcc <_svfprintf_r+0xe4c>
   1f198:	ae40      	add	r6, sp, #256	; 0x100
   1f19a:	2330      	movs	r3, #48	; 0x30
   1f19c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f1a0:	9b06      	ldr	r3, [sp, #24]
   1f1a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f1a4:	4293      	cmp	r3, r2
   1f1a6:	bfb8      	it	lt
   1f1a8:	4613      	movlt	r3, r2
   1f1aa:	9304      	str	r3, [sp, #16]
   1f1ac:	2300      	movs	r3, #0
   1f1ae:	930e      	str	r3, [sp, #56]	; 0x38
   1f1b0:	b117      	cbz	r7, 1f1b8 <_svfprintf_r+0x238>
   1f1b2:	9b04      	ldr	r3, [sp, #16]
   1f1b4:	3301      	adds	r3, #1
   1f1b6:	9304      	str	r3, [sp, #16]
   1f1b8:	9b03      	ldr	r3, [sp, #12]
   1f1ba:	f013 0302 	ands.w	r3, r3, #2
   1f1be:	930c      	str	r3, [sp, #48]	; 0x30
   1f1c0:	d002      	beq.n	1f1c8 <_svfprintf_r+0x248>
   1f1c2:	9b04      	ldr	r3, [sp, #16]
   1f1c4:	3302      	adds	r3, #2
   1f1c6:	9304      	str	r3, [sp, #16]
   1f1c8:	9b03      	ldr	r3, [sp, #12]
   1f1ca:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f1ce:	f040 8320 	bne.w	1f812 <_svfprintf_r+0x892>
   1f1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1d4:	9a04      	ldr	r2, [sp, #16]
   1f1d6:	eba3 0b02 	sub.w	fp, r3, r2
   1f1da:	f1bb 0f00 	cmp.w	fp, #0
   1f1de:	f340 8318 	ble.w	1f812 <_svfprintf_r+0x892>
   1f1e2:	f1bb 0f10 	cmp.w	fp, #16
   1f1e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f1e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f1ea:	dd30      	ble.n	1f24e <_svfprintf_r+0x2ce>
   1f1ec:	4643      	mov	r3, r8
   1f1ee:	4621      	mov	r1, r4
   1f1f0:	46a8      	mov	r8, r5
   1f1f2:	2710      	movs	r7, #16
   1f1f4:	9c08      	ldr	r4, [sp, #32]
   1f1f6:	9d07      	ldr	r5, [sp, #28]
   1f1f8:	e00d      	b.n	1f216 <_svfprintf_r+0x296>
   1f1fa:	bf00      	nop
   1f1fc:	f3af 8000 	nop.w
	...
   1f208:	f1ab 0b10 	sub.w	fp, fp, #16
   1f20c:	f1bb 0f10 	cmp.w	fp, #16
   1f210:	f103 0308 	add.w	r3, r3, #8
   1f214:	dd18      	ble.n	1f248 <_svfprintf_r+0x2c8>
   1f216:	3201      	adds	r2, #1
   1f218:	48b7      	ldr	r0, [pc, #732]	; (1f4f8 <_svfprintf_r+0x578>)
   1f21a:	9224      	str	r2, [sp, #144]	; 0x90
   1f21c:	3110      	adds	r1, #16
   1f21e:	2a07      	cmp	r2, #7
   1f220:	9125      	str	r1, [sp, #148]	; 0x94
   1f222:	e883 0081 	stmia.w	r3, {r0, r7}
   1f226:	ddef      	ble.n	1f208 <_svfprintf_r+0x288>
   1f228:	aa23      	add	r2, sp, #140	; 0x8c
   1f22a:	4629      	mov	r1, r5
   1f22c:	4620      	mov	r0, r4
   1f22e:	f003 f859 	bl	222e4 <__ssprint_r>
   1f232:	2800      	cmp	r0, #0
   1f234:	f47f af76 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1f238:	f1ab 0b10 	sub.w	fp, fp, #16
   1f23c:	f1bb 0f10 	cmp.w	fp, #16
   1f240:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f242:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f244:	464b      	mov	r3, r9
   1f246:	dce6      	bgt.n	1f216 <_svfprintf_r+0x296>
   1f248:	4645      	mov	r5, r8
   1f24a:	460c      	mov	r4, r1
   1f24c:	4698      	mov	r8, r3
   1f24e:	3201      	adds	r2, #1
   1f250:	4ba9      	ldr	r3, [pc, #676]	; (1f4f8 <_svfprintf_r+0x578>)
   1f252:	9224      	str	r2, [sp, #144]	; 0x90
   1f254:	445c      	add	r4, fp
   1f256:	2a07      	cmp	r2, #7
   1f258:	9425      	str	r4, [sp, #148]	; 0x94
   1f25a:	e888 0808 	stmia.w	r8, {r3, fp}
   1f25e:	f300 84a6 	bgt.w	1fbae <_svfprintf_r+0xc2e>
   1f262:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f266:	f108 0808 	add.w	r8, r8, #8
   1f26a:	b177      	cbz	r7, 1f28a <_svfprintf_r+0x30a>
   1f26c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f26e:	3301      	adds	r3, #1
   1f270:	3401      	adds	r4, #1
   1f272:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f276:	2201      	movs	r2, #1
   1f278:	2b07      	cmp	r3, #7
   1f27a:	9425      	str	r4, [sp, #148]	; 0x94
   1f27c:	9324      	str	r3, [sp, #144]	; 0x90
   1f27e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f282:	f300 83f4 	bgt.w	1fa6e <_svfprintf_r+0xaee>
   1f286:	f108 0808 	add.w	r8, r8, #8
   1f28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f28c:	b16b      	cbz	r3, 1f2aa <_svfprintf_r+0x32a>
   1f28e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f290:	3301      	adds	r3, #1
   1f292:	3402      	adds	r4, #2
   1f294:	a91c      	add	r1, sp, #112	; 0x70
   1f296:	2202      	movs	r2, #2
   1f298:	2b07      	cmp	r3, #7
   1f29a:	9425      	str	r4, [sp, #148]	; 0x94
   1f29c:	9324      	str	r3, [sp, #144]	; 0x90
   1f29e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f2a2:	f300 83d9 	bgt.w	1fa58 <_svfprintf_r+0xad8>
   1f2a6:	f108 0808 	add.w	r8, r8, #8
   1f2aa:	2d80      	cmp	r5, #128	; 0x80
   1f2ac:	f000 8322 	beq.w	1f8f4 <_svfprintf_r+0x974>
   1f2b0:	9b06      	ldr	r3, [sp, #24]
   1f2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f2b4:	1a9f      	subs	r7, r3, r2
   1f2b6:	2f00      	cmp	r7, #0
   1f2b8:	dd36      	ble.n	1f328 <_svfprintf_r+0x3a8>
   1f2ba:	2f10      	cmp	r7, #16
   1f2bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f2be:	4d8f      	ldr	r5, [pc, #572]	; (1f4fc <_svfprintf_r+0x57c>)
   1f2c0:	dd27      	ble.n	1f312 <_svfprintf_r+0x392>
   1f2c2:	4642      	mov	r2, r8
   1f2c4:	4621      	mov	r1, r4
   1f2c6:	46b0      	mov	r8, r6
   1f2c8:	f04f 0b10 	mov.w	fp, #16
   1f2cc:	462e      	mov	r6, r5
   1f2ce:	9c08      	ldr	r4, [sp, #32]
   1f2d0:	9d07      	ldr	r5, [sp, #28]
   1f2d2:	e004      	b.n	1f2de <_svfprintf_r+0x35e>
   1f2d4:	3f10      	subs	r7, #16
   1f2d6:	2f10      	cmp	r7, #16
   1f2d8:	f102 0208 	add.w	r2, r2, #8
   1f2dc:	dd15      	ble.n	1f30a <_svfprintf_r+0x38a>
   1f2de:	3301      	adds	r3, #1
   1f2e0:	3110      	adds	r1, #16
   1f2e2:	2b07      	cmp	r3, #7
   1f2e4:	9125      	str	r1, [sp, #148]	; 0x94
   1f2e6:	9324      	str	r3, [sp, #144]	; 0x90
   1f2e8:	e882 0840 	stmia.w	r2, {r6, fp}
   1f2ec:	ddf2      	ble.n	1f2d4 <_svfprintf_r+0x354>
   1f2ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f2f0:	4629      	mov	r1, r5
   1f2f2:	4620      	mov	r0, r4
   1f2f4:	f002 fff6 	bl	222e4 <__ssprint_r>
   1f2f8:	2800      	cmp	r0, #0
   1f2fa:	f47f af13 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1f2fe:	3f10      	subs	r7, #16
   1f300:	2f10      	cmp	r7, #16
   1f302:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f304:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f306:	464a      	mov	r2, r9
   1f308:	dce9      	bgt.n	1f2de <_svfprintf_r+0x35e>
   1f30a:	4635      	mov	r5, r6
   1f30c:	460c      	mov	r4, r1
   1f30e:	4646      	mov	r6, r8
   1f310:	4690      	mov	r8, r2
   1f312:	3301      	adds	r3, #1
   1f314:	443c      	add	r4, r7
   1f316:	2b07      	cmp	r3, #7
   1f318:	9425      	str	r4, [sp, #148]	; 0x94
   1f31a:	9324      	str	r3, [sp, #144]	; 0x90
   1f31c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f320:	f300 838f 	bgt.w	1fa42 <_svfprintf_r+0xac2>
   1f324:	f108 0808 	add.w	r8, r8, #8
   1f328:	9b03      	ldr	r3, [sp, #12]
   1f32a:	05df      	lsls	r7, r3, #23
   1f32c:	f100 8273 	bmi.w	1f816 <_svfprintf_r+0x896>
   1f330:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f332:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f334:	f8c8 6000 	str.w	r6, [r8]
   1f338:	3301      	adds	r3, #1
   1f33a:	440c      	add	r4, r1
   1f33c:	2b07      	cmp	r3, #7
   1f33e:	9425      	str	r4, [sp, #148]	; 0x94
   1f340:	f8c8 1004 	str.w	r1, [r8, #4]
   1f344:	9324      	str	r3, [sp, #144]	; 0x90
   1f346:	f300 835b 	bgt.w	1fa00 <_svfprintf_r+0xa80>
   1f34a:	f108 0808 	add.w	r8, r8, #8
   1f34e:	9b03      	ldr	r3, [sp, #12]
   1f350:	075b      	lsls	r3, r3, #29
   1f352:	d53a      	bpl.n	1f3ca <_svfprintf_r+0x44a>
   1f354:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f356:	9a04      	ldr	r2, [sp, #16]
   1f358:	1a9d      	subs	r5, r3, r2
   1f35a:	2d00      	cmp	r5, #0
   1f35c:	dd35      	ble.n	1f3ca <_svfprintf_r+0x44a>
   1f35e:	2d10      	cmp	r5, #16
   1f360:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f362:	dd20      	ble.n	1f3a6 <_svfprintf_r+0x426>
   1f364:	2610      	movs	r6, #16
   1f366:	9f08      	ldr	r7, [sp, #32]
   1f368:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f36c:	e004      	b.n	1f378 <_svfprintf_r+0x3f8>
   1f36e:	3d10      	subs	r5, #16
   1f370:	2d10      	cmp	r5, #16
   1f372:	f108 0808 	add.w	r8, r8, #8
   1f376:	dd16      	ble.n	1f3a6 <_svfprintf_r+0x426>
   1f378:	3301      	adds	r3, #1
   1f37a:	4a5f      	ldr	r2, [pc, #380]	; (1f4f8 <_svfprintf_r+0x578>)
   1f37c:	9324      	str	r3, [sp, #144]	; 0x90
   1f37e:	3410      	adds	r4, #16
   1f380:	2b07      	cmp	r3, #7
   1f382:	9425      	str	r4, [sp, #148]	; 0x94
   1f384:	e888 0044 	stmia.w	r8, {r2, r6}
   1f388:	ddf1      	ble.n	1f36e <_svfprintf_r+0x3ee>
   1f38a:	aa23      	add	r2, sp, #140	; 0x8c
   1f38c:	4659      	mov	r1, fp
   1f38e:	4638      	mov	r0, r7
   1f390:	f002 ffa8 	bl	222e4 <__ssprint_r>
   1f394:	2800      	cmp	r0, #0
   1f396:	f47f aec5 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1f39a:	3d10      	subs	r5, #16
   1f39c:	2d10      	cmp	r5, #16
   1f39e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f3a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f3a2:	46c8      	mov	r8, r9
   1f3a4:	dce8      	bgt.n	1f378 <_svfprintf_r+0x3f8>
   1f3a6:	3301      	adds	r3, #1
   1f3a8:	4a53      	ldr	r2, [pc, #332]	; (1f4f8 <_svfprintf_r+0x578>)
   1f3aa:	9324      	str	r3, [sp, #144]	; 0x90
   1f3ac:	442c      	add	r4, r5
   1f3ae:	2b07      	cmp	r3, #7
   1f3b0:	9425      	str	r4, [sp, #148]	; 0x94
   1f3b2:	e888 0024 	stmia.w	r8, {r2, r5}
   1f3b6:	dd08      	ble.n	1f3ca <_svfprintf_r+0x44a>
   1f3b8:	aa23      	add	r2, sp, #140	; 0x8c
   1f3ba:	9907      	ldr	r1, [sp, #28]
   1f3bc:	9808      	ldr	r0, [sp, #32]
   1f3be:	f002 ff91 	bl	222e4 <__ssprint_r>
   1f3c2:	2800      	cmp	r0, #0
   1f3c4:	f47f aeae 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1f3c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f3ca:	9b05      	ldr	r3, [sp, #20]
   1f3cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f3ce:	9904      	ldr	r1, [sp, #16]
   1f3d0:	428a      	cmp	r2, r1
   1f3d2:	bfac      	ite	ge
   1f3d4:	189b      	addge	r3, r3, r2
   1f3d6:	185b      	addlt	r3, r3, r1
   1f3d8:	9305      	str	r3, [sp, #20]
   1f3da:	2c00      	cmp	r4, #0
   1f3dc:	f040 831b 	bne.w	1fa16 <_svfprintf_r+0xa96>
   1f3e0:	2300      	movs	r3, #0
   1f3e2:	9324      	str	r3, [sp, #144]	; 0x90
   1f3e4:	46c8      	mov	r8, r9
   1f3e6:	e5f2      	b.n	1efce <_svfprintf_r+0x4e>
   1f3e8:	930d      	str	r3, [sp, #52]	; 0x34
   1f3ea:	f01b 0320 	ands.w	r3, fp, #32
   1f3ee:	f040 81de 	bne.w	1f7ae <_svfprintf_r+0x82e>
   1f3f2:	f01b 0210 	ands.w	r2, fp, #16
   1f3f6:	f040 842d 	bne.w	1fc54 <_svfprintf_r+0xcd4>
   1f3fa:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f3fe:	f000 8429 	beq.w	1fc54 <_svfprintf_r+0xcd4>
   1f402:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f404:	4613      	mov	r3, r2
   1f406:	460a      	mov	r2, r1
   1f408:	3204      	adds	r2, #4
   1f40a:	880c      	ldrh	r4, [r1, #0]
   1f40c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f40e:	2500      	movs	r5, #0
   1f410:	e6a9      	b.n	1f166 <_svfprintf_r+0x1e6>
   1f412:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f414:	930d      	str	r3, [sp, #52]	; 0x34
   1f416:	6816      	ldr	r6, [r2, #0]
   1f418:	2400      	movs	r4, #0
   1f41a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f41e:	1d15      	adds	r5, r2, #4
   1f420:	2e00      	cmp	r6, #0
   1f422:	f000 86b5 	beq.w	20190 <_svfprintf_r+0x1210>
   1f426:	9a06      	ldr	r2, [sp, #24]
   1f428:	1c53      	adds	r3, r2, #1
   1f42a:	f000 8617 	beq.w	2005c <_svfprintf_r+0x10dc>
   1f42e:	4621      	mov	r1, r4
   1f430:	4630      	mov	r0, r6
   1f432:	f7fe ff1d 	bl	1e270 <memchr>
   1f436:	2800      	cmp	r0, #0
   1f438:	f000 8708 	beq.w	2024c <_svfprintf_r+0x12cc>
   1f43c:	1b83      	subs	r3, r0, r6
   1f43e:	930a      	str	r3, [sp, #40]	; 0x28
   1f440:	9406      	str	r4, [sp, #24]
   1f442:	950b      	str	r5, [sp, #44]	; 0x2c
   1f444:	f8cd b00c 	str.w	fp, [sp, #12]
   1f448:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f44c:	9304      	str	r3, [sp, #16]
   1f44e:	940e      	str	r4, [sp, #56]	; 0x38
   1f450:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f454:	e6ac      	b.n	1f1b0 <_svfprintf_r+0x230>
   1f456:	f89a 3000 	ldrb.w	r3, [sl]
   1f45a:	2201      	movs	r2, #1
   1f45c:	212b      	movs	r1, #43	; 0x2b
   1f45e:	e5e7      	b.n	1f030 <_svfprintf_r+0xb0>
   1f460:	f04b 0b20 	orr.w	fp, fp, #32
   1f464:	f89a 3000 	ldrb.w	r3, [sl]
   1f468:	e5e2      	b.n	1f030 <_svfprintf_r+0xb0>
   1f46a:	930d      	str	r3, [sp, #52]	; 0x34
   1f46c:	2a00      	cmp	r2, #0
   1f46e:	f040 87aa 	bne.w	203c6 <_svfprintf_r+0x1446>
   1f472:	4b23      	ldr	r3, [pc, #140]	; (1f500 <_svfprintf_r+0x580>)
   1f474:	9312      	str	r3, [sp, #72]	; 0x48
   1f476:	f01b 0f20 	tst.w	fp, #32
   1f47a:	f040 8112 	bne.w	1f6a2 <_svfprintf_r+0x722>
   1f47e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f480:	f01b 0f10 	tst.w	fp, #16
   1f484:	4613      	mov	r3, r2
   1f486:	f040 83e0 	bne.w	1fc4a <_svfprintf_r+0xcca>
   1f48a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f48e:	f000 83dc 	beq.w	1fc4a <_svfprintf_r+0xcca>
   1f492:	3304      	adds	r3, #4
   1f494:	8814      	ldrh	r4, [r2, #0]
   1f496:	930b      	str	r3, [sp, #44]	; 0x2c
   1f498:	2500      	movs	r5, #0
   1f49a:	f01b 0f01 	tst.w	fp, #1
   1f49e:	f000 810d 	beq.w	1f6bc <_svfprintf_r+0x73c>
   1f4a2:	ea54 0305 	orrs.w	r3, r4, r5
   1f4a6:	f000 8109 	beq.w	1f6bc <_svfprintf_r+0x73c>
   1f4aa:	2330      	movs	r3, #48	; 0x30
   1f4ac:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f4b0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f4b4:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f4b8:	f04b 0b02 	orr.w	fp, fp, #2
   1f4bc:	2302      	movs	r3, #2
   1f4be:	e652      	b.n	1f166 <_svfprintf_r+0x1e6>
   1f4c0:	f89a 3000 	ldrb.w	r3, [sl]
   1f4c4:	2900      	cmp	r1, #0
   1f4c6:	f47f adb3 	bne.w	1f030 <_svfprintf_r+0xb0>
   1f4ca:	2201      	movs	r2, #1
   1f4cc:	2120      	movs	r1, #32
   1f4ce:	e5af      	b.n	1f030 <_svfprintf_r+0xb0>
   1f4d0:	f04b 0b01 	orr.w	fp, fp, #1
   1f4d4:	f89a 3000 	ldrb.w	r3, [sl]
   1f4d8:	e5aa      	b.n	1f030 <_svfprintf_r+0xb0>
   1f4da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f4dc:	6823      	ldr	r3, [r4, #0]
   1f4de:	9309      	str	r3, [sp, #36]	; 0x24
   1f4e0:	4618      	mov	r0, r3
   1f4e2:	2800      	cmp	r0, #0
   1f4e4:	4623      	mov	r3, r4
   1f4e6:	f103 0304 	add.w	r3, r3, #4
   1f4ea:	f6ff ae03 	blt.w	1f0f4 <_svfprintf_r+0x174>
   1f4ee:	930b      	str	r3, [sp, #44]	; 0x2c
   1f4f0:	f89a 3000 	ldrb.w	r3, [sl]
   1f4f4:	e59c      	b.n	1f030 <_svfprintf_r+0xb0>
   1f4f6:	bf00      	nop
   1f4f8:	00024d04 	.word	0x00024d04
   1f4fc:	00024d14 	.word	0x00024d14
   1f500:	00024ce4 	.word	0x00024ce4
   1f504:	f04b 0b10 	orr.w	fp, fp, #16
   1f508:	f01b 0f20 	tst.w	fp, #32
   1f50c:	930d      	str	r3, [sp, #52]	; 0x34
   1f50e:	f43f ae1b 	beq.w	1f148 <_svfprintf_r+0x1c8>
   1f512:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f514:	3507      	adds	r5, #7
   1f516:	f025 0307 	bic.w	r3, r5, #7
   1f51a:	f103 0208 	add.w	r2, r3, #8
   1f51e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f522:	920b      	str	r2, [sp, #44]	; 0x2c
   1f524:	2301      	movs	r3, #1
   1f526:	e61e      	b.n	1f166 <_svfprintf_r+0x1e6>
   1f528:	f89a 3000 	ldrb.w	r3, [sl]
   1f52c:	2b2a      	cmp	r3, #42	; 0x2a
   1f52e:	f10a 0401 	add.w	r4, sl, #1
   1f532:	f000 873b 	beq.w	203ac <_svfprintf_r+0x142c>
   1f536:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f53a:	2809      	cmp	r0, #9
   1f53c:	46a2      	mov	sl, r4
   1f53e:	f200 8691 	bhi.w	20264 <_svfprintf_r+0x12e4>
   1f542:	2300      	movs	r3, #0
   1f544:	461c      	mov	r4, r3
   1f546:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f54a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f54e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f552:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f556:	2809      	cmp	r0, #9
   1f558:	d9f5      	bls.n	1f546 <_svfprintf_r+0x5c6>
   1f55a:	9406      	str	r4, [sp, #24]
   1f55c:	e56a      	b.n	1f034 <_svfprintf_r+0xb4>
   1f55e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f562:	f89a 3000 	ldrb.w	r3, [sl]
   1f566:	e563      	b.n	1f030 <_svfprintf_r+0xb0>
   1f568:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f56c:	f89a 3000 	ldrb.w	r3, [sl]
   1f570:	e55e      	b.n	1f030 <_svfprintf_r+0xb0>
   1f572:	f89a 3000 	ldrb.w	r3, [sl]
   1f576:	2b6c      	cmp	r3, #108	; 0x6c
   1f578:	bf03      	ittte	eq
   1f57a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f57e:	f04b 0b20 	orreq.w	fp, fp, #32
   1f582:	f10a 0a01 	addeq.w	sl, sl, #1
   1f586:	f04b 0b10 	orrne.w	fp, fp, #16
   1f58a:	e551      	b.n	1f030 <_svfprintf_r+0xb0>
   1f58c:	2a00      	cmp	r2, #0
   1f58e:	f040 871e 	bne.w	203ce <_svfprintf_r+0x144e>
   1f592:	f01b 0f20 	tst.w	fp, #32
   1f596:	f040 8509 	bne.w	1ffac <_svfprintf_r+0x102c>
   1f59a:	f01b 0f10 	tst.w	fp, #16
   1f59e:	f040 84bc 	bne.w	1ff1a <_svfprintf_r+0xf9a>
   1f5a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f5a6:	f000 84b8 	beq.w	1ff1a <_svfprintf_r+0xf9a>
   1f5aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f5ac:	6813      	ldr	r3, [r2, #0]
   1f5ae:	3204      	adds	r2, #4
   1f5b0:	920b      	str	r2, [sp, #44]	; 0x2c
   1f5b2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f5b6:	801a      	strh	r2, [r3, #0]
   1f5b8:	e509      	b.n	1efce <_svfprintf_r+0x4e>
   1f5ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f5bc:	4bb9      	ldr	r3, [pc, #740]	; (1f8a4 <_svfprintf_r+0x924>)
   1f5be:	680c      	ldr	r4, [r1, #0]
   1f5c0:	9312      	str	r3, [sp, #72]	; 0x48
   1f5c2:	2230      	movs	r2, #48	; 0x30
   1f5c4:	2378      	movs	r3, #120	; 0x78
   1f5c6:	3104      	adds	r1, #4
   1f5c8:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f5cc:	930d      	str	r3, [sp, #52]	; 0x34
   1f5ce:	f04b 0b02 	orr.w	fp, fp, #2
   1f5d2:	910b      	str	r1, [sp, #44]	; 0x2c
   1f5d4:	2500      	movs	r5, #0
   1f5d6:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f5da:	2302      	movs	r3, #2
   1f5dc:	e5c3      	b.n	1f166 <_svfprintf_r+0x1e6>
   1f5de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f5e0:	930d      	str	r3, [sp, #52]	; 0x34
   1f5e2:	680a      	ldr	r2, [r1, #0]
   1f5e4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f5e8:	2300      	movs	r3, #0
   1f5ea:	460a      	mov	r2, r1
   1f5ec:	461f      	mov	r7, r3
   1f5ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f5f2:	3204      	adds	r2, #4
   1f5f4:	2301      	movs	r3, #1
   1f5f6:	9304      	str	r3, [sp, #16]
   1f5f8:	f8cd b00c 	str.w	fp, [sp, #12]
   1f5fc:	9706      	str	r7, [sp, #24]
   1f5fe:	970e      	str	r7, [sp, #56]	; 0x38
   1f600:	920b      	str	r2, [sp, #44]	; 0x2c
   1f602:	930a      	str	r3, [sp, #40]	; 0x28
   1f604:	ae26      	add	r6, sp, #152	; 0x98
   1f606:	e5d7      	b.n	1f1b8 <_svfprintf_r+0x238>
   1f608:	930d      	str	r3, [sp, #52]	; 0x34
   1f60a:	2a00      	cmp	r2, #0
   1f60c:	f040 86fe 	bne.w	2040c <_svfprintf_r+0x148c>
   1f610:	f01b 0f20 	tst.w	fp, #32
   1f614:	d15d      	bne.n	1f6d2 <_svfprintf_r+0x752>
   1f616:	f01b 0f10 	tst.w	fp, #16
   1f61a:	f040 8335 	bne.w	1fc88 <_svfprintf_r+0xd08>
   1f61e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f622:	f000 8331 	beq.w	1fc88 <_svfprintf_r+0xd08>
   1f626:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f628:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f62c:	3104      	adds	r1, #4
   1f62e:	17e5      	asrs	r5, r4, #31
   1f630:	4622      	mov	r2, r4
   1f632:	462b      	mov	r3, r5
   1f634:	910b      	str	r1, [sp, #44]	; 0x2c
   1f636:	2a00      	cmp	r2, #0
   1f638:	f173 0300 	sbcs.w	r3, r3, #0
   1f63c:	db58      	blt.n	1f6f0 <_svfprintf_r+0x770>
   1f63e:	9906      	ldr	r1, [sp, #24]
   1f640:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f644:	1c4a      	adds	r2, r1, #1
   1f646:	f04f 0301 	mov.w	r3, #1
   1f64a:	f47f ad93 	bne.w	1f174 <_svfprintf_r+0x1f4>
   1f64e:	ea54 0205 	orrs.w	r2, r4, r5
   1f652:	f000 81ec 	beq.w	1fa2e <_svfprintf_r+0xaae>
   1f656:	f8cd b00c 	str.w	fp, [sp, #12]
   1f65a:	2b01      	cmp	r3, #1
   1f65c:	f000 8283 	beq.w	1fb66 <_svfprintf_r+0xbe6>
   1f660:	2b02      	cmp	r3, #2
   1f662:	f040 8213 	bne.w	1fa8c <_svfprintf_r+0xb0c>
   1f666:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f668:	464e      	mov	r6, r9
   1f66a:	0923      	lsrs	r3, r4, #4
   1f66c:	f004 010f 	and.w	r1, r4, #15
   1f670:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f674:	092a      	lsrs	r2, r5, #4
   1f676:	461c      	mov	r4, r3
   1f678:	4615      	mov	r5, r2
   1f67a:	5c43      	ldrb	r3, [r0, r1]
   1f67c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f680:	ea54 0305 	orrs.w	r3, r4, r5
   1f684:	d1f1      	bne.n	1f66a <_svfprintf_r+0x6ea>
   1f686:	eba9 0306 	sub.w	r3, r9, r6
   1f68a:	930a      	str	r3, [sp, #40]	; 0x28
   1f68c:	e588      	b.n	1f1a0 <_svfprintf_r+0x220>
   1f68e:	930d      	str	r3, [sp, #52]	; 0x34
   1f690:	2a00      	cmp	r2, #0
   1f692:	f040 86b7 	bne.w	20404 <_svfprintf_r+0x1484>
   1f696:	4b84      	ldr	r3, [pc, #528]	; (1f8a8 <_svfprintf_r+0x928>)
   1f698:	9312      	str	r3, [sp, #72]	; 0x48
   1f69a:	f01b 0f20 	tst.w	fp, #32
   1f69e:	f43f aeee 	beq.w	1f47e <_svfprintf_r+0x4fe>
   1f6a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f6a4:	3507      	adds	r5, #7
   1f6a6:	f025 0307 	bic.w	r3, r5, #7
   1f6aa:	f103 0208 	add.w	r2, r3, #8
   1f6ae:	f01b 0f01 	tst.w	fp, #1
   1f6b2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f6b4:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f6b8:	f47f aef3 	bne.w	1f4a2 <_svfprintf_r+0x522>
   1f6bc:	2302      	movs	r3, #2
   1f6be:	e552      	b.n	1f166 <_svfprintf_r+0x1e6>
   1f6c0:	930d      	str	r3, [sp, #52]	; 0x34
   1f6c2:	2a00      	cmp	r2, #0
   1f6c4:	f040 869a 	bne.w	203fc <_svfprintf_r+0x147c>
   1f6c8:	f04b 0b10 	orr.w	fp, fp, #16
   1f6cc:	f01b 0f20 	tst.w	fp, #32
   1f6d0:	d0a1      	beq.n	1f616 <_svfprintf_r+0x696>
   1f6d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f6d4:	3507      	adds	r5, #7
   1f6d6:	f025 0507 	bic.w	r5, r5, #7
   1f6da:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f6de:	2a00      	cmp	r2, #0
   1f6e0:	f105 0108 	add.w	r1, r5, #8
   1f6e4:	461d      	mov	r5, r3
   1f6e6:	f173 0300 	sbcs.w	r3, r3, #0
   1f6ea:	910b      	str	r1, [sp, #44]	; 0x2c
   1f6ec:	4614      	mov	r4, r2
   1f6ee:	daa6      	bge.n	1f63e <_svfprintf_r+0x6be>
   1f6f0:	272d      	movs	r7, #45	; 0x2d
   1f6f2:	4264      	negs	r4, r4
   1f6f4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f6f8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f6fc:	2301      	movs	r3, #1
   1f6fe:	e535      	b.n	1f16c <_svfprintf_r+0x1ec>
   1f700:	930d      	str	r3, [sp, #52]	; 0x34
   1f702:	2a00      	cmp	r2, #0
   1f704:	f040 8676 	bne.w	203f4 <_svfprintf_r+0x1474>
   1f708:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f70a:	f01b 0f08 	tst.w	fp, #8
   1f70e:	f105 0507 	add.w	r5, r5, #7
   1f712:	f000 83e8 	beq.w	1fee6 <_svfprintf_r+0xf66>
   1f716:	f025 0307 	bic.w	r3, r5, #7
   1f71a:	ed93 7b00 	vldr	d7, [r3]
   1f71e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f722:	f103 0208 	add.w	r2, r3, #8
   1f726:	920b      	str	r2, [sp, #44]	; 0x2c
   1f728:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f72c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f730:	9116      	str	r1, [sp, #88]	; 0x58
   1f732:	9317      	str	r3, [sp, #92]	; 0x5c
   1f734:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f738:	f04f 32ff 	mov.w	r2, #4294967295
   1f73c:	4620      	mov	r0, r4
   1f73e:	4629      	mov	r1, r5
   1f740:	4b5a      	ldr	r3, [pc, #360]	; (1f8ac <_svfprintf_r+0x92c>)
   1f742:	f002 ffa5 	bl	22690 <__aeabi_dcmpun>
   1f746:	2800      	cmp	r0, #0
   1f748:	f040 834f 	bne.w	1fdea <_svfprintf_r+0xe6a>
   1f74c:	f04f 32ff 	mov.w	r2, #4294967295
   1f750:	4b56      	ldr	r3, [pc, #344]	; (1f8ac <_svfprintf_r+0x92c>)
   1f752:	4620      	mov	r0, r4
   1f754:	4629      	mov	r1, r5
   1f756:	f7fc fcb5 	bl	1c0c4 <__aeabi_dcmple>
   1f75a:	2800      	cmp	r0, #0
   1f75c:	f040 8345 	bne.w	1fdea <_svfprintf_r+0xe6a>
   1f760:	2200      	movs	r2, #0
   1f762:	2300      	movs	r3, #0
   1f764:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f768:	f7fc fca2 	bl	1c0b0 <__aeabi_dcmplt>
   1f76c:	2800      	cmp	r0, #0
   1f76e:	f040 8533 	bne.w	201d8 <_svfprintf_r+0x1258>
   1f772:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f776:	4e4e      	ldr	r6, [pc, #312]	; (1f8b0 <_svfprintf_r+0x930>)
   1f778:	4b4e      	ldr	r3, [pc, #312]	; (1f8b4 <_svfprintf_r+0x934>)
   1f77a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f77e:	9003      	str	r0, [sp, #12]
   1f780:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f782:	2203      	movs	r2, #3
   1f784:	2100      	movs	r1, #0
   1f786:	9204      	str	r2, [sp, #16]
   1f788:	9106      	str	r1, [sp, #24]
   1f78a:	2847      	cmp	r0, #71	; 0x47
   1f78c:	bfd8      	it	le
   1f78e:	461e      	movle	r6, r3
   1f790:	920a      	str	r2, [sp, #40]	; 0x28
   1f792:	910e      	str	r1, [sp, #56]	; 0x38
   1f794:	e50c      	b.n	1f1b0 <_svfprintf_r+0x230>
   1f796:	f04b 0b08 	orr.w	fp, fp, #8
   1f79a:	f89a 3000 	ldrb.w	r3, [sl]
   1f79e:	e447      	b.n	1f030 <_svfprintf_r+0xb0>
   1f7a0:	f04b 0b10 	orr.w	fp, fp, #16
   1f7a4:	930d      	str	r3, [sp, #52]	; 0x34
   1f7a6:	f01b 0320 	ands.w	r3, fp, #32
   1f7aa:	f43f ae22 	beq.w	1f3f2 <_svfprintf_r+0x472>
   1f7ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f7b0:	3507      	adds	r5, #7
   1f7b2:	f025 0307 	bic.w	r3, r5, #7
   1f7b6:	f103 0208 	add.w	r2, r3, #8
   1f7ba:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f7be:	920b      	str	r2, [sp, #44]	; 0x2c
   1f7c0:	2300      	movs	r3, #0
   1f7c2:	e4d0      	b.n	1f166 <_svfprintf_r+0x1e6>
   1f7c4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f7c8:	2300      	movs	r3, #0
   1f7ca:	461c      	mov	r4, r3
   1f7cc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f7d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f7d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f7d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f7dc:	2809      	cmp	r0, #9
   1f7de:	d9f5      	bls.n	1f7cc <_svfprintf_r+0x84c>
   1f7e0:	9409      	str	r4, [sp, #36]	; 0x24
   1f7e2:	e427      	b.n	1f034 <_svfprintf_r+0xb4>
   1f7e4:	930d      	str	r3, [sp, #52]	; 0x34
   1f7e6:	2a00      	cmp	r2, #0
   1f7e8:	f040 85f5 	bne.w	203d6 <_svfprintf_r+0x1456>
   1f7ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f7ee:	2a00      	cmp	r2, #0
   1f7f0:	f43f ac91 	beq.w	1f116 <_svfprintf_r+0x196>
   1f7f4:	2300      	movs	r3, #0
   1f7f6:	2101      	movs	r1, #1
   1f7f8:	461f      	mov	r7, r3
   1f7fa:	9104      	str	r1, [sp, #16]
   1f7fc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f800:	f8cd b00c 	str.w	fp, [sp, #12]
   1f804:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f808:	9306      	str	r3, [sp, #24]
   1f80a:	930e      	str	r3, [sp, #56]	; 0x38
   1f80c:	910a      	str	r1, [sp, #40]	; 0x28
   1f80e:	ae26      	add	r6, sp, #152	; 0x98
   1f810:	e4d2      	b.n	1f1b8 <_svfprintf_r+0x238>
   1f812:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f814:	e529      	b.n	1f26a <_svfprintf_r+0x2ea>
   1f816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f818:	2b65      	cmp	r3, #101	; 0x65
   1f81a:	f340 80a9 	ble.w	1f970 <_svfprintf_r+0x9f0>
   1f81e:	2200      	movs	r2, #0
   1f820:	2300      	movs	r3, #0
   1f822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f826:	f7fc fc39 	bl	1c09c <__aeabi_dcmpeq>
   1f82a:	2800      	cmp	r0, #0
   1f82c:	f000 8152 	beq.w	1fad4 <_svfprintf_r+0xb54>
   1f830:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f832:	4a21      	ldr	r2, [pc, #132]	; (1f8b8 <_svfprintf_r+0x938>)
   1f834:	f8c8 2000 	str.w	r2, [r8]
   1f838:	3301      	adds	r3, #1
   1f83a:	3401      	adds	r4, #1
   1f83c:	2201      	movs	r2, #1
   1f83e:	2b07      	cmp	r3, #7
   1f840:	9425      	str	r4, [sp, #148]	; 0x94
   1f842:	9324      	str	r3, [sp, #144]	; 0x90
   1f844:	f8c8 2004 	str.w	r2, [r8, #4]
   1f848:	f300 836f 	bgt.w	1ff2a <_svfprintf_r+0xfaa>
   1f84c:	f108 0808 	add.w	r8, r8, #8
   1f850:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f854:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f856:	4293      	cmp	r3, r2
   1f858:	db03      	blt.n	1f862 <_svfprintf_r+0x8e2>
   1f85a:	9b03      	ldr	r3, [sp, #12]
   1f85c:	07dd      	lsls	r5, r3, #31
   1f85e:	f57f ad76 	bpl.w	1f34e <_svfprintf_r+0x3ce>
   1f862:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f864:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f866:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f868:	f8c8 2000 	str.w	r2, [r8]
   1f86c:	3301      	adds	r3, #1
   1f86e:	440c      	add	r4, r1
   1f870:	2b07      	cmp	r3, #7
   1f872:	f8c8 1004 	str.w	r1, [r8, #4]
   1f876:	9425      	str	r4, [sp, #148]	; 0x94
   1f878:	9324      	str	r3, [sp, #144]	; 0x90
   1f87a:	f300 83a3 	bgt.w	1ffc4 <_svfprintf_r+0x1044>
   1f87e:	f108 0808 	add.w	r8, r8, #8
   1f882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f884:	1e5e      	subs	r6, r3, #1
   1f886:	2e00      	cmp	r6, #0
   1f888:	f77f ad61 	ble.w	1f34e <_svfprintf_r+0x3ce>
   1f88c:	2e10      	cmp	r6, #16
   1f88e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f890:	4d0a      	ldr	r5, [pc, #40]	; (1f8bc <_svfprintf_r+0x93c>)
   1f892:	f340 81ef 	ble.w	1fc74 <_svfprintf_r+0xcf4>
   1f896:	4622      	mov	r2, r4
   1f898:	2710      	movs	r7, #16
   1f89a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f89e:	9c07      	ldr	r4, [sp, #28]
   1f8a0:	e014      	b.n	1f8cc <_svfprintf_r+0x94c>
   1f8a2:	bf00      	nop
   1f8a4:	00024ce4 	.word	0x00024ce4
   1f8a8:	00024cd0 	.word	0x00024cd0
   1f8ac:	7fefffff 	.word	0x7fefffff
   1f8b0:	00024cc4 	.word	0x00024cc4
   1f8b4:	00024cc0 	.word	0x00024cc0
   1f8b8:	00024d00 	.word	0x00024d00
   1f8bc:	00024d14 	.word	0x00024d14
   1f8c0:	f108 0808 	add.w	r8, r8, #8
   1f8c4:	3e10      	subs	r6, #16
   1f8c6:	2e10      	cmp	r6, #16
   1f8c8:	f340 81d3 	ble.w	1fc72 <_svfprintf_r+0xcf2>
   1f8cc:	3301      	adds	r3, #1
   1f8ce:	3210      	adds	r2, #16
   1f8d0:	2b07      	cmp	r3, #7
   1f8d2:	9225      	str	r2, [sp, #148]	; 0x94
   1f8d4:	9324      	str	r3, [sp, #144]	; 0x90
   1f8d6:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f8da:	ddf1      	ble.n	1f8c0 <_svfprintf_r+0x940>
   1f8dc:	aa23      	add	r2, sp, #140	; 0x8c
   1f8de:	4621      	mov	r1, r4
   1f8e0:	4658      	mov	r0, fp
   1f8e2:	f002 fcff 	bl	222e4 <__ssprint_r>
   1f8e6:	2800      	cmp	r0, #0
   1f8e8:	f47f ac1c 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1f8ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f8ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f8f0:	46c8      	mov	r8, r9
   1f8f2:	e7e7      	b.n	1f8c4 <_svfprintf_r+0x944>
   1f8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f8f6:	9a04      	ldr	r2, [sp, #16]
   1f8f8:	1a9f      	subs	r7, r3, r2
   1f8fa:	2f00      	cmp	r7, #0
   1f8fc:	f77f acd8 	ble.w	1f2b0 <_svfprintf_r+0x330>
   1f900:	2f10      	cmp	r7, #16
   1f902:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f904:	4db7      	ldr	r5, [pc, #732]	; (1fbe4 <_svfprintf_r+0xc64>)
   1f906:	dd27      	ble.n	1f958 <_svfprintf_r+0x9d8>
   1f908:	4642      	mov	r2, r8
   1f90a:	4621      	mov	r1, r4
   1f90c:	46b0      	mov	r8, r6
   1f90e:	f04f 0b10 	mov.w	fp, #16
   1f912:	462e      	mov	r6, r5
   1f914:	9c08      	ldr	r4, [sp, #32]
   1f916:	9d07      	ldr	r5, [sp, #28]
   1f918:	e004      	b.n	1f924 <_svfprintf_r+0x9a4>
   1f91a:	3f10      	subs	r7, #16
   1f91c:	2f10      	cmp	r7, #16
   1f91e:	f102 0208 	add.w	r2, r2, #8
   1f922:	dd15      	ble.n	1f950 <_svfprintf_r+0x9d0>
   1f924:	3301      	adds	r3, #1
   1f926:	3110      	adds	r1, #16
   1f928:	2b07      	cmp	r3, #7
   1f92a:	9125      	str	r1, [sp, #148]	; 0x94
   1f92c:	9324      	str	r3, [sp, #144]	; 0x90
   1f92e:	e882 0840 	stmia.w	r2, {r6, fp}
   1f932:	ddf2      	ble.n	1f91a <_svfprintf_r+0x99a>
   1f934:	aa23      	add	r2, sp, #140	; 0x8c
   1f936:	4629      	mov	r1, r5
   1f938:	4620      	mov	r0, r4
   1f93a:	f002 fcd3 	bl	222e4 <__ssprint_r>
   1f93e:	2800      	cmp	r0, #0
   1f940:	f47f abf0 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1f944:	3f10      	subs	r7, #16
   1f946:	2f10      	cmp	r7, #16
   1f948:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f94a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f94c:	464a      	mov	r2, r9
   1f94e:	dce9      	bgt.n	1f924 <_svfprintf_r+0x9a4>
   1f950:	4635      	mov	r5, r6
   1f952:	460c      	mov	r4, r1
   1f954:	4646      	mov	r6, r8
   1f956:	4690      	mov	r8, r2
   1f958:	3301      	adds	r3, #1
   1f95a:	443c      	add	r4, r7
   1f95c:	2b07      	cmp	r3, #7
   1f95e:	9425      	str	r4, [sp, #148]	; 0x94
   1f960:	9324      	str	r3, [sp, #144]	; 0x90
   1f962:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f966:	f300 8234 	bgt.w	1fdd2 <_svfprintf_r+0xe52>
   1f96a:	f108 0808 	add.w	r8, r8, #8
   1f96e:	e49f      	b.n	1f2b0 <_svfprintf_r+0x330>
   1f970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f972:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f974:	2b01      	cmp	r3, #1
   1f976:	f340 8200 	ble.w	1fd7a <_svfprintf_r+0xdfa>
   1f97a:	3701      	adds	r7, #1
   1f97c:	3401      	adds	r4, #1
   1f97e:	2301      	movs	r3, #1
   1f980:	2f07      	cmp	r7, #7
   1f982:	9425      	str	r4, [sp, #148]	; 0x94
   1f984:	9724      	str	r7, [sp, #144]	; 0x90
   1f986:	f8c8 6000 	str.w	r6, [r8]
   1f98a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f98e:	f300 8205 	bgt.w	1fd9c <_svfprintf_r+0xe1c>
   1f992:	f108 0808 	add.w	r8, r8, #8
   1f996:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f998:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1f99a:	f8c8 3000 	str.w	r3, [r8]
   1f99e:	3701      	adds	r7, #1
   1f9a0:	4414      	add	r4, r2
   1f9a2:	2f07      	cmp	r7, #7
   1f9a4:	9425      	str	r4, [sp, #148]	; 0x94
   1f9a6:	9724      	str	r7, [sp, #144]	; 0x90
   1f9a8:	f8c8 2004 	str.w	r2, [r8, #4]
   1f9ac:	f300 8202 	bgt.w	1fdb4 <_svfprintf_r+0xe34>
   1f9b0:	f108 0808 	add.w	r8, r8, #8
   1f9b4:	2300      	movs	r3, #0
   1f9b6:	2200      	movs	r2, #0
   1f9b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f9bc:	f7fc fb6e 	bl	1c09c <__aeabi_dcmpeq>
   1f9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f9c2:	2800      	cmp	r0, #0
   1f9c4:	f040 8101 	bne.w	1fbca <_svfprintf_r+0xc4a>
   1f9c8:	3b01      	subs	r3, #1
   1f9ca:	3701      	adds	r7, #1
   1f9cc:	3601      	adds	r6, #1
   1f9ce:	441c      	add	r4, r3
   1f9d0:	2f07      	cmp	r7, #7
   1f9d2:	9724      	str	r7, [sp, #144]	; 0x90
   1f9d4:	9425      	str	r4, [sp, #148]	; 0x94
   1f9d6:	f8c8 6000 	str.w	r6, [r8]
   1f9da:	f8c8 3004 	str.w	r3, [r8, #4]
   1f9de:	f300 8128 	bgt.w	1fc32 <_svfprintf_r+0xcb2>
   1f9e2:	f108 0808 	add.w	r8, r8, #8
   1f9e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f9e8:	f8c8 2004 	str.w	r2, [r8, #4]
   1f9ec:	3701      	adds	r7, #1
   1f9ee:	4414      	add	r4, r2
   1f9f0:	ab1f      	add	r3, sp, #124	; 0x7c
   1f9f2:	2f07      	cmp	r7, #7
   1f9f4:	9425      	str	r4, [sp, #148]	; 0x94
   1f9f6:	9724      	str	r7, [sp, #144]	; 0x90
   1f9f8:	f8c8 3000 	str.w	r3, [r8]
   1f9fc:	f77f aca5 	ble.w	1f34a <_svfprintf_r+0x3ca>
   1fa00:	aa23      	add	r2, sp, #140	; 0x8c
   1fa02:	9907      	ldr	r1, [sp, #28]
   1fa04:	9808      	ldr	r0, [sp, #32]
   1fa06:	f002 fc6d 	bl	222e4 <__ssprint_r>
   1fa0a:	2800      	cmp	r0, #0
   1fa0c:	f47f ab8a 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fa10:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa12:	46c8      	mov	r8, r9
   1fa14:	e49b      	b.n	1f34e <_svfprintf_r+0x3ce>
   1fa16:	aa23      	add	r2, sp, #140	; 0x8c
   1fa18:	9907      	ldr	r1, [sp, #28]
   1fa1a:	9808      	ldr	r0, [sp, #32]
   1fa1c:	f002 fc62 	bl	222e4 <__ssprint_r>
   1fa20:	2800      	cmp	r0, #0
   1fa22:	f43f acdd 	beq.w	1f3e0 <_svfprintf_r+0x460>
   1fa26:	f7ff bb7d 	b.w	1f124 <_svfprintf_r+0x1a4>
   1fa2a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fa2e:	2b01      	cmp	r3, #1
   1fa30:	f000 8135 	beq.w	1fc9e <_svfprintf_r+0xd1e>
   1fa34:	2b02      	cmp	r3, #2
   1fa36:	d125      	bne.n	1fa84 <_svfprintf_r+0xb04>
   1fa38:	f8cd b00c 	str.w	fp, [sp, #12]
   1fa3c:	2400      	movs	r4, #0
   1fa3e:	2500      	movs	r5, #0
   1fa40:	e611      	b.n	1f666 <_svfprintf_r+0x6e6>
   1fa42:	aa23      	add	r2, sp, #140	; 0x8c
   1fa44:	9907      	ldr	r1, [sp, #28]
   1fa46:	9808      	ldr	r0, [sp, #32]
   1fa48:	f002 fc4c 	bl	222e4 <__ssprint_r>
   1fa4c:	2800      	cmp	r0, #0
   1fa4e:	f47f ab69 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fa52:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa54:	46c8      	mov	r8, r9
   1fa56:	e467      	b.n	1f328 <_svfprintf_r+0x3a8>
   1fa58:	aa23      	add	r2, sp, #140	; 0x8c
   1fa5a:	9907      	ldr	r1, [sp, #28]
   1fa5c:	9808      	ldr	r0, [sp, #32]
   1fa5e:	f002 fc41 	bl	222e4 <__ssprint_r>
   1fa62:	2800      	cmp	r0, #0
   1fa64:	f47f ab5e 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fa68:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa6a:	46c8      	mov	r8, r9
   1fa6c:	e41d      	b.n	1f2aa <_svfprintf_r+0x32a>
   1fa6e:	aa23      	add	r2, sp, #140	; 0x8c
   1fa70:	9907      	ldr	r1, [sp, #28]
   1fa72:	9808      	ldr	r0, [sp, #32]
   1fa74:	f002 fc36 	bl	222e4 <__ssprint_r>
   1fa78:	2800      	cmp	r0, #0
   1fa7a:	f47f ab53 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fa7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa80:	46c8      	mov	r8, r9
   1fa82:	e402      	b.n	1f28a <_svfprintf_r+0x30a>
   1fa84:	f8cd b00c 	str.w	fp, [sp, #12]
   1fa88:	2400      	movs	r4, #0
   1fa8a:	2500      	movs	r5, #0
   1fa8c:	4649      	mov	r1, r9
   1fa8e:	e000      	b.n	1fa92 <_svfprintf_r+0xb12>
   1fa90:	4631      	mov	r1, r6
   1fa92:	08e2      	lsrs	r2, r4, #3
   1fa94:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1fa98:	08e8      	lsrs	r0, r5, #3
   1fa9a:	f004 0307 	and.w	r3, r4, #7
   1fa9e:	4605      	mov	r5, r0
   1faa0:	4614      	mov	r4, r2
   1faa2:	3330      	adds	r3, #48	; 0x30
   1faa4:	ea54 0205 	orrs.w	r2, r4, r5
   1faa8:	f801 3c01 	strb.w	r3, [r1, #-1]
   1faac:	f101 36ff 	add.w	r6, r1, #4294967295
   1fab0:	d1ee      	bne.n	1fa90 <_svfprintf_r+0xb10>
   1fab2:	9a03      	ldr	r2, [sp, #12]
   1fab4:	07d2      	lsls	r2, r2, #31
   1fab6:	f57f ade6 	bpl.w	1f686 <_svfprintf_r+0x706>
   1faba:	2b30      	cmp	r3, #48	; 0x30
   1fabc:	f43f ade3 	beq.w	1f686 <_svfprintf_r+0x706>
   1fac0:	3902      	subs	r1, #2
   1fac2:	2330      	movs	r3, #48	; 0x30
   1fac4:	f806 3c01 	strb.w	r3, [r6, #-1]
   1fac8:	eba9 0301 	sub.w	r3, r9, r1
   1facc:	930a      	str	r3, [sp, #40]	; 0x28
   1face:	460e      	mov	r6, r1
   1fad0:	f7ff bb66 	b.w	1f1a0 <_svfprintf_r+0x220>
   1fad4:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fad6:	2900      	cmp	r1, #0
   1fad8:	f340 8231 	ble.w	1ff3e <_svfprintf_r+0xfbe>
   1fadc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fae0:	4293      	cmp	r3, r2
   1fae2:	bfa8      	it	ge
   1fae4:	4613      	movge	r3, r2
   1fae6:	2b00      	cmp	r3, #0
   1fae8:	461f      	mov	r7, r3
   1faea:	dd0d      	ble.n	1fb08 <_svfprintf_r+0xb88>
   1faec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1faee:	f8c8 6000 	str.w	r6, [r8]
   1faf2:	3301      	adds	r3, #1
   1faf4:	443c      	add	r4, r7
   1faf6:	2b07      	cmp	r3, #7
   1faf8:	9425      	str	r4, [sp, #148]	; 0x94
   1fafa:	f8c8 7004 	str.w	r7, [r8, #4]
   1fafe:	9324      	str	r3, [sp, #144]	; 0x90
   1fb00:	f300 8321 	bgt.w	20146 <_svfprintf_r+0x11c6>
   1fb04:	f108 0808 	add.w	r8, r8, #8
   1fb08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fb0a:	2f00      	cmp	r7, #0
   1fb0c:	bfa8      	it	ge
   1fb0e:	1bdb      	subge	r3, r3, r7
   1fb10:	2b00      	cmp	r3, #0
   1fb12:	461f      	mov	r7, r3
   1fb14:	f340 80d7 	ble.w	1fcc6 <_svfprintf_r+0xd46>
   1fb18:	2f10      	cmp	r7, #16
   1fb1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb1c:	4d31      	ldr	r5, [pc, #196]	; (1fbe4 <_svfprintf_r+0xc64>)
   1fb1e:	f340 81f0 	ble.w	1ff02 <_svfprintf_r+0xf82>
   1fb22:	4642      	mov	r2, r8
   1fb24:	4621      	mov	r1, r4
   1fb26:	46b0      	mov	r8, r6
   1fb28:	f04f 0b10 	mov.w	fp, #16
   1fb2c:	462e      	mov	r6, r5
   1fb2e:	9c08      	ldr	r4, [sp, #32]
   1fb30:	9d07      	ldr	r5, [sp, #28]
   1fb32:	e004      	b.n	1fb3e <_svfprintf_r+0xbbe>
   1fb34:	3208      	adds	r2, #8
   1fb36:	3f10      	subs	r7, #16
   1fb38:	2f10      	cmp	r7, #16
   1fb3a:	f340 81de 	ble.w	1fefa <_svfprintf_r+0xf7a>
   1fb3e:	3301      	adds	r3, #1
   1fb40:	3110      	adds	r1, #16
   1fb42:	2b07      	cmp	r3, #7
   1fb44:	9125      	str	r1, [sp, #148]	; 0x94
   1fb46:	9324      	str	r3, [sp, #144]	; 0x90
   1fb48:	e882 0840 	stmia.w	r2, {r6, fp}
   1fb4c:	ddf2      	ble.n	1fb34 <_svfprintf_r+0xbb4>
   1fb4e:	aa23      	add	r2, sp, #140	; 0x8c
   1fb50:	4629      	mov	r1, r5
   1fb52:	4620      	mov	r0, r4
   1fb54:	f002 fbc6 	bl	222e4 <__ssprint_r>
   1fb58:	2800      	cmp	r0, #0
   1fb5a:	f47f aae3 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fb5e:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fb60:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb62:	464a      	mov	r2, r9
   1fb64:	e7e7      	b.n	1fb36 <_svfprintf_r+0xbb6>
   1fb66:	2d00      	cmp	r5, #0
   1fb68:	bf08      	it	eq
   1fb6a:	2c0a      	cmpeq	r4, #10
   1fb6c:	f0c0 8095 	bcc.w	1fc9a <_svfprintf_r+0xd1a>
   1fb70:	464e      	mov	r6, r9
   1fb72:	4620      	mov	r0, r4
   1fb74:	4629      	mov	r1, r5
   1fb76:	220a      	movs	r2, #10
   1fb78:	2300      	movs	r3, #0
   1fb7a:	f7fc fcb7 	bl	1c4ec <__aeabi_uldivmod>
   1fb7e:	3230      	adds	r2, #48	; 0x30
   1fb80:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1fb84:	4620      	mov	r0, r4
   1fb86:	4629      	mov	r1, r5
   1fb88:	2300      	movs	r3, #0
   1fb8a:	220a      	movs	r2, #10
   1fb8c:	f7fc fcae 	bl	1c4ec <__aeabi_uldivmod>
   1fb90:	4604      	mov	r4, r0
   1fb92:	460d      	mov	r5, r1
   1fb94:	ea54 0305 	orrs.w	r3, r4, r5
   1fb98:	d1eb      	bne.n	1fb72 <_svfprintf_r+0xbf2>
   1fb9a:	eba9 0306 	sub.w	r3, r9, r6
   1fb9e:	930a      	str	r3, [sp, #40]	; 0x28
   1fba0:	f7ff bafe 	b.w	1f1a0 <_svfprintf_r+0x220>
   1fba4:	9b06      	ldr	r3, [sp, #24]
   1fba6:	930a      	str	r3, [sp, #40]	; 0x28
   1fba8:	464e      	mov	r6, r9
   1fbaa:	f7ff baf9 	b.w	1f1a0 <_svfprintf_r+0x220>
   1fbae:	aa23      	add	r2, sp, #140	; 0x8c
   1fbb0:	9907      	ldr	r1, [sp, #28]
   1fbb2:	9808      	ldr	r0, [sp, #32]
   1fbb4:	f002 fb96 	bl	222e4 <__ssprint_r>
   1fbb8:	2800      	cmp	r0, #0
   1fbba:	f47f aab3 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fbbe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fbc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fbc4:	46c8      	mov	r8, r9
   1fbc6:	f7ff bb50 	b.w	1f26a <_svfprintf_r+0x2ea>
   1fbca:	1e5e      	subs	r6, r3, #1
   1fbcc:	2e00      	cmp	r6, #0
   1fbce:	f77f af0a 	ble.w	1f9e6 <_svfprintf_r+0xa66>
   1fbd2:	2e10      	cmp	r6, #16
   1fbd4:	4d03      	ldr	r5, [pc, #12]	; (1fbe4 <_svfprintf_r+0xc64>)
   1fbd6:	dd23      	ble.n	1fc20 <_svfprintf_r+0xca0>
   1fbd8:	4622      	mov	r2, r4
   1fbda:	f04f 0b10 	mov.w	fp, #16
   1fbde:	9c08      	ldr	r4, [sp, #32]
   1fbe0:	e007      	b.n	1fbf2 <_svfprintf_r+0xc72>
   1fbe2:	bf00      	nop
   1fbe4:	00024d14 	.word	0x00024d14
   1fbe8:	3e10      	subs	r6, #16
   1fbea:	2e10      	cmp	r6, #16
   1fbec:	f108 0808 	add.w	r8, r8, #8
   1fbf0:	dd15      	ble.n	1fc1e <_svfprintf_r+0xc9e>
   1fbf2:	3701      	adds	r7, #1
   1fbf4:	3210      	adds	r2, #16
   1fbf6:	2f07      	cmp	r7, #7
   1fbf8:	9225      	str	r2, [sp, #148]	; 0x94
   1fbfa:	9724      	str	r7, [sp, #144]	; 0x90
   1fbfc:	e888 0820 	stmia.w	r8, {r5, fp}
   1fc00:	ddf2      	ble.n	1fbe8 <_svfprintf_r+0xc68>
   1fc02:	aa23      	add	r2, sp, #140	; 0x8c
   1fc04:	9907      	ldr	r1, [sp, #28]
   1fc06:	4620      	mov	r0, r4
   1fc08:	f002 fb6c 	bl	222e4 <__ssprint_r>
   1fc0c:	2800      	cmp	r0, #0
   1fc0e:	f47f aa89 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fc12:	3e10      	subs	r6, #16
   1fc14:	2e10      	cmp	r6, #16
   1fc16:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fc18:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fc1a:	46c8      	mov	r8, r9
   1fc1c:	dce9      	bgt.n	1fbf2 <_svfprintf_r+0xc72>
   1fc1e:	4614      	mov	r4, r2
   1fc20:	3701      	adds	r7, #1
   1fc22:	4434      	add	r4, r6
   1fc24:	2f07      	cmp	r7, #7
   1fc26:	9425      	str	r4, [sp, #148]	; 0x94
   1fc28:	9724      	str	r7, [sp, #144]	; 0x90
   1fc2a:	e888 0060 	stmia.w	r8, {r5, r6}
   1fc2e:	f77f aed8 	ble.w	1f9e2 <_svfprintf_r+0xa62>
   1fc32:	aa23      	add	r2, sp, #140	; 0x8c
   1fc34:	9907      	ldr	r1, [sp, #28]
   1fc36:	9808      	ldr	r0, [sp, #32]
   1fc38:	f002 fb54 	bl	222e4 <__ssprint_r>
   1fc3c:	2800      	cmp	r0, #0
   1fc3e:	f47f aa71 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fc42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc44:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fc46:	46c8      	mov	r8, r9
   1fc48:	e6cd      	b.n	1f9e6 <_svfprintf_r+0xa66>
   1fc4a:	681c      	ldr	r4, [r3, #0]
   1fc4c:	3304      	adds	r3, #4
   1fc4e:	930b      	str	r3, [sp, #44]	; 0x2c
   1fc50:	2500      	movs	r5, #0
   1fc52:	e422      	b.n	1f49a <_svfprintf_r+0x51a>
   1fc54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fc56:	460a      	mov	r2, r1
   1fc58:	3204      	adds	r2, #4
   1fc5a:	680c      	ldr	r4, [r1, #0]
   1fc5c:	920b      	str	r2, [sp, #44]	; 0x2c
   1fc5e:	2500      	movs	r5, #0
   1fc60:	f7ff ba81 	b.w	1f166 <_svfprintf_r+0x1e6>
   1fc64:	3204      	adds	r2, #4
   1fc66:	681c      	ldr	r4, [r3, #0]
   1fc68:	920b      	str	r2, [sp, #44]	; 0x2c
   1fc6a:	2301      	movs	r3, #1
   1fc6c:	2500      	movs	r5, #0
   1fc6e:	f7ff ba7a 	b.w	1f166 <_svfprintf_r+0x1e6>
   1fc72:	4614      	mov	r4, r2
   1fc74:	3301      	adds	r3, #1
   1fc76:	4434      	add	r4, r6
   1fc78:	2b07      	cmp	r3, #7
   1fc7a:	9425      	str	r4, [sp, #148]	; 0x94
   1fc7c:	9324      	str	r3, [sp, #144]	; 0x90
   1fc7e:	e888 0060 	stmia.w	r8, {r5, r6}
   1fc82:	f77f ab62 	ble.w	1f34a <_svfprintf_r+0x3ca>
   1fc86:	e6bb      	b.n	1fa00 <_svfprintf_r+0xa80>
   1fc88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fc8a:	6814      	ldr	r4, [r2, #0]
   1fc8c:	4613      	mov	r3, r2
   1fc8e:	3304      	adds	r3, #4
   1fc90:	17e5      	asrs	r5, r4, #31
   1fc92:	930b      	str	r3, [sp, #44]	; 0x2c
   1fc94:	4622      	mov	r2, r4
   1fc96:	462b      	mov	r3, r5
   1fc98:	e4cd      	b.n	1f636 <_svfprintf_r+0x6b6>
   1fc9a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fc9e:	f8cd b00c 	str.w	fp, [sp, #12]
   1fca2:	ae40      	add	r6, sp, #256	; 0x100
   1fca4:	3430      	adds	r4, #48	; 0x30
   1fca6:	2301      	movs	r3, #1
   1fca8:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1fcac:	930a      	str	r3, [sp, #40]	; 0x28
   1fcae:	f7ff ba77 	b.w	1f1a0 <_svfprintf_r+0x220>
   1fcb2:	aa23      	add	r2, sp, #140	; 0x8c
   1fcb4:	9907      	ldr	r1, [sp, #28]
   1fcb6:	9808      	ldr	r0, [sp, #32]
   1fcb8:	f002 fb14 	bl	222e4 <__ssprint_r>
   1fcbc:	2800      	cmp	r0, #0
   1fcbe:	f47f aa31 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fcc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fcc4:	46c8      	mov	r8, r9
   1fcc6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fcc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fcca:	429a      	cmp	r2, r3
   1fccc:	db44      	blt.n	1fd58 <_svfprintf_r+0xdd8>
   1fcce:	9b03      	ldr	r3, [sp, #12]
   1fcd0:	07d9      	lsls	r1, r3, #31
   1fcd2:	d441      	bmi.n	1fd58 <_svfprintf_r+0xdd8>
   1fcd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fcd6:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fcd8:	1a9a      	subs	r2, r3, r2
   1fcda:	1a1d      	subs	r5, r3, r0
   1fcdc:	4295      	cmp	r5, r2
   1fcde:	bfa8      	it	ge
   1fce0:	4615      	movge	r5, r2
   1fce2:	2d00      	cmp	r5, #0
   1fce4:	dd0e      	ble.n	1fd04 <_svfprintf_r+0xd84>
   1fce6:	9924      	ldr	r1, [sp, #144]	; 0x90
   1fce8:	f8c8 5004 	str.w	r5, [r8, #4]
   1fcec:	3101      	adds	r1, #1
   1fcee:	4406      	add	r6, r0
   1fcf0:	442c      	add	r4, r5
   1fcf2:	2907      	cmp	r1, #7
   1fcf4:	f8c8 6000 	str.w	r6, [r8]
   1fcf8:	9425      	str	r4, [sp, #148]	; 0x94
   1fcfa:	9124      	str	r1, [sp, #144]	; 0x90
   1fcfc:	f300 823a 	bgt.w	20174 <_svfprintf_r+0x11f4>
   1fd00:	f108 0808 	add.w	r8, r8, #8
   1fd04:	2d00      	cmp	r5, #0
   1fd06:	bfac      	ite	ge
   1fd08:	1b56      	subge	r6, r2, r5
   1fd0a:	4616      	movlt	r6, r2
   1fd0c:	2e00      	cmp	r6, #0
   1fd0e:	f77f ab1e 	ble.w	1f34e <_svfprintf_r+0x3ce>
   1fd12:	2e10      	cmp	r6, #16
   1fd14:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd16:	4db1      	ldr	r5, [pc, #708]	; (1ffdc <_svfprintf_r+0x105c>)
   1fd18:	ddac      	ble.n	1fc74 <_svfprintf_r+0xcf4>
   1fd1a:	4622      	mov	r2, r4
   1fd1c:	2710      	movs	r7, #16
   1fd1e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fd22:	9c07      	ldr	r4, [sp, #28]
   1fd24:	e004      	b.n	1fd30 <_svfprintf_r+0xdb0>
   1fd26:	f108 0808 	add.w	r8, r8, #8
   1fd2a:	3e10      	subs	r6, #16
   1fd2c:	2e10      	cmp	r6, #16
   1fd2e:	dda0      	ble.n	1fc72 <_svfprintf_r+0xcf2>
   1fd30:	3301      	adds	r3, #1
   1fd32:	3210      	adds	r2, #16
   1fd34:	2b07      	cmp	r3, #7
   1fd36:	9225      	str	r2, [sp, #148]	; 0x94
   1fd38:	9324      	str	r3, [sp, #144]	; 0x90
   1fd3a:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fd3e:	ddf2      	ble.n	1fd26 <_svfprintf_r+0xda6>
   1fd40:	aa23      	add	r2, sp, #140	; 0x8c
   1fd42:	4621      	mov	r1, r4
   1fd44:	4658      	mov	r0, fp
   1fd46:	f002 facd 	bl	222e4 <__ssprint_r>
   1fd4a:	2800      	cmp	r0, #0
   1fd4c:	f47f a9ea 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fd50:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fd52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd54:	46c8      	mov	r8, r9
   1fd56:	e7e8      	b.n	1fd2a <_svfprintf_r+0xdaa>
   1fd58:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fd5c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fd5e:	f8c8 1000 	str.w	r1, [r8]
   1fd62:	3301      	adds	r3, #1
   1fd64:	4404      	add	r4, r0
   1fd66:	2b07      	cmp	r3, #7
   1fd68:	9425      	str	r4, [sp, #148]	; 0x94
   1fd6a:	f8c8 0004 	str.w	r0, [r8, #4]
   1fd6e:	9324      	str	r3, [sp, #144]	; 0x90
   1fd70:	f300 81f4 	bgt.w	2015c <_svfprintf_r+0x11dc>
   1fd74:	f108 0808 	add.w	r8, r8, #8
   1fd78:	e7ac      	b.n	1fcd4 <_svfprintf_r+0xd54>
   1fd7a:	9b03      	ldr	r3, [sp, #12]
   1fd7c:	07da      	lsls	r2, r3, #31
   1fd7e:	f53f adfc 	bmi.w	1f97a <_svfprintf_r+0x9fa>
   1fd82:	3701      	adds	r7, #1
   1fd84:	3401      	adds	r4, #1
   1fd86:	2301      	movs	r3, #1
   1fd88:	2f07      	cmp	r7, #7
   1fd8a:	9425      	str	r4, [sp, #148]	; 0x94
   1fd8c:	9724      	str	r7, [sp, #144]	; 0x90
   1fd8e:	f8c8 6000 	str.w	r6, [r8]
   1fd92:	f8c8 3004 	str.w	r3, [r8, #4]
   1fd96:	f77f ae24 	ble.w	1f9e2 <_svfprintf_r+0xa62>
   1fd9a:	e74a      	b.n	1fc32 <_svfprintf_r+0xcb2>
   1fd9c:	aa23      	add	r2, sp, #140	; 0x8c
   1fd9e:	9907      	ldr	r1, [sp, #28]
   1fda0:	9808      	ldr	r0, [sp, #32]
   1fda2:	f002 fa9f 	bl	222e4 <__ssprint_r>
   1fda6:	2800      	cmp	r0, #0
   1fda8:	f47f a9bc 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fdac:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fdae:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fdb0:	46c8      	mov	r8, r9
   1fdb2:	e5f0      	b.n	1f996 <_svfprintf_r+0xa16>
   1fdb4:	aa23      	add	r2, sp, #140	; 0x8c
   1fdb6:	9907      	ldr	r1, [sp, #28]
   1fdb8:	9808      	ldr	r0, [sp, #32]
   1fdba:	f002 fa93 	bl	222e4 <__ssprint_r>
   1fdbe:	2800      	cmp	r0, #0
   1fdc0:	f47f a9b0 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fdc4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fdc6:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fdc8:	46c8      	mov	r8, r9
   1fdca:	e5f3      	b.n	1f9b4 <_svfprintf_r+0xa34>
   1fdcc:	464e      	mov	r6, r9
   1fdce:	f7ff b9e7 	b.w	1f1a0 <_svfprintf_r+0x220>
   1fdd2:	aa23      	add	r2, sp, #140	; 0x8c
   1fdd4:	9907      	ldr	r1, [sp, #28]
   1fdd6:	9808      	ldr	r0, [sp, #32]
   1fdd8:	f002 fa84 	bl	222e4 <__ssprint_r>
   1fddc:	2800      	cmp	r0, #0
   1fdde:	f47f a9a1 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1fde2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fde4:	46c8      	mov	r8, r9
   1fde6:	f7ff ba63 	b.w	1f2b0 <_svfprintf_r+0x330>
   1fdea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fdee:	4602      	mov	r2, r0
   1fdf0:	460b      	mov	r3, r1
   1fdf2:	f002 fc4d 	bl	22690 <__aeabi_dcmpun>
   1fdf6:	2800      	cmp	r0, #0
   1fdf8:	f040 8298 	bne.w	2032c <_svfprintf_r+0x13ac>
   1fdfc:	9b06      	ldr	r3, [sp, #24]
   1fdfe:	3301      	adds	r3, #1
   1fe00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe02:	f023 0720 	bic.w	r7, r3, #32
   1fe06:	f000 81d2 	beq.w	201ae <_svfprintf_r+0x122e>
   1fe0a:	2f47      	cmp	r7, #71	; 0x47
   1fe0c:	f000 8120 	beq.w	20050 <_svfprintf_r+0x10d0>
   1fe10:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fe12:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fe16:	2b00      	cmp	r3, #0
   1fe18:	9203      	str	r2, [sp, #12]
   1fe1a:	f2c0 81f0 	blt.w	201fe <_svfprintf_r+0x127e>
   1fe1e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fe22:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fe26:	2300      	movs	r3, #0
   1fe28:	930c      	str	r3, [sp, #48]	; 0x30
   1fe2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe2c:	2b66      	cmp	r3, #102	; 0x66
   1fe2e:	f000 81c1 	beq.w	201b4 <_svfprintf_r+0x1234>
   1fe32:	2b46      	cmp	r3, #70	; 0x46
   1fe34:	f000 80f1 	beq.w	2001a <_svfprintf_r+0x109a>
   1fe38:	2f45      	cmp	r7, #69	; 0x45
   1fe3a:	bf0c      	ite	eq
   1fe3c:	9b06      	ldreq	r3, [sp, #24]
   1fe3e:	9d06      	ldrne	r5, [sp, #24]
   1fe40:	9808      	ldr	r0, [sp, #32]
   1fe42:	bf08      	it	eq
   1fe44:	1c5d      	addeq	r5, r3, #1
   1fe46:	aa21      	add	r2, sp, #132	; 0x84
   1fe48:	ab1e      	add	r3, sp, #120	; 0x78
   1fe4a:	9201      	str	r2, [sp, #4]
   1fe4c:	9300      	str	r3, [sp, #0]
   1fe4e:	462a      	mov	r2, r5
   1fe50:	ab1d      	add	r3, sp, #116	; 0x74
   1fe52:	2102      	movs	r1, #2
   1fe54:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fe58:	f000 fcae 	bl	207b8 <_dtoa_r>
   1fe5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe5e:	2b67      	cmp	r3, #103	; 0x67
   1fe60:	4606      	mov	r6, r0
   1fe62:	f040 81d5 	bne.w	20210 <_svfprintf_r+0x1290>
   1fe66:	f01b 0f01 	tst.w	fp, #1
   1fe6a:	f000 824e 	beq.w	2030a <_svfprintf_r+0x138a>
   1fe6e:	1974      	adds	r4, r6, r5
   1fe70:	2200      	movs	r2, #0
   1fe72:	2300      	movs	r3, #0
   1fe74:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1fe78:	f7fc f910 	bl	1c09c <__aeabi_dcmpeq>
   1fe7c:	2800      	cmp	r0, #0
   1fe7e:	f040 8160 	bne.w	20142 <_svfprintf_r+0x11c2>
   1fe82:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fe84:	42a3      	cmp	r3, r4
   1fe86:	d206      	bcs.n	1fe96 <_svfprintf_r+0xf16>
   1fe88:	2130      	movs	r1, #48	; 0x30
   1fe8a:	1c5a      	adds	r2, r3, #1
   1fe8c:	9221      	str	r2, [sp, #132]	; 0x84
   1fe8e:	7019      	strb	r1, [r3, #0]
   1fe90:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fe92:	429c      	cmp	r4, r3
   1fe94:	d8f9      	bhi.n	1fe8a <_svfprintf_r+0xf0a>
   1fe96:	1b9b      	subs	r3, r3, r6
   1fe98:	2f47      	cmp	r7, #71	; 0x47
   1fe9a:	930f      	str	r3, [sp, #60]	; 0x3c
   1fe9c:	f000 80f0 	beq.w	20080 <_svfprintf_r+0x1100>
   1fea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fea2:	2b65      	cmp	r3, #101	; 0x65
   1fea4:	f340 81c3 	ble.w	2022e <_svfprintf_r+0x12ae>
   1fea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1feaa:	2b66      	cmp	r3, #102	; 0x66
   1feac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1feae:	930e      	str	r3, [sp, #56]	; 0x38
   1feb0:	f000 81c0 	beq.w	20234 <_svfprintf_r+0x12b4>
   1feb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1feb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1feb8:	4619      	mov	r1, r3
   1feba:	4291      	cmp	r1, r2
   1febc:	f300 8191 	bgt.w	201e2 <_svfprintf_r+0x1262>
   1fec0:	f01b 0f01 	tst.w	fp, #1
   1fec4:	f040 8223 	bne.w	2030e <_svfprintf_r+0x138e>
   1fec8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1fecc:	9304      	str	r3, [sp, #16]
   1fece:	2367      	movs	r3, #103	; 0x67
   1fed0:	920a      	str	r2, [sp, #40]	; 0x28
   1fed2:	930d      	str	r3, [sp, #52]	; 0x34
   1fed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fed6:	2b00      	cmp	r3, #0
   1fed8:	f040 80cb 	bne.w	20072 <_svfprintf_r+0x10f2>
   1fedc:	9306      	str	r3, [sp, #24]
   1fede:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fee2:	f7ff b965 	b.w	1f1b0 <_svfprintf_r+0x230>
   1fee6:	f025 0507 	bic.w	r5, r5, #7
   1feea:	ed95 7b00 	vldr	d7, [r5]
   1feee:	f105 0308 	add.w	r3, r5, #8
   1fef2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fef6:	930b      	str	r3, [sp, #44]	; 0x2c
   1fef8:	e416      	b.n	1f728 <_svfprintf_r+0x7a8>
   1fefa:	4635      	mov	r5, r6
   1fefc:	460c      	mov	r4, r1
   1fefe:	4646      	mov	r6, r8
   1ff00:	4690      	mov	r8, r2
   1ff02:	3301      	adds	r3, #1
   1ff04:	443c      	add	r4, r7
   1ff06:	2b07      	cmp	r3, #7
   1ff08:	9425      	str	r4, [sp, #148]	; 0x94
   1ff0a:	9324      	str	r3, [sp, #144]	; 0x90
   1ff0c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1ff10:	f73f aecf 	bgt.w	1fcb2 <_svfprintf_r+0xd32>
   1ff14:	f108 0808 	add.w	r8, r8, #8
   1ff18:	e6d5      	b.n	1fcc6 <_svfprintf_r+0xd46>
   1ff1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ff1c:	6813      	ldr	r3, [r2, #0]
   1ff1e:	3204      	adds	r2, #4
   1ff20:	920b      	str	r2, [sp, #44]	; 0x2c
   1ff22:	9a05      	ldr	r2, [sp, #20]
   1ff24:	601a      	str	r2, [r3, #0]
   1ff26:	f7ff b852 	b.w	1efce <_svfprintf_r+0x4e>
   1ff2a:	aa23      	add	r2, sp, #140	; 0x8c
   1ff2c:	9907      	ldr	r1, [sp, #28]
   1ff2e:	9808      	ldr	r0, [sp, #32]
   1ff30:	f002 f9d8 	bl	222e4 <__ssprint_r>
   1ff34:	2800      	cmp	r0, #0
   1ff36:	f47f a8f5 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1ff3a:	46c8      	mov	r8, r9
   1ff3c:	e488      	b.n	1f850 <_svfprintf_r+0x8d0>
   1ff3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ff40:	4a27      	ldr	r2, [pc, #156]	; (1ffe0 <_svfprintf_r+0x1060>)
   1ff42:	f8c8 2000 	str.w	r2, [r8]
   1ff46:	3301      	adds	r3, #1
   1ff48:	3401      	adds	r4, #1
   1ff4a:	2201      	movs	r2, #1
   1ff4c:	2b07      	cmp	r3, #7
   1ff4e:	9425      	str	r4, [sp, #148]	; 0x94
   1ff50:	9324      	str	r3, [sp, #144]	; 0x90
   1ff52:	f8c8 2004 	str.w	r2, [r8, #4]
   1ff56:	dc54      	bgt.n	20002 <_svfprintf_r+0x1082>
   1ff58:	f108 0808 	add.w	r8, r8, #8
   1ff5c:	b929      	cbnz	r1, 1ff6a <_svfprintf_r+0xfea>
   1ff5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ff60:	b91b      	cbnz	r3, 1ff6a <_svfprintf_r+0xfea>
   1ff62:	9b03      	ldr	r3, [sp, #12]
   1ff64:	07d8      	lsls	r0, r3, #31
   1ff66:	f57f a9f2 	bpl.w	1f34e <_svfprintf_r+0x3ce>
   1ff6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ff6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1ff6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ff70:	f8c8 2000 	str.w	r2, [r8]
   1ff74:	3301      	adds	r3, #1
   1ff76:	4602      	mov	r2, r0
   1ff78:	4422      	add	r2, r4
   1ff7a:	2b07      	cmp	r3, #7
   1ff7c:	9225      	str	r2, [sp, #148]	; 0x94
   1ff7e:	f8c8 0004 	str.w	r0, [r8, #4]
   1ff82:	9324      	str	r3, [sp, #144]	; 0x90
   1ff84:	f300 8195 	bgt.w	202b2 <_svfprintf_r+0x1332>
   1ff88:	f108 0808 	add.w	r8, r8, #8
   1ff8c:	2900      	cmp	r1, #0
   1ff8e:	f2c0 816d 	blt.w	2026c <_svfprintf_r+0x12ec>
   1ff92:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1ff94:	f8c8 6000 	str.w	r6, [r8]
   1ff98:	3301      	adds	r3, #1
   1ff9a:	188c      	adds	r4, r1, r2
   1ff9c:	2b07      	cmp	r3, #7
   1ff9e:	9425      	str	r4, [sp, #148]	; 0x94
   1ffa0:	9324      	str	r3, [sp, #144]	; 0x90
   1ffa2:	f8c8 1004 	str.w	r1, [r8, #4]
   1ffa6:	f77f a9d0 	ble.w	1f34a <_svfprintf_r+0x3ca>
   1ffaa:	e529      	b.n	1fa00 <_svfprintf_r+0xa80>
   1ffac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ffae:	9905      	ldr	r1, [sp, #20]
   1ffb0:	6813      	ldr	r3, [r2, #0]
   1ffb2:	17cd      	asrs	r5, r1, #31
   1ffb4:	4608      	mov	r0, r1
   1ffb6:	3204      	adds	r2, #4
   1ffb8:	4629      	mov	r1, r5
   1ffba:	920b      	str	r2, [sp, #44]	; 0x2c
   1ffbc:	e9c3 0100 	strd	r0, r1, [r3]
   1ffc0:	f7ff b805 	b.w	1efce <_svfprintf_r+0x4e>
   1ffc4:	aa23      	add	r2, sp, #140	; 0x8c
   1ffc6:	9907      	ldr	r1, [sp, #28]
   1ffc8:	9808      	ldr	r0, [sp, #32]
   1ffca:	f002 f98b 	bl	222e4 <__ssprint_r>
   1ffce:	2800      	cmp	r0, #0
   1ffd0:	f47f a8a8 	bne.w	1f124 <_svfprintf_r+0x1a4>
   1ffd4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ffd6:	46c8      	mov	r8, r9
   1ffd8:	e453      	b.n	1f882 <_svfprintf_r+0x902>
   1ffda:	bf00      	nop
   1ffdc:	00024d14 	.word	0x00024d14
   1ffe0:	00024d00 	.word	0x00024d00
   1ffe4:	2140      	movs	r1, #64	; 0x40
   1ffe6:	9808      	ldr	r0, [sp, #32]
   1ffe8:	f7fd fe7a 	bl	1dce0 <_malloc_r>
   1ffec:	9a07      	ldr	r2, [sp, #28]
   1ffee:	6010      	str	r0, [r2, #0]
   1fff0:	6110      	str	r0, [r2, #16]
   1fff2:	2800      	cmp	r0, #0
   1fff4:	f000 81f6 	beq.w	203e4 <_svfprintf_r+0x1464>
   1fff8:	9a07      	ldr	r2, [sp, #28]
   1fffa:	2340      	movs	r3, #64	; 0x40
   1fffc:	6153      	str	r3, [r2, #20]
   1fffe:	f7fe bfd6 	b.w	1efae <_svfprintf_r+0x2e>
   20002:	aa23      	add	r2, sp, #140	; 0x8c
   20004:	9907      	ldr	r1, [sp, #28]
   20006:	9808      	ldr	r0, [sp, #32]
   20008:	f002 f96c 	bl	222e4 <__ssprint_r>
   2000c:	2800      	cmp	r0, #0
   2000e:	f47f a889 	bne.w	1f124 <_svfprintf_r+0x1a4>
   20012:	991d      	ldr	r1, [sp, #116]	; 0x74
   20014:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20016:	46c8      	mov	r8, r9
   20018:	e7a0      	b.n	1ff5c <_svfprintf_r+0xfdc>
   2001a:	9d06      	ldr	r5, [sp, #24]
   2001c:	9808      	ldr	r0, [sp, #32]
   2001e:	aa21      	add	r2, sp, #132	; 0x84
   20020:	ab1e      	add	r3, sp, #120	; 0x78
   20022:	9201      	str	r2, [sp, #4]
   20024:	9300      	str	r3, [sp, #0]
   20026:	462a      	mov	r2, r5
   20028:	ab1d      	add	r3, sp, #116	; 0x74
   2002a:	2103      	movs	r1, #3
   2002c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   20030:	f000 fbc2 	bl	207b8 <_dtoa_r>
   20034:	4606      	mov	r6, r0
   20036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20038:	2b46      	cmp	r3, #70	; 0x46
   2003a:	eb06 0405 	add.w	r4, r6, r5
   2003e:	f47f af17 	bne.w	1fe70 <_svfprintf_r+0xef0>
   20042:	7833      	ldrb	r3, [r6, #0]
   20044:	2b30      	cmp	r3, #48	; 0x30
   20046:	f000 817d 	beq.w	20344 <_svfprintf_r+0x13c4>
   2004a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   2004c:	442c      	add	r4, r5
   2004e:	e70f      	b.n	1fe70 <_svfprintf_r+0xef0>
   20050:	9b06      	ldr	r3, [sp, #24]
   20052:	2b00      	cmp	r3, #0
   20054:	bf08      	it	eq
   20056:	2301      	moveq	r3, #1
   20058:	9306      	str	r3, [sp, #24]
   2005a:	e6d9      	b.n	1fe10 <_svfprintf_r+0xe90>
   2005c:	4630      	mov	r0, r6
   2005e:	9406      	str	r4, [sp, #24]
   20060:	f7fe fece 	bl	1ee00 <strlen>
   20064:	950b      	str	r5, [sp, #44]	; 0x2c
   20066:	900a      	str	r0, [sp, #40]	; 0x28
   20068:	f8cd b00c 	str.w	fp, [sp, #12]
   2006c:	4603      	mov	r3, r0
   2006e:	f7ff b9eb 	b.w	1f448 <_svfprintf_r+0x4c8>
   20072:	272d      	movs	r7, #45	; 0x2d
   20074:	2300      	movs	r3, #0
   20076:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2007a:	9306      	str	r3, [sp, #24]
   2007c:	f7ff b899 	b.w	1f1b2 <_svfprintf_r+0x232>
   20080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20082:	930e      	str	r3, [sp, #56]	; 0x38
   20084:	461a      	mov	r2, r3
   20086:	3303      	adds	r3, #3
   20088:	db04      	blt.n	20094 <_svfprintf_r+0x1114>
   2008a:	9b06      	ldr	r3, [sp, #24]
   2008c:	4619      	mov	r1, r3
   2008e:	4291      	cmp	r1, r2
   20090:	f6bf af10 	bge.w	1feb4 <_svfprintf_r+0xf34>
   20094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20096:	3b02      	subs	r3, #2
   20098:	930d      	str	r3, [sp, #52]	; 0x34
   2009a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2009e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   200a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   200a4:	3b01      	subs	r3, #1
   200a6:	2b00      	cmp	r3, #0
   200a8:	931d      	str	r3, [sp, #116]	; 0x74
   200aa:	bfbd      	ittte	lt
   200ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   200ae:	f1c3 0301 	rsblt	r3, r3, #1
   200b2:	222d      	movlt	r2, #45	; 0x2d
   200b4:	222b      	movge	r2, #43	; 0x2b
   200b6:	2b09      	cmp	r3, #9
   200b8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   200bc:	f340 811d 	ble.w	202fa <_svfprintf_r+0x137a>
   200c0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   200c4:	4620      	mov	r0, r4
   200c6:	4daf      	ldr	r5, [pc, #700]	; (20384 <_svfprintf_r+0x1404>)
   200c8:	e000      	b.n	200cc <_svfprintf_r+0x114c>
   200ca:	4610      	mov	r0, r2
   200cc:	fb85 1203 	smull	r1, r2, r5, r3
   200d0:	17d9      	asrs	r1, r3, #31
   200d2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   200d6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   200da:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   200de:	3230      	adds	r2, #48	; 0x30
   200e0:	2909      	cmp	r1, #9
   200e2:	f800 2c01 	strb.w	r2, [r0, #-1]
   200e6:	460b      	mov	r3, r1
   200e8:	f100 32ff 	add.w	r2, r0, #4294967295
   200ec:	dced      	bgt.n	200ca <_svfprintf_r+0x114a>
   200ee:	3330      	adds	r3, #48	; 0x30
   200f0:	3802      	subs	r0, #2
   200f2:	b2d9      	uxtb	r1, r3
   200f4:	4284      	cmp	r4, r0
   200f6:	f802 1c01 	strb.w	r1, [r2, #-1]
   200fa:	f240 8170 	bls.w	203de <_svfprintf_r+0x145e>
   200fe:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   20102:	4613      	mov	r3, r2
   20104:	e001      	b.n	2010a <_svfprintf_r+0x118a>
   20106:	f813 1b01 	ldrb.w	r1, [r3], #1
   2010a:	f800 1b01 	strb.w	r1, [r0], #1
   2010e:	42a3      	cmp	r3, r4
   20110:	d1f9      	bne.n	20106 <_svfprintf_r+0x1186>
   20112:	3301      	adds	r3, #1
   20114:	1a9b      	subs	r3, r3, r2
   20116:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   2011a:	4413      	add	r3, r2
   2011c:	aa1f      	add	r2, sp, #124	; 0x7c
   2011e:	1a9b      	subs	r3, r3, r2
   20120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20122:	9315      	str	r3, [sp, #84]	; 0x54
   20124:	2a01      	cmp	r2, #1
   20126:	4413      	add	r3, r2
   20128:	930a      	str	r3, [sp, #40]	; 0x28
   2012a:	f340 8120 	ble.w	2036e <_svfprintf_r+0x13ee>
   2012e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20130:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20132:	4413      	add	r3, r2
   20134:	930a      	str	r3, [sp, #40]	; 0x28
   20136:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2013a:	9304      	str	r3, [sp, #16]
   2013c:	2300      	movs	r3, #0
   2013e:	930e      	str	r3, [sp, #56]	; 0x38
   20140:	e6c8      	b.n	1fed4 <_svfprintf_r+0xf54>
   20142:	4623      	mov	r3, r4
   20144:	e6a7      	b.n	1fe96 <_svfprintf_r+0xf16>
   20146:	aa23      	add	r2, sp, #140	; 0x8c
   20148:	9907      	ldr	r1, [sp, #28]
   2014a:	9808      	ldr	r0, [sp, #32]
   2014c:	f002 f8ca 	bl	222e4 <__ssprint_r>
   20150:	2800      	cmp	r0, #0
   20152:	f47e afe7 	bne.w	1f124 <_svfprintf_r+0x1a4>
   20156:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20158:	46c8      	mov	r8, r9
   2015a:	e4d5      	b.n	1fb08 <_svfprintf_r+0xb88>
   2015c:	aa23      	add	r2, sp, #140	; 0x8c
   2015e:	9907      	ldr	r1, [sp, #28]
   20160:	9808      	ldr	r0, [sp, #32]
   20162:	f002 f8bf 	bl	222e4 <__ssprint_r>
   20166:	2800      	cmp	r0, #0
   20168:	f47e afdc 	bne.w	1f124 <_svfprintf_r+0x1a4>
   2016c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2016e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20170:	46c8      	mov	r8, r9
   20172:	e5af      	b.n	1fcd4 <_svfprintf_r+0xd54>
   20174:	aa23      	add	r2, sp, #140	; 0x8c
   20176:	9907      	ldr	r1, [sp, #28]
   20178:	9808      	ldr	r0, [sp, #32]
   2017a:	f002 f8b3 	bl	222e4 <__ssprint_r>
   2017e:	2800      	cmp	r0, #0
   20180:	f47e afd0 	bne.w	1f124 <_svfprintf_r+0x1a4>
   20184:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20188:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2018a:	1a9a      	subs	r2, r3, r2
   2018c:	46c8      	mov	r8, r9
   2018e:	e5b9      	b.n	1fd04 <_svfprintf_r+0xd84>
   20190:	9b06      	ldr	r3, [sp, #24]
   20192:	960e      	str	r6, [sp, #56]	; 0x38
   20194:	2b06      	cmp	r3, #6
   20196:	bf28      	it	cs
   20198:	2306      	movcs	r3, #6
   2019a:	9606      	str	r6, [sp, #24]
   2019c:	4637      	mov	r7, r6
   2019e:	9304      	str	r3, [sp, #16]
   201a0:	950b      	str	r5, [sp, #44]	; 0x2c
   201a2:	f8cd b00c 	str.w	fp, [sp, #12]
   201a6:	930a      	str	r3, [sp, #40]	; 0x28
   201a8:	4e77      	ldr	r6, [pc, #476]	; (20388 <_svfprintf_r+0x1408>)
   201aa:	f7ff b801 	b.w	1f1b0 <_svfprintf_r+0x230>
   201ae:	2306      	movs	r3, #6
   201b0:	9306      	str	r3, [sp, #24]
   201b2:	e62d      	b.n	1fe10 <_svfprintf_r+0xe90>
   201b4:	9c06      	ldr	r4, [sp, #24]
   201b6:	9808      	ldr	r0, [sp, #32]
   201b8:	aa21      	add	r2, sp, #132	; 0x84
   201ba:	ab1e      	add	r3, sp, #120	; 0x78
   201bc:	9201      	str	r2, [sp, #4]
   201be:	9300      	str	r3, [sp, #0]
   201c0:	4622      	mov	r2, r4
   201c2:	ab1d      	add	r3, sp, #116	; 0x74
   201c4:	2103      	movs	r1, #3
   201c6:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   201ca:	f000 faf5 	bl	207b8 <_dtoa_r>
   201ce:	4623      	mov	r3, r4
   201d0:	4606      	mov	r6, r0
   201d2:	1904      	adds	r4, r0, r4
   201d4:	461d      	mov	r5, r3
   201d6:	e734      	b.n	20042 <_svfprintf_r+0x10c2>
   201d8:	272d      	movs	r7, #45	; 0x2d
   201da:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   201de:	f7ff baca 	b.w	1f776 <_svfprintf_r+0x7f6>
   201e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   201e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   201e6:	4413      	add	r3, r2
   201e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   201ea:	930a      	str	r3, [sp, #40]	; 0x28
   201ec:	2a00      	cmp	r2, #0
   201ee:	f340 80b7 	ble.w	20360 <_svfprintf_r+0x13e0>
   201f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   201f6:	9304      	str	r3, [sp, #16]
   201f8:	2367      	movs	r3, #103	; 0x67
   201fa:	930d      	str	r3, [sp, #52]	; 0x34
   201fc:	e66a      	b.n	1fed4 <_svfprintf_r+0xf54>
   201fe:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20202:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20206:	9319      	str	r3, [sp, #100]	; 0x64
   20208:	232d      	movs	r3, #45	; 0x2d
   2020a:	9118      	str	r1, [sp, #96]	; 0x60
   2020c:	930c      	str	r3, [sp, #48]	; 0x30
   2020e:	e60c      	b.n	1fe2a <_svfprintf_r+0xeaa>
   20210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20212:	2b47      	cmp	r3, #71	; 0x47
   20214:	f47f ae2b 	bne.w	1fe6e <_svfprintf_r+0xeee>
   20218:	f01b 0f01 	tst.w	fp, #1
   2021c:	f47f af0b 	bne.w	20036 <_svfprintf_r+0x10b6>
   20220:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20222:	2f47      	cmp	r7, #71	; 0x47
   20224:	eba3 0306 	sub.w	r3, r3, r6
   20228:	930f      	str	r3, [sp, #60]	; 0x3c
   2022a:	f43f af29 	beq.w	20080 <_svfprintf_r+0x1100>
   2022e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20230:	930e      	str	r3, [sp, #56]	; 0x38
   20232:	e732      	b.n	2009a <_svfprintf_r+0x111a>
   20234:	2b00      	cmp	r3, #0
   20236:	f340 80af 	ble.w	20398 <_svfprintf_r+0x1418>
   2023a:	9a06      	ldr	r2, [sp, #24]
   2023c:	2a00      	cmp	r2, #0
   2023e:	d16b      	bne.n	20318 <_svfprintf_r+0x1398>
   20240:	f01b 0f01 	tst.w	fp, #1
   20244:	d168      	bne.n	20318 <_svfprintf_r+0x1398>
   20246:	9304      	str	r3, [sp, #16]
   20248:	930a      	str	r3, [sp, #40]	; 0x28
   2024a:	e643      	b.n	1fed4 <_svfprintf_r+0xf54>
   2024c:	9b06      	ldr	r3, [sp, #24]
   2024e:	9304      	str	r3, [sp, #16]
   20250:	930a      	str	r3, [sp, #40]	; 0x28
   20252:	9006      	str	r0, [sp, #24]
   20254:	950b      	str	r5, [sp, #44]	; 0x2c
   20256:	f8cd b00c 	str.w	fp, [sp, #12]
   2025a:	900e      	str	r0, [sp, #56]	; 0x38
   2025c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20260:	f7fe bfa6 	b.w	1f1b0 <_svfprintf_r+0x230>
   20264:	2000      	movs	r0, #0
   20266:	9006      	str	r0, [sp, #24]
   20268:	f7fe bee4 	b.w	1f034 <_svfprintf_r+0xb4>
   2026c:	424f      	negs	r7, r1
   2026e:	3110      	adds	r1, #16
   20270:	4d46      	ldr	r5, [pc, #280]	; (2038c <_svfprintf_r+0x140c>)
   20272:	da2b      	bge.n	202cc <_svfprintf_r+0x134c>
   20274:	2410      	movs	r4, #16
   20276:	f8dd b020 	ldr.w	fp, [sp, #32]
   2027a:	e004      	b.n	20286 <_svfprintf_r+0x1306>
   2027c:	f108 0808 	add.w	r8, r8, #8
   20280:	3f10      	subs	r7, #16
   20282:	2f10      	cmp	r7, #16
   20284:	dd22      	ble.n	202cc <_svfprintf_r+0x134c>
   20286:	3301      	adds	r3, #1
   20288:	3210      	adds	r2, #16
   2028a:	2b07      	cmp	r3, #7
   2028c:	9225      	str	r2, [sp, #148]	; 0x94
   2028e:	9324      	str	r3, [sp, #144]	; 0x90
   20290:	f8c8 5000 	str.w	r5, [r8]
   20294:	f8c8 4004 	str.w	r4, [r8, #4]
   20298:	ddf0      	ble.n	2027c <_svfprintf_r+0x12fc>
   2029a:	aa23      	add	r2, sp, #140	; 0x8c
   2029c:	9907      	ldr	r1, [sp, #28]
   2029e:	4658      	mov	r0, fp
   202a0:	f002 f820 	bl	222e4 <__ssprint_r>
   202a4:	2800      	cmp	r0, #0
   202a6:	f47e af3d 	bne.w	1f124 <_svfprintf_r+0x1a4>
   202aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
   202ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   202ae:	46c8      	mov	r8, r9
   202b0:	e7e6      	b.n	20280 <_svfprintf_r+0x1300>
   202b2:	aa23      	add	r2, sp, #140	; 0x8c
   202b4:	9907      	ldr	r1, [sp, #28]
   202b6:	9808      	ldr	r0, [sp, #32]
   202b8:	f002 f814 	bl	222e4 <__ssprint_r>
   202bc:	2800      	cmp	r0, #0
   202be:	f47e af31 	bne.w	1f124 <_svfprintf_r+0x1a4>
   202c2:	991d      	ldr	r1, [sp, #116]	; 0x74
   202c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   202c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   202c8:	46c8      	mov	r8, r9
   202ca:	e65f      	b.n	1ff8c <_svfprintf_r+0x100c>
   202cc:	3301      	adds	r3, #1
   202ce:	443a      	add	r2, r7
   202d0:	2b07      	cmp	r3, #7
   202d2:	e888 00a0 	stmia.w	r8, {r5, r7}
   202d6:	9225      	str	r2, [sp, #148]	; 0x94
   202d8:	9324      	str	r3, [sp, #144]	; 0x90
   202da:	f108 0808 	add.w	r8, r8, #8
   202de:	f77f ae58 	ble.w	1ff92 <_svfprintf_r+0x1012>
   202e2:	aa23      	add	r2, sp, #140	; 0x8c
   202e4:	9907      	ldr	r1, [sp, #28]
   202e6:	9808      	ldr	r0, [sp, #32]
   202e8:	f001 fffc 	bl	222e4 <__ssprint_r>
   202ec:	2800      	cmp	r0, #0
   202ee:	f47e af19 	bne.w	1f124 <_svfprintf_r+0x1a4>
   202f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   202f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   202f6:	46c8      	mov	r8, r9
   202f8:	e64b      	b.n	1ff92 <_svfprintf_r+0x1012>
   202fa:	3330      	adds	r3, #48	; 0x30
   202fc:	2230      	movs	r2, #48	; 0x30
   202fe:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20302:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20306:	ab20      	add	r3, sp, #128	; 0x80
   20308:	e708      	b.n	2011c <_svfprintf_r+0x119c>
   2030a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2030c:	e5c3      	b.n	1fe96 <_svfprintf_r+0xf16>
   2030e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20312:	4413      	add	r3, r2
   20314:	930a      	str	r3, [sp, #40]	; 0x28
   20316:	e76c      	b.n	201f2 <_svfprintf_r+0x1272>
   20318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2031a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2031c:	4413      	add	r3, r2
   2031e:	9a06      	ldr	r2, [sp, #24]
   20320:	441a      	add	r2, r3
   20322:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   20326:	920a      	str	r2, [sp, #40]	; 0x28
   20328:	9304      	str	r3, [sp, #16]
   2032a:	e5d3      	b.n	1fed4 <_svfprintf_r+0xf54>
   2032c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2032e:	4e18      	ldr	r6, [pc, #96]	; (20390 <_svfprintf_r+0x1410>)
   20330:	2b00      	cmp	r3, #0
   20332:	bfb6      	itet	lt
   20334:	272d      	movlt	r7, #45	; 0x2d
   20336:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   2033a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   2033e:	4b15      	ldr	r3, [pc, #84]	; (20394 <_svfprintf_r+0x1414>)
   20340:	f7ff ba1b 	b.w	1f77a <_svfprintf_r+0x7fa>
   20344:	2200      	movs	r2, #0
   20346:	2300      	movs	r3, #0
   20348:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   2034c:	f7fb fea6 	bl	1c09c <__aeabi_dcmpeq>
   20350:	2800      	cmp	r0, #0
   20352:	f47f ae7a 	bne.w	2004a <_svfprintf_r+0x10ca>
   20356:	f1c5 0501 	rsb	r5, r5, #1
   2035a:	951d      	str	r5, [sp, #116]	; 0x74
   2035c:	442c      	add	r4, r5
   2035e:	e587      	b.n	1fe70 <_svfprintf_r+0xef0>
   20360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20364:	f1c3 0301 	rsb	r3, r3, #1
   20368:	441a      	add	r2, r3
   2036a:	4613      	mov	r3, r2
   2036c:	e7d2      	b.n	20314 <_svfprintf_r+0x1394>
   2036e:	f01b 0301 	ands.w	r3, fp, #1
   20372:	930e      	str	r3, [sp, #56]	; 0x38
   20374:	f47f aedb 	bne.w	2012e <_svfprintf_r+0x11ae>
   20378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2037a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2037e:	9304      	str	r3, [sp, #16]
   20380:	e5a8      	b.n	1fed4 <_svfprintf_r+0xf54>
   20382:	bf00      	nop
   20384:	66666667 	.word	0x66666667
   20388:	00024cf8 	.word	0x00024cf8
   2038c:	00024d14 	.word	0x00024d14
   20390:	00024ccc 	.word	0x00024ccc
   20394:	00024cc8 	.word	0x00024cc8
   20398:	9b06      	ldr	r3, [sp, #24]
   2039a:	b913      	cbnz	r3, 203a2 <_svfprintf_r+0x1422>
   2039c:	f01b 0f01 	tst.w	fp, #1
   203a0:	d002      	beq.n	203a8 <_svfprintf_r+0x1428>
   203a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   203a4:	3301      	adds	r3, #1
   203a6:	e7ba      	b.n	2031e <_svfprintf_r+0x139e>
   203a8:	2301      	movs	r3, #1
   203aa:	e74c      	b.n	20246 <_svfprintf_r+0x12c6>
   203ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   203ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
   203b2:	6828      	ldr	r0, [r5, #0]
   203b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   203b8:	9006      	str	r0, [sp, #24]
   203ba:	4628      	mov	r0, r5
   203bc:	3004      	adds	r0, #4
   203be:	46a2      	mov	sl, r4
   203c0:	900b      	str	r0, [sp, #44]	; 0x2c
   203c2:	f7fe be35 	b.w	1f030 <_svfprintf_r+0xb0>
   203c6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   203ca:	f7ff b852 	b.w	1f472 <_svfprintf_r+0x4f2>
   203ce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   203d2:	f7ff b8de 	b.w	1f592 <_svfprintf_r+0x612>
   203d6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   203da:	f7ff ba07 	b.w	1f7ec <_svfprintf_r+0x86c>
   203de:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   203e2:	e69b      	b.n	2011c <_svfprintf_r+0x119c>
   203e4:	9a08      	ldr	r2, [sp, #32]
   203e6:	230c      	movs	r3, #12
   203e8:	6013      	str	r3, [r2, #0]
   203ea:	f04f 33ff 	mov.w	r3, #4294967295
   203ee:	9305      	str	r3, [sp, #20]
   203f0:	f7fe bea1 	b.w	1f136 <_svfprintf_r+0x1b6>
   203f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   203f8:	f7ff b986 	b.w	1f708 <_svfprintf_r+0x788>
   203fc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20400:	f7ff b962 	b.w	1f6c8 <_svfprintf_r+0x748>
   20404:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20408:	f7ff b945 	b.w	1f696 <_svfprintf_r+0x716>
   2040c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20410:	f7ff b8fe 	b.w	1f610 <_svfprintf_r+0x690>

00020414 <write>:
   20414:	b410      	push	{r4}
   20416:	4c04      	ldr	r4, [pc, #16]	; (20428 <write+0x14>)
   20418:	4613      	mov	r3, r2
   2041a:	460a      	mov	r2, r1
   2041c:	4601      	mov	r1, r0
   2041e:	6820      	ldr	r0, [r4, #0]
   20420:	f85d 4b04 	ldr.w	r4, [sp], #4
   20424:	f000 b8aa 	b.w	2057c <_write_r>
   20428:	200000f8 	.word	0x200000f8

0002042c <__utoa>:
   2042c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2042e:	f8df e078 	ldr.w	lr, [pc, #120]	; 204a8 <__utoa+0x7c>
   20432:	4616      	mov	r6, r2
   20434:	4604      	mov	r4, r0
   20436:	460f      	mov	r7, r1
   20438:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2043c:	b08b      	sub	sp, #44	; 0x2c
   2043e:	466d      	mov	r5, sp
   20440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20442:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20448:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2044c:	1eb3      	subs	r3, r6, #2
   2044e:	f845 0b04 	str.w	r0, [r5], #4
   20452:	2b22      	cmp	r3, #34	; 0x22
   20454:	7029      	strb	r1, [r5, #0]
   20456:	d822      	bhi.n	2049e <__utoa+0x72>
   20458:	1e7d      	subs	r5, r7, #1
   2045a:	4628      	mov	r0, r5
   2045c:	2200      	movs	r2, #0
   2045e:	e000      	b.n	20462 <__utoa+0x36>
   20460:	461a      	mov	r2, r3
   20462:	fbb4 f1f6 	udiv	r1, r4, r6
   20466:	ab0a      	add	r3, sp, #40	; 0x28
   20468:	fb06 4411 	mls	r4, r6, r1, r4
   2046c:	4423      	add	r3, r4
   2046e:	460c      	mov	r4, r1
   20470:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   20474:	f800 3f01 	strb.w	r3, [r0, #1]!
   20478:	1c53      	adds	r3, r2, #1
   2047a:	2900      	cmp	r1, #0
   2047c:	d1f0      	bne.n	20460 <__utoa+0x34>
   2047e:	54f9      	strb	r1, [r7, r3]
   20480:	18bb      	adds	r3, r7, r2
   20482:	b14a      	cbz	r2, 20498 <__utoa+0x6c>
   20484:	7819      	ldrb	r1, [r3, #0]
   20486:	7868      	ldrb	r0, [r5, #1]
   20488:	f805 1f01 	strb.w	r1, [r5, #1]!
   2048c:	3401      	adds	r4, #1
   2048e:	1b11      	subs	r1, r2, r4
   20490:	428c      	cmp	r4, r1
   20492:	f803 0901 	strb.w	r0, [r3], #-1
   20496:	dbf5      	blt.n	20484 <__utoa+0x58>
   20498:	4638      	mov	r0, r7
   2049a:	b00b      	add	sp, #44	; 0x2c
   2049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2049e:	2000      	movs	r0, #0
   204a0:	7038      	strb	r0, [r7, #0]
   204a2:	b00b      	add	sp, #44	; 0x2c
   204a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204a6:	bf00      	nop
   204a8:	00024d24 	.word	0x00024d24

000204ac <utoa>:
   204ac:	f7ff bfbe 	b.w	2042c <__utoa>

000204b0 <__swbuf_r>:
   204b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204b2:	460d      	mov	r5, r1
   204b4:	4614      	mov	r4, r2
   204b6:	4606      	mov	r6, r0
   204b8:	b110      	cbz	r0, 204c0 <__swbuf_r+0x10>
   204ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   204bc:	2b00      	cmp	r3, #0
   204be:	d04b      	beq.n	20558 <__swbuf_r+0xa8>
   204c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   204c4:	69a3      	ldr	r3, [r4, #24]
   204c6:	60a3      	str	r3, [r4, #8]
   204c8:	b291      	uxth	r1, r2
   204ca:	0708      	lsls	r0, r1, #28
   204cc:	d539      	bpl.n	20542 <__swbuf_r+0x92>
   204ce:	6923      	ldr	r3, [r4, #16]
   204d0:	2b00      	cmp	r3, #0
   204d2:	d036      	beq.n	20542 <__swbuf_r+0x92>
   204d4:	b2ed      	uxtb	r5, r5
   204d6:	0489      	lsls	r1, r1, #18
   204d8:	462f      	mov	r7, r5
   204da:	d515      	bpl.n	20508 <__swbuf_r+0x58>
   204dc:	6822      	ldr	r2, [r4, #0]
   204de:	6961      	ldr	r1, [r4, #20]
   204e0:	1ad3      	subs	r3, r2, r3
   204e2:	428b      	cmp	r3, r1
   204e4:	da1c      	bge.n	20520 <__swbuf_r+0x70>
   204e6:	3301      	adds	r3, #1
   204e8:	68a1      	ldr	r1, [r4, #8]
   204ea:	1c50      	adds	r0, r2, #1
   204ec:	3901      	subs	r1, #1
   204ee:	60a1      	str	r1, [r4, #8]
   204f0:	6020      	str	r0, [r4, #0]
   204f2:	7015      	strb	r5, [r2, #0]
   204f4:	6962      	ldr	r2, [r4, #20]
   204f6:	429a      	cmp	r2, r3
   204f8:	d01a      	beq.n	20530 <__swbuf_r+0x80>
   204fa:	89a3      	ldrh	r3, [r4, #12]
   204fc:	07db      	lsls	r3, r3, #31
   204fe:	d501      	bpl.n	20504 <__swbuf_r+0x54>
   20500:	2d0a      	cmp	r5, #10
   20502:	d015      	beq.n	20530 <__swbuf_r+0x80>
   20504:	4638      	mov	r0, r7
   20506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20508:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2050a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2050e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   20512:	81a2      	strh	r2, [r4, #12]
   20514:	6822      	ldr	r2, [r4, #0]
   20516:	6661      	str	r1, [r4, #100]	; 0x64
   20518:	6961      	ldr	r1, [r4, #20]
   2051a:	1ad3      	subs	r3, r2, r3
   2051c:	428b      	cmp	r3, r1
   2051e:	dbe2      	blt.n	204e6 <__swbuf_r+0x36>
   20520:	4621      	mov	r1, r4
   20522:	4630      	mov	r0, r6
   20524:	f001 f90e 	bl	21744 <_fflush_r>
   20528:	b940      	cbnz	r0, 2053c <__swbuf_r+0x8c>
   2052a:	6822      	ldr	r2, [r4, #0]
   2052c:	2301      	movs	r3, #1
   2052e:	e7db      	b.n	204e8 <__swbuf_r+0x38>
   20530:	4621      	mov	r1, r4
   20532:	4630      	mov	r0, r6
   20534:	f001 f906 	bl	21744 <_fflush_r>
   20538:	2800      	cmp	r0, #0
   2053a:	d0e3      	beq.n	20504 <__swbuf_r+0x54>
   2053c:	f04f 37ff 	mov.w	r7, #4294967295
   20540:	e7e0      	b.n	20504 <__swbuf_r+0x54>
   20542:	4621      	mov	r1, r4
   20544:	4630      	mov	r0, r6
   20546:	f000 f82f 	bl	205a8 <__swsetup_r>
   2054a:	2800      	cmp	r0, #0
   2054c:	d1f6      	bne.n	2053c <__swbuf_r+0x8c>
   2054e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20552:	6923      	ldr	r3, [r4, #16]
   20554:	b291      	uxth	r1, r2
   20556:	e7bd      	b.n	204d4 <__swbuf_r+0x24>
   20558:	f001 f94c 	bl	217f4 <__sinit>
   2055c:	e7b0      	b.n	204c0 <__swbuf_r+0x10>
   2055e:	bf00      	nop

00020560 <__ascii_wctomb>:
   20560:	b121      	cbz	r1, 2056c <__ascii_wctomb+0xc>
   20562:	2aff      	cmp	r2, #255	; 0xff
   20564:	d804      	bhi.n	20570 <__ascii_wctomb+0x10>
   20566:	700a      	strb	r2, [r1, #0]
   20568:	2001      	movs	r0, #1
   2056a:	4770      	bx	lr
   2056c:	4608      	mov	r0, r1
   2056e:	4770      	bx	lr
   20570:	238a      	movs	r3, #138	; 0x8a
   20572:	6003      	str	r3, [r0, #0]
   20574:	f04f 30ff 	mov.w	r0, #4294967295
   20578:	4770      	bx	lr
   2057a:	bf00      	nop

0002057c <_write_r>:
   2057c:	b570      	push	{r4, r5, r6, lr}
   2057e:	460d      	mov	r5, r1
   20580:	4c08      	ldr	r4, [pc, #32]	; (205a4 <_write_r+0x28>)
   20582:	4611      	mov	r1, r2
   20584:	4606      	mov	r6, r0
   20586:	461a      	mov	r2, r3
   20588:	4628      	mov	r0, r5
   2058a:	2300      	movs	r3, #0
   2058c:	6023      	str	r3, [r4, #0]
   2058e:	f002 f933 	bl	227f8 <_write>
   20592:	1c43      	adds	r3, r0, #1
   20594:	d000      	beq.n	20598 <_write_r+0x1c>
   20596:	bd70      	pop	{r4, r5, r6, pc}
   20598:	6823      	ldr	r3, [r4, #0]
   2059a:	2b00      	cmp	r3, #0
   2059c:	d0fb      	beq.n	20596 <_write_r+0x1a>
   2059e:	6033      	str	r3, [r6, #0]
   205a0:	bd70      	pop	{r4, r5, r6, pc}
   205a2:	bf00      	nop
   205a4:	20002390 	.word	0x20002390

000205a8 <__swsetup_r>:
   205a8:	b538      	push	{r3, r4, r5, lr}
   205aa:	4b30      	ldr	r3, [pc, #192]	; (2066c <__swsetup_r+0xc4>)
   205ac:	681b      	ldr	r3, [r3, #0]
   205ae:	4605      	mov	r5, r0
   205b0:	460c      	mov	r4, r1
   205b2:	b113      	cbz	r3, 205ba <__swsetup_r+0x12>
   205b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   205b6:	2a00      	cmp	r2, #0
   205b8:	d038      	beq.n	2062c <__swsetup_r+0x84>
   205ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   205be:	b293      	uxth	r3, r2
   205c0:	0718      	lsls	r0, r3, #28
   205c2:	d50c      	bpl.n	205de <__swsetup_r+0x36>
   205c4:	6920      	ldr	r0, [r4, #16]
   205c6:	b1a8      	cbz	r0, 205f4 <__swsetup_r+0x4c>
   205c8:	f013 0201 	ands.w	r2, r3, #1
   205cc:	d01e      	beq.n	2060c <__swsetup_r+0x64>
   205ce:	6963      	ldr	r3, [r4, #20]
   205d0:	2200      	movs	r2, #0
   205d2:	425b      	negs	r3, r3
   205d4:	61a3      	str	r3, [r4, #24]
   205d6:	60a2      	str	r2, [r4, #8]
   205d8:	b1f0      	cbz	r0, 20618 <__swsetup_r+0x70>
   205da:	2000      	movs	r0, #0
   205dc:	bd38      	pop	{r3, r4, r5, pc}
   205de:	06d9      	lsls	r1, r3, #27
   205e0:	d53c      	bpl.n	2065c <__swsetup_r+0xb4>
   205e2:	0758      	lsls	r0, r3, #29
   205e4:	d426      	bmi.n	20634 <__swsetup_r+0x8c>
   205e6:	6920      	ldr	r0, [r4, #16]
   205e8:	f042 0308 	orr.w	r3, r2, #8
   205ec:	81a3      	strh	r3, [r4, #12]
   205ee:	b29b      	uxth	r3, r3
   205f0:	2800      	cmp	r0, #0
   205f2:	d1e9      	bne.n	205c8 <__swsetup_r+0x20>
   205f4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   205f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   205fc:	d0e4      	beq.n	205c8 <__swsetup_r+0x20>
   205fe:	4628      	mov	r0, r5
   20600:	4621      	mov	r1, r4
   20602:	f001 fae5 	bl	21bd0 <__smakebuf_r>
   20606:	89a3      	ldrh	r3, [r4, #12]
   20608:	6920      	ldr	r0, [r4, #16]
   2060a:	e7dd      	b.n	205c8 <__swsetup_r+0x20>
   2060c:	0799      	lsls	r1, r3, #30
   2060e:	bf58      	it	pl
   20610:	6962      	ldrpl	r2, [r4, #20]
   20612:	60a2      	str	r2, [r4, #8]
   20614:	2800      	cmp	r0, #0
   20616:	d1e0      	bne.n	205da <__swsetup_r+0x32>
   20618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2061c:	061a      	lsls	r2, r3, #24
   2061e:	d5dd      	bpl.n	205dc <__swsetup_r+0x34>
   20620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20624:	81a3      	strh	r3, [r4, #12]
   20626:	f04f 30ff 	mov.w	r0, #4294967295
   2062a:	bd38      	pop	{r3, r4, r5, pc}
   2062c:	4618      	mov	r0, r3
   2062e:	f001 f8e1 	bl	217f4 <__sinit>
   20632:	e7c2      	b.n	205ba <__swsetup_r+0x12>
   20634:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20636:	b151      	cbz	r1, 2064e <__swsetup_r+0xa6>
   20638:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2063c:	4299      	cmp	r1, r3
   2063e:	d004      	beq.n	2064a <__swsetup_r+0xa2>
   20640:	4628      	mov	r0, r5
   20642:	f001 f979 	bl	21938 <_free_r>
   20646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2064a:	2300      	movs	r3, #0
   2064c:	6323      	str	r3, [r4, #48]	; 0x30
   2064e:	2300      	movs	r3, #0
   20650:	6920      	ldr	r0, [r4, #16]
   20652:	6063      	str	r3, [r4, #4]
   20654:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   20658:	6020      	str	r0, [r4, #0]
   2065a:	e7c5      	b.n	205e8 <__swsetup_r+0x40>
   2065c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   20660:	2309      	movs	r3, #9
   20662:	602b      	str	r3, [r5, #0]
   20664:	f04f 30ff 	mov.w	r0, #4294967295
   20668:	81a2      	strh	r2, [r4, #12]
   2066a:	bd38      	pop	{r3, r4, r5, pc}
   2066c:	200000f8 	.word	0x200000f8

00020670 <register_fini>:
   20670:	4b02      	ldr	r3, [pc, #8]	; (2067c <register_fini+0xc>)
   20672:	b113      	cbz	r3, 2067a <register_fini+0xa>
   20674:	4802      	ldr	r0, [pc, #8]	; (20680 <register_fini+0x10>)
   20676:	f000 b805 	b.w	20684 <atexit>
   2067a:	4770      	bx	lr
   2067c:	00000000 	.word	0x00000000
   20680:	00021865 	.word	0x00021865

00020684 <atexit>:
   20684:	2300      	movs	r3, #0
   20686:	4601      	mov	r1, r0
   20688:	461a      	mov	r2, r3
   2068a:	4618      	mov	r0, r3
   2068c:	f001 bea8 	b.w	223e0 <__register_exitproc>

00020690 <quorem>:
   20690:	6902      	ldr	r2, [r0, #16]
   20692:	690b      	ldr	r3, [r1, #16]
   20694:	4293      	cmp	r3, r2
   20696:	f300 808d 	bgt.w	207b4 <quorem+0x124>
   2069a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2069e:	f103 38ff 	add.w	r8, r3, #4294967295
   206a2:	f101 0714 	add.w	r7, r1, #20
   206a6:	f100 0b14 	add.w	fp, r0, #20
   206aa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   206ae:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   206b2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   206b6:	b083      	sub	sp, #12
   206b8:	3201      	adds	r2, #1
   206ba:	fbb3 f9f2 	udiv	r9, r3, r2
   206be:	eb0b 0304 	add.w	r3, fp, r4
   206c2:	9400      	str	r4, [sp, #0]
   206c4:	eb07 0a04 	add.w	sl, r7, r4
   206c8:	9301      	str	r3, [sp, #4]
   206ca:	f1b9 0f00 	cmp.w	r9, #0
   206ce:	d039      	beq.n	20744 <quorem+0xb4>
   206d0:	2500      	movs	r5, #0
   206d2:	462e      	mov	r6, r5
   206d4:	46bc      	mov	ip, r7
   206d6:	46de      	mov	lr, fp
   206d8:	f85c 4b04 	ldr.w	r4, [ip], #4
   206dc:	f8de 3000 	ldr.w	r3, [lr]
   206e0:	b2a2      	uxth	r2, r4
   206e2:	fb09 5502 	mla	r5, r9, r2, r5
   206e6:	0c22      	lsrs	r2, r4, #16
   206e8:	0c2c      	lsrs	r4, r5, #16
   206ea:	fb09 4202 	mla	r2, r9, r2, r4
   206ee:	b2ad      	uxth	r5, r5
   206f0:	1b75      	subs	r5, r6, r5
   206f2:	b296      	uxth	r6, r2
   206f4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   206f8:	fa15 f383 	uxtah	r3, r5, r3
   206fc:	eb06 4623 	add.w	r6, r6, r3, asr #16
   20700:	b29b      	uxth	r3, r3
   20702:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20706:	45e2      	cmp	sl, ip
   20708:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2070c:	f84e 3b04 	str.w	r3, [lr], #4
   20710:	ea4f 4626 	mov.w	r6, r6, asr #16
   20714:	d2e0      	bcs.n	206d8 <quorem+0x48>
   20716:	9b00      	ldr	r3, [sp, #0]
   20718:	f85b 3003 	ldr.w	r3, [fp, r3]
   2071c:	b993      	cbnz	r3, 20744 <quorem+0xb4>
   2071e:	9c01      	ldr	r4, [sp, #4]
   20720:	1f23      	subs	r3, r4, #4
   20722:	459b      	cmp	fp, r3
   20724:	d20c      	bcs.n	20740 <quorem+0xb0>
   20726:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2072a:	b94b      	cbnz	r3, 20740 <quorem+0xb0>
   2072c:	f1a4 0308 	sub.w	r3, r4, #8
   20730:	e002      	b.n	20738 <quorem+0xa8>
   20732:	681a      	ldr	r2, [r3, #0]
   20734:	3b04      	subs	r3, #4
   20736:	b91a      	cbnz	r2, 20740 <quorem+0xb0>
   20738:	459b      	cmp	fp, r3
   2073a:	f108 38ff 	add.w	r8, r8, #4294967295
   2073e:	d3f8      	bcc.n	20732 <quorem+0xa2>
   20740:	f8c0 8010 	str.w	r8, [r0, #16]
   20744:	4604      	mov	r4, r0
   20746:	f001 fc8b 	bl	22060 <__mcmp>
   2074a:	2800      	cmp	r0, #0
   2074c:	db2e      	blt.n	207ac <quorem+0x11c>
   2074e:	f109 0901 	add.w	r9, r9, #1
   20752:	465d      	mov	r5, fp
   20754:	2300      	movs	r3, #0
   20756:	f857 1b04 	ldr.w	r1, [r7], #4
   2075a:	6828      	ldr	r0, [r5, #0]
   2075c:	b28a      	uxth	r2, r1
   2075e:	1a9a      	subs	r2, r3, r2
   20760:	0c0b      	lsrs	r3, r1, #16
   20762:	fa12 f280 	uxtah	r2, r2, r0
   20766:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2076a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2076e:	b292      	uxth	r2, r2
   20770:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   20774:	45ba      	cmp	sl, r7
   20776:	f845 2b04 	str.w	r2, [r5], #4
   2077a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2077e:	d2ea      	bcs.n	20756 <quorem+0xc6>
   20780:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   20784:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   20788:	b982      	cbnz	r2, 207ac <quorem+0x11c>
   2078a:	1f1a      	subs	r2, r3, #4
   2078c:	4593      	cmp	fp, r2
   2078e:	d20b      	bcs.n	207a8 <quorem+0x118>
   20790:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20794:	b942      	cbnz	r2, 207a8 <quorem+0x118>
   20796:	3b08      	subs	r3, #8
   20798:	e002      	b.n	207a0 <quorem+0x110>
   2079a:	681a      	ldr	r2, [r3, #0]
   2079c:	3b04      	subs	r3, #4
   2079e:	b91a      	cbnz	r2, 207a8 <quorem+0x118>
   207a0:	459b      	cmp	fp, r3
   207a2:	f108 38ff 	add.w	r8, r8, #4294967295
   207a6:	d3f8      	bcc.n	2079a <quorem+0x10a>
   207a8:	f8c4 8010 	str.w	r8, [r4, #16]
   207ac:	4648      	mov	r0, r9
   207ae:	b003      	add	sp, #12
   207b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207b4:	2000      	movs	r0, #0
   207b6:	4770      	bx	lr

000207b8 <_dtoa_r>:
   207b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207bc:	ec57 6b10 	vmov	r6, r7, d0
   207c0:	b097      	sub	sp, #92	; 0x5c
   207c2:	6c05      	ldr	r5, [r0, #64]	; 0x40
   207c4:	9102      	str	r1, [sp, #8]
   207c6:	4604      	mov	r4, r0
   207c8:	4693      	mov	fp, r2
   207ca:	9303      	str	r3, [sp, #12]
   207cc:	e9cd 6700 	strd	r6, r7, [sp]
   207d0:	b14d      	cbz	r5, 207e6 <_dtoa_r+0x2e>
   207d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   207d4:	606a      	str	r2, [r5, #4]
   207d6:	2301      	movs	r3, #1
   207d8:	4093      	lsls	r3, r2
   207da:	60ab      	str	r3, [r5, #8]
   207dc:	4629      	mov	r1, r5
   207de:	f001 fa67 	bl	21cb0 <_Bfree>
   207e2:	2300      	movs	r3, #0
   207e4:	6423      	str	r3, [r4, #64]	; 0x40
   207e6:	e9dd 2300 	ldrd	r2, r3, [sp]
   207ea:	2b00      	cmp	r3, #0
   207ec:	4699      	mov	r9, r3
   207ee:	db38      	blt.n	20862 <_dtoa_r+0xaa>
   207f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   207f2:	2300      	movs	r3, #0
   207f4:	6013      	str	r3, [r2, #0]
   207f6:	4ba0      	ldr	r3, [pc, #640]	; (20a78 <_dtoa_r+0x2c0>)
   207f8:	ea33 0309 	bics.w	r3, r3, r9
   207fc:	d017      	beq.n	2082e <_dtoa_r+0x76>
   207fe:	e9dd 6700 	ldrd	r6, r7, [sp]
   20802:	2200      	movs	r2, #0
   20804:	2300      	movs	r3, #0
   20806:	4630      	mov	r0, r6
   20808:	4639      	mov	r1, r7
   2080a:	f7fb fc47 	bl	1c09c <__aeabi_dcmpeq>
   2080e:	4680      	mov	r8, r0
   20810:	2800      	cmp	r0, #0
   20812:	d02f      	beq.n	20874 <_dtoa_r+0xbc>
   20814:	9a03      	ldr	r2, [sp, #12]
   20816:	2301      	movs	r3, #1
   20818:	6013      	str	r3, [r2, #0]
   2081a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2081c:	2b00      	cmp	r3, #0
   2081e:	f000 80c4 	beq.w	209aa <_dtoa_r+0x1f2>
   20822:	4896      	ldr	r0, [pc, #600]	; (20a7c <_dtoa_r+0x2c4>)
   20824:	6018      	str	r0, [r3, #0]
   20826:	3801      	subs	r0, #1
   20828:	b017      	add	sp, #92	; 0x5c
   2082a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2082e:	9a03      	ldr	r2, [sp, #12]
   20830:	f242 730f 	movw	r3, #9999	; 0x270f
   20834:	6013      	str	r3, [r2, #0]
   20836:	9b00      	ldr	r3, [sp, #0]
   20838:	b96b      	cbnz	r3, 20856 <_dtoa_r+0x9e>
   2083a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2083e:	b953      	cbnz	r3, 20856 <_dtoa_r+0x9e>
   20840:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20842:	488f      	ldr	r0, [pc, #572]	; (20a80 <_dtoa_r+0x2c8>)
   20844:	2b00      	cmp	r3, #0
   20846:	d0ef      	beq.n	20828 <_dtoa_r+0x70>
   20848:	f100 0308 	add.w	r3, r0, #8
   2084c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2084e:	6013      	str	r3, [r2, #0]
   20850:	b017      	add	sp, #92	; 0x5c
   20852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20856:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20858:	488a      	ldr	r0, [pc, #552]	; (20a84 <_dtoa_r+0x2cc>)
   2085a:	2b00      	cmp	r3, #0
   2085c:	d0e4      	beq.n	20828 <_dtoa_r+0x70>
   2085e:	1cc3      	adds	r3, r0, #3
   20860:	e7f4      	b.n	2084c <_dtoa_r+0x94>
   20862:	9a01      	ldr	r2, [sp, #4]
   20864:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   20868:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2086a:	f8cd 9004 	str.w	r9, [sp, #4]
   2086e:	2301      	movs	r3, #1
   20870:	6013      	str	r3, [r2, #0]
   20872:	e7c0      	b.n	207f6 <_dtoa_r+0x3e>
   20874:	aa14      	add	r2, sp, #80	; 0x50
   20876:	a915      	add	r1, sp, #84	; 0x54
   20878:	ec47 6b10 	vmov	d0, r6, r7
   2087c:	4620      	mov	r0, r4
   2087e:	f001 fc8f 	bl	221a0 <__d2b>
   20882:	ea5f 5519 	movs.w	r5, r9, lsr #20
   20886:	4682      	mov	sl, r0
   20888:	d073      	beq.n	20972 <_dtoa_r+0x1ba>
   2088a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2088e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   20892:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20896:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2089a:	4630      	mov	r0, r6
   2089c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   208a0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   208a4:	2200      	movs	r2, #0
   208a6:	4b78      	ldr	r3, [pc, #480]	; (20a88 <_dtoa_r+0x2d0>)
   208a8:	f7fa ffdc 	bl	1b864 <__aeabi_dsub>
   208ac:	a36c      	add	r3, pc, #432	; (adr r3, 20a60 <_dtoa_r+0x2a8>)
   208ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   208b2:	f7fb f98b 	bl	1bbcc <__aeabi_dmul>
   208b6:	a36c      	add	r3, pc, #432	; (adr r3, 20a68 <_dtoa_r+0x2b0>)
   208b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   208bc:	f7fa ffd4 	bl	1b868 <__adddf3>
   208c0:	4606      	mov	r6, r0
   208c2:	4628      	mov	r0, r5
   208c4:	460f      	mov	r7, r1
   208c6:	f7fb f91b 	bl	1bb00 <__aeabi_i2d>
   208ca:	a369      	add	r3, pc, #420	; (adr r3, 20a70 <_dtoa_r+0x2b8>)
   208cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   208d0:	f7fb f97c 	bl	1bbcc <__aeabi_dmul>
   208d4:	4602      	mov	r2, r0
   208d6:	460b      	mov	r3, r1
   208d8:	4630      	mov	r0, r6
   208da:	4639      	mov	r1, r7
   208dc:	f7fa ffc4 	bl	1b868 <__adddf3>
   208e0:	4606      	mov	r6, r0
   208e2:	460f      	mov	r7, r1
   208e4:	f7fb fc0c 	bl	1c100 <__aeabi_d2iz>
   208e8:	2200      	movs	r2, #0
   208ea:	9004      	str	r0, [sp, #16]
   208ec:	2300      	movs	r3, #0
   208ee:	4630      	mov	r0, r6
   208f0:	4639      	mov	r1, r7
   208f2:	f7fb fbdd 	bl	1c0b0 <__aeabi_dcmplt>
   208f6:	2800      	cmp	r0, #0
   208f8:	f040 816f 	bne.w	20bda <_dtoa_r+0x422>
   208fc:	9e04      	ldr	r6, [sp, #16]
   208fe:	2e16      	cmp	r6, #22
   20900:	f200 8159 	bhi.w	20bb6 <_dtoa_r+0x3fe>
   20904:	4b61      	ldr	r3, [pc, #388]	; (20a8c <_dtoa_r+0x2d4>)
   20906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2090a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2090e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20912:	f7fb fbeb 	bl	1c0ec <__aeabi_dcmpgt>
   20916:	2800      	cmp	r0, #0
   20918:	f000 81c4 	beq.w	20ca4 <_dtoa_r+0x4ec>
   2091c:	1e73      	subs	r3, r6, #1
   2091e:	9304      	str	r3, [sp, #16]
   20920:	2300      	movs	r3, #0
   20922:	930c      	str	r3, [sp, #48]	; 0x30
   20924:	eba8 0505 	sub.w	r5, r8, r5
   20928:	1e6b      	subs	r3, r5, #1
   2092a:	9305      	str	r3, [sp, #20]
   2092c:	f100 814f 	bmi.w	20bce <_dtoa_r+0x416>
   20930:	2300      	movs	r3, #0
   20932:	9306      	str	r3, [sp, #24]
   20934:	9b04      	ldr	r3, [sp, #16]
   20936:	2b00      	cmp	r3, #0
   20938:	f2c0 8140 	blt.w	20bbc <_dtoa_r+0x404>
   2093c:	9a05      	ldr	r2, [sp, #20]
   2093e:	930b      	str	r3, [sp, #44]	; 0x2c
   20940:	4611      	mov	r1, r2
   20942:	4419      	add	r1, r3
   20944:	2300      	movs	r3, #0
   20946:	9105      	str	r1, [sp, #20]
   20948:	930a      	str	r3, [sp, #40]	; 0x28
   2094a:	9b02      	ldr	r3, [sp, #8]
   2094c:	2b09      	cmp	r3, #9
   2094e:	d82e      	bhi.n	209ae <_dtoa_r+0x1f6>
   20950:	2b05      	cmp	r3, #5
   20952:	f340 8651 	ble.w	215f8 <_dtoa_r+0xe40>
   20956:	3b04      	subs	r3, #4
   20958:	9302      	str	r3, [sp, #8]
   2095a:	2700      	movs	r7, #0
   2095c:	9b02      	ldr	r3, [sp, #8]
   2095e:	3b02      	subs	r3, #2
   20960:	2b03      	cmp	r3, #3
   20962:	f200 8633 	bhi.w	215cc <_dtoa_r+0xe14>
   20966:	e8df f013 	tbh	[pc, r3, lsl #1]
   2096a:	03d6      	.short	0x03d6
   2096c:	03e302cb 	.word	0x03e302cb
   20970:	0464      	.short	0x0464
   20972:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   20976:	9d15      	ldr	r5, [sp, #84]	; 0x54
   20978:	4445      	add	r5, r8
   2097a:	f205 4332 	addw	r3, r5, #1074	; 0x432
   2097e:	2b20      	cmp	r3, #32
   20980:	f340 818a 	ble.w	20c98 <_dtoa_r+0x4e0>
   20984:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20988:	fa09 f903 	lsl.w	r9, r9, r3
   2098c:	9b00      	ldr	r3, [sp, #0]
   2098e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   20992:	fa23 f000 	lsr.w	r0, r3, r0
   20996:	ea40 0009 	orr.w	r0, r0, r9
   2099a:	f7fb f8a1 	bl	1bae0 <__aeabi_ui2d>
   2099e:	2301      	movs	r3, #1
   209a0:	3d01      	subs	r5, #1
   209a2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   209a6:	9310      	str	r3, [sp, #64]	; 0x40
   209a8:	e77c      	b.n	208a4 <_dtoa_r+0xec>
   209aa:	4839      	ldr	r0, [pc, #228]	; (20a90 <_dtoa_r+0x2d8>)
   209ac:	e73c      	b.n	20828 <_dtoa_r+0x70>
   209ae:	2100      	movs	r1, #0
   209b0:	6461      	str	r1, [r4, #68]	; 0x44
   209b2:	4620      	mov	r0, r4
   209b4:	468b      	mov	fp, r1
   209b6:	f001 f955 	bl	21c64 <_Balloc>
   209ba:	f04f 33ff 	mov.w	r3, #4294967295
   209be:	9308      	str	r3, [sp, #32]
   209c0:	930d      	str	r3, [sp, #52]	; 0x34
   209c2:	2301      	movs	r3, #1
   209c4:	9007      	str	r0, [sp, #28]
   209c6:	6420      	str	r0, [r4, #64]	; 0x40
   209c8:	f8cd b008 	str.w	fp, [sp, #8]
   209cc:	9309      	str	r3, [sp, #36]	; 0x24
   209ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   209d0:	2b00      	cmp	r3, #0
   209d2:	f2c0 80d0 	blt.w	20b76 <_dtoa_r+0x3be>
   209d6:	9a04      	ldr	r2, [sp, #16]
   209d8:	2a0e      	cmp	r2, #14
   209da:	f300 80cc 	bgt.w	20b76 <_dtoa_r+0x3be>
   209de:	4b2b      	ldr	r3, [pc, #172]	; (20a8c <_dtoa_r+0x2d4>)
   209e0:	f1bb 0f00 	cmp.w	fp, #0
   209e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   209e8:	e9d3 8900 	ldrd	r8, r9, [r3]
   209ec:	f2c0 83be 	blt.w	2116c <_dtoa_r+0x9b4>
   209f0:	e9dd 6700 	ldrd	r6, r7, [sp]
   209f4:	4642      	mov	r2, r8
   209f6:	464b      	mov	r3, r9
   209f8:	4630      	mov	r0, r6
   209fa:	4639      	mov	r1, r7
   209fc:	f7fb fa10 	bl	1be20 <__aeabi_ddiv>
   20a00:	f7fb fb7e 	bl	1c100 <__aeabi_d2iz>
   20a04:	4683      	mov	fp, r0
   20a06:	f7fb f87b 	bl	1bb00 <__aeabi_i2d>
   20a0a:	4642      	mov	r2, r8
   20a0c:	464b      	mov	r3, r9
   20a0e:	f7fb f8dd 	bl	1bbcc <__aeabi_dmul>
   20a12:	460b      	mov	r3, r1
   20a14:	4602      	mov	r2, r0
   20a16:	4639      	mov	r1, r7
   20a18:	4630      	mov	r0, r6
   20a1a:	f7fa ff23 	bl	1b864 <__aeabi_dsub>
   20a1e:	9d07      	ldr	r5, [sp, #28]
   20a20:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20a24:	702b      	strb	r3, [r5, #0]
   20a26:	9b08      	ldr	r3, [sp, #32]
   20a28:	2b01      	cmp	r3, #1
   20a2a:	4606      	mov	r6, r0
   20a2c:	460f      	mov	r7, r1
   20a2e:	f105 0501 	add.w	r5, r5, #1
   20a32:	d061      	beq.n	20af8 <_dtoa_r+0x340>
   20a34:	2200      	movs	r2, #0
   20a36:	4b17      	ldr	r3, [pc, #92]	; (20a94 <_dtoa_r+0x2dc>)
   20a38:	f7fb f8c8 	bl	1bbcc <__aeabi_dmul>
   20a3c:	2200      	movs	r2, #0
   20a3e:	2300      	movs	r3, #0
   20a40:	4606      	mov	r6, r0
   20a42:	460f      	mov	r7, r1
   20a44:	f7fb fb2a 	bl	1c09c <__aeabi_dcmpeq>
   20a48:	2800      	cmp	r0, #0
   20a4a:	f040 8081 	bne.w	20b50 <_dtoa_r+0x398>
   20a4e:	f8cd a000 	str.w	sl, [sp]
   20a52:	9402      	str	r4, [sp, #8]
   20a54:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20a58:	9c08      	ldr	r4, [sp, #32]
   20a5a:	e028      	b.n	20aae <_dtoa_r+0x2f6>
   20a5c:	f3af 8000 	nop.w
   20a60:	636f4361 	.word	0x636f4361
   20a64:	3fd287a7 	.word	0x3fd287a7
   20a68:	8b60c8b3 	.word	0x8b60c8b3
   20a6c:	3fc68a28 	.word	0x3fc68a28
   20a70:	509f79fb 	.word	0x509f79fb
   20a74:	3fd34413 	.word	0x3fd34413
   20a78:	7ff00000 	.word	0x7ff00000
   20a7c:	00024d01 	.word	0x00024d01
   20a80:	00024e50 	.word	0x00024e50
   20a84:	00024e5c 	.word	0x00024e5c
   20a88:	3ff80000 	.word	0x3ff80000
   20a8c:	00024e88 	.word	0x00024e88
   20a90:	00024d00 	.word	0x00024d00
   20a94:	40240000 	.word	0x40240000
   20a98:	f7fb f898 	bl	1bbcc <__aeabi_dmul>
   20a9c:	2200      	movs	r2, #0
   20a9e:	2300      	movs	r3, #0
   20aa0:	4606      	mov	r6, r0
   20aa2:	460f      	mov	r7, r1
   20aa4:	f7fb fafa 	bl	1c09c <__aeabi_dcmpeq>
   20aa8:	2800      	cmp	r0, #0
   20aaa:	f040 83c5 	bne.w	21238 <_dtoa_r+0xa80>
   20aae:	4642      	mov	r2, r8
   20ab0:	464b      	mov	r3, r9
   20ab2:	4630      	mov	r0, r6
   20ab4:	4639      	mov	r1, r7
   20ab6:	f7fb f9b3 	bl	1be20 <__aeabi_ddiv>
   20aba:	f7fb fb21 	bl	1c100 <__aeabi_d2iz>
   20abe:	4683      	mov	fp, r0
   20ac0:	f7fb f81e 	bl	1bb00 <__aeabi_i2d>
   20ac4:	4642      	mov	r2, r8
   20ac6:	464b      	mov	r3, r9
   20ac8:	f7fb f880 	bl	1bbcc <__aeabi_dmul>
   20acc:	4602      	mov	r2, r0
   20ace:	460b      	mov	r3, r1
   20ad0:	4630      	mov	r0, r6
   20ad2:	4639      	mov	r1, r7
   20ad4:	f7fa fec6 	bl	1b864 <__aeabi_dsub>
   20ad8:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   20adc:	f805 eb01 	strb.w	lr, [r5], #1
   20ae0:	eba5 0e0a 	sub.w	lr, r5, sl
   20ae4:	45a6      	cmp	lr, r4
   20ae6:	4606      	mov	r6, r0
   20ae8:	460f      	mov	r7, r1
   20aea:	f04f 0200 	mov.w	r2, #0
   20aee:	4b6e      	ldr	r3, [pc, #440]	; (20ca8 <_dtoa_r+0x4f0>)
   20af0:	d1d2      	bne.n	20a98 <_dtoa_r+0x2e0>
   20af2:	f8dd a000 	ldr.w	sl, [sp]
   20af6:	9c02      	ldr	r4, [sp, #8]
   20af8:	4632      	mov	r2, r6
   20afa:	463b      	mov	r3, r7
   20afc:	4630      	mov	r0, r6
   20afe:	4639      	mov	r1, r7
   20b00:	f7fa feb2 	bl	1b868 <__adddf3>
   20b04:	4606      	mov	r6, r0
   20b06:	460f      	mov	r7, r1
   20b08:	4602      	mov	r2, r0
   20b0a:	460b      	mov	r3, r1
   20b0c:	4640      	mov	r0, r8
   20b0e:	4649      	mov	r1, r9
   20b10:	f7fb face 	bl	1c0b0 <__aeabi_dcmplt>
   20b14:	b948      	cbnz	r0, 20b2a <_dtoa_r+0x372>
   20b16:	4632      	mov	r2, r6
   20b18:	463b      	mov	r3, r7
   20b1a:	4640      	mov	r0, r8
   20b1c:	4649      	mov	r1, r9
   20b1e:	f7fb fabd 	bl	1c09c <__aeabi_dcmpeq>
   20b22:	b1a8      	cbz	r0, 20b50 <_dtoa_r+0x398>
   20b24:	f01b 0f01 	tst.w	fp, #1
   20b28:	d012      	beq.n	20b50 <_dtoa_r+0x398>
   20b2a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   20b2e:	9a07      	ldr	r2, [sp, #28]
   20b30:	1e6b      	subs	r3, r5, #1
   20b32:	e004      	b.n	20b3e <_dtoa_r+0x386>
   20b34:	429a      	cmp	r2, r3
   20b36:	f000 842d 	beq.w	21394 <_dtoa_r+0xbdc>
   20b3a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   20b3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20b42:	f103 0501 	add.w	r5, r3, #1
   20b46:	d0f5      	beq.n	20b34 <_dtoa_r+0x37c>
   20b48:	f108 0801 	add.w	r8, r8, #1
   20b4c:	f883 8000 	strb.w	r8, [r3]
   20b50:	4651      	mov	r1, sl
   20b52:	4620      	mov	r0, r4
   20b54:	f001 f8ac 	bl	21cb0 <_Bfree>
   20b58:	2200      	movs	r2, #0
   20b5a:	9b04      	ldr	r3, [sp, #16]
   20b5c:	702a      	strb	r2, [r5, #0]
   20b5e:	9a03      	ldr	r2, [sp, #12]
   20b60:	3301      	adds	r3, #1
   20b62:	6013      	str	r3, [r2, #0]
   20b64:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20b66:	2b00      	cmp	r3, #0
   20b68:	f000 83a3 	beq.w	212b2 <_dtoa_r+0xafa>
   20b6c:	9807      	ldr	r0, [sp, #28]
   20b6e:	601d      	str	r5, [r3, #0]
   20b70:	b017      	add	sp, #92	; 0x5c
   20b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20b78:	2a00      	cmp	r2, #0
   20b7a:	d040      	beq.n	20bfe <_dtoa_r+0x446>
   20b7c:	9a02      	ldr	r2, [sp, #8]
   20b7e:	2a01      	cmp	r2, #1
   20b80:	f340 831c 	ble.w	211bc <_dtoa_r+0xa04>
   20b84:	9b08      	ldr	r3, [sp, #32]
   20b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20b88:	1e5f      	subs	r7, r3, #1
   20b8a:	42ba      	cmp	r2, r7
   20b8c:	f2c0 8394 	blt.w	212b8 <_dtoa_r+0xb00>
   20b90:	1bd7      	subs	r7, r2, r7
   20b92:	9b08      	ldr	r3, [sp, #32]
   20b94:	2b00      	cmp	r3, #0
   20b96:	f2c0 847e 	blt.w	21496 <_dtoa_r+0xcde>
   20b9a:	9d06      	ldr	r5, [sp, #24]
   20b9c:	9b08      	ldr	r3, [sp, #32]
   20b9e:	9a06      	ldr	r2, [sp, #24]
   20ba0:	441a      	add	r2, r3
   20ba2:	9206      	str	r2, [sp, #24]
   20ba4:	9a05      	ldr	r2, [sp, #20]
   20ba6:	2101      	movs	r1, #1
   20ba8:	441a      	add	r2, r3
   20baa:	4620      	mov	r0, r4
   20bac:	9205      	str	r2, [sp, #20]
   20bae:	f001 f919 	bl	21de4 <__i2b>
   20bb2:	4606      	mov	r6, r0
   20bb4:	e026      	b.n	20c04 <_dtoa_r+0x44c>
   20bb6:	2301      	movs	r3, #1
   20bb8:	930c      	str	r3, [sp, #48]	; 0x30
   20bba:	e6b3      	b.n	20924 <_dtoa_r+0x16c>
   20bbc:	9a06      	ldr	r2, [sp, #24]
   20bbe:	9b04      	ldr	r3, [sp, #16]
   20bc0:	1ad2      	subs	r2, r2, r3
   20bc2:	425b      	negs	r3, r3
   20bc4:	930a      	str	r3, [sp, #40]	; 0x28
   20bc6:	2300      	movs	r3, #0
   20bc8:	9206      	str	r2, [sp, #24]
   20bca:	930b      	str	r3, [sp, #44]	; 0x2c
   20bcc:	e6bd      	b.n	2094a <_dtoa_r+0x192>
   20bce:	f1c5 0301 	rsb	r3, r5, #1
   20bd2:	9306      	str	r3, [sp, #24]
   20bd4:	2300      	movs	r3, #0
   20bd6:	9305      	str	r3, [sp, #20]
   20bd8:	e6ac      	b.n	20934 <_dtoa_r+0x17c>
   20bda:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20bde:	4648      	mov	r0, r9
   20be0:	f7fa ff8e 	bl	1bb00 <__aeabi_i2d>
   20be4:	4602      	mov	r2, r0
   20be6:	460b      	mov	r3, r1
   20be8:	4630      	mov	r0, r6
   20bea:	4639      	mov	r1, r7
   20bec:	f7fb fa56 	bl	1c09c <__aeabi_dcmpeq>
   20bf0:	2800      	cmp	r0, #0
   20bf2:	f47f ae83 	bne.w	208fc <_dtoa_r+0x144>
   20bf6:	f109 33ff 	add.w	r3, r9, #4294967295
   20bfa:	9304      	str	r3, [sp, #16]
   20bfc:	e67e      	b.n	208fc <_dtoa_r+0x144>
   20bfe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20c00:	9d06      	ldr	r5, [sp, #24]
   20c02:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20c04:	2d00      	cmp	r5, #0
   20c06:	dd0c      	ble.n	20c22 <_dtoa_r+0x46a>
   20c08:	9905      	ldr	r1, [sp, #20]
   20c0a:	2900      	cmp	r1, #0
   20c0c:	460b      	mov	r3, r1
   20c0e:	dd08      	ble.n	20c22 <_dtoa_r+0x46a>
   20c10:	42a9      	cmp	r1, r5
   20c12:	9a06      	ldr	r2, [sp, #24]
   20c14:	bfa8      	it	ge
   20c16:	462b      	movge	r3, r5
   20c18:	1ad2      	subs	r2, r2, r3
   20c1a:	1aed      	subs	r5, r5, r3
   20c1c:	1acb      	subs	r3, r1, r3
   20c1e:	9206      	str	r2, [sp, #24]
   20c20:	9305      	str	r3, [sp, #20]
   20c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c24:	b1d3      	cbz	r3, 20c5c <_dtoa_r+0x4a4>
   20c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c28:	2b00      	cmp	r3, #0
   20c2a:	f000 82c0 	beq.w	211ae <_dtoa_r+0x9f6>
   20c2e:	2f00      	cmp	r7, #0
   20c30:	dd10      	ble.n	20c54 <_dtoa_r+0x49c>
   20c32:	4631      	mov	r1, r6
   20c34:	463a      	mov	r2, r7
   20c36:	4620      	mov	r0, r4
   20c38:	f001 f970 	bl	21f1c <__pow5mult>
   20c3c:	4652      	mov	r2, sl
   20c3e:	4601      	mov	r1, r0
   20c40:	4606      	mov	r6, r0
   20c42:	4620      	mov	r0, r4
   20c44:	f001 f8d8 	bl	21df8 <__multiply>
   20c48:	4651      	mov	r1, sl
   20c4a:	4680      	mov	r8, r0
   20c4c:	4620      	mov	r0, r4
   20c4e:	f001 f82f 	bl	21cb0 <_Bfree>
   20c52:	46c2      	mov	sl, r8
   20c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c56:	1bda      	subs	r2, r3, r7
   20c58:	f040 82aa 	bne.w	211b0 <_dtoa_r+0x9f8>
   20c5c:	2101      	movs	r1, #1
   20c5e:	4620      	mov	r0, r4
   20c60:	f001 f8c0 	bl	21de4 <__i2b>
   20c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20c66:	2b00      	cmp	r3, #0
   20c68:	4681      	mov	r9, r0
   20c6a:	dd1f      	ble.n	20cac <_dtoa_r+0x4f4>
   20c6c:	4601      	mov	r1, r0
   20c6e:	461a      	mov	r2, r3
   20c70:	4620      	mov	r0, r4
   20c72:	f001 f953 	bl	21f1c <__pow5mult>
   20c76:	9b02      	ldr	r3, [sp, #8]
   20c78:	2b01      	cmp	r3, #1
   20c7a:	4681      	mov	r9, r0
   20c7c:	f340 825b 	ble.w	21136 <_dtoa_r+0x97e>
   20c80:	f04f 0800 	mov.w	r8, #0
   20c84:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20c88:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   20c8c:	6918      	ldr	r0, [r3, #16]
   20c8e:	f001 f859 	bl	21d44 <__hi0bits>
   20c92:	f1c0 0020 	rsb	r0, r0, #32
   20c96:	e013      	b.n	20cc0 <_dtoa_r+0x508>
   20c98:	f1c3 0920 	rsb	r9, r3, #32
   20c9c:	9b00      	ldr	r3, [sp, #0]
   20c9e:	fa03 f009 	lsl.w	r0, r3, r9
   20ca2:	e67a      	b.n	2099a <_dtoa_r+0x1e2>
   20ca4:	900c      	str	r0, [sp, #48]	; 0x30
   20ca6:	e63d      	b.n	20924 <_dtoa_r+0x16c>
   20ca8:	40240000 	.word	0x40240000
   20cac:	9b02      	ldr	r3, [sp, #8]
   20cae:	2b01      	cmp	r3, #1
   20cb0:	f340 828d 	ble.w	211ce <_dtoa_r+0xa16>
   20cb4:	f04f 0800 	mov.w	r8, #0
   20cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20cba:	2001      	movs	r0, #1
   20cbc:	2b00      	cmp	r3, #0
   20cbe:	d1e1      	bne.n	20c84 <_dtoa_r+0x4cc>
   20cc0:	9a05      	ldr	r2, [sp, #20]
   20cc2:	4410      	add	r0, r2
   20cc4:	f010 001f 	ands.w	r0, r0, #31
   20cc8:	f000 80a1 	beq.w	20e0e <_dtoa_r+0x656>
   20ccc:	f1c0 0320 	rsb	r3, r0, #32
   20cd0:	2b04      	cmp	r3, #4
   20cd2:	f340 848c 	ble.w	215ee <_dtoa_r+0xe36>
   20cd6:	9b06      	ldr	r3, [sp, #24]
   20cd8:	f1c0 001c 	rsb	r0, r0, #28
   20cdc:	4403      	add	r3, r0
   20cde:	9306      	str	r3, [sp, #24]
   20ce0:	4613      	mov	r3, r2
   20ce2:	4403      	add	r3, r0
   20ce4:	4405      	add	r5, r0
   20ce6:	9305      	str	r3, [sp, #20]
   20ce8:	9b06      	ldr	r3, [sp, #24]
   20cea:	2b00      	cmp	r3, #0
   20cec:	dd05      	ble.n	20cfa <_dtoa_r+0x542>
   20cee:	4651      	mov	r1, sl
   20cf0:	461a      	mov	r2, r3
   20cf2:	4620      	mov	r0, r4
   20cf4:	f001 f962 	bl	21fbc <__lshift>
   20cf8:	4682      	mov	sl, r0
   20cfa:	9b05      	ldr	r3, [sp, #20]
   20cfc:	2b00      	cmp	r3, #0
   20cfe:	dd05      	ble.n	20d0c <_dtoa_r+0x554>
   20d00:	4649      	mov	r1, r9
   20d02:	461a      	mov	r2, r3
   20d04:	4620      	mov	r0, r4
   20d06:	f001 f959 	bl	21fbc <__lshift>
   20d0a:	4681      	mov	r9, r0
   20d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20d0e:	2b00      	cmp	r3, #0
   20d10:	f040 8086 	bne.w	20e20 <_dtoa_r+0x668>
   20d14:	9b08      	ldr	r3, [sp, #32]
   20d16:	2b00      	cmp	r3, #0
   20d18:	f340 8269 	ble.w	211ee <_dtoa_r+0xa36>
   20d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20d1e:	2b00      	cmp	r3, #0
   20d20:	f000 8098 	beq.w	20e54 <_dtoa_r+0x69c>
   20d24:	2d00      	cmp	r5, #0
   20d26:	dd05      	ble.n	20d34 <_dtoa_r+0x57c>
   20d28:	4631      	mov	r1, r6
   20d2a:	462a      	mov	r2, r5
   20d2c:	4620      	mov	r0, r4
   20d2e:	f001 f945 	bl	21fbc <__lshift>
   20d32:	4606      	mov	r6, r0
   20d34:	f1b8 0f00 	cmp.w	r8, #0
   20d38:	f040 8336 	bne.w	213a8 <_dtoa_r+0xbf0>
   20d3c:	46b0      	mov	r8, r6
   20d3e:	9b08      	ldr	r3, [sp, #32]
   20d40:	9a07      	ldr	r2, [sp, #28]
   20d42:	3b01      	subs	r3, #1
   20d44:	18d3      	adds	r3, r2, r3
   20d46:	9308      	str	r3, [sp, #32]
   20d48:	9b00      	ldr	r3, [sp, #0]
   20d4a:	f003 0301 	and.w	r3, r3, #1
   20d4e:	9309      	str	r3, [sp, #36]	; 0x24
   20d50:	4617      	mov	r7, r2
   20d52:	4649      	mov	r1, r9
   20d54:	4650      	mov	r0, sl
   20d56:	f7ff fc9b 	bl	20690 <quorem>
   20d5a:	4631      	mov	r1, r6
   20d5c:	4605      	mov	r5, r0
   20d5e:	4650      	mov	r0, sl
   20d60:	f001 f97e 	bl	22060 <__mcmp>
   20d64:	4642      	mov	r2, r8
   20d66:	4649      	mov	r1, r9
   20d68:	4683      	mov	fp, r0
   20d6a:	4620      	mov	r0, r4
   20d6c:	f001 f994 	bl	22098 <__mdiff>
   20d70:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20d74:	9200      	str	r2, [sp, #0]
   20d76:	68c2      	ldr	r2, [r0, #12]
   20d78:	4601      	mov	r1, r0
   20d7a:	2a00      	cmp	r2, #0
   20d7c:	f040 8232 	bne.w	211e4 <_dtoa_r+0xa2c>
   20d80:	9006      	str	r0, [sp, #24]
   20d82:	4650      	mov	r0, sl
   20d84:	f001 f96c 	bl	22060 <__mcmp>
   20d88:	9b06      	ldr	r3, [sp, #24]
   20d8a:	9005      	str	r0, [sp, #20]
   20d8c:	4619      	mov	r1, r3
   20d8e:	4620      	mov	r0, r4
   20d90:	f000 ff8e 	bl	21cb0 <_Bfree>
   20d94:	9a05      	ldr	r2, [sp, #20]
   20d96:	b932      	cbnz	r2, 20da6 <_dtoa_r+0x5ee>
   20d98:	9b02      	ldr	r3, [sp, #8]
   20d9a:	b923      	cbnz	r3, 20da6 <_dtoa_r+0x5ee>
   20d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20d9e:	2b00      	cmp	r3, #0
   20da0:	f000 83de 	beq.w	21560 <_dtoa_r+0xda8>
   20da4:	9a02      	ldr	r2, [sp, #8]
   20da6:	f1bb 0f00 	cmp.w	fp, #0
   20daa:	f2c0 82a2 	blt.w	212f2 <_dtoa_r+0xb3a>
   20dae:	d105      	bne.n	20dbc <_dtoa_r+0x604>
   20db0:	9b02      	ldr	r3, [sp, #8]
   20db2:	b91b      	cbnz	r3, 20dbc <_dtoa_r+0x604>
   20db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20db6:	2b00      	cmp	r3, #0
   20db8:	f000 829b 	beq.w	212f2 <_dtoa_r+0xb3a>
   20dbc:	2a00      	cmp	r2, #0
   20dbe:	f300 8307 	bgt.w	213d0 <_dtoa_r+0xc18>
   20dc2:	f89d 3000 	ldrb.w	r3, [sp]
   20dc6:	703b      	strb	r3, [r7, #0]
   20dc8:	9b08      	ldr	r3, [sp, #32]
   20dca:	f107 0b01 	add.w	fp, r7, #1
   20dce:	429f      	cmp	r7, r3
   20dd0:	465d      	mov	r5, fp
   20dd2:	f000 8308 	beq.w	213e6 <_dtoa_r+0xc2e>
   20dd6:	4651      	mov	r1, sl
   20dd8:	2300      	movs	r3, #0
   20dda:	220a      	movs	r2, #10
   20ddc:	4620      	mov	r0, r4
   20dde:	f000 ff71 	bl	21cc4 <__multadd>
   20de2:	4546      	cmp	r6, r8
   20de4:	4682      	mov	sl, r0
   20de6:	4631      	mov	r1, r6
   20de8:	f04f 0300 	mov.w	r3, #0
   20dec:	f04f 020a 	mov.w	r2, #10
   20df0:	4620      	mov	r0, r4
   20df2:	f000 81f1 	beq.w	211d8 <_dtoa_r+0xa20>
   20df6:	f000 ff65 	bl	21cc4 <__multadd>
   20dfa:	4641      	mov	r1, r8
   20dfc:	4606      	mov	r6, r0
   20dfe:	2300      	movs	r3, #0
   20e00:	220a      	movs	r2, #10
   20e02:	4620      	mov	r0, r4
   20e04:	f000 ff5e 	bl	21cc4 <__multadd>
   20e08:	465f      	mov	r7, fp
   20e0a:	4680      	mov	r8, r0
   20e0c:	e7a1      	b.n	20d52 <_dtoa_r+0x59a>
   20e0e:	201c      	movs	r0, #28
   20e10:	9b06      	ldr	r3, [sp, #24]
   20e12:	4403      	add	r3, r0
   20e14:	9306      	str	r3, [sp, #24]
   20e16:	9b05      	ldr	r3, [sp, #20]
   20e18:	4403      	add	r3, r0
   20e1a:	4405      	add	r5, r0
   20e1c:	9305      	str	r3, [sp, #20]
   20e1e:	e763      	b.n	20ce8 <_dtoa_r+0x530>
   20e20:	4649      	mov	r1, r9
   20e22:	4650      	mov	r0, sl
   20e24:	f001 f91c 	bl	22060 <__mcmp>
   20e28:	2800      	cmp	r0, #0
   20e2a:	f6bf af73 	bge.w	20d14 <_dtoa_r+0x55c>
   20e2e:	9f04      	ldr	r7, [sp, #16]
   20e30:	4651      	mov	r1, sl
   20e32:	2300      	movs	r3, #0
   20e34:	220a      	movs	r2, #10
   20e36:	4620      	mov	r0, r4
   20e38:	3f01      	subs	r7, #1
   20e3a:	9704      	str	r7, [sp, #16]
   20e3c:	f000 ff42 	bl	21cc4 <__multadd>
   20e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20e42:	4682      	mov	sl, r0
   20e44:	2b00      	cmp	r3, #0
   20e46:	f040 83a7 	bne.w	21598 <_dtoa_r+0xde0>
   20e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20e4c:	2b00      	cmp	r3, #0
   20e4e:	f340 83b0 	ble.w	215b2 <_dtoa_r+0xdfa>
   20e52:	9308      	str	r3, [sp, #32]
   20e54:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20e5c:	465d      	mov	r5, fp
   20e5e:	e002      	b.n	20e66 <_dtoa_r+0x6ae>
   20e60:	f000 ff30 	bl	21cc4 <__multadd>
   20e64:	4682      	mov	sl, r0
   20e66:	4649      	mov	r1, r9
   20e68:	4650      	mov	r0, sl
   20e6a:	f7ff fc11 	bl	20690 <quorem>
   20e6e:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20e72:	f805 7b01 	strb.w	r7, [r5], #1
   20e76:	eba5 030b 	sub.w	r3, r5, fp
   20e7a:	4543      	cmp	r3, r8
   20e7c:	f04f 020a 	mov.w	r2, #10
   20e80:	f04f 0300 	mov.w	r3, #0
   20e84:	4651      	mov	r1, sl
   20e86:	4620      	mov	r0, r4
   20e88:	dbea      	blt.n	20e60 <_dtoa_r+0x6a8>
   20e8a:	9b07      	ldr	r3, [sp, #28]
   20e8c:	9a08      	ldr	r2, [sp, #32]
   20e8e:	9700      	str	r7, [sp, #0]
   20e90:	2a01      	cmp	r2, #1
   20e92:	bfac      	ite	ge
   20e94:	189b      	addge	r3, r3, r2
   20e96:	3301      	addlt	r3, #1
   20e98:	461d      	mov	r5, r3
   20e9a:	f04f 0b00 	mov.w	fp, #0
   20e9e:	4651      	mov	r1, sl
   20ea0:	2201      	movs	r2, #1
   20ea2:	4620      	mov	r0, r4
   20ea4:	f001 f88a 	bl	21fbc <__lshift>
   20ea8:	4649      	mov	r1, r9
   20eaa:	4682      	mov	sl, r0
   20eac:	f001 f8d8 	bl	22060 <__mcmp>
   20eb0:	2800      	cmp	r0, #0
   20eb2:	f340 823a 	ble.w	2132a <_dtoa_r+0xb72>
   20eb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20eba:	9907      	ldr	r1, [sp, #28]
   20ebc:	1e6b      	subs	r3, r5, #1
   20ebe:	e004      	b.n	20eca <_dtoa_r+0x712>
   20ec0:	428b      	cmp	r3, r1
   20ec2:	f000 81af 	beq.w	21224 <_dtoa_r+0xa6c>
   20ec6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20eca:	2a39      	cmp	r2, #57	; 0x39
   20ecc:	f103 0501 	add.w	r5, r3, #1
   20ed0:	d0f6      	beq.n	20ec0 <_dtoa_r+0x708>
   20ed2:	3201      	adds	r2, #1
   20ed4:	701a      	strb	r2, [r3, #0]
   20ed6:	4649      	mov	r1, r9
   20ed8:	4620      	mov	r0, r4
   20eda:	f000 fee9 	bl	21cb0 <_Bfree>
   20ede:	2e00      	cmp	r6, #0
   20ee0:	f43f ae36 	beq.w	20b50 <_dtoa_r+0x398>
   20ee4:	f1bb 0f00 	cmp.w	fp, #0
   20ee8:	d005      	beq.n	20ef6 <_dtoa_r+0x73e>
   20eea:	45b3      	cmp	fp, r6
   20eec:	d003      	beq.n	20ef6 <_dtoa_r+0x73e>
   20eee:	4659      	mov	r1, fp
   20ef0:	4620      	mov	r0, r4
   20ef2:	f000 fedd 	bl	21cb0 <_Bfree>
   20ef6:	4631      	mov	r1, r6
   20ef8:	4620      	mov	r0, r4
   20efa:	f000 fed9 	bl	21cb0 <_Bfree>
   20efe:	e627      	b.n	20b50 <_dtoa_r+0x398>
   20f00:	2300      	movs	r3, #0
   20f02:	9309      	str	r3, [sp, #36]	; 0x24
   20f04:	9b04      	ldr	r3, [sp, #16]
   20f06:	445b      	add	r3, fp
   20f08:	930d      	str	r3, [sp, #52]	; 0x34
   20f0a:	3301      	adds	r3, #1
   20f0c:	2b01      	cmp	r3, #1
   20f0e:	461e      	mov	r6, r3
   20f10:	461d      	mov	r5, r3
   20f12:	9308      	str	r3, [sp, #32]
   20f14:	bfb8      	it	lt
   20f16:	2601      	movlt	r6, #1
   20f18:	2100      	movs	r1, #0
   20f1a:	2e17      	cmp	r6, #23
   20f1c:	6461      	str	r1, [r4, #68]	; 0x44
   20f1e:	d90a      	bls.n	20f36 <_dtoa_r+0x77e>
   20f20:	2201      	movs	r2, #1
   20f22:	2304      	movs	r3, #4
   20f24:	005b      	lsls	r3, r3, #1
   20f26:	f103 0014 	add.w	r0, r3, #20
   20f2a:	4286      	cmp	r6, r0
   20f2c:	4611      	mov	r1, r2
   20f2e:	f102 0201 	add.w	r2, r2, #1
   20f32:	d2f7      	bcs.n	20f24 <_dtoa_r+0x76c>
   20f34:	6461      	str	r1, [r4, #68]	; 0x44
   20f36:	4620      	mov	r0, r4
   20f38:	f000 fe94 	bl	21c64 <_Balloc>
   20f3c:	2d0e      	cmp	r5, #14
   20f3e:	9007      	str	r0, [sp, #28]
   20f40:	6420      	str	r0, [r4, #64]	; 0x40
   20f42:	f63f ad44 	bhi.w	209ce <_dtoa_r+0x216>
   20f46:	2f00      	cmp	r7, #0
   20f48:	f43f ad41 	beq.w	209ce <_dtoa_r+0x216>
   20f4c:	9904      	ldr	r1, [sp, #16]
   20f4e:	2900      	cmp	r1, #0
   20f50:	ed9d 7b00 	vldr	d7, [sp]
   20f54:	f340 81f6 	ble.w	21344 <_dtoa_r+0xb8c>
   20f58:	4bb9      	ldr	r3, [pc, #740]	; (21240 <_dtoa_r+0xa88>)
   20f5a:	f001 020f 	and.w	r2, r1, #15
   20f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20f62:	110d      	asrs	r5, r1, #4
   20f64:	e9d3 6700 	ldrd	r6, r7, [r3]
   20f68:	06eb      	lsls	r3, r5, #27
   20f6a:	f140 81ad 	bpl.w	212c8 <_dtoa_r+0xb10>
   20f6e:	4bb5      	ldr	r3, [pc, #724]	; (21244 <_dtoa_r+0xa8c>)
   20f70:	ec51 0b17 	vmov	r0, r1, d7
   20f74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20f78:	f7fa ff52 	bl	1be20 <__aeabi_ddiv>
   20f7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20f80:	f005 050f 	and.w	r5, r5, #15
   20f84:	f04f 0903 	mov.w	r9, #3
   20f88:	b18d      	cbz	r5, 20fae <_dtoa_r+0x7f6>
   20f8a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 21244 <_dtoa_r+0xa8c>
   20f8e:	07e8      	lsls	r0, r5, #31
   20f90:	d509      	bpl.n	20fa6 <_dtoa_r+0x7ee>
   20f92:	4630      	mov	r0, r6
   20f94:	4639      	mov	r1, r7
   20f96:	e9d8 2300 	ldrd	r2, r3, [r8]
   20f9a:	f7fa fe17 	bl	1bbcc <__aeabi_dmul>
   20f9e:	f109 0901 	add.w	r9, r9, #1
   20fa2:	4606      	mov	r6, r0
   20fa4:	460f      	mov	r7, r1
   20fa6:	106d      	asrs	r5, r5, #1
   20fa8:	f108 0808 	add.w	r8, r8, #8
   20fac:	d1ef      	bne.n	20f8e <_dtoa_r+0x7d6>
   20fae:	463b      	mov	r3, r7
   20fb0:	4632      	mov	r2, r6
   20fb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20fb6:	f7fa ff33 	bl	1be20 <__aeabi_ddiv>
   20fba:	4607      	mov	r7, r0
   20fbc:	4688      	mov	r8, r1
   20fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20fc0:	b143      	cbz	r3, 20fd4 <_dtoa_r+0x81c>
   20fc2:	2200      	movs	r2, #0
   20fc4:	4ba0      	ldr	r3, [pc, #640]	; (21248 <_dtoa_r+0xa90>)
   20fc6:	4638      	mov	r0, r7
   20fc8:	4641      	mov	r1, r8
   20fca:	f7fb f871 	bl	1c0b0 <__aeabi_dcmplt>
   20fce:	2800      	cmp	r0, #0
   20fd0:	f040 8273 	bne.w	214ba <_dtoa_r+0xd02>
   20fd4:	4648      	mov	r0, r9
   20fd6:	f7fa fd93 	bl	1bb00 <__aeabi_i2d>
   20fda:	463a      	mov	r2, r7
   20fdc:	4643      	mov	r3, r8
   20fde:	f7fa fdf5 	bl	1bbcc <__aeabi_dmul>
   20fe2:	4b9a      	ldr	r3, [pc, #616]	; (2124c <_dtoa_r+0xa94>)
   20fe4:	2200      	movs	r2, #0
   20fe6:	f7fa fc3f 	bl	1b868 <__adddf3>
   20fea:	9b08      	ldr	r3, [sp, #32]
   20fec:	4605      	mov	r5, r0
   20fee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20ff2:	2b00      	cmp	r3, #0
   20ff4:	f000 8140 	beq.w	21278 <_dtoa_r+0xac0>
   20ff8:	9b04      	ldr	r3, [sp, #16]
   20ffa:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20ffe:	9311      	str	r3, [sp, #68]	; 0x44
   21000:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21002:	2b00      	cmp	r3, #0
   21004:	f000 81f6 	beq.w	213f4 <_dtoa_r+0xc3c>
   21008:	4b8d      	ldr	r3, [pc, #564]	; (21240 <_dtoa_r+0xa88>)
   2100a:	4991      	ldr	r1, [pc, #580]	; (21250 <_dtoa_r+0xa98>)
   2100c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   21010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   21014:	2000      	movs	r0, #0
   21016:	f7fa ff03 	bl	1be20 <__aeabi_ddiv>
   2101a:	462a      	mov	r2, r5
   2101c:	4633      	mov	r3, r6
   2101e:	f7fa fc21 	bl	1b864 <__aeabi_dsub>
   21022:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   21026:	4641      	mov	r1, r8
   21028:	4638      	mov	r0, r7
   2102a:	f7fb f869 	bl	1c100 <__aeabi_d2iz>
   2102e:	4605      	mov	r5, r0
   21030:	f7fa fd66 	bl	1bb00 <__aeabi_i2d>
   21034:	4602      	mov	r2, r0
   21036:	460b      	mov	r3, r1
   21038:	4638      	mov	r0, r7
   2103a:	4641      	mov	r1, r8
   2103c:	f7fa fc12 	bl	1b864 <__aeabi_dsub>
   21040:	3530      	adds	r5, #48	; 0x30
   21042:	fa5f f885 	uxtb.w	r8, r5
   21046:	9d07      	ldr	r5, [sp, #28]
   21048:	4606      	mov	r6, r0
   2104a:	460f      	mov	r7, r1
   2104c:	f885 8000 	strb.w	r8, [r5]
   21050:	4602      	mov	r2, r0
   21052:	460b      	mov	r3, r1
   21054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21058:	3501      	adds	r5, #1
   2105a:	f7fb f847 	bl	1c0ec <__aeabi_dcmpgt>
   2105e:	2800      	cmp	r0, #0
   21060:	d156      	bne.n	21110 <_dtoa_r+0x958>
   21062:	4632      	mov	r2, r6
   21064:	463b      	mov	r3, r7
   21066:	2000      	movs	r0, #0
   21068:	4977      	ldr	r1, [pc, #476]	; (21248 <_dtoa_r+0xa90>)
   2106a:	f7fa fbfb 	bl	1b864 <__aeabi_dsub>
   2106e:	4602      	mov	r2, r0
   21070:	460b      	mov	r3, r1
   21072:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21076:	f7fb f839 	bl	1c0ec <__aeabi_dcmpgt>
   2107a:	2800      	cmp	r0, #0
   2107c:	f040 8262 	bne.w	21544 <_dtoa_r+0xd8c>
   21080:	f1b9 0f01 	cmp.w	r9, #1
   21084:	f43f aca3 	beq.w	209ce <_dtoa_r+0x216>
   21088:	9b07      	ldr	r3, [sp, #28]
   2108a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   2108e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   21092:	4499      	add	r9, r3
   21094:	46a0      	mov	r8, r4
   21096:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   2109a:	e00d      	b.n	210b8 <_dtoa_r+0x900>
   2109c:	2000      	movs	r0, #0
   2109e:	496a      	ldr	r1, [pc, #424]	; (21248 <_dtoa_r+0xa90>)
   210a0:	f7fa fbe0 	bl	1b864 <__aeabi_dsub>
   210a4:	4652      	mov	r2, sl
   210a6:	465b      	mov	r3, fp
   210a8:	f7fb f802 	bl	1c0b0 <__aeabi_dcmplt>
   210ac:	2800      	cmp	r0, #0
   210ae:	f040 8244 	bne.w	2153a <_dtoa_r+0xd82>
   210b2:	454d      	cmp	r5, r9
   210b4:	f000 824a 	beq.w	2154c <_dtoa_r+0xd94>
   210b8:	4650      	mov	r0, sl
   210ba:	4659      	mov	r1, fp
   210bc:	2200      	movs	r2, #0
   210be:	4b65      	ldr	r3, [pc, #404]	; (21254 <_dtoa_r+0xa9c>)
   210c0:	f7fa fd84 	bl	1bbcc <__aeabi_dmul>
   210c4:	2200      	movs	r2, #0
   210c6:	4b63      	ldr	r3, [pc, #396]	; (21254 <_dtoa_r+0xa9c>)
   210c8:	4682      	mov	sl, r0
   210ca:	468b      	mov	fp, r1
   210cc:	4630      	mov	r0, r6
   210ce:	4639      	mov	r1, r7
   210d0:	f7fa fd7c 	bl	1bbcc <__aeabi_dmul>
   210d4:	460f      	mov	r7, r1
   210d6:	4606      	mov	r6, r0
   210d8:	f7fb f812 	bl	1c100 <__aeabi_d2iz>
   210dc:	4604      	mov	r4, r0
   210de:	f7fa fd0f 	bl	1bb00 <__aeabi_i2d>
   210e2:	4602      	mov	r2, r0
   210e4:	460b      	mov	r3, r1
   210e6:	4630      	mov	r0, r6
   210e8:	4639      	mov	r1, r7
   210ea:	f7fa fbbb 	bl	1b864 <__aeabi_dsub>
   210ee:	3430      	adds	r4, #48	; 0x30
   210f0:	b2e4      	uxtb	r4, r4
   210f2:	4652      	mov	r2, sl
   210f4:	465b      	mov	r3, fp
   210f6:	f805 4b01 	strb.w	r4, [r5], #1
   210fa:	4606      	mov	r6, r0
   210fc:	460f      	mov	r7, r1
   210fe:	f7fa ffd7 	bl	1c0b0 <__aeabi_dcmplt>
   21102:	4632      	mov	r2, r6
   21104:	463b      	mov	r3, r7
   21106:	2800      	cmp	r0, #0
   21108:	d0c8      	beq.n	2109c <_dtoa_r+0x8e4>
   2110a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2110e:	4644      	mov	r4, r8
   21110:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21112:	9304      	str	r3, [sp, #16]
   21114:	e51c      	b.n	20b50 <_dtoa_r+0x398>
   21116:	2300      	movs	r3, #0
   21118:	9309      	str	r3, [sp, #36]	; 0x24
   2111a:	f1bb 0f00 	cmp.w	fp, #0
   2111e:	f340 80da 	ble.w	212d6 <_dtoa_r+0xb1e>
   21122:	465e      	mov	r6, fp
   21124:	465d      	mov	r5, fp
   21126:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   2112a:	f8cd b020 	str.w	fp, [sp, #32]
   2112e:	e6f3      	b.n	20f18 <_dtoa_r+0x760>
   21130:	2301      	movs	r3, #1
   21132:	9309      	str	r3, [sp, #36]	; 0x24
   21134:	e7f1      	b.n	2111a <_dtoa_r+0x962>
   21136:	9b00      	ldr	r3, [sp, #0]
   21138:	2b00      	cmp	r3, #0
   2113a:	f47f ada1 	bne.w	20c80 <_dtoa_r+0x4c8>
   2113e:	e9dd 1200 	ldrd	r1, r2, [sp]
   21142:	f3c2 0313 	ubfx	r3, r2, #0, #20
   21146:	2b00      	cmp	r3, #0
   21148:	f47f adb4 	bne.w	20cb4 <_dtoa_r+0x4fc>
   2114c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   21150:	0d3f      	lsrs	r7, r7, #20
   21152:	053f      	lsls	r7, r7, #20
   21154:	2f00      	cmp	r7, #0
   21156:	f000 8200 	beq.w	2155a <_dtoa_r+0xda2>
   2115a:	9b06      	ldr	r3, [sp, #24]
   2115c:	3301      	adds	r3, #1
   2115e:	9306      	str	r3, [sp, #24]
   21160:	9b05      	ldr	r3, [sp, #20]
   21162:	3301      	adds	r3, #1
   21164:	9305      	str	r3, [sp, #20]
   21166:	f04f 0801 	mov.w	r8, #1
   2116a:	e5a5      	b.n	20cb8 <_dtoa_r+0x500>
   2116c:	9b08      	ldr	r3, [sp, #32]
   2116e:	2b00      	cmp	r3, #0
   21170:	f73f ac3e 	bgt.w	209f0 <_dtoa_r+0x238>
   21174:	f040 8099 	bne.w	212aa <_dtoa_r+0xaf2>
   21178:	4649      	mov	r1, r9
   2117a:	2200      	movs	r2, #0
   2117c:	4b36      	ldr	r3, [pc, #216]	; (21258 <_dtoa_r+0xaa0>)
   2117e:	4640      	mov	r0, r8
   21180:	f7fa fd24 	bl	1bbcc <__aeabi_dmul>
   21184:	e9dd 2300 	ldrd	r2, r3, [sp]
   21188:	f7fa ffa6 	bl	1c0d8 <__aeabi_dcmpge>
   2118c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21190:	464e      	mov	r6, r9
   21192:	2800      	cmp	r0, #0
   21194:	d03e      	beq.n	21214 <_dtoa_r+0xa5c>
   21196:	ea6f 030b 	mvn.w	r3, fp
   2119a:	9d07      	ldr	r5, [sp, #28]
   2119c:	9304      	str	r3, [sp, #16]
   2119e:	4649      	mov	r1, r9
   211a0:	4620      	mov	r0, r4
   211a2:	f000 fd85 	bl	21cb0 <_Bfree>
   211a6:	2e00      	cmp	r6, #0
   211a8:	f43f acd2 	beq.w	20b50 <_dtoa_r+0x398>
   211ac:	e6a3      	b.n	20ef6 <_dtoa_r+0x73e>
   211ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   211b0:	4651      	mov	r1, sl
   211b2:	4620      	mov	r0, r4
   211b4:	f000 feb2 	bl	21f1c <__pow5mult>
   211b8:	4682      	mov	sl, r0
   211ba:	e54f      	b.n	20c5c <_dtoa_r+0x4a4>
   211bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   211be:	2a00      	cmp	r2, #0
   211c0:	f000 816f 	beq.w	214a2 <_dtoa_r+0xcea>
   211c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   211c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   211ca:	9d06      	ldr	r5, [sp, #24]
   211cc:	e4e7      	b.n	20b9e <_dtoa_r+0x3e6>
   211ce:	9b00      	ldr	r3, [sp, #0]
   211d0:	2b00      	cmp	r3, #0
   211d2:	f47f ad6f 	bne.w	20cb4 <_dtoa_r+0x4fc>
   211d6:	e7b2      	b.n	2113e <_dtoa_r+0x986>
   211d8:	f000 fd74 	bl	21cc4 <__multadd>
   211dc:	465f      	mov	r7, fp
   211de:	4606      	mov	r6, r0
   211e0:	4680      	mov	r8, r0
   211e2:	e5b6      	b.n	20d52 <_dtoa_r+0x59a>
   211e4:	4620      	mov	r0, r4
   211e6:	f000 fd63 	bl	21cb0 <_Bfree>
   211ea:	2201      	movs	r2, #1
   211ec:	e5db      	b.n	20da6 <_dtoa_r+0x5ee>
   211ee:	9b02      	ldr	r3, [sp, #8]
   211f0:	2b02      	cmp	r3, #2
   211f2:	f77f ad93 	ble.w	20d1c <_dtoa_r+0x564>
   211f6:	9b08      	ldr	r3, [sp, #32]
   211f8:	2b00      	cmp	r3, #0
   211fa:	d1cc      	bne.n	21196 <_dtoa_r+0x9de>
   211fc:	4649      	mov	r1, r9
   211fe:	2205      	movs	r2, #5
   21200:	4620      	mov	r0, r4
   21202:	f000 fd5f 	bl	21cc4 <__multadd>
   21206:	4601      	mov	r1, r0
   21208:	4681      	mov	r9, r0
   2120a:	4650      	mov	r0, sl
   2120c:	f000 ff28 	bl	22060 <__mcmp>
   21210:	2800      	cmp	r0, #0
   21212:	ddc0      	ble.n	21196 <_dtoa_r+0x9de>
   21214:	9a04      	ldr	r2, [sp, #16]
   21216:	9907      	ldr	r1, [sp, #28]
   21218:	2331      	movs	r3, #49	; 0x31
   2121a:	3201      	adds	r2, #1
   2121c:	9204      	str	r2, [sp, #16]
   2121e:	700b      	strb	r3, [r1, #0]
   21220:	1c4d      	adds	r5, r1, #1
   21222:	e7bc      	b.n	2119e <_dtoa_r+0x9e6>
   21224:	9a04      	ldr	r2, [sp, #16]
   21226:	3201      	adds	r2, #1
   21228:	9204      	str	r2, [sp, #16]
   2122a:	9a07      	ldr	r2, [sp, #28]
   2122c:	2331      	movs	r3, #49	; 0x31
   2122e:	7013      	strb	r3, [r2, #0]
   21230:	e651      	b.n	20ed6 <_dtoa_r+0x71e>
   21232:	2301      	movs	r3, #1
   21234:	9309      	str	r3, [sp, #36]	; 0x24
   21236:	e665      	b.n	20f04 <_dtoa_r+0x74c>
   21238:	f8dd a000 	ldr.w	sl, [sp]
   2123c:	9c02      	ldr	r4, [sp, #8]
   2123e:	e487      	b.n	20b50 <_dtoa_r+0x398>
   21240:	00024e88 	.word	0x00024e88
   21244:	00024e60 	.word	0x00024e60
   21248:	3ff00000 	.word	0x3ff00000
   2124c:	401c0000 	.word	0x401c0000
   21250:	3fe00000 	.word	0x3fe00000
   21254:	40240000 	.word	0x40240000
   21258:	40140000 	.word	0x40140000
   2125c:	4648      	mov	r0, r9
   2125e:	f7fa fc4f 	bl	1bb00 <__aeabi_i2d>
   21262:	463a      	mov	r2, r7
   21264:	4643      	mov	r3, r8
   21266:	f7fa fcb1 	bl	1bbcc <__aeabi_dmul>
   2126a:	2200      	movs	r2, #0
   2126c:	4bc4      	ldr	r3, [pc, #784]	; (21580 <_dtoa_r+0xdc8>)
   2126e:	f7fa fafb 	bl	1b868 <__adddf3>
   21272:	4605      	mov	r5, r0
   21274:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21278:	4641      	mov	r1, r8
   2127a:	2200      	movs	r2, #0
   2127c:	4bc1      	ldr	r3, [pc, #772]	; (21584 <_dtoa_r+0xdcc>)
   2127e:	4638      	mov	r0, r7
   21280:	f7fa faf0 	bl	1b864 <__aeabi_dsub>
   21284:	462a      	mov	r2, r5
   21286:	4633      	mov	r3, r6
   21288:	4680      	mov	r8, r0
   2128a:	4689      	mov	r9, r1
   2128c:	f7fa ff2e 	bl	1c0ec <__aeabi_dcmpgt>
   21290:	2800      	cmp	r0, #0
   21292:	f040 80ab 	bne.w	213ec <_dtoa_r+0xc34>
   21296:	462a      	mov	r2, r5
   21298:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2129c:	4640      	mov	r0, r8
   2129e:	4649      	mov	r1, r9
   212a0:	f7fa ff06 	bl	1c0b0 <__aeabi_dcmplt>
   212a4:	2800      	cmp	r0, #0
   212a6:	f43f ab92 	beq.w	209ce <_dtoa_r+0x216>
   212aa:	f04f 0900 	mov.w	r9, #0
   212ae:	464e      	mov	r6, r9
   212b0:	e771      	b.n	21196 <_dtoa_r+0x9de>
   212b2:	9807      	ldr	r0, [sp, #28]
   212b4:	f7ff bab8 	b.w	20828 <_dtoa_r+0x70>
   212b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   212ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   212bc:	970a      	str	r7, [sp, #40]	; 0x28
   212be:	1afb      	subs	r3, r7, r3
   212c0:	441a      	add	r2, r3
   212c2:	920b      	str	r2, [sp, #44]	; 0x2c
   212c4:	2700      	movs	r7, #0
   212c6:	e464      	b.n	20b92 <_dtoa_r+0x3da>
   212c8:	ed9d 7b00 	vldr	d7, [sp]
   212cc:	f04f 0902 	mov.w	r9, #2
   212d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   212d4:	e658      	b.n	20f88 <_dtoa_r+0x7d0>
   212d6:	2100      	movs	r1, #0
   212d8:	6461      	str	r1, [r4, #68]	; 0x44
   212da:	4620      	mov	r0, r4
   212dc:	f000 fcc2 	bl	21c64 <_Balloc>
   212e0:	f04f 0b01 	mov.w	fp, #1
   212e4:	9007      	str	r0, [sp, #28]
   212e6:	6420      	str	r0, [r4, #64]	; 0x40
   212e8:	f8cd b020 	str.w	fp, [sp, #32]
   212ec:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   212f0:	e629      	b.n	20f46 <_dtoa_r+0x78e>
   212f2:	2a00      	cmp	r2, #0
   212f4:	dd12      	ble.n	2131c <_dtoa_r+0xb64>
   212f6:	4651      	mov	r1, sl
   212f8:	2201      	movs	r2, #1
   212fa:	4620      	mov	r0, r4
   212fc:	f000 fe5e 	bl	21fbc <__lshift>
   21300:	4649      	mov	r1, r9
   21302:	4682      	mov	sl, r0
   21304:	f000 feac 	bl	22060 <__mcmp>
   21308:	2800      	cmp	r0, #0
   2130a:	f340 8131 	ble.w	21570 <_dtoa_r+0xdb8>
   2130e:	9b00      	ldr	r3, [sp, #0]
   21310:	2b39      	cmp	r3, #57	; 0x39
   21312:	f000 80f7 	beq.w	21504 <_dtoa_r+0xd4c>
   21316:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2131a:	9300      	str	r3, [sp, #0]
   2131c:	f89d 3000 	ldrb.w	r3, [sp]
   21320:	703b      	strb	r3, [r7, #0]
   21322:	46b3      	mov	fp, r6
   21324:	1c7d      	adds	r5, r7, #1
   21326:	4646      	mov	r6, r8
   21328:	e5d5      	b.n	20ed6 <_dtoa_r+0x71e>
   2132a:	d104      	bne.n	21336 <_dtoa_r+0xb7e>
   2132c:	9b00      	ldr	r3, [sp, #0]
   2132e:	07db      	lsls	r3, r3, #31
   21330:	d501      	bpl.n	21336 <_dtoa_r+0xb7e>
   21332:	e5c0      	b.n	20eb6 <_dtoa_r+0x6fe>
   21334:	4615      	mov	r5, r2
   21336:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2133a:	2b30      	cmp	r3, #48	; 0x30
   2133c:	f105 32ff 	add.w	r2, r5, #4294967295
   21340:	d0f8      	beq.n	21334 <_dtoa_r+0xb7c>
   21342:	e5c8      	b.n	20ed6 <_dtoa_r+0x71e>
   21344:	f000 80b4 	beq.w	214b0 <_dtoa_r+0xcf8>
   21348:	9b04      	ldr	r3, [sp, #16]
   2134a:	425d      	negs	r5, r3
   2134c:	4b8e      	ldr	r3, [pc, #568]	; (21588 <_dtoa_r+0xdd0>)
   2134e:	f005 020f 	and.w	r2, r5, #15
   21352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21356:	e9d3 2300 	ldrd	r2, r3, [r3]
   2135a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2135e:	f7fa fc35 	bl	1bbcc <__aeabi_dmul>
   21362:	112d      	asrs	r5, r5, #4
   21364:	4607      	mov	r7, r0
   21366:	4688      	mov	r8, r1
   21368:	f000 8128 	beq.w	215bc <_dtoa_r+0xe04>
   2136c:	4e87      	ldr	r6, [pc, #540]	; (2158c <_dtoa_r+0xdd4>)
   2136e:	f04f 0902 	mov.w	r9, #2
   21372:	07e9      	lsls	r1, r5, #31
   21374:	d509      	bpl.n	2138a <_dtoa_r+0xbd2>
   21376:	4638      	mov	r0, r7
   21378:	4641      	mov	r1, r8
   2137a:	e9d6 2300 	ldrd	r2, r3, [r6]
   2137e:	f7fa fc25 	bl	1bbcc <__aeabi_dmul>
   21382:	f109 0901 	add.w	r9, r9, #1
   21386:	4607      	mov	r7, r0
   21388:	4688      	mov	r8, r1
   2138a:	106d      	asrs	r5, r5, #1
   2138c:	f106 0608 	add.w	r6, r6, #8
   21390:	d1ef      	bne.n	21372 <_dtoa_r+0xbba>
   21392:	e614      	b.n	20fbe <_dtoa_r+0x806>
   21394:	9907      	ldr	r1, [sp, #28]
   21396:	2230      	movs	r2, #48	; 0x30
   21398:	700a      	strb	r2, [r1, #0]
   2139a:	9a04      	ldr	r2, [sp, #16]
   2139c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   213a0:	3201      	adds	r2, #1
   213a2:	9204      	str	r2, [sp, #16]
   213a4:	f7ff bbd0 	b.w	20b48 <_dtoa_r+0x390>
   213a8:	6871      	ldr	r1, [r6, #4]
   213aa:	4620      	mov	r0, r4
   213ac:	f000 fc5a 	bl	21c64 <_Balloc>
   213b0:	6933      	ldr	r3, [r6, #16]
   213b2:	3302      	adds	r3, #2
   213b4:	009a      	lsls	r2, r3, #2
   213b6:	4605      	mov	r5, r0
   213b8:	f106 010c 	add.w	r1, r6, #12
   213bc:	300c      	adds	r0, #12
   213be:	f7fc ffd7 	bl	1e370 <memcpy>
   213c2:	4629      	mov	r1, r5
   213c4:	2201      	movs	r2, #1
   213c6:	4620      	mov	r0, r4
   213c8:	f000 fdf8 	bl	21fbc <__lshift>
   213cc:	4680      	mov	r8, r0
   213ce:	e4b6      	b.n	20d3e <_dtoa_r+0x586>
   213d0:	9b00      	ldr	r3, [sp, #0]
   213d2:	2b39      	cmp	r3, #57	; 0x39
   213d4:	f000 8096 	beq.w	21504 <_dtoa_r+0xd4c>
   213d8:	9b00      	ldr	r3, [sp, #0]
   213da:	3301      	adds	r3, #1
   213dc:	46b3      	mov	fp, r6
   213de:	703b      	strb	r3, [r7, #0]
   213e0:	1c7d      	adds	r5, r7, #1
   213e2:	4646      	mov	r6, r8
   213e4:	e577      	b.n	20ed6 <_dtoa_r+0x71e>
   213e6:	46b3      	mov	fp, r6
   213e8:	4646      	mov	r6, r8
   213ea:	e558      	b.n	20e9e <_dtoa_r+0x6e6>
   213ec:	f04f 0900 	mov.w	r9, #0
   213f0:	464e      	mov	r6, r9
   213f2:	e70f      	b.n	21214 <_dtoa_r+0xa5c>
   213f4:	4964      	ldr	r1, [pc, #400]	; (21588 <_dtoa_r+0xdd0>)
   213f6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   213fa:	462a      	mov	r2, r5
   213fc:	4633      	mov	r3, r6
   213fe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21402:	f7fa fbe3 	bl	1bbcc <__aeabi_dmul>
   21406:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2140a:	4638      	mov	r0, r7
   2140c:	4641      	mov	r1, r8
   2140e:	f7fa fe77 	bl	1c100 <__aeabi_d2iz>
   21412:	4605      	mov	r5, r0
   21414:	f7fa fb74 	bl	1bb00 <__aeabi_i2d>
   21418:	4602      	mov	r2, r0
   2141a:	460b      	mov	r3, r1
   2141c:	4638      	mov	r0, r7
   2141e:	4641      	mov	r1, r8
   21420:	f7fa fa20 	bl	1b864 <__aeabi_dsub>
   21424:	9a07      	ldr	r2, [sp, #28]
   21426:	3530      	adds	r5, #48	; 0x30
   21428:	f1b9 0f01 	cmp.w	r9, #1
   2142c:	7015      	strb	r5, [r2, #0]
   2142e:	4606      	mov	r6, r0
   21430:	460f      	mov	r7, r1
   21432:	f102 0501 	add.w	r5, r2, #1
   21436:	d01c      	beq.n	21472 <_dtoa_r+0xcba>
   21438:	9b07      	ldr	r3, [sp, #28]
   2143a:	4499      	add	r9, r3
   2143c:	2200      	movs	r2, #0
   2143e:	4b54      	ldr	r3, [pc, #336]	; (21590 <_dtoa_r+0xdd8>)
   21440:	4630      	mov	r0, r6
   21442:	4639      	mov	r1, r7
   21444:	f7fa fbc2 	bl	1bbcc <__aeabi_dmul>
   21448:	460f      	mov	r7, r1
   2144a:	4606      	mov	r6, r0
   2144c:	f7fa fe58 	bl	1c100 <__aeabi_d2iz>
   21450:	4680      	mov	r8, r0
   21452:	f7fa fb55 	bl	1bb00 <__aeabi_i2d>
   21456:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2145a:	4602      	mov	r2, r0
   2145c:	460b      	mov	r3, r1
   2145e:	4630      	mov	r0, r6
   21460:	4639      	mov	r1, r7
   21462:	f7fa f9ff 	bl	1b864 <__aeabi_dsub>
   21466:	f805 8b01 	strb.w	r8, [r5], #1
   2146a:	454d      	cmp	r5, r9
   2146c:	4606      	mov	r6, r0
   2146e:	460f      	mov	r7, r1
   21470:	d1e4      	bne.n	2143c <_dtoa_r+0xc84>
   21472:	2200      	movs	r2, #0
   21474:	4b47      	ldr	r3, [pc, #284]	; (21594 <_dtoa_r+0xddc>)
   21476:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2147a:	f7fa f9f5 	bl	1b868 <__adddf3>
   2147e:	4632      	mov	r2, r6
   21480:	463b      	mov	r3, r7
   21482:	f7fa fe15 	bl	1c0b0 <__aeabi_dcmplt>
   21486:	2800      	cmp	r0, #0
   21488:	d042      	beq.n	21510 <_dtoa_r+0xd58>
   2148a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2148c:	9304      	str	r3, [sp, #16]
   2148e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21492:	f7ff bb4c 	b.w	20b2e <_dtoa_r+0x376>
   21496:	9b06      	ldr	r3, [sp, #24]
   21498:	9a08      	ldr	r2, [sp, #32]
   2149a:	1a9d      	subs	r5, r3, r2
   2149c:	2300      	movs	r3, #0
   2149e:	f7ff bb7e 	b.w	20b9e <_dtoa_r+0x3e6>
   214a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   214a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   214a6:	9d06      	ldr	r5, [sp, #24]
   214a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   214ac:	f7ff bb77 	b.w	20b9e <_dtoa_r+0x3e6>
   214b0:	e9dd 7800 	ldrd	r7, r8, [sp]
   214b4:	f04f 0902 	mov.w	r9, #2
   214b8:	e581      	b.n	20fbe <_dtoa_r+0x806>
   214ba:	9b08      	ldr	r3, [sp, #32]
   214bc:	2b00      	cmp	r3, #0
   214be:	f43f aecd 	beq.w	2125c <_dtoa_r+0xaa4>
   214c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   214c4:	2b00      	cmp	r3, #0
   214c6:	f77f aa82 	ble.w	209ce <_dtoa_r+0x216>
   214ca:	2200      	movs	r2, #0
   214cc:	4b30      	ldr	r3, [pc, #192]	; (21590 <_dtoa_r+0xdd8>)
   214ce:	4638      	mov	r0, r7
   214d0:	4641      	mov	r1, r8
   214d2:	f7fa fb7b 	bl	1bbcc <__aeabi_dmul>
   214d6:	4607      	mov	r7, r0
   214d8:	4688      	mov	r8, r1
   214da:	f109 0001 	add.w	r0, r9, #1
   214de:	f7fa fb0f 	bl	1bb00 <__aeabi_i2d>
   214e2:	463a      	mov	r2, r7
   214e4:	4643      	mov	r3, r8
   214e6:	f7fa fb71 	bl	1bbcc <__aeabi_dmul>
   214ea:	2200      	movs	r2, #0
   214ec:	4b24      	ldr	r3, [pc, #144]	; (21580 <_dtoa_r+0xdc8>)
   214ee:	f7fa f9bb 	bl	1b868 <__adddf3>
   214f2:	9a04      	ldr	r2, [sp, #16]
   214f4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   214f8:	3a01      	subs	r2, #1
   214fa:	4605      	mov	r5, r0
   214fc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21500:	9211      	str	r2, [sp, #68]	; 0x44
   21502:	e57d      	b.n	21000 <_dtoa_r+0x848>
   21504:	2239      	movs	r2, #57	; 0x39
   21506:	46b3      	mov	fp, r6
   21508:	703a      	strb	r2, [r7, #0]
   2150a:	4646      	mov	r6, r8
   2150c:	1c7d      	adds	r5, r7, #1
   2150e:	e4d4      	b.n	20eba <_dtoa_r+0x702>
   21510:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21514:	2000      	movs	r0, #0
   21516:	491f      	ldr	r1, [pc, #124]	; (21594 <_dtoa_r+0xddc>)
   21518:	f7fa f9a4 	bl	1b864 <__aeabi_dsub>
   2151c:	4632      	mov	r2, r6
   2151e:	463b      	mov	r3, r7
   21520:	f7fa fde4 	bl	1c0ec <__aeabi_dcmpgt>
   21524:	b910      	cbnz	r0, 2152c <_dtoa_r+0xd74>
   21526:	f7ff ba52 	b.w	209ce <_dtoa_r+0x216>
   2152a:	4615      	mov	r5, r2
   2152c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   21530:	2b30      	cmp	r3, #48	; 0x30
   21532:	f105 32ff 	add.w	r2, r5, #4294967295
   21536:	d0f8      	beq.n	2152a <_dtoa_r+0xd72>
   21538:	e5ea      	b.n	21110 <_dtoa_r+0x958>
   2153a:	4643      	mov	r3, r8
   2153c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21540:	46a0      	mov	r8, r4
   21542:	461c      	mov	r4, r3
   21544:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21546:	9304      	str	r3, [sp, #16]
   21548:	f7ff baf1 	b.w	20b2e <_dtoa_r+0x376>
   2154c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21550:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   21554:	4644      	mov	r4, r8
   21556:	f7ff ba3a 	b.w	209ce <_dtoa_r+0x216>
   2155a:	46b8      	mov	r8, r7
   2155c:	f7ff bbac 	b.w	20cb8 <_dtoa_r+0x500>
   21560:	9b00      	ldr	r3, [sp, #0]
   21562:	2b39      	cmp	r3, #57	; 0x39
   21564:	d0ce      	beq.n	21504 <_dtoa_r+0xd4c>
   21566:	f1bb 0f00 	cmp.w	fp, #0
   2156a:	f73f aed4 	bgt.w	21316 <_dtoa_r+0xb5e>
   2156e:	e6d5      	b.n	2131c <_dtoa_r+0xb64>
   21570:	f47f aed4 	bne.w	2131c <_dtoa_r+0xb64>
   21574:	9b00      	ldr	r3, [sp, #0]
   21576:	07da      	lsls	r2, r3, #31
   21578:	f57f aed0 	bpl.w	2131c <_dtoa_r+0xb64>
   2157c:	e6c7      	b.n	2130e <_dtoa_r+0xb56>
   2157e:	bf00      	nop
   21580:	401c0000 	.word	0x401c0000
   21584:	40140000 	.word	0x40140000
   21588:	00024e88 	.word	0x00024e88
   2158c:	00024e60 	.word	0x00024e60
   21590:	40240000 	.word	0x40240000
   21594:	3fe00000 	.word	0x3fe00000
   21598:	4631      	mov	r1, r6
   2159a:	2300      	movs	r3, #0
   2159c:	220a      	movs	r2, #10
   2159e:	4620      	mov	r0, r4
   215a0:	f000 fb90 	bl	21cc4 <__multadd>
   215a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   215a6:	2b00      	cmp	r3, #0
   215a8:	4606      	mov	r6, r0
   215aa:	dd0a      	ble.n	215c2 <_dtoa_r+0xe0a>
   215ac:	9308      	str	r3, [sp, #32]
   215ae:	f7ff bbb9 	b.w	20d24 <_dtoa_r+0x56c>
   215b2:	9b02      	ldr	r3, [sp, #8]
   215b4:	2b02      	cmp	r3, #2
   215b6:	dc22      	bgt.n	215fe <_dtoa_r+0xe46>
   215b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   215ba:	e44a      	b.n	20e52 <_dtoa_r+0x69a>
   215bc:	f04f 0902 	mov.w	r9, #2
   215c0:	e4fd      	b.n	20fbe <_dtoa_r+0x806>
   215c2:	9b02      	ldr	r3, [sp, #8]
   215c4:	2b02      	cmp	r3, #2
   215c6:	dc1a      	bgt.n	215fe <_dtoa_r+0xe46>
   215c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   215ca:	e7ef      	b.n	215ac <_dtoa_r+0xdf4>
   215cc:	2500      	movs	r5, #0
   215ce:	6465      	str	r5, [r4, #68]	; 0x44
   215d0:	4629      	mov	r1, r5
   215d2:	4620      	mov	r0, r4
   215d4:	f000 fb46 	bl	21c64 <_Balloc>
   215d8:	f04f 33ff 	mov.w	r3, #4294967295
   215dc:	9308      	str	r3, [sp, #32]
   215de:	930d      	str	r3, [sp, #52]	; 0x34
   215e0:	2301      	movs	r3, #1
   215e2:	9007      	str	r0, [sp, #28]
   215e4:	46ab      	mov	fp, r5
   215e6:	6420      	str	r0, [r4, #64]	; 0x40
   215e8:	9309      	str	r3, [sp, #36]	; 0x24
   215ea:	f7ff b9f0 	b.w	209ce <_dtoa_r+0x216>
   215ee:	f43f ab7b 	beq.w	20ce8 <_dtoa_r+0x530>
   215f2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   215f6:	e40b      	b.n	20e10 <_dtoa_r+0x658>
   215f8:	2701      	movs	r7, #1
   215fa:	f7ff b9af 	b.w	2095c <_dtoa_r+0x1a4>
   215fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21600:	9308      	str	r3, [sp, #32]
   21602:	e5f8      	b.n	211f6 <_dtoa_r+0xa3e>

00021604 <__sflush_r>:
   21604:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21608:	b29a      	uxth	r2, r3
   2160a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2160e:	460d      	mov	r5, r1
   21610:	0711      	lsls	r1, r2, #28
   21612:	4680      	mov	r8, r0
   21614:	d43a      	bmi.n	2168c <__sflush_r+0x88>
   21616:	686a      	ldr	r2, [r5, #4]
   21618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2161c:	2a00      	cmp	r2, #0
   2161e:	81ab      	strh	r3, [r5, #12]
   21620:	dd6f      	ble.n	21702 <__sflush_r+0xfe>
   21622:	6aac      	ldr	r4, [r5, #40]	; 0x28
   21624:	2c00      	cmp	r4, #0
   21626:	d049      	beq.n	216bc <__sflush_r+0xb8>
   21628:	2200      	movs	r2, #0
   2162a:	b29b      	uxth	r3, r3
   2162c:	f8d8 6000 	ldr.w	r6, [r8]
   21630:	f8c8 2000 	str.w	r2, [r8]
   21634:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   21638:	d067      	beq.n	2170a <__sflush_r+0x106>
   2163a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2163c:	075f      	lsls	r7, r3, #29
   2163e:	d505      	bpl.n	2164c <__sflush_r+0x48>
   21640:	6869      	ldr	r1, [r5, #4]
   21642:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   21644:	1a52      	subs	r2, r2, r1
   21646:	b10b      	cbz	r3, 2164c <__sflush_r+0x48>
   21648:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2164a:	1ad2      	subs	r2, r2, r3
   2164c:	2300      	movs	r3, #0
   2164e:	69e9      	ldr	r1, [r5, #28]
   21650:	4640      	mov	r0, r8
   21652:	47a0      	blx	r4
   21654:	1c44      	adds	r4, r0, #1
   21656:	d03c      	beq.n	216d2 <__sflush_r+0xce>
   21658:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2165c:	692a      	ldr	r2, [r5, #16]
   2165e:	602a      	str	r2, [r5, #0]
   21660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   21664:	2200      	movs	r2, #0
   21666:	81ab      	strh	r3, [r5, #12]
   21668:	04db      	lsls	r3, r3, #19
   2166a:	606a      	str	r2, [r5, #4]
   2166c:	d447      	bmi.n	216fe <__sflush_r+0xfa>
   2166e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   21670:	f8c8 6000 	str.w	r6, [r8]
   21674:	b311      	cbz	r1, 216bc <__sflush_r+0xb8>
   21676:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2167a:	4299      	cmp	r1, r3
   2167c:	d002      	beq.n	21684 <__sflush_r+0x80>
   2167e:	4640      	mov	r0, r8
   21680:	f000 f95a 	bl	21938 <_free_r>
   21684:	2000      	movs	r0, #0
   21686:	6328      	str	r0, [r5, #48]	; 0x30
   21688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2168c:	692e      	ldr	r6, [r5, #16]
   2168e:	b1ae      	cbz	r6, 216bc <__sflush_r+0xb8>
   21690:	682c      	ldr	r4, [r5, #0]
   21692:	602e      	str	r6, [r5, #0]
   21694:	0791      	lsls	r1, r2, #30
   21696:	bf0c      	ite	eq
   21698:	696b      	ldreq	r3, [r5, #20]
   2169a:	2300      	movne	r3, #0
   2169c:	1ba4      	subs	r4, r4, r6
   2169e:	60ab      	str	r3, [r5, #8]
   216a0:	e00a      	b.n	216b8 <__sflush_r+0xb4>
   216a2:	4623      	mov	r3, r4
   216a4:	4632      	mov	r2, r6
   216a6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   216a8:	69e9      	ldr	r1, [r5, #28]
   216aa:	4640      	mov	r0, r8
   216ac:	47b8      	blx	r7
   216ae:	2800      	cmp	r0, #0
   216b0:	eba4 0400 	sub.w	r4, r4, r0
   216b4:	4406      	add	r6, r0
   216b6:	dd04      	ble.n	216c2 <__sflush_r+0xbe>
   216b8:	2c00      	cmp	r4, #0
   216ba:	dcf2      	bgt.n	216a2 <__sflush_r+0x9e>
   216bc:	2000      	movs	r0, #0
   216be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   216c2:	89ab      	ldrh	r3, [r5, #12]
   216c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   216c8:	81ab      	strh	r3, [r5, #12]
   216ca:	f04f 30ff 	mov.w	r0, #4294967295
   216ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   216d2:	f8d8 4000 	ldr.w	r4, [r8]
   216d6:	2c1d      	cmp	r4, #29
   216d8:	d8f3      	bhi.n	216c2 <__sflush_r+0xbe>
   216da:	4b19      	ldr	r3, [pc, #100]	; (21740 <__sflush_r+0x13c>)
   216dc:	40e3      	lsrs	r3, r4
   216de:	43db      	mvns	r3, r3
   216e0:	f013 0301 	ands.w	r3, r3, #1
   216e4:	d1ed      	bne.n	216c2 <__sflush_r+0xbe>
   216e6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   216ea:	606b      	str	r3, [r5, #4]
   216ec:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   216f0:	6929      	ldr	r1, [r5, #16]
   216f2:	81ab      	strh	r3, [r5, #12]
   216f4:	04da      	lsls	r2, r3, #19
   216f6:	6029      	str	r1, [r5, #0]
   216f8:	d5b9      	bpl.n	2166e <__sflush_r+0x6a>
   216fa:	2c00      	cmp	r4, #0
   216fc:	d1b7      	bne.n	2166e <__sflush_r+0x6a>
   216fe:	6528      	str	r0, [r5, #80]	; 0x50
   21700:	e7b5      	b.n	2166e <__sflush_r+0x6a>
   21702:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21704:	2a00      	cmp	r2, #0
   21706:	dc8c      	bgt.n	21622 <__sflush_r+0x1e>
   21708:	e7d8      	b.n	216bc <__sflush_r+0xb8>
   2170a:	2301      	movs	r3, #1
   2170c:	69e9      	ldr	r1, [r5, #28]
   2170e:	4640      	mov	r0, r8
   21710:	47a0      	blx	r4
   21712:	1c43      	adds	r3, r0, #1
   21714:	4602      	mov	r2, r0
   21716:	d002      	beq.n	2171e <__sflush_r+0x11a>
   21718:	89ab      	ldrh	r3, [r5, #12]
   2171a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2171c:	e78e      	b.n	2163c <__sflush_r+0x38>
   2171e:	f8d8 3000 	ldr.w	r3, [r8]
   21722:	2b00      	cmp	r3, #0
   21724:	d0f8      	beq.n	21718 <__sflush_r+0x114>
   21726:	2b1d      	cmp	r3, #29
   21728:	d001      	beq.n	2172e <__sflush_r+0x12a>
   2172a:	2b16      	cmp	r3, #22
   2172c:	d102      	bne.n	21734 <__sflush_r+0x130>
   2172e:	f8c8 6000 	str.w	r6, [r8]
   21732:	e7c3      	b.n	216bc <__sflush_r+0xb8>
   21734:	89ab      	ldrh	r3, [r5, #12]
   21736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2173a:	81ab      	strh	r3, [r5, #12]
   2173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21740:	20400001 	.word	0x20400001

00021744 <_fflush_r>:
   21744:	b538      	push	{r3, r4, r5, lr}
   21746:	460d      	mov	r5, r1
   21748:	4604      	mov	r4, r0
   2174a:	b108      	cbz	r0, 21750 <_fflush_r+0xc>
   2174c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2174e:	b1bb      	cbz	r3, 21780 <_fflush_r+0x3c>
   21750:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   21754:	b188      	cbz	r0, 2177a <_fflush_r+0x36>
   21756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21758:	07db      	lsls	r3, r3, #31
   2175a:	d401      	bmi.n	21760 <_fflush_r+0x1c>
   2175c:	0581      	lsls	r1, r0, #22
   2175e:	d517      	bpl.n	21790 <_fflush_r+0x4c>
   21760:	4620      	mov	r0, r4
   21762:	4629      	mov	r1, r5
   21764:	f7ff ff4e 	bl	21604 <__sflush_r>
   21768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2176a:	07da      	lsls	r2, r3, #31
   2176c:	4604      	mov	r4, r0
   2176e:	d402      	bmi.n	21776 <_fflush_r+0x32>
   21770:	89ab      	ldrh	r3, [r5, #12]
   21772:	059b      	lsls	r3, r3, #22
   21774:	d507      	bpl.n	21786 <_fflush_r+0x42>
   21776:	4620      	mov	r0, r4
   21778:	bd38      	pop	{r3, r4, r5, pc}
   2177a:	4604      	mov	r4, r0
   2177c:	4620      	mov	r0, r4
   2177e:	bd38      	pop	{r3, r4, r5, pc}
   21780:	f000 f838 	bl	217f4 <__sinit>
   21784:	e7e4      	b.n	21750 <_fflush_r+0xc>
   21786:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21788:	f7fc fa98 	bl	1dcbc <__retarget_lock_release_recursive>
   2178c:	4620      	mov	r0, r4
   2178e:	bd38      	pop	{r3, r4, r5, pc}
   21790:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21792:	f7fc fa91 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   21796:	e7e3      	b.n	21760 <_fflush_r+0x1c>

00021798 <_cleanup_r>:
   21798:	4901      	ldr	r1, [pc, #4]	; (217a0 <_cleanup_r+0x8>)
   2179a:	f000 b9b3 	b.w	21b04 <_fwalk_reent>
   2179e:	bf00      	nop
   217a0:	00022529 	.word	0x00022529

000217a4 <std.isra.0>:
   217a4:	b510      	push	{r4, lr}
   217a6:	2300      	movs	r3, #0
   217a8:	4604      	mov	r4, r0
   217aa:	8181      	strh	r1, [r0, #12]
   217ac:	81c2      	strh	r2, [r0, #14]
   217ae:	6003      	str	r3, [r0, #0]
   217b0:	6043      	str	r3, [r0, #4]
   217b2:	6083      	str	r3, [r0, #8]
   217b4:	6643      	str	r3, [r0, #100]	; 0x64
   217b6:	6103      	str	r3, [r0, #16]
   217b8:	6143      	str	r3, [r0, #20]
   217ba:	6183      	str	r3, [r0, #24]
   217bc:	4619      	mov	r1, r3
   217be:	2208      	movs	r2, #8
   217c0:	305c      	adds	r0, #92	; 0x5c
   217c2:	f7fc fed3 	bl	1e56c <memset>
   217c6:	4807      	ldr	r0, [pc, #28]	; (217e4 <std.isra.0+0x40>)
   217c8:	4907      	ldr	r1, [pc, #28]	; (217e8 <std.isra.0+0x44>)
   217ca:	4a08      	ldr	r2, [pc, #32]	; (217ec <std.isra.0+0x48>)
   217cc:	4b08      	ldr	r3, [pc, #32]	; (217f0 <std.isra.0+0x4c>)
   217ce:	6220      	str	r0, [r4, #32]
   217d0:	61e4      	str	r4, [r4, #28]
   217d2:	6261      	str	r1, [r4, #36]	; 0x24
   217d4:	62a2      	str	r2, [r4, #40]	; 0x28
   217d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   217d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   217dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   217e0:	f7fc ba66 	b.w	1dcb0 <__retarget_lock_init_recursive>
   217e4:	0002225d 	.word	0x0002225d
   217e8:	00022281 	.word	0x00022281
   217ec:	000222bd 	.word	0x000222bd
   217f0:	000222dd 	.word	0x000222dd

000217f4 <__sinit>:
   217f4:	b510      	push	{r4, lr}
   217f6:	4604      	mov	r4, r0
   217f8:	4812      	ldr	r0, [pc, #72]	; (21844 <__sinit+0x50>)
   217fa:	f7fc fa5d 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   217fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21800:	b9d2      	cbnz	r2, 21838 <__sinit+0x44>
   21802:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21806:	4810      	ldr	r0, [pc, #64]	; (21848 <__sinit+0x54>)
   21808:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2180c:	2103      	movs	r1, #3
   2180e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21812:	63e0      	str	r0, [r4, #60]	; 0x3c
   21814:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21818:	6860      	ldr	r0, [r4, #4]
   2181a:	2104      	movs	r1, #4
   2181c:	f7ff ffc2 	bl	217a4 <std.isra.0>
   21820:	2201      	movs	r2, #1
   21822:	2109      	movs	r1, #9
   21824:	68a0      	ldr	r0, [r4, #8]
   21826:	f7ff ffbd 	bl	217a4 <std.isra.0>
   2182a:	2202      	movs	r2, #2
   2182c:	2112      	movs	r1, #18
   2182e:	68e0      	ldr	r0, [r4, #12]
   21830:	f7ff ffb8 	bl	217a4 <std.isra.0>
   21834:	2301      	movs	r3, #1
   21836:	63a3      	str	r3, [r4, #56]	; 0x38
   21838:	4802      	ldr	r0, [pc, #8]	; (21844 <__sinit+0x50>)
   2183a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2183e:	f7fc ba3d 	b.w	1dcbc <__retarget_lock_release_recursive>
   21842:	bf00      	nop
   21844:	20002378 	.word	0x20002378
   21848:	00021799 	.word	0x00021799

0002184c <__sfp_lock_acquire>:
   2184c:	4801      	ldr	r0, [pc, #4]	; (21854 <__sfp_lock_acquire+0x8>)
   2184e:	f7fc ba33 	b.w	1dcb8 <__retarget_lock_acquire_recursive>
   21852:	bf00      	nop
   21854:	2000238c 	.word	0x2000238c

00021858 <__sfp_lock_release>:
   21858:	4801      	ldr	r0, [pc, #4]	; (21860 <__sfp_lock_release+0x8>)
   2185a:	f7fc ba2f 	b.w	1dcbc <__retarget_lock_release_recursive>
   2185e:	bf00      	nop
   21860:	2000238c 	.word	0x2000238c

00021864 <__libc_fini_array>:
   21864:	b538      	push	{r3, r4, r5, lr}
   21866:	4c0a      	ldr	r4, [pc, #40]	; (21890 <__libc_fini_array+0x2c>)
   21868:	4d0a      	ldr	r5, [pc, #40]	; (21894 <__libc_fini_array+0x30>)
   2186a:	1b64      	subs	r4, r4, r5
   2186c:	10a4      	asrs	r4, r4, #2
   2186e:	d00a      	beq.n	21886 <__libc_fini_array+0x22>
   21870:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   21874:	3b01      	subs	r3, #1
   21876:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   2187a:	3c01      	subs	r4, #1
   2187c:	f855 3904 	ldr.w	r3, [r5], #-4
   21880:	4798      	blx	r3
   21882:	2c00      	cmp	r4, #0
   21884:	d1f9      	bne.n	2187a <__libc_fini_array+0x16>
   21886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2188a:	f001 b8b3 	b.w	229f4 <_fini>
   2188e:	bf00      	nop
   21890:	00022a3c 	.word	0x00022a3c
   21894:	00022a38 	.word	0x00022a38

00021898 <_malloc_trim_r>:
   21898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2189a:	4f24      	ldr	r7, [pc, #144]	; (2192c <_malloc_trim_r+0x94>)
   2189c:	460c      	mov	r4, r1
   2189e:	4606      	mov	r6, r0
   218a0:	f7fc feb2 	bl	1e608 <__malloc_lock>
   218a4:	68bb      	ldr	r3, [r7, #8]
   218a6:	685d      	ldr	r5, [r3, #4]
   218a8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   218ac:	310f      	adds	r1, #15
   218ae:	f025 0503 	bic.w	r5, r5, #3
   218b2:	4429      	add	r1, r5
   218b4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   218b8:	f021 010f 	bic.w	r1, r1, #15
   218bc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   218c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   218c4:	db07      	blt.n	218d6 <_malloc_trim_r+0x3e>
   218c6:	2100      	movs	r1, #0
   218c8:	4630      	mov	r0, r6
   218ca:	f7fd f88f 	bl	1e9ec <_sbrk_r>
   218ce:	68bb      	ldr	r3, [r7, #8]
   218d0:	442b      	add	r3, r5
   218d2:	4298      	cmp	r0, r3
   218d4:	d004      	beq.n	218e0 <_malloc_trim_r+0x48>
   218d6:	4630      	mov	r0, r6
   218d8:	f7fc fe9c 	bl	1e614 <__malloc_unlock>
   218dc:	2000      	movs	r0, #0
   218de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   218e0:	4261      	negs	r1, r4
   218e2:	4630      	mov	r0, r6
   218e4:	f7fd f882 	bl	1e9ec <_sbrk_r>
   218e8:	3001      	adds	r0, #1
   218ea:	d00d      	beq.n	21908 <_malloc_trim_r+0x70>
   218ec:	4b10      	ldr	r3, [pc, #64]	; (21930 <_malloc_trim_r+0x98>)
   218ee:	68ba      	ldr	r2, [r7, #8]
   218f0:	6819      	ldr	r1, [r3, #0]
   218f2:	1b2d      	subs	r5, r5, r4
   218f4:	f045 0501 	orr.w	r5, r5, #1
   218f8:	4630      	mov	r0, r6
   218fa:	1b09      	subs	r1, r1, r4
   218fc:	6055      	str	r5, [r2, #4]
   218fe:	6019      	str	r1, [r3, #0]
   21900:	f7fc fe88 	bl	1e614 <__malloc_unlock>
   21904:	2001      	movs	r0, #1
   21906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21908:	2100      	movs	r1, #0
   2190a:	4630      	mov	r0, r6
   2190c:	f7fd f86e 	bl	1e9ec <_sbrk_r>
   21910:	68ba      	ldr	r2, [r7, #8]
   21912:	1a83      	subs	r3, r0, r2
   21914:	2b0f      	cmp	r3, #15
   21916:	ddde      	ble.n	218d6 <_malloc_trim_r+0x3e>
   21918:	4c06      	ldr	r4, [pc, #24]	; (21934 <_malloc_trim_r+0x9c>)
   2191a:	4905      	ldr	r1, [pc, #20]	; (21930 <_malloc_trim_r+0x98>)
   2191c:	6824      	ldr	r4, [r4, #0]
   2191e:	f043 0301 	orr.w	r3, r3, #1
   21922:	1b00      	subs	r0, r0, r4
   21924:	6053      	str	r3, [r2, #4]
   21926:	6008      	str	r0, [r1, #0]
   21928:	e7d5      	b.n	218d6 <_malloc_trim_r+0x3e>
   2192a:	bf00      	nop
   2192c:	20000694 	.word	0x20000694
   21930:	20002294 	.word	0x20002294
   21934:	20000a9c 	.word	0x20000a9c

00021938 <_free_r>:
   21938:	2900      	cmp	r1, #0
   2193a:	d044      	beq.n	219c6 <_free_r+0x8e>
   2193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21940:	460d      	mov	r5, r1
   21942:	4680      	mov	r8, r0
   21944:	f7fc fe60 	bl	1e608 <__malloc_lock>
   21948:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2194c:	4969      	ldr	r1, [pc, #420]	; (21af4 <_free_r+0x1bc>)
   2194e:	f027 0301 	bic.w	r3, r7, #1
   21952:	f1a5 0408 	sub.w	r4, r5, #8
   21956:	18e2      	adds	r2, r4, r3
   21958:	688e      	ldr	r6, [r1, #8]
   2195a:	6850      	ldr	r0, [r2, #4]
   2195c:	42b2      	cmp	r2, r6
   2195e:	f020 0003 	bic.w	r0, r0, #3
   21962:	d05e      	beq.n	21a22 <_free_r+0xea>
   21964:	07fe      	lsls	r6, r7, #31
   21966:	6050      	str	r0, [r2, #4]
   21968:	d40b      	bmi.n	21982 <_free_r+0x4a>
   2196a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2196e:	1be4      	subs	r4, r4, r7
   21970:	f101 0e08 	add.w	lr, r1, #8
   21974:	68a5      	ldr	r5, [r4, #8]
   21976:	4575      	cmp	r5, lr
   21978:	443b      	add	r3, r7
   2197a:	d06d      	beq.n	21a58 <_free_r+0x120>
   2197c:	68e7      	ldr	r7, [r4, #12]
   2197e:	60ef      	str	r7, [r5, #12]
   21980:	60bd      	str	r5, [r7, #8]
   21982:	1815      	adds	r5, r2, r0
   21984:	686d      	ldr	r5, [r5, #4]
   21986:	07ed      	lsls	r5, r5, #31
   21988:	d53e      	bpl.n	21a08 <_free_r+0xd0>
   2198a:	f043 0201 	orr.w	r2, r3, #1
   2198e:	6062      	str	r2, [r4, #4]
   21990:	50e3      	str	r3, [r4, r3]
   21992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21996:	d217      	bcs.n	219c8 <_free_r+0x90>
   21998:	08db      	lsrs	r3, r3, #3
   2199a:	1c58      	adds	r0, r3, #1
   2199c:	109a      	asrs	r2, r3, #2
   2199e:	684d      	ldr	r5, [r1, #4]
   219a0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   219a4:	60a7      	str	r7, [r4, #8]
   219a6:	2301      	movs	r3, #1
   219a8:	4093      	lsls	r3, r2
   219aa:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   219ae:	432b      	orrs	r3, r5
   219b0:	3a08      	subs	r2, #8
   219b2:	60e2      	str	r2, [r4, #12]
   219b4:	604b      	str	r3, [r1, #4]
   219b6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   219ba:	60fc      	str	r4, [r7, #12]
   219bc:	4640      	mov	r0, r8
   219be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   219c2:	f7fc be27 	b.w	1e614 <__malloc_unlock>
   219c6:	4770      	bx	lr
   219c8:	0a5a      	lsrs	r2, r3, #9
   219ca:	2a04      	cmp	r2, #4
   219cc:	d852      	bhi.n	21a74 <_free_r+0x13c>
   219ce:	099a      	lsrs	r2, r3, #6
   219d0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   219d4:	00ff      	lsls	r7, r7, #3
   219d6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   219da:	19c8      	adds	r0, r1, r7
   219dc:	59ca      	ldr	r2, [r1, r7]
   219de:	3808      	subs	r0, #8
   219e0:	4290      	cmp	r0, r2
   219e2:	d04f      	beq.n	21a84 <_free_r+0x14c>
   219e4:	6851      	ldr	r1, [r2, #4]
   219e6:	f021 0103 	bic.w	r1, r1, #3
   219ea:	428b      	cmp	r3, r1
   219ec:	d232      	bcs.n	21a54 <_free_r+0x11c>
   219ee:	6892      	ldr	r2, [r2, #8]
   219f0:	4290      	cmp	r0, r2
   219f2:	d1f7      	bne.n	219e4 <_free_r+0xac>
   219f4:	68c3      	ldr	r3, [r0, #12]
   219f6:	60a0      	str	r0, [r4, #8]
   219f8:	60e3      	str	r3, [r4, #12]
   219fa:	609c      	str	r4, [r3, #8]
   219fc:	60c4      	str	r4, [r0, #12]
   219fe:	4640      	mov	r0, r8
   21a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21a04:	f7fc be06 	b.w	1e614 <__malloc_unlock>
   21a08:	6895      	ldr	r5, [r2, #8]
   21a0a:	4f3b      	ldr	r7, [pc, #236]	; (21af8 <_free_r+0x1c0>)
   21a0c:	42bd      	cmp	r5, r7
   21a0e:	4403      	add	r3, r0
   21a10:	d040      	beq.n	21a94 <_free_r+0x15c>
   21a12:	68d0      	ldr	r0, [r2, #12]
   21a14:	60e8      	str	r0, [r5, #12]
   21a16:	f043 0201 	orr.w	r2, r3, #1
   21a1a:	6085      	str	r5, [r0, #8]
   21a1c:	6062      	str	r2, [r4, #4]
   21a1e:	50e3      	str	r3, [r4, r3]
   21a20:	e7b7      	b.n	21992 <_free_r+0x5a>
   21a22:	07ff      	lsls	r7, r7, #31
   21a24:	4403      	add	r3, r0
   21a26:	d407      	bmi.n	21a38 <_free_r+0x100>
   21a28:	f855 2c08 	ldr.w	r2, [r5, #-8]
   21a2c:	1aa4      	subs	r4, r4, r2
   21a2e:	4413      	add	r3, r2
   21a30:	68a0      	ldr	r0, [r4, #8]
   21a32:	68e2      	ldr	r2, [r4, #12]
   21a34:	60c2      	str	r2, [r0, #12]
   21a36:	6090      	str	r0, [r2, #8]
   21a38:	4a30      	ldr	r2, [pc, #192]	; (21afc <_free_r+0x1c4>)
   21a3a:	6812      	ldr	r2, [r2, #0]
   21a3c:	f043 0001 	orr.w	r0, r3, #1
   21a40:	4293      	cmp	r3, r2
   21a42:	6060      	str	r0, [r4, #4]
   21a44:	608c      	str	r4, [r1, #8]
   21a46:	d3b9      	bcc.n	219bc <_free_r+0x84>
   21a48:	4b2d      	ldr	r3, [pc, #180]	; (21b00 <_free_r+0x1c8>)
   21a4a:	4640      	mov	r0, r8
   21a4c:	6819      	ldr	r1, [r3, #0]
   21a4e:	f7ff ff23 	bl	21898 <_malloc_trim_r>
   21a52:	e7b3      	b.n	219bc <_free_r+0x84>
   21a54:	4610      	mov	r0, r2
   21a56:	e7cd      	b.n	219f4 <_free_r+0xbc>
   21a58:	1811      	adds	r1, r2, r0
   21a5a:	6849      	ldr	r1, [r1, #4]
   21a5c:	07c9      	lsls	r1, r1, #31
   21a5e:	d444      	bmi.n	21aea <_free_r+0x1b2>
   21a60:	6891      	ldr	r1, [r2, #8]
   21a62:	68d2      	ldr	r2, [r2, #12]
   21a64:	60ca      	str	r2, [r1, #12]
   21a66:	4403      	add	r3, r0
   21a68:	f043 0001 	orr.w	r0, r3, #1
   21a6c:	6091      	str	r1, [r2, #8]
   21a6e:	6060      	str	r0, [r4, #4]
   21a70:	50e3      	str	r3, [r4, r3]
   21a72:	e7a3      	b.n	219bc <_free_r+0x84>
   21a74:	2a14      	cmp	r2, #20
   21a76:	d816      	bhi.n	21aa6 <_free_r+0x16e>
   21a78:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   21a7c:	00ff      	lsls	r7, r7, #3
   21a7e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   21a82:	e7aa      	b.n	219da <_free_r+0xa2>
   21a84:	10aa      	asrs	r2, r5, #2
   21a86:	2301      	movs	r3, #1
   21a88:	684d      	ldr	r5, [r1, #4]
   21a8a:	4093      	lsls	r3, r2
   21a8c:	432b      	orrs	r3, r5
   21a8e:	604b      	str	r3, [r1, #4]
   21a90:	4603      	mov	r3, r0
   21a92:	e7b0      	b.n	219f6 <_free_r+0xbe>
   21a94:	f043 0201 	orr.w	r2, r3, #1
   21a98:	614c      	str	r4, [r1, #20]
   21a9a:	610c      	str	r4, [r1, #16]
   21a9c:	60e5      	str	r5, [r4, #12]
   21a9e:	60a5      	str	r5, [r4, #8]
   21aa0:	6062      	str	r2, [r4, #4]
   21aa2:	50e3      	str	r3, [r4, r3]
   21aa4:	e78a      	b.n	219bc <_free_r+0x84>
   21aa6:	2a54      	cmp	r2, #84	; 0x54
   21aa8:	d806      	bhi.n	21ab8 <_free_r+0x180>
   21aaa:	0b1a      	lsrs	r2, r3, #12
   21aac:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   21ab0:	00ff      	lsls	r7, r7, #3
   21ab2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   21ab6:	e790      	b.n	219da <_free_r+0xa2>
   21ab8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   21abc:	d806      	bhi.n	21acc <_free_r+0x194>
   21abe:	0bda      	lsrs	r2, r3, #15
   21ac0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21ac4:	00ff      	lsls	r7, r7, #3
   21ac6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   21aca:	e786      	b.n	219da <_free_r+0xa2>
   21acc:	f240 5054 	movw	r0, #1364	; 0x554
   21ad0:	4282      	cmp	r2, r0
   21ad2:	d806      	bhi.n	21ae2 <_free_r+0x1aa>
   21ad4:	0c9a      	lsrs	r2, r3, #18
   21ad6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   21ada:	00ff      	lsls	r7, r7, #3
   21adc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21ae0:	e77b      	b.n	219da <_free_r+0xa2>
   21ae2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21ae6:	257e      	movs	r5, #126	; 0x7e
   21ae8:	e777      	b.n	219da <_free_r+0xa2>
   21aea:	f043 0101 	orr.w	r1, r3, #1
   21aee:	6061      	str	r1, [r4, #4]
   21af0:	6013      	str	r3, [r2, #0]
   21af2:	e763      	b.n	219bc <_free_r+0x84>
   21af4:	20000694 	.word	0x20000694
   21af8:	2000069c 	.word	0x2000069c
   21afc:	20000aa0 	.word	0x20000aa0
   21b00:	200022c4 	.word	0x200022c4

00021b04 <_fwalk_reent>:
   21b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b08:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   21b0c:	d01f      	beq.n	21b4e <_fwalk_reent+0x4a>
   21b0e:	4688      	mov	r8, r1
   21b10:	4606      	mov	r6, r0
   21b12:	f04f 0900 	mov.w	r9, #0
   21b16:	687d      	ldr	r5, [r7, #4]
   21b18:	68bc      	ldr	r4, [r7, #8]
   21b1a:	3d01      	subs	r5, #1
   21b1c:	d411      	bmi.n	21b42 <_fwalk_reent+0x3e>
   21b1e:	89a3      	ldrh	r3, [r4, #12]
   21b20:	2b01      	cmp	r3, #1
   21b22:	f105 35ff 	add.w	r5, r5, #4294967295
   21b26:	d908      	bls.n	21b3a <_fwalk_reent+0x36>
   21b28:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21b2c:	3301      	adds	r3, #1
   21b2e:	4621      	mov	r1, r4
   21b30:	4630      	mov	r0, r6
   21b32:	d002      	beq.n	21b3a <_fwalk_reent+0x36>
   21b34:	47c0      	blx	r8
   21b36:	ea49 0900 	orr.w	r9, r9, r0
   21b3a:	1c6b      	adds	r3, r5, #1
   21b3c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21b40:	d1ed      	bne.n	21b1e <_fwalk_reent+0x1a>
   21b42:	683f      	ldr	r7, [r7, #0]
   21b44:	2f00      	cmp	r7, #0
   21b46:	d1e6      	bne.n	21b16 <_fwalk_reent+0x12>
   21b48:	4648      	mov	r0, r9
   21b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b4e:	46b9      	mov	r9, r7
   21b50:	4648      	mov	r0, r9
   21b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b56:	bf00      	nop

00021b58 <_localeconv_r>:
   21b58:	4a04      	ldr	r2, [pc, #16]	; (21b6c <_localeconv_r+0x14>)
   21b5a:	4b05      	ldr	r3, [pc, #20]	; (21b70 <_localeconv_r+0x18>)
   21b5c:	6812      	ldr	r2, [r2, #0]
   21b5e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   21b60:	2800      	cmp	r0, #0
   21b62:	bf08      	it	eq
   21b64:	4618      	moveq	r0, r3
   21b66:	30f0      	adds	r0, #240	; 0xf0
   21b68:	4770      	bx	lr
   21b6a:	bf00      	nop
   21b6c:	200000f8 	.word	0x200000f8
   21b70:	20000528 	.word	0x20000528

00021b74 <__swhatbuf_r>:
   21b74:	b570      	push	{r4, r5, r6, lr}
   21b76:	460c      	mov	r4, r1
   21b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21b7c:	2900      	cmp	r1, #0
   21b7e:	b090      	sub	sp, #64	; 0x40
   21b80:	4615      	mov	r5, r2
   21b82:	461e      	mov	r6, r3
   21b84:	db14      	blt.n	21bb0 <__swhatbuf_r+0x3c>
   21b86:	aa01      	add	r2, sp, #4
   21b88:	f000 fd30 	bl	225ec <_fstat_r>
   21b8c:	2800      	cmp	r0, #0
   21b8e:	db0f      	blt.n	21bb0 <__swhatbuf_r+0x3c>
   21b90:	9a02      	ldr	r2, [sp, #8]
   21b92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21b96:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   21b9a:	fab2 f282 	clz	r2, r2
   21b9e:	0952      	lsrs	r2, r2, #5
   21ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21ba4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21ba8:	6032      	str	r2, [r6, #0]
   21baa:	602b      	str	r3, [r5, #0]
   21bac:	b010      	add	sp, #64	; 0x40
   21bae:	bd70      	pop	{r4, r5, r6, pc}
   21bb0:	89a2      	ldrh	r2, [r4, #12]
   21bb2:	2300      	movs	r3, #0
   21bb4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21bb8:	6033      	str	r3, [r6, #0]
   21bba:	d004      	beq.n	21bc6 <__swhatbuf_r+0x52>
   21bbc:	2240      	movs	r2, #64	; 0x40
   21bbe:	4618      	mov	r0, r3
   21bc0:	602a      	str	r2, [r5, #0]
   21bc2:	b010      	add	sp, #64	; 0x40
   21bc4:	bd70      	pop	{r4, r5, r6, pc}
   21bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21bca:	602b      	str	r3, [r5, #0]
   21bcc:	b010      	add	sp, #64	; 0x40
   21bce:	bd70      	pop	{r4, r5, r6, pc}

00021bd0 <__smakebuf_r>:
   21bd0:	898a      	ldrh	r2, [r1, #12]
   21bd2:	0792      	lsls	r2, r2, #30
   21bd4:	460b      	mov	r3, r1
   21bd6:	d506      	bpl.n	21be6 <__smakebuf_r+0x16>
   21bd8:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21bdc:	2101      	movs	r1, #1
   21bde:	601a      	str	r2, [r3, #0]
   21be0:	611a      	str	r2, [r3, #16]
   21be2:	6159      	str	r1, [r3, #20]
   21be4:	4770      	bx	lr
   21be6:	b5f0      	push	{r4, r5, r6, r7, lr}
   21be8:	b083      	sub	sp, #12
   21bea:	ab01      	add	r3, sp, #4
   21bec:	466a      	mov	r2, sp
   21bee:	460c      	mov	r4, r1
   21bf0:	4606      	mov	r6, r0
   21bf2:	f7ff ffbf 	bl	21b74 <__swhatbuf_r>
   21bf6:	9900      	ldr	r1, [sp, #0]
   21bf8:	4605      	mov	r5, r0
   21bfa:	4630      	mov	r0, r6
   21bfc:	f7fc f870 	bl	1dce0 <_malloc_r>
   21c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21c04:	b1d8      	cbz	r0, 21c3e <__smakebuf_r+0x6e>
   21c06:	9a01      	ldr	r2, [sp, #4]
   21c08:	4f15      	ldr	r7, [pc, #84]	; (21c60 <__smakebuf_r+0x90>)
   21c0a:	9900      	ldr	r1, [sp, #0]
   21c0c:	63f7      	str	r7, [r6, #60]	; 0x3c
   21c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21c12:	81a3      	strh	r3, [r4, #12]
   21c14:	6020      	str	r0, [r4, #0]
   21c16:	6120      	str	r0, [r4, #16]
   21c18:	6161      	str	r1, [r4, #20]
   21c1a:	b91a      	cbnz	r2, 21c24 <__smakebuf_r+0x54>
   21c1c:	432b      	orrs	r3, r5
   21c1e:	81a3      	strh	r3, [r4, #12]
   21c20:	b003      	add	sp, #12
   21c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c24:	4630      	mov	r0, r6
   21c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21c2a:	f000 fcf3 	bl	22614 <_isatty_r>
   21c2e:	b1a0      	cbz	r0, 21c5a <__smakebuf_r+0x8a>
   21c30:	89a3      	ldrh	r3, [r4, #12]
   21c32:	f023 0303 	bic.w	r3, r3, #3
   21c36:	f043 0301 	orr.w	r3, r3, #1
   21c3a:	b21b      	sxth	r3, r3
   21c3c:	e7ee      	b.n	21c1c <__smakebuf_r+0x4c>
   21c3e:	059a      	lsls	r2, r3, #22
   21c40:	d4ee      	bmi.n	21c20 <__smakebuf_r+0x50>
   21c42:	f023 0303 	bic.w	r3, r3, #3
   21c46:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21c4a:	f043 0302 	orr.w	r3, r3, #2
   21c4e:	2101      	movs	r1, #1
   21c50:	81a3      	strh	r3, [r4, #12]
   21c52:	6022      	str	r2, [r4, #0]
   21c54:	6122      	str	r2, [r4, #16]
   21c56:	6161      	str	r1, [r4, #20]
   21c58:	e7e2      	b.n	21c20 <__smakebuf_r+0x50>
   21c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21c5e:	e7dd      	b.n	21c1c <__smakebuf_r+0x4c>
   21c60:	00021799 	.word	0x00021799

00021c64 <_Balloc>:
   21c64:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21c66:	b570      	push	{r4, r5, r6, lr}
   21c68:	4605      	mov	r5, r0
   21c6a:	460c      	mov	r4, r1
   21c6c:	b14b      	cbz	r3, 21c82 <_Balloc+0x1e>
   21c6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21c72:	b180      	cbz	r0, 21c96 <_Balloc+0x32>
   21c74:	6802      	ldr	r2, [r0, #0]
   21c76:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21c7a:	2300      	movs	r3, #0
   21c7c:	6103      	str	r3, [r0, #16]
   21c7e:	60c3      	str	r3, [r0, #12]
   21c80:	bd70      	pop	{r4, r5, r6, pc}
   21c82:	2221      	movs	r2, #33	; 0x21
   21c84:	2104      	movs	r1, #4
   21c86:	f000 fc0d 	bl	224a4 <_calloc_r>
   21c8a:	64e8      	str	r0, [r5, #76]	; 0x4c
   21c8c:	4603      	mov	r3, r0
   21c8e:	2800      	cmp	r0, #0
   21c90:	d1ed      	bne.n	21c6e <_Balloc+0xa>
   21c92:	2000      	movs	r0, #0
   21c94:	bd70      	pop	{r4, r5, r6, pc}
   21c96:	2101      	movs	r1, #1
   21c98:	fa01 f604 	lsl.w	r6, r1, r4
   21c9c:	1d72      	adds	r2, r6, #5
   21c9e:	4628      	mov	r0, r5
   21ca0:	0092      	lsls	r2, r2, #2
   21ca2:	f000 fbff 	bl	224a4 <_calloc_r>
   21ca6:	2800      	cmp	r0, #0
   21ca8:	d0f3      	beq.n	21c92 <_Balloc+0x2e>
   21caa:	6044      	str	r4, [r0, #4]
   21cac:	6086      	str	r6, [r0, #8]
   21cae:	e7e4      	b.n	21c7a <_Balloc+0x16>

00021cb0 <_Bfree>:
   21cb0:	b131      	cbz	r1, 21cc0 <_Bfree+0x10>
   21cb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21cb4:	684a      	ldr	r2, [r1, #4]
   21cb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21cba:	6008      	str	r0, [r1, #0]
   21cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21cc0:	4770      	bx	lr
   21cc2:	bf00      	nop

00021cc4 <__multadd>:
   21cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21cc6:	690c      	ldr	r4, [r1, #16]
   21cc8:	b083      	sub	sp, #12
   21cca:	460d      	mov	r5, r1
   21ccc:	4606      	mov	r6, r0
   21cce:	f101 0e14 	add.w	lr, r1, #20
   21cd2:	2700      	movs	r7, #0
   21cd4:	f8de 0000 	ldr.w	r0, [lr]
   21cd8:	b281      	uxth	r1, r0
   21cda:	fb02 3301 	mla	r3, r2, r1, r3
   21cde:	0c01      	lsrs	r1, r0, #16
   21ce0:	0c18      	lsrs	r0, r3, #16
   21ce2:	fb02 0101 	mla	r1, r2, r1, r0
   21ce6:	b29b      	uxth	r3, r3
   21ce8:	3701      	adds	r7, #1
   21cea:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21cee:	42bc      	cmp	r4, r7
   21cf0:	f84e 3b04 	str.w	r3, [lr], #4
   21cf4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21cf8:	dcec      	bgt.n	21cd4 <__multadd+0x10>
   21cfa:	b13b      	cbz	r3, 21d0c <__multadd+0x48>
   21cfc:	68aa      	ldr	r2, [r5, #8]
   21cfe:	4294      	cmp	r4, r2
   21d00:	da07      	bge.n	21d12 <__multadd+0x4e>
   21d02:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21d06:	3401      	adds	r4, #1
   21d08:	6153      	str	r3, [r2, #20]
   21d0a:	612c      	str	r4, [r5, #16]
   21d0c:	4628      	mov	r0, r5
   21d0e:	b003      	add	sp, #12
   21d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d12:	6869      	ldr	r1, [r5, #4]
   21d14:	9301      	str	r3, [sp, #4]
   21d16:	3101      	adds	r1, #1
   21d18:	4630      	mov	r0, r6
   21d1a:	f7ff ffa3 	bl	21c64 <_Balloc>
   21d1e:	692a      	ldr	r2, [r5, #16]
   21d20:	3202      	adds	r2, #2
   21d22:	f105 010c 	add.w	r1, r5, #12
   21d26:	4607      	mov	r7, r0
   21d28:	0092      	lsls	r2, r2, #2
   21d2a:	300c      	adds	r0, #12
   21d2c:	f7fc fb20 	bl	1e370 <memcpy>
   21d30:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21d32:	6869      	ldr	r1, [r5, #4]
   21d34:	9b01      	ldr	r3, [sp, #4]
   21d36:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21d3a:	6028      	str	r0, [r5, #0]
   21d3c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21d40:	463d      	mov	r5, r7
   21d42:	e7de      	b.n	21d02 <__multadd+0x3e>

00021d44 <__hi0bits>:
   21d44:	0c02      	lsrs	r2, r0, #16
   21d46:	0412      	lsls	r2, r2, #16
   21d48:	4603      	mov	r3, r0
   21d4a:	b9b2      	cbnz	r2, 21d7a <__hi0bits+0x36>
   21d4c:	0403      	lsls	r3, r0, #16
   21d4e:	2010      	movs	r0, #16
   21d50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21d54:	bf04      	itt	eq
   21d56:	021b      	lsleq	r3, r3, #8
   21d58:	3008      	addeq	r0, #8
   21d5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21d5e:	bf04      	itt	eq
   21d60:	011b      	lsleq	r3, r3, #4
   21d62:	3004      	addeq	r0, #4
   21d64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21d68:	bf04      	itt	eq
   21d6a:	009b      	lsleq	r3, r3, #2
   21d6c:	3002      	addeq	r0, #2
   21d6e:	2b00      	cmp	r3, #0
   21d70:	db02      	blt.n	21d78 <__hi0bits+0x34>
   21d72:	005b      	lsls	r3, r3, #1
   21d74:	d403      	bmi.n	21d7e <__hi0bits+0x3a>
   21d76:	2020      	movs	r0, #32
   21d78:	4770      	bx	lr
   21d7a:	2000      	movs	r0, #0
   21d7c:	e7e8      	b.n	21d50 <__hi0bits+0xc>
   21d7e:	3001      	adds	r0, #1
   21d80:	4770      	bx	lr
   21d82:	bf00      	nop

00021d84 <__lo0bits>:
   21d84:	6803      	ldr	r3, [r0, #0]
   21d86:	f013 0207 	ands.w	r2, r3, #7
   21d8a:	4601      	mov	r1, r0
   21d8c:	d007      	beq.n	21d9e <__lo0bits+0x1a>
   21d8e:	07da      	lsls	r2, r3, #31
   21d90:	d421      	bmi.n	21dd6 <__lo0bits+0x52>
   21d92:	0798      	lsls	r0, r3, #30
   21d94:	d421      	bmi.n	21dda <__lo0bits+0x56>
   21d96:	089b      	lsrs	r3, r3, #2
   21d98:	600b      	str	r3, [r1, #0]
   21d9a:	2002      	movs	r0, #2
   21d9c:	4770      	bx	lr
   21d9e:	b298      	uxth	r0, r3
   21da0:	b198      	cbz	r0, 21dca <__lo0bits+0x46>
   21da2:	4610      	mov	r0, r2
   21da4:	f013 0fff 	tst.w	r3, #255	; 0xff
   21da8:	bf04      	itt	eq
   21daa:	0a1b      	lsreq	r3, r3, #8
   21dac:	3008      	addeq	r0, #8
   21dae:	071a      	lsls	r2, r3, #28
   21db0:	bf04      	itt	eq
   21db2:	091b      	lsreq	r3, r3, #4
   21db4:	3004      	addeq	r0, #4
   21db6:	079a      	lsls	r2, r3, #30
   21db8:	bf04      	itt	eq
   21dba:	089b      	lsreq	r3, r3, #2
   21dbc:	3002      	addeq	r0, #2
   21dbe:	07da      	lsls	r2, r3, #31
   21dc0:	d407      	bmi.n	21dd2 <__lo0bits+0x4e>
   21dc2:	085b      	lsrs	r3, r3, #1
   21dc4:	d104      	bne.n	21dd0 <__lo0bits+0x4c>
   21dc6:	2020      	movs	r0, #32
   21dc8:	4770      	bx	lr
   21dca:	0c1b      	lsrs	r3, r3, #16
   21dcc:	2010      	movs	r0, #16
   21dce:	e7e9      	b.n	21da4 <__lo0bits+0x20>
   21dd0:	3001      	adds	r0, #1
   21dd2:	600b      	str	r3, [r1, #0]
   21dd4:	4770      	bx	lr
   21dd6:	2000      	movs	r0, #0
   21dd8:	4770      	bx	lr
   21dda:	085b      	lsrs	r3, r3, #1
   21ddc:	600b      	str	r3, [r1, #0]
   21dde:	2001      	movs	r0, #1
   21de0:	4770      	bx	lr
   21de2:	bf00      	nop

00021de4 <__i2b>:
   21de4:	b510      	push	{r4, lr}
   21de6:	460c      	mov	r4, r1
   21de8:	2101      	movs	r1, #1
   21dea:	f7ff ff3b 	bl	21c64 <_Balloc>
   21dee:	2201      	movs	r2, #1
   21df0:	6144      	str	r4, [r0, #20]
   21df2:	6102      	str	r2, [r0, #16]
   21df4:	bd10      	pop	{r4, pc}
   21df6:	bf00      	nop

00021df8 <__multiply>:
   21df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21dfc:	690c      	ldr	r4, [r1, #16]
   21dfe:	6915      	ldr	r5, [r2, #16]
   21e00:	42ac      	cmp	r4, r5
   21e02:	b083      	sub	sp, #12
   21e04:	468b      	mov	fp, r1
   21e06:	4616      	mov	r6, r2
   21e08:	da04      	bge.n	21e14 <__multiply+0x1c>
   21e0a:	4622      	mov	r2, r4
   21e0c:	46b3      	mov	fp, r6
   21e0e:	462c      	mov	r4, r5
   21e10:	460e      	mov	r6, r1
   21e12:	4615      	mov	r5, r2
   21e14:	f8db 3008 	ldr.w	r3, [fp, #8]
   21e18:	f8db 1004 	ldr.w	r1, [fp, #4]
   21e1c:	eb04 0805 	add.w	r8, r4, r5
   21e20:	4598      	cmp	r8, r3
   21e22:	bfc8      	it	gt
   21e24:	3101      	addgt	r1, #1
   21e26:	f7ff ff1d 	bl	21c64 <_Balloc>
   21e2a:	f100 0914 	add.w	r9, r0, #20
   21e2e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21e32:	45d1      	cmp	r9, sl
   21e34:	9000      	str	r0, [sp, #0]
   21e36:	d205      	bcs.n	21e44 <__multiply+0x4c>
   21e38:	464b      	mov	r3, r9
   21e3a:	2100      	movs	r1, #0
   21e3c:	f843 1b04 	str.w	r1, [r3], #4
   21e40:	459a      	cmp	sl, r3
   21e42:	d8fb      	bhi.n	21e3c <__multiply+0x44>
   21e44:	f106 0c14 	add.w	ip, r6, #20
   21e48:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21e4c:	f10b 0b14 	add.w	fp, fp, #20
   21e50:	459c      	cmp	ip, r3
   21e52:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21e56:	d24c      	bcs.n	21ef2 <__multiply+0xfa>
   21e58:	f8cd a004 	str.w	sl, [sp, #4]
   21e5c:	469a      	mov	sl, r3
   21e5e:	f8dc 5000 	ldr.w	r5, [ip]
   21e62:	b2af      	uxth	r7, r5
   21e64:	b1ef      	cbz	r7, 21ea2 <__multiply+0xaa>
   21e66:	2100      	movs	r1, #0
   21e68:	464d      	mov	r5, r9
   21e6a:	465e      	mov	r6, fp
   21e6c:	460c      	mov	r4, r1
   21e6e:	f856 2b04 	ldr.w	r2, [r6], #4
   21e72:	6828      	ldr	r0, [r5, #0]
   21e74:	b293      	uxth	r3, r2
   21e76:	b281      	uxth	r1, r0
   21e78:	fb07 1303 	mla	r3, r7, r3, r1
   21e7c:	0c12      	lsrs	r2, r2, #16
   21e7e:	0c01      	lsrs	r1, r0, #16
   21e80:	4423      	add	r3, r4
   21e82:	fb07 1102 	mla	r1, r7, r2, r1
   21e86:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21e8a:	b29b      	uxth	r3, r3
   21e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21e90:	45b6      	cmp	lr, r6
   21e92:	f845 3b04 	str.w	r3, [r5], #4
   21e96:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21e9a:	d8e8      	bhi.n	21e6e <__multiply+0x76>
   21e9c:	602c      	str	r4, [r5, #0]
   21e9e:	f8dc 5000 	ldr.w	r5, [ip]
   21ea2:	0c2d      	lsrs	r5, r5, #16
   21ea4:	d01d      	beq.n	21ee2 <__multiply+0xea>
   21ea6:	f8d9 3000 	ldr.w	r3, [r9]
   21eaa:	4648      	mov	r0, r9
   21eac:	461c      	mov	r4, r3
   21eae:	4659      	mov	r1, fp
   21eb0:	2200      	movs	r2, #0
   21eb2:	880e      	ldrh	r6, [r1, #0]
   21eb4:	0c24      	lsrs	r4, r4, #16
   21eb6:	fb05 4406 	mla	r4, r5, r6, r4
   21eba:	4422      	add	r2, r4
   21ebc:	b29b      	uxth	r3, r3
   21ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21ec2:	f840 3b04 	str.w	r3, [r0], #4
   21ec6:	f851 3b04 	ldr.w	r3, [r1], #4
   21eca:	6804      	ldr	r4, [r0, #0]
   21ecc:	0c1b      	lsrs	r3, r3, #16
   21ece:	b2a6      	uxth	r6, r4
   21ed0:	fb05 6303 	mla	r3, r5, r3, r6
   21ed4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21ed8:	458e      	cmp	lr, r1
   21eda:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21ede:	d8e8      	bhi.n	21eb2 <__multiply+0xba>
   21ee0:	6003      	str	r3, [r0, #0]
   21ee2:	f10c 0c04 	add.w	ip, ip, #4
   21ee6:	45e2      	cmp	sl, ip
   21ee8:	f109 0904 	add.w	r9, r9, #4
   21eec:	d8b7      	bhi.n	21e5e <__multiply+0x66>
   21eee:	f8dd a004 	ldr.w	sl, [sp, #4]
   21ef2:	f1b8 0f00 	cmp.w	r8, #0
   21ef6:	dd0b      	ble.n	21f10 <__multiply+0x118>
   21ef8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21efc:	f1aa 0a04 	sub.w	sl, sl, #4
   21f00:	b11b      	cbz	r3, 21f0a <__multiply+0x112>
   21f02:	e005      	b.n	21f10 <__multiply+0x118>
   21f04:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21f08:	b913      	cbnz	r3, 21f10 <__multiply+0x118>
   21f0a:	f1b8 0801 	subs.w	r8, r8, #1
   21f0e:	d1f9      	bne.n	21f04 <__multiply+0x10c>
   21f10:	9800      	ldr	r0, [sp, #0]
   21f12:	f8c0 8010 	str.w	r8, [r0, #16]
   21f16:	b003      	add	sp, #12
   21f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021f1c <__pow5mult>:
   21f1c:	f012 0303 	ands.w	r3, r2, #3
   21f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f24:	4614      	mov	r4, r2
   21f26:	4607      	mov	r7, r0
   21f28:	d12e      	bne.n	21f88 <__pow5mult+0x6c>
   21f2a:	460d      	mov	r5, r1
   21f2c:	10a4      	asrs	r4, r4, #2
   21f2e:	d01c      	beq.n	21f6a <__pow5mult+0x4e>
   21f30:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21f32:	b396      	cbz	r6, 21f9a <__pow5mult+0x7e>
   21f34:	07e3      	lsls	r3, r4, #31
   21f36:	f04f 0800 	mov.w	r8, #0
   21f3a:	d406      	bmi.n	21f4a <__pow5mult+0x2e>
   21f3c:	1064      	asrs	r4, r4, #1
   21f3e:	d014      	beq.n	21f6a <__pow5mult+0x4e>
   21f40:	6830      	ldr	r0, [r6, #0]
   21f42:	b1a8      	cbz	r0, 21f70 <__pow5mult+0x54>
   21f44:	4606      	mov	r6, r0
   21f46:	07e3      	lsls	r3, r4, #31
   21f48:	d5f8      	bpl.n	21f3c <__pow5mult+0x20>
   21f4a:	4632      	mov	r2, r6
   21f4c:	4629      	mov	r1, r5
   21f4e:	4638      	mov	r0, r7
   21f50:	f7ff ff52 	bl	21df8 <__multiply>
   21f54:	b1b5      	cbz	r5, 21f84 <__pow5mult+0x68>
   21f56:	686a      	ldr	r2, [r5, #4]
   21f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21f5a:	1064      	asrs	r4, r4, #1
   21f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21f60:	6029      	str	r1, [r5, #0]
   21f62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21f66:	4605      	mov	r5, r0
   21f68:	d1ea      	bne.n	21f40 <__pow5mult+0x24>
   21f6a:	4628      	mov	r0, r5
   21f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21f70:	4632      	mov	r2, r6
   21f72:	4631      	mov	r1, r6
   21f74:	4638      	mov	r0, r7
   21f76:	f7ff ff3f 	bl	21df8 <__multiply>
   21f7a:	6030      	str	r0, [r6, #0]
   21f7c:	f8c0 8000 	str.w	r8, [r0]
   21f80:	4606      	mov	r6, r0
   21f82:	e7e0      	b.n	21f46 <__pow5mult+0x2a>
   21f84:	4605      	mov	r5, r0
   21f86:	e7d9      	b.n	21f3c <__pow5mult+0x20>
   21f88:	1e5a      	subs	r2, r3, #1
   21f8a:	4d0b      	ldr	r5, [pc, #44]	; (21fb8 <__pow5mult+0x9c>)
   21f8c:	2300      	movs	r3, #0
   21f8e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21f92:	f7ff fe97 	bl	21cc4 <__multadd>
   21f96:	4605      	mov	r5, r0
   21f98:	e7c8      	b.n	21f2c <__pow5mult+0x10>
   21f9a:	2101      	movs	r1, #1
   21f9c:	4638      	mov	r0, r7
   21f9e:	f7ff fe61 	bl	21c64 <_Balloc>
   21fa2:	f240 2171 	movw	r1, #625	; 0x271
   21fa6:	2201      	movs	r2, #1
   21fa8:	2300      	movs	r3, #0
   21faa:	6141      	str	r1, [r0, #20]
   21fac:	6102      	str	r2, [r0, #16]
   21fae:	4606      	mov	r6, r0
   21fb0:	64b8      	str	r0, [r7, #72]	; 0x48
   21fb2:	6003      	str	r3, [r0, #0]
   21fb4:	e7be      	b.n	21f34 <__pow5mult+0x18>
   21fb6:	bf00      	nop
   21fb8:	00024f50 	.word	0x00024f50

00021fbc <__lshift>:
   21fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21fc0:	4691      	mov	r9, r2
   21fc2:	690a      	ldr	r2, [r1, #16]
   21fc4:	688b      	ldr	r3, [r1, #8]
   21fc6:	ea4f 1469 	mov.w	r4, r9, asr #5
   21fca:	eb04 0802 	add.w	r8, r4, r2
   21fce:	f108 0501 	add.w	r5, r8, #1
   21fd2:	429d      	cmp	r5, r3
   21fd4:	460e      	mov	r6, r1
   21fd6:	4607      	mov	r7, r0
   21fd8:	6849      	ldr	r1, [r1, #4]
   21fda:	dd04      	ble.n	21fe6 <__lshift+0x2a>
   21fdc:	005b      	lsls	r3, r3, #1
   21fde:	429d      	cmp	r5, r3
   21fe0:	f101 0101 	add.w	r1, r1, #1
   21fe4:	dcfa      	bgt.n	21fdc <__lshift+0x20>
   21fe6:	4638      	mov	r0, r7
   21fe8:	f7ff fe3c 	bl	21c64 <_Balloc>
   21fec:	2c00      	cmp	r4, #0
   21fee:	f100 0314 	add.w	r3, r0, #20
   21ff2:	dd06      	ble.n	22002 <__lshift+0x46>
   21ff4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   21ff8:	2100      	movs	r1, #0
   21ffa:	f843 1b04 	str.w	r1, [r3], #4
   21ffe:	429a      	cmp	r2, r3
   22000:	d1fb      	bne.n	21ffa <__lshift+0x3e>
   22002:	6934      	ldr	r4, [r6, #16]
   22004:	f106 0114 	add.w	r1, r6, #20
   22008:	f019 091f 	ands.w	r9, r9, #31
   2200c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   22010:	d01d      	beq.n	2204e <__lshift+0x92>
   22012:	f1c9 0c20 	rsb	ip, r9, #32
   22016:	2200      	movs	r2, #0
   22018:	680c      	ldr	r4, [r1, #0]
   2201a:	fa04 f409 	lsl.w	r4, r4, r9
   2201e:	4314      	orrs	r4, r2
   22020:	f843 4b04 	str.w	r4, [r3], #4
   22024:	f851 2b04 	ldr.w	r2, [r1], #4
   22028:	458e      	cmp	lr, r1
   2202a:	fa22 f20c 	lsr.w	r2, r2, ip
   2202e:	d8f3      	bhi.n	22018 <__lshift+0x5c>
   22030:	601a      	str	r2, [r3, #0]
   22032:	b10a      	cbz	r2, 22038 <__lshift+0x7c>
   22034:	f108 0502 	add.w	r5, r8, #2
   22038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2203a:	6872      	ldr	r2, [r6, #4]
   2203c:	3d01      	subs	r5, #1
   2203e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22042:	6105      	str	r5, [r0, #16]
   22044:	6031      	str	r1, [r6, #0]
   22046:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2204a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2204e:	3b04      	subs	r3, #4
   22050:	f851 2b04 	ldr.w	r2, [r1], #4
   22054:	f843 2f04 	str.w	r2, [r3, #4]!
   22058:	458e      	cmp	lr, r1
   2205a:	d8f9      	bhi.n	22050 <__lshift+0x94>
   2205c:	e7ec      	b.n	22038 <__lshift+0x7c>
   2205e:	bf00      	nop

00022060 <__mcmp>:
   22060:	b430      	push	{r4, r5}
   22062:	690b      	ldr	r3, [r1, #16]
   22064:	4605      	mov	r5, r0
   22066:	6900      	ldr	r0, [r0, #16]
   22068:	1ac0      	subs	r0, r0, r3
   2206a:	d10f      	bne.n	2208c <__mcmp+0x2c>
   2206c:	009b      	lsls	r3, r3, #2
   2206e:	3514      	adds	r5, #20
   22070:	3114      	adds	r1, #20
   22072:	4419      	add	r1, r3
   22074:	442b      	add	r3, r5
   22076:	e001      	b.n	2207c <__mcmp+0x1c>
   22078:	429d      	cmp	r5, r3
   2207a:	d207      	bcs.n	2208c <__mcmp+0x2c>
   2207c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   22080:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22084:	4294      	cmp	r4, r2
   22086:	d0f7      	beq.n	22078 <__mcmp+0x18>
   22088:	d302      	bcc.n	22090 <__mcmp+0x30>
   2208a:	2001      	movs	r0, #1
   2208c:	bc30      	pop	{r4, r5}
   2208e:	4770      	bx	lr
   22090:	f04f 30ff 	mov.w	r0, #4294967295
   22094:	e7fa      	b.n	2208c <__mcmp+0x2c>
   22096:	bf00      	nop

00022098 <__mdiff>:
   22098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2209c:	690f      	ldr	r7, [r1, #16]
   2209e:	460e      	mov	r6, r1
   220a0:	6911      	ldr	r1, [r2, #16]
   220a2:	1a7f      	subs	r7, r7, r1
   220a4:	2f00      	cmp	r7, #0
   220a6:	4690      	mov	r8, r2
   220a8:	d117      	bne.n	220da <__mdiff+0x42>
   220aa:	0089      	lsls	r1, r1, #2
   220ac:	f106 0514 	add.w	r5, r6, #20
   220b0:	f102 0e14 	add.w	lr, r2, #20
   220b4:	186b      	adds	r3, r5, r1
   220b6:	4471      	add	r1, lr
   220b8:	e001      	b.n	220be <__mdiff+0x26>
   220ba:	429d      	cmp	r5, r3
   220bc:	d25c      	bcs.n	22178 <__mdiff+0xe0>
   220be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   220c2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   220c6:	42a2      	cmp	r2, r4
   220c8:	d0f7      	beq.n	220ba <__mdiff+0x22>
   220ca:	d25e      	bcs.n	2218a <__mdiff+0xf2>
   220cc:	4633      	mov	r3, r6
   220ce:	462c      	mov	r4, r5
   220d0:	4646      	mov	r6, r8
   220d2:	4675      	mov	r5, lr
   220d4:	4698      	mov	r8, r3
   220d6:	2701      	movs	r7, #1
   220d8:	e005      	b.n	220e6 <__mdiff+0x4e>
   220da:	db58      	blt.n	2218e <__mdiff+0xf6>
   220dc:	f106 0514 	add.w	r5, r6, #20
   220e0:	f108 0414 	add.w	r4, r8, #20
   220e4:	2700      	movs	r7, #0
   220e6:	6871      	ldr	r1, [r6, #4]
   220e8:	f7ff fdbc 	bl	21c64 <_Balloc>
   220ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
   220f0:	6936      	ldr	r6, [r6, #16]
   220f2:	60c7      	str	r7, [r0, #12]
   220f4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   220f8:	46a6      	mov	lr, r4
   220fa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   220fe:	f100 0414 	add.w	r4, r0, #20
   22102:	2300      	movs	r3, #0
   22104:	f85e 1b04 	ldr.w	r1, [lr], #4
   22108:	f855 8b04 	ldr.w	r8, [r5], #4
   2210c:	b28a      	uxth	r2, r1
   2210e:	fa13 f388 	uxtah	r3, r3, r8
   22112:	0c09      	lsrs	r1, r1, #16
   22114:	1a9a      	subs	r2, r3, r2
   22116:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2211a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2211e:	b292      	uxth	r2, r2
   22120:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   22124:	45f4      	cmp	ip, lr
   22126:	f844 2b04 	str.w	r2, [r4], #4
   2212a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2212e:	d8e9      	bhi.n	22104 <__mdiff+0x6c>
   22130:	42af      	cmp	r7, r5
   22132:	d917      	bls.n	22164 <__mdiff+0xcc>
   22134:	46a4      	mov	ip, r4
   22136:	46ae      	mov	lr, r5
   22138:	f85e 2b04 	ldr.w	r2, [lr], #4
   2213c:	fa13 f382 	uxtah	r3, r3, r2
   22140:	1419      	asrs	r1, r3, #16
   22142:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   22146:	b29b      	uxth	r3, r3
   22148:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2214c:	4577      	cmp	r7, lr
   2214e:	f84c 2b04 	str.w	r2, [ip], #4
   22152:	ea4f 4321 	mov.w	r3, r1, asr #16
   22156:	d8ef      	bhi.n	22138 <__mdiff+0xa0>
   22158:	43ed      	mvns	r5, r5
   2215a:	442f      	add	r7, r5
   2215c:	f027 0703 	bic.w	r7, r7, #3
   22160:	3704      	adds	r7, #4
   22162:	443c      	add	r4, r7
   22164:	3c04      	subs	r4, #4
   22166:	b922      	cbnz	r2, 22172 <__mdiff+0xda>
   22168:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2216c:	3e01      	subs	r6, #1
   2216e:	2b00      	cmp	r3, #0
   22170:	d0fa      	beq.n	22168 <__mdiff+0xd0>
   22172:	6106      	str	r6, [r0, #16]
   22174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22178:	2100      	movs	r1, #0
   2217a:	f7ff fd73 	bl	21c64 <_Balloc>
   2217e:	2201      	movs	r2, #1
   22180:	2300      	movs	r3, #0
   22182:	6102      	str	r2, [r0, #16]
   22184:	6143      	str	r3, [r0, #20]
   22186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2218a:	4674      	mov	r4, lr
   2218c:	e7ab      	b.n	220e6 <__mdiff+0x4e>
   2218e:	4633      	mov	r3, r6
   22190:	f106 0414 	add.w	r4, r6, #20
   22194:	f102 0514 	add.w	r5, r2, #20
   22198:	4616      	mov	r6, r2
   2219a:	2701      	movs	r7, #1
   2219c:	4698      	mov	r8, r3
   2219e:	e7a2      	b.n	220e6 <__mdiff+0x4e>

000221a0 <__d2b>:
   221a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   221a4:	ec57 6b10 	vmov	r6, r7, d0
   221a8:	b083      	sub	sp, #12
   221aa:	4688      	mov	r8, r1
   221ac:	2101      	movs	r1, #1
   221ae:	463c      	mov	r4, r7
   221b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
   221b4:	4617      	mov	r7, r2
   221b6:	f7ff fd55 	bl	21c64 <_Balloc>
   221ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
   221be:	4681      	mov	r9, r0
   221c0:	b10d      	cbz	r5, 221c6 <__d2b+0x26>
   221c2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   221c6:	9401      	str	r4, [sp, #4]
   221c8:	b31e      	cbz	r6, 22212 <__d2b+0x72>
   221ca:	a802      	add	r0, sp, #8
   221cc:	f840 6d08 	str.w	r6, [r0, #-8]!
   221d0:	f7ff fdd8 	bl	21d84 <__lo0bits>
   221d4:	2800      	cmp	r0, #0
   221d6:	d134      	bne.n	22242 <__d2b+0xa2>
   221d8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   221dc:	f8c9 2014 	str.w	r2, [r9, #20]
   221e0:	2b00      	cmp	r3, #0
   221e2:	bf0c      	ite	eq
   221e4:	2101      	moveq	r1, #1
   221e6:	2102      	movne	r1, #2
   221e8:	f8c9 3018 	str.w	r3, [r9, #24]
   221ec:	f8c9 1010 	str.w	r1, [r9, #16]
   221f0:	b9dd      	cbnz	r5, 2222a <__d2b+0x8a>
   221f2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   221f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   221fa:	f8c8 0000 	str.w	r0, [r8]
   221fe:	6918      	ldr	r0, [r3, #16]
   22200:	f7ff fda0 	bl	21d44 <__hi0bits>
   22204:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22208:	6038      	str	r0, [r7, #0]
   2220a:	4648      	mov	r0, r9
   2220c:	b003      	add	sp, #12
   2220e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22212:	a801      	add	r0, sp, #4
   22214:	f7ff fdb6 	bl	21d84 <__lo0bits>
   22218:	9b01      	ldr	r3, [sp, #4]
   2221a:	f8c9 3014 	str.w	r3, [r9, #20]
   2221e:	2101      	movs	r1, #1
   22220:	3020      	adds	r0, #32
   22222:	f8c9 1010 	str.w	r1, [r9, #16]
   22226:	2d00      	cmp	r5, #0
   22228:	d0e3      	beq.n	221f2 <__d2b+0x52>
   2222a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2222e:	4405      	add	r5, r0
   22230:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   22234:	f8c8 5000 	str.w	r5, [r8]
   22238:	6038      	str	r0, [r7, #0]
   2223a:	4648      	mov	r0, r9
   2223c:	b003      	add	sp, #12
   2223e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22242:	e89d 000a 	ldmia.w	sp, {r1, r3}
   22246:	f1c0 0220 	rsb	r2, r0, #32
   2224a:	fa03 f202 	lsl.w	r2, r3, r2
   2224e:	430a      	orrs	r2, r1
   22250:	40c3      	lsrs	r3, r0
   22252:	9301      	str	r3, [sp, #4]
   22254:	f8c9 2014 	str.w	r2, [r9, #20]
   22258:	e7c2      	b.n	221e0 <__d2b+0x40>
   2225a:	bf00      	nop

0002225c <__sread>:
   2225c:	b510      	push	{r4, lr}
   2225e:	460c      	mov	r4, r1
   22260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22264:	f000 f9fe 	bl	22664 <_read_r>
   22268:	2800      	cmp	r0, #0
   2226a:	db03      	blt.n	22274 <__sread+0x18>
   2226c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2226e:	4403      	add	r3, r0
   22270:	6523      	str	r3, [r4, #80]	; 0x50
   22272:	bd10      	pop	{r4, pc}
   22274:	89a3      	ldrh	r3, [r4, #12]
   22276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2227a:	81a3      	strh	r3, [r4, #12]
   2227c:	bd10      	pop	{r4, pc}
   2227e:	bf00      	nop

00022280 <__swrite>:
   22280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22284:	4616      	mov	r6, r2
   22286:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2228a:	461f      	mov	r7, r3
   2228c:	05d3      	lsls	r3, r2, #23
   2228e:	460c      	mov	r4, r1
   22290:	4605      	mov	r5, r0
   22292:	d507      	bpl.n	222a4 <__swrite+0x24>
   22294:	2200      	movs	r2, #0
   22296:	2302      	movs	r3, #2
   22298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2229c:	f000 f9cc 	bl	22638 <_lseek_r>
   222a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   222a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   222a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   222ac:	81a2      	strh	r2, [r4, #12]
   222ae:	463b      	mov	r3, r7
   222b0:	4632      	mov	r2, r6
   222b2:	4628      	mov	r0, r5
   222b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   222b8:	f7fe b960 	b.w	2057c <_write_r>

000222bc <__sseek>:
   222bc:	b510      	push	{r4, lr}
   222be:	460c      	mov	r4, r1
   222c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   222c4:	f000 f9b8 	bl	22638 <_lseek_r>
   222c8:	89a3      	ldrh	r3, [r4, #12]
   222ca:	1c42      	adds	r2, r0, #1
   222cc:	bf0e      	itee	eq
   222ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   222d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   222d6:	6520      	strne	r0, [r4, #80]	; 0x50
   222d8:	81a3      	strh	r3, [r4, #12]
   222da:	bd10      	pop	{r4, pc}

000222dc <__sclose>:
   222dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   222e0:	f000 b910 	b.w	22504 <_close_r>

000222e4 <__ssprint_r>:
   222e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222e8:	6893      	ldr	r3, [r2, #8]
   222ea:	b083      	sub	sp, #12
   222ec:	4690      	mov	r8, r2
   222ee:	2b00      	cmp	r3, #0
   222f0:	d070      	beq.n	223d4 <__ssprint_r+0xf0>
   222f2:	4682      	mov	sl, r0
   222f4:	460c      	mov	r4, r1
   222f6:	6817      	ldr	r7, [r2, #0]
   222f8:	688d      	ldr	r5, [r1, #8]
   222fa:	6808      	ldr	r0, [r1, #0]
   222fc:	e042      	b.n	22384 <__ssprint_r+0xa0>
   222fe:	89a3      	ldrh	r3, [r4, #12]
   22300:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22304:	d02e      	beq.n	22364 <__ssprint_r+0x80>
   22306:	6965      	ldr	r5, [r4, #20]
   22308:	6921      	ldr	r1, [r4, #16]
   2230a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2230e:	eba0 0b01 	sub.w	fp, r0, r1
   22312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22316:	f10b 0001 	add.w	r0, fp, #1
   2231a:	106d      	asrs	r5, r5, #1
   2231c:	4430      	add	r0, r6
   2231e:	42a8      	cmp	r0, r5
   22320:	462a      	mov	r2, r5
   22322:	bf84      	itt	hi
   22324:	4605      	movhi	r5, r0
   22326:	462a      	movhi	r2, r5
   22328:	055b      	lsls	r3, r3, #21
   2232a:	d538      	bpl.n	2239e <__ssprint_r+0xba>
   2232c:	4611      	mov	r1, r2
   2232e:	4650      	mov	r0, sl
   22330:	f7fb fcd6 	bl	1dce0 <_malloc_r>
   22334:	2800      	cmp	r0, #0
   22336:	d03c      	beq.n	223b2 <__ssprint_r+0xce>
   22338:	465a      	mov	r2, fp
   2233a:	6921      	ldr	r1, [r4, #16]
   2233c:	9001      	str	r0, [sp, #4]
   2233e:	f7fc f817 	bl	1e370 <memcpy>
   22342:	89a2      	ldrh	r2, [r4, #12]
   22344:	9b01      	ldr	r3, [sp, #4]
   22346:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2234a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2234e:	81a2      	strh	r2, [r4, #12]
   22350:	eba5 020b 	sub.w	r2, r5, fp
   22354:	eb03 000b 	add.w	r0, r3, fp
   22358:	6165      	str	r5, [r4, #20]
   2235a:	6123      	str	r3, [r4, #16]
   2235c:	6020      	str	r0, [r4, #0]
   2235e:	60a2      	str	r2, [r4, #8]
   22360:	4635      	mov	r5, r6
   22362:	46b3      	mov	fp, r6
   22364:	465a      	mov	r2, fp
   22366:	4649      	mov	r1, r9
   22368:	f7fc f89c 	bl	1e4a4 <memmove>
   2236c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22370:	68a2      	ldr	r2, [r4, #8]
   22372:	6820      	ldr	r0, [r4, #0]
   22374:	1b55      	subs	r5, r2, r5
   22376:	4458      	add	r0, fp
   22378:	1b9e      	subs	r6, r3, r6
   2237a:	60a5      	str	r5, [r4, #8]
   2237c:	6020      	str	r0, [r4, #0]
   2237e:	f8c8 6008 	str.w	r6, [r8, #8]
   22382:	b33e      	cbz	r6, 223d4 <__ssprint_r+0xf0>
   22384:	687e      	ldr	r6, [r7, #4]
   22386:	463b      	mov	r3, r7
   22388:	3708      	adds	r7, #8
   2238a:	2e00      	cmp	r6, #0
   2238c:	d0fa      	beq.n	22384 <__ssprint_r+0xa0>
   2238e:	42ae      	cmp	r6, r5
   22390:	f8d3 9000 	ldr.w	r9, [r3]
   22394:	46ab      	mov	fp, r5
   22396:	d2b2      	bcs.n	222fe <__ssprint_r+0x1a>
   22398:	4635      	mov	r5, r6
   2239a:	46b3      	mov	fp, r6
   2239c:	e7e2      	b.n	22364 <__ssprint_r+0x80>
   2239e:	4650      	mov	r0, sl
   223a0:	f7fc f97e 	bl	1e6a0 <_realloc_r>
   223a4:	4603      	mov	r3, r0
   223a6:	2800      	cmp	r0, #0
   223a8:	d1d2      	bne.n	22350 <__ssprint_r+0x6c>
   223aa:	6921      	ldr	r1, [r4, #16]
   223ac:	4650      	mov	r0, sl
   223ae:	f7ff fac3 	bl	21938 <_free_r>
   223b2:	230c      	movs	r3, #12
   223b4:	f8ca 3000 	str.w	r3, [sl]
   223b8:	89a3      	ldrh	r3, [r4, #12]
   223ba:	2200      	movs	r2, #0
   223bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   223c0:	f04f 30ff 	mov.w	r0, #4294967295
   223c4:	81a3      	strh	r3, [r4, #12]
   223c6:	f8c8 2008 	str.w	r2, [r8, #8]
   223ca:	f8c8 2004 	str.w	r2, [r8, #4]
   223ce:	b003      	add	sp, #12
   223d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223d4:	2000      	movs	r0, #0
   223d6:	f8c8 0004 	str.w	r0, [r8, #4]
   223da:	b003      	add	sp, #12
   223dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000223e0 <__register_exitproc>:
   223e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   223e4:	4d2c      	ldr	r5, [pc, #176]	; (22498 <__register_exitproc+0xb8>)
   223e6:	4606      	mov	r6, r0
   223e8:	6828      	ldr	r0, [r5, #0]
   223ea:	4698      	mov	r8, r3
   223ec:	460f      	mov	r7, r1
   223ee:	4691      	mov	r9, r2
   223f0:	f7fb fc62 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   223f4:	4b29      	ldr	r3, [pc, #164]	; (2249c <__register_exitproc+0xbc>)
   223f6:	681c      	ldr	r4, [r3, #0]
   223f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   223fc:	2b00      	cmp	r3, #0
   223fe:	d03e      	beq.n	2247e <__register_exitproc+0x9e>
   22400:	685a      	ldr	r2, [r3, #4]
   22402:	2a1f      	cmp	r2, #31
   22404:	dc1c      	bgt.n	22440 <__register_exitproc+0x60>
   22406:	f102 0e01 	add.w	lr, r2, #1
   2240a:	b176      	cbz	r6, 2242a <__register_exitproc+0x4a>
   2240c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22410:	2401      	movs	r4, #1
   22412:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22416:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2241a:	4094      	lsls	r4, r2
   2241c:	4320      	orrs	r0, r4
   2241e:	2e02      	cmp	r6, #2
   22420:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   22424:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22428:	d023      	beq.n	22472 <__register_exitproc+0x92>
   2242a:	3202      	adds	r2, #2
   2242c:	f8c3 e004 	str.w	lr, [r3, #4]
   22430:	6828      	ldr	r0, [r5, #0]
   22432:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   22436:	f7fb fc41 	bl	1dcbc <__retarget_lock_release_recursive>
   2243a:	2000      	movs	r0, #0
   2243c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22440:	4b17      	ldr	r3, [pc, #92]	; (224a0 <__register_exitproc+0xc0>)
   22442:	b30b      	cbz	r3, 22488 <__register_exitproc+0xa8>
   22444:	f44f 70c8 	mov.w	r0, #400	; 0x190
   22448:	f7fb fc3a 	bl	1dcc0 <malloc>
   2244c:	4603      	mov	r3, r0
   2244e:	b1d8      	cbz	r0, 22488 <__register_exitproc+0xa8>
   22450:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   22454:	6002      	str	r2, [r0, #0]
   22456:	2100      	movs	r1, #0
   22458:	6041      	str	r1, [r0, #4]
   2245a:	460a      	mov	r2, r1
   2245c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   22460:	f04f 0e01 	mov.w	lr, #1
   22464:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   22468:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   2246c:	2e00      	cmp	r6, #0
   2246e:	d0dc      	beq.n	2242a <__register_exitproc+0x4a>
   22470:	e7cc      	b.n	2240c <__register_exitproc+0x2c>
   22472:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   22476:	430c      	orrs	r4, r1
   22478:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   2247c:	e7d5      	b.n	2242a <__register_exitproc+0x4a>
   2247e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22482:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22486:	e7bb      	b.n	22400 <__register_exitproc+0x20>
   22488:	6828      	ldr	r0, [r5, #0]
   2248a:	f7fb fc17 	bl	1dcbc <__retarget_lock_release_recursive>
   2248e:	f04f 30ff 	mov.w	r0, #4294967295
   22492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22496:	bf00      	nop
   22498:	20000aa4 	.word	0x20000aa4
   2249c:	00024cb0 	.word	0x00024cb0
   224a0:	0001dcc1 	.word	0x0001dcc1

000224a4 <_calloc_r>:
   224a4:	b510      	push	{r4, lr}
   224a6:	fb02 f101 	mul.w	r1, r2, r1
   224aa:	f7fb fc19 	bl	1dce0 <_malloc_r>
   224ae:	4604      	mov	r4, r0
   224b0:	b1d8      	cbz	r0, 224ea <_calloc_r+0x46>
   224b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   224b6:	f022 0203 	bic.w	r2, r2, #3
   224ba:	3a04      	subs	r2, #4
   224bc:	2a24      	cmp	r2, #36	; 0x24
   224be:	d818      	bhi.n	224f2 <_calloc_r+0x4e>
   224c0:	2a13      	cmp	r2, #19
   224c2:	d914      	bls.n	224ee <_calloc_r+0x4a>
   224c4:	2300      	movs	r3, #0
   224c6:	2a1b      	cmp	r2, #27
   224c8:	6003      	str	r3, [r0, #0]
   224ca:	6043      	str	r3, [r0, #4]
   224cc:	d916      	bls.n	224fc <_calloc_r+0x58>
   224ce:	2a24      	cmp	r2, #36	; 0x24
   224d0:	6083      	str	r3, [r0, #8]
   224d2:	60c3      	str	r3, [r0, #12]
   224d4:	bf11      	iteee	ne
   224d6:	f100 0210 	addne.w	r2, r0, #16
   224da:	6103      	streq	r3, [r0, #16]
   224dc:	6143      	streq	r3, [r0, #20]
   224de:	f100 0218 	addeq.w	r2, r0, #24
   224e2:	2300      	movs	r3, #0
   224e4:	6013      	str	r3, [r2, #0]
   224e6:	6053      	str	r3, [r2, #4]
   224e8:	6093      	str	r3, [r2, #8]
   224ea:	4620      	mov	r0, r4
   224ec:	bd10      	pop	{r4, pc}
   224ee:	4602      	mov	r2, r0
   224f0:	e7f7      	b.n	224e2 <_calloc_r+0x3e>
   224f2:	2100      	movs	r1, #0
   224f4:	f7fc f83a 	bl	1e56c <memset>
   224f8:	4620      	mov	r0, r4
   224fa:	bd10      	pop	{r4, pc}
   224fc:	f100 0208 	add.w	r2, r0, #8
   22500:	e7ef      	b.n	224e2 <_calloc_r+0x3e>
   22502:	bf00      	nop

00022504 <_close_r>:
   22504:	b538      	push	{r3, r4, r5, lr}
   22506:	4c07      	ldr	r4, [pc, #28]	; (22524 <_close_r+0x20>)
   22508:	2300      	movs	r3, #0
   2250a:	4605      	mov	r5, r0
   2250c:	4608      	mov	r0, r1
   2250e:	6023      	str	r3, [r4, #0]
   22510:	f000 f9ac 	bl	2286c <_close>
   22514:	1c43      	adds	r3, r0, #1
   22516:	d000      	beq.n	2251a <_close_r+0x16>
   22518:	bd38      	pop	{r3, r4, r5, pc}
   2251a:	6823      	ldr	r3, [r4, #0]
   2251c:	2b00      	cmp	r3, #0
   2251e:	d0fb      	beq.n	22518 <_close_r+0x14>
   22520:	602b      	str	r3, [r5, #0]
   22522:	bd38      	pop	{r3, r4, r5, pc}
   22524:	20002390 	.word	0x20002390

00022528 <_fclose_r>:
   22528:	b570      	push	{r4, r5, r6, lr}
   2252a:	b159      	cbz	r1, 22544 <_fclose_r+0x1c>
   2252c:	4605      	mov	r5, r0
   2252e:	460c      	mov	r4, r1
   22530:	b110      	cbz	r0, 22538 <_fclose_r+0x10>
   22532:	6b83      	ldr	r3, [r0, #56]	; 0x38
   22534:	2b00      	cmp	r3, #0
   22536:	d03c      	beq.n	225b2 <_fclose_r+0x8a>
   22538:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2253a:	07d8      	lsls	r0, r3, #31
   2253c:	d505      	bpl.n	2254a <_fclose_r+0x22>
   2253e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22542:	b92b      	cbnz	r3, 22550 <_fclose_r+0x28>
   22544:	2600      	movs	r6, #0
   22546:	4630      	mov	r0, r6
   22548:	bd70      	pop	{r4, r5, r6, pc}
   2254a:	89a3      	ldrh	r3, [r4, #12]
   2254c:	0599      	lsls	r1, r3, #22
   2254e:	d53c      	bpl.n	225ca <_fclose_r+0xa2>
   22550:	4621      	mov	r1, r4
   22552:	4628      	mov	r0, r5
   22554:	f7ff f856 	bl	21604 <__sflush_r>
   22558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2255a:	4606      	mov	r6, r0
   2255c:	b133      	cbz	r3, 2256c <_fclose_r+0x44>
   2255e:	69e1      	ldr	r1, [r4, #28]
   22560:	4628      	mov	r0, r5
   22562:	4798      	blx	r3
   22564:	2800      	cmp	r0, #0
   22566:	bfb8      	it	lt
   22568:	f04f 36ff 	movlt.w	r6, #4294967295
   2256c:	89a3      	ldrh	r3, [r4, #12]
   2256e:	061a      	lsls	r2, r3, #24
   22570:	d422      	bmi.n	225b8 <_fclose_r+0x90>
   22572:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22574:	b141      	cbz	r1, 22588 <_fclose_r+0x60>
   22576:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2257a:	4299      	cmp	r1, r3
   2257c:	d002      	beq.n	22584 <_fclose_r+0x5c>
   2257e:	4628      	mov	r0, r5
   22580:	f7ff f9da 	bl	21938 <_free_r>
   22584:	2300      	movs	r3, #0
   22586:	6323      	str	r3, [r4, #48]	; 0x30
   22588:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2258a:	b121      	cbz	r1, 22596 <_fclose_r+0x6e>
   2258c:	4628      	mov	r0, r5
   2258e:	f7ff f9d3 	bl	21938 <_free_r>
   22592:	2300      	movs	r3, #0
   22594:	6463      	str	r3, [r4, #68]	; 0x44
   22596:	f7ff f959 	bl	2184c <__sfp_lock_acquire>
   2259a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2259c:	2200      	movs	r2, #0
   2259e:	07db      	lsls	r3, r3, #31
   225a0:	81a2      	strh	r2, [r4, #12]
   225a2:	d50e      	bpl.n	225c2 <_fclose_r+0x9a>
   225a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   225a6:	f7fb fb85 	bl	1dcb4 <__retarget_lock_close_recursive>
   225aa:	f7ff f955 	bl	21858 <__sfp_lock_release>
   225ae:	4630      	mov	r0, r6
   225b0:	bd70      	pop	{r4, r5, r6, pc}
   225b2:	f7ff f91f 	bl	217f4 <__sinit>
   225b6:	e7bf      	b.n	22538 <_fclose_r+0x10>
   225b8:	6921      	ldr	r1, [r4, #16]
   225ba:	4628      	mov	r0, r5
   225bc:	f7ff f9bc 	bl	21938 <_free_r>
   225c0:	e7d7      	b.n	22572 <_fclose_r+0x4a>
   225c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   225c4:	f7fb fb7a 	bl	1dcbc <__retarget_lock_release_recursive>
   225c8:	e7ec      	b.n	225a4 <_fclose_r+0x7c>
   225ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
   225cc:	f7fb fb74 	bl	1dcb8 <__retarget_lock_acquire_recursive>
   225d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   225d4:	2b00      	cmp	r3, #0
   225d6:	d1bb      	bne.n	22550 <_fclose_r+0x28>
   225d8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   225da:	f016 0601 	ands.w	r6, r6, #1
   225de:	d1b1      	bne.n	22544 <_fclose_r+0x1c>
   225e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   225e2:	f7fb fb6b 	bl	1dcbc <__retarget_lock_release_recursive>
   225e6:	4630      	mov	r0, r6
   225e8:	bd70      	pop	{r4, r5, r6, pc}
   225ea:	bf00      	nop

000225ec <_fstat_r>:
   225ec:	b538      	push	{r3, r4, r5, lr}
   225ee:	460b      	mov	r3, r1
   225f0:	4c07      	ldr	r4, [pc, #28]	; (22610 <_fstat_r+0x24>)
   225f2:	4605      	mov	r5, r0
   225f4:	4611      	mov	r1, r2
   225f6:	4618      	mov	r0, r3
   225f8:	2300      	movs	r3, #0
   225fa:	6023      	str	r3, [r4, #0]
   225fc:	f000 f9b4 	bl	22968 <_fstat>
   22600:	1c43      	adds	r3, r0, #1
   22602:	d000      	beq.n	22606 <_fstat_r+0x1a>
   22604:	bd38      	pop	{r3, r4, r5, pc}
   22606:	6823      	ldr	r3, [r4, #0]
   22608:	2b00      	cmp	r3, #0
   2260a:	d0fb      	beq.n	22604 <_fstat_r+0x18>
   2260c:	602b      	str	r3, [r5, #0]
   2260e:	bd38      	pop	{r3, r4, r5, pc}
   22610:	20002390 	.word	0x20002390

00022614 <_isatty_r>:
   22614:	b538      	push	{r3, r4, r5, lr}
   22616:	4c07      	ldr	r4, [pc, #28]	; (22634 <_isatty_r+0x20>)
   22618:	2300      	movs	r3, #0
   2261a:	4605      	mov	r5, r0
   2261c:	4608      	mov	r0, r1
   2261e:	6023      	str	r3, [r4, #0]
   22620:	f000 f9b0 	bl	22984 <_isatty>
   22624:	1c43      	adds	r3, r0, #1
   22626:	d000      	beq.n	2262a <_isatty_r+0x16>
   22628:	bd38      	pop	{r3, r4, r5, pc}
   2262a:	6823      	ldr	r3, [r4, #0]
   2262c:	2b00      	cmp	r3, #0
   2262e:	d0fb      	beq.n	22628 <_isatty_r+0x14>
   22630:	602b      	str	r3, [r5, #0]
   22632:	bd38      	pop	{r3, r4, r5, pc}
   22634:	20002390 	.word	0x20002390

00022638 <_lseek_r>:
   22638:	b570      	push	{r4, r5, r6, lr}
   2263a:	460d      	mov	r5, r1
   2263c:	4c08      	ldr	r4, [pc, #32]	; (22660 <_lseek_r+0x28>)
   2263e:	4611      	mov	r1, r2
   22640:	4606      	mov	r6, r0
   22642:	461a      	mov	r2, r3
   22644:	4628      	mov	r0, r5
   22646:	2300      	movs	r3, #0
   22648:	6023      	str	r3, [r4, #0]
   2264a:	f000 f8d3 	bl	227f4 <_lseek>
   2264e:	1c43      	adds	r3, r0, #1
   22650:	d000      	beq.n	22654 <_lseek_r+0x1c>
   22652:	bd70      	pop	{r4, r5, r6, pc}
   22654:	6823      	ldr	r3, [r4, #0]
   22656:	2b00      	cmp	r3, #0
   22658:	d0fb      	beq.n	22652 <_lseek_r+0x1a>
   2265a:	6033      	str	r3, [r6, #0]
   2265c:	bd70      	pop	{r4, r5, r6, pc}
   2265e:	bf00      	nop
   22660:	20002390 	.word	0x20002390

00022664 <_read_r>:
   22664:	b570      	push	{r4, r5, r6, lr}
   22666:	460d      	mov	r5, r1
   22668:	4c08      	ldr	r4, [pc, #32]	; (2268c <_read_r+0x28>)
   2266a:	4611      	mov	r1, r2
   2266c:	4606      	mov	r6, r0
   2266e:	461a      	mov	r2, r3
   22670:	4628      	mov	r0, r5
   22672:	2300      	movs	r3, #0
   22674:	6023      	str	r3, [r4, #0]
   22676:	f000 f84b 	bl	22710 <_read>
   2267a:	1c43      	adds	r3, r0, #1
   2267c:	d000      	beq.n	22680 <_read_r+0x1c>
   2267e:	bd70      	pop	{r4, r5, r6, pc}
   22680:	6823      	ldr	r3, [r4, #0]
   22682:	2b00      	cmp	r3, #0
   22684:	d0fb      	beq.n	2267e <_read_r+0x1a>
   22686:	6033      	str	r3, [r6, #0]
   22688:	bd70      	pop	{r4, r5, r6, pc}
   2268a:	bf00      	nop
   2268c:	20002390 	.word	0x20002390

00022690 <__aeabi_dcmpun>:
   22690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   22694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22698:	d102      	bne.n	226a0 <__aeabi_dcmpun+0x10>
   2269a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2269e:	d10a      	bne.n	226b6 <__aeabi_dcmpun+0x26>
   226a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   226a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   226a8:	d102      	bne.n	226b0 <__aeabi_dcmpun+0x20>
   226aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   226ae:	d102      	bne.n	226b6 <__aeabi_dcmpun+0x26>
   226b0:	f04f 0000 	mov.w	r0, #0
   226b4:	4770      	bx	lr
   226b6:	f04f 0001 	mov.w	r0, #1
   226ba:	4770      	bx	lr

000226bc <findslot>:
   226bc:	4b0b      	ldr	r3, [pc, #44]	; (226ec <findslot+0x30>)
   226be:	681b      	ldr	r3, [r3, #0]
   226c0:	b510      	push	{r4, lr}
   226c2:	4604      	mov	r4, r0
   226c4:	b10b      	cbz	r3, 226ca <findslot+0xe>
   226c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   226c8:	b14a      	cbz	r2, 226de <findslot+0x22>
   226ca:	2c13      	cmp	r4, #19
   226cc:	d80c      	bhi.n	226e8 <findslot+0x2c>
   226ce:	4808      	ldr	r0, [pc, #32]	; (226f0 <findslot+0x34>)
   226d0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   226d4:	3301      	adds	r3, #1
   226d6:	d007      	beq.n	226e8 <findslot+0x2c>
   226d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   226dc:	bd10      	pop	{r4, pc}
   226de:	4618      	mov	r0, r3
   226e0:	f7ff f888 	bl	217f4 <__sinit>
   226e4:	2c13      	cmp	r4, #19
   226e6:	d9f2      	bls.n	226ce <findslot+0x12>
   226e8:	2000      	movs	r0, #0
   226ea:	bd10      	pop	{r4, pc}
   226ec:	200000f8 	.word	0x200000f8
   226f0:	200022cc 	.word	0x200022cc

000226f4 <checkerror.part.0>:
   226f4:	b570      	push	{r4, r5, r6, lr}
   226f6:	f7fb f83d 	bl	1d774 <__errno>
   226fa:	2413      	movs	r4, #19
   226fc:	4605      	mov	r5, r0
   226fe:	2600      	movs	r6, #0
   22700:	4620      	mov	r0, r4
   22702:	4631      	mov	r1, r6
   22704:	beab      	bkpt	0x00ab
   22706:	4604      	mov	r4, r0
   22708:	f04f 30ff 	mov.w	r0, #4294967295
   2270c:	602c      	str	r4, [r5, #0]
   2270e:	bd70      	pop	{r4, r5, r6, pc}

00022710 <_read>:
   22710:	b5f0      	push	{r4, r5, r6, r7, lr}
   22712:	b085      	sub	sp, #20
   22714:	460c      	mov	r4, r1
   22716:	4616      	mov	r6, r2
   22718:	f7ff ffd0 	bl	226bc <findslot>
   2271c:	b1c8      	cbz	r0, 22752 <_read+0x42>
   2271e:	6803      	ldr	r3, [r0, #0]
   22720:	9301      	str	r3, [sp, #4]
   22722:	9402      	str	r4, [sp, #8]
   22724:	4605      	mov	r5, r0
   22726:	9603      	str	r6, [sp, #12]
   22728:	2406      	movs	r4, #6
   2272a:	af01      	add	r7, sp, #4
   2272c:	4620      	mov	r0, r4
   2272e:	4639      	mov	r1, r7
   22730:	beab      	bkpt	0x00ab
   22732:	4604      	mov	r4, r0
   22734:	1c62      	adds	r2, r4, #1
   22736:	4620      	mov	r0, r4
   22738:	d005      	beq.n	22746 <_read+0x36>
   2273a:	686b      	ldr	r3, [r5, #4]
   2273c:	1a30      	subs	r0, r6, r0
   2273e:	4403      	add	r3, r0
   22740:	606b      	str	r3, [r5, #4]
   22742:	b005      	add	sp, #20
   22744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22746:	f7ff ffd5 	bl	226f4 <checkerror.part.0>
   2274a:	1c43      	adds	r3, r0, #1
   2274c:	d1f5      	bne.n	2273a <_read+0x2a>
   2274e:	b005      	add	sp, #20
   22750:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22752:	f7fb f80f 	bl	1d774 <__errno>
   22756:	2309      	movs	r3, #9
   22758:	6003      	str	r3, [r0, #0]
   2275a:	f04f 30ff 	mov.w	r0, #4294967295
   2275e:	e7f0      	b.n	22742 <_read+0x32>

00022760 <_swilseek>:
   22760:	b5f0      	push	{r4, r5, r6, r7, lr}
   22762:	b083      	sub	sp, #12
   22764:	460d      	mov	r5, r1
   22766:	4614      	mov	r4, r2
   22768:	f7ff ffa8 	bl	226bc <findslot>
   2276c:	2800      	cmp	r0, #0
   2276e:	d03a      	beq.n	227e6 <_swilseek+0x86>
   22770:	2c02      	cmp	r4, #2
   22772:	d825      	bhi.n	227c0 <_swilseek+0x60>
   22774:	2c01      	cmp	r4, #1
   22776:	4606      	mov	r6, r0
   22778:	d01f      	beq.n	227ba <_swilseek+0x5a>
   2277a:	2c02      	cmp	r4, #2
   2277c:	d010      	beq.n	227a0 <_swilseek+0x40>
   2277e:	466f      	mov	r7, sp
   22780:	6833      	ldr	r3, [r6, #0]
   22782:	240a      	movs	r4, #10
   22784:	e88d 0028 	stmia.w	sp, {r3, r5}
   22788:	4620      	mov	r0, r4
   2278a:	4639      	mov	r1, r7
   2278c:	beab      	bkpt	0x00ab
   2278e:	4604      	mov	r4, r0
   22790:	1c63      	adds	r3, r4, #1
   22792:	d01c      	beq.n	227ce <_swilseek+0x6e>
   22794:	2c00      	cmp	r4, #0
   22796:	db23      	blt.n	227e0 <_swilseek+0x80>
   22798:	6075      	str	r5, [r6, #4]
   2279a:	4628      	mov	r0, r5
   2279c:	b003      	add	sp, #12
   2279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227a0:	af02      	add	r7, sp, #8
   227a2:	6803      	ldr	r3, [r0, #0]
   227a4:	f847 3d08 	str.w	r3, [r7, #-8]!
   227a8:	240c      	movs	r4, #12
   227aa:	4620      	mov	r0, r4
   227ac:	4639      	mov	r1, r7
   227ae:	beab      	bkpt	0x00ab
   227b0:	4604      	mov	r4, r0
   227b2:	1c61      	adds	r1, r4, #1
   227b4:	d00f      	beq.n	227d6 <_swilseek+0x76>
   227b6:	4425      	add	r5, r4
   227b8:	e7e2      	b.n	22780 <_swilseek+0x20>
   227ba:	6840      	ldr	r0, [r0, #4]
   227bc:	182d      	adds	r5, r5, r0
   227be:	d5de      	bpl.n	2277e <_swilseek+0x1e>
   227c0:	f7fa ffd8 	bl	1d774 <__errno>
   227c4:	2316      	movs	r3, #22
   227c6:	6003      	str	r3, [r0, #0]
   227c8:	f04f 35ff 	mov.w	r5, #4294967295
   227cc:	e7e5      	b.n	2279a <_swilseek+0x3a>
   227ce:	f7ff ff91 	bl	226f4 <checkerror.part.0>
   227d2:	4604      	mov	r4, r0
   227d4:	e7de      	b.n	22794 <_swilseek+0x34>
   227d6:	f7ff ff8d 	bl	226f4 <checkerror.part.0>
   227da:	1c42      	adds	r2, r0, #1
   227dc:	4604      	mov	r4, r0
   227de:	d1ea      	bne.n	227b6 <_swilseek+0x56>
   227e0:	f04f 35ff 	mov.w	r5, #4294967295
   227e4:	e7d9      	b.n	2279a <_swilseek+0x3a>
   227e6:	f7fa ffc5 	bl	1d774 <__errno>
   227ea:	2309      	movs	r3, #9
   227ec:	6003      	str	r3, [r0, #0]
   227ee:	f04f 35ff 	mov.w	r5, #4294967295
   227f2:	e7d2      	b.n	2279a <_swilseek+0x3a>

000227f4 <_lseek>:
   227f4:	f7ff bfb4 	b.w	22760 <_swilseek>

000227f8 <_write>:
   227f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   227fa:	b085      	sub	sp, #20
   227fc:	460c      	mov	r4, r1
   227fe:	4616      	mov	r6, r2
   22800:	f7ff ff5c 	bl	226bc <findslot>
   22804:	b350      	cbz	r0, 2285c <_write+0x64>
   22806:	6803      	ldr	r3, [r0, #0]
   22808:	9301      	str	r3, [sp, #4]
   2280a:	9402      	str	r4, [sp, #8]
   2280c:	4605      	mov	r5, r0
   2280e:	9603      	str	r6, [sp, #12]
   22810:	2405      	movs	r4, #5
   22812:	af01      	add	r7, sp, #4
   22814:	4620      	mov	r0, r4
   22816:	4639      	mov	r1, r7
   22818:	beab      	bkpt	0x00ab
   2281a:	4604      	mov	r4, r0
   2281c:	1c63      	adds	r3, r4, #1
   2281e:	d016      	beq.n	2284e <_write+0x56>
   22820:	2c00      	cmp	r4, #0
   22822:	db18      	blt.n	22856 <_write+0x5e>
   22824:	686a      	ldr	r2, [r5, #4]
   22826:	1b30      	subs	r0, r6, r4
   22828:	4402      	add	r2, r0
   2282a:	42a6      	cmp	r6, r4
   2282c:	606a      	str	r2, [r5, #4]
   2282e:	d001      	beq.n	22834 <_write+0x3c>
   22830:	b005      	add	sp, #20
   22832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22834:	f7fa ff9e 	bl	1d774 <__errno>
   22838:	2513      	movs	r5, #19
   2283a:	4606      	mov	r6, r0
   2283c:	2400      	movs	r4, #0
   2283e:	4628      	mov	r0, r5
   22840:	4621      	mov	r1, r4
   22842:	beab      	bkpt	0x00ab
   22844:	4605      	mov	r5, r0
   22846:	4620      	mov	r0, r4
   22848:	6035      	str	r5, [r6, #0]
   2284a:	b005      	add	sp, #20
   2284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2284e:	f7ff ff51 	bl	226f4 <checkerror.part.0>
   22852:	4604      	mov	r4, r0
   22854:	e7e4      	b.n	22820 <_write+0x28>
   22856:	f04f 30ff 	mov.w	r0, #4294967295
   2285a:	e7e9      	b.n	22830 <_write+0x38>
   2285c:	f7fa ff8a 	bl	1d774 <__errno>
   22860:	2309      	movs	r3, #9
   22862:	6003      	str	r3, [r0, #0]
   22864:	f04f 30ff 	mov.w	r0, #4294967295
   22868:	e7e2      	b.n	22830 <_write+0x38>
   2286a:	bf00      	nop

0002286c <_close>:
   2286c:	b570      	push	{r4, r5, r6, lr}
   2286e:	b082      	sub	sp, #8
   22870:	4604      	mov	r4, r0
   22872:	f7ff ff23 	bl	226bc <findslot>
   22876:	b310      	cbz	r0, 228be <_close+0x52>
   22878:	3c01      	subs	r4, #1
   2287a:	2c01      	cmp	r4, #1
   2287c:	4606      	mov	r6, r0
   2287e:	d911      	bls.n	228a4 <_close+0x38>
   22880:	ad02      	add	r5, sp, #8
   22882:	6833      	ldr	r3, [r6, #0]
   22884:	f845 3d04 	str.w	r3, [r5, #-4]!
   22888:	2402      	movs	r4, #2
   2288a:	4620      	mov	r0, r4
   2288c:	4629      	mov	r1, r5
   2288e:	beab      	bkpt	0x00ab
   22890:	4604      	mov	r4, r0
   22892:	1c63      	adds	r3, r4, #1
   22894:	4620      	mov	r0, r4
   22896:	d00f      	beq.n	228b8 <_close+0x4c>
   22898:	b910      	cbnz	r0, 228a0 <_close+0x34>
   2289a:	f04f 33ff 	mov.w	r3, #4294967295
   2289e:	6033      	str	r3, [r6, #0]
   228a0:	b002      	add	sp, #8
   228a2:	bd70      	pop	{r4, r5, r6, pc}
   228a4:	4b09      	ldr	r3, [pc, #36]	; (228cc <_close+0x60>)
   228a6:	689a      	ldr	r2, [r3, #8]
   228a8:	691b      	ldr	r3, [r3, #16]
   228aa:	429a      	cmp	r2, r3
   228ac:	d1e8      	bne.n	22880 <_close+0x14>
   228ae:	f04f 33ff 	mov.w	r3, #4294967295
   228b2:	6003      	str	r3, [r0, #0]
   228b4:	2000      	movs	r0, #0
   228b6:	e7f3      	b.n	228a0 <_close+0x34>
   228b8:	f7ff ff1c 	bl	226f4 <checkerror.part.0>
   228bc:	e7ec      	b.n	22898 <_close+0x2c>
   228be:	f7fa ff59 	bl	1d774 <__errno>
   228c2:	2309      	movs	r3, #9
   228c4:	6003      	str	r3, [r0, #0]
   228c6:	f04f 30ff 	mov.w	r0, #4294967295
   228ca:	e7e9      	b.n	228a0 <_close+0x34>
   228cc:	200022cc 	.word	0x200022cc

000228d0 <_getpid>:
   228d0:	2001      	movs	r0, #1
   228d2:	4770      	bx	lr

000228d4 <_sbrk>:
   228d4:	4a0e      	ldr	r2, [pc, #56]	; (22910 <_sbrk+0x3c>)
   228d6:	6813      	ldr	r3, [r2, #0]
   228d8:	b510      	push	{r4, lr}
   228da:	b1ab      	cbz	r3, 22908 <_sbrk+0x34>
   228dc:	4418      	add	r0, r3
   228de:	4669      	mov	r1, sp
   228e0:	4288      	cmp	r0, r1
   228e2:	d809      	bhi.n	228f8 <_sbrk+0x24>
   228e4:	490b      	ldr	r1, [pc, #44]	; (22914 <_sbrk+0x40>)
   228e6:	4c0c      	ldr	r4, [pc, #48]	; (22918 <_sbrk+0x44>)
   228e8:	6809      	ldr	r1, [r1, #0]
   228ea:	42a1      	cmp	r1, r4
   228ec:	d001      	beq.n	228f2 <_sbrk+0x1e>
   228ee:	4288      	cmp	r0, r1
   228f0:	d802      	bhi.n	228f8 <_sbrk+0x24>
   228f2:	6010      	str	r0, [r2, #0]
   228f4:	4618      	mov	r0, r3
   228f6:	bd10      	pop	{r4, pc}
   228f8:	f7fa ff3c 	bl	1d774 <__errno>
   228fc:	230c      	movs	r3, #12
   228fe:	6003      	str	r3, [r0, #0]
   22900:	f04f 33ff 	mov.w	r3, #4294967295
   22904:	4618      	mov	r0, r3
   22906:	bd10      	pop	{r4, pc}
   22908:	4b04      	ldr	r3, [pc, #16]	; (2291c <_sbrk+0x48>)
   2290a:	6013      	str	r3, [r2, #0]
   2290c:	e7e6      	b.n	228dc <_sbrk+0x8>
   2290e:	bf00      	nop
   22910:	200022c8 	.word	0x200022c8
   22914:	20000aa8 	.word	0x20000aa8
   22918:	cafedead 	.word	0xcafedead
   2291c:	20002394 	.word	0x20002394

00022920 <_swistat>:
   22920:	b570      	push	{r4, r5, r6, lr}
   22922:	460d      	mov	r5, r1
   22924:	f7ff feca 	bl	226bc <findslot>
   22928:	b1b8      	cbz	r0, 2295a <_swistat+0x3a>
   2292a:	686b      	ldr	r3, [r5, #4]
   2292c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22930:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22934:	4606      	mov	r6, r0
   22936:	606b      	str	r3, [r5, #4]
   22938:	62ea      	str	r2, [r5, #44]	; 0x2c
   2293a:	240c      	movs	r4, #12
   2293c:	4620      	mov	r0, r4
   2293e:	4631      	mov	r1, r6
   22940:	beab      	bkpt	0x00ab
   22942:	4604      	mov	r4, r0
   22944:	1c62      	adds	r2, r4, #1
   22946:	4620      	mov	r0, r4
   22948:	d002      	beq.n	22950 <_swistat+0x30>
   2294a:	6128      	str	r0, [r5, #16]
   2294c:	2000      	movs	r0, #0
   2294e:	bd70      	pop	{r4, r5, r6, pc}
   22950:	f7ff fed0 	bl	226f4 <checkerror.part.0>
   22954:	1c43      	adds	r3, r0, #1
   22956:	d1f8      	bne.n	2294a <_swistat+0x2a>
   22958:	e7f9      	b.n	2294e <_swistat+0x2e>
   2295a:	f7fa ff0b 	bl	1d774 <__errno>
   2295e:	2309      	movs	r3, #9
   22960:	6003      	str	r3, [r0, #0]
   22962:	f04f 30ff 	mov.w	r0, #4294967295
   22966:	bd70      	pop	{r4, r5, r6, pc}

00022968 <_fstat>:
   22968:	b538      	push	{r3, r4, r5, lr}
   2296a:	223c      	movs	r2, #60	; 0x3c
   2296c:	460c      	mov	r4, r1
   2296e:	4605      	mov	r5, r0
   22970:	4608      	mov	r0, r1
   22972:	2100      	movs	r1, #0
   22974:	f7fb fdfa 	bl	1e56c <memset>
   22978:	4621      	mov	r1, r4
   2297a:	4628      	mov	r0, r5
   2297c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22980:	f7ff bfce 	b.w	22920 <_swistat>

00022984 <_isatty>:
   22984:	b570      	push	{r4, r5, r6, lr}
   22986:	f7ff fe99 	bl	226bc <findslot>
   2298a:	4605      	mov	r5, r0
   2298c:	b190      	cbz	r0, 229b4 <_isatty+0x30>
   2298e:	2409      	movs	r4, #9
   22990:	4620      	mov	r0, r4
   22992:	4629      	mov	r1, r5
   22994:	beab      	bkpt	0x00ab
   22996:	4604      	mov	r4, r0
   22998:	2c01      	cmp	r4, #1
   2299a:	d009      	beq.n	229b0 <_isatty+0x2c>
   2299c:	f7fa feea 	bl	1d774 <__errno>
   229a0:	2513      	movs	r5, #19
   229a2:	4606      	mov	r6, r0
   229a4:	2400      	movs	r4, #0
   229a6:	4628      	mov	r0, r5
   229a8:	4621      	mov	r1, r4
   229aa:	beab      	bkpt	0x00ab
   229ac:	4605      	mov	r5, r0
   229ae:	6035      	str	r5, [r6, #0]
   229b0:	4620      	mov	r0, r4
   229b2:	bd70      	pop	{r4, r5, r6, pc}
   229b4:	f7fa fede 	bl	1d774 <__errno>
   229b8:	2209      	movs	r2, #9
   229ba:	462c      	mov	r4, r5
   229bc:	6002      	str	r2, [r0, #0]
   229be:	e7f7      	b.n	229b0 <_isatty+0x2c>

000229c0 <_exit>:
   229c0:	f04f 31ff 	mov.w	r1, #4294967295
   229c4:	f000 b800 	b.w	229c8 <_kill>

000229c8 <_kill>:
   229c8:	2906      	cmp	r1, #6
   229ca:	b530      	push	{r4, r5, lr}
   229cc:	bf0c      	ite	eq
   229ce:	4d04      	ldreq	r5, [pc, #16]	; (229e0 <_kill+0x18>)
   229d0:	4d04      	ldrne	r5, [pc, #16]	; (229e4 <_kill+0x1c>)
   229d2:	2418      	movs	r4, #24
   229d4:	4620      	mov	r0, r4
   229d6:	4629      	mov	r1, r5
   229d8:	beab      	bkpt	0x00ab
   229da:	4604      	mov	r4, r0
   229dc:	4620      	mov	r0, r4
   229de:	bd30      	pop	{r4, r5, pc}
   229e0:	00020023 	.word	0x00020023
   229e4:	00020026 	.word	0x00020026

000229e8 <_init>:
   229e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229ea:	bf00      	nop
   229ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   229ee:	bc08      	pop	{r3}
   229f0:	469e      	mov	lr, r3
   229f2:	4770      	bx	lr

000229f4 <_fini>:
   229f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229f6:	bf00      	nop
   229f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   229fa:	bc08      	pop	{r3}
   229fc:	469e      	mov	lr, r3
   229fe:	4770      	bx	lr

00022a00 <__init_array_start>:
   22a00:	00020671 	.word	0x00020671

00022a04 <__frame_dummy_init_array_entry>:
   22a04:	00004289 00004eb1 00007a89 00009b8d     .B...N...z......
   22a14:	00009f3d 0000aa69 0000b5f9 0000daa9     =...i...........
   22a24:	0000ef3d 0000fc65 00011bd9 00011cbd     =...e...........
   22a34:	000135e9                                .5..

00022a38 <__do_global_dtors_aux_fini_array_entry>:
   22a38:	00004265                                eB..

00022a3c <__fini_array_end>:
   22a3c:	646e6148 	.word	0x646e6148
   22a40:	676e696c 	.word	0x676e696c
   22a44:	75616620 	.word	0x75616620
   22a48:	203a746c 	.word	0x203a746c
   22a4c:	61656c63 	.word	0x61656c63
   22a50:	676e6972 	.word	0x676e6972
   22a54:	75616620 	.word	0x75616620
   22a58:	2073746c 	.word	0x2073746c
   22a5c:	63207962 	.word	0x63207962
   22a60:	696c6379 	.word	0x696c6379
   22a64:	6520676e 	.word	0x6520676e
   22a68:	6c62616e 	.word	0x6c62616e
   22a6c:	69732065 	.word	0x69732065
   22a70:	6c616e67 	.word	0x6c616e67
   22a74:	206f7420 	.word	0x206f7420
   22a78:	6f746f6d 	.word	0x6f746f6d
   22a7c:	00002e72 	.word	0x00002e72
   22a80:	69766f4d 	.word	0x69766f4d
   22a84:	0020676e 	.word	0x0020676e
   22a88:	00202a20 	.word	0x00202a20
   22a8c:	69766f4d 	.word	0x69766f4d
   22a90:	2e2e676e 	.word	0x2e2e676e
   22a94:	69615720 	.word	0x69615720
   22a98:	676e6974 	.word	0x676e6974
   22a9c:	726f6620 	.word	0x726f6620
   22aa0:	464c4820 	.word	0x464c4820
   22aa4:	00000042 	.word	0x00000042
   22aa8:	6f746f4d 	.word	0x6f746f4d
   22aac:	61662072 	.word	0x61662072
   22ab0:	20746c75 	.word	0x20746c75
   22ab4:	65746564 	.word	0x65746564
   22ab8:	64657463 	.word	0x64657463
   22abc:	0000002e 	.word	0x0000002e
   22ac0:	62616e45 	.word	0x62616e45
   22ac4:	6120656c 	.word	0x6120656c
   22ac8:	6d6f7475 	.word	0x6d6f7475
   22acc:	63697461 	.word	0x63697461
   22ad0:	75616620 	.word	0x75616620
   22ad4:	6820746c 	.word	0x6820746c
   22ad8:	6c646e61 	.word	0x6c646e61
   22adc:	20676e69 	.word	0x20676e69
   22ae0:	73207962 	.word	0x73207962
   22ae4:	69747465 	.word	0x69747465
   22ae8:	4820676e 	.word	0x4820676e
   22aec:	4c444e41 	.word	0x4c444e41
   22af0:	4f4d5f45 	.word	0x4f4d5f45
   22af4:	5f524f54 	.word	0x5f524f54
   22af8:	4c554146 	.word	0x4c554146
   22afc:	74205354 	.word	0x74205354
   22b00:	2e31206f 	.word	0x2e31206f
   22b04:	00000000 	.word	0x00000000
   22b08:	69746f4d 	.word	0x69746f4d
   22b0c:	6d206e6f 	.word	0x6d206e6f
   22b10:	6e207961 	.word	0x6e207961
   22b14:	6820746f 	.word	0x6820746f
   22b18:	20657661 	.word	0x20657661
   22b1c:	706d6f63 	.word	0x706d6f63
   22b20:	6574656c 	.word	0x6574656c
   22b24:	73612064 	.word	0x73612064
   22b28:	70786520 	.word	0x70786520
   22b2c:	65746365 	.word	0x65746365
   22b30:	50202e64 	.word	0x50202e64
   22b34:	65636f72 	.word	0x65636f72
   22b38:	77206465 	.word	0x77206465
   22b3c:	20687469 	.word	0x20687469
   22b40:	74756163 	.word	0x74756163
   22b44:	2e6e6f69 	.word	0x2e6e6f69
   22b48:	00000000 	.word	0x00000000
   22b4c:	65766f4d 	.word	0x65766f4d
   22b50:	6e6f4420 	.word	0x6e6f4420
   22b54:	00000065 	.word	0x00000065
   22b58:	6f746f4d 	.word	0x6f746f4d
   22b5c:	61662072 	.word	0x61662072
   22b60:	20746c75 	.word	0x20746c75
   22b64:	65746564 	.word	0x65746564
   22b68:	64657463 	.word	0x64657463
   22b6c:	6f4d202e 	.word	0x6f4d202e
   22b70:	63206576 	.word	0x63206576
   22b74:	65636e61 	.word	0x65636e61
   22b78:	2e64656c 	.word	0x2e64656c
   22b7c:	616e4520 	.word	0x616e4520
   22b80:	20656c62 	.word	0x20656c62
   22b84:	6f747561 	.word	0x6f747561
   22b88:	6974616d 	.word	0x6974616d
   22b8c:	61662063 	.word	0x61662063
   22b90:	20746c75 	.word	0x20746c75
   22b94:	646e6168 	.word	0x646e6168
   22b98:	676e696c 	.word	0x676e696c
   22b9c:	20796220 	.word	0x20796220
   22ba0:	74746573 	.word	0x74746573
   22ba4:	20676e69 	.word	0x20676e69
   22ba8:	444e4148 	.word	0x444e4148
   22bac:	4d5f454c 	.word	0x4d5f454c
   22bb0:	524f544f 	.word	0x524f544f
   22bb4:	5541465f 	.word	0x5541465f
   22bb8:	2053544c 	.word	0x2053544c
   22bbc:	31206f74 	.word	0x31206f74
   22bc0:	0000002e 	.word	0x0000002e
   22bc4:	6f746f4d 	.word	0x6f746f4d
   22bc8:	6e452072 	.word	0x6e452072
   22bcc:	656c6261 	.word	0x656c6261
   22bd0:	00000064 	.word	0x00000064
   22bd4:	74696157 	.word	0x74696157
   22bd8:	20676e69 	.word	0x20676e69
   22bdc:	20726f66 	.word	0x20726f66
   22be0:	42464c48 	.word	0x42464c48
   22be4:	002e2e2e 	.word	0x002e2e2e
   22be8:	62616e45 	.word	0x62616e45
   22bec:	676e696c 	.word	0x676e696c
   22bf0:	79616d20 	.word	0x79616d20
   22bf4:	746f6e20 	.word	0x746f6e20
   22bf8:	76616820 	.word	0x76616820
   22bfc:	6f632065 	.word	0x6f632065
   22c00:	656c706d 	.word	0x656c706d
   22c04:	20646574 	.word	0x20646574
   22c08:	65207361 	.word	0x65207361
   22c0c:	63657078 	.word	0x63657078
   22c10:	2e646574 	.word	0x2e646574
   22c14:	6f725020 	.word	0x6f725020
   22c18:	64656563 	.word	0x64656563
   22c1c:	74697720 	.word	0x74697720
   22c20:	61632068 	.word	0x61632068
   22c24:	6f697475 	.word	0x6f697475
   22c28:	00002e6e 	.word	0x00002e6e
   22c2c:	6f746f4d 	.word	0x6f746f4d
   22c30:	65522072 	.word	0x65522072
   22c34:	00796461 	.word	0x00796461

00022c38 <_ZTVN9ClearCore9ConnectorE>:
	...
   22c40:	0000482d 0001346d 0001346d 0001346d     -H..m4..m4..m4..
   22c50:	0001346d 0001346d 0001346d 00004831     m4..m4..m4..1H..
   22c60:	0001346d 0001346d                       m4..m4..

00022c68 <_ZTVN9ClearCore9DigitalInE>:
	...
   22c70:	00004839 0000483d 00004849 0000484d     9H..=H..IH..MH..
   22c80:	00004861 00004851 00004855 00004859     aH..QH..UH..YH..
   22c90:	00004955 00004889                       UI...H..

00022c98 <CSWTCH.21>:
   22c98:	00000004 00000005 00000003 00000001     ................
   22ca8:	00000002                                ....

00022cac <CSWTCH.95>:
   22cac:	02030406 00000002                       ........

00022cb4 <_ZN9ClearCoreL11tcc_modulesE>:
   22cb4:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22cc4:	43001000                                ...C

00022cc8 <_ZTVN9ClearCore11MotorDriverE>:
	...
   22cd0:	00004ed1 00004ed5 00004ec1 00004ec5     .N...N...N...N..
   22ce0:	00004861 00004851 00004ec9 00004859     aH..QH...N..YH..
   22cf0:	00005621 00005e55 00005c7d 00005d75     !V..U^..}\..u]..
   22d00:	00005039 ffffffd0 00000000 00005d6d     9P..........m]..
   22d10:	00005e4d 00005089                       M^...P..

00022d18 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22d18:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22d28:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022d38 <_ZTVN9ClearCore7ISerialE>:
	...
   22d40:	0001346d 0001346d 0001346d 0001346d     m4..m4..m4..m4..
   22d50:	0001346d 0001346d 0001346d 0001346d     m4..m4..m4..m4..
   22d60:	0001346d 0001346d 0001346d 0001346d     m4..m4..m4..m4..
   22d70:	0001346d 0001346d 0001346d 0001346d     m4..m4..m4..m4..
   22d80:	0001346d 0001346d                       m4..m4..

00022d88 <_ZTVN9ClearCore9SerialUsbE>:
	...
   22d90:	000061f1 000061e5 00006209 00006215     .a...a...b...b..
   22da0:	00006221 0000622d 00006239 00006245     !b..-b..9b..Eb..
   22db0:	00006251 0000625d 00006269 000061f1     Qb..]b..ib...a..
   22dc0:	000061fd 000061fd 00006169 00006175     .a...a..ia..ua..
   22dd0:	00006179 00006185 00006191 0000619d     ya...a...a...a..
   22de0:	000061b1 00006275 00006299 000062c9     .a..ub...b...b..
   22df0:	000061bd 000061c9 000061d9 fffffffc     .a...a...a......
   22e00:	00000000 00006195 000061a9 000061b5     .....a...a...a..
   22e10:	00006291 000062c1 00006309 000061c1     .b...b...c...a..
   22e20:	00004831 000061dd 000061d1 008061fc     1H...a...a...a..
   22e30:	00806010 00806014 00806018              .`...`...`..

00022e3c <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22e44:	0000fe61 0000fe71 00010d8d 000100e9     a...q...........
   22e54:	0000ff95 00007a99 0000fe85 0000febd     .....z..........
   22e64:	0000fefd 0000fed9 0000fee9 0000ff3d     ............=...
   22e74:	0000fe59 00007aa1 00010201 00007a9d     Y....z.......z..
   22e84:	000103d5 000102f1                       ........

00022e8c <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22e94:	0000fe61 0000fe71 00010d8d 000100e9     a...q...........
   22ea4:	0000ff95 00007a99 0000fe85 0000febd     .....z..........
   22eb4:	0000fefd 0000fed9 0000fee9 0000ff3d     ............=...
   22ec4:	0000fe59 00007aa1 00010201 00007a9d     Y....z.......z..
   22ed4:	000103d5 000102f1 40003c00 4101a000     .........<.@...A
   22ee4:	43001400                                ...C

00022ee8 <_ZN9ClearCore10hBridgeConE>:
   22ee8:	20001374 200013f8                       t.. ... 

00022ef0 <_ZN9ClearCore15MotorConnectorsE>:
   22ef0:	20000b68 20000cb0 20000df8 20000f40     h.. ... ... @.. 

00022f00 <_ZN9ClearCoreL10ConnectorsE>:
   22f00:	200011e8 20001254 200012b4 20001314     ... T.. ... ... 
   22f10:	20001374 200013f8 20001158 20001188     t.. ... X.. ... 
   22f20:	200011b8 20000b24 2000108c 200010d0     ... $.. ... ... 
   22f30:	20001114 2000147c 20000b68 20000cb0     ... |.. h.. ... 
   22f40:	20000df8 20000f40 200015dc 20001734     ... @.. ... 4.. 
   22f50:	2000148c                                ... 

00022f54 <_ZN9ClearCoreL10MicroSD_SSE>:
   22f54:	0504003d ffffff00 ffffffff 00ff0500     =...............

00022f64 <_ZN9ClearCoreL10XBee_Rx_INE>:
   22f64:	08180150 ffffff00 ffff0102 00ffffff     P...............

00022f74 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   22f74:	02120142 ffffff00 ffff0207 00040001     B...............

00022f84 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   22f84:	04140144 ffffff00 ffff0107 00060201     D...............

00022f94 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   22f94:	0a0a001c ffffff00 00010200 00040200     ................

00022fa4 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   22fa4:	0909001b ff03ff00 01000100 00ff0100     ................

00022fb4 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22fb4:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022fc4 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22fc4:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022fd4 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22fd4:	0212023a ffffff01 ffff0206 00ff0200     :...............

00022fe4 <_ZN9ClearCoreL11IN09n_AIN09E>:
   22fe4:	0707010e ff09ff01 ffffffff 00ffffff     ................

00022ff4 <_ZN9ClearCoreL11IN10n_AIN10E>:
   22ff4:	0606010d ff08ff01 ffffffff 00ffffff     ................

00023004 <_ZN9ClearCoreL11IN11n_AIN11E>:
   23004:	0505010a ff07ff01 ffffffff 00ffffff     ................

00023014 <_ZN9ClearCoreL11IN12n_AIN12E>:
   23014:	03030206 ff05ff01 ffffffff 00ffffff     ................

00023024 <_ZN9ClearCoreL11MicroSD_SCKE>:
   23024:	09090110 ff01ff00 01040104 00ffffff     ................

00023034 <_ZN9ClearCoreL11XBee_CTS_INE>:
   23034:	09190253 ffffff00 ffff0302 00ffffff     S...............

00023044 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   23044:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00023054 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   23054:	05150145 ffffff00 ffff0007 00070301     E...............

00023064 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   23064:	ff08001a ff02ff00 00000000 00ff0000     ................

00023074 <_ZN9ClearCoreL12MicroSD_MISOE>:
   23074:	0a0a0120 ffffff00 00050204 00040400      ...............

00023084 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   23084:	0808010f ff00ff00 00040004 00ffffff     ................

00023094 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   23094:	07170049 ffffff00 01040005 00ff0701     I...............

000230a4 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   230a4:	08180252 ffffff00 ffff0202 00ffffff     R...............

000230b4 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   230b4:	03130143 ffffff00 ffff0307 00050101     C...............

000230c4 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   230c4:	0b0b001d ffffff00 01010300 00050300     ................

000230d4 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   230d4:	05050012 01ffff00 0100ffff 00ffffff     ................

000230e4 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   230e4:	04140046 ffffff01 00070205 00ff0401     F...............

000230f4 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   230f4:	00100140 ffffff00 00060005 00020003     @...............

00023104 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   23104:	03030164 ffffff00 0106ffff 00ffffff     d...............

00023114 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   23114:	0e0e0124 ffffff00 00050204 00000004     $...............

00023124 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   23124:	0c0c0122 ffffff00 00040004 00060003     "...............

00023134 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   23134:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00023144 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   23144:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00023154 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   23154:	0f0f0125 ffffff00 01050304 00010104     %...............

00023164 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   23164:	0d0d0123 ffffff00 01040104 00070103     #...............

00023174 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   23174:	06160048 ffffff00 00040003 00ff0601     H...............

00023184 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   23184:	00100034 ffffff00 00020001 00020001     4...............

00023194 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   23194:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

000231a4 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   231a4:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

000231b4 <_ZN9ClearCoreL5IN01nE>:
   231b4:	02110107 00ffff00 ffffffff 00ffffff     ................

000231c4 <_ZN9ClearCoreL5IN02nE>:
   231c4:	03030008 ffffff00 ffffffff 00ffffff     ................

000231d4 <_ZN9ClearCoreL5IN03nE>:
   231d4:	04150211 ffffff00 0000ffff 00ffffff     ................

000231e4 <_ZN9ClearCoreL5IN04nE>:
   231e4:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

000231f4 <_ZN9ClearCoreL5IN05nE>:
   231f4:	0313023b ffffff00 ffff0306 00ff0300     ;...............

00023204 <_ZN9ClearCoreL5OUT00E>:
   23204:	00000001 ffffff00 0002ffff 00ffffff     ................

00023214 <_ZN9ClearCoreL5OUT01E>:
   23214:	01010002 ffffff00 0102ffff 00ffffff     ................

00023224 <_ZN9ClearCoreL5OUT02E>:
   23224:	06060013 ffffff00 0001ffff 00ffffff     ................

00023234 <_ZN9ClearCoreL5OUT03E>:
   23234:	07070014 ffffff00 0101ffff 00ffffff     ................

00023244 <_ZN9ClearCoreL6Aout00E>:
   23244:	02020007 01ffff00 0100ffff 00ffffff     ................

00023254 <_ZN9ClearCoreL6Mtr0_BE>:
   23254:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

00023264 <_ZN9ClearCoreL6Mtr1_BE>:
   23264:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00023274 <_ZN9ClearCoreL7Mtr1_AnE>:
   23274:	05150047 ffffff00 01070305 00ff0501     G...............

00023284 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   23284:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   23294:	00000080 00000040 00000020 00000010     ....@... .......
   232a4:	00000008 00000004 01000000 02000000     ................
   232b4:	04000000 08000000 00800000 00400000     ..............@.
   232c4:	00200000 00004000 00008000 00040000     .. ..@..........
   232d4:	00080000                                ....

000232d8 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   232e0:	0000b609 0000b67d 0001346d              ....}...m4..

000232ec <_ZN9ClearCoreL11IN06n_QuadAE>:
   232ec:	00100238 ffffff01 ffff0006 00ff0000     8...............

000232fc <_ZN9ClearCoreL11IN07n_QuadBE>:
   232fc:	01110239 ffffff01 ffff0106 00ff0100     9...............

0002330c <_ZN9ClearCoreL11IN08n_QuadIE>:
   2330c:	0212023a ffffff01 ffff0206 00ff0200     :...............
   2331c:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   2332c:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   2333c:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   2334c:	2e747369 00000063 00023394 00023384     ist.c....3...3..
   2335c:	00023364 00023374                       d3..t3..

00023364 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   23364:	01010204 ff0bff00 ffffffff 00ffffff     ................

00023374 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   23374:	00000203 ff0aff00 ffffffff 00ffffff     ................

00023384 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   23384:	02020205 ff04ff00 ffffffff 00ffffff     ................

00023394 <_ZN9ClearCoreL9_5VOB_MONE>:
   23394:	04040109 ff06ff00 ffffffff 00ffffff     ................

000233a4 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   233ac:	0000dafd 0000dd2d 0000db01 0000db05     ....-...........
   233bc:	0000de25 0000de41 0000daf5 00004859     %...A.......YH..
   233cc:	0000dd15 0000dedd                       ........

000233d4 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   233dc:	0000df7d 0000df8d 0000df81 0000df85     }...............
   233ec:	0000e1e1 0000df89 00004855 00004859     ........UH..YH..
   233fc:	0000e0b5 0000e12d                       ....-...

00023404 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   2340c:	0000e229 0000e2fd 0000e22d 0000e231     ).......-...1...
   2341c:	0000e799 0000e245 0000daf5 00004859     ....E.......YH..
   2342c:	0000e58d 0000e7d9                       ........

00023434 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   23434:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   23444:	42001400 42001800 43001400 43001800     ...B...B...C...C

00023454 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   2345c:	0000e84d 0000ece5 0000e851 0000e855     M.......Q...U...
   2346c:	0000e919 0000e955 0000daf5 00004859     ....U.......YH..
   2347c:	0000eb09 0000ec1d                       ........

00023484 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   23484:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   23494:	43001000                                ...C

00023498 <_ZTVN9ClearCore7CcioPinE>:
	...
   234a0:	0000fc75 0000fcd1 0000fc79 0000fc7d     u.......y...}...
   234b0:	0000fd41 0000fd9d 0000fd7d 00004831     A.......}...1H..
   234c0:	0000fc8d 0000fc91                       ........

000234c8 <_ZTVN9ClearCore10SerialBaseE>:
	...
   234d0:	0000fe61 0000fe71 00010d8d 000100e9     a...q...........
   234e0:	0000ff95 00007a99 0000fe85 0000febd     .....z..........
   234f0:	0000fefd 0000fed9 0000fee9 0000ff3d     ............=...
   23500:	0000fe59 00007aa1 00010201 00007a9d     Y....z.......z..
   23510:	000103d5 000102f1                       ........

00023518 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   23518:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   23528:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00023538 <_ZTVN9ClearCore12SerialDriverE>:
	...
   23540:	0000fe61 0000fe71 0001145d 000114b1     a...q...].......
   23550:	000112ed 00007a99 0000fe85 0000febd     .....z..........
   23560:	0000fefd 0000fed9 0000fee9 0000ff3d     ............=...
   23570:	0000fe59 00007aa1 00010201 00007a9d     Y....z.......z..
   23580:	000103d5 000102f1 00011241 00011309     ........A.......
   23590:	00011251 0001125d 0001126d 000115f5     Q...]...m.......
   235a0:	00011281 000114fd 0001128d fffffebc     ................
   235b0:	00000000 00011249 00011455 00011255     ....I...U...U...
   235c0:	00011265 00011279 000116a9 00011285     e...y...........
   235d0:	00004831 00011291 000115ed              1H..........

000235dc <_ZTVN9ClearCore9LedDriverE>:
	...
   235e4:	000116b1 000116b5 000116c1 000116c5     ................
   235f4:	000116d9 000116f1 000116c9 00004831     ............1H..
   23604:	000116cd 000116d1                       ........

0002360c <_usb_ep_cfgs>:
   2360c:	20001f20 00000000 00000040 20001f60      .. ....@...`.. 
   2361c:	00000000 00000040 20001fa0 00000000     ....@...... ....
   2362c:	00000040                                @...

00023630 <sinTable_q15>:
   23630:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   23640:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   23650:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   23660:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   23670:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   23680:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   23690:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   236a0:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   236b0:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   236c0:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   236d0:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   236e0:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   236f0:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   23700:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   23710:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   23720:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   23730:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   23740:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   23750:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   23760:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   23770:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   23780:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   23790:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   237a0:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   237b0:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   237c0:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   237d0:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   237e0:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   237f0:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   23800:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   23810:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   23820:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   23830:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   23840:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   23850:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   23860:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   23870:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   23880:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   23890:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   238a0:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   238b0:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   238c0:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   238d0:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   238e0:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   238f0:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   23900:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   23910:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   23920:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   23930:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   23940:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   23950:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   23960:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   23970:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   23980:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   23990:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   239a0:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   239b0:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   239c0:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   239d0:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   239e0:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   239f0:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   23a00:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   23a10:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   23a20:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   23a30:	00000000 65727570 72697620 6c617574     ....pure virtual
   23a40:	74656d20 20646f68 6c6c6163 000a6465      method called..
   23a50:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

00023a60 <_ZTISt9bad_alloc>:
   23a60:	00023b80 00023a6c 00023ac0              .;..l:...:..

00023a6c <_ZTSSt9bad_alloc>:
   23a6c:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023a7c <_ZTVSt9bad_alloc>:
   23a7c:	00000000 00023a60 00013489 0001349d     ....`:...4...4..
   23a8c:	00013481 3a647473 6461623a 6378655f     .4..std::bad_exc
   23a9c:	69747065 00006e6f                       eption..

00023aa4 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23aa4:	00023bf4 00023ac8                       .;...:..

00023aac <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23aac:	00023bf4 00023ae8                       .;...:..

00023ab4 <_ZTISt13bad_exception>:
   23ab4:	00023b80 00023b0c 00023ac0              .;...;...:..

00023ac0 <_ZTISt9exception>:
   23ac0:	00023bf4 00023b20                       .;.. ;..

00023ac8 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23ac8:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23ad8:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023ae8 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23ae8:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23af8:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23b08:	00456e6f                                onE.

00023b0c <_ZTSSt13bad_exception>:
   23b0c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   23b1c:	0000006e                                n...

00023b20 <_ZTSSt9exception>:
   23b20:	65397453 70656378 6e6f6974 00000000     St9exception....

00023b30 <_ZTVSt13bad_exception>:
   23b30:	00000000 00023ab4 00013615 00013621     .....:...6..!6..
   23b40:	00013619                                .6..

00023b44 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23b44:	00023b80 00023b50 00023bbc              .;..P;...;..

00023b50 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   23b50:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23b60:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23b70:	456f666e 00000000                       nfoE....

00023b78 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23b78:	00000000 00023b44 000137e9 000137fd     ....D;...7...7..
   23b88:	00013915 00013915 000139d1 00013945     .9...9...9..E9..
   23b98:	000138e5 00013855 00013819              .8..U8...8..

00023ba4 <_ZTISt9type_info>:
   23ba4:	00023bf4 00023bac                       .;...;..

00023bac <_ZTSSt9type_info>:
   23bac:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023bbc <_ZTIN10__cxxabiv117__class_type_infoE>:
   23bbc:	00023b80 00023bc8 00023ba4              .;...;...;..

00023bc8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23bc8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23bd8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23be8:	00000045                                E...

00023bec <_ZTVN10__cxxabiv117__class_type_infoE>:
   23bec:	00000000 00023bbc 00013989 0001399d     .....;...9...9..
   23bfc:	00013915 00013915 000139d1 00013945     .9...9...9..E9..
   23c0c:	000139b9 000139fd 0001397d 6d726574     .9...9..}9..term
   23c1c:	74616e69 61632065 64656c6c 63657220     inate called rec
   23c2c:	69737275 796c6576 0000000a 6d726574     ursively....term
   23c3c:	74616e69 61632065 64656c6c 74666120     inate called aft
   23c4c:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23c5c:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23c6c:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23c7c:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23c8c:	69746361 65206576 70656378 6e6f6974     active exception
   23c9c:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023cac <standard_subs>:
   23cac:	00000074 00024490 00000003 00024490     t....D.......D..
   23cbc:	00000003 00000000 00000000 00000061     ............a...
   23ccc:	000247a4 0000000e 000247a4 0000000e     .G.......G......
   23cdc:	000247b4 00000009 00000062 000247c0     .G......b....G..
   23cec:	00000011 000247c0 00000011 000247d4     .....G.......G..
   23cfc:	0000000c 00000073 000247e4 0000000b     ....s....G......
   23d0c:	000247f0 00000046 000247d4 0000000c     .G..F....G......
   23d1c:	00000069 00024838 0000000c 00024848     i...8H......HH..
   23d2c:	00000031 0002487c 0000000d 0000006f     1...|H......o...
   23d3c:	0002488c 0000000c 0002489c 00000031     .H.......H..1...
   23d4c:	000248d0 0000000d 00000064 000248e0     .H......d....H..
   23d5c:	0000000d 000248f0 00000032 00024924     .....H..2...$I..
   23d6c:	0000000e                                ....

00023d70 <cplus_demangle_builtin_types>:
   23d70:	00024b34 0000000b 00024b34 0000000b     4K......4K......
   23d80:	00000000 00024b40 00000004 00024b48     ....@K......HK..
   23d90:	00000007 00000007 00024b50 00000004     ........PK......
   23da0:	00024b58 00000004 00000000 00024b60     XK..........`K..
   23db0:	00000006 00024b60 00000006 00000008     ....`K..........
   23dc0:	00024b68 0000000b 00024b68 0000000b     hK......hK......
   23dd0:	00000008 00024b74 00000005 00024b74     ....tK......tK..
   23de0:	00000005 00000008 00024b7c 0000000a     ........|K......
   23df0:	00024b7c 0000000a 00000008 00024b88     |K...........K..
   23e00:	0000000d 00024b88 0000000d 00000000     .....K..........
   23e10:	00024b98 00000003 00024b98 00000003     .K.......K......
   23e20:	00000001 00024b9c 0000000c 00024bac     .....K.......K..
   23e30:	00000008 00000002 00000000 00000000     ................
	...
   23e4c:	00024bb8 00000004 00024bb8 00000004     .K.......K......
   23e5c:	00000003 00024bc0 0000000d 00024bc0     .....K.......K..
   23e6c:	0000000d 00000004 00024bd0 00000008     .........K......
   23e7c:	00024bd0 00000008 00000000 00024bdc     .K...........K..
   23e8c:	00000011 00024bdc 00000011 00000000     .....K..........
	...
   23ed8:	00024bf0 00000005 00024bf0 00000005     .K.......K......
   23ee8:	00000000 00024bf8 0000000e 00024bf8     .....K.......K..
   23ef8:	0000000e 00000000 00000000 00000000     ................
	...
   23f14:	00024c08 00000004 00024c08 00000004     .L.......L......
   23f24:	00000009 00024c10 00000007 00024b50     .....L......PK..
   23f34:	00000004 00000000 00024c18 00000009     .........L......
   23f44:	00024bb8 00000004 00000005 00024c24     .K..........$L..
   23f54:	00000012 00024c24 00000012 00000006     ....$L..........
   23f64:	00022be4 00000003 00022be4 00000003     .+.......+......
   23f74:	00000000 00024c38 00000009 00024c38     ....8L......8L..
   23f84:	00000009 00000000 00024c44 00000009     ........DL......
   23f94:	00024c44 00000009 00000000 00024c50     DL..........PL..
   23fa4:	0000000a 00024c50 0000000a 00000000     ....PL..........
   23fb4:	00024c5c 00000004 00024c5c 00000004     \L......\L......
   23fc4:	00000008 00024c64 00000008 00024c64     ....dL......dL..
   23fd4:	00000008 00000000 00024c70 00000008     ........pL......
   23fe4:	00024c70 00000008 00000000 00024c7c     pL..........|L..
   23ff4:	00000011 00024c7c 00000011 00000000     ....|L..........

00024004 <cplus_demangle_operators>:
   24004:	00024934 00024938 00000002 00000002     4I..8I..........
   24014:	0002493c 00024940 00000001 00000002     <I..@I..........
   24024:	00024944 00024768 00000002 00000002     DI..hG..........
   24034:	00024660 00024948 00000001 00000001     `F..HI..........
   24044:	0002494c 00024948 00000001 00000002     LI..HI..........
   24054:	00024950 00024954 00000008 00000001     PI..TI..........
   24064:	00024960 00024954 00000008 00000001     `I..TI..........
   24074:	00024964 00024968 0000000a 00000002     dI..hI..........
   24084:	00024470 00024974 00000002 00000002     pD..tI..........
   24094:	00024978 0002497c 00000001 00000002     xI..|I..........
   240a4:	00024980 00024984 00000001 00000001     .I...I..........
   240b4:	00024988 0002498c 00000002 00000002     .I...I..........
   240c4:	00024990 00024994 00000009 00000001     .I...I..........
   240d4:	000249a0 000249a4 0000000c 00000002     .I...I..........
   240e4:	000249b4 000249b8 00000001 00000001     .I...I..........
   240f4:	000249bc 000249c0 00000007 00000001     .I...I..........
   24104:	000249c8 000249cc 00000002 00000002     .I...I..........
   24114:	00024474 00024afc 00000001 00000002     tD...J..........
   24124:	000249d0 000249d4 00000001 00000002     .I...I..........
   24134:	000249d8 000249dc 00000002 00000002     .I...I..........
   24144:	000249e0 000249e4 00000001 00000002     .I...I..........
   24154:	000249e8 000249ec 00000002 00000002     .I...I..........
   24164:	000249f0 00022be4 00000003 00000003     .I...+..........
   24174:	000249f4 00022be4 00000003 00000003     .I...+..........
   24184:	000249f8 00022be4 00000003 00000002     .I...+..........
   24194:	000249fc 00022be4 00000003 00000002     .I...+..........
   241a4:	00024a00 00024a04 00000002 00000002     .J...J..........
   241b4:	00024664 000244b8 00000002 00000001     dF...D..........
   241c4:	00024a08 00024878 00000001 00000002     .J..xH..........
   241d4:	0002466c 000244d8 00000002 00000002     lF...D..........
   241e4:	00024a0c 00024a10 00000003 00000002     .J...J..........
   241f4:	00024b64 00024a14 00000002 00000002     dK...J..........
   24204:	000244ac 00024a18 0000000b 00000001     .D...J..........
   24214:	00024a24 00024a28 00000002 00000002     $J..(J..........
   24224:	00024a2c 00024a30 00000001 00000002     ,J..0J..........
   24234:	00024a34 00024a38 00000002 00000002     4J..8J..........
   24244:	00024a3c 00024a40 00000002 00000002     <J..@J..........
   24254:	00024a44 00024a48 00000001 00000002     DJ..HJ..........
   24264:	00024a4c 000249b8 00000001 00000002     LJ...I..........
   24274:	00024a50 00024a54 00000002 00000001     PJ..TJ..........
   24284:	00024a58 00024a5c 00000005 00000003     XJ..\J..........
   24294:	00024a64 00024a68 00000002 00000002     dJ..hJ..........
   242a4:	00024c34 00024a48 00000001 00000001     4L..HJ..........
   242b4:	00024a6c 00024a70 00000001 00000001     lJ..pJ..........
   242c4:	00024a74 00024a78 00000003 00000003     tJ..xJ..........
   242d4:	00024a7c 00024a80 00000002 00000002     |J...J..........
   242e4:	00024a84 00024a88 00000002 00000002     .J...J..........
   242f4:	000247b0 00024a8c 00000001 00000002     .G...J..........
   24304:	00024a90 00024a94 00000002 00000002     .J...J..........
   24314:	00024a98 00024a9c 00000001 00000002     .J...J..........
   24324:	00024aa0 00024aa4 00000003 00000002     .J...J..........
   24334:	00024aa8 00024aac 00000002 00000001     .J...J..........
   24344:	00024ab0 00024a9c 00000001 00000001     .J...J..........
   24354:	00024478 00024ab4 00000002 00000002     xD...J..........
   24364:	0002447c 00024ab8 00000001 00000003     |D...J..........
   24374:	00024abc 00024ac0 00000002 00000002     .J...J..........
   24384:	00024ac4 00024ac8 00000003 00000002     .J...J..........
   24394:	00024acc 00024ad0 00000010 00000002     .J...J..........
   243a4:	00024ae4 00024ae8 00000001 00000002     .J...J..........
   243b4:	00024aec 00024af0 00000002 00000002     .J...J..........
   243c4:	0002446c 00024af4 00000009 00000001     lD...J..........
   243d4:	00024730 00024af4 00000009 00000001     0G...J..........
   243e4:	00024b00 00024b04 0000000b 00000002     .K...K..........
   243f4:	00024970 00024b10 00000007 00000001     pI...K..........
   24404:	00024b18 00024b10 00000007 00000001     .K...K..........
   24414:	00024b1c 00024b20 00000005 00000000     .K.. K..........
   24424:	00024b28 00024b2c 00000006 00000001     (K..,K..........
	...
   24444:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   24454:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   24464:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   24474:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   24484:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   24494:	6f747561 00000000 6c636564 65707974     auto....decltype
   244a4:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   244b4:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   244c4:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   244d4:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   244e4:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   244f4:	20726f66 00000000 736e6f63 63757274     for ....construc
   24504:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   24514:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   24524:	6f666e69 726f6620 00000020 65707974     info for ...type
   24534:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   24544:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   24554:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   24564:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   24574:	6e616972 65722074 6e727574 75687420     riant return thu
   24584:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   24594:	66207373 0020726f 72617567 61762064     ss for .guard va
   245a4:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   245b4:	74696e69 6e756620 6f697463 6f66206e     init function fo
   245c4:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   245d4:	636e7566 6e6f6974 726f6620 00000020     function for ...
   245e4:	65666572 636e6572 65742065 726f706d     reference tempor
   245f4:	20797261 00000023 64646968 61206e65     ary #...hidden a
   24604:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   24614:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   24624:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   24634:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   24644:	0000202c 7265706f 726f7461 00000000     , ..operator....
   24654:	7265706f 726f7461 00000020 00006461     operator ...ad..
   24664:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   24674:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   24684:	006c6c75 736c6166 00000065 65757274     ull.false...true
   24694:	00000000 6176616a 73657220 6372756f     ....java resourc
   246a4:	00002065 6c636564 65707974 00002820     e ..decltype (..
   246b4:	73696874 00000000 7261707b 0000236d     this....{parm#..
   246c4:	626f6c67 63206c61 74736e6f 74637572     global construct
   246d4:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   246e4:	626f6c67 64206c61 72747365 6f746375     global destructo
   246f4:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   24704:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   24714:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   24724:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   24734:	73657220 63697274 00000074 6c6f7620      restrict... vol
   24744:	6c697461 00000065 6e6f6320 00007473     atile... const..
   24754:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   24764:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   24774:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   24784:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   24794:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   247a4:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   247b4:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   247c4:	7361623a 735f6369 6e697274 00000067     :basic_string...
   247d4:	69736162 74735f63 676e6972 00000000     basic_string....
   247e4:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   247f4:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   24804:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   24814:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   24824:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   24834:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   24844:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   24854:	65727473 633c6d61 2c726168 64747320     stream<char, std
   24864:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   24874:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   24884:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   24894:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   248a4:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   248b4:	64747320 68633a3a 745f7261 74696172      std::char_trait
   248c4:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   248d4:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   248e4:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   248f4:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   24904:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   24914:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   24924:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   24934:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   24944:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   24954:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   24964:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24974:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24984:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24994:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   249a4:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   249b4:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   249c4:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   249d4:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   249e4:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   249f4:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   24a04:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   24a14:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   24a24:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   24a34:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   24a44:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   24a54:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24a64:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24a74:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24a84:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24a94:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24aa4:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   24ab4:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   24ac4:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   24ad4:	70726574 5f746572 74736163 00000000     terpret_cast....
   24ae4:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   24af4:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   24b04:	74617473 635f6369 00747361 657a6973     static_cast.size
   24b14:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   24b24:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   24b34:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   24b44:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   24b54:	00000000 65747962 00000000 62756f64     ....byte....doub
   24b64:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24b74:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24b84:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24b94:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24ba4:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24bb4:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24bc4:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24bd4:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24be4:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24bf4:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24c04:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24c14:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24c24:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24c34:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24c44:	69636564 366c616d 00000034 69636564     decimal64...deci
   24c54:	316c616d 00003832 666c6168 00000000     mal128..half....
   24c64:	72616863 745f3631 00000000 72616863     char16_t....char
   24c74:	745f3233 00000000 6c636564 65707974     32_t....decltype
   24c84:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   24c94:	00000000 74727173 00000066              ....sqrtf...

00024ca0 <TWO52>:
   24ca0:	00000000 43300000 00000000 c3300000     ......0C......0.

00024cb0 <_global_impure_ptr>:
   24cb0:	20000100 00000043 49534f50 00000058     ... C...POSIX...
   24cc0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   24cd0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   24ce0:	00000000 33323130 37363534 62613938     ....0123456789ab
   24cf0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   24d00:	00000030                                0...

00024d04 <blanks.8346>:
   24d04:	20202020 20202020 20202020 20202020                     

00024d14 <zeroes.8347>:
   24d14:	30303030 30303030 30303030 30303030     0000000000000000
   24d24:	33323130 37363534 62613938 66656463     0123456789abcdef
   24d34:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24d44:	7a797877 00000000                       wxyz....

00024d4c <_ctype_>:
   24d4c:	20202000 20202020 28282020 20282828     .         ((((( 
   24d5c:	20202020 20202020 20202020 20202020                     
   24d6c:	10108820 10101010 10101010 10101010      ...............
   24d7c:	04040410 04040404 10040404 10101010     ................
   24d8c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24d9c:	01010101 01010101 01010101 10101010     ................
   24dac:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24dbc:	02020202 02020202 02020202 10101010     ................
   24dcc:	00000020 00000000 00000000 00000000      ...............
	...
   24e50:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024e60 <__mprec_bigtens>:
   24e60:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24e70:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24e80:	7f73bf3c 75154fdd                       <.s..O.u

00024e88 <__mprec_tens>:
   24e88:	00000000 3ff00000 00000000 40240000     .......?......$@
   24e98:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24ea8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24eb8:	00000000 412e8480 00000000 416312d0     .......A......cA
   24ec8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   24ed8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   24ee8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   24ef8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   24f08:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   24f18:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   24f28:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   24f38:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   24f48:	79d99db4 44ea7843                       ...yCx.D

00024f50 <p05.7178>:
   24f50:	00000005 00000019 0000007d              ........}...

00024f5c <__EH_FRAME_BEGIN__>:
   24f5c:	00000000                                ....
