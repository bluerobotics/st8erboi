
FollowDigitalTorque.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00021090  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00025090  00025090  00025090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  0002518c  0002518c  0002518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ac0  20000000  00025314  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f0  20000ac0  00025de0  00030ac0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a9eb3  00000000  00000000  00030bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd50  00000000  00000000  000daa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017e0  00000000  00000000  000ea7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007fa0  00000000  00000000  000ebf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f3f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000143c6  00000000  00000000  00115ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f195e  00000000  00000000  00129e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007480  00000000  00000000  0021b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000244f9  00000000  00000000  00222c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 4d 98 00 00 d1 42 00 00 d1 42 00 00     ... M....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	e9 96 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 bd 95 00 00 cd 95 00 00 dd 95 00 00     .B..............
    407c:	ed 95 00 00 fd 95 00 00 0d 96 00 00 1d 96 00 00     ................
    408c:	2d 96 00 00 3d 96 00 00 4d 96 00 00 5d 96 00 00     -...=...M...]...
    409c:	6d 96 00 00 7d 96 00 00 89 96 00 00 99 96 00 00     m...}...........
    40ac:	a9 96 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 51 95 00 00 d1 42 00 00 5d 95 00 00     .B..Q....B..]...
    4104:	69 95 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     i....B...B...B..
    4114:	d1 42 00 00 75 95 00 00 d1 42 00 00 81 95 00 00     .B..u....B......
    4124:	8d 95 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 99 95 00 00 d1 42 00 00 a5 95 00 00     .B.......B......
    4174:	b1 95 00 00 00 00 00 00 00 00 00 00 8d 33 01 00     .............3..
    4184:	91 33 01 00 95 33 01 00 99 33 01 00 45 95 00 00     .3...3...3..E...
    4194:	3d 97 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     =....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	b9 96 00 00 d1 42 00 00 d1 42 00 00 d1 96 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ac0 	.word	0x20000ac0
    4280:	00000000 	.word	0x00000000
    4284:	0002508c 	.word	0x0002508c

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	0002508c 	.word	0x0002508c
    42c4:	20000ac4 	.word	0x20000ac4
    42c8:	20000ab4 	.word	0x20000ab4
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42d8:	f01a fed2 	bl	1f080 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42dc:	b168      	cbz	r0, 42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x26>
            if (!SendChar(buffer[iChar])) {
    42de:	4e0d      	ldr	r6, [pc, #52]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    42e0:	1825      	adds	r5, r4, r0
    42e2:	e001      	b.n	42e8 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42e4:	42a5      	cmp	r5, r4
    42e6:	d008      	beq.n	42fa <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x26>
            if (!SendChar(buffer[iChar])) {
    42e8:	f814 1b01 	ldrb.w	r1, [r4], #1
    42ec:	4630      	mov	r0, r6
    42ee:	f001 fe43 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    42f2:	2800      	cmp	r0, #0
    42f4:	d1f6      	bne.n	42e4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x10>
        return Send(nullTermStr) && SendLine();
    }
    42f6:	2000      	movs	r0, #0
    42f8:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    42fa:	210d      	movs	r1, #13
    42fc:	4805      	ldr	r0, [pc, #20]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    42fe:	f001 fe3b 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4302:	2800      	cmp	r0, #0
    4304:	d0f7      	beq.n	42f6 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x22>
    4306:	210a      	movs	r1, #10
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8+0x40>)
    }
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    430e:	f001 be33 	b.w	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4312:	bf00      	nop
    4314:	20001490 	.word	0x20001490

00004318 <main>:

// Declares our user-defined helper function, which is used to command torque.
// The definition/implementation of this function is at the bottom of the sketch.
bool CommandTorque(int8_t commandedTorque);

int main() {
    4318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Sets all motor connectors to the correct mode for Follow Digital
    // Torque mode.
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    431c:	4b82      	ldr	r3, [pc, #520]	; (4528 <main+0x210>)
    SerialPort.Mode(Connector::USB_CDC);
    SerialPort.Speed(baudRate);
    uint32_t timeout = 5000;
    uint32_t startTime = Milliseconds();
    SerialPort.PortOpen();
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    431e:	4e83      	ldr	r6, [pc, #524]	; (452c <main+0x214>)
                          Connector::CPM_MODE_A_DIRECT_B_PWM);
    4320:	6818      	ldr	r0, [r3, #0]
int main() {
    4322:	b097      	sub	sp, #92	; 0x5c
                          Connector::CPM_MODE_A_DIRECT_B_PWM);
    4324:	220b      	movs	r2, #11
    4326:	2102      	movs	r1, #2
    4328:	f006 fefe 	bl	b128 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    SerialPort.Speed(baudRate);
    432c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    4330:	4630      	mov	r0, r6
    4332:	f001 fe09 	bl	5f48 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    4336:	f005 fc4d 	bl	9bd4 <Milliseconds>
    433a:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    433c:	4630      	mov	r0, r6
    433e:	f001 fdf7 	bl	5f30 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4342:	f241 3487 	movw	r4, #4999	; 0x1387
    4346:	4630      	mov	r0, r6
    4348:	f001 fdec 	bl	5f24 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    434c:	2800      	cmp	r0, #0
    434e:	f000 8344 	beq.w	49da <main+0x6c2>
        continue;
    }

    // Enables the motor
    motor.EnableRequest(true);
    4352:	4877      	ldr	r0, [pc, #476]	; (4530 <main+0x218>)
    4354:	2101      	movs	r1, #1
    4356:	4604      	mov	r4, r0
    4358:	f000 fe70 	bl	503c <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    435c:	4875      	ldr	r0, [pc, #468]	; (4534 <main+0x21c>)
    435e:	f7ff ffb9 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>

    // Waits for HLFB to assert
    SerialPort.SendLine("Waiting for HLFB...");
    4362:	4875      	ldr	r0, [pc, #468]	; (4538 <main+0x220>)
    4364:	f7ff ffb6 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED) {
    4368:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    436c:	2b01      	cmp	r3, #1
    436e:	d1fb      	bne.n	4368 <main+0x50>
        continue;
    }
    SerialPort.SendLine("Motor Ready");
    4370:	4872      	ldr	r0, [pc, #456]	; (453c <main+0x224>)
    4372:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 455c <main+0x244>
    4376:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 4560 <main+0x248>
    437a:	4f71      	ldr	r7, [pc, #452]	; (4540 <main+0x228>)
    437c:	4e71      	ldr	r6, [pc, #452]	; (4544 <main+0x22c>)
    437e:	4d72      	ldr	r5, [pc, #456]	; (4548 <main+0x230>)
    4380:	f7ff ffa8 	bl	42d4 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.8>
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    4384:	f8d9 3000 	ldr.w	r3, [r9]
    4388:	9300      	str	r3, [sp, #0]
    438a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    438e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    4392:	9301      	str	r3, [sp, #4]
 *
 * Returns: True/False depending on whether the torque was successfully
 *    commanded.
 */
bool CommandTorque(int8_t commandedTorque) {
    if (abs(commandedTorque) > abs(maxTorque)) {
    4394:	e9dd 0100 	ldrd	r0, r1, [sp]
    4398:	2200      	movs	r2, #0
    439a:	4b6c      	ldr	r3, [pc, #432]	; (454c <main+0x234>)
    439c:	f017 ffc0 	bl	1c320 <__aeabi_dcmplt>
    43a0:	2800      	cmp	r0, #0
    43a2:	f040 83a1 	bne.w	4ae8 <main+0x7d0>
        SerialPort.SendLine("Move rejected, invalid torque requested");
        return false;
    }

    // Check if an alert is currently preventing motion
    if (motor.StatusReg().bit.AlertsPresent) {
    43a6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    43aa:	059b      	lsls	r3, r3, #22
    43ac:	f100 8382 	bmi.w	4ab4 <main+0x79c>
    43b0:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 4564 <main+0x24c>
            if (!SendChar(buffer[iChar])) {
    43b4:	f8df a174 	ldr.w	sl, [pc, #372]	; 452c <main+0x214>
    43b8:	f81b 1b01 	ldrb.w	r1, [fp], #1
    43bc:	4650      	mov	r0, sl
    43be:	f001 fddb 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43c2:	b108      	cbz	r0, 43c8 <main+0xb0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43c4:	455f      	cmp	r7, fp
    43c6:	d1f7      	bne.n	43b8 <main+0xa0>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[2 + 8 * sizeof(number)];
        itoa(number, strRep, radix);
    43c8:	220a      	movs	r2, #10
    43ca:	a90d      	add	r1, sp, #52	; 0x34
    43cc:	200f      	movs	r0, #15
    43ce:	f019 fda5 	bl	1df1c <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    43d2:	a80d      	add	r0, sp, #52	; 0x34
    43d4:	f01a fe54 	bl	1f080 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43d8:	b188      	cbz	r0, 43fe <main+0xe6>
    43da:	ab0d      	add	r3, sp, #52	; 0x34
    43dc:	4403      	add	r3, r0
            if (!SendChar(buffer[iChar])) {
    43de:	f8df b14c 	ldr.w	fp, [pc, #332]	; 452c <main+0x214>
    43e2:	930b      	str	r3, [sp, #44]	; 0x2c
    43e4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    43e8:	e002      	b.n	43f0 <main+0xd8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    43ec:	459a      	cmp	sl, r3
    43ee:	d006      	beq.n	43fe <main+0xe6>
            if (!SendChar(buffer[iChar])) {
    43f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
    43f4:	4658      	mov	r0, fp
    43f6:	f001 fdbf 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43fa:	2800      	cmp	r0, #0
    43fc:	d1f5      	bne.n	43ea <main+0xd2>
        return SendChar('\r') && SendChar('\n');
    43fe:	210d      	movs	r1, #13
    4400:	484a      	ldr	r0, [pc, #296]	; (452c <main+0x214>)
    4402:	f001 fdb9 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4406:	2800      	cmp	r0, #0
    4408:	f040 83f0 	bne.w	4bec <main+0x8d4>
    SerialPort.Send("Commanding torque: ");
    SerialPort.SendLine(commandedTorque);

    // Find the scaling factor of our torque range mapped to the PWM duty cycle
    // range (255 is the max duty cycle).
    double scaleFactor = 255 / maxTorque;
    440c:	e9d9 2300 	ldrd	r2, r3, [r9]
    4410:	a141      	add	r1, pc, #260	; (adr r1, 4518 <main+0x200>)
    4412:	e9d1 0100 	ldrd	r0, r1, [r1]
    4416:	f017 fe3b 	bl	1c090 <__aeabi_ddiv>

    // Scale the torque command to our duty cycle range.
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    441a:	2200      	movs	r2, #0
    441c:	4b4b      	ldr	r3, [pc, #300]	; (454c <main+0x234>)
    441e:	f8df b148 	ldr.w	fp, [pc, #328]	; 4568 <main+0x250>
            if (!SendChar(buffer[iChar])) {
    4422:	f8df a108 	ldr.w	sl, [pc, #264]	; 452c <main+0x214>
    4426:	f017 fd09 	bl	1be3c <__aeabi_dmul>
    442a:	f017 ffc9 	bl	1c3c0 <__aeabi_d2uiz>
    // Set input A to match the direction of torque.
    if (commandedTorque < 0) {
        motor.MotorInAState(true);
    }
    else {
        motor.MotorInAState(false);
    442e:	2100      	movs	r1, #0
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    4430:	b2c3      	uxtb	r3, r0
        motor.MotorInAState(false);
    4432:	483f      	ldr	r0, [pc, #252]	; (4530 <main+0x218>)
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    4434:	930b      	str	r3, [sp, #44]	; 0x2c
        motor.MotorInAState(false);
    4436:	f000 fdbf 	bl	4fb8 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    443a:	4845      	ldr	r0, [pc, #276]	; (4550 <main+0x238>)
    443c:	2100      	movs	r1, #0
    443e:	f005 fbf3 	bl	9c28 <Delay_cycles>
    // Ensures this delay is at least 20ms longer than the Input A filter
    // setting in MSP
    Delay_ms(20 + INPUT_A_FILTER);

    // Command the move
    motor.MotorInBDuty(dutyRequest);
    4442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4444:	483a      	ldr	r0, [pc, #232]	; (4530 <main+0x218>)
    4446:	4619      	mov	r1, r3
    4448:	f000 fdd0 	bl	4fec <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>
    444c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4450:	4650      	mov	r0, sl
    4452:	f001 fd91 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4456:	b140      	cbz	r0, 446a <main+0x152>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4458:	455e      	cmp	r6, fp
    445a:	d1f7      	bne.n	444c <main+0x134>
        return SendChar('\r') && SendChar('\n');
    445c:	210d      	movs	r1, #13
    445e:	4833      	ldr	r0, [pc, #204]	; (452c <main+0x214>)
    4460:	f001 fd8a 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4464:	2800      	cmp	r0, #0
    4466:	f040 83c6 	bne.w	4bf6 <main+0x8de>
    446a:	483a      	ldr	r0, [pc, #232]	; (4554 <main+0x23c>)
    446c:	2100      	movs	r1, #0
    446e:	f005 fbdb 	bl	9c28 <Delay_cycles>

    // Waits for HLFB to assert (signaling a successful new torque output)
    SerialPort.SendLine("Moving... Waiting for HLFB");
    // Allow some time for HLFB to transition.
    Delay_ms(1);
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED) {
    4472:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    4476:	2b01      	cmp	r3, #1
    4478:	d1fb      	bne.n	4472 <main+0x15a>
    447a:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 456c <main+0x254>
            if (!SendChar(buffer[iChar])) {
    447e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 452c <main+0x214>
    4482:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4486:	4650      	mov	r0, sl
    4488:	f001 fd76 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    448c:	b140      	cbz	r0, 44a0 <main+0x188>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    448e:	45ab      	cmp	fp, r5
    4490:	d1f7      	bne.n	4482 <main+0x16a>
        return SendChar('\r') && SendChar('\n');
    4492:	210d      	movs	r1, #13
    4494:	4825      	ldr	r0, [pc, #148]	; (452c <main+0x214>)
    4496:	f001 fd6f 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    449a:	2800      	cmp	r0, #0
    449c:	f040 831f 	bne.w	4ade <main+0x7c6>
    44a0:	482d      	ldr	r0, [pc, #180]	; (4558 <main+0x240>)
    44a2:	2100      	movs	r1, #0
    44a4:	f005 fbc0 	bl	9c28 <Delay_cycles>
    44a8:	f8d9 3000 	ldr.w	r3, [r9]
    44ac:	9302      	str	r3, [sp, #8]
    44ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
    44b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    44b6:	9303      	str	r3, [sp, #12]
    if (abs(commandedTorque) > abs(maxTorque)) {
    44b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    44bc:	a318      	add	r3, pc, #96	; (adr r3, 4520 <main+0x208>)
    44be:	e9d3 2300 	ldrd	r2, r3, [r3]
    44c2:	f017 ff2d 	bl	1c320 <__aeabi_dcmplt>
    44c6:	2800      	cmp	r0, #0
    44c8:	f040 833c 	bne.w	4b44 <main+0x82c>
    if (motor.StatusReg().bit.AlertsPresent) {
    44cc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    44d0:	0598      	lsls	r0, r3, #22
    44d2:	f100 82d5 	bmi.w	4a80 <main+0x768>
    44d6:	f8df b08c 	ldr.w	fp, [pc, #140]	; 4564 <main+0x24c>
            if (!SendChar(buffer[iChar])) {
    44da:	f8df a050 	ldr.w	sl, [pc, #80]	; 452c <main+0x214>
    44de:	f81b 1b01 	ldrb.w	r1, [fp], #1
    44e2:	4650      	mov	r0, sl
    44e4:	f001 fd48 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44e8:	b108      	cbz	r0, 44ee <main+0x1d6>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44ea:	45bb      	cmp	fp, r7
    44ec:	d1f7      	bne.n	44de <main+0x1c6>
        itoa(number, strRep, radix);
    44ee:	220a      	movs	r2, #10
    44f0:	a90d      	add	r1, sp, #52	; 0x34
    44f2:	f06f 004a 	mvn.w	r0, #74	; 0x4a
    44f6:	f019 fd11 	bl	1df1c <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    44fa:	a80d      	add	r0, sp, #52	; 0x34
    44fc:	f01a fdc0 	bl	1f080 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4500:	2800      	cmp	r0, #0
    4502:	d03f      	beq.n	4584 <main+0x26c>
    4504:	ab0d      	add	r3, sp, #52	; 0x34
    4506:	4403      	add	r3, r0
            if (!SendChar(buffer[iChar])) {
    4508:	f8df b020 	ldr.w	fp, [pc, #32]	; 452c <main+0x214>
    450c:	930b      	str	r3, [sp, #44]	; 0x2c
    450e:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    4512:	e030      	b.n	4576 <main+0x25e>
    4514:	f3af 8000 	nop.w
    4518:	00000000 	.word	0x00000000
    451c:	406fe000 	.word	0x406fe000
    4520:	00000000 	.word	0x00000000
    4524:	4052c000 	.word	0x4052c000
    4528:	20001c0c 	.word	0x20001c0c
    452c:	20001490 	.word	0x20001490
    4530:	20000b70 	.word	0x20000b70
    4534:	00022cbc 	.word	0x00022cbc
    4538:	00022ccc 	.word	0x00022ccc
    453c:	00022ce0 	.word	0x00022ce0
    4540:	00022d53 	.word	0x00022d53
    4544:	00022d6e 	.word	0x00022d6e
    4548:	00022d79 	.word	0x00022d79
    454c:	402e0000 	.word	0x402e0000
    4550:	00493e00 	.word	0x00493e00
    4554:	0001d4c0 	.word	0x0001d4c0
    4558:	0e4e1c00 	.word	0x0e4e1c00
    455c:	20000000 	.word	0x20000000
    4560:	00022d3c 	.word	0x00022d3c
    4564:	00022d40 	.word	0x00022d40
    4568:	00022d54 	.word	0x00022d54
    456c:	00022d70 	.word	0x00022d70
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4572:	4553      	cmp	r3, sl
    4574:	d006      	beq.n	4584 <main+0x26c>
            if (!SendChar(buffer[iChar])) {
    4576:	f81a 1b01 	ldrb.w	r1, [sl], #1
    457a:	4658      	mov	r0, fp
    457c:	f001 fcfc 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4580:	2800      	cmp	r0, #0
    4582:	d1f5      	bne.n	4570 <main+0x258>
        return SendChar('\r') && SendChar('\n');
    4584:	210d      	movs	r1, #13
    4586:	4892      	ldr	r0, [pc, #584]	; (47d0 <main+0x4b8>)
    4588:	f001 fcf6 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    458c:	2800      	cmp	r0, #0
    458e:	f040 833c 	bne.w	4c0a <main+0x8f2>
    double scaleFactor = 255 / maxTorque;
    4592:	e9d9 2300 	ldrd	r2, r3, [r9]
    4596:	a18a      	add	r1, pc, #552	; (adr r1, 47c0 <main+0x4a8>)
    4598:	e9d1 0100 	ldrd	r0, r1, [r1]
    459c:	f017 fd78 	bl	1c090 <__aeabi_ddiv>
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    45a0:	a389      	add	r3, pc, #548	; (adr r3, 47c8 <main+0x4b0>)
    45a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    45a6:	f017 fc49 	bl	1be3c <__aeabi_dmul>
    45aa:	f017 ff09 	bl	1c3c0 <__aeabi_d2uiz>
        motor.MotorInAState(true);
    45ae:	2101      	movs	r1, #1
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    45b0:	b2c3      	uxtb	r3, r0
        motor.MotorInAState(true);
    45b2:	4888      	ldr	r0, [pc, #544]	; (47d4 <main+0x4bc>)
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    45b4:	930b      	str	r3, [sp, #44]	; 0x2c
        motor.MotorInAState(true);
    45b6:	f000 fcff 	bl	4fb8 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    45ba:	4887      	ldr	r0, [pc, #540]	; (47d8 <main+0x4c0>)
    45bc:	f8df b22c 	ldr.w	fp, [pc, #556]	; 47ec <main+0x4d4>
            if (!SendChar(buffer[iChar])) {
    45c0:	f8df a20c 	ldr.w	sl, [pc, #524]	; 47d0 <main+0x4b8>
    45c4:	2100      	movs	r1, #0
    45c6:	f005 fb2f 	bl	9c28 <Delay_cycles>
    motor.MotorInBDuty(dutyRequest);
    45ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    45cc:	4881      	ldr	r0, [pc, #516]	; (47d4 <main+0x4bc>)
    45ce:	4619      	mov	r1, r3
    45d0:	f000 fd0c 	bl	4fec <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>
    45d4:	f81b 1b01 	ldrb.w	r1, [fp], #1
    45d8:	4650      	mov	r0, sl
    45da:	f001 fccd 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45de:	b140      	cbz	r0, 45f2 <main+0x2da>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45e0:	45b3      	cmp	fp, r6
    45e2:	d1f7      	bne.n	45d4 <main+0x2bc>
        return SendChar('\r') && SendChar('\n');
    45e4:	210d      	movs	r1, #13
    45e6:	487a      	ldr	r0, [pc, #488]	; (47d0 <main+0x4b8>)
    45e8:	f001 fcc6 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45ec:	2800      	cmp	r0, #0
    45ee:	f040 8307 	bne.w	4c00 <main+0x8e8>
    45f2:	487a      	ldr	r0, [pc, #488]	; (47dc <main+0x4c4>)
    45f4:	2100      	movs	r1, #0
    45f6:	f005 fb17 	bl	9c28 <Delay_cycles>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED) {
    45fa:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    45fe:	2b01      	cmp	r3, #1
    4600:	d1fb      	bne.n	45fa <main+0x2e2>
    4602:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 47f0 <main+0x4d8>
            if (!SendChar(buffer[iChar])) {
    4606:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 47d0 <main+0x4b8>
    460a:	f81b 1b01 	ldrb.w	r1, [fp], #1
    460e:	4650      	mov	r0, sl
    4610:	f001 fcb2 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4614:	b140      	cbz	r0, 4628 <main+0x310>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4616:	455d      	cmp	r5, fp
    4618:	d1f7      	bne.n	460a <main+0x2f2>
        return SendChar('\r') && SendChar('\n');
    461a:	210d      	movs	r1, #13
    461c:	486c      	ldr	r0, [pc, #432]	; (47d0 <main+0x4b8>)
    461e:	f001 fcab 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4622:	2800      	cmp	r0, #0
    4624:	f040 8241 	bne.w	4aaa <main+0x792>
    4628:	486d      	ldr	r0, [pc, #436]	; (47e0 <main+0x4c8>)
    462a:	2100      	movs	r1, #0
    462c:	f005 fafc 	bl	9c28 <Delay_cycles>
    4630:	f8d9 3000 	ldr.w	r3, [r9]
    4634:	9304      	str	r3, [sp, #16]
    4636:	f8d9 3004 	ldr.w	r3, [r9, #4]
    463a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    463e:	9305      	str	r3, [sp, #20]
    if (abs(commandedTorque) > abs(maxTorque)) {
    4640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4644:	2200      	movs	r2, #0
    4646:	4b67      	ldr	r3, [pc, #412]	; (47e4 <main+0x4cc>)
    4648:	f017 fe6a 	bl	1c320 <__aeabi_dcmplt>
    464c:	2800      	cmp	r0, #0
    464e:	f040 8299 	bne.w	4b84 <main+0x86c>
    if (motor.StatusReg().bit.AlertsPresent) {
    4652:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    4656:	0599      	lsls	r1, r3, #22
    4658:	f100 81f8 	bmi.w	4a4c <main+0x734>
    465c:	f8df b194 	ldr.w	fp, [pc, #404]	; 47f4 <main+0x4dc>
            if (!SendChar(buffer[iChar])) {
    4660:	f8df a16c 	ldr.w	sl, [pc, #364]	; 47d0 <main+0x4b8>
    4664:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4668:	4650      	mov	r0, sl
    466a:	f001 fc85 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    466e:	b108      	cbz	r0, 4674 <main+0x35c>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4670:	455f      	cmp	r7, fp
    4672:	d1f7      	bne.n	4664 <main+0x34c>
        itoa(number, strRep, radix);
    4674:	220a      	movs	r2, #10
    4676:	a90d      	add	r1, sp, #52	; 0x34
    4678:	2005      	movs	r0, #5
    467a:	f019 fc4f 	bl	1df1c <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    467e:	a80d      	add	r0, sp, #52	; 0x34
    4680:	f01a fcfe 	bl	1f080 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4684:	b188      	cbz	r0, 46aa <main+0x392>
    4686:	ab0d      	add	r3, sp, #52	; 0x34
    4688:	4403      	add	r3, r0
            if (!SendChar(buffer[iChar])) {
    468a:	f8df b144 	ldr.w	fp, [pc, #324]	; 47d0 <main+0x4b8>
    468e:	930b      	str	r3, [sp, #44]	; 0x2c
    4690:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    4694:	e002      	b.n	469c <main+0x384>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4698:	4553      	cmp	r3, sl
    469a:	d006      	beq.n	46aa <main+0x392>
            if (!SendChar(buffer[iChar])) {
    469c:	f81a 1b01 	ldrb.w	r1, [sl], #1
    46a0:	4658      	mov	r0, fp
    46a2:	f001 fc69 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46a6:	2800      	cmp	r0, #0
    46a8:	d1f5      	bne.n	4696 <main+0x37e>
        return SendChar('\r') && SendChar('\n');
    46aa:	210d      	movs	r1, #13
    46ac:	4848      	ldr	r0, [pc, #288]	; (47d0 <main+0x4b8>)
    46ae:	f001 fc63 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46b2:	2800      	cmp	r0, #0
    46b4:	f040 8290 	bne.w	4bd8 <main+0x8c0>
    double scaleFactor = 255 / maxTorque;
    46b8:	e9d9 2300 	ldrd	r2, r3, [r9]
    46bc:	a140      	add	r1, pc, #256	; (adr r1, 47c0 <main+0x4a8>)
    46be:	e9d1 0100 	ldrd	r0, r1, [r1]
    46c2:	f017 fce5 	bl	1c090 <__aeabi_ddiv>
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    46c6:	2200      	movs	r2, #0
    46c8:	4b46      	ldr	r3, [pc, #280]	; (47e4 <main+0x4cc>)
    46ca:	f8df b120 	ldr.w	fp, [pc, #288]	; 47ec <main+0x4d4>
            if (!SendChar(buffer[iChar])) {
    46ce:	f8df a100 	ldr.w	sl, [pc, #256]	; 47d0 <main+0x4b8>
    46d2:	f017 fbb3 	bl	1be3c <__aeabi_dmul>
    46d6:	f017 fe73 	bl	1c3c0 <__aeabi_d2uiz>
        motor.MotorInAState(false);
    46da:	2100      	movs	r1, #0
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    46dc:	b2c3      	uxtb	r3, r0
        motor.MotorInAState(false);
    46de:	483d      	ldr	r0, [pc, #244]	; (47d4 <main+0x4bc>)
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    46e0:	930b      	str	r3, [sp, #44]	; 0x2c
        motor.MotorInAState(false);
    46e2:	f000 fc69 	bl	4fb8 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    46e6:	483c      	ldr	r0, [pc, #240]	; (47d8 <main+0x4c0>)
    46e8:	2100      	movs	r1, #0
    46ea:	f005 fa9d 	bl	9c28 <Delay_cycles>
    motor.MotorInBDuty(dutyRequest);
    46ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    46f0:	4838      	ldr	r0, [pc, #224]	; (47d4 <main+0x4bc>)
    46f2:	4619      	mov	r1, r3
    46f4:	f000 fc7a 	bl	4fec <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>
    46f8:	f81b 1b01 	ldrb.w	r1, [fp], #1
    46fc:	4650      	mov	r0, sl
    46fe:	f001 fc3b 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4702:	b140      	cbz	r0, 4716 <main+0x3fe>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4704:	45b3      	cmp	fp, r6
    4706:	d1f7      	bne.n	46f8 <main+0x3e0>
        return SendChar('\r') && SendChar('\n');
    4708:	210d      	movs	r1, #13
    470a:	4831      	ldr	r0, [pc, #196]	; (47d0 <main+0x4b8>)
    470c:	f001 fc34 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4710:	2800      	cmp	r0, #0
    4712:	f040 8266 	bne.w	4be2 <main+0x8ca>
    4716:	4831      	ldr	r0, [pc, #196]	; (47dc <main+0x4c4>)
    4718:	2100      	movs	r1, #0
    471a:	f005 fa85 	bl	9c28 <Delay_cycles>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED) {
    471e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    4722:	2b01      	cmp	r3, #1
    4724:	d1fb      	bne.n	471e <main+0x406>
    4726:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 47f0 <main+0x4d8>
            if (!SendChar(buffer[iChar])) {
    472a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 47d0 <main+0x4b8>
    472e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4732:	4650      	mov	r0, sl
    4734:	f001 fc20 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4738:	b140      	cbz	r0, 474c <main+0x434>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    473a:	455d      	cmp	r5, fp
    473c:	d1f7      	bne.n	472e <main+0x416>
        return SendChar('\r') && SendChar('\n');
    473e:	210d      	movs	r1, #13
    4740:	4823      	ldr	r0, [pc, #140]	; (47d0 <main+0x4b8>)
    4742:	f001 fc19 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4746:	2800      	cmp	r0, #0
    4748:	f040 8195 	bne.w	4a76 <main+0x75e>
    474c:	4824      	ldr	r0, [pc, #144]	; (47e0 <main+0x4c8>)
    474e:	2100      	movs	r1, #0
    4750:	f005 fa6a 	bl	9c28 <Delay_cycles>
    4754:	f8d9 3000 	ldr.w	r3, [r9]
    4758:	9306      	str	r3, [sp, #24]
    475a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    475e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    4762:	9307      	str	r3, [sp, #28]
    if (abs(commandedTorque) > abs(maxTorque)) {
    4764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4768:	2200      	movs	r2, #0
    476a:	4b1f      	ldr	r3, [pc, #124]	; (47e8 <main+0x4d0>)
    476c:	f017 fdd8 	bl	1c320 <__aeabi_dcmplt>
    4770:	2800      	cmp	r0, #0
    4772:	f040 8217 	bne.w	4ba4 <main+0x88c>
    if (motor.StatusReg().bit.AlertsPresent) {
    4776:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    477a:	059a      	lsls	r2, r3, #22
    477c:	f100 8134 	bmi.w	49e8 <main+0x6d0>
    4780:	f8df b070 	ldr.w	fp, [pc, #112]	; 47f4 <main+0x4dc>
            if (!SendChar(buffer[iChar])) {
    4784:	f8df a048 	ldr.w	sl, [pc, #72]	; 47d0 <main+0x4b8>
    4788:	f81b 1b01 	ldrb.w	r1, [fp], #1
    478c:	4650      	mov	r0, sl
    478e:	f001 fbf3 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4792:	b108      	cbz	r0, 4798 <main+0x480>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4794:	455f      	cmp	r7, fp
    4796:	d1f7      	bne.n	4788 <main+0x470>
        itoa(number, strRep, radix);
    4798:	220a      	movs	r2, #10
    479a:	a90d      	add	r1, sp, #52	; 0x34
    479c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    47a0:	f019 fbbc 	bl	1df1c <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    47a4:	a80d      	add	r0, sp, #52	; 0x34
    47a6:	f01a fc6b 	bl	1f080 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    47aa:	b378      	cbz	r0, 480c <main+0x4f4>
    47ac:	ab0d      	add	r3, sp, #52	; 0x34
    47ae:	4403      	add	r3, r0
            if (!SendChar(buffer[iChar])) {
    47b0:	f8df b01c 	ldr.w	fp, [pc, #28]	; 47d0 <main+0x4b8>
    47b4:	930b      	str	r3, [sp, #44]	; 0x2c
    47b6:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    47ba:	e020      	b.n	47fe <main+0x4e6>
    47bc:	f3af 8000 	nop.w
    47c0:	00000000 	.word	0x00000000
    47c4:	406fe000 	.word	0x406fe000
    47c8:	00000000 	.word	0x00000000
    47cc:	4052c000 	.word	0x4052c000
    47d0:	20001490 	.word	0x20001490
    47d4:	20000b70 	.word	0x20000b70
    47d8:	00493e00 	.word	0x00493e00
    47dc:	0001d4c0 	.word	0x0001d4c0
    47e0:	0e4e1c00 	.word	0x0e4e1c00
    47e4:	40140000 	.word	0x40140000
    47e8:	40418000 	.word	0x40418000
    47ec:	00022d54 	.word	0x00022d54
    47f0:	00022d70 	.word	0x00022d70
    47f4:	00022d40 	.word	0x00022d40
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    47f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    47fa:	4553      	cmp	r3, sl
    47fc:	d006      	beq.n	480c <main+0x4f4>
            if (!SendChar(buffer[iChar])) {
    47fe:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4802:	4658      	mov	r0, fp
    4804:	f001 fbb8 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4808:	2800      	cmp	r0, #0
    480a:	d1f5      	bne.n	47f8 <main+0x4e0>
        return SendChar('\r') && SendChar('\n');
    480c:	210d      	movs	r1, #13
    480e:	48c0      	ldr	r0, [pc, #768]	; (4b10 <main+0x7f8>)
    4810:	f001 fbb2 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4814:	2800      	cmp	r0, #0
    4816:	f040 81d5 	bne.w	4bc4 <main+0x8ac>
    double scaleFactor = 255 / maxTorque;
    481a:	e9d9 2300 	ldrd	r2, r3, [r9]
    481e:	a1ba      	add	r1, pc, #744	; (adr r1, 4b08 <main+0x7f0>)
    4820:	e9d1 0100 	ldrd	r0, r1, [r1]
    4824:	f017 fc34 	bl	1c090 <__aeabi_ddiv>
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    4828:	2200      	movs	r2, #0
    482a:	4bba      	ldr	r3, [pc, #744]	; (4b14 <main+0x7fc>)
    482c:	f8df b300 	ldr.w	fp, [pc, #768]	; 4b30 <main+0x818>
            if (!SendChar(buffer[iChar])) {
    4830:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 4b10 <main+0x7f8>
    4834:	f017 fb02 	bl	1be3c <__aeabi_dmul>
    4838:	f017 fdc2 	bl	1c3c0 <__aeabi_d2uiz>
        motor.MotorInAState(true);
    483c:	2101      	movs	r1, #1
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    483e:	b2c3      	uxtb	r3, r0
        motor.MotorInAState(true);
    4840:	48b5      	ldr	r0, [pc, #724]	; (4b18 <main+0x800>)
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    4842:	930b      	str	r3, [sp, #44]	; 0x2c
        motor.MotorInAState(true);
    4844:	f000 fbb8 	bl	4fb8 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    4848:	48b4      	ldr	r0, [pc, #720]	; (4b1c <main+0x804>)
    484a:	2100      	movs	r1, #0
    484c:	f005 f9ec 	bl	9c28 <Delay_cycles>
    motor.MotorInBDuty(dutyRequest);
    4850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4852:	48b1      	ldr	r0, [pc, #708]	; (4b18 <main+0x800>)
    4854:	4619      	mov	r1, r3
    4856:	f000 fbc9 	bl	4fec <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>
    485a:	f81b 1b01 	ldrb.w	r1, [fp], #1
    485e:	4650      	mov	r0, sl
    4860:	f001 fb8a 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4864:	b140      	cbz	r0, 4878 <main+0x560>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4866:	455e      	cmp	r6, fp
    4868:	d1f7      	bne.n	485a <main+0x542>
        return SendChar('\r') && SendChar('\n');
    486a:	210d      	movs	r1, #13
    486c:	48a8      	ldr	r0, [pc, #672]	; (4b10 <main+0x7f8>)
    486e:	f001 fb83 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4872:	2800      	cmp	r0, #0
    4874:	f040 81ab 	bne.w	4bce <main+0x8b6>
    4878:	48a9      	ldr	r0, [pc, #676]	; (4b20 <main+0x808>)
    487a:	2100      	movs	r1, #0
    487c:	f005 f9d4 	bl	9c28 <Delay_cycles>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED) {
    4880:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    4884:	2b01      	cmp	r3, #1
    4886:	d1fb      	bne.n	4880 <main+0x568>
    4888:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 4b34 <main+0x81c>
            if (!SendChar(buffer[iChar])) {
    488c:	f8df a280 	ldr.w	sl, [pc, #640]	; 4b10 <main+0x7f8>
    4890:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4894:	4650      	mov	r0, sl
    4896:	f001 fb6f 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    489a:	b140      	cbz	r0, 48ae <main+0x596>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    489c:	455d      	cmp	r5, fp
    489e:	d1f7      	bne.n	4890 <main+0x578>
        return SendChar('\r') && SendChar('\n');
    48a0:	210d      	movs	r1, #13
    48a2:	489b      	ldr	r0, [pc, #620]	; (4b10 <main+0x7f8>)
    48a4:	f001 fb68 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48a8:	2800      	cmp	r0, #0
    48aa:	f040 80b2 	bne.w	4a12 <main+0x6fa>
    48ae:	489d      	ldr	r0, [pc, #628]	; (4b24 <main+0x80c>)
    48b0:	2100      	movs	r1, #0
    48b2:	f005 f9b9 	bl	9c28 <Delay_cycles>
    48b6:	f8d9 3000 	ldr.w	r3, [r9]
    48ba:	9308      	str	r3, [sp, #32]
    48bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    48c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    48c4:	9309      	str	r3, [sp, #36]	; 0x24
    if (abs(commandedTorque) > abs(maxTorque)) {
    48c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    48ca:	2200      	movs	r2, #0
    48cc:	4b96      	ldr	r3, [pc, #600]	; (4b28 <main+0x810>)
    48ce:	f017 fd27 	bl	1c320 <__aeabi_dcmplt>
    48d2:	2800      	cmp	r0, #0
    48d4:	f040 8146 	bne.w	4b64 <main+0x84c>
    if (motor.StatusReg().bit.AlertsPresent) {
    48d8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    48dc:	059b      	lsls	r3, r3, #22
    48de:	f100 809d 	bmi.w	4a1c <main+0x704>
    48e2:	f8df b254 	ldr.w	fp, [pc, #596]	; 4b38 <main+0x820>
            if (!SendChar(buffer[iChar])) {
    48e6:	f8df a228 	ldr.w	sl, [pc, #552]	; 4b10 <main+0x7f8>
    48ea:	f81b 1b01 	ldrb.w	r1, [fp], #1
    48ee:	4650      	mov	r0, sl
    48f0:	f001 fb42 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    48f4:	b108      	cbz	r0, 48fa <main+0x5e2>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    48f6:	45bb      	cmp	fp, r7
    48f8:	d1f7      	bne.n	48ea <main+0x5d2>
        itoa(number, strRep, radix);
    48fa:	220a      	movs	r2, #10
    48fc:	4610      	mov	r0, r2
    48fe:	a90d      	add	r1, sp, #52	; 0x34
    4900:	f019 fb0c 	bl	1df1c <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4904:	a80d      	add	r0, sp, #52	; 0x34
    4906:	f01a fbbb 	bl	1f080 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    490a:	b188      	cbz	r0, 4930 <main+0x618>
    490c:	ab0d      	add	r3, sp, #52	; 0x34
    490e:	4403      	add	r3, r0
            if (!SendChar(buffer[iChar])) {
    4910:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 4b10 <main+0x7f8>
    4914:	930b      	str	r3, [sp, #44]	; 0x2c
    4916:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    491a:	e002      	b.n	4922 <main+0x60a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    491c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    491e:	4553      	cmp	r3, sl
    4920:	d006      	beq.n	4930 <main+0x618>
            if (!SendChar(buffer[iChar])) {
    4922:	f81a 1b01 	ldrb.w	r1, [sl], #1
    4926:	4658      	mov	r0, fp
    4928:	f001 fb26 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    492c:	2800      	cmp	r0, #0
    492e:	d1f5      	bne.n	491c <main+0x604>
        return SendChar('\r') && SendChar('\n');
    4930:	210d      	movs	r1, #13
    4932:	4877      	ldr	r0, [pc, #476]	; (4b10 <main+0x7f8>)
    4934:	f001 fb20 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4938:	2800      	cmp	r0, #0
    493a:	f040 816b 	bne.w	4c14 <main+0x8fc>
    double scaleFactor = 255 / maxTorque;
    493e:	e9d9 2300 	ldrd	r2, r3, [r9]
    4942:	a171      	add	r1, pc, #452	; (adr r1, 4b08 <main+0x7f0>)
    4944:	e9d1 0100 	ldrd	r0, r1, [r1]
    4948:	f017 fba2 	bl	1c090 <__aeabi_ddiv>
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    494c:	2200      	movs	r2, #0
    494e:	4b76      	ldr	r3, [pc, #472]	; (4b28 <main+0x810>)
    4950:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 4b30 <main+0x818>
            if (!SendChar(buffer[iChar])) {
    4954:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 4b10 <main+0x7f8>
    4958:	f017 fa70 	bl	1be3c <__aeabi_dmul>
    495c:	f017 fd30 	bl	1c3c0 <__aeabi_d2uiz>
        motor.MotorInAState(false);
    4960:	2100      	movs	r1, #0
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    4962:	b2c3      	uxtb	r3, r0
        motor.MotorInAState(false);
    4964:	486c      	ldr	r0, [pc, #432]	; (4b18 <main+0x800>)
    uint8_t dutyRequest = abs(commandedTorque) * scaleFactor;
    4966:	930b      	str	r3, [sp, #44]	; 0x2c
        motor.MotorInAState(false);
    4968:	f000 fb26 	bl	4fb8 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    496c:	486b      	ldr	r0, [pc, #428]	; (4b1c <main+0x804>)
    496e:	2100      	movs	r1, #0
    4970:	f005 f95a 	bl	9c28 <Delay_cycles>
    motor.MotorInBDuty(dutyRequest);
    4974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4976:	4868      	ldr	r0, [pc, #416]	; (4b18 <main+0x800>)
    4978:	4619      	mov	r1, r3
    497a:	f000 fb37 	bl	4fec <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>
    497e:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4982:	4650      	mov	r0, sl
    4984:	f001 faf8 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4988:	b140      	cbz	r0, 499c <main+0x684>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    498a:	455e      	cmp	r6, fp
    498c:	d1f7      	bne.n	497e <main+0x666>
        return SendChar('\r') && SendChar('\n');
    498e:	210d      	movs	r1, #13
    4990:	485f      	ldr	r0, [pc, #380]	; (4b10 <main+0x7f8>)
    4992:	f001 faf1 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4996:	2800      	cmp	r0, #0
    4998:	f040 8141 	bne.w	4c1e <main+0x906>
    499c:	4860      	ldr	r0, [pc, #384]	; (4b20 <main+0x808>)
    499e:	2100      	movs	r1, #0
    49a0:	f005 f942 	bl	9c28 <Delay_cycles>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED) {
    49a4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    49a8:	2b01      	cmp	r3, #1
    49aa:	d1fb      	bne.n	49a4 <main+0x68c>
    49ac:	f8df b184 	ldr.w	fp, [pc, #388]	; 4b34 <main+0x81c>
            if (!SendChar(buffer[iChar])) {
    49b0:	f8df a15c 	ldr.w	sl, [pc, #348]	; 4b10 <main+0x7f8>
    49b4:	f81b 1b01 	ldrb.w	r1, [fp], #1
    49b8:	4650      	mov	r0, sl
    49ba:	f001 fadd 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49be:	b138      	cbz	r0, 49d0 <main+0x6b8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    49c0:	455d      	cmp	r5, fp
    49c2:	d1f7      	bne.n	49b4 <main+0x69c>
        return SendChar('\r') && SendChar('\n');
    49c4:	210d      	movs	r1, #13
    49c6:	4852      	ldr	r0, [pc, #328]	; (4b10 <main+0x7f8>)
    49c8:	f001 fad6 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49cc:	2800      	cmp	r0, #0
    49ce:	d138      	bne.n	4a42 <main+0x72a>
    49d0:	4854      	ldr	r0, [pc, #336]	; (4b24 <main+0x80c>)
    49d2:	2100      	movs	r1, #0
    49d4:	f005 f928 	bl	9c28 <Delay_cycles>
    49d8:	e4d4      	b.n	4384 <main+0x6c>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    49da:	f005 f8fb 	bl	9bd4 <Milliseconds>
    49de:	1b40      	subs	r0, r0, r5
    49e0:	42a0      	cmp	r0, r4
    49e2:	f67f acb0 	bls.w	4346 <main+0x2e>
    49e6:	e4b4      	b.n	4352 <main+0x3a>
    49e8:	f8df b150 	ldr.w	fp, [pc, #336]	; 4b3c <main+0x824>
            if (!SendChar(buffer[iChar])) {
    49ec:	f8df a120 	ldr.w	sl, [pc, #288]	; 4b10 <main+0x7f8>
    49f0:	f81b 1b01 	ldrb.w	r1, [fp], #1
    49f4:	4650      	mov	r0, sl
    49f6:	f001 fabf 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    49fa:	2800      	cmp	r0, #0
    49fc:	f43f af57 	beq.w	48ae <main+0x596>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a00:	45d8      	cmp	r8, fp
    4a02:	d1f5      	bne.n	49f0 <main+0x6d8>
        return SendChar('\r') && SendChar('\n');
    4a04:	210d      	movs	r1, #13
    4a06:	4842      	ldr	r0, [pc, #264]	; (4b10 <main+0x7f8>)
    4a08:	f001 fab6 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a0c:	2800      	cmp	r0, #0
    4a0e:	f43f af4e 	beq.w	48ae <main+0x596>
    4a12:	210a      	movs	r1, #10
    4a14:	483e      	ldr	r0, [pc, #248]	; (4b10 <main+0x7f8>)
    4a16:	f001 faaf 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a1a:	e748      	b.n	48ae <main+0x596>
    4a1c:	f8df b11c 	ldr.w	fp, [pc, #284]	; 4b3c <main+0x824>
            if (!SendChar(buffer[iChar])) {
    4a20:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 4b10 <main+0x7f8>
    4a24:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4a28:	4650      	mov	r0, sl
    4a2a:	f001 faa5 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a2e:	2800      	cmp	r0, #0
    4a30:	d0ce      	beq.n	49d0 <main+0x6b8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a32:	45d8      	cmp	r8, fp
    4a34:	d1f6      	bne.n	4a24 <main+0x70c>
        return SendChar('\r') && SendChar('\n');
    4a36:	210d      	movs	r1, #13
    4a38:	4835      	ldr	r0, [pc, #212]	; (4b10 <main+0x7f8>)
    4a3a:	f001 fa9d 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a3e:	2800      	cmp	r0, #0
    4a40:	d0c6      	beq.n	49d0 <main+0x6b8>
    4a42:	210a      	movs	r1, #10
    4a44:	4832      	ldr	r0, [pc, #200]	; (4b10 <main+0x7f8>)
    4a46:	f001 fa97 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a4a:	e7c1      	b.n	49d0 <main+0x6b8>
    4a4c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 4b3c <main+0x824>
            if (!SendChar(buffer[iChar])) {
    4a50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 4b10 <main+0x7f8>
    4a54:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4a58:	4650      	mov	r0, sl
    4a5a:	f001 fa8d 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a5e:	2800      	cmp	r0, #0
    4a60:	f43f ae74 	beq.w	474c <main+0x434>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a64:	45d8      	cmp	r8, fp
    4a66:	d1f5      	bne.n	4a54 <main+0x73c>
        return SendChar('\r') && SendChar('\n');
    4a68:	210d      	movs	r1, #13
    4a6a:	4829      	ldr	r0, [pc, #164]	; (4b10 <main+0x7f8>)
    4a6c:	f001 fa84 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a70:	2800      	cmp	r0, #0
    4a72:	f43f ae6b 	beq.w	474c <main+0x434>
    4a76:	210a      	movs	r1, #10
    4a78:	4825      	ldr	r0, [pc, #148]	; (4b10 <main+0x7f8>)
    4a7a:	f001 fa7d 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a7e:	e665      	b.n	474c <main+0x434>
    4a80:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 4b3c <main+0x824>
            if (!SendChar(buffer[iChar])) {
    4a84:	f8df a088 	ldr.w	sl, [pc, #136]	; 4b10 <main+0x7f8>
    4a88:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4a8c:	4650      	mov	r0, sl
    4a8e:	f001 fa73 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4a92:	2800      	cmp	r0, #0
    4a94:	f43f adc8 	beq.w	4628 <main+0x310>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4a98:	45c3      	cmp	fp, r8
    4a9a:	d1f5      	bne.n	4a88 <main+0x770>
        return SendChar('\r') && SendChar('\n');
    4a9c:	210d      	movs	r1, #13
    4a9e:	481c      	ldr	r0, [pc, #112]	; (4b10 <main+0x7f8>)
    4aa0:	f001 fa6a 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4aa4:	2800      	cmp	r0, #0
    4aa6:	f43f adbf 	beq.w	4628 <main+0x310>
    4aaa:	210a      	movs	r1, #10
    4aac:	4818      	ldr	r0, [pc, #96]	; (4b10 <main+0x7f8>)
    4aae:	f001 fa63 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ab2:	e5b9      	b.n	4628 <main+0x310>
    4ab4:	f8df b084 	ldr.w	fp, [pc, #132]	; 4b3c <main+0x824>
            if (!SendChar(buffer[iChar])) {
    4ab8:	f8df a054 	ldr.w	sl, [pc, #84]	; 4b10 <main+0x7f8>
    4abc:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4ac0:	4650      	mov	r0, sl
    4ac2:	f001 fa59 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ac6:	2800      	cmp	r0, #0
    4ac8:	f43f acea 	beq.w	44a0 <main+0x188>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4acc:	45c3      	cmp	fp, r8
    4ace:	d1f5      	bne.n	4abc <main+0x7a4>
        return SendChar('\r') && SendChar('\n');
    4ad0:	210d      	movs	r1, #13
    4ad2:	480f      	ldr	r0, [pc, #60]	; (4b10 <main+0x7f8>)
    4ad4:	f001 fa50 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ad8:	2800      	cmp	r0, #0
    4ada:	f43f ace1 	beq.w	44a0 <main+0x188>
    4ade:	210a      	movs	r1, #10
    4ae0:	480b      	ldr	r0, [pc, #44]	; (4b10 <main+0x7f8>)
    4ae2:	f001 fa49 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4ae6:	e4db      	b.n	44a0 <main+0x188>
    4ae8:	f8df b054 	ldr.w	fp, [pc, #84]	; 4b40 <main+0x828>
            if (!SendChar(buffer[iChar])) {
    4aec:	f8df a020 	ldr.w	sl, [pc, #32]	; 4b10 <main+0x7f8>
    4af0:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4af4:	4650      	mov	r0, sl
    4af6:	f001 fa3f 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4afa:	2800      	cmp	r0, #0
    4afc:	f43f acd0 	beq.w	44a0 <main+0x188>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b00:	4b0a      	ldr	r3, [pc, #40]	; (4b2c <main+0x814>)
    4b02:	455b      	cmp	r3, fp
    4b04:	d1f4      	bne.n	4af0 <main+0x7d8>
    4b06:	e4c4      	b.n	4492 <main+0x17a>
    4b08:	00000000 	.word	0x00000000
    4b0c:	406fe000 	.word	0x406fe000
    4b10:	20001490 	.word	0x20001490
    4b14:	40418000 	.word	0x40418000
    4b18:	20000b70 	.word	0x20000b70
    4b1c:	00493e00 	.word	0x00493e00
    4b20:	0001d4c0 	.word	0x0001d4c0
    4b24:	0e4e1c00 	.word	0x0e4e1c00
    4b28:	40240000 	.word	0x40240000
    4b2c:	00022d13 	.word	0x00022d13
    4b30:	00022d54 	.word	0x00022d54
    4b34:	00022d70 	.word	0x00022d70
    4b38:	00022d40 	.word	0x00022d40
    4b3c:	00022d14 	.word	0x00022d14
    4b40:	00022cec 	.word	0x00022cec
    4b44:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 4c30 <main+0x918>
            if (!SendChar(buffer[iChar])) {
    4b48:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 4c2c <main+0x914>
    4b4c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4b50:	4650      	mov	r0, sl
    4b52:	f001 fa11 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b56:	2800      	cmp	r0, #0
    4b58:	f43f ad66 	beq.w	4628 <main+0x310>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b5c:	4b32      	ldr	r3, [pc, #200]	; (4c28 <main+0x910>)
    4b5e:	459b      	cmp	fp, r3
    4b60:	d1f4      	bne.n	4b4c <main+0x834>
    4b62:	e55a      	b.n	461a <main+0x302>
    4b64:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 4c30 <main+0x918>
            if (!SendChar(buffer[iChar])) {
    4b68:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 4c2c <main+0x914>
    4b6c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4b70:	4650      	mov	r0, sl
    4b72:	f001 fa01 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b76:	2800      	cmp	r0, #0
    4b78:	f43f af2a 	beq.w	49d0 <main+0x6b8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b7c:	4b2a      	ldr	r3, [pc, #168]	; (4c28 <main+0x910>)
    4b7e:	455b      	cmp	r3, fp
    4b80:	d1f4      	bne.n	4b6c <main+0x854>
    4b82:	e71f      	b.n	49c4 <main+0x6ac>
    4b84:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4c30 <main+0x918>
            if (!SendChar(buffer[iChar])) {
    4b88:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 4c2c <main+0x914>
    4b8c:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4b90:	4650      	mov	r0, sl
    4b92:	f001 f9f1 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4b96:	2800      	cmp	r0, #0
    4b98:	f43f add8 	beq.w	474c <main+0x434>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4b9c:	4b22      	ldr	r3, [pc, #136]	; (4c28 <main+0x910>)
    4b9e:	455b      	cmp	r3, fp
    4ba0:	d1f4      	bne.n	4b8c <main+0x874>
    4ba2:	e5cc      	b.n	473e <main+0x426>
    4ba4:	f8df b088 	ldr.w	fp, [pc, #136]	; 4c30 <main+0x918>
            if (!SendChar(buffer[iChar])) {
    4ba8:	f8df a080 	ldr.w	sl, [pc, #128]	; 4c2c <main+0x914>
    4bac:	f81b 1b01 	ldrb.w	r1, [fp], #1
    4bb0:	4650      	mov	r0, sl
    4bb2:	f001 f9e1 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bb6:	2800      	cmp	r0, #0
    4bb8:	f43f ae79 	beq.w	48ae <main+0x596>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4bbc:	4b1a      	ldr	r3, [pc, #104]	; (4c28 <main+0x910>)
    4bbe:	459b      	cmp	fp, r3
    4bc0:	d1f4      	bne.n	4bac <main+0x894>
    4bc2:	e66d      	b.n	48a0 <main+0x588>
        return SendChar('\r') && SendChar('\n');
    4bc4:	210a      	movs	r1, #10
    4bc6:	4819      	ldr	r0, [pc, #100]	; (4c2c <main+0x914>)
    4bc8:	f001 f9d6 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bcc:	e625      	b.n	481a <main+0x502>
    4bce:	210a      	movs	r1, #10
    4bd0:	4816      	ldr	r0, [pc, #88]	; (4c2c <main+0x914>)
    4bd2:	f001 f9d1 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bd6:	e64f      	b.n	4878 <main+0x560>
    4bd8:	210a      	movs	r1, #10
    4bda:	4814      	ldr	r0, [pc, #80]	; (4c2c <main+0x914>)
    4bdc:	f001 f9cc 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4be0:	e56a      	b.n	46b8 <main+0x3a0>
    4be2:	210a      	movs	r1, #10
    4be4:	4811      	ldr	r0, [pc, #68]	; (4c2c <main+0x914>)
    4be6:	f001 f9c7 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bea:	e594      	b.n	4716 <main+0x3fe>
    4bec:	210a      	movs	r1, #10
    4bee:	480f      	ldr	r0, [pc, #60]	; (4c2c <main+0x914>)
    4bf0:	f001 f9c2 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bf4:	e40a      	b.n	440c <main+0xf4>
    4bf6:	210a      	movs	r1, #10
    4bf8:	480c      	ldr	r0, [pc, #48]	; (4c2c <main+0x914>)
    4bfa:	f001 f9bd 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4bfe:	e434      	b.n	446a <main+0x152>
    4c00:	210a      	movs	r1, #10
    4c02:	480a      	ldr	r0, [pc, #40]	; (4c2c <main+0x914>)
    4c04:	f001 f9b8 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c08:	e4f3      	b.n	45f2 <main+0x2da>
    4c0a:	210a      	movs	r1, #10
    4c0c:	4807      	ldr	r0, [pc, #28]	; (4c2c <main+0x914>)
    4c0e:	f001 f9b3 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c12:	e4be      	b.n	4592 <main+0x27a>
    4c14:	210a      	movs	r1, #10
    4c16:	4805      	ldr	r0, [pc, #20]	; (4c2c <main+0x914>)
    4c18:	f001 f9ae 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c1c:	e68f      	b.n	493e <main+0x626>
    4c1e:	210a      	movs	r1, #10
    4c20:	4802      	ldr	r0, [pc, #8]	; (4c2c <main+0x914>)
    4c22:	f001 f9a9 	bl	5f78 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4c26:	e6b9      	b.n	499c <main+0x684>
    4c28:	00022d13 	.word	0x00022d13
    4c2c:	20001490 	.word	0x20001490
    4c30:	00022cec 	.word	0x00022cec

00004c34 <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    4c34:	2000      	movs	r0, #0
    4c36:	4770      	bx	lr

00004c38 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4c38:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4c3c:	4770      	bx	lr
    4c3e:	bf00      	nop

00004c40 <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    4c40:	2006      	movs	r0, #6
    4c42:	4770      	bx	lr

00004c44 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    4c44:	2001      	movs	r0, #1
    4c46:	4770      	bx	lr

00004c48 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    4c48:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    4c4c:	4770      	bx	lr
    4c4e:	bf00      	nop

00004c50 <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4c50:	7980      	ldrb	r0, [r0, #6]
    4c52:	4770      	bx	lr

00004c54 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    4c54:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4c56:	7983      	ldrb	r3, [r0, #6]
    4c58:	428b      	cmp	r3, r1
    4c5a:	f000 80a7 	beq.w	4dac <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    4c5e:	f1a1 0309 	sub.w	r3, r1, #9
    4c62:	460d      	mov	r5, r1
    4c64:	4604      	mov	r4, r0
    4c66:	2b03      	cmp	r3, #3
    4c68:	f200 80a2 	bhi.w	4db0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    4c6c:	e8df f003 	tbb	[pc, r3]
    4c70:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    4c74:	3030      	adds	r0, #48	; 0x30
    4c76:	f006 fe87 	bl	b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4c7a:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    4c7c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    4c80:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    4c82:	2200      	movs	r2, #0
    4c84:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    4c88:	b13b      	cbz	r3, 4c9a <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    4c8a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    4c8e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    4c92:	680b      	ldr	r3, [r1, #0]
    4c94:	4013      	ands	r3, r2
    4c96:	d1fc      	bne.n	4c92 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    4c98:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    4c9a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4c9e:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4ca0:	2200      	movs	r2, #0
    4ca2:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4ca6:	b13b      	cbz	r3, 4cb8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    4ca8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4cac:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4cb0:	680b      	ldr	r3, [r1, #0]
    4cb2:	4013      	ands	r3, r2
    4cb4:	d1fc      	bne.n	4cb0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    4cb6:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4cb8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4cbc:	4a3d      	ldr	r2, [pc, #244]	; (4db4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4cbe:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4cc2:	7889      	ldrb	r1, [r1, #2]
    4cc4:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4cc8:	440b      	add	r3, r1
            m_mode = newMode;
    4cca:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4ccc:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4cd0:	f041 0101 	orr.w	r1, r1, #1
    4cd4:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4cd8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4cdc:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4ce0:	7889      	ldrb	r1, [r1, #2]
    4ce2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4ce6:	440b      	add	r3, r1
    4ce8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4cec:	f042 0201 	orr.w	r2, r2, #1
    4cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4cf4:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4cf6:	b662      	cpsie	i
    return true;
    4cf8:	2001      	movs	r0, #1
    4cfa:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4cfc:	3030      	adds	r0, #48	; 0x30
    4cfe:	f006 fe43 	bl	b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    4d02:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4d04:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4d08:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4d0a:	2200      	movs	r2, #0
    4d0c:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4d10:	b13b      	cbz	r3, 4d22 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    4d12:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4d16:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4d1a:	680b      	ldr	r3, [r1, #0]
    4d1c:	4013      	ands	r3, r2
    4d1e:	d1fc      	bne.n	4d1a <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    4d20:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4d22:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4d26:	4a23      	ldr	r2, [pc, #140]	; (4db4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4d28:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4d2c:	7889      	ldrb	r1, [r1, #2]
    4d2e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4d32:	440b      	add	r3, r1
    4d34:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4d38:	f36f 0100 	bfc	r1, #0, #1
    4d3c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4d40:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4d44:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4d48:	7889      	ldrb	r1, [r1, #2]
    4d4a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4d4e:	440b      	add	r3, r1
    4d50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4d54:	f042 0201 	orr.w	r2, r2, #1
    4d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4d5c:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4d5e:	b662      	cpsie	i
    return true;
    4d60:	2001      	movs	r0, #1
    4d62:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4d64:	3030      	adds	r0, #48	; 0x30
    4d66:	f006 fe0f 	bl	b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4d6a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4d6e:	4a11      	ldr	r2, [pc, #68]	; (4db4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4d70:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4d74:	7889      	ldrb	r1, [r1, #2]
    4d76:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4d7a:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4d7c:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4d7e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4d82:	f36f 0100 	bfc	r1, #0, #1
    4d86:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4d8a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4d8e:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4d92:	7889      	ldrb	r1, [r1, #2]
    4d94:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4d98:	440b      	add	r3, r1
    return true;
    4d9a:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4d9c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4da0:	f36f 0200 	bfc	r2, #0, #1
    4da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4da8:	71a5      	strb	r5, [r4, #6]
            break;
    4daa:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    4dac:	2001      	movs	r0, #1
    4dae:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    4db0:	2000      	movs	r0, #0
}
    4db2:	bd38      	pop	{r3, r4, r5, pc}
    4db4:	41008000 	.word	0x41008000

00004db8 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4db8:	7983      	ldrb	r3, [r0, #6]
    4dba:	2b0a      	cmp	r3, #10
    4dbc:	d00f      	beq.n	4dde <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4dbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4dc2:	b1a3      	cbz	r3, 4dee <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    4dc4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4dc8:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4dcc:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4dd0:	01db      	lsls	r3, r3, #7
    4dd2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4dd6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4dda:	615a      	str	r2, [r3, #20]
    4ddc:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    4dde:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4de2:	079b      	lsls	r3, r3, #30
    4de4:	d5eb      	bpl.n	4dbe <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    4de6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4dea:	2b00      	cmp	r3, #0
    4dec:	d0ea      	beq.n	4dc4 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4dee:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4df2:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4df6:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4dfa:	01db      	lsls	r3, r3, #7
    4dfc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4e00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4e04:	619a      	str	r2, [r3, #24]
    4e06:	4770      	bx	lr

00004e08 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    4e08:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    4e0c:	e7d4      	b.n	4db8 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    4e0e:	bf00      	nop

00004e10 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e14:	9f08      	ldr	r7, [sp, #32]
    4e16:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    4e1a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    4e1e:	4604      	mov	r4, r0
    4e20:	4616      	mov	r6, r2
    4e22:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    4e24:	463a      	mov	r2, r7
    4e26:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4e28:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    4e2a:	f009 fcdd 	bl	e7e8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4e2e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4e32:	f006 fd77 	bl	b924 <_ZN9ClearCore13StepGeneratorC1Ev>
    4e36:	4b5c      	ldr	r3, [pc, #368]	; (4fa8 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    4e38:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    4e3c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    4e40:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    4e44:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    4e48:	6322      	str	r2, [r4, #48]	; 0x30
    4e4a:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    4e4e:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    4e50:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    4e52:	f8df a160 	ldr.w	sl, [pc, #352]	; 4fb4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4e56:	4f55      	ldr	r7, [pc, #340]	; (4fac <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    4e58:	2101      	movs	r1, #1
    4e5a:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4e5e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    4e62:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    4e64:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    4e68:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    4e6c:	f04f 0e02 	mov.w	lr, #2
    4e70:	2200      	movs	r2, #0
    4e72:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4e76:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    4e7a:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    4e7e:	f04f 33ff 	mov.w	r3, #4294967295
    4e82:	f04f 0e19 	mov.w	lr, #25
    4e86:	f04f 0903 	mov.w	r9, #3
    4e8a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    4e8e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    4e92:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    4e96:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    4e9a:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    4e9e:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    4ea2:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    4ea6:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    4eaa:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    4eae:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    4eb2:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    4eb6:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    4eba:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    4ebe:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    4ec2:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    4ec6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    4eca:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    4ece:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    4ed2:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    4ed6:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    4eda:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    4ede:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    4ee2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    4ee6:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    4eea:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    4eee:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    4ef2:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    4ef6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    4efa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    4efe:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    4f02:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    4f06:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    4f0a:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    4f0e:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    4f12:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    4f16:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    4f1a:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    4f1c:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    4f20:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    4f24:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4f28:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4f2a:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    4f2c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    4f30:	2b04      	cmp	r3, #4
    4f32:	bf9c      	itt	ls
    4f34:	4a1e      	ldrls	r2, [pc, #120]	; (4fb0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4f36:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4f38:	fbb6 f1f2 	udiv	r1, r6, r2
    4f3c:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f40:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    4f44:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4f46:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f4a:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4f4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f52:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4f56:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4f58:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    4f5c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f60:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4f64:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4f66:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    4f68:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    4f6c:	2a04      	cmp	r2, #4
    4f6e:	bf9a      	itte	ls
    4f70:	4b0f      	ldrls	r3, [pc, #60]	; (4fb0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    4f72:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    4f74:	2200      	movhi	r2, #0
    4f76:	fbb0 f3f2 	udiv	r3, r0, r2
    4f7a:	fb02 0313 	mls	r3, r2, r3, r0
    4f7e:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f80:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4f84:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f88:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4f8c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f90:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4f94:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    4f96:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    4f9a:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    4f9e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    4fa2:	4620      	mov	r0, r4
    4fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fa8:	00022da0 	.word	0x00022da0
    4fac:	00022d84 	.word	0x00022d84
    4fb0:	00022d7c 	.word	0x00022d7c
    4fb4:	c61c3c00 	.word	0xc61c3c00

00004fb8 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    4fb8:	7983      	ldrb	r3, [r0, #6]
    4fba:	2b09      	cmp	r3, #9
    4fbc:	d003      	beq.n	4fc6 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    4fbe:	2b0b      	cmp	r3, #11
    4fc0:	d001      	beq.n	4fc6 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    4fc2:	2000      	movs	r0, #0
}
    4fc4:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4fc6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4fca:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4fce:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4fd2:	01db      	lsls	r3, r3, #7
    4fd4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4fd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4fdc:	b111      	cbz	r1, 4fe4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    4fde:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    4fe0:	615a      	str	r2, [r3, #20]
    4fe2:	4770      	bx	lr
    4fe4:	2001      	movs	r0, #1
    4fe6:	619a      	str	r2, [r3, #24]
    4fe8:	4770      	bx	lr
    4fea:	bf00      	nop

00004fec <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>:
bool MotorDriver::MotorInBDuty(uint8_t duty) {
    4fec:	b430      	push	{r4, r5}
    if (Connector::m_mode == Connector::CPM_MODE_A_DIRECT_B_PWM ||
    4fee:	7984      	ldrb	r4, [r0, #6]
    4ff0:	3c0b      	subs	r4, #11
    4ff2:	2c01      	cmp	r4, #1
    4ff4:	d902      	bls.n	4ffc <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x10>
    return false;
    4ff6:	2000      	movs	r0, #0
}
    4ff8:	bc30      	pop	{r4, r5}
    4ffa:	4770      	bx	lr
        m_bDutyCnt = (static_cast<uint32_t>(duty) * m_stepsPerSampleMax +
    4ffc:	6b82      	ldr	r2, [r0, #56]	; 0x38
                      (UINT8_MAX / 2)) / UINT8_MAX;
    4ffe:	4c0e      	ldr	r4, [pc, #56]	; (5038 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x4c>)
    if (*m_bTccBuffer == m_bDutyCnt) {
    5000:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
        m_bDutyCnt = (static_cast<uint32_t>(duty) * m_stepsPerSampleMax +
    5004:	fb02 f301 	mul.w	r3, r2, r1
    5008:	337f      	adds	r3, #127	; 0x7f
                      (UINT8_MAX / 2)) / UINT8_MAX;
    500a:	fba4 2303 	umull	r2, r3, r4, r3
    500e:	09db      	lsrs	r3, r3, #7
    if (*m_bTccBuffer == m_bDutyCnt) {
    5010:	6829      	ldr	r1, [r5, #0]
                      (UINT8_MAX / 2)) / UINT8_MAX;
    5012:	f8a0 3112 	strh.w	r3, [r0, #274]	; 0x112
    5016:	b29a      	uxth	r2, r3
    if (*m_bTccBuffer == m_bDutyCnt) {
    5018:	4291      	cmp	r1, r2
    501a:	d00a      	beq.n	5032 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x46>
    501c:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
    5020:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5024:	6823      	ldr	r3, [r4, #0]
    5026:	4219      	tst	r1, r3
    5028:	d1fc      	bne.n	5024 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x38>
    *m_bTccBuffer = m_bDutyCnt;
    502a:	602a      	str	r2, [r5, #0]
        return true;
    502c:	2001      	movs	r0, #1
}
    502e:	bc30      	pop	{r4, r5}
    5030:	4770      	bx	lr
        return true;
    5032:	2001      	movs	r0, #1
    5034:	e7e0      	b.n	4ff8 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0xc>
    5036:	bf00      	nop
    5038:	80808081 	.word	0x80808081

0000503c <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    503c:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    503e:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    5042:	b083      	sub	sp, #12
    5044:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5046:	2b00      	cmp	r3, #0
    5048:	d171      	bne.n	512e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    504a:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    504e:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    5052:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    5056:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    505a:	428a      	cmp	r2, r1
    505c:	d031      	beq.n	50c2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    505e:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    5062:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5066:	2200      	movs	r2, #0
    5068:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    506c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    5070:	b358      	cbz	r0, 50ca <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    5072:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5074:	b672      	cpsid	i
    if (wasDisabled && value) {
    5076:	b36b      	cbz	r3, 50d4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    5078:	b371      	cbz	r1, 50d8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    507a:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    507e:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5080:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5084:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5088:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    508a:	79a3      	ldrb	r3, [r4, #6]
    508c:	2b0a      	cmp	r3, #10
    508e:	d02a      	beq.n	50e6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5090:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5094:	428b      	cmp	r3, r1
    5096:	d035      	beq.n	5104 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    5098:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        \param[in] bitsToChange LED bit in the shift register to be set
        or cleared.
    **/
    void ShifterState(bool setFlds, Masks bitsToChange) {
        setFlds ? ShifterStateSet(bitsToChange)
        : ShifterStateClear(bitsToChange);
    509c:	2900      	cmp	r1, #0
    509e:	d13b      	bne.n	5118 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    50a0:	f3bf 8f5b 	dmb	ish
    50a4:	4a2d      	ldr	r2, [pc, #180]	; (515c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    50a6:	43db      	mvns	r3, r3
    50a8:	e852 0f00 	ldrex	r0, [r2]
    50ac:	4018      	ands	r0, r3
    50ae:	e842 0500 	strex	r5, r0, [r2]
    50b2:	2d00      	cmp	r5, #0
    50b4:	d1f8      	bne.n	50a8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    50b6:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    50ba:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    50be:	b003      	add	sp, #12
    50c0:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    50c2:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    50c6:	2a00      	cmp	r2, #0
    50c8:	d133      	bne.n	5132 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    50ca:	2900      	cmp	r1, #0
    50cc:	d0d1      	beq.n	5072 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    50ce:	b672      	cpsid	i
    if (wasDisabled && value) {
    50d0:	2b00      	cmp	r3, #0
    50d2:	d1d1      	bne.n	5078 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    50d4:	2900      	cmp	r1, #0
    50d6:	d1d7      	bne.n	5088 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    50d8:	2300      	movs	r3, #0
    50da:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    50de:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    50e0:	79a3      	ldrb	r3, [r4, #6]
    50e2:	2b0a      	cmp	r3, #10
    50e4:	d1d4      	bne.n	5090 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    50e6:	b919      	cbnz	r1, 50f0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    50e8:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    50ec:	079a      	lsls	r2, r3, #30
    50ee:	d428      	bmi.n	5142 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    50f0:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    50f4:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    50f6:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    50fa:	bf48      	it	mi
    50fc:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5100:	428b      	cmp	r3, r1
    5102:	d1c9      	bne.n	5098 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    5104:	2d00      	cmp	r5, #0
    5106:	d0d8      	beq.n	50ba <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    5108:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    510c:	2b00      	cmp	r3, #0
    510e:	d1d4      	bne.n	50ba <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    5110:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5114:	2900      	cmp	r1, #0
    5116:	d0c3      	beq.n	50a0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5118:	f3bf 8f5b 	dmb	ish
    511c:	4a0f      	ldr	r2, [pc, #60]	; (515c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    511e:	e852 0f00 	ldrex	r0, [r2]
    5122:	4318      	orrs	r0, r3
    5124:	e842 0500 	strex	r5, r0, [r2]
    5128:	2d00      	cmp	r5, #0
    512a:	d0c4      	beq.n	50b6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    512c:	e7f7      	b.n	511e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    512e:	2300      	movs	r3, #0
    5130:	e78f      	b.n	5052 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    5132:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    5134:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5138:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    513c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    5140:	e797      	b.n	5072 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5142:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5146:	9101      	str	r1, [sp, #4]
    5148:	f043 0310 	orr.w	r3, r3, #16
    514c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5150:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5154:	f006 fc18 	bl	b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5158:	9901      	ldr	r1, [sp, #4]
    515a:	e7c9      	b.n	50f0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    515c:	20001ad4 	.word	0x20001ad4

00005160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    5160:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5164:	2b00      	cmp	r3, #0
    5166:	d04a      	beq.n	51fe <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5168:	4a35      	ldr	r2, [pc, #212]	; (5240 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    516a:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    516e:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    5170:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5172:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    5174:	b98b      	cbnz	r3, 519a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    5176:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    517a:	2b01      	cmp	r3, #1
    517c:	d022      	beq.n	51c4 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    517e:	2b02      	cmp	r3, #2
    5180:	d13b      	bne.n	51fa <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    5182:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    5186:	2b00      	cmp	r3, #0
    5188:	d145      	bne.n	5216 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    518a:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    518e:	2b00      	cmp	r3, #0
    5190:	d13c      	bne.n	520c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5192:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5196:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    519a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    519e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    51a2:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    51a4:	428b      	cmp	r3, r1
    51a6:	d32b      	bcc.n	5200 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    51a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    51ac:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    51b0:	3b01      	subs	r3, #1
    51b2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    51b6:	b94b      	cbnz	r3, 51cc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    51b8:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    51bc:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    51c0:	2b01      	cmp	r3, #1
    51c2:	d1dc      	bne.n	517e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    51c4:	2302      	movs	r3, #2
    51c6:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    51ca:	e7da      	b.n	5182 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    51cc:	4b1d      	ldr	r3, [pc, #116]	; (5244 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    51ce:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    51d2:	f3bf 8f5b 	dmb	ish
    51d6:	e853 1f00 	ldrex	r1, [r3]
    51da:	4051      	eors	r1, r2
    51dc:	e843 1e00 	strex	lr, r1, [r3]
    51e0:	f1be 0f00 	cmp.w	lr, #0
    51e4:	d1f7      	bne.n	51d6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    51e6:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    51ea:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    51ee:	2b01      	cmp	r3, #1
    51f0:	d1c5      	bne.n	517e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    51f2:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    51f6:	2b00      	cmp	r3, #0
    51f8:	d0e4      	beq.n	51c4 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    51fa:	f85d fb04 	ldr.w	pc, [sp], #4
    51fe:	4770      	bx	lr
    switch (m_clearFaultState) {
    5200:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5204:	2b02      	cmp	r3, #2
    5206:	d0bc      	beq.n	5182 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    5208:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    520c:	3b01      	subs	r3, #1
    520e:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    5212:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    5216:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    5218:	f500 7394 	add.w	r3, r0, #296	; 0x128
    521c:	f3bf 8f5b 	dmb	ish
    5220:	e853 1f00 	ldrex	r1, [r3]
    5224:	f021 0120 	bic.w	r1, r1, #32
    5228:	e843 1e00 	strex	lr, r1, [r3]
    522c:	f1be 0f00 	cmp.w	lr, #0
    5230:	d1f6      	bne.n	5220 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    5232:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5236:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    523a:	f85d fb04 	ldr.w	pc, [sp], #4
    523e:	bf00      	nop
    5240:	20001bf4 	.word	0x20001bf4
    5244:	20001ad4 	.word	0x20001ad4

00005248 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5248:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    524c:	b570      	push	{r4, r5, r6, lr}
    524e:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    5250:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5254:	2b00      	cmp	r3, #0
    5256:	d163      	bne.n	5320 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    5258:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    525c:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    5260:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5264:	bb39      	cbnz	r1, 52b6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    5266:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    526a:	b672      	cpsid	i
    if (wasDisabled && value) {
    526c:	b35b      	cbz	r3, 52c6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    526e:	b365      	cbz	r5, 52ca <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    5270:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5274:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5276:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    527a:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    527e:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5280:	79a3      	ldrb	r3, [r4, #6]
    5282:	2b0a      	cmp	r3, #10
    5284:	d028      	beq.n	52d8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5286:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    528a:	42ab      	cmp	r3, r5
    528c:	d033      	beq.n	52f6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    528e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5292:	2d00      	cmp	r5, #0
    5294:	d139      	bne.n	530a <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5296:	f3bf 8f5b 	dmb	ish
    529a:	4a28      	ldr	r2, [pc, #160]	; (533c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    529c:	43db      	mvns	r3, r3
    529e:	e852 1f00 	ldrex	r1, [r2]
    52a2:	4019      	ands	r1, r3
    52a4:	e842 1000 	strex	r0, r1, [r2]
    52a8:	2800      	cmp	r0, #0
    52aa:	d1f8      	bne.n	529e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    52ac:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    52b0:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    52b4:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    52b6:	2500      	movs	r5, #0
    52b8:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    52bc:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    52c0:	b672      	cpsid	i
    if (wasDisabled && value) {
    52c2:	2b00      	cmp	r3, #0
    52c4:	d1d3      	bne.n	526e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    52c6:	2d00      	cmp	r5, #0
    52c8:	d1d9      	bne.n	527e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    52ca:	2300      	movs	r3, #0
    52cc:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    52d0:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    52d2:	79a3      	ldrb	r3, [r4, #6]
    52d4:	2b0a      	cmp	r3, #10
    52d6:	d1d6      	bne.n	5286 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    52d8:	b91d      	cbnz	r5, 52e2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    52da:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    52de:	079a      	lsls	r2, r3, #30
    52e0:	d420      	bmi.n	5324 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    52e2:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    52e6:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    52e8:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    52ec:	bf48      	it	mi
    52ee:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    52f2:	42ab      	cmp	r3, r5
    52f4:	d1cb      	bne.n	528e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    52f6:	2e00      	cmp	r6, #0
    52f8:	d0da      	beq.n	52b0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    52fa:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    52fe:	2b00      	cmp	r3, #0
    5300:	d1d6      	bne.n	52b0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    5302:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5306:	2d00      	cmp	r5, #0
    5308:	d0c5      	beq.n	5296 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    530a:	f3bf 8f5b 	dmb	ish
    530e:	4a0b      	ldr	r2, [pc, #44]	; (533c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5310:	e852 1f00 	ldrex	r1, [r2]
    5314:	4319      	orrs	r1, r3
    5316:	e842 1000 	strex	r0, r1, [r2]
    531a:	2800      	cmp	r0, #0
    531c:	d0c6      	beq.n	52ac <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    531e:	e7f7      	b.n	5310 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5320:	2300      	movs	r3, #0
    5322:	e79d      	b.n	5260 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5324:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5328:	f043 0310 	orr.w	r3, r3, #16
    532c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5330:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5334:	f006 fb28 	bl	b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5338:	e7d3      	b.n	52e2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    533a:	bf00      	nop
    533c:	20001ad4 	.word	0x20001ad4

00005340 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    5340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    5342:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5346:	b903      	cbnz	r3, 534a <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    5348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    534a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    534c:	f009 f99c 	bl	e688 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5350:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5352:	4a98      	ldr	r2, [pc, #608]	; (55b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    5354:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5358:	2b0a      	cmp	r3, #10
    535a:	bf08      	it	eq
    535c:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5360:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5364:	bf08      	it	eq
    5366:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    536a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    536e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5370:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5374:	bf18      	it	ne
    5376:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5378:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    537a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    537c:	f240 80df 	bls.w	553e <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5380:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5384:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5386:	4a8c      	ldr	r2, [pc, #560]	; (55b8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5388:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    538c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5390:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5394:	1c48      	adds	r0, r1, #1
    5396:	d012      	beq.n	53be <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5398:	4888      	ldr	r0, [pc, #544]	; (55bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    539a:	f003 fdfb 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    539e:	6803      	ldr	r3, [r0, #0]
    53a0:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    53a2:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    53a4:	4798      	blx	r3
    53a6:	2809      	cmp	r0, #9
    53a8:	f000 8248 	beq.w	583c <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    53ac:	4628      	mov	r0, r5
    53ae:	f009 f8f1 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>
    53b2:	1c01      	adds	r1, r0, #0
    53b4:	bf18      	it	ne
    53b6:	2101      	movne	r1, #1
    53b8:	4620      	mov	r0, r4
    53ba:	f7ff fe3f 	bl	503c <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    53be:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    53c2:	1c4a      	adds	r2, r1, #1
    53c4:	d016      	beq.n	53f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    53c6:	79a3      	ldrb	r3, [r4, #6]
    53c8:	2b0a      	cmp	r3, #10
    53ca:	d039      	beq.n	5440 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    53cc:	487b      	ldr	r0, [pc, #492]	; (55bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    53ce:	f003 fde1 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    53d2:	6803      	ldr	r3, [r0, #0]
    53d4:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    53d6:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    53d8:	4798      	blx	r3
    53da:	2809      	cmp	r0, #9
    53dc:	f000 80d0 	beq.w	5580 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    53e0:	4628      	mov	r0, r5
    53e2:	f009 f8d7 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    53e6:	79a3      	ldrb	r3, [r4, #6]
    53e8:	2b09      	cmp	r3, #9
    53ea:	f000 80d3 	beq.w	5594 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    53ee:	2b0b      	cmp	r3, #11
    53f0:	f000 80d0 	beq.w	5594 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    53f4:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    53f8:	1c4b      	adds	r3, r1, #1
    53fa:	d021      	beq.n	5440 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    53fc:	79a3      	ldrb	r3, [r4, #6]
    53fe:	2b0a      	cmp	r3, #10
    5400:	d01e      	beq.n	5440 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5402:	486e      	ldr	r0, [pc, #440]	; (55bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5404:	f003 fdc6 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5408:	6803      	ldr	r3, [r0, #0]
    540a:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    540c:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    540e:	4798      	blx	r3
    5410:	2809      	cmp	r0, #9
    5412:	f000 8239 	beq.w	5888 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    5416:	4628      	mov	r0, r5
    5418:	f009 f8bc 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    541c:	79a3      	ldrb	r3, [r4, #6]
    541e:	2b09      	cmp	r3, #9
    5420:	d10e      	bne.n	5440 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5422:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5426:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    542a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    542e:	01db      	lsls	r3, r3, #7
    5430:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5434:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5438:	2800      	cmp	r0, #0
    543a:	f000 81d4 	beq.w	57e6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    543e:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    5440:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    5444:	1c4f      	adds	r7, r1, #1
    5446:	d010      	beq.n	546a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5448:	485c      	ldr	r0, [pc, #368]	; (55bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    544a:	f003 fda3 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    544e:	6803      	ldr	r3, [r0, #0]
    5450:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5452:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5454:	4798      	blx	r3
    5456:	2809      	cmp	r0, #9
    5458:	f000 817d 	beq.w	5756 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    545c:	682b      	ldr	r3, [r5, #0]
    545e:	4628      	mov	r0, r5
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5464:	2804      	cmp	r0, #4
    5466:	f000 8176 	beq.w	5756 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    546a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    546e:	1c4e      	adds	r6, r1, #1
    5470:	d015      	beq.n	549e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5472:	4852      	ldr	r0, [pc, #328]	; (55bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5474:	f003 fd8e 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5478:	6803      	ldr	r3, [r0, #0]
    547a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    547c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    547e:	4798      	blx	r3
    5480:	2809      	cmp	r0, #9
    5482:	f000 81e6 	beq.w	5852 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5486:	4628      	mov	r0, r5
    5488:	f009 f884 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    548c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5490:	fab0 f080 	clz	r0, r0
    5494:	0940      	lsrs	r0, r0, #5
    5496:	f360 03c3 	bfi	r3, r0, #3, #1
    549a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    549e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    54a2:	1c4d      	adds	r5, r1, #1
    54a4:	d015      	beq.n	54d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    54a6:	4845      	ldr	r0, [pc, #276]	; (55bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    54a8:	f003 fd74 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    54ac:	6803      	ldr	r3, [r0, #0]
    54ae:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    54b0:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    54b2:	4798      	blx	r3
    54b4:	2809      	cmp	r0, #9
    54b6:	f000 81d1 	beq.w	585c <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    54ba:	4628      	mov	r0, r5
    54bc:	f009 f86a 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    54c0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    54c4:	fab0 f080 	clz	r0, r0
    54c8:	0940      	lsrs	r0, r0, #5
    54ca:	f360 1304 	bfi	r3, r0, #4, #1
    54ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    54d2:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    54d6:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    54da:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    54de:	1c48      	adds	r0, r1, #1
    54e0:	f000 8132 	beq.w	5748 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    54e4:	4835      	ldr	r0, [pc, #212]	; (55bc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    54e6:	f003 fd55 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    54ea:	6803      	ldr	r3, [r0, #0]
    54ec:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    54ee:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    54f0:	4798      	blx	r3
    54f2:	2809      	cmp	r0, #9
    54f4:	f000 81c0 	beq.w	5878 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    54f8:	4638      	mov	r0, r7
    54fa:	f009 f84b 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>
    54fe:	fab0 f780 	clz	r7, r0
    5502:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    5504:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5508:	2b00      	cmp	r3, #0
    550a:	f040 8131 	bne.w	5770 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    550e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    5512:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    5516:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    551a:	2900      	cmp	r1, #0
    551c:	d152      	bne.n	55c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    551e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    5522:	0792      	lsls	r2, r2, #30
    5524:	d54e      	bpl.n	55c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    5526:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    552a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    552e:	2800      	cmp	r0, #0
    5530:	f000 8152 	beq.w	57d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    5534:	06d7      	lsls	r7, r2, #27
    5536:	d549      	bpl.n	55cc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    5538:	f046 0604 	orr.w	r6, r6, #4
    553c:	e046      	b.n	55cc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    553e:	07aa      	lsls	r2, r5, #30
    5540:	f000 8161 	beq.w	5806 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    5544:	2333      	movs	r3, #51	; 0x33
    5546:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5548:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    554c:	2201      	movs	r2, #1
    554e:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5552:	b29a      	uxth	r2, r3
    5554:	3200      	adds	r2, #0
    5556:	bf18      	it	ne
    5558:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    555a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    555e:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5562:	06eb      	lsls	r3, r5, #27
    5564:	f100 8158 	bmi.w	5818 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5568:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    556c:	2b00      	cmp	r3, #0
    556e:	f040 810f 	bne.w	5790 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5572:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5576:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    557a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    557e:	e707      	b.n	5390 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5580:	4b0f      	ldr	r3, [pc, #60]	; (55c0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5582:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5586:	6818      	ldr	r0, [r3, #0]
    5588:	f00a f85a 	bl	f640 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    558c:	79a3      	ldrb	r3, [r4, #6]
    558e:	2b09      	cmp	r3, #9
    5590:	f47f af2d 	bne.w	53ee <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5594:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5598:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    559c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    55a0:	01db      	lsls	r3, r3, #7
    55a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    55a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    55aa:	2800      	cmp	r0, #0
    55ac:	f000 8119 	beq.w	57e2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    55b0:	615a      	str	r2, [r3, #20]
    55b2:	e71f      	b.n	53f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    55b4:	00022de8 	.word	0x00022de8
    55b8:	c61c3c00 	.word	0xc61c3c00
    55bc:	200019dc 	.word	0x200019dc
    55c0:	20001f0c 	.word	0x20001f0c
    55c4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    55c8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    55cc:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    55d0:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    55d4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    55d8:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    55dc:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    55e0:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    55e4:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    55e8:	2b00      	cmp	r3, #0
    55ea:	f000 80ab 	beq.w	5744 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    55ee:	1f98      	subs	r0, r3, #6
    55f0:	bf18      	it	ne
    55f2:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    55f4:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    55f8:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    55fc:	2a00      	cmp	r2, #0
    55fe:	f000 809b 	beq.w	5738 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    5602:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5606:	b111      	cbz	r1, 560e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5608:	07af      	lsls	r7, r5, #30
    560a:	f140 80df 	bpl.w	57cc <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    560e:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5612:	2b03      	cmp	r3, #3
    5614:	d071      	beq.n	56fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    5616:	f015 0302 	ands.w	r3, r5, #2
    561a:	f040 80ce 	bne.w	57ba <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    561e:	2900      	cmp	r1, #0
    5620:	d06b      	beq.n	56fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5622:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    5626:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    562a:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    562e:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    5632:	2b00      	cmp	r3, #0
    5634:	d065      	beq.n	5702 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    5636:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    563a:	2b00      	cmp	r3, #0
    563c:	f340 8113 	ble.w	5866 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    5640:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5644:	2201      	movs	r2, #1
            m_enableCounter--;
    5646:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5648:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    564c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5650:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    5654:	b11b      	cbz	r3, 565e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    5656:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    5658:	bf48      	it	mi
    565a:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    565e:	1c32      	adds	r2, r6, #0
    5660:	bf18      	it	ne
    5662:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5664:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5668:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    566c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5670:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5674:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5678:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    567c:	f3bf 8f5b 	dmb	ish
    5680:	e852 1f00 	ldrex	r1, [r2]
    5684:	4319      	orrs	r1, r3
    5686:	e842 1000 	strex	r0, r1, [r2]
    568a:	2800      	cmp	r0, #0
    568c:	d1f8      	bne.n	5680 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    568e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5692:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5696:	f3bf 8f5b 	dmb	ish
    569a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    569e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    56a2:	e853 2f00 	ldrex	r2, [r3]
    56a6:	432a      	orrs	r2, r5
    56a8:	e843 2100 	strex	r1, r2, [r3]
    56ac:	2900      	cmp	r1, #0
    56ae:	d1f8      	bne.n	56a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    56b0:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    56b4:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    56b6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    56ba:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    56be:	2b0a      	cmp	r3, #10
    56c0:	f47f ae42 	bne.w	5348 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    56c4:	f104 0530 	add.w	r5, r4, #48	; 0x30
    56c8:	4628      	mov	r0, r5
    56ca:	f005 feb5 	bl	b438 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    56ce:	4628      	mov	r0, r5
    56d0:	f006 f9d6 	bl	ba80 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    56d4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    56d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    56da:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    56dc:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    56e0:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    56e2:	4282      	cmp	r2, r0
    56e4:	f43f ae30 	beq.w	5348 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    56e8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    56ec:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    56f0:	680b      	ldr	r3, [r1, #0]
    56f2:	4213      	tst	r3, r2
    56f4:	d1fc      	bne.n	56f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    56f6:	6028      	str	r0, [r5, #0]
    56f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    56fa:	1c03      	adds	r3, r0, #0
    56fc:	bf18      	it	ne
    56fe:	2301      	movne	r3, #1
    5700:	e78f      	b.n	5622 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    5702:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    5706:	2a00      	cmp	r2, #0
    5708:	d03a      	beq.n	5780 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    570a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    570e:	b933      	cbnz	r3, 571e <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    5710:	b938      	cbnz	r0, 5722 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    5712:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    5716:	2204      	movs	r2, #4
    5718:	f362 258c 	bfi	r5, r2, #10, #3
    571c:	e79a      	b.n	5654 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    571e:	2800      	cmp	r0, #0
    5720:	d063      	beq.n	57ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    5722:	f015 0302 	ands.w	r3, r5, #2
    5726:	d1f6      	bne.n	5716 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    5728:	2203      	movs	r2, #3
    572a:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    572e:	f363 1504 	bfi	r5, r3, #4, #1
    5732:	f005 0302 	and.w	r3, r5, #2
    5736:	e78d      	b.n	5654 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5738:	f362 0500 	bfi	r5, r2, #0, #1
    573c:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5740:	4613      	mov	r3, r2
    5742:	e76e      	b.n	5622 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5744:	4618      	mov	r0, r3
    5746:	e755      	b.n	55f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    5748:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    574c:	bb93      	cbnz	r3, 57b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    574e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    5752:	461f      	mov	r7, r3
    5754:	e6dd      	b.n	5512 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    5756:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    575a:	b381      	cbz	r1, 57be <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    575c:	682b      	ldr	r3, [r5, #0]
    575e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    5762:	695b      	ldr	r3, [r3, #20]
    5764:	b109      	cbz	r1, 576a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5766:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    576a:	4628      	mov	r0, r5
    576c:	4798      	blx	r3
    576e:	e67c      	b.n	546a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5770:	b307      	cbz	r7, 57b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    5772:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    5776:	2900      	cmp	r1, #0
    5778:	f000 80ab 	beq.w	58d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    577c:	460f      	mov	r7, r1
    577e:	e6c8      	b.n	5512 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5780:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    5784:	07aa      	lsls	r2, r5, #30
    5786:	f57f af6a 	bpl.w	565e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    578a:	f046 0610 	orr.w	r6, r6, #16
    578e:	e762      	b.n	5656 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5790:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    5794:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5798:	4073      	eors	r3, r6
    579a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    579c:	4291      	cmp	r1, r2
    579e:	f000 80a4 	beq.w	58ea <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    57a2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    57a6:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    57aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    57ae:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    57b2:	e5ed      	b.n	5390 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    57b4:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    57b8:	e6ab      	b.n	5512 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    57ba:	2300      	movs	r3, #0
    57bc:	e731      	b.n	5622 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    57be:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    57c2:	682b      	ldr	r3, [r5, #0]
    57c4:	2a01      	cmp	r2, #1
    57c6:	695b      	ldr	r3, [r3, #20]
    57c8:	d1cf      	bne.n	576a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    57ca:	e7cc      	b.n	5766 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    57cc:	2801      	cmp	r0, #1
    57ce:	f47f af1e 	bne.w	560e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    57d2:	f045 0501 	orr.w	r5, r5, #1
    57d6:	e71c      	b.n	5612 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    57d8:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    57da:	bf48      	it	mi
    57dc:	f046 0602 	orrmi.w	r6, r6, #2
    57e0:	e6f4      	b.n	55cc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    57e2:	619a      	str	r2, [r3, #24]
    57e4:	e606      	b.n	53f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    57e6:	619a      	str	r2, [r3, #24]
    57e8:	e62a      	b.n	5440 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    57ea:	2302      	movs	r3, #2
    57ec:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    57f0:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    57f4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    57f8:	f006 f8c6 	bl	b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    57fc:	f046 0620 	orr.w	r6, r6, #32
    5800:	f005 0302 	and.w	r3, r5, #2
    5804:	e726      	b.n	5654 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    5806:	f004 f9e5 	bl	9bd4 <Milliseconds>
    580a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    580e:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5810:	2803      	cmp	r0, #3
    5812:	f63f ae97 	bhi.w	5544 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    5816:	e6a4      	b.n	5562 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5818:	f004 f9dc 	bl	9bd4 <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    581c:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    5820:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    5824:	2b00      	cmp	r3, #0
    5826:	d03a      	beq.n	589e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    5828:	2330      	movs	r3, #48	; 0x30
    582a:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    582c:	2200      	movs	r2, #0
    582e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    5832:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    5836:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    583a:	e697      	b.n	556c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    583c:	4b54      	ldr	r3, [pc, #336]	; (5990 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    583e:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5842:	6818      	ldr	r0, [r3, #0]
    5844:	f009 fefc 	bl	f640 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    5848:	4601      	mov	r1, r0
    584a:	4620      	mov	r0, r4
    584c:	f7ff fbf6 	bl	503c <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    5850:	e5b5      	b.n	53be <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    5852:	682b      	ldr	r3, [r5, #0]
    5854:	4628      	mov	r0, r5
    5856:	691b      	ldr	r3, [r3, #16]
    5858:	4798      	blx	r3
    585a:	e617      	b.n	548c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    585c:	682b      	ldr	r3, [r5, #0]
    585e:	4628      	mov	r0, r5
    5860:	691b      	ldr	r3, [r3, #16]
    5862:	4798      	blx	r3
    5864:	e62c      	b.n	54c0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    5866:	2201      	movs	r2, #1
            m_isEnabling = false;
    5868:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    586a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    586e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    5872:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    5876:	e748      	b.n	570a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    5878:	683b      	ldr	r3, [r7, #0]
    587a:	4638      	mov	r0, r7
    587c:	691b      	ldr	r3, [r3, #16]
    587e:	4798      	blx	r3
    5880:	fab0 f780 	clz	r7, r0
    5884:	097f      	lsrs	r7, r7, #5
    5886:	e63d      	b.n	5504 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    5888:	4b41      	ldr	r3, [pc, #260]	; (5990 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    588a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    588e:	6818      	ldr	r0, [r3, #0]
    5890:	f009 fed6 	bl	f640 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5894:	79a3      	ldrb	r3, [r4, #6]
    5896:	2b09      	cmp	r3, #9
    5898:	f43f adc3 	beq.w	5422 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    589c:	e5d0      	b.n	5440 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    589e:	06ad      	lsls	r5, r5, #26
    58a0:	f57f ae62 	bpl.w	5568 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    58a4:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    58a8:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    58ac:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    58b0:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    58b4:	8bf8      	ldrh	r0, [r7, #30]
    58b6:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    58ba:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    58be:	8bbd      	ldrh	r5, [r7, #28]
    58c0:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    58c4:	b9d0      	cbnz	r0, 58fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    58c6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    58ca:	2201      	movs	r2, #1
    58cc:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    58d0:	e64c      	b.n	556c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    58d2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    58d6:	f006 f873 	bl	b9c0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    58da:	2301      	movs	r3, #1
    58dc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    58e0:	f046 0608 	orr.w	r6, r6, #8
    58e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    58e8:	e613      	b.n	5512 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    58ea:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    58ee:	2a00      	cmp	r2, #0
    58f0:	f43f ad49 	beq.w	5386 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    58f4:	3a01      	subs	r2, #1
    58f6:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    58fa:	e549      	b.n	5390 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    58fc:	ee07 1a90 	vmov	s15, r1
    5900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    5904:	ee07 2a90 	vmov	s15, r2
    5908:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    590c:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    5910:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5914:	ee16 0a90 	vmov	r0, s13
    5918:	f016 fa3c 	bl	1bd94 <__aeabi_f2d>
    591c:	a318      	add	r3, pc, #96	; (adr r3, 5980 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    591e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5922:	f016 f8d7 	bl	1bad4 <__aeabi_dsub>
    5926:	a318      	add	r3, pc, #96	; (adr r3, 5988 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    5928:	e9d3 2300 	ldrd	r2, r3, [r3]
    592c:	f016 fa86 	bl	1be3c <__aeabi_dmul>
    5930:	f016 fd66 	bl	1c400 <__aeabi_d2f>
    5934:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    5938:	b11e      	cbz	r6, 5942 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    593a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 5994 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    593e:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5942:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5946:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    594a:	2b02      	cmp	r3, #2
    594c:	d004      	beq.n	5958 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    594e:	2302      	movs	r3, #2
    5950:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    5954:	2300      	movs	r3, #0
    5956:	e7b8      	b.n	58ca <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    5958:	ee17 0a90 	vmov	r0, s15
    595c:	f016 fa1a 	bl	1bd94 <__aeabi_f2d>
    5960:	2200      	movs	r2, #0
    5962:	4b0d      	ldr	r3, [pc, #52]	; (5998 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    5964:	f016 f8b6 	bl	1bad4 <__aeabi_dsub>
    5968:	4602      	mov	r2, r0
    596a:	460b      	mov	r3, r1
    596c:	f016 f8b4 	bl	1bad8 <__adddf3>
    5970:	f016 fd46 	bl	1c400 <__aeabi_d2f>
    5974:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    5978:	e7e9      	b.n	594e <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    597a:	bf00      	nop
    597c:	f3af 8000 	nop.w
    5980:	9999999a 	.word	0x9999999a
    5984:	3fa99999 	.word	0x3fa99999
    5988:	71c71c72 	.word	0x71c71c72
    598c:	405bc71c 	.word	0x405bc71c
    5990:	20001f0c 	.word	0x20001f0c
    5994:	42c80000 	.word	0x42c80000
    5998:	40490000 	.word	0x40490000

0000599c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    599c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59a0:	4604      	mov	r4, r0
    59a2:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    59a4:	4690      	mov	r8, r2
    59a6:	2a00      	cmp	r2, #0
    59a8:	d154      	bne.n	5a54 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    59aa:	6c45      	ldr	r5, [r0, #68]	; 0x44
    59ac:	1b4d      	subs	r5, r1, r5
    59ae:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    59b0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    59b4:	2b00      	cmp	r3, #0
    59b6:	d04b      	beq.n	5a50 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    59b8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    59bc:	f043 0301 	orr.w	r3, r3, #1
    59c0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    59c4:	2600      	movs	r6, #0
    59c6:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    59ca:	b933      	cbnz	r3, 59da <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    59cc:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    59d0:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    59d4:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    59d6:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    59da:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    59de:	1c48      	adds	r0, r1, #1
    59e0:	d016      	beq.n	5a10 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    59e2:	4829      	ldr	r0, [pc, #164]	; (5a88 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    59e4:	f003 fad6 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    59e8:	6803      	ldr	r3, [r0, #0]
    59ea:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    59ec:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    59ee:	4798      	blx	r3
    59f0:	2809      	cmp	r0, #9
    59f2:	d040      	beq.n	5a76 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    59f4:	4648      	mov	r0, r9
    59f6:	f008 fdcd 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>
    59fa:	fab0 f080 	clz	r0, r0
    59fe:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5a00:	b130      	cbz	r0, 5a10 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5a02:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5a06:	f043 0308 	orr.w	r3, r3, #8
    5a0a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5a0e:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5a10:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5a14:	b16d      	cbz	r5, 5a32 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    5a16:	06d9      	lsls	r1, r3, #27
    5a18:	d426      	bmi.n	5a68 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    5a1a:	b196      	cbz	r6, 5a42 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    5a1c:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    5a1e:	4642      	mov	r2, r8
    5a20:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    5a22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    5a26:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5a2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    5a2e:	f005 bc7f 	b.w	b330 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5a32:	071a      	lsls	r2, r3, #28
    5a34:	d5f1      	bpl.n	5a1a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5a36:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5a3a:	f043 0302 	orr.w	r3, r3, #2
    5a3e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5a42:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5a46:	079b      	lsls	r3, r3, #30
    5a48:	d406      	bmi.n	5a58 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    5a4a:	2000      	movs	r0, #0
    5a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5a50:	2601      	movs	r6, #1
    5a52:	e7b8      	b.n	59c6 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    5a54:	0fcd      	lsrs	r5, r1, #31
    5a56:	e7ab      	b.n	59b0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    5a58:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5a5c:	2100      	movs	r1, #0
    5a5e:	f005 ffaf 	bl	b9c0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5a62:	2000      	movs	r0, #0
    5a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5a68:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5a6c:	f043 0304 	orr.w	r3, r3, #4
    5a70:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5a74:	e7e5      	b.n	5a42 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    5a76:	f8d9 3000 	ldr.w	r3, [r9]
    5a7a:	4648      	mov	r0, r9
    5a7c:	691b      	ldr	r3, [r3, #16]
    5a7e:	4798      	blx	r3
    5a80:	fab0 f080 	clz	r0, r0
    5a84:	0940      	lsrs	r0, r0, #5
    5a86:	e7bb      	b.n	5a00 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    5a88:	200019dc 	.word	0x200019dc

00005a8c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    5a8c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5a90:	f7ff bf84 	b.w	599c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00005a94 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    5a96:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5a9a:	4604      	mov	r4, r0
    5a9c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d04a      	beq.n	5b38 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5aa2:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    5aa6:	f043 0301 	orr.w	r3, r3, #1
    5aaa:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    5aae:	2500      	movs	r5, #0
    5ab0:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5ab4:	b933      	cbnz	r3, 5ac4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5ab6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5aba:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5abe:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5ac0:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5ac4:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5ac8:	1c48      	adds	r0, r1, #1
    5aca:	d016      	beq.n	5afa <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5acc:	4826      	ldr	r0, [pc, #152]	; (5b68 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    5ace:	f003 fa61 	bl	8f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5ad2:	6803      	ldr	r3, [r0, #0]
    5ad4:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5ad6:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5ad8:	4798      	blx	r3
    5ada:	2809      	cmp	r0, #9
    5adc:	d03c      	beq.n	5b58 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    5ade:	4638      	mov	r0, r7
    5ae0:	f008 fd58 	bl	e594 <_ZN9ClearCore9DigitalIn5StateEv>
    5ae4:	fab0 f080 	clz	r0, r0
    5ae8:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5aea:	b130      	cbz	r0, 5afa <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5aec:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5af0:	f043 0308 	orr.w	r3, r3, #8
    5af4:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5af8:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5afa:	2e00      	cmp	r6, #0
    5afc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5b00:	da0c      	bge.n	5b1c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    5b02:	06d9      	lsls	r1, r3, #27
    5b04:	d421      	bmi.n	5b4a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    5b06:	b18d      	cbz	r5, 5b2c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    5b08:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    5b0a:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    5b0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    5b10:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5b14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    5b18:	f005 bc44 	b.w	b3a4 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5b1c:	071a      	lsls	r2, r3, #28
    5b1e:	d5f2      	bpl.n	5b06 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5b20:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5b24:	f043 0302 	orr.w	r3, r3, #2
    5b28:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5b2c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5b30:	079b      	lsls	r3, r3, #30
    5b32:	d403      	bmi.n	5b3c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    5b34:	2000      	movs	r0, #0
    5b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    5b38:	2501      	movs	r5, #1
    5b3a:	e7b9      	b.n	5ab0 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    5b3c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5b40:	2100      	movs	r1, #0
    5b42:	f005 ff3d 	bl	b9c0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5b46:	2000      	movs	r0, #0
    5b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5b4a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5b4e:	f043 0304 	orr.w	r3, r3, #4
    5b52:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5b56:	e7e9      	b.n	5b2c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    5b58:	683b      	ldr	r3, [r7, #0]
    5b5a:	4638      	mov	r0, r7
    5b5c:	691b      	ldr	r3, [r3, #16]
    5b5e:	4798      	blx	r3
    5b60:	fab0 f080 	clz	r0, r0
    5b64:	0940      	lsrs	r0, r0, #5
    5b66:	e7c0      	b.n	5aea <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    5b68:	200019dc 	.word	0x200019dc

00005b6c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    5b6c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5b70:	f7ff bf90 	b.w	5a94 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00005b74 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5b76:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5b7a:	4dbc      	ldr	r5, [pc, #752]	; (5e6c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5b7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5b80:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5b84:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5b88:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5b8a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5b8c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5b90:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    5b94:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5b98:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5b9c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5b9e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    5ba0:	2100      	movs	r1, #0
    5ba2:	f7ff fa4b 	bl	503c <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    5ba6:	4631      	mov	r1, r6
    5ba8:	4620      	mov	r0, r4
    5baa:	f008 fd07 	bl	e5bc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    5bae:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5bb2:	f993 2001 	ldrsb.w	r2, [r3, #1]
    5bb6:	7898      	ldrb	r0, [r3, #2]
    5bb8:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    5bbc:	1813      	adds	r3, r2, r0
    5bbe:	2700      	movs	r7, #0
    5bc0:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5bc4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5bc8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5bcc:	788e      	ldrb	r6, [r1, #2]
    5bce:	01db      	lsls	r3, r3, #7
    5bd0:	18e9      	adds	r1, r5, r3
    5bd2:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5bd4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5bd8:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    5bdc:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    5be0:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    5be2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    5be6:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5be8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    5bec:	f010 0f01 	tst.w	r0, #1
    5bf0:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    5bf4:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5bf8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5bfc:	bf14      	ite	ne
    5bfe:	f360 1107 	bfine	r1, r0, #4, #4
    5c02:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5c06:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5c0a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5c0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    5c12:	07f0      	lsls	r0, r6, #31
    5c14:	f04f 0105 	mov.w	r1, #5
    5c18:	bf4c      	ite	mi
    5c1a:	f361 1207 	bfimi	r2, r1, #4, #4
    5c1e:	f361 0203 	bfipl	r2, r1, #0, #4
    5c22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5c26:	6823      	ldr	r3, [r4, #0]
    5c28:	4a91      	ldr	r2, [pc, #580]	; (5e70 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    5c2a:	685b      	ldr	r3, [r3, #4]
    5c2c:	4293      	cmp	r3, r2
    5c2e:	f040 8119 	bne.w	5e64 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    5c32:	79a3      	ldrb	r3, [r4, #6]
    5c34:	2b09      	cmp	r3, #9
    5c36:	d022      	beq.n	5c7e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    5c38:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5c3c:	f005 fea4 	bl	b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5c40:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5c44:	4b89      	ldr	r3, [pc, #548]	; (5e6c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5c46:	f991 2001 	ldrsb.w	r2, [r1, #1]
    5c4a:	7889      	ldrb	r1, [r1, #2]
    5c4c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5c50:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5c52:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5c54:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    5c58:	f36f 0100 	bfc	r1, #0, #1
    5c5c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5c60:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    5c64:	f992 1001 	ldrsb.w	r1, [r2, #1]
    5c68:	7892      	ldrb	r2, [r2, #2]
    5c6a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    5c6e:	4413      	add	r3, r2
    5c70:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5c74:	f36f 0200 	bfc	r2, #0, #1
    5c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5c7c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5c7e:	68e3      	ldr	r3, [r4, #12]
    5c80:	6922      	ldr	r2, [r4, #16]
    5c82:	01db      	lsls	r3, r3, #7
    5c84:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    5c88:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    5c8c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5c90:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5c94:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    5c98:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5c9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5ca0:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5ca2:	bf14      	ite	ne
    5ca4:	f36f 1007 	bfcne	r0, #4, #4
    5ca8:	f365 0003 	bfieq	r0, r5, #0, #4
    5cac:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5cb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5cb4:	496f      	ldr	r1, [pc, #444]	; (5e74 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5cb6:	f042 0201 	orr.w	r2, r2, #1
    5cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5cbe:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    5cc2:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    5cc6:	681a      	ldr	r2, [r3, #0]
    5cc8:	f36f 0241 	bfc	r2, #1, #1
    5ccc:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5cce:	691a      	ldr	r2, [r3, #16]
    5cd0:	0792      	lsls	r2, r2, #30
    5cd2:	d4fc      	bmi.n	5cce <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    5cd4:	681a      	ldr	r2, [r3, #0]
    5cd6:	f042 0201 	orr.w	r2, r2, #1
    5cda:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    5cdc:	691a      	ldr	r2, [r3, #16]
    5cde:	f012 0201 	ands.w	r2, r2, #1
    5ce2:	d1fb      	bne.n	5cdc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5ce4:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    5ce6:	4964      	ldr	r1, [pc, #400]	; (5e78 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5ce8:	f362 1505 	bfi	r5, r2, #4, #2
    5cec:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    5cee:	681d      	ldr	r5, [r3, #0]
    5cf0:	f362 5514 	bfi	r5, r2, #20, #1
    5cf4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    5cf6:	681d      	ldr	r5, [r3, #0]
    5cf8:	f362 5555 	bfi	r5, r2, #21, #1
    5cfc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    5cfe:	681d      	ldr	r5, [r3, #0]
    5d00:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    5d04:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    5d06:	681d      	ldr	r5, [r3, #0]
    5d08:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    5d0c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    5d0e:	681d      	ldr	r5, [r3, #0]
    5d10:	f362 25cb 	bfi	r5, r2, #11, #1
    5d14:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    5d16:	681d      	ldr	r5, [r3, #0]
    5d18:	f362 250a 	bfi	r5, r2, #8, #3
    5d1c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    5d1e:	681d      	ldr	r5, [r3, #0]
    5d20:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    5d24:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    5d26:	681d      	ldr	r5, [r3, #0]
    5d28:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    5d2c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    5d2e:	681d      	ldr	r5, [r3, #0]
    5d30:	f362 0583 	bfi	r5, r2, #2, #2
    5d34:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    5d36:	88dd      	ldrh	r5, [r3, #6]
    5d38:	2605      	movs	r6, #5
    5d3a:	f366 0502 	bfi	r5, r6, #0, #3
    5d3e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    5d40:	88dd      	ldrh	r5, [r3, #6]
    5d42:	f045 0520 	orr.w	r5, r5, #32
    5d46:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    5d48:	88dd      	ldrh	r5, [r3, #6]
    5d4a:	f362 350c 	bfi	r5, r2, #12, #1
    5d4e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    5d50:	88dd      	ldrh	r5, [r3, #6]
    5d52:	f362 354d 	bfi	r5, r2, #13, #1
    5d56:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    5d58:	88dd      	ldrh	r5, [r3, #6]
    5d5a:	f362 2508 	bfi	r5, r2, #8, #1
    5d5e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    5d60:	88dd      	ldrh	r5, [r3, #6]
    5d62:	f045 0510 	orr.w	r5, r5, #16
    5d66:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    5d68:	780d      	ldrb	r5, [r1, #0]
    5d6a:	f362 0541 	bfi	r5, r2, #1, #1
    5d6e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    5d70:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    5d74:	688e      	ldr	r6, [r1, #8]
    5d76:	78d5      	ldrb	r5, [r2, #3]
    5d78:	2201      	movs	r2, #1
    5d7a:	40aa      	lsls	r2, r5
    5d7c:	4316      	orrs	r6, r2
    5d7e:	608e      	str	r6, [r1, #8]
    5d80:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    5d82:	698e      	ldr	r6, [r1, #24]
    5d84:	00bf      	lsls	r7, r7, #2
    5d86:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    5d8a:	4316      	orrs	r6, r2
    5d8c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    5d90:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    5d92:	f005 0607 	and.w	r6, r5, #7
    5d96:	f8de c01c 	ldr.w	ip, [lr, #28]
    5d9a:	00b7      	lsls	r7, r6, #2
    5d9c:	2604      	movs	r6, #4
    5d9e:	40be      	lsls	r6, r7
    5da0:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    5da4:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    5da8:	68ce      	ldr	r6, [r1, #12]
    5daa:	b292      	uxth	r2, r2
    5dac:	f362 060f 	bfi	r6, r2, #0, #16
    5db0:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    5db2:	780a      	ldrb	r2, [r1, #0]
    5db4:	f042 0202 	orr.w	r2, r2, #2
    5db8:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    5dba:	684a      	ldr	r2, [r1, #4]
    5dbc:	f012 0202 	ands.w	r2, r2, #2
    5dc0:	d1fb      	bne.n	5dba <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    5dc2:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    5dc6:	492d      	ldr	r1, [pc, #180]	; (5e7c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5dc8:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    5dcc:	463e      	mov	r6, r7
    5dce:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    5dd2:	f362 1c86 	bfi	ip, r2, #6, #1
    5dd6:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    5dda:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5dde:	0657      	lsls	r7, r2, #25
    5de0:	d4fb      	bmi.n	5dda <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    5de2:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5de6:	4f25      	ldr	r7, [pc, #148]	; (5e7c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5de8:	f04f 0c06 	mov.w	ip, #6
    5dec:	f36c 0203 	bfi	r2, ip, #0, #4
    5df0:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5df4:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5dfc:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5e00:	687a      	ldr	r2, [r7, #4]
    5e02:	f012 0f18 	tst.w	r2, #24
    5e06:	d1fb      	bne.n	5e00 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5e08:	4a1d      	ldr	r2, [pc, #116]	; (5e80 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5e0a:	4e1e      	ldr	r6, [pc, #120]	; (5e84 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5e0c:	3074      	adds	r0, #116	; 0x74
    5e0e:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5e12:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5e16:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5e1a:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    5e1e:	7991      	ldrb	r1, [r2, #6]
    5e20:	f041 0102 	orr.w	r1, r1, #2
    5e24:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    5e26:	79d1      	ldrb	r1, [r2, #7]
    5e28:	07c8      	lsls	r0, r1, #31
    5e2a:	d4fc      	bmi.n	5e26 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    5e2c:	3512      	adds	r5, #18
    5e2e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    5e32:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    5e36:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    5e3a:	79d1      	ldrb	r1, [r2, #7]
    5e3c:	0789      	lsls	r1, r1, #30
    5e3e:	d4fc      	bmi.n	5e3a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    5e40:	681a      	ldr	r2, [r3, #0]
    5e42:	f042 0202 	orr.w	r2, r2, #2
    5e46:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5e48:	691a      	ldr	r2, [r3, #16]
    5e4a:	f012 0202 	ands.w	r2, r2, #2
    5e4e:	d1fb      	bne.n	5e48 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    5e50:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    5e52:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    5e56:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    5e5a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    5e5e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    5e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5e64:	2109      	movs	r1, #9
    5e66:	4620      	mov	r0, r4
    5e68:	4798      	blx	r3
    5e6a:	e708      	b.n	5c7e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    5e6c:	41008000 	.word	0x41008000
    5e70:	00004c55 	.word	0x00004c55
    5e74:	00022de8 	.word	0x00022de8
    5e78:	40002800 	.word	0x40002800
    5e7c:	40001c00 	.word	0x40001c00
    5e80:	4100e000 	.word	0x4100e000
    5e84:	4100e020 	.word	0x4100e020

00005e88 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    5e88:	f04f 30ff 	mov.w	r0, #4294967295
    5e8c:	4770      	bx	lr
    5e8e:	bf00      	nop

00005e90 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    5e90:	f1a1 0002 	sub.w	r0, r1, #2
    5e94:	fab0 f080 	clz	r0, r0
    5e98:	0940      	lsrs	r0, r0, #5
    5e9a:	4770      	bx	lr

00005e9c <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    5e9c:	2002      	movs	r0, #2
    5e9e:	4770      	bx	lr

00005ea0 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    5ea0:	f1a1 0001 	sub.w	r0, r1, #1
    5ea4:	fab0 f080 	clz	r0, r0
    5ea8:	0940      	lsrs	r0, r0, #5
    5eaa:	4770      	bx	lr

00005eac <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    5eac:	f1a1 0008 	sub.w	r0, r1, #8
    5eb0:	fab0 f080 	clz	r0, r0
    5eb4:	0940      	lsrs	r0, r0, #5
    5eb6:	4770      	bx	lr

00005eb8 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    5eb8:	7a80      	ldrb	r0, [r0, #10]
    5eba:	4770      	bx	lr

00005ebc <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    5ebc:	f1a0 0004 	sub.w	r0, r0, #4
    5ec0:	e7fa      	b.n	5eb8 <_ZN9ClearCore9SerialUsb4ModeEv>
    5ec2:	bf00      	nop

00005ec4 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    5ec4:	7a80      	ldrb	r0, [r0, #10]
    }
    5ec6:	1a40      	subs	r0, r0, r1
    5ec8:	fab0 f080 	clz	r0, r0
    5ecc:	0940      	lsrs	r0, r0, #5
    5ece:	4770      	bx	lr

00005ed0 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    5ed0:	f1a0 0004 	sub.w	r0, r0, #4
    5ed4:	e7f6      	b.n	5ec4 <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    5ed6:	bf00      	nop

00005ed8 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    5ed8:	2008      	movs	r0, #8
    5eda:	4770      	bx	lr

00005edc <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    5edc:	f1a0 0004 	sub.w	r0, r0, #4
    5ee0:	e7fa      	b.n	5ed8 <_ZN9ClearCore9SerialUsb4TypeEv>
    5ee2:	bf00      	nop

00005ee4 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    5ee4:	2000      	movs	r0, #0
    5ee6:	4770      	bx	lr

00005ee8 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    5ee8:	f1a0 0004 	sub.w	r0, r0, #4
    5eec:	e7fa      	b.n	5ee4 <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    5eee:	bf00      	nop

00005ef0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    5ef0:	2311      	movs	r3, #17
        m_index = clearCorePin;
    5ef2:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    5ef4:	7283      	strb	r3, [r0, #10]
    5ef6:	4770      	bx	lr

00005ef8 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    5ef8:	f1a0 0004 	sub.w	r0, r0, #4
    5efc:	e7f8      	b.n	5ef0 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    5efe:	bf00      	nop

00005f00 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    5f00:	4770      	bx	lr
    5f02:	bf00      	nop

00005f04 <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    5f04:	f1a0 0004 	sub.w	r0, r0, #4
    5f08:	e7fa      	b.n	5f00 <_ZN9ClearCore9SerialUsb7RefreshEv>
    5f0a:	bf00      	nop

00005f0c <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    5f0c:	4b01      	ldr	r3, [pc, #4]	; (5f14 <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    5f0e:	6818      	ldr	r0, [r3, #0]
    5f10:	f000 be5e 	b.w	6bd0 <_ZN9ClearCore10UsbManager10FlushInputEv>
    5f14:	20000ae0 	.word	0x20000ae0

00005f18 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    5f18:	4b01      	ldr	r3, [pc, #4]	; (5f20 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    5f1a:	6818      	ldr	r0, [r3, #0]
    5f1c:	f000 be66 	b.w	6bec <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    5f20:	20000ae0 	.word	0x20000ae0

00005f24 <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    5f24:	4b01      	ldr	r3, [pc, #4]	; (5f2c <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    5f26:	6818      	ldr	r0, [r3, #0]
    5f28:	f000 be7a 	b.w	6c20 <_ZN9ClearCore10UsbManagercvbEv>
    5f2c:	20000ae0 	.word	0x20000ae0

00005f30 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    5f30:	4b01      	ldr	r3, [pc, #4]	; (5f38 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    5f32:	6818      	ldr	r0, [r3, #0]
    5f34:	f000 be30 	b.w	6b98 <_ZN9ClearCore10UsbManager8PortOpenEv>
    5f38:	20000ae0 	.word	0x20000ae0

00005f3c <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    5f3c:	4b01      	ldr	r3, [pc, #4]	; (5f44 <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    5f3e:	6818      	ldr	r0, [r3, #0]
    5f40:	f001 ba04 	b.w	734c <_ZN9ClearCore10UsbManager9PortCloseEv>
    5f44:	20000ae0 	.word	0x20000ae0

00005f48 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    5f48:	4b01      	ldr	r3, [pc, #4]	; (5f50 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    5f4a:	6818      	ldr	r0, [r3, #0]
    5f4c:	f000 be1c 	b.w	6b88 <_ZN9ClearCore10UsbManager5SpeedEm>
    5f50:	20000ae0 	.word	0x20000ae0

00005f54 <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    5f54:	4b01      	ldr	r3, [pc, #4]	; (5f5c <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    5f56:	6818      	ldr	r0, [r3, #0]
    5f58:	f000 be18 	b.w	6b8c <_ZN9ClearCore10UsbManager5SpeedEv>
    5f5c:	20000ae0 	.word	0x20000ae0

00005f60 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    5f60:	4b01      	ldr	r3, [pc, #4]	; (5f68 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    5f62:	6818      	ldr	r0, [r3, #0]
    5f64:	f000 be7a 	b.w	6c5c <_ZN9ClearCore10UsbManager7CharGetEv>
    5f68:	20000ae0 	.word	0x20000ae0

00005f6c <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    5f6c:	4b01      	ldr	r3, [pc, #4]	; (5f74 <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    5f6e:	6818      	ldr	r0, [r3, #0]
    5f70:	f000 bfa0 	b.w	6eb4 <_ZN9ClearCore10UsbManager8CharPeekEv>
    5f74:	20000ae0 	.word	0x20000ae0

00005f78 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    5f78:	4b01      	ldr	r3, [pc, #4]	; (5f80 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    5f7a:	6818      	ldr	r0, [r3, #0]
    5f7c:	f000 bfa6 	b.w	6ecc <_ZN9ClearCore10UsbManager8SendCharEh>
    5f80:	20000ae0 	.word	0x20000ae0

00005f84 <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    5f84:	4b01      	ldr	r3, [pc, #4]	; (5f8c <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    5f86:	6818      	ldr	r0, [r3, #0]
    5f88:	f000 bfd4 	b.w	6f34 <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    5f8c:	20000ae0 	.word	0x20000ae0

00005f90 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    5f90:	4b01      	ldr	r3, [pc, #4]	; (5f98 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    5f92:	6818      	ldr	r0, [r3, #0]
    5f94:	f000 bfd6 	b.w	6f44 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    5f98:	20000ae0 	.word	0x20000ae0

00005f9c <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    5f9c:	6803      	ldr	r3, [r0, #0]
    5f9e:	4a04      	ldr	r2, [pc, #16]	; (5fb0 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    5fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5fa2:	4293      	cmp	r3, r2
    5fa4:	d103      	bne.n	5fae <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    5fa6:	4b03      	ldr	r3, [pc, #12]	; (5fb4 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    5fa8:	6818      	ldr	r0, [r3, #0]
    5faa:	f000 be39 	b.w	6c20 <_ZN9ClearCore10UsbManagercvbEv>
    5fae:	4718      	bx	r3
    5fb0:	00005f25 	.word	0x00005f25
    5fb4:	20000ae0 	.word	0x20000ae0

00005fb8 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    5fb8:	f1a0 0004 	sub.w	r0, r0, #4
    5fbc:	e7ee      	b.n	5f9c <_ZN9ClearCore9SerialUsb10IsWritableEv>
    5fbe:	bf00      	nop

00005fc0 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5fc0:	b508      	push	{r3, lr}
        return PortIsOpen();
    5fc2:	6803      	ldr	r3, [r0, #0]
    5fc4:	4a06      	ldr	r2, [pc, #24]	; (5fe0 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    5fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5fc8:	4293      	cmp	r3, r2
    5fca:	d105      	bne.n	5fd8 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    5fcc:	4b05      	ldr	r3, [pc, #20]	; (5fe4 <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    5fce:	6818      	ldr	r0, [r3, #0]
    5fd0:	f000 fe26 	bl	6c20 <_ZN9ClearCore10UsbManagercvbEv>
    }
    5fd4:	b200      	sxth	r0, r0
    5fd6:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    5fd8:	4798      	blx	r3
    }
    5fda:	b200      	sxth	r0, r0
    5fdc:	bd08      	pop	{r3, pc}
    5fde:	bf00      	nop
    5fe0:	00005f25 	.word	0x00005f25
    5fe4:	20000ae0 	.word	0x20000ae0

00005fe8 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    5fe8:	f1a0 0004 	sub.w	r0, r0, #4
    5fec:	e7e8      	b.n	5fc0 <_ZN9ClearCore9SerialUsb5StateEv>
    5fee:	bf00      	nop

00005ff0 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    5ff0:	b508      	push	{r3, lr}
            PortOpen();
    5ff2:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    5ff4:	b961      	cbnz	r1, 6010 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    5ff6:	4a0b      	ldr	r2, [pc, #44]	; (6024 <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    5ff8:	68db      	ldr	r3, [r3, #12]
    5ffa:	4293      	cmp	r3, r2
    5ffc:	d105      	bne.n	600a <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    5ffe:	4b0a      	ldr	r3, [pc, #40]	; (6028 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    6000:	6818      	ldr	r0, [r3, #0]
    6002:	f001 f9a3 	bl	734c <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    6006:	2001      	movs	r0, #1
    6008:	bd08      	pop	{r3, pc}
            PortClose();
    600a:	4798      	blx	r3
    }
    600c:	2001      	movs	r0, #1
    600e:	bd08      	pop	{r3, pc}
    6010:	4a06      	ldr	r2, [pc, #24]	; (602c <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    6012:	689b      	ldr	r3, [r3, #8]
    6014:	4293      	cmp	r3, r2
    6016:	d1f8      	bne.n	600a <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    6018:	4b03      	ldr	r3, [pc, #12]	; (6028 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    601a:	6818      	ldr	r0, [r3, #0]
    601c:	f000 fdbc 	bl	6b98 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    6020:	2001      	movs	r0, #1
    6022:	bd08      	pop	{r3, pc}
    6024:	00005f3d 	.word	0x00005f3d
    6028:	20000ae0 	.word	0x20000ae0
    602c:	00005f31 	.word	0x00005f31

00006030 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6030:	f1a0 0004 	sub.w	r0, r0, #4
    6034:	e7dc      	b.n	5ff0 <_ZN9ClearCore9SerialUsb5StateEs>
    6036:	bf00      	nop

00006038 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    6038:	b530      	push	{r4, r5, lr}
    603a:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    603c:	4d1a      	ldr	r5, [pc, #104]	; (60a8 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    603e:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    6042:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    6046:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    6048:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    604c:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    6050:	d112      	bne.n	6078 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    6052:	4621      	mov	r1, r4
    6054:	4620      	mov	r0, r4
    6056:	f006 f8dd 	bl	c214 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    605a:	4621      	mov	r1, r4
    605c:	2001      	movs	r0, #1
    605e:	f006 f8d9 	bl	c214 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    6062:	f006 f8cb 	bl	c1fc <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    6066:	f006 f903 	bl	c270 <cdcdf_acm_get_line_coding>
    606a:	6803      	ldr	r3, [r0, #0]
    606c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6070:	d012      	beq.n	6098 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    6072:	2000      	movs	r0, #0
    6074:	b003      	add	sp, #12
    6076:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6078:	490c      	ldr	r1, [pc, #48]	; (60ac <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    607a:	2000      	movs	r0, #0
    607c:	f006 f8ca 	bl	c214 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6080:	490b      	ldr	r1, [pc, #44]	; (60b0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    6082:	2001      	movs	r0, #1
    6084:	f006 f8c6 	bl	c214 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    6088:	6828      	ldr	r0, [r5, #0]
    608a:	2140      	movs	r1, #64	; 0x40
    608c:	3080      	adds	r0, #128	; 0x80
    608e:	f006 f88d 	bl	c1ac <cdcdf_acm_read>
}
    6092:	2000      	movs	r0, #0
    6094:	b003      	add	sp, #12
    6096:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    6098:	2101      	movs	r1, #1
    609a:	4806      	ldr	r0, [pc, #24]	; (60b4 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    609c:	f003 fa36 	bl	950c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    60a0:	2000      	movs	r0, #0
    60a2:	b003      	add	sp, #12
    60a4:	bd30      	pop	{r4, r5, pc}
    60a6:	bf00      	nop
    60a8:	20000ae0 	.word	0x20000ae0
    60ac:	000060b9 	.word	0x000060b9
    60b0:	000062f1 	.word	0x000062f1
    60b4:	200019dc 	.word	0x200019dc

000060b8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    60b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60bc:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    60be:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    60c0:	498a      	ldr	r1, [pc, #552]	; (62ec <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    60c2:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    60c4:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    60c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    60cc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    60d0:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    60d2:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    60d4:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    60d6:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    60da:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    60de:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    60e2:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    60e4:	bf48      	it	mi
    60e6:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    60e8:	2c00      	cmp	r4, #0
    60ea:	f000 80d6 	beq.w	629a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    60ee:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    60f2:	f000 80d2 	beq.w	629a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    60f6:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    60fa:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    60fe:	42a3      	cmp	r3, r4
    6100:	bf28      	it	cs
    6102:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    6104:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    6108:	4299      	cmp	r1, r3
    610a:	bf28      	it	cs
    610c:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    610e:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6110:	2900      	cmp	r1, #0
    6112:	f000 80e8 	beq.w	62e6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    6116:	1d2c      	adds	r4, r5, #4
    6118:	4404      	add	r4, r0
    611a:	1d17      	adds	r7, r2, #4
    611c:	42be      	cmp	r6, r7
    611e:	bf38      	it	cc
    6120:	42a2      	cmpcc	r2, r4
    6122:	f0c0 80ce 	bcc.w	62c2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    6126:	290b      	cmp	r1, #11
    6128:	f240 80cb 	bls.w	62c2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    612c:	4254      	negs	r4, r2
    612e:	f014 0403 	ands.w	r4, r4, #3
    6132:	f000 80b7 	beq.w	62a4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    6136:	7817      	ldrb	r7, [r2, #0]
    6138:	5547      	strb	r7, [r0, r5]
    613a:	2c01      	cmp	r4, #1
    613c:	f106 0c01 	add.w	ip, r6, #1
    6140:	f102 0801 	add.w	r8, r2, #1
    6144:	f000 80b0 	beq.w	62a8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    6148:	7857      	ldrb	r7, [r2, #1]
    614a:	7077      	strb	r7, [r6, #1]
    614c:	2c02      	cmp	r4, #2
    614e:	f106 0c02 	add.w	ip, r6, #2
    6152:	f102 0802 	add.w	r8, r2, #2
    6156:	f000 80a7 	beq.w	62a8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    615a:	7897      	ldrb	r7, [r2, #2]
    615c:	70b7      	strb	r7, [r6, #2]
    615e:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6162:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6164:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6168:	9601      	str	r6, [sp, #4]
    616a:	eba1 0b04 	sub.w	fp, r1, r4
    616e:	f1ab 0604 	sub.w	r6, fp, #4
    6172:	08b6      	lsrs	r6, r6, #2
    6174:	192f      	adds	r7, r5, r4
    6176:	3601      	adds	r6, #1
    6178:	ea4f 0986 	mov.w	r9, r6, lsl #2
    617c:	4407      	add	r7, r0
    617e:	4414      	add	r4, r2
    6180:	f04f 0e00 	mov.w	lr, #0
    6184:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6188:	f854 ab04 	ldr.w	sl, [r4], #4
    618c:	f847 ab04 	str.w	sl, [r7], #4
    6190:	4576      	cmp	r6, lr
    6192:	d8f7      	bhi.n	6184 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    6194:	9c01      	ldr	r4, [sp, #4]
    6196:	45cb      	cmp	fp, r9
    6198:	444c      	add	r4, r9
    619a:	eb0c 0709 	add.w	r7, ip, r9
    619e:	eb08 0e09 	add.w	lr, r8, r9
    61a2:	f000 8089 	beq.w	62b8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    61a6:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    61aa:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    61ae:	1c66      	adds	r6, r4, #1
    61b0:	42b1      	cmp	r1, r6
    61b2:	f240 8081 	bls.w	62b8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    61b6:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    61b8:	f89e 6001 	ldrb.w	r6, [lr, #1]
    61bc:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    61be:	42a1      	cmp	r1, r4
    61c0:	d97a      	bls.n	62b8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    61c2:	f89e 4002 	ldrb.w	r4, [lr, #2]
    61c6:	70bc      	strb	r4, [r7, #2]
    61c8:	1856      	adds	r6, r2, r1
    61ca:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    61ce:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    61d2:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    61d4:	1a64      	subs	r4, r4, r1
        if (count) {
    61d6:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    61d8:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    61dc:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    61e0:	d064      	beq.n	62ac <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    61e2:	1d31      	adds	r1, r6, #4
    61e4:	1d02      	adds	r2, r0, #4
    61e6:	4296      	cmp	r6, r2
    61e8:	bf38      	it	cc
    61ea:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    61ec:	4604      	mov	r4, r0
    61ee:	d371      	bcc.n	62d4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    61f0:	2b0b      	cmp	r3, #11
    61f2:	d96f      	bls.n	62d4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    61f4:	4272      	negs	r2, r6
    61f6:	f012 0203 	ands.w	r2, r2, #3
    61fa:	d05f      	beq.n	62bc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    61fc:	7831      	ldrb	r1, [r6, #0]
    61fe:	7001      	strb	r1, [r0, #0]
    6200:	2a01      	cmp	r2, #1
    6202:	f100 0401 	add.w	r4, r0, #1
    6206:	f106 0e01 	add.w	lr, r6, #1
    620a:	d058      	beq.n	62be <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    620c:	7871      	ldrb	r1, [r6, #1]
    620e:	7041      	strb	r1, [r0, #1]
    6210:	2a02      	cmp	r2, #2
    6212:	f100 0402 	add.w	r4, r0, #2
    6216:	f106 0e02 	add.w	lr, r6, #2
    621a:	d050      	beq.n	62be <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    621c:	78b1      	ldrb	r1, [r6, #2]
    621e:	7081      	strb	r1, [r0, #2]
    6220:	1cc4      	adds	r4, r0, #3
    6222:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    6226:	2703      	movs	r7, #3
    6228:	eba3 0c02 	sub.w	ip, r3, r2
    622c:	f1ac 0104 	sub.w	r1, ip, #4
    6230:	0889      	lsrs	r1, r1, #2
    6232:	1c4d      	adds	r5, r1, #1
    6234:	4416      	add	r6, r2
    6236:	ea4f 0885 	mov.w	r8, r5, lsl #2
    623a:	4402      	add	r2, r0
    623c:	2100      	movs	r1, #0
    623e:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6240:	f856 9b04 	ldr.w	r9, [r6], #4
    6244:	f842 9b04 	str.w	r9, [r2], #4
    6248:	428d      	cmp	r5, r1
    624a:	d8f8      	bhi.n	623e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    624c:	45c4      	cmp	ip, r8
    624e:	eb07 0208 	add.w	r2, r7, r8
    6252:	eb04 0108 	add.w	r1, r4, r8
    6256:	eb0e 0608 	add.w	r6, lr, r8
    625a:	d00d      	beq.n	6278 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    625c:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    6260:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6264:	1c54      	adds	r4, r2, #1
    6266:	42a3      	cmp	r3, r4
    6268:	d906      	bls.n	6278 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    626a:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    626c:	7874      	ldrb	r4, [r6, #1]
    626e:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6270:	4293      	cmp	r3, r2
    6272:	d901      	bls.n	6278 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    6274:	78b2      	ldrb	r2, [r6, #2]
    6276:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    6278:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    627c:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    6280:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6284:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6286:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    6288:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    628c:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    6290:	b91c      	cbnz	r4, 629a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6292:	3080      	adds	r0, #128	; 0x80
    6294:	2140      	movs	r1, #64	; 0x40
    6296:	f005 ff89 	bl	c1ac <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    629a:	b662      	cpsie	i
}
    629c:	2001      	movs	r0, #1
    629e:	b003      	add	sp, #12
    62a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    62a4:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    62a6:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    62a8:	9401      	str	r4, [sp, #4]
    62aa:	e75e      	b.n	616a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    62ac:	4429      	add	r1, r5
    62ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    62b2:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    62b6:	e7eb      	b.n	6290 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    62b8:	1856      	adds	r6, r2, r1
    62ba:	e786      	b.n	61ca <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    62bc:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    62be:	4617      	mov	r7, r2
    62c0:	e7b2      	b.n	6228 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    62c2:	1e74      	subs	r4, r6, #1
    62c4:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    62c6:	f812 7b01 	ldrb.w	r7, [r2], #1
    62ca:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    62ce:	42b2      	cmp	r2, r6
    62d0:	d1f9      	bne.n	62c6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    62d2:	e77a      	b.n	61ca <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    62d4:	1e42      	subs	r2, r0, #1
    62d6:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    62d8:	f816 1b01 	ldrb.w	r1, [r6], #1
    62dc:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    62e0:	42b4      	cmp	r4, r6
    62e2:	d1f9      	bne.n	62d8 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    62e4:	e7c8      	b.n	6278 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    62e6:	4616      	mov	r6, r2
    62e8:	e773      	b.n	61d2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    62ea:	bf00      	nop
    62ec:	20000ae0 	.word	0x20000ae0

000062f0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    62f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    62f4:	48d8      	ldr	r0, [pc, #864]	; (6658 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    62f6:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    62f8:	2900      	cmp	r1, #0
    62fa:	f040 81ab 	bne.w	6654 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    62fe:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    6300:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    6304:	441a      	add	r2, r3
    6306:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    630a:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    630e:	2300      	movs	r3, #0
    6310:	f3bf 8f5b 	dmb	ish
    6314:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    6318:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    631c:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    631e:	f3bf 8f5b 	dmb	ish
    6322:	f04f 0101 	mov.w	r1, #1
    6326:	f504 7388 	add.w	r3, r4, #272	; 0x110
    632a:	e8d3 2f4f 	ldrexb	r2, [r3]
    632e:	e8c3 1f40 	strexb	r0, r1, [r3]
    6332:	2800      	cmp	r0, #0
    6334:	d1f9      	bne.n	632a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    6336:	f3bf 8f5b 	dmb	ish
    633a:	f012 0fff 	tst.w	r2, #255	; 0xff
    633e:	f040 80dc 	bne.w	64fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    6342:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    6346:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    634a:	428e      	cmp	r6, r1
    634c:	f000 8191 	beq.w	6672 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6350:	f104 0240 	add.w	r2, r4, #64	; 0x40
    6354:	eb02 0706 	add.w	r7, r2, r6
    6358:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    635c:	f0c0 80d1 	bcc.w	6502 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6360:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6364:	4419      	add	r1, r3
    6366:	2940      	cmp	r1, #64	; 0x40
    6368:	bf28      	it	cs
    636a:	2140      	movcs	r1, #64	; 0x40
    636c:	428b      	cmp	r3, r1
    636e:	bf28      	it	cs
    6370:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6372:	2b00      	cmp	r3, #0
    6374:	f000 81a1 	beq.w	66ba <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    6378:	f106 0540 	add.w	r5, r6, #64	; 0x40
    637c:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    6380:	1960      	adds	r0, r4, r5
    6382:	44a4      	add	ip, r4
    6384:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    6388:	4540      	cmp	r0, r8
    638a:	bf38      	it	cc
    638c:	45e6      	cmpcc	lr, ip
    638e:	f0c0 818a 	bcc.w	66a6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6392:	2b0b      	cmp	r3, #11
    6394:	f240 8187 	bls.w	66a6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6398:	4240      	negs	r0, r0
    639a:	f010 0003 	ands.w	r0, r0, #3
    639e:	f000 8161 	beq.w	6664 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    63a2:	5d96      	ldrb	r6, [r2, r6]
    63a4:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    63a8:	2801      	cmp	r0, #1
    63aa:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    63ae:	f107 0801 	add.w	r8, r7, #1
    63b2:	f000 8159 	beq.w	6668 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    63b6:	787e      	ldrb	r6, [r7, #1]
    63b8:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    63bc:	2802      	cmp	r0, #2
    63be:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    63c2:	f107 0802 	add.w	r8, r7, #2
    63c6:	f000 814f 	beq.w	6668 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    63ca:	78be      	ldrb	r6, [r7, #2]
    63cc:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    63d0:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    63d2:	f107 0803 	add.w	r8, r7, #3
    63d6:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    63da:	9601      	str	r6, [sp, #4]
    63dc:	eba3 0b00 	sub.w	fp, r3, r0
    63e0:	f1ab 0604 	sub.w	r6, fp, #4
    63e4:	08b6      	lsrs	r6, r6, #2
    63e6:	4405      	add	r5, r0
    63e8:	3601      	adds	r6, #1
    63ea:	30c0      	adds	r0, #192	; 0xc0
    63ec:	4425      	add	r5, r4
    63ee:	4420      	add	r0, r4
    63f0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    63f4:	2700      	movs	r7, #0
    63f6:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    63f8:	f855 ab04 	ldr.w	sl, [r5], #4
    63fc:	f840 ab04 	str.w	sl, [r0], #4
    6400:	42b7      	cmp	r7, r6
    6402:	d3f8      	bcc.n	63f6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    6404:	9801      	ldr	r0, [sp, #4]
    6406:	45cb      	cmp	fp, r9
    6408:	4448      	add	r0, r9
    640a:	eb0c 0509 	add.w	r5, ip, r9
    640e:	eb08 0709 	add.w	r7, r8, r9
    6412:	d00d      	beq.n	6430 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    6414:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    6418:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    641c:	1c46      	adds	r6, r0, #1
    641e:	42b3      	cmp	r3, r6
    6420:	d906      	bls.n	6430 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    6422:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    6424:	787e      	ldrb	r6, [r7, #1]
    6426:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6428:	4283      	cmp	r3, r0
    642a:	d901      	bls.n	6430 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    642c:	78b8      	ldrb	r0, [r7, #2]
    642e:	70a8      	strb	r0, [r5, #2]
    6430:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6434:	1acb      	subs	r3, r1, r3
    6436:	f000 80fc 	beq.w	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    643a:	f104 0544 	add.w	r5, r4, #68	; 0x44
    643e:	1d06      	adds	r6, r0, #4
    6440:	42b2      	cmp	r2, r6
    6442:	bf38      	it	cc
    6444:	42a8      	cmpcc	r0, r5
    6446:	f0c0 8125 	bcc.w	6694 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    644a:	2b0b      	cmp	r3, #11
    644c:	f240 8122 	bls.w	6694 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    6450:	4255      	negs	r5, r2
    6452:	f015 0503 	ands.w	r5, r5, #3
    6456:	f000 8109 	beq.w	666c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    645a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    645e:	7002      	strb	r2, [r0, #0]
    6460:	2d01      	cmp	r5, #1
    6462:	f100 0801 	add.w	r8, r0, #1
    6466:	f104 0241 	add.w	r2, r4, #65	; 0x41
    646a:	f000 8100 	beq.w	666e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    646e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    6472:	7042      	strb	r2, [r0, #1]
    6474:	2d02      	cmp	r5, #2
    6476:	f100 0802 	add.w	r8, r0, #2
    647a:	f104 0242 	add.w	r2, r4, #66	; 0x42
    647e:	f000 80f6 	beq.w	666e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6482:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    6486:	7082      	strb	r2, [r0, #2]
    6488:	f100 0803 	add.w	r8, r0, #3
    648c:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6490:	2703      	movs	r7, #3
    6492:	eba3 0905 	sub.w	r9, r3, r5
    6496:	f1a9 0604 	sub.w	r6, r9, #4
    649a:	08b6      	lsrs	r6, r6, #2
    649c:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    64a0:	3601      	adds	r6, #1
    64a2:	4428      	add	r0, r5
    64a4:	44a4      	add	ip, r4
    64a6:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    64aa:	f04f 0a00 	mov.w	sl, #0
    64ae:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    64b2:	f85c 5b04 	ldr.w	r5, [ip], #4
    64b6:	f840 5b04 	str.w	r5, [r0], #4
    64ba:	4556      	cmp	r6, sl
    64bc:	d8f7      	bhi.n	64ae <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    64be:	45d9      	cmp	r9, fp
    64c0:	445f      	add	r7, fp
    64c2:	eb08 000b 	add.w	r0, r8, fp
    64c6:	eb02 050b 	add.w	r5, r2, fp
    64ca:	f000 80b2 	beq.w	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    64ce:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    64d2:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    64d6:	1c7a      	adds	r2, r7, #1
    64d8:	4293      	cmp	r3, r2
    64da:	f240 80aa 	bls.w	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    64de:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    64e0:	786a      	ldrb	r2, [r5, #1]
    64e2:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    64e4:	42bb      	cmp	r3, r7
    64e6:	f240 80a4 	bls.w	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    64ea:	78ab      	ldrb	r3, [r5, #2]
    64ec:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    64ee:	4670      	mov	r0, lr
    64f0:	f005 fe70 	bl	c1d4 <cdcdf_acm_write>
    64f4:	2800      	cmp	r0, #0
    64f6:	f040 80a2 	bne.w	663e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    64fa:	2001      	movs	r0, #1
    64fc:	b003      	add	sp, #12
    64fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    6502:	1b89      	subs	r1, r1, r6
    6504:	f106 0340 	add.w	r3, r6, #64	; 0x40
    6508:	f106 0044 	add.w	r0, r6, #68	; 0x44
    650c:	2940      	cmp	r1, #64	; 0x40
    650e:	eb04 0803 	add.w	r8, r4, r3
    6512:	4420      	add	r0, r4
    6514:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    6518:	bf28      	it	cs
    651a:	2140      	movcs	r1, #64	; 0x40
    651c:	45a8      	cmp	r8, r5
    651e:	bf38      	it	cc
    6520:	4586      	cmpcc	lr, r0
    6522:	f0c0 80ad 	bcc.w	6680 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    6526:	290b      	cmp	r1, #11
    6528:	f240 80aa 	bls.w	6680 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    652c:	f1c8 0800 	rsb	r8, r8, #0
    6530:	f018 0803 	ands.w	r8, r8, #3
    6534:	f000 8092 	beq.w	665c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    6538:	5d92      	ldrb	r2, [r2, r6]
    653a:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    653e:	f1b8 0f01 	cmp.w	r8, #1
    6542:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    6546:	f107 0601 	add.w	r6, r7, #1
    654a:	f000 8089 	beq.w	6660 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    654e:	787a      	ldrb	r2, [r7, #1]
    6550:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    6554:	f1b8 0f02 	cmp.w	r8, #2
    6558:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    655c:	f107 0602 	add.w	r6, r7, #2
    6560:	d07e      	beq.n	6660 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    6562:	78ba      	ldrb	r2, [r7, #2]
    6564:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6568:	1cfe      	adds	r6, r7, #3
    656a:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    656e:	f04f 0903 	mov.w	r9, #3
    6572:	4443      	add	r3, r8
    6574:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6578:	58e2      	ldr	r2, [r4, r3]
    657a:	5022      	str	r2, [r4, r0]
    657c:	eba1 0808 	sub.w	r8, r1, r8
    6580:	f1a8 0204 	sub.w	r2, r8, #4
    6584:	4423      	add	r3, r4
    6586:	0892      	lsrs	r2, r2, #2
    6588:	3201      	adds	r2, #1
    658a:	4420      	add	r0, r4
    658c:	685f      	ldr	r7, [r3, #4]
    658e:	6047      	str	r7, [r0, #4]
    6590:	2a02      	cmp	r2, #2
    6592:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    6596:	d035      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6598:	689f      	ldr	r7, [r3, #8]
    659a:	6087      	str	r7, [r0, #8]
    659c:	2a03      	cmp	r2, #3
    659e:	d031      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65a0:	68df      	ldr	r7, [r3, #12]
    65a2:	60c7      	str	r7, [r0, #12]
    65a4:	2a04      	cmp	r2, #4
    65a6:	d02d      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65a8:	691f      	ldr	r7, [r3, #16]
    65aa:	6107      	str	r7, [r0, #16]
    65ac:	2a05      	cmp	r2, #5
    65ae:	d029      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65b0:	695f      	ldr	r7, [r3, #20]
    65b2:	6147      	str	r7, [r0, #20]
    65b4:	2a06      	cmp	r2, #6
    65b6:	d025      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65b8:	699f      	ldr	r7, [r3, #24]
    65ba:	6187      	str	r7, [r0, #24]
    65bc:	2a07      	cmp	r2, #7
    65be:	d021      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65c0:	69df      	ldr	r7, [r3, #28]
    65c2:	61c7      	str	r7, [r0, #28]
    65c4:	2a08      	cmp	r2, #8
    65c6:	d01d      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65c8:	6a1f      	ldr	r7, [r3, #32]
    65ca:	6207      	str	r7, [r0, #32]
    65cc:	2a09      	cmp	r2, #9
    65ce:	d019      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65d0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    65d2:	6247      	str	r7, [r0, #36]	; 0x24
    65d4:	2a0a      	cmp	r2, #10
    65d6:	d015      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65d8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    65da:	6287      	str	r7, [r0, #40]	; 0x28
    65dc:	2a0b      	cmp	r2, #11
    65de:	d011      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65e0:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    65e2:	62c7      	str	r7, [r0, #44]	; 0x2c
    65e4:	2a0c      	cmp	r2, #12
    65e6:	d00d      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65e8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    65ea:	6307      	str	r7, [r0, #48]	; 0x30
    65ec:	2a0d      	cmp	r2, #13
    65ee:	d009      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65f0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    65f2:	6347      	str	r7, [r0, #52]	; 0x34
    65f4:	2a0e      	cmp	r2, #14
    65f6:	d005      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    65f8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    65fa:	6387      	str	r7, [r0, #56]	; 0x38
    65fc:	2a0f      	cmp	r2, #15
    65fe:	d001      	beq.n	6604 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6602:	63c3      	str	r3, [r0, #60]	; 0x3c
    6604:	45e0      	cmp	r8, ip
    6606:	44e1      	add	r9, ip
    6608:	eb05 030c 	add.w	r3, r5, ip
    660c:	eb06 000c 	add.w	r0, r6, ip
    6610:	d00f      	beq.n	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6612:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    6616:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    661a:	f109 0201 	add.w	r2, r9, #1
    661e:	4291      	cmp	r1, r2
    6620:	d907      	bls.n	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6622:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    6626:	7842      	ldrb	r2, [r0, #1]
    6628:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    662a:	4549      	cmp	r1, r9
    662c:	d901      	bls.n	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    662e:	7882      	ldrb	r2, [r0, #2]
    6630:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6632:	4670      	mov	r0, lr
    6634:	f005 fdce 	bl	c1d4 <cdcdf_acm_write>
    6638:	2800      	cmp	r0, #0
    663a:	f43f af5e 	beq.w	64fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    663e:	f3bf 8f5b 	dmb	ish
    6642:	2300      	movs	r3, #0
    6644:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    6648:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    664a:	f3bf 8f5b 	dmb	ish
}
    664e:	b003      	add	sp, #12
    6650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6654:	6801      	ldr	r1, [r0, #0]
    6656:	e65a      	b.n	630e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    6658:	20000ae0 	.word	0x20000ae0
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    665c:	463e      	mov	r6, r7
    665e:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6660:	46c1      	mov	r9, r8
    6662:	e786      	b.n	6572 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6664:	46b8      	mov	r8, r7
    6666:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6668:	9001      	str	r0, [sp, #4]
    666a:	e6b7      	b.n	63dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    666c:	4680      	mov	r8, r0
    666e:	462f      	mov	r7, r5
    6670:	e70f      	b.n	6492 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    6672:	f3bf 8f5b 	dmb	ish
    6676:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    667a:	f3bf 8f5b 	dmb	ish
    667e:	e73c      	b.n	64fa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6680:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    6684:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    6686:	f817 2b01 	ldrb.w	r2, [r7], #1
    668a:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    668e:	4287      	cmp	r7, r0
    6690:	d1f9      	bne.n	6686 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    6692:	e7ce      	b.n	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6694:	3801      	subs	r0, #1
    6696:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6698:	f812 5b01 	ldrb.w	r5, [r2], #1
    669c:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    66a0:	429a      	cmp	r2, r3
    66a2:	d1f9      	bne.n	6698 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    66a4:	e7c5      	b.n	6632 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    66a6:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    66aa:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    66ac:	f817 5b01 	ldrb.w	r5, [r7], #1
    66b0:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    66b4:	42be      	cmp	r6, r7
    66b6:	d1f9      	bne.n	66ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    66b8:	e6ba      	b.n	6430 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    66ba:	4670      	mov	r0, lr
    66bc:	e6ba      	b.n	6434 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    66be:	bf00      	nop

000066c0 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    66c0:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    66c2:	4e16      	ldr	r6, [pc, #88]	; (671c <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    66c4:	6834      	ldr	r4, [r6, #0]
    66c6:	f014 0401 	ands.w	r4, r4, #1
    66ca:	d002      	beq.n	66d2 <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    66cc:	4b14      	ldr	r3, [pc, #80]	; (6720 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    66ce:	6818      	ldr	r0, [r3, #0]
    66d0:	bd70      	pop	{r4, r5, r6, pc}
    66d2:	f44f 7090 	mov.w	r0, #288	; 0x120
    66d6:	f00c ffe3 	bl	136a0 <_Znwj>
    66da:	4605      	mov	r5, r0
    m_portOpen(false) {
    66dc:	f100 0380 	add.w	r3, r0, #128	; 0x80
    66e0:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    66e4:	490f      	ldr	r1, [pc, #60]	; (6724 <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    66e6:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    66ea:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    66ee:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    66f2:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    66f6:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    66fa:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    66fe:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    6702:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    6706:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    670a:	2003      	movs	r0, #3
    670c:	f005 fd82 	bl	c214 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    6710:	4a03      	ldr	r2, [pc, #12]	; (6720 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    6712:	2301      	movs	r3, #1
    6714:	6015      	str	r5, [r2, #0]
    6716:	4628      	mov	r0, r5
    6718:	6033      	str	r3, [r6, #0]
}
    671a:	bd70      	pop	{r4, r5, r6, pc}
    671c:	20000adc 	.word	0x20000adc
    6720:	20000b24 	.word	0x20000b24
    6724:	00006039 	.word	0x00006039

00006728 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    6728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    672c:	4ac7      	ldr	r2, [pc, #796]	; (6a4c <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    672e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6732:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    6736:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    6738:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    673c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6740:	0659      	lsls	r1, r3, #25
    6742:	d4fb      	bmi.n	673c <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    6744:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6748:	49c0      	ldr	r1, [pc, #768]	; (6a4c <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    674a:	2004      	movs	r0, #4
    674c:	f360 0303 	bfi	r3, r0, #0, #4
    6750:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6754:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    675c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    6760:	684b      	ldr	r3, [r1, #4]
    6762:	06db      	lsls	r3, r3, #27
    6764:	d4fc      	bmi.n	6760 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    6766:	4bba      	ldr	r3, [pc, #744]	; (6a50 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6768:	49ba      	ldr	r1, [pc, #744]	; (6a54 <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    676a:	691a      	ldr	r2, [r3, #16]
    676c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6770:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    6772:	699a      	ldr	r2, [r3, #24]
    6774:	f042 0201 	orr.w	r2, r2, #1
    6778:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    677a:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    677e:	2203      	movs	r2, #3
    6780:	f006 f8f4 	bl	c96c <usb_find_str_desc>
    if (!serNumDescPtr) {
    6784:	4604      	mov	r4, r0
    6786:	2800      	cmp	r0, #0
    6788:	f000 819c 	beq.w	6ac4 <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    678c:	4bb2      	ldr	r3, [pc, #712]	; (6a58 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    678e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6790:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6794:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    6796:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6798:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    679a:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    679e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    67a2:	3037      	adds	r0, #55	; 0x37
    67a4:	2d09      	cmp	r5, #9
    67a6:	bf88      	it	hi
    67a8:	4607      	movhi	r7, r0
    67aa:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    67ae:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67b2:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    67b6:	3037      	adds	r0, #55	; 0x37
    67b8:	f1b8 0f09 	cmp.w	r8, #9
    67bc:	bfc8      	it	gt
    67be:	4684      	movgt	ip, r0
    67c0:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    67c2:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67c6:	f88d c011 	strb.w	ip, [sp, #17]
    67ca:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    67ce:	3037      	adds	r0, #55	; 0x37
    67d0:	2e09      	cmp	r6, #9
    67d2:	bfc8      	it	gt
    67d4:	4684      	movgt	ip, r0
    67d6:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    67d8:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67dc:	f88d c012 	strb.w	ip, [sp, #18]
    67e0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    67e4:	3037      	adds	r0, #55	; 0x37
    67e6:	2d09      	cmp	r5, #9
    67e8:	bfc8      	it	gt
    67ea:	4684      	movgt	ip, r0
    67ec:	fa5f f08e 	uxtb.w	r0, lr
    67f0:	f88d 7010 	strb.w	r7, [sp, #16]
    67f4:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    67f8:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    67fc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6800:	3037      	adds	r0, #55	; 0x37
    6802:	f1be 0f09 	cmp.w	lr, #9
    6806:	bfd4      	ite	le
    6808:	46e6      	movle	lr, ip
    680a:	4686      	movgt	lr, r0
    680c:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    680e:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6812:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6814:	f88d e014 	strb.w	lr, [sp, #20]
    6818:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    681c:	3030      	adds	r0, #48	; 0x30
    681e:	2f09      	cmp	r7, #9
    6820:	bfcc      	ite	gt
    6822:	4677      	movgt	r7, lr
    6824:	4607      	movle	r7, r0
    6826:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6828:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    682a:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    682e:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6832:	f100 0737 	add.w	r7, r0, #55	; 0x37
    6836:	3030      	adds	r0, #48	; 0x30
    6838:	2e09      	cmp	r6, #9
    683a:	bfcc      	ite	gt
    683c:	463e      	movgt	r6, r7
    683e:	4606      	movle	r6, r0
    6840:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    6842:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6844:	f88d 6016 	strb.w	r6, [sp, #22]
    6848:	f100 0637 	add.w	r6, r0, #55	; 0x37
    684c:	3030      	adds	r0, #48	; 0x30
    684e:	2b09      	cmp	r3, #9
    6850:	bfcc      	ite	gt
    6852:	4633      	movgt	r3, r6
    6854:	4603      	movle	r3, r0
    6856:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6858:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    685c:	f88d 3017 	strb.w	r3, [sp, #23]
    6860:	f100 0337 	add.w	r3, r0, #55	; 0x37
    6864:	3030      	adds	r0, #48	; 0x30
    6866:	2d09      	cmp	r5, #9
    6868:	bf88      	it	hi
    686a:	4618      	movhi	r0, r3
    686c:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    6870:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6874:	f88d 0018 	strb.w	r0, [sp, #24]
    6878:	f103 0037 	add.w	r0, r3, #55	; 0x37
    687c:	3330      	adds	r3, #48	; 0x30
    687e:	f1bc 0f09 	cmp.w	ip, #9
    6882:	bfcc      	ite	gt
    6884:	4684      	movgt	ip, r0
    6886:	469c      	movle	ip, r3
    6888:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    688c:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6890:	f88d c019 	strb.w	ip, [sp, #25]
    6894:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6898:	3330      	adds	r3, #48	; 0x30
    689a:	f1be 0f09 	cmp.w	lr, #9
    689e:	bfd8      	it	le
    68a0:	469c      	movle	ip, r3
    68a2:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    68a4:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68a8:	f88d c01a 	strb.w	ip, [sp, #26]
    68ac:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    68b0:	3330      	adds	r3, #48	; 0x30
    68b2:	2f09      	cmp	r7, #9
    68b4:	bfd8      	it	le
    68b6:	469c      	movle	ip, r3
    68b8:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    68ba:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68be:	f88d c01b 	strb.w	ip, [sp, #27]
    68c2:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    68c6:	3330      	adds	r3, #48	; 0x30
    68c8:	2e09      	cmp	r6, #9
    68ca:	bfd8      	it	le
    68cc:	469c      	movle	ip, r3
    68ce:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    68d0:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    68d4:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68d6:	f88d c01c 	strb.w	ip, [sp, #28]
    68da:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    68de:	3330      	adds	r3, #48	; 0x30
    68e0:	2d09      	cmp	r5, #9
    68e2:	bfcc      	ite	gt
    68e4:	4665      	movgt	r5, ip
    68e6:	461d      	movle	r5, r3
    68e8:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    68ea:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68ec:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    68f0:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    68f4:	f103 0537 	add.w	r5, r3, #55	; 0x37
    68f8:	3330      	adds	r3, #48	; 0x30
    68fa:	2809      	cmp	r0, #9
    68fc:	bfcc      	ite	gt
    68fe:	4628      	movgt	r0, r5
    6900:	4618      	movle	r0, r3
    6902:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    6904:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6908:	f88d 001e 	strb.w	r0, [sp, #30]
    690c:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6910:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6912:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6916:	2a09      	cmp	r2, #9
    6918:	bfcc      	ite	gt
    691a:	4602      	movgt	r2, r0
    691c:	461a      	movle	r2, r3
    691e:	fa5f f58e 	uxtb.w	r5, lr
    6922:	b2f8      	uxtb	r0, r7
    6924:	f88d 201f 	strb.w	r2, [sp, #31]
    6928:	f105 0237 	add.w	r2, r5, #55	; 0x37
    692c:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    692e:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6932:	f1be 0f09 	cmp.w	lr, #9
    6936:	bf88      	it	hi
    6938:	4615      	movhi	r5, r2
    693a:	f100 0237 	add.w	r2, r0, #55	; 0x37
    693e:	3030      	adds	r0, #48	; 0x30
    6940:	2f09      	cmp	r7, #9
    6942:	bfc8      	it	gt
    6944:	4610      	movgt	r0, r2
    6946:	b2f3      	uxtb	r3, r6
    6948:	f103 0237 	add.w	r2, r3, #55	; 0x37
    694c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    6950:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6952:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6956:	2e09      	cmp	r6, #9
    6958:	bfc8      	it	gt
    695a:	4613      	movgt	r3, r2
    695c:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    695e:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6962:	f102 0837 	add.w	r8, r2, #55	; 0x37
    6966:	3230      	adds	r2, #48	; 0x30
    6968:	2809      	cmp	r0, #9
    696a:	bfd8      	it	le
    696c:	4690      	movle	r8, r2
    696e:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6972:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6976:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    697a:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    697c:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    697e:	f88d 5020 	strb.w	r5, [sp, #32]
    6982:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6986:	3230      	adds	r2, #48	; 0x30
    6988:	f1be 0f09 	cmp.w	lr, #9
    698c:	bfd8      	it	le
    698e:	4614      	movle	r4, r2
    6990:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6992:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6994:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    6998:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    699c:	f102 0437 	add.w	r4, r2, #55	; 0x37
    69a0:	3230      	adds	r2, #48	; 0x30
    69a2:	2f09      	cmp	r7, #9
    69a4:	bfcc      	ite	gt
    69a6:	4627      	movgt	r7, r4
    69a8:	4617      	movle	r7, r2
    69aa:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    69ac:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69b0:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    69b4:	f102 0737 	add.w	r7, r2, #55	; 0x37
    69b8:	3230      	adds	r2, #48	; 0x30
    69ba:	2e09      	cmp	r6, #9
    69bc:	bfcc      	ite	gt
    69be:	463e      	movgt	r6, r7
    69c0:	4616      	movle	r6, r2
    69c2:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    69c4:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69c6:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    69ca:	f102 0637 	add.w	r6, r2, #55	; 0x37
    69ce:	3230      	adds	r2, #48	; 0x30
    69d0:	2909      	cmp	r1, #9
    69d2:	bfcc      	ite	gt
    69d4:	4631      	movgt	r1, r6
    69d6:	4611      	movle	r1, r2
    69d8:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    69da:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69de:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    69e2:	f102 0130 	add.w	r1, r2, #48	; 0x30
    69e6:	3237      	adds	r2, #55	; 0x37
    69e8:	2d09      	cmp	r5, #9
    69ea:	bf88      	it	hi
    69ec:	4611      	movhi	r1, r2
    69ee:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    69f2:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    69fa:	f102 0130 	add.w	r1, r2, #48	; 0x30
    69fe:	3237      	adds	r2, #55	; 0x37
    6a00:	f1bc 0f09 	cmp.w	ip, #9
    6a04:	bfd4      	ite	le
    6a06:	468c      	movle	ip, r1
    6a08:	4694      	movgt	ip, r2
    6a0a:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6a0e:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a12:	f102 0137 	add.w	r1, r2, #55	; 0x37
    6a16:	3230      	adds	r2, #48	; 0x30
    6a18:	f1be 0f09 	cmp.w	lr, #9
    6a1c:	bfcc      	ite	gt
    6a1e:	468e      	movgt	lr, r1
    6a20:	4696      	movle	lr, r2
    6a22:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    6a24:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a28:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    6a2c:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    6a30:	3130      	adds	r1, #48	; 0x30
    6a32:	2c09      	cmp	r4, #9
    6a34:	bfd8      	it	le
    6a36:	468e      	movle	lr, r1
    6a38:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    6a3a:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a3e:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    6a42:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    6a46:	3237      	adds	r2, #55	; 0x37
    6a48:	e008      	b.n	6a5c <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    6a4a:	bf00      	nop
    6a4c:	40001c00 	.word	0x40001c00
    6a50:	40000800 	.word	0x40000800
    6a54:	200000e7 	.word	0x200000e7
    6a58:	00022efc 	.word	0x00022efc
    6a5c:	2f09      	cmp	r7, #9
    6a5e:	bfd4      	ite	le
    6a60:	4677      	movle	r7, lr
    6a62:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    6a64:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a68:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    6a6a:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a6e:	b2da      	uxtb	r2, r3
    6a70:	b2e9      	uxtb	r1, r5
    6a72:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    6a76:	f104 0730 	add.w	r7, r4, #48	; 0x30
    6a7a:	3437      	adds	r4, #55	; 0x37
    6a7c:	2e09      	cmp	r6, #9
    6a7e:	bfd8      	it	le
    6a80:	463c      	movle	r4, r7
    6a82:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    6a86:	f102 0730 	add.w	r7, r2, #48	; 0x30
    6a8a:	3137      	adds	r1, #55	; 0x37
    6a8c:	3237      	adds	r2, #55	; 0x37
    6a8e:	2d09      	cmp	r5, #9
    6a90:	bfd8      	it	le
    6a92:	4671      	movle	r1, lr
    6a94:	2b09      	cmp	r3, #9
    6a96:	bfd4      	ite	le
    6a98:	463b      	movle	r3, r7
    6a9a:	4613      	movgt	r3, r2
    6a9c:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    6aa0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    6aa4:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    6aa8:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    6aac:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    6ab0:	f10d 030f 	add.w	r3, sp, #15
    6ab4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    6ab8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6abc:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    6ac0:	428b      	cmp	r3, r1
    6ac2:	d1f9      	bne.n	6ab8 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6ac4:	4b2a      	ldr	r3, [pc, #168]	; (6b70 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6ac6:	4a2b      	ldr	r2, [pc, #172]	; (6b74 <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6ac8:	4f2b      	ldr	r7, [pc, #172]	; (6b78 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    6aca:	4d2c      	ldr	r5, [pc, #176]	; (6b7c <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    6acc:	482c      	ldr	r0, [pc, #176]	; (6b80 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    6ace:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6ad0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6ad4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6ad8:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    6adc:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    6ae0:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    6ae4:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6ae8:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6aea:	629c      	str	r4, [r3, #40]	; 0x28
    6aec:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6aee:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6af0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    6af4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6af8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6afc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    6b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6b04:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6b08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6b0c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6b10:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    6b18:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b20:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b22:	629c      	str	r4, [r3, #40]	; 0x28
    6b24:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6b26:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6b28:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    6b2c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6b30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6b34:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    6b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6b3c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6b40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6b44:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6b48:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6b4c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6b54:	f005 fe52 	bl	c7fc <usbdc_init>
    cdcdf_acm_init();
    6b58:	f005 fb0a 	bl	c170 <cdcdf_acm_init>
    usbdc_start(single_desc);
    6b5c:	4809      	ldr	r0, [pc, #36]	; (6b84 <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    6b5e:	f005 fe7b 	bl	c858 <usbdc_start>
    usbdc_attach();
    6b62:	f005 fe91 	bl	c888 <usbdc_attach>
}
    6b66:	2001      	movs	r0, #1
    6b68:	b00c      	add	sp, #48	; 0x30
    6b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b6e:	bf00      	nop
    6b70:	41008000 	.word	0x41008000
    6b74:	e000e100 	.word	0xe000e100
    6b78:	c0000100 	.word	0xc0000100
    6b7c:	c0000200 	.word	0xc0000200
    6b80:	20000ae4 	.word	0x20000ae4
    6b84:	20000008 	.word	0x20000008

00006b88 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    6b88:	2001      	movs	r0, #1
    6b8a:	4770      	bx	lr

00006b8c <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    6b8c:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    6b8e:	f005 fb6f 	bl	c270 <cdcdf_acm_get_line_coding>
}
    6b92:	6800      	ldr	r0, [r0, #0]
    6b94:	bd08      	pop	{r3, pc}
    6b96:	bf00      	nop

00006b98 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    6b98:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    6b9a:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    6b9e:	b103      	cbz	r3, 6ba2 <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    6ba0:	bd38      	pop	{r3, r4, r5, pc}
    6ba2:	4604      	mov	r4, r0
    m_portOpen = true;
    6ba4:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6ba6:	4618      	mov	r0, r3
    m_portOpen = true;
    6ba8:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6bac:	4906      	ldr	r1, [pc, #24]	; (6bc8 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    6bae:	f005 fb31 	bl	c214 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6bb2:	4628      	mov	r0, r5
    6bb4:	4905      	ldr	r1, [pc, #20]	; (6bcc <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    6bb6:	f005 fb2d 	bl	c214 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6bba:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6bbe:	2140      	movs	r1, #64	; 0x40
}
    6bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6bc4:	f005 baf2 	b.w	c1ac <cdcdf_acm_read>
    6bc8:	000060b9 	.word	0x000060b9
    6bcc:	000062f1 	.word	0x000062f1

00006bd0 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    6bd0:	4603      	mov	r3, r0
    m_inHead = 0;
    6bd2:	2200      	movs	r2, #0
    6bd4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    6bd8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    6bdc:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6be0:	2140      	movs	r1, #64	; 0x40
    6be2:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    6be4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6be8:	f005 bae0 	b.w	c1ac <cdcdf_acm_read>

00006bec <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    6bec:	b538      	push	{r3, r4, r5, lr}
    6bee:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6bf0:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    6bf4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    6bf8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6bfc:	429a      	cmp	r2, r3
    6bfe:	d100      	bne.n	6c02 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    6c00:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6c02:	f005 fb2f 	bl	c264 <cdcdf_acm_is_enabled>
    6c06:	2800      	cmp	r0, #0
    6c08:	d0fa      	beq.n	6c00 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    6c0a:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    6c0e:	07db      	lsls	r3, r3, #31
    6c10:	d5f6      	bpl.n	6c00 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6c12:	7b6b      	ldrb	r3, [r5, #13]
    6c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6c18:	2b02      	cmp	r3, #2
    6c1a:	d0eb      	beq.n	6bf4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    6c1c:	bd38      	pop	{r3, r4, r5, pc}
    6c1e:	bf00      	nop

00006c20 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    6c20:	b538      	push	{r3, r4, r5, lr}
    6c22:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6c24:	f005 fb1e 	bl	c264 <cdcdf_acm_is_enabled>
    6c28:	4604      	mov	r4, r0
    6c2a:	b170      	cbz	r0, 6c4a <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    6c2c:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    6c30:	f014 0401 	ands.w	r4, r4, #1
    6c34:	d009      	beq.n	6c4a <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6c36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6c3a:	7b5c      	ldrb	r4, [r3, #13]
    6c3c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6c40:	f1a4 0402 	sub.w	r4, r4, #2
    6c44:	fab4 f484 	clz	r4, r4
    6c48:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    6c4a:	4803      	ldr	r0, [pc, #12]	; (6c58 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    6c4c:	2100      	movs	r1, #0
    6c4e:	f002 ffeb 	bl	9c28 <Delay_cycles>
}
    6c52:	4620      	mov	r0, r4
    6c54:	bd38      	pop	{r3, r4, r5, pc}
    6c56:	bf00      	nop
    6c58:	00124f80 	.word	0x00124f80

00006c5c <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    6c5c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    6c60:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6c64:	4293      	cmp	r3, r2
    6c66:	f000 8116 	beq.w	6e96 <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    6c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6c6e:	1c5a      	adds	r2, r3, #1
    6c70:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    6c74:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6c76:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    6c7a:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6c7c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    6c7e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6c82:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    6c86:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    6c8a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    6c8c:	bf48      	it	mi
    6c8e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6c90:	2d00      	cmp	r5, #0
    6c92:	f000 80e3 	beq.w	6e5c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    6c96:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    6c9a:	f000 80df 	beq.w	6e5c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    6c9e:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6ca2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6ca6:	42ab      	cmp	r3, r5
    6ca8:	bf28      	it	cs
    6caa:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    6cac:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    6cb0:	4299      	cmp	r1, r3
    6cb2:	bf28      	it	cs
    6cb4:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    6cb6:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6cb8:	2900      	cmp	r1, #0
    6cba:	f000 80f8 	beq.w	6eae <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    6cbe:	1d35      	adds	r5, r6, #4
    6cc0:	4405      	add	r5, r0
    6cc2:	f102 0e04 	add.w	lr, r2, #4
    6cc6:	4577      	cmp	r7, lr
    6cc8:	bf38      	it	cc
    6cca:	42aa      	cmpcc	r2, r5
    6ccc:	f0c0 80da 	bcc.w	6e84 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6cd0:	290b      	cmp	r1, #11
    6cd2:	f240 80d7 	bls.w	6e84 <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6cd6:	4255      	negs	r5, r2
    6cd8:	f015 0503 	ands.w	r5, r5, #3
    6cdc:	f000 80c3 	beq.w	6e66 <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    6ce0:	f892 e000 	ldrb.w	lr, [r2]
    6ce4:	f800 e006 	strb.w	lr, [r0, r6]
    6ce8:	2d01      	cmp	r5, #1
    6cea:	f107 0801 	add.w	r8, r7, #1
    6cee:	f102 0901 	add.w	r9, r2, #1
    6cf2:	f000 80ba 	beq.w	6e6a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6cf6:	f892 e001 	ldrb.w	lr, [r2, #1]
    6cfa:	f887 e001 	strb.w	lr, [r7, #1]
    6cfe:	2d02      	cmp	r5, #2
    6d00:	f107 0802 	add.w	r8, r7, #2
    6d04:	f102 0902 	add.w	r9, r2, #2
    6d08:	f000 80af 	beq.w	6e6a <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6d0c:	f892 e002 	ldrb.w	lr, [r2, #2]
    6d10:	f887 e002 	strb.w	lr, [r7, #2]
    6d14:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6d18:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    6d1a:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6d1e:	9700      	str	r7, [sp, #0]
    6d20:	eba1 0b05 	sub.w	fp, r1, r5
    6d24:	f1ab 0704 	sub.w	r7, fp, #4
    6d28:	08bf      	lsrs	r7, r7, #2
    6d2a:	eb06 0e05 	add.w	lr, r6, r5
    6d2e:	3701      	adds	r7, #1
    6d30:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    6d34:	4486      	add	lr, r0
    6d36:	4415      	add	r5, r2
    6d38:	f04f 0c00 	mov.w	ip, #0
    6d3c:	9401      	str	r4, [sp, #4]
    6d3e:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    6d42:	f855 4b04 	ldr.w	r4, [r5], #4
    6d46:	f84e 4b04 	str.w	r4, [lr], #4
    6d4a:	4567      	cmp	r7, ip
    6d4c:	d8f7      	bhi.n	6d3e <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    6d4e:	9d00      	ldr	r5, [sp, #0]
    6d50:	9c01      	ldr	r4, [sp, #4]
    6d52:	45d3      	cmp	fp, sl
    6d54:	4455      	add	r5, sl
    6d56:	eb08 0e0a 	add.w	lr, r8, sl
    6d5a:	eb09 0c0a 	add.w	ip, r9, sl
    6d5e:	f000 808c 	beq.w	6e7a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6d62:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    6d66:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6d6a:	1c6f      	adds	r7, r5, #1
    6d6c:	42b9      	cmp	r1, r7
    6d6e:	f240 8084 	bls.w	6e7a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6d72:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    6d74:	f89c 7001 	ldrb.w	r7, [ip, #1]
    6d78:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6d7c:	42a9      	cmp	r1, r5
    6d7e:	d97c      	bls.n	6e7a <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    6d80:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6d84:	f88e 5002 	strb.w	r5, [lr, #2]
    6d88:	1857      	adds	r7, r2, r1
    6d8a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6d8e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    6d92:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6d94:	1a6d      	subs	r5, r5, r1
        if (count) {
    6d96:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6d98:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6d9c:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    6da0:	d065      	beq.n	6e6e <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    6da2:	1d01      	adds	r1, r0, #4
    6da4:	1d3a      	adds	r2, r7, #4
    6da6:	4290      	cmp	r0, r2
    6da8:	bf38      	it	cc
    6daa:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    6dac:	4605      	mov	r5, r0
    6dae:	d375      	bcc.n	6e9c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6db0:	2b0b      	cmp	r3, #11
    6db2:	d973      	bls.n	6e9c <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6db4:	4242      	negs	r2, r0
    6db6:	f012 0203 	ands.w	r2, r2, #3
    6dba:	d060      	beq.n	6e7e <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    6dbc:	7839      	ldrb	r1, [r7, #0]
    6dbe:	7001      	strb	r1, [r0, #0]
    6dc0:	2a01      	cmp	r2, #1
    6dc2:	f100 0501 	add.w	r5, r0, #1
    6dc6:	f107 0e01 	add.w	lr, r7, #1
    6dca:	d059      	beq.n	6e80 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6dcc:	7879      	ldrb	r1, [r7, #1]
    6dce:	7041      	strb	r1, [r0, #1]
    6dd0:	2a02      	cmp	r2, #2
    6dd2:	f100 0502 	add.w	r5, r0, #2
    6dd6:	f107 0e02 	add.w	lr, r7, #2
    6dda:	d051      	beq.n	6e80 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6ddc:	78b9      	ldrb	r1, [r7, #2]
    6dde:	7081      	strb	r1, [r0, #2]
    6de0:	1cc5      	adds	r5, r0, #3
    6de2:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    6de6:	f04f 0803 	mov.w	r8, #3
    6dea:	eba3 0c02 	sub.w	ip, r3, r2
    6dee:	f1ac 0104 	sub.w	r1, ip, #4
    6df2:	0889      	lsrs	r1, r1, #2
    6df4:	1c4e      	adds	r6, r1, #1
    6df6:	4417      	add	r7, r2
    6df8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6dfc:	4402      	add	r2, r0
    6dfe:	2100      	movs	r1, #0
    6e00:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6e02:	f857 ab04 	ldr.w	sl, [r7], #4
    6e06:	f842 ab04 	str.w	sl, [r2], #4
    6e0a:	428e      	cmp	r6, r1
    6e0c:	d8f8      	bhi.n	6e00 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    6e0e:	45cc      	cmp	ip, r9
    6e10:	eb08 0209 	add.w	r2, r8, r9
    6e14:	eb05 0109 	add.w	r1, r5, r9
    6e18:	eb0e 0709 	add.w	r7, lr, r9
    6e1c:	d00d      	beq.n	6e3a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6e1e:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    6e22:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6e26:	1c55      	adds	r5, r2, #1
    6e28:	42ab      	cmp	r3, r5
    6e2a:	d906      	bls.n	6e3a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6e2c:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6e2e:	787d      	ldrb	r5, [r7, #1]
    6e30:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6e32:	4293      	cmp	r3, r2
    6e34:	d901      	bls.n	6e3a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    6e36:	78ba      	ldrb	r2, [r7, #2]
    6e38:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    6e3a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6e3e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    6e42:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6e46:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6e48:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    6e4a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6e4e:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    6e52:	b91d      	cbnz	r5, 6e5c <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6e54:	3080      	adds	r0, #128	; 0x80
    6e56:	2140      	movs	r1, #64	; 0x40
    6e58:	f005 f9a8 	bl	c1ac <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6e5c:	b662      	cpsie	i
    return retVal;
    6e5e:	b220      	sxth	r0, r4
}
    6e60:	b003      	add	sp, #12
    6e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6e66:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    6e68:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6e6a:	9500      	str	r5, [sp, #0]
    6e6c:	e758      	b.n	6d20 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6e6e:	4431      	add	r1, r6
    6e70:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    6e74:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6e78:	e7eb      	b.n	6e52 <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    6e7a:	1857      	adds	r7, r2, r1
    6e7c:	e785      	b.n	6d8a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    6e7e:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    6e80:	4690      	mov	r8, r2
    6e82:	e7b2      	b.n	6dea <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    6e84:	1e7d      	subs	r5, r7, #1
    6e86:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    6e88:	f812 eb01 	ldrb.w	lr, [r2], #1
    6e8c:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6e90:	42ba      	cmp	r2, r7
    6e92:	d1f9      	bne.n	6e88 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    6e94:	e779      	b.n	6d8a <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    6e96:	f04f 30ff 	mov.w	r0, #4294967295
    6e9a:	4770      	bx	lr
    6e9c:	1e42      	subs	r2, r0, #1
    6e9e:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    6ea0:	f817 1b01 	ldrb.w	r1, [r7], #1
    6ea4:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6ea8:	42bd      	cmp	r5, r7
    6eaa:	d1f9      	bne.n	6ea0 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    6eac:	e7c5      	b.n	6e3a <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    6eae:	4617      	mov	r7, r2
    6eb0:	e76f      	b.n	6d92 <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    6eb2:	bf00      	nop

00006eb4 <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    6eb4:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6eb8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    6ebc:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    6ebe:	bf1a      	itte	ne
    6ec0:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    6ec4:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    6ec6:	f04f 30ff 	moveq.w	r0, #4294967295
}
    6eca:	4770      	bx	lr

00006ecc <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    6ecc:	b570      	push	{r4, r5, r6, lr}
    6ece:	4604      	mov	r4, r0
    6ed0:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6ed2:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6ed6:	f005 f9c5 	bl	c264 <cdcdf_acm_is_enabled>
    6eda:	b350      	cbz	r0, 6f32 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    6edc:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    6ee0:	f010 0001 	ands.w	r0, r0, #1
    6ee4:	d025      	beq.n	6f32 <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6ee6:	7b6b      	ldrb	r3, [r5, #13]
    6ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6eec:	2b02      	cmp	r3, #2
    6eee:	d001      	beq.n	6ef4 <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    6ef0:	2000      	movs	r0, #0
    6ef2:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    6ef4:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    6ef8:	b900      	cbnz	r0, 6efc <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    6efa:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    6efc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    6f00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    6f04:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6f06:	1e5a      	subs	r2, r3, #1
    6f08:	d40e      	bmi.n	6f28 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    6f0a:	2a00      	cmp	r2, #0
    6f0c:	d0e3      	beq.n	6ed6 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    6f0e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6f12:	4423      	add	r3, r4
    6f14:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    6f18:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6f1c:	3301      	adds	r3, #1
    6f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6f22:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    6f26:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    6f28:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    6f2c:	2a00      	cmp	r2, #0
    6f2e:	d0d2      	beq.n	6ed6 <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    6f30:	e7ed      	b.n	6f0e <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    6f32:	bd70      	pop	{r4, r5, r6, pc}

00006f34 <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    6f34:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6f38:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    6f3c:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    6f3e:	bf48      	it	mi
    6f40:	3040      	addmi	r0, #64	; 0x40
}
    6f42:	4770      	bx	lr

00006f44 <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    6f44:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    6f48:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    6f4c:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    6f4e:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    6f50:	bf48      	it	mi
    6f52:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    6f56:	4770      	bx	lr

00006f58 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    6f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6f5c:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    6f60:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    6f62:	f04f 0101 	mov.w	r1, #1
    6f66:	f3bf 8f5b 	dmb	ish
    6f6a:	e8d3 2f4f 	ldrexb	r2, [r3]
    6f6e:	e8c3 1f44 	strexb	r4, r1, [r3]
    6f72:	2c00      	cmp	r4, #0
    6f74:	d1f9      	bne.n	6f6a <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    6f76:	f3bf 8f5b 	dmb	ish
    6f7a:	f012 0fff 	tst.w	r2, #255	; 0xff
    6f7e:	f040 80e4 	bne.w	714a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    6f82:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    6f86:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    6f8a:	428e      	cmp	r6, r1
    6f8c:	f000 81b6 	beq.w	72fc <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6f90:	f100 0340 	add.w	r3, r0, #64	; 0x40
    6f94:	eb03 0706 	add.w	r7, r3, r6
    6f98:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    6f9c:	f0c0 80d8 	bcc.w	7150 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    6fa0:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    6fa4:	4411      	add	r1, r2
    6fa6:	2940      	cmp	r1, #64	; 0x40
    6fa8:	bf28      	it	cs
    6faa:	2140      	movcs	r1, #64	; 0x40
    6fac:	428a      	cmp	r2, r1
    6fae:	bf28      	it	cs
    6fb0:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6fb2:	2a00      	cmp	r2, #0
    6fb4:	f000 81c7 	beq.w	7346 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    6fb8:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    6fbc:	f106 0444 	add.w	r4, r6, #68	; 0x44
    6fc0:	eb00 080e 	add.w	r8, r0, lr
    6fc4:	4404      	add	r4, r0
    6fc6:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    6fca:	45e0      	cmp	r8, ip
    6fcc:	bf38      	it	cc
    6fce:	42a5      	cmpcc	r5, r4
    6fd0:	f0c0 81ae 	bcc.w	7330 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6fd4:	2a0b      	cmp	r2, #11
    6fd6:	f240 81ab 	bls.w	7330 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    6fda:	426c      	negs	r4, r5
    6fdc:	f014 0403 	ands.w	r4, r4, #3
    6fe0:	f000 817f 	beq.w	72e2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    6fe4:	5d9e      	ldrb	r6, [r3, r6]
    6fe6:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    6fea:	2c01      	cmp	r4, #1
    6fec:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    6ff0:	f107 0801 	add.w	r8, r7, #1
    6ff4:	f000 817b 	beq.w	72ee <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    6ff8:	787e      	ldrb	r6, [r7, #1]
    6ffa:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    6ffe:	2c02      	cmp	r4, #2
    7000:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    7004:	f107 0802 	add.w	r8, r7, #2
    7008:	f000 8171 	beq.w	72ee <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    700c:	78be      	ldrb	r6, [r7, #2]
    700e:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7012:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    7014:	f107 0803 	add.w	r8, r7, #3
    7018:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    701c:	9601      	str	r6, [sp, #4]
    701e:	eba2 0b04 	sub.w	fp, r2, r4
    7022:	f1ab 0704 	sub.w	r7, fp, #4
    7026:	08bf      	lsrs	r7, r7, #2
    7028:	eb0e 0604 	add.w	r6, lr, r4
    702c:	3701      	adds	r7, #1
    702e:	34c0      	adds	r4, #192	; 0xc0
    7030:	4406      	add	r6, r0
    7032:	4404      	add	r4, r0
    7034:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7038:	f04f 0e00 	mov.w	lr, #0
    703c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7040:	f856 ab04 	ldr.w	sl, [r6], #4
    7044:	f844 ab04 	str.w	sl, [r4], #4
    7048:	45be      	cmp	lr, r7
    704a:	d3f7      	bcc.n	703c <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    704c:	9c01      	ldr	r4, [sp, #4]
    704e:	45cb      	cmp	fp, r9
    7050:	444c      	add	r4, r9
    7052:	eb08 0e09 	add.w	lr, r8, r9
    7056:	eb0c 0609 	add.w	r6, ip, r9
    705a:	d00f      	beq.n	707c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    705c:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7060:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7064:	1c67      	adds	r7, r4, #1
    7066:	42ba      	cmp	r2, r7
    7068:	d908      	bls.n	707c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    706a:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    706c:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7070:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7072:	42a2      	cmp	r2, r4
    7074:	d902      	bls.n	707c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    7076:	f89e 4002 	ldrb.w	r4, [lr, #2]
    707a:	70b4      	strb	r4, [r6, #2]
    707c:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    707e:	1a8a      	subs	r2, r1, r2
    7080:	f000 811a 	beq.w	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7084:	1d26      	adds	r6, r4, #4
    7086:	f100 0744 	add.w	r7, r0, #68	; 0x44
    708a:	42bc      	cmp	r4, r7
    708c:	bf38      	it	cc
    708e:	42b3      	cmpcc	r3, r6
    7090:	f0c0 8145 	bcc.w	731e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    7094:	2a0b      	cmp	r2, #11
    7096:	f240 8142 	bls.w	731e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    709a:	425f      	negs	r7, r3
    709c:	f017 0703 	ands.w	r7, r7, #3
    70a0:	f000 8129 	beq.w	72f6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    70a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    70a8:	7023      	strb	r3, [r4, #0]
    70aa:	2f01      	cmp	r7, #1
    70ac:	f104 0c01 	add.w	ip, r4, #1
    70b0:	f100 0341 	add.w	r3, r0, #65	; 0x41
    70b4:	f000 811d 	beq.w	72f2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    70b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    70bc:	7063      	strb	r3, [r4, #1]
    70be:	2f02      	cmp	r7, #2
    70c0:	f104 0c02 	add.w	ip, r4, #2
    70c4:	f100 0342 	add.w	r3, r0, #66	; 0x42
    70c8:	f000 8113 	beq.w	72f2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    70cc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    70d0:	70a3      	strb	r3, [r4, #2]
    70d2:	f104 0c03 	add.w	ip, r4, #3
    70d6:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    70da:	f04f 0903 	mov.w	r9, #3
    70de:	eba2 0807 	sub.w	r8, r2, r7
    70e2:	f1a8 0e04 	sub.w	lr, r8, #4
    70e6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    70ea:	f107 0640 	add.w	r6, r7, #64	; 0x40
    70ee:	f10e 0e01 	add.w	lr, lr, #1
    70f2:	443c      	add	r4, r7
    70f4:	4406      	add	r6, r0
    70f6:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    70fa:	2700      	movs	r7, #0
    70fc:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    70fe:	f856 bb04 	ldr.w	fp, [r6], #4
    7102:	f844 bb04 	str.w	fp, [r4], #4
    7106:	45be      	cmp	lr, r7
    7108:	d8f8      	bhi.n	70fc <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    710a:	45d0      	cmp	r8, sl
    710c:	eb09 040a 	add.w	r4, r9, sl
    7110:	eb03 070a 	add.w	r7, r3, sl
    7114:	eb0c 060a 	add.w	r6, ip, sl
    7118:	f000 80ce 	beq.w	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    711c:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7120:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7124:	1c63      	adds	r3, r4, #1
    7126:	429a      	cmp	r2, r3
    7128:	f240 80c6 	bls.w	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    712c:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    712e:	787b      	ldrb	r3, [r7, #1]
    7130:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7132:	42a2      	cmp	r2, r4
    7134:	f240 80c0 	bls.w	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    7138:	78bb      	ldrb	r3, [r7, #2]
    713a:	70b3      	strb	r3, [r6, #2]
    713c:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    713e:	4628      	mov	r0, r5
    7140:	f005 f848 	bl	c1d4 <cdcdf_acm_write>
    7144:	2800      	cmp	r0, #0
    7146:	f040 80be 	bne.w	72c6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    714a:	b003      	add	sp, #12
    714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    7150:	1b89      	subs	r1, r1, r6
    7152:	f106 0240 	add.w	r2, r6, #64	; 0x40
    7156:	f106 0444 	add.w	r4, r6, #68	; 0x44
    715a:	2940      	cmp	r1, #64	; 0x40
    715c:	eb00 0c02 	add.w	ip, r0, r2
    7160:	4404      	add	r4, r0
    7162:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    7166:	bf28      	it	cs
    7168:	2140      	movcs	r1, #64	; 0x40
    716a:	45f4      	cmp	ip, lr
    716c:	bf38      	it	cc
    716e:	42a5      	cmpcc	r5, r4
    7170:	f0c0 80cb 	bcc.w	730a <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    7174:	290b      	cmp	r1, #11
    7176:	f240 80c8 	bls.w	730a <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    717a:	426c      	negs	r4, r5
    717c:	f014 0403 	ands.w	r4, r4, #3
    7180:	f000 80ab 	beq.w	72da <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    7184:	5d9b      	ldrb	r3, [r3, r6]
    7186:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    718a:	2c01      	cmp	r4, #1
    718c:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7190:	f107 0e01 	add.w	lr, r7, #1
    7194:	f000 80a9 	beq.w	72ea <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7198:	787b      	ldrb	r3, [r7, #1]
    719a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    719e:	2c02      	cmp	r4, #2
    71a0:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    71a4:	f107 0e02 	add.w	lr, r7, #2
    71a8:	f000 809f 	beq.w	72ea <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    71ac:	78bb      	ldrb	r3, [r7, #2]
    71ae:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    71b2:	f107 0e03 	add.w	lr, r7, #3
    71b6:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    71ba:	f04f 0c03 	mov.w	ip, #3
    71be:	1913      	adds	r3, r2, r4
    71c0:	4403      	add	r3, r0
    71c2:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    71c6:	681a      	ldr	r2, [r3, #0]
    71c8:	f840 2008 	str.w	r2, [r0, r8]
    71cc:	1b0f      	subs	r7, r1, r4
    71ce:	1f3a      	subs	r2, r7, #4
    71d0:	0892      	lsrs	r2, r2, #2
    71d2:	eb00 0408 	add.w	r4, r0, r8
    71d6:	3201      	adds	r2, #1
    71d8:	f8d3 8004 	ldr.w	r8, [r3, #4]
    71dc:	f8c4 8004 	str.w	r8, [r4, #4]
    71e0:	2a02      	cmp	r2, #2
    71e2:	ea4f 0882 	mov.w	r8, r2, lsl #2
    71e6:	d04f      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    71e8:	f8d3 9008 	ldr.w	r9, [r3, #8]
    71ec:	f8c4 9008 	str.w	r9, [r4, #8]
    71f0:	2a03      	cmp	r2, #3
    71f2:	d049      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    71f4:	f8d3 900c 	ldr.w	r9, [r3, #12]
    71f8:	f8c4 900c 	str.w	r9, [r4, #12]
    71fc:	2a04      	cmp	r2, #4
    71fe:	d043      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7200:	f8d3 9010 	ldr.w	r9, [r3, #16]
    7204:	f8c4 9010 	str.w	r9, [r4, #16]
    7208:	2a05      	cmp	r2, #5
    720a:	d03d      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    720c:	f8d3 9014 	ldr.w	r9, [r3, #20]
    7210:	f8c4 9014 	str.w	r9, [r4, #20]
    7214:	2a06      	cmp	r2, #6
    7216:	d037      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7218:	f8d3 9018 	ldr.w	r9, [r3, #24]
    721c:	f8c4 9018 	str.w	r9, [r4, #24]
    7220:	2a07      	cmp	r2, #7
    7222:	d031      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7224:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7228:	f8c4 901c 	str.w	r9, [r4, #28]
    722c:	2a08      	cmp	r2, #8
    722e:	d02b      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7230:	f8d3 9020 	ldr.w	r9, [r3, #32]
    7234:	f8c4 9020 	str.w	r9, [r4, #32]
    7238:	2a09      	cmp	r2, #9
    723a:	d025      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    723c:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7240:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    7244:	2a0a      	cmp	r2, #10
    7246:	d01f      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7248:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    724c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7250:	2a0b      	cmp	r2, #11
    7252:	d019      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7254:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    7258:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    725c:	2a0c      	cmp	r2, #12
    725e:	d013      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7260:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    7264:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7268:	2a0d      	cmp	r2, #13
    726a:	d00d      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    726c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7270:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    7274:	2a0e      	cmp	r2, #14
    7276:	d007      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7278:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    727c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7280:	2a0f      	cmp	r2, #15
    7282:	d001      	beq.n	7288 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7286:	63e3      	str	r3, [r4, #60]	; 0x3c
    7288:	4547      	cmp	r7, r8
    728a:	eb0c 0308 	add.w	r3, ip, r8
    728e:	eb06 0408 	add.w	r4, r6, r8
    7292:	eb0e 0c08 	add.w	ip, lr, r8
    7296:	d00f      	beq.n	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7298:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    729c:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    72a0:	1c5a      	adds	r2, r3, #1
    72a2:	4291      	cmp	r1, r2
    72a4:	d908      	bls.n	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    72a6:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    72a8:	f89c 2001 	ldrb.w	r2, [ip, #1]
    72ac:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    72ae:	4299      	cmp	r1, r3
    72b0:	d902      	bls.n	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    72b2:	f89c 3002 	ldrb.w	r3, [ip, #2]
    72b6:	70a3      	strb	r3, [r4, #2]
    72b8:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    72ba:	4628      	mov	r0, r5
    72bc:	f004 ff8a 	bl	c1d4 <cdcdf_acm_write>
    72c0:	2800      	cmp	r0, #0
    72c2:	f43f af42 	beq.w	714a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    72c6:	f3bf 8f5b 	dmb	ish
    72ca:	2300      	movs	r3, #0
    72cc:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    72d0:	f3bf 8f5b 	dmb	ish
}
    72d4:	b003      	add	sp, #12
    72d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    72da:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    72dc:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    72de:	462e      	mov	r6, r5
    72e0:	e76d      	b.n	71be <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    72e2:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72e4:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    72e6:	46ac      	mov	ip, r5
    72e8:	e699      	b.n	701e <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    72ea:	46a4      	mov	ip, r4
    72ec:	e767      	b.n	71be <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72ee:	9401      	str	r4, [sp, #4]
    72f0:	e695      	b.n	701e <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72f2:	46b9      	mov	r9, r7
    72f4:	e6f3      	b.n	70de <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    72f6:	46b9      	mov	r9, r7
    72f8:	46a4      	mov	ip, r4
    72fa:	e6f0      	b.n	70de <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    72fc:	f3bf 8f5b 	dmb	ish
    7300:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7304:	f3bf 8f5b 	dmb	ish
        return;
    7308:	e71f      	b.n	714a <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    730a:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    730e:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7310:	f817 2b01 	ldrb.w	r2, [r7], #1
    7314:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7318:	42a7      	cmp	r7, r4
    731a:	d1f9      	bne.n	7310 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    731c:	e7cc      	b.n	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    731e:	3c01      	subs	r4, #1
    7320:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7322:	f813 6b01 	ldrb.w	r6, [r3], #1
    7326:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    732a:	4293      	cmp	r3, r2
    732c:	d1f9      	bne.n	7322 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    732e:	e7c3      	b.n	72b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7330:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7334:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7338:	f817 6b01 	ldrb.w	r6, [r7], #1
    733c:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7340:	45be      	cmp	lr, r7
    7342:	d1f9      	bne.n	7338 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    7344:	e69a      	b.n	707c <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7346:	462c      	mov	r4, r5
    7348:	e699      	b.n	707e <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    734a:	bf00      	nop

0000734c <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    734c:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    734e:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    7352:	b903      	cbnz	r3, 7356 <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    7354:	bd38      	pop	{r3, r4, r5, pc}
    7356:	4605      	mov	r5, r0
    TxPump();
    7358:	f7ff fdfe 	bl	6f58 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    735c:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    7360:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    7364:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7368:	429a      	cmp	r2, r3
    736a:	d00b      	beq.n	7384 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    736c:	f004 ff7a 	bl	c264 <cdcdf_acm_is_enabled>
    7370:	b140      	cbz	r0, 7384 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    7372:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    7376:	07db      	lsls	r3, r3, #31
    7378:	d504      	bpl.n	7384 <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    737a:	7b63      	ldrb	r3, [r4, #13]
    737c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7380:	2b02      	cmp	r3, #2
    7382:	d0ed      	beq.n	7360 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    7384:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7386:	4621      	mov	r1, r4
    m_portOpen = false;
    7388:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    738c:	4620      	mov	r0, r4
    738e:	f004 ff41 	bl	c214 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    7392:	4621      	mov	r1, r4
    7394:	2001      	movs	r0, #1
    7396:	f004 ff3d 	bl	c214 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    739a:	f004 ff2f 	bl	c1fc <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    739e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    73a2:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    73a6:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    73aa:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    73ae:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    73b2:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    73b6:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    73ba:	bd38      	pop	{r3, r4, r5, pc}

000073bc <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    73bc:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    73c0:	b103      	cbz	r3, 73c4 <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    73c2:	4770      	bx	lr
    73c4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    73c8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    73cc:	429a      	cmp	r2, r3
    73ce:	f000 80fd 	beq.w	75cc <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    73d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    73d6:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    73da:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    73dc:	f04f 0101 	mov.w	r1, #1
    73e0:	f3bf 8f5b 	dmb	ish
    73e4:	e8d3 2f4f 	ldrexb	r2, [r3]
    73e8:	e8c3 1f44 	strexb	r4, r1, [r3]
    73ec:	2c00      	cmp	r4, #0
    73ee:	d1f9      	bne.n	73e4 <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    73f0:	f3bf 8f5b 	dmb	ish
    73f4:	f012 0fff 	tst.w	r2, #255	; 0xff
    73f8:	f040 80e5 	bne.w	75c6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    73fc:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7400:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    7404:	428e      	cmp	r6, r1
    7406:	f000 81ab 	beq.w	7760 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    740a:	f100 0340 	add.w	r3, r0, #64	; 0x40
    740e:	eb03 0706 	add.w	r7, r3, r6
    7412:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    7416:	f0c0 80da 	bcc.w	75ce <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    741a:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    741e:	4411      	add	r1, r2
    7420:	2940      	cmp	r1, #64	; 0x40
    7422:	bf28      	it	cs
    7424:	2140      	movcs	r1, #64	; 0x40
    7426:	428a      	cmp	r2, r1
    7428:	bf28      	it	cs
    742a:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    742c:	2a00      	cmp	r2, #0
    742e:	f000 81bc 	beq.w	77aa <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    7432:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    7436:	f106 0444 	add.w	r4, r6, #68	; 0x44
    743a:	eb00 080e 	add.w	r8, r0, lr
    743e:	4404      	add	r4, r0
    7440:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    7444:	45e0      	cmp	r8, ip
    7446:	bf38      	it	cc
    7448:	42a5      	cmpcc	r5, r4
    744a:	f0c0 81a3 	bcc.w	7794 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    744e:	2a0b      	cmp	r2, #11
    7450:	f240 81a0 	bls.w	7794 <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    7454:	426c      	negs	r4, r5
    7456:	f014 0403 	ands.w	r4, r4, #3
    745a:	f000 8177 	beq.w	774c <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    745e:	5d9e      	ldrb	r6, [r3, r6]
    7460:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    7464:	2c01      	cmp	r4, #1
    7466:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    746a:	f107 0801 	add.w	r8, r7, #1
    746e:	f000 8171 	beq.w	7754 <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    7472:	787e      	ldrb	r6, [r7, #1]
    7474:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7478:	2c02      	cmp	r4, #2
    747a:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    747e:	f107 0802 	add.w	r8, r7, #2
    7482:	f000 8165 	beq.w	7750 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    7486:	78be      	ldrb	r6, [r7, #2]
    7488:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    748c:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    748e:	f107 0803 	add.w	r8, r7, #3
    7492:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7496:	9601      	str	r6, [sp, #4]
    7498:	eba2 0b04 	sub.w	fp, r2, r4
    749c:	f1ab 0704 	sub.w	r7, fp, #4
    74a0:	08bf      	lsrs	r7, r7, #2
    74a2:	eb0e 0604 	add.w	r6, lr, r4
    74a6:	3701      	adds	r7, #1
    74a8:	34c0      	adds	r4, #192	; 0xc0
    74aa:	4406      	add	r6, r0
    74ac:	4404      	add	r4, r0
    74ae:	ea4f 0987 	mov.w	r9, r7, lsl #2
    74b2:	f04f 0e00 	mov.w	lr, #0
    74b6:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    74ba:	f856 ab04 	ldr.w	sl, [r6], #4
    74be:	f844 ab04 	str.w	sl, [r4], #4
    74c2:	45be      	cmp	lr, r7
    74c4:	d3f7      	bcc.n	74b6 <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    74c6:	9c01      	ldr	r4, [sp, #4]
    74c8:	45cb      	cmp	fp, r9
    74ca:	444c      	add	r4, r9
    74cc:	eb0c 0609 	add.w	r6, ip, r9
    74d0:	eb08 0e09 	add.w	lr, r8, r9
    74d4:	d00f      	beq.n	74f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    74d6:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    74da:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74de:	1c67      	adds	r7, r4, #1
    74e0:	42ba      	cmp	r2, r7
    74e2:	d908      	bls.n	74f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    74e4:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    74e6:	f89e 7001 	ldrb.w	r7, [lr, #1]
    74ea:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74ec:	42a2      	cmp	r2, r4
    74ee:	d902      	bls.n	74f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    74f0:	f89e 4002 	ldrb.w	r4, [lr, #2]
    74f4:	70b4      	strb	r4, [r6, #2]
    74f6:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74f8:	1a8a      	subs	r2, r1, r2
    74fa:	d058      	beq.n	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    74fc:	1d26      	adds	r6, r4, #4
    74fe:	f100 0744 	add.w	r7, r0, #68	; 0x44
    7502:	42bc      	cmp	r4, r7
    7504:	bf38      	it	cc
    7506:	42b3      	cmpcc	r3, r6
    7508:	f0c0 813b 	bcc.w	7782 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    750c:	2a0b      	cmp	r2, #11
    750e:	f240 8138 	bls.w	7782 <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    7512:	425f      	negs	r7, r3
    7514:	f017 0703 	ands.w	r7, r7, #3
    7518:	f000 811f 	beq.w	775a <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    751c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7520:	7023      	strb	r3, [r4, #0]
    7522:	2f01      	cmp	r7, #1
    7524:	f104 0c01 	add.w	ip, r4, #1
    7528:	f100 0341 	add.w	r3, r0, #65	; 0x41
    752c:	f000 8116 	beq.w	775c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7530:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7534:	7063      	strb	r3, [r4, #1]
    7536:	2f02      	cmp	r7, #2
    7538:	f104 0c02 	add.w	ip, r4, #2
    753c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7540:	f000 810c 	beq.w	775c <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    7544:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7548:	70a3      	strb	r3, [r4, #2]
    754a:	f104 0c03 	add.w	ip, r4, #3
    754e:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7552:	f04f 0903 	mov.w	r9, #3
    7556:	eba2 0807 	sub.w	r8, r2, r7
    755a:	f1a8 0e04 	sub.w	lr, r8, #4
    755e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    7562:	f107 0640 	add.w	r6, r7, #64	; 0x40
    7566:	f10e 0e01 	add.w	lr, lr, #1
    756a:	443c      	add	r4, r7
    756c:	4406      	add	r6, r0
    756e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    7572:	2700      	movs	r7, #0
    7574:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7576:	f856 bb04 	ldr.w	fp, [r6], #4
    757a:	f844 bb04 	str.w	fp, [r4], #4
    757e:	45be      	cmp	lr, r7
    7580:	d8f8      	bhi.n	7574 <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    7582:	45d0      	cmp	r8, sl
    7584:	eb09 040a 	add.w	r4, r9, sl
    7588:	eb0c 060a 	add.w	r6, ip, sl
    758c:	eb03 070a 	add.w	r7, r3, sl
    7590:	d00d      	beq.n	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7592:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7596:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    759a:	1c63      	adds	r3, r4, #1
    759c:	429a      	cmp	r2, r3
    759e:	d906      	bls.n	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    75a0:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    75a2:	787b      	ldrb	r3, [r7, #1]
    75a4:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    75a6:	42a2      	cmp	r2, r4
    75a8:	d901      	bls.n	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    75aa:	78bb      	ldrb	r3, [r7, #2]
    75ac:	70b3      	strb	r3, [r6, #2]
    75ae:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    75b0:	4628      	mov	r0, r5
    75b2:	f004 fe0f 	bl	c1d4 <cdcdf_acm_write>
    75b6:	b130      	cbz	r0, 75c6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    75b8:	f3bf 8f5b 	dmb	ish
    75bc:	2300      	movs	r3, #0
    75be:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    75c2:	f3bf 8f5b 	dmb	ish
}
    75c6:	b003      	add	sp, #12
    75c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75cc:	4770      	bx	lr
        count = min(count, tail - head);
    75ce:	1b89      	subs	r1, r1, r6
    75d0:	f106 0240 	add.w	r2, r6, #64	; 0x40
    75d4:	f106 0444 	add.w	r4, r6, #68	; 0x44
    75d8:	2940      	cmp	r1, #64	; 0x40
    75da:	eb00 0c02 	add.w	ip, r0, r2
    75de:	4404      	add	r4, r0
    75e0:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    75e4:	bf28      	it	cs
    75e6:	2140      	movcs	r1, #64	; 0x40
    75e8:	45f4      	cmp	ip, lr
    75ea:	bf38      	it	cc
    75ec:	42a5      	cmpcc	r5, r4
    75ee:	f0c0 80be 	bcc.w	776e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    75f2:	290b      	cmp	r1, #11
    75f4:	f240 80bb 	bls.w	776e <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    75f8:	426c      	negs	r4, r5
    75fa:	f014 0403 	ands.w	r4, r4, #3
    75fe:	f000 809e 	beq.w	773e <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    7602:	5d9b      	ldrb	r3, [r3, r6]
    7604:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    7608:	2c01      	cmp	r4, #1
    760a:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    760e:	f107 0e01 	add.w	lr, r7, #1
    7612:	f000 8096 	beq.w	7742 <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    7616:	787b      	ldrb	r3, [r7, #1]
    7618:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    761c:	2c02      	cmp	r4, #2
    761e:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    7622:	f107 0e02 	add.w	lr, r7, #2
    7626:	f000 808e 	beq.w	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    762a:	78bb      	ldrb	r3, [r7, #2]
    762c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7630:	f107 0e03 	add.w	lr, r7, #3
    7634:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7638:	f04f 0c03 	mov.w	ip, #3
    763c:	1913      	adds	r3, r2, r4
    763e:	4403      	add	r3, r0
    7640:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    7644:	681a      	ldr	r2, [r3, #0]
    7646:	f840 2008 	str.w	r2, [r0, r8]
    764a:	1b0f      	subs	r7, r1, r4
    764c:	1f3a      	subs	r2, r7, #4
    764e:	0892      	lsrs	r2, r2, #2
    7650:	eb00 0408 	add.w	r4, r0, r8
    7654:	3201      	adds	r2, #1
    7656:	f8d3 8004 	ldr.w	r8, [r3, #4]
    765a:	f8c4 8004 	str.w	r8, [r4, #4]
    765e:	2a02      	cmp	r2, #2
    7660:	ea4f 0882 	mov.w	r8, r2, lsl #2
    7664:	d04f      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7666:	f8d3 9008 	ldr.w	r9, [r3, #8]
    766a:	f8c4 9008 	str.w	r9, [r4, #8]
    766e:	2a03      	cmp	r2, #3
    7670:	d049      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7672:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7676:	f8c4 900c 	str.w	r9, [r4, #12]
    767a:	2a04      	cmp	r2, #4
    767c:	d043      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    767e:	f8d3 9010 	ldr.w	r9, [r3, #16]
    7682:	f8c4 9010 	str.w	r9, [r4, #16]
    7686:	2a05      	cmp	r2, #5
    7688:	d03d      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    768a:	f8d3 9014 	ldr.w	r9, [r3, #20]
    768e:	f8c4 9014 	str.w	r9, [r4, #20]
    7692:	2a06      	cmp	r2, #6
    7694:	d037      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7696:	f8d3 9018 	ldr.w	r9, [r3, #24]
    769a:	f8c4 9018 	str.w	r9, [r4, #24]
    769e:	2a07      	cmp	r2, #7
    76a0:	d031      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76a2:	f8d3 901c 	ldr.w	r9, [r3, #28]
    76a6:	f8c4 901c 	str.w	r9, [r4, #28]
    76aa:	2a08      	cmp	r2, #8
    76ac:	d02b      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76ae:	f8d3 9020 	ldr.w	r9, [r3, #32]
    76b2:	f8c4 9020 	str.w	r9, [r4, #32]
    76b6:	2a09      	cmp	r2, #9
    76b8:	d025      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76ba:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    76be:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    76c2:	2a0a      	cmp	r2, #10
    76c4:	d01f      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76c6:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    76ca:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    76ce:	2a0b      	cmp	r2, #11
    76d0:	d019      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76d2:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    76d6:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    76da:	2a0c      	cmp	r2, #12
    76dc:	d013      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76de:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    76e2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    76e6:	2a0d      	cmp	r2, #13
    76e8:	d00d      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76ea:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    76ee:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    76f2:	2a0e      	cmp	r2, #14
    76f4:	d007      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    76f6:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    76fa:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    76fe:	2a0f      	cmp	r2, #15
    7700:	d001      	beq.n	7706 <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7704:	63e3      	str	r3, [r4, #60]	; 0x3c
    7706:	4547      	cmp	r7, r8
    7708:	eb0c 0308 	add.w	r3, ip, r8
    770c:	eb06 0408 	add.w	r4, r6, r8
    7710:	eb0e 0c08 	add.w	ip, lr, r8
    7714:	f43f af4b 	beq.w	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7718:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    771c:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7720:	1c5a      	adds	r2, r3, #1
    7722:	4291      	cmp	r1, r2
    7724:	f67f af43 	bls.w	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7728:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    772a:	f89c 2001 	ldrb.w	r2, [ip, #1]
    772e:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7730:	4299      	cmp	r1, r3
    7732:	f67f af3c 	bls.w	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7736:	f89c 3002 	ldrb.w	r3, [ip, #2]
    773a:	70a3      	strb	r3, [r4, #2]
    773c:	e737      	b.n	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    773e:	46be      	mov	lr, r7
    7740:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7742:	46a4      	mov	ip, r4
    7744:	e77a      	b.n	763c <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    7746:	f04f 0c02 	mov.w	ip, #2
    774a:	e777      	b.n	763c <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    774c:	46b8      	mov	r8, r7
    774e:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7750:	9401      	str	r4, [sp, #4]
    7752:	e6a1      	b.n	7498 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    7754:	2601      	movs	r6, #1
    7756:	9601      	str	r6, [sp, #4]
    7758:	e69e      	b.n	7498 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    775a:	46a4      	mov	ip, r4
    775c:	46b9      	mov	r9, r7
    775e:	e6fa      	b.n	7556 <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    7760:	f3bf 8f5b 	dmb	ish
    7764:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7768:	f3bf 8f5b 	dmb	ish
    776c:	e72b      	b.n	75c6 <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    776e:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    7772:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    7774:	f817 2b01 	ldrb.w	r2, [r7], #1
    7778:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    777c:	42a7      	cmp	r7, r4
    777e:	d1f9      	bne.n	7774 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7780:	e715      	b.n	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7782:	3c01      	subs	r4, #1
    7784:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    7786:	f813 6b01 	ldrb.w	r6, [r3], #1
    778a:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    778e:	4293      	cmp	r3, r2
    7790:	d1f9      	bne.n	7786 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    7792:	e70c      	b.n	75ae <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7794:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7798:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    779c:	f817 6b01 	ldrb.w	r6, [r7], #1
    77a0:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    77a4:	45be      	cmp	lr, r7
    77a6:	d1f9      	bne.n	779c <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    77a8:	e6a5      	b.n	74f6 <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    77aa:	462c      	mov	r4, r5
    77ac:	e6a4      	b.n	74f8 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    77ae:	bf00      	nop

000077b0 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    77b0:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    77b2:	f7fe ff85 	bl	66c0 <_ZN9ClearCore10UsbManager8InstanceEv>
    77b6:	4b01      	ldr	r3, [pc, #4]	; (77bc <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    77b8:	6018      	str	r0, [r3, #0]
    77ba:	bd08      	pop	{r3, pc}
    77bc:	20000ae0 	.word	0x20000ae0

000077c0 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    77c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    77c2:	4770      	bx	lr

000077c4 <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    77c4:	7900      	ldrb	r0, [r0, #4]
    77c6:	4770      	bx	lr

000077c8 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    77c8:	2001      	movs	r0, #1
    77ca:	4770      	bx	lr

000077cc <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    77cc:	b510      	push	{r4, lr}
    77ce:	4604      	mov	r4, r0
    DigitalIn() {};
    77d0:	f007 f800 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    77d4:	4620      	mov	r0, r4
    77d6:	4b0c      	ldr	r3, [pc, #48]	; (7808 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    77d8:	f840 3b30 	str.w	r3, [r0], #48
    77dc:	f004 f8a2 	bl	b924 <_ZN9ClearCore13StepGeneratorC1Ev>
    77e0:	4a0a      	ldr	r2, [pc, #40]	; (780c <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    77e2:	6022      	str	r2, [r4, #0]
            reg = 0;
    77e4:	2300      	movs	r3, #0
    MotorDriver() {};
    77e6:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    77e8:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    77ec:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    77f0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    77f4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    77f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    77fc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    7800:	6322      	str	r2, [r4, #48]	; 0x30
    7802:	4620      	mov	r0, r4
    7804:	bd10      	pop	{r4, pc}
    7806:	bf00      	nop
    7808:	0002355c 	.word	0x0002355c
    780c:	00022da0 	.word	0x00022da0

00007810 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    7810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7814:	4bbf      	ldr	r3, [pc, #764]	; (7b14 <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    7816:	f8df a340 	ldr.w	sl, [pc, #832]	; 7b58 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    781a:	4abf      	ldr	r2, [pc, #764]	; (7b18 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    781c:	49bf      	ldr	r1, [pc, #764]	; (7b1c <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    781e:	4dc0      	ldr	r5, [pc, #768]	; (7b20 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    7820:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7822:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    7824:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    7826:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    782a:	7007      	strb	r7, [r0, #0]
    782c:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    782e:	e88d 0108 	stmia.w	sp, {r3, r8}
    7832:	4620      	mov	r0, r4
    7834:	4bbb      	ldr	r3, [pc, #748]	; (7b24 <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    7836:	f00a fb0f 	bl	11e58 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    783a:	68a1      	ldr	r1, [r4, #8]
    783c:	6862      	ldr	r2, [r4, #4]
    783e:	7b23      	ldrb	r3, [r4, #12]
    7840:	f8ca 1008 	str.w	r1, [sl, #8]
    7844:	f8ca 2004 	str.w	r2, [sl, #4]
    7848:	6921      	ldr	r1, [r4, #16]
    784a:	6962      	ldr	r2, [r4, #20]
    784c:	f88a 300c 	strb.w	r3, [sl, #12]
    7850:	69a3      	ldr	r3, [r4, #24]
    7852:	f8ca 1010 	str.w	r1, [sl, #16]
    7856:	f8ca 2014 	str.w	r2, [sl, #20]
    785a:	69e1      	ldr	r1, [r4, #28]
    785c:	6a22      	ldr	r2, [r4, #32]
    785e:	f8ca 3018 	str.w	r3, [sl, #24]
    7862:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7864:	f8ca 101c 	str.w	r1, [sl, #28]
    7868:	f8ca 2020 	str.w	r2, [sl, #32]
    786c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7870:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    7874:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    7878:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    787c:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    7880:	2680      	movs	r6, #128	; 0x80
    7882:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    7884:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    7888:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    788c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    7890:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7894:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    7898:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    789c:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    78a0:	a914      	add	r1, sp, #80	; 0x50
    78a2:	4632      	mov	r2, r6
    78a4:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    78a8:	f016 fe9a 	bl	1e5e0 <memcpy>
    78ac:	4632      	mov	r2, r6
    78ae:	a934      	add	r1, sp, #208	; 0xd0
    78b0:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    78b4:	f016 fe94 	bl	1e5e0 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    78b8:	f8cd 8004 	str.w	r8, [sp, #4]
    78bc:	499a      	ldr	r1, [pc, #616]	; (7b28 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    78be:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    78c2:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    78c6:	9100      	str	r1, [sp, #0]
    78c8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    78cc:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    78d0:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    78d4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    78d8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    78dc:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    78e0:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    78e4:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    78e8:	4620      	mov	r0, r4
    78ea:	4b90      	ldr	r3, [pc, #576]	; (7b2c <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    78ec:	4a90      	ldr	r2, [pc, #576]	; (7b30 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    78ee:	4991      	ldr	r1, [pc, #580]	; (7b34 <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    78f0:	f008 fbca 	bl	10088 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    78f4:	6863      	ldr	r3, [r4, #4]
    78f6:	606b      	str	r3, [r5, #4]
    78f8:	69a3      	ldr	r3, [r4, #24]
    78fa:	68a2      	ldr	r2, [r4, #8]
    78fc:	f894 e00c 	ldrb.w	lr, [r4, #12]
    7900:	6920      	ldr	r0, [r4, #16]
    7902:	61ab      	str	r3, [r5, #24]
    7904:	69e3      	ldr	r3, [r4, #28]
    7906:	60aa      	str	r2, [r5, #8]
    7908:	f885 e00c 	strb.w	lr, [r5, #12]
    790c:	6962      	ldr	r2, [r4, #20]
    790e:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7912:	6128      	str	r0, [r5, #16]
    7914:	61eb      	str	r3, [r5, #28]
    7916:	6a20      	ldr	r0, [r4, #32]
    7918:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    791c:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    7920:	616a      	str	r2, [r5, #20]
    7922:	6228      	str	r0, [r5, #32]
    7924:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7926:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    7928:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    792c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    7930:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    7934:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7938:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    793c:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    7940:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    7944:	a914      	add	r1, sp, #80	; 0x50
    7946:	626a      	str	r2, [r5, #36]	; 0x24
    7948:	85a8      	strh	r0, [r5, #44]	; 0x2c
    794a:	4632      	mov	r2, r6
    794c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7950:	f016 fe46 	bl	1e5e0 <memcpy>
    7954:	4632      	mov	r2, r6
    7956:	a934      	add	r1, sp, #208	; 0xd0
    7958:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    795c:	f016 fe40 	bl	1e5e0 <memcpy>
    7960:	f504 7098 	add.w	r0, r4, #304	; 0x130
    7964:	c807      	ldmia	r0, {r0, r1, r2}
    7966:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    796a:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    796e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7972:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    7976:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    797a:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    797e:	4620      	mov	r0, r4
    7980:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    7984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7988:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    798c:	f04f 0a01 	mov.w	sl, #1
    7990:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7994:	f00a f806 	bl	119a4 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7998:	4b67      	ldr	r3, [pc, #412]	; (7b38 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    799a:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    799c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    79a0:	4d66      	ldr	r5, [pc, #408]	; (7b3c <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    79a2:	f8cd a004 	str.w	sl, [sp, #4]
    79a6:	9300      	str	r3, [sp, #0]
    79a8:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    79aa:	68a6      	ldr	r6, [r4, #8]
    79ac:	71aa      	strb	r2, [r5, #6]
    79ae:	f8a5 c004 	strh.w	ip, [r5, #4]
    79b2:	60ae      	str	r6, [r5, #8]
    79b4:	4620      	mov	r0, r4
    79b6:	4b62      	ldr	r3, [pc, #392]	; (7b40 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    79b8:	4a62      	ldr	r2, [pc, #392]	; (7b44 <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    79ba:	4d63      	ldr	r5, [pc, #396]	; (7b48 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    79bc:	f005 ff40 	bl	d840 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    79c0:	f104 000c 	add.w	r0, r4, #12
    79c4:	c807      	ldmia	r0, {r0, r1, r2}
    79c6:	f894 e006 	ldrb.w	lr, [r4, #6]
    79ca:	68a3      	ldr	r3, [r4, #8]
    79cc:	88a6      	ldrh	r6, [r4, #4]
    79ce:	f885 e006 	strb.w	lr, [r5, #6]
    79d2:	60ab      	str	r3, [r5, #8]
    79d4:	f894 e018 	ldrb.w	lr, [r4, #24]
    79d8:	69e3      	ldr	r3, [r4, #28]
    79da:	60e8      	str	r0, [r5, #12]
    79dc:	6a20      	ldr	r0, [r4, #32]
    79de:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    79e2:	80ae      	strh	r6, [r5, #4]
    79e4:	6129      	str	r1, [r5, #16]
    79e6:	7e66      	ldrb	r6, [r4, #25]
    79e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79ea:	616a      	str	r2, [r5, #20]
    79ec:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    79f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    79f2:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    79f6:	61eb      	str	r3, [r5, #28]
    79f8:	6228      	str	r0, [r5, #32]
    79fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    79fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    79fe:	766e      	strb	r6, [r5, #25]
    7a00:	6269      	str	r1, [r5, #36]	; 0x24
    7a02:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7a06:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7a0a:	632a      	str	r2, [r5, #48]	; 0x30
    7a0c:	63a8      	str	r0, [r5, #56]	; 0x38
    7a0e:	636b      	str	r3, [r5, #52]	; 0x34
    7a10:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7a14:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7a18:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7a1a:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7a1e:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7a22:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7a24:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7a28:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7a2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7a2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a30:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7a34:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7a38:	6429      	str	r1, [r5, #64]	; 0x40
    7a3a:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7a3e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7a40:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7a44:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7a48:	64aa      	str	r2, [r5, #72]	; 0x48
    7a4a:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    7a4e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7a50:	64eb      	str	r3, [r5, #76]	; 0x4c
    7a52:	6528      	str	r0, [r5, #80]	; 0x50
    7a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7a56:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7a5a:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7a5e:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7a62:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7a66:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7a6a:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7a6e:	662a      	str	r2, [r5, #96]	; 0x60
    7a70:	666b      	str	r3, [r5, #100]	; 0x64
    7a72:	6569      	str	r1, [r5, #84]	; 0x54
    7a74:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    7a76:	4b35      	ldr	r3, [pc, #212]	; (7b4c <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    7a78:	f8cd a000 	str.w	sl, [sp]
    7a7c:	4620      	mov	r0, r4
    7a7e:	66a9      	str	r1, [r5, #104]	; 0x68
    7a80:	4a33      	ldr	r2, [pc, #204]	; (7b50 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    7a82:	4d34      	ldr	r5, [pc, #208]	; (7b54 <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    7a84:	2140      	movs	r1, #64	; 0x40
    7a86:	f006 fbe1 	bl	e24c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7a8a:	f894 e006 	ldrb.w	lr, [r4, #6]
    7a8e:	68a2      	ldr	r2, [r4, #8]
    7a90:	68e3      	ldr	r3, [r4, #12]
    7a92:	88a6      	ldrh	r6, [r4, #4]
    7a94:	6920      	ldr	r0, [r4, #16]
    7a96:	6961      	ldr	r1, [r4, #20]
    7a98:	f885 e006 	strb.w	lr, [r5, #6]
    7a9c:	60aa      	str	r2, [r5, #8]
    7a9e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7aa2:	69e2      	ldr	r2, [r4, #28]
    7aa4:	60eb      	str	r3, [r5, #12]
    7aa6:	6a23      	ldr	r3, [r4, #32]
    7aa8:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7aac:	80ae      	strh	r6, [r5, #4]
    7aae:	6128      	str	r0, [r5, #16]
    7ab0:	7e66      	ldrb	r6, [r4, #25]
    7ab2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ab4:	6169      	str	r1, [r5, #20]
    7ab6:	f885 e018 	strb.w	lr, [r5, #24]
    7aba:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7abc:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7ac0:	61ea      	str	r2, [r5, #28]
    7ac2:	622b      	str	r3, [r5, #32]
    7ac4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7ac8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7acc:	766e      	strb	r6, [r5, #25]
    7ace:	6268      	str	r0, [r5, #36]	; 0x24
    7ad0:	6329      	str	r1, [r5, #48]	; 0x30
    7ad2:	636a      	str	r2, [r5, #52]	; 0x34
    7ad4:	63ab      	str	r3, [r5, #56]	; 0x38
    7ad6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7ada:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    7ade:	f8cd a000 	str.w	sl, [sp]
    7ae2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7ae6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7aea:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7aec:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7af0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7af4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7af8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7afa:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7afe:	642a      	str	r2, [r5, #64]	; 0x40
    7b00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7b02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7b04:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7b08:	652e      	str	r6, [r5, #80]	; 0x50
    7b0a:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7b0e:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7b10:	64a9      	str	r1, [r5, #72]	; 0x48
    7b12:	e023      	b.n	7b5c <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    7b14:	00023114 	.word	0x00023114
    7b18:	00023174 	.word	0x00023174
    7b1c:	00023104 	.word	0x00023104
    7b20:	20001894 	.word	0x20001894
    7b24:	00023034 	.word	0x00023034
    7b28:	00023154 	.word	0x00023154
    7b2c:	000230f4 	.word	0x000230f4
    7b30:	00023024 	.word	0x00023024
    7b34:	00023144 	.word	0x00023144
    7b38:	00023314 	.word	0x00023314
    7b3c:	20001484 	.word	0x20001484
    7b40:	000232d4 	.word	0x000232d4
    7b44:	000231a4 	.word	0x000231a4
    7b48:	200011f0 	.word	0x200011f0
    7b4c:	000232e4 	.word	0x000232e4
    7b50:	00023284 	.word	0x00023284
    7b54:	2000125c 	.word	0x2000125c
    7b58:	20001750 	.word	0x20001750
    7b5c:	64ea      	str	r2, [r5, #76]	; 0x4c
    7b5e:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7b62:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7b66:	656e      	str	r6, [r5, #84]	; 0x54
    7b68:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7b6c:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7b70:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7b74:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7b78:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7b7c:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7b80:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7b84:	4620      	mov	r0, r4
    7b86:	4db9      	ldr	r5, [pc, #740]	; (7e6c <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    7b88:	4bb9      	ldr	r3, [pc, #740]	; (7e70 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    7b8a:	4aba      	ldr	r2, [pc, #744]	; (7e74 <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    7b8c:	2120      	movs	r1, #32
    7b8e:	f006 fb5d 	bl	e24c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7b92:	f894 e006 	ldrb.w	lr, [r4, #6]
    7b96:	68a2      	ldr	r2, [r4, #8]
    7b98:	68e3      	ldr	r3, [r4, #12]
    7b9a:	88a6      	ldrh	r6, [r4, #4]
    7b9c:	6920      	ldr	r0, [r4, #16]
    7b9e:	6961      	ldr	r1, [r4, #20]
    7ba0:	f885 e006 	strb.w	lr, [r5, #6]
    7ba4:	60aa      	str	r2, [r5, #8]
    7ba6:	f894 e018 	ldrb.w	lr, [r4, #24]
    7baa:	69e2      	ldr	r2, [r4, #28]
    7bac:	60eb      	str	r3, [r5, #12]
    7bae:	6a23      	ldr	r3, [r4, #32]
    7bb0:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7bb4:	80ae      	strh	r6, [r5, #4]
    7bb6:	6128      	str	r0, [r5, #16]
    7bb8:	7e66      	ldrb	r6, [r4, #25]
    7bba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7bbc:	6169      	str	r1, [r5, #20]
    7bbe:	f885 e018 	strb.w	lr, [r5, #24]
    7bc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7bc4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7bc8:	61ea      	str	r2, [r5, #28]
    7bca:	622b      	str	r3, [r5, #32]
    7bcc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7bd0:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7bd4:	766e      	strb	r6, [r5, #25]
    7bd6:	6268      	str	r0, [r5, #36]	; 0x24
    7bd8:	6329      	str	r1, [r5, #48]	; 0x30
    7bda:	636a      	str	r2, [r5, #52]	; 0x34
    7bdc:	63ab      	str	r3, [r5, #56]	; 0x38
    7bde:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7be2:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    7be6:	f8cd a000 	str.w	sl, [sp]
    7bea:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7bee:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7bf2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7bf4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7bf8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7bfc:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7c00:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7c02:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7c06:	642a      	str	r2, [r5, #64]	; 0x40
    7c08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7c0a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7c0c:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7c10:	652e      	str	r6, [r5, #80]	; 0x50
    7c12:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7c16:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7c18:	64a9      	str	r1, [r5, #72]	; 0x48
    7c1a:	64ea      	str	r2, [r5, #76]	; 0x4c
    7c1c:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7c20:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7c24:	656e      	str	r6, [r5, #84]	; 0x54
    7c26:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7c2a:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7c2e:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7c32:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7c36:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7c3a:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7c3e:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7c42:	4620      	mov	r0, r4
    7c44:	4d8c      	ldr	r5, [pc, #560]	; (7e78 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    7c46:	4b8d      	ldr	r3, [pc, #564]	; (7e7c <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    7c48:	4a8d      	ldr	r2, [pc, #564]	; (7e80 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    7c4a:	2110      	movs	r1, #16
    7c4c:	f006 fafe 	bl	e24c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7c50:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7c54:	68a2      	ldr	r2, [r4, #8]
    7c56:	68e3      	ldr	r3, [r4, #12]
    7c58:	79a6      	ldrb	r6, [r4, #6]
    7c5a:	6920      	ldr	r0, [r4, #16]
    7c5c:	6961      	ldr	r1, [r4, #20]
    7c5e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7c62:	60aa      	str	r2, [r5, #8]
    7c64:	f894 e018 	ldrb.w	lr, [r4, #24]
    7c68:	69e2      	ldr	r2, [r4, #28]
    7c6a:	60eb      	str	r3, [r5, #12]
    7c6c:	6a23      	ldr	r3, [r4, #32]
    7c6e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7c72:	71ae      	strb	r6, [r5, #6]
    7c74:	6128      	str	r0, [r5, #16]
    7c76:	7e66      	ldrb	r6, [r4, #25]
    7c78:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7c7a:	6169      	str	r1, [r5, #20]
    7c7c:	f885 e018 	strb.w	lr, [r5, #24]
    7c80:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7c82:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7c86:	61ea      	str	r2, [r5, #28]
    7c88:	622b      	str	r3, [r5, #32]
    7c8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7c8e:	766e      	strb	r6, [r5, #25]
    7c90:	6268      	str	r0, [r5, #36]	; 0x24
    7c92:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7c96:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7c9a:	636a      	str	r2, [r5, #52]	; 0x34
    7c9c:	63ab      	str	r3, [r5, #56]	; 0x38
    7c9e:	6329      	str	r1, [r5, #48]	; 0x30
    7ca0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7ca4:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    7ca8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    7cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7cae:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    7cb2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    7cb6:	9703      	str	r7, [sp, #12]
    7cb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7cba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    7cbe:	642b      	str	r3, [r5, #64]	; 0x40
    7cc0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7cc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7cc4:	64a9      	str	r1, [r5, #72]	; 0x48
    7cc6:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    7cca:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    7cce:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    7cd2:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    7cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7cd8:	64ea      	str	r2, [r5, #76]	; 0x4c
    7cda:	652b      	str	r3, [r5, #80]	; 0x50
    7cdc:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    7ce0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7ce4:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    7ce8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7cec:	6568      	str	r0, [r5, #84]	; 0x54
    7cee:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    7cf2:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    7cf6:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    7cfa:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7cfe:	f04f 0e68 	mov.w	lr, #104	; 0x68
    7d02:	4d60      	ldr	r5, [pc, #384]	; (7e84 <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    7d04:	f8df c19c 	ldr.w	ip, [pc, #412]	; 7ea4 <_ZN9ClearCore10SysManagerC1Ev+0x694>
    7d08:	4e5f      	ldr	r6, [pc, #380]	; (7e88 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    7d0a:	4b60      	ldr	r3, [pc, #384]	; (7e8c <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    7d0c:	4a60      	ldr	r2, [pc, #384]	; (7e90 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    7d0e:	f8cd e008 	str.w	lr, [sp, #8]
    7d12:	4620      	mov	r0, r4
    7d14:	2108      	movs	r1, #8
    7d16:	9601      	str	r6, [sp, #4]
    7d18:	f8cd c000 	str.w	ip, [sp]
    7d1c:	f006 fdf0 	bl	e900 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7d20:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7d24:	68a2      	ldr	r2, [r4, #8]
    7d26:	68e3      	ldr	r3, [r4, #12]
    7d28:	79a6      	ldrb	r6, [r4, #6]
    7d2a:	6920      	ldr	r0, [r4, #16]
    7d2c:	6961      	ldr	r1, [r4, #20]
    7d2e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7d32:	60aa      	str	r2, [r5, #8]
    7d34:	f894 e018 	ldrb.w	lr, [r4, #24]
    7d38:	69e2      	ldr	r2, [r4, #28]
    7d3a:	60eb      	str	r3, [r5, #12]
    7d3c:	6a23      	ldr	r3, [r4, #32]
    7d3e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7d42:	71ae      	strb	r6, [r5, #6]
    7d44:	6128      	str	r0, [r5, #16]
    7d46:	7e66      	ldrb	r6, [r4, #25]
    7d48:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d4a:	6169      	str	r1, [r5, #20]
    7d4c:	f885 e018 	strb.w	lr, [r5, #24]
    7d50:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7d52:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7d56:	61ea      	str	r2, [r5, #28]
    7d58:	622b      	str	r3, [r5, #32]
    7d5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7d5e:	766e      	strb	r6, [r5, #25]
    7d60:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7d64:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7d68:	6329      	str	r1, [r5, #48]	; 0x30
    7d6a:	636a      	str	r2, [r5, #52]	; 0x34
    7d6c:	63ab      	str	r3, [r5, #56]	; 0x38
    7d6e:	6268      	str	r0, [r5, #36]	; 0x24
    7d70:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7d74:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7d78:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7d7e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    7d82:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    7d86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    7d88:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7d8a:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7d8e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7d92:	642b      	str	r3, [r5, #64]	; 0x40
    7d94:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7d96:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7d98:	64a8      	str	r0, [r5, #72]	; 0x48
    7d9a:	652a      	str	r2, [r5, #80]	; 0x50
    7d9c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    7da0:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    7da4:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7da8:	64e9      	str	r1, [r5, #76]	; 0x4c
    7daa:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    7dae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7db2:	656b      	str	r3, [r5, #84]	; 0x54
    7db4:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    7db8:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    7dbc:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    7dc0:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    7dc4:	f04f 0c65 	mov.w	ip, #101	; 0x65
    7dc8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    7dcc:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    7dd0:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7dd4:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    7dd8:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    7ddc:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 7ea8 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    7de0:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    7de4:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7de8:	9703      	str	r7, [sp, #12]
    7dea:	f8cd c008 	str.w	ip, [sp, #8]
    7dee:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7df0:	4b28      	ldr	r3, [pc, #160]	; (7e94 <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    7df2:	f8cd e004 	str.w	lr, [sp, #4]
    7df6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    7df8:	9300      	str	r3, [sp, #0]
    7dfa:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7dfe:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7e02:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7e04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7e06:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7e0a:	6669      	str	r1, [r5, #100]	; 0x64
    7e0c:	66aa      	str	r2, [r5, #104]	; 0x68
    7e0e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7e10:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    7e12:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7e16:	676e      	str	r6, [r5, #116]	; 0x74
    7e18:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7e1c:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7e20:	66eb      	str	r3, [r5, #108]	; 0x6c
    7e22:	67a9      	str	r1, [r5, #120]	; 0x78
    7e24:	67ea      	str	r2, [r5, #124]	; 0x7c
    7e26:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7e2a:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7e2e:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7e32:	4620      	mov	r0, r4
    7e34:	4b18      	ldr	r3, [pc, #96]	; (7e98 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    7e36:	4a19      	ldr	r2, [pc, #100]	; (7e9c <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    7e38:	4d19      	ldr	r5, [pc, #100]	; (7ea0 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    7e3a:	2104      	movs	r1, #4
    7e3c:	f006 fd60 	bl	e900 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7e40:	f104 000c 	add.w	r0, r4, #12
    7e44:	c807      	ldmia	r0, {r0, r1, r2}
    7e46:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7e4a:	68a3      	ldr	r3, [r4, #8]
    7e4c:	79a6      	ldrb	r6, [r4, #6]
    7e4e:	f8a5 e004 	strh.w	lr, [r5, #4]
    7e52:	60ab      	str	r3, [r5, #8]
    7e54:	f894 e018 	ldrb.w	lr, [r4, #24]
    7e58:	69e3      	ldr	r3, [r4, #28]
    7e5a:	60e8      	str	r0, [r5, #12]
    7e5c:	6a20      	ldr	r0, [r4, #32]
    7e5e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7e62:	71ae      	strb	r6, [r5, #6]
    7e64:	6129      	str	r1, [r5, #16]
    7e66:	7e66      	ldrb	r6, [r4, #25]
    7e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7e6a:	e01f      	b.n	7eac <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    7e6c:	200012bc 	.word	0x200012bc
    7e70:	000232f4 	.word	0x000232f4
    7e74:	00023294 	.word	0x00023294
    7e78:	2000131c 	.word	0x2000131c
    7e7c:	00023304 	.word	0x00023304
    7e80:	000232a4 	.word	0x000232a4
    7e84:	2000137c 	.word	0x2000137c
    7e88:	00023224 	.word	0x00023224
    7e8c:	000231c4 	.word	0x000231c4
    7e90:	000232b4 	.word	0x000232b4
    7e94:	000231f4 	.word	0x000231f4
    7e98:	000231d4 	.word	0x000231d4
    7e9c:	000232c4 	.word	0x000232c4
    7ea0:	20001400 	.word	0x20001400
    7ea4:	000231e4 	.word	0x000231e4
    7ea8:	00023234 	.word	0x00023234
    7eac:	616a      	str	r2, [r5, #20]
    7eae:	f885 e018 	strb.w	lr, [r5, #24]
    7eb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7eb4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7eb8:	61eb      	str	r3, [r5, #28]
    7eba:	6228      	str	r0, [r5, #32]
    7ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7ebe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7ec0:	766e      	strb	r6, [r5, #25]
    7ec2:	6269      	str	r1, [r5, #36]	; 0x24
    7ec4:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7ec8:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7ecc:	632a      	str	r2, [r5, #48]	; 0x30
    7ece:	63a8      	str	r0, [r5, #56]	; 0x38
    7ed0:	636b      	str	r3, [r5, #52]	; 0x34
    7ed2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7ed6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7eda:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7edc:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7ee0:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7ee4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7ee6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7eea:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7eee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7ef0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ef2:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7ef6:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7efa:	6429      	str	r1, [r5, #64]	; 0x40
    7efc:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7f00:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7f02:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7f06:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7f0a:	64aa      	str	r2, [r5, #72]	; 0x48
    7f0c:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    7f10:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    7f14:	64eb      	str	r3, [r5, #76]	; 0x4c
    7f16:	6528      	str	r0, [r5, #80]	; 0x50
    7f18:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7f1c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7f20:	6569      	str	r1, [r5, #84]	; 0x54
    7f22:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7f26:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7f2a:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7f2e:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7f32:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    7f36:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    7f3a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7f3e:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7f42:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7f44:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7f46:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    7f48:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7f4c:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7f50:	6669      	str	r1, [r5, #100]	; 0x64
    7f52:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7f54:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7f56:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7f5a:	66ab      	str	r3, [r5, #104]	; 0x68
    7f5c:	66e8      	str	r0, [r5, #108]	; 0x6c
    7f5e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    7f60:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7f64:	676e      	str	r6, [r5, #116]	; 0x74
    7f66:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7f6a:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7f6e:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    7f70:	4abe      	ldr	r2, [pc, #760]	; (826c <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    7f72:	67eb      	str	r3, [r5, #124]	; 0x7c
    7f74:	4620      	mov	r0, r4
    7f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    7f7a:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7f7e:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7f82:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7f86:	f006 fc2f 	bl	e7e8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7f8a:	f104 000c 	add.w	r0, r4, #12
    7f8e:	c807      	ldmia	r0, {r0, r1, r2}
    7f90:	4db7      	ldr	r5, [pc, #732]	; (8270 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    7f92:	68a3      	ldr	r3, [r4, #8]
    7f94:	f894 c018 	ldrb.w	ip, [r4, #24]
    7f98:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7f9c:	79a6      	ldrb	r6, [r4, #6]
    7f9e:	60ab      	str	r3, [r5, #8]
    7fa0:	f885 c018 	strb.w	ip, [r5, #24]
    7fa4:	69e3      	ldr	r3, [r4, #28]
    7fa6:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    7faa:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    7fae:	f8a5 e004 	strh.w	lr, [r5, #4]
    7fb2:	71ae      	strb	r6, [r5, #6]
    7fb4:	f894 e019 	ldrb.w	lr, [r4, #25]
    7fb8:	6a26      	ldr	r6, [r4, #32]
    7fba:	60e8      	str	r0, [r5, #12]
    7fbc:	6129      	str	r1, [r5, #16]
    7fbe:	616a      	str	r2, [r5, #20]
    7fc0:	61eb      	str	r3, [r5, #28]
    7fc2:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    7fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    7fc8:	4aaa      	ldr	r2, [pc, #680]	; (8274 <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    7fca:	f885 e019 	strb.w	lr, [r5, #25]
    7fce:	4620      	mov	r0, r4
    7fd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7fd4:	622e      	str	r6, [r5, #32]
    7fd6:	626b      	str	r3, [r5, #36]	; 0x24
    7fd8:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    7fdc:	f006 fc04 	bl	e7e8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    7fe0:	f104 000c 	add.w	r0, r4, #12
    7fe4:	c807      	ldmia	r0, {r0, r1, r2}
    7fe6:	4da4      	ldr	r5, [pc, #656]	; (8278 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    7fe8:	68a3      	ldr	r3, [r4, #8]
    7fea:	f894 c018 	ldrb.w	ip, [r4, #24]
    7fee:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7ff2:	79a6      	ldrb	r6, [r4, #6]
    7ff4:	60ab      	str	r3, [r5, #8]
    7ff6:	f885 c018 	strb.w	ip, [r5, #24]
    7ffa:	69e3      	ldr	r3, [r4, #28]
    7ffc:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8000:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    8004:	f8a5 e004 	strh.w	lr, [r5, #4]
    8008:	71ae      	strb	r6, [r5, #6]
    800a:	f894 e019 	ldrb.w	lr, [r4, #25]
    800e:	6a26      	ldr	r6, [r4, #32]
    8010:	60e8      	str	r0, [r5, #12]
    8012:	6129      	str	r1, [r5, #16]
    8014:	616a      	str	r2, [r5, #20]
    8016:	61eb      	str	r3, [r5, #28]
    8018:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    801c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    801e:	4a97      	ldr	r2, [pc, #604]	; (827c <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    8020:	f885 e019 	strb.w	lr, [r5, #25]
    8024:	4620      	mov	r0, r4
    8026:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    802a:	622e      	str	r6, [r5, #32]
    802c:	626b      	str	r3, [r5, #36]	; 0x24
    802e:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    8032:	f006 fbd9 	bl	e7e8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8036:	4d92      	ldr	r5, [pc, #584]	; (8280 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    8038:	88a6      	ldrh	r6, [r4, #4]
    803a:	80ae      	strh	r6, [r5, #4]
    803c:	f104 000c 	add.w	r0, r4, #12
    8040:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    8042:	2605      	movs	r6, #5
    8044:	f894 e006 	ldrb.w	lr, [r4, #6]
    8048:	68a3      	ldr	r3, [r4, #8]
    804a:	9600      	str	r6, [sp, #0]
    804c:	7e26      	ldrb	r6, [r4, #24]
    804e:	f894 c019 	ldrb.w	ip, [r4, #25]
    8052:	f885 e006 	strb.w	lr, [r5, #6]
    8056:	60ab      	str	r3, [r5, #8]
    8058:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    805c:	69e3      	ldr	r3, [r4, #28]
    805e:	6129      	str	r1, [r5, #16]
    8060:	616a      	str	r2, [r5, #20]
    8062:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8064:	6a22      	ldr	r2, [r4, #32]
    8066:	762e      	strb	r6, [r5, #24]
    8068:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    806c:	60e8      	str	r0, [r5, #12]
    806e:	f885 c019 	strb.w	ip, [r5, #25]
    8072:	61eb      	str	r3, [r5, #28]
    8074:	622a      	str	r2, [r5, #32]
    8076:	6269      	str	r1, [r5, #36]	; 0x24
    8078:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    807c:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    8080:	4620      	mov	r0, r4
    8082:	4d80      	ldr	r5, [pc, #512]	; (8284 <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    8084:	4b80      	ldr	r3, [pc, #512]	; (8288 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    8086:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    808a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    808e:	f005 fe91 	bl	ddb4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8092:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8096:	68a2      	ldr	r2, [r4, #8]
    8098:	68e3      	ldr	r3, [r4, #12]
    809a:	79a6      	ldrb	r6, [r4, #6]
    809c:	6920      	ldr	r0, [r4, #16]
    809e:	6961      	ldr	r1, [r4, #20]
    80a0:	f8a5 e004 	strh.w	lr, [r5, #4]
    80a4:	60aa      	str	r2, [r5, #8]
    80a6:	f894 e018 	ldrb.w	lr, [r4, #24]
    80aa:	69e2      	ldr	r2, [r4, #28]
    80ac:	60eb      	str	r3, [r5, #12]
    80ae:	6a23      	ldr	r3, [r4, #32]
    80b0:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    80b4:	71ae      	strb	r6, [r5, #6]
    80b6:	6128      	str	r0, [r5, #16]
    80b8:	7e66      	ldrb	r6, [r4, #25]
    80ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    80bc:	6169      	str	r1, [r5, #20]
    80be:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    80c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    80c4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    80c8:	61ea      	str	r2, [r5, #28]
    80ca:	622b      	str	r3, [r5, #32]
    80cc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    80d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    80d2:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    80d6:	766e      	strb	r6, [r5, #25]
    80d8:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    80da:	2604      	movs	r6, #4
    80dc:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    80e0:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    80e4:	63ab      	str	r3, [r5, #56]	; 0x38
    80e6:	6329      	str	r1, [r5, #48]	; 0x30
    80e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    80ea:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    80ee:	4b67      	ldr	r3, [pc, #412]	; (828c <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    80f0:	9600      	str	r6, [sp, #0]
    80f2:	4620      	mov	r0, r4
    80f4:	63e9      	str	r1, [r5, #60]	; 0x3c
    80f6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    80fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    80fe:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    8102:	f005 fe57 	bl	ddb4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8106:	f104 0008 	add.w	r0, r4, #8
    810a:	c80d      	ldmia	r0, {r0, r2, r3}
    810c:	4d60      	ldr	r5, [pc, #384]	; (8290 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    810e:	88a1      	ldrh	r1, [r4, #4]
    8110:	f894 e006 	ldrb.w	lr, [r4, #6]
    8114:	80a9      	strh	r1, [r5, #4]
    8116:	f885 e006 	strb.w	lr, [r5, #6]
    811a:	6961      	ldr	r1, [r4, #20]
    811c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8120:	60a8      	str	r0, [r5, #8]
    8122:	60ea      	str	r2, [r5, #12]
    8124:	7e60      	ldrb	r0, [r4, #25]
    8126:	69e2      	ldr	r2, [r4, #28]
    8128:	612b      	str	r3, [r5, #16]
    812a:	6a23      	ldr	r3, [r4, #32]
    812c:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    8130:	6169      	str	r1, [r5, #20]
    8132:	f885 e018 	strb.w	lr, [r5, #24]
    8136:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8138:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    813c:	7668      	strb	r0, [r5, #25]
    813e:	61ea      	str	r2, [r5, #28]
    8140:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    8144:	6b22      	ldr	r2, [r4, #48]	; 0x30
    8146:	622b      	str	r3, [r5, #32]
    8148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    814a:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    814e:	6269      	str	r1, [r5, #36]	; 0x24
    8150:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    8154:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    8158:	63ab      	str	r3, [r5, #56]	; 0x38
    815a:	632a      	str	r2, [r5, #48]	; 0x30
    815c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    815e:	f8cd 8000 	str.w	r8, [sp]
    8162:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8166:	63ea      	str	r2, [r5, #60]	; 0x3c
    8168:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    816c:	4620      	mov	r0, r4
    816e:	4d49      	ldr	r5, [pc, #292]	; (8294 <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    8170:	4b49      	ldr	r3, [pc, #292]	; (8298 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    8172:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    8176:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    817a:	f005 fe1b 	bl	ddb4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    817e:	f894 c006 	ldrb.w	ip, [r4, #6]
    8182:	68a2      	ldr	r2, [r4, #8]
    8184:	68e3      	ldr	r3, [r4, #12]
    8186:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    818a:	6920      	ldr	r0, [r4, #16]
    818c:	6961      	ldr	r1, [r4, #20]
    818e:	f885 c006 	strb.w	ip, [r5, #6]
    8192:	60aa      	str	r2, [r5, #8]
    8194:	f894 c018 	ldrb.w	ip, [r4, #24]
    8198:	69e2      	ldr	r2, [r4, #28]
    819a:	60eb      	str	r3, [r5, #12]
    819c:	6a23      	ldr	r3, [r4, #32]
    819e:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    81a2:	f8a5 e004 	strh.w	lr, [r5, #4]
    81a6:	6128      	str	r0, [r5, #16]
    81a8:	f894 e019 	ldrb.w	lr, [r4, #25]
    81ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    81ae:	6169      	str	r1, [r5, #20]
    81b0:	f885 c018 	strb.w	ip, [r5, #24]
    81b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    81b6:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    81ba:	61ea      	str	r2, [r5, #28]
    81bc:	622b      	str	r3, [r5, #32]
    81be:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    81c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    81c4:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    81c8:	f885 e019 	strb.w	lr, [r5, #25]
    81cc:	6268      	str	r0, [r5, #36]	; 0x24
    81ce:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    81d2:	6329      	str	r1, [r5, #48]	; 0x30
    81d4:	63ab      	str	r3, [r5, #56]	; 0x38
    81d6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    81da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    81dc:	f8cd a000 	str.w	sl, [sp]
    81e0:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    81e4:	63ea      	str	r2, [r5, #60]	; 0x3c
    81e6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    81ea:	4620      	mov	r0, r4
    81ec:	4b2b      	ldr	r3, [pc, #172]	; (829c <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    81ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    81f2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    81f6:	f005 fddd 	bl	ddb4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    81fa:	f104 0008 	add.w	r0, r4, #8
    81fe:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    8200:	f8df e09c 	ldr.w	lr, [pc, #156]	; 82a0 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    8204:	f894 c006 	ldrb.w	ip, [r4, #6]
    8208:	88a5      	ldrh	r5, [r4, #4]
    820a:	f88e c006 	strb.w	ip, [lr, #6]
    820e:	f894 c019 	ldrb.w	ip, [r4, #25]
    8212:	f894 8018 	ldrb.w	r8, [r4, #24]
    8216:	f8ae 5004 	strh.w	r5, [lr, #4]
    821a:	f8ce 0008 	str.w	r0, [lr, #8]
    821e:	69e5      	ldr	r5, [r4, #28]
    8220:	6a20      	ldr	r0, [r4, #32]
    8222:	f8ce 100c 	str.w	r1, [lr, #12]
    8226:	f8ce 2010 	str.w	r2, [lr, #16]
    822a:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    822e:	f8ce 3014 	str.w	r3, [lr, #20]
    8232:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    8236:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8238:	f88e c019 	strb.w	ip, [lr, #25]
    823c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    823e:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    8242:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8244:	f88e 8018 	strb.w	r8, [lr, #24]
    8248:	f8ce 501c 	str.w	r5, [lr, #28]
    824c:	f8ce 0020 	str.w	r0, [lr, #32]
    8250:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    8254:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    8258:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    825c:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    8260:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    8264:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    8268:	e01c      	b.n	82a4 <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    826a:	bf00      	nop
    826c:	00023084 	.word	0x00023084
    8270:	20001160 	.word	0x20001160
    8274:	00023094 	.word	0x00023094
    8278:	20001190 	.word	0x20001190
    827c:	000230a4 	.word	0x000230a4
    8280:	200011c0 	.word	0x200011c0
    8284:	20000b28 	.word	0x20000b28
    8288:	000230b4 	.word	0x000230b4
    828c:	000230c4 	.word	0x000230c4
    8290:	20001094 	.word	0x20001094
    8294:	200010d8 	.word	0x200010d8
    8298:	000230d4 	.word	0x000230d4
    829c:	000230e4 	.word	0x000230e4
    82a0:	2000111c 	.word	0x2000111c
    82a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    82a6:	9702      	str	r7, [sp, #8]
    82a8:	9601      	str	r6, [sp, #4]
    82aa:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    82ae:	4dcc      	ldr	r5, [pc, #816]	; (85e0 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    82b0:	9500      	str	r5, [sp, #0]
    82b2:	4620      	mov	r0, r4
    82b4:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    82b8:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    82bc:	4bc9      	ldr	r3, [pc, #804]	; (85e4 <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    82be:	4aca      	ldr	r2, [pc, #808]	; (85e8 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    82c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    82c4:	f7fc fda4 	bl	4e10 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    82c8:	4bc8      	ldr	r3, [pc, #800]	; (85ec <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    82ca:	79a7      	ldrb	r7, [r4, #6]
    82cc:	68a6      	ldr	r6, [r4, #8]
    82ce:	68e5      	ldr	r5, [r4, #12]
    82d0:	6920      	ldr	r0, [r4, #16]
    82d2:	6961      	ldr	r1, [r4, #20]
    82d4:	f894 8018 	ldrb.w	r8, [r4, #24]
    82d8:	69e2      	ldr	r2, [r4, #28]
    82da:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    82de:	f894 c019 	ldrb.w	ip, [r4, #25]
    82e2:	719f      	strb	r7, [r3, #6]
    82e4:	609e      	str	r6, [r3, #8]
    82e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    82e8:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    82ec:	60dd      	str	r5, [r3, #12]
    82ee:	6118      	str	r0, [r3, #16]
    82f0:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    82f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    82f6:	6159      	str	r1, [r3, #20]
    82f8:	f883 8018 	strb.w	r8, [r3, #24]
    82fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    82fe:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    8302:	61da      	str	r2, [r3, #28]
    8304:	6a22      	ldr	r2, [r4, #32]
    8306:	f8a3 e004 	strh.w	lr, [r3, #4]
    830a:	f883 c019 	strb.w	ip, [r3, #25]
    830e:	621a      	str	r2, [r3, #32]
    8310:	625f      	str	r7, [r3, #36]	; 0x24
    8312:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    8316:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    831a:	6358      	str	r0, [r3, #52]	; 0x34
    831c:	6399      	str	r1, [r3, #56]	; 0x38
    831e:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    8322:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    8326:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8328:	649a      	str	r2, [r3, #72]	; 0x48
    832a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    832c:	9207      	str	r2, [sp, #28]
    832e:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    8332:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    8334:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    8338:	6c61      	ldr	r1, [r4, #68]	; 0x44
    833a:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    833e:	64da      	str	r2, [r3, #76]	; 0x4c
    8340:	9a07      	ldr	r2, [sp, #28]
    8342:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    8346:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    834a:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    834e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    8352:	6459      	str	r1, [r3, #68]	; 0x44
    8354:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8356:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8358:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    835c:	65da      	str	r2, [r3, #92]	; 0x5c
    835e:	6f27      	ldr	r7, [r4, #112]	; 0x70
    8360:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8362:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    8366:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    836a:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    836e:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    8372:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8374:	6558      	str	r0, [r3, #84]	; 0x54
    8376:	6599      	str	r1, [r3, #88]	; 0x58
    8378:	661a      	str	r2, [r3, #96]	; 0x60
    837a:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    837e:	671f      	str	r7, [r3, #112]	; 0x70
    8380:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    8384:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    8388:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    838c:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    8390:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8394:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    8398:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    839c:	675e      	str	r6, [r3, #116]	; 0x74
    839e:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    83a2:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    83a6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    83aa:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    83ae:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    83b2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    83b6:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    83ba:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    83be:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    83c2:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    83c6:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    83ca:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    83ce:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    83d2:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    83d6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    83da:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    83de:	4619      	mov	r1, r3
    83e0:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    83e4:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    83e8:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    83ec:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    83ee:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    83f2:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    83f6:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    83fa:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    83fe:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    8402:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    8404:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8406:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    8408:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    840c:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    8410:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    8414:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    8418:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    841c:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    8420:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    8424:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    8428:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    842c:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    8430:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    8434:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    8438:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    843c:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8440:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    8444:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    8448:	9b42      	ldr	r3, [sp, #264]	; 0x108
    844a:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    844e:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    8452:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    8456:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    845a:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    845e:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    8462:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    8466:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    846a:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    846e:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    8472:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    8476:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    847a:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    847c:	9d44      	ldr	r5, [sp, #272]	; 0x110
    847e:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    8482:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    8486:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    848a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    848c:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8490:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    8494:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    8498:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    849c:	9e49      	ldr	r6, [sp, #292]	; 0x124
    849e:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    84a0:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    84a4:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    84a8:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    84aa:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    84ae:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    84b2:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    84b6:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    84ba:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    84be:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    84c2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    84c4:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    84c8:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    84cc:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    84d0:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    84d4:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    84d8:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    84dc:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    84e0:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    84e4:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    84e8:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    84ec:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    84ee:	9b50      	ldr	r3, [sp, #320]	; 0x140
    84f0:	9d51      	ldr	r5, [sp, #324]	; 0x144
    84f2:	9852      	ldr	r0, [sp, #328]	; 0x148
    84f4:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    84f8:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    84fc:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    8500:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    8504:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8506:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    850a:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    850e:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    8512:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    8516:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    851a:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    851e:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    8522:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    8526:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    852a:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    852e:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8532:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    8536:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    853a:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    853e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    8544:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    8548:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    854c:	2401      	movs	r4, #1
    854e:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    8552:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    8556:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    855a:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    855e:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    8562:	2605      	movs	r6, #5
    8564:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8568:	9d58      	ldr	r5, [sp, #352]	; 0x160
    856a:	4f22      	ldr	r7, [pc, #136]	; (85f4 <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    856c:	9402      	str	r4, [sp, #8]
    856e:	e88d 0044 	stmia.w	sp, {r2, r6}
    8572:	a808      	add	r0, sp, #32
    8574:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8578:	4b1f      	ldr	r3, [pc, #124]	; (85f8 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    857a:	4a20      	ldr	r2, [pc, #128]	; (85fc <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    857c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8580:	f7fc fc46 	bl	4e10 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8584:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8588:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    858c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    858e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8590:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8592:	980d      	ldr	r0, [sp, #52]	; 0x34
    8594:	71b9      	strb	r1, [r7, #6]
    8596:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8598:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    859c:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    85a0:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    85a4:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    85a8:	80ba      	strh	r2, [r7, #4]
    85aa:	60bb      	str	r3, [r7, #8]
    85ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    85ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    85b0:	60fe      	str	r6, [r7, #12]
    85b2:	613d      	str	r5, [r7, #16]
    85b4:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    85b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
    85ba:	6178      	str	r0, [r7, #20]
    85bc:	61f9      	str	r1, [r7, #28]
    85be:	9816      	ldr	r0, [sp, #88]	; 0x58
    85c0:	f887 8018 	strb.w	r8, [r7, #24]
    85c4:	a919      	add	r1, sp, #100	; 0x64
    85c6:	623a      	str	r2, [r7, #32]
    85c8:	627b      	str	r3, [r7, #36]	; 0x24
    85ca:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    85ce:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    85d2:	637d      	str	r5, [r7, #52]	; 0x34
    85d4:	63b8      	str	r0, [r7, #56]	; 0x38
    85d6:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    85da:	f887 c019 	strb.w	ip, [r7, #25]
    85de:	e00f      	b.n	8600 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    85e0:	000231b4 	.word	0x000231b4
    85e4:	00023324 	.word	0x00023324
    85e8:	00023164 	.word	0x00023164
    85ec:	20000b70 	.word	0x20000b70
    85f0:	00023354 	.word	0x00023354
    85f4:	20000cb8 	.word	0x20000cb8
    85f8:	00023334 	.word	0x00023334
    85fc:	00023344 	.word	0x00023344
    8600:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    8604:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    8608:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    860c:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    8610:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    8614:	c90e      	ldmia	r1, {r1, r2, r3}
    8616:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    861a:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    861e:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    8622:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    8626:	6479      	str	r1, [r7, #68]	; 0x44
    8628:	981d      	ldr	r0, [sp, #116]	; 0x74
    862a:	991e      	ldr	r1, [sp, #120]	; 0x78
    862c:	64ba      	str	r2, [r7, #72]	; 0x48
    862e:	64fb      	str	r3, [r7, #76]	; 0x4c
    8630:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8632:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8634:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    8638:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    863c:	9d24      	ldr	r5, [sp, #144]	; 0x90
    863e:	9e25      	ldr	r6, [sp, #148]	; 0x94
    8640:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    8644:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    8648:	6578      	str	r0, [r7, #84]	; 0x54
    864a:	65b9      	str	r1, [r7, #88]	; 0x58
    864c:	65fa      	str	r2, [r7, #92]	; 0x5c
    864e:	663b      	str	r3, [r7, #96]	; 0x60
    8650:	673d      	str	r5, [r7, #112]	; 0x70
    8652:	677e      	str	r6, [r7, #116]	; 0x74
    8654:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8658:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    865c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    8660:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8662:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8664:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8668:	4615      	mov	r5, r2
    866a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    866c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    866e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8672:	461e      	mov	r6, r3
    8674:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8676:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    867c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8680:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8682:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8684:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8688:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    868c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    868e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8694:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8698:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    869a:	9836      	ldr	r0, [sp, #216]	; 0xd8
    869c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    86a0:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    86a4:	9937      	ldr	r1, [sp, #220]	; 0xdc
    86a6:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    86a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    86ac:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    86b0:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    86b4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    86b8:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    86bc:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    86c0:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    86c2:	983a      	ldr	r0, [sp, #232]	; 0xe8
    86c4:	993b      	ldr	r1, [sp, #236]	; 0xec
    86c6:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    86ca:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    86ce:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    86d2:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    86d6:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    86da:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    86de:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    86e2:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    86e6:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    86ea:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    86ee:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    86f2:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    86f6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    86fa:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    86fe:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8702:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8706:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    870a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    870c:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    8710:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    8714:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    8718:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    871c:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    8720:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    8724:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    8728:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    872c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8734:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8738:	9943      	ldr	r1, [sp, #268]	; 0x10c
    873a:	9d44      	ldr	r5, [sp, #272]	; 0x110
    873c:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    8740:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    8744:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    8748:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    874c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    874e:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    8752:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    8756:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    875a:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    875e:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8760:	9d49      	ldr	r5, [sp, #292]	; 0x124
    8762:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    8766:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    876a:	984a      	ldr	r0, [sp, #296]	; 0x128
    876c:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8770:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    8774:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8778:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    877c:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8780:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    8784:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8786:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    878a:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    878e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    8792:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    8796:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    879a:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    879e:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    87a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    87a6:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    87aa:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    87ac:	9b50      	ldr	r3, [sp, #320]	; 0x140
    87ae:	9851      	ldr	r0, [sp, #324]	; 0x144
    87b0:	9952      	ldr	r1, [sp, #328]	; 0x148
    87b2:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    87b6:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    87ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    87be:	9b54      	ldr	r3, [sp, #336]	; 0x150
    87c0:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    87c4:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    87c8:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    87cc:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    87d0:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    87d4:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    87d8:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    87dc:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    87e0:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    87e4:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    87e8:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    87ec:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    87f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    87f4:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    87f8:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    87fc:	4aca      	ldr	r2, [pc, #808]	; (8b28 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    87fe:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    8802:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    8806:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    880a:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    880e:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    8812:	2503      	movs	r5, #3
    8814:	2602      	movs	r6, #2
    8816:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    881a:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    881e:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8822:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8826:	9958      	ldr	r1, [sp, #352]	; 0x160
    8828:	4bc0      	ldr	r3, [pc, #768]	; (8b2c <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    882a:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    882e:	a808      	add	r0, sp, #32
    8830:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8834:	4abe      	ldr	r2, [pc, #760]	; (8b30 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    8836:	4fbf      	ldr	r7, [pc, #764]	; (8b34 <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    8838:	f44f 7100 	mov.w	r1, #512	; 0x200
    883c:	f7fc fae8 	bl	4e10 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8840:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    8844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8848:	990d      	ldr	r1, [sp, #52]	; 0x34
    884a:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    884e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8850:	f8a7 c004 	strh.w	ip, [r7, #4]
    8854:	60ba      	str	r2, [r7, #8]
    8856:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    885a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    885c:	60fb      	str	r3, [r7, #12]
    885e:	6179      	str	r1, [r7, #20]
    8860:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8862:	9915      	ldr	r1, [sp, #84]	; 0x54
    8864:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    8868:	f887 e006 	strb.w	lr, [r7, #6]
    886c:	6138      	str	r0, [r7, #16]
    886e:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    8872:	9811      	ldr	r0, [sp, #68]	; 0x44
    8874:	f887 c018 	strb.w	ip, [r7, #24]
    8878:	61fa      	str	r2, [r7, #28]
    887a:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    887e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8880:	623b      	str	r3, [r7, #32]
    8882:	6379      	str	r1, [r7, #52]	; 0x34
    8884:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8888:	f887 e019 	strb.w	lr, [r7, #25]
    888c:	a919      	add	r1, sp, #100	; 0x64
    888e:	6278      	str	r0, [r7, #36]	; 0x24
    8890:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    8894:	63ba      	str	r2, [r7, #56]	; 0x38
    8896:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    889a:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    889e:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    88a2:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    88a6:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    88aa:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    88ae:	c90e      	ldmia	r1, {r1, r2, r3}
    88b0:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    88b4:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    88b8:	6479      	str	r1, [r7, #68]	; 0x44
    88ba:	64ba      	str	r2, [r7, #72]	; 0x48
    88bc:	991d      	ldr	r1, [sp, #116]	; 0x74
    88be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    88c0:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    88c4:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    88c8:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    88cc:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    88d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    88d2:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    88d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    88d8:	9820      	ldr	r0, [sp, #128]	; 0x80
    88da:	6579      	str	r1, [r7, #84]	; 0x54
    88dc:	65ba      	str	r2, [r7, #88]	; 0x58
    88de:	9924      	ldr	r1, [sp, #144]	; 0x90
    88e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    88e2:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    88e6:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    88ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    88ec:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    88f0:	677a      	str	r2, [r7, #116]	; 0x74
    88f2:	6638      	str	r0, [r7, #96]	; 0x60
    88f4:	6739      	str	r1, [r7, #112]	; 0x70
    88f6:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    88fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    88fc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    88fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    8902:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8906:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8908:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    890a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    890e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    8912:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    8914:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    891a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    891e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8920:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    8922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8926:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    892a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    892c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    8930:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    8936:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    893a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    893c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    893e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8942:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    8946:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    8948:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    894c:	a939      	add	r1, sp, #228	; 0xe4
    894e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    8954:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8958:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    895c:	c90e      	ldmia	r1, {r1, r2, r3}
    895e:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    8962:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    8966:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    896a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    896e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    8972:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    8976:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    897a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    897e:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    8982:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    8986:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    898a:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    898e:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    8992:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8996:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    899a:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    899e:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    89a2:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    89a6:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    89aa:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    89ae:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    89b2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    89b4:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    89b8:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    89bc:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    89c0:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    89c4:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    89c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    89cc:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    89d0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    89d2:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    89d6:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    89da:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    89de:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    89e2:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    89e6:	9947      	ldr	r1, [sp, #284]	; 0x11c
    89e8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    89ec:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    89f0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    89f2:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    89f6:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    89fa:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    89fe:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    8a02:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    8a06:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    8a0a:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8a0e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8a10:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8a12:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    8a16:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8a1a:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    8a1e:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    8a22:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8a26:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    8a28:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    8a2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8a30:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8a34:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    8a38:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    8a3c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    8a40:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    8a44:	994f      	ldr	r1, [sp, #316]	; 0x13c
    8a46:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8a48:	9a50      	ldr	r2, [sp, #320]	; 0x140
    8a4a:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    8a4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    8a52:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    8a56:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    8a5a:	9852      	ldr	r0, [sp, #328]	; 0x148
    8a5c:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    8a60:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    8a64:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    8a68:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8a6a:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    8a6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    8a72:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    8a76:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8a7a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    8a7e:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    8a82:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    8a86:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    8a8a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8a8e:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    8a92:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    8a96:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    8a9a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    8a9e:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    8aa2:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    8aa6:	f04f 0800 	mov.w	r8, #0
    8aaa:	f8df e098 	ldr.w	lr, [pc, #152]	; 8b44 <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    8aae:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8ab2:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    8ab6:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    8aba:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8abe:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    8ac2:	9958      	ldr	r1, [sp, #352]	; 0x160
    8ac4:	4b1c      	ldr	r3, [pc, #112]	; (8b38 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    8ac6:	9502      	str	r5, [sp, #8]
    8ac8:	f8cd 8004 	str.w	r8, [sp, #4]
    8acc:	f8cd e000 	str.w	lr, [sp]
    8ad0:	a808      	add	r0, sp, #32
    8ad2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8ad6:	4a19      	ldr	r2, [pc, #100]	; (8b3c <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    8ad8:	4f19      	ldr	r7, [pc, #100]	; (8b40 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    8ada:	f44f 7180 	mov.w	r1, #256	; 0x100
    8ade:	f7fc f997 	bl	4e10 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8ae2:	a80a      	add	r0, sp, #40	; 0x28
    8ae4:	c807      	ldmia	r0, {r0, r1, r2}
    8ae6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8aea:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8aee:	80bb      	strh	r3, [r7, #4]
    8af0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8af2:	f887 e006 	strb.w	lr, [r7, #6]
    8af6:	60b8      	str	r0, [r7, #8]
    8af8:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    8afc:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    8b00:	60f9      	str	r1, [r7, #12]
    8b02:	613a      	str	r2, [r7, #16]
    8b04:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8b06:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8b08:	617b      	str	r3, [r7, #20]
    8b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b0c:	f887 e018 	strb.w	lr, [r7, #24]
    8b10:	7678      	strb	r0, [r7, #25]
    8b12:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8b16:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    8b1a:	61f9      	str	r1, [r7, #28]
    8b1c:	623a      	str	r2, [r7, #32]
    8b1e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8b20:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8b22:	627b      	str	r3, [r7, #36]	; 0x24
    8b24:	e010      	b.n	8b48 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    8b26:	bf00      	nop
    8b28:	00023264 	.word	0x00023264
    8b2c:	00023204 	.word	0x00023204
    8b30:	00023244 	.word	0x00023244
    8b34:	20000e00 	.word	0x20000e00
    8b38:	00023214 	.word	0x00023214
    8b3c:	00023254 	.word	0x00023254
    8b40:	20000f48 	.word	0x20000f48
    8b44:	00023274 	.word	0x00023274
    8b48:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8b4c:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8b50:	6379      	str	r1, [r7, #52]	; 0x34
    8b52:	63ba      	str	r2, [r7, #56]	; 0x38
    8b54:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8b58:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8b5c:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    8b60:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    8b64:	9919      	ldr	r1, [sp, #100]	; 0x64
    8b66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8b68:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    8b6c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8b70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8b72:	6479      	str	r1, [r7, #68]	; 0x44
    8b74:	64ba      	str	r2, [r7, #72]	; 0x48
    8b76:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    8b7a:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    8b7e:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    8b82:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b84:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    8b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8b8a:	991e      	ldr	r1, [sp, #120]	; 0x78
    8b8c:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    8b90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8b92:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    8b96:	657b      	str	r3, [r7, #84]	; 0x54
    8b98:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    8b9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8b9e:	65b9      	str	r1, [r7, #88]	; 0x58
    8ba0:	65fa      	str	r2, [r7, #92]	; 0x5c
    8ba2:	9924      	ldr	r1, [sp, #144]	; 0x90
    8ba4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8ba6:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    8baa:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    8bae:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8bb2:	6739      	str	r1, [r7, #112]	; 0x70
    8bb4:	663b      	str	r3, [r7, #96]	; 0x60
    8bb6:	677a      	str	r2, [r7, #116]	; 0x74
    8bb8:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    8bbc:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8bbe:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8bc2:	992c      	ldr	r1, [sp, #176]	; 0xb0
    8bc4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    8bc8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8bca:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    8bce:	992e      	ldr	r1, [sp, #184]	; 0xb8
    8bd0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    8bd4:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8bd6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8bda:	9930      	ldr	r1, [sp, #192]	; 0xc0
    8bdc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    8be0:	9931      	ldr	r1, [sp, #196]	; 0xc4
    8be2:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    8be6:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8be8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    8bec:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8bee:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8bf2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    8bf4:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    8bf8:	9935      	ldr	r1, [sp, #212]	; 0xd4
    8bfa:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    8bfe:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    8c02:	9936      	ldr	r1, [sp, #216]	; 0xd8
    8c04:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    8c08:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8c0a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8c0e:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8c10:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    8c14:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8c18:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    8c1c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    8c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    8c22:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8c24:	993b      	ldr	r1, [sp, #236]	; 0xec
    8c26:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    8c2a:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    8c2e:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    8c32:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8c36:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8c3a:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    8c3e:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    8c42:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    8c46:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    8c4a:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    8c4e:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    8c52:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    8c56:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    8c5a:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    8c5e:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8c62:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8c66:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    8c6a:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    8c6e:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8c72:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8c76:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    8c7a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8c7c:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    8c80:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8c84:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8c88:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8c8c:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8c90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8c94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    8c96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    8c9a:	9844      	ldr	r0, [sp, #272]	; 0x110
    8c9c:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    8ca0:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    8ca4:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    8ca8:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    8cac:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    8cb0:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    8cb4:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8cb6:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8cba:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    8cbe:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    8cc2:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    8cc6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8cc8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    8ccc:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    8cd2:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8cd6:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8cd8:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8cdc:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    8ce0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8ce4:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    8ce8:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8cec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8cf0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8cf2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8cf6:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8cfa:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    8cfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8d02:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8d06:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8d08:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    8d0c:	9850      	ldr	r0, [sp, #320]	; 0x140
    8d0e:	9951      	ldr	r1, [sp, #324]	; 0x144
    8d10:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8d12:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    8d16:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    8d1a:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    8d1e:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    8d22:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    8d26:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8d28:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    8d2c:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    8d30:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    8d34:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8d38:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8d3c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8d40:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    8d44:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8d48:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    8d4c:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8d50:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    8d54:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    8d58:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8d5c:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    8d60:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    8d64:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    8d68:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8d6c:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    8d70:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    8d74:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    8d78:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    8d7c:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    8d7e:	f8df c208 	ldr.w	ip, [pc, #520]	; 8f88 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    8d82:	9207      	str	r2, [sp, #28]
    8d84:	f8df e204 	ldr.w	lr, [pc, #516]	; 8f8c <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    8d88:	9505      	str	r5, [sp, #20]
    8d8a:	4b78      	ldr	r3, [pc, #480]	; (8f6c <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    8d8c:	9d07      	ldr	r5, [sp, #28]
    8d8e:	4878      	ldr	r0, [pc, #480]	; (8f70 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    8d90:	f8cd e010 	str.w	lr, [sp, #16]
    8d94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8d98:	e88d 1004 	stmia.w	sp, {r2, ip}
    8d9c:	9303      	str	r3, [sp, #12]
    8d9e:	9002      	str	r0, [sp, #8]
    8da0:	4641      	mov	r1, r8
    8da2:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    8da6:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8f90 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    8daa:	4d72      	ldr	r5, [pc, #456]	; (8f74 <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    8dac:	a808      	add	r0, sp, #32
    8dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8db2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8db6:	f008 fba7 	bl	11508 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8dba:	990a      	ldr	r1, [sp, #40]	; 0x28
    8dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8dbe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8dc2:	980c      	ldr	r0, [sp, #48]	; 0x30
    8dc4:	f8c8 1008 	str.w	r1, [r8, #8]
    8dc8:	f8c8 2004 	str.w	r2, [r8, #4]
    8dcc:	990d      	ldr	r1, [sp, #52]	; 0x34
    8dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8dd0:	f888 300c 	strb.w	r3, [r8, #12]
    8dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8dd6:	f8c8 0010 	str.w	r0, [r8, #16]
    8dda:	f8c8 1014 	str.w	r1, [r8, #20]
    8dde:	9810      	ldr	r0, [sp, #64]	; 0x40
    8de0:	9911      	ldr	r1, [sp, #68]	; 0x44
    8de2:	f8c8 2018 	str.w	r2, [r8, #24]
    8de6:	f8c8 301c 	str.w	r3, [r8, #28]
    8dea:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8dee:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8df2:	f8c8 0020 	str.w	r0, [r8, #32]
    8df6:	2780      	movs	r7, #128	; 0x80
    8df8:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    8dfc:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    8e00:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    8e04:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    8e08:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    8e0c:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    8e10:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8e14:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    8e18:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    8e1c:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    8e20:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    8e24:	a914      	add	r1, sp, #80	; 0x50
    8e26:	463a      	mov	r2, r7
    8e28:	f108 0030 	add.w	r0, r8, #48	; 0x30
    8e2c:	f015 fbd8 	bl	1e5e0 <memcpy>
    8e30:	463a      	mov	r2, r7
    8e32:	a934      	add	r1, sp, #208	; 0xd0
    8e34:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    8e38:	f015 fbd2 	bl	1e5e0 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    8e3c:	4b4e      	ldr	r3, [pc, #312]	; (8f78 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    8e3e:	9303      	str	r3, [sp, #12]
    8e40:	484e      	ldr	r0, [pc, #312]	; (8f7c <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    8e42:	4a4f      	ldr	r2, [pc, #316]	; (8f80 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    8e44:	9002      	str	r0, [sp, #8]
    8e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8e4a:	9201      	str	r2, [sp, #4]
    8e4c:	9300      	str	r3, [sp, #0]
    8e4e:	9854      	ldr	r0, [sp, #336]	; 0x150
    8e50:	9a55      	ldr	r2, [sp, #340]	; 0x154
    8e52:	9b56      	ldr	r3, [sp, #344]	; 0x158
    8e54:	9605      	str	r6, [sp, #20]
    8e56:	4621      	mov	r1, r4
    8e58:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    8e5a:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    8e5e:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    8e62:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    8e66:	9858      	ldr	r0, [sp, #352]	; 0x160
    8e68:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    8e6c:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    8e70:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    8e74:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    8e78:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    8e7a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8e7c:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    8e7e:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    8e82:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    8e86:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    8e8a:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    8e8e:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    8e92:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    8e96:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    8e9a:	a808      	add	r0, sp, #32
    8e9c:	4e39      	ldr	r6, [pc, #228]	; (8f84 <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    8e9e:	9604      	str	r6, [sp, #16]
    8ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8ea4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8ea8:	f008 fb2e 	bl	11508 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8eac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8eae:	9809      	ldr	r0, [sp, #36]	; 0x24
    8eb0:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    8eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8eb6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8eba:	60ac      	str	r4, [r5, #8]
    8ebc:	6068      	str	r0, [r5, #4]
    8ebe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8ec0:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ec2:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    8ec6:	f885 e00c 	strb.w	lr, [r5, #12]
    8eca:	612a      	str	r2, [r5, #16]
    8ecc:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    8ed0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8ed4:	6168      	str	r0, [r5, #20]
    8ed6:	61ae      	str	r6, [r5, #24]
    8ed8:	9810      	ldr	r0, [sp, #64]	; 0x40
    8eda:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    8ede:	61ec      	str	r4, [r5, #28]
    8ee0:	626b      	str	r3, [r5, #36]	; 0x24
    8ee2:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    8ee6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8eea:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    8eee:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    8ef2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    8ef6:	a914      	add	r1, sp, #80	; 0x50
    8ef8:	6228      	str	r0, [r5, #32]
    8efa:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    8efe:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    8f02:	463a      	mov	r2, r7
    8f04:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    8f08:	f105 0030 	add.w	r0, r5, #48	; 0x30
    8f0c:	f015 fb68 	bl	1e5e0 <memcpy>
    8f10:	463a      	mov	r2, r7
    8f12:	a934      	add	r1, sp, #208	; 0xd0
    8f14:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8f18:	f015 fb62 	bl	1e5e0 <memcpy>
    8f1c:	a855      	add	r0, sp, #340	; 0x154
    8f1e:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    8f22:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8f24:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    8f28:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    8f2a:	9e58      	ldr	r6, [sp, #352]	; 0x160
    8f2c:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    8f30:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    8f34:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    8f38:	995b      	ldr	r1, [sp, #364]	; 0x16c
    8f3a:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    8f3e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    8f40:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    8f44:	4648      	mov	r0, r9
    8f46:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    8f4a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    8f4e:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    8f52:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    8f56:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    8f5a:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    8f5e:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    8f62:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    8f66:	b05f      	add	sp, #380	; 0x17c
    8f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f6c:	00023054 	.word	0x00023054
    8f70:	00023044 	.word	0x00023044
    8f74:	200015f8 	.word	0x200015f8
    8f78:	00023074 	.word	0x00023074
    8f7c:	00023064 	.word	0x00023064
    8f80:	00023194 	.word	0x00023194
    8f84:	00023134 	.word	0x00023134
    8f88:	00023184 	.word	0x00023184
    8f8c:	00023124 	.word	0x00023124
    8f90:	200014a0 	.word	0x200014a0

00008f94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    8f94:	2914      	cmp	r1, #20
    8f96:	dc03      	bgt.n	8fa0 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    8f98:	4a03      	ldr	r2, [pc, #12]	; (8fa8 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    8f9a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    8f9e:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    8fa0:	4b02      	ldr	r3, [pc, #8]	; (8fac <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    8fa2:	6818      	ldr	r0, [r3, #0]
    8fa4:	f006 bea0 	b.w	fce8 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    8fa8:	00022fd0 	.word	0x00022fd0
    8fac:	20001f0c 	.word	0x20001f0c

00008fb0 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    8fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8fb2:	4ab1      	ldr	r2, [pc, #708]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8fb4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8fb8:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    8fbc:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    8fbe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8fc2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8fc6:	065e      	lsls	r6, r3, #25
    8fc8:	d4fb      	bmi.n	8fc2 <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    8fca:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8fce:	49aa      	ldr	r1, [pc, #680]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    8fd0:	2001      	movs	r0, #1
    8fd2:	f360 0303 	bfi	r3, r0, #0, #4
    8fd6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8fda:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    8fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8fe2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    8fe6:	684b      	ldr	r3, [r1, #4]
    8fe8:	f013 0304 	ands.w	r3, r3, #4
    8fec:	d1fb      	bne.n	8fe6 <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8fee:	48a3      	ldr	r0, [pc, #652]	; (927c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    8ff0:	4aa3      	ldr	r2, [pc, #652]	; (9280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    8ff2:	6981      	ldr	r1, [r0, #24]
    8ff4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    8ff8:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    8ffa:	6811      	ldr	r1, [r2, #0]
    8ffc:	f363 0141 	bfi	r1, r3, #1, #1
    9000:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    9002:	6893      	ldr	r3, [r2, #8]
    9004:	f013 0302 	ands.w	r3, r3, #2
    9008:	d1fb      	bne.n	9002 <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    900a:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    900c:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    900e:	499a      	ldr	r1, [pc, #616]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    9010:	f040 0002 	orr.w	r0, r0, #2
    9014:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9016:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    9018:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    901c:	f040 0002 	orr.w	r0, r0, #2
    9020:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    9022:	6453      	str	r3, [r2, #68]	; 0x44
    9024:	6493      	str	r3, [r2, #72]	; 0x48
    9026:	64d3      	str	r3, [r2, #76]	; 0x4c
    9028:	6513      	str	r3, [r2, #80]	; 0x50
    902a:	6553      	str	r3, [r2, #84]	; 0x54
    902c:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    902e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    9030:	f040 0001 	orr.w	r0, r0, #1
    9034:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    9036:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    903a:	f363 1286 	bfi	r2, r3, #6, #1
    903e:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    9042:	460a      	mov	r2, r1
    9044:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9048:	065d      	lsls	r5, r3, #25
    904a:	d4fb      	bmi.n	9044 <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    904c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9050:	4989      	ldr	r1, [pc, #548]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9052:	2001      	movs	r0, #1
    9054:	f360 0303 	bfi	r3, r0, #0, #4
    9058:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    905c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9064:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9068:	684b      	ldr	r3, [r1, #4]
    906a:	f013 0304 	ands.w	r3, r3, #4
    906e:	d1fb      	bne.n	9068 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9070:	4882      	ldr	r0, [pc, #520]	; (927c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    9072:	4a84      	ldr	r2, [pc, #528]	; (9284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9074:	6981      	ldr	r1, [r0, #24]
    9076:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    907a:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    907c:	6811      	ldr	r1, [r2, #0]
    907e:	f363 0141 	bfi	r1, r3, #1, #1
    9082:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    9084:	6893      	ldr	r3, [r2, #8]
    9086:	f013 0302 	ands.w	r3, r3, #2
    908a:	d1fb      	bne.n	9084 <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    908c:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    908e:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9090:	4979      	ldr	r1, [pc, #484]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    9092:	f040 0002 	orr.w	r0, r0, #2
    9096:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9098:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    909a:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    909e:	f040 0002 	orr.w	r0, r0, #2
    90a2:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    90a4:	6453      	str	r3, [r2, #68]	; 0x44
    90a6:	6493      	str	r3, [r2, #72]	; 0x48
    90a8:	64d3      	str	r3, [r2, #76]	; 0x4c
    90aa:	6513      	str	r3, [r2, #80]	; 0x50
    90ac:	6553      	str	r3, [r2, #84]	; 0x54
    90ae:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    90b0:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    90b4:	f363 1286 	bfi	r2, r3, #6, #1
    90b8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    90bc:	460a      	mov	r2, r1
    90be:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    90c2:	065c      	lsls	r4, r3, #25
    90c4:	d4fb      	bmi.n	90be <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    90c6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    90ca:	496b      	ldr	r1, [pc, #428]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    90cc:	2006      	movs	r0, #6
    90ce:	f360 0303 	bfi	r3, r0, #0, #4
    90d2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    90d6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    90da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    90de:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    90e2:	684b      	ldr	r3, [r1, #4]
    90e4:	f013 0318 	ands.w	r3, r3, #24
    90e8:	d1fb      	bne.n	90e2 <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    90ea:	4c64      	ldr	r4, [pc, #400]	; (927c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    90ec:	4a62      	ldr	r2, [pc, #392]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    90ee:	6960      	ldr	r0, [r4, #20]
    90f0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    90f4:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    90f6:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    90fa:	f363 1086 	bfi	r0, r3, #6, #1
    90fe:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    9102:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    9106:	0658      	lsls	r0, r3, #25
    9108:	d4fb      	bmi.n	9102 <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    910a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    910e:	495a      	ldr	r1, [pc, #360]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9110:	2006      	movs	r0, #6
    9112:	f360 0303 	bfi	r3, r0, #0, #4
    9116:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    911a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    911e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9122:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    9126:	684b      	ldr	r3, [r1, #4]
    9128:	f013 0318 	ands.w	r3, r3, #24
    912c:	d1fb      	bne.n	9126 <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    912e:	4c53      	ldr	r4, [pc, #332]	; (927c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    9130:	4a51      	ldr	r2, [pc, #324]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    9132:	69a0      	ldr	r0, [r4, #24]
    9134:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    9138:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    913a:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    913e:	f363 1086 	bfi	r0, r3, #6, #1
    9142:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    9146:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    914a:	0659      	lsls	r1, r3, #25
    914c:	d4fb      	bmi.n	9146 <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    914e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9152:	4949      	ldr	r1, [pc, #292]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9154:	2006      	movs	r0, #6
    9156:	f360 0303 	bfi	r3, r0, #0, #4
    915a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    915e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9166:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    916a:	684b      	ldr	r3, [r1, #4]
    916c:	f013 0318 	ands.w	r3, r3, #24
    9170:	d1fb      	bne.n	916a <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9172:	4842      	ldr	r0, [pc, #264]	; (927c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9174:	4a40      	ldr	r2, [pc, #256]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9176:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9178:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    917a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    917e:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9180:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    9184:	6a04      	ldr	r4, [r0, #32]
    9186:	f044 0420 	orr.w	r4, r4, #32
    918a:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    918c:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    9190:	f363 1086 	bfi	r0, r3, #6, #1
    9194:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    9198:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    919c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    91a0:	2b00      	cmp	r3, #0
    91a2:	d1f9      	bne.n	9198 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    91a4:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    91a8:	4834      	ldr	r0, [pc, #208]	; (927c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    91aa:	4c33      	ldr	r4, [pc, #204]	; (9278 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    91ac:	f363 0103 	bfi	r1, r3, #0, #4
    91b0:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    91b4:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    91b8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    91bc:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    91c0:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    91c2:	69c1      	ldr	r1, [r0, #28]
    91c4:	f041 0110 	orr.w	r1, r1, #16
    91c8:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    91ca:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    91ce:	f363 1186 	bfi	r1, r3, #6, #1
    91d2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    91d6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    91da:	f3c3 1380 	ubfx	r3, r3, #6, #1
    91de:	2b00      	cmp	r3, #0
    91e0:	d1f9      	bne.n	91d6 <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    91e2:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    91e6:	4a28      	ldr	r2, [pc, #160]	; (9288 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    91e8:	4d24      	ldr	r5, [pc, #144]	; (927c <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    91ea:	f363 0103 	bfi	r1, r3, #0, #4
    91ee:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    91f2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    91f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    91fa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    91fe:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9200:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    9202:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    9204:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    9206:	f044 0410 	orr.w	r4, r4, #16
    920a:	622c      	str	r4, [r5, #32]
    920c:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    9210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    9214:	f04f 0e01 	mov.w	lr, #1
    9218:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    921a:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    921c:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    921e:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    9220:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    9222:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    9226:	6813      	ldr	r3, [r2, #0]
    9228:	f36f 0341 	bfc	r3, #1, #1
    922c:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    922e:	6913      	ldr	r3, [r2, #16]
    9230:	f013 0302 	ands.w	r3, r3, #2
    9234:	d1fb      	bne.n	922e <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    9236:	7910      	ldrb	r0, [r2, #4]
    9238:	f040 0002 	orr.w	r0, r0, #2
    923c:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    923e:	6810      	ldr	r0, [r2, #0]
    9240:	f36e 0083 	bfi	r0, lr, #2, #2
    9244:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    9246:	6810      	ldr	r0, [r2, #0]
    9248:	f367 200a 	bfi	r0, r7, #8, #3
    924c:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    924e:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    9250:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    9252:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    9256:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    925a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    925e:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    9260:	6813      	ldr	r3, [r2, #0]
    9262:	f043 0302 	orr.w	r3, r3, #2
    9266:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9268:	6913      	ldr	r3, [r2, #16]
    926a:	079b      	lsls	r3, r3, #30
    926c:	d4fc      	bmi.n	9268 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    926e:	4561      	cmp	r1, ip
    9270:	d1d7      	bne.n	9222 <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    9272:	b005      	add	sp, #20
    9274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9276:	bf00      	nop
    9278:	40001c00 	.word	0x40001c00
    927c:	40000800 	.word	0x40000800
    9280:	41016000 	.word	0x41016000
    9284:	41018000 	.word	0x41018000
    9288:	00022fac 	.word	0x00022fac

0000928c <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    928c:	498b      	ldr	r1, [pc, #556]	; (94bc <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    928e:	4a8c      	ldr	r2, [pc, #560]	; (94c0 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9290:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    9292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    929a:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    929e:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    92a0:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    92a2:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    92a4:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    92a8:	4606      	mov	r6, r0
    InitClocks();
    92aa:	f7ff fe81 	bl	8fb0 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    92ae:	4b85      	ldr	r3, [pc, #532]	; (94c4 <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    92b0:	4985      	ldr	r1, [pc, #532]	; (94c8 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    92b2:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    92b4:	680d      	ldr	r5, [r1, #0]
    92b6:	4f85      	ldr	r7, [pc, #532]	; (94cc <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    92b8:	f364 0241 	bfi	r2, r4, #1, #1
    92bc:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    92be:	691a      	ldr	r2, [r3, #16]
    92c0:	21a7      	movs	r1, #167	; 0xa7
    92c2:	f361 4217 	bfi	r2, r1, #16, #8
    92c6:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    92c8:	691a      	ldr	r2, [r3, #16]
    92ca:	f368 0283 	bfi	r2, r8, #2, #2
    92ce:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    92d0:	691a      	ldr	r2, [r3, #16]
    92d2:	2107      	movs	r1, #7
    92d4:	f361 220b 	bfi	r2, r1, #8, #4
    92d8:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    92da:	691a      	ldr	r2, [r3, #16]
    92dc:	f042 0202 	orr.w	r2, r2, #2
    92e0:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    92e2:	4628      	mov	r0, r5
    92e4:	4641      	mov	r1, r8
    92e6:	f008 fbc1 	bl	11a6c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    92ea:	4879      	ldr	r0, [pc, #484]	; (94d0 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    92ec:	2100      	movs	r1, #0
    92ee:	f000 fc9b 	bl	9c28 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    92f2:	4621      	mov	r1, r4
    92f4:	4628      	mov	r0, r5
    92f6:	f008 fbb9 	bl	11a6c <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    92fa:	4b76      	ldr	r3, [pc, #472]	; (94d4 <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    92fc:	4a76      	ldr	r2, [pc, #472]	; (94d8 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    92fe:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    9302:	2102      	movs	r1, #2
    9304:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    9308:	6810      	ldr	r0, [r2, #0]
    930a:	f006 fe01 	bl	ff10 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    930e:	f857 0f04 	ldr.w	r0, [r7, #4]!
    9312:	6803      	ldr	r3, [r0, #0]
    9314:	b221      	sxth	r1, r4
    9316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9318:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    931a:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    931c:	2c15      	cmp	r4, #21
    931e:	d1f6      	bne.n	930e <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    9320:	f005 fe14 	bl	ef4c <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    9324:	4b6d      	ldr	r3, [pc, #436]	; (94dc <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    9326:	6818      	ldr	r0, [r3, #0]
    9328:	f001 ff74 	bl	b214 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    932c:	486c      	ldr	r0, [pc, #432]	; (94e0 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    932e:	f001 fac9 	bl	a8c4 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    9332:	4b6c      	ldr	r3, [pc, #432]	; (94e4 <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    9334:	6818      	ldr	r0, [r3, #0]
    9336:	f003 ff21 	bl	d17c <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    933a:	4b6b      	ldr	r3, [pc, #428]	; (94e8 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    933c:	6818      	ldr	r0, [r3, #0]
    933e:	f006 f923 	bl	f588 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    9342:	4b6a      	ldr	r3, [pc, #424]	; (94ec <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    9344:	6818      	ldr	r0, [r3, #0]
    9346:	f7fd f9ef 	bl	6728 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    934a:	4869      	ldr	r0, [pc, #420]	; (94f0 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    934c:	f002 fd7c 	bl	be48 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9350:	4a68      	ldr	r2, [pc, #416]	; (94f4 <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    9352:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    9356:	f36f 1386 	bfc	r3, #6, #1
    935a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    935e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9362:	f3c1 1180 	ubfx	r1, r1, #6, #1
    9366:	2900      	cmp	r1, #0
    9368:	d1f9      	bne.n	935e <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    936a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    936e:	4c62      	ldr	r4, [pc, #392]	; (94f8 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    9370:	4f5b      	ldr	r7, [pc, #364]	; (94e0 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9372:	4b62      	ldr	r3, [pc, #392]	; (94fc <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    9374:	f8df c190 	ldr.w	ip, [pc, #400]	; 9508 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9378:	f361 0003 	bfi	r0, r1, #0, #4
    937c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    9380:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9384:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9388:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    938c:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    938e:	6961      	ldr	r1, [r4, #20]
    9390:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    9394:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    9398:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    939c:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    939e:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93a0:	f8c3 e000 	str.w	lr, [r3]
    93a4:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    93a8:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    93ac:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    93b0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    93b4:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    93b8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    93bc:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93c0:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    93c4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93c8:	f8c3 9000 	str.w	r9, [r3]
    93cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93d0:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93d4:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    93d8:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93da:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93de:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93e2:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93e6:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93ea:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93ee:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93f2:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    93f6:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    93fa:	6019      	str	r1, [r3, #0]
    93fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9400:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9404:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9406:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    940a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    940e:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9410:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9414:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9418:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    941c:	6019      	str	r1, [r3, #0]
    941e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9422:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9426:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    942a:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    942c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9430:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    9432:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9436:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    943a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    943e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    9442:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9446:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    944a:	f44f 7880 	mov.w	r8, #256	; 0x100
    944e:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9450:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    9454:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9456:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    945a:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    945e:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9462:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9464:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9468:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    946c:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    946e:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9472:	f8c3 800c 	str.w	r8, [r3, #12]
    9476:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    947a:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    947e:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    9482:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    9486:	f000 fb7f 	bl	9b88 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    948a:	b100      	cbz	r0, 948e <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    948c:	e7fe      	b.n	948c <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    948e:	4b1c      	ldr	r3, [pc, #112]	; (9500 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    9490:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    9492:	4621      	mov	r1, r4
    9494:	4628      	mov	r0, r5
    9496:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    949a:	f008 fad9 	bl	11a50 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    949e:	f642 043b 	movw	r4, #10299	; 0x283b
    94a2:	f000 fb9d 	bl	9be0 <Microseconds>
    94a6:	42a0      	cmp	r0, r4
    94a8:	d9fb      	bls.n	94a2 <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    94aa:	4b16      	ldr	r3, [pc, #88]	; (9504 <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    94ac:	6818      	ldr	r0, [r3, #0]
    94ae:	f000 fcdd 	bl	9e6c <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    94b2:	2301      	movs	r3, #1
    94b4:	7033      	strb	r3, [r6, #0]
    94b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94ba:	bf00      	nop
    94bc:	e000edf0 	.word	0xe000edf0
    94c0:	e0001000 	.word	0xe0001000
    94c4:	40001800 	.word	0x40001800
    94c8:	20001f28 	.word	0x20001f28
    94cc:	00022fcc 	.word	0x00022fcc
    94d0:	0001d4c0 	.word	0x0001d4c0
    94d4:	41008000 	.word	0x41008000
    94d8:	20001f18 	.word	0x20001f18
    94dc:	20001c0c 	.word	0x20001c0c
    94e0:	200019e0 	.word	0x200019e0
    94e4:	20001e0c 	.word	0x20001e0c
    94e8:	20001f0c 	.word	0x20001f0c
    94ec:	20000ae0 	.word	0x20000ae0
    94f0:	20001af8 	.word	0x20001af8
    94f4:	40001c00 	.word	0x40001c00
    94f8:	40000800 	.word	0x40000800
    94fc:	e000e100 	.word	0xe000e100
    9500:	e000ed00 	.word	0xe000ed00
    9504:	20001c00 	.word	0x20001c00
    9508:	20001bf4 	.word	0x20001bf4

0000950c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    950c:	b672      	cpsid	i
    950e:	4a09      	ldr	r2, [pc, #36]	; (9534 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    9510:	4b09      	ldr	r3, [pc, #36]	; (9538 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    9512:	2901      	cmp	r1, #1
    9514:	bf18      	it	ne
    9516:	2300      	movne	r3, #0
    9518:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    951a:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    951e:	4907      	ldr	r1, [pc, #28]	; (953c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    9520:	4b07      	ldr	r3, [pc, #28]	; (9540 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    9522:	68ca      	ldr	r2, [r1, #12]
    9524:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9528:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    952a:	60cb      	str	r3, [r1, #12]
    952c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    9530:	bf00      	nop
    9532:	e7fd      	b.n	9530 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    9534:	2002fffc 	.word	0x2002fffc
    9538:	f01669ef 	.word	0xf01669ef
    953c:	e000ed00 	.word	0xe000ed00
    9540:	05fa0004 	.word	0x05fa0004

00009544 <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    9544:	4b01      	ldr	r3, [pc, #4]	; (954c <GMAC_Handler+0x8>)
    9546:	6818      	ldr	r0, [r3, #0]
    9548:	f001 b908 	b.w	a75c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    954c:	20001c00 	.word	0x20001c00

00009550 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    9550:	4801      	ldr	r0, [pc, #4]	; (9558 <SERCOM0_0_Handler+0x8>)
    9552:	f007 bf13 	b.w	1137c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9556:	bf00      	nop
    9558:	200015f8 	.word	0x200015f8

0000955c <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    955c:	4801      	ldr	r0, [pc, #4]	; (9564 <SERCOM0_2_Handler+0x8>)
    955e:	f007 bf35 	b.w	113cc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9562:	bf00      	nop
    9564:	200015f8 	.word	0x200015f8

00009568 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9568:	4801      	ldr	r0, [pc, #4]	; (9570 <SERCOM0_3_Handler+0x8>)
    956a:	f007 bf6b 	b.w	11444 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    956e:	bf00      	nop
    9570:	200015f8 	.word	0x200015f8

00009574 <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    9574:	4801      	ldr	r0, [pc, #4]	; (957c <SERCOM2_0_Handler+0x8>)
    9576:	f007 bf01 	b.w	1137c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    957a:	bf00      	nop
    957c:	20001750 	.word	0x20001750

00009580 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9580:	4801      	ldr	r0, [pc, #4]	; (9588 <SERCOM2_2_Handler+0x8>)
    9582:	f007 bf23 	b.w	113cc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9586:	bf00      	nop
    9588:	20001750 	.word	0x20001750

0000958c <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    958c:	4801      	ldr	r0, [pc, #4]	; (9594 <SERCOM2_3_Handler+0x8>)
    958e:	f007 bf59 	b.w	11444 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9592:	bf00      	nop
    9594:	20001750 	.word	0x20001750

00009598 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9598:	4801      	ldr	r0, [pc, #4]	; (95a0 <SERCOM7_0_Handler+0x8>)
    959a:	f007 beef 	b.w	1137c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    959e:	bf00      	nop
    95a0:	200014a0 	.word	0x200014a0

000095a4 <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    95a4:	4801      	ldr	r0, [pc, #4]	; (95ac <SERCOM7_2_Handler+0x8>)
    95a6:	f007 bf11 	b.w	113cc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    95aa:	bf00      	nop
    95ac:	200014a0 	.word	0x200014a0

000095b0 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    95b0:	4801      	ldr	r0, [pc, #4]	; (95b8 <SERCOM7_3_Handler+0x8>)
    95b2:	f007 bf47 	b.w	11444 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    95b6:	bf00      	nop
    95b8:	200014a0 	.word	0x200014a0

000095bc <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    95bc:	4b02      	ldr	r3, [pc, #8]	; (95c8 <EIC_0_Handler+0xc>)
    95be:	2100      	movs	r1, #0
    95c0:	6818      	ldr	r0, [r3, #0]
    95c2:	f006 bced 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    95c6:	bf00      	nop
    95c8:	20001f18 	.word	0x20001f18

000095cc <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    95cc:	4b02      	ldr	r3, [pc, #8]	; (95d8 <EIC_1_Handler+0xc>)
    95ce:	2101      	movs	r1, #1
    95d0:	6818      	ldr	r0, [r3, #0]
    95d2:	f006 bce5 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    95d6:	bf00      	nop
    95d8:	20001f18 	.word	0x20001f18

000095dc <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    95dc:	4b02      	ldr	r3, [pc, #8]	; (95e8 <EIC_2_Handler+0xc>)
    95de:	2102      	movs	r1, #2
    95e0:	6818      	ldr	r0, [r3, #0]
    95e2:	f006 bcdd 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    95e6:	bf00      	nop
    95e8:	20001f18 	.word	0x20001f18

000095ec <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    95ec:	4b02      	ldr	r3, [pc, #8]	; (95f8 <EIC_3_Handler+0xc>)
    95ee:	2103      	movs	r1, #3
    95f0:	6818      	ldr	r0, [r3, #0]
    95f2:	f006 bcd5 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    95f6:	bf00      	nop
    95f8:	20001f18 	.word	0x20001f18

000095fc <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    95fc:	4b02      	ldr	r3, [pc, #8]	; (9608 <EIC_4_Handler+0xc>)
    95fe:	2104      	movs	r1, #4
    9600:	6818      	ldr	r0, [r3, #0]
    9602:	f006 bccd 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9606:	bf00      	nop
    9608:	20001f18 	.word	0x20001f18

0000960c <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    960c:	4b02      	ldr	r3, [pc, #8]	; (9618 <EIC_5_Handler+0xc>)
    960e:	2105      	movs	r1, #5
    9610:	6818      	ldr	r0, [r3, #0]
    9612:	f006 bcc5 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9616:	bf00      	nop
    9618:	20001f18 	.word	0x20001f18

0000961c <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    961c:	4b02      	ldr	r3, [pc, #8]	; (9628 <EIC_6_Handler+0xc>)
    961e:	2106      	movs	r1, #6
    9620:	6818      	ldr	r0, [r3, #0]
    9622:	f006 bcbd 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9626:	bf00      	nop
    9628:	20001f18 	.word	0x20001f18

0000962c <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    962c:	4b02      	ldr	r3, [pc, #8]	; (9638 <EIC_7_Handler+0xc>)
    962e:	2107      	movs	r1, #7
    9630:	6818      	ldr	r0, [r3, #0]
    9632:	f006 bcb5 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9636:	bf00      	nop
    9638:	20001f18 	.word	0x20001f18

0000963c <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    963c:	4b02      	ldr	r3, [pc, #8]	; (9648 <EIC_8_Handler+0xc>)
    963e:	2108      	movs	r1, #8
    9640:	6818      	ldr	r0, [r3, #0]
    9642:	f006 bcad 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9646:	bf00      	nop
    9648:	20001f18 	.word	0x20001f18

0000964c <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    964c:	4b02      	ldr	r3, [pc, #8]	; (9658 <EIC_9_Handler+0xc>)
    964e:	2109      	movs	r1, #9
    9650:	6818      	ldr	r0, [r3, #0]
    9652:	f006 bca5 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9656:	bf00      	nop
    9658:	20001f18 	.word	0x20001f18

0000965c <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    965c:	4b02      	ldr	r3, [pc, #8]	; (9668 <EIC_10_Handler+0xc>)
    965e:	210a      	movs	r1, #10
    9660:	6818      	ldr	r0, [r3, #0]
    9662:	f006 bc9d 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9666:	bf00      	nop
    9668:	20001f18 	.word	0x20001f18

0000966c <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    966c:	4b02      	ldr	r3, [pc, #8]	; (9678 <EIC_11_Handler+0xc>)
    966e:	210b      	movs	r1, #11
    9670:	6818      	ldr	r0, [r3, #0]
    9672:	f006 bc95 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9676:	bf00      	nop
    9678:	20001f18 	.word	0x20001f18

0000967c <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    967c:	4b01      	ldr	r3, [pc, #4]	; (9684 <EIC_12_Handler+0x8>)
    967e:	6818      	ldr	r0, [r3, #0]
    9680:	f000 beb0 	b.w	a3e4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    9684:	20001c00 	.word	0x20001c00

00009688 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9688:	4b02      	ldr	r3, [pc, #8]	; (9694 <EIC_13_Handler+0xc>)
    968a:	210d      	movs	r1, #13
    968c:	6818      	ldr	r0, [r3, #0]
    968e:	f006 bc87 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    9692:	bf00      	nop
    9694:	20001f18 	.word	0x20001f18

00009698 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9698:	4b02      	ldr	r3, [pc, #8]	; (96a4 <EIC_14_Handler+0xc>)
    969a:	210e      	movs	r1, #14
    969c:	6818      	ldr	r0, [r3, #0]
    969e:	f006 bc7f 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96a2:	bf00      	nop
    96a4:	20001f18 	.word	0x20001f18

000096a8 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    96a8:	4b02      	ldr	r3, [pc, #8]	; (96b4 <EIC_15_Handler+0xc>)
    96aa:	210f      	movs	r1, #15
    96ac:	6818      	ldr	r0, [r3, #0]
    96ae:	f006 bc77 	b.w	ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    96b2:	bf00      	nop
    96b4:	20001f18 	.word	0x20001f18

000096b8 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    96b8:	4b02      	ldr	r3, [pc, #8]	; (96c4 <TCC3_0_Handler+0xc>)
    96ba:	4a03      	ldr	r2, [pc, #12]	; (96c8 <TCC3_0_Handler+0x10>)
    96bc:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    96be:	4803      	ldr	r0, [pc, #12]	; (96cc <TCC3_0_Handler+0x14>)
    96c0:	f005 b9ce 	b.w	ea60 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    96c4:	42001000 	.word	0x42001000
    96c8:	003ffc0f 	.word	0x003ffc0f
    96cc:	20001400 	.word	0x20001400

000096d0 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    96d0:	4b02      	ldr	r3, [pc, #8]	; (96dc <TCC4_0_Handler+0xc>)
    96d2:	4a03      	ldr	r2, [pc, #12]	; (96e0 <TCC4_0_Handler+0x10>)
    96d4:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    96d6:	4803      	ldr	r0, [pc, #12]	; (96e4 <TCC4_0_Handler+0x14>)
    96d8:	f005 b9c2 	b.w	ea60 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    96dc:	43001000 	.word	0x43001000
    96e0:	003ffc0f 	.word	0x003ffc0f
    96e4:	2000137c 	.word	0x2000137c

000096e8 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    96e8:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    96ea:	4b0d      	ldr	r3, [pc, #52]	; (9720 <SysTick_Handler+0x38>)
    96ec:	781b      	ldrb	r3, [r3, #0]
    96ee:	b103      	cbz	r3, 96f2 <SysTick_Handler+0xa>
    96f0:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    96f2:	4b0c      	ldr	r3, [pc, #48]	; (9724 <SysTick_Handler+0x3c>)
    96f4:	781b      	ldrb	r3, [r3, #0]
    96f6:	2b00      	cmp	r3, #0
    96f8:	d0fa      	beq.n	96f0 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    96fa:	4b0b      	ldr	r3, [pc, #44]	; (9728 <SysTick_Handler+0x40>)
    96fc:	6818      	ldr	r0, [r3, #0]
    96fe:	f006 fa99 	bl	fc34 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    9702:	480a      	ldr	r0, [pc, #40]	; (972c <SysTick_Handler+0x44>)
    9704:	f7fb fd2c 	bl	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9708:	4809      	ldr	r0, [pc, #36]	; (9730 <SysTick_Handler+0x48>)
    970a:	f7fb fd29 	bl	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    970e:	4809      	ldr	r0, [pc, #36]	; (9734 <SysTick_Handler+0x4c>)
    9710:	f7fb fd26 	bl	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9714:	4808      	ldr	r0, [pc, #32]	; (9738 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    9716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    971a:	f7fb bd21 	b.w	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    971e:	bf00      	nop
    9720:	20001090 	.word	0x20001090
    9724:	200019dc 	.word	0x200019dc
    9728:	20001f0c 	.word	0x20001f0c
    972c:	20000b70 	.word	0x20000b70
    9730:	20000cb8 	.word	0x20000cb8
    9734:	20000e00 	.word	0x20000e00
    9738:	20000f48 	.word	0x20000f48

0000973c <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    973c:	4a30      	ldr	r2, [pc, #192]	; (9800 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    973e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    9742:	4b30      	ldr	r3, [pc, #192]	; (9804 <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    9744:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    9746:	4a30      	ldr	r2, [pc, #192]	; (9808 <TCC0_0_Handler+0xcc>)
    9748:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    974a:	4630      	mov	r0, r6
    974c:	f000 f9ca 	bl	9ae4 <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    9750:	4b2e      	ldr	r3, [pc, #184]	; (980c <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    9752:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9848 <TCC0_0_Handler+0x10c>
    9756:	f8d3 9000 	ldr.w	r9, [r3]
    975a:	4648      	mov	r0, r9
    975c:	f005 ff88 	bl	f670 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    9760:	4b2b      	ldr	r3, [pc, #172]	; (9810 <TCC0_0_Handler+0xd4>)
    9762:	6818      	ldr	r0, [r3, #0]
    9764:	f003 fec4 	bl	d4f0 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9768:	4b2a      	ldr	r3, [pc, #168]	; (9814 <TCC0_0_Handler+0xd8>)
    976a:	6818      	ldr	r0, [r3, #0]
    976c:	f008 fa14 	bl	11b98 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9770:	4b29      	ldr	r3, [pc, #164]	; (9818 <TCC0_0_Handler+0xdc>)
    9772:	6818      	ldr	r0, [r3, #0]
    9774:	f7fd fe22 	bl	73bc <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9778:	4b28      	ldr	r3, [pc, #160]	; (981c <TCC0_0_Handler+0xe0>)
    977a:	681f      	ldr	r7, [r3, #0]
    977c:	4638      	mov	r0, r7
    977e:	f006 fc3d 	bl	fffc <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    9782:	f898 3000 	ldrb.w	r3, [r8]
    9786:	b15b      	cbz	r3, 97a0 <TCC0_0_Handler+0x64>
    9788:	4c25      	ldr	r4, [pc, #148]	; (9820 <TCC0_0_Handler+0xe4>)
    978a:	4826      	ldr	r0, [pc, #152]	; (9824 <TCC0_0_Handler+0xe8>)
    978c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9790:	e001      	b.n	9796 <TCC0_0_Handler+0x5a>
    9792:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    9796:	6803      	ldr	r3, [r0, #0]
    9798:	6a1b      	ldr	r3, [r3, #32]
    979a:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    979c:	42ac      	cmp	r4, r5
    979e:	d1f8      	bne.n	9792 <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    97a0:	4638      	mov	r0, r7
    97a2:	f006 fc3f 	bl	10024 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    97a6:	4820      	ldr	r0, [pc, #128]	; (9828 <TCC0_0_Handler+0xec>)
    97a8:	f002 fb7c 	bl	bea4 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    97ac:	481f      	ldr	r0, [pc, #124]	; (982c <TCC0_0_Handler+0xf0>)
    97ae:	f001 f95b 	bl	aa68 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    97b2:	4630      	mov	r0, r6
    97b4:	f000 f9ac 	bl	9b10 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    97b8:	4a1d      	ldr	r2, [pc, #116]	; (9830 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    97ba:	491e      	ldr	r1, [pc, #120]	; (9834 <TCC0_0_Handler+0xf8>)
    tickCnt++;
    97bc:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    97be:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    97c0:	3301      	adds	r3, #1
    97c2:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    97c4:	b111      	cbz	r1, 97cc <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    97c6:	f898 3000 	ldrb.w	r3, [r8]
    97ca:	b923      	cbnz	r3, 97d6 <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    97cc:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    97ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    97d2:	f000 b98d 	b.w	9af0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    97d6:	4648      	mov	r0, r9
    97d8:	f006 fa2c 	bl	fc34 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    97dc:	4816      	ldr	r0, [pc, #88]	; (9838 <TCC0_0_Handler+0xfc>)
    97de:	f7fb fcbf 	bl	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    97e2:	4816      	ldr	r0, [pc, #88]	; (983c <TCC0_0_Handler+0x100>)
    97e4:	f7fb fcbc 	bl	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    97e8:	4815      	ldr	r0, [pc, #84]	; (9840 <TCC0_0_Handler+0x104>)
    97ea:	f7fb fcb9 	bl	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    97ee:	4815      	ldr	r0, [pc, #84]	; (9844 <TCC0_0_Handler+0x108>)
    97f0:	f7fb fcb6 	bl	5160 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    97f4:	4630      	mov	r0, r6
}
    97f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    97fa:	f000 b979 	b.w	9af0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    97fe:	bf00      	nop
    9800:	20001bf4 	.word	0x20001bf4
    9804:	41016000 	.word	0x41016000
    9808:	003ffc0f 	.word	0x003ffc0f
    980c:	20001f0c 	.word	0x20001f0c
    9810:	20001e0c 	.word	0x20001e0c
    9814:	20001f28 	.word	0x20001f28
    9818:	20000ae0 	.word	0x20000ae0
    981c:	20001f18 	.word	0x20001f18
    9820:	00022fd0 	.word	0x00022fd0
    9824:	200011f0 	.word	0x200011f0
    9828:	20001af8 	.word	0x20001af8
    982c:	200019e0 	.word	0x200019e0
    9830:	20001bf0 	.word	0x20001bf0
    9834:	20001090 	.word	0x20001090
    9838:	20000b70 	.word	0x20000b70
    983c:	20000cb8 	.word	0x20000cb8
    9840:	20000e00 	.word	0x20000e00
    9844:	20000f48 	.word	0x20000f48
    9848:	200019dc 	.word	0x200019dc

0000984c <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    984c:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    984e:	4813      	ldr	r0, [pc, #76]	; (989c <Reset_Handler+0x50>)
    9850:	4b13      	ldr	r3, [pc, #76]	; (98a0 <Reset_Handler+0x54>)
    9852:	4298      	cmp	r0, r3
    9854:	d00b      	beq.n	986e <Reset_Handler+0x22>
    9856:	4913      	ldr	r1, [pc, #76]	; (98a4 <Reset_Handler+0x58>)
    9858:	4281      	cmp	r1, r0
    985a:	d008      	beq.n	986e <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    985c:	4298      	cmp	r0, r3
    985e:	d206      	bcs.n	986e <Reset_Handler+0x22>
            *pDest = *pSrc;
    9860:	43c2      	mvns	r2, r0
    9862:	441a      	add	r2, r3
    9864:	f022 0203 	bic.w	r2, r2, #3
    9868:	3204      	adds	r2, #4
    986a:	f014 feb9 	bl	1e5e0 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    986e:	480e      	ldr	r0, [pc, #56]	; (98a8 <Reset_Handler+0x5c>)
    9870:	4b0e      	ldr	r3, [pc, #56]	; (98ac <Reset_Handler+0x60>)
    9872:	4298      	cmp	r0, r3
    9874:	d008      	beq.n	9888 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    9876:	d207      	bcs.n	9888 <Reset_Handler+0x3c>
            *pDest = 0ul;
    9878:	43c2      	mvns	r2, r0
    987a:	441a      	add	r2, r3
    987c:	f022 0203 	bic.w	r2, r2, #3
    9880:	3204      	adds	r2, #4
    9882:	2100      	movs	r1, #0
    9884:	f014 ffaa 	bl	1e7dc <memset>
        }
    }

    SystemInit();
    9888:	f002 f93a 	bl	bb00 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    988c:	f014 fb06 	bl	1de9c <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    9890:	4807      	ldr	r0, [pc, #28]	; (98b0 <Reset_Handler+0x64>)
    9892:	f7ff fcfb 	bl	928c <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    9896:	f7fa fd3f 	bl	4318 <main>
    989a:	e7fe      	b.n	989a <Reset_Handler+0x4e>
    989c:	20000000 	.word	0x20000000
    98a0:	20000ac0 	.word	0x20000ac0
    98a4:	00025314 	.word	0x00025314
    98a8:	20000ac0 	.word	0x20000ac0
    98ac:	200023b0 	.word	0x200023b0
    98b0:	200019dc 	.word	0x200019dc

000098b4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    98b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    98b8:	4852      	ldr	r0, [pc, #328]	; (9a04 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    98ba:	4d53      	ldr	r5, [pc, #332]	; (9a08 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    98bc:	4c53      	ldr	r4, [pc, #332]	; (9a0c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    98be:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 9a7c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    98c2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9a80 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    98c6:	4f52      	ldr	r7, [pc, #328]	; (9a10 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    98c8:	f002 fa94 	bl	bdf4 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    98cc:	4b51      	ldr	r3, [pc, #324]	; (9a14 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    98ce:	4a52      	ldr	r2, [pc, #328]	; (9a18 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    98d0:	4852      	ldr	r0, [pc, #328]	; (9a1c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    98d2:	601a      	str	r2, [r3, #0]
    98d4:	2600      	movs	r6, #0
    98d6:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    98da:	f000 ff61 	bl	a7a0 <_ZN9ClearCore13ShiftRegisterC1Ev>
    98de:	4b50      	ldr	r3, [pc, #320]	; (9a20 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    98e0:	4a50      	ldr	r2, [pc, #320]	; (9a24 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    98e2:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    98e6:	4628      	mov	r0, r5
    98e8:	601a      	str	r2, [r3, #0]
    98ea:	f004 ff73 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    98ee:	4b4e      	ldr	r3, [pc, #312]	; (9a28 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    98f0:	602b      	str	r3, [r5, #0]
    98f2:	4620      	mov	r0, r4
    98f4:	f004 ff6e 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    98f8:	4b4c      	ldr	r3, [pc, #304]	; (9a2c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    98fa:	6023      	str	r3, [r4, #0]
    98fc:	4648      	mov	r0, r9
    98fe:	f004 ff69 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    9902:	4c4b      	ldr	r4, [pc, #300]	; (9a30 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    9904:	4d4b      	ldr	r5, [pc, #300]	; (9a34 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    9906:	f8c9 4000 	str.w	r4, [r9]
    990a:	4640      	mov	r0, r8
    990c:	f004 ff62 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    9910:	f8df 9170 	ldr.w	r9, [pc, #368]	; 9a84 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    9914:	f8c8 4000 	str.w	r4, [r8]
    9918:	4638      	mov	r0, r7
    991a:	f004 ff5b 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    991e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9a88 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    9922:	603c      	str	r4, [r7, #0]
    9924:	4628      	mov	r0, r5
    9926:	f004 ff55 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    992a:	4c43      	ldr	r4, [pc, #268]	; (9a38 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    992c:	4f43      	ldr	r7, [pc, #268]	; (9a3c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    992e:	602c      	str	r4, [r5, #0]
    9930:	4648      	mov	r0, r9
    9932:	f004 ff4f 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    9936:	4d42      	ldr	r5, [pc, #264]	; (9a40 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    9938:	f8c9 4000 	str.w	r4, [r9]
    993c:	4640      	mov	r0, r8
    993e:	f004 ff49 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    9942:	4c40      	ldr	r4, [pc, #256]	; (9a44 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    9944:	f8df 9144 	ldr.w	r9, [pc, #324]	; 9a8c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    9948:	f8c8 4000 	str.w	r4, [r8]
    994c:	4638      	mov	r0, r7
    994e:	f004 ff41 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    9952:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9a90 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    9956:	603c      	str	r4, [r7, #0]
    9958:	4628      	mov	r0, r5
    995a:	f004 ff3b 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    995e:	4f3a      	ldr	r7, [pc, #232]	; (9a48 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    9960:	602c      	str	r4, [r5, #0]
    9962:	4648      	mov	r0, r9
    9964:	f004 ff36 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    9968:	4c38      	ldr	r4, [pc, #224]	; (9a4c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    996a:	4d39      	ldr	r5, [pc, #228]	; (9a50 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    996c:	f8c9 4000 	str.w	r4, [r9]
    9970:	4640      	mov	r0, r8
    9972:	f004 ff2f 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    9976:	4638      	mov	r0, r7
    9978:	f8c8 4000 	str.w	r4, [r8]
    997c:	f004 ff2a 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    9980:	4628      	mov	r0, r5
    9982:	603c      	str	r4, [r7, #0]
    9984:	f004 ff26 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    9988:	4832      	ldr	r0, [pc, #200]	; (9a54 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    998a:	602c      	str	r4, [r5, #0]
    998c:	f7fd ff1e 	bl	77cc <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    9990:	4831      	ldr	r0, [pc, #196]	; (9a58 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    9992:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9a94 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    9996:	4d31      	ldr	r5, [pc, #196]	; (9a5c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    9998:	4c31      	ldr	r4, [pc, #196]	; (9a60 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    999a:	4f32      	ldr	r7, [pc, #200]	; (9a64 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    999c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9a98 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    99a0:	f7fd ff14 	bl	77cc <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    99a4:	4830      	ldr	r0, [pc, #192]	; (9a68 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    99a6:	f7fd ff11 	bl	77cc <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    99aa:	4830      	ldr	r0, [pc, #192]	; (9a6c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    99ac:	f7fd ff0e 	bl	77cc <_ZN9ClearCore11MotorDriverC1Ev>
    99b0:	4640      	mov	r0, r8
    99b2:	4b2f      	ldr	r3, [pc, #188]	; (9a70 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    99b4:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    99b8:	f004 ff0c 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    99bc:	4b2d      	ldr	r3, [pc, #180]	; (9a74 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    99be:	f8c8 3000 	str.w	r3, [r8]
    99c2:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    99c6:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    99c8:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    99cc:	f8c5 9000 	str.w	r9, [r5]
    99d0:	f8c8 3004 	str.w	r3, [r8, #4]
    99d4:	f004 fefe 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    99d8:	f107 0874 	add.w	r8, r7, #116	; 0x74
    99dc:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    99e0:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    99e4:	f8c4 9000 	str.w	r9, [r4]
    99e8:	602f      	str	r7, [r5, #0]
    99ea:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    99ee:	f004 fef1 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    99f2:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    99f6:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    99f8:	481f      	ldr	r0, [pc, #124]	; (9a78 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    99fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    99fe:	f7fd bf07 	b.w	7810 <_ZN9ClearCore10SysManagerC1Ev>
    9a02:	bf00      	nop
    9a04:	20001af8 	.word	0x20001af8
    9a08:	20001484 	.word	0x20001484
    9a0c:	200011f0 	.word	0x200011f0
    9a10:	2000131c 	.word	0x2000131c
    9a14:	20001894 	.word	0x20001894
    9a18:	00022f14 	.word	0x00022f14
    9a1c:	200019e0 	.word	0x200019e0
    9a20:	20001750 	.word	0x20001750
    9a24:	00022f64 	.word	0x00022f64
    9a28:	00023714 	.word	0x00023714
    9a2c:	0002347c 	.word	0x0002347c
    9a30:	000234dc 	.word	0x000234dc
    9a34:	2000137c 	.word	0x2000137c
    9a38:	0002358c 	.word	0x0002358c
    9a3c:	20001190 	.word	0x20001190
    9a40:	200011c0 	.word	0x200011c0
    9a44:	0002355c 	.word	0x0002355c
    9a48:	200010d8 	.word	0x200010d8
    9a4c:	000234ac 	.word	0x000234ac
    9a50:	2000111c 	.word	0x2000111c
    9a54:	20000b70 	.word	0x20000b70
    9a58:	20000cb8 	.word	0x20000cb8
    9a5c:	200014a0 	.word	0x200014a0
    9a60:	200015f8 	.word	0x200015f8
    9a64:	00023670 	.word	0x00023670
    9a68:	20000e00 	.word	0x20000e00
    9a6c:	20000f48 	.word	0x20000f48
    9a70:	00022e10 	.word	0x00022e10
    9a74:	00022e60 	.word	0x00022e60
    9a78:	200019dc 	.word	0x200019dc
    9a7c:	2000125c 	.word	0x2000125c
    9a80:	200012bc 	.word	0x200012bc
    9a84:	20001400 	.word	0x20001400
    9a88:	20001160 	.word	0x20001160
    9a8c:	20000b28 	.word	0x20000b28
    9a90:	20001094 	.word	0x20001094
    9a94:	20001490 	.word	0x20001490
    9a98:	00023600 	.word	0x00023600

00009a9c <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    9a9c:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    9a9e:	4d0f      	ldr	r5, [pc, #60]	; (9adc <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    9aa0:	682c      	ldr	r4, [r5, #0]
    9aa2:	f014 0401 	ands.w	r4, r4, #1
    9aa6:	d002      	beq.n	9aae <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    9aa8:	4b0d      	ldr	r3, [pc, #52]	; (9ae0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    9aaa:	6818      	ldr	r0, [r3, #0]
    9aac:	bd70      	pop	{r4, r5, r6, pc}
    9aae:	2030      	movs	r0, #48	; 0x30
    9ab0:	f009 fdf6 	bl	136a0 <_Znwj>
    9ab4:	4a0a      	ldr	r2, [pc, #40]	; (9ae0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    9ab6:	6004      	str	r4, [r0, #0]
    9ab8:	2105      	movs	r1, #5
    9aba:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    9abe:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    9ac0:	7501      	strb	r1, [r0, #20]
    9ac2:	6084      	str	r4, [r0, #8]
    9ac4:	60c4      	str	r4, [r0, #12]
    9ac6:	6104      	str	r4, [r0, #16]
    9ac8:	6184      	str	r4, [r0, #24]
    9aca:	61c4      	str	r4, [r0, #28]
    9acc:	6204      	str	r4, [r0, #32]
    9ace:	6244      	str	r4, [r0, #36]	; 0x24
    9ad0:	6284      	str	r4, [r0, #40]	; 0x28
    9ad2:	62c4      	str	r4, [r0, #44]	; 0x2c
    9ad4:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    9ad6:	6010      	str	r0, [r2, #0]
    9ad8:	602b      	str	r3, [r5, #0]
    return *instance;
}
    9ada:	bd70      	pop	{r4, r5, r6, pc}
    9adc:	20001bec 	.word	0x20001bec
    9ae0:	20001bf8 	.word	0x20001bf8

00009ae4 <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    9ae4:	4b01      	ldr	r3, [pc, #4]	; (9aec <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    9ae6:	685b      	ldr	r3, [r3, #4]
    9ae8:	6003      	str	r3, [r0, #0]
    9aea:	4770      	bx	lr
    9aec:	e0001000 	.word	0xe0001000

00009af0 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9af0:	4b06      	ldr	r3, [pc, #24]	; (9b0c <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    9af2:	6801      	ldr	r1, [r0, #0]
    9af4:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    9af6:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9af8:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    9afa:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    9afc:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    9afe:	bf38      	it	cc
    9b00:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    9b02:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9b04:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    9b06:	bf88      	it	hi
    9b08:	6083      	strhi	r3, [r0, #8]
    9b0a:	4770      	bx	lr
    9b0c:	e0001000 	.word	0xe0001000

00009b10 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9b10:	4a1c      	ldr	r2, [pc, #112]	; (9b84 <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    9b12:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9b14:	68d3      	ldr	r3, [r2, #12]
    9b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9b1a:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    9b1c:	7d03      	ldrb	r3, [r0, #20]
    9b1e:	3b01      	subs	r3, #1
    9b20:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    9b22:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    9b24:	7503      	strb	r3, [r0, #20]
    9b26:	b923      	cbnz	r3, 9b32 <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    9b28:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9b2a:	2205      	movs	r2, #5
        m_msTickCnt++;
    9b2c:	3301      	adds	r3, #1
    9b2e:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9b30:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    9b32:	6825      	ldr	r5, [r4, #0]
    9b34:	69a3      	ldr	r3, [r4, #24]
    9b36:	406b      	eors	r3, r5
    9b38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    9b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9b40:	d001      	beq.n	9b46 <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    9b42:	61a5      	str	r5, [r4, #24]
    9b44:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    9b46:	2d00      	cmp	r5, #0
    9b48:	db08      	blt.n	9b5c <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    9b4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9b4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    9b4e:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9b50:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9b52:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    9b56:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    9b58:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    9b5a:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    9b5c:	69e1      	ldr	r1, [r4, #28]
    9b5e:	3101      	adds	r1, #1
    9b60:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    9b62:	2278      	movs	r2, #120	; 0x78
    9b64:	2300      	movs	r3, #0
    9b66:	2000      	movs	r0, #0
    9b68:	f012 fdf8 	bl	1c75c <__aeabi_uldivmod>
    9b6c:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    9b6e:	b128      	cbz	r0, 9b7c <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    9b70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    9b74:	00c3      	lsls	r3, r0, #3
    9b76:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    9b78:	62e3      	str	r3, [r4, #44]	; 0x2c
    9b7a:	e7e2      	b.n	9b42 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    9b7c:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    9b7e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9b80:	e7df      	b.n	9b42 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    9b82:	bf00      	nop
    9b84:	e000edf0 	.word	0xe000edf0

00009b88 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    9b88:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    9b8c:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    9b8e:	29c7      	cmp	r1, #199	; 0xc7
    9b90:	4a0d      	ldr	r2, [pc, #52]	; (9bc8 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9b92:	f103 33ff 	add.w	r3, r3, #4294967295
    9b96:	bf8c      	ite	hi
    9b98:	2100      	movhi	r1, #0
    9b9a:	2101      	movls	r1, #1
    9b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    9ba0:	7011      	strb	r1, [r2, #0]
    9ba2:	d20e      	bcs.n	9bc2 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9ba4:	4a09      	ldr	r2, [pc, #36]	; (9bcc <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9ba6:	480a      	ldr	r0, [pc, #40]	; (9bd0 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    9ba8:	b410      	push	{r4}
    9baa:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9bae:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9bb0:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9bb4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9bb6:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9bb8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9bba:	6011      	str	r1, [r2, #0]
}
    9bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
    9bc0:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9bc2:	2001      	movs	r0, #1
    9bc4:	4770      	bx	lr
    9bc6:	bf00      	nop
    9bc8:	20001090 	.word	0x20001090
    9bcc:	e000e010 	.word	0xe000e010
    9bd0:	e000ed00 	.word	0xe000ed00

00009bd4 <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    9bd4:	4b01      	ldr	r3, [pc, #4]	; (9bdc <Milliseconds+0x8>)
    9bd6:	681b      	ldr	r3, [r3, #0]
    9bd8:	6918      	ldr	r0, [r3, #16]
}
    9bda:	4770      	bx	lr
    9bdc:	20001bf4 	.word	0x20001bf4

00009be0 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    9be0:	4b0e      	ldr	r3, [pc, #56]	; (9c1c <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    9be2:	4a0f      	ldr	r2, [pc, #60]	; (9c20 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    9be4:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    9be6:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    9be8:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    9bea:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    9bec:	db0a      	blt.n	9c04 <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    9bee:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    9bf0:	490c      	ldr	r1, [pc, #48]	; (9c24 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9bf2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    9bf4:	4423      	add	r3, r4
    9bf6:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9bfa:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c02:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    9c04:	6a94      	ldr	r4, [r2, #40]	; 0x28
    9c06:	4907      	ldr	r1, [pc, #28]	; (9c24 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9c08:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    9c0a:	1b1b      	subs	r3, r3, r4
    9c0c:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9c10:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9c14:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c18:	4770      	bx	lr
    9c1a:	bf00      	nop
    9c1c:	e0001000 	.word	0xe0001000
    9c20:	20001bf4 	.word	0x20001bf4
    9c24:	88888889 	.word	0x88888889

00009c28 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    9c28:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    9c2a:	4e0d      	ldr	r6, [pc, #52]	; (9c60 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    9c2c:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    9c30:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    9c32:	d013      	beq.n	9c5c <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    9c34:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9c36:	2500      	movs	r5, #0
    9c38:	1b1c      	subs	r4, r3, r4
    9c3a:	428d      	cmp	r5, r1
    9c3c:	bf08      	it	eq
    9c3e:	4284      	cmpeq	r4, r0
    9c40:	d20c      	bcs.n	9c5c <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    9c42:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9c44:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9c46:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9c4a:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9c4e:	2500      	movs	r5, #0
    9c50:	461c      	mov	r4, r3
    9c52:	428d      	cmp	r5, r1
    9c54:	bf08      	it	eq
    9c56:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    9c58:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9c5a:	d3f2      	bcc.n	9c42 <Delay_cycles+0x1a>
    }
}
    9c5c:	bc70      	pop	{r4, r5, r6}
    9c5e:	4770      	bx	lr
    9c60:	e0001000 	.word	0xe0001000

00009c64 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    9c64:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    9c66:	f7ff ff19 	bl	9a9c <_ZN9ClearCore9SysTiming8InstanceEv>
    9c6a:	4b01      	ldr	r3, [pc, #4]	; (9c70 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    9c6c:	6018      	str	r0, [r3, #0]
    9c6e:	bd08      	pop	{r3, pc}
    9c70:	20001bf4 	.word	0x20001bf4

00009c74 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    9c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    9c76:	4e37      	ldr	r6, [pc, #220]	; (9d54 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    9c78:	6835      	ldr	r5, [r6, #0]
    9c7a:	f015 0501 	ands.w	r5, r5, #1
    9c7e:	d002      	beq.n	9c86 <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    9c80:	4b35      	ldr	r3, [pc, #212]	; (9d58 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    9c82:	6818      	ldr	r0, [r3, #0]
    9c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c86:	f641 10c4 	movw	r0, #6596	; 0x19c4
    9c8a:	f009 fd09 	bl	136a0 <_Znwj>
    9c8e:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9c90:	2711      	movs	r7, #17
    9c92:	2312      	movs	r3, #18
    9c94:	6067      	str	r7, [r4, #4]
    9c96:	60e3      	str	r3, [r4, #12]
    9c98:	2213      	movs	r2, #19
    9c9a:	210d      	movs	r1, #13
    9c9c:	2714      	movs	r7, #20
    9c9e:	230b      	movs	r3, #11
    9ca0:	6162      	str	r2, [r4, #20]
    9ca2:	61e1      	str	r1, [r4, #28]
    9ca4:	6367      	str	r7, [r4, #52]	; 0x34
    9ca6:	6463      	str	r3, [r4, #68]	; 0x44
    9ca8:	270c      	movs	r7, #12
    9caa:	2302      	movs	r3, #2
    9cac:	200f      	movs	r0, #15
    9cae:	220e      	movs	r2, #14
    9cb0:	211c      	movs	r1, #28
    9cb2:	6323      	str	r3, [r4, #48]	; 0x30
    9cb4:	63a3      	str	r3, [r4, #56]	; 0x38
    9cb6:	6423      	str	r3, [r4, #64]	; 0x40
    9cb8:	6523      	str	r3, [r4, #80]	; 0x50
    9cba:	62e0      	str	r0, [r4, #44]	; 0x2c
    9cbc:	64e2      	str	r2, [r4, #76]	; 0x4c
    9cbe:	6561      	str	r1, [r4, #84]	; 0x54
    9cc0:	6267      	str	r7, [r4, #36]	; 0x24
    9cc2:	4629      	mov	r1, r5
    9cc4:	63e7      	str	r7, [r4, #60]	; 0x3c
    9cc6:	65a7      	str	r7, [r4, #88]	; 0x58
    9cc8:	6025      	str	r5, [r4, #0]
    9cca:	60a5      	str	r5, [r4, #8]
    9ccc:	6125      	str	r5, [r4, #16]
    9cce:	61a5      	str	r5, [r4, #24]
    9cd0:	6225      	str	r5, [r4, #32]
    9cd2:	62a5      	str	r5, [r4, #40]	; 0x28
    9cd4:	64a5      	str	r5, [r4, #72]	; 0x48
    9cd6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    9cda:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    9cde:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    9ce2:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    9ce6:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    9cea:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    9cee:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    9cf2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    9cf6:	f504 7094 	add.w	r0, r4, #296	; 0x128
    9cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9cfe:	f014 fd6d 	bl	1e7dc <memset>
    9d02:	4629      	mov	r1, r5
    9d04:	f604 1028 	addw	r0, r4, #2344	; 0x928
    9d08:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    9d0c:	f014 fd66 	bl	1e7dc <memset>
    9d10:	f641 176c 	movw	r7, #6508	; 0x196c
    9d14:	f641 1168 	movw	r1, #6504	; 0x1968
    9d18:	19e3      	adds	r3, r4, r7
    9d1a:	f641 126a 	movw	r2, #6506	; 0x196a
    9d1e:	20c8      	movs	r0, #200	; 0xc8
    9d20:	5260      	strh	r0, [r4, r1]
    9d22:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    9d26:	2108      	movs	r1, #8
    9d28:	54a1      	strb	r1, [r4, r2]
    9d2a:	3004      	adds	r0, #4
    9d2c:	51e5      	str	r5, [r4, r7]
    9d2e:	4629      	mov	r1, r5
    9d30:	605d      	str	r5, [r3, #4]
    9d32:	609d      	str	r5, [r3, #8]
    9d34:	60dd      	str	r5, [r3, #12]
    9d36:	611d      	str	r5, [r3, #16]
    9d38:	615d      	str	r5, [r3, #20]
    9d3a:	223c      	movs	r2, #60	; 0x3c
    9d3c:	f014 fd4e 	bl	1e7dc <memset>
    static EthernetManager *instance = new EthernetManager();
    9d40:	4905      	ldr	r1, [pc, #20]	; (9d58 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9d42:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    9d46:	2301      	movs	r3, #1
    9d48:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9d4a:	6015      	str	r5, [r2, #0]
    9d4c:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    9d4e:	6033      	str	r3, [r6, #0]
}
    9d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d52:	bf00      	nop
    9d54:	20001bfc 	.word	0x20001bfc
    9d58:	20001c04 	.word	0x20001c04

00009d5c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    9d5c:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    9d5e:	4b3e      	ldr	r3, [pc, #248]	; (9e58 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    9d60:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    9d64:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    9d68:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    9d6c:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9d6e:	493b      	ldr	r1, [pc, #236]	; (9e5c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    9d70:	f042 0210 	orr.w	r2, r2, #16
    9d74:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9d76:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9d78:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9d7a:	6893      	ldr	r3, [r2, #8]
    9d7c:	0759      	lsls	r1, r3, #29
    9d7e:	d5fc      	bpl.n	9d7a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    9d80:	6813      	ldr	r3, [r2, #0]
    9d82:	f36f 1304 	bfc	r3, #4, #1
    9d86:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9d88:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9d8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9d8e:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    9d90:	428b      	cmp	r3, r1
    9d92:	d05d      	beq.n	9e50 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    9d94:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    9d96:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9d98:	4c31      	ldr	r4, [pc, #196]	; (9e60 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9d9a:	492f      	ldr	r1, [pc, #188]	; (9e58 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9d9c:	f043 0310 	orr.w	r3, r3, #16
    9da0:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9da2:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9da4:	688b      	ldr	r3, [r1, #8]
    9da6:	075a      	lsls	r2, r3, #29
    9da8:	d5fc      	bpl.n	9da4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    9daa:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9dac:	4c2b      	ldr	r4, [pc, #172]	; (9e5c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9dae:	4a2a      	ldr	r2, [pc, #168]	; (9e58 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9db0:	f36f 1304 	bfc	r3, #4, #1
    9db4:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9db6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9db8:	680b      	ldr	r3, [r1, #0]
    9dba:	f043 0310 	orr.w	r3, r3, #16
    9dbe:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9dc0:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9dc2:	6893      	ldr	r3, [r2, #8]
    9dc4:	075b      	lsls	r3, r3, #29
    9dc6:	d5fc      	bpl.n	9dc2 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    9dc8:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9dca:	4c26      	ldr	r4, [pc, #152]	; (9e64 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9dcc:	4922      	ldr	r1, [pc, #136]	; (9e58 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9dce:	f36f 1304 	bfc	r3, #4, #1
    9dd2:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9dd4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9dd6:	6813      	ldr	r3, [r2, #0]
    9dd8:	f043 0310 	orr.w	r3, r3, #16
    9ddc:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9dde:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9de0:	688b      	ldr	r3, [r1, #8]
    9de2:	075c      	lsls	r4, r3, #29
    9de4:	d5fc      	bpl.n	9de0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    9de6:	680b      	ldr	r3, [r1, #0]
    9de8:	f36f 1304 	bfc	r3, #4, #1
    9dec:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9dee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9df0:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    9df2:	b12b      	cbz	r3, 9e00 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    9df4:	2301      	movs	r3, #1
    9df6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    9dfe:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    9e00:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e02:	4c19      	ldr	r4, [pc, #100]	; (9e68 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e04:	4a14      	ldr	r2, [pc, #80]	; (9e58 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9e06:	f043 0310 	orr.w	r3, r3, #16
    9e0a:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e0c:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e0e:	6893      	ldr	r3, [r2, #8]
    9e10:	0759      	lsls	r1, r3, #29
    9e12:	d5fc      	bpl.n	9e0e <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    9e14:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e16:	4c13      	ldr	r4, [pc, #76]	; (9e64 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e18:	490f      	ldr	r1, [pc, #60]	; (9e58 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9e1a:	f36f 1304 	bfc	r3, #4, #1
    9e1e:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9e20:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9e22:	6813      	ldr	r3, [r2, #0]
    9e24:	f043 0310 	orr.w	r3, r3, #16
    9e28:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9e2a:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9e2c:	688b      	ldr	r3, [r1, #8]
    9e2e:	075b      	lsls	r3, r3, #29
    9e30:	d5fc      	bpl.n	9e2c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    9e32:	680b      	ldr	r3, [r1, #0]
    9e34:	f36f 1304 	bfc	r3, #4, #1
    9e38:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9e3a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    9e3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9e40:	2b07      	cmp	r3, #7
    9e42:	d1d7      	bne.n	9df4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    9e44:	2300      	movs	r3, #0
    9e46:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    9e4e:	4770      	bx	lr
        m_phyInitFailed = true;
    9e50:	2301      	movs	r3, #1
    9e52:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    9e56:	4770      	bx	lr
    9e58:	42000800 	.word	0x42000800
    9e5c:	60020000 	.word	0x60020000
    9e60:	50028000 	.word	0x50028000
    9e64:	606e0000 	.word	0x606e0000
    9e68:	506e0700 	.word	0x506e0700

00009e6c <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    9e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9e70:	4be2      	ldr	r3, [pc, #904]	; (a1fc <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    9e72:	681a      	ldr	r2, [r3, #0]
    9e74:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    9e76:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9e78:	d503      	bpl.n	9e82 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    9e7a:	681a      	ldr	r2, [r3, #0]
    9e7c:	0750      	lsls	r0, r2, #29
    9e7e:	f100 82a2 	bmi.w	a3c6 <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    9e82:	4ade      	ldr	r2, [pc, #888]	; (a1fc <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9e84:	48de      	ldr	r0, [pc, #888]	; (a200 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    9e86:	6813      	ldr	r3, [r2, #0]
    9e88:	f043 0310 	orr.w	r3, r3, #16
    9e8c:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    9e8e:	6853      	ldr	r3, [r2, #4]
    9e90:	f043 0301 	orr.w	r3, r3, #1
    9e94:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    9e96:	6853      	ldr	r3, [r2, #4]
    9e98:	f043 0302 	orr.w	r3, r3, #2
    9e9c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    9e9e:	6853      	ldr	r3, [r2, #4]
    9ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9ea4:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    9ea6:	6853      	ldr	r3, [r2, #4]
    9ea8:	2104      	movs	r1, #4
    9eaa:	f361 4394 	bfi	r3, r1, #18, #3
    9eae:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    9eb0:	68d3      	ldr	r3, [r2, #12]
    9eb2:	f36f 0300 	bfc	r3, #0, #1
    9eb6:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    9eb8:	6913      	ldr	r3, [r2, #16]
    9eba:	f361 0304 	bfi	r3, r1, #0, #5
    9ebe:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    9ec0:	6913      	ldr	r3, [r2, #16]
    9ec2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    9ec6:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    9ec8:	6913      	ldr	r3, [r2, #16]
    9eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9ece:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9ed0:	6915      	ldr	r5, [r2, #16]
    9ed2:	2302      	movs	r3, #2
    9ed4:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9ed8:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    9edc:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    9ede:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    9ee0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    9ee4:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9ee8:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    9eec:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    9ef0:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    9ef4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    9ef8:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    9efc:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    9f00:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    9f04:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9f08:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9f0c:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    9f10:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9f14:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9f18:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    9f1c:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    9f20:	66e3      	str	r3, [r4, #108]	; 0x6c
    9f22:	6763      	str	r3, [r4, #116]	; 0x74
    9f24:	67e3      	str	r3, [r4, #124]	; 0x7c
    9f26:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    9f2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9f2e:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    9f32:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    9f36:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9f3a:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    9f3e:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    9f42:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    9f46:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    9f4a:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    9f4e:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    9f52:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    9f56:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    9f5a:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    9f5e:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    9f62:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    9f66:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    9f6a:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    9f6e:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    9f72:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    9f76:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9f7a:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    9f7e:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    9f82:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9f86:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    9f8a:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    9f8e:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9f90:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    9f94:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    9f98:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    9f9c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9fa0:	3610      	adds	r6, #16
    9fa2:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    9fa4:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9fa8:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    9fac:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    9fb0:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9fb2:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    9fb6:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9fba:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    9fbe:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9fc0:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    9fc2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    9fc6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    9fca:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    9fce:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    9fd2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    9fd6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    9fda:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    9fde:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    9fe2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    9fe6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    9fea:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    9fee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    9ff2:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    9ff6:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    9ffa:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    9ffe:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    a000:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a004:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    a008:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a00c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    a010:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    a014:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    a018:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    a01c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a020:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    a024:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    a028:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    a02c:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    a030:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    a034:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    a038:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    a03c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a040:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a044:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a048:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a04c:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a050:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a054:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    a058:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    a05c:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    a060:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    a064:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    a068:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a06c:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    a070:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a074:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a076:	6196      	str	r6, [r2, #24]
    a078:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a07c:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a080:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    a082:	6823      	ldr	r3, [r4, #0]
    a084:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    a086:	01db      	lsls	r3, r3, #7
    a088:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a08c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a090:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    a092:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    a096:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    a09a:	f042 0201 	orr.w	r2, r2, #1
    a09e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a0a2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a0a6:	f011 0f01 	tst.w	r1, #1
    a0aa:	f04f 010b 	mov.w	r1, #11
    a0ae:	bf14      	ite	ne
    a0b0:	f361 1207 	bfine	r2, r1, #4, #4
    a0b4:	f361 0203 	bfieq	r2, r1, #0, #4
    a0b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    a0bc:	68a3      	ldr	r3, [r4, #8]
    a0be:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    a0c0:	01db      	lsls	r3, r3, #7
    a0c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a0c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a0ca:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a0cc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a0d0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a0d4:	f041 0101 	orr.w	r1, r1, #1
    a0d8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a0dc:	f012 0f01 	tst.w	r2, #1
    a0e0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a0e4:	f04f 010b 	mov.w	r1, #11
    a0e8:	bf14      	ite	ne
    a0ea:	f361 1207 	bfine	r2, r1, #4, #4
    a0ee:	f361 0203 	bfieq	r2, r1, #0, #4
    a0f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    a0f6:	6923      	ldr	r3, [r4, #16]
    a0f8:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    a0fa:	01db      	lsls	r3, r3, #7
    a0fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a100:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a104:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a106:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a10a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a10e:	f041 0101 	orr.w	r1, r1, #1
    a112:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a116:	f012 0f01 	tst.w	r2, #1
    a11a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a11e:	f04f 010b 	mov.w	r1, #11
    a122:	bf14      	ite	ne
    a124:	f361 1207 	bfine	r2, r1, #4, #4
    a128:	f361 0203 	bfieq	r2, r1, #0, #4
    a12c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    a130:	69a3      	ldr	r3, [r4, #24]
    a132:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    a134:	01db      	lsls	r3, r3, #7
    a136:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a13a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a13e:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a140:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a144:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a148:	f041 0101 	orr.w	r1, r1, #1
    a14c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a150:	f012 0f01 	tst.w	r2, #1
    a154:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a158:	f04f 010b 	mov.w	r1, #11
    a15c:	bf14      	ite	ne
    a15e:	f361 1207 	bfine	r2, r1, #4, #4
    a162:	f361 0203 	bfieq	r2, r1, #0, #4
    a166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    a16a:	6a23      	ldr	r3, [r4, #32]
    a16c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    a16e:	01db      	lsls	r3, r3, #7
    a170:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a174:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a178:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a17a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a17e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a182:	f041 0101 	orr.w	r1, r1, #1
    a186:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a18a:	f012 0f01 	tst.w	r2, #1
    a18e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a192:	f04f 010b 	mov.w	r1, #11
    a196:	bf14      	ite	ne
    a198:	f361 1207 	bfine	r2, r1, #4, #4
    a19c:	f361 0203 	bfieq	r2, r1, #0, #4
    a1a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    a1a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a1a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    a1a8:	01db      	lsls	r3, r3, #7
    a1aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a1ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a1b2:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a1b4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a1b8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a1bc:	f041 0101 	orr.w	r1, r1, #1
    a1c0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a1c4:	f012 0f01 	tst.w	r2, #1
    a1c8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a1cc:	f04f 010b 	mov.w	r1, #11
    a1d0:	bf14      	ite	ne
    a1d2:	f361 1207 	bfine	r2, r1, #4, #4
    a1d6:	f361 0203 	bfieq	r2, r1, #0, #4
    a1da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    a1de:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a1e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    a1e2:	01db      	lsls	r3, r3, #7
    a1e4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a1e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a1ec:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a1ee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a1f2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a1f6:	f041 0101 	orr.w	r1, r1, #1
    a1fa:	e003      	b.n	a204 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    a1fc:	42000800 	.word	0x42000800
    a200:	e000e100 	.word	0xe000e100
    a204:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a208:	f012 0f01 	tst.w	r2, #1
    a20c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a210:	f04f 010b 	mov.w	r1, #11
    a214:	bf14      	ite	ne
    a216:	f361 1207 	bfine	r2, r1, #4, #4
    a21a:	f361 0203 	bfieq	r2, r1, #0, #4
    a21e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    a222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a224:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    a226:	01db      	lsls	r3, r3, #7
    a228:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a22c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a230:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a232:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a236:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a23a:	f041 0101 	orr.w	r1, r1, #1
    a23e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a242:	f012 0f01 	tst.w	r2, #1
    a246:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a24a:	f04f 010b 	mov.w	r1, #11
    a24e:	bf14      	ite	ne
    a250:	f361 1207 	bfine	r2, r1, #4, #4
    a254:	f361 0203 	bfieq	r2, r1, #0, #4
    a258:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    a25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a25e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    a260:	01db      	lsls	r3, r3, #7
    a262:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a266:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a26a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a26c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a270:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a274:	f041 0101 	orr.w	r1, r1, #1
    a278:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a27c:	f012 0f01 	tst.w	r2, #1
    a280:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a284:	f04f 010b 	mov.w	r1, #11
    a288:	bf14      	ite	ne
    a28a:	f361 1207 	bfine	r2, r1, #4, #4
    a28e:	f361 0203 	bfieq	r2, r1, #0, #4
    a292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    a296:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a298:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    a29a:	01db      	lsls	r3, r3, #7
    a29c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a2a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a2a4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2a6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a2aa:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a2ae:	f041 0101 	orr.w	r1, r1, #1
    a2b2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2b6:	f012 0f01 	tst.w	r2, #1
    a2ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a2be:	f04f 010b 	mov.w	r1, #11
    a2c2:	bf14      	ite	ne
    a2c4:	f361 1207 	bfine	r2, r1, #4, #4
    a2c8:	f361 0203 	bfieq	r2, r1, #0, #4
    a2cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a2d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a2d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a2d4:	01db      	lsls	r3, r3, #7
    a2d6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    a2da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    a2de:	1850      	adds	r0, r2, r1
    a2e0:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a2e2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a2e6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a2ea:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a2ee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a2f2:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a2f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a2fa:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a2fc:	bf14      	ite	ne
    a2fe:	f36f 1007 	bfcne	r0, #4, #4
    a302:	f367 0003 	bfieq	r0, r7, #0, #4
    a306:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a30a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a30e:	4932      	ldr	r1, [pc, #200]	; (a3d8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    a310:	4a32      	ldr	r2, [pc, #200]	; (a3dc <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a312:	f040 0001 	orr.w	r0, r0, #1
    a316:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    a31a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a31e:	f040 0002 	orr.w	r0, r0, #2
    a322:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a326:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a32c:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    a32e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a330:	f043 0302 	orr.w	r3, r3, #2
    a334:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    a336:	7813      	ldrb	r3, [r2, #0]
    a338:	f36f 0341 	bfc	r3, #1, #1
    a33c:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a33e:	6853      	ldr	r3, [r2, #4]
    a340:	0799      	lsls	r1, r3, #30
    a342:	d4fc      	bmi.n	a33e <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a344:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a346:	4925      	ldr	r1, [pc, #148]	; (a3dc <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a348:	08c3      	lsrs	r3, r0, #3
    a34a:	009b      	lsls	r3, r3, #2
    a34c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    a350:	2701      	movs	r7, #1
    a352:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    a356:	4087      	lsls	r7, r0
    a358:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a35a:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a35e:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a360:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a362:	f04f 0e0f 	mov.w	lr, #15
    a366:	fa0e fe00 	lsl.w	lr, lr, r0
    a36a:	ea27 070e 	bic.w	r7, r7, lr
    a36e:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    a370:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    a374:	2705      	movs	r7, #5
    a376:	fa07 f000 	lsl.w	r0, r7, r0
    a37a:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    a37e:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    a380:	7813      	ldrb	r3, [r2, #0]
    a382:	f043 0302 	orr.w	r3, r3, #2
    a386:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a388:	684b      	ldr	r3, [r1, #4]
    a38a:	079b      	lsls	r3, r3, #30
    a38c:	d4fc      	bmi.n	a388 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    a38e:	4620      	mov	r0, r4
    a390:	f7ff fce4 	bl	9d5c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a394:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a398:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a39c:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a3a0:	4b0f      	ldr	r3, [pc, #60]	; (a3e0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a3a2:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a3a4:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a3a8:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a3aa:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a3ae:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a3b2:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a3b6:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a3b8:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a3ba:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a3bc:	6818      	ldr	r0, [r3, #0]
}
    a3be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a3c2:	f007 bd8f 	b.w	11ee4 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a3c6:	681a      	ldr	r2, [r3, #0]
    a3c8:	f36f 02c3 	bfc	r2, #3, #1
    a3cc:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a3ce:	681a      	ldr	r2, [r3, #0]
    a3d0:	f36f 0282 	bfc	r2, #2, #1
    a3d4:	601a      	str	r2, [r3, #0]
    a3d6:	e554      	b.n	9e82 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a3d8:	42000800 	.word	0x42000800
    a3dc:	40002800 	.word	0x40002800
    a3e0:	20001f34 	.word	0x20001f34

0000a3e4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a3e8:	6d85      	ldr	r5, [r0, #88]	; 0x58
    a3ea:	4ca1      	ldr	r4, [pc, #644]	; (a670 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    a3ec:	4ba1      	ldr	r3, [pc, #644]	; (a674 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a3ee:	49a2      	ldr	r1, [pc, #648]	; (a678 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a3f0:	2201      	movs	r2, #1
    a3f2:	40aa      	lsls	r2, r5
    a3f4:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    a3f6:	681a      	ldr	r2, [r3, #0]
    a3f8:	f042 0210 	orr.w	r2, r2, #16
    a3fc:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a3fe:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a400:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a402:	6893      	ldr	r3, [r2, #8]
    a404:	075d      	lsls	r5, r3, #29
    a406:	d5fc      	bpl.n	a402 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    a408:	6813      	ldr	r3, [r2, #0]
    a40a:	f36f 1304 	bfc	r3, #4, #1
    a40e:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a410:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    a412:	07cc      	lsls	r4, r1, #31
    a414:	d415      	bmi.n	a442 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    a416:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    a418:	bf44      	itt	mi
    a41a:	2300      	movmi	r3, #0
    a41c:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    a420:	078c      	lsls	r4, r1, #30
    a422:	d401      	bmi.n	a428 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a428:	4b92      	ldr	r3, [pc, #584]	; (a674 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a42a:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    a42c:	2101      	movs	r1, #1
    a42e:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a432:	0711      	lsls	r1, r2, #28
    a434:	d5f6      	bpl.n	a424 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    a436:	681a      	ldr	r2, [r3, #0]
    a438:	0752      	lsls	r2, r2, #29
    a43a:	f100 8121 	bmi.w	a680 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    a43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a442:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a444:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    a446:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a448:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a44a:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    a44e:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a452:	d56d      	bpl.n	a530 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    a454:	6813      	ldr	r3, [r2, #0]
    a456:	075f      	lsls	r7, r3, #29
    a458:	d56a      	bpl.n	a530 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a45a:	6813      	ldr	r3, [r2, #0]
    a45c:	f36f 03c3 	bfc	r3, #3, #1
    a460:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a462:	6813      	ldr	r3, [r2, #0]
    a464:	f36f 0382 	bfc	r3, #2, #1
    a468:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    a46a:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a46e:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a472:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a476:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a47a:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a47e:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a482:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a486:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a48a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a48e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a492:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a496:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a49a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a49e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4a2:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a4a6:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a4aa:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a4ae:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a4b2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a4b6:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a4ba:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a4be:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a4c2:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a4c6:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a4ca:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a4ce:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a4d2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4de:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4e2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4e6:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4ea:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a4ee:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a4f2:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    a4f6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a4fa:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a4fe:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a502:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a506:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a50a:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    a50e:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a512:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a516:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a51a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a522:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a524:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a528:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a52c:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a530:	4b50      	ldr	r3, [pc, #320]	; (a674 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a532:	4d52      	ldr	r5, [pc, #328]	; (a67c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a534:	681a      	ldr	r2, [r3, #0]
    a536:	f042 0210 	orr.w	r2, r2, #16
    a53a:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a53c:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a53e:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a540:	6893      	ldr	r3, [r2, #8]
    a542:	075e      	lsls	r6, r3, #29
    a544:	d5fc      	bpl.n	a540 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a546:	6813      	ldr	r3, [r2, #0]
    a548:	f36f 1304 	bfc	r3, #4, #1
    a54c:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a54e:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a550:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a552:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a554:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a558:	f366 0500 	bfi	r5, r6, #0, #1
    a55c:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a55e:	6855      	ldr	r5, [r2, #4]
    a560:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a564:	f363 0541 	bfi	r5, r3, #1, #1
    a568:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a56a:	6813      	ldr	r3, [r2, #0]
    a56c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a570:	b96b      	cbnz	r3, a58e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a572:	429c      	cmp	r4, r3
    a574:	f43f af4f 	beq.w	a416 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a578:	b16c      	cbz	r4, a596 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a57a:	4b3e      	ldr	r3, [pc, #248]	; (a674 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a57c:	681a      	ldr	r2, [r3, #0]
    a57e:	f042 0208 	orr.w	r2, r2, #8
    a582:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a584:	681a      	ldr	r2, [r3, #0]
    a586:	f042 0204 	orr.w	r2, r2, #4
    a58a:	601a      	str	r2, [r3, #0]
    a58c:	e743      	b.n	a416 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a58e:	6813      	ldr	r3, [r2, #0]
    a590:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a594:	e7ed      	b.n	a572 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a596:	4b37      	ldr	r3, [pc, #220]	; (a674 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a598:	681a      	ldr	r2, [r3, #0]
    a59a:	f364 02c3 	bfi	r2, r4, #3, #1
    a59e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a5a0:	681a      	ldr	r2, [r3, #0]
    a5a2:	f364 0282 	bfi	r2, r4, #2, #1
    a5a6:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a5a8:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a5ac:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a5b0:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a5b4:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a5b8:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a5bc:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a5c0:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a5c4:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a5c8:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a5cc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a5d0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a5d4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a5d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a5e0:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a5e4:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a5e8:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a5ec:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a5f0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a5f4:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a5f8:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a5fc:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a600:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a604:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a608:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a60c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a610:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a618:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a61c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a620:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a624:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a628:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a62c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a630:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a634:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a638:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a63c:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a640:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a644:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a648:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a64c:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a650:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a654:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a658:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a65c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a664:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a668:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a66c:	e6d3      	b.n	a416 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a66e:	bf00      	nop
    a670:	40002800 	.word	0x40002800
    a674:	42000800 	.word	0x42000800
    a678:	606e0000 	.word	0x606e0000
    a67c:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a680:	681a      	ldr	r2, [r3, #0]
    a682:	f36f 02c3 	bfc	r2, #3, #1
    a686:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a688:	681a      	ldr	r2, [r3, #0]
    a68a:	f36f 0282 	bfc	r2, #2, #1
    a68e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a690:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a694:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a698:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a69c:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a6a0:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a6a4:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a6a8:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a6ac:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a6b0:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a6b4:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a6b8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6bc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6c8:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a6cc:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a6d0:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a6d4:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a6d8:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a6dc:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a6e0:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a6e4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a6e8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6f4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6f8:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a6fc:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a700:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a704:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a708:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a70c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a710:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a714:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a718:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a71c:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a720:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a724:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a728:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a72c:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a730:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    a734:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a738:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a73c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a748:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    a74a:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a74e:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a752:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    a756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a75a:	bf00      	nop

0000a75c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    a75c:	4b0b      	ldr	r3, [pc, #44]	; (a78c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    a75e:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    a760:	695a      	ldr	r2, [r3, #20]
    a762:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    a764:	6a1a      	ldr	r2, [r3, #32]
    a766:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    a768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    a76a:	9a00      	ldr	r2, [sp, #0]
    a76c:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    a76e:	bf44      	itt	mi
    a770:	9a00      	ldrmi	r2, [sp, #0]
    a772:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    a774:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    a776:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    a778:	079b      	lsls	r3, r3, #30
        m_recv = true;
    a77a:	bf44      	itt	mi
    a77c:	2301      	movmi	r3, #1
    a77e:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    a782:	4b02      	ldr	r3, [pc, #8]	; (a78c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    a784:	621a      	str	r2, [r3, #32]
}
    a786:	b002      	add	sp, #8
    a788:	4770      	bx	lr
    a78a:	bf00      	nop
    a78c:	42000800 	.word	0x42000800

0000a790 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    a790:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    a792:	f7ff fa6f 	bl	9c74 <_ZN9ClearCore15EthernetManager8InstanceEv>
    a796:	4b01      	ldr	r3, [pc, #4]	; (a79c <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    a798:	6018      	str	r0, [r3, #0]
    a79a:	bd08      	pop	{r3, pc}
    a79c:	20001c00 	.word	0x20001c00

0000a7a0 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    a7a2:	4f46      	ldr	r7, [pc, #280]	; (a8bc <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    a7a4:	f8df e118 	ldr.w	lr, [pc, #280]	; a8c0 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    a7a8:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    a7aa:	4604      	mov	r4, r0
    m_lastOutput(0) {
    a7ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a7ae:	4625      	mov	r5, r4
    a7b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a7b2:	e896 0003 	ldmia.w	r6, {r0, r1}
    a7b6:	f107 0618 	add.w	r6, r7, #24
    a7ba:	e885 0003 	stmia.w	r5, {r0, r1}
    a7be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a7c0:	f104 0518 	add.w	r5, r4, #24
    a7c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a7c6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a7ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a7ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    a7d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a7d4:	f104 0534 	add.w	r5, r4, #52	; 0x34
    a7d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    a7dc:	2608      	movs	r6, #8
    a7de:	257f      	movs	r5, #127	; 0x7f
    a7e0:	23c8      	movs	r3, #200	; 0xc8
    a7e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    a7e6:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    a7ea:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    a7ee:	2500      	movs	r5, #0
    a7f0:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    a7f4:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a7f6:	21fe      	movs	r1, #254	; 0xfe
    a7f8:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    a7fc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a800:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    a804:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    a806:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a808:	4629      	mov	r1, r5
    a80a:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    a80c:	6563      	str	r3, [r4, #84]	; 0x54
    a80e:	65a5      	str	r5, [r4, #88]	; 0x58
    a810:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    a812:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    a816:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    a81a:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a81c:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    a820:	67a5      	str	r5, [r4, #120]	; 0x78
    a822:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    a826:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    a828:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a82a:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    a82e:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    a832:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    a836:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a83a:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    a83e:	2240      	movs	r2, #64	; 0x40
    a840:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    a844:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    a848:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    a84c:	f013 ffc6 	bl	1e7dc <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    a850:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    a854:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a858:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    a85c:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    a860:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a864:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    a868:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    a86c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    a870:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    a874:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a878:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    a87c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    a880:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    a884:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    a888:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    a88c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    a890:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    a894:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    a898:	4620      	mov	r0, r4
    m_lastOutput(0) {
    a89a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    a89e:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    a8a2:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    a8a6:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    a8aa:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    a8ae:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    a8b2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a8b6:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    a8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8bc:	00023364 	.word	0x00023364
    a8c0:	0fe080fc 	.word	0x0fe080fc

0000a8c4 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    a8c4:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    a8c6:	4a64      	ldr	r2, [pc, #400]	; (aa58 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a8c8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a8cc:	f36f 1386 	bfc	r3, #6, #1
    a8d0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a8d4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a8d8:	065d      	lsls	r5, r3, #25
    a8da:	d4fb      	bmi.n	a8d4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    a8dc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a8e0:	495d      	ldr	r1, [pc, #372]	; (aa58 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    a8e2:	2405      	movs	r4, #5
    a8e4:	f364 0303 	bfi	r3, r4, #0, #4
    a8e8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a8ec:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    a8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a8f4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    a8f8:	684b      	ldr	r3, [r1, #4]
    a8fa:	f013 0314 	ands.w	r3, r3, #20
    a8fe:	d1fb      	bne.n	a8f8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a900:	4d56      	ldr	r5, [pc, #344]	; (aa5c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a902:	4957      	ldr	r1, [pc, #348]	; (aa60 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a904:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a906:	4a57      	ldr	r2, [pc, #348]	; (aa64 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    a908:	f044 0404 	orr.w	r4, r4, #4
    a90c:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    a90e:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    a912:	2402      	movs	r4, #2
    a914:	f364 1507 	bfi	r5, r4, #4, #4
    a918:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    a91c:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    a920:	f045 0501 	orr.w	r5, r5, #1
    a924:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    a928:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a92c:	f364 1507 	bfi	r5, r4, #4, #4
    a930:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    a934:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    a938:	f045 0501 	orr.w	r5, r5, #1
    a93c:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    a940:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    a944:	f364 0503 	bfi	r5, r4, #0, #4
    a948:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a94c:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a950:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    a952:	f045 0501 	orr.w	r5, r5, #1
    a956:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    a95a:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a95e:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    a962:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    a966:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    a96a:	6811      	ldr	r1, [r2, #0]
    a96c:	f363 0141 	bfi	r1, r3, #1, #1
    a970:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a972:	69d3      	ldr	r3, [r2, #28]
    a974:	f013 0302 	ands.w	r3, r3, #2
    a978:	d1fb      	bne.n	a972 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a97a:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a97c:	4939      	ldr	r1, [pc, #228]	; (aa64 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a97e:	f044 040c 	orr.w	r4, r4, #12
    a982:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    a984:	6814      	ldr	r4, [r2, #0]
    a986:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    a98a:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    a98e:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    a990:	6854      	ldr	r4, [r2, #4]
    a992:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    a996:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    a998:	6894      	ldr	r4, [r2, #8]
    a99a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    a99e:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    a9a0:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    a9a2:	6813      	ldr	r3, [r2, #0]
    a9a4:	f043 0302 	orr.w	r3, r3, #2
    a9a8:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    a9aa:	69cb      	ldr	r3, [r1, #28]
    a9ac:	079c      	lsls	r4, r3, #30
    a9ae:	d4fc      	bmi.n	a9aa <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a9b0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a9b4:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    a9b8:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a9bc:	4a29      	ldr	r2, [pc, #164]	; (aa64 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    a9be:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    a9c0:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    a9c2:	7e13      	ldrb	r3, [r2, #24]
    a9c4:	0799      	lsls	r1, r3, #30
    a9c6:	d5fc      	bpl.n	a9c2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a9c8:	4b25      	ldr	r3, [pc, #148]	; (aa60 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a9ca:	4a26      	ldr	r2, [pc, #152]	; (aa64 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    a9cc:	2104      	movs	r1, #4
    a9ce:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    a9d2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    a9d6:	7e13      	ldrb	r3, [r2, #24]
    a9d8:	075b      	lsls	r3, r3, #29
    a9da:	d5fc      	bpl.n	a9d6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a9dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    a9de:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    a9e2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    a9e6:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    a9ea:	4063      	eors	r3, r4
    a9ec:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    a9f0:	bb7a      	cbnz	r2, aa52 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    a9f2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    a9f6:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    a9fa:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    a9fe:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    aa02:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    aa06:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    aa0a:	4059      	eors	r1, r3
    aa0c:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    aa0e:	404b      	eors	r3, r1
    aa10:	ea83 0105 	eor.w	r1, r3, r5
    aa14:	4031      	ands	r1, r6
    aa16:	4059      	eors	r1, r3
    aa18:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    aa1c:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    aa20:	404a      	eors	r2, r1
    aa22:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    aa24:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    aa26:	b135      	cbz	r5, aa36 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    aa28:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    aa2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    aa30:	b10a      	cbz	r2, aa36 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    aa32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    aa36:	4d0b      	ldr	r5, [pc, #44]	; (aa64 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    aa38:	4909      	ldr	r1, [pc, #36]	; (aa60 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    aa3a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    aa3e:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    aa40:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    aa42:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    aa44:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    aa46:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    aa4a:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    aa4c:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    aa50:	4770      	bx	lr
        output = m_altOutput;
    aa52:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    aa56:	e7ee      	b.n	aa36 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    aa58:	40001c00 	.word	0x40001c00
    aa5c:	40000800 	.word	0x40000800
    aa60:	41008000 	.word	0x41008000
    aa64:	43000800 	.word	0x43000800

0000aa68 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    aa68:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d078      	beq.n	ab62 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    aa70:	6d83      	ldr	r3, [r0, #88]	; 0x58
    aa72:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    aa74:	b4f0      	push	{r4, r5, r6, r7}
    aa76:	6582      	str	r2, [r0, #88]	; 0x58
    aa78:	b90b      	cbnz	r3, aa7e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    aa7a:	6d02      	ldr	r2, [r0, #80]	; 0x50
    aa7c:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    aa7e:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    aa80:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    aa84:	428a      	cmp	r2, r1
    aa86:	bf34      	ite	cc
    aa88:	220c      	movcc	r2, #12
    aa8a:	2208      	movcs	r2, #8
    aa8c:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    aa8e:	3301      	adds	r3, #1
    aa90:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    aa92:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    aa94:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    aa98:	2b3e      	cmp	r3, #62	; 0x3e
    aa9a:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    aa9e:	d961      	bls.n	ab64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    aaa0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    aaa4:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    aaa8:	2400      	movs	r4, #0
    aaaa:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    aaae:	2b00      	cmp	r3, #0
    aab0:	f000 817a 	beq.w	ada8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    aab4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    aab8:	3101      	adds	r1, #1
    aaba:	b2c9      	uxtb	r1, r1
    aabc:	4299      	cmp	r1, r3
    aabe:	460a      	mov	r2, r1
    aac0:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    aac4:	f2c0 817e 	blt.w	adc4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    aac8:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    aacc:	4623      	mov	r3, r4
    aace:	e04c      	b.n	ab6a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    aad0:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    aad2:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    aad4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    aad8:	49b1      	ldr	r1, [pc, #708]	; (ada0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    aada:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    aade:	7e0b      	ldrb	r3, [r1, #24]
    aae0:	079c      	lsls	r4, r3, #30
    aae2:	d5fc      	bpl.n	aade <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    aae4:	4baf      	ldr	r3, [pc, #700]	; (ada4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    aae6:	49ae      	ldr	r1, [pc, #696]	; (ada0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    aae8:	2404      	movs	r4, #4
    aaea:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    aaee:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    aaf2:	7e0b      	ldrb	r3, [r1, #24]
    aaf4:	075b      	lsls	r3, r3, #29
    aaf6:	d5fc      	bpl.n	aaf2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    aaf8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    aafa:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    aafe:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    ab02:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    ab06:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    ab0a:	4073      	eors	r3, r6
    ab0c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    ab10:	2900      	cmp	r1, #0
    ab12:	f040 80d4 	bne.w	acbe <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    ab16:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    ab1a:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    ab1e:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    ab22:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    ab26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    ab2a:	405a      	eors	r2, r3
    ab2c:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    ab2e:	4053      	eors	r3, r2
    ab30:	ea83 0204 	eor.w	r2, r3, r4
    ab34:	402a      	ands	r2, r5
    ab36:	405a      	eors	r2, r3
    ab38:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    ab3c:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    ab40:	4051      	eors	r1, r2
    ab42:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    ab44:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    ab46:	b134      	cbz	r4, ab56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    ab48:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    ab4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    ab50:	b10a      	cbz	r2, ab56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    ab52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    ab56:	4a92      	ldr	r2, [pc, #584]	; (ada0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    ab58:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    ab5c:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    ab5e:	6293      	str	r3, [r2, #40]	; 0x28
}
    ab60:	bcf0      	pop	{r4, r5, r6, r7}
    ab62:	4770      	bx	lr
    ab64:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    ab68:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    ab6a:	4293      	cmp	r3, r2
    ab6c:	bfb4      	ite	lt
    ab6e:	230c      	movlt	r3, #12
    ab70:	2308      	movge	r3, #8
    ab72:	4403      	add	r3, r0
            if (!m_activeMask) {
    ab74:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    ab78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    ab7a:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    ab7e:	2900      	cmp	r1, #0
    ab80:	d0a6      	beq.n	aad0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    ab82:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    ab86:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    ab88:	3301      	adds	r3, #1
    ab8a:	b2db      	uxtb	r3, r3
    ab8c:	2b3f      	cmp	r3, #63	; 0x3f
    ab8e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    ab92:	f200 8097 	bhi.w	acc4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    ab96:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    ab9a:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    ab9c:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    ab9e:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    aba0:	d004      	beq.n	abac <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    aba2:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    aba6:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aba8:	bfb8      	it	lt
    abaa:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    abac:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    abb0:	420a      	tst	r2, r1
    abb2:	d004      	beq.n	abbe <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    abb4:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    abb8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    abba:	bfb8      	it	lt
    abbc:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    abbe:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    abc2:	420a      	tst	r2, r1
    abc4:	d004      	beq.n	abd0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    abc6:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    abca:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    abcc:	bfb8      	it	lt
    abce:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    abd0:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    abd4:	420a      	tst	r2, r1
    abd6:	d004      	beq.n	abe2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    abd8:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    abdc:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    abde:	bfb8      	it	lt
    abe0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    abe2:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    abe6:	420a      	tst	r2, r1
    abe8:	d004      	beq.n	abf4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    abea:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    abee:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    abf0:	bfb8      	it	lt
    abf2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    abf4:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    abf8:	420a      	tst	r2, r1
    abfa:	d004      	beq.n	ac06 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    abfc:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    ac00:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac02:	bfb8      	it	lt
    ac04:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac06:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    ac0a:	420a      	tst	r2, r1
    ac0c:	d004      	beq.n	ac18 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    ac0e:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    ac12:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac14:	bfb8      	it	lt
    ac16:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac18:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    ac1c:	420a      	tst	r2, r1
    ac1e:	d004      	beq.n	ac2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    ac20:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    ac24:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac26:	bfb8      	it	lt
    ac28:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac2a:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    ac2e:	420a      	tst	r2, r1
    ac30:	d004      	beq.n	ac3c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    ac32:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    ac36:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac38:	bfb8      	it	lt
    ac3a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac3c:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    ac40:	420a      	tst	r2, r1
    ac42:	d004      	beq.n	ac4e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    ac44:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    ac48:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac4a:	bfb8      	it	lt
    ac4c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac4e:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    ac52:	420a      	tst	r2, r1
    ac54:	d004      	beq.n	ac60 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    ac56:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    ac5a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac5c:	bfb8      	it	lt
    ac5e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac60:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    ac64:	420a      	tst	r2, r1
    ac66:	d004      	beq.n	ac72 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    ac68:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    ac6c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac6e:	bfb8      	it	lt
    ac70:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac72:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    ac76:	420a      	tst	r2, r1
    ac78:	d004      	beq.n	ac84 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    ac7a:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    ac7e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac80:	bfb8      	it	lt
    ac82:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac84:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    ac88:	420a      	tst	r2, r1
    ac8a:	d004      	beq.n	ac96 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    ac8c:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    ac90:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ac92:	bfb8      	it	lt
    ac94:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ac96:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    ac9a:	420a      	tst	r2, r1
    ac9c:	d004      	beq.n	aca8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    ac9e:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    aca2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    aca4:	bfb8      	it	lt
    aca6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    aca8:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    acac:	4211      	tst	r1, r2
    acae:	d004      	beq.n	acba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    acb0:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    acb4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    acb6:	bfb8      	it	lt
    acb8:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    acba:	6782      	str	r2, [r0, #120]	; 0x78
    acbc:	e70c      	b.n	aad8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    acbe:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    acc2:	e748      	b.n	ab56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    acc4:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    acc6:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    acca:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    acce:	d004      	beq.n	acda <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    acd0:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    acd4:	2a00      	cmp	r2, #0
    acd6:	f040 80cb 	bne.w	ae70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    acda:	078b      	lsls	r3, r1, #30
    acdc:	d504      	bpl.n	ace8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    acde:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    ace2:	2b00      	cmp	r3, #0
    ace4:	f040 80be 	bne.w	ae64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    ace8:	074f      	lsls	r7, r1, #29
    acea:	d504      	bpl.n	acf6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    acec:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    acf0:	2b00      	cmp	r3, #0
    acf2:	f040 80b1 	bne.w	ae58 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    acf6:	070e      	lsls	r6, r1, #28
    acf8:	d504      	bpl.n	ad04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    acfa:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    acfe:	2b00      	cmp	r3, #0
    ad00:	f040 80a4 	bne.w	ae4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    ad04:	06cd      	lsls	r5, r1, #27
    ad06:	d504      	bpl.n	ad12 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    ad08:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	f040 8097 	bne.w	ae40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    ad12:	068c      	lsls	r4, r1, #26
    ad14:	d504      	bpl.n	ad20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    ad16:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	f040 808a 	bne.w	ae34 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    ad20:	064b      	lsls	r3, r1, #25
    ad22:	d503      	bpl.n	ad2c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    ad24:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    ad28:	2b00      	cmp	r3, #0
    ad2a:	d17d      	bne.n	ae28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    ad2c:	060f      	lsls	r7, r1, #24
    ad2e:	d503      	bpl.n	ad38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    ad30:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    ad34:	2b00      	cmp	r3, #0
    ad36:	d171      	bne.n	ae1c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    ad38:	05ce      	lsls	r6, r1, #23
    ad3a:	d503      	bpl.n	ad44 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    ad3c:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    ad40:	2b00      	cmp	r3, #0
    ad42:	d165      	bne.n	ae10 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    ad44:	058d      	lsls	r5, r1, #22
    ad46:	d503      	bpl.n	ad50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    ad48:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    ad4c:	2b00      	cmp	r3, #0
    ad4e:	d159      	bne.n	ae04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    ad50:	054c      	lsls	r4, r1, #21
    ad52:	d503      	bpl.n	ad5c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    ad54:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d14d      	bne.n	adf8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    ad5c:	050b      	lsls	r3, r1, #20
    ad5e:	d503      	bpl.n	ad68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    ad60:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    ad64:	2b00      	cmp	r3, #0
    ad66:	d141      	bne.n	adec <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    ad68:	04cf      	lsls	r7, r1, #19
    ad6a:	d503      	bpl.n	ad74 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    ad6c:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    ad70:	2b00      	cmp	r3, #0
    ad72:	d135      	bne.n	ade0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    ad74:	048e      	lsls	r6, r1, #18
    ad76:	d502      	bpl.n	ad7e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    ad78:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    ad7c:	bb53      	cbnz	r3, add4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    ad7e:	044d      	lsls	r5, r1, #17
    ad80:	d502      	bpl.n	ad88 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    ad82:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    ad86:	b9fb      	cbnz	r3, adc8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    ad88:	0bcb      	lsrs	r3, r1, #15
    ad8a:	d096      	beq.n	acba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    ad8c:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    ad90:	2b00      	cmp	r3, #0
    ad92:	d092      	beq.n	acba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    ad94:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    ad98:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    ad9c:	430a      	orrs	r2, r1
    ad9e:	e78c      	b.n	acba <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    ada0:	43000800 	.word	0x43000800
    ada4:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    ada8:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    adac:	3901      	subs	r1, #1
    adae:	b2c9      	uxtb	r1, r1
    adb0:	42a1      	cmp	r1, r4
    adb2:	460a      	mov	r2, r1
    adb4:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    adb8:	f73f aed7 	bgt.w	ab6a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    adbc:	2101      	movs	r1, #1
    adbe:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    adc2:	e6d2      	b.n	ab6a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    adc4:	4623      	mov	r3, r4
    adc6:	e6d0      	b.n	ab6a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    adc8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    adcc:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    add0:	4322      	orrs	r2, r4
    add2:	e7d9      	b.n	ad88 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    add4:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    add8:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    addc:	4322      	orrs	r2, r4
    adde:	e7ce      	b.n	ad7e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    ade0:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    ade4:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    ade8:	4322      	orrs	r2, r4
    adea:	e7c3      	b.n	ad74 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    adec:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    adf0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    adf4:	4322      	orrs	r2, r4
    adf6:	e7b7      	b.n	ad68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    adf8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    adfc:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    ae00:	4322      	orrs	r2, r4
    ae02:	e7ab      	b.n	ad5c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    ae04:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    ae08:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    ae0c:	4322      	orrs	r2, r4
    ae0e:	e79f      	b.n	ad50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    ae10:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    ae14:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    ae18:	4322      	orrs	r2, r4
    ae1a:	e793      	b.n	ad44 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    ae1c:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    ae20:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    ae24:	4322      	orrs	r2, r4
    ae26:	e787      	b.n	ad38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    ae28:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    ae2c:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    ae30:	4322      	orrs	r2, r4
    ae32:	e77b      	b.n	ad2c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    ae34:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    ae38:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    ae3c:	4322      	orrs	r2, r4
    ae3e:	e76f      	b.n	ad20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    ae40:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    ae44:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    ae48:	4322      	orrs	r2, r4
    ae4a:	e762      	b.n	ad12 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    ae4c:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    ae50:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    ae54:	4322      	orrs	r2, r4
    ae56:	e755      	b.n	ad04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    ae58:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    ae5c:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    ae60:	4322      	orrs	r2, r4
    ae62:	e748      	b.n	acf6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    ae64:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    ae68:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    ae6c:	4322      	orrs	r2, r4
    ae6e:	e73b      	b.n	ace8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    ae70:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    ae74:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    ae78:	e72f      	b.n	acda <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    ae7a:	bf00      	nop

0000ae7c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    ae7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    ae80:	2301      	movs	r3, #1
    ae82:	f100 0834 	add.w	r8, r0, #52	; 0x34
    ae86:	4e4d      	ldr	r6, [pc, #308]	; (afbc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    ae88:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    ae8c:	b083      	sub	sp, #12
    ae8e:	4681      	mov	r9, r0
    m_useAltOutput = true;
    ae90:	4645      	mov	r5, r8
    ae92:	f100 0444 	add.w	r4, r0, #68	; 0x44
    ae96:	2200      	movs	r2, #0
    ae98:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    ae9a:	f855 3b04 	ldr.w	r3, [r5], #4
    ae9e:	4313      	orrs	r3, r2
    aea0:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    aea4:	4630      	mov	r0, r6
    aea6:	4639      	mov	r1, r7
    aea8:	f7fe febe 	bl	9c28 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    aeac:	42a5      	cmp	r5, r4
    aeae:	d002      	beq.n	aeb6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    aeb0:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    aeb4:	e7f1      	b.n	ae9a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    aeb6:	f109 0318 	add.w	r3, r9, #24
    aeba:	4e40      	ldr	r6, [pc, #256]	; (afbc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    aebc:	9301      	str	r3, [sp, #4]
    aebe:	469b      	mov	fp, r3
    aec0:	f04f 0a00 	mov.w	sl, #0
    aec4:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    aec6:	f1ba 0f06 	cmp.w	sl, #6
    aeca:	4630      	mov	r0, r6
    aecc:	4639      	mov	r1, r7
    aece:	f10a 0a01 	add.w	sl, sl, #1
    aed2:	d148      	bne.n	af66 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    aed4:	f8db 2000 	ldr.w	r2, [fp]
    aed8:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    aedc:	4837      	ldr	r0, [pc, #220]	; (afbc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    aede:	4313      	orrs	r3, r2
    aee0:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    aee4:	2100      	movs	r1, #0
    aee6:	f7fe fe9f 	bl	9c28 <Delay_cycles>
    aeea:	4835      	ldr	r0, [pc, #212]	; (afc0 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    aeec:	4e33      	ldr	r6, [pc, #204]	; (afbc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    aeee:	2100      	movs	r1, #0
    aef0:	f7fe fe9a 	bl	9c28 <Delay_cycles>
    aef4:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    aef6:	f858 2b04 	ldr.w	r2, [r8], #4
    aefa:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    aefe:	ea23 0302 	bic.w	r3, r3, r2
    af02:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    af06:	4630      	mov	r0, r6
    af08:	4639      	mov	r1, r7
    af0a:	f7fe fe8d 	bl	9c28 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    af0e:	4545      	cmp	r5, r8
    af10:	d1f1      	bne.n	aef6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    af12:	f3bf 8f5b 	dmb	ish
    af16:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    af1a:	e853 2f00 	ldrex	r2, [r3]
    af1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    af22:	e843 2100 	strex	r1, r2, [r3]
    af26:	2900      	cmp	r1, #0
    af28:	d1f7      	bne.n	af1a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    af2a:	f3bf 8f5b 	dmb	ish
    af2e:	4e23      	ldr	r6, [pc, #140]	; (afbc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    af30:	2500      	movs	r5, #0
    af32:	2700      	movs	r7, #0
    af34:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    af36:	2d06      	cmp	r5, #6
    af38:	461a      	mov	r2, r3
    af3a:	4630      	mov	r0, r6
    af3c:	4639      	mov	r1, r7
    af3e:	f105 0501 	add.w	r5, r5, #1
    af42:	d122      	bne.n	af8a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    af44:	681a      	ldr	r2, [r3, #0]
    af46:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    af4a:	481c      	ldr	r0, [pc, #112]	; (afbc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    af4c:	ea23 0302 	bic.w	r3, r3, r2
    af50:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    af54:	2100      	movs	r1, #0
    af56:	f7fe fe67 	bl	9c28 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    af5a:	2300      	movs	r3, #0
    af5c:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    af60:	b003      	add	sp, #12
    af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    af66:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    af6a:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    af6e:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    af72:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    af74:	4313      	orrs	r3, r2
    af76:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    af7a:	f7fe fe55 	bl	9c28 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    af7e:	f1ba 0f07 	cmp.w	sl, #7
    af82:	f10b 0b04 	add.w	fp, fp, #4
    af86:	d19e      	bne.n	aec6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    af88:	e7af      	b.n	aeea <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    af8a:	f853 3c18 	ldr.w	r3, [r3, #-24]
    af8e:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    af92:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    af94:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    af98:	ea23 0302 	bic.w	r3, r3, r2
    af9c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    afa0:	9b01      	ldr	r3, [sp, #4]
    afa2:	3304      	adds	r3, #4
    afa4:	9301      	str	r3, [sp, #4]
    afa6:	f7fe fe3f 	bl	9c28 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    afaa:	2d07      	cmp	r5, #7
    afac:	d1c2      	bne.n	af34 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    afae:	2300      	movs	r3, #0
    afb0:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    afb4:	b003      	add	sp, #12
    afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afba:	bf00      	nop
    afbc:	002dc6c0 	.word	0x002dc6c0
    afc0:	005b8d80 	.word	0x005b8d80

0000afc4 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    afc6:	4d0e      	ldr	r5, [pc, #56]	; (b000 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    afc8:	682b      	ldr	r3, [r5, #0]
    afca:	f013 0401 	ands.w	r4, r3, #1
    afce:	d002      	beq.n	afd6 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    afd0:	4b0c      	ldr	r3, [pc, #48]	; (b004 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    afd2:	6818      	ldr	r0, [r3, #0]
    afd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afd6:	2010      	movs	r0, #16
    afd8:	f008 fb62 	bl	136a0 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    afdc:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    afde:	4909      	ldr	r1, [pc, #36]	; (b004 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    afe0:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    afe2:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    afe4:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    afe6:	2617      	movs	r6, #23
      m_initialized(false) {
    afe8:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    afea:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    afec:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    afee:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    aff0:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    aff2:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    aff4:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    aff6:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    aff8:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    affa:	7342      	strb	r2, [r0, #13]
}
    affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    affe:	bf00      	nop
    b000:	20001c08 	.word	0x20001c08
    b004:	20001c10 	.word	0x20001c10

0000b008 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    b008:	7843      	ldrb	r3, [r0, #1]
    b00a:	428b      	cmp	r3, r1
    b00c:	d06d      	beq.n	b0ea <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    b00e:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    b014:	d071      	beq.n	b0fa <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    b016:	d363      	bcc.n	b0e0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    b018:	2902      	cmp	r1, #2
    b01a:	d16b      	bne.n	b0f4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    b01c:	4e39      	ldr	r6, [pc, #228]	; (b104 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    b01e:	f240 188f 	movw	r8, #399	; 0x18f
    b022:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b026:	4a38      	ldr	r2, [pc, #224]	; (b108 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    b028:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b02a:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b02c:	4b37      	ldr	r3, [pc, #220]	; (b10c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b02e:	f36f 0441 	bfc	r4, #1, #1
    b032:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b034:	681c      	ldr	r4, [r3, #0]
    b036:	f36f 0441 	bfc	r4, #1, #1
    b03a:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b03c:	6893      	ldr	r3, [r2, #8]
    b03e:	079c      	lsls	r4, r3, #30
    b040:	d4fc      	bmi.n	b03c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b042:	4d32      	ldr	r5, [pc, #200]	; (b10c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b044:	68ac      	ldr	r4, [r5, #8]
    b046:	f014 0402 	ands.w	r4, r4, #2
    b04a:	d1fb      	bne.n	b044 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    b04c:	4631      	mov	r1, r6
    b04e:	7800      	ldrb	r0, [r0, #0]
    b050:	4e2f      	ldr	r6, [pc, #188]	; (b110 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    b052:	f000 fead 	bl	bdb0 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    b056:	492f      	ldr	r1, [pc, #188]	; (b114 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    b058:	4a2f      	ldr	r2, [pc, #188]	; (b118 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    b05a:	4b2b      	ldr	r3, [pc, #172]	; (b108 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    b05c:	482f      	ldr	r0, [pc, #188]	; (b11c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    b05e:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    b060:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    b062:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b064:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b066:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b068:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b06a:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b06c:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b06e:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b070:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b072:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    b074:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    b078:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    b07a:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    b07c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    b080:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    b082:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    b086:	3018      	adds	r0, #24
    b088:	3104      	adds	r1, #4
    b08a:	3204      	adds	r2, #4
    b08c:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b08e:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b090:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b092:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b094:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b096:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b098:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b09a:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    b09c:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    b0a0:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    b0a4:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    b0a8:	f856 0b04 	ldr.w	r0, [r6], #4
    b0ac:	4639      	mov	r1, r7
    b0ae:	3030      	adds	r0, #48	; 0x30
    b0b0:	f000 fcb2 	bl	ba18 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b0b4:	42b4      	cmp	r4, r6
    b0b6:	d1f7      	bne.n	b0a8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b0b8:	4a13      	ldr	r2, [pc, #76]	; (b108 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b0ba:	4914      	ldr	r1, [pc, #80]	; (b10c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b0bc:	6813      	ldr	r3, [r2, #0]
    b0be:	f043 0302 	orr.w	r3, r3, #2
    b0c2:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b0c4:	680b      	ldr	r3, [r1, #0]
    b0c6:	f043 0302 	orr.w	r3, r3, #2
    b0ca:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b0cc:	6893      	ldr	r3, [r2, #8]
    b0ce:	0799      	lsls	r1, r3, #30
    b0d0:	d4fc      	bmi.n	b0cc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b0d2:	4a0e      	ldr	r2, [pc, #56]	; (b10c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b0d4:	6893      	ldr	r3, [r2, #8]
    b0d6:	079b      	lsls	r3, r3, #30
    b0d8:	d4fc      	bmi.n	b0d4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    b0da:	2001      	movs	r0, #1
    b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b0e0:	f04f 0813 	mov.w	r8, #19
    b0e4:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    b0e6:	4e0e      	ldr	r6, [pc, #56]	; (b120 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    b0e8:	e79d      	b.n	b026 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    b0ea:	7b83      	ldrb	r3, [r0, #14]
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d08e      	beq.n	b00e <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    b0f0:	2000      	movs	r0, #0
    b0f2:	4770      	bx	lr
        return false;
    b0f4:	2000      	movs	r0, #0
    b0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b0fa:	f04f 0863 	mov.w	r8, #99	; 0x63
    b0fe:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    b100:	4e08      	ldr	r6, [pc, #32]	; (b124 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    b102:	e790      	b.n	b026 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    b104:	001e8480 	.word	0x001e8480
    b108:	41016000 	.word	0x41016000
    b10c:	41018000 	.word	0x41018000
    b110:	00022fc0 	.word	0x00022fc0
    b114:	41016004 	.word	0x41016004
    b118:	41016008 	.word	0x41016008
    b11c:	4101600c 	.word	0x4101600c
    b120:	000186a0 	.word	0x000186a0
    b124:	0007a120 	.word	0x0007a120

0000b128 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    b128:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    b12a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b12e:	4606      	mov	r6, r0
    b130:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    b132:	d036      	beq.n	b1a2 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    b134:	460c      	mov	r4, r1
    b136:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    b13a:	2f03      	cmp	r7, #3
    b13c:	d907      	bls.n	b14e <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    b13e:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    b140:	7b38      	ldrb	r0, [r7, #12]
    b142:	1b40      	subs	r0, r0, r5
    b144:	fab0 f080 	clz	r0, r0
    b148:	0940      	lsrs	r0, r0, #5
    b14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b14e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b210 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b152:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    b156:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b158:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    b15c:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b15e:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b160:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b164:	685b      	ldr	r3, [r3, #4]
    b166:	4629      	mov	r1, r5
    b168:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b16a:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    b16e:	6803      	ldr	r3, [r0, #0]
    b170:	4629      	mov	r1, r5
    b172:	685b      	ldr	r3, [r3, #4]
    b174:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b176:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    b17a:	f997 2002 	ldrsb.w	r2, [r7, #2]
    b17e:	684b      	ldr	r3, [r1, #4]
    b180:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b184:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b188:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b18c:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b18e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b192:	bf0c      	ite	eq
    b194:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    b198:	f36f 0200 	bfcne	r2, #0, #1
    b19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b1a0:	e7ce      	b.n	b140 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    b1a2:	f1a2 0709 	sub.w	r7, r2, #9
    b1a6:	2f03      	cmp	r7, #3
    b1a8:	d907      	bls.n	b1ba <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b1aa:	7b33      	ldrb	r3, [r6, #12]
    b1ac:	42ab      	cmp	r3, r5
    b1ae:	d002      	beq.n	b1b6 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    b1b0:	2000      	movs	r0, #0
}
    b1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b1b6:	2401      	movs	r4, #1
    b1b8:	e7bf      	b.n	b13a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b1ba:	f8df 9054 	ldr.w	r9, [pc, #84]	; b210 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    b1be:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b1c0:	f8d9 0000 	ldr.w	r0, [r9]
    b1c4:	6803      	ldr	r3, [r0, #0]
    b1c6:	4611      	mov	r1, r2
    b1c8:	685b      	ldr	r3, [r3, #4]
    b1ca:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b1cc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    b1d0:	6803      	ldr	r3, [r0, #0]
    b1d2:	4629      	mov	r1, r5
    b1d4:	685b      	ldr	r3, [r3, #4]
    b1d6:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b1d8:	f996 2002 	ldrsb.w	r2, [r6, #2]
    b1dc:	6873      	ldr	r3, [r6, #4]
    b1de:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b1e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b1e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b1ea:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b1ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b1f0:	d004      	beq.n	b1fc <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    b1f2:	f36f 0200 	bfc	r2, #0, #1
    b1f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b1fa:	e7d6      	b.n	b1aa <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    b1fc:	f042 0201 	orr.w	r2, r2, #1
    b200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b204:	7b33      	ldrb	r3, [r6, #12]
    b206:	2b0a      	cmp	r3, #10
    b208:	d1d2      	bne.n	b1b0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    b20a:	2401      	movs	r4, #1
    b20c:	e7a1      	b.n	b152 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    b20e:	bf00      	nop
    b210:	00022fc0 	.word	0x00022fc0

0000b214 <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    b214:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b216:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    b218:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b21a:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b21c:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    b21e:	2101      	movs	r1, #1
    b220:	f7ff fef2 	bl	b008 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b224:	f995 2002 	ldrsb.w	r2, [r5, #2]
    b228:	6868      	ldr	r0, [r5, #4]
    b22a:	01d2      	lsls	r2, r2, #7
    b22c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b230:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b234:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b236:	2101      	movs	r1, #1
    b238:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b23a:	2600      	movs	r6, #0
    b23c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b240:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b242:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    b246:	f010 0f01 	tst.w	r0, #1
    b24a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    b24e:	f04f 040c 	mov.w	r4, #12
    b252:	bf0c      	ite	eq
    b254:	f364 0003 	bfieq	r0, r4, #0, #4
    b258:	f364 1007 	bfine	r0, r4, #4, #4
    b25c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b260:	4b2d      	ldr	r3, [pc, #180]	; (b318 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    b262:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b264:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b266:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b268:	f995 2003 	ldrsb.w	r2, [r5, #3]
    b26c:	68a9      	ldr	r1, [r5, #8]
    b26e:	01d2      	lsls	r2, r2, #7
    b270:	4413      	add	r3, r2
    b272:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b274:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b276:	2600      	movs	r6, #0
    b278:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b27c:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b27e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    b282:	f011 0f01 	tst.w	r1, #1
    b286:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    b28a:	4e24      	ldr	r6, [pc, #144]	; (b31c <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    b28c:	f04f 040c 	mov.w	r4, #12
    b290:	bf14      	ite	ne
    b292:	f364 1107 	bfine	r1, r4, #4, #4
    b296:	f364 0103 	bfieq	r1, r4, #0, #4
    b29a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b29e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b2a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b2a6:	2400      	movs	r4, #0
    b2a8:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    b2aa:	f856 0b04 	ldr.w	r0, [r6], #4
    b2ae:	f3c4 0346 	ubfx	r3, r4, #1, #7
    b2b2:	6802      	ldr	r2, [r0, #0]
    b2b4:	442b      	add	r3, r5
    b2b6:	6852      	ldr	r2, [r2, #4]
    b2b8:	7b19      	ldrb	r1, [r3, #12]
    b2ba:	3401      	adds	r4, #1
    b2bc:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b2be:	2c04      	cmp	r4, #4
    b2c0:	d1f3      	bne.n	b2aa <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b2c2:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b2c4:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b2c8:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b2ca:	686b      	ldr	r3, [r5, #4]
    b2cc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b2d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b2d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b2d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b2dc:	bf14      	ite	ne
    b2de:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b2e2:	f042 0201 	orreq.w	r2, r2, #1
    b2e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b2ea:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b2ec:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b2f0:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b2f2:	68ab      	ldr	r3, [r5, #8]
    b2f4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b2f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b2fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b300:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b304:	bf0c      	ite	eq
    b306:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b30a:	f36f 0200 	bfcne	r2, #0, #1
    b30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    b312:	2301      	movs	r3, #1
    b314:	73ab      	strb	r3, [r5, #14]
    b316:	bd70      	pop	{r4, r5, r6, pc}
    b318:	41008000 	.word	0x41008000
    b31c:	00022fc0 	.word	0x00022fc0

0000b320 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    b320:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    b322:	f7ff fe4f 	bl	afc4 <_ZN9ClearCore12MotorManager8InstanceEv>
    b326:	4b01      	ldr	r3, [pc, #4]	; (b32c <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    b328:	6018      	str	r0, [r3, #0]
    b32a:	bd08      	pop	{r3, pc}
    b32c:	20001c0c 	.word	0x20001c0c

0000b330 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b332:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b334:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    b336:	f890 3020 	ldrb.w	r3, [r0, #32]
    b33a:	b113      	cbz	r3, b342 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    b33c:	2300      	movs	r3, #0
    b33e:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    b340:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    b342:	b362      	cbz	r2, b39e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    b344:	69a0      	ldr	r0, [r4, #24]
    b346:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b348:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    b34a:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b34c:	bb2b      	cbnz	r3, b39a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    b34e:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b350:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    b354:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b358:	2700      	movs	r7, #0
    b35a:	4032      	ands	r2, r6
    b35c:	403b      	ands	r3, r7
    m_stepsSent = 0;
    b35e:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    b360:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b362:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    b366:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    b368:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    b36c:	f010 fd00 	bl	1bd70 <__aeabi_i2d>
    b370:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    b374:	4619      	mov	r1, r3
    b376:	f010 fffb 	bl	1c370 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    b37a:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b37c:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b37e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b380:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    b382:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    b386:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    b388:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    b38a:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b38c:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b38e:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b390:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    b392:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b394:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    b396:	4618      	mov	r0, r3
    b398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b39a:	4240      	negs	r0, r0
    b39c:	e7d7      	b.n	b34e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    b39e:	6960      	ldr	r0, [r4, #20]
    b3a0:	1a08      	subs	r0, r1, r0
            break;
    b3a2:	e7d5      	b.n	b350 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000b3a4 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3a6:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b3a8:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    b3aa:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    b3ac:	0fca      	lsrs	r2, r1, #31
    b3ae:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    b3b2:	f884 3020 	strb.w	r3, [r4, #32]
    b3b6:	4608      	mov	r0, r1
    b3b8:	f010 fcda 	bl	1bd70 <__aeabi_i2d>
    b3bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    b3c0:	4619      	mov	r1, r3
    b3c2:	f010 ffd5 	bl	1c370 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b3c6:	17c3      	asrs	r3, r0, #31
    b3c8:	03d9      	lsls	r1, r3, #15
    b3ca:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b3ce:	f241 3288 	movw	r2, #5000	; 0x1388
    b3d2:	2300      	movs	r3, #0
    b3d4:	03c0      	lsls	r0, r0, #15
    b3d6:	f011 f971 	bl	1c6bc <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b3da:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b3dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b3e0:	03de      	lsls	r6, r3, #15
    b3e2:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b3e4:	42b2      	cmp	r2, r6
    b3e6:	f04f 0300 	mov.w	r3, #0
    b3ea:	eb73 0507 	sbcs.w	r5, r3, r7
    b3ee:	bfbc      	itt	lt
    b3f0:	4616      	movlt	r6, r2
    b3f2:	461f      	movlt	r7, r3
    b3f4:	4286      	cmp	r6, r0
    b3f6:	460b      	mov	r3, r1
    b3f8:	4602      	mov	r2, r0
    b3fa:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b3fe:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b402:	bfb8      	it	lt
    b404:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b406:	2700      	movs	r7, #0
    b408:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b40c:	4030      	ands	r0, r6
    b40e:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    b410:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    b412:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b414:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b416:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b418:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    b41a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    b41e:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b420:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    b424:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    b426:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    b428:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b42a:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    b42c:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    b42e:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    b430:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b432:	b662      	cpsie	i
}
    b434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b436:	bf00      	nop

0000b438 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    b43c:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    b43e:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    b442:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    b444:	b085      	sub	sp, #20
    b446:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    b448:	d038      	beq.n	b4bc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    b44a:	2b07      	cmp	r3, #7
    b44c:	f200 80da 	bhi.w	b604 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    b450:	e8df f013 	tbh	[pc, r3, lsl #1]
    b454:	00d8002f 	.word	0x00d8002f
    b458:	00be01d7 	.word	0x00be01d7
    b45c:	025f0086 	.word	0x025f0086
    b460:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    b464:	7b41      	ldrb	r1, [r0, #13]
    b466:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b46a:	428b      	cmp	r3, r1
    b46c:	f000 822d 	beq.w	b8ca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    b470:	6980      	ldr	r0, [r0, #24]
    b472:	69e3      	ldr	r3, [r4, #28]
    b474:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b476:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b47a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    b47e:	2300      	movs	r3, #0
    b480:	4016      	ands	r6, r2
    b482:	401f      	ands	r7, r3
    b484:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    b488:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    b48c:	2501      	movs	r5, #1
            m_moveDirChange = false;
    b48e:	2300      	movs	r3, #0
    b490:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    b492:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    b496:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    b498:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b49c:	0bf2      	lsrs	r2, r6, #15
    b49e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    b4a2:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    b4a4:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b4a6:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    b4a8:	6962      	ldr	r2, [r4, #20]
    b4aa:	b101      	cbz	r1, b4ae <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    b4ac:	425b      	negs	r3, r3
    b4ae:	4413      	add	r3, r2
    b4b0:	6163      	str	r3, [r4, #20]
}
    b4b2:	b005      	add	sp, #20
    b4b4:	ecbd 8b02 	vpop	{d8}
    b4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b4bc:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    b4be:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    b4c2:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    b4c6:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    b4ca:	1457      	asrs	r7, r2, #17
    b4cc:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b4ce:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    b4d2:	2900      	cmp	r1, #0
    b4d4:	d163      	bne.n	b59e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    b4d6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b4d8:	2d00      	cmp	r5, #0
    b4da:	f000 8117 	beq.w	b70c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    b4de:	7b41      	ldrb	r1, [r0, #13]
    b4e0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    b4e4:	9100      	str	r1, [sp, #0]
    b4e6:	4291      	cmp	r1, r2
    b4e8:	f000 81f8 	beq.w	b8dc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    b4ec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    b4f0:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    b4f2:	2305      	movs	r3, #5
    b4f4:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    b4f6:	6520      	str	r0, [r4, #80]	; 0x50
    b4f8:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b4fa:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b4fe:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    b502:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    b504:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b508:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    b50c:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b50e:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b512:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b514:	f300 80ab 	bgt.w	b66e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b518:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b51a:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b51e:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b522:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b524:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b528:	4629      	mov	r1, r5
    b52a:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b52c:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b530:	f011 f914 	bl	1c75c <__aeabi_uldivmod>
    b534:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b536:	fba0 bc05 	umull	fp, ip, r0, r5
    b53a:	fb00 cc03 	mla	ip, r0, r3, ip
    b53e:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b542:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b544:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b548:	eb47 0709 	adc.w	r7, r7, r9
    b54c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b550:	2900      	cmp	r1, #0
    b552:	f000 816e 	beq.w	b832 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b556:	2307      	movs	r3, #7
    b558:	7323      	strb	r3, [r4, #12]
    b55a:	9900      	ldr	r1, [sp, #0]
    b55c:	69e3      	ldr	r3, [r4, #28]
    b55e:	e79d      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b560:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b562:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b564:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b568:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b56c:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b570:	1952      	adds	r2, r2, r5
    b572:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b576:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b578:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b57c:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b580:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b582:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b586:	da54      	bge.n	b632 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b588:	2900      	cmp	r1, #0
    b58a:	dd52      	ble.n	b632 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b58c:	2a01      	cmp	r2, #1
    b58e:	f173 0100 	sbcs.w	r1, r3, #0
    b592:	db4e      	blt.n	b632 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b594:	461f      	mov	r7, r3
    b596:	4616      	mov	r6, r2
    b598:	69e3      	ldr	r3, [r4, #28]
    b59a:	7b61      	ldrb	r1, [r4, #13]
    b59c:	e77e      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b59e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b5a0:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b5a2:	2b00      	cmp	r3, #0
    b5a4:	f000 80a1 	beq.w	b6ea <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b5a8:	2d00      	cmp	r5, #0
    b5aa:	f040 8130 	bne.w	b80e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b5ae:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b5b2:	6820      	ldr	r0, [r4, #0]
    b5b4:	6523      	str	r3, [r4, #80]	; 0x50
    b5b6:	2100      	movs	r1, #0
    b5b8:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b5ba:	7362      	strb	r2, [r4, #13]
    b5bc:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b5c0:	4620      	mov	r0, r4
    b5c2:	4798      	blx	r3
    b5c4:	7b63      	ldrb	r3, [r4, #13]
    b5c6:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b5ca:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b5cc:	9300      	str	r3, [sp, #0]
    b5ce:	e094      	b.n	b6fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b5d0:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b5d4:	7b43      	ldrb	r3, [r0, #13]
    b5d6:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b5da:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b5dc:	4652      	mov	r2, sl
    b5de:	eb16 060a 	adds.w	r6, r6, sl
    b5e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b5e6:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b5ea:	415f      	adcs	r7, r3
    b5ec:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b5f0:	2900      	cmp	r1, #0
    b5f2:	d03f      	beq.n	b674 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b5f4:	f1ba 0f00 	cmp.w	sl, #0
    b5f8:	d139      	bne.n	b66e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b5fa:	2306      	movs	r3, #6
    b5fc:	7323      	strb	r3, [r4, #12]
    b5fe:	9900      	ldr	r1, [sp, #0]
    b600:	69e3      	ldr	r3, [r4, #28]
    b602:	e74b      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b604:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b606:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b60c:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b610:	2000      	movs	r0, #0
    b612:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b614:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b616:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b618:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b61a:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b61c:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b61e:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b620:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b624:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b628:	b005      	add	sp, #20
    b62a:	ecbd 8b02 	vpop	{d8}
    b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b632:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b634:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b636:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b638:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b63a:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b63e:	7322      	strb	r2, [r4, #12]
    b640:	69e3      	ldr	r3, [r4, #28]
    b642:	7b61      	ldrb	r1, [r4, #13]
    b644:	e72a      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b646:	2302      	movs	r3, #2
    b648:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b64a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b64e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b650:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b654:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b656:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b658:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b65c:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b65e:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b660:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b664:	f280 80a2 	bge.w	b7ac <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b668:	2d00      	cmp	r5, #0
    b66a:	f340 809f 	ble.w	b7ac <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b66e:	9900      	ldr	r1, [sp, #0]
    b670:	69e3      	ldr	r3, [r4, #28]
    b672:	e713      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b674:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b678:	4286      	cmp	r6, r0
    b67a:	eb77 0501 	sbcs.w	r5, r7, r1
    b67e:	da03      	bge.n	b688 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b680:	2e01      	cmp	r6, #1
    b682:	f177 0500 	sbcs.w	r5, r7, #0
    b686:	daf2      	bge.n	b66e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b688:	2500      	movs	r5, #0
    b68a:	1a31      	subs	r1, r6, r0
    b68c:	4628      	mov	r0, r5
    b68e:	f011 f865 	bl	1c75c <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b692:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b694:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b698:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b69a:	fb00 9e03 	mla	lr, r0, r3, r9
    b69e:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b6a0:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b6a4:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b6a8:	fb0e 330c 	mla	r3, lr, ip, r3
    b6ac:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b6ae:	1a32      	subs	r2, r6, r0
    b6b0:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b6b4:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b6b8:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b6ba:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b6be:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b6c2:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b6c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b6c8:	f280 80a9 	bge.w	b81e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b6cc:	42a8      	cmp	r0, r5
    b6ce:	f340 80a6 	ble.w	b81e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b6d2:	2a01      	cmp	r2, #1
    b6d4:	f173 0100 	sbcs.w	r1, r3, #0
    b6d8:	f2c0 80a1 	blt.w	b81e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b6dc:	2004      	movs	r0, #4
    b6de:	461f      	mov	r7, r3
    b6e0:	9900      	ldr	r1, [sp, #0]
    b6e2:	7320      	strb	r0, [r4, #12]
    b6e4:	4616      	mov	r6, r2
    b6e6:	69e3      	ldr	r3, [r4, #28]
    b6e8:	e6d8      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b6ea:	7b42      	ldrb	r2, [r0, #13]
    b6ec:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b6ee:	4619      	mov	r1, r3
    b6f0:	2000      	movs	r0, #0
    b6f2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b6f6:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b6f8:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b6fa:	4555      	cmp	r5, sl
    b6fc:	f000 80db 	beq.w	b8b6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b700:	dda1      	ble.n	b646 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b702:	2305      	movs	r3, #5
    b704:	7323      	strb	r3, [r4, #12]
    b706:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b70a:	e6f6      	b.n	b4fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b70c:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b710:	4611      	mov	r1, r2
    b712:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b714:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b718:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b71a:	4613      	mov	r3, r2
    b71c:	429f      	cmp	r7, r3
    b71e:	bf08      	it	eq
    b720:	428e      	cmpeq	r6, r1
    b722:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b726:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    b72a:	d00e      	beq.n	b74a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    b72c:	6803      	ldr	r3, [r0, #0]
    b72e:	689b      	ldr	r3, [r3, #8]
    b730:	4798      	blx	r3
    b732:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b736:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    b738:	2b00      	cmp	r3, #0
    b73a:	f040 80ca 	bne.w	b8d2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    b73e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    b742:	e9cd 2300 	strd	r2, r3, [sp]
    b746:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    b74a:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b74e:	0fcb      	lsrs	r3, r1, #31
    b750:	18c0      	adds	r0, r0, r3
    b752:	464e      	mov	r6, r9
    b754:	f141 0100 	adc.w	r1, r1, #0
    b758:	17f7      	asrs	r7, r6, #31
    b75a:	1049      	asrs	r1, r1, #1
    b75c:	ea4f 0030 	mov.w	r0, r0, rrx
    b760:	464a      	mov	r2, r9
    b762:	463b      	mov	r3, r7
    b764:	f010 ffaa 	bl	1c6bc <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b768:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b76c:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b770:	464a      	mov	r2, r9
    b772:	463b      	mov	r3, r7
    b774:	fb8a 010a 	smull	r0, r1, sl, sl
    b778:	f010 ffa0 	bl	1c6bc <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    b77c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b780:	1a82      	subs	r2, r0, r2
    b782:	eb61 0303 	sbc.w	r3, r1, r3
    b786:	4610      	mov	r0, r2
    b788:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b78a:	e9dd 2300 	ldrd	r2, r3, [sp]
    b78e:	4282      	cmp	r2, r0
    b790:	418b      	sbcs	r3, r1
    b792:	db63      	blt.n	b85c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    b794:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    b798:	4555      	cmp	r5, sl
    b79a:	f340 8091 	ble.w	b8c0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    b79e:	2305      	movs	r3, #5
    b7a0:	7323      	strb	r3, [r4, #12]
    b7a2:	7b63      	ldrb	r3, [r4, #13]
    b7a4:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b7a8:	9300      	str	r3, [sp, #0]
    b7aa:	e6a6      	b.n	b4fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    b7ac:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    b7ae:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    b7b2:	4691      	mov	r9, r2
    b7b4:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b7b6:	461a      	mov	r2, r3
    b7b8:	4629      	mov	r1, r5
    b7ba:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    b7bc:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b7c0:	2000      	movs	r0, #0
    b7c2:	f010 ffcb 	bl	1c75c <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b7c6:	4602      	mov	r2, r0
    b7c8:	fba2 0105 	umull	r0, r1, r2, r5
    b7cc:	2300      	movs	r3, #0
    b7ce:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b7d2:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    b7d6:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b7d8:	4642      	mov	r2, r8
    b7da:	464b      	mov	r3, r9
    b7dc:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b7e0:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b7e4:	f010 ffba 	bl	1c75c <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b7e8:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b7ec:	0849      	lsrs	r1, r1, #1
    b7ee:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b7f2:	1a12      	subs	r2, r2, r0
    b7f4:	eb63 0301 	sbc.w	r3, r3, r1
    b7f8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    b7fc:	2303      	movs	r3, #3
    b7fe:	7323      	strb	r3, [r4, #12]
    b800:	e6ec      	b.n	b5dc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    b802:	7b43      	ldrb	r3, [r0, #13]
    b804:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b806:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b80a:	9300      	str	r3, [sp, #0]
    b80c:	e71d      	b.n	b64a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b80e:	7b40      	ldrb	r0, [r0, #13]
    b810:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b814:	9000      	str	r0, [sp, #0]
    b816:	4290      	cmp	r0, r2
    b818:	f47f af6a 	bne.w	b6f0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    b81c:	e6c9      	b.n	b5b2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    b81e:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    b820:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    b822:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    b824:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    b826:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    b82a:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    b82c:	7322      	strb	r2, [r4, #12]
    b82e:	69e3      	ldr	r3, [r4, #28]
    b830:	e634      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b836:	fb8a 010a 	smull	r0, r1, sl, sl
    b83a:	f010 ff8f 	bl	1c75c <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b83e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b842:	0849      	lsrs	r1, r1, #1
    b844:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b848:	1a12      	subs	r2, r2, r0
    b84a:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    b84e:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b850:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    b854:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    b856:	7320      	strb	r0, [r4, #12]
    b858:	69e3      	ldr	r3, [r4, #28]
    b85a:	e61f      	b.n	b49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b85c:	69a6      	ldr	r6, [r4, #24]
    b85e:	17f1      	asrs	r1, r6, #31
    b860:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b866:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b868:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b86a:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    b86e:	4159      	adcs	r1, r3
    b870:	460b      	mov	r3, r1
    b872:	fb00 f107 	mul.w	r1, r0, r7
    b876:	fb09 1303 	mla	r3, r9, r3, r1
    b87a:	fba0 0109 	umull	r0, r1, r0, r9
    b87e:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    b880:	f010 fede 	bl	1c640 <__aeabi_l2f>
    b884:	ee00 0a10 	vmov	s0, r0
    b888:	eeb5 0a40 	vcmp.f32	s0, #0.0
    b88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b890:	eeb1 8ac0 	vsqrt.f32	s16, s0
    b894:	d439      	bmi.n	b90a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    b896:	ee18 0a10 	vmov	r0, s16
    b89a:	f010 ff77 	bl	1c78c <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    b89e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b8a2:	4282      	cmp	r2, r0
    b8a4:	f04f 0300 	mov.w	r3, #0
    b8a8:	eb73 0601 	sbcs.w	r6, r3, r1
    b8ac:	bfb8      	it	lt
    b8ae:	4610      	movlt	r0, r2
    b8b0:	6520      	str	r0, [r4, #80]	; 0x50
    b8b2:	4682      	mov	sl, r0
    b8b4:	e770      	b.n	b798 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    b8b6:	2303      	movs	r3, #3
    b8b8:	7323      	strb	r3, [r4, #12]
    b8ba:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b8be:	e68d      	b.n	b5dc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    b8c0:	2302      	movs	r3, #2
    b8c2:	7323      	strb	r3, [r4, #12]
    b8c4:	7b63      	ldrb	r3, [r4, #13]
    b8c6:	9300      	str	r3, [sp, #0]
    b8c8:	e6bf      	b.n	b64a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    b8ca:	69c0      	ldr	r0, [r0, #28]
    b8cc:	69a3      	ldr	r3, [r4, #24]
    b8ce:	1ac0      	subs	r0, r0, r3
    b8d0:	e5d1      	b.n	b476 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    b8d2:	7b63      	ldrb	r3, [r4, #13]
    b8d4:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b8d8:	9300      	str	r3, [sp, #0]
    b8da:	e609      	b.n	b4f0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    b8dc:	464a      	mov	r2, r9
    b8de:	17d3      	asrs	r3, r2, #31
    b8e0:	fb85 0105 	smull	r0, r1, r5, r5
    b8e4:	f010 feea 	bl	1c6bc <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b8e8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    b8ec:	1049      	asrs	r1, r1, #1
    b8ee:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    b8f2:	1ab6      	subs	r6, r6, r2
    b8f4:	eb67 0703 	sbc.w	r7, r7, r3
    b8f8:	4286      	cmp	r6, r0
    b8fa:	eb77 0301 	sbcs.w	r3, r7, r1
    b8fe:	bfb4      	ite	lt
    b900:	2301      	movlt	r3, #1
    b902:	2300      	movge	r3, #0
    b904:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    b908:	e716      	b.n	b738 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    b90a:	f00f fc6d 	bl	1b1e8 <sqrtf>
    b90e:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b910:	e7c1      	b.n	b896 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    b912:	7b43      	ldrb	r3, [r0, #13]
    b914:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b916:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b91a:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    b91e:	9300      	str	r3, [sp, #0]
    b920:	e5eb      	b.n	b4fa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    b922:	bf00      	nop

0000b924 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    b924:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    b926:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    b928:	4916      	ldr	r1, [pc, #88]	; (b984 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    b92a:	6001      	str	r1, [r0, #0]
    b92c:	2200      	movs	r2, #0
    b92e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    b932:	2501      	movs	r5, #1
    b934:	2102      	movs	r1, #2
    b936:	2600      	movs	r6, #0
    b938:	2700      	movs	r7, #0
    b93a:	f362 1486 	bfi	r4, r2, #6, #1
    b93e:	7404      	strb	r4, [r0, #16]
    b940:	6042      	str	r2, [r0, #4]
    b942:	6082      	str	r2, [r0, #8]
    b944:	7302      	strb	r2, [r0, #12]
    b946:	7342      	strb	r2, [r0, #13]
    b948:	6142      	str	r2, [r0, #20]
    b94a:	6182      	str	r2, [r0, #24]
    b94c:	61c2      	str	r2, [r0, #28]
    b94e:	f880 2020 	strb.w	r2, [r0, #32]
    b952:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    b956:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    b95a:	6282      	str	r2, [r0, #40]	; 0x28
    b95c:	6402      	str	r2, [r0, #64]	; 0x40
    b95e:	6442      	str	r2, [r0, #68]	; 0x44
    b960:	6502      	str	r2, [r0, #80]	; 0x50
    b962:	6642      	str	r2, [r0, #100]	; 0x64
    b964:	7385      	strb	r5, [r0, #14]
    b966:	6245      	str	r5, [r0, #36]	; 0x24
    b968:	6605      	str	r5, [r0, #96]	; 0x60
    b96a:	62c1      	str	r1, [r0, #44]	; 0x2c
    b96c:	6301      	str	r1, [r0, #48]	; 0x30
    b96e:	6681      	str	r1, [r0, #104]	; 0x68
    b970:	66c1      	str	r1, [r0, #108]	; 0x6c
    b972:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    b976:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    b97a:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    b97e:	bcf0      	pop	{r4, r5, r6, r7}
    b980:	4770      	bx	lr
    b982:	bf00      	nop
    b984:	000233b0 	.word	0x000233b0

0000b988 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    b988:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    b98a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    b98c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b98e:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b990:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b992:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    b994:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    b996:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    b998:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    b99a:	2700      	movs	r7, #0
    b99c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b9a0:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b9a2:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b9a4:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    b9a6:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    b9a8:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    b9aa:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    b9ac:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    b9b0:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    b9b2:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    b9b4:	b662      	cpsie	i
}
    b9b6:	bcd0      	pop	{r4, r6, r7}
    b9b8:	4770      	bx	lr
    b9ba:	bf00      	nop
    b9bc:	0000      	movs	r0, r0
	...

0000b9c0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    b9c0:	b510      	push	{r4, lr}
    b9c2:	4604      	mov	r4, r0
    if (decelMax != 0) {
    b9c4:	b191      	cbz	r1, b9ec <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    b9c6:	a312      	add	r3, pc, #72	; (adr r3, ba10 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b9cc:	03c8      	lsls	r0, r1, #15
    b9ce:	0c49      	lsrs	r1, r1, #17
    b9d0:	f010 fe74 	bl	1c6bc <__aeabi_ldivmod>
    b9d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b9d6:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    b9d8:	f020 0201 	bic.w	r2, r0, #1
    b9dc:	bfb8      	it	lt
    b9de:	2302      	movlt	r3, #2
    b9e0:	4293      	cmp	r3, r2
    b9e2:	4618      	mov	r0, r3
    b9e4:	bfb8      	it	lt
    b9e6:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    b9e8:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b9ea:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    b9ec:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b9ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b9f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    b9f2:	4293      	cmp	r3, r2
    b9f4:	bfb8      	it	lt
    b9f6:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    b9f8:	2100      	movs	r1, #0
    m_velocityMove = true;
    b9fa:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    b9fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    b9fe:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    ba00:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    ba04:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    ba06:	b662      	cpsie	i
    ba08:	bd10      	pop	{r4, pc}
    ba0a:	bf00      	nop
    ba0c:	f3af 8000 	nop.w
    ba10:	017d7840 	.word	0x017d7840
    ba14:	00000000 	.word	0x00000000

0000ba18 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    ba18:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    ba1a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    ba1c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ba1e:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    ba20:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ba22:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    ba24:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    ba26:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    ba28:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    ba2a:	2700      	movs	r7, #0
    ba2c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ba30:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    ba32:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ba34:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    ba36:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    ba38:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    ba3a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    ba3c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    ba40:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    ba42:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    ba44:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    ba46:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ba4a:	03ca      	lsls	r2, r1, #15
    ba4c:	0c4b      	lsrs	r3, r1, #17
    ba4e:	4294      	cmp	r4, r2
    ba50:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    ba54:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    ba56:	eb75 0103 	sbcs.w	r1, r5, r3
    ba5a:	bfbc      	itt	lt
    ba5c:	4622      	movlt	r2, r4
    ba5e:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    ba60:	2a01      	cmp	r2, #1
    ba62:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    ba66:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    ba68:	bfbc      	itt	lt
    ba6a:	2201      	movlt	r2, #1
    ba6c:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    ba6e:	17e5      	asrs	r5, r4, #31
    ba70:	4294      	cmp	r4, r2
    ba72:	eb75 0103 	sbcs.w	r1, r5, r3
    ba76:	bfb8      	it	lt
    ba78:	4622      	movlt	r2, r4
    ba7a:	6602      	str	r2, [r0, #96]	; 0x60
}
    ba7c:	bcf0      	pop	{r4, r5, r6, r7}
    ba7e:	4770      	bx	lr

0000ba80 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    ba80:	6843      	ldr	r3, [r0, #4]
    ba82:	b363      	cbz	r3, bade <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    ba84:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    ba86:	f013 0218 	ands.w	r2, r3, #24
    ba8a:	d12a      	bne.n	bae2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    ba8c:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    ba8e:	7c02      	ldrb	r2, [r0, #16]
    ba90:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    ba94:	b2d2      	uxtb	r2, r2
    ba96:	4613      	mov	r3, r2
    ba98:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    ba9c:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    baa0:	b2db      	uxtb	r3, r3
    baa2:	461a      	mov	r2, r3
    baa4:	f3c3 1300 	ubfx	r3, r3, #4, #1
    baa8:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    baac:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    baae:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    bab0:	075a      	lsls	r2, r3, #29
    bab2:	d514      	bpl.n	bade <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    bab4:	7b42      	ldrb	r2, [r0, #13]
    bab6:	b9e2      	cbnz	r2, baf2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    bab8:	0719      	lsls	r1, r3, #28
    baba:	d510      	bpl.n	bade <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    babc:	f043 0301 	orr.w	r3, r3, #1
    bac0:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    bac2:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bac4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    bac6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    bac8:	4293      	cmp	r3, r2
    baca:	bfb8      	it	lt
    bacc:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    bace:	2100      	movs	r1, #0
    m_velocityMove = true;
    bad0:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bad2:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    bad4:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    bad6:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    bada:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    badc:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    bade:	2000      	movs	r0, #0
    bae0:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    bae2:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    bae6:	f3c3 1341 	ubfx	r3, r3, #5, #2
    baea:	1ad3      	subs	r3, r2, r3
    baec:	bf18      	it	ne
    baee:	2301      	movne	r3, #1
    baf0:	e7cd      	b.n	ba8e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    baf2:	06da      	lsls	r2, r3, #27
    baf4:	d5f3      	bpl.n	bade <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    baf6:	f043 0302 	orr.w	r3, r3, #2
    bafa:	7403      	strb	r3, [r0, #16]
    bafc:	e7e1      	b.n	bac2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    bafe:	bf00      	nop

0000bb00 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    bb00:	4ba1      	ldr	r3, [pc, #644]	; (bd88 <SystemInit+0x288>)
    bb02:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    bb06:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    bb08:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    bb0a:	691a      	ldr	r2, [r3, #16]
    bb0c:	0792      	lsls	r2, r2, #30
    bb0e:	d5fc      	bpl.n	bb0a <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bb10:	4a9e      	ldr	r2, [pc, #632]	; (bd8c <SystemInit+0x28c>)
    bb12:	4b9f      	ldr	r3, [pc, #636]	; (bd90 <SystemInit+0x290>)
    bb14:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    bb16:	6853      	ldr	r3, [r2, #4]
    bb18:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    bb1c:	d1fb      	bne.n	bb16 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    bb1e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    bb22:	499a      	ldr	r1, [pc, #616]	; (bd8c <SystemInit+0x28c>)
    bb24:	f363 1086 	bfi	r0, r3, #6, #1
    bb28:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    bb2c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bb30:	065b      	lsls	r3, r3, #25
    bb32:	d4fb      	bmi.n	bb2c <SystemInit+0x2c>
    bb34:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bb38:	4a94      	ldr	r2, [pc, #592]	; (bd8c <SystemInit+0x28c>)
    bb3a:	2005      	movs	r0, #5
    bb3c:	f360 0303 	bfi	r3, r0, #0, #4
    bb40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    bb44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bb48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bb4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    bb50:	6853      	ldr	r3, [r2, #4]
    bb52:	f013 0f14 	tst.w	r3, #20
    bb56:	d1fb      	bne.n	bb50 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    bb58:	4b8b      	ldr	r3, [pc, #556]	; (bd88 <SystemInit+0x288>)
    bb5a:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    bb5c:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    bb5e:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    bb60:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    bb62:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    bb64:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    bb66:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    bb6a:	6913      	ldr	r3, [r2, #16]
    bb6c:	01df      	lsls	r7, r3, #7
    bb6e:	d4fc      	bmi.n	bb6a <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    bb70:	4a86      	ldr	r2, [pc, #536]	; (bd8c <SystemInit+0x28c>)
    bb72:	f44f 7384 	mov.w	r3, #264	; 0x108
    bb76:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    bb78:	6853      	ldr	r3, [r2, #4]
    bb7a:	f013 0304 	ands.w	r3, r3, #4
    bb7e:	d1fb      	bne.n	bb78 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    bb80:	4884      	ldr	r0, [pc, #528]	; (bd94 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    bb82:	4982      	ldr	r1, [pc, #520]	; (bd8c <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    bb84:	2401      	movs	r4, #1
    bb86:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    bb88:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    bb8c:	f363 1086 	bfi	r0, r3, #6, #1
    bb90:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    bb94:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bb98:	065e      	lsls	r6, r3, #25
    bb9a:	d4fb      	bmi.n	bb94 <SystemInit+0x94>
    bb9c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bba0:	4a7a      	ldr	r2, [pc, #488]	; (bd8c <SystemInit+0x28c>)
    bba2:	2005      	movs	r0, #5
    bba4:	f360 0303 	bfi	r3, r0, #0, #4
    bba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    bbac:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bbb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    bbb8:	6853      	ldr	r3, [r2, #4]
    bbba:	f013 0314 	ands.w	r3, r3, #20
    bbbe:	d1fb      	bne.n	bbb8 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bbc0:	4871      	ldr	r0, [pc, #452]	; (bd88 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    bbc2:	4972      	ldr	r1, [pc, #456]	; (bd8c <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bbc4:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    bbc6:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bbc8:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bbca:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    bbcc:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bbce:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    bbd2:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    bbd6:	f363 1086 	bfi	r0, r3, #6, #1
    bbda:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    bbde:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    bbe2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	d1f9      	bne.n	bbde <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    bbea:	4c67      	ldr	r4, [pc, #412]	; (bd88 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    bbec:	486a      	ldr	r0, [pc, #424]	; (bd98 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    bbee:	4a67      	ldr	r2, [pc, #412]	; (bd8c <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    bbf0:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    bbf2:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    bbf4:	6853      	ldr	r3, [r2, #4]
    bbf6:	065d      	lsls	r5, r3, #25
    bbf8:	d4fc      	bmi.n	bbf4 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bbfa:	4b66      	ldr	r3, [pc, #408]	; (bd94 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bbfc:	4967      	ldr	r1, [pc, #412]	; (bd9c <SystemInit+0x29c>)
    bbfe:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bc00:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bc02:	4e67      	ldr	r6, [pc, #412]	; (bda0 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    bc04:	4d67      	ldr	r5, [pc, #412]	; (bda4 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bc06:	4c68      	ldr	r4, [pc, #416]	; (bda8 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bc08:	4960      	ldr	r1, [pc, #384]	; (bd8c <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bc0a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    bc0e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    bc10:	6998      	ldr	r0, [r3, #24]
    bc12:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bc16:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    bc18:	6958      	ldr	r0, [r3, #20]
    bc1a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bc1e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    bc20:	6998      	ldr	r0, [r3, #24]
    bc22:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    bc26:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    bc28:	6998      	ldr	r0, [r3, #24]
    bc2a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    bc2e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    bc30:	69d8      	ldr	r0, [r3, #28]
    bc32:	f040 0020 	orr.w	r0, r0, #32
    bc36:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    bc38:	6918      	ldr	r0, [r3, #16]
    bc3a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bc3e:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    bc40:	69d8      	ldr	r0, [r3, #28]
    bc42:	f040 0004 	orr.w	r0, r0, #4
    bc46:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    bc48:	6a18      	ldr	r0, [r3, #32]
    bc4a:	f040 0001 	orr.w	r0, r0, #1
    bc4e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    bc50:	6a18      	ldr	r0, [r3, #32]
    bc52:	f040 0008 	orr.w	r0, r0, #8
    bc56:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    bc58:	6a18      	ldr	r0, [r3, #32]
    bc5a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bc5e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    bc60:	69d8      	ldr	r0, [r3, #28]
    bc62:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bc66:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    bc68:	6958      	ldr	r0, [r3, #20]
    bc6a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bc6e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    bc70:	6a18      	ldr	r0, [r3, #32]
    bc72:	f040 0020 	orr.w	r0, r0, #32
    bc76:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bc78:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    bc7a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bc7e:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    bc80:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bc84:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bc86:	684b      	ldr	r3, [r1, #4]
    bc88:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    bc8c:	d1fb      	bne.n	bc86 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    bc8e:	4a47      	ldr	r2, [pc, #284]	; (bdac <SystemInit+0x2ac>)
    bc90:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    bc92:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    bc96:	4a3d      	ldr	r2, [pc, #244]	; (bd8c <SystemInit+0x28c>)
    bc98:	f363 1086 	bfi	r0, r3, #6, #1
    bc9c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    bca0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bca4:	065c      	lsls	r4, r3, #25
    bca6:	d4fb      	bmi.n	bca0 <SystemInit+0x1a0>
    bca8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bcac:	4937      	ldr	r1, [pc, #220]	; (bd8c <SystemInit+0x28c>)
    bcae:	2006      	movs	r0, #6
    bcb0:	f360 0303 	bfi	r3, r0, #0, #4
    bcb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bcb8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    bcbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bcc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    bcc4:	684b      	ldr	r3, [r1, #4]
    bcc6:	f013 0318 	ands.w	r3, r3, #24
    bcca:	d1fb      	bne.n	bcc4 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    bccc:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    bcd0:	4a2e      	ldr	r2, [pc, #184]	; (bd8c <SystemInit+0x28c>)
    bcd2:	f363 1086 	bfi	r0, r3, #6, #1
    bcd6:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    bcda:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bcde:	0658      	lsls	r0, r3, #25
    bce0:	d4fb      	bmi.n	bcda <SystemInit+0x1da>
    bce2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bce6:	4929      	ldr	r1, [pc, #164]	; (bd8c <SystemInit+0x28c>)
    bce8:	2006      	movs	r0, #6
    bcea:	f360 0303 	bfi	r3, r0, #0, #4
    bcee:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bcf2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    bcf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bcfa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    bcfe:	684b      	ldr	r3, [r1, #4]
    bd00:	f013 0318 	ands.w	r3, r3, #24
    bd04:	d1fb      	bne.n	bcfe <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    bd06:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    bd0a:	4a20      	ldr	r2, [pc, #128]	; (bd8c <SystemInit+0x28c>)
    bd0c:	f363 1086 	bfi	r0, r3, #6, #1
    bd10:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    bd14:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bd18:	0659      	lsls	r1, r3, #25
    bd1a:	d4fb      	bmi.n	bd14 <SystemInit+0x214>
    bd1c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bd20:	491a      	ldr	r1, [pc, #104]	; (bd8c <SystemInit+0x28c>)
    bd22:	2006      	movs	r0, #6
    bd24:	f360 0303 	bfi	r3, r0, #0, #4
    bd28:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bd2c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd34:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bd38:	684b      	ldr	r3, [r1, #4]
    bd3a:	f013 0318 	ands.w	r3, r3, #24
    bd3e:	d1fb      	bne.n	bd38 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    bd40:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    bd44:	4a11      	ldr	r2, [pc, #68]	; (bd8c <SystemInit+0x28c>)
    bd46:	f363 1086 	bfi	r0, r3, #6, #1
    bd4a:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bd4e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bd52:	065b      	lsls	r3, r3, #25
    bd54:	d4fb      	bmi.n	bd4e <SystemInit+0x24e>
    bd56:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bd5a:	490c      	ldr	r1, [pc, #48]	; (bd8c <SystemInit+0x28c>)
    bd5c:	2006      	movs	r0, #6
    bd5e:	f360 0303 	bfi	r3, r0, #0, #4
    bd62:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    bd66:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd6e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    bd72:	684b      	ldr	r3, [r1, #4]
    bd74:	f013 0f18 	tst.w	r3, #24
    bd78:	d1fb      	bne.n	bd72 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    bd7a:	4a04      	ldr	r2, [pc, #16]	; (bd8c <SystemInit+0x28c>)
    bd7c:	6853      	ldr	r3, [r2, #4]
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d1fc      	bne.n	bd7c <SystemInit+0x27c>
        continue;
    }
    return;
}
    bd82:	bcf0      	pop	{r4, r5, r6, r7}
    bd84:	4770      	bx	lr
    bd86:	bf00      	nop
    bd88:	40001000 	.word	0x40001000
    bd8c:	40001c00 	.word	0x40001c00
    bd90:	00190301 	.word	0x00190301
    bd94:	40000800 	.word	0x40000800
    bd98:	00020107 	.word	0x00020107
    bd9c:	00320b01 	.word	0x00320b01
    bda0:	41006000 	.word	0x41006000
    bda4:	e000ed00 	.word	0xe000ed00
    bda8:	003a0108 	.word	0x003a0108
    bdac:	000c0108 	.word	0x000c0108

0000bdb0 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    bdb0:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    bdb2:	4a0e      	ldr	r2, [pc, #56]	; (bdec <GClkFreqUpdate+0x3c>)
    bdb4:	f100 0408 	add.w	r4, r0, #8
    bdb8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    bdbc:	f003 030f 	and.w	r3, r3, #15
    bdc0:	2b01      	cmp	r3, #1
    bdc2:	d001      	beq.n	bdc8 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    bdc4:	bc70      	pop	{r4, r5, r6}
    bdc6:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    bdc8:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    bdcc:	4d08      	ldr	r5, [pc, #32]	; (bdf0 <GClkFreqUpdate+0x40>)
    bdce:	fbb5 f1f1 	udiv	r1, r5, r1
    bdd2:	b289      	uxth	r1, r1
    bdd4:	f361 461f 	bfi	r6, r1, #16, #16
    bdd8:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    bddc:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    bdde:	6851      	ldr	r1, [r2, #4]
    bde0:	f3c1 018b 	ubfx	r1, r1, #2, #12
    bde4:	4219      	tst	r1, r3
    bde6:	d1fa      	bne.n	bdde <GClkFreqUpdate+0x2e>
}
    bde8:	bc70      	pop	{r4, r5, r6}
    bdea:	4770      	bx	lr
    bdec:	40001c00 	.word	0x40001c00
    bdf0:	017d7840 	.word	0x017d7840

0000bdf4 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    bdf4:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    bdf6:	4911      	ldr	r1, [pc, #68]	; (be3c <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    bdf8:	4b11      	ldr	r3, [pc, #68]	; (be40 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    bdfa:	4a12      	ldr	r2, [pc, #72]	; (be44 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    bdfc:	6001      	str	r1, [r0, #0]
    bdfe:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    be00:	4604      	mov	r4, r0
      m_stepsLast(0) {
    be02:	6042      	str	r2, [r0, #4]
    be04:	6083      	str	r3, [r0, #8]
    be06:	60c5      	str	r5, [r0, #12]
    be08:	6105      	str	r5, [r0, #16]
    be0a:	6145      	str	r5, [r0, #20]
    be0c:	8305      	strh	r5, [r0, #24]
    be0e:	4629      	mov	r1, r5
    be10:	22c8      	movs	r2, #200	; 0xc8
    be12:	301c      	adds	r0, #28
    be14:	f012 fce2 	bl	1e7dc <memset>
    be18:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    be1c:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    be20:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    be24:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    be28:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    be2c:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    be30:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    be34:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    be38:	4620      	mov	r0, r4
    be3a:	bd38      	pop	{r3, r4, r5, pc}
    be3c:	000233bc 	.word	0x000233bc
    be40:	000233dc 	.word	0x000233dc
    be44:	000233cc 	.word	0x000233cc

0000be48 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    be48:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    be4a:	4a12      	ldr	r2, [pc, #72]	; (be94 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    be4c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    be50:	f36f 1386 	bfc	r3, #6, #1
    be54:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    be58:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    be5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    be60:	2b00      	cmp	r3, #0
    be62:	d1f9      	bne.n	be58 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    be64:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    be68:	490b      	ldr	r1, [pc, #44]	; (be98 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    be6a:	4c0c      	ldr	r4, [pc, #48]	; (be9c <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    be6c:	4d0c      	ldr	r5, [pc, #48]	; (bea0 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    be6e:	f363 0003 	bfi	r0, r3, #0, #4
    be72:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    be76:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    be7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be7e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    be82:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    be84:	69cb      	ldr	r3, [r1, #28]
    be86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be8a:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    be8c:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    be8e:	bc30      	pop	{r4, r5}
    be90:	4770      	bx	lr
    be92:	bf00      	nop
    be94:	40001c00 	.word	0x40001c00
    be98:	40000800 	.word	0x40000800
    be9c:	42001c00 	.word	0x42001c00
    bea0:	07030000 	.word	0x07030000

0000bea4 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    bea6:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    beaa:	2b00      	cmp	r3, #0
    beac:	d038      	beq.n	bf20 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    beae:	4a29      	ldr	r2, [pc, #164]	; (bf54 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    beb0:	2360      	movs	r3, #96	; 0x60
    beb2:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    beb4:	6913      	ldr	r3, [r2, #16]
    beb6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    beba:	d1fb      	bne.n	beb4 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bebc:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    bebe:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    bec0:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    bec4:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    bec8:	1aaa      	subs	r2, r5, r2
    beca:	b212      	sxth	r2, r2
    becc:	4604      	mov	r4, r0
    bece:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    bed2:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    bed4:	bb29      	cbnz	r1, bf22 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    bed6:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bed8:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    bedc:	f3bf 8f5b 	dmb	ish
    bee0:	e853 6f00 	ldrex	r6, [r3]
    bee4:	4416      	add	r6, r2
    bee6:	e843 6100 	strex	r1, r6, [r3]
    beea:	2900      	cmp	r1, #0
    beec:	d1f8      	bne.n	bee0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    beee:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bef2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bef6:	4d18      	ldr	r5, [pc, #96]	; (bf58 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    bef8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    befc:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    befe:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bf00:	fb85 2503 	smull	r2, r5, r5, r3
    bf04:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    bf06:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bf08:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bf0c:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bf0e:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bf10:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bf14:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    bf18:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    bf1a:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    bf1c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    bf20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bf22:	68c6      	ldr	r6, [r0, #12]
    bf24:	f3bf 8f5b 	dmb	ish
    bf28:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    bf2c:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bf30:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    bf32:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bf36:	4432      	add	r2, r6
    bf38:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bf3a:	4808      	ldr	r0, [pc, #32]	; (bf5c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    bf3c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    bf40:	f991 1003 	ldrsb.w	r1, [r1, #3]
    bf44:	6800      	ldr	r0, [r0, #0]
    bf46:	2201      	movs	r2, #1
    bf48:	f003 ffee 	bl	ff28 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    bf4c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    bf50:	e7c1      	b.n	bed6 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    bf52:	bf00      	nop
    bf54:	42001c00 	.word	0x42001c00
    bf58:	51eb851f 	.word	0x51eb851f
    bf5c:	20001f18 	.word	0x20001f18

0000bf60 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bf62:	780d      	ldrb	r5, [r1, #0]
    bf64:	f3c5 1441 	ubfx	r4, r5, #5, #2
    bf68:	2c01      	cmp	r4, #1
{
    bf6a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bf6c:	d152      	bne.n	c014 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bf6e:	4e30      	ldr	r6, [pc, #192]	; (c030 <cdcdf_acm_req+0xd0>)
    bf70:	888c      	ldrh	r4, [r1, #4]
    bf72:	7833      	ldrb	r3, [r6, #0]
    bf74:	42a3      	cmp	r3, r4
    bf76:	d002      	beq.n	bf7e <cdcdf_acm_req+0x1e>
    bf78:	7873      	ldrb	r3, [r6, #1]
    bf7a:	42a3      	cmp	r3, r4
    bf7c:	d14a      	bne.n	c014 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bf7e:	062b      	lsls	r3, r5, #24
    bf80:	4617      	mov	r7, r2
    bf82:	4606      	mov	r6, r0
    bf84:	460c      	mov	r4, r1
    bf86:	d438      	bmi.n	bffa <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    bf88:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bf8a:	f000 fc7f 	bl	c88c <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    bf8e:	7863      	ldrb	r3, [r4, #1]
    bf90:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bf92:	4601      	mov	r1, r0
	switch (req->bRequest) {
    bf94:	d00f      	beq.n	bfb6 <cdcdf_acm_req+0x56>
    bf96:	2b22      	cmp	r3, #34	; 0x22
    bf98:	d128      	bne.n	bfec <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    bf9a:	2300      	movs	r3, #0
    bf9c:	461a      	mov	r2, r3
    bf9e:	4619      	mov	r1, r3
    bfa0:	4618      	mov	r0, r3
    bfa2:	f000 fc07 	bl	c7b4 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    bfa6:	4b23      	ldr	r3, [pc, #140]	; (c034 <cdcdf_acm_req+0xd4>)
    bfa8:	681b      	ldr	r3, [r3, #0]
    bfaa:	b31b      	cbz	r3, bff4 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    bfac:	8860      	ldrh	r0, [r4, #2]
    bfae:	4798      	blx	r3
		return ERR_NONE;
    bfb0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    bfb2:	b003      	add	sp, #12
    bfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bfb6:	2d07      	cmp	r5, #7
    bfb8:	d136      	bne.n	c028 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    bfba:	b37f      	cbz	r7, c01c <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bfbc:	4b1e      	ldr	r3, [pc, #120]	; (c038 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bfbe:	6800      	ldr	r0, [r0, #0]
    bfc0:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bfc2:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bfc4:	888a      	ldrh	r2, [r1, #4]
    bfc6:	7989      	ldrb	r1, [r1, #6]
    bfc8:	f88d 1006 	strb.w	r1, [sp, #6]
    bfcc:	466c      	mov	r4, sp
    bfce:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bfd2:	b113      	cbz	r3, bfda <cdcdf_acm_req+0x7a>
    bfd4:	4668      	mov	r0, sp
    bfd6:	4798      	blx	r3
    bfd8:	b160      	cbz	r0, bff4 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bfda:	e894 0003 	ldmia.w	r4, {r0, r1}
    bfde:	4b17      	ldr	r3, [pc, #92]	; (c03c <cdcdf_acm_req+0xdc>)
    bfe0:	0c0a      	lsrs	r2, r1, #16
    bfe2:	6018      	str	r0, [r3, #0]
    bfe4:	8099      	strh	r1, [r3, #4]
    bfe6:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    bfe8:	2000      	movs	r0, #0
    bfea:	e001      	b.n	bff0 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    bfec:	f06f 000c 	mvn.w	r0, #12
}
    bff0:	b003      	add	sp, #12
    bff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    bff4:	2000      	movs	r0, #0
}
    bff6:	b003      	add	sp, #12
    bff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    bffa:	2a01      	cmp	r2, #1
    bffc:	d0fa      	beq.n	bff4 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    bffe:	784b      	ldrb	r3, [r1, #1]
    c000:	2b21      	cmp	r3, #33	; 0x21
    c002:	d1f3      	bne.n	bfec <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c004:	88ca      	ldrh	r2, [r1, #6]
    c006:	2a07      	cmp	r2, #7
    c008:	d10e      	bne.n	c028 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c00a:	2300      	movs	r3, #0
    c00c:	490b      	ldr	r1, [pc, #44]	; (c03c <cdcdf_acm_req+0xdc>)
    c00e:	f000 fbd1 	bl	c7b4 <usbdc_xfer>
    c012:	e7ed      	b.n	bff0 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    c014:	f06f 0009 	mvn.w	r0, #9
}
    c018:	b003      	add	sp, #12
    c01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c01c:	463b      	mov	r3, r7
    c01e:	462a      	mov	r2, r5
    c020:	4630      	mov	r0, r6
    c022:	f000 fbc7 	bl	c7b4 <usbdc_xfer>
    c026:	e7e3      	b.n	bff0 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    c028:	f04f 30ff 	mov.w	r0, #4294967295
    c02c:	e7e0      	b.n	bff0 <cdcdf_acm_req+0x90>
    c02e:	bf00      	nop
    c030:	20001c20 	.word	0x20001c20
    c034:	20001c28 	.word	0x20001c28
    c038:	20001c2c 	.word	0x20001c2c
    c03c:	20001c30 	.word	0x20001c30

0000c040 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    c040:	2901      	cmp	r1, #1
{
    c042:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c046:	4616      	mov	r6, r2
	switch (ctrl) {
    c048:	d008      	beq.n	c05c <cdcdf_acm_ctrl+0x1c>
    c04a:	d314      	bcc.n	c076 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    c04c:	2902      	cmp	r1, #2
    c04e:	bf0c      	ite	eq
    c050:	f06f 001a 	mvneq.w	r0, #26
    c054:	f06f 000c 	mvnne.w	r0, #12
    c058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c05c:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    c05e:	2a00      	cmp	r2, #0
    c060:	d047      	beq.n	c0f2 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c062:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c064:	795b      	ldrb	r3, [r3, #5]
    c066:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    c06a:	2b02      	cmp	r3, #2
    c06c:	d041      	beq.n	c0f2 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    c06e:	f06f 0009 	mvn.w	r0, #9
    c072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    c076:	6813      	ldr	r3, [r2, #0]
    c078:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    c07a:	2b00      	cmp	r3, #0
    c07c:	d0f7      	beq.n	c06e <cdcdf_acm_ctrl+0x2e>
    c07e:	f107 38ff 	add.w	r8, r7, #4294967295
    c082:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c086:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    c088:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c08a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    c08e:	2a02      	cmp	r2, #2
    c090:	d1ed      	bne.n	c06e <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c092:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    c096:	4291      	cmp	r1, r2
    c098:	d061      	beq.n	c15e <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c09a:	2aff      	cmp	r2, #255	; 0xff
    c09c:	d15b      	bne.n	c156 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c09e:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c0a2:	4618      	mov	r0, r3
    c0a4:	6871      	ldr	r1, [r6, #4]
    c0a6:	2205      	movs	r2, #5
    c0a8:	f000 fc00 	bl	c8ac <usb_find_desc>
		while (NULL != ep) {
    c0ac:	4604      	mov	r4, r0
    c0ae:	b980      	cbnz	r0, c0d2 <cdcdf_acm_ctrl+0x92>
    c0b0:	e041      	b.n	c136 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c0b2:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c0b4:	bf4c      	ite	mi
    c0b6:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c0ba:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c0bc:	4628      	mov	r0, r5
    c0be:	f000 feaf 	bl	ce20 <usb_d_ep_enable>
			desc->sod = ep;
    c0c2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    c0c4:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c0c6:	6871      	ldr	r1, [r6, #4]
    c0c8:	4420      	add	r0, r4
    c0ca:	f000 fc09 	bl	c8e0 <usb_find_ep_desc>
		while (NULL != ep) {
    c0ce:	4604      	mov	r4, r0
    c0d0:	b388      	cbz	r0, c136 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    c0d2:	7963      	ldrb	r3, [r4, #5]
    c0d4:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    c0d6:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c0d8:	78e1      	ldrb	r1, [r4, #3]
    c0da:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    c0de:	b292      	uxth	r2, r2
    c0e0:	4628      	mov	r0, r5
    c0e2:	f000 fe4b 	bl	cd7c <usb_d_ep_init>
    c0e6:	2800      	cmp	r0, #0
    c0e8:	d0e3      	beq.n	c0b2 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    c0ea:	f06f 0013 	mvn.w	r0, #19
}
    c0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    c0f2:	7823      	ldrb	r3, [r4, #0]
    c0f4:	2bff      	cmp	r3, #255	; 0xff
    c0f6:	d007      	beq.n	c108 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    c0f8:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    c0fa:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c0fc:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c0fe:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    c100:	d002      	beq.n	c108 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c102:	f000 fe71 	bl	cde8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c106:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    c108:	7863      	ldrb	r3, [r4, #1]
    c10a:	2bff      	cmp	r3, #255	; 0xff
    c10c:	d007      	beq.n	c11e <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    c10e:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    c110:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c112:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c114:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    c116:	d002      	beq.n	c11e <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c118:	f000 fe66 	bl	cde8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c11c:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    c11e:	7920      	ldrb	r0, [r4, #4]
    c120:	28ff      	cmp	r0, #255	; 0xff
    c122:	d003      	beq.n	c12c <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    c124:	f000 fe60 	bl	cde8 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    c128:	23ff      	movs	r3, #255	; 0xff
    c12a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    c12c:	4b0f      	ldr	r3, [pc, #60]	; (c16c <cdcdf_acm_ctrl+0x12c>)
    c12e:	2000      	movs	r0, #0
    c130:	7158      	strb	r0, [r3, #5]
    c132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c136:	6833      	ldr	r3, [r6, #0]
    c138:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    c13a:	7818      	ldrb	r0, [r3, #0]
    c13c:	2204      	movs	r2, #4
    c13e:	4418      	add	r0, r3
    c140:	f000 fbb4 	bl	c8ac <usb_find_desc>
	for (i = 0; i < 2; i++) {
    c144:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c146:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    c148:	d10d      	bne.n	c166 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    c14a:	4b08      	ldr	r3, [pc, #32]	; (c16c <cdcdf_acm_ctrl+0x12c>)
    c14c:	2201      	movs	r2, #1
    c14e:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c150:	2000      	movs	r0, #0
    c152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    c156:	f06f 001b 	mvn.w	r0, #27
    c15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    c15e:	f06f 0011 	mvn.w	r0, #17
    c162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    c166:	2b00      	cmp	r3, #0
    c168:	d18d      	bne.n	c086 <cdcdf_acm_ctrl+0x46>
    c16a:	e780      	b.n	c06e <cdcdf_acm_ctrl+0x2e>
    c16c:	20001c20 	.word	0x20001c20

0000c170 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c170:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    c172:	f000 fb91 	bl	c898 <usbdc_get_state>
    c176:	2801      	cmp	r0, #1
    c178:	d80d      	bhi.n	c196 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c17a:	4b08      	ldr	r3, [pc, #32]	; (c19c <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c17c:	4a08      	ldr	r2, [pc, #32]	; (c1a0 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c17e:	4909      	ldr	r1, [pc, #36]	; (c1a4 <cdcdf_acm_init+0x34>)
    c180:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    c182:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c184:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    c186:	f000 fb61 	bl	c84c <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c18a:	4907      	ldr	r1, [pc, #28]	; (c1a8 <cdcdf_acm_init+0x38>)
    c18c:	2001      	movs	r0, #1
    c18e:	f000 fb1f 	bl	c7d0 <usbdc_register_handler>
	return ERR_NONE;
    c192:	2000      	movs	r0, #0
    c194:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    c196:	f06f 0010 	mvn.w	r0, #16
}
    c19a:	bd08      	pop	{r3, pc}
    c19c:	20001c14 	.word	0x20001c14
    c1a0:	20001c20 	.word	0x20001c20
    c1a4:	0000c041 	.word	0x0000c041
    c1a8:	200000ec 	.word	0x200000ec

0000c1ac <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    c1ac:	4b08      	ldr	r3, [pc, #32]	; (c1d0 <cdcdf_acm_read+0x24>)
{
    c1ae:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c1b0:	795c      	ldrb	r4, [r3, #5]
    c1b2:	b13c      	cbz	r4, c1c4 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c1b4:	460a      	mov	r2, r1
}
    c1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c1ba:	4601      	mov	r1, r0
    c1bc:	7918      	ldrb	r0, [r3, #4]
    c1be:	2300      	movs	r3, #0
    c1c0:	f000 baf8 	b.w	c7b4 <usbdc_xfer>
}
    c1c4:	f06f 0010 	mvn.w	r0, #16
    c1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    c1cc:	4770      	bx	lr
    c1ce:	bf00      	nop
    c1d0:	20001c20 	.word	0x20001c20

0000c1d4 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    c1d4:	4b08      	ldr	r3, [pc, #32]	; (c1f8 <cdcdf_acm_write+0x24>)
{
    c1d6:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c1d8:	795c      	ldrb	r4, [r3, #5]
    c1da:	b13c      	cbz	r4, c1ec <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c1dc:	460a      	mov	r2, r1
}
    c1de:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c1e2:	4601      	mov	r1, r0
    c1e4:	78d8      	ldrb	r0, [r3, #3]
    c1e6:	2301      	movs	r3, #1
    c1e8:	f000 bae4 	b.w	c7b4 <usbdc_xfer>
}
    c1ec:	f06f 0010 	mvn.w	r0, #16
    c1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    c1f4:	4770      	bx	lr
    c1f6:	bf00      	nop
    c1f8:	20001c20 	.word	0x20001c20

0000c1fc <cdcdf_acm_stop_xfer>:
{
    c1fc:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c1fe:	4c04      	ldr	r4, [pc, #16]	; (c210 <cdcdf_acm_stop_xfer+0x14>)
    c200:	78e0      	ldrb	r0, [r4, #3]
    c202:	f000 fecb 	bl	cf9c <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c206:	7920      	ldrb	r0, [r4, #4]
}
    c208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c20c:	f000 bec6 	b.w	cf9c <usb_d_ep_abort>
    c210:	20001c20 	.word	0x20001c20

0000c214 <cdcdf_acm_register_callback>:
{
    c214:	b508      	push	{r3, lr}
	switch (cb_type) {
    c216:	2803      	cmp	r0, #3
    c218:	d81b      	bhi.n	c252 <cdcdf_acm_register_callback+0x3e>
    c21a:	e8df f000 	tbb	[pc, r0]
    c21e:	0a12      	.short	0x0a12
    c220:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c222:	4b0d      	ldr	r3, [pc, #52]	; (c258 <cdcdf_acm_register_callback+0x44>)
    c224:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c226:	2000      	movs	r0, #0
		break;
    c228:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c22a:	4b0c      	ldr	r3, [pc, #48]	; (c25c <cdcdf_acm_register_callback+0x48>)
    c22c:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c22e:	2000      	movs	r0, #0
		break;
    c230:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c232:	4b0b      	ldr	r3, [pc, #44]	; (c260 <cdcdf_acm_register_callback+0x4c>)
    c234:	460a      	mov	r2, r1
    c236:	78d8      	ldrb	r0, [r3, #3]
    c238:	2102      	movs	r1, #2
    c23a:	f000 ff05 	bl	d048 <usb_d_ep_register_callback>
	return ERR_NONE;
    c23e:	2000      	movs	r0, #0
		break;
    c240:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c242:	4b07      	ldr	r3, [pc, #28]	; (c260 <cdcdf_acm_register_callback+0x4c>)
    c244:	460a      	mov	r2, r1
    c246:	7918      	ldrb	r0, [r3, #4]
    c248:	2102      	movs	r1, #2
    c24a:	f000 fefd 	bl	d048 <usb_d_ep_register_callback>
	return ERR_NONE;
    c24e:	2000      	movs	r0, #0
		break;
    c250:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    c252:	f06f 000c 	mvn.w	r0, #12
}
    c256:	bd08      	pop	{r3, pc}
    c258:	20001c28 	.word	0x20001c28
    c25c:	20001c2c 	.word	0x20001c2c
    c260:	20001c20 	.word	0x20001c20

0000c264 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    c264:	4b01      	ldr	r3, [pc, #4]	; (c26c <cdcdf_acm_is_enabled+0x8>)
}
    c266:	7958      	ldrb	r0, [r3, #5]
    c268:	4770      	bx	lr
    c26a:	bf00      	nop
    c26c:	20001c20 	.word	0x20001c20

0000c270 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    c270:	4800      	ldr	r0, [pc, #0]	; (c274 <cdcdf_acm_get_line_coding+0x4>)
    c272:	4770      	bx	lr
    c274:	20001c30 	.word	0x20001c30

0000c278 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c278:	4b05      	ldr	r3, [pc, #20]	; (c290 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c27a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c27c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    c27e:	b12c      	cbz	r4, c28c <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    c280:	6863      	ldr	r3, [r4, #4]
    c282:	b103      	cbz	r3, c286 <usbd_sof_cb+0xe>
			sof->cb();
    c284:	4798      	blx	r3
		sof = sof->next;
    c286:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    c288:	2c00      	cmp	r4, #0
    c28a:	d1f9      	bne.n	c280 <usbd_sof_cb+0x8>
    c28c:	bd10      	pop	{r4, pc}
    c28e:	bf00      	nop
    c290:	20001c38 	.word	0x20001c38

0000c294 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c294:	b538      	push	{r3, r4, r5, lr}
    c296:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    c298:	b189      	cbz	r1, c2be <usbdc_cb_ctl_done+0x2a>
    c29a:	2901      	cmp	r1, #1
    c29c:	d10d      	bne.n	c2ba <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c29e:	4b23      	ldr	r3, [pc, #140]	; (c32c <usbdc_cb_ctl_done+0x98>)
    c2a0:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    c2a2:	b154      	cbz	r4, c2ba <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    c2a4:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c2a6:	2201      	movs	r2, #1
    c2a8:	4629      	mov	r1, r5
    c2aa:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    c2ac:	b113      	cbz	r3, c2b4 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    c2ae:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    c2b0:	300a      	adds	r0, #10
    c2b2:	d102      	bne.n	c2ba <usbdc_cb_ctl_done+0x26>
		h = h->next;
    c2b4:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c2b6:	2c00      	cmp	r4, #0
    c2b8:	d1f4      	bne.n	c2a4 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c2ba:	2000      	movs	r0, #0
    c2bc:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c2be:	7813      	ldrb	r3, [r2, #0]
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d1fa      	bne.n	c2ba <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    c2c4:	7853      	ldrb	r3, [r2, #1]
    c2c6:	2b05      	cmp	r3, #5
    c2c8:	d014      	beq.n	c2f4 <usbdc_cb_ctl_done+0x60>
    c2ca:	2b09      	cmp	r3, #9
    c2cc:	d1f5      	bne.n	c2ba <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    c2ce:	8852      	ldrh	r2, [r2, #2]
    c2d0:	4b16      	ldr	r3, [pc, #88]	; (c32c <usbdc_cb_ctl_done+0x98>)
    c2d2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c2d4:	bb3a      	cbnz	r2, c326 <usbdc_cb_ctl_done+0x92>
    c2d6:	2503      	movs	r5, #3
    c2d8:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c2da:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c2dc:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c2de:	2c00      	cmp	r4, #0
    c2e0:	d0eb      	beq.n	c2ba <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c2e2:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c2e4:	4629      	mov	r1, r5
    c2e6:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c2e8:	b103      	cbz	r3, c2ec <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    c2ea:	4798      	blx	r3
		cg = cg->next;
    c2ec:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c2ee:	2c00      	cmp	r4, #0
    c2f0:	d1f7      	bne.n	c2e2 <usbdc_cb_ctl_done+0x4e>
    c2f2:	e7e2      	b.n	c2ba <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    c2f4:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c2f6:	b2c0      	uxtb	r0, r0
    c2f8:	f000 fcf0 	bl	ccdc <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c2fc:	886b      	ldrh	r3, [r5, #2]
    c2fe:	b97b      	cbnz	r3, c320 <usbdc_cb_ctl_done+0x8c>
    c300:	2502      	movs	r5, #2
    c302:	462a      	mov	r2, r5
    c304:	4b09      	ldr	r3, [pc, #36]	; (c32c <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c306:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c308:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c30a:	2c00      	cmp	r4, #0
    c30c:	d0d5      	beq.n	c2ba <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c30e:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c310:	4629      	mov	r1, r5
    c312:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c314:	b103      	cbz	r3, c318 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    c316:	4798      	blx	r3
		cg = cg->next;
    c318:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c31a:	2c00      	cmp	r4, #0
    c31c:	d1f7      	bne.n	c30e <usbdc_cb_ctl_done+0x7a>
    c31e:	e7cc      	b.n	c2ba <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c320:	2503      	movs	r5, #3
    c322:	462a      	mov	r2, r5
    c324:	e7ee      	b.n	c304 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c326:	2504      	movs	r5, #4
    c328:	462a      	mov	r2, r5
    c32a:	e7d6      	b.n	c2da <usbdc_cb_ctl_done+0x46>
    c32c:	20001c38 	.word	0x20001c38

0000c330 <usbdc_cb_ctl_req>:
{
    c330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c334:	4fb6      	ldr	r7, [pc, #728]	; (c610 <usbdc_cb_ctl_req+0x2e0>)
    c336:	68bc      	ldr	r4, [r7, #8]
{
    c338:	b086      	sub	sp, #24
    c33a:	4606      	mov	r6, r0
    c33c:	460d      	mov	r5, r1
	while (h != NULL) {
    c33e:	b15c      	cbz	r4, c358 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    c340:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c342:	2200      	movs	r2, #0
    c344:	4629      	mov	r1, r5
    c346:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    c348:	b11b      	cbz	r3, c352 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    c34a:	4798      	blx	r3
			if (0 == rc) {
    c34c:	b170      	cbz	r0, c36c <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    c34e:	300a      	adds	r0, #10
    c350:	d108      	bne.n	c364 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    c352:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c354:	2c00      	cmp	r4, #0
    c356:	d1f3      	bne.n	c340 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c358:	782b      	ldrb	r3, [r5, #0]
    c35a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c35e:	d025      	beq.n	c3ac <usbdc_cb_ctl_req+0x7c>
    c360:	2a80      	cmp	r2, #128	; 0x80
    c362:	d007      	beq.n	c374 <usbdc_cb_ctl_req+0x44>
		return false;
    c364:	2000      	movs	r0, #0
}
    c366:	b006      	add	sp, #24
    c368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    c36c:	2001      	movs	r0, #1
}
    c36e:	b006      	add	sp, #24
    c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    c374:	786a      	ldrb	r2, [r5, #1]
    c376:	2a0a      	cmp	r2, #10
    c378:	d8f4      	bhi.n	c364 <usbdc_cb_ctl_req+0x34>
    c37a:	a101      	add	r1, pc, #4	; (adr r1, c380 <usbdc_cb_ctl_req+0x50>)
    c37c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c380:	0000c49f 	.word	0x0000c49f
    c384:	0000c365 	.word	0x0000c365
    c388:	0000c365 	.word	0x0000c365
    c38c:	0000c365 	.word	0x0000c365
    c390:	0000c365 	.word	0x0000c365
    c394:	0000c365 	.word	0x0000c365
    c398:	0000c453 	.word	0x0000c453
    c39c:	0000c365 	.word	0x0000c365
    c3a0:	0000c431 	.word	0x0000c431
    c3a4:	0000c365 	.word	0x0000c365
    c3a8:	0000c3e9 	.word	0x0000c3e9
	switch (req->bRequest) {
    c3ac:	786a      	ldrb	r2, [r5, #1]
    c3ae:	3a01      	subs	r2, #1
    c3b0:	2a0a      	cmp	r2, #10
    c3b2:	d8d7      	bhi.n	c364 <usbdc_cb_ctl_req+0x34>
    c3b4:	a101      	add	r1, pc, #4	; (adr r1, c3bc <usbdc_cb_ctl_req+0x8c>)
    c3b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c3ba:	bf00      	nop
    c3bc:	0000c5b7 	.word	0x0000c5b7
    c3c0:	0000c365 	.word	0x0000c365
    c3c4:	0000c587 	.word	0x0000c587
    c3c8:	0000c365 	.word	0x0000c365
    c3cc:	0000c569 	.word	0x0000c569
    c3d0:	0000c365 	.word	0x0000c365
    c3d4:	0000c365 	.word	0x0000c365
    c3d8:	0000c365 	.word	0x0000c365
    c3dc:	0000c543 	.word	0x0000c543
    c3e0:	0000c365 	.word	0x0000c365
    c3e4:	0000c4e7 	.word	0x0000c4e7
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c3e8:	7f7b      	ldrb	r3, [r7, #29]
    c3ea:	88aa      	ldrh	r2, [r5, #4]
    c3ec:	4113      	asrs	r3, r2
    c3ee:	f013 0301 	ands.w	r3, r3, #1
    c3f2:	f000 818e 	beq.w	c712 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c3f6:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c3f8:	b91c      	cbnz	r4, c402 <usbdc_cb_ctl_req+0xd2>
    c3fa:	e7b3      	b.n	c364 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c3fc:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c3fe:	2c00      	cmp	r4, #0
    c400:	d0b0      	beq.n	c364 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c402:	6863      	ldr	r3, [r4, #4]
    c404:	462a      	mov	r2, r5
    c406:	2102      	movs	r1, #2
    c408:	4620      	mov	r0, r4
    c40a:	4798      	blx	r3
    c40c:	2800      	cmp	r0, #0
    c40e:	dbf5      	blt.n	c3fc <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c410:	697b      	ldr	r3, [r7, #20]
    c412:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c414:	697b      	ldr	r3, [r7, #20]
    c416:	9303      	str	r3, [sp, #12]
    c418:	2401      	movs	r4, #1
    c41a:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c41c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c41e:	9404      	str	r4, [sp, #16]
    c420:	f88d 3014 	strb.w	r3, [sp, #20]
    c424:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c428:	f000 fd24 	bl	ce74 <usb_d_ep_transfer>
			return true;
    c42c:	4620      	mov	r0, r4
    c42e:	e79a      	b.n	c366 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c430:	697b      	ldr	r3, [r7, #20]
    c432:	7efa      	ldrb	r2, [r7, #27]
    c434:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c436:	697b      	ldr	r3, [r7, #20]
    c438:	9303      	str	r3, [sp, #12]
    c43a:	2401      	movs	r4, #1
    c43c:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c43e:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c440:	f88d 6014 	strb.w	r6, [sp, #20]
    c444:	9404      	str	r4, [sp, #16]
    c446:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c44a:	f000 fd13 	bl	ce74 <usb_d_ep_transfer>
		return true;
    c44e:	4620      	mov	r0, r4
    c450:	e789      	b.n	c366 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c452:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    c454:	0a1a      	lsrs	r2, r3, #8
    c456:	2a02      	cmp	r2, #2
    c458:	f000 810a 	beq.w	c670 <usbdc_cb_ctl_req+0x340>
    c45c:	2a03      	cmp	r2, #3
    c45e:	f000 80f0 	beq.w	c642 <usbdc_cb_ctl_req+0x312>
    c462:	2a01      	cmp	r2, #1
    c464:	f47f af7e 	bne.w	c364 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c468:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    c46a:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c46c:	e893 0003 	ldmia.w	r3, {r0, r1}
    c470:	2c12      	cmp	r4, #18
    c472:	bf28      	it	cs
    c474:	2412      	movcs	r4, #18
    c476:	f000 fa19 	bl	c8ac <usb_find_desc>
	if (!dev_desc) {
    c47a:	4603      	mov	r3, r0
    c47c:	2800      	cmp	r0, #0
    c47e:	f43f af71 	beq.w	c364 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c482:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    c484:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c486:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c488:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c48a:	f88d 6014 	strb.w	r6, [sp, #20]
    c48e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c492:	f000 fcef 	bl	ce74 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c496:	fab0 f080 	clz	r0, r0
    c49a:	0940      	lsrs	r0, r0, #5
    c49c:	e763      	b.n	c366 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c49e:	f003 011f 	and.w	r1, r3, #31
    c4a2:	2901      	cmp	r1, #1
    c4a4:	f240 8091 	bls.w	c5ca <usbdc_cb_ctl_req+0x29a>
    c4a8:	2902      	cmp	r1, #2
    c4aa:	f47f af5b 	bne.w	c364 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c4ae:	88a8      	ldrh	r0, [r5, #4]
    c4b0:	b2c0      	uxtb	r0, r0
    c4b2:	f000 fd91 	bl	cfd8 <usb_d_ep_halt>
		if (st < 0) {
    c4b6:	1e03      	subs	r3, r0, #0
    c4b8:	f6ff af54 	blt.w	c364 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    c4bc:	f003 0301 	and.w	r3, r3, #1
    c4c0:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c4c2:	697b      	ldr	r3, [r7, #20]
    c4c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c4c8:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4ca:	697b      	ldr	r3, [r7, #20]
    c4cc:	9303      	str	r3, [sp, #12]
    c4ce:	2202      	movs	r2, #2
    c4d0:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c4d2:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c4d4:	f88d 6014 	strb.w	r6, [sp, #20]
    c4d8:	9204      	str	r2, [sp, #16]
    c4da:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c4de:	f000 fcc9 	bl	ce74 <usb_d_ep_transfer>
	return true;
    c4e2:	2001      	movs	r0, #1
    c4e4:	e73f      	b.n	c366 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c4e6:	683b      	ldr	r3, [r7, #0]
    c4e8:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    c4ea:	886c      	ldrh	r4, [r5, #2]
    c4ec:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c4ee:	e893 0003 	ldmia.w	r3, {r0, r1}
    c4f2:	f000 fa0f 	bl	c914 <usb_find_cfg_desc>
	if (NULL == ifc) {
    c4f6:	2800      	cmp	r0, #0
    c4f8:	f43f af34 	beq.w	c364 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    c4fc:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    c4fe:	78c1      	ldrb	r1, [r0, #3]
    c500:	7883      	ldrb	r3, [r0, #2]
    c502:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c506:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c50a:	4619      	mov	r1, r3
    c50c:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c50e:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c510:	f000 f9cc 	bl	c8ac <usb_find_desc>
    c514:	2800      	cmp	r0, #0
    c516:	f43f af25 	beq.w	c364 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c51a:	7883      	ldrb	r3, [r0, #2]
    c51c:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c51e:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c522:	d103      	bne.n	c52c <usbdc_cb_ctl_req+0x1fc>
    c524:	78c3      	ldrb	r3, [r0, #3]
    c526:	42a3      	cmp	r3, r4
    c528:	f000 80c9 	beq.w	c6be <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c52c:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c52e:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c530:	7818      	ldrb	r0, [r3, #0]
    c532:	4403      	add	r3, r0
    c534:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c536:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c538:	f000 f9b8 	bl	c8ac <usb_find_desc>
		if (NULL == ifc) {
    c53c:	2800      	cmp	r0, #0
    c53e:	d1ec      	bne.n	c51a <usbdc_cb_ctl_req+0x1ea>
    c540:	e710      	b.n	c364 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c542:	886a      	ldrh	r2, [r5, #2]
    c544:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c546:	2a00      	cmp	r2, #0
    c548:	d142      	bne.n	c5d0 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c54a:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c54c:	b13c      	cbz	r4, c55e <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c54e:	6863      	ldr	r3, [r4, #4]
    c550:	4620      	mov	r0, r4
    c552:	2200      	movs	r2, #0
    c554:	2101      	movs	r1, #1
    c556:	4798      	blx	r3
		func = func->next;
    c558:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c55a:	2c00      	cmp	r4, #0
    c55c:	d1f7      	bne.n	c54e <usbdc_cb_ctl_req+0x21e>
    c55e:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c560:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c562:	2300      	movs	r3, #0
    c564:	2201      	movs	r2, #1
    c566:	e002      	b.n	c56e <usbdc_cb_ctl_req+0x23e>
    c568:	2300      	movs	r3, #0
    c56a:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c56c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c56e:	f88d 6014 	strb.w	r6, [sp, #20]
    c572:	9303      	str	r3, [sp, #12]
    c574:	9304      	str	r3, [sp, #16]
    c576:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c57a:	f000 fc7b 	bl	ce74 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c57e:	fab0 f080 	clz	r0, r0
    c582:	0940      	lsrs	r0, r0, #5
    c584:	e6ef      	b.n	c366 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c586:	2b02      	cmp	r3, #2
    c588:	f47f aeec 	bne.w	c364 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c58c:	88ef      	ldrh	r7, [r5, #6]
    c58e:	2f00      	cmp	r7, #0
    c590:	f47f aee8 	bne.w	c364 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c594:	88a8      	ldrh	r0, [r5, #4]
    c596:	2101      	movs	r1, #1
    c598:	b2c0      	uxtb	r0, r0
    c59a:	f000 fd1d 	bl	cfd8 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c59e:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c5a0:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c5a2:	9703      	str	r7, [sp, #12]
    c5a4:	9704      	str	r7, [sp, #16]
    c5a6:	f88d 6014 	strb.w	r6, [sp, #20]
    c5aa:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c5ae:	f000 fc61 	bl	ce74 <usb_d_ep_transfer>
		return true;
    c5b2:	4620      	mov	r0, r4
    c5b4:	e6d7      	b.n	c366 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c5b6:	2b02      	cmp	r3, #2
    c5b8:	f47f aed4 	bne.w	c364 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c5bc:	88ef      	ldrh	r7, [r5, #6]
    c5be:	2f00      	cmp	r7, #0
    c5c0:	f47f aed0 	bne.w	c364 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c5c4:	88a8      	ldrh	r0, [r5, #4]
    c5c6:	4639      	mov	r1, r7
    c5c8:	e7e6      	b.n	c598 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c5ca:	2300      	movs	r3, #0
    c5cc:	9301      	str	r3, [sp, #4]
    c5ce:	e778      	b.n	c4c2 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c5d0:	683b      	ldr	r3, [r7, #0]
    c5d2:	e893 0003 	ldmia.w	r3, {r0, r1}
    c5d6:	f000 f99d 	bl	c914 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c5da:	2800      	cmp	r0, #0
    c5dc:	f43f aec2 	beq.w	c364 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c5e0:	78c1      	ldrb	r1, [r0, #3]
    c5e2:	7882      	ldrb	r2, [r0, #2]
    c5e4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c5e8:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c5ec:	4619      	mov	r1, r3
    c5ee:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c5f0:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c5f2:	f000 f95b 	bl	c8ac <usb_find_desc>
    c5f6:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c5f8:	2800      	cmp	r0, #0
    c5fa:	d0b0      	beq.n	c55e <usbdc_cb_ctl_req+0x22e>
    c5fc:	24ff      	movs	r4, #255	; 0xff
    c5fe:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c600:	f890 8002 	ldrb.w	r8, [r0, #2]
    c604:	45a0      	cmp	r8, r4
    c606:	d010      	beq.n	c62a <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c608:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c60a:	b92c      	cbnz	r4, c618 <usbdc_cb_ctl_req+0x2e8>
    c60c:	e092      	b.n	c734 <usbdc_cb_ctl_req+0x404>
    c60e:	bf00      	nop
    c610:	20001c38 	.word	0x20001c38
					func = func->next;
    c614:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c616:	b134      	cbz	r4, c626 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c618:	6863      	ldr	r3, [r4, #4]
    c61a:	462a      	mov	r2, r5
    c61c:	2100      	movs	r1, #0
    c61e:	4620      	mov	r0, r4
    c620:	4798      	blx	r3
    c622:	2800      	cmp	r0, #0
    c624:	d1f6      	bne.n	c614 <usbdc_cb_ctl_req+0x2e4>
    c626:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c628:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c62a:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c62c:	9904      	ldr	r1, [sp, #16]
    c62e:	4403      	add	r3, r0
    c630:	4618      	mov	r0, r3
    c632:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c634:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c636:	f000 f939 	bl	c8ac <usb_find_desc>
    c63a:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c63c:	2800      	cmp	r0, #0
    c63e:	d1df      	bne.n	c600 <usbdc_cb_ctl_req+0x2d0>
    c640:	e78e      	b.n	c560 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c642:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c644:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c646:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c648:	e892 0003 	ldmia.w	r2, {r0, r1}
    c64c:	b2da      	uxtb	r2, r3
    c64e:	f000 f98d 	bl	c96c <usb_find_str_desc>
	if (NULL == str_desc) {
    c652:	4603      	mov	r3, r0
    c654:	2800      	cmp	r0, #0
    c656:	f43f ae85 	beq.w	c364 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c65a:	7801      	ldrb	r1, [r0, #0]
    c65c:	428c      	cmp	r4, r1
    c65e:	f67f af10 	bls.w	c482 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c662:	3d01      	subs	r5, #1
    c664:	4225      	tst	r5, r4
    c666:	bf0c      	ite	eq
    c668:	2201      	moveq	r2, #1
    c66a:	2200      	movne	r2, #0
    c66c:	460c      	mov	r4, r1
    c66e:	e709      	b.n	c484 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c670:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c672:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c674:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c676:	3301      	adds	r3, #1
    c678:	e892 0003 	ldmia.w	r2, {r0, r1}
    c67c:	b2da      	uxtb	r2, r3
    c67e:	f000 f949 	bl	c914 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c682:	4602      	mov	r2, r0
    c684:	2800      	cmp	r0, #0
    c686:	f43f ae6d 	beq.w	c364 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c68a:	78c1      	ldrb	r1, [r0, #3]
    c68c:	7883      	ldrb	r3, [r0, #2]
    c68e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c692:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c694:	429c      	cmp	r4, r3
    c696:	d94b      	bls.n	c730 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c698:	3d01      	subs	r5, #1
    c69a:	4225      	tst	r5, r4
    c69c:	bf0c      	ite	eq
    c69e:	2101      	moveq	r1, #1
    c6a0:	2100      	movne	r1, #0
    c6a2:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c6a4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c6a6:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c6a8:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c6aa:	f88d 6014 	strb.w	r6, [sp, #20]
    c6ae:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c6b2:	f000 fbdf 	bl	ce74 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c6b6:	fab0 f080 	clz	r0, r0
    c6ba:	0940      	lsrs	r0, r0, #5
    c6bc:	e653      	b.n	c366 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c6be:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c6c0:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c6c2:	b926      	cbnz	r6, c6ce <usbdc_cb_ctl_req+0x39e>
    c6c4:	e64e      	b.n	c364 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c6c6:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c6c8:	2e00      	cmp	r6, #0
    c6ca:	f43f ae4b 	beq.w	c364 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c6ce:	6873      	ldr	r3, [r6, #4]
    c6d0:	aa01      	add	r2, sp, #4
    c6d2:	2101      	movs	r1, #1
    c6d4:	4630      	mov	r0, r6
    c6d6:	4798      	blx	r3
    c6d8:	2800      	cmp	r0, #0
    c6da:	d1f4      	bne.n	c6c6 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c6dc:	4601      	mov	r1, r0
    c6de:	aa01      	add	r2, sp, #4
    c6e0:	6873      	ldr	r3, [r6, #4]
    c6e2:	4630      	mov	r0, r6
    c6e4:	4798      	blx	r3
    c6e6:	2800      	cmp	r0, #0
    c6e8:	f47f ae3c 	bne.w	c364 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c6ec:	b12c      	cbz	r4, c6fa <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c6ee:	7f7b      	ldrb	r3, [r7, #29]
    c6f0:	2201      	movs	r2, #1
    c6f2:	fa02 f505 	lsl.w	r5, r2, r5
    c6f6:	432b      	orrs	r3, r5
    c6f8:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c6fa:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c6fc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c6fe:	9303      	str	r3, [sp, #12]
    c700:	9304      	str	r3, [sp, #16]
    c702:	f88d 3014 	strb.w	r3, [sp, #20]
    c706:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c70a:	f000 fbb3 	bl	ce74 <usb_d_ep_transfer>
			return true;
    c70e:	2001      	movs	r0, #1
    c710:	e629      	b.n	c366 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c712:	697a      	ldr	r2, [r7, #20]
    c714:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c716:	697a      	ldr	r2, [r7, #20]
    c718:	9203      	str	r2, [sp, #12]
    c71a:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c71c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c71e:	f88d 3014 	strb.w	r3, [sp, #20]
    c722:	f88d 3015 	strb.w	r3, [sp, #21]
    c726:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    c728:	f000 fba4 	bl	ce74 <usb_d_ep_transfer>
		return true;
    c72c:	4620      	mov	r0, r4
    c72e:	e61a      	b.n	c366 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    c730:	2100      	movs	r1, #0
    c732:	e7b7      	b.n	c6a4 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    c734:	4644      	mov	r4, r8
    c736:	e778      	b.n	c62a <usbdc_cb_ctl_req+0x2fa>

0000c738 <usbd_event_cb>:
{
    c738:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    c73a:	b338      	cbz	r0, c78c <usbd_event_cb+0x54>
    c73c:	2801      	cmp	r0, #1
    c73e:	d124      	bne.n	c78a <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c740:	4d19      	ldr	r5, [pc, #100]	; (c7a8 <usbd_event_cb+0x70>)
    c742:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    c744:	b13c      	cbz	r4, c756 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c746:	6863      	ldr	r3, [r4, #4]
    c748:	4620      	mov	r0, r4
    c74a:	2200      	movs	r2, #0
    c74c:	2101      	movs	r1, #1
    c74e:	4798      	blx	r3
		func = func->next;
    c750:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c752:	2c00      	cmp	r4, #0
    c754:	d1f7      	bne.n	c746 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    c756:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    c758:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    c75a:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    c75c:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c75e:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    c760:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    c762:	f000 fb41 	bl	cde8 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    c766:	7f28      	ldrb	r0, [r5, #28]
    c768:	f000 faba 	bl	cce0 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c76c:	4621      	mov	r1, r4
    c76e:	4620      	mov	r0, r4
    c770:	4a0e      	ldr	r2, [pc, #56]	; (c7ac <usbd_event_cb+0x74>)
    c772:	f000 fc69 	bl	d048 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c776:	4620      	mov	r0, r4
    c778:	4631      	mov	r1, r6
    c77a:	4a0d      	ldr	r2, [pc, #52]	; (c7b0 <usbd_event_cb+0x78>)
    c77c:	f000 fc64 	bl	d048 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    c780:	4620      	mov	r0, r4
}
    c782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    c786:	f000 bb4b 	b.w	ce20 <usb_d_ep_enable>
    c78a:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c78c:	4b06      	ldr	r3, [pc, #24]	; (c7a8 <usbd_event_cb+0x70>)
    c78e:	68dc      	ldr	r4, [r3, #12]
    c790:	460d      	mov	r5, r1
	while (cg != NULL) {
    c792:	b144      	cbz	r4, c7a6 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    c794:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c796:	4629      	mov	r1, r5
    c798:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    c79a:	b103      	cbz	r3, c79e <usbd_event_cb+0x66>
			cg->cb(change, value);
    c79c:	4798      	blx	r3
		cg = cg->next;
    c79e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c7a0:	2c00      	cmp	r4, #0
    c7a2:	d1f7      	bne.n	c794 <usbd_event_cb+0x5c>
    c7a4:	bd70      	pop	{r4, r5, r6, pc}
    c7a6:	bd70      	pop	{r4, r5, r6, pc}
    c7a8:	20001c38 	.word	0x20001c38
    c7ac:	0000c331 	.word	0x0000c331
    c7b0:	0000c295 	.word	0x0000c295

0000c7b4 <usbdc_xfer>:
{
    c7b4:	b500      	push	{lr}
    c7b6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c7b8:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    c7bc:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c7be:	9101      	str	r1, [sp, #4]
    c7c0:	9202      	str	r2, [sp, #8]
    c7c2:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c7c6:	f000 fb55 	bl	ce74 <usb_d_ep_transfer>
}
    c7ca:	b005      	add	sp, #20
    c7cc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c7d0 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    c7d0:	2801      	cmp	r0, #1
    c7d2:	d009      	beq.n	c7e8 <usbdc_register_handler+0x18>
    c7d4:	d305      	bcc.n	c7e2 <usbdc_register_handler+0x12>
    c7d6:	2802      	cmp	r0, #2
    c7d8:	d102      	bne.n	c7e0 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c7da:	4805      	ldr	r0, [pc, #20]	; (c7f0 <usbdc_register_handler+0x20>)
    c7dc:	f000 bc66 	b.w	d0ac <list_insert_at_end>
    c7e0:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c7e2:	4804      	ldr	r0, [pc, #16]	; (c7f4 <usbdc_register_handler+0x24>)
    c7e4:	f000 bc62 	b.w	d0ac <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c7e8:	4803      	ldr	r0, [pc, #12]	; (c7f8 <usbdc_register_handler+0x28>)
    c7ea:	f000 bc5f 	b.w	d0ac <list_insert_at_end>
    c7ee:	bf00      	nop
    c7f0:	20001c44 	.word	0x20001c44
    c7f4:	20001c3c 	.word	0x20001c3c
    c7f8:	20001c40 	.word	0x20001c40

0000c7fc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c7fc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c7fe:	4605      	mov	r5, r0
    c800:	3000      	adds	r0, #0
    c802:	bf18      	it	ne
    c804:	2001      	movne	r0, #1
    c806:	f240 3255 	movw	r2, #853	; 0x355
    c80a:	490c      	ldr	r1, [pc, #48]	; (c83c <usbdc_init+0x40>)
    c80c:	f000 fc4a 	bl	d0a4 <assert>

	int32_t rc;

	rc = usb_d_init();
    c810:	f000 f9dc 	bl	cbcc <usb_d_init>
	if (rc < 0) {
    c814:	2800      	cmp	r0, #0
    c816:	db0f      	blt.n	c838 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c818:	4c09      	ldr	r4, [pc, #36]	; (c840 <usbdc_init+0x44>)
    c81a:	2220      	movs	r2, #32
    c81c:	2100      	movs	r1, #0
    c81e:	4620      	mov	r0, r4
    c820:	f011 ffdc 	bl	1e7dc <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c824:	4907      	ldr	r1, [pc, #28]	; (c844 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    c826:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c828:	2000      	movs	r0, #0
    c82a:	f000 fa51 	bl	ccd0 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c82e:	2001      	movs	r0, #1
    c830:	4905      	ldr	r1, [pc, #20]	; (c848 <usbdc_init+0x4c>)
    c832:	f000 fa4d 	bl	ccd0 <usb_d_register_callback>

	return 0;
    c836:	2000      	movs	r0, #0
}
    c838:	bd38      	pop	{r3, r4, r5, pc}
    c83a:	bf00      	nop
    c83c:	000233ec 	.word	0x000233ec
    c840:	20001c38 	.word	0x20001c38
    c844:	0000c279 	.word	0x0000c279
    c848:	0000c739 	.word	0x0000c739

0000c84c <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    c84c:	4601      	mov	r1, r0
    c84e:	4801      	ldr	r0, [pc, #4]	; (c854 <usbdc_register_function+0x8>)
    c850:	f000 bc2c 	b.w	d0ac <list_insert_at_end>
    c854:	20001c48 	.word	0x20001c48

0000c858 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c858:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c85a:	4b0a      	ldr	r3, [pc, #40]	; (c884 <usbdc_start+0x2c>)
    c85c:	7e9c      	ldrb	r4, [r3, #26]
    c85e:	b954      	cbnz	r4, c876 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    c860:	b160      	cbz	r0, c87c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c862:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    c864:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    c866:	79d2      	ldrb	r2, [r2, #7]
    c868:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c86a:	2201      	movs	r2, #1
    c86c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c86e:	f000 fa31 	bl	ccd4 <usb_d_enable>
	return ERR_NONE;
    c872:	4620      	mov	r0, r4
    c874:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    c876:	f06f 0003 	mvn.w	r0, #3
    c87a:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    c87c:	f06f 0008 	mvn.w	r0, #8
}
    c880:	bd10      	pop	{r4, pc}
    c882:	bf00      	nop
    c884:	20001c38 	.word	0x20001c38

0000c888 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    c888:	f000 ba26 	b.w	ccd8 <usb_d_attach>

0000c88c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    c88c:	4b01      	ldr	r3, [pc, #4]	; (c894 <usbdc_get_ctrl_buffer+0x8>)
}
    c88e:	6958      	ldr	r0, [r3, #20]
    c890:	4770      	bx	lr
    c892:	bf00      	nop
    c894:	20001c38 	.word	0x20001c38

0000c898 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    c898:	4b03      	ldr	r3, [pc, #12]	; (c8a8 <usbdc_get_state+0x10>)
    c89a:	7e98      	ldrb	r0, [r3, #26]
    c89c:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    c8a0:	bf18      	it	ne
    c8a2:	2010      	movne	r0, #16
    c8a4:	4770      	bx	lr
    c8a6:	bf00      	nop
    c8a8:	20001c38 	.word	0x20001c38

0000c8ac <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c8ac:	4288      	cmp	r0, r1
    c8ae:	d214      	bcs.n	c8da <usb_find_desc+0x2e>
    c8b0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c8b2:	2b01      	cmp	r3, #1
    c8b4:	d911      	bls.n	c8da <usb_find_desc+0x2e>
{
    c8b6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c8b8:	7844      	ldrb	r4, [r0, #1]
    c8ba:	4294      	cmp	r4, r2
    c8bc:	d106      	bne.n	c8cc <usb_find_desc+0x20>
    c8be:	e009      	b.n	c8d4 <usb_find_desc+0x28>
    c8c0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c8c2:	2b01      	cmp	r3, #1
    c8c4:	d905      	bls.n	c8d2 <usb_find_desc+0x26>
	return desc[1];
    c8c6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c8c8:	4294      	cmp	r4, r2
    c8ca:	d003      	beq.n	c8d4 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    c8cc:	4418      	add	r0, r3
	while (desc < eof) {
    c8ce:	4281      	cmp	r1, r0
    c8d0:	d8f6      	bhi.n	c8c0 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c8d2:	2000      	movs	r0, #0
}
    c8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    c8d8:	4770      	bx	lr
	return NULL;
    c8da:	2000      	movs	r0, #0
    c8dc:	4770      	bx	lr
    c8de:	bf00      	nop

0000c8e0 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c8e0:	4288      	cmp	r0, r1
    c8e2:	d213      	bcs.n	c90c <usb_find_ep_desc+0x2c>
    c8e4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c8e6:	2b01      	cmp	r3, #1
    c8e8:	d910      	bls.n	c90c <usb_find_ep_desc+0x2c>
	return desc[1];
    c8ea:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c8ec:	2a04      	cmp	r2, #4
    c8ee:	d00d      	beq.n	c90c <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c8f0:	2a05      	cmp	r2, #5
    c8f2:	d108      	bne.n	c906 <usb_find_ep_desc+0x26>
    c8f4:	e00c      	b.n	c910 <usb_find_ep_desc+0x30>
    c8f6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c8f8:	2b01      	cmp	r3, #1
    c8fa:	d907      	bls.n	c90c <usb_find_ep_desc+0x2c>
    c8fc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c8fe:	2a04      	cmp	r2, #4
    c900:	d004      	beq.n	c90c <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c902:	2a05      	cmp	r2, #5
    c904:	d003      	beq.n	c90e <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    c906:	4418      	add	r0, r3
	while (desc < eof) {
    c908:	4281      	cmp	r1, r0
    c90a:	d8f4      	bhi.n	c8f6 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    c90c:	2000      	movs	r0, #0
}
    c90e:	4770      	bx	lr
    c910:	4770      	bx	lr
    c912:	bf00      	nop

0000c914 <usb_find_cfg_desc>:
	while (desc < eof) {
    c914:	4288      	cmp	r0, r1
    c916:	d226      	bcs.n	c966 <usb_find_cfg_desc+0x52>
    c918:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c91a:	2b01      	cmp	r3, #1
    c91c:	d923      	bls.n	c966 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c91e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    c920:	7844      	ldrb	r4, [r0, #1]
    c922:	2c02      	cmp	r4, #2
    c924:	d106      	bne.n	c934 <usb_find_cfg_desc+0x20>
    c926:	e012      	b.n	c94e <usb_find_cfg_desc+0x3a>
    c928:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c92a:	2b01      	cmp	r3, #1
    c92c:	d905      	bls.n	c93a <usb_find_cfg_desc+0x26>
	return desc[1];
    c92e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c930:	2c02      	cmp	r4, #2
    c932:	d00c      	beq.n	c94e <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    c934:	4418      	add	r0, r3
	while (desc < eof) {
    c936:	4281      	cmp	r1, r0
    c938:	d8f6      	bhi.n	c928 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    c93a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    c93c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c940:	4770      	bx	lr
		_desc_len_check();
    c942:	7803      	ldrb	r3, [r0, #0]
    c944:	2b01      	cmp	r3, #1
    c946:	d9f8      	bls.n	c93a <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    c948:	7843      	ldrb	r3, [r0, #1]
    c94a:	2b02      	cmp	r3, #2
    c94c:	d1f5      	bne.n	c93a <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    c94e:	7943      	ldrb	r3, [r0, #5]
    c950:	4293      	cmp	r3, r2
    c952:	d0f3      	beq.n	c93c <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    c954:	78c4      	ldrb	r4, [r0, #3]
    c956:	7883      	ldrb	r3, [r0, #2]
    c958:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c95c:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    c960:	4281      	cmp	r1, r0
    c962:	d8ee      	bhi.n	c942 <usb_find_cfg_desc+0x2e>
    c964:	e7e9      	b.n	c93a <usb_find_cfg_desc+0x26>
		return NULL;
    c966:	2000      	movs	r0, #0
    c968:	4770      	bx	lr
    c96a:	bf00      	nop

0000c96c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c96c:	4288      	cmp	r0, r1
    c96e:	d216      	bcs.n	c99e <usb_find_str_desc+0x32>
{
    c970:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    c972:	2500      	movs	r5, #0
    c974:	e005      	b.n	c982 <usb_find_str_desc+0x16>
	return desc[1];
    c976:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    c978:	2c03      	cmp	r4, #3
    c97a:	d008      	beq.n	c98e <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    c97c:	4418      	add	r0, r3
	while (desc < eof) {
    c97e:	4281      	cmp	r1, r0
    c980:	d902      	bls.n	c988 <usb_find_str_desc+0x1c>
    c982:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    c984:	2b01      	cmp	r3, #1
    c986:	d8f6      	bhi.n	c976 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    c988:	2000      	movs	r0, #0
}
    c98a:	bc30      	pop	{r4, r5}
    c98c:	4770      	bx	lr
			if (i == str_index) {
    c98e:	4295      	cmp	r5, r2
    c990:	d0fb      	beq.n	c98a <usb_find_str_desc+0x1e>
    c992:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    c994:	4281      	cmp	r1, r0
    c996:	f105 0501 	add.w	r5, r5, #1
    c99a:	d8f2      	bhi.n	c982 <usb_find_str_desc+0x16>
    c99c:	e7f4      	b.n	c988 <usb_find_str_desc+0x1c>
	return NULL;
    c99e:	2000      	movs	r0, #0
    c9a0:	4770      	bx	lr
    c9a2:	bf00      	nop

0000c9a4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    c9a4:	2000      	movs	r0, #0
    c9a6:	4770      	bx	lr

0000c9a8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    c9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9aa:	4f0f      	ldr	r7, [pc, #60]	; (c9e8 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c9ac:	f000 0e0f 	and.w	lr, r0, #15
    c9b0:	463a      	mov	r2, r7
{
    c9b2:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    c9b4:	7854      	ldrb	r4, [r2, #1]
    c9b6:	42a0      	cmp	r0, r4
    c9b8:	461e      	mov	r6, r3
    c9ba:	f103 0301 	add.w	r3, r3, #1
    c9be:	d008      	beq.n	c9d2 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    c9c0:	7815      	ldrb	r5, [r2, #0]
    c9c2:	3220      	adds	r2, #32
    c9c4:	b90d      	cbnz	r5, c9ca <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c9c6:	4574      	cmp	r4, lr
    c9c8:	d003      	beq.n	c9d2 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    c9ca:	2b0d      	cmp	r3, #13
    c9cc:	d1f2      	bne.n	c9b4 <usb_d_cb_trans_more+0xc>
    c9ce:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    c9d2:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    c9d6:	78b3      	ldrb	r3, [r6, #2]
    c9d8:	2b03      	cmp	r3, #3
    c9da:	d001      	beq.n	c9e0 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    c9dc:	2000      	movs	r0, #0
    c9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    c9e0:	69b3      	ldr	r3, [r6, #24]
}
    c9e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    c9e6:	4718      	bx	r3
    c9e8:	20001c58 	.word	0x20001c58

0000c9ec <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    c9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c9f0:	f8df 9130 	ldr.w	r9, [pc, #304]	; cb24 <_usb_d_cb_trans_done+0x138>
    c9f4:	4607      	mov	r7, r0
    c9f6:	4688      	mov	r8, r1
    c9f8:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    c9fa:	f000 010f 	and.w	r1, r0, #15
{
    c9fe:	2300      	movs	r3, #0
    ca00:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ca02:	7844      	ldrb	r4, [r0, #1]
    ca04:	42a7      	cmp	r7, r4
    ca06:	461e      	mov	r6, r3
    ca08:	f103 0301 	add.w	r3, r3, #1
    ca0c:	d008      	beq.n	ca20 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ca0e:	7805      	ldrb	r5, [r0, #0]
    ca10:	3020      	adds	r0, #32
    ca12:	b90d      	cbnz	r5, ca18 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ca14:	428c      	cmp	r4, r1
    ca16:	d003      	beq.n	ca20 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ca18:	2b0d      	cmp	r3, #13
    ca1a:	d1f2      	bne.n	ca02 <_usb_d_cb_trans_done+0x16>
    ca1c:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    ca20:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    ca22:	f1b8 0f00 	cmp.w	r8, #0
    ca26:	d110      	bne.n	ca4a <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    ca28:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    ca2c:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    ca30:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    ca34:	b32b      	cbz	r3, ca82 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    ca36:	2301      	movs	r3, #1
    ca38:	4641      	mov	r1, r8
    ca3a:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    ca3c:	444e      	add	r6, r9
    ca3e:	4638      	mov	r0, r7
    ca40:	69f3      	ldr	r3, [r6, #28]
    ca42:	4798      	blx	r3
}
    ca44:	b007      	add	sp, #28
    ca46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    ca4a:	f1b8 0f01 	cmp.w	r8, #1
    ca4e:	d00b      	beq.n	ca68 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    ca50:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    ca54:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    ca58:	d025      	beq.n	caa6 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    ca5a:	f1b8 0f03 	cmp.w	r8, #3
    ca5e:	d01d      	beq.n	ca9c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    ca60:	2106      	movs	r1, #6
    ca62:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    ca64:	70d9      	strb	r1, [r3, #3]
    ca66:	e7e9      	b.n	ca3c <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    ca68:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    ca6c:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    ca70:	f04f 0802 	mov.w	r8, #2
    ca74:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    ca78:	b1e9      	cbz	r1, cab6 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    ca7a:	2305      	movs	r3, #5
    ca7c:	4641      	mov	r1, r8
    ca7e:	70a3      	strb	r3, [r4, #2]
    ca80:	e7dc      	b.n	ca3c <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    ca82:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    ca84:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    ca86:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    ca88:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    ca8c:	d01f      	beq.n	cace <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    ca8e:	69e3      	ldr	r3, [r4, #28]
    ca90:	7860      	ldrb	r0, [r4, #1]
    ca92:	4641      	mov	r1, r8
    ca94:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    ca96:	2302      	movs	r3, #2
    ca98:	70a3      	strb	r3, [r4, #2]
    ca9a:	e7d3      	b.n	ca44 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    ca9c:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    ca9e:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    caa0:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    caa2:	70d9      	strb	r1, [r3, #3]
    caa4:	e7ca      	b.n	ca3c <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    caa6:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    caaa:	2104      	movs	r1, #4
    caac:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    caae:	b158      	cbz	r0, cac8 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    cab0:	2001      	movs	r0, #1
    cab2:	7098      	strb	r0, [r3, #2]
    cab4:	e7c2      	b.n	ca3c <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cab6:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cab8:	f884 8002 	strb.w	r8, [r4, #2]
    cabc:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cabe:	f006 fa5b 	bl	12f78 <_usb_d_dev_ep_stall>
    cac2:	78e1      	ldrb	r1, [r4, #3]
    cac4:	9a01      	ldr	r2, [sp, #4]
    cac6:	e7b9      	b.n	ca3c <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cac8:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    cacc:	e7ba      	b.n	ca44 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cace:	69e3      	ldr	r3, [r4, #28]
    cad0:	7860      	ldrb	r0, [r4, #1]
    cad2:	f994 500c 	ldrsb.w	r5, [r4, #12]
    cad6:	2101      	movs	r1, #1
    cad8:	4798      	blx	r3
		if (err) {
    cada:	b160      	cbz	r0, caf6 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cadc:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cade:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    cae0:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cae2:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cae4:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    cae6:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cae8:	bfa8      	it	ge
    caea:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    caee:	2101      	movs	r1, #1
    caf0:	f006 fa42 	bl	12f78 <_usb_d_dev_ep_stall>
    caf4:	e7a6      	b.n	ca44 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    caf6:	2304      	movs	r3, #4
    caf8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    cafa:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    cafc:	f8cd 800c 	str.w	r8, [sp, #12]
    cb00:	2d00      	cmp	r5, #0
    cb02:	bfac      	ite	ge
    cb04:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    cb08:	f003 030f 	andlt.w	r3, r3, #15
    cb0c:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    cb0e:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cb10:	f8cd 8010 	str.w	r8, [sp, #16]
    cb14:	f88d 3014 	strb.w	r3, [sp, #20]
    cb18:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cb1c:	f006 fae8 	bl	130f0 <_usb_d_dev_ep_trans>
    cb20:	e790      	b.n	ca44 <_usb_d_cb_trans_done+0x58>
    cb22:	bf00      	nop
    cb24:	20001c58 	.word	0x20001c58

0000cb28 <usb_d_cb_trans_setup>:
{
    cb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb2c:	4f26      	ldr	r7, [pc, #152]	; (cbc8 <usb_d_cb_trans_setup+0xa0>)
    cb2e:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb30:	f000 060f 	and.w	r6, r0, #15
    cb34:	463a      	mov	r2, r7
{
    cb36:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb38:	7851      	ldrb	r1, [r2, #1]
    cb3a:	428c      	cmp	r4, r1
    cb3c:	461d      	mov	r5, r3
    cb3e:	f103 0301 	add.w	r3, r3, #1
    cb42:	d032      	beq.n	cbaa <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cb44:	7810      	ldrb	r0, [r2, #0]
    cb46:	3220      	adds	r2, #32
    cb48:	b908      	cbnz	r0, cb4e <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb4a:	42b1      	cmp	r1, r6
    cb4c:	d02d      	beq.n	cbaa <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cb4e:	2b0d      	cmp	r3, #13
    cb50:	d1f2      	bne.n	cb38 <usb_d_cb_trans_setup+0x10>
    cb52:	f06f 0613 	mvn.w	r6, #19
    cb56:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    cb5a:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    cb5c:	4631      	mov	r1, r6
    cb5e:	4620      	mov	r0, r4
    cb60:	f006 fa9c 	bl	1309c <_usb_d_dev_ep_read_req>
	if (n != 8) {
    cb64:	b2c0      	uxtb	r0, r0
    cb66:	2808      	cmp	r0, #8
    cb68:	d00a      	beq.n	cb80 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cb6a:	2101      	movs	r1, #1
    cb6c:	4620      	mov	r0, r4
    cb6e:	f006 fa03 	bl	12f78 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cb72:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    cb76:	2101      	movs	r1, #1
}
    cb78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cb7c:	f006 b9fc 	b.w	12f78 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cb80:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cb84:	2100      	movs	r1, #0
    cb86:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    cb88:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cb8c:	f006 f9f4 	bl	12f78 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cb90:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    cb92:	2100      	movs	r1, #0
    cb94:	4640      	mov	r0, r8
    cb96:	f006 f9ef 	bl	12f78 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    cb9a:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cb9c:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    cb9e:	696b      	ldr	r3, [r5, #20]
    cba0:	4620      	mov	r0, r4
    cba2:	4798      	blx	r3
    cba4:	b120      	cbz	r0, cbb0 <usb_d_cb_trans_setup+0x88>
    cba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbaa:	016e      	lsls	r6, r5, #5
    cbac:	360c      	adds	r6, #12
    cbae:	e7d4      	b.n	cb5a <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    cbb0:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cbb2:	4639      	mov	r1, r7
    cbb4:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    cbb6:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cbb8:	f006 f9de 	bl	12f78 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cbbc:	4639      	mov	r1, r7
    cbbe:	4640      	mov	r0, r8
}
    cbc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cbc4:	f006 b9d8 	b.w	12f78 <_usb_d_dev_ep_stall>
    cbc8:	20001c58 	.word	0x20001c58

0000cbcc <usb_d_init>:

int32_t usb_d_init(void)
{
    cbcc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    cbce:	f005 fecf 	bl	12970 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    cbd2:	2800      	cmp	r0, #0
    cbd4:	db70      	blt.n	ccb8 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    cbd6:	4c39      	ldr	r4, [pc, #228]	; (ccbc <usb_d_init+0xf0>)
    cbd8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    cbdc:	2100      	movs	r1, #0
    cbde:	4620      	mov	r0, r4
    cbe0:	f011 fdfc 	bl	1e7dc <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cbe4:	4b36      	ldr	r3, [pc, #216]	; (ccc0 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cbe6:	4937      	ldr	r1, [pc, #220]	; (ccc4 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cbe8:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    cbea:	22ff      	movs	r2, #255	; 0xff
    cbec:	7062      	strb	r2, [r4, #1]
    cbee:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    cbf2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    cbf6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    cbfa:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    cbfe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    cc02:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    cc06:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cc0a:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc0c:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc0e:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc10:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc12:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc14:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc16:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc18:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc1a:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc1c:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc1e:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc20:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc22:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc26:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc2a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc2e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc32:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc36:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc3a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc3e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc42:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc46:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc4a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc4e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    cc52:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    cc56:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    cc5a:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    cc5e:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    cc62:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc66:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc6a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc6e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc72:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc76:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc7a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc7e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc82:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc86:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc8a:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc8e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc92:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cc96:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cc9a:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cc9e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cca2:	f006 fb5d 	bl	13360 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    cca6:	4908      	ldr	r1, [pc, #32]	; (ccc8 <usb_d_init+0xfc>)
    cca8:	2001      	movs	r0, #1
    ccaa:	f006 fb59 	bl	13360 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    ccae:	2002      	movs	r0, #2
    ccb0:	4906      	ldr	r1, [pc, #24]	; (cccc <usb_d_init+0x100>)
    ccb2:	f006 fb55 	bl	13360 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    ccb6:	2000      	movs	r0, #0
}
    ccb8:	bd10      	pop	{r4, pc}
    ccba:	bf00      	nop
    ccbc:	20001c58 	.word	0x20001c58
    ccc0:	0000c9a5 	.word	0x0000c9a5
    ccc4:	0000cb29 	.word	0x0000cb29
    ccc8:	0000c9a9 	.word	0x0000c9a9
    cccc:	0000c9ed 	.word	0x0000c9ed

0000ccd0 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    ccd0:	f006 bb34 	b.w	1333c <_usb_d_dev_register_callback>

0000ccd4 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    ccd4:	f005 beec 	b.w	12ab0 <_usb_d_dev_enable>

0000ccd8 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    ccd8:	f005 bf1a 	b.w	12b10 <_usb_d_dev_attach>

0000ccdc <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    ccdc:	f005 bf22 	b.w	12b24 <_usb_d_dev_set_address>

0000cce0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    cce0:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cce2:	4e25      	ldr	r6, [pc, #148]	; (cd78 <usb_d_ep0_init+0x98>)
    cce4:	7873      	ldrb	r3, [r6, #1]
    cce6:	2b00      	cmp	r3, #0
    cce8:	d043      	beq.n	cd72 <usb_d_ep0_init+0x92>
    ccea:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d03f      	beq.n	cd72 <usb_d_ep0_init+0x92>
    ccf2:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d03b      	beq.n	cd72 <usb_d_ep0_init+0x92>
    ccfa:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    ccfe:	b3c3      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd00:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    cd04:	b3ab      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd06:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    cd0a:	b393      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd0c:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    cd10:	b37b      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd12:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    cd16:	b363      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd18:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    cd1c:	b34b      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd1e:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    cd22:	b333      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd24:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    cd28:	b31b      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd2a:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    cd2e:	b303      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd30:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    cd34:	b1eb      	cbz	r3, cd72 <usb_d_ep0_init+0x92>
    cd36:	4633      	mov	r3, r6
    cd38:	2400      	movs	r4, #0
    cd3a:	7859      	ldrb	r1, [r3, #1]
    cd3c:	29ff      	cmp	r1, #255	; 0xff
    cd3e:	d00a      	beq.n	cd56 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cd40:	781d      	ldrb	r5, [r3, #0]
    cd42:	3320      	adds	r3, #32
    cd44:	b90d      	cbnz	r5, cd4a <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cd46:	290f      	cmp	r1, #15
    cd48:	d005      	beq.n	cd56 <usb_d_ep0_init+0x76>
    cd4a:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cd4c:	2c0d      	cmp	r4, #13
    cd4e:	d1f4      	bne.n	cd3a <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    cd50:	f06f 0014 	mvn.w	r0, #20
    cd54:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    cd56:	2100      	movs	r1, #0
    cd58:	4602      	mov	r2, r0
    cd5a:	4608      	mov	r0, r1
    cd5c:	f005 fee8 	bl	12b30 <_usb_d_dev_ep_init>
	if (rc < 0) {
    cd60:	2800      	cmp	r0, #0
    cd62:	db05      	blt.n	cd70 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    cd64:	0164      	lsls	r4, r4, #5
    cd66:	1933      	adds	r3, r6, r4
    cd68:	2000      	movs	r0, #0
    cd6a:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cd6c:	5530      	strb	r0, [r6, r4]
    cd6e:	bd70      	pop	{r4, r5, r6, pc}
}
    cd70:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    cd72:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    cd76:	bd70      	pop	{r4, r5, r6, pc}
    cd78:	20001c58 	.word	0x20001c58

0000cd7c <usb_d_ep_init>:
{
    cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd7e:	4c19      	ldr	r4, [pc, #100]	; (cde4 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cd80:	f000 0c0f 	and.w	ip, r0, #15
    cd84:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    cd88:	4627      	mov	r7, r4
    cd8a:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cd8c:	785d      	ldrb	r5, [r3, #1]
    cd8e:	42a8      	cmp	r0, r5
    cd90:	d024      	beq.n	cddc <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cd92:	781e      	ldrb	r6, [r3, #0]
    cd94:	3320      	adds	r3, #32
    cd96:	b90e      	cbnz	r6, cd9c <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cd98:	4565      	cmp	r5, ip
    cd9a:	d01f      	beq.n	cddc <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cd9c:	459e      	cmp	lr, r3
    cd9e:	d1f5      	bne.n	cd8c <usb_d_ep_init+0x10>
    cda0:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cda2:	7863      	ldrb	r3, [r4, #1]
    cda4:	2bff      	cmp	r3, #255	; 0xff
    cda6:	d00a      	beq.n	cdbe <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cda8:	7826      	ldrb	r6, [r4, #0]
    cdaa:	3420      	adds	r4, #32
    cdac:	b90e      	cbnz	r6, cdb2 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cdae:	2b0f      	cmp	r3, #15
    cdb0:	d005      	beq.n	cdbe <usb_d_ep_init+0x42>
    cdb2:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cdb4:	2d0d      	cmp	r5, #13
    cdb6:	d1f4      	bne.n	cda2 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    cdb8:	f06f 0014 	mvn.w	r0, #20
    cdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdbe:	460e      	mov	r6, r1
    cdc0:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    cdc2:	f005 feb5 	bl	12b30 <_usb_d_dev_ep_init>
	if (rc < 0) {
    cdc6:	2800      	cmp	r0, #0
    cdc8:	db07      	blt.n	cdda <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    cdca:	016d      	lsls	r5, r5, #5
    cdcc:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cdce:	f006 0603 	and.w	r6, r6, #3
    cdd2:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    cdd4:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    cdd6:	2000      	movs	r0, #0
    cdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    cdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    cddc:	f06f 0013 	mvn.w	r0, #19
    cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cde2:	bf00      	nop
    cde4:	20001c58 	.word	0x20001c58

0000cde8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    cde8:	b570      	push	{r4, r5, r6, lr}
    cdea:	4e0c      	ldr	r6, [pc, #48]	; (ce1c <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cdec:	f000 050f 	and.w	r5, r0, #15
    cdf0:	4633      	mov	r3, r6
{
    cdf2:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cdf4:	785a      	ldrb	r2, [r3, #1]
    cdf6:	4290      	cmp	r0, r2
    cdf8:	d008      	beq.n	ce0c <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cdfa:	7819      	ldrb	r1, [r3, #0]
    cdfc:	3320      	adds	r3, #32
    cdfe:	b909      	cbnz	r1, ce04 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce00:	42aa      	cmp	r2, r5
    ce02:	d003      	beq.n	ce0c <usb_d_ep_deinit+0x24>
    ce04:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce06:	2c0d      	cmp	r4, #13
    ce08:	d1f4      	bne.n	cdf4 <usb_d_ep_deinit+0xc>
    ce0a:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    ce0c:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    ce10:	f005 ff00 	bl	12c14 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    ce14:	23ff      	movs	r3, #255	; 0xff
    ce16:	7063      	strb	r3, [r4, #1]
    ce18:	bd70      	pop	{r4, r5, r6, pc}
    ce1a:	bf00      	nop
    ce1c:	20001c58 	.word	0x20001c58

0000ce20 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    ce20:	b570      	push	{r4, r5, r6, lr}
    ce22:	4d13      	ldr	r5, [pc, #76]	; (ce70 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce24:	f000 060f 	and.w	r6, r0, #15
    ce28:	462b      	mov	r3, r5
{
    ce2a:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce2c:	7859      	ldrb	r1, [r3, #1]
    ce2e:	4288      	cmp	r0, r1
    ce30:	d00a      	beq.n	ce48 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ce32:	781c      	ldrb	r4, [r3, #0]
    ce34:	3320      	adds	r3, #32
    ce36:	b90c      	cbnz	r4, ce3c <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce38:	42b1      	cmp	r1, r6
    ce3a:	d015      	beq.n	ce68 <usb_d_ep_enable+0x48>
    ce3c:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce3e:	2a0d      	cmp	r2, #13
    ce40:	d1f4      	bne.n	ce2c <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    ce42:	f06f 0011 	mvn.w	r0, #17
    ce46:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    ce48:	0152      	lsls	r2, r2, #5
    ce4a:	5cab      	ldrb	r3, [r5, r2]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	bf14      	ite	ne
    ce50:	2301      	movne	r3, #1
    ce52:	2302      	moveq	r3, #2
    ce54:	4415      	add	r5, r2
    ce56:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    ce58:	f005 ff6e 	bl	12d38 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    ce5c:	2800      	cmp	r0, #0
    ce5e:	db00      	blt.n	ce62 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    ce60:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    ce62:	2300      	movs	r3, #0
    ce64:	70ab      	strb	r3, [r5, #2]
    ce66:	bd70      	pop	{r4, r5, r6, pc}
    ce68:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    ce6a:	2302      	movs	r3, #2
    ce6c:	e7f2      	b.n	ce54 <usb_d_ep_enable+0x34>
    ce6e:	bf00      	nop
    ce70:	20001c58 	.word	0x20001c58

0000ce74 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce78:	f8df 811c 	ldr.w	r8, [pc, #284]	; cf98 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    ce7c:	7a05      	ldrb	r5, [r0, #8]
{
    ce7e:	b087      	sub	sp, #28
    ce80:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce82:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    ce86:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce88:	7859      	ldrb	r1, [r3, #1]
    ce8a:	428d      	cmp	r5, r1
    ce8c:	d00c      	beq.n	cea8 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ce8e:	781c      	ldrb	r4, [r3, #0]
    ce90:	3320      	adds	r3, #32
    ce92:	b90c      	cbnz	r4, ce98 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ce94:	42b9      	cmp	r1, r7
    ce96:	d007      	beq.n	cea8 <usb_d_ep_transfer+0x34>
    ce98:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ce9a:	2a0d      	cmp	r2, #13
    ce9c:	d1f4      	bne.n	ce88 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    ce9e:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    cea2:	b007      	add	sp, #28
    cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    cea8:	0154      	lsls	r4, r2, #5
    ceaa:	4606      	mov	r6, r0
    ceac:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    ceb0:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    ceb2:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    ceb6:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    ceba:	f006 fa6f 	bl	1339c <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    cebe:	f89b 3002 	ldrb.w	r3, [fp, #2]
    cec2:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    cec6:	f89d 7007 	ldrb.w	r7, [sp, #7]
    ceca:	b2ff      	uxtb	r7, r7
    cecc:	2f01      	cmp	r7, #1
    cece:	d011      	beq.n	cef4 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    ced0:	a802      	add	r0, sp, #8
    ced2:	f006 fa6b 	bl	133ac <atomic_leave_critical>
		switch (state) {
    ced6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ceda:	b2db      	uxtb	r3, r3
    cedc:	2b05      	cmp	r3, #5
    cede:	d040      	beq.n	cf62 <usb_d_ep_transfer+0xee>
    cee0:	2b06      	cmp	r3, #6
    cee2:	d022      	beq.n	cf2a <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    cee4:	2b00      	cmp	r3, #0
    cee6:	bf0c      	ite	eq
    cee8:	f06f 0012 	mvneq.w	r0, #18
    ceec:	2001      	movne	r0, #1
}
    ceee:	b007      	add	sp, #28
    cef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cef4:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    cef6:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    cef8:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    cefc:	f006 fa56 	bl	133ac <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cf00:	f818 2004 	ldrb.w	r2, [r8, r4]
    cf04:	b9b2      	cbnz	r2, cf34 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    cf06:	f89b 1013 	ldrb.w	r1, [fp, #19]
    cf0a:	f89b 3012 	ldrb.w	r3, [fp, #18]
    cf0e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    cf12:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    cf14:	bb4b      	cbnz	r3, cf6a <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cf16:	2204      	movs	r2, #4
    cf18:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    cf1c:	9304      	str	r3, [sp, #16]
    cf1e:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cf20:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cf22:	9203      	str	r2, [sp, #12]
    cf24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cf28:	e011      	b.n	cf4e <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    cf2a:	f06f 000f 	mvn.w	r0, #15
}
    cf2e:	b007      	add	sp, #28
    cf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cf34:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    cf38:	6833      	ldr	r3, [r6, #0]
    cf3a:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cf3c:	bf18      	it	ne
    cf3e:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    cf40:	062a      	lsls	r2, r5, #24
    cf42:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cf46:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    cf48:	d4ec      	bmi.n	cf24 <usb_d_ep_transfer+0xb0>
    cf4a:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    cf4e:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cf50:	f88d 3014 	strb.w	r3, [sp, #20]
    cf54:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    cf58:	f006 f8ca 	bl	130f0 <_usb_d_dev_ep_trans>
}
    cf5c:	b007      	add	sp, #28
    cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    cf62:	2002      	movs	r0, #2
}
    cf64:	b007      	add	sp, #28
    cf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    cf6a:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    cf6e:	4599      	cmp	r9, r3
    cf70:	464f      	mov	r7, r9
    cf72:	bf28      	it	cs
    cf74:	461f      	movcs	r7, r3
    cf76:	2900      	cmp	r1, #0
    cf78:	db05      	blt.n	cf86 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    cf7a:	6833      	ldr	r3, [r6, #0]
    cf7c:	9704      	str	r7, [sp, #16]
    cf7e:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cf80:	4617      	mov	r7, r2
    cf82:	7a33      	ldrb	r3, [r6, #8]
    cf84:	e7e1      	b.n	cf4a <usb_d_ep_transfer+0xd6>
    cf86:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    cf88:	6832      	ldr	r2, [r6, #0]
    cf8a:	9704      	str	r7, [sp, #16]
    cf8c:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    cf8e:	bf94      	ite	ls
    cf90:	2700      	movls	r7, #0
    cf92:	2701      	movhi	r7, #1
    cf94:	7a33      	ldrb	r3, [r6, #8]
    cf96:	e7c5      	b.n	cf24 <usb_d_ep_transfer+0xb0>
    cf98:	20001c58 	.word	0x20001c58

0000cf9c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    cf9c:	b570      	push	{r4, r5, r6, lr}
    cf9e:	4e0d      	ldr	r6, [pc, #52]	; (cfd4 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cfa0:	f000 050f 	and.w	r5, r0, #15
    cfa4:	4633      	mov	r3, r6
{
    cfa6:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cfa8:	785a      	ldrb	r2, [r3, #1]
    cfaa:	4290      	cmp	r0, r2
    cfac:	d008      	beq.n	cfc0 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cfae:	7819      	ldrb	r1, [r3, #0]
    cfb0:	3320      	adds	r3, #32
    cfb2:	b909      	cbnz	r1, cfb8 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cfb4:	42aa      	cmp	r2, r5
    cfb6:	d003      	beq.n	cfc0 <usb_d_ep_abort+0x24>
    cfb8:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cfba:	2c0d      	cmp	r4, #13
    cfbc:	d1f4      	bne.n	cfa8 <usb_d_ep_abort+0xc>
    cfbe:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cfc0:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    cfc4:	f006 f962 	bl	1328c <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cfc8:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    cfca:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    cfcc:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    cfce:	70e3      	strb	r3, [r4, #3]
    cfd0:	bd70      	pop	{r4, r5, r6, pc}
    cfd2:	bf00      	nop
    cfd4:	20001c58 	.word	0x20001c58

0000cfd8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    cfd8:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    cfda:	460c      	mov	r4, r1
    cfdc:	b131      	cbz	r1, cfec <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    cfde:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cfe0:	bf18      	it	ne
    cfe2:	2102      	movne	r1, #2
	}
}
    cfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    cfe8:	f005 bfc6 	b.w	12f78 <_usb_d_dev_ep_stall>
    cfec:	4e15      	ldr	r6, [pc, #84]	; (d044 <usb_d_ep_halt+0x6c>)
    cfee:	4605      	mov	r5, r0
    cff0:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cff2:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cff6:	785a      	ldrb	r2, [r3, #1]
    cff8:	4295      	cmp	r5, r2
    cffa:	d00a      	beq.n	d012 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cffc:	7819      	ldrb	r1, [r3, #0]
    cffe:	3320      	adds	r3, #32
    d000:	b909      	cbnz	r1, d006 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d002:	4282      	cmp	r2, r0
    d004:	d005      	beq.n	d012 <usb_d_ep_halt+0x3a>
    d006:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d008:	2c0d      	cmp	r4, #13
    d00a:	d1f4      	bne.n	cff6 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    d00c:	f06f 0011 	mvn.w	r0, #17
    d010:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    d012:	2102      	movs	r1, #2
    d014:	4628      	mov	r0, r5
    d016:	f005 ffaf 	bl	12f78 <_usb_d_dev_ep_stall>
    d01a:	b900      	cbnz	r0, d01e <usb_d_ep_halt+0x46>
}
    d01c:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d01e:	2100      	movs	r1, #0
    d020:	4628      	mov	r0, r5
    d022:	f005 ffa9 	bl	12f78 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    d026:	2800      	cmp	r0, #0
    d028:	dbf8      	blt.n	d01c <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d02a:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d02e:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d030:	2301      	movs	r3, #1
    d032:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d034:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d036:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d038:	69e3      	ldr	r3, [r4, #28]
    d03a:	2200      	movs	r2, #0
    d03c:	4798      	blx	r3
	return ERR_NONE;
    d03e:	2000      	movs	r0, #0
    d040:	bd70      	pop	{r4, r5, r6, pc}
    d042:	bf00      	nop
    d044:	20001c58 	.word	0x20001c58

0000d048 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    d048:	b5f0      	push	{r4, r5, r6, r7, lr}
    d04a:	f8df e054 	ldr.w	lr, [pc, #84]	; d0a0 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d04e:	f000 070f 	and.w	r7, r0, #15
    d052:	4673      	mov	r3, lr
{
    d054:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d056:	785d      	ldrb	r5, [r3, #1]
    d058:	42a8      	cmp	r0, r5
    d05a:	d008      	beq.n	d06e <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d05c:	781e      	ldrb	r6, [r3, #0]
    d05e:	3320      	adds	r3, #32
    d060:	b90e      	cbnz	r6, d066 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d062:	42bd      	cmp	r5, r7
    d064:	d003      	beq.n	d06e <usb_d_ep_register_callback+0x26>
    d066:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d068:	2c0d      	cmp	r4, #13
    d06a:	d1f4      	bne.n	d056 <usb_d_ep_register_callback+0xe>
    d06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    d06e:	4b0b      	ldr	r3, [pc, #44]	; (d09c <usb_d_ep_register_callback+0x54>)
    d070:	2a00      	cmp	r2, #0
    d072:	bf08      	it	eq
    d074:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    d076:	2901      	cmp	r1, #1
    d078:	d003      	beq.n	d082 <usb_d_ep_register_callback+0x3a>
    d07a:	d30a      	bcc.n	d092 <usb_d_ep_register_callback+0x4a>
    d07c:	2902      	cmp	r1, #2
    d07e:	d004      	beq.n	d08a <usb_d_ep_register_callback+0x42>
    d080:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    d082:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d086:	61a2      	str	r2, [r4, #24]
		break;
    d088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    d08a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d08e:	61e2      	str	r2, [r4, #28]
    d090:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    d092:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d096:	6162      	str	r2, [r4, #20]
		break;
    d098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d09a:	bf00      	nop
    d09c:	0000c9a5 	.word	0x0000c9a5
    d0a0:	20001c58 	.word	0x20001c58

0000d0a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    d0a4:	b900      	cbnz	r0, d0a8 <assert+0x4>
		__asm("BKPT #0");
    d0a6:	be00      	bkpt	0x0000
    d0a8:	4770      	bx	lr
    d0aa:	bf00      	nop

0000d0ac <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    d0ac:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    d0ae:	6804      	ldr	r4, [r0, #0]
{
    d0b0:	4606      	mov	r6, r0
    d0b2:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    d0b4:	b144      	cbz	r4, d0c8 <list_insert_at_end+0x1c>
		if (it == element) {
    d0b6:	428c      	cmp	r4, r1
    d0b8:	d015      	beq.n	d0e6 <list_insert_at_end+0x3a>
    d0ba:	4623      	mov	r3, r4
    d0bc:	e001      	b.n	d0c2 <list_insert_at_end+0x16>
    d0be:	429d      	cmp	r5, r3
    d0c0:	d011      	beq.n	d0e6 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    d0c2:	681b      	ldr	r3, [r3, #0]
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	d1fa      	bne.n	d0be <list_insert_at_end+0x12>
    d0c8:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    d0ca:	224f      	movs	r2, #79	; 0x4f
    d0cc:	4908      	ldr	r1, [pc, #32]	; (d0f0 <list_insert_at_end+0x44>)
    d0ce:	f7ff ffe9 	bl	d0a4 <assert>

	if (!list->head) {
    d0d2:	6833      	ldr	r3, [r6, #0]
    d0d4:	b90b      	cbnz	r3, d0da <list_insert_at_end+0x2e>
    d0d6:	e008      	b.n	d0ea <list_insert_at_end+0x3e>
    d0d8:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    d0da:	6823      	ldr	r3, [r4, #0]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d1fb      	bne.n	d0d8 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    d0e0:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    d0e2:	602b      	str	r3, [r5, #0]
    d0e4:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    d0e6:	2000      	movs	r0, #0
    d0e8:	e7ef      	b.n	d0ca <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    d0ea:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    d0ec:	602b      	str	r3, [r5, #0]
		return;
    d0ee:	bd70      	pop	{r4, r5, r6, pc}
    d0f0:	00023404 	.word	0x00023404

0000d0f4 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    d0f6:	4d1f      	ldr	r5, [pc, #124]	; (d174 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    d0f8:	682c      	ldr	r4, [r5, #0]
    d0fa:	f014 0401 	ands.w	r4, r4, #1
    d0fe:	d002      	beq.n	d106 <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    d100:	4b1d      	ldr	r3, [pc, #116]	; (d178 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    d102:	6818      	ldr	r0, [r3, #0]
    d104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d106:	2074      	movs	r0, #116	; 0x74
    d108:	f006 faca 	bl	136a0 <_Znwj>
    d10c:	4e1a      	ldr	r6, [pc, #104]	; (d178 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    d10e:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    d110:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    d112:	210c      	movs	r1, #12
    d114:	f04f 30ff 	mov.w	r0, #4294967295
    d118:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    d11a:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    d11c:	605c      	str	r4, [r3, #4]
    d11e:	6658      	str	r0, [r3, #100]	; 0x64
    d120:	609c      	str	r4, [r3, #8]
    d122:	6698      	str	r0, [r3, #104]	; 0x68
    d124:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    d126:	841c      	strh	r4, [r3, #32]
    d128:	611c      	str	r4, [r3, #16]
    d12a:	625c      	str	r4, [r3, #36]	; 0x24
    d12c:	615c      	str	r4, [r3, #20]
    d12e:	851c      	strh	r4, [r3, #40]	; 0x28
    d130:	619c      	str	r4, [r3, #24]
    d132:	62dc      	str	r4, [r3, #44]	; 0x2c
    d134:	61dc      	str	r4, [r3, #28]
    d136:	861c      	strh	r4, [r3, #48]	; 0x30
    d138:	635c      	str	r4, [r3, #52]	; 0x34
    d13a:	871c      	strh	r4, [r3, #56]	; 0x38
    d13c:	63dc      	str	r4, [r3, #60]	; 0x3c
    d13e:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    d142:	645c      	str	r4, [r3, #68]	; 0x44
    d144:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    d148:	64dc      	str	r4, [r3, #76]	; 0x4c
    d14a:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    d14e:	655c      	str	r4, [r3, #84]	; 0x54
    d150:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    d154:	65dc      	str	r4, [r3, #92]	; 0x5c
    d156:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    d15a:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    d15e:	671c      	str	r4, [r3, #112]	; 0x70
    d160:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    d164:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    d168:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    d16c:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    d16e:	6033      	str	r3, [r6, #0]
    d170:	602a      	str	r2, [r5, #0]
}
    d172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d174:	20001df8 	.word	0x20001df8
    d178:	20001e30 	.word	0x20001e30

0000d17c <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    d17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    d17e:	4bbd      	ldr	r3, [pc, #756]	; (d474 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    d180:	4605      	mov	r5, r0
    };
    d182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    d184:	b085      	sub	sp, #20
    };
    d186:	ac04      	add	r4, sp, #16
    d188:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d18c:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d18e:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d190:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    d194:	2303      	movs	r3, #3
    d196:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    d19a:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d19e:	f245 03c3 	movw	r3, #20675	; 0x50c3
    d1a2:	842b      	strh	r3, [r5, #32]
    d1a4:	852b      	strh	r3, [r5, #40]	; 0x28
    d1a6:	862b      	strh	r3, [r5, #48]	; 0x30
    d1a8:	872b      	strh	r3, [r5, #56]	; 0x38
    d1aa:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    d1ae:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    d1b2:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    d1b6:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d1ba:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    d1be:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    d1c0:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    d1c4:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    d1c8:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    d1cc:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    d1ce:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    d1d0:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d1d2:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    d1d4:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d1d6:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    d1da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d1de:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d1e2:	07cf      	lsls	r7, r1, #31
    d1e4:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d1e8:	f04f 0401 	mov.w	r4, #1
    d1ec:	bf54      	ite	pl
    d1ee:	f364 0003 	bfipl	r0, r4, #0, #4
    d1f2:	f364 1007 	bfimi	r0, r4, #4, #4
    d1f6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d1fa:	4a9f      	ldr	r2, [pc, #636]	; (d478 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d1fc:	4413      	add	r3, r2
    d1fe:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d200:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d202:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d206:	f041 0101 	orr.w	r1, r1, #1
    d20a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d20e:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d210:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d212:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d216:	01db      	lsls	r3, r3, #7
    d218:	441a      	add	r2, r3
    d21a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d21e:	07ce      	lsls	r6, r1, #31
    d220:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d224:	bf54      	ite	pl
    d226:	f364 0003 	bfipl	r0, r4, #0, #4
    d22a:	f364 1007 	bfimi	r0, r4, #4, #4
    d22e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d232:	4a91      	ldr	r2, [pc, #580]	; (d478 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d234:	4413      	add	r3, r2
    d236:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d238:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d23a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d23e:	f041 0101 	orr.w	r1, r1, #1
    d242:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d246:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d248:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d24a:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d24e:	01db      	lsls	r3, r3, #7
    d250:	441a      	add	r2, r3
    d252:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d256:	07cf      	lsls	r7, r1, #31
    d258:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d25c:	bf54      	ite	pl
    d25e:	f364 0003 	bfipl	r0, r4, #0, #4
    d262:	f364 1007 	bfimi	r0, r4, #4, #4
    d266:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d26a:	4a83      	ldr	r2, [pc, #524]	; (d478 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d26c:	4413      	add	r3, r2
    d26e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d270:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d272:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d276:	f041 0101 	orr.w	r1, r1, #1
    d27a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d27e:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d280:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d282:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d286:	01db      	lsls	r3, r3, #7
    d288:	441a      	add	r2, r3
    d28a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d28e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d292:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d296:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d298:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d29c:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d29e:	bf4c      	ite	mi
    d2a0:	f364 1007 	bfimi	r0, r4, #4, #4
    d2a4:	f364 0003 	bfipl	r0, r4, #0, #4
    d2a8:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d2ac:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d2b0:	4a72      	ldr	r2, [pc, #456]	; (d47c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d2b2:	f041 0101 	orr.w	r1, r1, #1
    d2b6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d2ba:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d2be:	f36f 1386 	bfc	r3, #6, #1
    d2c2:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d2c6:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d2ca:	065f      	lsls	r7, r3, #25
    d2cc:	d4fb      	bmi.n	d2c6 <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    d2ce:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d2d2:	496a      	ldr	r1, [pc, #424]	; (d47c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    d2d4:	2004      	movs	r0, #4
    d2d6:	f360 0303 	bfi	r3, r0, #0, #4
    d2da:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d2de:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d2e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d2e6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d2ea:	684b      	ldr	r3, [r1, #4]
    d2ec:	06de      	lsls	r6, r3, #27
    d2ee:	d4fc      	bmi.n	d2ea <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d2f0:	4963      	ldr	r1, [pc, #396]	; (d480 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    d2f2:	4a64      	ldr	r2, [pc, #400]	; (d484 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d2f4:	6a0b      	ldr	r3, [r1, #32]
    d2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d2fa:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    d2fc:	8813      	ldrh	r3, [r2, #0]
    d2fe:	f043 0301 	orr.w	r3, r3, #1
    d302:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    d304:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d306:	f013 0301 	ands.w	r3, r3, #1
    d30a:	d1fb      	bne.n	d304 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    d30c:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    d310:	290a      	cmp	r1, #10
    d312:	f000 80e7 	beq.w	d4e4 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    d316:	290c      	cmp	r1, #12
    d318:	f000 80df 	beq.w	d4da <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    d31c:	2908      	cmp	r1, #8
    d31e:	f000 80d5 	beq.w	d4cc <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    d322:	4b58      	ldr	r3, [pc, #352]	; (d484 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d324:	881a      	ldrh	r2, [r3, #0]
    d326:	2101      	movs	r1, #1
    d328:	f361 220a 	bfi	r2, r1, #8, #3
    d32c:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    d32e:	889a      	ldrh	r2, [r3, #4]
    d330:	b292      	uxth	r2, r2
    d332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    d336:	f042 0204 	orr.w	r2, r2, #4
    d33a:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d33c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    d33e:	f014 0404 	ands.w	r4, r4, #4
    d342:	d1fb      	bne.n	d33c <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    d344:	4620      	mov	r0, r4
    d346:	f001 fe33 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d34a:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d34c:	4620      	mov	r0, r4
    d34e:	f001 fe39 	bl	efc4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d352:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d354:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d356:	f023 0302 	bic.w	r3, r3, #2
    d35a:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d35c:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d35e:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d360:	6833      	ldr	r3, [r6, #0]
    d362:	2b01      	cmp	r3, #1
    d364:	d0fc      	beq.n	d360 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    d366:	4b48      	ldr	r3, [pc, #288]	; (d488 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    d368:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d36a:	4948      	ldr	r1, [pc, #288]	; (d48c <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d36c:	4f48      	ldr	r7, [pc, #288]	; (d490 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    d36e:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d372:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d374:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d376:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d378:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d37a:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d37c:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d37e:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    d380:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d382:	f001 fe15 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d386:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d388:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d38a:	f023 0302 	bic.w	r3, r3, #2
    d38e:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d390:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d392:	6803      	ldr	r3, [r0, #0]
    d394:	2b01      	cmp	r3, #1
    d396:	d0fc      	beq.n	d392 <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    d398:	4b3e      	ldr	r3, [pc, #248]	; (d494 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    d39a:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    d39c:	2001      	movs	r0, #1
    d39e:	f001 fe11 	bl	efc4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d3a2:	2300      	movs	r3, #0
    d3a4:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d3a6:	4a37      	ldr	r2, [pc, #220]	; (d484 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    d3a8:	4e3b      	ldr	r6, [pc, #236]	; (d498 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    d3aa:	493c      	ldr	r1, [pc, #240]	; (d49c <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    d3ac:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d3ae:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d3b2:	2408      	movs	r4, #8
    d3b4:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    d3b6:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d3b8:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d3ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d3bc:	f043 0301 	orr.w	r3, r3, #1
    d3c0:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d3c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d3c4:	075c      	lsls	r4, r3, #29
    d3c6:	d4fc      	bmi.n	d3c2 <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d3c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d3ca:	492e      	ldr	r1, [pc, #184]	; (d484 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d3cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d3d0:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    d3d2:	7a13      	ldrb	r3, [r2, #8]
    d3d4:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    d3d8:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d3da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d3dc:	06d8      	lsls	r0, r3, #27
    d3de:	d4fc      	bmi.n	d3da <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d3e0:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d3e2:	4c28      	ldr	r4, [pc, #160]	; (d484 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d3e4:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d3e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d3e8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    d3ec:	d1fb      	bne.n	d3e6 <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    d3ee:	78e3      	ldrb	r3, [r4, #3]
    d3f0:	f043 0301 	orr.w	r3, r3, #1
    d3f4:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d3f6:	f001 fddb 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d3fa:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d3fc:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d3fe:	6813      	ldr	r3, [r2, #0]
    d400:	f043 0302 	orr.w	r3, r3, #2
    d404:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d406:	f001 fdd3 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d40a:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d40c:	4a1d      	ldr	r2, [pc, #116]	; (d484 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d40e:	f043 0302 	orr.w	r3, r3, #2
    d412:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d414:	88a3      	ldrh	r3, [r4, #4]
    d416:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d41a:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    d41c:	8823      	ldrh	r3, [r4, #0]
    d41e:	f043 0302 	orr.w	r3, r3, #2
    d422:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d424:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d426:	0799      	lsls	r1, r3, #30
    d428:	d4fc      	bmi.n	d424 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d42a:	2000      	movs	r0, #0
    d42c:	f001 fdc0 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d430:	6803      	ldr	r3, [r0, #0]
    d432:	079a      	lsls	r2, r3, #30
    d434:	d4f9      	bmi.n	d42a <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    d436:	2001      	movs	r0, #1
    d438:	f001 fdba 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d43c:	6803      	ldr	r3, [r0, #0]
    d43e:	079b      	lsls	r3, r3, #30
    d440:	d4f9      	bmi.n	d436 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    d442:	4a10      	ldr	r2, [pc, #64]	; (d484 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d444:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    d448:	f013 0301 	ands.w	r3, r3, #1
    d44c:	d1fa      	bne.n	d444 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    d44e:	4e14      	ldr	r6, [pc, #80]	; (d4a0 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    d450:	4c14      	ldr	r4, [pc, #80]	; (d4a4 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    d452:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    d454:	f242 51ff 	movw	r1, #9727	; 0x25ff
    d458:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    d45c:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    d45e:	8029      	strh	r1, [r5, #0]
    d460:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    d462:	8229      	strh	r1, [r5, #16]
    d464:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    d466:	806b      	strh	r3, [r5, #2]
    d468:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    d46a:	826b      	strh	r3, [r5, #18]
    d46c:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    d46e:	80aa      	strh	r2, [r5, #4]
    d470:	e01a      	b.n	d4a8 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    d472:	bf00      	nop
    d474:	00023424 	.word	0x00023424
    d478:	41008000 	.word	0x41008000
    d47c:	40001c00 	.word	0x40001c00
    d480:	40000800 	.word	0x40000800
    d484:	43002000 	.word	0x43002000
    d488:	00204600 	.word	0x00204600
    d48c:	20001e0c 	.word	0x20001e0c
    d490:	43002040 	.word	0x43002040
    d494:	00204700 	.word	0x00204700
    d498:	20001e30 	.word	0x20001e30
    d49c:	43002034 	.word	0x43002034
    d4a0:	25ff0000 	.word	0x25ff0000
    d4a4:	60f80000 	.word	0x60f80000
    d4a8:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    d4aa:	82aa      	strh	r2, [r5, #20]
    d4ac:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    d4ae:	80eb      	strh	r3, [r5, #6]
    d4b0:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    d4b2:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    d4b4:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    d4b8:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    d4ba:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    d4bc:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    d4be:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    d4c0:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    d4c2:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    d4c4:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    d4c6:	83eb      	strh	r3, [r5, #30]
}
    d4c8:	b005      	add	sp, #20
    d4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d4cc:	88d3      	ldrh	r3, [r2, #6]
    d4ce:	f043 0318 	orr.w	r3, r3, #24
    d4d2:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    d4d4:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    d4d8:	e723      	b.n	d322 <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d4da:	88d0      	ldrh	r0, [r2, #6]
    d4dc:	f363 00c4 	bfi	r0, r3, #3, #2
    d4e0:	80d0      	strh	r0, [r2, #6]
    d4e2:	e7f7      	b.n	d4d4 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d4e4:	88d3      	ldrh	r3, [r2, #6]
    d4e6:	2002      	movs	r0, #2
    d4e8:	f360 03c4 	bfi	r3, r0, #3, #2
    d4ec:	80d3      	strh	r3, [r2, #6]
    d4ee:	e7f1      	b.n	d4d4 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000d4f0 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    d4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    d4f4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    d4f8:	2b00      	cmp	r3, #0
    d4fa:	f000 80ab 	beq.w	d654 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    d4fe:	4b89      	ldr	r3, [pc, #548]	; (d724 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d500:	4604      	mov	r4, r0
    d502:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    d506:	f010 0001 	ands.w	r0, r0, #1
    d50a:	f000 80a5 	beq.w	d658 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    d50e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d510:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d514:	3301      	adds	r3, #1
    d516:	4293      	cmp	r3, r2
    d518:	6723      	str	r3, [r4, #112]	; 0x70
    d51a:	d302      	bcc.n	d522 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d51c:	2301      	movs	r3, #1
    d51e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d522:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d524:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d526:	8821      	ldrh	r1, [r4, #0]
    d528:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d52a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d52c:	fb83 6706 	smull	r6, r7, r3, r6
    d530:	0bf2      	lsrs	r2, r6, #15
    d532:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d536:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d538:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d53c:	fb01 f103 	mul.w	r1, r1, r3
    d540:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d544:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d546:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d548:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d54a:	6262      	str	r2, [r4, #36]	; 0x24
    d54c:	fb80 8905 	smull	r8, r9, r0, r5
    d550:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d554:	b2b2      	uxth	r2, r6
    d556:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d55a:	fb02 f000 	mul.w	r0, r2, r0
    d55e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d562:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d566:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d568:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d56a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d56c:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d56e:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d570:	88a0      	ldrh	r0, [r4, #4]
    d572:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d574:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d578:	fb81 2302 	smull	r2, r3, r1, r2
    d57c:	0bd2      	lsrs	r2, r2, #15
    d57e:	b280      	uxth	r0, r0
    d580:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d584:	fb00 f101 	mul.w	r1, r0, r1
    d588:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d58c:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d592:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d594:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d596:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d598:	88e1      	ldrh	r1, [r4, #6]
    d59a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d59e:	fb86 8903 	smull	r8, r9, r6, r3
    d5a2:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d5a6:	b289      	uxth	r1, r1
    d5a8:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d5ac:	fb01 f606 	mul.w	r6, r1, r6
    d5b0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d5b4:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d5b8:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d5ba:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d5bc:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d5be:	8923      	ldrh	r3, [r4, #8]
    d5c0:	63e1      	str	r1, [r4, #60]	; 0x3c
    d5c2:	fb85 6706 	smull	r6, r7, r5, r6
    d5c6:	0bf2      	lsrs	r2, r6, #15
    d5c8:	b29b      	uxth	r3, r3
    d5ca:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d5ce:	fb03 f505 	mul.w	r5, r3, r5
    d5d2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d5d6:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d5da:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d5dc:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d5de:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d5e0:	8961      	ldrh	r1, [r4, #10]
    d5e2:	6462      	str	r2, [r4, #68]	; 0x44
    d5e4:	fb80 6706 	smull	r6, r7, r0, r6
    d5e8:	0bf3      	lsrs	r3, r6, #15
    d5ea:	b28a      	uxth	r2, r1
    d5ec:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d5f0:	fb02 f000 	mul.w	r0, r2, r0
    d5f4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d5f8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d5fc:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d5fe:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d600:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d602:	89a0      	ldrh	r0, [r4, #12]
    d604:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d608:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d60a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d60e:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d610:	fb83 8902 	smull	r8, r9, r3, r2
    d614:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d618:	b280      	uxth	r0, r0
    d61a:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d61e:	fb00 f303 	mul.w	r3, r0, r3
    d622:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d626:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d62a:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d62c:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d62e:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d632:	89e0      	ldrh	r0, [r4, #14]
    d634:	6562      	str	r2, [r4, #84]	; 0x54
    d636:	0bf3      	lsrs	r3, r6, #15
    d638:	b282      	uxth	r2, r0
    d63a:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d63e:	fb02 f101 	mul.w	r1, r2, r1
    d642:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d646:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d64a:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d64c:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d64e:	83e2      	strh	r2, [r4, #30]
    d650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d658:	f001 fcaa 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d65c:	6803      	ldr	r3, [r0, #0]
    d65e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d662:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d664:	2e00      	cmp	r6, #0
    d666:	f47f af52 	bne.w	d50e <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d66a:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d66c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d670:	2501      	movs	r5, #1
    d672:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d730 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d676:	4f2c      	ldr	r7, [pc, #176]	; (d728 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d678:	e00f      	b.n	d69a <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d67a:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d67e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d682:	b29b      	uxth	r3, r3
    d684:	f1c2 010f 	rsb	r1, r2, #15
    d688:	408b      	lsls	r3, r1
    d68a:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d68c:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d68e:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d692:	462e      	mov	r6, r5
    d694:	dc0c      	bgt.n	d6b0 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d696:	3501      	adds	r5, #1
    d698:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d69a:	2d01      	cmp	r5, #1
    d69c:	d1ed      	bne.n	d67a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d69e:	f04f 31ff 	mov.w	r1, #4294967295
    d6a2:	6838      	ldr	r0, [r7, #0]
    d6a4:	f004 f9c8 	bl	11a38 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d6a8:	0703      	lsls	r3, r0, #28
    d6aa:	d5e6      	bpl.n	d67a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d6ac:	462e      	mov	r6, r5
    d6ae:	e7f2      	b.n	d696 <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d6b0:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d6b4:	429a      	cmp	r2, r3
    d6b6:	d005      	beq.n	d6c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d6b8:	2b0a      	cmp	r3, #10
    d6ba:	d02c      	beq.n	d716 <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d6bc:	2b0c      	cmp	r3, #12
    d6be:	d024      	beq.n	d70a <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d6c0:	2b08      	cmp	r3, #8
    d6c2:	d01a      	beq.n	d6fa <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d6c4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d6c6:	4b19      	ldr	r3, [pc, #100]	; (d72c <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d6c8:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d6ca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d6ce:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6d0:	2000      	movs	r0, #0
    d6d2:	f001 fc6d 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d6d6:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6d8:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6da:	6813      	ldr	r3, [r2, #0]
    d6dc:	f043 0302 	orr.w	r3, r3, #2
    d6e0:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6e2:	f001 fc65 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d6e6:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d6e8:	4a0e      	ldr	r2, [pc, #56]	; (d724 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d6ea:	f043 0302 	orr.w	r3, r3, #2
    d6ee:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d6f0:	8893      	ldrh	r3, [r2, #4]
    d6f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d6f6:	8093      	strh	r3, [r2, #4]
    d6f8:	e713      	b.n	d522 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d6fa:	490a      	ldr	r1, [pc, #40]	; (d724 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d6fc:	88ca      	ldrh	r2, [r1, #6]
    d6fe:	f042 0218 	orr.w	r2, r2, #24
    d702:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d704:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d708:	e7dc      	b.n	d6c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d70a:	4a06      	ldr	r2, [pc, #24]	; (d724 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d70c:	88d1      	ldrh	r1, [r2, #6]
    d70e:	f36f 01c4 	bfc	r1, #3, #2
    d712:	80d1      	strh	r1, [r2, #6]
    d714:	e7f6      	b.n	d704 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d716:	4a03      	ldr	r2, [pc, #12]	; (d724 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d718:	88d1      	ldrh	r1, [r2, #6]
    d71a:	2002      	movs	r0, #2
    d71c:	f360 01c4 	bfi	r1, r0, #3, #2
    d720:	80d1      	strh	r1, [r2, #6]
    d722:	e7ef      	b.n	d704 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d724:	43002000 	.word	0x43002000
    d728:	20001f28 	.word	0x20001f28
    d72c:	200019e0 	.word	0x200019e0
    d730:	20001dfc 	.word	0x20001dfc

0000d734 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    d734:	2907      	cmp	r1, #7
    d736:	dc33      	bgt.n	d7a0 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    d738:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    d73a:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    d73c:	b083      	sub	sp, #12
    d73e:	4605      	mov	r5, r0
    switch (theUnits) {
    d740:	d033      	beq.n	d7aa <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    d742:	d336      	bcc.n	d7b2 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    d744:	2b02      	cmp	r3, #2
    d746:	d12d      	bne.n	d7a4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d748:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    d74a:	1d0c      	adds	r4, r1, #4
    d74c:	f00e fb10 	bl	1bd70 <__aeabi_i2d>
    d750:	460b      	mov	r3, r1
    d752:	4602      	mov	r2, r0
    d754:	491a      	ldr	r1, [pc, #104]	; (d7c0 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    d756:	2000      	movs	r0, #0
    d758:	f00e fc9a 	bl	1c090 <__aeabi_ddiv>
    d75c:	f00e fe50 	bl	1c400 <__aeabi_d2f>
    d760:	ed9f 0a18 	vldr	s0, [pc, #96]	; d7c4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    d764:	ee00 0a90 	vmov	s1, r0
    d768:	f00d fbaa 	bl	1aec0 <powf>
    d76c:	eddf 6a16 	vldr	s13, [pc, #88]	; d7c8 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d770:	ed9f 7a16 	vldr	s14, [pc, #88]	; d7cc <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d774:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    d778:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    d77c:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d77e:	eef4 7ac7 	vcmpe.f32	s15, s14
    d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d786:	bf49      	itett	mi
    d788:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    d78c:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    d790:	edcd 7a01 	vstrmi	s15, [sp, #4]
    d794:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    d798:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    d79c:	b003      	add	sp, #12
    d79e:	bd30      	pop	{r4, r5, pc}
        return false;
    d7a0:	2000      	movs	r0, #0
    d7a2:	4770      	bx	lr
            return false;
    d7a4:	2000      	movs	r0, #0
}
    d7a6:	b003      	add	sp, #12
    d7a8:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    d7aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d7ae:	b290      	uxth	r0, r2
    d7b0:	e7cb      	b.n	d74a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    d7b2:	3104      	adds	r1, #4
            return true;
    d7b4:	2001      	movs	r0, #1
        m_tc = newTc;
    d7b6:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    d7ba:	b003      	add	sp, #12
    d7bc:	bd30      	pop	{r4, r5, pc}
    d7be:	bf00      	nop
    d7c0:	3ff00000 	.word	0x3ff00000
    d7c4:	3c23d70a 	.word	0x3c23d70a
    d7c8:	47000000 	.word	0x47000000
    d7cc:	46fffe00 	.word	0x46fffe00

0000d7d0 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    d7d2:	f7ff fc8f 	bl	d0f4 <_ZN9ClearCore10AdcManager8InstanceEv>
    d7d6:	4a0f      	ldr	r2, [pc, #60]	; (d814 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    d7d8:	4b0f      	ldr	r3, [pc, #60]	; (d818 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    d7da:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    d7dc:	2104      	movs	r1, #4
    d7de:	2205      	movs	r2, #5
    d7e0:	2706      	movs	r7, #6
    d7e2:	2607      	movs	r6, #7
    d7e4:	2508      	movs	r5, #8
    d7e6:	2409      	movs	r4, #9
    d7e8:	200a      	movs	r0, #10
    d7ea:	8019      	strh	r1, [r3, #0]
    d7ec:	809a      	strh	r2, [r3, #4]
    d7ee:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    d7f2:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    d7f4:	811f      	strh	r7, [r3, #8]
    d7f6:	819e      	strh	r6, [r3, #12]
    d7f8:	821d      	strh	r5, [r3, #16]
    d7fa:	829c      	strh	r4, [r3, #20]
    d7fc:	8318      	strh	r0, [r3, #24]
    d7fe:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    d800:	805a      	strh	r2, [r3, #2]
    d802:	80da      	strh	r2, [r3, #6]
    d804:	815a      	strh	r2, [r3, #10]
    d806:	81da      	strh	r2, [r3, #14]
    d808:	825a      	strh	r2, [r3, #18]
    d80a:	82da      	strh	r2, [r3, #22]
    d80c:	835a      	strh	r2, [r3, #26]
    d80e:	83da      	strh	r2, [r3, #30]
    d810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d812:	bf00      	nop
    d814:	20001e0c 	.word	0x20001e0c
    d818:	20001e10 	.word	0x20001e10

0000d81c <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    d81c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    d820:	4770      	bx	lr
    d822:	bf00      	nop

0000d824 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d824:	7980      	ldrb	r0, [r0, #6]
    d826:	4770      	bx	lr

0000d828 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    d828:	2004      	movs	r0, #4
    d82a:	4770      	bx	lr

0000d82c <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    d82c:	7980      	ldrb	r0, [r0, #6]
    d82e:	1ec3      	subs	r3, r0, #3
    d830:	2b01      	cmp	r3, #1
    d832:	bf83      	ittte	hi
    d834:	3806      	subhi	r0, #6
    d836:	fab0 f080 	clzhi	r0, r0
    d83a:	0940      	lsrhi	r0, r0, #5
    d83c:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    d83e:	4770      	bx	lr

0000d840 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d840:	b530      	push	{r4, r5, lr}
    d842:	b083      	sub	sp, #12
    d844:	f89d 401c 	ldrb.w	r4, [sp, #28]
    d848:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d84a:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d84c:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d84e:	f000 fcfd 	bl	e24c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    d852:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d856:	4a05      	ldr	r2, [pc, #20]	; (d86c <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    d858:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d85a:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d85c:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d85e:	4b04      	ldr	r3, [pc, #16]	; (d870 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d860:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d862:	4620      	mov	r0, r4
    d864:	66a3      	str	r3, [r4, #104]	; 0x68
    d866:	b003      	add	sp, #12
    d868:	bd30      	pop	{r4, r5, pc}
    d86a:	bf00      	nop
    d86c:	0002347c 	.word	0x0002347c
    d870:	06a40000 	.word	0x06a40000

0000d874 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    d874:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d876:	4a3a      	ldr	r2, [pc, #232]	; (d960 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d878:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d87c:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    d880:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    d882:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d886:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d88a:	065d      	lsls	r5, r3, #25
    d88c:	d4fb      	bmi.n	d886 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    d88e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d892:	4933      	ldr	r1, [pc, #204]	; (d960 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    d894:	2004      	movs	r0, #4
    d896:	f360 0303 	bfi	r3, r0, #0, #4
    d89a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d89e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    d8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d8a6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    d8aa:	684b      	ldr	r3, [r1, #4]
    d8ac:	06d8      	lsls	r0, r3, #27
    d8ae:	d4fc      	bmi.n	d8aa <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d8b0:	4a2c      	ldr	r2, [pc, #176]	; (d964 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    d8b2:	492d      	ldr	r1, [pc, #180]	; (d968 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d8b4:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    d8b6:	4b2d      	ldr	r3, [pc, #180]	; (d96c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    d8b8:	2507      	movs	r5, #7
    d8ba:	f365 4013 	bfi	r0, r5, #16, #4
    d8be:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    d8c0:	6a0a      	ldr	r2, [r1, #32]
    d8c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d8c6:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    d8c8:	781a      	ldrb	r2, [r3, #0]
    d8ca:	f042 0201 	orr.w	r2, r2, #1
    d8ce:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    d8d0:	689a      	ldr	r2, [r3, #8]
    d8d2:	07d2      	lsls	r2, r2, #31
    d8d4:	d4fc      	bmi.n	d8d0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    d8d6:	785a      	ldrb	r2, [r3, #1]
    d8d8:	f042 0201 	orr.w	r2, r2, #1
    d8dc:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    d8de:	785a      	ldrb	r2, [r3, #1]
    d8e0:	f042 0206 	orr.w	r2, r2, #6
    d8e4:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    d8e6:	899a      	ldrh	r2, [r3, #12]
    d8e8:	f042 0202 	orr.w	r2, r2, #2
    d8ec:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    d8ee:	899a      	ldrh	r2, [r3, #12]
    d8f0:	2105      	movs	r1, #5
    d8f2:	f361 220b 	bfi	r2, r1, #8, #4
    d8f6:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    d8f8:	899a      	ldrh	r2, [r3, #12]
    d8fa:	2102      	movs	r1, #2
    d8fc:	f361 0283 	bfi	r2, r1, #2, #2
    d900:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    d902:	8a1b      	ldrh	r3, [r3, #16]
    d904:	b29b      	uxth	r3, r3
    d906:	bb23      	cbnz	r3, d952 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d908:	4b19      	ldr	r3, [pc, #100]	; (d970 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    d90a:	681d      	ldr	r5, [r3, #0]
    d90c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    d910:	4628      	mov	r0, r5
    d912:	f004 fadd 	bl	11ed0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d916:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    d91a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d91e:	4628      	mov	r0, r5
    d920:	f004 fad6 	bl	11ed0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    d924:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d928:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    d92a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    d92e:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    d932:	461a      	mov	r2, r3
    d934:	db03      	blt.n	d93e <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    d936:	2300      	movs	r3, #0
    d938:	461a      	mov	r2, r3
    d93a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    d93e:	4410      	add	r0, r2
    d940:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d944:	db04      	blt.n	d950 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    d946:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    d94a:	3304      	adds	r3, #4
    d94c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    d950:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d952:	4a06      	ldr	r2, [pc, #24]	; (d96c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    d954:	6893      	ldr	r3, [r2, #8]
    d956:	f013 0304 	ands.w	r3, r3, #4
    d95a:	d1fb      	bne.n	d954 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    d95c:	8213      	strh	r3, [r2, #16]
    d95e:	e7d3      	b.n	d908 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    d960:	40001c00 	.word	0x40001c00
    d964:	40001800 	.word	0x40001800
    d968:	40000800 	.word	0x40000800
    d96c:	43002400 	.word	0x43002400
    d970:	20001f34 	.word	0x20001f34

0000d974 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    d974:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    d976:	4a2e      	ldr	r2, [pc, #184]	; (da30 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    d978:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    d97c:	8a13      	ldrh	r3, [r2, #16]
    d97e:	b29b      	uxth	r3, r3
    d980:	4299      	cmp	r1, r3
    d982:	d003      	beq.n	d98c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    d984:	6893      	ldr	r3, [r2, #8]
    d986:	075d      	lsls	r5, r3, #29
    d988:	d4fc      	bmi.n	d984 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    d98a:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d98c:	68c3      	ldr	r3, [r0, #12]
    d98e:	4929      	ldr	r1, [pc, #164]	; (da34 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    d990:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d992:	4a27      	ldr	r2, [pc, #156]	; (da30 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    d994:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d998:	4423      	add	r3, r4
    d99a:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    d99e:	f044 0401 	orr.w	r4, r4, #1
    d9a2:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    d9a6:	6e03      	ldr	r3, [r0, #96]	; 0x60
    d9a8:	6e44      	ldr	r4, [r0, #100]	; 0x64
    d9aa:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    d9ae:	4423      	add	r3, r4
    d9b0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d9b4:	f041 0101 	orr.w	r1, r1, #1
    d9b8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d9bc:	6893      	ldr	r3, [r2, #8]
    d9be:	079c      	lsls	r4, r3, #30
    d9c0:	d4fc      	bmi.n	d9bc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    d9c2:	7813      	ldrb	r3, [r2, #0]
    d9c4:	0799      	lsls	r1, r3, #30
    d9c6:	d407      	bmi.n	d9d8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    d9c8:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d9ca:	4919      	ldr	r1, [pc, #100]	; (da30 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    d9cc:	f043 0302 	orr.w	r3, r3, #2
    d9d0:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    d9d2:	688b      	ldr	r3, [r1, #8]
    d9d4:	079a      	lsls	r2, r3, #30
    d9d6:	d4fc      	bmi.n	d9d2 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    d9d8:	4a15      	ldr	r2, [pc, #84]	; (da30 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    d9da:	79d3      	ldrb	r3, [r2, #7]
    d9dc:	079b      	lsls	r3, r3, #30
    d9de:	d0fc      	beq.n	d9da <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    d9e0:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d9e2:	4b15      	ldr	r3, [pc, #84]	; (da38 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    d9e4:	f002 010f 	and.w	r1, r2, #15
    d9e8:	185a      	adds	r2, r3, r1
    d9ea:	2400      	movs	r4, #0
    d9ec:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d9f0:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d9f2:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    d9f6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d9fa:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d9fc:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da00:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    da02:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da04:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    da06:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    da0a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    da0e:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    da12:	33f4      	adds	r3, #244	; 0xf4
    da14:	f3bf 8f5b 	dmb	ish
    da18:	e853 2f00 	ldrex	r2, [r3]
    da1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    da20:	e843 2100 	strex	r1, r2, [r3]
    da24:	2900      	cmp	r1, #0
    da26:	d1f7      	bne.n	da18 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    da28:	f3bf 8f5b 	dmb	ish
}
    da2c:	bc70      	pop	{r4, r5, r6}
    da2e:	4770      	bx	lr
    da30:	43002400 	.word	0x43002400
    da34:	41008000 	.word	0x41008000
    da38:	200019e0 	.word	0x200019e0

0000da3c <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    da3c:	7983      	ldrb	r3, [r0, #6]
    da3e:	2b06      	cmp	r3, #6
    da40:	d805      	bhi.n	da4e <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    da42:	2201      	movs	r2, #1
    da44:	fa02 f303 	lsl.w	r3, r2, r3
    da48:	f013 0f54 	tst.w	r3, #84	; 0x54
    da4c:	d100      	bne.n	da50 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    da4e:	4770      	bx	lr
            DigitalInOut::Refresh();
    da50:	f000 bc32 	b.w	e2b8 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000da54 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    da54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    da56:	7983      	ldrb	r3, [r0, #6]
    da58:	428b      	cmp	r3, r1
    da5a:	d06e      	beq.n	db3a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    da5c:	1e8a      	subs	r2, r1, #2
    da5e:	460c      	mov	r4, r1
    da60:	4605      	mov	r5, r0
    da62:	2a04      	cmp	r2, #4
    da64:	d80d      	bhi.n	da82 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    da66:	e8df f002 	tbb	[pc, r2]
    da6a:	0311      	.short	0x0311
    da6c:	0c11      	.short	0x0c11
    da6e:	11          	.byte	0x11
    da6f:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    da70:	2102      	movs	r1, #2
    da72:	f000 fad9 	bl	e028 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    da76:	4628      	mov	r0, r5
    da78:	f7ff ff7c 	bl	d974 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    da7c:	2303      	movs	r3, #3
    da7e:	71ab      	strb	r3, [r5, #6]
            break;
    da80:	4623      	mov	r3, r4
    return (m_mode == newMode);
    da82:	1ae0      	subs	r0, r4, r3
    da84:	fab0 f080 	clz	r0, r0
    da88:	0940      	lsrs	r0, r0, #5
    da8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    da8c:	4b2c      	ldr	r3, [pc, #176]	; (db40 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    da8e:	f3bf 8f5b 	dmb	ish
    da92:	e853 2f00 	ldrex	r2, [r3]
    da96:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    da9a:	e843 2100 	strex	r1, r2, [r3]
    da9e:	2900      	cmp	r1, #0
    daa0:	d1f7      	bne.n	da92 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    daa2:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    daa6:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    daa8:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    daac:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    daae:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dab0:	4924      	ldr	r1, [pc, #144]	; (db44 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dab2:	3bf4      	subs	r3, #244	; 0xf4
    dab4:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dab8:	f04f 0e01 	mov.w	lr, #1
    dabc:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dac0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dac4:	ea27 070e 	bic.w	r7, r7, lr
    dac8:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    dacc:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dace:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dad2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    dad6:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    dada:	4438      	add	r0, r7
    dadc:	ea22 0606 	bic.w	r6, r2, r6
    dae0:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    dae4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dae8:	4a17      	ldr	r2, [pc, #92]	; (db48 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    daea:	f36f 0300 	bfc	r3, #0, #1
    daee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    daf2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    daf4:	6e68      	ldr	r0, [r5, #100]	; 0x64
    daf6:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    dafa:	4403      	add	r3, r0
    dafc:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    db00:	f36f 0100 	bfc	r1, #0, #1
    db04:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db08:	6893      	ldr	r3, [r2, #8]
    db0a:	f013 0302 	ands.w	r3, r3, #2
    db0e:	d1fb      	bne.n	db08 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    db10:	7811      	ldrb	r1, [r2, #0]
    db12:	0789      	lsls	r1, r1, #30
    db14:	d507      	bpl.n	db26 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    db16:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db18:	490b      	ldr	r1, [pc, #44]	; (db48 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    db1a:	f363 0041 	bfi	r0, r3, #1, #1
    db1e:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db20:	688b      	ldr	r3, [r1, #8]
    db22:	079b      	lsls	r3, r3, #30
    db24:	d4fc      	bmi.n	db20 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    db26:	4621      	mov	r1, r4
    db28:	4628      	mov	r0, r5
    db2a:	f000 fa7d 	bl	e028 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    db2e:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    db30:	1ae0      	subs	r0, r4, r3
    db32:	fab0 f080 	clz	r0, r0
    db36:	0940      	lsrs	r0, r0, #5
    db38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    db3a:	2001      	movs	r0, #1
}
    db3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db3e:	bf00      	nop
    db40:	20001ad4 	.word	0x20001ad4
    db44:	41008000 	.word	0x41008000
    db48:	43002400 	.word	0x43002400

0000db4c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    db4c:	7983      	ldrb	r3, [r0, #6]
    db4e:	2b06      	cmp	r3, #6
    db50:	d805      	bhi.n	db5e <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    db52:	2201      	movs	r2, #1
    db54:	fa02 f303 	lsl.w	r3, r2, r3
    db58:	f013 0f54 	tst.w	r3, #84	; 0x54
    db5c:	d101      	bne.n	db62 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    db5e:	2000      	movs	r0, #0
    db60:	4770      	bx	lr
            state = DigitalInOut::State();
    db62:	f000 bcaf 	b.w	e4c4 <_ZN9ClearCore12DigitalInOut5StateEv>
    db66:	bf00      	nop

0000db68 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    db68:	7983      	ldrb	r3, [r0, #6]
    db6a:	3b02      	subs	r3, #2
    db6c:	2b04      	cmp	r3, #4
    db6e:	d83c      	bhi.n	dbea <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    db70:	e8df f003 	tbb	[pc, r3]
    db74:	3b390339 	.word	0x3b390339
    db78:	39          	.byte	0x39
    db79:	00          	.byte	0x00
            newState = max(newState, 0);
    db7a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    db7e:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    db80:	b289      	uxth	r1, r1
    db82:	f240 74ff 	movw	r4, #2047	; 0x7ff
    db86:	42a1      	cmp	r1, r4
    db88:	bf28      	it	cs
    db8a:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    db8c:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    db8e:	4d19      	ldr	r5, [pc, #100]	; (dbf4 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    db90:	4e19      	ldr	r6, [pc, #100]	; (dbf8 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    db92:	4a1a      	ldr	r2, [pc, #104]	; (dbfc <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    db94:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    db98:	fb85 e503 	smull	lr, r5, r5, r3
    db9c:	f007 070f 	and.w	r7, r7, #15
    dba0:	441d      	add	r5, r3
    dba2:	443e      	add	r6, r7
    dba4:	17db      	asrs	r3, r3, #31
    dba6:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    dbaa:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    dbae:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    dbb2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    dbb6:	4812      	ldr	r0, [pc, #72]	; (dc00 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    dbb8:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    dbbc:	fba2 5201 	umull	r5, r2, r2, r1
    dbc0:	1a89      	subs	r1, r1, r2
    dbc2:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    dbc6:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    dbca:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    dbcc:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    dbce:	42a1      	cmp	r1, r4
    dbd0:	bf28      	it	cs
    dbd2:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    dbd4:	b29b      	uxth	r3, r3
    dbd6:	4299      	cmp	r1, r3
    dbd8:	d009      	beq.n	dbee <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    dbda:	6883      	ldr	r3, [r0, #8]
    dbdc:	075b      	lsls	r3, r3, #29
    dbde:	d4fc      	bmi.n	dbda <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    dbe0:	8201      	strh	r1, [r0, #16]
            success = true;
    dbe2:	2001      	movs	r0, #1
    dbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    dbe6:	f000 b9c3 	b.w	df70 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    dbea:	2000      	movs	r0, #0
    dbec:	4770      	bx	lr
            success = true;
    dbee:	2001      	movs	r0, #1
}
    dbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbf2:	bf00      	nop
    dbf4:	80100201 	.word	0x80100201
    dbf8:	200019e0 	.word	0x200019e0
    dbfc:	00200401 	.word	0x00200401
    dc00:	43002400 	.word	0x43002400

0000dc04 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    dc04:	b538      	push	{r3, r4, r5, lr}
    dc06:	4604      	mov	r4, r0
    dc08:	460d      	mov	r5, r1
    DacInitialize();
    dc0a:	f7ff fe33 	bl	d874 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    dc0e:	4620      	mov	r0, r4
    dc10:	4629      	mov	r1, r5
    dc12:	f000 fc77 	bl	e504 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    dc16:	6920      	ldr	r0, [r4, #16]
    dc18:	07c2      	lsls	r2, r0, #31
    dc1a:	d521      	bpl.n	dc60 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    dc1c:	68e1      	ldr	r1, [r4, #12]
    dc1e:	01c9      	lsls	r1, r1, #7
    dc20:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    dc24:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dc28:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    dc2c:	2101      	movs	r1, #1
    dc2e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    dc32:	f361 1307 	bfi	r3, r1, #4, #4
    dc36:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    dc3a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    dc3c:	07cb      	lsls	r3, r1, #31
    dc3e:	d421      	bmi.n	dc84 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    dc40:	6e23      	ldr	r3, [r4, #96]	; 0x60
    dc42:	01db      	lsls	r3, r3, #7
    dc44:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dc48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dc4c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    dc50:	2101      	movs	r1, #1
    dc52:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    dc56:	f361 0203 	bfi	r2, r1, #0, #4
    dc5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    dc5e:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    dc60:	68e2      	ldr	r2, [r4, #12]
    dc62:	01d2      	lsls	r2, r2, #7
    dc64:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    dc68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dc6c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    dc70:	2101      	movs	r1, #1
    dc72:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    dc76:	f361 0203 	bfi	r2, r1, #0, #4
    dc7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    dc7e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    dc80:	07cb      	lsls	r3, r1, #31
    dc82:	d5dd      	bpl.n	dc40 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    dc84:	6e22      	ldr	r2, [r4, #96]	; 0x60
    dc86:	01d2      	lsls	r2, r2, #7
    dc88:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    dc8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    dc90:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    dc94:	2101      	movs	r1, #1
    dc96:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    dc9a:	f361 1307 	bfi	r3, r1, #4, #4
    dc9e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    dca2:	bd38      	pop	{r3, r4, r5, pc}

0000dca4 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    dca4:	2000      	movs	r0, #0
    dca6:	4770      	bx	lr

0000dca8 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    dca8:	7980      	ldrb	r0, [r0, #6]
    dcaa:	4770      	bx	lr

0000dcac <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    dcac:	2003      	movs	r0, #3
    dcae:	4770      	bx	lr

0000dcb0 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    dcb0:	2000      	movs	r0, #0
    dcb2:	4770      	bx	lr

0000dcb4 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    dcb4:	2000      	movs	r0, #0
    dcb6:	4770      	bx	lr

0000dcb8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    dcba:	7983      	ldrb	r3, [r0, #6]
    dcbc:	428b      	cmp	r3, r1
    dcbe:	d072      	beq.n	dda6 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    dcc0:	2901      	cmp	r1, #1
    dcc2:	460c      	mov	r4, r1
    dcc4:	4605      	mov	r5, r0
    dcc6:	d03c      	beq.n	dd42 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    dcc8:	2902      	cmp	r1, #2
    dcca:	d135      	bne.n	dd38 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    dccc:	4e37      	ldr	r6, [pc, #220]	; (ddac <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    dcce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dcd0:	f3bf 8f5b 	dmb	ish
    dcd4:	e856 2f00 	ldrex	r2, [r6]
    dcd8:	431a      	orrs	r2, r3
    dcda:	e846 2100 	strex	r1, r2, [r6]
    dcde:	2900      	cmp	r1, #0
    dce0:	d1f8      	bne.n	dcd4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    dce2:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    dce6:	3ef4      	subs	r6, #244	; 0xf4
    dce8:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    dcec:	b143      	cbz	r3, dd00 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    dcee:	4b30      	ldr	r3, [pc, #192]	; (ddb0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    dcf0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    dcf2:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    dcf4:	6e53      	ldr	r3, [r2, #100]	; 0x64
    dcf6:	420b      	tst	r3, r1
    dcf8:	d0fc      	beq.n	dcf4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    dcfa:	4628      	mov	r0, r5
    dcfc:	f000 fda6 	bl	e84c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    dd00:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd02:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dd06:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    dd08:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd0c:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd10:	2001      	movs	r0, #1
    dd12:	4098      	lsls	r0, r3
    dd14:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd1c:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    dd20:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    dd22:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    dd26:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd28:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dd2c:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    dd30:	4603      	mov	r3, r0
            m_mode = newMode;
    dd32:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    dd34:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    dd38:	1ae0      	subs	r0, r4, r3
    dd3a:	fab0 f080 	clz	r0, r0
    dd3e:	0940      	lsrs	r0, r0, #5
    dd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    dd42:	6b03      	ldr	r3, [r0, #48]	; 0x30
    dd44:	4e19      	ldr	r6, [pc, #100]	; (ddac <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    dd46:	f3bf 8f5b 	dmb	ish
    dd4a:	43db      	mvns	r3, r3
    dd4c:	e856 2f00 	ldrex	r2, [r6]
    dd50:	401a      	ands	r2, r3
    dd52:	e846 2100 	strex	r1, r2, [r6]
    dd56:	2900      	cmp	r1, #0
    dd58:	d1f8      	bne.n	dd4c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    dd5a:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    dd5e:	3ef4      	subs	r6, #244	; 0xf4
    dd60:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    dd64:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    dd66:	b11b      	cbz	r3, dd70 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    dd68:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d0fb      	beq.n	dd68 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    dd70:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd72:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dd76:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    dd78:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd7c:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd7e:	f003 030f 	and.w	r3, r3, #15
    dd82:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd86:	fa00 f303 	lsl.w	r3, r0, r3
    dd8a:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    dd8c:	4603      	mov	r3, r0
    return (m_mode == newMode);
    dd8e:	1ae0      	subs	r0, r4, r3
    dd90:	4329      	orrs	r1, r5
    dd92:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd96:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    dd9a:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dd9e:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    dda2:	0940      	lsrs	r0, r0, #5
    dda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    dda6:	2001      	movs	r0, #1
}
    dda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddaa:	bf00      	nop
    ddac:	20001ad4 	.word	0x20001ad4
    ddb0:	20001e0c 	.word	0x20001e0c

0000ddb4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    ddb4:	b570      	push	{r4, r5, r6, lr}
    ddb6:	4604      	mov	r4, r0
    ddb8:	4616      	mov	r6, r2
      m_analogValid(false) {}
    ddba:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    ddbc:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    ddc0:	f000 fd12 	bl	e7e8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    ddc4:	2300      	movs	r3, #0
    ddc6:	4a05      	ldr	r2, [pc, #20]	; (dddc <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    ddc8:	6326      	str	r6, [r4, #48]	; 0x30
    ddca:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ddce:	6022      	str	r2, [r4, #0]
    ddd0:	63a3      	str	r3, [r4, #56]	; 0x38
    ddd2:	63e3      	str	r3, [r4, #60]	; 0x3c
    ddd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    ddd8:	4620      	mov	r0, r4
    ddda:	bd70      	pop	{r4, r5, r6, pc}
    dddc:	000234ac 	.word	0x000234ac

0000dde0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    dde0:	7982      	ldrb	r2, [r0, #6]
    dde2:	2a01      	cmp	r2, #1
    dde4:	d004      	beq.n	ddf0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    dde6:	2a02      	cmp	r2, #2
    dde8:	d101      	bne.n	ddee <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    ddea:	f000 bc4d 	b.w	e688 <_ZN9ClearCore9DigitalIn7RefreshEv>
    ddee:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    ddf0:	4a17      	ldr	r2, [pc, #92]	; (de50 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    ddf2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ddf4:	6812      	ldr	r2, [r2, #0]
    ddf6:	4603      	mov	r3, r0
    ddf8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    ddfa:	4208      	tst	r0, r1
    ddfc:	d126      	bne.n	de4c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    ddfe:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    de02:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    de04:	b991      	cbnz	r1, de2c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    de06:	6b99      	ldr	r1, [r3, #56]	; 0x38
    de08:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    de0c:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    de0e:	2c07      	cmp	r4, #7
    de10:	b280      	uxth	r0, r0
    de12:	dc07      	bgt.n	de24 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    de14:	0400      	lsls	r0, r0, #16
    de16:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    de1a:	3408      	adds	r4, #8
        return (m_z >> 16);
    de1c:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    de1e:	6270      	str	r0, [r6, #36]	; 0x24
    de20:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    de24:	2201      	movs	r2, #1
    de26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    de2a:	e000      	b.n	de2e <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    de2c:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    de2e:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    de30:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    de32:	4908      	ldr	r1, [pc, #32]	; (de54 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    de34:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    de38:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    de3c:	b2d8      	uxtb	r0, r3
    de3e:	440a      	add	r2, r1
    de40:	2802      	cmp	r0, #2
    de42:	bfd8      	it	le
    de44:	2300      	movle	r3, #0
    de46:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    de4a:	bc70      	pop	{r4, r5, r6}
    de4c:	4770      	bx	lr
    de4e:	bf00      	nop
    de50:	20001e0c 	.word	0x20001e0c
    de54:	200019e0 	.word	0x200019e0

0000de58 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    de58:	4b29      	ldr	r3, [pc, #164]	; (df00 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    de5a:	b570      	push	{r4, r5, r6, lr}
    de5c:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    de5e:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    de60:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    de62:	4628      	mov	r0, r5
    de64:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    de68:	2301      	movs	r3, #1
    de6a:	2202      	movs	r2, #2
    de6c:	f7ff fc62 	bl	d734 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    de70:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    de74:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    de76:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    de7a:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    de7c:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    de7e:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    de80:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    de82:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    de84:	4620      	mov	r0, r4
    de86:	f000 fb99 	bl	e5bc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    de8a:	6823      	ldr	r3, [r4, #0]
    de8c:	4a1d      	ldr	r2, [pc, #116]	; (df04 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    de8e:	685b      	ldr	r3, [r3, #4]
    de90:	4293      	cmp	r3, r2
    de92:	d130      	bne.n	def6 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    de94:	79a3      	ldrb	r3, [r4, #6]
    de96:	2b01      	cmp	r3, #1
    de98:	d02c      	beq.n	def4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    de9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    de9c:	4a1a      	ldr	r2, [pc, #104]	; (df08 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    de9e:	f3bf 8f5b 	dmb	ish
    dea2:	43db      	mvns	r3, r3
    dea4:	e852 1f00 	ldrex	r1, [r2]
    dea8:	4019      	ands	r1, r3
    deaa:	e842 1000 	strex	r0, r1, [r2]
    deae:	2800      	cmp	r0, #0
    deb0:	d1f8      	bne.n	dea4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    deb2:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    deb6:	3af4      	subs	r2, #244	; 0xf4
    deb8:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    debc:	2101      	movs	r1, #1
    debe:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    dec0:	b11b      	cbz	r3, deca <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    dec2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    dec6:	2b00      	cmp	r3, #0
    dec8:	d0fb      	beq.n	dec2 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    deca:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    decc:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    ded0:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    ded2:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ded6:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    deda:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dedc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dee0:	408b      	lsls	r3, r1
    dee2:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    dee4:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dee6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    deea:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    deee:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    def2:	bd70      	pop	{r4, r5, r6, pc}
    def4:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    def6:	4620      	mov	r0, r4
    def8:	2101      	movs	r1, #1
}
    defa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    defe:	4718      	bx	r3
    df00:	20001e0c 	.word	0x20001e0c
    df04:	0000dcb9 	.word	0x0000dcb9
    df08:	20001ad4 	.word	0x20001ad4

0000df0c <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    df0c:	7982      	ldrb	r2, [r0, #6]
    df0e:	2a01      	cmp	r2, #1
    df10:	d005      	beq.n	df1e <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    df12:	2a02      	cmp	r2, #2
    df14:	d101      	bne.n	df1a <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    df16:	f000 bb3d 	b.w	e594 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    df1a:	2000      	movs	r0, #0
    df1c:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    df1e:	4b0b      	ldr	r3, [pc, #44]	; (df4c <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    df20:	b510      	push	{r4, lr}
    df22:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    df24:	6818      	ldr	r0, [r3, #0]
    df26:	f003 fd8d 	bl	11a44 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    df2a:	b958      	cbnz	r0, df44 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    df2c:	4b08      	ldr	r3, [pc, #32]	; (df50 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    df2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    df30:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    df32:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    df34:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    df38:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    df3a:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    df3e:	4118      	asrs	r0, r3
    df40:	b200      	sxth	r0, r0
    df42:	bd10      	pop	{r4, pc}
                state = -1;
    df44:	f04f 30ff 	mov.w	r0, #4294967295
}
    df48:	bd10      	pop	{r4, pc}
    df4a:	bf00      	nop
    df4c:	20001f28 	.word	0x20001f28
    df50:	20001e0c 	.word	0x20001e0c

0000df54 <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    df54:	7980      	ldrb	r0, [r0, #6]
    df56:	4770      	bx	lr

0000df58 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    df58:	2001      	movs	r0, #1
    df5a:	4770      	bx	lr

0000df5c <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    df5c:	7980      	ldrb	r0, [r0, #6]
    df5e:	2804      	cmp	r0, #4
    df60:	bf1d      	ittte	ne
    df62:	3806      	subne	r0, #6
    df64:	fab0 f080 	clzne	r0, r0
    df68:	0940      	lsrne	r0, r0, #5
    df6a:	2001      	moveq	r0, #1
    }
    df6c:	4770      	bx	lr
    df6e:	bf00      	nop

0000df70 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    df70:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    df72:	2300      	movs	r3, #0
    switch (m_mode) {
    df74:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    df76:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    df7a:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    df7e:	d02a      	beq.n	dfd6 <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    df80:	2a06      	cmp	r2, #6
    df82:	d126      	bne.n	dfd2 <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    df84:	b28b      	uxth	r3, r1
    df86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    df8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    df8e:	bf28      	it	cs
    df90:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    df92:	b470      	push	{r4, r5, r6}
    df94:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    df96:	2b00      	cmp	r3, #0
    df98:	d040      	beq.n	e01c <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    df9a:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    df9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    df9e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    dfa2:	18d6      	adds	r6, r2, r3
    dfa4:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    dfa8:	42ac      	cmp	r4, r5
    dfaa:	d008      	beq.n	dfbe <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    dfac:	2b00      	cmp	r3, #0
    dfae:	bf0c      	ite	eq
    dfb0:	2440      	moveq	r4, #64	; 0x40
    dfb2:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    dfb4:	6913      	ldr	r3, [r2, #16]
    dfb6:	4223      	tst	r3, r4
    dfb8:	d1fc      	bne.n	dfb4 <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    dfba:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    dfbe:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dfc0:	4b18      	ldr	r3, [pc, #96]	; (e024 <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    dfc2:	f002 020f 	and.w	r2, r2, #15
    dfc6:	4413      	add	r3, r2
    dfc8:	2001      	movs	r0, #1
    dfca:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    dfce:	bc70      	pop	{r4, r5, r6}
    dfd0:	4770      	bx	lr
    bool success = false;
    dfd2:	4618      	mov	r0, r3
    dfd4:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    dfd6:	1c0b      	adds	r3, r1, #0
    dfd8:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    dfdc:	bf18      	it	ne
    dfde:	2301      	movne	r3, #1
    dfe0:	429a      	cmp	r2, r3
    dfe2:	d004      	beq.n	dfee <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dfe4:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    dfe6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    dfea:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    dfee:	b121      	cbz	r1, dffa <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    dff0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    dff4:	fab1 f181 	clz	r1, r1
    dff8:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    dffa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    dffe:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e000:	428b      	cmp	r3, r1
    e002:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e004:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e008:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e00c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e010:	f04f 0001 	mov.w	r0, #1
    e014:	bf14      	ite	ne
    e016:	619a      	strne	r2, [r3, #24]
    e018:	615a      	streq	r2, [r3, #20]
    e01a:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e01c:	43cd      	mvns	r5, r1
    e01e:	b2ed      	uxtb	r5, r5
    e020:	e7bc      	b.n	df9c <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    e022:	bf00      	nop
    e024:	200019e0 	.word	0x200019e0

0000e028 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    e028:	7983      	ldrb	r3, [r0, #6]
    e02a:	428b      	cmp	r3, r1
    e02c:	f000 80cb 	beq.w	e1c6 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    e034:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e036:	b082      	sub	sp, #8
    e038:	4604      	mov	r4, r0
    e03a:	460d      	mov	r5, r1
    switch (newMode) {
    e03c:	f000 8087 	beq.w	e14e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    e040:	2906      	cmp	r1, #6
    e042:	d008      	beq.n	e056 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e044:	2902      	cmp	r1, #2
    e046:	d033      	beq.n	e0b0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    e048:	1ae8      	subs	r0, r5, r3
    e04a:	fab0 f080 	clz	r0, r0
    e04e:	0940      	lsrs	r0, r0, #5
}
    e050:	b002      	add	sp, #8
    e052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    e056:	6803      	ldr	r3, [r0, #0]
    e058:	4a79      	ldr	r2, [pc, #484]	; (e240 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    e05a:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    e05c:	71a1      	strb	r1, [r4, #6]
    e05e:	4293      	cmp	r3, r2
    e060:	f040 80b3 	bne.w	e1ca <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e064:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e066:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e06a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    e06e:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e070:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e072:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    e076:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    e07a:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e07e:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e080:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e084:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e086:	429a      	cmp	r2, r3
    e088:	d008      	beq.n	e09c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e08a:	2e00      	cmp	r6, #0
    e08c:	bf0c      	ite	eq
    e08e:	2640      	moveq	r6, #64	; 0x40
    e090:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e092:	690a      	ldr	r2, [r1, #16]
    e094:	4232      	tst	r2, r6
    e096:	d1fc      	bne.n	e092 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e098:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    e09c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e0a0:	4e68      	ldr	r6, [pc, #416]	; (e244 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e0a2:	f001 020f 	and.w	r2, r1, #15
    e0a6:	18b3      	adds	r3, r6, r2
    e0a8:	2000      	movs	r0, #0
    e0aa:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    e0ae:	e093      	b.n	e1d8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    e0b0:	2300      	movs	r3, #0
    e0b2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    e0b6:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    e0b8:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    e0bc:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    e0c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e0c2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e0c4:	01db      	lsls	r3, r3, #7
    e0c6:	2a00      	cmp	r2, #0
    e0c8:	d177      	bne.n	e1ba <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    e0ca:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e0ce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e0d2:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e0d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e0d8:	4e5a      	ldr	r6, [pc, #360]	; (e244 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e0da:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e0dc:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e0e0:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e0e4:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e0e8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e0ec:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e0f0:	f04f 0e01 	mov.w	lr, #1
    e0f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e0f8:	443b      	add	r3, r7
    e0fa:	fa0e f702 	lsl.w	r7, lr, r2
    e0fe:	ea28 0707 	bic.w	r7, r8, r7
    e102:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e106:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e10a:	ea6f 070c 	mvn.w	r7, ip
    e10e:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e110:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e114:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e118:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e11c:	f36f 0200 	bfc	r2, #0, #1
    e120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    e124:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e128:	2b00      	cmp	r3, #0
    e12a:	f000 8086 	beq.w	e23a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e12e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e132:	4845      	ldr	r0, [pc, #276]	; (e248 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e134:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    e138:	2200      	movs	r2, #0
    e13a:	401f      	ands	r7, r3
    e13c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e140:	6800      	ldr	r0, [r0, #0]
    e142:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    e146:	f003 fe71 	bl	11e2c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    e14a:	79a3      	ldrb	r3, [r4, #6]
    e14c:	e77c      	b.n	e048 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e14e:	220c      	movs	r2, #12
            State(m_outState);
    e150:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e152:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    e156:	2600      	movs	r6, #0
            m_mode = newMode;
    e158:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    e15a:	695b      	ldr	r3, [r3, #20]
    e15c:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    e160:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    e164:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    e166:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e168:	4936      	ldr	r1, [pc, #216]	; (e244 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e16a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    e16c:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e16e:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e172:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e176:	f04f 0e01 	mov.w	lr, #1
    e17a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    e17e:	fa0e f002 	lsl.w	r0, lr, r2
    e182:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e186:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e18a:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e18e:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e192:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e196:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e19a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    e19e:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1a2:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e1a6:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    e1aa:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e1ae:	f366 0200 	bfi	r2, r6, #0, #1
    e1b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e1b6:	79a3      	ldrb	r3, [r4, #6]
            break;
    e1b8:	e746      	b.n	e048 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e1ba:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e1be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e1c2:	6191      	str	r1, [r2, #24]
    e1c4:	e786      	b.n	e0d4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    e1c6:	2001      	movs	r0, #1
    e1c8:	4770      	bx	lr
            State(0);
    e1ca:	2100      	movs	r1, #0
    e1cc:	4798      	blx	r3
    e1ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e1d2:	4e1c      	ldr	r6, [pc, #112]	; (e244 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e1d4:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    e1d8:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e1dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e1de:	9301      	str	r3, [sp, #4]
    e1e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e1e2:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e1e4:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e1e8:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    e1ec:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    e1f0:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e1f2:	fa0c fe02 	lsl.w	lr, ip, r2
    e1f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1fa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e1fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e202:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    e206:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e208:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e20c:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e210:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e214:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e218:	ea42 020c 	orr.w	r2, r2, ip
    e21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    e220:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e224:	2b00      	cmp	r3, #0
    e226:	d090      	beq.n	e14a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e228:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e22c:	4806      	ldr	r0, [pc, #24]	; (e248 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e22e:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    e232:	2200      	movs	r2, #0
    e234:	ea23 0707 	bic.w	r7, r3, r7
    e238:	e780      	b.n	e13c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    e23a:	2302      	movs	r3, #2
    e23c:	e704      	b.n	e048 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e23e:	bf00      	nop
    e240:	0000df71 	.word	0x0000df71
    e244:	200019e0 	.word	0x200019e0
    e248:	20001f28 	.word	0x20001f28

0000e24c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    e24c:	b570      	push	{r4, r5, r6, lr}
    e24e:	461d      	mov	r5, r3
    e250:	4604      	mov	r4, r0
    e252:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    e256:	f000 fac7 	bl	e7e8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    e25a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    e25e:	4a14      	ldr	r2, [pc, #80]	; (e2b0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    e260:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    e262:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    e264:	78aa      	ldrb	r2, [r5, #2]
    e266:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    e268:	2301      	movs	r3, #1
    e26a:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    e26c:	2200      	movs	r2, #0
    e26e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    e272:	63a3      	str	r3, [r4, #56]	; 0x38
    e274:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    e278:	7aeb      	ldrb	r3, [r5, #11]
    e27a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    e27e:	230c      	movs	r3, #12
    e280:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e284:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e288:	64a2      	str	r2, [r4, #72]	; 0x48
    e28a:	64e2      	str	r2, [r4, #76]	; 0x4c
    e28c:	6522      	str	r2, [r4, #80]	; 0x50
    e28e:	6562      	str	r2, [r4, #84]	; 0x54
    e290:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    e294:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    e298:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    e29c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    e2a0:	7aaa      	ldrb	r2, [r5, #10]
    e2a2:	4b04      	ldr	r3, [pc, #16]	; (e2b4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    e2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e2a8:	6423      	str	r3, [r4, #64]	; 0x40
}
    e2aa:	4620      	mov	r0, r4
    e2ac:	bd70      	pop	{r4, r5, r6, pc}
    e2ae:	bf00      	nop
    e2b0:	000234dc 	.word	0x000234dc
    e2b4:	00023504 	.word	0x00023504

0000e2b8 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2ba:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    e2bc:	f000 f9e4 	bl	e688 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    e2c0:	79a3      	ldrb	r3, [r4, #6]
    e2c2:	2b04      	cmp	r3, #4
    e2c4:	d12d      	bne.n	e322 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    e2c6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e2ca:	bb5b      	cbnz	r3, e324 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    e2cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e2d0:	2b00      	cmp	r3, #0
    e2d2:	f040 809d 	bne.w	e410 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    e2d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e2da:	220c      	movs	r2, #12
    e2dc:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    e2e0:	b19b      	cbz	r3, e30a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e2e2:	4d75      	ldr	r5, [pc, #468]	; (e4b8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    e2e4:	68a7      	ldr	r7, [r4, #8]
    e2e6:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e2ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e2ee:	4873      	ldr	r0, [pc, #460]	; (e4bc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    e2f0:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e2f2:	2601      	movs	r6, #1
    e2f4:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    e2f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e2fc:	fa06 f101 	lsl.w	r1, r6, r1
    e300:	6800      	ldr	r0, [r0, #0]
    e302:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    e306:	f003 fd91 	bl	11e2c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    e30a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    e30e:	b143      	cbz	r3, e322 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    e310:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    e314:	b303      	cbz	r3, e358 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    e316:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    e31a:	429a      	cmp	r2, r3
    e31c:	db1c      	blt.n	e358 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    e31e:	4293      	cmp	r3, r2
    e320:	d070      	beq.n	e404 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    e322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    e324:	3b01      	subs	r3, #1
    e326:	b29b      	uxth	r3, r3
    e328:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e32c:	2b00      	cmp	r3, #0
    e32e:	d1ec      	bne.n	e30a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e330:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    e334:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e338:	429a      	cmp	r2, r3
    e33a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e33c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e33e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e342:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e346:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e34a:	bf14      	ite	ne
    e34c:	619a      	strne	r2, [r3, #24]
    e34e:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e350:	230c      	movs	r3, #12
    e352:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e356:	e7d8      	b.n	e30a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    e358:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    e35c:	bb5b      	cbnz	r3, e3b6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    e35e:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    e362:	2b00      	cmp	r3, #0
    e364:	d14e      	bne.n	e404 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    e366:	4a56      	ldr	r2, [pc, #344]	; (e4c0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e368:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e36a:	6813      	ldr	r3, [r2, #0]
    e36c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e36e:	1a1b      	subs	r3, r3, r0
    e370:	428b      	cmp	r3, r1
    e372:	d3d6      	bcc.n	e322 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    e374:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e378:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    e37c:	6812      	ldr	r2, [r2, #0]
    e37e:	6522      	str	r2, [r4, #80]	; 0x50
    e380:	fab3 f383 	clz	r3, r3
    e384:	095b      	lsrs	r3, r3, #5
    e386:	428b      	cmp	r3, r1
    e388:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e38a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e38e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e392:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e396:	f04f 020c 	mov.w	r2, #12
    e39a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    e39e:	f04f 0001 	mov.w	r0, #1
    e3a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e3a4:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    e3a8:	bf14      	ite	ne
    e3aa:	619a      	strne	r2, [r3, #24]
    e3ac:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    e3ae:	2301      	movs	r3, #1
    e3b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    e3b6:	4a42      	ldr	r2, [pc, #264]	; (e4c0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e3b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e3ba:	6813      	ldr	r3, [r2, #0]
    e3bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e3be:	1a1b      	subs	r3, r3, r0
    e3c0:	428b      	cmp	r3, r1
    e3c2:	d3ae      	bcc.n	e322 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    e3c4:	6812      	ldr	r2, [r2, #0]
    e3c6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e3ca:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    e3cc:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e3ce:	220c      	movs	r2, #12
                        m_pulseValue = false;
    e3d0:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e3d4:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    e3d8:	2b00      	cmp	r3, #0
    e3da:	d15b      	bne.n	e494 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    e3dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e3de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e3e0:	01db      	lsls	r3, r3, #7
    e3e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e3e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e3ea:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    e3ec:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    e3f0:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    e3f4:	3301      	adds	r3, #1
                        m_outState = false;
    e3f6:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    e3f8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    e3fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    e400:	2a00      	cmp	r2, #0
    e402:	d08e      	beq.n	e322 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    e404:	2300      	movs	r3, #0
    e406:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    e40a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    e40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    e410:	4620      	mov	r0, r4
    e412:	f000 fa0d 	bl	e830 <_ZN9ClearCore9DigitalIn7StateRTEv>
    e416:	2800      	cmp	r0, #0
    e418:	f47f af5d 	bne.w	e2d6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    e41c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    e420:	2b00      	cmp	r3, #0
    e422:	f43f af72 	beq.w	e30a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e426:	3b01      	subs	r3, #1
    e428:	b2db      	uxtb	r3, r3
    e42a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e42e:	2b00      	cmp	r3, #0
    e430:	f47f af6b 	bne.w	e30a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    e434:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e438:	b9e6      	cbnz	r6, e474 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    e43a:	4a1f      	ldr	r2, [pc, #124]	; (e4b8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e43c:	491f      	ldr	r1, [pc, #124]	; (e4bc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    e43e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    e442:	68a3      	ldr	r3, [r4, #8]
    e444:	680f      	ldr	r7, [r1, #0]
    e446:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    e44a:	2501      	movs	r5, #1
    e44c:	4303      	orrs	r3, r0
    e44e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e452:	fa05 f101 	lsl.w	r1, r5, r1
    e456:	4638      	mov	r0, r7
    e458:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e45c:	462a      	mov	r2, r5
    e45e:	f003 fce5 	bl	11e2c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    e462:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e466:	fa05 f202 	lsl.w	r2, r5, r2
    e46a:	4638      	mov	r0, r7
    e46c:	4631      	mov	r1, r6
    e46e:	b2d2      	uxtb	r2, r2
    e470:	f003 fb30 	bl	11ad4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e474:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e478:	b9ab      	cbnz	r3, e4a6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    e47a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e47c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e47e:	01db      	lsls	r3, r3, #7
    e480:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e484:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e488:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    e48a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e48e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e492:	e73a      	b.n	e30a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e494:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e496:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e498:	01db      	lsls	r3, r3, #7
    e49a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e49e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e4a2:	619a      	str	r2, [r3, #24]
    e4a4:	e7a2      	b.n	e3ec <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    e4a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e4a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e4aa:	01db      	lsls	r3, r3, #7
    e4ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e4b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e4b4:	619a      	str	r2, [r3, #24]
    e4b6:	e7e8      	b.n	e48a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    e4b8:	200019e0 	.word	0x200019e0
    e4bc:	20001f28 	.word	0x20001f28
    e4c0:	20001bf0 	.word	0x20001bf0

0000e4c4 <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    e4c4:	7983      	ldrb	r3, [r0, #6]
    e4c6:	2b04      	cmp	r3, #4
    e4c8:	d014      	beq.n	e4f4 <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    e4ca:	2b06      	cmp	r3, #6
    e4cc:	d005      	beq.n	e4da <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    e4ce:	2b02      	cmp	r3, #2
    e4d0:	d001      	beq.n	e4d6 <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    e4d2:	2000      	movs	r0, #0
    e4d4:	4770      	bx	lr
            state = DigitalIn::State();
    e4d6:	f000 b85d 	b.w	e594 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    e4da:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e4dc:	b173      	cbz	r3, e4fc <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e4de:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    e4e2:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e4e6:	4413      	add	r3, r2
    e4e8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    e4ec:	b929      	cbnz	r1, e4fa <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e4ee:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    e4f2:	4770      	bx	lr
            state = m_outState;
    e4f4:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    e4f8:	4770      	bx	lr
    e4fa:	4770      	bx	lr
    int16_t state = -1;
    e4fc:	f04f 30ff 	mov.w	r0, #4294967295
}
    e500:	4770      	bx	lr
    e502:	bf00      	nop

0000e504 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e504:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e506:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    e508:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e50a:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e50c:	4604      	mov	r4, r0
    m_outState = false;
    e50e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e512:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e516:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e51a:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e51e:	d41a      	bmi.n	e556 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e520:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e522:	01d2      	lsls	r2, r2, #7
    e524:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e528:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e52c:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e530:	2004      	movs	r0, #4
    e532:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e536:	f360 0203 	bfi	r2, r0, #0, #4
    e53a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e53e:	4620      	mov	r0, r4
    e540:	f000 f83c 	bl	e5bc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e544:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e546:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e548:	01db      	lsls	r3, r3, #7
    e54a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e54e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e552:	609a      	str	r2, [r3, #8]
    e554:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e556:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e558:	01c0      	lsls	r0, r0, #7
    e55a:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e55e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e562:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e566:	2004      	movs	r0, #4
    e568:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e56c:	f360 1307 	bfi	r3, r0, #4, #4
    e570:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e574:	e7e3      	b.n	e53e <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e576:	bf00      	nop

0000e578 <_ZN9ClearCore9Connector4ModeEv>:
    }
    e578:	7980      	ldrb	r0, [r0, #6]
    e57a:	4770      	bx	lr

0000e57c <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    e57c:	7980      	ldrb	r0, [r0, #6]
    e57e:	4770      	bx	lr

0000e580 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    e580:	2902      	cmp	r1, #2
            m_mode = newMode;
    e582:	bf06      	itte	eq
    e584:	7181      	strbeq	r1, [r0, #6]
            return true;
    e586:	2001      	moveq	r0, #1
            return false;
    e588:	2000      	movne	r0, #0
    }
    e58a:	4770      	bx	lr

0000e58c <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    e58c:	2000      	movs	r0, #0
    e58e:	4770      	bx	lr

0000e590 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    e590:	2000      	movs	r0, #0
    e592:	4770      	bx	lr

0000e594 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    e594:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e596:	b113      	cbz	r3, e59e <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    e598:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    e59c:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e59e:	4b06      	ldr	r3, [pc, #24]	; (e5b8 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    e5a0:	68c1      	ldr	r1, [r0, #12]
    e5a2:	681a      	ldr	r2, [r3, #0]
    e5a4:	6943      	ldr	r3, [r0, #20]
    e5a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e5aa:	6812      	ldr	r2, [r2, #0]
    e5ac:	421a      	tst	r2, r3
    e5ae:	bf0c      	ite	eq
    e5b0:	2001      	moveq	r0, #1
    e5b2:	2000      	movne	r0, #0
    e5b4:	4770      	bx	lr
    e5b6:	bf00      	nop
    e5b8:	20001f18 	.word	0x20001f18

0000e5bc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    e5bc:	4b2e      	ldr	r3, [pc, #184]	; (e678 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    e5be:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    e5c0:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e5c4:	68c3      	ldr	r3, [r0, #12]
    e5c6:	6904      	ldr	r4, [r0, #16]
    e5c8:	01da      	lsls	r2, r3, #7
    e5ca:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    e5ce:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e5d0:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    e5d4:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    e5d8:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    e5da:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e5de:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    e5e2:	d034      	beq.n	e64e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    e5e4:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    e5e8:	f366 1707 	bfi	r7, r6, #4, #4
    e5ec:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e5f0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e5f4:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e5f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e5fa:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e5fc:	2d00      	cmp	r5, #0
    e5fe:	d134      	bne.n	e66a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    e600:	2402      	movs	r4, #2
    e602:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e606:	4a1d      	ldr	r2, [pc, #116]	; (e67c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e608:	6884      	ldr	r4, [r0, #8]
    e60a:	6812      	ldr	r2, [r2, #0]
    e60c:	4e1c      	ldr	r6, [pc, #112]	; (e680 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    e60e:	3306      	adds	r3, #6
    e610:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e612:	f1a3 050c 	sub.w	r5, r3, #12
    e616:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e618:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e61a:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    e61c:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    e61e:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    e620:	6242      	str	r2, [r0, #36]	; 0x24
    e622:	43e4      	mvns	r4, r4
    e624:	f3bf 8f5b 	dmb	ish
    e628:	e856 3f00 	ldrex	r3, [r6]
    e62c:	4023      	ands	r3, r4
    e62e:	e846 3200 	strex	r2, r3, [r6]
    e632:	2a00      	cmp	r2, #0
    e634:	d1f8      	bne.n	e628 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    e636:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    e63a:	6803      	ldr	r3, [r0, #0]
    e63c:	4a11      	ldr	r2, [pc, #68]	; (e684 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    e63e:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    e640:	8081      	strh	r1, [r0, #4]
    e642:	4293      	cmp	r3, r2
    e644:	d115      	bne.n	e672 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    e646:	2302      	movs	r3, #2
    e648:	7183      	strb	r3, [r0, #6]
}
    e64a:	bcf0      	pop	{r4, r5, r6, r7}
    e64c:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    e64e:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    e652:	f367 0603 	bfi	r6, r7, #0, #4
    e656:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e65a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    e65e:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e660:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e664:	4422      	add	r2, r4
    if (m_interruptAvail) {
    e666:	2d00      	cmp	r5, #0
    e668:	d0ca      	beq.n	e600 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    e66a:	2403      	movs	r4, #3
    e66c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    e670:	e7c9      	b.n	e606 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    e672:	2102      	movs	r1, #2
}
    e674:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    e676:	4718      	bx	r3
    e678:	00010003 	.word	0x00010003
    e67c:	20001f18 	.word	0x20001f18
    e680:	20001ad4 	.word	0x20001ad4
    e684:	0000e581 	.word	0x0000e581

0000e688 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    e688:	69c2      	ldr	r2, [r0, #28]
    e68a:	6943      	ldr	r3, [r0, #20]
    e68c:	6812      	ldr	r2, [r2, #0]
    e68e:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    e690:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    e692:	d005      	beq.n	e6a0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    e694:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    e696:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    e698:	2a00      	cmp	r2, #0
    e69a:	d039      	beq.n	e710 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    e69c:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    e6a0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e6a2:	2a00      	cmp	r2, #0
    e6a4:	d0fa      	beq.n	e69c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    e6a6:	3a01      	subs	r2, #1
    e6a8:	b292      	uxth	r2, r2
    e6aa:	8582      	strh	r2, [r0, #44]	; 0x2c
    e6ac:	2a00      	cmp	r2, #0
    e6ae:	d1f5      	bne.n	e69c <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e6b0:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e6b2:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e6b4:	6809      	ldr	r1, [r1, #0]
    e6b6:	400b      	ands	r3, r1
    e6b8:	2b00      	cmp	r3, #0
    e6ba:	bf0c      	ite	eq
    e6bc:	2301      	moveq	r3, #1
    e6be:	2300      	movne	r3, #0
    e6c0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e6c4:	d053      	beq.n	e76e <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e6c6:	f3bf 8f5b 	dmb	ish
    e6ca:	4b41      	ldr	r3, [pc, #260]	; (e7d0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e6cc:	43d2      	mvns	r2, r2
    e6ce:	e853 1f00 	ldrex	r1, [r3]
    e6d2:	4011      	ands	r1, r2
    e6d4:	e843 1e00 	strex	lr, r1, [r3]
    e6d8:	f1be 0f00 	cmp.w	lr, #0
    e6dc:	d1f7      	bne.n	e6ce <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    e6de:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    e6e2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e6e6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e6ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d14a      	bne.n	e786 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e6f0:	f3bf 8f5b 	dmb	ish
    e6f4:	2301      	movs	r3, #1
    e6f6:	408b      	lsls	r3, r1
    e6f8:	43db      	mvns	r3, r3
    e6fa:	e852 1f00 	ldrex	r1, [r2]
    e6fe:	4019      	ands	r1, r3
    e700:	e842 1000 	strex	r0, r1, [r2]
    e704:	2800      	cmp	r0, #0
    e706:	d1f8      	bne.n	e6fa <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    e708:	f3bf 8f5b 	dmb	ish
}
    e70c:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e710:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e712:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e714:	6809      	ldr	r1, [r1, #0]
    e716:	400b      	ands	r3, r1
    e718:	2b00      	cmp	r3, #0
    e71a:	bf0c      	ite	eq
    e71c:	2301      	moveq	r3, #1
    e71e:	2300      	movne	r3, #0
    e720:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e724:	d047      	beq.n	e7b6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e726:	f3bf 8f5b 	dmb	ish
    e72a:	4b29      	ldr	r3, [pc, #164]	; (e7d0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e72c:	43d2      	mvns	r2, r2
    e72e:	e853 1f00 	ldrex	r1, [r3]
    e732:	4011      	ands	r1, r2
    e734:	e843 1e00 	strex	lr, r1, [r3]
    e738:	f1be 0f00 	cmp.w	lr, #0
    e73c:	d1f7      	bne.n	e72e <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    e73e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e742:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e746:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e74a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e74c:	bb3b      	cbnz	r3, e79e <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e74e:	f3bf 8f5b 	dmb	ish
    e752:	2301      	movs	r3, #1
    e754:	408b      	lsls	r3, r1
    e756:	43db      	mvns	r3, r3
    e758:	e852 1f00 	ldrex	r1, [r2]
    e75c:	4019      	ands	r1, r3
    e75e:	e842 1000 	strex	r0, r1, [r2]
    e762:	2800      	cmp	r0, #0
    e764:	d1f8      	bne.n	e758 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    e766:	f3bf 8f5b 	dmb	ish
}
    e76a:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e76e:	4b18      	ldr	r3, [pc, #96]	; (e7d0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e770:	f3bf 8f5b 	dmb	ish
    e774:	e853 1f00 	ldrex	r1, [r3]
    e778:	4311      	orrs	r1, r2
    e77a:	e843 1e00 	strex	lr, r1, [r3]
    e77e:	f1be 0f00 	cmp.w	lr, #0
    e782:	d0ac      	beq.n	e6de <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    e784:	e7f6      	b.n	e774 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e786:	2301      	movs	r3, #1
    e788:	408b      	lsls	r3, r1
    e78a:	f3bf 8f5b 	dmb	ish
    e78e:	e852 1f00 	ldrex	r1, [r2]
    e792:	4319      	orrs	r1, r3
    e794:	e842 1000 	strex	r0, r1, [r2]
    e798:	2800      	cmp	r0, #0
    e79a:	d0e4      	beq.n	e766 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e79c:	e7f7      	b.n	e78e <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    e79e:	2301      	movs	r3, #1
    e7a0:	408b      	lsls	r3, r1
    e7a2:	f3bf 8f5b 	dmb	ish
    e7a6:	e852 1f00 	ldrex	r1, [r2]
    e7aa:	4319      	orrs	r1, r3
    e7ac:	e842 1000 	strex	r0, r1, [r2]
    e7b0:	2800      	cmp	r0, #0
    e7b2:	d0d8      	beq.n	e766 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    e7b4:	e7f7      	b.n	e7a6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    e7b6:	4b06      	ldr	r3, [pc, #24]	; (e7d0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    e7b8:	f3bf 8f5b 	dmb	ish
    e7bc:	e853 1f00 	ldrex	r1, [r3]
    e7c0:	4311      	orrs	r1, r2
    e7c2:	e843 1e00 	strex	lr, r1, [r3]
    e7c6:	f1be 0f00 	cmp.w	lr, #0
    e7ca:	d0b8      	beq.n	e73e <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    e7cc:	e7f6      	b.n	e7bc <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    e7ce:	bf00      	nop
    e7d0:	20001ad4 	.word	0x20001ad4

0000e7d4 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    e7d4:	4a03      	ldr	r2, [pc, #12]	; (e7e4 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    e7d6:	6002      	str	r2, [r0, #0]
    e7d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e7dc:	2200      	movs	r2, #0
    e7de:	8081      	strh	r1, [r0, #4]
    e7e0:	7182      	strb	r2, [r0, #6]
    e7e2:	4770      	bx	lr
    e7e4:	0002352c 	.word	0x0002352c

0000e7e8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    e7e8:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    e7ea:	f992 4001 	ldrsb.w	r4, [r2, #1]
    e7ee:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    e7f0:	4d0d      	ldr	r5, [pc, #52]	; (e828 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    e7f2:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    e7f4:	2400      	movs	r4, #0
    e7f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e7fa:	8086      	strh	r6, [r0, #4]
    e7fc:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    e7fe:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    e800:	7895      	ldrb	r5, [r2, #2]
    e802:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    e804:	2101      	movs	r1, #1
    e806:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    e808:	6141      	str	r1, [r0, #20]
    e80a:	78d1      	ldrb	r1, [r2, #3]
    e80c:	7601      	strb	r1, [r0, #24]
    e80e:	7911      	ldrb	r1, [r2, #4]
    e810:	4a06      	ldr	r2, [pc, #24]	; (e82c <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    e812:	61c4      	str	r4, [r0, #28]
    e814:	6204      	str	r4, [r0, #32]
    e816:	6244      	str	r4, [r0, #36]	; 0x24
    e818:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    e81c:	7641      	strb	r1, [r0, #25]
    e81e:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    e822:	bc70      	pop	{r4, r5, r6}
    e824:	4770      	bx	lr
    e826:	bf00      	nop
    e828:	0002355c 	.word	0x0002355c
    e82c:	00010003 	.word	0x00010003

0000e830 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    e830:	4b05      	ldr	r3, [pc, #20]	; (e848 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    e832:	68c1      	ldr	r1, [r0, #12]
    e834:	681a      	ldr	r2, [r3, #0]
    e836:	6943      	ldr	r3, [r0, #20]
    e838:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    e83c:	6812      	ldr	r2, [r2, #0]
    e83e:	421a      	tst	r2, r3
}
    e840:	bf0c      	ite	eq
    e842:	2001      	moveq	r0, #1
    e844:	2000      	movne	r0, #0
    e846:	4770      	bx	lr
    e848:	20001f18 	.word	0x20001f18

0000e84c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e84c:	6a03      	ldr	r3, [r0, #32]
    e84e:	6941      	ldr	r1, [r0, #20]
    e850:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    e852:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e854:	400b      	ands	r3, r1
    e856:	2b00      	cmp	r3, #0
    e858:	bf0c      	ite	eq
    e85a:	2301      	moveq	r3, #1
    e85c:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    e85e:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    e860:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    e864:	d023      	beq.n	e8ae <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e866:	f3bf 8f5b 	dmb	ish
    e86a:	4b1e      	ldr	r3, [pc, #120]	; (e8e4 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e86c:	43d2      	mvns	r2, r2
    e86e:	e853 1f00 	ldrex	r1, [r3]
    e872:	4011      	ands	r1, r2
    e874:	e843 1e00 	strex	lr, r1, [r3]
    e878:	f1be 0f00 	cmp.w	lr, #0
    e87c:	d1f7      	bne.n	e86e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    e87e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    e882:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e886:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    e88a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    e88c:	b9db      	cbnz	r3, e8c6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e88e:	f3bf 8f5b 	dmb	ish
    e892:	2301      	movs	r3, #1
    e894:	408b      	lsls	r3, r1
    e896:	43db      	mvns	r3, r3
    e898:	e852 1f00 	ldrex	r1, [r2]
    e89c:	4019      	ands	r1, r3
    e89e:	e842 1000 	strex	r0, r1, [r2]
    e8a2:	2800      	cmp	r0, #0
    e8a4:	d1f8      	bne.n	e898 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    e8a6:	f3bf 8f5b 	dmb	ish
    e8aa:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e8ae:	4b0d      	ldr	r3, [pc, #52]	; (e8e4 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    e8b0:	f3bf 8f5b 	dmb	ish
    e8b4:	e853 1f00 	ldrex	r1, [r3]
    e8b8:	4311      	orrs	r1, r2
    e8ba:	e843 1e00 	strex	lr, r1, [r3]
    e8be:	f1be 0f00 	cmp.w	lr, #0
    e8c2:	d0dc      	beq.n	e87e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    e8c4:	e7f6      	b.n	e8b4 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    e8c6:	2301      	movs	r3, #1
    e8c8:	408b      	lsls	r3, r1
    e8ca:	f3bf 8f5b 	dmb	ish
    e8ce:	e852 1f00 	ldrex	r1, [r2]
    e8d2:	4319      	orrs	r1, r3
    e8d4:	e842 1000 	strex	r0, r1, [r2]
    e8d8:	2800      	cmp	r0, #0
    e8da:	d1f8      	bne.n	e8ce <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    e8dc:	f3bf 8f5b 	dmb	ish
    e8e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e8e4:	20001ad4 	.word	0x20001ad4

0000e8e8 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e8e8:	7980      	ldrb	r0, [r0, #6]
    e8ea:	4770      	bx	lr

0000e8ec <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e8ec:	2005      	movs	r0, #5
    e8ee:	4770      	bx	lr

0000e8f0 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e8f0:	7980      	ldrb	r0, [r0, #6]
    e8f2:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e8f4:	2804      	cmp	r0, #4
    e8f6:	bf8c      	ite	hi
    e8f8:	2000      	movhi	r0, #0
    e8fa:	2001      	movls	r0, #1
    e8fc:	4770      	bx	lr
    e8fe:	bf00      	nop

0000e900 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e900:	b5f0      	push	{r4, r5, r6, r7, lr}
    e902:	b083      	sub	sp, #12
    e904:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e908:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e90a:	4604      	mov	r4, r0
    e90c:	9d08      	ldr	r5, [sp, #32]
    e90e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e910:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e914:	f7ff fc9a 	bl	e24c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e918:	2300      	movs	r3, #0
    e91a:	490f      	ldr	r1, [pc, #60]	; (e958 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e91c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e920:	f640 42cc 	movw	r2, #3276	; 0xccc
    e924:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e928:	6663      	str	r3, [r4, #100]	; 0x64
    e92a:	66a3      	str	r3, [r4, #104]	; 0x68
    e92c:	66e3      	str	r3, [r4, #108]	; 0x6c
    e92e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e932:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e936:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e93a:	6765      	str	r5, [r4, #116]	; 0x74
    e93c:	67a6      	str	r6, [r4, #120]	; 0x78
    e93e:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e942:	6021      	str	r1, [r4, #0]
    e944:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e948:	7b2a      	ldrb	r2, [r5, #12]
    e94a:	4b04      	ldr	r3, [pc, #16]	; (e95c <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e950:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e952:	4620      	mov	r0, r4
    e954:	b003      	add	sp, #12
    e956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e958:	0002358c 	.word	0x0002358c
    e95c:	000235b4 	.word	0x000235b4

0000e960 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e960:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    e962:	6803      	ldr	r3, [r0, #0]
    e964:	4a12      	ldr	r2, [pc, #72]	; (e9b0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    e966:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    e968:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    e96c:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e96e:	b082      	sub	sp, #8
    e970:	4604      	mov	r4, r0
    e972:	d115      	bne.n	e9a0 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    e974:	7980      	ldrb	r0, [r0, #6]
    e976:	2808      	cmp	r0, #8
    e978:	d805      	bhi.n	e986 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    e97a:	2301      	movs	r3, #1
    e97c:	fa03 f000 	lsl.w	r0, r3, r0
    e980:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    e984:	d101      	bne.n	e98a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    e986:	b002      	add	sp, #8
    e988:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e98a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e98c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e98e:	01db      	lsls	r3, r3, #7
    e990:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e994:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e998:	b131      	cbz	r1, e9a8 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    e99a:	615a      	str	r2, [r3, #20]
}
    e99c:	b002      	add	sp, #8
    e99e:	bd10      	pop	{r4, pc}
    e9a0:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    e9a2:	4798      	blx	r3
    e9a4:	9901      	ldr	r1, [sp, #4]
    e9a6:	e7e6      	b.n	e976 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e9a8:	619a      	str	r2, [r3, #24]
}
    e9aa:	b002      	add	sp, #8
    e9ac:	bd10      	pop	{r4, pc}
    e9ae:	bf00      	nop
    e9b0:	0000e8e9 	.word	0x0000e8e9

0000e9b4 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    e9b4:	7982      	ldrb	r2, [r0, #6]
    e9b6:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    e9b8:	4601      	mov	r1, r0
    e9ba:	d808      	bhi.n	e9ce <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    e9bc:	2301      	movs	r3, #1
    e9be:	4093      	lsls	r3, r2
    e9c0:	f013 0f54 	tst.w	r3, #84	; 0x54
    e9c4:	d112      	bne.n	e9ec <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    e9c6:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    e9ca:	d102      	bne.n	e9d2 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    e9cc:	4770      	bx	lr
            state = 0;
    e9ce:	2000      	movs	r0, #0
}
    e9d0:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e9d2:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e9d4:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e9d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e9da:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e9de:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    e9e2:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    e9e6:	f340 004f 	sbfx	r0, r0, #1, #16
    e9ea:	4770      	bx	lr
            state = DigitalInOut::State();
    e9ec:	f7ff bd6a 	b.w	e4c4 <_ZN9ClearCore12DigitalInOut5StateEv>

0000e9f0 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    e9f0:	b510      	push	{r4, lr}
    switch (m_mode) {
    e9f2:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e9f4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    e9f6:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e9f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    e9fa:	2b05      	cmp	r3, #5
    e9fc:	d82a      	bhi.n	ea54 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    e9fe:	e8df f003 	tbb	[pc, r3]
    ea02:	2925      	.short	0x2925
    ea04:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    ea08:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ea0a:	4b13      	ldr	r3, [pc, #76]	; (ea58 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    ea0c:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    ea10:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    ea14:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    ea16:	bf1b      	ittet	ne
    ea18:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    ea1c:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    ea20:	20ff      	moveq	r0, #255	; 0xff
    ea22:	11c0      	asrne	r0, r0, #7
    ea24:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ea28:	f3c2 024f 	ubfx	r2, r2, #1, #16
    ea2c:	4b0b      	ldr	r3, [pc, #44]	; (ea5c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    ea2e:	fb01 f102 	mul.w	r1, r1, r2
    ea32:	fb83 0301 	smull	r0, r3, r3, r1
    ea36:	440b      	add	r3, r1
    ea38:	139b      	asrs	r3, r3, #14
    ea3a:	17c9      	asrs	r1, r1, #31
    ea3c:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ea3e:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ea40:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ea42:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ea44:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ea46:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    ea48:	2001      	movs	r0, #1
            break;
    ea4a:	bd10      	pop	{r4, pc}
}
    ea4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    ea50:	f7ff ba8e 	b.w	df70 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    ea54:	2000      	movs	r0, #0
}
    ea56:	bd10      	pop	{r4, pc}
    ea58:	200019e0 	.word	0x200019e0
    ea5c:	80010003 	.word	0x80010003

0000ea60 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    ea60:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    ea64:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    ea68:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    ea6c:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    ea6e:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    ea70:	b302      	cbz	r2, eab4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    ea72:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    ea76:	2a04      	cmp	r2, #4
    ea78:	d01c      	beq.n	eab4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    ea7a:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    ea7c:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    ea80:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    ea82:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    ea86:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    ea88:	f004 fdee 	bl	13668 <arm_sin_q15>
    ea8c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    ea90:	4b41      	ldr	r3, [pc, #260]	; (eb98 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    ea92:	fb11 f100 	smulbb	r1, r1, r0
    ea96:	429d      	cmp	r5, r3
    ea98:	f341 31cf 	sbfx	r1, r1, #15, #16
    ea9c:	d177      	bne.n	eb8e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    ea9e:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eaa0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    eaa2:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eaa4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    eaa6:	2b05      	cmp	r3, #5
    eaa8:	d81e      	bhi.n	eae8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    eaaa:	e8df f003 	tbb	[pc, r3]
    eaae:	1d6b      	.short	0x1d6b
    eab0:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    eab4:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    eab6:	2a07      	cmp	r2, #7
    eab8:	d017      	beq.n	eaea <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    eaba:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    eabc:	4c36      	ldr	r4, [pc, #216]	; (eb98 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    eabe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    eac0:	f043 0301 	orr.w	r3, r3, #1
    eac4:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    eac6:	6803      	ldr	r3, [r0, #0]
    eac8:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    eaca:	2500      	movs	r5, #0
    eacc:	42a3      	cmp	r3, r4
    eace:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    ead2:	d132      	bne.n	eb3a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ead4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    ead6:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ead8:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    eada:	2a04      	cmp	r2, #4
    eadc:	d804      	bhi.n	eae8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    eade:	e8df f002 	tbb	[pc, r2]
    eae2:	0327      	.short	0x0327
    eae4:	1b27      	.short	0x1b27
    eae6:	27          	.byte	0x27
    eae7:	00          	.byte	0x00
    eae8:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    eaea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    eaee:	4293      	cmp	r3, r2
    eaf0:	ddc3      	ble.n	ea7a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    eaf2:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    eaf4:	4a28      	ldr	r2, [pc, #160]	; (eb98 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    eaf6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    eaf8:	f043 0301 	orr.w	r3, r3, #1
    eafc:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    eafe:	6803      	ldr	r3, [r0, #0]
    eb00:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    eb02:	2400      	movs	r4, #0
    eb04:	4293      	cmp	r3, r2
    eb06:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    eb0a:	d116      	bne.n	eb3a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eb0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    eb0e:	085b      	lsrs	r3, r3, #1
    eb10:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eb12:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eb14:	674b      	str	r3, [r1, #116]	; 0x74
    eb16:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    eb18:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    eb1a:	4a20      	ldr	r2, [pc, #128]	; (eb9c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    eb1c:	f000 000f 	and.w	r0, r0, #15
    eb20:	4402      	add	r2, r0
    eb22:	b29b      	uxth	r3, r3
    eb24:	2000      	movs	r0, #0
    eb26:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eb2a:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eb2c:	674b      	str	r3, [r1, #116]	; 0x74
    eb2e:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    eb30:	2100      	movs	r1, #0
}
    eb32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    eb36:	f7ff ba1b 	b.w	df70 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    eb3a:	2100      	movs	r1, #0
}
    eb3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    eb40:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    eb42:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    eb44:	4b15      	ldr	r3, [pc, #84]	; (eb9c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    eb46:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    eb4a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    eb4e:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    eb50:	bf1b      	ittet	ne
    eb52:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    eb56:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    eb5a:	24ff      	moveq	r4, #255	; 0xff
    eb5c:	11e4      	asrne	r4, r4, #7
    eb5e:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eb62:	f3c2 024f 	ubfx	r2, r2, #1, #16
    eb66:	4b0e      	ldr	r3, [pc, #56]	; (eba0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    eb68:	fb01 f102 	mul.w	r1, r1, r2
    eb6c:	fb83 4301 	smull	r4, r3, r3, r1
    eb70:	440b      	add	r3, r1
    eb72:	139b      	asrs	r3, r3, #14
    eb74:	17c9      	asrs	r1, r1, #31
    eb76:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eb78:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eb7a:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eb7c:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eb7e:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eb80:	6741      	str	r1, [r0, #116]	; 0x74
    eb82:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    eb84:	4620      	mov	r0, r4
}
    eb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    eb8a:	f7ff b9f1 	b.w	df70 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    eb8e:	4620      	mov	r0, r4
    eb90:	462b      	mov	r3, r5
}
    eb92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    eb96:	4718      	bx	r3
    eb98:	0000e9f1 	.word	0x0000e9f1
    eb9c:	200019e0 	.word	0x200019e0
    eba0:	80010003 	.word	0x80010003

0000eba4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    eba4:	7983      	ldrb	r3, [r0, #6]
    eba6:	3b02      	subs	r3, #2
    eba8:	2b05      	cmp	r3, #5
    ebaa:	d804      	bhi.n	ebb6 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    ebac:	e8df f003 	tbb	[pc, r3]
    ebb0:	03040304 	.word	0x03040304
    ebb4:	0604      	.short	0x0604
    ebb6:	4770      	bx	lr
            DigitalInOut::Refresh();
    ebb8:	f7ff bb7e 	b.w	e2b8 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    ebbc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    ebc0:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    ebc2:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    ebc4:	d02c      	beq.n	ec20 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    ebc6:	2b04      	cmp	r3, #4
    ebc8:	d003      	beq.n	ebd2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    ebca:	2b02      	cmp	r3, #2
    ebcc:	d04c      	beq.n	ec68 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    ebce:	bcf0      	pop	{r4, r5, r6, r7}
    ebd0:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    ebd2:	4937      	ldr	r1, [pc, #220]	; (ecb0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ebd4:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ebd6:	680b      	ldr	r3, [r1, #0]
    ebd8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    ebda:	1b1b      	subs	r3, r3, r4
    ebdc:	4293      	cmp	r3, r2
    ebde:	d9f6      	bls.n	ebce <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    ebe0:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    ebe2:	2303      	movs	r3, #3
    ebe4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    ebe8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebea:	4b32      	ldr	r3, [pc, #200]	; (ecb4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    ebec:	f042 0201 	orr.w	r2, r2, #1
    ebf0:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    ebf2:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    ebf4:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    ebf6:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ebf8:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ebfc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    ec00:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec02:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ec06:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec08:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ec0c:	408a      	lsls	r2, r1
    ec0e:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    ec10:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec12:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ec16:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ec1a:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    ec1e:	e7d6      	b.n	ebce <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ec20:	4923      	ldr	r1, [pc, #140]	; (ecb0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ec22:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ec24:	680b      	ldr	r3, [r1, #0]
    ec26:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ec28:	1b1b      	subs	r3, r3, r4
    ec2a:	4293      	cmp	r3, r2
    ec2c:	d9cf      	bls.n	ebce <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec2e:	4a21      	ldr	r2, [pc, #132]	; (ecb4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ec30:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    ec32:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ec34:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec36:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec3a:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    ec3e:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec40:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec44:	2101      	movs	r1, #1
    ec46:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec4c:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    ec50:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec52:	ea24 0406 	bic.w	r4, r4, r6
    ec56:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec5a:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec5e:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec62:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    ec66:	e7b2      	b.n	ebce <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ec68:	4b11      	ldr	r3, [pc, #68]	; (ecb0 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ec6a:	6e41      	ldr	r1, [r0, #100]	; 0x64
    ec6c:	681b      	ldr	r3, [r3, #0]
    ec6e:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ec70:	1a5b      	subs	r3, r3, r1
    ec72:	4293      	cmp	r3, r2
    ec74:	d9ab      	bls.n	ebce <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec76:	4a0f      	ldr	r2, [pc, #60]	; (ecb4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ec78:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ec7a:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec7c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec80:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec84:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec88:	2501      	movs	r5, #1
    ec8a:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ec8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec90:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec94:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    ec98:	2500      	movs	r5, #0
    ec9a:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    ec9e:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eca2:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eca6:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecaa:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    ecae:	e78e      	b.n	ebce <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    ecb0:	20001bf0 	.word	0x20001bf0
    ecb4:	200019e0 	.word	0x200019e0

0000ecb8 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    ecb8:	b570      	push	{r4, r5, r6, lr}
    ecba:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    ecbc:	f7ff fc22 	bl	e504 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    ecc0:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    ecc2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    ecc4:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    ecc8:	6813      	ldr	r3, [r2, #0]
    ecca:	f043 0301 	orr.w	r3, r3, #1
    ecce:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    ecd0:	6893      	ldr	r3, [r2, #8]
    ecd2:	f013 0301 	ands.w	r3, r3, #1
    ecd6:	d1fb      	bne.n	ecd0 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ecd8:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    ecda:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    ecdc:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ecde:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ece0:	4b24      	ldr	r3, [pc, #144]	; (ed74 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    ece2:	4e25      	ldr	r6, [pc, #148]	; (ed78 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    ece4:	4825      	ldr	r0, [pc, #148]	; (ed7c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    ece6:	f045 0502 	orr.w	r5, r5, #2
    ecea:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    ecec:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    ecee:	f045 0505 	orr.w	r5, r5, #5
    ecf2:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    ecf4:	6a55      	ldr	r5, [r2, #36]	; 0x24
    ecf6:	430d      	orrs	r5, r1
    ecf8:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    ecfa:	681b      	ldr	r3, [r3, #0]
    ecfc:	fba6 5303 	umull	r5, r3, r6, r3
    ed00:	0bdb      	lsrs	r3, r3, #15
    ed02:	3b01      	subs	r3, #1
    ed04:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    ed06:	6c13      	ldr	r3, [r2, #64]	; 0x40
    ed08:	6453      	str	r3, [r2, #68]	; 0x44
    ed0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    ed0c:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    ed0e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    ed10:	f993 2001 	ldrsb.w	r2, [r3, #1]
    ed14:	789d      	ldrb	r5, [r3, #2]
    ed16:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    ed1a:	fa01 f605 	lsl.w	r6, r1, r5
    ed1e:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    ed20:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    ed22:	f994 3001 	ldrsb.w	r3, [r4, #1]
    ed26:	78a4      	ldrb	r4, [r4, #2]
    ed28:	01db      	lsls	r3, r3, #7
    ed2a:	4418      	add	r0, r3
    ed2c:	40a1      	lsls	r1, r4
    ed2e:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    ed30:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ed32:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    ed36:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ed38:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ed3c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ed40:	2005      	movs	r0, #5
    ed42:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ed44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ed48:	bf4c      	ite	mi
    ed4a:	f360 1107 	bfimi	r1, r0, #4, #4
    ed4e:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ed52:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    ed56:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    ed5a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    ed5e:	2105      	movs	r1, #5
    ed60:	07e0      	lsls	r0, r4, #31
    ed62:	bf4c      	ite	mi
    ed64:	f361 1207 	bfimi	r2, r1, #4, #4
    ed68:	f361 0203 	bfipl	r2, r1, #0, #4
    ed6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ed70:	bd70      	pop	{r4, r5, r6, pc}
    ed72:	bf00      	nop
    ed74:	200000e8 	.word	0x200000e8
    ed78:	be37c63b 	.word	0xbe37c63b
    ed7c:	41008000 	.word	0x41008000

0000ed80 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    ed80:	7982      	ldrb	r2, [r0, #6]
    ed82:	428a      	cmp	r2, r1
    ed84:	d07a      	beq.n	ee7c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    ed86:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed8a:	460d      	mov	r5, r1
    ed8c:	d867      	bhi.n	ee5e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    ed8e:	2201      	movs	r2, #1
    ed90:	fa02 f301 	lsl.w	r3, r2, r1
    ed94:	f013 0f54 	tst.w	r3, #84	; 0x54
    ed98:	4604      	mov	r4, r0
    ed9a:	d171      	bne.n	ee80 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    ed9c:	f413 7f90 	tst.w	r3, #288	; 0x120
    eda0:	d05f      	beq.n	ee62 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    eda2:	7901      	ldrb	r1, [r0, #4]
    eda4:	4a5d      	ldr	r2, [pc, #372]	; (ef1c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    eda6:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    edaa:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    edae:	2b00      	cmp	r3, #0
    edb0:	f040 809e 	bne.w	eef0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    edb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    edb6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    edb8:	01db      	lsls	r3, r3, #7
    edba:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    edbe:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    edc2:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    edc4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    edc6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    edca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    edce:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    edd0:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    edd4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    edd8:	f36f 0000 	bfc	r0, #0, #1
    eddc:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    ede0:	68a3      	ldr	r3, [r4, #8]
    ede2:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ede6:	2d05      	cmp	r5, #5
    ede8:	f000 808b 	beq.w	ef02 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    edec:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    edf0:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    edf4:	2701      	movs	r7, #1
    edf6:	fa07 f101 	lsl.w	r1, r7, r1
    edfa:	ea20 0101 	bic.w	r1, r0, r1
    edfe:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ee02:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ee06:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ee08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    ee0c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    ee10:	4a43      	ldr	r2, [pc, #268]	; (ef20 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ee12:	7889      	ldrb	r1, [r1, #2]
    ee14:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ee18:	440b      	add	r3, r1
    ee1a:	2101      	movs	r1, #1
    ee1c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ee20:	4308      	orrs	r0, r1
    ee22:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ee26:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    ee28:	f990 3001 	ldrsb.w	r3, [r0, #1]
    ee2c:	7880      	ldrb	r0, [r0, #2]
    ee2e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ee32:	4403      	add	r3, r0
    ee34:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ee38:	430a      	orrs	r2, r1
    ee3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    ee3e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    ee40:	6813      	ldr	r3, [r2, #0]
    ee42:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ee46:	428b      	cmp	r3, r1
    ee48:	d006      	beq.n	ee58 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    ee4a:	6813      	ldr	r3, [r2, #0]
    ee4c:	f361 0341 	bfi	r3, r1, #1, #1
    ee50:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    ee52:	6893      	ldr	r3, [r2, #8]
    ee54:	079b      	lsls	r3, r3, #30
    ee56:	d4fc      	bmi.n	ee52 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    ee58:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    ee5a:	2001      	movs	r0, #1
    ee5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    ee5e:	2000      	movs	r0, #0
    ee60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee62:	061a      	lsls	r2, r3, #24
    ee64:	d5fb      	bpl.n	ee5e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    ee66:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ee68:	4a2c      	ldr	r2, [pc, #176]	; (ef1c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    ee6a:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    ee6e:	f001 010f 	and.w	r1, r1, #15
    ee72:	1850      	adds	r0, r2, r1
    ee74:	11db      	asrs	r3, r3, #7
    ee76:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    ee7a:	e796      	b.n	edaa <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    ee7c:	2001      	movs	r0, #1
    ee7e:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ee80:	4f26      	ldr	r7, [pc, #152]	; (ef1c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    ee82:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ee84:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ee88:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ee8c:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ee90:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ee94:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ee96:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ee9a:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ee9e:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eea2:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eea6:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eeaa:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    eeae:	f7ff f8bb 	bl	e028 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    eeb2:	2800      	cmp	r0, #0
    eeb4:	d0d3      	beq.n	ee5e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    eeb6:	6f61      	ldr	r1, [r4, #116]	; 0x74
    eeb8:	4b19      	ldr	r3, [pc, #100]	; (ef20 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    eeba:	f991 2001 	ldrsb.w	r2, [r1, #1]
    eebe:	7889      	ldrb	r1, [r1, #2]
    eec0:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    eec4:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    eec6:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    eec8:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    eecc:	f36f 0000 	bfc	r0, #0, #1
    eed0:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    eed4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    eed6:	f992 0001 	ldrsb.w	r0, [r2, #1]
    eeda:	7892      	ldrb	r2, [r2, #2]
    eedc:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    eee0:	4413      	add	r3, r2
    eee2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    eee6:	f36f 0200 	bfc	r2, #0, #1
    eeea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    eeee:	e7a6      	b.n	ee3e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    eef0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eef2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    eef4:	01db      	lsls	r3, r3, #7
    eef6:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    eefa:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    eefe:	6146      	str	r6, [r0, #20]
    ef00:	e760      	b.n	edc4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ef02:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ef06:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ef0a:	2601      	movs	r6, #1
    ef0c:	fa06 f101 	lsl.w	r1, r6, r1
    ef10:	4339      	orrs	r1, r7
    ef12:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ef16:	4303      	orrs	r3, r0
    ef18:	e775      	b.n	ee06 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    ef1a:	bf00      	nop
    ef1c:	200019e0 	.word	0x200019e0
    ef20:	41008000 	.word	0x41008000

0000ef24 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ef24:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ef26:	4c07      	ldr	r4, [pc, #28]	; (ef44 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ef28:	6823      	ldr	r3, [r4, #0]
    ef2a:	07db      	lsls	r3, r3, #31
    ef2c:	d502      	bpl.n	ef34 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ef2e:	4b06      	ldr	r3, [pc, #24]	; (ef48 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ef30:	6818      	ldr	r0, [r3, #0]
    ef32:	bd10      	pop	{r4, pc}
    ef34:	2001      	movs	r0, #1
    ef36:	f004 fbb3 	bl	136a0 <_Znwj>
    ef3a:	4a03      	ldr	r2, [pc, #12]	; (ef48 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ef3c:	2301      	movs	r3, #1
    ef3e:	6010      	str	r0, [r2, #0]
    ef40:	6023      	str	r3, [r4, #0]
    return *instance;
}
    ef42:	bd10      	pop	{r4, pc}
    ef44:	20001e34 	.word	0x20001e34
    ef48:	20001f04 	.word	0x20001f04

0000ef4c <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    ef4c:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ef4e:	4a13      	ldr	r2, [pc, #76]	; (ef9c <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ef50:	4913      	ldr	r1, [pc, #76]	; (efa0 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ef52:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ef54:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ef56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ef5a:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ef5c:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ef5e:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ef60:	8813      	ldrh	r3, [r2, #0]
    ef62:	b29b      	uxth	r3, r3
    ef64:	2b01      	cmp	r3, #1
    ef66:	d0fb      	beq.n	ef60 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ef68:	4b0e      	ldr	r3, [pc, #56]	; (efa4 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ef6a:	4d0f      	ldr	r5, [pc, #60]	; (efa8 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ef6c:	4c0f      	ldr	r4, [pc, #60]	; (efac <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    ef6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ef72:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ef74:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ef78:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ef7c:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ef80:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ef82:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ef84:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    ef86:	7b51      	ldrb	r1, [r2, #13]
    ef88:	f041 0101 	orr.w	r1, r1, #1
    ef8c:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ef8e:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    ef90:	6913      	ldr	r3, [r2, #16]
    ef92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    ef96:	6113      	str	r3, [r2, #16]
}
    ef98:	bc70      	pop	{r4, r5, r6}
    ef9a:	4770      	bx	lr
    ef9c:	40000800 	.word	0x40000800
    efa0:	4100a000 	.word	0x4100a000
    efa4:	e000e100 	.word	0xe000e100
    efa8:	20001e40 	.word	0x20001e40
    efac:	20001ea0 	.word	0x20001ea0

0000efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    efb0:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    efb2:	bfda      	itte	le
    efb4:	4b02      	ldrle	r3, [pc, #8]	; (efc0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    efb6:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    efba:	2000      	movgt	r0, #0
}
    efbc:	4770      	bx	lr
    efbe:	bf00      	nop
    efc0:	4100a040 	.word	0x4100a040

0000efc4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    efc4:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    efc6:	bfda      	itte	le
    efc8:	4b02      	ldrle	r3, [pc, #8]	; (efd4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    efca:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    efce:	2000      	movgt	r0, #0
}
    efd0:	4770      	bx	lr
    efd2:	bf00      	nop
    efd4:	20001e40 	.word	0x20001e40

0000efd8 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    efd8:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    efda:	f7ff ffa3 	bl	ef24 <_ZN9ClearCore10DmaManager8InstanceEv>
    efde:	4b01      	ldr	r3, [pc, #4]	; (efe4 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    efe0:	6018      	str	r0, [r3, #0]
    efe2:	bd08      	pop	{r3, pc}
    efe4:	20001f00 	.word	0x20001f00

0000efe8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    efe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efec:	4604      	mov	r4, r0
    efee:	4267      	negs	r7, r4
    eff0:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    eff4:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    eff8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    effc:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f000:	4608      	mov	r0, r1
    f002:	ea4f 0999 	mov.w	r9, r9, lsr #2
    f006:	2101      	movs	r1, #1
    f008:	f002 f86e 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    f00c:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    f010:	2600      	movs	r6, #0
    bool sendData = true;
    f012:	2201      	movs	r2, #1
    f014:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f018:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    f01c:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    f020:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    f022:	4690      	mov	r8, r2
    f024:	2b02      	cmp	r3, #2
    f026:	f000 821b 	beq.w	f460 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    f02a:	2d03      	cmp	r5, #3
    f02c:	f300 8159 	bgt.w	f2e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    f030:	b1a3      	cbz	r3, f05c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    f032:	2b01      	cmp	r3, #1
    f034:	d1fc      	bne.n	f030 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    f036:	b1da      	cbz	r2, f070 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    f038:	2e00      	cmp	r6, #0
    f03a:	f040 808d 	bne.w	f158 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    f03e:	6026      	str	r6, [r4, #0]
    f040:	6066      	str	r6, [r4, #4]
    f042:	60a6      	str	r6, [r4, #8]
    f044:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    f046:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    f048:	f104 0212 	add.w	r2, r4, #18
    f04c:	4621      	mov	r1, r4
    f04e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f050:	f002 f8f4 	bl	1123c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    f054:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f058:	2200      	movs	r2, #0
    f05a:	e7e3      	b.n	f024 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    f05c:	2a00      	cmp	r2, #0
    f05e:	d053      	beq.n	f108 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    f060:	f04f 33ff 	mov.w	r3, #4294967295
    f064:	6023      	str	r3, [r4, #0]
    f066:	6063      	str	r3, [r4, #4]
    f068:	60a3      	str	r3, [r4, #8]
    f06a:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    f06c:	2310      	movs	r3, #16
    f06e:	e7eb      	b.n	f048 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    f070:	2e00      	cmp	r6, #0
    f072:	f040 80a2 	bne.w	f1ba <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    f076:	7ca2      	ldrb	r2, [r4, #18]
    f078:	2aff      	cmp	r2, #255	; 0xff
    f07a:	f040 8128 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f07e:	7ce2      	ldrb	r2, [r4, #19]
    f080:	2aff      	cmp	r2, #255	; 0xff
    f082:	f040 8124 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f086:	7d22      	ldrb	r2, [r4, #20]
    f088:	2aff      	cmp	r2, #255	; 0xff
    f08a:	f040 8120 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f08e:	7d62      	ldrb	r2, [r4, #21]
    f090:	2aff      	cmp	r2, #255	; 0xff
    f092:	f040 811c 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f096:	7da2      	ldrb	r2, [r4, #22]
    f098:	2aff      	cmp	r2, #255	; 0xff
    f09a:	f040 8118 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f09e:	7de2      	ldrb	r2, [r4, #23]
    f0a0:	2aff      	cmp	r2, #255	; 0xff
    f0a2:	f040 8114 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0a6:	7e22      	ldrb	r2, [r4, #24]
    f0a8:	2aff      	cmp	r2, #255	; 0xff
    f0aa:	f040 8110 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0ae:	7e62      	ldrb	r2, [r4, #25]
    f0b0:	2aff      	cmp	r2, #255	; 0xff
    f0b2:	f040 810c 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0b6:	7ea2      	ldrb	r2, [r4, #26]
    f0b8:	2aff      	cmp	r2, #255	; 0xff
    f0ba:	f040 8108 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0be:	7ee2      	ldrb	r2, [r4, #27]
    f0c0:	2aff      	cmp	r2, #255	; 0xff
    f0c2:	f040 8104 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0c6:	7f22      	ldrb	r2, [r4, #28]
    f0c8:	2aff      	cmp	r2, #255	; 0xff
    f0ca:	f040 8100 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0ce:	7f62      	ldrb	r2, [r4, #29]
    f0d0:	2aff      	cmp	r2, #255	; 0xff
    f0d2:	f040 80fc 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0d6:	7fa2      	ldrb	r2, [r4, #30]
    f0d8:	2aff      	cmp	r2, #255	; 0xff
    f0da:	f040 80f8 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0de:	7fe2      	ldrb	r2, [r4, #31]
    f0e0:	2aff      	cmp	r2, #255	; 0xff
    f0e2:	f040 80f4 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0e6:	f894 2020 	ldrb.w	r2, [r4, #32]
    f0ea:	2aff      	cmp	r2, #255	; 0xff
    f0ec:	f040 80ef 	bne.w	f2ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f0f0:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    f0f4:	3eff      	subs	r6, #255	; 0xff
    f0f6:	bf18      	it	ne
    f0f8:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    f0fa:	3501      	adds	r5, #1
    f0fc:	b2ed      	uxtb	r5, r5
    f0fe:	2d03      	cmp	r5, #3
    f100:	f04f 0201 	mov.w	r2, #1
    f104:	dd94      	ble.n	f030 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    f106:	e0ec      	b.n	f2e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    f108:	7ca2      	ldrb	r2, [r4, #18]
    f10a:	bb02      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f10c:	7ce2      	ldrb	r2, [r4, #19]
    f10e:	b9f2      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f110:	7d22      	ldrb	r2, [r4, #20]
    f112:	b9e2      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f114:	7d62      	ldrb	r2, [r4, #21]
    f116:	b9d2      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f118:	7da2      	ldrb	r2, [r4, #22]
    f11a:	b9c2      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f11c:	7de2      	ldrb	r2, [r4, #23]
    f11e:	b9b2      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f120:	7e22      	ldrb	r2, [r4, #24]
    f122:	b9a2      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f124:	7e62      	ldrb	r2, [r4, #25]
    f126:	b992      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f128:	7ea2      	ldrb	r2, [r4, #26]
    f12a:	b982      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f12c:	7ee2      	ldrb	r2, [r4, #27]
    f12e:	b972      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f130:	7f22      	ldrb	r2, [r4, #28]
    f132:	b962      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f134:	7f62      	ldrb	r2, [r4, #29]
    f136:	b952      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f138:	7fa2      	ldrb	r2, [r4, #30]
    f13a:	b942      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f13c:	7fe2      	ldrb	r2, [r4, #31]
    f13e:	b932      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f140:	f894 2020 	ldrb.w	r2, [r4, #32]
    f144:	b91a      	cbnz	r2, f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f146:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    f14a:	2a00      	cmp	r2, #0
    f14c:	d0d5      	beq.n	f0fa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    f14e:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    f152:	2501      	movs	r5, #1
                        flush0Success = false;
    f154:	2600      	movs	r6, #0
    f156:	e772      	b.n	f03e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    f158:	2f00      	cmp	r7, #0
    f15a:	f000 80ba 	beq.w	f2d2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    f15e:	23aa      	movs	r3, #170	; 0xaa
    f160:	2f01      	cmp	r7, #1
    f162:	7023      	strb	r3, [r4, #0]
    f164:	f104 0101 	add.w	r1, r4, #1
    f168:	f000 80db 	beq.w	f322 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    f16c:	2f02      	cmp	r7, #2
    f16e:	7063      	strb	r3, [r4, #1]
    f170:	f104 0102 	add.w	r1, r4, #2
    f174:	f000 80d3 	beq.w	f31e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    f178:	70a3      	strb	r3, [r4, #2]
    f17a:	1ce1      	adds	r1, r4, #3
    f17c:	220e      	movs	r2, #14
    f17e:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    f182:	51e3      	str	r3, [r4, r7]
    f184:	19e3      	adds	r3, r4, r7
    f186:	3304      	adds	r3, #4
    f188:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    f18c:	f1b9 0f03 	cmp.w	r9, #3
    f190:	6018      	str	r0, [r3, #0]
    f192:	6058      	str	r0, [r3, #4]
    f194:	d000      	beq.n	f198 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    f196:	6098      	str	r0, [r3, #8]
    f198:	45d3      	cmp	fp, sl
    f19a:	eba2 020a 	sub.w	r2, r2, sl
    f19e:	eb01 000a 	add.w	r0, r1, sl
    f1a2:	d008      	beq.n	f1b6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f1a4:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    f1a6:	2a01      	cmp	r2, #1
            *buf++ = val;
    f1a8:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    f1ac:	d003      	beq.n	f1b6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f1ae:	2a02      	cmp	r2, #2
            *buf++ = val;
    f1b0:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    f1b2:	d000      	beq.n	f1b6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    f1b4:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    f1b6:	2311      	movs	r3, #17
    f1b8:	e746      	b.n	f048 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    f1ba:	7ca1      	ldrb	r1, [r4, #18]
    f1bc:	29aa      	cmp	r1, #170	; 0xaa
    f1be:	f000 80aa 	beq.w	f316 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    f1c2:	7ce2      	ldrb	r2, [r4, #19]
    f1c4:	2aaa      	cmp	r2, #170	; 0xaa
    f1c6:	d040      	beq.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f1c8:	7d23      	ldrb	r3, [r4, #20]
    f1ca:	2baa      	cmp	r3, #170	; 0xaa
    f1cc:	f000 80a5 	beq.w	f31a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    f1d0:	7d63      	ldrb	r3, [r4, #21]
    f1d2:	2baa      	cmp	r3, #170	; 0xaa
    f1d4:	f000 80a7 	beq.w	f326 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    f1d8:	7da3      	ldrb	r3, [r4, #22]
    f1da:	2baa      	cmp	r3, #170	; 0xaa
    f1dc:	f000 8118 	beq.w	f410 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    f1e0:	7de3      	ldrb	r3, [r4, #23]
    f1e2:	2baa      	cmp	r3, #170	; 0xaa
    f1e4:	f000 80a1 	beq.w	f32a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    f1e8:	7e23      	ldrb	r3, [r4, #24]
    f1ea:	2baa      	cmp	r3, #170	; 0xaa
    f1ec:	f000 8112 	beq.w	f414 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    f1f0:	7e63      	ldrb	r3, [r4, #25]
    f1f2:	2baa      	cmp	r3, #170	; 0xaa
    f1f4:	f000 8110 	beq.w	f418 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    f1f8:	7ea3      	ldrb	r3, [r4, #26]
    f1fa:	2baa      	cmp	r3, #170	; 0xaa
    f1fc:	f000 810e 	beq.w	f41c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    f200:	7ee3      	ldrb	r3, [r4, #27]
    f202:	2baa      	cmp	r3, #170	; 0xaa
    f204:	f000 8102 	beq.w	f40c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    f208:	7f23      	ldrb	r3, [r4, #28]
    f20a:	2baa      	cmp	r3, #170	; 0xaa
    f20c:	f000 8108 	beq.w	f420 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    f210:	7f63      	ldrb	r3, [r4, #29]
    f212:	2baa      	cmp	r3, #170	; 0xaa
    f214:	f000 811c 	beq.w	f450 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    f218:	7fa3      	ldrb	r3, [r4, #30]
    f21a:	2baa      	cmp	r3, #170	; 0xaa
    f21c:	f000 811a 	beq.w	f454 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    f220:	7fe3      	ldrb	r3, [r4, #31]
    f222:	2baa      	cmp	r3, #170	; 0xaa
    f224:	f000 8118 	beq.w	f458 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    f228:	f894 3020 	ldrb.w	r3, [r4, #32]
    f22c:	2baa      	cmp	r3, #170	; 0xaa
    f22e:	f000 8115 	beq.w	f45c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    f232:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f236:	2baa      	cmp	r3, #170	; 0xaa
    f238:	f000 8108 	beq.w	f44c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    f23c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f240:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    f242:	bf08      	it	eq
    f244:	2310      	moveq	r3, #16
                        if (!foundAA &&
    f246:	f040 80ed 	bne.w	f424 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    f24a:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    f24c:	2502      	movs	r5, #2
    f24e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    f252:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    f254:	74e2      	strb	r2, [r4, #19]
    f256:	7522      	strb	r2, [r4, #20]
    f258:	7562      	strb	r2, [r4, #21]
    f25a:	75a2      	strb	r2, [r4, #22]
    f25c:	75e2      	strb	r2, [r4, #23]
    f25e:	7622      	strb	r2, [r4, #24]
    f260:	7662      	strb	r2, [r4, #25]
    f262:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    f264:	76e2      	strb	r2, [r4, #27]
    f266:	7722      	strb	r2, [r4, #28]
    f268:	7762      	strb	r2, [r4, #29]
    f26a:	77a2      	strb	r2, [r4, #30]
    f26c:	77e2      	strb	r2, [r4, #31]
    f26e:	f884 2020 	strb.w	r2, [r4, #32]
    f272:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    f276:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    f27a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    f27e:	105b      	asrs	r3, r3, #1
    f280:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f282:	2701      	movs	r7, #1
    f284:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    f286:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f28a:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    f28e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    f292:	3a01      	subs	r2, #1
    f294:	4610      	mov	r0, r2
    f296:	17d1      	asrs	r1, r2, #31
    f298:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    f29a:	42ba      	cmp	r2, r7
    f29c:	bfc8      	it	gt
    f29e:	fa42 f707 	asrgt.w	r7, r2, r7
    f2a2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    f2a6:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    f2aa:	2b00      	cmp	r3, #0
    f2ac:	d13f      	bne.n	f32e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    f2ae:	4b6d      	ldr	r3, [pc, #436]	; (f464 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    f2b0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f2b4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f2b8:	43c9      	mvns	r1, r1
    f2ba:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f2bc:	4a6a      	ldr	r2, [pc, #424]	; (f468 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f2be:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f2c2:	6813      	ldr	r3, [r2, #0]
    f2c4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f2c8:	4628      	mov	r0, r5
    f2ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f2ce:	2601      	movs	r6, #1
    f2d0:	e713      	b.n	f0fa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f2d2:	4623      	mov	r3, r4
    f2d4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f2d8:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f2dc:	4621      	mov	r1, r4
    f2de:	2211      	movs	r2, #17
    f2e0:	e752      	b.n	f188 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f2e2:	4a62      	ldr	r2, [pc, #392]	; (f46c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f2e4:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f2e6:	2301      	movs	r3, #1
    f2e8:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f2ec:	2208      	movs	r2, #8
    f2ee:	2102      	movs	r1, #2
    f2f0:	f002 fbf0 	bl	11ad4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f2f4:	4a5b      	ldr	r2, [pc, #364]	; (f464 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f2f6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f2fa:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f2fe:	495a      	ldr	r1, [pc, #360]	; (f468 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f300:	ea23 0300 	bic.w	r3, r3, r0
    f304:	6809      	ldr	r1, [r1, #0]
    f306:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f30a:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f30c:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f310:	4628      	mov	r0, r5
    f312:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f316:	4613      	mov	r3, r2
    f318:	e797      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f31a:	2302      	movs	r3, #2
    f31c:	e795      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f31e:	220f      	movs	r2, #15
    f320:	e72d      	b.n	f17e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f322:	2210      	movs	r2, #16
    f324:	e72b      	b.n	f17e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f326:	2303      	movs	r3, #3
    f328:	e78f      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f32a:	2305      	movs	r3, #5
    f32c:	e78d      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f32e:	f1c3 0108 	rsb	r1, r3, #8
    f332:	00ce      	lsls	r6, r1, #3
    f334:	f04f 30ff 	mov.w	r0, #4294967295
    f338:	f1c6 0220 	rsb	r2, r6, #32
    f33c:	fa00 f202 	lsl.w	r2, r0, r2
    f340:	fa20 fe06 	lsr.w	lr, r0, r6
    f344:	f1a6 0720 	sub.w	r7, r6, #32
    f348:	fa20 f707 	lsr.w	r7, r0, r7
    f34c:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f350:	4622      	mov	r2, r4
    f352:	ea4e 0e07 	orr.w	lr, lr, r7
    f356:	40f0      	lsrs	r0, r6
    f358:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f35a:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f35e:	65e0      	str	r0, [r4, #92]	; 0x5c
    f360:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f364:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f366:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f368:	f104 0812 	add.w	r8, r4, #18
    f36c:	7056      	strb	r6, [r2, #1]
    f36e:	7096      	strb	r6, [r2, #2]
    f370:	70d6      	strb	r6, [r2, #3]
    f372:	7116      	strb	r6, [r2, #4]
    f374:	7156      	strb	r6, [r2, #5]
    f376:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f378:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f37c:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f37e:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f382:	4442      	add	r2, r8
    f384:	3301      	adds	r3, #1
    f386:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f388:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f38c:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f38e:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f390:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f392:	f001 ff53 	bl	1123c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f396:	4631      	mov	r1, r6
    f398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f39a:	f001 fea5 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f39e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f3a2:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f3a6:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f3a8:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f3aa:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f3ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f3ae:	f001 fe9b 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f3b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f3b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f3b8:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f3bc:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f3c0:	2701      	movs	r7, #1
    f3c2:	4442      	add	r2, r8
    f3c4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f3c8:	4421      	add	r1, r4
    f3ca:	f001 ff37 	bl	1123c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f3ce:	4631      	mov	r1, r6
    f3d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f3d2:	f001 fe89 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f3d6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f3da:	4b22      	ldr	r3, [pc, #136]	; (f464 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f3dc:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f3e0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f3e4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f3e8:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f3ec:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f3f0:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f3f4:	f04f 0800 	mov.w	r8, #0
    f3f8:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f3fc:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f400:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f404:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f406:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f40a:	e757      	b.n	f2bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f40c:	2309      	movs	r3, #9
    f40e:	e71c      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f410:	2304      	movs	r3, #4
    f412:	e71a      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f414:	2306      	movs	r3, #6
    f416:	e718      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f418:	2307      	movs	r3, #7
    f41a:	e716      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f41c:	2308      	movs	r3, #8
    f41e:	e714      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f420:	230a      	movs	r3, #10
    f422:	e712      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f424:	2300      	movs	r3, #0
    f426:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f42a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f42e:	4a0f      	ldr	r2, [pc, #60]	; (f46c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f430:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f432:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f434:	f04f 0000 	mov.w	r0, #0
    f438:	f04f 0100 	mov.w	r1, #0
    f43c:	bfcc      	ite	gt
    f43e:	105b      	asrgt	r3, r3, #1
    f440:	2301      	movle	r3, #1
    f442:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f446:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f44a:	e74b      	b.n	f2e4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f44c:	230f      	movs	r3, #15
    f44e:	e6fc      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f450:	230b      	movs	r3, #11
    f452:	e6fa      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f454:	230c      	movs	r3, #12
    f456:	e6f8      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f458:	230d      	movs	r3, #13
    f45a:	e6f6      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f45c:	230e      	movs	r3, #14
    f45e:	e6f4      	b.n	f24a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f460:	2300      	movs	r3, #0
    f462:	e70c      	b.n	f27e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f464:	200019e0 	.word	0x200019e0
    f468:	20001bf0 	.word	0x20001bf0
    f46c:	20001f28 	.word	0x20001f28

0000f470 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f474:	4f42      	ldr	r7, [pc, #264]	; (f580 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f476:	683c      	ldr	r4, [r7, #0]
    f478:	f014 0401 	ands.w	r4, r4, #1
    f47c:	d003      	beq.n	f486 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f47e:	4b41      	ldr	r3, [pc, #260]	; (f584 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f480:	6818      	ldr	r0, [r3, #0]
    f482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f486:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f48a:	f004 f909 	bl	136a0 <_Znwj>
            buf64.writeMarker = 0;
    f48e:	4603      	mov	r3, r0
    f490:	4606      	mov	r6, r0
    f492:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f496:	f04f 38ff 	mov.w	r8, #4294967295
    f49a:	f04f 39ff 	mov.w	r9, #4294967295
    f49e:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f4a0:	7074      	strb	r4, [r6, #1]
    f4a2:	705c      	strb	r4, [r3, #1]
    f4a4:	709c      	strb	r4, [r3, #2]
    f4a6:	70dc      	strb	r4, [r3, #3]
    f4a8:	711c      	strb	r4, [r3, #4]
    f4aa:	715c      	strb	r4, [r3, #5]
    f4ac:	719c      	strb	r4, [r3, #6]
    f4ae:	71dc      	strb	r4, [r3, #7]
    f4b0:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f4b2:	7274      	strb	r4, [r6, #9]
    f4b4:	72b4      	strb	r4, [r6, #10]
    f4b6:	72f4      	strb	r4, [r6, #11]
    f4b8:	7334      	strb	r4, [r6, #12]
    f4ba:	7374      	strb	r4, [r6, #13]
    f4bc:	73b4      	strb	r4, [r6, #14]
    f4be:	73f4      	strb	r4, [r6, #15]
    f4c0:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f4c2:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f4c4:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f4c6:	74f4      	strb	r4, [r6, #19]
    f4c8:	7534      	strb	r4, [r6, #20]
    f4ca:	7574      	strb	r4, [r6, #21]
    f4cc:	75b4      	strb	r4, [r6, #22]
    f4ce:	75f4      	strb	r4, [r6, #23]
    f4d0:	7634      	strb	r4, [r6, #24]
    f4d2:	7674      	strb	r4, [r6, #25]
    f4d4:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f4d6:	76f4      	strb	r4, [r6, #27]
    f4d8:	7734      	strb	r4, [r6, #28]
    f4da:	7774      	strb	r4, [r6, #29]
    f4dc:	77b4      	strb	r4, [r6, #30]
    f4de:	77f4      	strb	r4, [r6, #31]
    f4e0:	f886 4020 	strb.w	r4, [r6, #32]
    f4e4:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f4e8:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f4ec:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f4f0:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f4f4:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f4f8:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f4fc:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f500:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f504:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f508:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f50c:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f510:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f514:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f518:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f51c:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f520:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f524:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f528:	2301      	movs	r3, #1
    f52a:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f52e:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f532:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f536:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f53a:	62b4      	str	r4, [r6, #40]	; 0x28
    f53c:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f540:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f544:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f548:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f54c:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f550:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f554:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f558:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f55c:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f560:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f564:	4620      	mov	r0, r4
    f566:	3428      	adds	r4, #40	; 0x28
    f568:	f000 fc8a 	bl	fe80 <_ZN9ClearCore7CcioPinC1Ev>
    f56c:	42ac      	cmp	r4, r5
    f56e:	d1f9      	bne.n	f564 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f570:	4a04      	ldr	r2, [pc, #16]	; (f584 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f572:	2301      	movs	r3, #1
    f574:	6016      	str	r6, [r2, #0]
    f576:	4630      	mov	r0, r6
    f578:	603b      	str	r3, [r7, #0]
}
    f57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f57e:	bf00      	nop
    f580:	20001f08 	.word	0x20001f08
    f584:	20001f10 	.word	0x20001f10

0000f588 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f588:	b570      	push	{r4, r5, r6, lr}
    f58a:	4606      	mov	r6, r0
    f58c:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f590:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f592:	682b      	ldr	r3, [r5, #0]
    f594:	b221      	sxth	r1, r4
    f596:	3401      	adds	r4, #1
    f598:	4628      	mov	r0, r5
    f59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f59c:	b2a4      	uxth	r4, r4
    f59e:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f5a0:	2c80      	cmp	r4, #128	; 0x80
    f5a2:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f5a6:	d1f4      	bne.n	f592 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f5a8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f5ac:	2b02      	cmp	r3, #2
    f5ae:	d00b      	beq.n	f5c8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f5b0:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f5b4:	2b00      	cmp	r3, #0
    f5b6:	d13c      	bne.n	f632 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f5b8:	4a20      	ldr	r2, [pc, #128]	; (f63c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f5ba:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f5bc:	6812      	ldr	r2, [r2, #0]
    f5be:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f5c2:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f5c4:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f5c8:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f5ca:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f5cc:	2200      	movs	r2, #0
    f5ce:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f5d0:	f04f 34ff 	mov.w	r4, #4294967295
    f5d4:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f5d8:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f5dc:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f5e0:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f5e4:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f5e8:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f5ec:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f5f0:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f5f4:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f5f8:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f5fc:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f600:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f604:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f608:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f60c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f610:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f614:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f618:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f61c:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f620:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f624:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f628:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f62c:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f630:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f632:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f636:	2b00      	cmp	r3, #0
    f638:	d1be      	bne.n	f5b8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f63a:	e7c5      	b.n	f5c8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f63c:	20001bf0 	.word	0x20001bf0

0000f640 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f640:	3940      	subs	r1, #64	; 0x40
    f642:	b28b      	uxth	r3, r1
    f644:	2b3f      	cmp	r3, #63	; 0x3f
    f646:	d80f      	bhi.n	f668 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f648:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f64a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f64c:	b2c9      	uxtb	r1, r1
    f64e:	f1c1 0320 	rsb	r3, r1, #32
    f652:	fa02 f303 	lsl.w	r3, r2, r3
    f656:	40c8      	lsrs	r0, r1
    f658:	3920      	subs	r1, #32
    f65a:	4318      	orrs	r0, r3
    f65c:	fa22 f101 	lsr.w	r1, r2, r1
    f660:	4308      	orrs	r0, r1
}
    f662:	f000 0001 	and.w	r0, r0, #1
    f666:	4770      	bx	lr
    f668:	2000      	movs	r0, #0
    f66a:	f000 0001 	and.w	r0, r0, #1
    f66e:	4770      	bx	lr

0000f670 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f670:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f672:	2900      	cmp	r1, #0
    f674:	f000 8084 	beq.w	f780 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f678:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f67c:	2b00      	cmp	r3, #0
    f67e:	d07f      	beq.n	f780 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f680:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f684:	2a00      	cmp	r2, #0
    f686:	d17b      	bne.n	f780 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f68c:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f690:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f694:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f696:	f000 80a3 	beq.w	f7e0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f69a:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f69e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f6a2:	2400      	movs	r4, #0
    f6a4:	2500      	movs	r5, #0
    f6a6:	4690      	mov	r8, r2
    f6a8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f6ac:	4696      	mov	lr, r2
    f6ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f6b2:	e9cd 4500 	strd	r4, r5, [sp]
    f6b6:	2201      	movs	r2, #1
    f6b8:	2300      	movs	r3, #0
    f6ba:	4626      	mov	r6, r4
    f6bc:	462f      	mov	r7, r5
    f6be:	9106      	str	r1, [sp, #24]
    f6c0:	e037      	b.n	f732 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f6c2:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f6c6:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f6ca:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f6ce:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f6d2:	f108 0501 	add.w	r5, r8, #1
    f6d6:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f6d8:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f6da:	ea46 0602 	orr.w	r6, r6, r2
    f6de:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f6e2:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f6e6:	db06      	blt.n	f6f6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f6e8:	b12c      	cbz	r4, f6f6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f6ea:	e9dd 4500 	ldrd	r4, r5, [sp]
    f6ee:	4314      	orrs	r4, r2
    f6f0:	431d      	orrs	r5, r3
    f6f2:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f6f6:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f6fa:	ea04 0802 	and.w	r8, r4, r2
    f6fe:	ea05 0903 	and.w	r9, r5, r3
    f702:	ea58 0109 	orrs.w	r1, r8, r9
    f706:	d00b      	beq.n	f720 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f708:	ea24 0402 	bic.w	r4, r4, r2
    f70c:	ea25 0503 	bic.w	r5, r5, r3
    f710:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f714:	e9dd 4500 	ldrd	r4, r5, [sp]
    f718:	4314      	orrs	r4, r2
    f71a:	431d      	orrs	r5, r3
    f71c:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f720:	f10e 0e01 	add.w	lr, lr, #1
    f724:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f728:	1892      	adds	r2, r2, r2
    f72a:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f72c:	45e6      	cmp	lr, ip
    f72e:	46f0      	mov	r8, lr
    f730:	da27      	bge.n	f782 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f732:	ea0a 0402 	and.w	r4, sl, r2
    f736:	ea0b 0503 	and.w	r5, fp, r3
    f73a:	ea54 0105 	orrs.w	r1, r4, r5
    f73e:	d0ef      	beq.n	f720 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f740:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f744:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f748:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f74c:	3c01      	subs	r4, #1
    f74e:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f752:	2c00      	cmp	r4, #0
    f754:	d1e4      	bne.n	f720 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f756:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f75a:	4014      	ands	r4, r2
    f75c:	401d      	ands	r5, r3
    f75e:	432c      	orrs	r4, r5
    f760:	d1af      	bne.n	f6c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f762:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f766:	ea04 0802 	and.w	r8, r4, r2
    f76a:	ea05 0903 	and.w	r9, r5, r3
    f76e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f772:	ea58 0409 	orrs.w	r4, r8, r9
    f776:	f000 8115 	beq.w	f9a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f77a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f77e:	e7c3      	b.n	f708 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f780:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f782:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f786:	9906      	ldr	r1, [sp, #24]
    f788:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f78c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f790:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f794:	4642      	mov	r2, r8
    f796:	464b      	mov	r3, r9
    f798:	4322      	orrs	r2, r4
    f79a:	432b      	orrs	r3, r5
    f79c:	4614      	mov	r4, r2
    f79e:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f7a0:	4642      	mov	r2, r8
    f7a2:	464b      	mov	r3, r9
    f7a4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f7a8:	43f6      	mvns	r6, r6
    f7aa:	43ff      	mvns	r7, r7
    f7ac:	ea48 0802 	orr.w	r8, r8, r2
    f7b0:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f7b4:	ea04 0206 	and.w	r2, r4, r6
    f7b8:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f7bc:	e9dd 4500 	ldrd	r4, r5, [sp]
    f7c0:	ea2a 0404 	bic.w	r4, sl, r4
    f7c4:	ea2b 0505 	bic.w	r5, fp, r5
    f7c8:	46a2      	mov	sl, r4
    f7ca:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f7cc:	ea08 0406 	and.w	r4, r8, r6
    f7d0:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f7d4:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f7d8:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f7dc:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f7e0:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f7e4:	3d01      	subs	r5, #1
    f7e6:	b2ed      	uxtb	r5, r5
    f7e8:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f7ec:	b115      	cbz	r5, f7f4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f7ee:	b011      	add	sp, #68	; 0x44
    f7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7f4:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f7f6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f7fa:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f7fe:	4608      	mov	r0, r1
    f800:	f001 fd9e 	bl	11340 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f804:	4629      	mov	r1, r5
    f806:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f808:	f001 fc6e 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f80c:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f810:	f10c 0309 	add.w	r3, ip, #9
    f814:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f816:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f81a:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f81c:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f81e:	2acc      	cmp	r2, #204	; 0xcc
    f820:	f000 814e 	beq.w	fac0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f824:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f828:	1c5a      	adds	r2, r3, #1
    f82a:	b292      	uxth	r2, r2
    f82c:	3b04      	subs	r3, #4
    f82e:	4616      	mov	r6, r2
    f830:	920b      	str	r2, [sp, #44]	; 0x2c
    f832:	b29b      	uxth	r3, r3
    f834:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f838:	4293      	cmp	r3, r2
    f83a:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f83e:	f240 81c6 	bls.w	fbce <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f842:	2200      	movs	r2, #0
    f844:	2300      	movs	r3, #0
    f846:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f84a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f84e:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f852:	ea22 0000 	bic.w	r0, r2, r0
    f856:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f85a:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f85e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f862:	4610      	mov	r0, r2
    f864:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f866:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f86a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f86e:	f1bc 0f00 	cmp.w	ip, #0
    f872:	f000 81d3 	beq.w	fc1c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f876:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f87a:	2200      	movs	r2, #0
    f87c:	2000      	movs	r0, #0
    f87e:	2100      	movs	r1, #0
    f880:	4613      	mov	r3, r2
    f882:	e9cd 0100 	strd	r0, r1, [sp]
    f886:	f04f 0801 	mov.w	r8, #1
    f88a:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f88e:	f04f 0a0c 	mov.w	sl, #12
    f892:	e038      	b.n	f906 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f894:	0099      	lsls	r1, r3, #2
    f896:	18c8      	adds	r0, r1, r3
    f898:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f89c:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f8a0:	f10b 3bff 	add.w	fp, fp, #4294967295
    f8a4:	fa1f fb8b 	uxth.w	fp, fp
    f8a8:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f8ac:	f1bb 0f00 	cmp.w	fp, #0
    f8b0:	d107      	bne.n	f8c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f8b2:	ea26 0608 	bic.w	r6, r6, r8
    f8b6:	ea27 0709 	bic.w	r7, r7, r9
    f8ba:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f8be:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f8c2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f8c6:	ea06 0608 	and.w	r6, r6, r8
    f8ca:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f8ce:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f8d0:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f8d4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f8d8:	d04e      	beq.n	f978 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f8da:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f8de:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f8e2:	b93b      	cbnz	r3, f8f4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
    f8e8:	ea40 0008 	orr.w	r0, r0, r8
    f8ec:	ea41 0109 	orr.w	r1, r1, r9
    f8f0:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f8f4:	3201      	adds	r2, #1
    f8f6:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f8f8:	eb18 0808 	adds.w	r8, r8, r8
    f8fc:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f900:	4596      	cmp	lr, r2
    f902:	4613      	mov	r3, r2
    f904:	dd59      	ble.n	f9ba <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f906:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f90a:	4606      	mov	r6, r0
    f90c:	460f      	mov	r7, r1
    f90e:	ea00 0008 	and.w	r0, r0, r8
    f912:	ea01 0109 	and.w	r1, r1, r9
    f916:	4301      	orrs	r1, r0
    f918:	d1bc      	bne.n	f894 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f91a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f91e:	ea00 0008 	and.w	r0, r0, r8
    f922:	ea01 0109 	and.w	r1, r1, r9
    f926:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f928:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f92c:	eb01 0003 	add.w	r0, r1, r3
    f930:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f934:	d02b      	beq.n	f98e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f936:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f93a:	f1bb 0f00 	cmp.w	fp, #0
    f93e:	d0c0      	beq.n	f8c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f940:	f10b 3bff 	add.w	fp, fp, #4294967295
    f944:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f948:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f94c:	f1bb 0f00 	cmp.w	fp, #0
    f950:	d1b7      	bne.n	f8c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f952:	ea46 0608 	orr.w	r6, r6, r8
    f956:	ea47 0709 	orr.w	r7, r7, r9
    f95a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f95e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f962:	ea46 0608 	orr.w	r6, r6, r8
    f966:	ea47 0709 	orr.w	r7, r7, r9
    f96a:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    f96e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    f972:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    f976:	e7a4      	b.n	f8c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    f978:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    f97c:	2800      	cmp	r0, #0
    f97e:	d0b9      	beq.n	f8f4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    f980:	3801      	subs	r0, #1
    f982:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    f984:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f988:	2800      	cmp	r0, #0
    f98a:	d0ab      	beq.n	f8e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    f98c:	e7b2      	b.n	f8f4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    f98e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f992:	ea26 0608 	bic.w	r6, r6, r8
    f996:	ea27 0709 	bic.w	r7, r7, r9
    f99a:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f99e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    f9a2:	e78e      	b.n	f8c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    f9a4:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    f9a8:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    f9ac:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f9b0:	4314      	orrs	r4, r2
    f9b2:	431d      	orrs	r5, r3
    f9b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f9b8:	e6b2      	b.n	f720 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    f9ba:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    f9be:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f9c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f9c6:	ea80 000a 	eor.w	r0, r0, sl
    f9ca:	ea81 010b 	eor.w	r1, r1, fp
    f9ce:	4002      	ands	r2, r0
    f9d0:	400b      	ands	r3, r1
    f9d2:	ea82 080a 	eor.w	r8, r2, sl
    f9d6:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f9da:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    f9de:	ea28 000a 	bic.w	r0, r8, sl
    f9e2:	ea29 010b 	bic.w	r1, r9, fp
    f9e6:	ea40 0602 	orr.w	r6, r0, r2
    f9ea:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f9ee:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    f9f2:	e9cd 8900 	strd	r8, r9, [sp]
    f9f6:	ea2a 0808 	bic.w	r8, sl, r8
    f9fa:	ea2b 0909 	bic.w	r9, fp, r9
    f9fe:	ea43 0109 	orr.w	r1, r3, r9
    fa02:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    fa06:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    fa0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    fa0c:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    fa10:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    fa14:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    fa18:	2b00      	cmp	r3, #0
    fa1a:	f000 8083 	beq.w	fb24 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    fa1e:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fa22:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    fa26:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    fa2a:	ea03 0907 	and.w	r9, r3, r7
    fa2e:	ea29 0101 	bic.w	r1, r9, r1
    fa32:	ea02 0806 	and.w	r8, r2, r6
    fa36:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fa38:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fa3c:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fa3e:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    fa42:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fa44:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    fa46:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fa4a:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fa4e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    fa52:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fa54:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fa56:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    fa5a:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fa5e:	fa01 f505 	lsl.w	r5, r1, r5
    fa62:	fa20 f203 	lsr.w	r2, r0, r3
    fa66:	432a      	orrs	r2, r5
    fa68:	f1a3 0520 	sub.w	r5, r3, #32
    fa6c:	fa21 f505 	lsr.w	r5, r1, r5
    fa70:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    fa72:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fa76:	f8d4 500d 	ldr.w	r5, [r4, #13]
    fa7a:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    fa7e:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fa82:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fa86:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    fa88:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fa8c:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    fa8e:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fa92:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fa94:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fa98:	2101      	movs	r1, #1
    fa9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fa9c:	f001 fb24 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    faa0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    faa4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    faa6:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    faa8:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    faac:	2501      	movs	r5, #1
    faae:	321b      	adds	r2, #27
    fab0:	4421      	add	r1, r4
    fab2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    fab6:	b011      	add	sp, #68	; 0x44
    fab8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fabc:	f001 bbee 	b.w	1129c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    fac0:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    fac4:	f8d4 701f 	ldr.w	r7, [r4, #31]
    fac8:	f8d4 601b 	ldr.w	r6, [r4, #27]
    facc:	42bb      	cmp	r3, r7
    face:	bf08      	it	eq
    fad0:	42b2      	cmpeq	r2, r6
    fad2:	f47f aea7 	bne.w	f824 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fad6:	f8d4 2013 	ldr.w	r2, [r4, #19]
    fada:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    fade:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fae2:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    fae6:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fae8:	ea6f 0903 	mvn.w	r9, r3
    faec:	ea6f 0802 	mvn.w	r8, r2
    faf0:	f1c6 0720 	rsb	r7, r6, #32
    faf4:	fa28 f306 	lsr.w	r3, r8, r6
    faf8:	fa09 f707 	lsl.w	r7, r9, r7
    fafc:	f1a6 0220 	sub.w	r2, r6, #32
    fb00:	fa29 f202 	lsr.w	r2, r9, r2
    fb04:	433b      	orrs	r3, r7
    fb06:	4313      	orrs	r3, r2
    fb08:	9308      	str	r3, [sp, #32]
    fb0a:	fa29 f306 	lsr.w	r3, r9, r6
    fb0e:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    fb10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    fb14:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    fb18:	4042      	eors	r2, r0
    fb1a:	404b      	eors	r3, r1
    fb1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    fb20:	950b      	str	r5, [sp, #44]	; 0x2c
    fb22:	e694      	b.n	f84e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fb24:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    fb28:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    fb2c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fb30:	4016      	ands	r6, r2
    fb32:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    fb34:	ea40 0206 	orr.w	r2, r0, r6
    fb38:	ea41 0307 	orr.w	r3, r1, r7
    fb3c:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    fb40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    fb44:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fb46:	46b0      	mov	r8, r6
    fb48:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    fb4a:	bf08      	it	eq
    fb4c:	42b2      	cmpeq	r2, r6
    fb4e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    fb52:	f43f af64 	beq.w	fa1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    fb56:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    fb5a:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    fb5e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    fb62:	d053      	beq.n	fc0c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    fb64:	f8df e0c8 	ldr.w	lr, [pc, #200]	; fc30 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    fb68:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fb6c:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    fb70:	433e      	orrs	r6, r7
    fb72:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    fb76:	ea29 0701 	bic.w	r7, r9, r1
    fb7a:	ea28 0600 	bic.w	r6, r8, r0
    fb7e:	ea56 0307 	orrs.w	r3, r6, r7
    fb82:	f43f af4c 	beq.w	fa1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    fb86:	ea48 0200 	orr.w	r2, r8, r0
    fb8a:	ea49 0301 	orr.w	r3, r9, r1
    fb8e:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fb92:	f1bc 0f00 	cmp.w	ip, #0
    fb96:	f43f af42 	beq.w	fa1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    fb9a:	4e24      	ldr	r6, [pc, #144]	; (fc2c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fb9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fb9e:	2701      	movs	r7, #1
    fba0:	e005      	b.n	fbae <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fba2:	3501      	adds	r5, #1
    fba4:	b2ed      	uxtb	r5, r5
    fba6:	4565      	cmp	r5, ip
    fba8:	462a      	mov	r2, r5
    fbaa:	f6bf af38 	bge.w	fa1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    fbae:	ab10      	add	r3, sp, #64	; 0x40
    fbb0:	442b      	add	r3, r5
    fbb2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	d0f3      	beq.n	fba2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fbba:	fa07 f202 	lsl.w	r2, r7, r2
    fbbe:	b2d2      	uxtb	r2, r2
    fbc0:	2103      	movs	r1, #3
    fbc2:	6830      	ldr	r0, [r6, #0]
    fbc4:	f001 ff86 	bl	11ad4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    fbc8:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    fbcc:	e7e9      	b.n	fba2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    fbce:	2101      	movs	r1, #1
    fbd0:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fbd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fbd6:	f001 fa87 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    fbda:	4914      	ldr	r1, [pc, #80]	; (fc2c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    fbdc:	2300      	movs	r3, #0
    fbde:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fbe0:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    fbe2:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fbe6:	2102      	movs	r1, #2
    fbe8:	2208      	movs	r2, #8
    fbea:	f001 ff73 	bl	11ad4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fbee:	4b10      	ldr	r3, [pc, #64]	; (fc30 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    fbf0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    fbf4:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fbf8:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fbfc:	43d2      	mvns	r2, r2
    fbfe:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    fc00:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc02:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fc06:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    fc0a:	e5f0      	b.n	f7ee <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    fc0c:	4a08      	ldr	r2, [pc, #32]	; (fc30 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc0e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    fc12:	ea23 0307 	bic.w	r3, r3, r7
    fc16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    fc1a:	e700      	b.n	fa1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fc1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    fc20:	2200      	movs	r2, #0
    fc22:	2300      	movs	r3, #0
    fc24:	e9cd 2300 	strd	r2, r3, [sp]
    fc28:	e6c9      	b.n	f9be <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    fc2a:	bf00      	nop
    fc2c:	20001f28 	.word	0x20001f28
    fc30:	200019e0 	.word	0x200019e0

0000fc34 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fc34:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fc36:	b1c1      	cbz	r1, fc6a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fc38:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    fc3c:	b1aa      	cbz	r2, fc6a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fc3e:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    fc42:	b192      	cbz	r2, fc6a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fc44:	4a09      	ldr	r2, [pc, #36]	; (fc6c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    fc46:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fc48:	6812      	ldr	r2, [r2, #0]
    fc4a:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fc4e:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fc52:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fc54:	42a2      	cmp	r2, r4
    fc56:	d907      	bls.n	fc68 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    fc58:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fc5a:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    fc5e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    fc62:	bc30      	pop	{r4, r5}
    fc64:	f7ff b9c0 	b.w	efe8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    fc68:	bc30      	pop	{r4, r5}
    fc6a:	4770      	bx	lr
    fc6c:	20001bf0 	.word	0x20001bf0

0000fc70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    fc70:	4a0e      	ldr	r2, [pc, #56]	; (fcac <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    fc72:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    fc74:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    fc78:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fc7c:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    fc80:	43f3      	mvns	r3, r6
    fc82:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    fc84:	2700      	movs	r7, #0
    fc86:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    fc8a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fc8e:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fc92:	bf15      	itete	ne
    fc94:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc98:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fc9c:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fc9e:	400b      	andeq	r3, r1
    fca0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    fca4:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    fca6:	f7ff bc6f 	b.w	f588 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    fcaa:	bf00      	nop
    fcac:	200019e0 	.word	0x200019e0

0000fcb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fcb0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    fcb4:	2b02      	cmp	r3, #2
    fcb6:	d005      	beq.n	fcc4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    fcb8:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    fcbc:	b12b      	cbz	r3, fcca <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    fcbe:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    fcc2:	b913      	cbnz	r3, fcca <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    fcc4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    fcc8:	4770      	bx	lr
    m_serPort = comInstance;
    fcca:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    fccc:	b109      	cbz	r1, fcd2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    fcce:	f7ff b98b 	b.w	efe8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    fcd2:	4b04      	ldr	r3, [pc, #16]	; (fce4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    fcd4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    fcd8:	681b      	ldr	r3, [r3, #0]
    fcda:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    fcde:	4608      	mov	r0, r1
    fce0:	4770      	bx	lr
    fce2:	bf00      	nop
    fce4:	20001bf0 	.word	0x20001bf0

0000fce8 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    fce8:	3940      	subs	r1, #64	; 0x40
    fcea:	b28b      	uxth	r3, r1
    fcec:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    fcee:	bf9d      	ittte	ls
    fcf0:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    fcf4:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    fcf8:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    fcfa:	2000      	movhi	r0, #0
    }
}
    fcfc:	4770      	bx	lr
    fcfe:	bf00      	nop

0000fd00 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    fd00:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    fd02:	f7ff fbb5 	bl	f470 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    fd06:	4b01      	ldr	r3, [pc, #4]	; (fd0c <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    fd08:	6018      	str	r0, [r3, #0]
    fd0a:	bd08      	pop	{r3, pc}
    fd0c:	20001f0c 	.word	0x20001f0c

0000fd10 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    fd10:	7980      	ldrb	r0, [r0, #6]
    fd12:	4770      	bx	lr

0000fd14 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    fd14:	2009      	movs	r0, #9
    fd16:	4770      	bx	lr

0000fd18 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    fd18:	7980      	ldrb	r0, [r0, #6]
    }
    fd1a:	f1a0 0004 	sub.w	r0, r0, #4
    fd1e:	fab0 f080 	clz	r0, r0
    fd22:	0940      	lsrs	r0, r0, #5
    fd24:	4770      	bx	lr
    fd26:	bf00      	nop

0000fd28 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    fd28:	4770      	bx	lr
    fd2a:	bf00      	nop

0000fd2c <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    fd2c:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fd2e:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    fd32:	2201      	movs	r2, #1
    fd34:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    fd38:	f1c5 0420 	rsb	r4, r5, #32
    fd3c:	fa22 f404 	lsr.w	r4, r2, r4
    fd40:	fa02 f303 	lsl.w	r3, r2, r3
    fd44:	4323      	orrs	r3, r4
    fd46:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fd48:	2602      	movs	r6, #2
    m_filterLength = 3;
    fd4a:	4d07      	ldr	r5, [pc, #28]	; (fd68 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    fd4c:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    fd4e:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fd50:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fd52:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    fd54:	6105      	str	r5, [r0, #16]
    fd56:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fd58:	6082      	str	r2, [r0, #8]
    fd5a:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    fd5c:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    fd5e:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    fd60:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    fd62:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    fd64:	bc70      	pop	{r4, r5, r6}
    fd66:	4770      	bx	lr
    fd68:	00010003 	.word	0x00010003

0000fd6c <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    fd6c:	7983      	ldrb	r3, [r0, #6]
    fd6e:	428b      	cmp	r3, r1
    fd70:	d02f      	beq.n	fdd2 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    fd72:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    fd74:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    fd78:	d014      	beq.n	fda4 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    fd7a:	2904      	cmp	r1, #4
    fd7c:	d10b      	bne.n	fd96 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    fd7e:	4b16      	ldr	r3, [pc, #88]	; (fdd8 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fd80:	681e      	ldr	r6, [r3, #0]
    fd82:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fd86:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    fd8a:	432b      	orrs	r3, r5
    fd8c:	4322      	orrs	r2, r4
    fd8e:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    fd92:	460b      	mov	r3, r1
            m_mode = newMode;
    fd94:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    fd96:	1ac8      	subs	r0, r1, r3
    fd98:	fab0 f080 	clz	r0, r0
    fd9c:	0940      	lsrs	r0, r0, #5
}
    fd9e:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    fda2:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    fda4:	4b0c      	ldr	r3, [pc, #48]	; (fdd8 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fda6:	681e      	ldr	r6, [r3, #0]
    fda8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fdac:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fdb0:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fdb4:	43d2      	mvns	r2, r2
    fdb6:	43db      	mvns	r3, r3
    fdb8:	4014      	ands	r4, r2
    fdba:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fdbc:	ea02 0208 	and.w	r2, r2, r8
    fdc0:	ea03 0309 	and.w	r3, r3, r9
    fdc4:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fdc8:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    fdcc:	460b      	mov	r3, r1
            m_mode = newMode;
    fdce:	7181      	strb	r1, [r0, #6]
            break;
    fdd0:	e7e1      	b.n	fd96 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    fdd2:	2001      	movs	r0, #1
    fdd4:	4770      	bx	lr
    fdd6:	bf00      	nop
    fdd8:	20001f0c 	.word	0x20001f0c

0000fddc <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    fddc:	7983      	ldrb	r3, [r0, #6]
    fdde:	2b02      	cmp	r3, #2
    fde0:	d010      	beq.n	fe04 <_ZN9ClearCore7CcioPin5StateEv+0x28>
    fde2:	2b04      	cmp	r3, #4
    fde4:	d10c      	bne.n	fe00 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    fde6:	4b0b      	ldr	r3, [pc, #44]	; (fe14 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fde8:	681b      	ldr	r3, [r3, #0]
    fdea:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fdee:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fdf2:	4002      	ands	r2, r0
    fdf4:	400b      	ands	r3, r1
    fdf6:	4313      	orrs	r3, r2
    fdf8:	bf14      	ite	ne
    fdfa:	2001      	movne	r0, #1
    fdfc:	2000      	moveq	r0, #0
            break;
    fdfe:	4770      	bx	lr
    switch (m_mode) {
    fe00:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    fe02:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fe04:	4b03      	ldr	r3, [pc, #12]	; (fe14 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fe06:	681b      	ldr	r3, [r3, #0]
    fe08:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fe0c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    fe10:	e7ef      	b.n	fdf2 <_ZN9ClearCore7CcioPin5StateEv+0x16>
    fe12:	bf00      	nop
    fe14:	20001f0c 	.word	0x20001f0c

0000fe18 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    fe18:	4b06      	ldr	r3, [pc, #24]	; (fe34 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    fe1a:	681b      	ldr	r3, [r3, #0]
    fe1c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fe20:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    fe24:	4002      	ands	r2, r0
    fe26:	400b      	ands	r3, r1
    fe28:	4313      	orrs	r3, r2
}
    fe2a:	bf14      	ite	ne
    fe2c:	2001      	movne	r0, #1
    fe2e:	2000      	moveq	r0, #0
    fe30:	4770      	bx	lr
    fe32:	bf00      	nop
    fe34:	20001f0c 	.word	0x20001f0c

0000fe38 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    fe38:	7983      	ldrb	r3, [r0, #6]
    fe3a:	2b04      	cmp	r3, #4
    fe3c:	d11c      	bne.n	fe78 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    fe3e:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    fe40:	4b0e      	ldr	r3, [pc, #56]	; (fe7c <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    fe42:	b969      	cbnz	r1, fe60 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fe44:	6819      	ldr	r1, [r3, #0]
    fe46:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fe4a:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    fe4e:	ea24 0202 	bic.w	r2, r4, r2
    fe52:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    fe56:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fe58:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fe5c:	bc30      	pop	{r4, r5}
    fe5e:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    fe60:	6819      	ldr	r1, [r3, #0]
    fe62:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fe66:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    fe6a:	4322      	orrs	r2, r4
    fe6c:	432b      	orrs	r3, r5
    fe6e:	2001      	movs	r0, #1
    fe70:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fe74:	bc30      	pop	{r4, r5}
    fe76:	4770      	bx	lr
    bool success = false;
    fe78:	2000      	movs	r0, #0
    fe7a:	4770      	bx	lr
    fe7c:	20001f0c 	.word	0x20001f0c

0000fe80 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    fe80:	b5d0      	push	{r4, r6, r7, lr}
    fe82:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    fe84:	f7fe fca6 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
    fe88:	4b08      	ldr	r3, [pc, #32]	; (feac <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    fe8a:	4909      	ldr	r1, [pc, #36]	; (feb0 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    fe8c:	6023      	str	r3, [r4, #0]
    fe8e:	2600      	movs	r6, #0
    fe90:	2300      	movs	r3, #0
    fe92:	2700      	movs	r7, #0
    fe94:	220c      	movs	r2, #12
    fe96:	e9c4 6702 	strd	r6, r7, [r4, #8]
    fe9a:	6121      	str	r1, [r4, #16]
    fe9c:	6162      	str	r2, [r4, #20]
    fe9e:	61a3      	str	r3, [r4, #24]
    fea0:	61e3      	str	r3, [r4, #28]
    fea2:	6223      	str	r3, [r4, #32]
    fea4:	6263      	str	r3, [r4, #36]	; 0x24
    fea6:	4620      	mov	r0, r4
    fea8:	bdd0      	pop	{r4, r6, r7, pc}
    feaa:	bf00      	nop
    feac:	000235d0 	.word	0x000235d0
    feb0:	00010003 	.word	0x00010003

0000feb4 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    feb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    feb6:	4e14      	ldr	r6, [pc, #80]	; (ff08 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    feb8:	6834      	ldr	r4, [r6, #0]
    feba:	f014 0401 	ands.w	r4, r4, #1
    febe:	d002      	beq.n	fec6 <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    fec0:	4b12      	ldr	r3, [pc, #72]	; (ff0c <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    fec2:	6818      	ldr	r0, [r3, #0]
    fec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fec6:	2080      	movs	r0, #128	; 0x80
    fec8:	f003 fbea 	bl	136a0 <_Znwj>
    fecc:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    fece:	2701      	movs	r7, #1
    fed0:	2240      	movs	r2, #64	; 0x40
    fed2:	602c      	str	r4, [r5, #0]
    fed4:	606c      	str	r4, [r5, #4]
    fed6:	60ac      	str	r4, [r5, #8]
    fed8:	60ec      	str	r4, [r5, #12]
    feda:	612c      	str	r4, [r5, #16]
    fedc:	616c      	str	r4, [r5, #20]
    fede:	4621      	mov	r1, r4
    fee0:	61ac      	str	r4, [r5, #24]
    fee2:	61ec      	str	r4, [r5, #28]
    fee4:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    fee6:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    fee8:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    feea:	62ec      	str	r4, [r5, #44]	; 0x2c
    feec:	632c      	str	r4, [r5, #48]	; 0x30
    feee:	636c      	str	r4, [r5, #52]	; 0x34
    fef0:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    fef4:	303c      	adds	r0, #60	; 0x3c
    fef6:	f00e fc71 	bl	1e7dc <memset>
    static InputManager *instance = new InputManager();
    fefa:	4b04      	ldr	r3, [pc, #16]	; (ff0c <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    fefc:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    ff00:	6037      	str	r7, [r6, #0]
    ff02:	601d      	str	r5, [r3, #0]
    ff04:	4628      	mov	r0, r5
}
    ff06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff08:	20001f14 	.word	0x20001f14
    ff0c:	20001f1c 	.word	0x20001f1c

0000ff10 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    ff10:	4902      	ldr	r1, [pc, #8]	; (ff1c <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    ff12:	4a03      	ldr	r2, [pc, #12]	; (ff20 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    ff14:	4b03      	ldr	r3, [pc, #12]	; (ff24 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    ff16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ff1a:	4770      	bx	lr
    ff1c:	41008020 	.word	0x41008020
    ff20:	410080a0 	.word	0x410080a0
    ff24:	41008120 	.word	0x41008120

0000ff28 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    ff28:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    ff2a:	b2cc      	uxtb	r4, r1
    ff2c:	2c0f      	cmp	r4, #15
    ff2e:	d82e      	bhi.n	ff8e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    ff30:	b1b2      	cbz	r2, ff60 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    ff32:	bb6b      	cbnz	r3, ff90 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    ff34:	2301      	movs	r3, #1
    ff36:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    ff3a:	f100 0334 	add.w	r3, r0, #52	; 0x34
    ff3e:	f3bf 8f5b 	dmb	ish
    ff42:	e853 2f00 	ldrex	r2, [r3]
    ff46:	430a      	orrs	r2, r1
    ff48:	e843 2400 	strex	r4, r2, [r3]
    ff4c:	2c00      	cmp	r4, #0
    ff4e:	d1f8      	bne.n	ff42 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    ff50:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    ff54:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    ff58:	b1cb      	cbz	r3, ff8e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    ff5a:	4b10      	ldr	r3, [pc, #64]	; (ff9c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    ff5c:	6119      	str	r1, [r3, #16]
    ff5e:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    ff60:	2301      	movs	r3, #1
    ff62:	fa03 f101 	lsl.w	r1, r3, r1
    ff66:	43ca      	mvns	r2, r1
    ff68:	f100 0334 	add.w	r3, r0, #52	; 0x34
    ff6c:	f3bf 8f5b 	dmb	ish
    ff70:	e853 4f00 	ldrex	r4, [r3]
    ff74:	4014      	ands	r4, r2
    ff76:	e843 4e00 	strex	lr, r4, [r3]
    ff7a:	f1be 0f00 	cmp.w	lr, #0
    ff7e:	d1f7      	bne.n	ff70 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    ff80:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    ff84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    ff88:	b10b      	cbz	r3, ff8e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    ff8a:	4b04      	ldr	r3, [pc, #16]	; (ff9c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    ff8c:	60d9      	str	r1, [r3, #12]
    ff8e:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    ff90:	2201      	movs	r2, #1
    ff92:	4b02      	ldr	r3, [pc, #8]	; (ff9c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    ff94:	fa02 f101 	lsl.w	r1, r2, r1
    ff98:	6159      	str	r1, [r3, #20]
    ff9a:	e7ce      	b.n	ff3a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    ff9c:	40002800 	.word	0x40002800

0000ffa0 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    ffa0:	290f      	cmp	r1, #15
    ffa2:	dc14      	bgt.n	ffce <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    ffa4:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    ffa8:	40cb      	lsrs	r3, r1
    ffaa:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    ffae:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    ffb2:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    ffb4:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    ffb8:	d10a      	bne.n	ffd0 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    ffba:	4a0f      	ldr	r2, [pc, #60]	; (fff8 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    ffbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    ffc0:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    ffc2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    ffc4:	b113      	cbz	r3, ffcc <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    ffc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    ffca:	4718      	bx	r3
    ffcc:	bd10      	pop	{r4, pc}
    ffce:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    ffd0:	43dc      	mvns	r4, r3
    ffd2:	f100 0234 	add.w	r2, r0, #52	; 0x34
    ffd6:	f3bf 8f5b 	dmb	ish
    ffda:	e852 ef00 	ldrex	lr, [r2]
    ffde:	ea0e 0e04 	and.w	lr, lr, r4
    ffe2:	e842 ec00 	strex	ip, lr, [r2]
    ffe6:	f1bc 0f00 	cmp.w	ip, #0
    ffea:	d1f6      	bne.n	ffda <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    ffec:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    fff0:	4a01      	ldr	r2, [pc, #4]	; (fff8 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    fff2:	60d3      	str	r3, [r2, #12]
    fff4:	e7e1      	b.n	ffba <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    fff6:	bf00      	nop
    fff8:	40002800 	.word	0x40002800

0000fffc <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    fffc:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    fffe:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   10000:	681b      	ldr	r3, [r3, #0]
   10002:	60c3      	str	r3, [r0, #12]
   10004:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   10006:	404b      	eors	r3, r1
   10008:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1000a:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   1000c:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1000e:	6881      	ldr	r1, [r0, #8]
   10010:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   10012:	4053      	eors	r3, r2
   10014:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   10016:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
   10018:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
   1001a:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
   1001c:	4053      	eors	r3, r2
   1001e:	6203      	str	r3, [r0, #32]
   10020:	4770      	bx	lr
   10022:	bf00      	nop

00010024 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
   10024:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
   10026:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10028:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
   1002a:	f3bf 8f5b 	dmb	ish
   1002e:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
   10032:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
   10036:	e852 1f00 	ldrex	r1, [r2]
   1003a:	4319      	orrs	r1, r3
   1003c:	e842 1e00 	strex	lr, r1, [r2]
   10040:	f1be 0f00 	cmp.w	lr, #0
   10044:	d1f7      	bne.n	10036 <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
   10046:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
   1004a:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1004c:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
   1004e:	f3bf 8f5b 	dmb	ish
   10052:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
   10056:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
   1005a:	e852 1f00 	ldrex	r1, [r2]
   1005e:	4319      	orrs	r1, r3
   10060:	e842 1e00 	strex	lr, r1, [r2]
   10064:	f1be 0f00 	cmp.w	lr, #0
   10068:	d1f7      	bne.n	1005a <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
   1006a:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
   1006e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10070:	6283      	str	r3, [r0, #40]	; 0x28
   10072:	f85d fb04 	ldr.w	pc, [sp], #4
   10076:	bf00      	nop

00010078 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
   10078:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
   1007a:	f7ff ff1b 	bl	feb4 <_ZN9ClearCore12InputManager8InstanceEv>
   1007e:	4b01      	ldr	r3, [pc, #4]	; (10084 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
   10080:	6018      	str	r0, [r3, #0]
   10082:	bd08      	pop	{r3, pc}
   10084:	20001f18 	.word	0x20001f18

00010088 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10088:	b530      	push	{r4, r5, lr}
   1008a:	b083      	sub	sp, #12
   1008c:	9d06      	ldr	r5, [sp, #24]
   1008e:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
   10092:	9500      	str	r5, [sp, #0]
   10094:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10096:	4604      	mov	r4, r0
      m_errorCode(0) {
   10098:	2500      	movs	r5, #0
   1009a:	f000 ffbb 	bl	11014 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1009e:	4b09      	ldr	r3, [pc, #36]	; (100c4 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
   100a0:	6023      	str	r3, [r4, #0]
   100a2:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
   100a6:	4620      	mov	r0, r4
   100a8:	2101      	movs	r1, #1
   100aa:	f001 f811 	bl	110d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
   100ae:	462a      	mov	r2, r5
   100b0:	4629      	mov	r1, r5
   100b2:	4620      	mov	r0, r4
   100b4:	f001 f852 	bl	1115c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
   100b8:	4620      	mov	r0, r4
   100ba:	f000 ff9f 	bl	10ffc <_ZN9ClearCore10SerialBase8PortOpenEv>
}
   100be:	4620      	mov	r0, r4
   100c0:	b003      	add	sp, #12
   100c2:	bd30      	pop	{r4, r5, pc}
   100c4:	00022f14 	.word	0x00022f14

000100c8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
   100c8:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   100cc:	4770      	bx	lr
   100ce:	bf00      	nop

000100d0 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
   100d0:	2300      	movs	r3, #0
    m_outTail = 0;
   100d2:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   100d6:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   100da:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
   100de:	4770      	bx	lr

000100e0 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100e0:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
   100e2:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100e4:	2104      	movs	r1, #4
    m_inTail = 0;
   100e6:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
   100ea:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
   100ec:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   100f0:	7591      	strb	r1, [r2, #22]
   100f2:	4770      	bx	lr

000100f4 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
   100f4:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
   100f8:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   100fc:	4291      	cmp	r1, r2
   100fe:	d012      	beq.n	10126 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
   10100:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
   10102:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
   10106:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1010a:	6904      	ldr	r4, [r0, #16]
   1010c:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   1010e:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
   10110:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10112:	2504      	movs	r5, #4
   10114:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
   10118:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
   1011c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10120:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
   10122:	bc30      	pop	{r4, r5}
   10124:	4770      	bx	lr
        return SerialBase::EOB;
   10126:	f04f 30ff 	mov.w	r0, #4294967295
   1012a:	4770      	bx	lr

0001012c <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
   1012c:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   10130:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   10134:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
   10136:	bf1d      	ittte	ne
   10138:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
   1013c:	3318      	addne	r3, #24
   1013e:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
   10142:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
   10146:	4770      	bx	lr

00010148 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
   10148:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   1014c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
   10150:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
   10152:	bf48      	it	mi
   10154:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
   10156:	4770      	bx	lr

00010158 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
   10158:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   1015c:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
   10160:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
   10162:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
   10164:	bf48      	it	mi
   10166:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
   10168:	4770      	bx	lr
   1016a:	bf00      	nop

0001016c <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
   1016c:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
   1016e:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10172:	b1b8      	cbz	r0, 101a4 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
   10174:	79d3      	ldrb	r3, [r2, #7]
   10176:	2b01      	cmp	r3, #1
   10178:	d015      	beq.n	101a6 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
   1017a:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
   1017c:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
   10180:	3401      	adds	r4, #1
   10182:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
   10186:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   1018a:	429c      	cmp	r4, r3
   1018c:	d0fb      	beq.n	10186 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
   1018e:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10192:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
   10194:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10196:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
   10198:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
   1019c:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   101a0:	75ae      	strb	r6, [r5, #22]
}
   101a2:	bc70      	pop	{r4, r5, r6}
   101a4:	4770      	bx	lr
        return false;
   101a6:	2000      	movs	r0, #0
   101a8:	4770      	bx	lr
   101aa:	bf00      	nop

000101ac <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
   101ac:	79c3      	ldrb	r3, [r0, #7]
   101ae:	b113      	cbz	r3, 101b6 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
   101b0:	2b01      	cmp	r3, #1
   101b2:	d00e      	beq.n	101d2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
   101b4:	4770      	bx	lr
        while (m_outHead != m_outTail) {
   101b6:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   101ba:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   101be:	429a      	cmp	r2, r3
   101c0:	d1f9      	bne.n	101b6 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   101c2:	6902      	ldr	r2, [r0, #16]
   101c4:	7e13      	ldrb	r3, [r2, #24]
   101c6:	07d8      	lsls	r0, r3, #31
   101c8:	d4f4      	bmi.n	101b4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   101ca:	7e13      	ldrb	r3, [r2, #24]
   101cc:	0799      	lsls	r1, r3, #30
   101ce:	d5fc      	bpl.n	101ca <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
   101d0:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   101d2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   101d6:	2b07      	cmp	r3, #7
   101d8:	d0ec      	beq.n	101b4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
   101da:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   101de:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
   101e0:	b510      	push	{r4, lr}
   101e2:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   101e4:	d005      	beq.n	101f2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
   101e6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   101ea:	b113      	cbz	r3, 101f2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
   101ec:	79e3      	ldrb	r3, [r4, #7]
   101ee:	2b01      	cmp	r3, #1
   101f0:	d000      	beq.n	101f4 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
   101f2:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   101f4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   101f8:	f7fe feda 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   101fc:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   101fe:	079b      	lsls	r3, r3, #30
   10200:	d4f1      	bmi.n	101e6 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
   10202:	e7f6      	b.n	101f2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

00010204 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10208:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
   1020a:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1020c:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   1020e:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10210:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10214:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10216:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1021a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1021e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10222:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10224:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10228:	f36f 0100 	bfc	r1, #0, #1
   1022c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10230:	6813      	ldr	r3, [r2, #0]
   10232:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10234:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10236:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1023a:	d503      	bpl.n	10244 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1023c:	6813      	ldr	r3, [r2, #0]
   1023e:	f36f 0341 	bfc	r3, #1, #1
   10242:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10244:	69d3      	ldr	r3, [r2, #28]
   10246:	f013 0302 	ands.w	r3, r3, #2
   1024a:	d1fb      	bne.n	10244 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
   1024c:	6822      	ldr	r2, [r4, #0]
   1024e:	483a      	ldr	r0, [pc, #232]	; (10338 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
   10250:	6811      	ldr	r1, [r2, #0]
   10252:	4281      	cmp	r1, r0
   10254:	d165      	bne.n	10322 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
   10256:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1025a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1025e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10262:	6853      	ldr	r3, [r2, #4]
   10264:	4a35      	ldr	r2, [pc, #212]	; (1033c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10266:	4293      	cmp	r3, r2
   10268:	d162      	bne.n	10330 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1026a:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   1026c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1026e:	2204      	movs	r2, #4
    m_inTail = 0;
   10270:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10274:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10276:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1027a:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   1027c:	79e0      	ldrb	r0, [r4, #7]
   1027e:	2801      	cmp	r0, #1
   10280:	d124      	bne.n	102cc <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10282:	4b2f      	ldr	r3, [pc, #188]	; (10340 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   10284:	443b      	add	r3, r7
   10286:	fbb3 f3f7 	udiv	r3, r3, r7
   1028a:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   1028c:	2bff      	cmp	r3, #255	; 0xff
   1028e:	bf92      	itee	ls
   10290:	b2db      	uxtbls	r3, r3
   10292:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   10294:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10296:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10298:	b1b6      	cbz	r6, 102c8 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1029a:	682b      	ldr	r3, [r5, #0]
   1029c:	f043 0302 	orr.w	r3, r3, #2
   102a0:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102a2:	69eb      	ldr	r3, [r5, #28]
   102a4:	079b      	lsls	r3, r3, #30
   102a6:	d4fc      	bmi.n	102a2 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102a8:	6a22      	ldr	r2, [r4, #32]
   102aa:	f992 1001 	ldrsb.w	r1, [r2, #1]
   102ae:	7893      	ldrb	r3, [r2, #2]
   102b0:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   102b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   102bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   102c0:	f042 0201 	orr.w	r2, r2, #1
   102c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   102c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   102cc:	4638      	mov	r0, r7
   102ce:	f00b fd3f 	bl	1bd50 <__aeabi_ui2d>
   102d2:	2200      	movs	r2, #0
   102d4:	4b1b      	ldr	r3, [pc, #108]	; (10344 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   102d6:	f00b fdb1 	bl	1be3c <__aeabi_dmul>
   102da:	4b1b      	ldr	r3, [pc, #108]	; (10348 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   102dc:	4680      	mov	r8, r0
   102de:	6818      	ldr	r0, [r3, #0]
   102e0:	4689      	mov	r9, r1
   102e2:	f00b fd35 	bl	1bd50 <__aeabi_ui2d>
   102e6:	4602      	mov	r2, r0
   102e8:	460b      	mov	r3, r1
   102ea:	4640      	mov	r0, r8
   102ec:	4649      	mov	r1, r9
   102ee:	f00b fecf 	bl	1c090 <__aeabi_ddiv>
   102f2:	4602      	mov	r2, r0
   102f4:	460b      	mov	r3, r1
   102f6:	2000      	movs	r0, #0
   102f8:	4914      	ldr	r1, [pc, #80]	; (1034c <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   102fa:	f00b fbeb 	bl	1bad4 <__aeabi_dsub>
   102fe:	2200      	movs	r2, #0
   10300:	4b13      	ldr	r3, [pc, #76]	; (10350 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   10302:	f00b fd9b 	bl	1be3c <__aeabi_dmul>
   10306:	f00c f87b 	bl	1c400 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   1030a:	f00b fd43 	bl	1bd94 <__aeabi_f2d>
   1030e:	2200      	movs	r2, #0
   10310:	4b10      	ldr	r3, [pc, #64]	; (10354 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   10312:	f00b fbe1 	bl	1bad8 <__adddf3>
   10316:	f00c f853 	bl	1c3c0 <__aeabi_d2uiz>
   1031a:	b280      	uxth	r0, r0
   1031c:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   1031e:	2001      	movs	r0, #1
            break;
   10320:	e7ba      	b.n	10298 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   10322:	4620      	mov	r0, r4
   10324:	4788      	blx	r1
   10326:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   10328:	6853      	ldr	r3, [r2, #4]
   1032a:	4a04      	ldr	r2, [pc, #16]	; (1033c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   1032c:	4293      	cmp	r3, r2
   1032e:	d09c      	beq.n	1026a <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   10330:	4620      	mov	r0, r4
   10332:	4798      	blx	r3
   10334:	6925      	ldr	r5, [r4, #16]
   10336:	e7a1      	b.n	1027c <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   10338:	000100d1 	.word	0x000100d1
   1033c:	000100e1 	.word	0x000100e1
   10340:	004c4b3f 	.word	0x004c4b3f
   10344:	40300000 	.word	0x40300000
   10348:	200000e8 	.word	0x200000e8
   1034c:	3ff00000 	.word	0x3ff00000
   10350:	40f00000 	.word	0x40f00000
   10354:	3fe00000 	.word	0x3fe00000

00010358 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   10358:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1035c:	b903      	cbnz	r3, 10360 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   1035e:	4770      	bx	lr
void SerialBase::PortClose() {
   10360:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   10362:	6805      	ldr	r5, [r0, #0]
   10364:	4a3e      	ldr	r2, [pc, #248]	; (10460 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   10366:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10368:	4293      	cmp	r3, r2
   1036a:	4604      	mov	r4, r0
   1036c:	d157      	bne.n	1041e <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   1036e:	79c3      	ldrb	r3, [r0, #7]
   10370:	2b00      	cmp	r3, #0
   10372:	d03f      	beq.n	103f4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   10374:	2b01      	cmp	r3, #1
   10376:	d056      	beq.n	10426 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   10378:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1037a:	69a0      	ldr	r0, [r4, #24]
   1037c:	4939      	ldr	r1, [pc, #228]	; (10464 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   1037e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10382:	7886      	ldrb	r6, [r0, #2]
   10384:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10388:	2001      	movs	r0, #1
   1038a:	40b0      	lsls	r0, r6
   1038c:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1038e:	6a20      	ldr	r0, [r4, #32]
   10390:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10394:	7880      	ldrb	r0, [r0, #2]
   10396:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   1039a:	4403      	add	r3, r0
   1039c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   103a0:	f36f 0100 	bfc	r1, #0, #1
   103a4:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   103a8:	6813      	ldr	r3, [r2, #0]
   103aa:	079b      	lsls	r3, r3, #30
   103ac:	d503      	bpl.n	103b6 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   103ae:	6813      	ldr	r3, [r2, #0]
   103b0:	f36f 0341 	bfc	r3, #1, #1
   103b4:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   103b6:	69d3      	ldr	r3, [r2, #28]
   103b8:	f013 0302 	ands.w	r3, r3, #2
   103bc:	d1fb      	bne.n	103b6 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   103be:	682a      	ldr	r2, [r5, #0]
   103c0:	4929      	ldr	r1, [pc, #164]	; (10468 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   103c2:	428a      	cmp	r2, r1
   103c4:	d124      	bne.n	10410 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   103c6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   103ca:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   103ce:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   103d2:	686b      	ldr	r3, [r5, #4]
   103d4:	4a25      	ldr	r2, [pc, #148]	; (1046c <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   103d6:	4293      	cmp	r3, r2
   103d8:	d11e      	bne.n	10418 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   103da:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   103dc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   103de:	2104      	movs	r1, #4
    m_inTail = 0;
   103e0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   103e4:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   103e6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   103ea:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   103ec:	2300      	movs	r3, #0
   103ee:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   103f2:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   103f4:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   103f8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   103fc:	429a      	cmp	r2, r3
   103fe:	d1f9      	bne.n	103f4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10400:	6922      	ldr	r2, [r4, #16]
   10402:	7e13      	ldrb	r3, [r2, #24]
   10404:	07d8      	lsls	r0, r3, #31
   10406:	d4b8      	bmi.n	1037a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10408:	7e13      	ldrb	r3, [r2, #24]
   1040a:	0799      	lsls	r1, r3, #30
   1040c:	d5fc      	bpl.n	10408 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   1040e:	e7b4      	b.n	1037a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   10410:	4620      	mov	r0, r4
   10412:	4790      	blx	r2
   10414:	6825      	ldr	r5, [r4, #0]
   10416:	e7dc      	b.n	103d2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   10418:	4620      	mov	r0, r4
   1041a:	4798      	blx	r3
   1041c:	e7e6      	b.n	103ec <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   1041e:	4798      	blx	r3
   10420:	6922      	ldr	r2, [r4, #16]
   10422:	6825      	ldr	r5, [r4, #0]
   10424:	e7a9      	b.n	1037a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10426:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   1042a:	2807      	cmp	r0, #7
   1042c:	d0a4      	beq.n	10378 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   1042e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10432:	2b07      	cmp	r3, #7
   10434:	d0a0      	beq.n	10378 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10436:	f7fe fdbb 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1043a:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1043c:	079a      	lsls	r2, r3, #30
   1043e:	d5ef      	bpl.n	10420 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10440:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10444:	2b00      	cmp	r3, #0
   10446:	d0eb      	beq.n	10420 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10448:	79e3      	ldrb	r3, [r4, #7]
   1044a:	2b01      	cmp	r3, #1
   1044c:	d1e8      	bne.n	10420 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   1044e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10452:	f7fe fdad 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10456:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10458:	079a      	lsls	r2, r3, #30
   1045a:	d4f1      	bmi.n	10440 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   1045c:	e7e0      	b.n	10420 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   1045e:	bf00      	nop
   10460:	000101ad 	.word	0x000101ad
   10464:	41008000 	.word	0x41008000
   10468:	000100d1 	.word	0x000100d1
   1046c:	000100e1 	.word	0x000100e1

00010470 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   10470:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   10472:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   10474:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   10476:	2b01      	cmp	r3, #1
   10478:	d101      	bne.n	1047e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   1047a:	2000      	movs	r0, #0
   1047c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1047e:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10480:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10482:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10486:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10488:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1048a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1048e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10492:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10496:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1049a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1049e:	f36f 0100 	bfc	r1, #0, #1
   104a2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   104a6:	6813      	ldr	r3, [r2, #0]
   104a8:	0799      	lsls	r1, r3, #30
   104aa:	d503      	bpl.n	104b4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   104ac:	6813      	ldr	r3, [r2, #0]
   104ae:	f36f 0341 	bfc	r3, #1, #1
   104b2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   104b4:	69d3      	ldr	r3, [r2, #28]
   104b6:	f013 0302 	ands.w	r3, r3, #2
   104ba:	d1fb      	bne.n	104b4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   104bc:	6802      	ldr	r2, [r0, #0]
   104be:	4604      	mov	r4, r0
   104c0:	6811      	ldr	r1, [r2, #0]
   104c2:	4825      	ldr	r0, [pc, #148]	; (10558 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   104c4:	4281      	cmp	r1, r0
   104c6:	d142      	bne.n	1054e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   104c8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   104cc:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   104d0:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   104d4:	6853      	ldr	r3, [r2, #4]
   104d6:	4a21      	ldr	r2, [pc, #132]	; (1055c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   104d8:	4293      	cmp	r3, r2
   104da:	d134      	bne.n	10546 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104dc:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   104de:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104e0:	2104      	movs	r1, #4
    m_inTail = 0;
   104e2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   104e6:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   104e8:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104ec:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   104ee:	7923      	ldrb	r3, [r4, #4]
   104f0:	2b02      	cmp	r3, #2
   104f2:	d023      	beq.n	1053c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   104f4:	6811      	ldr	r1, [r2, #0]
   104f6:	2001      	movs	r0, #1
   104f8:	f360 611b 	bfi	r1, r0, #24, #4
   104fc:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   104fe:	6851      	ldr	r1, [r2, #4]
   10500:	f363 314d 	bfi	r1, r3, #13, #1
   10504:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   10506:	b1bd      	cbz	r5, 10538 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10508:	6813      	ldr	r3, [r2, #0]
   1050a:	f043 0302 	orr.w	r3, r3, #2
   1050e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10510:	69d3      	ldr	r3, [r2, #28]
   10512:	079b      	lsls	r3, r3, #30
   10514:	d4fc      	bmi.n	10510 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10516:	6a22      	ldr	r2, [r4, #32]
   10518:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1051c:	7893      	ldrb	r3, [r2, #2]
   1051e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10522:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10526:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1052a:	2001      	movs	r0, #1
   1052c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10530:	4302      	orrs	r2, r0
   10532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10536:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   10538:	2001      	movs	r0, #1
}
   1053a:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   1053c:	6813      	ldr	r3, [r2, #0]
   1053e:	f36f 631b 	bfc	r3, #24, #4
   10542:	6013      	str	r3, [r2, #0]
   10544:	e7df      	b.n	10506 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   10546:	4620      	mov	r0, r4
   10548:	4798      	blx	r3
   1054a:	6922      	ldr	r2, [r4, #16]
   1054c:	e7cf      	b.n	104ee <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   1054e:	4620      	mov	r0, r4
   10550:	4788      	blx	r1
   10552:	6822      	ldr	r2, [r4, #0]
   10554:	e7be      	b.n	104d4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   10556:	bf00      	nop
   10558:	000100d1 	.word	0x000100d1
   1055c:	000100e1 	.word	0x000100e1

00010560 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   10560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   10562:	1f4b      	subs	r3, r1, #5
   10564:	2b04      	cmp	r3, #4
   10566:	d85d      	bhi.n	10624 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10568:	79c3      	ldrb	r3, [r0, #7]
   1056a:	2b01      	cmp	r3, #1
   1056c:	d056      	beq.n	1061c <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1056e:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   10570:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10572:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10576:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10578:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1057a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1057e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10582:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10586:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10588:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   1058c:	f36f 0400 	bfc	r4, #0, #1
   10590:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10594:	6813      	ldr	r3, [r2, #0]
   10596:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10598:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1059c:	d503      	bpl.n	105a6 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1059e:	6813      	ldr	r3, [r2, #0]
   105a0:	f36f 0341 	bfc	r3, #1, #1
   105a4:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   105a6:	69d3      	ldr	r3, [r2, #28]
   105a8:	f013 0302 	ands.w	r3, r3, #2
   105ac:	d1fb      	bne.n	105a6 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   105ae:	6802      	ldr	r2, [r0, #0]
   105b0:	460f      	mov	r7, r1
   105b2:	6816      	ldr	r6, [r2, #0]
   105b4:	4921      	ldr	r1, [pc, #132]	; (1063c <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   105b6:	428e      	cmp	r6, r1
   105b8:	4604      	mov	r4, r0
   105ba:	d13b      	bne.n	10634 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   105bc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   105c0:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   105c4:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   105c8:	6853      	ldr	r3, [r2, #4]
   105ca:	4a1d      	ldr	r2, [pc, #116]	; (10640 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   105cc:	4293      	cmp	r3, r2
   105ce:	d12d      	bne.n	1062c <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105d0:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   105d2:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105d4:	2104      	movs	r1, #4
    m_inTail = 0;
   105d6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   105da:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   105dc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105e0:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   105e2:	6853      	ldr	r3, [r2, #4]
   105e4:	f367 0302 	bfi	r3, r7, #0, #3
   105e8:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   105ea:	b1ed      	cbz	r5, 10628 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   105ec:	6813      	ldr	r3, [r2, #0]
   105ee:	f043 0302 	orr.w	r3, r3, #2
   105f2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   105f4:	69d3      	ldr	r3, [r2, #28]
   105f6:	079b      	lsls	r3, r3, #30
   105f8:	d4fc      	bmi.n	105f4 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105fa:	6a22      	ldr	r2, [r4, #32]
   105fc:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10600:	7893      	ldrb	r3, [r2, #2]
   10602:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10606:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1060a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1060e:	2001      	movs	r0, #1
   10610:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10614:	4302      	orrs	r2, r0
   10616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   1061c:	f1a1 0308 	sub.w	r3, r1, #8
   10620:	2b01      	cmp	r3, #1
   10622:	d9a4      	bls.n	1056e <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   10624:	2000      	movs	r0, #0
   10626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   10628:	2001      	movs	r0, #1
}
   1062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   1062c:	4620      	mov	r0, r4
   1062e:	4798      	blx	r3
   10630:	6922      	ldr	r2, [r4, #16]
   10632:	e7d6      	b.n	105e2 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   10634:	47b0      	blx	r6
   10636:	6822      	ldr	r2, [r4, #0]
   10638:	e7c6      	b.n	105c8 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   1063a:	bf00      	nop
   1063c:	000100d1 	.word	0x000100d1
   10640:	000100e1 	.word	0x000100e1

00010644 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   10644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   10646:	1e4c      	subs	r4, r1, #1
   10648:	b2e4      	uxtb	r4, r4
   1064a:	2c01      	cmp	r4, #1
   1064c:	d901      	bls.n	10652 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   1064e:	2000      	movs	r0, #0
}
   10650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   10652:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   10654:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   10656:	b10d      	cbz	r5, 1065c <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   10658:	2001      	movs	r0, #1
   1065a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1065c:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1065e:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10660:	f991 7001 	ldrsb.w	r7, [r1, #1]
   10664:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10666:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10668:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   1066c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10670:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10674:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10678:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1067c:	f365 0100 	bfi	r1, r5, #0, #1
   10680:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10684:	6813      	ldr	r3, [r2, #0]
   10686:	0799      	lsls	r1, r3, #30
   10688:	d503      	bpl.n	10692 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1068a:	6813      	ldr	r3, [r2, #0]
   1068c:	f365 0341 	bfi	r3, r5, #1, #1
   10690:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10692:	69d3      	ldr	r3, [r2, #28]
   10694:	f013 0302 	ands.w	r3, r3, #2
   10698:	d1fb      	bne.n	10692 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   1069a:	6802      	ldr	r2, [r0, #0]
   1069c:	4605      	mov	r5, r0
   1069e:	6811      	ldr	r1, [r2, #0]
   106a0:	481d      	ldr	r0, [pc, #116]	; (10718 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   106a2:	4281      	cmp	r1, r0
   106a4:	d130      	bne.n	10708 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   106a6:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   106aa:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   106ae:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   106b2:	6853      	ldr	r3, [r2, #4]
   106b4:	4a19      	ldr	r2, [pc, #100]	; (1071c <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   106b6:	4293      	cmp	r3, r2
   106b8:	d12a      	bne.n	10710 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   106ba:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   106bc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   106be:	2104      	movs	r1, #4
    m_inTail = 0;
   106c0:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   106c4:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   106c6:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   106ca:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   106cc:	6853      	ldr	r3, [r2, #4]
   106ce:	f364 1386 	bfi	r3, r4, #6, #1
   106d2:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   106d4:	2e00      	cmp	r6, #0
   106d6:	d0bf      	beq.n	10658 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   106d8:	6813      	ldr	r3, [r2, #0]
   106da:	f043 0302 	orr.w	r3, r3, #2
   106de:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   106e0:	69d3      	ldr	r3, [r2, #28]
   106e2:	079b      	lsls	r3, r3, #30
   106e4:	d4fc      	bmi.n	106e0 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106e6:	6a2a      	ldr	r2, [r5, #32]
   106e8:	f992 1001 	ldrsb.w	r1, [r2, #1]
   106ec:	7893      	ldrb	r3, [r2, #2]
   106ee:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   106f2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   106f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   106fa:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106fc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10700:	4302      	orrs	r2, r0
   10702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10708:	4628      	mov	r0, r5
   1070a:	4788      	blx	r1
   1070c:	682a      	ldr	r2, [r5, #0]
   1070e:	e7d0      	b.n	106b2 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   10710:	4628      	mov	r0, r5
   10712:	4798      	blx	r3
   10714:	692a      	ldr	r2, [r5, #16]
   10716:	e7d9      	b.n	106cc <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10718:	000100d1 	.word	0x000100d1
   1071c:	000100e1 	.word	0x000100e1

00010720 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   10720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   10724:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   10726:	682b      	ldr	r3, [r5, #0]
   10728:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   1072c:	b089      	sub	sp, #36	; 0x24
   1072e:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   10730:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   10732:	69eb      	ldr	r3, [r5, #28]
   10734:	f013 0301 	ands.w	r3, r3, #1
   10738:	d1fb      	bne.n	10732 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   1073a:	6822      	ldr	r2, [r4, #0]
   1073c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10814 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   10740:	6811      	ldr	r1, [r2, #0]
   10742:	4541      	cmp	r1, r8
   10744:	d153      	bne.n	107ee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   10746:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1074a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1074e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10752:	6853      	ldr	r3, [r2, #4]
   10754:	4a28      	ldr	r2, [pc, #160]	; (107f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   10756:	4293      	cmp	r3, r2
   10758:	d122      	bne.n	107a0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   1075a:	2200      	movs	r2, #0
    m_inTail = 0;
   1075c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10760:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10762:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10764:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   10768:	4a24      	ldr	r2, [pc, #144]	; (107fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1076a:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   1076c:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1076e:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10770:	d01c      	beq.n	107ac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10772:	4a23      	ldr	r2, [pc, #140]	; (10800 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10774:	4293      	cmp	r3, r2
   10776:	f000 8310 	beq.w	10d9a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   1077a:	4a22      	ldr	r2, [pc, #136]	; (10804 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   1077c:	4293      	cmp	r3, r2
   1077e:	f000 8341 	beq.w	10e04 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10782:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10786:	f000 839a 	beq.w	10ebe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   1078a:	4a1f      	ldr	r2, [pc, #124]	; (10808 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   1078c:	4293      	cmp	r3, r2
   1078e:	d043      	beq.n	10818 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10790:	4a1e      	ldr	r2, [pc, #120]	; (1080c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10792:	4293      	cmp	r3, r2
   10794:	f000 8372 	beq.w	10e7c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10798:	2000      	movs	r0, #0
}
   1079a:	b009      	add	sp, #36	; 0x24
   1079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   107a0:	4620      	mov	r0, r4
   107a2:	4798      	blx	r3
   107a4:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   107a6:	4a15      	ldr	r2, [pc, #84]	; (107fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   107a8:	4293      	cmp	r3, r2
   107aa:	d1e2      	bne.n	10772 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   107ac:	2203      	movs	r2, #3
   107ae:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   107b2:	4a17      	ldr	r2, [pc, #92]	; (10810 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   107b4:	9207      	str	r2, [sp, #28]
   107b6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   107ba:	9206      	str	r2, [sp, #24]
   107bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   107c0:	9202      	str	r2, [sp, #8]
   107c2:	2231      	movs	r2, #49	; 0x31
   107c4:	9205      	str	r2, [sp, #20]
   107c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   107ca:	9201      	str	r2, [sp, #4]
   107cc:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   107ce:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   107d0:	2601      	movs	r6, #1
   107d2:	f04f 092e 	mov.w	r9, #46	; 0x2e
   107d6:	9204      	str	r2, [sp, #16]
   107d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   107dc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   107e0:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   107e2:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   107e6:	f04f 0a07 	mov.w	sl, #7
   107ea:	9200      	str	r2, [sp, #0]
   107ec:	e02f      	b.n	1084e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   107ee:	4620      	mov	r0, r4
   107f0:	4788      	blx	r1
   107f2:	6822      	ldr	r2, [r4, #0]
   107f4:	e7ad      	b.n	10752 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   107f6:	bf00      	nop
   107f8:	000100e1 	.word	0x000100e1
   107fc:	40003000 	.word	0x40003000
   10800:	41012000 	.word	0x41012000
   10804:	41014000 	.word	0x41014000
   10808:	43000400 	.word	0x43000400
   1080c:	43000c00 	.word	0x43000c00
   10810:	00200500 	.word	0x00200500
   10814:	000100d1 	.word	0x000100d1
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10818:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1081c:	9207      	str	r2, [sp, #28]
   1081e:	9206      	str	r2, [sp, #24]
   10820:	2220      	movs	r2, #32
   10822:	9202      	str	r2, [sp, #8]
   10824:	2245      	movs	r2, #69	; 0x45
   10826:	9205      	str	r2, [sp, #20]
   10828:	2210      	movs	r2, #16
   1082a:	9201      	str	r2, [sp, #4]
   1082c:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1082e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10830:	2602      	movs	r6, #2
   10832:	f04f 0942 	mov.w	r9, #66	; 0x42
   10836:	9204      	str	r2, [sp, #16]
   10838:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1083a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1083e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10842:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   10844:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10848:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1084c:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   1084e:	6a21      	ldr	r1, [r4, #32]
   10850:	f991 2001 	ldrsb.w	r2, [r1, #1]
   10854:	f891 b002 	ldrb.w	fp, [r1, #2]
   10858:	01d2      	lsls	r2, r2, #7
   1085a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   1085e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10862:	f04f 0e01 	mov.w	lr, #1
   10866:	fa0e fc0b 	lsl.w	ip, lr, fp
   1086a:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   1086e:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   10872:	f894 c007 	ldrb.w	ip, [r4, #7]
   10876:	45f4      	cmp	ip, lr
   10878:	f040 819d 	bne.w	10bb6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1087c:	4dc4      	ldr	r5, [pc, #784]	; (10b90 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   1087e:	4ac5      	ldr	r2, [pc, #788]	; (10b94 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10880:	f107 0e20 	add.w	lr, r7, #32
   10884:	3620      	adds	r6, #32
   10886:	9f00      	ldr	r7, [sp, #0]
   10888:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   1088c:	9f01      	ldr	r7, [sp, #4]
   1088e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10892:	9f02      	ldr	r7, [sp, #8]
   10894:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10898:	f10a 0e20 	add.w	lr, sl, #32
   1089c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   108a0:	f36f 1586 	bfc	r5, #6, #1
   108a4:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   108a8:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   108ac:	066d      	lsls	r5, r5, #25
   108ae:	d4fb      	bmi.n	108a8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   108b0:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   108b4:	4eb7      	ldr	r6, [pc, #732]	; (10b94 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   108b6:	f04f 0c07 	mov.w	ip, #7
   108ba:	f36c 0503 	bfi	r5, ip, #0, #4
   108be:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   108c2:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   108c6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   108ca:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   108ce:	6875      	ldr	r5, [r6, #4]
   108d0:	f015 051c 	ands.w	r5, r5, #28
   108d4:	d1fb      	bne.n	108ce <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   108d6:	681a      	ldr	r2, [r3, #0]
   108d8:	2603      	movs	r6, #3
   108da:	f366 0284 	bfi	r2, r6, #2, #3
   108de:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   108e0:	681a      	ldr	r2, [r3, #0]
   108e2:	7a26      	ldrb	r6, [r4, #8]
   108e4:	f366 725d 	bfi	r2, r6, #29, #1
   108e8:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   108ea:	681a      	ldr	r2, [r3, #0]
   108ec:	7a66      	ldrb	r6, [r4, #9]
   108ee:	f366 721c 	bfi	r2, r6, #28, #1
   108f2:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   108f4:	681a      	ldr	r2, [r3, #0]
   108f6:	f365 621b 	bfi	r2, r5, #24, #4
   108fa:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   108fc:	6962      	ldr	r2, [r4, #20]
   108fe:	681e      	ldr	r6, [r3, #0]
   10900:	7a52      	ldrb	r2, [r2, #9]
   10902:	f362 5615 	bfi	r6, r2, #20, #2
   10906:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10908:	7a49      	ldrb	r1, [r1, #9]
   1090a:	681a      	ldr	r2, [r3, #0]
   1090c:	2900      	cmp	r1, #0
   1090e:	bf0c      	ite	eq
   10910:	2100      	moveq	r1, #0
   10912:	2102      	movne	r1, #2
   10914:	f361 4211 	bfi	r2, r1, #16, #2
   10918:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   1091a:	685a      	ldr	r2, [r3, #4]
   1091c:	79a1      	ldrb	r1, [r4, #6]
   1091e:	f361 0202 	bfi	r2, r1, #0, #3
   10922:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   10924:	681a      	ldr	r2, [r3, #0]
   10926:	f365 729e 	bfi	r2, r5, #30, #1
   1092a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   1092c:	681a      	ldr	r2, [r3, #0]
   1092e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   10932:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   10934:	685a      	ldr	r2, [r3, #4]
   10936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1093a:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   1093c:	685a      	ldr	r2, [r3, #4]
   1093e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   10942:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10944:	69a3      	ldr	r3, [r4, #24]
   10946:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   1094a:	789a      	ldrb	r2, [r3, #2]
   1094c:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10950:	01db      	lsls	r3, r3, #7
   10952:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10956:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1095a:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   1095e:	07d7      	lsls	r7, r2, #31
   10960:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   10964:	bf4c      	ite	mi
   10966:	f366 1507 	bfimi	r5, r6, #4, #4
   1096a:	f366 0503 	bfipl	r5, r6, #0, #4
   1096e:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10972:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10974:	2901      	cmp	r1, #1
   10976:	f240 822f 	bls.w	10dd8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   1097a:	2902      	cmp	r1, #2
   1097c:	d10a      	bne.n	10994 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1097e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10982:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10986:	4413      	add	r3, r2
   10988:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1098c:	f042 0201 	orr.w	r2, r2, #1
   10990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10994:	2807      	cmp	r0, #7
   10996:	d031      	beq.n	109fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10998:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1099c:	2b07      	cmp	r3, #7
   1099e:	d02d      	beq.n	109fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   109a0:	f7fe fb06 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   109a4:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   109a6:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   109a8:	f023 0302 	bic.w	r3, r3, #2
   109ac:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   109ae:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   109b0:	6803      	ldr	r3, [r0, #0]
   109b2:	2b01      	cmp	r3, #1
   109b4:	d0fc      	beq.n	109b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   109b6:	9b06      	ldr	r3, [sp, #24]
   109b8:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   109ba:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   109be:	f7fe fb01 	bl	efc4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   109c2:	2300      	movs	r3, #0
   109c4:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   109c6:	6923      	ldr	r3, [r4, #16]
   109c8:	3328      	adds	r3, #40	; 0x28
   109ca:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   109cc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   109d0:	f7fe faee 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   109d4:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   109d6:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   109d8:	f023 0302 	bic.w	r3, r3, #2
   109dc:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   109de:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   109e0:	6803      	ldr	r3, [r0, #0]
   109e2:	2b01      	cmp	r3, #1
   109e4:	d0fc      	beq.n	109e0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   109e6:	9b07      	ldr	r3, [sp, #28]
   109e8:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   109ea:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   109ee:	f7fe fae9 	bl	efc4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   109f2:	2300      	movs	r3, #0
   109f4:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   109f6:	6923      	ldr	r3, [r4, #16]
   109f8:	3328      	adds	r3, #40	; 0x28
   109fa:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   109fc:	6820      	ldr	r0, [r4, #0]
   109fe:	4a66      	ldr	r2, [pc, #408]	; (10b98 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10a00:	6903      	ldr	r3, [r0, #16]
   10a02:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   10a06:	4293      	cmp	r3, r2
   10a08:	f040 81bd 	bne.w	10d86 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a0c:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a0e:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a10:	f991 5001 	ldrsb.w	r5, [r1, #1]
   10a14:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a16:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a18:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   10a1c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a24:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a28:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10a2c:	f36f 0100 	bfc	r1, #0, #1
   10a30:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10a34:	6813      	ldr	r3, [r2, #0]
   10a36:	0799      	lsls	r1, r3, #30
   10a38:	d503      	bpl.n	10a42 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10a3a:	6813      	ldr	r3, [r2, #0]
   10a3c:	f36f 0341 	bfc	r3, #1, #1
   10a40:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10a42:	69d3      	ldr	r3, [r2, #28]
   10a44:	f013 0302 	ands.w	r3, r3, #2
   10a48:	d1fb      	bne.n	10a42 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   10a4a:	6802      	ldr	r2, [r0, #0]
   10a4c:	4542      	cmp	r2, r8
   10a4e:	f040 8211 	bne.w	10e74 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   10a52:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10a56:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10a5a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10a5e:	6843      	ldr	r3, [r0, #4]
   10a60:	4a4e      	ldr	r2, [pc, #312]	; (10b9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   10a62:	4293      	cmp	r3, r2
   10a64:	f040 8202 	bne.w	10e6c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a68:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   10a6a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a6c:	2204      	movs	r2, #4
    m_inTail = 0;
   10a6e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10a72:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10a74:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a78:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   10a7a:	79e3      	ldrb	r3, [r4, #7]
   10a7c:	2b01      	cmp	r3, #1
   10a7e:	f040 8150 	bne.w	10d22 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10a82:	4b47      	ldr	r3, [pc, #284]	; (10ba0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10a84:	444b      	add	r3, r9
   10a86:	fbb3 f3f9 	udiv	r3, r3, r9
   10a8a:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10a8c:	2bff      	cmp	r3, #255	; 0xff
   10a8e:	bf28      	it	cs
   10a90:	23ff      	movcs	r3, #255	; 0xff
   10a92:	b2db      	uxtb	r3, r3
   10a94:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10a96:	2e00      	cmp	r6, #0
   10a98:	f000 816f 	beq.w	10d7a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10a9c:	682b      	ldr	r3, [r5, #0]
   10a9e:	f043 0302 	orr.w	r3, r3, #2
   10aa2:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10aa4:	69eb      	ldr	r3, [r5, #28]
   10aa6:	079b      	lsls	r3, r3, #30
   10aa8:	d4fc      	bmi.n	10aa4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10aaa:	6a22      	ldr	r2, [r4, #32]
   10aac:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10ab0:	7890      	ldrb	r0, [r2, #2]
   10ab2:	01db      	lsls	r3, r3, #7
   10ab4:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10ab8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10abc:	4402      	add	r2, r0
   10abe:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10ac2:	f041 0101 	orr.w	r1, r1, #1
   10ac6:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10aca:	69a6      	ldr	r6, [r4, #24]
   10acc:	4a35      	ldr	r2, [pc, #212]	; (10ba4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10ace:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10ad2:	78b7      	ldrb	r7, [r6, #2]
   10ad4:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10ad8:	2601      	movs	r6, #1
   10ada:	40be      	lsls	r6, r7
   10adc:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10ade:	6961      	ldr	r1, [r4, #20]
   10ae0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10ae4:	f891 c002 	ldrb.w	ip, [r1, #2]
   10ae8:	f991 e001 	ldrsb.w	lr, [r1, #1]
   10aec:	f01c 0f01 	tst.w	ip, #1
   10af0:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   10af4:	f000 8108 	beq.w	10d08 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10af8:	4472      	add	r2, lr
   10afa:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   10afe:	f006 060f 	and.w	r6, r6, #15
   10b02:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   10b06:	f366 1107 	bfi	r1, r6, #4, #4
   10b0a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10b0e:	4925      	ldr	r1, [pc, #148]	; (10ba4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10b10:	eb01 020e 	add.w	r2, r1, lr
   10b14:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10b18:	2701      	movs	r7, #1
   10b1a:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10b1e:	f04f 0803 	mov.w	r8, #3
   10b22:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10b26:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10b28:	69e2      	ldr	r2, [r4, #28]
   10b2a:	7894      	ldrb	r4, [r2, #2]
   10b2c:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10b30:	01d2      	lsls	r2, r2, #7
   10b32:	4411      	add	r1, r2
   10b34:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10b38:	f014 0f01 	tst.w	r4, #1
   10b3c:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10b40:	bf14      	ite	ne
   10b42:	f366 1707 	bfine	r7, r6, #4, #4
   10b46:	f366 0703 	bfieq	r7, r6, #0, #4
   10b4a:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10b4e:	4915      	ldr	r1, [pc, #84]	; (10ba4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10b50:	440a      	add	r2, r1
   10b52:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b54:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10b56:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b58:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10b5c:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b60:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b68:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b6e:	bf4c      	ite	mi
   10b70:	f366 1207 	bfimi	r2, r6, #4, #4
   10b74:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b78:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b7a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10b7e:	2201      	movs	r2, #1
   10b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10b84:	682b      	ldr	r3, [r5, #0]
   10b86:	f043 0302 	orr.w	r3, r3, #2
   10b8a:	602b      	str	r3, [r5, #0]
   10b8c:	e00c      	b.n	10ba8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   10b8e:	bf00      	nop
   10b90:	e000e100 	.word	0xe000e100
   10b94:	40001c00 	.word	0x40001c00
   10b98:	00010205 	.word	0x00010205
   10b9c:	000100e1 	.word	0x000100e1
   10ba0:	004c4b3f 	.word	0x004c4b3f
   10ba4:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10ba8:	69eb      	ldr	r3, [r5, #28]
   10baa:	079b      	lsls	r3, r3, #30
   10bac:	d4fc      	bmi.n	10ba8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   10bae:	2001      	movs	r0, #1
}
   10bb0:	b009      	add	sp, #36	; 0x24
   10bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10bb6:	6829      	ldr	r1, [r5, #0]
   10bb8:	f36e 0184 	bfi	r1, lr, #2, #3
   10bbc:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   10bbe:	6829      	ldr	r1, [r5, #0]
   10bc0:	f36f 314f 	bfc	r1, #13, #3
   10bc4:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10bc6:	6829      	ldr	r1, [r5, #0]
   10bc8:	f36f 711c 	bfc	r1, #28, #1
   10bcc:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   10bce:	6829      	ldr	r1, [r5, #0]
   10bd0:	f36e 5115 	bfi	r1, lr, #20, #2
   10bd4:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10bd6:	f1bc 0f00 	cmp.w	ip, #0
   10bda:	d104      	bne.n	10be6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   10bdc:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10be0:	2900      	cmp	r1, #0
   10be2:	f040 81af 	bne.w	10f44 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10be6:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10be8:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   10bea:	f362 0302 	bfi	r3, r2, #0, #3
   10bee:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10bf0:	682b      	ldr	r3, [r5, #0]
   10bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10bf6:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10bf8:	7923      	ldrb	r3, [r4, #4]
   10bfa:	2b02      	cmp	r3, #2
   10bfc:	f000 817c 	beq.w	10ef8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10c00:	682a      	ldr	r2, [r5, #0]
   10c02:	2101      	movs	r1, #1
   10c04:	f361 621b 	bfi	r2, r1, #24, #4
   10c08:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   10c0a:	686a      	ldr	r2, [r5, #4]
   10c0c:	f363 324d 	bfi	r2, r3, #13, #1
   10c10:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10c12:	7963      	ldrb	r3, [r4, #5]
   10c14:	686a      	ldr	r2, [r5, #4]
   10c16:	3b01      	subs	r3, #1
   10c18:	f363 1286 	bfi	r2, r3, #6, #1
   10c1c:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   10c1e:	686b      	ldr	r3, [r5, #4]
   10c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10c24:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10c26:	686b      	ldr	r3, [r5, #4]
   10c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10c2c:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   10c2e:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10c30:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10c32:	f36f 2349 	bfc	r3, #9, #1
   10c36:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10c38:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   10c3a:	69eb      	ldr	r3, [r5, #28]
   10c3c:	075b      	lsls	r3, r3, #29
   10c3e:	d4fc      	bmi.n	10c3a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10c40:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10c44:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10c46:	4bb7      	ldr	r3, [pc, #732]	; (10f24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10c48:	9a04      	ldr	r2, [sp, #16]
   10c4a:	441a      	add	r2, r3
   10c4c:	4610      	mov	r0, r2
   10c4e:	9a05      	ldr	r2, [sp, #20]
   10c50:	eb03 0109 	add.w	r1, r3, r9
   10c54:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10c56:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10c58:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10c5a:	9f00      	ldr	r7, [sp, #0]
   10c5c:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10c60:	2220      	movs	r2, #32
   10c62:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10c66:	9901      	ldr	r1, [sp, #4]
   10c68:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10c6c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10c70:	9a02      	ldr	r2, [sp, #8]
   10c72:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10c76:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   10c7a:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10c7e:	69a3      	ldr	r3, [r4, #24]
   10c80:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10c84:	789a      	ldrb	r2, [r3, #2]
   10c86:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10c8a:	01db      	lsls	r3, r3, #7
   10c8c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10c90:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10c94:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10c98:	07d6      	lsls	r6, r2, #31
   10c9a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   10c9e:	bf4c      	ite	mi
   10ca0:	f365 1007 	bfimi	r0, r5, #4, #4
   10ca4:	f365 0003 	bfipl	r0, r5, #0, #4
   10ca8:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   10cac:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   10cae:	2901      	cmp	r1, #1
   10cb0:	f240 80c7 	bls.w	10e42 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10cb4:	2902      	cmp	r1, #2
   10cb6:	d10a      	bne.n	10cce <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10cb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10cbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10cc0:	4413      	add	r3, r2
   10cc2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10cc6:	f042 0201 	orr.w	r2, r2, #1
   10cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   10cce:	f10a 0e20 	add.w	lr, sl, #32
   10cd2:	4a95      	ldr	r2, [pc, #596]	; (10f28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10cd4:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10cd8:	f36f 1386 	bfc	r3, #6, #1
   10cdc:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10ce0:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10ce4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10ce8:	2b00      	cmp	r3, #0
   10cea:	d1f9      	bne.n	10ce0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   10cec:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10cf0:	f363 0103 	bfi	r1, r3, #0, #4
   10cf4:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10cf8:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d00:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10d04:	6853      	ldr	r3, [r2, #4]
   10d06:	e679      	b.n	109fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10d08:	eb02 010e 	add.w	r1, r2, lr
   10d0c:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10d10:	f006 060f 	and.w	r6, r6, #15
   10d14:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10d18:	f366 0203 	bfi	r2, r6, #0, #4
   10d1c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10d20:	e6f5      	b.n	10b0e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10d22:	4648      	mov	r0, r9
   10d24:	f00b f814 	bl	1bd50 <__aeabi_ui2d>
   10d28:	2200      	movs	r2, #0
   10d2a:	4b80      	ldr	r3, [pc, #512]	; (10f2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   10d2c:	f00b f886 	bl	1be3c <__aeabi_dmul>
   10d30:	4b7f      	ldr	r3, [pc, #508]	; (10f30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10d32:	4680      	mov	r8, r0
   10d34:	6818      	ldr	r0, [r3, #0]
   10d36:	4689      	mov	r9, r1
   10d38:	f00b f80a 	bl	1bd50 <__aeabi_ui2d>
   10d3c:	4602      	mov	r2, r0
   10d3e:	460b      	mov	r3, r1
   10d40:	4640      	mov	r0, r8
   10d42:	4649      	mov	r1, r9
   10d44:	f00b f9a4 	bl	1c090 <__aeabi_ddiv>
   10d48:	4602      	mov	r2, r0
   10d4a:	460b      	mov	r3, r1
   10d4c:	2000      	movs	r0, #0
   10d4e:	4979      	ldr	r1, [pc, #484]	; (10f34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10d50:	f00a fec0 	bl	1bad4 <__aeabi_dsub>
   10d54:	2200      	movs	r2, #0
   10d56:	4b78      	ldr	r3, [pc, #480]	; (10f38 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10d58:	f00b f870 	bl	1be3c <__aeabi_dmul>
   10d5c:	f00b fb50 	bl	1c400 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10d60:	f00b f818 	bl	1bd94 <__aeabi_f2d>
   10d64:	2200      	movs	r2, #0
   10d66:	4b75      	ldr	r3, [pc, #468]	; (10f3c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10d68:	f00a feb6 	bl	1bad8 <__adddf3>
   10d6c:	f00b fb28 	bl	1c3c0 <__aeabi_d2uiz>
   10d70:	b280      	uxth	r0, r0
   10d72:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10d74:	2e00      	cmp	r6, #0
   10d76:	f47f ae91 	bne.w	10a9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10d7a:	6a22      	ldr	r2, [r4, #32]
   10d7c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10d80:	7890      	ldrb	r0, [r2, #2]
   10d82:	01db      	lsls	r3, r3, #7
   10d84:	e6a1      	b.n	10aca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10d86:	4649      	mov	r1, r9
   10d88:	4620      	mov	r0, r4
   10d8a:	4798      	blx	r3
   10d8c:	6a22      	ldr	r2, [r4, #32]
   10d8e:	6925      	ldr	r5, [r4, #16]
   10d90:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10d94:	7890      	ldrb	r0, [r2, #2]
   10d96:	01db      	lsls	r3, r3, #7
   10d98:	e697      	b.n	10aca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10d9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10d9e:	9207      	str	r2, [sp, #28]
   10da0:	9206      	str	r2, [sp, #24]
   10da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10da6:	9202      	str	r2, [sp, #8]
   10da8:	2239      	movs	r2, #57	; 0x39
   10daa:	9205      	str	r2, [sp, #20]
   10dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10db0:	9201      	str	r2, [sp, #4]
   10db2:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10db4:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10db6:	2601      	movs	r6, #1
   10db8:	f04f 0936 	mov.w	r9, #54	; 0x36
   10dbc:	9204      	str	r2, [sp, #16]
   10dbe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10dc2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10dc6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10dca:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10dcc:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10dd0:	f04f 0a17 	mov.w	sl, #23
   10dd4:	9200      	str	r2, [sp, #0]
   10dd6:	e53a      	b.n	1084e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10dd8:	2900      	cmp	r1, #0
   10dda:	f040 8092 	bne.w	10f02 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10dde:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10de2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10de6:	2501      	movs	r5, #1
   10de8:	4095      	lsls	r5, r2
   10dea:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10dec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10df0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10df4:	4413      	add	r3, r2
   10df6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10dfa:	f36f 0200 	bfc	r2, #0, #1
   10dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e02:	e5c7      	b.n	10994 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10e08:	9207      	str	r2, [sp, #28]
   10e0a:	9206      	str	r2, [sp, #24]
   10e0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10e10:	9202      	str	r2, [sp, #8]
   10e12:	223d      	movs	r2, #61	; 0x3d
   10e14:	9205      	str	r2, [sp, #20]
   10e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10e1a:	9201      	str	r2, [sp, #4]
   10e1c:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10e1e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e20:	2601      	movs	r6, #1
   10e22:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10e26:	9204      	str	r2, [sp, #16]
   10e28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10e2c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e30:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10e34:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10e36:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e3a:	f04f 0a18 	mov.w	sl, #24
   10e3e:	9200      	str	r2, [sp, #0]
   10e40:	e505      	b.n	1084e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10e42:	2900      	cmp	r1, #0
   10e44:	d165      	bne.n	10f12 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10e46:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10e4a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10e4e:	2001      	movs	r0, #1
   10e50:	4090      	lsls	r0, r2
   10e52:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10e5c:	4413      	add	r3, r2
   10e5e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e62:	f36f 0200 	bfc	r2, #0, #1
   10e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e6a:	e730      	b.n	10cce <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10e6c:	4620      	mov	r0, r4
   10e6e:	4798      	blx	r3
   10e70:	6925      	ldr	r5, [r4, #16]
   10e72:	e602      	b.n	10a7a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10e74:	4620      	mov	r0, r4
   10e76:	4790      	blx	r2
   10e78:	6820      	ldr	r0, [r4, #0]
   10e7a:	e5f0      	b.n	10a5e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10e7c:	2205      	movs	r2, #5
   10e7e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10e86:	9202      	str	r2, [sp, #8]
   10e88:	224d      	movs	r2, #77	; 0x4d
   10e8a:	492d      	ldr	r1, [pc, #180]	; (10f40 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10e8c:	9205      	str	r2, [sp, #20]
   10e8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10e92:	9201      	str	r2, [sp, #4]
   10e94:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10e96:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10e98:	2602      	movs	r6, #2
   10e9a:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10e9e:	9107      	str	r1, [sp, #28]
   10ea0:	9204      	str	r2, [sp, #16]
   10ea2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10eaa:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10eac:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10eb0:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10eb2:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10eb6:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10eba:	9200      	str	r2, [sp, #0]
   10ebc:	e4c7      	b.n	1084e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ebe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10ec2:	9207      	str	r2, [sp, #28]
   10ec4:	9206      	str	r2, [sp, #24]
   10ec6:	2241      	movs	r2, #65	; 0x41
   10ec8:	9205      	str	r2, [sp, #20]
   10eca:	2240      	movs	r2, #64	; 0x40
   10ecc:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ece:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ed0:	2102      	movs	r1, #2
   10ed2:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10ed6:	9204      	str	r2, [sp, #16]
   10ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10edc:	4637      	mov	r7, r6
   10ede:	9601      	str	r6, [sp, #4]
   10ee0:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ee2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ee6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10eea:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10eec:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ef0:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10ef4:	9200      	str	r2, [sp, #0]
   10ef6:	e4aa      	b.n	1084e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10ef8:	682b      	ldr	r3, [r5, #0]
   10efa:	f36f 631b 	bfc	r3, #24, #4
   10efe:	602b      	str	r3, [r5, #0]
   10f00:	e687      	b.n	10c12 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10f02:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10f06:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10f0a:	2501      	movs	r5, #1
   10f0c:	4095      	lsls	r5, r2
   10f0e:	614d      	str	r5, [r1, #20]
   10f10:	e76c      	b.n	10dec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10f12:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10f16:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10f1a:	2001      	movs	r0, #1
   10f1c:	4090      	lsls	r0, r2
   10f1e:	6148      	str	r0, [r1, #20]
   10f20:	e798      	b.n	10e54 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10f22:	bf00      	nop
   10f24:	e000e100 	.word	0xe000e100
   10f28:	40001c00 	.word	0x40001c00
   10f2c:	40300000 	.word	0x40300000
   10f30:	200000e8 	.word	0x200000e8
   10f34:	3ff00000 	.word	0x3ff00000
   10f38:	40f00000 	.word	0x40f00000
   10f3c:	3fe00000 	.word	0x3fe00000
   10f40:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f44:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10f46:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10f48:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10f4c:	f36c 0100 	bfi	r1, ip, #0, #1
   10f50:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10f54:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10f56:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10f5a:	0790      	lsls	r0, r2, #30
   10f5c:	d503      	bpl.n	10f66 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10f5e:	681a      	ldr	r2, [r3, #0]
   10f60:	f36c 0241 	bfi	r2, ip, #1, #1
   10f64:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10f66:	69da      	ldr	r2, [r3, #28]
   10f68:	f012 0202 	ands.w	r2, r2, #2
   10f6c:	d1fb      	bne.n	10f66 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10f6e:	6821      	ldr	r1, [r4, #0]
   10f70:	680b      	ldr	r3, [r1, #0]
   10f72:	4543      	cmp	r3, r8
   10f74:	d13b      	bne.n	10fee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   10f76:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10f7a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   10f7e:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   10f82:	684b      	ldr	r3, [r1, #4]
   10f84:	4a1c      	ldr	r2, [pc, #112]	; (10ff8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   10f86:	4293      	cmp	r3, r2
   10f88:	d12d      	bne.n	10fe6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f8a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10f8c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f8e:	2104      	movs	r1, #4
    m_inTail = 0;
   10f90:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10f94:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10f96:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10f9a:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   10f9c:	7b21      	ldrb	r1, [r4, #12]
   10f9e:	6813      	ldr	r3, [r2, #0]
   10fa0:	2900      	cmp	r1, #0
   10fa2:	bf0c      	ite	eq
   10fa4:	2100      	moveq	r1, #0
   10fa6:	2102      	movne	r1, #2
   10fa8:	f361 4311 	bfi	r3, r1, #16, #2
   10fac:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   10fae:	f1bb 0f00 	cmp.w	fp, #0
   10fb2:	f43f ae18 	beq.w	10be6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10fb6:	6813      	ldr	r3, [r2, #0]
   10fb8:	f043 0302 	orr.w	r3, r3, #2
   10fbc:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10fbe:	69d3      	ldr	r3, [r2, #28]
   10fc0:	0799      	lsls	r1, r3, #30
   10fc2:	d4fc      	bmi.n	10fbe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fc4:	6a23      	ldr	r3, [r4, #32]
   10fc6:	f993 2001 	ldrsb.w	r2, [r3, #1]
   10fca:	789b      	ldrb	r3, [r3, #2]
   10fcc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10fd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10fd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10fd8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10fdc:	f042 0201 	orr.w	r2, r2, #1
   10fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10fe4:	e5ff      	b.n	10be6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   10fe6:	4620      	mov	r0, r4
   10fe8:	4798      	blx	r3
   10fea:	6922      	ldr	r2, [r4, #16]
   10fec:	e7d6      	b.n	10f9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   10fee:	4620      	mov	r0, r4
   10ff0:	4798      	blx	r3
   10ff2:	6821      	ldr	r1, [r4, #0]
   10ff4:	e7c5      	b.n	10f82 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   10ff6:	bf00      	nop
   10ff8:	000100e1 	.word	0x000100e1

00010ffc <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   10ffc:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   11000:	b92a      	cbnz	r2, 1100e <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   11002:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   11004:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   11006:	428a      	cmp	r2, r1
        m_portOpen = true;
   11008:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   1100c:	d900      	bls.n	11010 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   1100e:	4770      	bx	lr
   11010:	f7ff bb86 	b.w	10720 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00011014 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11016:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   11018:	4f20      	ldr	r7, [pc, #128]	; (1109c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   1101a:	6182      	str	r2, [r0, #24]
   1101c:	61c3      	str	r3, [r0, #28]
   1101e:	4d20      	ldr	r5, [pc, #128]	; (110a0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   11020:	60a7      	str	r7, [r4, #8]
   11022:	9f06      	ldr	r7, [sp, #24]
   11024:	f8df c080 	ldr.w	ip, [pc, #128]	; 110a8 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11028:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   1102c:	6065      	str	r5, [r4, #4]
   1102e:	2307      	movs	r3, #7
   11030:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11032:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   11034:	6227      	str	r7, [r4, #32]
   11036:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   1103a:	2780      	movs	r7, #128	; 0x80
   1103c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11040:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   11044:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   11048:	f8c4 c000 	str.w	ip, [r4]
   1104c:	6261      	str	r1, [r4, #36]	; 0x24
   1104e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   11052:	85a2      	strh	r2, [r4, #44]	; 0x2c
   11054:	4629      	mov	r1, r5
   11056:	463a      	mov	r2, r7
   11058:	6166      	str	r6, [r4, #20]
   1105a:	7325      	strb	r5, [r4, #12]
   1105c:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   11060:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   11064:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11068:	f00d fbb8 	bl	1e7dc <memset>
   1106c:	463a      	mov	r2, r7
   1106e:	4629      	mov	r1, r5
   11070:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11074:	f00d fbb2 	bl	1e7dc <memset>
   11078:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   1107c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   11080:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11084:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   11088:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   1108c:	7a32      	ldrb	r2, [r6, #8]
   1108e:	4b05      	ldr	r3, [pc, #20]	; (110a4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   11090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11094:	6123      	str	r3, [r4, #16]
}
   11096:	4620      	mov	r0, r4
   11098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1109a:	bf00      	nop
   1109c:	02000100 	.word	0x02000100
   110a0:	00080102 	.word	0x00080102
   110a4:	00023648 	.word	0x00023648
   110a8:	00023600 	.word	0x00023600

000110ac <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   110ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   110ae:	4907      	ldr	r1, [pc, #28]	; (110cc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   110b0:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   110b4:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   110b6:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   110b8:	fbb2 f2f3 	udiv	r2, r2, r3
   110bc:	2a02      	cmp	r2, #2
   110be:	bf38      	it	cc
   110c0:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   110c2:	680b      	ldr	r3, [r1, #0]
   110c4:	1a1b      	subs	r3, r3, r0
   110c6:	429a      	cmp	r2, r3
   110c8:	d8fb      	bhi.n	110c2 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   110ca:	4770      	bx	lr
   110cc:	20001bf0 	.word	0x20001bf0

000110d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   110d0:	2901      	cmp	r1, #1
   110d2:	d901      	bls.n	110d8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   110d4:	2000      	movs	r0, #0
   110d6:	4770      	bx	lr
    if (!m_portOpen) {
   110d8:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   110dc:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   110de:	b10a      	cbz	r2, 110e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   110e0:	f7ff bb1e 	b.w	10720 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   110e4:	2001      	movs	r0, #1
}
   110e6:	4770      	bx	lr

000110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   110e8:	2901      	cmp	r1, #1
    m_ssMode = mode;
   110ea:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   110ec:	d914      	bls.n	11118 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   110ee:	2902      	cmp	r1, #2
   110f0:	d110      	bne.n	11114 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   110f2:	6982      	ldr	r2, [r0, #24]
   110f4:	f992 1001 	ldrsb.w	r1, [r2, #1]
   110f8:	7893      	ldrb	r3, [r2, #2]
   110fa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   110fe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11102:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   11106:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11108:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1110c:	4302      	orrs	r2, r0
   1110e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11112:	4770      	bx	lr
            success = false;
   11114:	2000      	movs	r0, #0
}
   11116:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   11118:	6982      	ldr	r2, [r0, #24]
   1111a:	f992 3001 	ldrsb.w	r3, [r2, #1]
   1111e:	7892      	ldrb	r2, [r2, #2]
   11120:	01db      	lsls	r3, r3, #7
   11122:	b199      	cbz	r1, 1114c <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   11124:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11128:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   1112c:	2001      	movs	r0, #1
   1112e:	4090      	lsls	r0, r2
   11130:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11132:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11136:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1113a:	4413      	add	r3, r2
   1113c:	2001      	movs	r0, #1
   1113e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11142:	f36f 0200 	bfc	r2, #0, #1
   11146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1114a:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   1114c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11150:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11154:	2001      	movs	r0, #1
   11156:	4090      	lsls	r0, r2
   11158:	6188      	str	r0, [r1, #24]
   1115a:	e7ea      	b.n	11132 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

0001115c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   1115c:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   1115e:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   11160:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   11162:	2b01      	cmp	r3, #1
    m_phase = phase;
   11164:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   11166:	d000      	beq.n	1116a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   11168:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1116a:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1116c:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1116e:	f991 4001 	ldrsb.w	r4, [r1, #1]
   11172:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11174:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11176:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1117a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1117e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11182:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11186:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1118a:	f36f 0100 	bfc	r1, #0, #1
   1118e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   11192:	6813      	ldr	r3, [r2, #0]
   11194:	0799      	lsls	r1, r3, #30
   11196:	d503      	bpl.n	111a0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   11198:	6813      	ldr	r3, [r2, #0]
   1119a:	f36f 0341 	bfc	r3, #1, #1
   1119e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   111a0:	69d3      	ldr	r3, [r2, #28]
   111a2:	f013 0302 	ands.w	r3, r3, #2
   111a6:	d1fb      	bne.n	111a0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   111a8:	6802      	ldr	r2, [r0, #0]
   111aa:	4604      	mov	r4, r0
   111ac:	6811      	ldr	r1, [r2, #0]
   111ae:	4821      	ldr	r0, [pc, #132]	; (11234 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   111b0:	4281      	cmp	r1, r0
   111b2:	d136      	bne.n	11222 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   111b4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   111b8:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   111bc:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   111c0:	6853      	ldr	r3, [r2, #4]
   111c2:	4a1d      	ldr	r2, [pc, #116]	; (11238 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   111c4:	4293      	cmp	r3, r2
   111c6:	d130      	bne.n	1122a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   111c8:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   111ca:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   111cc:	2104      	movs	r1, #4
    m_inTail = 0;
   111ce:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   111d2:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   111d4:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   111d8:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   111da:	7a21      	ldrb	r1, [r4, #8]
   111dc:	681a      	ldr	r2, [r3, #0]
   111de:	f361 725d 	bfi	r2, r1, #29, #1
   111e2:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   111e4:	7a61      	ldrb	r1, [r4, #9]
   111e6:	681a      	ldr	r2, [r3, #0]
   111e8:	f361 721c 	bfi	r2, r1, #28, #1
   111ec:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   111ee:	2d00      	cmp	r5, #0
   111f0:	d0ba      	beq.n	11168 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   111f2:	681a      	ldr	r2, [r3, #0]
   111f4:	f042 0202 	orr.w	r2, r2, #2
   111f8:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   111fa:	69da      	ldr	r2, [r3, #28]
   111fc:	0792      	lsls	r2, r2, #30
   111fe:	d4fc      	bmi.n	111fa <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11200:	6a22      	ldr	r2, [r4, #32]
   11202:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11206:	7893      	ldrb	r3, [r2, #2]
   11208:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1120c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11210:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11214:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11218:	f042 0201 	orr.w	r2, r2, #1
   1121c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11220:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   11222:	4620      	mov	r0, r4
   11224:	4788      	blx	r1
   11226:	6822      	ldr	r2, [r4, #0]
   11228:	e7ca      	b.n	111c0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   1122a:	4620      	mov	r0, r4
   1122c:	4798      	blx	r3
   1122e:	6923      	ldr	r3, [r4, #16]
   11230:	e7d3      	b.n	111da <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   11232:	bf00      	nop
   11234:	000100d1 	.word	0x000100d1
   11238:	000100e1 	.word	0x000100e1

0001123c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   1123c:	b470      	push	{r4, r5, r6}
   1123e:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   11240:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   11244:	b120      	cbz	r0, 11250 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   11246:	79e0      	ldrb	r0, [r4, #7]
   11248:	2801      	cmp	r0, #1
        return 0;
   1124a:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   1124e:	d001      	beq.n	11254 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   11250:	bc70      	pop	{r4, r5, r6}
   11252:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   11254:	2b00      	cmp	r3, #0
   11256:	ddfb      	ble.n	11250 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   11258:	6925      	ldr	r5, [r4, #16]
   1125a:	b1b9      	cbz	r1, 1128c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   1125c:	1c4e      	adds	r6, r1, #1
   1125e:	7809      	ldrb	r1, [r1, #0]
   11260:	62a9      	str	r1, [r5, #40]	; 0x28
   11262:	e003      	b.n	1126c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   11264:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   11268:	2900      	cmp	r1, #0
   1126a:	d0f1      	beq.n	11250 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   1126c:	7e29      	ldrb	r1, [r5, #24]
   1126e:	0749      	lsls	r1, r1, #29
   11270:	d5f8      	bpl.n	11264 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   11272:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11274:	0789      	lsls	r1, r1, #30
   11276:	d5f5      	bpl.n	11264 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   11278:	b152      	cbz	r2, 11290 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   1127a:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   1127c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1127e:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   11280:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   11282:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   11286:	d007      	beq.n	11298 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   11288:	4631      	mov	r1, r6
   1128a:	e7e5      	b.n	11258 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   1128c:	460e      	mov	r6, r1
   1128e:	e7e7      	b.n	11260 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   11290:	3001      	adds	r0, #1
   11292:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   11294:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   11296:	d1f7      	bne.n	11288 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   11298:	4618      	mov	r0, r3
   1129a:	e7d9      	b.n	11250 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

0001129c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   1129c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   112a0:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   112a4:	b12d      	cbz	r5, 112b2 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   112a6:	f890 8007 	ldrb.w	r8, [r0, #7]
   112aa:	f1b8 0f01 	cmp.w	r8, #1
   112ae:	d003      	beq.n	112b8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   112b0:	2500      	movs	r5, #0
}
   112b2:	4628      	mov	r0, r5
   112b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   112b8:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   112bc:	f1be 0f07 	cmp.w	lr, #7
   112c0:	d0f6      	beq.n	112b0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   112c2:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   112c6:	2c07      	cmp	r4, #7
   112c8:	d0f2      	beq.n	112b0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   112ca:	4616      	mov	r6, r2
   112cc:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   112ce:	4670      	mov	r0, lr
   112d0:	461f      	mov	r7, r3
   112d2:	4689      	mov	r9, r1
   112d4:	f7fd fe76 	bl	efc4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   112d8:	b336      	cbz	r6, 11328 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   112da:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   112dc:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   112e0:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   112e2:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   112e4:	b2be      	uxth	r6, r7
   112e6:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   112e8:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   112ec:	f7fd fe60 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   112f0:	6803      	ldr	r3, [r0, #0]
   112f2:	f043 0302 	orr.w	r3, r3, #2
   112f6:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   112f8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   112fc:	f7fd fe62 	bl	efc4 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   11300:	f1b9 0f00 	cmp.w	r9, #0
   11304:	d015      	beq.n	11332 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11306:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11308:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   1130c:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   1130e:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11310:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11312:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11316:	f7fd fe4b 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1131a:	6803      	ldr	r3, [r0, #0]
   1131c:	f043 0302 	orr.w	r3, r3, #2
   11320:	6003      	str	r3, [r0, #0]
}
   11322:	4628      	mov	r0, r5
   11324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   11328:	4b04      	ldr	r3, [pc, #16]	; (1133c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   1132a:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   1132c:	f8a0 8000 	strh.w	r8, [r0]
   11330:	e7d8      	b.n	112e4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   11332:	4b02      	ldr	r3, [pc, #8]	; (1133c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   11334:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   11336:	2301      	movs	r3, #1
   11338:	8003      	strh	r3, [r0, #0]
   1133a:	e7e9      	b.n	11310 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   1133c:	20001f20 	.word	0x20001f20

00011340 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11340:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   11344:	2b07      	cmp	r3, #7
   11346:	d016      	beq.n	11376 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   11348:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1134c:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   1134e:	b510      	push	{r4, lr}
   11350:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11352:	d005      	beq.n	11360 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   11354:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11358:	b113      	cbz	r3, 11360 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   1135a:	79e3      	ldrb	r3, [r4, #7]
   1135c:	2b01      	cmp	r3, #1
   1135e:	d001      	beq.n	11364 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   11360:	2001      	movs	r0, #1
   11362:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   11364:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11368:	f7fd fe22 	bl	efb0 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1136c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1136e:	079b      	lsls	r3, r3, #30
   11370:	d4f0      	bmi.n	11354 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   11372:	2001      	movs	r0, #1
   11374:	bd10      	pop	{r4, pc}
   11376:	2001      	movs	r0, #1
   11378:	4770      	bx	lr
   1137a:	bf00      	nop

0001137c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   1137c:	79c3      	ldrb	r3, [r0, #7]
   1137e:	2b01      	cmp	r3, #1
   11380:	d022      	beq.n	113c8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   11382:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11386:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   1138a:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   1138c:	429a      	cmp	r2, r3
   1138e:	d019      	beq.n	113c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11390:	7e0b      	ldrb	r3, [r1, #24]
   11392:	07da      	lsls	r2, r3, #31
   11394:	d403      	bmi.n	1139e <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   11396:	e018      	b.n	113ca <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   11398:	7e0b      	ldrb	r3, [r1, #24]
   1139a:	07db      	lsls	r3, r3, #31
   1139c:	d514      	bpl.n	113c8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   1139e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   113a2:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   113a6:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   113a8:	3301      	adds	r3, #1
   113aa:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   113ae:	628a      	str	r2, [r1, #40]	; 0x28
   113b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   113b4:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   113b8:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   113bc:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   113c0:	429a      	cmp	r2, r3
   113c2:	d1e9      	bne.n	11398 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   113c4:	2301      	movs	r3, #1
   113c6:	750b      	strb	r3, [r1, #20]
   113c8:	4770      	bx	lr
   113ca:	4770      	bx	lr

000113cc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   113cc:	79c3      	ldrb	r3, [r0, #7]
   113ce:	2b01      	cmp	r3, #1
   113d0:	d100      	bne.n	113d4 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   113d2:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   113d4:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   113d6:	6901      	ldr	r1, [r0, #16]
   113d8:	f891 3020 	ldrb.w	r3, [r1, #32]
   113dc:	b303      	cbz	r3, 11420 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   113de:	2300      	movs	r3, #0
   113e0:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   113e4:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   113e8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   113ec:	f103 0218 	add.w	r2, r3, #24
   113f0:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   113f4:	3301      	adds	r3, #1
   113f6:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   113fa:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   113fe:	7e0b      	ldrb	r3, [r1, #24]
   11400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11404:	760b      	strb	r3, [r1, #24]
   11406:	e00b      	b.n	11420 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11408:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1140c:	429a      	cmp	r2, r3
   1140e:	d00f      	beq.n	11430 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   11410:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   11414:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   11416:	3218      	adds	r2, #24
   11418:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   1141c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   11420:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11424:	7e0a      	ldrb	r2, [r1, #24]
   11426:	3301      	adds	r3, #1
   11428:	0752      	lsls	r2, r2, #29
   1142a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1142e:	d4eb      	bmi.n	11408 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   11430:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11434:	429a      	cmp	r2, r3
   11436:	d002      	beq.n	1143e <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   11438:	f85d 4b04 	ldr.w	r4, [sp], #4
   1143c:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   1143e:	2304      	movs	r3, #4
   11440:	750b      	strb	r3, [r1, #20]
}
   11442:	e7f9      	b.n	11438 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

00011444 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   11444:	79c3      	ldrb	r3, [r0, #7]
   11446:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11448:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   1144a:	d022      	beq.n	11492 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   1144c:	7e1a      	ldrb	r2, [r3, #24]
   1144e:	09d2      	lsrs	r2, r2, #7
   11450:	d01e      	beq.n	11490 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11452:	2280      	movs	r2, #128	; 0x80
   11454:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   11456:	8b5a      	ldrh	r2, [r3, #26]
   11458:	0792      	lsls	r2, r2, #30
   1145a:	d509      	bpl.n	11470 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   1145c:	8b5a      	ldrh	r2, [r3, #26]
   1145e:	f042 0202 	orr.w	r2, r2, #2
   11462:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   11464:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11468:	f042 0201 	orr.w	r2, r2, #1
   1146c:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   11470:	8b5a      	ldrh	r2, [r3, #26]
   11472:	07d1      	lsls	r1, r2, #31
   11474:	d410      	bmi.n	11498 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   11476:	8b5a      	ldrh	r2, [r3, #26]
   11478:	0752      	lsls	r2, r2, #29
   1147a:	d509      	bpl.n	11490 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   1147c:	8b5a      	ldrh	r2, [r3, #26]
   1147e:	f042 0204 	orr.w	r2, r2, #4
   11482:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   11484:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11488:	f043 0304 	orr.w	r3, r3, #4
   1148c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   11490:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11492:	2280      	movs	r2, #128	; 0x80
   11494:	761a      	strb	r2, [r3, #24]
            break;
   11496:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   11498:	8b5a      	ldrh	r2, [r3, #26]
   1149a:	f042 0201 	orr.w	r2, r2, #1
   1149e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   114a0:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   114a4:	f042 0202 	orr.w	r2, r2, #2
   114a8:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   114ac:	e7e3      	b.n	11476 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   114ae:	bf00      	nop

000114b0 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   114b0:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   114b4:	4770      	bx	lr
   114b6:	bf00      	nop

000114b8 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   114b8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   114bc:	e7f8      	b.n	114b0 <_ZN9ClearCore12SerialDriver4ModeEv>
   114be:	bf00      	nop

000114c0 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   114c0:	2007      	movs	r0, #7
   114c2:	4770      	bx	lr

000114c4 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   114c4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   114c8:	e7fa      	b.n	114c0 <_ZN9ClearCore12SerialDriver4TypeEv>
   114ca:	bf00      	nop

000114cc <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   114cc:	6803      	ldr	r3, [r0, #0]
   114ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   114d0:	4718      	bx	r3
   114d2:	bf00      	nop

000114d4 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   114d4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   114d8:	e7f8      	b.n	114cc <_ZN9ClearCore12SerialDriver10IsWritableEv>
   114da:	bf00      	nop

000114dc <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   114dc:	b508      	push	{r3, lr}
        return PortIsOpen();
   114de:	6803      	ldr	r3, [r0, #0]
   114e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   114e2:	4798      	blx	r3
    }
   114e4:	b200      	sxth	r0, r0
   114e6:	bd08      	pop	{r3, pc}

000114e8 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   114e8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   114ec:	e7f6      	b.n	114dc <_ZN9ClearCore12SerialDriver5StateEv>
   114ee:	bf00      	nop

000114f0 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   114f0:	2000      	movs	r0, #0
   114f2:	4770      	bx	lr

000114f4 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   114f4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   114f8:	e7fa      	b.n	114f0 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   114fa:	bf00      	nop

000114fc <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   114fc:	4770      	bx	lr
   114fe:	bf00      	nop

00011500 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   11500:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11504:	e7fa      	b.n	114fc <_ZN9ClearCore12SerialDriver7RefreshEv>
   11506:	bf00      	nop

00011508 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1150c:	b082      	sub	sp, #8
   1150e:	4688      	mov	r8, r1
   11510:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11512:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   11516:	9500      	str	r5, [sp, #0]
   11518:	9401      	str	r4, [sp, #4]
   1151a:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   1151c:	4604      	mov	r4, r0
   1151e:	4617      	mov	r7, r2
   11520:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   11522:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   11524:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   11526:	f7ff fd75 	bl	11014 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1152a:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   1152e:	f7fd f951 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
   11532:	4b09      	ldr	r3, [pc, #36]	; (11558 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   11534:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   11538:	f103 0208 	add.w	r2, r3, #8
   1153c:	4620      	mov	r0, r4
   1153e:	337c      	adds	r3, #124	; 0x7c
   11540:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   11544:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   11548:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   1154c:	6022      	str	r2, [r4, #0]
   1154e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   11552:	b002      	add	sp, #8
   11554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11558:	00023668 	.word	0x00023668

0001155c <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   1155c:	b538      	push	{r3, r4, r5, lr}
   1155e:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11560:	f7fe fe50 	bl	10204 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11564:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11568:	4605      	mov	r5, r0
        if (m_portOpen) {
   1156a:	b113      	cbz	r3, 11572 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   1156c:	4620      	mov	r0, r4
   1156e:	f7ff fd9d 	bl	110ac <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   11572:	4628      	mov	r0, r5
   11574:	bd38      	pop	{r3, r4, r5, pc}
   11576:	bf00      	nop

00011578 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11578:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   1157a:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   1157e:	428b      	cmp	r3, r1
   11580:	d00d      	beq.n	1159e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   11582:	2b10      	cmp	r3, #16
   11584:	460d      	mov	r5, r1
   11586:	4604      	mov	r4, r0
   11588:	f000 808c 	beq.w	116a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   1158c:	f1a5 030d 	sub.w	r3, r5, #13
   11590:	2b03      	cmp	r3, #3
   11592:	f200 808c 	bhi.w	116ae <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11596:	e8df f003 	tbb	[pc, r3]
   1159a:	3169      	.short	0x3169
   1159c:	4f06      	.short	0x4f06
        return true;
   1159e:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   115a0:	4628      	mov	r0, r5
   115a2:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   115a4:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   115a6:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   115aa:	4b42      	ldr	r3, [pc, #264]	; (116b4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   115ac:	f3bf 8f5b 	dmb	ish
   115b0:	43d2      	mvns	r2, r2
   115b2:	e853 1f00 	ldrex	r1, [r3]
   115b6:	4011      	ands	r1, r2
   115b8:	e843 1000 	strex	r0, r1, [r3]
   115bc:	2800      	cmp	r0, #0
   115be:	d1f8      	bne.n	115b2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   115c0:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   115c4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   115c8:	f3bf 8f5b 	dmb	ish
   115cc:	e853 1f00 	ldrex	r1, [r3]
   115d0:	4311      	orrs	r1, r2
   115d2:	e843 1000 	strex	r0, r1, [r3]
   115d6:	2800      	cmp	r0, #0
   115d8:	d1f8      	bne.n	115cc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   115da:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   115de:	2101      	movs	r1, #1
    m_mode = newMode;
   115e0:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   115e4:	4620      	mov	r0, r4
   115e6:	f7ff fd73 	bl	110d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   115ea:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   115ee:	2d00      	cmp	r5, #0
   115f0:	d0d5      	beq.n	1159e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   115f2:	4620      	mov	r0, r4
   115f4:	f7ff fd5a 	bl	110ac <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   115f8:	4628      	mov	r0, r5
   115fa:	bd38      	pop	{r3, r4, r5, pc}
   115fc:	4b2d      	ldr	r3, [pc, #180]	; (116b4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   115fe:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11602:	f3bf 8f5b 	dmb	ish
   11606:	e853 1f00 	ldrex	r1, [r3]
   1160a:	4311      	orrs	r1, r2
   1160c:	e843 1000 	strex	r0, r1, [r3]
   11610:	2800      	cmp	r0, #0
   11612:	d1f8      	bne.n	11606 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   11614:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11618:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1161c:	f3bf 8f5b 	dmb	ish
   11620:	43d2      	mvns	r2, r2
   11622:	e853 1f00 	ldrex	r1, [r3]
   11626:	4011      	ands	r1, r2
   11628:	e843 1000 	strex	r0, r1, [r3]
   1162c:	2800      	cmp	r0, #0
   1162e:	d1f8      	bne.n	11622 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   11630:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   11634:	2100      	movs	r1, #0
   11636:	e7d3      	b.n	115e0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   11638:	2201      	movs	r2, #1
   1163a:	2100      	movs	r1, #0
   1163c:	4620      	mov	r0, r4
   1163e:	f7ff fd8d 	bl	1115c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   11642:	2101      	movs	r1, #1
   11644:	4620      	mov	r0, r4
   11646:	f7ff fd4f 	bl	110e8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   1164a:	6823      	ldr	r3, [r4, #0]
   1164c:	4a1a      	ldr	r2, [pc, #104]	; (116b8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   1164e:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11650:	491a      	ldr	r1, [pc, #104]	; (116bc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   11652:	4293      	cmp	r3, r2
   11654:	4620      	mov	r0, r4
   11656:	d1a5      	bne.n	115a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   11658:	f7fe fdd4 	bl	10204 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   1165c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11660:	2b00      	cmp	r3, #0
   11662:	d0a0      	beq.n	115a6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   11664:	4620      	mov	r0, r4
   11666:	f7ff fd21 	bl	110ac <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   1166a:	e79c      	b.n	115a6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   1166c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11670:	4b10      	ldr	r3, [pc, #64]	; (116b4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11672:	f3bf 8f5b 	dmb	ish
   11676:	43d2      	mvns	r2, r2
   11678:	e853 1f00 	ldrex	r1, [r3]
   1167c:	4011      	ands	r1, r2
   1167e:	e843 1000 	strex	r0, r1, [r3]
   11682:	2800      	cmp	r0, #0
   11684:	d1f8      	bne.n	11678 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11686:	f3bf 8f5b 	dmb	ish
   1168a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1168e:	f3bf 8f5b 	dmb	ish
   11692:	43d2      	mvns	r2, r2
   11694:	e853 1f00 	ldrex	r1, [r3]
   11698:	4011      	ands	r1, r2
   1169a:	e843 1000 	strex	r0, r1, [r3]
   1169e:	2800      	cmp	r0, #0
   116a0:	d0c6      	beq.n	11630 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   116a2:	e7f7      	b.n	11694 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   116a4:	4b06      	ldr	r3, [pc, #24]	; (116c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   116a6:	6818      	ldr	r0, [r3, #0]
   116a8:	f7fe fae2 	bl	fc70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   116ac:	e76e      	b.n	1158c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   116ae:	2500      	movs	r5, #0
   116b0:	e776      	b.n	115a0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   116b2:	bf00      	nop
   116b4:	20001ad4 	.word	0x20001ad4
   116b8:	0001155d 	.word	0x0001155d
   116bc:	0007a120 	.word	0x0007a120
   116c0:	20001f0c 	.word	0x20001f0c

000116c4 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   116c4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   116c8:	f7ff bf56 	b.w	11578 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

000116cc <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   116cc:	b510      	push	{r4, lr}
   116ce:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   116d0:	f7fe fcfa 	bl	100c8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   116d4:	b100      	cbz	r0, 116d8 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   116d6:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   116d8:	4620      	mov	r0, r4
   116da:	f7ff fc8f 	bl	10ffc <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   116de:	4620      	mov	r0, r4
   116e0:	f7ff fce4 	bl	110ac <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   116e4:	4b0c      	ldr	r3, [pc, #48]	; (11718 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   116e6:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   116ea:	f3bf 8f5b 	dmb	ish
   116ee:	e853 1f00 	ldrex	r1, [r3]
   116f2:	4311      	orrs	r1, r2
   116f4:	e843 1000 	strex	r0, r1, [r3]
   116f8:	2800      	cmp	r0, #0
   116fa:	d1f8      	bne.n	116ee <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   116fc:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11700:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11704:	2b10      	cmp	r3, #16
   11706:	d1e6      	bne.n	116d6 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11708:	4b04      	ldr	r3, [pc, #16]	; (1171c <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   1170a:	4621      	mov	r1, r4
   1170c:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   1170e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   11712:	f7fe bacd 	b.w	fcb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11716:	bf00      	nop
   11718:	20001ad4 	.word	0x20001ad4
   1171c:	20001f0c 	.word	0x20001f0c

00011720 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   11720:	b510      	push	{r4, lr}
   11722:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   11724:	f7fe fcd0 	bl	100c8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11728:	b1a8      	cbz	r0, 11756 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   1172a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1172e:	2b10      	cmp	r3, #16
   11730:	d012      	beq.n	11758 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   11732:	4620      	mov	r0, r4
   11734:	f7fe fe10 	bl	10358 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11738:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1173c:	4a09      	ldr	r2, [pc, #36]	; (11764 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   1173e:	f3bf 8f5b 	dmb	ish
   11742:	43db      	mvns	r3, r3
   11744:	e852 1f00 	ldrex	r1, [r2]
   11748:	4019      	ands	r1, r3
   1174a:	e842 1000 	strex	r0, r1, [r2]
   1174e:	2800      	cmp	r0, #0
   11750:	d1f8      	bne.n	11744 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   11752:	f3bf 8f5b 	dmb	ish
   11756:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   11758:	4b03      	ldr	r3, [pc, #12]	; (11768 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   1175a:	6818      	ldr	r0, [r3, #0]
   1175c:	f7fe fa88 	bl	fc70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11760:	e7e7      	b.n	11732 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   11762:	bf00      	nop
   11764:	20001ad4 	.word	0x20001ad4
   11768:	20001f0c 	.word	0x20001f0c

0001176c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   1176c:	6803      	ldr	r3, [r0, #0]
   1176e:	4a37      	ldr	r2, [pc, #220]	; (1184c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11770:	68db      	ldr	r3, [r3, #12]
   11772:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11774:	b510      	push	{r4, lr}
   11776:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11778:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   1177c:	d150      	bne.n	11820 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   1177e:	f7fe fca3 	bl	100c8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11782:	b1a8      	cbz	r0, 117b0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11784:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11788:	2b10      	cmp	r3, #16
   1178a:	d059      	beq.n	11840 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   1178c:	4620      	mov	r0, r4
   1178e:	f7fe fde3 	bl	10358 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11792:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11796:	4a2e      	ldr	r2, [pc, #184]	; (11850 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11798:	f3bf 8f5b 	dmb	ish
   1179c:	43db      	mvns	r3, r3
   1179e:	e852 1f00 	ldrex	r1, [r2]
   117a2:	4019      	ands	r1, r3
   117a4:	e842 1000 	strex	r0, r1, [r2]
   117a8:	2800      	cmp	r0, #0
   117aa:	d1f8      	bne.n	1179e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   117ac:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   117b0:	6823      	ldr	r3, [r4, #0]
   117b2:	4a28      	ldr	r2, [pc, #160]	; (11854 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   117b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   117b6:	4293      	cmp	r3, r2
   117b8:	d138      	bne.n	1182c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   117ba:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   117be:	2b0d      	cmp	r3, #13
   117c0:	d028      	beq.n	11814 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   117c2:	2b10      	cmp	r3, #16
   117c4:	d037      	beq.n	11836 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   117c6:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   117ca:	4b21      	ldr	r3, [pc, #132]	; (11850 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   117cc:	f3bf 8f5b 	dmb	ish
   117d0:	43d2      	mvns	r2, r2
   117d2:	e853 1f00 	ldrex	r1, [r3]
   117d6:	4011      	ands	r1, r2
   117d8:	e843 1000 	strex	r0, r1, [r3]
   117dc:	2800      	cmp	r0, #0
   117de:	d1f8      	bne.n	117d2 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   117e0:	f3bf 8f5b 	dmb	ish
   117e4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   117e8:	f3bf 8f5b 	dmb	ish
   117ec:	43d2      	mvns	r2, r2
   117ee:	e853 1f00 	ldrex	r1, [r3]
   117f2:	4011      	ands	r1, r2
   117f4:	e843 1000 	strex	r0, r1, [r3]
   117f8:	2800      	cmp	r0, #0
   117fa:	d1f8      	bne.n	117ee <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   117fc:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   11800:	230d      	movs	r3, #13
   11802:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   11806:	4620      	mov	r0, r4
   11808:	2100      	movs	r1, #0
   1180a:	f7ff fc61 	bl	110d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1180e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11812:	b903      	cbnz	r3, 11816 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   11814:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   11816:	4620      	mov	r0, r4
}
   11818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   1181c:	f7ff bc46 	b.w	110ac <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   11820:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   11822:	6823      	ldr	r3, [r4, #0]
   11824:	4a0b      	ldr	r2, [pc, #44]	; (11854 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11828:	4293      	cmp	r3, r2
   1182a:	d0c6      	beq.n	117ba <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   1182c:	4620      	mov	r0, r4
   1182e:	210d      	movs	r1, #13
}
   11830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   11834:	4718      	bx	r3
        CcioMgr.LinkClose();
   11836:	4b08      	ldr	r3, [pc, #32]	; (11858 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11838:	6818      	ldr	r0, [r3, #0]
   1183a:	f7fe fa19 	bl	fc70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1183e:	e7c2      	b.n	117c6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   11840:	4b05      	ldr	r3, [pc, #20]	; (11858 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11842:	6818      	ldr	r0, [r3, #0]
   11844:	f7fe fa14 	bl	fc70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11848:	e7a0      	b.n	1178c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   1184a:	bf00      	nop
   1184c:	00011721 	.word	0x00011721
   11850:	20001ad4 	.word	0x20001ad4
   11854:	00011579 	.word	0x00011579
   11858:	20001f0c 	.word	0x20001f0c

0001185c <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   1185c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11860:	f7ff bf84 	b.w	1176c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

00011864 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11864:	b510      	push	{r4, lr}
            PortOpen();
   11866:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   11868:	4604      	mov	r4, r0
        if (newState) {
   1186a:	bb09      	cbnz	r1, 118b0 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   1186c:	4a26      	ldr	r2, [pc, #152]	; (11908 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   1186e:	68db      	ldr	r3, [r3, #12]
   11870:	4293      	cmp	r3, r2
   11872:	d11a      	bne.n	118aa <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   11874:	f7fe fc28 	bl	100c8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11878:	b1a8      	cbz	r0, 118a6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   1187a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1187e:	2b10      	cmp	r3, #16
   11880:	d03c      	beq.n	118fc <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   11882:	4620      	mov	r0, r4
   11884:	f7fe fd68 	bl	10358 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11888:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1188c:	4a1f      	ldr	r2, [pc, #124]	; (1190c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1188e:	f3bf 8f5b 	dmb	ish
   11892:	43db      	mvns	r3, r3
   11894:	e852 1f00 	ldrex	r1, [r2]
   11898:	4019      	ands	r1, r3
   1189a:	e842 1000 	strex	r0, r1, [r2]
   1189e:	2800      	cmp	r0, #0
   118a0:	d1f8      	bne.n	11894 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   118a2:	f3bf 8f5b 	dmb	ish
    }
   118a6:	2001      	movs	r0, #1
   118a8:	bd10      	pop	{r4, pc}
            PortClose();
   118aa:	4798      	blx	r3
    }
   118ac:	2001      	movs	r0, #1
   118ae:	bd10      	pop	{r4, pc}
   118b0:	4a17      	ldr	r2, [pc, #92]	; (11910 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   118b2:	689b      	ldr	r3, [r3, #8]
   118b4:	4293      	cmp	r3, r2
   118b6:	d1f8      	bne.n	118aa <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   118b8:	f7fe fc06 	bl	100c8 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   118bc:	2800      	cmp	r0, #0
   118be:	d1f2      	bne.n	118a6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   118c0:	4620      	mov	r0, r4
   118c2:	f7ff fb9b 	bl	10ffc <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   118c6:	4620      	mov	r0, r4
   118c8:	f7ff fbf0 	bl	110ac <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   118cc:	4b0f      	ldr	r3, [pc, #60]	; (1190c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   118ce:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   118d2:	f3bf 8f5b 	dmb	ish
   118d6:	e853 1f00 	ldrex	r1, [r3]
   118da:	4311      	orrs	r1, r2
   118dc:	e843 1000 	strex	r0, r1, [r3]
   118e0:	2800      	cmp	r0, #0
   118e2:	d1f8      	bne.n	118d6 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   118e4:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   118e8:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   118ec:	2b10      	cmp	r3, #16
   118ee:	d1da      	bne.n	118a6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   118f0:	4b08      	ldr	r3, [pc, #32]	; (11914 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   118f2:	4621      	mov	r1, r4
   118f4:	6818      	ldr	r0, [r3, #0]
   118f6:	f7fe f9db 	bl	fcb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   118fa:	e7d4      	b.n	118a6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   118fc:	4b05      	ldr	r3, [pc, #20]	; (11914 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   118fe:	6818      	ldr	r0, [r3, #0]
   11900:	f7fe f9b6 	bl	fc70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11904:	e7bd      	b.n	11882 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   11906:	bf00      	nop
   11908:	00011721 	.word	0x00011721
   1190c:	20001ad4 	.word	0x20001ad4
   11910:	000116cd 	.word	0x000116cd
   11914:	20001f0c 	.word	0x20001f0c

00011918 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11918:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1191c:	e7a2      	b.n	11864 <_ZN9ClearCore12SerialDriver5StateEs>
   1191e:	bf00      	nop

00011920 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11920:	7980      	ldrb	r0, [r0, #6]
   11922:	4770      	bx	lr

00011924 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   11924:	f1a1 0004 	sub.w	r0, r1, #4
   11928:	fab0 f080 	clz	r0, r0
   1192c:	0940      	lsrs	r0, r0, #5
   1192e:	4770      	bx	lr

00011930 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   11930:	2002      	movs	r0, #2
   11932:	4770      	bx	lr

00011934 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   11934:	2001      	movs	r0, #1
   11936:	4770      	bx	lr

00011938 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   11938:	2000      	movs	r0, #0
   1193a:	4770      	bx	lr

0001193c <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   1193c:	4770      	bx	lr
   1193e:	bf00      	nop

00011940 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   11940:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   11942:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   11944:	7183      	strb	r3, [r0, #6]
   11946:	4770      	bx	lr

00011948 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   11948:	4b04      	ldr	r3, [pc, #16]	; (1195c <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   1194a:	681a      	ldr	r2, [r3, #0]
   1194c:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   11950:	6883      	ldr	r3, [r0, #8]
   11952:	421a      	tst	r2, r3
}
   11954:	bf14      	ite	ne
   11956:	2001      	movne	r0, #1
   11958:	2000      	moveq	r0, #0
   1195a:	4770      	bx	lr
   1195c:	20001ad4 	.word	0x20001ad4

00011960 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   11960:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   11962:	b971      	cbnz	r1, 11982 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11964:	f3bf 8f5b 	dmb	ish
   11968:	4a0d      	ldr	r2, [pc, #52]	; (119a0 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   1196a:	43db      	mvns	r3, r3
   1196c:	e852 1f00 	ldrex	r1, [r2]
   11970:	4019      	ands	r1, r3
   11972:	e842 1000 	strex	r0, r1, [r2]
   11976:	2800      	cmp	r0, #0
   11978:	d1f8      	bne.n	1196c <_ZN9ClearCore9LedDriver5StateEs+0xc>
   1197a:	f3bf 8f5b 	dmb	ish
    return true;
}
   1197e:	2001      	movs	r0, #1
   11980:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11982:	4a07      	ldr	r2, [pc, #28]	; (119a0 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11984:	f3bf 8f5b 	dmb	ish
   11988:	e852 1f00 	ldrex	r1, [r2]
   1198c:	4319      	orrs	r1, r3
   1198e:	e842 1000 	strex	r0, r1, [r2]
   11992:	2800      	cmp	r0, #0
   11994:	d1f8      	bne.n	11988 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11996:	f3bf 8f5b 	dmb	ish
   1199a:	2001      	movs	r0, #1
   1199c:	4770      	bx	lr
   1199e:	bf00      	nop
   119a0:	20001ad4 	.word	0x20001ad4

000119a4 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   119a4:	b538      	push	{r3, r4, r5, lr}
   119a6:	4604      	mov	r4, r0
   119a8:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   119aa:	f7fc ff13 	bl	e7d4 <_ZN9ClearCore9ConnectorC1Ev>
   119ae:	4b02      	ldr	r3, [pc, #8]	; (119b8 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   119b0:	60a5      	str	r5, [r4, #8]
   119b2:	6023      	str	r3, [r4, #0]
   119b4:	4620      	mov	r0, r4
   119b6:	bd38      	pop	{r3, r4, r5, pc}
   119b8:	00023714 	.word	0x00023714

000119bc <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   119bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   119be:	4d19      	ldr	r5, [pc, #100]	; (11a24 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   119c0:	682c      	ldr	r4, [r5, #0]
   119c2:	f014 0401 	ands.w	r4, r4, #1
   119c6:	d002      	beq.n	119ce <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   119c8:	4b17      	ldr	r3, [pc, #92]	; (11a28 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   119ca:	6818      	ldr	r0, [r3, #0]
   119cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119ce:	2044      	movs	r0, #68	; 0x44
   119d0:	f001 fe66 	bl	136a0 <_Znwj>
   119d4:	4a14      	ldr	r2, [pc, #80]	; (11a28 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   119d6:	4f15      	ldr	r7, [pc, #84]	; (11a2c <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   119d8:	4e15      	ldr	r6, [pc, #84]	; (11a30 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   119da:	4916      	ldr	r1, [pc, #88]	; (11a34 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   119dc:	6004      	str	r4, [r0, #0]
   119de:	2301      	movs	r3, #1
   119e0:	6044      	str	r4, [r0, #4]
   119e2:	6084      	str	r4, [r0, #8]
   119e4:	60c4      	str	r4, [r0, #12]
   119e6:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   119e8:	6144      	str	r4, [r0, #20]
   119ea:	6184      	str	r4, [r0, #24]
   119ec:	61c4      	str	r4, [r0, #28]
   119ee:	6244      	str	r4, [r0, #36]	; 0x24
   119f0:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   119f4:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   119f8:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   119fc:	6204      	str	r4, [r0, #32]
   119fe:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   11a02:	8584      	strh	r4, [r0, #44]	; 0x2c
   11a04:	85c4      	strh	r4, [r0, #46]	; 0x2e
   11a06:	8604      	strh	r4, [r0, #48]	; 0x30
   11a08:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   11a0c:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   11a10:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   11a14:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   11a18:	6347      	str	r7, [r0, #52]	; 0x34
   11a1a:	6386      	str	r6, [r0, #56]	; 0x38
   11a1c:	63c1      	str	r1, [r0, #60]	; 0x3c
   11a1e:	6010      	str	r0, [r2, #0]
   11a20:	602b      	str	r3, [r5, #0]
    return *instance;
}
   11a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a24:	20001f24 	.word	0x20001f24
   11a28:	20001f2c 	.word	0x20001f2c
   11a2c:	09c400fa 	.word	0x09c400fa
   11a30:	2cec1388 	.word	0x2cec1388
   11a34:	09c41388 	.word	0x09c41388

00011a38 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11a38:	6840      	ldr	r0, [r0, #4]
   11a3a:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   11a3e:	4008      	ands	r0, r1
   11a40:	4770      	bx	lr
   11a42:	bf00      	nop

00011a44 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11a44:	6840      	ldr	r0, [r0, #4]
   11a46:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   11a4a:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11a4e:	4770      	bx	lr

00011a50 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   11a50:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   11a52:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   11a54:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   11a56:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   11a5a:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   11a5c:	4802      	ldr	r0, [pc, #8]	; (11a68 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   11a5e:	f7f9 fa0d 	bl	ae7c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   11a62:	2001      	movs	r0, #1
   11a64:	bd08      	pop	{r3, pc}
   11a66:	bf00      	nop
   11a68:	200019e0 	.word	0x200019e0

00011a6c <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   11a6c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   11a70:	b951      	cbnz	r1, 11a88 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   11a72:	4b17      	ldr	r3, [pc, #92]	; (11ad0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   11a74:	2204      	movs	r2, #4
   11a76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   11a7a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   11a7e:	f042 0201 	orr.w	r2, r2, #1
   11a82:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   11a86:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   11a88:	1d03      	adds	r3, r0, #4
   11a8a:	f3bf 8f5b 	dmb	ish
   11a8e:	e853 2f00 	ldrex	r2, [r3]
   11a92:	f042 0208 	orr.w	r2, r2, #8
   11a96:	e843 2100 	strex	r1, r2, [r3]
   11a9a:	2900      	cmp	r1, #0
   11a9c:	d1f7      	bne.n	11a8e <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   11a9e:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   11aa2:	f3bf 8f5b 	dmb	ish
   11aa6:	300c      	adds	r0, #12
   11aa8:	e850 3f00 	ldrex	r3, [r0]
   11aac:	f043 0308 	orr.w	r3, r3, #8
   11ab0:	e840 3200 	strex	r2, r3, [r0]
   11ab4:	2a00      	cmp	r2, #0
   11ab6:	d1f7      	bne.n	11aa8 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11ab8:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11abc:	4b04      	ldr	r3, [pc, #16]	; (11ad0 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11abe:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11ac0:	2102      	movs	r1, #2
   11ac2:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11ac6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   11aca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11ace:	4770      	bx	lr
   11ad0:	41008000 	.word	0x41008000

00011ad4 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   11ad4:	4401      	add	r1, r0
   11ad6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   11ada:	431a      	orrs	r2, r3
   11adc:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11ae0:	4770      	bx	lr
   11ae2:	bf00      	nop

00011ae4 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   11ae4:	b2cb      	uxtb	r3, r1
   11ae6:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11ae8:	b510      	push	{r4, lr}
   11aea:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   11aec:	d505      	bpl.n	11afa <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   11aee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   11af2:	f042 0202 	orr.w	r2, r2, #2
   11af6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   11afa:	0798      	lsls	r0, r3, #30
   11afc:	d505      	bpl.n	11b0a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   11afe:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11b02:	f042 0201 	orr.w	r2, r2, #1
   11b06:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   11b0a:	075a      	lsls	r2, r3, #29
   11b0c:	d505      	bpl.n	11b1a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   11b0e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11b12:	f042 0201 	orr.w	r2, r2, #1
   11b16:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   11b1a:	06d8      	lsls	r0, r3, #27
   11b1c:	d505      	bpl.n	11b2a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   11b1e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11b22:	f042 0204 	orr.w	r2, r2, #4
   11b26:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   11b2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   11b2e:	06ca      	lsls	r2, r1, #27
   11b30:	d505      	bpl.n	11b3e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   11b32:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11b36:	f042 0202 	orr.w	r2, r2, #2
   11b3a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   11b3e:	4a14      	ldr	r2, [pc, #80]	; (11b90 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   11b40:	6812      	ldr	r2, [r2, #0]
   11b42:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   11b46:	b112      	cbz	r2, 11b4e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11b48:	f011 0f0c 	tst.w	r1, #12
   11b4c:	d118      	bne.n	11b80 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   11b4e:	061b      	lsls	r3, r3, #24
   11b50:	d505      	bpl.n	11b5e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   11b52:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   11b56:	f043 0308 	orr.w	r3, r3, #8
   11b5a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   11b5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11b62:	f001 fc29 	bl	133b8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   11b66:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   11b6a:	4a0a      	ldr	r2, [pc, #40]	; (11b94 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   11b6c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   11b70:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   11b74:	3300      	adds	r3, #0
   11b76:	bf18      	it	ne
   11b78:	2301      	movne	r3, #1
   11b7a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   11b7e:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   11b80:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11b84:	f042 0204 	orr.w	r2, r2, #4
   11b88:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   11b8c:	e7df      	b.n	11b4e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11b8e:	bf00      	nop
   11b90:	20001c00 	.word	0x20001c00
   11b94:	200019e0 	.word	0x200019e0

00011b98 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   11b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b9c:	b082      	sub	sp, #8
            reg = 0;
   11b9e:	2300      	movs	r3, #0
   11ba0:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11ba2:	4b98      	ldr	r3, [pc, #608]	; (11e04 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   11ba4:	6844      	ldr	r4, [r0, #4]
   11ba6:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11baa:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11bac:	4f96      	ldr	r7, [pc, #600]	; (11e08 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11bae:	8a13      	ldrh	r3, [r2, #16]
   11bb0:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11e28 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   11bb4:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11bb6:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11bb8:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11bba:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11bbc:	bf4c      	ite	mi
   11bbe:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11bc2:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   11bc6:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11bc8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11bcc:	4e8f      	ldr	r6, [pc, #572]	; (11e0c <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11bce:	bfd4      	ite	le
   11bd0:	2300      	movle	r3, #0
   11bd2:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   11bd4:	f363 0000 	bfi	r0, r3, #0, #1
   11bd8:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11bdc:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11bde:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11be0:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11be2:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11be4:	bf4c      	ite	mi
   11be6:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11bea:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   11bee:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   11bf0:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11bf4:	bfcc      	ite	gt
   11bf6:	2300      	movgt	r3, #0
   11bf8:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   11bfa:	f363 0041 	bfi	r0, r3, #1, #1
   11bfe:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11c02:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   11c04:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11c08:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11c0a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11c0c:	bf4c      	ite	mi
   11c0e:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11c12:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   11c16:	428b      	cmp	r3, r1
   11c18:	bfcc      	ite	gt
   11c1a:	2300      	movgt	r3, #0
   11c1c:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   11c1e:	f363 1004 	bfi	r0, r3, #4, #1
   11c22:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11c2a:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11c2e:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   11c32:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11c36:	4976      	ldr	r1, [pc, #472]	; (11e10 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   11c38:	4f76      	ldr	r7, [pc, #472]	; (11e14 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11c3a:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11c3c:	43db      	mvns	r3, r3
   11c3e:	b2c0      	uxtb	r0, r0
   11c40:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11c44:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11c48:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11c4a:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11c4e:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   11c52:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11c56:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11c5a:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11c5e:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   11c62:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11c64:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   11c68:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11c6c:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   11c70:	bf18      	it	ne
   11c72:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   11c74:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11c78:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   11c7c:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11c80:	f083 0301 	eor.w	r3, r3, #1
   11c84:	f363 0241 	bfi	r2, r3, #1, #1
   11c88:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11c8c:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11c8e:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11c92:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11c96:	b2d2      	uxtb	r2, r2
   11c98:	f361 0282 	bfi	r2, r1, #2, #1
   11c9c:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11ca0:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   11ca4:	4a5c      	ldr	r2, [pc, #368]	; (11e18 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   11ca6:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11caa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11cae:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11cb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11cb6:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11cb8:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11cbc:	4857      	ldr	r0, [pc, #348]	; (11e1c <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11cbe:	f88d 1004 	strb.w	r1, [sp, #4]
   11cc2:	bf18      	it	ne
   11cc4:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11cc6:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   11cca:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11cce:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11cd0:	4e53      	ldr	r6, [pc, #332]	; (11e20 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11cd2:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11cd6:	f362 1345 	bfi	r3, r2, #5, #1
   11cda:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   11cde:	4628      	mov	r0, r5
   11ce0:	9901      	ldr	r1, [sp, #4]
   11ce2:	f7ff feff 	bl	11ae4 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11ce6:	6830      	ldr	r0, [r6, #0]
   11ce8:	6803      	ldr	r3, [r0, #0]
   11cea:	681b      	ldr	r3, [r3, #0]
   11cec:	4543      	cmp	r3, r8
   11cee:	f040 8084 	bne.w	11dfa <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   11cf2:	7980      	ldrb	r0, [r0, #6]
   11cf4:	2804      	cmp	r0, #4
   11cf6:	d00c      	beq.n	11d12 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   11cf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11cfc:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11d00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11d04:	bf14      	ite	ne
   11d06:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11d0a:	f023 0308 	biceq.w	r3, r3, #8
   11d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11d12:	6870      	ldr	r0, [r6, #4]
   11d14:	6803      	ldr	r3, [r0, #0]
   11d16:	681b      	ldr	r3, [r3, #0]
   11d18:	4543      	cmp	r3, r8
   11d1a:	d170      	bne.n	11dfe <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   11d1c:	7980      	ldrb	r0, [r0, #6]
   11d1e:	2804      	cmp	r0, #4
   11d20:	d00c      	beq.n	11d3c <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11d22:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11d26:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11d2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11d2e:	bf14      	ite	ne
   11d30:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11d34:	f023 0304 	biceq.w	r3, r3, #4
   11d38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11d3c:	9a01      	ldr	r2, [sp, #4]
   11d3e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11d42:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11d44:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11d46:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   11d4a:	f105 0210 	add.w	r2, r5, #16
   11d4e:	f3bf 8f5b 	dmb	ish
   11d52:	e852 1f00 	ldrex	r1, [r2]
   11d56:	4319      	orrs	r1, r3
   11d58:	e842 1000 	strex	r0, r1, [r2]
   11d5c:	2800      	cmp	r0, #0
   11d5e:	d1f8      	bne.n	11d52 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11d60:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11d64:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11d66:	f3bf 8f5b 	dmb	ish
   11d6a:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   11d6e:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11d72:	e853 2f00 	ldrex	r2, [r3]
   11d76:	4322      	orrs	r2, r4
   11d78:	e843 2100 	strex	r1, r2, [r3]
   11d7c:	2900      	cmp	r1, #0
   11d7e:	d1f8      	bne.n	11d72 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11d80:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11d84:	f105 0308 	add.w	r3, r5, #8
   11d88:	9a01      	ldr	r2, [sp, #4]
   11d8a:	f3bf 8f5b 	dmb	ish
   11d8e:	e853 1f00 	ldrex	r1, [r3]
   11d92:	4311      	orrs	r1, r2
   11d94:	e843 1000 	strex	r0, r1, [r3]
   11d98:	2800      	cmp	r0, #0
   11d9a:	d1f8      	bne.n	11d8e <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   11d9c:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11da0:	9b01      	ldr	r3, [sp, #4]
   11da2:	f3bf 8f5b 	dmb	ish
   11da6:	e855 2f00 	ldrex	r2, [r5]
   11daa:	431a      	orrs	r2, r3
   11dac:	e845 2100 	strex	r1, r2, [r5]
   11db0:	2900      	cmp	r1, #0
   11db2:	d1f8      	bne.n	11da6 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11db4:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11db8:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11dba:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11dbe:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11dc2:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11dc6:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11dc8:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11dcc:	d012      	beq.n	11df4 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11dce:	4c15      	ldr	r4, [pc, #84]	; (11e24 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11dd0:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11dd4:	f854 0b04 	ldr.w	r0, [r4], #4
   11dd8:	f7f3 fa36 	bl	5248 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11ddc:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11dde:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11de2:	d1f7      	bne.n	11dd4 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11de4:	6830      	ldr	r0, [r6, #0]
   11de6:	f7fc fdbb 	bl	e960 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11dea:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11dee:	6870      	ldr	r0, [r6, #4]
   11df0:	f7fc fdb6 	bl	e960 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11df4:	b002      	add	sp, #8
   11df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11dfa:	4798      	blx	r3
   11dfc:	e77a      	b.n	11cf4 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11dfe:	4798      	blx	r3
   11e00:	e78d      	b.n	11d1e <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11e02:	bf00      	nop
   11e04:	20001e0c 	.word	0x20001e0c
   11e08:	41008000 	.word	0x41008000
   11e0c:	20001c00 	.word	0x20001c00
   11e10:	20001f0c 	.word	0x20001f0c
   11e14:	200019e0 	.word	0x200019e0
   11e18:	20001894 	.word	0x20001894
   11e1c:	20001f34 	.word	0x20001f34
   11e20:	00022fb8 	.word	0x00022fb8
   11e24:	00022fc0 	.word	0x00022fc0
   11e28:	0000e8e9 	.word	0x0000e8e9

00011e2c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11e2c:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11e2e:	b94a      	cbnz	r2, 11e44 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11e30:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11e34:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11e36:	6983      	ldr	r3, [r0, #24]
   11e38:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11e3a:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11e3c:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11e3e:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11e40:	6181      	str	r1, [r0, #24]
   11e42:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11e44:	4319      	orrs	r1, r3
   11e46:	e7f5      	b.n	11e34 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011e48 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11e48:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11e4a:	f7ff fdb7 	bl	119bc <_ZN9ClearCore13StatusManager8InstanceEv>
   11e4e:	4b01      	ldr	r3, [pc, #4]	; (11e54 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11e50:	6018      	str	r0, [r3, #0]
   11e52:	bd08      	pop	{r3, pc}
   11e54:	20001f28 	.word	0x20001f28

00011e58 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11e58:	b530      	push	{r4, r5, lr}
   11e5a:	b083      	sub	sp, #12
   11e5c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11e60:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11e62:	9401      	str	r4, [sp, #4]
   11e64:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11e66:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11e68:	f7ff f8d4 	bl	11014 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11e6c:	4b04      	ldr	r3, [pc, #16]	; (11e80 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11e6e:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11e70:	4620      	mov	r0, r4
   11e72:	2100      	movs	r1, #0
   11e74:	f7ff f92c 	bl	110d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11e78:	4620      	mov	r0, r4
   11e7a:	b003      	add	sp, #12
   11e7c:	bd30      	pop	{r4, r5, pc}
   11e7e:	bf00      	nop
   11e80:	00022f64 	.word	0x00022f64

00011e84 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11e84:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11e86:	4d0f      	ldr	r5, [pc, #60]	; (11ec4 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11e88:	682b      	ldr	r3, [r5, #0]
   11e8a:	f013 0401 	ands.w	r4, r3, #1
   11e8e:	d002      	beq.n	11e96 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11e90:	4b0d      	ldr	r3, [pc, #52]	; (11ec8 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11e92:	6818      	ldr	r0, [r3, #0]
   11e94:	bd38      	pop	{r3, r4, r5, pc}
   11e96:	f44f 7002 	mov.w	r0, #520	; 0x208
   11e9a:	f001 fc01 	bl	136a0 <_Znwj>
   11e9e:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11ea4:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11ea8:	4908      	ldr	r1, [pc, #32]	; (11ecc <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11eaa:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11eae:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11eb2:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11eb6:	f00c fb93 	bl	1e5e0 <memcpy>
    static NvmManager *instance = new NvmManager();
   11eba:	4903      	ldr	r1, [pc, #12]	; (11ec8 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11ebc:	2201      	movs	r2, #1
   11ebe:	6008      	str	r0, [r1, #0]
   11ec0:	602a      	str	r2, [r5, #0]
}
   11ec2:	bd38      	pop	{r3, r4, r5, pc}
   11ec4:	20001f30 	.word	0x20001f30
   11ec8:	20001f38 	.word	0x20001f38
   11ecc:	00804000 	.word	0x00804000

00011ed0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11ed0:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11ed4:	bf9a      	itte	ls
   11ed6:	1840      	addls	r0, r0, r1
   11ed8:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11edc:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11ee0:	4770      	bx	lr
   11ee2:	bf00      	nop

00011ee4 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11ee4:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11ee6:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11eea:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11eee:	2400      	movs	r4, #0
   11ef0:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11ef4:	1c6b      	adds	r3, r5, #1
   11ef6:	bf08      	it	eq
   11ef8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11efc:	d005      	beq.n	11f0a <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11efe:	0c2e      	lsrs	r6, r5, #16
   11f00:	4627      	mov	r7, r4
   11f02:	ea56 0007 	orrs.w	r0, r6, r7
   11f06:	462b      	mov	r3, r5
   11f08:	d002      	beq.n	11f10 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11f0a:	4a07      	ldr	r2, [pc, #28]	; (11f28 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11f0c:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11f10:	0a1e      	lsrs	r6, r3, #8
   11f12:	0e15      	lsrs	r5, r2, #24
   11f14:	0c14      	lsrs	r4, r2, #16
   11f16:	0a10      	lsrs	r0, r2, #8
   11f18:	700e      	strb	r6, [r1, #0]
   11f1a:	708d      	strb	r5, [r1, #2]
   11f1c:	70cc      	strb	r4, [r1, #3]
   11f1e:	704b      	strb	r3, [r1, #1]
   11f20:	714a      	strb	r2, [r1, #5]
   11f22:	7108      	strb	r0, [r1, #4]
    }
}
   11f24:	bcf0      	pop	{r4, r5, r6, r7}
   11f26:	4770      	bx	lr
   11f28:	10b00000 	.word	0x10b00000

00011f2c <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11f2c:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11f2e:	f7ff ffa9 	bl	11e84 <_ZN9ClearCore10NvmManager8InstanceEv>
   11f32:	4b01      	ldr	r3, [pc, #4]	; (11f38 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11f34:	6018      	str	r0, [r3, #0]
   11f36:	bd08      	pop	{r3, pc}
   11f38:	20001f34 	.word	0x20001f34

00011f3c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11f3c:	2000      	movs	r0, #0
   11f3e:	4770      	bx	lr

00011f40 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f44:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11f46:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11f48:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11f4a:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11f4e:	2900      	cmp	r1, #0
   11f50:	d04f      	beq.n	11ff2 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11f52:	4b55      	ldr	r3, [pc, #340]	; (120a8 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11f54:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11f58:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11f5c:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11f60:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11f62:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11f64:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11f68:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11f6a:	f000 8095 	beq.w	12098 <_usb_d_dev_in_next+0x158>
   11f6e:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11f72:	f895 c013 	ldrb.w	ip, [r5, #19]
   11f76:	401a      	ands	r2, r3
   11f78:	b292      	uxth	r2, r2
   11f7a:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11f7e:	0163      	lsls	r3, r4, #5
   11f80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11f84:	2602      	movs	r6, #2
   11f86:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11f8a:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11f8c:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11f8e:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11f90:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11f92:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11f94:	d235      	bcs.n	12002 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11f96:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11f98:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11f9c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11f9e:	d05e      	beq.n	1205e <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11fa0:	682b      	ldr	r3, [r5, #0]
   11fa2:	68e8      	ldr	r0, [r5, #12]
   11fa4:	4576      	cmp	r6, lr
   11fa6:	bf28      	it	cs
   11fa8:	4676      	movcs	r6, lr
   11faa:	4419      	add	r1, r3
   11fac:	4632      	mov	r2, r6
   11fae:	f00c fb17 	bl	1e5e0 <memcpy>
	bank->ADDR.reg          = addr;
   11fb2:	4b3d      	ldr	r3, [pc, #244]	; (120a8 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11fb4:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11fb6:	0162      	lsls	r2, r4, #5
   11fb8:	1899      	adds	r1, r3, r2
   11fba:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11fbc:	4413      	add	r3, r2
   11fbe:	6959      	ldr	r1, [r3, #20]
   11fc0:	f366 010d 	bfi	r1, r6, #0, #14
   11fc4:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11fc6:	6959      	ldr	r1, [r3, #20]
   11fc8:	f36f 319b 	bfc	r1, #14, #14
   11fcc:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11fce:	b947      	cbnz	r7, 11fe2 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11fd0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11fd4:	f1b8 0f01 	cmp.w	r8, #1
   11fd8:	bf14      	ite	ne
   11fda:	224a      	movne	r2, #74	; 0x4a
   11fdc:	224e      	moveq	r2, #78	; 0x4e
   11fde:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11fe2:	0164      	lsls	r4, r4, #5
   11fe4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11fe8:	2380      	movs	r3, #128	; 0x80
   11fea:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ff2:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ff6:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ffa:	f00c 0807 	and.w	r8, ip, #7
   11ffe:	460a      	mov	r2, r1
   12000:	e7c3      	b.n	11f8a <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   12002:	f01c 0f10 	tst.w	ip, #16
   12006:	d11a      	bne.n	1203e <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12008:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   1200a:	f1b8 0f01 	cmp.w	r8, #1
   1200e:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   12012:	bf0c      	ite	eq
   12014:	234b      	moveq	r3, #75	; 0x4b
   12016:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   12018:	4596      	cmp	lr, r2
   1201a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1201e:	d02c      	beq.n	1207a <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12020:	28ff      	cmp	r0, #255	; 0xff
   12022:	d028      	beq.n	12076 <_usb_d_dev_in_next+0x136>
   12024:	7ceb      	ldrb	r3, [r5, #19]
   12026:	065a      	lsls	r2, r3, #25
   12028:	d525      	bpl.n	12076 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   1202a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1202e:	491f      	ldr	r1, [pc, #124]	; (120ac <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   12030:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12032:	68aa      	ldr	r2, [r5, #8]
   12034:	690b      	ldr	r3, [r1, #16]
}
   12036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1203a:	2100      	movs	r1, #0
   1203c:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   1203e:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   12040:	4b1b      	ldr	r3, [pc, #108]	; (120b0 <_usb_d_dev_in_next+0x170>)
   12042:	0162      	lsls	r2, r4, #5
   12044:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   12046:	f36f 1104 	bfc	r1, #4, #1
   1204a:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   1204c:	6859      	ldr	r1, [r3, #4]
   1204e:	f36f 010d 	bfc	r1, #0, #14
   12052:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   12054:	6859      	ldr	r1, [r3, #4]
   12056:	f36f 319b 	bfc	r1, #14, #14
   1205a:	6059      	str	r1, [r3, #4]
   1205c:	e7b7      	b.n	11fce <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   1205e:	4b12      	ldr	r3, [pc, #72]	; (120a8 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12060:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   12062:	0162      	lsls	r2, r4, #5
   12064:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12066:	4401      	add	r1, r0
   12068:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   1206c:	bf28      	it	cs
   1206e:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   12072:	6129      	str	r1, [r5, #16]
   12074:	e7a2      	b.n	11fbc <_usb_d_dev_in_next+0x7c>
   12076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   1207a:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   1207c:	4a0b      	ldr	r2, [pc, #44]	; (120ac <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   1207e:	f36f 1386 	bfc	r3, #6, #1
   12082:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   12084:	68d3      	ldr	r3, [r2, #12]
   12086:	4798      	blx	r3
   12088:	2800      	cmp	r0, #0
   1208a:	d1f4      	bne.n	12076 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   1208c:	7ceb      	ldrb	r3, [r5, #19]
   1208e:	7ca8      	ldrb	r0, [r5, #18]
   12090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12094:	74eb      	strb	r3, [r5, #19]
   12096:	e7c3      	b.n	12020 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12098:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   1209c:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   120a0:	f00c 0807 	and.w	r8, ip, #7
   120a4:	e76b      	b.n	11f7e <_usb_d_dev_in_next+0x3e>
   120a6:	bf00      	nop
   120a8:	2000222c 	.word	0x2000222c
   120ac:	20001ffc 	.word	0x20001ffc
   120b0:	2000223c 	.word	0x2000223c

000120b4 <_usb_d_dev_out_next>:
{
   120b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   120b8:	7c85      	ldrb	r5, [r0, #18]
{
   120ba:	b083      	sub	sp, #12
   120bc:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   120be:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   120c0:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   120c4:	2900      	cmp	r1, #0
   120c6:	f000 8085 	beq.w	121d4 <_usb_d_dev_out_next+0x120>
   120ca:	4b76      	ldr	r3, [pc, #472]	; (122a4 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   120cc:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   120ce:	ea4f 1845 	mov.w	r8, r5, lsl #5
   120d2:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   120d4:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   120d8:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   120da:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   120dc:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   120de:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   120e2:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   120e6:	f000 80d7 	beq.w	12298 <_usb_d_dev_out_next+0x1e4>
   120ea:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   120ec:	7cc2      	ldrb	r2, [r0, #19]
   120ee:	b2b6      	uxth	r6, r6
   120f0:	ea09 0306 	and.w	r3, r9, r6
   120f4:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   120f8:	0169      	lsls	r1, r5, #5
   120fa:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   120fe:	2001      	movs	r0, #1
   12100:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   12104:	0691      	lsls	r1, r2, #26
   12106:	d512      	bpl.n	1212e <_usb_d_dev_out_next+0x7a>
   12108:	f8d4 e004 	ldr.w	lr, [r4, #4]
   1210c:	f1be 0f00 	cmp.w	lr, #0
   12110:	d048      	beq.n	121a4 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   12112:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   12114:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   12116:	ebae 0200 	sub.w	r2, lr, r0
   1211a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   1211c:	429a      	cmp	r2, r3
   1211e:	bf28      	it	cs
   12120:	461a      	movcs	r2, r3
   12122:	6823      	ldr	r3, [r4, #0]
   12124:	68e1      	ldr	r1, [r4, #12]
   12126:	4418      	add	r0, r3
   12128:	f00c fa5a 	bl	1e5e0 <memcpy>
   1212c:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   1212e:	6862      	ldr	r2, [r4, #4]
   12130:	2a00      	cmp	r2, #0
   12132:	d036      	beq.n	121a2 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   12134:	2f00      	cmp	r7, #0
   12136:	d15b      	bne.n	121f0 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   12138:	68a3      	ldr	r3, [r4, #8]
   1213a:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   1213c:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   1213e:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   12140:	d960      	bls.n	12204 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   12142:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   12144:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   12146:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   12148:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   1214a:	f140 808b 	bpl.w	12264 <_usb_d_dev_out_next+0x1b0>
   1214e:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   12150:	4954      	ldr	r1, [pc, #336]	; (122a4 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12152:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   12154:	f841 3008 	str.w	r3, [r1, r8]
   12158:	42b2      	cmp	r2, r6
   1215a:	bf28      	it	cs
   1215c:	4632      	movcs	r2, r6
   1215e:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12162:	eb01 0308 	add.w	r3, r1, r8
   12166:	6858      	ldr	r0, [r3, #4]
   12168:	f362 309b 	bfi	r0, r2, #14, #14
   1216c:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   1216e:	685a      	ldr	r2, [r3, #4]
   12170:	f36f 020d 	bfc	r2, #0, #14
   12174:	605a      	str	r2, [r3, #4]
	if (!isr) {
   12176:	b95f      	cbnz	r7, 12190 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   12178:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   1217c:	bf08      	it	eq
   1217e:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12180:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   12184:	bf0a      	itet	eq
   12186:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   12188:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   1218a:	768f      	strbeq	r7, [r1, #26]
   1218c:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12190:	016d      	lsls	r5, r5, #5
   12192:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   12196:	2340      	movs	r3, #64	; 0x40
   12198:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   1219c:	b003      	add	sp, #12
   1219e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a2:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   121a4:	06d6      	lsls	r6, r2, #27
   121a6:	d54b      	bpl.n	12240 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   121a8:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   121aa:	493e      	ldr	r1, [pc, #248]	; (122a4 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   121ac:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   121ae:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   121b2:	f043 0320 	orr.w	r3, r3, #32
   121b6:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   121b8:	f841 2008 	str.w	r2, [r1, r8]
   121bc:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   121c0:	8a20      	ldrh	r0, [r4, #16]
   121c2:	685a      	ldr	r2, [r3, #4]
   121c4:	f360 329b 	bfi	r2, r0, #14, #14
   121c8:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   121ca:	685a      	ldr	r2, [r3, #4]
   121cc:	f36f 020d 	bfc	r2, #0, #14
   121d0:	605a      	str	r2, [r3, #4]
   121d2:	e7d0      	b.n	12176 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   121d4:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   121d6:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   121d8:	f240 33ff 	movw	r3, #1023	; 0x3ff
   121dc:	429e      	cmp	r6, r3
   121de:	d137      	bne.n	12250 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   121e0:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   121e2:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   121e6:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   121e8:	46b9      	mov	r9, r7
   121ea:	ea4f 1845 	mov.w	r8, r5, lsl #5
   121ee:	e789      	b.n	12104 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   121f0:	8a21      	ldrh	r1, [r4, #16]
   121f2:	4299      	cmp	r1, r3
   121f4:	d9a0      	bls.n	12138 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   121f6:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   121f8:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   121fa:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   121fe:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   12200:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12202:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   12204:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12208:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   1220c:	bf0c      	ite	eq
   1220e:	232d      	moveq	r3, #45	; 0x2d
   12210:	2325      	movne	r3, #37	; 0x25
   12212:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   12216:	b915      	cbnz	r5, 1221e <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   12218:	4b22      	ldr	r3, [pc, #136]	; (122a4 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   1221a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   1221c:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1221e:	7ca0      	ldrb	r0, [r4, #18]
   12220:	28ff      	cmp	r0, #255	; 0xff
   12222:	d0bb      	beq.n	1219c <_usb_d_dev_out_next+0xe8>
   12224:	7ce3      	ldrb	r3, [r4, #19]
   12226:	065a      	lsls	r2, r3, #25
   12228:	d5b8      	bpl.n	1219c <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   1222a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1222e:	491e      	ldr	r1, [pc, #120]	; (122a8 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   12230:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12232:	690b      	ldr	r3, [r1, #16]
   12234:	68a2      	ldr	r2, [r4, #8]
   12236:	2100      	movs	r1, #0
}
   12238:	b003      	add	sp, #12
   1223a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1223e:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   12240:	b117      	cbz	r7, 12248 <_usb_d_dev_out_next+0x194>
   12242:	8a22      	ldrh	r2, [r4, #16]
   12244:	429a      	cmp	r2, r3
   12246:	d8d6      	bhi.n	121f6 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   12248:	68a3      	ldr	r3, [r4, #8]
   1224a:	4453      	add	r3, sl
   1224c:	60a3      	str	r3, [r4, #8]
   1224e:	e7d9      	b.n	12204 <_usb_d_dev_out_next+0x150>
   12250:	3e01      	subs	r6, #1
   12252:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12254:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12258:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1225a:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   1225c:	4689      	mov	r9, r1
   1225e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12262:	e74f      	b.n	12104 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   12264:	8a20      	ldrh	r0, [r4, #16]
   12266:	4282      	cmp	r2, r0
   12268:	d905      	bls.n	12276 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   1226a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1226e:	d90e      	bls.n	1228e <_usb_d_dev_out_next+0x1da>
   12270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12274:	e005      	b.n	12282 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   12276:	bf3c      	itt	cc
   12278:	f041 0120 	orrcc.w	r1, r1, #32
   1227c:	74e1      	strbcc	r1, [r4, #19]
   1227e:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12282:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   12284:	4907      	ldr	r1, [pc, #28]	; (122a4 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12286:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   12288:	f841 3008 	str.w	r3, [r1, r8]
   1228c:	e769      	b.n	12162 <_usb_d_dev_out_next+0xae>
   1228e:	ea22 0206 	bic.w	r2, r2, r6
   12292:	f3c2 020d 	ubfx	r2, r2, #0, #14
   12296:	e7f4      	b.n	12282 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12298:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   1229a:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1229e:	f002 0b07 	and.w	fp, r2, #7
   122a2:	e729      	b.n	120f8 <_usb_d_dev_out_next+0x44>
   122a4:	2000222c 	.word	0x2000222c
   122a8:	20001ffc 	.word	0x20001ffc

000122ac <_usb_d_dev_handler>:
{
   122ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   122b0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   122b4:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   122b6:	8c16      	ldrh	r6, [r2, #32]
   122b8:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   122ba:	2e00      	cmp	r6, #0
   122bc:	f000 812c 	beq.w	12518 <_usb_d_dev_handler+0x26c>
   122c0:	4dc4      	ldr	r5, [pc, #784]	; (125d4 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   122c2:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   122c4:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   122c6:	7ca8      	ldrb	r0, [r5, #18]
   122c8:	28ff      	cmp	r0, #255	; 0xff
   122ca:	d030      	beq.n	1232e <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   122cc:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   122d0:	fa07 f203 	lsl.w	r2, r7, r3
   122d4:	4232      	tst	r2, r6
   122d6:	d02a      	beq.n	1232e <_usb_d_dev_handler+0x82>
   122d8:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   122dc:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   122e0:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   122e2:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   122e6:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   122ea:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   122ec:	46c1      	mov	r9, r8
	if (flags) {
   122ee:	d01e      	beq.n	1232e <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   122f0:	49b9      	ldr	r1, [pc, #740]	; (125d8 <_usb_d_dev_handler+0x32c>)
   122f2:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   122f6:	eb0a 0c04 	add.w	ip, sl, r4
   122fa:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   122fe:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   12302:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   12306:	2901      	cmp	r1, #1
   12308:	f000 80f4 	beq.w	124f4 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   1230c:	f01b 0f80 	tst.w	fp, #128	; 0x80
   12310:	d115      	bne.n	1233e <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   12312:	f013 0120 	ands.w	r1, r3, #32
   12316:	d15a      	bne.n	123ce <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   12318:	f013 0f04 	tst.w	r3, #4
   1231c:	f040 8098 	bne.w	12450 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   12320:	07d9      	lsls	r1, r3, #31
   12322:	f100 80e2 	bmi.w	124ea <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   12326:	f00b 0107 	and.w	r1, fp, #7
   1232a:	2901      	cmp	r1, #1
   1232c:	d058      	beq.n	123e0 <_usb_d_dev_handler+0x134>
   1232e:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   12330:	2c1b      	cmp	r4, #27
   12332:	f105 0514 	add.w	r5, r5, #20
   12336:	d1c6      	bne.n	122c6 <_usb_d_dev_handler+0x1a>
}
   12338:	b001      	add	sp, #4
   1233a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   1233e:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   12342:	f040 8143 	bne.w	125cc <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12346:	f013 0f08 	tst.w	r3, #8
   1234a:	f040 8189 	bne.w	12660 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   1234e:	0799      	lsls	r1, r3, #30
   12350:	f100 8137 	bmi.w	125c2 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   12354:	f00b 0107 	and.w	r1, fp, #7
   12358:	2901      	cmp	r1, #1
   1235a:	d1e8      	bne.n	1232e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   1235c:	0759      	lsls	r1, r3, #29
   1235e:	f100 8241 	bmi.w	127e4 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12362:	06db      	lsls	r3, r3, #27
   12364:	d5e3      	bpl.n	1232e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12366:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1236a:	d011      	beq.n	12390 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1236c:	499a      	ldr	r1, [pc, #616]	; (125d8 <_usb_d_dev_handler+0x32c>)
   1236e:	eb0a 0304 	add.w	r3, sl, r4
   12372:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12376:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1237a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1237e:	f36f 1186 	bfc	r1, #6, #1
   12382:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12386:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12388:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1238c:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12390:	4b91      	ldr	r3, [pc, #580]	; (125d8 <_usb_d_dev_handler+0x32c>)
   12392:	eb0a 0104 	add.w	r1, sl, r4
   12396:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   1239a:	4b90      	ldr	r3, [pc, #576]	; (125dc <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   1239c:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   123a0:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   123a4:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123a8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   123ac:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   123b0:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123b4:	216f      	movs	r1, #111	; 0x6f
   123b6:	f88e c00a 	strb.w	ip, [lr, #10]
   123ba:	f88e c01a 	strb.w	ip, [lr, #26]
   123be:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123c2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   123c6:	4b84      	ldr	r3, [pc, #528]	; (125d8 <_usb_d_dev_handler+0x32c>)
   123c8:	689b      	ldr	r3, [r3, #8]
   123ca:	4798      	blx	r3
   123cc:	e7af      	b.n	1232e <_usb_d_dev_handler+0x82>
   123ce:	68aa      	ldr	r2, [r5, #8]
   123d0:	2320      	movs	r3, #32
   123d2:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   123d6:	4b80      	ldr	r3, [pc, #512]	; (125d8 <_usb_d_dev_handler+0x32c>)
   123d8:	2101      	movs	r1, #1
   123da:	691b      	ldr	r3, [r3, #16]
   123dc:	4798      	blx	r3
   123de:	e7a6      	b.n	1232e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   123e0:	0719      	lsls	r1, r3, #28
   123e2:	f100 80fd 	bmi.w	125e0 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   123e6:	06db      	lsls	r3, r3, #27
   123e8:	d5a1      	bpl.n	1232e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   123ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
   123ee:	d011      	beq.n	12414 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   123f0:	4979      	ldr	r1, [pc, #484]	; (125d8 <_usb_d_dev_handler+0x32c>)
   123f2:	eb0a 0304 	add.w	r3, sl, r4
   123f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   123fa:	f04f 0e80 	mov.w	lr, #128	; 0x80
   123fe:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   12402:	f36f 1186 	bfc	r1, #6, #1
   12406:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1240a:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1240c:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12410:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12414:	4b70      	ldr	r3, [pc, #448]	; (125d8 <_usb_d_dev_handler+0x32c>)
   12416:	eb0a 0104 	add.w	r1, sl, r4
   1241a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   1241e:	4b6f      	ldr	r3, [pc, #444]	; (125dc <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   12420:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12424:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12428:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1242c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12430:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12434:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   12436:	2100      	movs	r1, #0
   12438:	f88e 100a 	strb.w	r1, [lr, #10]
   1243c:	f88e 101a 	strb.w	r1, [lr, #26]
   12440:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12444:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12448:	4b63      	ldr	r3, [pc, #396]	; (125d8 <_usb_d_dev_handler+0x32c>)
   1244a:	689b      	ldr	r3, [r3, #8]
   1244c:	4798      	blx	r3
   1244e:	e76e      	b.n	1232e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12450:	4b62      	ldr	r3, [pc, #392]	; (125dc <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12452:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12456:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12458:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   1245c:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12460:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12464:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12466:	d07c      	beq.n	12562 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   12468:	f013 0302 	ands.w	r3, r3, #2
   1246c:	d032      	beq.n	124d4 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1246e:	f89e 100a 	ldrb.w	r1, [lr, #10]
   12472:	f36f 0141 	bfc	r1, #1, #1
   12476:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1247a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1247e:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12482:	2204      	movs	r2, #4
   12484:	2901      	cmp	r1, #1
   12486:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1248a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1248e:	f47f af4e 	bne.w	1232e <_usb_d_dev_handler+0x82>
   12492:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12496:	f43f af4a 	beq.w	1232e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1249a:	494f      	ldr	r1, [pc, #316]	; (125d8 <_usb_d_dev_handler+0x32c>)
   1249c:	eb0a 0204 	add.w	r2, sl, r4
   124a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   124a4:	3220      	adds	r2, #32
   124a6:	79d1      	ldrb	r1, [r2, #7]
   124a8:	09c9      	lsrs	r1, r1, #7
   124aa:	f43f af40 	beq.w	1232e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124ae:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   124b0:	f04f 0e80 	mov.w	lr, #128	; 0x80
   124b4:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124b8:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124bc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   124c0:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   124c2:	4b45      	ldr	r3, [pc, #276]	; (125d8 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   124c4:	f36f 1186 	bfc	r1, #6, #1
   124c8:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   124ca:	691b      	ldr	r3, [r3, #16]
   124cc:	68aa      	ldr	r2, [r5, #8]
   124ce:	2100      	movs	r1, #0
   124d0:	4798      	blx	r3
   124d2:	e72c      	b.n	1232e <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   124d4:	4941      	ldr	r1, [pc, #260]	; (125dc <_usb_d_dev_handler+0x330>)
   124d6:	1888      	adds	r0, r1, r2
   124d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124dc:	2104      	movs	r1, #4
   124de:	7283      	strb	r3, [r0, #10]
   124e0:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124e4:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   124e8:	e721      	b.n	1232e <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   124ea:	2101      	movs	r1, #1
   124ec:	4628      	mov	r0, r5
   124ee:	f7ff fde1 	bl	120b4 <_usb_d_dev_out_next>
   124f2:	e71c      	b.n	1232e <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   124f4:	f013 0f10 	tst.w	r3, #16
   124f8:	f040 80e0 	bne.w	126bc <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   124fc:	065a      	lsls	r2, r3, #25
   124fe:	f100 80e7 	bmi.w	126d0 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   12502:	069b      	lsls	r3, r3, #26
   12504:	f57f af13 	bpl.w	1232e <_usb_d_dev_handler+0x82>
   12508:	2320      	movs	r3, #32
   1250a:	68aa      	ldr	r2, [r5, #8]
   1250c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12510:	4b31      	ldr	r3, [pc, #196]	; (125d8 <_usb_d_dev_handler+0x32c>)
   12512:	691b      	ldr	r3, [r3, #16]
   12514:	4798      	blx	r3
   12516:	e70a      	b.n	1232e <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   12518:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   1251a:	8b13      	ldrh	r3, [r2, #24]
   1251c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   1251e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   12520:	f013 0004 	ands.w	r0, r3, #4
   12524:	f040 80dc 	bne.w	126e0 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12528:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   1252c:	f040 80e0 	bne.w	126f0 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12530:	0618      	lsls	r0, r3, #24
   12532:	f100 8140 	bmi.w	127b6 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   12536:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   1253a:	f040 8191 	bne.w	12860 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   1253e:	f013 0108 	ands.w	r1, r3, #8
   12542:	f040 819e 	bne.w	12882 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   12546:	07db      	lsls	r3, r3, #31
   12548:	f57f aeba 	bpl.w	122c0 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   1254c:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12550:	4821      	ldr	r0, [pc, #132]	; (125d8 <_usb_d_dev_handler+0x32c>)
   12552:	8393      	strh	r3, [r2, #28]
   12554:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12556:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12558:	2570      	movs	r5, #112	; 0x70
   1255a:	2004      	movs	r0, #4
   1255c:	8315      	strh	r5, [r2, #24]
   1255e:	4623      	mov	r3, r4
   12560:	e0de      	b.n	12720 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12562:	f013 0f01 	tst.w	r3, #1
   12566:	f43f af7f 	beq.w	12468 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1256a:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1256e:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12572:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12576:	f04f 0104 	mov.w	r1, #4
   1257a:	f88e 300a 	strb.w	r3, [lr, #10]
   1257e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12582:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12586:	f43f aed2 	beq.w	1232e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1258a:	4b13      	ldr	r3, [pc, #76]	; (125d8 <_usb_d_dev_handler+0x32c>)
   1258c:	eb0a 0104 	add.w	r1, sl, r4
   12590:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12594:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12598:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1259c:	2240      	movs	r2, #64	; 0x40
   1259e:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125a2:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125a6:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   125aa:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   125ae:	4b0a      	ldr	r3, [pc, #40]	; (125d8 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   125b0:	f36f 1286 	bfc	r2, #6, #1
   125b4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   125b8:	691b      	ldr	r3, [r3, #16]
   125ba:	68aa      	ldr	r2, [r5, #8]
   125bc:	2104      	movs	r1, #4
   125be:	4798      	blx	r3
   125c0:	e6b5      	b.n	1232e <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   125c2:	2101      	movs	r1, #1
   125c4:	4628      	mov	r0, r5
   125c6:	f7ff fcbb 	bl	11f40 <_usb_d_dev_in_next>
   125ca:	e6b0      	b.n	1232e <_usb_d_dev_handler+0x82>
   125cc:	68aa      	ldr	r2, [r5, #8]
   125ce:	2340      	movs	r3, #64	; 0x40
   125d0:	e6ff      	b.n	123d2 <_usb_d_dev_handler+0x126>
   125d2:	bf00      	nop
   125d4:	20002010 	.word	0x20002010
   125d8:	20001ffc 	.word	0x20001ffc
   125dc:	2000222c 	.word	0x2000222c
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   125e0:	4bc3      	ldr	r3, [pc, #780]	; (128f0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   125e2:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   125e6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   125e8:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   125ec:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   125f0:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   125f2:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   125f4:	f000 8098 	beq.w	12728 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   125f8:	f013 0302 	ands.w	r3, r3, #2
   125fc:	d053      	beq.n	126a6 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   125fe:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12602:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12606:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1260a:	2208      	movs	r2, #8
   1260c:	f88e 101a 	strb.w	r1, [lr, #26]
   12610:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12614:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12618:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1261c:	f43f ae87 	beq.w	1232e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12620:	4ab4      	ldr	r2, [pc, #720]	; (128f4 <_usb_d_dev_handler+0x648>)
   12622:	eb0a 0e04 	add.w	lr, sl, r4
   12626:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   1262a:	f10e 0e20 	add.w	lr, lr, #32
   1262e:	f89e 1007 	ldrb.w	r1, [lr, #7]
   12632:	09c9      	lsrs	r1, r1, #7
   12634:	f47f ae7b 	bne.w	1232e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12638:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1263a:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1263e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12642:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12646:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1264a:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1264e:	4ba9      	ldr	r3, [pc, #676]	; (128f4 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12650:	f361 1286 	bfi	r2, r1, #6, #1
   12654:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12658:	691b      	ldr	r3, [r3, #16]
   1265a:	68aa      	ldr	r2, [r5, #8]
   1265c:	4798      	blx	r3
   1265e:	e666      	b.n	1232e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12660:	4ba3      	ldr	r3, [pc, #652]	; (128f0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12662:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   12666:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12668:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1266c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12670:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12674:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12676:	d07a      	beq.n	1276e <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12678:	f013 0302 	ands.w	r3, r3, #2
   1267c:	d013      	beq.n	126a6 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1267e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12682:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12686:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1268a:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1268e:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12692:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12694:	f88e 101a 	strb.w	r1, [lr, #26]
   12698:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1269c:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   126a0:	f47f ae45 	bne.w	1232e <_usb_d_dev_handler+0x82>
   126a4:	e7b8      	b.n	12618 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   126a6:	4992      	ldr	r1, [pc, #584]	; (128f0 <_usb_d_dev_handler+0x644>)
   126a8:	1888      	adds	r0, r1, r2
   126aa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126ae:	2108      	movs	r1, #8
   126b0:	7683      	strb	r3, [r0, #26]
   126b2:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126b6:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   126ba:	e638      	b.n	1232e <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   126bc:	f00b 0307 	and.w	r3, fp, #7
   126c0:	2b01      	cmp	r3, #1
   126c2:	d07e      	beq.n	127c2 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126c4:	2310      	movs	r3, #16
   126c6:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   126ca:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   126ce:	e62e      	b.n	1232e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126d0:	2340      	movs	r3, #64	; 0x40
   126d2:	68aa      	ldr	r2, [r5, #8]
   126d4:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   126d8:	4b86      	ldr	r3, [pc, #536]	; (128f4 <_usb_d_dev_handler+0x648>)
   126da:	691b      	ldr	r3, [r3, #16]
   126dc:	4798      	blx	r3
   126de:	e626      	b.n	1232e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126e0:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   126e2:	4b84      	ldr	r3, [pc, #528]	; (128f4 <_usb_d_dev_handler+0x648>)
   126e4:	8391      	strh	r1, [r2, #28]
   126e6:	681b      	ldr	r3, [r3, #0]
}
   126e8:	b001      	add	sp, #4
   126ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   126ee:	4718      	bx	r3
   126f0:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126f4:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   126f6:	4b7e      	ldr	r3, [pc, #504]	; (128f0 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126f8:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   126fa:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126fc:	8314      	strh	r4, [r2, #24]
   126fe:	891a      	ldrh	r2, [r3, #8]
   12700:	f002 020f 	and.w	r2, r2, #15
   12704:	2a03      	cmp	r2, #3
   12706:	f000 8128 	beq.w	1295a <_usb_d_dev_handler+0x6ae>
   1270a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1270c:	f002 020f 	and.w	r2, r2, #15
   12710:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   12712:	bf18      	it	ne
   12714:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12716:	f000 811f 	beq.w	12958 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   1271a:	4b76      	ldr	r3, [pc, #472]	; (128f4 <_usb_d_dev_handler+0x648>)
   1271c:	685b      	ldr	r3, [r3, #4]
   1271e:	2003      	movs	r0, #3
}
   12720:	b001      	add	sp, #4
   12722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12726:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12728:	07d9      	lsls	r1, r3, #31
   1272a:	f57f af65 	bpl.w	125f8 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1272e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12732:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12736:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1273a:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1273c:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12740:	f88e 101a 	strb.w	r1, [lr, #26]
   12744:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12748:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1274c:	f43f adef 	beq.w	1232e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12750:	4a68      	ldr	r2, [pc, #416]	; (128f4 <_usb_d_dev_handler+0x648>)
   12752:	eb0a 0104 	add.w	r1, sl, r4
   12756:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1275a:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1275e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12760:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12764:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12768:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1276c:	e71d      	b.n	125aa <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1276e:	f013 0f01 	tst.w	r3, #1
   12772:	d081      	beq.n	12678 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12774:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12778:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1277c:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12780:	f04f 0108 	mov.w	r1, #8
   12784:	f88e 301a 	strb.w	r3, [lr, #26]
   12788:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1278c:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12790:	f43f adcd 	beq.w	1232e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12794:	4b57      	ldr	r3, [pc, #348]	; (128f4 <_usb_d_dev_handler+0x648>)
   12796:	eb0a 0104 	add.w	r1, sl, r4
   1279a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1279e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127a2:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   127a6:	2280      	movs	r2, #128	; 0x80
   127a8:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127ac:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127b0:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   127b4:	e6f9      	b.n	125aa <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   127b6:	4b4f      	ldr	r3, [pc, #316]	; (128f4 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   127b8:	2080      	movs	r0, #128	; 0x80
   127ba:	685b      	ldr	r3, [r3, #4]
   127bc:	8390      	strh	r0, [r2, #28]
   127be:	2005      	movs	r0, #5
   127c0:	e7ae      	b.n	12720 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   127c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   127c6:	f43f ade3 	beq.w	12390 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   127ca:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   127ce:	f36f 1386 	bfc	r3, #6, #1
   127d2:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   127d6:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   127d8:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   127da:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   127de:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   127e2:	e5d5      	b.n	12390 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   127e4:	4b42      	ldr	r3, [pc, #264]	; (128f0 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   127e6:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   127ea:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   127ec:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   127f0:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   127f4:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   127f6:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   127f8:	f000 8080 	beq.w	128fc <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   127fc:	f013 0302 	ands.w	r3, r3, #2
   12800:	f43f ae68 	beq.w	124d4 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12804:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12808:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1280c:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12810:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12812:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12816:	f88e 100a 	strb.w	r1, [lr, #10]
   1281a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1281e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12822:	f43f ad84 	beq.w	1232e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12826:	4a33      	ldr	r2, [pc, #204]	; (128f4 <_usb_d_dev_handler+0x648>)
   12828:	eb0a 0104 	add.w	r1, sl, r4
   1282c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12830:	3120      	adds	r1, #32
   12832:	79ca      	ldrb	r2, [r1, #7]
   12834:	09d2      	lsrs	r2, r2, #7
   12836:	f43f ad7a 	beq.w	1232e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1283a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1283c:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12840:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12844:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12848:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1284c:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1284e:	4b29      	ldr	r3, [pc, #164]	; (128f4 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12850:	f36f 1286 	bfc	r2, #6, #1
   12854:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12856:	691b      	ldr	r3, [r3, #16]
   12858:	68aa      	ldr	r2, [r5, #8]
   1285a:	2100      	movs	r1, #0
   1285c:	4798      	blx	r3
   1285e:	e566      	b.n	1232e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12860:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12862:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   12866:	4924      	ldr	r1, [pc, #144]	; (128f8 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12868:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1286a:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1286c:	8310      	strh	r0, [r2, #24]
   1286e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   12870:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   12874:	2b03      	cmp	r3, #3
   12876:	d1fa      	bne.n	1286e <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   12878:	4b1e      	ldr	r3, [pc, #120]	; (128f4 <_usb_d_dev_handler+0x648>)
   1287a:	2100      	movs	r1, #0
   1287c:	685b      	ldr	r3, [r3, #4]
   1287e:	2002      	movs	r0, #2
   12880:	e74e      	b.n	12720 <_usb_d_dev_handler+0x474>
   12882:	4e1c      	ldr	r6, [pc, #112]	; (128f4 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12884:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12888:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1288a:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1288c:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12890:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   12892:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12894:	8291      	strh	r1, [r2, #20]
   12896:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12898:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   1289a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1289e:	e007      	b.n	128b0 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   128a0:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   128a2:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   128a6:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   128aa:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   128ae:	d016      	beq.n	128de <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   128b0:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   128b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   128b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   128bc:	28ff      	cmp	r0, #255	; 0xff
   128be:	f103 0320 	add.w	r3, r3, #32
   128c2:	f104 0401 	add.w	r4, r4, #1
   128c6:	d0eb      	beq.n	128a0 <_usb_d_dev_handler+0x5f4>
   128c8:	79da      	ldrb	r2, [r3, #7]
   128ca:	0651      	lsls	r1, r2, #25
   128cc:	d5e8      	bpl.n	128a0 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   128ce:	f36f 1286 	bfc	r2, #6, #1
   128d2:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128d4:	69ea      	ldr	r2, [r5, #28]
   128d6:	6933      	ldr	r3, [r6, #16]
   128d8:	2103      	movs	r1, #3
   128da:	4798      	blx	r3
   128dc:	e7e0      	b.n	128a0 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   128de:	2100      	movs	r1, #0
   128e0:	2260      	movs	r2, #96	; 0x60
   128e2:	4803      	ldr	r0, [pc, #12]	; (128f0 <_usb_d_dev_handler+0x644>)
   128e4:	f00b ff7a 	bl	1e7dc <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   128e8:	6873      	ldr	r3, [r6, #4]
   128ea:	2100      	movs	r1, #0
   128ec:	2001      	movs	r0, #1
   128ee:	e717      	b.n	12720 <_usb_d_dev_handler+0x474>
   128f0:	2000222c 	.word	0x2000222c
   128f4:	20001ffc 	.word	0x20001ffc
   128f8:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   128fc:	07d9      	lsls	r1, r3, #31
   128fe:	f57f af7d 	bpl.w	127fc <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12902:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12906:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1290a:	460a      	mov	r2, r1
   1290c:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12910:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12912:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12916:	f88e 200a 	strb.w	r2, [lr, #10]
   1291a:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1291e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12922:	f43f ad04 	beq.w	1232e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12926:	4a11      	ldr	r2, [pc, #68]	; (1296c <_usb_d_dev_handler+0x6c0>)
   12928:	eb0a 0e04 	add.w	lr, sl, r4
   1292c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12930:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12934:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12936:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1293a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1293e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   12942:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12946:	4b09      	ldr	r3, [pc, #36]	; (1296c <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   12948:	f36f 1286 	bfc	r2, #6, #1
   1294c:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12950:	691b      	ldr	r3, [r3, #16]
   12952:	68aa      	ldr	r2, [r5, #8]
   12954:	4798      	blx	r3
   12956:	e4ea      	b.n	1232e <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   12958:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   1295a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   1295e:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12960:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   12962:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12964:	f3c1 110a 	ubfx	r1, r1, #4, #11
   12968:	e6d7      	b.n	1271a <_usb_d_dev_handler+0x46e>
   1296a:	bf00      	nop
   1296c:	20001ffc 	.word	0x20001ffc

00012970 <_usb_d_dev_init>:
{
   12970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   12974:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12978:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   1297a:	07db      	lsls	r3, r3, #31
   1297c:	d551      	bpl.n	12a22 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1297e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   12982:	789c      	ldrb	r4, [r3, #2]
   12984:	f014 0401 	ands.w	r4, r4, #1
   12988:	d1fb      	bne.n	12982 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   1298a:	4b45      	ldr	r3, [pc, #276]	; (12aa0 <_usb_d_dev_init+0x130>)
   1298c:	4a45      	ldr	r2, [pc, #276]	; (12aa4 <_usb_d_dev_init+0x134>)
   1298e:	601a      	str	r2, [r3, #0]
   12990:	461e      	mov	r6, r3
   12992:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   12994:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   12996:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   12998:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   1299a:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   1299c:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   1299e:	27ff      	movs	r7, #255	; 0xff
   129a0:	e007      	b.n	129b2 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   129a2:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   129a4:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   129a8:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   129ac:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   129b0:	d01d      	beq.n	129ee <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129b2:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   129b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   129ba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   129be:	28ff      	cmp	r0, #255	; 0xff
   129c0:	f103 0320 	add.w	r3, r3, #32
   129c4:	f104 0401 	add.w	r4, r4, #1
   129c8:	d0eb      	beq.n	129a2 <_usb_d_dev_init+0x32>
   129ca:	79da      	ldrb	r2, [r3, #7]
   129cc:	0651      	lsls	r1, r2, #25
   129ce:	d5e8      	bpl.n	129a2 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   129d0:	f36f 1286 	bfc	r2, #6, #1
   129d4:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   129d6:	69ea      	ldr	r2, [r5, #28]
   129d8:	6933      	ldr	r3, [r6, #16]
   129da:	2103      	movs	r1, #3
   129dc:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   129de:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   129e0:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   129e4:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   129e8:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   129ec:	d1e1      	bne.n	129b2 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   129ee:	2260      	movs	r2, #96	; 0x60
   129f0:	2100      	movs	r1, #0
   129f2:	482d      	ldr	r0, [pc, #180]	; (12aa8 <_usb_d_dev_init+0x138>)
   129f4:	f00b fef2 	bl	1e7dc <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   129f8:	4b2c      	ldr	r3, [pc, #176]	; (12aac <_usb_d_dev_init+0x13c>)
   129fa:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   129fc:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12a00:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12a04:	f013 031f 	ands.w	r3, r3, #31
   12a08:	d027      	beq.n	12a5a <_usb_d_dev_init+0xea>
   12a0a:	2b1f      	cmp	r3, #31
   12a0c:	d025      	beq.n	12a5a <_usb_d_dev_init+0xea>
   12a0e:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12a10:	b338      	cbz	r0, 12a62 <_usb_d_dev_init+0xf2>
   12a12:	281f      	cmp	r0, #31
   12a14:	d025      	beq.n	12a62 <_usb_d_dev_init+0xf2>
   12a16:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12a18:	b332      	cbz	r2, 12a68 <_usb_d_dev_init+0xf8>
   12a1a:	2a07      	cmp	r2, #7
   12a1c:	d024      	beq.n	12a68 <_usb_d_dev_init+0xf8>
   12a1e:	0311      	lsls	r1, r2, #12
   12a20:	e024      	b.n	12a6c <_usb_d_dev_init+0xfc>
   12a22:	7893      	ldrb	r3, [r2, #2]
   12a24:	079f      	lsls	r7, r3, #30
   12a26:	d1fc      	bne.n	12a22 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12a28:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   12a2a:	079e      	lsls	r6, r3, #30
   12a2c:	d50d      	bpl.n	12a4a <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   12a2e:	7813      	ldrb	r3, [r2, #0]
   12a30:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12a34:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12a36:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12a3a:	7893      	ldrb	r3, [r2, #2]
   12a3c:	079d      	lsls	r5, r3, #30
   12a3e:	d1fc      	bne.n	12a3a <_usb_d_dev_init+0xca>
   12a40:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12a44:	7893      	ldrb	r3, [r2, #2]
   12a46:	079c      	lsls	r4, r3, #30
   12a48:	d4fc      	bmi.n	12a44 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12a4a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12a4e:	2301      	movs	r3, #1
   12a50:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12a52:	7893      	ldrb	r3, [r2, #2]
   12a54:	0798      	lsls	r0, r3, #30
   12a56:	d1fc      	bne.n	12a52 <_usb_d_dev_init+0xe2>
   12a58:	e791      	b.n	1297e <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12a5a:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12a5e:	2800      	cmp	r0, #0
   12a60:	d1d7      	bne.n	12a12 <_usb_d_dev_init+0xa2>
   12a62:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   12a64:	2a00      	cmp	r2, #0
   12a66:	d1d8      	bne.n	12a1a <_usb_d_dev_init+0xaa>
   12a68:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   12a6c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12a70:	4303      	orrs	r3, r0
   12a72:	430b      	orrs	r3, r1
   12a74:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   12a76:	78d3      	ldrb	r3, [r2, #3]
   12a78:	f043 0303 	orr.w	r3, r3, #3
   12a7c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   12a7e:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12a80:	2104      	movs	r1, #4
   12a82:	f043 030c 	orr.w	r3, r3, #12
   12a86:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12a88:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12a8a:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12a8c:	7898      	ldrb	r0, [r3, #2]
   12a8e:	f010 0003 	ands.w	r0, r0, #3
   12a92:	d1fb      	bne.n	12a8c <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   12a94:	4a04      	ldr	r2, [pc, #16]	; (12aa8 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   12a96:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   12a98:	2201      	movs	r2, #1
   12a9a:	811a      	strh	r2, [r3, #8]
}
   12a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12aa0:	20001ffc 	.word	0x20001ffc
   12aa4:	00011f3d 	.word	0x00011f3d
   12aa8:	2000222c 	.word	0x2000222c
   12aac:	00800084 	.word	0x00800084

00012ab0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   12ab0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ab4:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   12ab6:	079b      	lsls	r3, r3, #30
   12ab8:	d124      	bne.n	12b04 <_usb_d_dev_enable+0x54>
{
   12aba:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12abc:	7893      	ldrb	r3, [r2, #2]
   12abe:	0798      	lsls	r0, r3, #30
   12ac0:	d1fc      	bne.n	12abc <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   12ac2:	7813      	ldrb	r3, [r2, #0]
   12ac4:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   12ac6:	0799      	lsls	r1, r3, #30
   12ac8:	d407      	bmi.n	12ada <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   12aca:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12ace:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12ad0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ad4:	7893      	ldrb	r3, [r2, #2]
   12ad6:	079b      	lsls	r3, r3, #30
   12ad8:	d1fc      	bne.n	12ad4 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12ada:	4b0c      	ldr	r3, [pc, #48]	; (12b0c <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12adc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ae0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12ae4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12ae8:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   12aec:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12af0:	f240 218d 	movw	r1, #653	; 0x28d
   12af4:	6098      	str	r0, [r3, #8]
   12af6:	609e      	str	r6, [r3, #8]
   12af8:	609d      	str	r5, [r3, #8]
   12afa:	609c      	str	r4, [r3, #8]
   12afc:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   12afe:	2000      	movs	r0, #0
}
   12b00:	bc70      	pop	{r4, r5, r6}
   12b02:	4770      	bx	lr
		return -USB_ERR_DENIED;
   12b04:	f06f 0010 	mvn.w	r0, #16
   12b08:	4770      	bx	lr
   12b0a:	bf00      	nop
   12b0c:	e000e100 	.word	0xe000e100

00012b10 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12b10:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b14:	8913      	ldrh	r3, [r2, #8]
   12b16:	f023 0301 	bic.w	r3, r3, #1
   12b1a:	041b      	lsls	r3, r3, #16
   12b1c:	0c1b      	lsrs	r3, r3, #16
   12b1e:	8113      	strh	r3, [r2, #8]
   12b20:	4770      	bx	lr
   12b22:	bf00      	nop

00012b24 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   12b24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12b28:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   12b2c:	7298      	strb	r0, [r3, #10]
   12b2e:	4770      	bx	lr

00012b30 <_usb_d_dev_ep_init>:
{
   12b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12b34:	f010 050f 	ands.w	r5, r0, #15
   12b38:	fa4f fc80 	sxtb.w	ip, r0
   12b3c:	d02a      	beq.n	12b94 <_usb_d_dev_ep_init+0x64>
   12b3e:	f1bc 0f00 	cmp.w	ip, #0
   12b42:	bfb4      	ite	lt
   12b44:	1cab      	addlt	r3, r5, #2
   12b46:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12b48:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12b4a:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   12b4e:	d859      	bhi.n	12c04 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12b50:	009c      	lsls	r4, r3, #2
   12b52:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 12c0c <_usb_d_dev_ep_init+0xdc>
   12b56:	18e6      	adds	r6, r4, r3
   12b58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12b5c:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12b60:	2eff      	cmp	r6, #255	; 0xff
   12b62:	d14b      	bne.n	12bfc <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   12b64:	b1d1      	cbz	r1, 12b9c <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12b66:	f1bc 0f00 	cmp.w	ip, #0
   12b6a:	db3a      	blt.n	12be2 <_usb_d_dev_ep_init+0xb2>
   12b6c:	006f      	lsls	r7, r5, #1
   12b6e:	197e      	adds	r6, r7, r5
   12b70:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12c10 <_usb_d_dev_ep_init+0xe0>
   12b74:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12b78:	bb4e      	cbnz	r6, 12bce <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12b7a:	4423      	add	r3, r4
   12b7c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   12b80:	3101      	adds	r1, #1
   12b82:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   12b86:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12b8a:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   12b8c:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   12b8e:	2000      	movs	r0, #0
   12b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12b94:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   12b98:	462b      	mov	r3, r5
   12b9a:	e7d9      	b.n	12b50 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12b9c:	b125      	cbz	r5, 12ba8 <_usb_d_dev_ep_init+0x78>
   12b9e:	f1bc 0f00 	cmp.w	ip, #0
   12ba2:	db01      	blt.n	12ba8 <_usb_d_dev_ep_init+0x78>
   12ba4:	1cae      	adds	r6, r5, #2
   12ba6:	e000      	b.n	12baa <_usb_d_dev_ep_init+0x7a>
   12ba8:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   12baa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   12bae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12bb2:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12bb6:	2eff      	cmp	r6, #255	; 0xff
   12bb8:	d120      	bne.n	12bfc <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   12bba:	006f      	lsls	r7, r5, #1
   12bbc:	197e      	adds	r6, r7, r5
   12bbe:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12c10 <_usb_d_dev_ep_init+0xe0>
   12bc2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12bc6:	b146      	cbz	r6, 12bda <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12bc8:	f1bc 0f00 	cmp.w	ip, #0
   12bcc:	db0c      	blt.n	12be8 <_usb_d_dev_ep_init+0xb8>
   12bce:	443d      	add	r5, r7
   12bd0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12bd4:	892d      	ldrh	r5, [r5, #8]
   12bd6:	4295      	cmp	r5, r2
   12bd8:	dacf      	bge.n	12b7a <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   12bda:	f06f 0012 	mvn.w	r0, #18
   12bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12be2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12c10 <_usb_d_dev_ep_init+0xe0>
   12be6:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12be8:	442f      	add	r7, r5
   12bea:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   12bee:	687d      	ldr	r5, [r7, #4]
   12bf0:	b115      	cbz	r5, 12bf8 <_usb_d_dev_ep_init+0xc8>
   12bf2:	897e      	ldrh	r6, [r7, #10]
   12bf4:	4296      	cmp	r6, r2
   12bf6:	dbf0      	blt.n	12bda <_usb_d_dev_ep_init+0xaa>
   12bf8:	462e      	mov	r6, r5
   12bfa:	e7be      	b.n	12b7a <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   12bfc:	f06f 0013 	mvn.w	r0, #19
   12c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   12c04:	f06f 0011 	mvn.w	r0, #17
   12c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c0c:	20001ffc 	.word	0x20001ffc
   12c10:	0002373c 	.word	0x0002373c

00012c14 <_usb_d_dev_ep_deinit>:
{
   12c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12c18:	f010 070f 	ands.w	r7, r0, #15
{
   12c1c:	b082      	sub	sp, #8
   12c1e:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12c22:	d009      	beq.n	12c38 <_usb_d_dev_ep_deinit+0x24>
   12c24:	f1b9 0f00 	cmp.w	r9, #0
   12c28:	bfb4      	ite	lt
   12c2a:	1cbe      	addlt	r6, r7, #2
   12c2c:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12c2e:	2f02      	cmp	r7, #2
   12c30:	d903      	bls.n	12c3a <_usb_d_dev_ep_deinit+0x26>
}
   12c32:	b002      	add	sp, #8
   12c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12c38:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12c3a:	ea4f 0886 	mov.w	r8, r6, lsl #2
   12c3e:	4d3d      	ldr	r5, [pc, #244]	; (12d34 <_usb_d_dev_ep_deinit+0x120>)
   12c40:	eb08 0306 	add.w	r3, r8, r6
   12c44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12c48:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   12c4c:	29ff      	cmp	r1, #255	; 0xff
   12c4e:	d0f0      	beq.n	12c32 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12c50:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12c54:	224a      	movs	r2, #74	; 0x4a
   12c56:	4604      	mov	r4, r0
   12c58:	f88d 2005 	strb.w	r2, [sp, #5]
   12c5c:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12c5e:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12c60:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12c64:	d41b      	bmi.n	12c9e <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12c66:	f003 0307 	and.w	r3, r3, #7
   12c6a:	2b01      	cmp	r3, #1
   12c6c:	d050      	beq.n	12d10 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   12c6e:	f1b9 0f00 	cmp.w	r9, #0
   12c72:	db54      	blt.n	12d1e <_usb_d_dev_ep_deinit+0x10a>
   12c74:	0160      	lsls	r0, r4, #5
   12c76:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   12c7a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   12c7e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12c82:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12c86:	4446      	add	r6, r8
   12c88:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   12c8c:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   12c8e:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12c90:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12c94:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12c98:	b002      	add	sp, #8
   12c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c9e:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ca2:	f103 0208 	add.w	r2, r3, #8
   12ca6:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12ca8:	f1b9 0f00 	cmp.w	r9, #0
   12cac:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12cb0:	bfb5      	itete	lt
   12cb2:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12cb6:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12cba:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12cbe:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12cc2:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12cc6:	0150      	lsls	r0, r2, #5
   12cc8:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12ccc:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12cce:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12cd2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12cd6:	eb08 0306 	add.w	r3, r8, r6
   12cda:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12cde:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12ce2:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12ce6:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12cea:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12cee:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12cf0:	f103 0a20 	add.w	sl, r3, #32
   12cf4:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12cf8:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   12cfa:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12cfe:	4608      	mov	r0, r1
   12d00:	2103      	movs	r1, #3
   12d02:	4798      	blx	r3
   12d04:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12d08:	f003 0307 	and.w	r3, r3, #7
   12d0c:	2b01      	cmp	r3, #1
   12d0e:	d1ae      	bne.n	12c6e <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12d10:	0160      	lsls	r0, r4, #5
   12d12:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12d16:	2300      	movs	r3, #0
   12d18:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   12d1c:	e7b3      	b.n	12c86 <_usb_d_dev_ep_deinit+0x72>
   12d1e:	017f      	lsls	r7, r7, #5
   12d20:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12d24:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12d28:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12d2c:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12d30:	e7a9      	b.n	12c86 <_usb_d_dev_ep_deinit+0x72>
   12d32:	bf00      	nop
   12d34:	20001ffc 	.word	0x20001ffc

00012d38 <_usb_d_dev_ep_enable>:
{
   12d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d3a:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12d3c:	f010 000f 	ands.w	r0, r0, #15
   12d40:	d045      	beq.n	12dce <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12d42:	0142      	lsls	r2, r0, #5
   12d44:	2e00      	cmp	r6, #0
   12d46:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12d4a:	bfb4      	ite	lt
   12d4c:	1c83      	addlt	r3, r0, #2
   12d4e:	4603      	movge	r3, r0
   12d50:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12d54:	4a84      	ldr	r2, [pc, #528]	; (12f68 <_usb_d_dev_ep_enable+0x230>)
   12d56:	1c59      	adds	r1, r3, #1
   12d58:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12d5c:	2802      	cmp	r0, #2
   12d5e:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12d60:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12d64:	f200 809f 	bhi.w	12ea6 <_usb_d_dev_ep_enable+0x16e>
   12d68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12d6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12d70:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12d74:	2aff      	cmp	r2, #255	; 0xff
   12d76:	f000 8096 	beq.w	12ea6 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12d7a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12d7e:	4d7b      	ldr	r5, [pc, #492]	; (12f6c <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12d80:	f002 0e07 	and.w	lr, r2, #7
   12d84:	0140      	lsls	r0, r0, #5
   12d86:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12d8a:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12d8e:	d028      	beq.n	12de2 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12d90:	2e00      	cmp	r6, #0
   12d92:	db65      	blt.n	12e60 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12d94:	0761      	lsls	r1, r4, #29
   12d96:	f040 80a4 	bne.w	12ee2 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12d9a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12d9c:	4b74      	ldr	r3, [pc, #464]	; (12f70 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12d9e:	f002 0207 	and.w	r2, r2, #7
   12da2:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12da6:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12da8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12dac:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12db0:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12db4:	d97a      	bls.n	12eac <_usb_d_dev_ep_enable+0x174>
   12db6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12dba:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12dbc:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12dbe:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12dc0:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12dc2:	607a      	str	r2, [r7, #4]
   12dc4:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12dc8:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12dca:	4608      	mov	r0, r1
   12dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12dce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12dd2:	4968      	ldr	r1, [pc, #416]	; (12f74 <_usb_d_dev_ep_enable+0x23c>)
   12dd4:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12dd8:	f1a1 0214 	sub.w	r2, r1, #20
   12ddc:	b2e4      	uxtb	r4, r4
   12dde:	4603      	mov	r3, r0
   12de0:	e7c2      	b.n	12d68 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12de2:	f014 0f77 	tst.w	r4, #119	; 0x77
   12de6:	d17c      	bne.n	12ee2 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12de8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12dea:	4a61      	ldr	r2, [pc, #388]	; (12f70 <_usb_d_dev_ep_enable+0x238>)
   12dec:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12df0:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12df6:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12dfa:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12dfe:	d94c      	bls.n	12e9a <_usb_d_dev_ep_enable+0x162>
   12e00:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e04:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12e08:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e0a:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e0c:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12e10:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e12:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e14:	617b      	str	r3, [r7, #20]
   12e16:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e1a:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e1e:	7c8a      	ldrb	r2, [r1, #18]
   12e20:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12e22:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e26:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12e2a:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12e2c:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12e2e:	2000      	movs	r0, #0
   12e30:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12e32:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12e34:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12e36:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12e3a:	6873      	ldr	r3, [r6, #4]
   12e3c:	f367 339b 	bfi	r3, r7, #14, #14
   12e40:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12e42:	6872      	ldr	r2, [r6, #4]
   12e44:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12e48:	f360 020d 	bfi	r2, r0, #0, #14
   12e4c:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12e4e:	2510      	movs	r5, #16
   12e50:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e52:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12e56:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12e5a:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12e60:	f014 0f70 	tst.w	r4, #112	; 0x70
   12e64:	d13d      	bne.n	12ee2 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12e68:	0112      	lsls	r2, r2, #4
   12e6a:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12e6e:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12e72:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12e78:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e7c:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e80:	d91a      	bls.n	12eb8 <_usb_d_dev_ep_enable+0x180>
   12e82:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12e86:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e88:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e8a:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12e8c:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e8e:	617a      	str	r2, [r7, #20]
   12e90:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12e94:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12e96:	4608      	mov	r0, r1
   12e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12e9e:	d923      	bls.n	12ee8 <_usb_d_dev_ep_enable+0x1b0>
   12ea0:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12ea4:	e7ae      	b.n	12e04 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12ea6:	f06f 0011 	mvn.w	r0, #17
   12eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12eac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12eb0:	d908      	bls.n	12ec4 <_usb_d_dev_ep_enable+0x18c>
   12eb2:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12eb6:	e780      	b.n	12dba <_usb_d_dev_ep_enable+0x82>
   12eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12ebc:	d907      	bls.n	12ece <_usb_d_dev_ep_enable+0x196>
   12ebe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12ec2:	e7e0      	b.n	12e86 <_usb_d_dev_ep_enable+0x14e>
   12ec4:	2980      	cmp	r1, #128	; 0x80
   12ec6:	d907      	bls.n	12ed8 <_usb_d_dev_ep_enable+0x1a0>
   12ec8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12ecc:	e775      	b.n	12dba <_usb_d_dev_ep_enable+0x82>
   12ece:	2b80      	cmp	r3, #128	; 0x80
   12ed0:	d914      	bls.n	12efc <_usb_d_dev_ep_enable+0x1c4>
   12ed2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12ed6:	e7d6      	b.n	12e86 <_usb_d_dev_ep_enable+0x14e>
   12ed8:	2940      	cmp	r1, #64	; 0x40
   12eda:	d914      	bls.n	12f06 <_usb_d_dev_ep_enable+0x1ce>
   12edc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12ee0:	e76b      	b.n	12dba <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12ee2:	f06f 0013 	mvn.w	r0, #19
   12ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12ee8:	2b80      	cmp	r3, #128	; 0x80
   12eea:	d902      	bls.n	12ef2 <_usb_d_dev_ep_enable+0x1ba>
   12eec:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12ef0:	e788      	b.n	12e04 <_usb_d_dev_ep_enable+0xcc>
   12ef2:	2b40      	cmp	r3, #64	; 0x40
   12ef4:	d90c      	bls.n	12f10 <_usb_d_dev_ep_enable+0x1d8>
   12ef6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12efa:	e783      	b.n	12e04 <_usb_d_dev_ep_enable+0xcc>
   12efc:	2b40      	cmp	r3, #64	; 0x40
   12efe:	d90c      	bls.n	12f1a <_usb_d_dev_ep_enable+0x1e2>
   12f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12f04:	e7bf      	b.n	12e86 <_usb_d_dev_ep_enable+0x14e>
   12f06:	2920      	cmp	r1, #32
   12f08:	d90c      	bls.n	12f24 <_usb_d_dev_ep_enable+0x1ec>
   12f0a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12f0e:	e754      	b.n	12dba <_usb_d_dev_ep_enable+0x82>
   12f10:	2b20      	cmp	r3, #32
   12f12:	d90c      	bls.n	12f2e <_usb_d_dev_ep_enable+0x1f6>
   12f14:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12f18:	e774      	b.n	12e04 <_usb_d_dev_ep_enable+0xcc>
   12f1a:	2b20      	cmp	r3, #32
   12f1c:	d90c      	bls.n	12f38 <_usb_d_dev_ep_enable+0x200>
   12f1e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12f22:	e7b0      	b.n	12e86 <_usb_d_dev_ep_enable+0x14e>
   12f24:	2910      	cmp	r1, #16
   12f26:	d90c      	bls.n	12f42 <_usb_d_dev_ep_enable+0x20a>
   12f28:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12f2c:	e745      	b.n	12dba <_usb_d_dev_ep_enable+0x82>
   12f2e:	2b10      	cmp	r3, #16
   12f30:	d90d      	bls.n	12f4e <_usb_d_dev_ep_enable+0x216>
   12f32:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12f36:	e765      	b.n	12e04 <_usb_d_dev_ep_enable+0xcc>
   12f38:	2b10      	cmp	r3, #16
   12f3a:	d90e      	bls.n	12f5a <_usb_d_dev_ep_enable+0x222>
   12f3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12f40:	e7a1      	b.n	12e86 <_usb_d_dev_ep_enable+0x14e>
   12f42:	2908      	cmp	r1, #8
   12f44:	bf94      	ite	ls
   12f46:	2100      	movls	r1, #0
   12f48:	2101      	movhi	r1, #1
   12f4a:	0709      	lsls	r1, r1, #28
   12f4c:	e735      	b.n	12dba <_usb_d_dev_ep_enable+0x82>
   12f4e:	2b08      	cmp	r3, #8
   12f50:	bf94      	ite	ls
   12f52:	2400      	movls	r4, #0
   12f54:	2401      	movhi	r4, #1
   12f56:	0724      	lsls	r4, r4, #28
   12f58:	e754      	b.n	12e04 <_usb_d_dev_ep_enable+0xcc>
   12f5a:	2b08      	cmp	r3, #8
   12f5c:	bf94      	ite	ls
   12f5e:	2300      	movls	r3, #0
   12f60:	2301      	movhi	r3, #1
   12f62:	071a      	lsls	r2, r3, #28
   12f64:	e78f      	b.n	12e86 <_usb_d_dev_ep_enable+0x14e>
   12f66:	bf00      	nop
   12f68:	20001ffc 	.word	0x20001ffc
   12f6c:	2000222c 	.word	0x2000222c
   12f70:	0fffc000 	.word	0x0fffc000
   12f74:	20002010 	.word	0x20002010

00012f78 <_usb_d_dev_ep_stall>:
{
   12f78:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f7a:	f010 000f 	ands.w	r0, r0, #15
{
   12f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12f80:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f84:	d01e      	beq.n	12fc4 <_usb_d_dev_ep_stall+0x4c>
   12f86:	2b00      	cmp	r3, #0
   12f88:	bfb4      	ite	lt
   12f8a:	1c83      	addlt	r3, r0, #2
   12f8c:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12f8e:	1c5c      	adds	r4, r3, #1
   12f90:	4a40      	ldr	r2, [pc, #256]	; (13094 <_usb_d_dev_ep_stall+0x11c>)
   12f92:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12f96:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12f98:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12f9c:	d86d      	bhi.n	1307a <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12f9e:	2901      	cmp	r1, #1
   12fa0:	d014      	beq.n	12fcc <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12fa2:	b389      	cbz	r1, 13008 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12fa4:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12fa6:	f003 030f 	and.w	r3, r3, #15
   12faa:	015b      	lsls	r3, r3, #5
   12fac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12fb0:	2210      	movs	r2, #16
   12fb2:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12fb6:	fa02 f305 	lsl.w	r3, r2, r5
   12fba:	420b      	tst	r3, r1
   12fbc:	bf14      	ite	ne
   12fbe:	2001      	movne	r0, #1
   12fc0:	2000      	moveq	r0, #0
   12fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12fc4:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12fc6:	4a34      	ldr	r2, [pc, #208]	; (13098 <_usb_d_dev_ep_stall+0x120>)
   12fc8:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12fca:	d1ea      	bne.n	12fa2 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12fcc:	4931      	ldr	r1, [pc, #196]	; (13094 <_usb_d_dev_ep_stall+0x11c>)
   12fce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12fd2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12fd6:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12fd8:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12fdc:	f002 020f 	and.w	r2, r2, #15
   12fe0:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12fe2:	2320      	movs	r3, #32
   12fe4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12fe8:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12fea:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12fec:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12fee:	b2db      	uxtb	r3, r3
   12ff0:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12ff4:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12ff8:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12ffc:	f043 0308 	orr.w	r3, r3, #8
   13000:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   13004:	2000      	movs	r0, #0
   13006:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   13008:	009e      	lsls	r6, r3, #2
   1300a:	4c22      	ldr	r4, [pc, #136]	; (13094 <_usb_d_dev_ep_stall+0x11c>)
   1300c:	18f2      	adds	r2, r6, r3
   1300e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13012:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   13014:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   13018:	f002 020f 	and.w	r2, r2, #15
   1301c:	0151      	lsls	r1, r2, #5
   1301e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13022:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13024:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   13028:	4207      	tst	r7, r0
   1302a:	d01b      	beq.n	13064 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1302c:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   1302e:	2720      	movs	r7, #32
   13030:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13034:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13036:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   13038:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1303c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13040:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   13044:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   13048:	423a      	tst	r2, r7
   1304a:	d10d      	bne.n	13068 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   1304c:	4433      	add	r3, r6
   1304e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   13052:	3420      	adds	r4, #32
   13054:	79e3      	ldrb	r3, [r4, #7]
   13056:	f003 0207 	and.w	r2, r3, #7
   1305a:	2a01      	cmp	r2, #1
   1305c:	d010      	beq.n	13080 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   1305e:	f36f 03c3 	bfc	r3, #3, #1
   13062:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   13064:	2000      	movs	r0, #0
   13066:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   13068:	2201      	movs	r2, #1
   1306a:	fa02 f505 	lsl.w	r5, r2, r5
   1306e:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13070:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13074:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   13078:	e7e8      	b.n	1304c <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   1307a:	f06f 0011 	mvn.w	r0, #17
}
   1307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13080:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   13084:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   13088:	d1ec      	bne.n	13064 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   1308a:	f360 03c3 	bfi	r3, r0, #3, #1
   1308e:	71e3      	strb	r3, [r4, #7]
   13090:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13092:	bf00      	nop
   13094:	20001ffc 	.word	0x20001ffc
   13098:	20002010 	.word	0x20002010

0001309c <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   1309c:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   1309e:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   130a2:	4a12      	ldr	r2, [pc, #72]	; (130ec <_usb_d_dev_ep_read_req+0x50>)
   130a4:	0143      	lsls	r3, r0, #5
   130a6:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   130a8:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   130aa:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   130ac:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   130ae:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   130b2:	d818      	bhi.n	130e6 <_usb_d_dev_ep_read_req+0x4a>
   130b4:	b1b9      	cbz	r1, 130e6 <_usb_d_dev_ep_read_req+0x4a>
   130b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   130ba:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   130be:	2a11      	cmp	r2, #17
   130c0:	d10e      	bne.n	130e0 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   130c2:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   130c6:	f012 0010 	ands.w	r0, r2, #16
   130ca:	d007      	beq.n	130dc <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   130cc:	686a      	ldr	r2, [r5, #4]
   130ce:	682e      	ldr	r6, [r5, #0]
   130d0:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   130d2:	2210      	movs	r2, #16
   130d4:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   130d6:	4620      	mov	r0, r4
   130d8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   130dc:	bc70      	pop	{r4, r5, r6}
   130de:	4770      	bx	lr
		return -USB_ERR_FUNC;
   130e0:	f06f 0012 	mvn.w	r0, #18
   130e4:	e7fa      	b.n	130dc <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   130e6:	f06f 0011 	mvn.w	r0, #17
   130ea:	e7f7      	b.n	130dc <_usb_d_dev_ep_read_req+0x40>
   130ec:	2000222c 	.word	0x2000222c

000130f0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   130f4:	7a03      	ldrb	r3, [r0, #8]
   130f6:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   130fa:	f013 030f 	ands.w	r3, r3, #15
{
   130fe:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13100:	d03a      	beq.n	13178 <_usb_d_dev_ep_trans+0x88>
   13102:	f1b9 0f00 	cmp.w	r9, #0
   13106:	bfb4      	ite	lt
   13108:	1c9d      	addlt	r5, r3, #2
   1310a:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   1310c:	4e5d      	ldr	r6, [pc, #372]	; (13284 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1310e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   13112:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   13116:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1311a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   1311c:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   13120:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   13124:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   13126:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1312a:	d050      	beq.n	131ce <_usb_d_dev_ep_trans+0xde>
   1312c:	1e57      	subs	r7, r2, #1
   1312e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   13130:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   13132:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   13134:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   13138:	f200 8091 	bhi.w	1325e <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   1313c:	6803      	ldr	r3, [r0, #0]
   1313e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   13142:	d223      	bcs.n	1318c <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   13144:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13148:	eb0b 0305 	add.w	r3, fp, r5
   1314c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   13150:	6a1b      	ldr	r3, [r3, #32]
   13152:	2b00      	cmp	r3, #0
   13154:	f000 8092 	beq.w	1327c <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   13158:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   1315c:	eb0b 0405 	add.w	r4, fp, r5
   13160:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   13164:	f104 0220 	add.w	r2, r4, #32
   13168:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1316c:	071b      	lsls	r3, r3, #28
   1316e:	d530      	bpl.n	131d2 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   13170:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   13172:	b007      	add	sp, #28
   13174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   13178:	4e42      	ldr	r6, [pc, #264]	; (13284 <_usb_d_dev_ep_trans+0x194>)
   1317a:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   1317c:	f240 31ff 	movw	r1, #1023	; 0x3ff
   13180:	428a      	cmp	r2, r1
   13182:	d01d      	beq.n	131c0 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   13184:	f106 0814 	add.w	r8, r6, #20
   13188:	461d      	mov	r5, r3
   1318a:	e7cf      	b.n	1312c <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   1318c:	4c3e      	ldr	r4, [pc, #248]	; (13288 <_usb_d_dev_ep_trans+0x198>)
   1318e:	eb03 0e01 	add.w	lr, r3, r1
   13192:	45a6      	cmp	lr, r4
   13194:	d8d6      	bhi.n	13144 <_usb_d_dev_ep_trans+0x54>
   13196:	f013 0303 	ands.w	r3, r3, #3
   1319a:	d1d3      	bne.n	13144 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   1319c:	f1b9 0f00 	cmp.w	r9, #0
   131a0:	db60      	blt.n	13264 <_usb_d_dev_ep_trans+0x174>
   131a2:	428a      	cmp	r2, r1
   131a4:	d8ce      	bhi.n	13144 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   131a6:	2f00      	cmp	r7, #0
   131a8:	d060      	beq.n	1326c <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   131aa:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   131ae:	eb0b 0205 	add.w	r2, fp, r5
   131b2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   131b6:	6a12      	ldr	r2, [r2, #32]
   131b8:	2a00      	cmp	r2, #0
   131ba:	d050      	beq.n	1325e <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   131bc:	469a      	mov	sl, r3
   131be:	e7cd      	b.n	1315c <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   131c0:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   131c2:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   131c4:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   131c8:	f106 0814 	add.w	r8, r6, #20
   131cc:	e7b6      	b.n	1313c <_usb_d_dev_ep_trans+0x4c>
   131ce:	4617      	mov	r7, r2
   131d0:	e7ae      	b.n	13130 <_usb_d_dev_ep_trans+0x40>
   131d2:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   131d4:	a805      	add	r0, sp, #20
   131d6:	9202      	str	r2, [sp, #8]
   131d8:	f000 f8e0 	bl	1339c <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   131dc:	9a02      	ldr	r2, [sp, #8]
   131de:	9b01      	ldr	r3, [sp, #4]
   131e0:	79d0      	ldrb	r0, [r2, #7]
   131e2:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   131e6:	d131      	bne.n	1324c <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   131e8:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   131ec:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   131f0:	a805      	add	r0, sp, #20
   131f2:	9303      	str	r3, [sp, #12]
   131f4:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   131f6:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   131f8:	f000 f8d8 	bl	133ac <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   131fc:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   131fe:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   13200:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   13202:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   13206:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   13208:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   1320c:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   13210:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   13214:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   13216:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   13218:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   1321a:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   1321e:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13220:	7a5b      	ldrb	r3, [r3, #9]
   13222:	b9c3      	cbnz	r3, 13256 <_usb_d_dev_ep_trans+0x166>
   13224:	461f      	mov	r7, r3
   13226:	445d      	add	r5, fp
   13228:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   1322c:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13230:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   13234:	f367 1304 	bfi	r3, r7, #4, #1
   13238:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   1323c:	4640      	mov	r0, r8
   1323e:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   13242:	db17      	blt.n	13274 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   13244:	f7fe ff36 	bl	120b4 <_usb_d_dev_out_next>
	return ERR_NONE;
   13248:	2000      	movs	r0, #0
   1324a:	e792      	b.n	13172 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   1324c:	a805      	add	r0, sp, #20
   1324e:	f000 f8ad 	bl	133ac <atomic_leave_critical>
		return USB_BUSY;
   13252:	2001      	movs	r0, #1
   13254:	e78d      	b.n	13172 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13256:	fab7 f787 	clz	r7, r7
   1325a:	097f      	lsrs	r7, r7, #5
   1325c:	e7e3      	b.n	13226 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   1325e:	f06f 0011 	mvn.w	r0, #17
   13262:	e786      	b.n	13172 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   13264:	469a      	mov	sl, r3
   13266:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   1326a:	e777      	b.n	1315c <_usb_d_dev_ep_trans+0x6c>
   1326c:	46ba      	mov	sl, r7
   1326e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13272:	e773      	b.n	1315c <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   13274:	f7fe fe64 	bl	11f40 <_usb_d_dev_in_next>
	return ERR_NONE;
   13278:	2000      	movs	r0, #0
   1327a:	e77a      	b.n	13172 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   1327c:	f06f 0012 	mvn.w	r0, #18
   13280:	e777      	b.n	13172 <_usb_d_dev_ep_trans+0x82>
   13282:	bf00      	nop
   13284:	20001ffc 	.word	0x20001ffc
   13288:	20031fff 	.word	0x20031fff

0001328c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   1328c:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1328e:	f010 000f 	ands.w	r0, r0, #15
   13292:	d117      	bne.n	132c4 <_usb_d_dev_ep_abort+0x38>
{
   13294:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13296:	0081      	lsls	r1, r0, #2
   13298:	4d27      	ldr	r5, [pc, #156]	; (13338 <_usb_d_dev_ep_abort+0xac>)
   1329a:	180a      	adds	r2, r1, r0
   1329c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   132a0:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   132a2:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   132a6:	2625      	movs	r6, #37	; 0x25
   132a8:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   132ac:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   132ae:	f04f 064a 	mov.w	r6, #74	; 0x4a
   132b2:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   132b6:	d003      	beq.n	132c0 <_usb_d_dev_ep_abort+0x34>
   132b8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   132bc:	0652      	lsls	r2, r2, #25
   132be:	d408      	bmi.n	132d2 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   132c0:	b003      	add	sp, #12
   132c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   132c4:	2b00      	cmp	r3, #0
   132c6:	bfb4      	ite	lt
   132c8:	1c82      	addlt	r2, r0, #2
   132ca:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   132cc:	2802      	cmp	r0, #2
   132ce:	d931      	bls.n	13334 <_usb_d_dev_ep_abort+0xa8>
   132d0:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   132d2:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   132d6:	f102 0608 	add.w	r6, r2, #8
   132da:	0177      	lsls	r7, r6, #5
	if (dir) {
   132dc:	2b00      	cmp	r3, #0
   132de:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   132e2:	bfb5      	itete	lt
   132e4:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   132e8:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   132ec:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   132f0:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   132f4:	af02      	add	r7, sp, #8
   132f6:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   132fa:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   132fc:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   132fe:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13300:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13304:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13308:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   1330c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13310:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13312:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   13316:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1331a:	692d      	ldr	r5, [r5, #16]
   1331c:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   1331e:	f36f 1686 	bfc	r6, #6, #1
   13322:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13326:	4620      	mov	r0, r4
   13328:	2102      	movs	r1, #2
   1332a:	462b      	mov	r3, r5
}
   1332c:	b003      	add	sp, #12
   1332e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13332:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   13334:	4610      	mov	r0, r2
   13336:	e7ad      	b.n	13294 <_usb_d_dev_ep_abort+0x8>
   13338:	20001ffc 	.word	0x20001ffc

0001333c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   1333c:	4b06      	ldr	r3, [pc, #24]	; (13358 <_usb_d_dev_register_callback+0x1c>)
   1333e:	2900      	cmp	r1, #0
   13340:	bf08      	it	eq
   13342:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   13344:	2801      	cmp	r0, #1
   13346:	d003      	beq.n	13350 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   13348:	b908      	cbnz	r0, 1334e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   1334a:	4b04      	ldr	r3, [pc, #16]	; (1335c <_usb_d_dev_register_callback+0x20>)
   1334c:	6019      	str	r1, [r3, #0]
   1334e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   13350:	4b02      	ldr	r3, [pc, #8]	; (1335c <_usb_d_dev_register_callback+0x20>)
   13352:	6059      	str	r1, [r3, #4]
   13354:	4770      	bx	lr
   13356:	bf00      	nop
   13358:	00011f3d 	.word	0x00011f3d
   1335c:	20001ffc 	.word	0x20001ffc

00013360 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13360:	4b08      	ldr	r3, [pc, #32]	; (13384 <_usb_d_dev_register_ep_callback+0x24>)
   13362:	2900      	cmp	r1, #0
   13364:	bf08      	it	eq
   13366:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   13368:	b130      	cbz	r0, 13378 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   1336a:	2801      	cmp	r0, #1
   1336c:	d007      	beq.n	1337e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   1336e:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   13370:	bf04      	itt	eq
   13372:	4b05      	ldreq	r3, [pc, #20]	; (13388 <_usb_d_dev_register_ep_callback+0x28>)
   13374:	6119      	streq	r1, [r3, #16]
   13376:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   13378:	4b03      	ldr	r3, [pc, #12]	; (13388 <_usb_d_dev_register_ep_callback+0x28>)
   1337a:	6099      	str	r1, [r3, #8]
   1337c:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   1337e:	4b02      	ldr	r3, [pc, #8]	; (13388 <_usb_d_dev_register_ep_callback+0x28>)
   13380:	60d9      	str	r1, [r3, #12]
   13382:	4770      	bx	lr
   13384:	00011f3d 	.word	0x00011f3d
   13388:	20001ffc 	.word	0x20001ffc

0001338c <USB_0_Handler>:
   1338c:	f7fe bf8e 	b.w	122ac <_usb_d_dev_handler>

00013390 <USB_1_Handler>:
   13390:	f7fe bf8c 	b.w	122ac <_usb_d_dev_handler>

00013394 <USB_2_Handler>:
   13394:	f7fe bf8a 	b.w	122ac <_usb_d_dev_handler>

00013398 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   13398:	f7fe bf88 	b.w	122ac <_usb_d_dev_handler>

0001339c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1339c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   133a0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   133a2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   133a4:	f3bf 8f5f 	dmb	sy
   133a8:	4770      	bx	lr
   133aa:	bf00      	nop

000133ac <atomic_leave_critical>:
   133ac:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   133b0:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   133b2:	f383 8810 	msr	PRIMASK, r3
   133b6:	4770      	bx	lr

000133b8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   133b8:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   133ba:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   133bc:	2b08      	cmp	r3, #8
   133be:	d810      	bhi.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   133c0:	e8df f003 	tbb	[pc, r3]
   133c4:	604d3b25 	.word	0x604d3b25
   133c8:	05a18a74 	.word	0x05a18a74
   133cc:	11          	.byte	0x11
   133cd:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   133ce:	8903      	ldrh	r3, [r0, #8]
   133d0:	3b01      	subs	r3, #1
   133d2:	b29b      	uxth	r3, r3
   133d4:	8103      	strh	r3, [r0, #8]
   133d6:	b923      	cbnz	r3, 133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   133d8:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   133da:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   133dc:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   133de:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   133e0:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   133e2:	bc30      	pop	{r4, r5}
   133e4:	4770      	bx	lr
            if (--m_timer) {
   133e6:	8903      	ldrh	r3, [r0, #8]
   133e8:	3b01      	subs	r3, #1
   133ea:	b29b      	uxth	r3, r3
   133ec:	8103      	strh	r3, [r0, #8]
   133ee:	2b00      	cmp	r3, #0
   133f0:	d1f7      	bne.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   133f2:	8981      	ldrh	r1, [r0, #12]
   133f4:	3901      	subs	r1, #1
   133f6:	b289      	uxth	r1, r1
   133f8:	8181      	strh	r1, [r0, #12]
   133fa:	2900      	cmp	r1, #0
   133fc:	f000 80b3 	beq.w	13566 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   13400:	8a43      	ldrh	r3, [r0, #18]
   13402:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   13404:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   13406:	2307      	movs	r3, #7
                m_ledOn = true;
   13408:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   1340a:	7143      	strb	r3, [r0, #5]
                break;
   1340c:	e7e9      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   1340e:	7801      	ldrb	r1, [r0, #0]
   13410:	2900      	cmp	r1, #0
   13412:	f040 8089 	bne.w	13528 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   13416:	7841      	ldrb	r1, [r0, #1]
   13418:	2900      	cmp	r1, #0
   1341a:	f040 80cb 	bne.w	135b4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   1341e:	7883      	ldrb	r3, [r0, #2]
   13420:	2b00      	cmp	r3, #0
   13422:	f040 811a 	bne.w	1365a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   13426:	78c3      	ldrb	r3, [r0, #3]
   13428:	2b00      	cmp	r3, #0
   1342a:	f040 8118 	bne.w	1365e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   1342e:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13430:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   13432:	2b00      	cmp	r3, #0
   13434:	d0d5      	beq.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13436:	5d41      	ldrb	r1, [r0, r5]
   13438:	e077      	b.n	1352a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   1343a:	8903      	ldrh	r3, [r0, #8]
   1343c:	3b01      	subs	r3, #1
   1343e:	b29b      	uxth	r3, r3
   13440:	8103      	strh	r3, [r0, #8]
   13442:	2b00      	cmp	r3, #0
   13444:	d1cd      	bne.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13446:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   13448:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   1344a:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   1344c:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1344e:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   13450:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13452:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   13456:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   13458:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1345a:	8143      	strh	r3, [r0, #10]
            break;
   1345c:	e7c1      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1345e:	8903      	ldrh	r3, [r0, #8]
   13460:	3b01      	subs	r3, #1
   13462:	b29b      	uxth	r3, r3
   13464:	8103      	strh	r3, [r0, #8]
   13466:	2b00      	cmp	r3, #0
   13468:	d1bb      	bne.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   1346a:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1346c:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1346e:	3b01      	subs	r3, #1
   13470:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13472:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13476:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13478:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1347a:	2b00      	cmp	r3, #0
   1347c:	d06d      	beq.n	1355a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   1347e:	8a03      	ldrh	r3, [r0, #16]
   13480:	8103      	strh	r3, [r0, #8]
                break;
   13482:	e7ae      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13484:	8903      	ldrh	r3, [r0, #8]
   13486:	3b01      	subs	r3, #1
   13488:	b29b      	uxth	r3, r3
   1348a:	8103      	strh	r3, [r0, #8]
   1348c:	2b00      	cmp	r3, #0
   1348e:	d1a8      	bne.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   13490:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13492:	8a01      	ldrh	r1, [r0, #16]
   13494:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   13496:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   13498:	3201      	adds	r2, #1
            m_ledOn = true;
   1349a:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   1349c:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1349e:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   134a2:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   134a4:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   134a6:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   134a8:	8143      	strh	r3, [r0, #10]
            break;
   134aa:	e79a      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   134ac:	8903      	ldrh	r3, [r0, #8]
   134ae:	3b01      	subs	r3, #1
   134b0:	b29b      	uxth	r3, r3
   134b2:	8103      	strh	r3, [r0, #8]
   134b4:	2b00      	cmp	r3, #0
   134b6:	d194      	bne.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   134b8:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   134ba:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   134bc:	3b01      	subs	r3, #1
   134be:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   134c0:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   134c4:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   134c6:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   134c8:	2b00      	cmp	r3, #0
   134ca:	d1d8      	bne.n	1347e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   134cc:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   134ce:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   134d0:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   134d2:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   134d4:	7143      	strb	r3, [r0, #5]
            break;
   134d6:	e784      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   134d8:	8903      	ldrh	r3, [r0, #8]
   134da:	3b01      	subs	r3, #1
   134dc:	b29b      	uxth	r3, r3
   134de:	8103      	strh	r3, [r0, #8]
   134e0:	2b00      	cmp	r3, #0
   134e2:	f47f af7e 	bne.w	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   134e6:	8983      	ldrh	r3, [r0, #12]
   134e8:	3b01      	subs	r3, #1
   134ea:	b29b      	uxth	r3, r3
   134ec:	8183      	strh	r3, [r0, #12]
   134ee:	b373      	cbz	r3, 1354e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   134f0:	8a02      	ldrh	r2, [r0, #16]
   134f2:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   134f4:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   134f6:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   134f8:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   134fa:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   134fe:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   13500:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13502:	8143      	strh	r3, [r0, #10]
                break;
   13504:	e76d      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13506:	8903      	ldrh	r3, [r0, #8]
   13508:	3b01      	subs	r3, #1
   1350a:	b29b      	uxth	r3, r3
   1350c:	8103      	strh	r3, [r0, #8]
   1350e:	2b00      	cmp	r3, #0
   13510:	f47f af67 	bne.w	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   13514:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   13516:	8a42      	ldrh	r2, [r0, #18]
   13518:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   1351a:	3301      	adds	r3, #1
            m_ledOn = true;
   1351c:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   1351e:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   13520:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   13522:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   13524:	7142      	strb	r2, [r0, #5]
            break;
   13526:	e75c      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   13528:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   1352a:	f011 0301 	ands.w	r3, r1, #1
   1352e:	d149      	bne.n	135c4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   13530:	3301      	adds	r3, #1
   13532:	b2db      	uxtb	r3, r3
   13534:	fa41 f203 	asr.w	r2, r1, r3
   13538:	07d4      	lsls	r4, r2, #31
   1353a:	d5f9      	bpl.n	13530 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   1353c:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   1353e:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   13540:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   13542:	2201      	movs	r2, #1
    m_currentCode = code;
   13544:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   13546:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   13548:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   1354a:	7142      	strb	r2, [r0, #5]
            break;
   1354c:	e749      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   1354e:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   13550:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   13552:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   13554:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   13556:	7143      	strb	r3, [r0, #5]
            break;
   13558:	e743      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   1355a:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   1355c:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   1355e:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   13560:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   13562:	7143      	strb	r3, [r0, #5]
            break;
   13564:	e73d      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   13566:	7983      	ldrb	r3, [r0, #6]
   13568:	79c2      	ldrb	r2, [r0, #7]
   1356a:	3301      	adds	r3, #1
   1356c:	b2db      	uxtb	r3, r3
    if (code > 7) {
   1356e:	2b07      	cmp	r3, #7
        group++;
   13570:	bf85      	ittet	hi
   13572:	3201      	addhi	r2, #1
   13574:	b2d2      	uxtbhi	r2, r2
   13576:	4619      	movls	r1, r3
        code = 0;
   13578:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   1357a:	2a04      	cmp	r2, #4
   1357c:	4615      	mov	r5, r2
   1357e:	dd1b      	ble.n	135b8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   13580:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   13582:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   13584:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   13588:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   1358a:	d01d      	beq.n	135c8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   1358c:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   1358e:	07e9      	lsls	r1, r5, #31
   13590:	d452      	bmi.n	13638 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   13592:	2501      	movs	r5, #1
   13594:	3301      	adds	r3, #1
   13596:	b2db      	uxtb	r3, r3
   13598:	fa44 f103 	asr.w	r1, r4, r3
   1359c:	07c9      	lsls	r1, r1, #31
   1359e:	d5f9      	bpl.n	13594 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   135a0:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   135a2:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   135a4:	2d00      	cmp	r5, #0
   135a6:	d149      	bne.n	1363c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   135a8:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   135aa:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   135ac:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   135ae:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   135b0:	7143      	strb	r3, [r0, #5]
}
   135b2:	e716      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   135b4:	2501      	movs	r5, #1
   135b6:	e7b8      	b.n	1352a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   135b8:	5c84      	ldrb	r4, [r0, r2]
   135ba:	fa54 f101 	asrs.w	r1, r4, r1
   135be:	d029      	beq.n	13614 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   135c0:	7bc5      	ldrb	r5, [r0, #15]
   135c2:	e7eb      	b.n	1359c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   135c4:	2300      	movs	r3, #0
   135c6:	e7b9      	b.n	1353c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   135c8:	7843      	ldrb	r3, [r0, #1]
   135ca:	bb83      	cbnz	r3, 1362e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   135cc:	2102      	movs	r1, #2
   135ce:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   135d0:	5cc3      	ldrb	r3, [r0, r3]
   135d2:	2b00      	cmp	r3, #0
   135d4:	d145      	bne.n	13662 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   135d6:	1c4a      	adds	r2, r1, #1
   135d8:	b2d2      	uxtb	r2, r2
   135da:	2a05      	cmp	r2, #5
   135dc:	d00d      	beq.n	135fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   135de:	5c83      	ldrb	r3, [r0, r2]
   135e0:	bb2b      	cbnz	r3, 1362e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   135e2:	1c8a      	adds	r2, r1, #2
   135e4:	b2d2      	uxtb	r2, r2
   135e6:	2a05      	cmp	r2, #5
   135e8:	d007      	beq.n	135fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   135ea:	5c83      	ldrb	r3, [r0, r2]
   135ec:	b9fb      	cbnz	r3, 1362e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   135ee:	1ccb      	adds	r3, r1, #3
   135f0:	b2db      	uxtb	r3, r3
   135f2:	2b05      	cmp	r3, #5
   135f4:	d001      	beq.n	135fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   135f6:	5cc3      	ldrb	r3, [r0, r3]
   135f8:	b9c3      	cbnz	r3, 1362c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   135fa:	7802      	ldrb	r2, [r0, #0]
   135fc:	b112      	cbz	r2, 13604 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   135fe:	e024      	b.n	1364a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   13600:	5c83      	ldrb	r3, [r0, r2]
   13602:	bb23      	cbnz	r3, 1364e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   13604:	3201      	adds	r2, #1
   13606:	b2d2      	uxtb	r2, r2
   13608:	42aa      	cmp	r2, r5
   1360a:	ddf9      	ble.n	13600 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   1360c:	2300      	movs	r3, #0
   1360e:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   13610:	7143      	strb	r3, [r0, #5]
   13612:	e6e6      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13614:	3201      	adds	r2, #1
   13616:	b2d2      	uxtb	r2, r2
   13618:	2a04      	cmp	r2, #4
   1361a:	d8ee      	bhi.n	135fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1361c:	5c83      	ldrb	r3, [r0, r2]
   1361e:	b933      	cbnz	r3, 1362e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13620:	1ca9      	adds	r1, r5, #2
   13622:	b2c9      	uxtb	r1, r1
   13624:	2905      	cmp	r1, #5
   13626:	460b      	mov	r3, r1
   13628:	d1d2      	bne.n	135d0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   1362a:	e7e6      	b.n	135fa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1362c:	2204      	movs	r2, #4
   1362e:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13630:	461c      	mov	r4, r3
   13632:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   13634:	2300      	movs	r3, #0
   13636:	e7b1      	b.n	1359c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   13638:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   1363a:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   1363c:	8a83      	ldrh	r3, [r0, #20]
   1363e:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   13640:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   13642:	2301      	movs	r3, #1
                m_ledOn = false;
   13644:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   13646:	7143      	strb	r3, [r0, #5]
   13648:	e6cb      	b.n	133e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   1364a:	4613      	mov	r3, r2
   1364c:	2200      	movs	r2, #0
   1364e:	461d      	mov	r5, r3
            m_patternWrap = true;
   13650:	2301      	movs	r3, #1
   13652:	73c3      	strb	r3, [r0, #15]
   13654:	462c      	mov	r4, r5
        code = 0;
   13656:	2300      	movs	r3, #0
   13658:	e799      	b.n	1358e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   1365a:	2502      	movs	r5, #2
   1365c:	e6eb      	b.n	13436 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1365e:	2503      	movs	r5, #3
   13660:	e6e9      	b.n	13436 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   13662:	460a      	mov	r2, r1
   13664:	e7e3      	b.n	1362e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   13666:	bf00      	nop

00013668 <arm_sin_q15>:
   13668:	0982      	lsrs	r2, r0, #6
   1366a:	490c      	ldr	r1, [pc, #48]	; (1369c <arm_sin_q15+0x34>)
   1366c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13670:	0240      	lsls	r0, r0, #9
   13672:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   13676:	b410      	push	{r4}
   13678:	3201      	adds	r2, #1
   1367a:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   1367e:	fb03 f304 	mul.w	r3, r3, r4
   13682:	0c1b      	lsrs	r3, r3, #16
   13684:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13688:	f85d 4b04 	ldr.w	r4, [sp], #4
   1368c:	041b      	lsls	r3, r3, #16
   1368e:	fb10 3002 	smlabb	r0, r0, r2, r3
   13692:	f340 30cf 	sbfx	r0, r0, #15, #16
   13696:	f020 0001 	bic.w	r0, r0, #1
   1369a:	4770      	bx	lr
   1369c:	00023760 	.word	0x00023760

000136a0 <_Znwj>:
   136a0:	b510      	push	{r4, lr}
   136a2:	2800      	cmp	r0, #0
   136a4:	bf14      	ite	ne
   136a6:	4604      	movne	r4, r0
   136a8:	2401      	moveq	r4, #1
   136aa:	4620      	mov	r0, r4
   136ac:	f00a fc40 	bl	1df30 <malloc>
   136b0:	b100      	cbz	r0, 136b4 <_Znwj+0x14>
   136b2:	bd10      	pop	{r4, pc}
   136b4:	f000 f9c8 	bl	13a48 <_ZSt15get_new_handlerv>
   136b8:	b108      	cbz	r0, 136be <_Znwj+0x1e>
   136ba:	4780      	blx	r0
   136bc:	e7f5      	b.n	136aa <_Znwj+0xa>
   136be:	2004      	movs	r0, #4
   136c0:	f000 f8a2 	bl	13808 <__cxa_allocate_exception>
   136c4:	4b02      	ldr	r3, [pc, #8]	; (136d0 <_Znwj+0x30>)
   136c6:	6003      	str	r3, [r0, #0]
   136c8:	4a02      	ldr	r2, [pc, #8]	; (136d4 <_Znwj+0x34>)
   136ca:	4903      	ldr	r1, [pc, #12]	; (136d8 <_Znwj+0x38>)
   136cc:	f000 f946 	bl	1395c <__cxa_throw>
   136d0:	00023bb4 	.word	0x00023bb4
   136d4:	000136f9 	.word	0x000136f9
   136d8:	00023b90 	.word	0x00023b90

000136dc <__cxa_pure_virtual>:
   136dc:	b508      	push	{r3, lr}
   136de:	221b      	movs	r2, #27
   136e0:	4902      	ldr	r1, [pc, #8]	; (136ec <__cxa_pure_virtual+0x10>)
   136e2:	2002      	movs	r0, #2
   136e4:	f00c ffd6 	bl	20694 <write>
   136e8:	f000 f8ee 	bl	138c8 <_ZSt9terminatev>
   136ec:	00023b64 	.word	0x00023b64

000136f0 <_ZNKSt9bad_alloc4whatEv>:
   136f0:	4800      	ldr	r0, [pc, #0]	; (136f4 <_ZNKSt9bad_alloc4whatEv+0x4>)
   136f2:	4770      	bx	lr
   136f4:	00023b80 	.word	0x00023b80

000136f8 <_ZNSt9bad_allocD1Ev>:
   136f8:	b510      	push	{r4, lr}
   136fa:	4b03      	ldr	r3, [pc, #12]	; (13708 <_ZNSt9bad_allocD1Ev+0x10>)
   136fc:	6003      	str	r3, [r0, #0]
   136fe:	4604      	mov	r4, r0
   13700:	f000 f8be 	bl	13880 <_ZNSt9exceptionD1Ev>
   13704:	4620      	mov	r0, r4
   13706:	bd10      	pop	{r4, pc}
   13708:	00023bb4 	.word	0x00023bb4

0001370c <_ZNSt9bad_allocD0Ev>:
   1370c:	b510      	push	{r4, lr}
   1370e:	4b05      	ldr	r3, [pc, #20]	; (13724 <_ZNSt9bad_allocD0Ev+0x18>)
   13710:	6003      	str	r3, [r0, #0]
   13712:	4604      	mov	r4, r0
   13714:	f000 f8b4 	bl	13880 <_ZNSt9exceptionD1Ev>
   13718:	4620      	mov	r0, r4
   1371a:	2104      	movs	r1, #4
   1371c:	f000 f804 	bl	13728 <_ZdlPvj>
   13720:	4620      	mov	r0, r4
   13722:	bd10      	pop	{r4, pc}
   13724:	00023bb4 	.word	0x00023bb4

00013728 <_ZdlPvj>:
   13728:	f000 bac0 	b.w	13cac <_ZdlPv>

0001372c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   1372c:	b4f0      	push	{r4, r5, r6, r7}
   1372e:	4c1b      	ldr	r4, [pc, #108]	; (1379c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   13730:	f850 7c08 	ldr.w	r7, [r0, #-8]
   13734:	6861      	ldr	r1, [r4, #4]
   13736:	f1a0 0608 	sub.w	r6, r0, #8
   1373a:	b1c9      	cbz	r1, 13770 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   1373c:	19f5      	adds	r5, r6, r7
   1373e:	42a9      	cmp	r1, r5
   13740:	d01b      	beq.n	1377a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   13742:	684a      	ldr	r2, [r1, #4]
   13744:	b32a      	cbz	r2, 13792 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13746:	4295      	cmp	r5, r2
   13748:	d303      	bcc.n	13752 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   1374a:	e022      	b.n	13792 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1374c:	429d      	cmp	r5, r3
   1374e:	d205      	bcs.n	1375c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13750:	461a      	mov	r2, r3
   13752:	6853      	ldr	r3, [r2, #4]
   13754:	1d0c      	adds	r4, r1, #4
   13756:	4611      	mov	r1, r2
   13758:	2b00      	cmp	r3, #0
   1375a:	d1f7      	bne.n	1374c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   1375c:	6811      	ldr	r1, [r2, #0]
   1375e:	1855      	adds	r5, r2, r1
   13760:	42ae      	cmp	r6, r5
   13762:	d013      	beq.n	1378c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   13764:	f840 3c04 	str.w	r3, [r0, #-4]
   13768:	6823      	ldr	r3, [r4, #0]
   1376a:	605e      	str	r6, [r3, #4]
   1376c:	bcf0      	pop	{r4, r5, r6, r7}
   1376e:	4770      	bx	lr
   13770:	f840 1c04 	str.w	r1, [r0, #-4]
   13774:	6066      	str	r6, [r4, #4]
   13776:	bcf0      	pop	{r4, r5, r6, r7}
   13778:	4770      	bx	lr
   1377a:	680b      	ldr	r3, [r1, #0]
   1377c:	684a      	ldr	r2, [r1, #4]
   1377e:	f840 2c04 	str.w	r2, [r0, #-4]
   13782:	441f      	add	r7, r3
   13784:	f840 7c08 	str.w	r7, [r0, #-8]
   13788:	6066      	str	r6, [r4, #4]
   1378a:	e7ef      	b.n	1376c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1378c:	440f      	add	r7, r1
   1378e:	6017      	str	r7, [r2, #0]
   13790:	e7ec      	b.n	1376c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13792:	4613      	mov	r3, r2
   13794:	3404      	adds	r4, #4
   13796:	460a      	mov	r2, r1
   13798:	e7e0      	b.n	1375c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   1379a:	bf00      	nop
   1379c:	2000228c 	.word	0x2000228c

000137a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   137a0:	b430      	push	{r4, r5}
   137a2:	4c18      	ldr	r4, [pc, #96]	; (13804 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   137a4:	f100 0108 	add.w	r1, r0, #8
   137a8:	6863      	ldr	r3, [r4, #4]
   137aa:	2908      	cmp	r1, #8
   137ac:	bf38      	it	cc
   137ae:	2108      	movcc	r1, #8
   137b0:	b313      	cbz	r3, 137f8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   137b2:	3107      	adds	r1, #7
   137b4:	681a      	ldr	r2, [r3, #0]
   137b6:	f021 0107 	bic.w	r1, r1, #7
   137ba:	4291      	cmp	r1, r2
   137bc:	d804      	bhi.n	137c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   137be:	e01d      	b.n	137fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   137c0:	6802      	ldr	r2, [r0, #0]
   137c2:	4291      	cmp	r1, r2
   137c4:	d905      	bls.n	137d2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   137c6:	4603      	mov	r3, r0
   137c8:	6858      	ldr	r0, [r3, #4]
   137ca:	2800      	cmp	r0, #0
   137cc:	d1f8      	bne.n	137c0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   137ce:	bc30      	pop	{r4, r5}
   137d0:	4770      	bx	lr
   137d2:	3304      	adds	r3, #4
   137d4:	1a52      	subs	r2, r2, r1
   137d6:	2a07      	cmp	r2, #7
   137d8:	d90a      	bls.n	137f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   137da:	1845      	adds	r5, r0, r1
   137dc:	6844      	ldr	r4, [r0, #4]
   137de:	606c      	str	r4, [r5, #4]
   137e0:	681c      	ldr	r4, [r3, #0]
   137e2:	5042      	str	r2, [r0, r1]
   137e4:	6021      	str	r1, [r4, #0]
   137e6:	601d      	str	r5, [r3, #0]
   137e8:	f104 0008 	add.w	r0, r4, #8
   137ec:	bc30      	pop	{r4, r5}
   137ee:	4770      	bx	lr
   137f0:	6842      	ldr	r2, [r0, #4]
   137f2:	601a      	str	r2, [r3, #0]
   137f4:	4604      	mov	r4, r0
   137f6:	e7f7      	b.n	137e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   137f8:	4618      	mov	r0, r3
   137fa:	e7e8      	b.n	137ce <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   137fc:	4618      	mov	r0, r3
   137fe:	1d23      	adds	r3, r4, #4
   13800:	e7e8      	b.n	137d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   13802:	bf00      	nop
   13804:	2000228c 	.word	0x2000228c

00013808 <__cxa_allocate_exception>:
   13808:	b538      	push	{r3, r4, r5, lr}
   1380a:	f100 0580 	add.w	r5, r0, #128	; 0x80
   1380e:	4628      	mov	r0, r5
   13810:	f00a fb8e 	bl	1df30 <malloc>
   13814:	4604      	mov	r4, r0
   13816:	b138      	cbz	r0, 13828 <__cxa_allocate_exception+0x20>
   13818:	2280      	movs	r2, #128	; 0x80
   1381a:	2100      	movs	r1, #0
   1381c:	4620      	mov	r0, r4
   1381e:	f00a ffdd 	bl	1e7dc <memset>
   13822:	f104 0080 	add.w	r0, r4, #128	; 0x80
   13826:	bd38      	pop	{r3, r4, r5, pc}
   13828:	4628      	mov	r0, r5
   1382a:	f7ff ffb9 	bl	137a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   1382e:	4604      	mov	r4, r0
   13830:	2800      	cmp	r0, #0
   13832:	d1f1      	bne.n	13818 <__cxa_allocate_exception+0x10>
   13834:	f000 f848 	bl	138c8 <_ZSt9terminatev>

00013838 <__cxa_free_exception>:
   13838:	4a06      	ldr	r2, [pc, #24]	; (13854 <__cxa_free_exception+0x1c>)
   1383a:	6893      	ldr	r3, [r2, #8]
   1383c:	3880      	subs	r0, #128	; 0x80
   1383e:	4298      	cmp	r0, r3
   13840:	d905      	bls.n	1384e <__cxa_free_exception+0x16>
   13842:	68d2      	ldr	r2, [r2, #12]
   13844:	4413      	add	r3, r2
   13846:	4298      	cmp	r0, r3
   13848:	d201      	bcs.n	1384e <__cxa_free_exception+0x16>
   1384a:	f7ff bf6f 	b.w	1372c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   1384e:	f00a bb77 	b.w	1df40 <free>
   13852:	bf00      	nop
   13854:	2000228c 	.word	0x2000228c

00013858 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   13858:	b538      	push	{r3, r4, r5, lr}
   1385a:	4c08      	ldr	r4, [pc, #32]	; (1387c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   1385c:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   13860:	4628      	mov	r0, r5
   13862:	60e5      	str	r5, [r4, #12]
   13864:	f00a fb64 	bl	1df30 <malloc>
   13868:	60a0      	str	r0, [r4, #8]
   1386a:	b120      	cbz	r0, 13876 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   1386c:	2300      	movs	r3, #0
   1386e:	6060      	str	r0, [r4, #4]
   13870:	6005      	str	r5, [r0, #0]
   13872:	6043      	str	r3, [r0, #4]
   13874:	bd38      	pop	{r3, r4, r5, pc}
   13876:	60e0      	str	r0, [r4, #12]
   13878:	6060      	str	r0, [r4, #4]
   1387a:	bd38      	pop	{r3, r4, r5, pc}
   1387c:	2000228c 	.word	0x2000228c

00013880 <_ZNSt9exceptionD1Ev>:
   13880:	4770      	bx	lr
   13882:	bf00      	nop

00013884 <_ZNSt13bad_exceptionD1Ev>:
   13884:	4770      	bx	lr
   13886:	bf00      	nop

00013888 <_ZGTtNKSt13bad_exception4whatEv>:
   13888:	4800      	ldr	r0, [pc, #0]	; (1388c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   1388a:	4770      	bx	lr
   1388c:	00023bc0 	.word	0x00023bc0

00013890 <_ZNSt13bad_exceptionD0Ev>:
   13890:	b510      	push	{r4, lr}
   13892:	2104      	movs	r1, #4
   13894:	4604      	mov	r4, r0
   13896:	f7ff ff47 	bl	13728 <_ZdlPvj>
   1389a:	4620      	mov	r0, r4
   1389c:	bd10      	pop	{r4, pc}
   1389e:	bf00      	nop

000138a0 <_ZN10__cxxabiv111__terminateEPFvvE>:
   138a0:	b508      	push	{r3, lr}
   138a2:	4780      	blx	r0
   138a4:	f00a f896 	bl	1d9d4 <abort>
   138a8:	f000 fb6c 	bl	13f84 <__cxa_begin_catch>
   138ac:	f00a f892 	bl	1d9d4 <abort>
   138b0:	460d      	mov	r5, r1
   138b2:	4604      	mov	r4, r0
   138b4:	f000 fba4 	bl	14000 <__cxa_end_catch>
   138b8:	3501      	adds	r5, #1
   138ba:	d001      	beq.n	138c0 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   138bc:	f000 f9f8 	bl	13cb0 <__cxa_end_cleanup>
   138c0:	4620      	mov	r0, r4
   138c2:	f000 faef 	bl	13ea4 <__cxa_call_unexpected>
   138c6:	bf00      	nop

000138c8 <_ZSt9terminatev>:
   138c8:	b508      	push	{r3, lr}
   138ca:	4b03      	ldr	r3, [pc, #12]	; (138d8 <_ZSt9terminatev+0x10>)
   138cc:	6818      	ldr	r0, [r3, #0]
   138ce:	f3bf 8f5b 	dmb	ish
   138d2:	f7ff ffe5 	bl	138a0 <_ZN10__cxxabiv111__terminateEPFvvE>
   138d6:	bf00      	nop
   138d8:	200000f8 	.word	0x200000f8

000138dc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   138dc:	b508      	push	{r3, lr}
   138de:	4780      	blx	r0
   138e0:	f7ff fff2 	bl	138c8 <_ZSt9terminatev>

000138e4 <_ZSt10unexpectedv>:
   138e4:	b508      	push	{r3, lr}
   138e6:	4b03      	ldr	r3, [pc, #12]	; (138f4 <_ZSt10unexpectedv+0x10>)
   138e8:	6818      	ldr	r0, [r3, #0]
   138ea:	f3bf 8f5b 	dmb	ish
   138ee:	f7ff fff5 	bl	138dc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   138f2:	bf00      	nop
   138f4:	200000f4 	.word	0x200000f4

000138f8 <_ZSt13get_terminatev>:
   138f8:	4b02      	ldr	r3, [pc, #8]	; (13904 <_ZSt13get_terminatev+0xc>)
   138fa:	6818      	ldr	r0, [r3, #0]
   138fc:	f3bf 8f5b 	dmb	ish
   13900:	4770      	bx	lr
   13902:	bf00      	nop
   13904:	200000f8 	.word	0x200000f8

00013908 <_ZSt14get_unexpectedv>:
   13908:	4b02      	ldr	r3, [pc, #8]	; (13914 <_ZSt14get_unexpectedv+0xc>)
   1390a:	6818      	ldr	r0, [r3, #0]
   1390c:	f3bf 8f5b 	dmb	ish
   13910:	4770      	bx	lr
   13912:	bf00      	nop
   13914:	200000f4 	.word	0x200000f4

00013918 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   13918:	2801      	cmp	r0, #1
   1391a:	b510      	push	{r4, lr}
   1391c:	d81a      	bhi.n	13954 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   1391e:	f3bf 8f5b 	dmb	ish
   13922:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   13926:	e853 2f00 	ldrex	r2, [r3]
   1392a:	3a01      	subs	r2, #1
   1392c:	e843 2000 	strex	r0, r2, [r3]
   13930:	2800      	cmp	r0, #0
   13932:	d1f8      	bne.n	13926 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   13934:	f3bf 8f5b 	dmb	ish
   13938:	b95a      	cbnz	r2, 13952 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   1393a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1393e:	f101 0458 	add.w	r4, r1, #88	; 0x58
   13942:	b10b      	cbz	r3, 13948 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   13944:	4620      	mov	r0, r4
   13946:	4798      	blx	r3
   13948:	4620      	mov	r0, r4
   1394a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1394e:	f7ff bf73 	b.w	13838 <__cxa_free_exception>
   13952:	bd10      	pop	{r4, pc}
   13954:	f851 0c14 	ldr.w	r0, [r1, #-20]
   13958:	f7ff ffa2 	bl	138a0 <_ZN10__cxxabiv111__terminateEPFvvE>

0001395c <__cxa_throw>:
   1395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1395e:	4604      	mov	r4, r0
   13960:	460f      	mov	r7, r1
   13962:	4616      	mov	r6, r2
   13964:	f000 fb96 	bl	14094 <__cxa_get_globals>
   13968:	6843      	ldr	r3, [r0, #4]
   1396a:	2501      	movs	r5, #1
   1396c:	442b      	add	r3, r5
   1396e:	6043      	str	r3, [r0, #4]
   13970:	f844 7c78 	str.w	r7, [r4, #-120]
   13974:	f844 6c74 	str.w	r6, [r4, #-116]
   13978:	f844 5c80 	str.w	r5, [r4, #-128]
   1397c:	f7ff ffc4 	bl	13908 <_ZSt14get_unexpectedv>
   13980:	f844 0c70 	str.w	r0, [r4, #-112]
   13984:	f7ff ffb8 	bl	138f8 <_ZSt13get_terminatev>
   13988:	2347      	movs	r3, #71	; 0x47
   1398a:	2243      	movs	r2, #67	; 0x43
   1398c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   13990:	4910      	ldr	r1, [pc, #64]	; (139d4 <__cxa_throw+0x78>)
   13992:	f804 3c58 	strb.w	r3, [r4, #-88]
   13996:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   1399a:	232b      	movs	r3, #43	; 0x2b
   1399c:	2755      	movs	r7, #85	; 0x55
   1399e:	2600      	movs	r6, #0
   139a0:	f844 0c6c 	str.w	r0, [r4, #-108]
   139a4:	f804 ec57 	strb.w	lr, [r4, #-87]
   139a8:	f844 1c50 	str.w	r1, [r4, #-80]
   139ac:	f804 2c55 	strb.w	r2, [r4, #-85]
   139b0:	f804 2c54 	strb.w	r2, [r4, #-84]
   139b4:	f804 3c53 	strb.w	r3, [r4, #-83]
   139b8:	f804 3c52 	strb.w	r3, [r4, #-82]
   139bc:	f804 7c56 	strb.w	r7, [r4, #-86]
   139c0:	f804 6c51 	strb.w	r6, [r4, #-81]
   139c4:	4628      	mov	r0, r5
   139c6:	f009 fde9 	bl	1d59c <_Unwind_RaiseException>
   139ca:	4628      	mov	r0, r5
   139cc:	f000 fada 	bl	13f84 <__cxa_begin_catch>
   139d0:	f7ff ff7a 	bl	138c8 <_ZSt9terminatev>
   139d4:	00013919 	.word	0x00013919

000139d8 <__cxa_rethrow>:
   139d8:	b510      	push	{r4, lr}
   139da:	f000 fb5b 	bl	14094 <__cxa_get_globals>
   139de:	6842      	ldr	r2, [r0, #4]
   139e0:	6804      	ldr	r4, [r0, #0]
   139e2:	3201      	adds	r2, #1
   139e4:	6042      	str	r2, [r0, #4]
   139e6:	b164      	cbz	r4, 13a02 <__cxa_rethrow+0x2a>
   139e8:	f894 2020 	ldrb.w	r2, [r4, #32]
   139ec:	2a47      	cmp	r2, #71	; 0x47
   139ee:	d00a      	beq.n	13a06 <__cxa_rethrow+0x2e>
   139f0:	2200      	movs	r2, #0
   139f2:	6002      	str	r2, [r0, #0]
   139f4:	3420      	adds	r4, #32
   139f6:	4620      	mov	r0, r4
   139f8:	f009 fdf4 	bl	1d5e4 <_Unwind_Resume_or_Rethrow>
   139fc:	4620      	mov	r0, r4
   139fe:	f000 fac1 	bl	13f84 <__cxa_begin_catch>
   13a02:	f7ff ff61 	bl	138c8 <_ZSt9terminatev>
   13a06:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   13a0a:	2a4e      	cmp	r2, #78	; 0x4e
   13a0c:	d1f0      	bne.n	139f0 <__cxa_rethrow+0x18>
   13a0e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   13a12:	2a55      	cmp	r2, #85	; 0x55
   13a14:	d1ec      	bne.n	139f0 <__cxa_rethrow+0x18>
   13a16:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   13a1a:	2a43      	cmp	r2, #67	; 0x43
   13a1c:	d1e8      	bne.n	139f0 <__cxa_rethrow+0x18>
   13a1e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   13a22:	2a43      	cmp	r2, #67	; 0x43
   13a24:	d1e4      	bne.n	139f0 <__cxa_rethrow+0x18>
   13a26:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   13a2a:	2a2b      	cmp	r2, #43	; 0x2b
   13a2c:	d1e0      	bne.n	139f0 <__cxa_rethrow+0x18>
   13a2e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   13a32:	2a2b      	cmp	r2, #43	; 0x2b
   13a34:	d1dc      	bne.n	139f0 <__cxa_rethrow+0x18>
   13a36:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   13a3a:	2a01      	cmp	r2, #1
   13a3c:	d8d8      	bhi.n	139f0 <__cxa_rethrow+0x18>
   13a3e:	6962      	ldr	r2, [r4, #20]
   13a40:	4252      	negs	r2, r2
   13a42:	6162      	str	r2, [r4, #20]
   13a44:	e7d6      	b.n	139f4 <__cxa_rethrow+0x1c>
   13a46:	bf00      	nop

00013a48 <_ZSt15get_new_handlerv>:
   13a48:	4b02      	ldr	r3, [pc, #8]	; (13a54 <_ZSt15get_new_handlerv+0xc>)
   13a4a:	6818      	ldr	r0, [r3, #0]
   13a4c:	f3bf 8f5b 	dmb	ish
   13a50:	4770      	bx	lr
   13a52:	bf00      	nop
   13a54:	2000229c 	.word	0x2000229c

00013a58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   13a58:	b510      	push	{r4, lr}
   13a5a:	4b03      	ldr	r3, [pc, #12]	; (13a68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   13a5c:	6003      	str	r3, [r0, #0]
   13a5e:	4604      	mov	r4, r0
   13a60:	f000 f8ca 	bl	13bf8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13a64:	4620      	mov	r0, r4
   13a66:	bd10      	pop	{r4, pc}
   13a68:	00023cb0 	.word	0x00023cb0

00013a6c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   13a6c:	b510      	push	{r4, lr}
   13a6e:	4b05      	ldr	r3, [pc, #20]	; (13a84 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   13a70:	6003      	str	r3, [r0, #0]
   13a72:	4604      	mov	r4, r0
   13a74:	f000 f8c0 	bl	13bf8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13a78:	4620      	mov	r0, r4
   13a7a:	210c      	movs	r1, #12
   13a7c:	f7ff fe54 	bl	13728 <_ZdlPvj>
   13a80:	4620      	mov	r0, r4
   13a82:	bd10      	pop	{r4, pc}
   13a84:	00023cb0 	.word	0x00023cb0

00013a88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13a88:	b570      	push	{r4, r5, r6, lr}
   13a8a:	b082      	sub	sp, #8
   13a8c:	460d      	mov	r5, r1
   13a8e:	9c06      	ldr	r4, [sp, #24]
   13a90:	4294      	cmp	r4, r2
   13a92:	4606      	mov	r6, r0
   13a94:	d009      	beq.n	13aaa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   13a96:	68b0      	ldr	r0, [r6, #8]
   13a98:	6806      	ldr	r6, [r0, #0]
   13a9a:	9406      	str	r4, [sp, #24]
   13a9c:	6a34      	ldr	r4, [r6, #32]
   13a9e:	4629      	mov	r1, r5
   13aa0:	46a4      	mov	ip, r4
   13aa2:	b002      	add	sp, #8
   13aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13aa8:	4760      	bx	ip
   13aaa:	4619      	mov	r1, r3
   13aac:	9201      	str	r2, [sp, #4]
   13aae:	9300      	str	r3, [sp, #0]
   13ab0:	f000 f86a 	bl	13b88 <_ZNKSt9type_infoeqERKS_>
   13ab4:	9b00      	ldr	r3, [sp, #0]
   13ab6:	9a01      	ldr	r2, [sp, #4]
   13ab8:	2800      	cmp	r0, #0
   13aba:	d0ec      	beq.n	13a96 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   13abc:	2006      	movs	r0, #6
   13abe:	b002      	add	sp, #8
   13ac0:	bd70      	pop	{r4, r5, r6, pc}
   13ac2:	bf00      	nop

00013ac4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   13ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ac8:	b081      	sub	sp, #4
   13aca:	460e      	mov	r6, r1
   13acc:	4619      	mov	r1, r3
   13ace:	461f      	mov	r7, r3
   13ad0:	4691      	mov	r9, r2
   13ad2:	4683      	mov	fp, r0
   13ad4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13ad6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   13ada:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   13ade:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13ae0:	f000 f852 	bl	13b88 <_ZNKSt9type_infoeqERKS_>
   13ae4:	b170      	cbz	r0, 13b04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   13ae6:	2e00      	cmp	r6, #0
   13ae8:	602c      	str	r4, [r5, #0]
   13aea:	f885 9004 	strb.w	r9, [r5, #4]
   13aee:	db1f      	blt.n	13b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13af0:	4434      	add	r4, r6
   13af2:	45a0      	cmp	r8, r4
   13af4:	bf0c      	ite	eq
   13af6:	2406      	moveq	r4, #6
   13af8:	2401      	movne	r4, #1
   13afa:	71ac      	strb	r4, [r5, #6]
   13afc:	2000      	movs	r0, #0
   13afe:	b001      	add	sp, #4
   13b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b04:	4544      	cmp	r4, r8
   13b06:	d018      	beq.n	13b3a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13b08:	f8db 0008 	ldr.w	r0, [fp, #8]
   13b0c:	f8d0 e000 	ldr.w	lr, [r0]
   13b10:	950d      	str	r5, [sp, #52]	; 0x34
   13b12:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   13b16:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   13b1a:	940a      	str	r4, [sp, #40]	; 0x28
   13b1c:	f8de 401c 	ldr.w	r4, [lr, #28]
   13b20:	463b      	mov	r3, r7
   13b22:	464a      	mov	r2, r9
   13b24:	4631      	mov	r1, r6
   13b26:	46a4      	mov	ip, r4
   13b28:	b001      	add	sp, #4
   13b2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b2e:	4760      	bx	ip
   13b30:	3602      	adds	r6, #2
   13b32:	d1e3      	bne.n	13afc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13b34:	2301      	movs	r3, #1
   13b36:	71ab      	strb	r3, [r5, #6]
   13b38:	e7e0      	b.n	13afc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13b3a:	4651      	mov	r1, sl
   13b3c:	4658      	mov	r0, fp
   13b3e:	f000 f823 	bl	13b88 <_ZNKSt9type_infoeqERKS_>
   13b42:	2800      	cmp	r0, #0
   13b44:	d0e0      	beq.n	13b08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   13b46:	2000      	movs	r0, #0
   13b48:	f885 9005 	strb.w	r9, [r5, #5]
   13b4c:	b001      	add	sp, #4
   13b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b52:	bf00      	nop

00013b54 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   13b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b58:	4607      	mov	r7, r0
   13b5a:	460c      	mov	r4, r1
   13b5c:	4615      	mov	r5, r2
   13b5e:	461e      	mov	r6, r3
   13b60:	f000 f862 	bl	13c28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   13b64:	b108      	cbz	r0, 13b6a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   13b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b6a:	68b8      	ldr	r0, [r7, #8]
   13b6c:	6807      	ldr	r7, [r0, #0]
   13b6e:	4621      	mov	r1, r4
   13b70:	69bc      	ldr	r4, [r7, #24]
   13b72:	4633      	mov	r3, r6
   13b74:	462a      	mov	r2, r5
   13b76:	46a4      	mov	ip, r4
   13b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13b7c:	4760      	bx	ip
   13b7e:	bf00      	nop

00013b80 <_ZNSt9type_infoD1Ev>:
   13b80:	4770      	bx	lr
   13b82:	bf00      	nop

00013b84 <_ZNKSt9type_info14__is_pointer_pEv>:
   13b84:	2000      	movs	r0, #0
   13b86:	4770      	bx	lr

00013b88 <_ZNKSt9type_infoeqERKS_>:
   13b88:	4281      	cmp	r1, r0
   13b8a:	d011      	beq.n	13bb0 <_ZNKSt9type_infoeqERKS_+0x28>
   13b8c:	b508      	push	{r3, lr}
   13b8e:	6840      	ldr	r0, [r0, #4]
   13b90:	7803      	ldrb	r3, [r0, #0]
   13b92:	2b2a      	cmp	r3, #42	; 0x2a
   13b94:	d00a      	beq.n	13bac <_ZNKSt9type_infoeqERKS_+0x24>
   13b96:	6849      	ldr	r1, [r1, #4]
   13b98:	780b      	ldrb	r3, [r1, #0]
   13b9a:	2b2a      	cmp	r3, #42	; 0x2a
   13b9c:	bf08      	it	eq
   13b9e:	3101      	addeq	r1, #1
   13ba0:	f00b f8f2 	bl	1ed88 <strcmp>
   13ba4:	fab0 f080 	clz	r0, r0
   13ba8:	0940      	lsrs	r0, r0, #5
   13baa:	bd08      	pop	{r3, pc}
   13bac:	2000      	movs	r0, #0
   13bae:	bd08      	pop	{r3, pc}
   13bb0:	2001      	movs	r0, #1
   13bb2:	4770      	bx	lr

00013bb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   13bb4:	b570      	push	{r4, r5, r6, lr}
   13bb6:	6803      	ldr	r3, [r0, #0]
   13bb8:	b084      	sub	sp, #16
   13bba:	2400      	movs	r4, #0
   13bbc:	699e      	ldr	r6, [r3, #24]
   13bbe:	9400      	str	r4, [sp, #0]
   13bc0:	2310      	movs	r3, #16
   13bc2:	4615      	mov	r5, r2
   13bc4:	9302      	str	r3, [sp, #8]
   13bc6:	6812      	ldr	r2, [r2, #0]
   13bc8:	f88d 4004 	strb.w	r4, [sp, #4]
   13bcc:	466b      	mov	r3, sp
   13bce:	9403      	str	r4, [sp, #12]
   13bd0:	47b0      	blx	r6
   13bd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13bd6:	f003 0306 	and.w	r3, r3, #6
   13bda:	2b06      	cmp	r3, #6
   13bdc:	bf03      	ittte	eq
   13bde:	9b00      	ldreq	r3, [sp, #0]
   13be0:	602b      	streq	r3, [r5, #0]
   13be2:	2001      	moveq	r0, #1
   13be4:	4620      	movne	r0, r4
   13be6:	b004      	add	sp, #16
   13be8:	bd70      	pop	{r4, r5, r6, pc}
   13bea:	bf00      	nop

00013bec <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   13bec:	9800      	ldr	r0, [sp, #0]
   13bee:	4290      	cmp	r0, r2
   13bf0:	bf0c      	ite	eq
   13bf2:	2006      	moveq	r0, #6
   13bf4:	2001      	movne	r0, #1
   13bf6:	4770      	bx	lr

00013bf8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13bf8:	b510      	push	{r4, lr}
   13bfa:	4b03      	ldr	r3, [pc, #12]	; (13c08 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   13bfc:	6003      	str	r3, [r0, #0]
   13bfe:	4604      	mov	r4, r0
   13c00:	f7ff ffbe 	bl	13b80 <_ZNSt9type_infoD1Ev>
   13c04:	4620      	mov	r0, r4
   13c06:	bd10      	pop	{r4, pc}
   13c08:	00023d24 	.word	0x00023d24

00013c0c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   13c0c:	b510      	push	{r4, lr}
   13c0e:	4b05      	ldr	r3, [pc, #20]	; (13c24 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13c10:	6003      	str	r3, [r0, #0]
   13c12:	4604      	mov	r4, r0
   13c14:	f7ff ffb4 	bl	13b80 <_ZNSt9type_infoD1Ev>
   13c18:	4620      	mov	r0, r4
   13c1a:	2108      	movs	r1, #8
   13c1c:	f7ff fd84 	bl	13728 <_ZdlPvj>
   13c20:	4620      	mov	r0, r4
   13c22:	bd10      	pop	{r4, pc}
   13c24:	00023d24 	.word	0x00023d24

00013c28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13c28:	b538      	push	{r3, r4, r5, lr}
   13c2a:	4615      	mov	r5, r2
   13c2c:	461c      	mov	r4, r3
   13c2e:	f7ff ffab 	bl	13b88 <_ZNKSt9type_infoeqERKS_>
   13c32:	b120      	cbz	r0, 13c3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   13c34:	2208      	movs	r2, #8
   13c36:	2306      	movs	r3, #6
   13c38:	6025      	str	r5, [r4, #0]
   13c3a:	60e2      	str	r2, [r4, #12]
   13c3c:	7123      	strb	r3, [r4, #4]
   13c3e:	bd38      	pop	{r3, r4, r5, pc}

00013c40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c44:	4617      	mov	r7, r2
   13c46:	461c      	mov	r4, r3
   13c48:	4606      	mov	r6, r0
   13c4a:	460d      	mov	r5, r1
   13c4c:	f7ff ff9c 	bl	13b88 <_ZNKSt9type_infoeqERKS_>
   13c50:	b908      	cbnz	r0, 13c56 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   13c52:	2c03      	cmp	r4, #3
   13c54:	d901      	bls.n	13c5a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   13c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c5a:	682b      	ldr	r3, [r5, #0]
   13c5c:	463a      	mov	r2, r7
   13c5e:	4631      	mov	r1, r6
   13c60:	4628      	mov	r0, r5
   13c62:	695b      	ldr	r3, [r3, #20]
   13c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13c68:	4718      	bx	r3
   13c6a:	bf00      	nop

00013c6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   13c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c6e:	b083      	sub	sp, #12
   13c70:	4617      	mov	r7, r2
   13c72:	9d08      	ldr	r5, [sp, #32]
   13c74:	990a      	ldr	r1, [sp, #40]	; 0x28
   13c76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13c78:	428d      	cmp	r5, r1
   13c7a:	4606      	mov	r6, r0
   13c7c:	d00b      	beq.n	13c96 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   13c7e:	4619      	mov	r1, r3
   13c80:	4630      	mov	r0, r6
   13c82:	f7ff ff81 	bl	13b88 <_ZNKSt9type_infoeqERKS_>
   13c86:	b118      	cbz	r0, 13c90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   13c88:	2301      	movs	r3, #1
   13c8a:	6025      	str	r5, [r4, #0]
   13c8c:	7127      	strb	r7, [r4, #4]
   13c8e:	71a3      	strb	r3, [r4, #6]
   13c90:	2000      	movs	r0, #0
   13c92:	b003      	add	sp, #12
   13c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c96:	9909      	ldr	r1, [sp, #36]	; 0x24
   13c98:	9301      	str	r3, [sp, #4]
   13c9a:	f7ff ff75 	bl	13b88 <_ZNKSt9type_infoeqERKS_>
   13c9e:	b118      	cbz	r0, 13ca8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   13ca0:	2000      	movs	r0, #0
   13ca2:	7167      	strb	r7, [r4, #5]
   13ca4:	b003      	add	sp, #12
   13ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ca8:	9b01      	ldr	r3, [sp, #4]
   13caa:	e7e8      	b.n	13c7e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

00013cac <_ZdlPv>:
   13cac:	f00a b948 	b.w	1df40 <free>

00013cb0 <__cxa_end_cleanup>:
   13cb0:	b41e      	push	{r1, r2, r3, r4}
   13cb2:	f000 f891 	bl	13dd8 <__gnu_end_cleanup>
   13cb6:	bc1e      	pop	{r1, r2, r3, r4}
   13cb8:	f009 fc82 	bl	1d5c0 <_Unwind_Resume>

00013cbc <__cxa_type_match>:
   13cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cbe:	7802      	ldrb	r2, [r0, #0]
   13cc0:	2a47      	cmp	r2, #71	; 0x47
   13cc2:	b083      	sub	sp, #12
   13cc4:	460d      	mov	r5, r1
   13cc6:	461f      	mov	r7, r3
   13cc8:	d01e      	beq.n	13d08 <__cxa_type_match+0x4c>
   13cca:	2300      	movs	r3, #0
   13ccc:	4c27      	ldr	r4, [pc, #156]	; (13d6c <__cxa_type_match+0xb0>)
   13cce:	9301      	str	r3, [sp, #4]
   13cd0:	6823      	ldr	r3, [r4, #0]
   13cd2:	4620      	mov	r0, r4
   13cd4:	689b      	ldr	r3, [r3, #8]
   13cd6:	4798      	blx	r3
   13cd8:	b180      	cbz	r0, 13cfc <__cxa_type_match+0x40>
   13cda:	9b01      	ldr	r3, [sp, #4]
   13cdc:	681b      	ldr	r3, [r3, #0]
   13cde:	9301      	str	r3, [sp, #4]
   13ce0:	2602      	movs	r6, #2
   13ce2:	682b      	ldr	r3, [r5, #0]
   13ce4:	4621      	mov	r1, r4
   13ce6:	4628      	mov	r0, r5
   13ce8:	691c      	ldr	r4, [r3, #16]
   13cea:	aa01      	add	r2, sp, #4
   13cec:	2301      	movs	r3, #1
   13cee:	47a0      	blx	r4
   13cf0:	b130      	cbz	r0, 13d00 <__cxa_type_match+0x44>
   13cf2:	9b01      	ldr	r3, [sp, #4]
   13cf4:	603b      	str	r3, [r7, #0]
   13cf6:	4630      	mov	r0, r6
   13cf8:	b003      	add	sp, #12
   13cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cfc:	2601      	movs	r6, #1
   13cfe:	e7f0      	b.n	13ce2 <__cxa_type_match+0x26>
   13d00:	4606      	mov	r6, r0
   13d02:	4630      	mov	r0, r6
   13d04:	b003      	add	sp, #12
   13d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d08:	7843      	ldrb	r3, [r0, #1]
   13d0a:	2b4e      	cmp	r3, #78	; 0x4e
   13d0c:	d1dd      	bne.n	13cca <__cxa_type_match+0xe>
   13d0e:	7883      	ldrb	r3, [r0, #2]
   13d10:	2b55      	cmp	r3, #85	; 0x55
   13d12:	d1da      	bne.n	13cca <__cxa_type_match+0xe>
   13d14:	78c3      	ldrb	r3, [r0, #3]
   13d16:	2b43      	cmp	r3, #67	; 0x43
   13d18:	d019      	beq.n	13d4e <__cxa_type_match+0x92>
   13d1a:	78c3      	ldrb	r3, [r0, #3]
   13d1c:	2b43      	cmp	r3, #67	; 0x43
   13d1e:	d1d4      	bne.n	13cca <__cxa_type_match+0xe>
   13d20:	7903      	ldrb	r3, [r0, #4]
   13d22:	2b43      	cmp	r3, #67	; 0x43
   13d24:	d1d1      	bne.n	13cca <__cxa_type_match+0xe>
   13d26:	7943      	ldrb	r3, [r0, #5]
   13d28:	2b2b      	cmp	r3, #43	; 0x2b
   13d2a:	d1ce      	bne.n	13cca <__cxa_type_match+0xe>
   13d2c:	7983      	ldrb	r3, [r0, #6]
   13d2e:	2b2b      	cmp	r3, #43	; 0x2b
   13d30:	d1cb      	bne.n	13cca <__cxa_type_match+0xe>
   13d32:	79c3      	ldrb	r3, [r0, #7]
   13d34:	2b01      	cmp	r3, #1
   13d36:	d8c8      	bhi.n	13cca <__cxa_type_match+0xe>
   13d38:	d004      	beq.n	13d44 <__cxa_type_match+0x88>
   13d3a:	f850 4c20 	ldr.w	r4, [r0, #-32]
   13d3e:	3058      	adds	r0, #88	; 0x58
   13d40:	9001      	str	r0, [sp, #4]
   13d42:	e7c5      	b.n	13cd0 <__cxa_type_match+0x14>
   13d44:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13d48:	f850 4c78 	ldr.w	r4, [r0, #-120]
   13d4c:	e7f8      	b.n	13d40 <__cxa_type_match+0x84>
   13d4e:	7903      	ldrb	r3, [r0, #4]
   13d50:	2b46      	cmp	r3, #70	; 0x46
   13d52:	d1e2      	bne.n	13d1a <__cxa_type_match+0x5e>
   13d54:	7943      	ldrb	r3, [r0, #5]
   13d56:	2b4f      	cmp	r3, #79	; 0x4f
   13d58:	d1df      	bne.n	13d1a <__cxa_type_match+0x5e>
   13d5a:	7983      	ldrb	r3, [r0, #6]
   13d5c:	2b52      	cmp	r3, #82	; 0x52
   13d5e:	d1dc      	bne.n	13d1a <__cxa_type_match+0x5e>
   13d60:	79c3      	ldrb	r3, [r0, #7]
   13d62:	2b00      	cmp	r3, #0
   13d64:	d1d9      	bne.n	13d1a <__cxa_type_match+0x5e>
   13d66:	9301      	str	r3, [sp, #4]
   13d68:	4c01      	ldr	r4, [pc, #4]	; (13d70 <__cxa_type_match+0xb4>)
   13d6a:	e7b1      	b.n	13cd0 <__cxa_type_match+0x14>
   13d6c:	00023bdc 	.word	0x00023bdc
   13d70:	00023bd4 	.word	0x00023bd4

00013d74 <__cxa_begin_cleanup>:
   13d74:	b510      	push	{r4, lr}
   13d76:	4604      	mov	r4, r0
   13d78:	f000 f98c 	bl	14094 <__cxa_get_globals>
   13d7c:	7823      	ldrb	r3, [r4, #0]
   13d7e:	2b47      	cmp	r3, #71	; 0x47
   13d80:	f1a4 0220 	sub.w	r2, r4, #32
   13d84:	d004      	beq.n	13d90 <__cxa_begin_cleanup+0x1c>
   13d86:	6883      	ldr	r3, [r0, #8]
   13d88:	bb23      	cbnz	r3, 13dd4 <__cxa_begin_cleanup+0x60>
   13d8a:	6082      	str	r2, [r0, #8]
   13d8c:	2001      	movs	r0, #1
   13d8e:	bd10      	pop	{r4, pc}
   13d90:	7863      	ldrb	r3, [r4, #1]
   13d92:	2b4e      	cmp	r3, #78	; 0x4e
   13d94:	d1f7      	bne.n	13d86 <__cxa_begin_cleanup+0x12>
   13d96:	78a3      	ldrb	r3, [r4, #2]
   13d98:	2b55      	cmp	r3, #85	; 0x55
   13d9a:	d1f4      	bne.n	13d86 <__cxa_begin_cleanup+0x12>
   13d9c:	78e3      	ldrb	r3, [r4, #3]
   13d9e:	2b43      	cmp	r3, #67	; 0x43
   13da0:	d1f1      	bne.n	13d86 <__cxa_begin_cleanup+0x12>
   13da2:	7923      	ldrb	r3, [r4, #4]
   13da4:	2b43      	cmp	r3, #67	; 0x43
   13da6:	d1ee      	bne.n	13d86 <__cxa_begin_cleanup+0x12>
   13da8:	7963      	ldrb	r3, [r4, #5]
   13daa:	2b2b      	cmp	r3, #43	; 0x2b
   13dac:	d1eb      	bne.n	13d86 <__cxa_begin_cleanup+0x12>
   13dae:	79a3      	ldrb	r3, [r4, #6]
   13db0:	2b2b      	cmp	r3, #43	; 0x2b
   13db2:	d1e8      	bne.n	13d86 <__cxa_begin_cleanup+0x12>
   13db4:	79e3      	ldrb	r3, [r4, #7]
   13db6:	2b01      	cmp	r3, #1
   13db8:	d8e5      	bhi.n	13d86 <__cxa_begin_cleanup+0x12>
   13dba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13dbe:	3301      	adds	r3, #1
   13dc0:	2b01      	cmp	r3, #1
   13dc2:	f844 3c04 	str.w	r3, [r4, #-4]
   13dc6:	d1e1      	bne.n	13d8c <__cxa_begin_cleanup+0x18>
   13dc8:	6883      	ldr	r3, [r0, #8]
   13dca:	f844 3c08 	str.w	r3, [r4, #-8]
   13dce:	6082      	str	r2, [r0, #8]
   13dd0:	2001      	movs	r0, #1
   13dd2:	bd10      	pop	{r4, pc}
   13dd4:	f7ff fd78 	bl	138c8 <_ZSt9terminatev>

00013dd8 <__gnu_end_cleanup>:
   13dd8:	b508      	push	{r3, lr}
   13dda:	f000 f95b 	bl	14094 <__cxa_get_globals>
   13dde:	6883      	ldr	r3, [r0, #8]
   13de0:	b383      	cbz	r3, 13e44 <__gnu_end_cleanup+0x6c>
   13de2:	f893 2020 	ldrb.w	r2, [r3, #32]
   13de6:	2a47      	cmp	r2, #71	; 0x47
   13de8:	d004      	beq.n	13df4 <__gnu_end_cleanup+0x1c>
   13dea:	2200      	movs	r2, #0
   13dec:	6082      	str	r2, [r0, #8]
   13dee:	f103 0020 	add.w	r0, r3, #32
   13df2:	bd08      	pop	{r3, pc}
   13df4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13df8:	2a4e      	cmp	r2, #78	; 0x4e
   13dfa:	d1f6      	bne.n	13dea <__gnu_end_cleanup+0x12>
   13dfc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13e00:	2a55      	cmp	r2, #85	; 0x55
   13e02:	d1f2      	bne.n	13dea <__gnu_end_cleanup+0x12>
   13e04:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13e08:	2a43      	cmp	r2, #67	; 0x43
   13e0a:	d1ee      	bne.n	13dea <__gnu_end_cleanup+0x12>
   13e0c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13e10:	2a43      	cmp	r2, #67	; 0x43
   13e12:	d1ea      	bne.n	13dea <__gnu_end_cleanup+0x12>
   13e14:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13e18:	2a2b      	cmp	r2, #43	; 0x2b
   13e1a:	d1e6      	bne.n	13dea <__gnu_end_cleanup+0x12>
   13e1c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13e20:	2a2b      	cmp	r2, #43	; 0x2b
   13e22:	d1e2      	bne.n	13dea <__gnu_end_cleanup+0x12>
   13e24:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13e28:	2a01      	cmp	r2, #1
   13e2a:	d8de      	bhi.n	13dea <__gnu_end_cleanup+0x12>
   13e2c:	69da      	ldr	r2, [r3, #28]
   13e2e:	3a01      	subs	r2, #1
   13e30:	61da      	str	r2, [r3, #28]
   13e32:	2a00      	cmp	r2, #0
   13e34:	d1db      	bne.n	13dee <__gnu_end_cleanup+0x16>
   13e36:	699a      	ldr	r2, [r3, #24]
   13e38:	6082      	str	r2, [r0, #8]
   13e3a:	2200      	movs	r2, #0
   13e3c:	619a      	str	r2, [r3, #24]
   13e3e:	f103 0020 	add.w	r0, r3, #32
   13e42:	bd08      	pop	{r3, pc}
   13e44:	f7ff fd40 	bl	138c8 <_ZSt9terminatev>

00013e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13e48:	7803      	ldrb	r3, [r0, #0]
   13e4a:	2b47      	cmp	r3, #71	; 0x47
   13e4c:	d001      	beq.n	13e52 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13e4e:	2000      	movs	r0, #0
   13e50:	4770      	bx	lr
   13e52:	7843      	ldrb	r3, [r0, #1]
   13e54:	2b4e      	cmp	r3, #78	; 0x4e
   13e56:	d1fa      	bne.n	13e4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13e58:	7883      	ldrb	r3, [r0, #2]
   13e5a:	2b55      	cmp	r3, #85	; 0x55
   13e5c:	d1f7      	bne.n	13e4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13e5e:	78c3      	ldrb	r3, [r0, #3]
   13e60:	2b43      	cmp	r3, #67	; 0x43
   13e62:	d1f4      	bne.n	13e4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13e64:	7903      	ldrb	r3, [r0, #4]
   13e66:	2b43      	cmp	r3, #67	; 0x43
   13e68:	d1f1      	bne.n	13e4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13e6a:	7943      	ldrb	r3, [r0, #5]
   13e6c:	2b2b      	cmp	r3, #43	; 0x2b
   13e6e:	d1ee      	bne.n	13e4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13e70:	7983      	ldrb	r3, [r0, #6]
   13e72:	2b2b      	cmp	r3, #43	; 0x2b
   13e74:	d1eb      	bne.n	13e4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13e76:	79c0      	ldrb	r0, [r0, #7]
   13e78:	2801      	cmp	r0, #1
   13e7a:	bf8c      	ite	hi
   13e7c:	2000      	movhi	r0, #0
   13e7e:	2001      	movls	r0, #1
   13e80:	4770      	bx	lr
   13e82:	bf00      	nop

00013e84 <__cxa_call_terminate>:
   13e84:	b510      	push	{r4, lr}
   13e86:	b130      	cbz	r0, 13e96 <__cxa_call_terminate+0x12>
   13e88:	4604      	mov	r4, r0
   13e8a:	f000 f87b 	bl	13f84 <__cxa_begin_catch>
   13e8e:	4620      	mov	r0, r4
   13e90:	f7ff ffda 	bl	13e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13e94:	b908      	cbnz	r0, 13e9a <__cxa_call_terminate+0x16>
   13e96:	f7ff fd17 	bl	138c8 <_ZSt9terminatev>
   13e9a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13e9e:	f7ff fcff 	bl	138a0 <_ZN10__cxxabiv111__terminateEPFvvE>
   13ea2:	bf00      	nop

00013ea4 <__cxa_call_unexpected>:
   13ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ea8:	b085      	sub	sp, #20
   13eaa:	4602      	mov	r2, r0
   13eac:	f7ff ffcc 	bl	13e48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13eb0:	b160      	cbz	r0, 13ecc <__cxa_call_unexpected+0x28>
   13eb2:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13eb6:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13eba:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13ebc:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13ebe:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13ec0:	4610      	mov	r0, r2
   13ec2:	f000 f85f 	bl	13f84 <__cxa_begin_catch>
   13ec6:	4640      	mov	r0, r8
   13ec8:	f7ff fd08 	bl	138dc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13ecc:	4610      	mov	r0, r2
   13ece:	f000 f859 	bl	13f84 <__cxa_begin_catch>
   13ed2:	f7ff fd07 	bl	138e4 <_ZSt10unexpectedv>
   13ed6:	f000 f855 	bl	13f84 <__cxa_begin_catch>
   13eda:	f7ff fcf5 	bl	138c8 <_ZSt9terminatev>
   13ede:	f000 f851 	bl	13f84 <__cxa_begin_catch>
   13ee2:	f000 f8d3 	bl	1408c <__cxa_get_globals_fast>
   13ee6:	6803      	ldr	r3, [r0, #0]
   13ee8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13eec:	2a01      	cmp	r2, #1
   13eee:	d036      	beq.n	13f5e <__cxa_call_unexpected+0xba>
   13ef0:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13ef4:	f10d 0a10 	add.w	sl, sp, #16
   13ef8:	f04f 0800 	mov.w	r8, #0
   13efc:	3320      	adds	r3, #32
   13efe:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13f02:	f027 0b03 	bic.w	fp, r7, #3
   13f06:	9301      	str	r3, [sp, #4]
   13f08:	46c1      	mov	r9, r8
   13f0a:	45b1      	cmp	r9, r6
   13f0c:	da1b      	bge.n	13f46 <__cxa_call_unexpected+0xa2>
   13f0e:	6827      	ldr	r7, [r4, #0]
   13f10:	b107      	cbz	r7, 13f14 <__cxa_call_unexpected+0x70>
   13f12:	4427      	add	r7, r4
   13f14:	4653      	mov	r3, sl
   13f16:	2200      	movs	r2, #0
   13f18:	4639      	mov	r1, r7
   13f1a:	9801      	ldr	r0, [sp, #4]
   13f1c:	f7ff fece 	bl	13cbc <__cxa_type_match>
   13f20:	bb10      	cbnz	r0, 13f68 <__cxa_call_unexpected+0xc4>
   13f22:	683b      	ldr	r3, [r7, #0]
   13f24:	4914      	ldr	r1, [pc, #80]	; (13f78 <__cxa_call_unexpected+0xd4>)
   13f26:	691b      	ldr	r3, [r3, #16]
   13f28:	9300      	str	r3, [sp, #0]
   13f2a:	aa04      	add	r2, sp, #16
   13f2c:	2301      	movs	r3, #1
   13f2e:	f842 0d04 	str.w	r0, [r2, #-4]!
   13f32:	4638      	mov	r0, r7
   13f34:	9f00      	ldr	r7, [sp, #0]
   13f36:	47b8      	blx	r7
   13f38:	2800      	cmp	r0, #0
   13f3a:	bf18      	it	ne
   13f3c:	4680      	movne	r8, r0
   13f3e:	f109 0901 	add.w	r9, r9, #1
   13f42:	445c      	add	r4, fp
   13f44:	e7e1      	b.n	13f0a <__cxa_call_unexpected+0x66>
   13f46:	f1b8 0f00 	cmp.w	r8, #0
   13f4a:	d00a      	beq.n	13f62 <__cxa_call_unexpected+0xbe>
   13f4c:	2004      	movs	r0, #4
   13f4e:	f7ff fc5b 	bl	13808 <__cxa_allocate_exception>
   13f52:	4b0a      	ldr	r3, [pc, #40]	; (13f7c <__cxa_call_unexpected+0xd8>)
   13f54:	6003      	str	r3, [r0, #0]
   13f56:	4a0a      	ldr	r2, [pc, #40]	; (13f80 <__cxa_call_unexpected+0xdc>)
   13f58:	4907      	ldr	r1, [pc, #28]	; (13f78 <__cxa_call_unexpected+0xd4>)
   13f5a:	f7ff fcff 	bl	1395c <__cxa_throw>
   13f5e:	681a      	ldr	r2, [r3, #0]
   13f60:	e7c8      	b.n	13ef4 <__cxa_call_unexpected+0x50>
   13f62:	4628      	mov	r0, r5
   13f64:	f7ff fc9c 	bl	138a0 <_ZN10__cxxabiv111__terminateEPFvvE>
   13f68:	f7ff fd36 	bl	139d8 <__cxa_rethrow>
   13f6c:	f000 f848 	bl	14000 <__cxa_end_catch>
   13f70:	f000 f846 	bl	14000 <__cxa_end_catch>
   13f74:	f7ff fe9c 	bl	13cb0 <__cxa_end_cleanup>
   13f78:	00023be4 	.word	0x00023be4
   13f7c:	00023c68 	.word	0x00023c68
   13f80:	00013885 	.word	0x00013885

00013f84 <__cxa_begin_catch>:
   13f84:	b538      	push	{r3, r4, r5, lr}
   13f86:	4604      	mov	r4, r0
   13f88:	f000 f884 	bl	14094 <__cxa_get_globals>
   13f8c:	7822      	ldrb	r2, [r4, #0]
   13f8e:	6803      	ldr	r3, [r0, #0]
   13f90:	2a47      	cmp	r2, #71	; 0x47
   13f92:	f1a4 0120 	sub.w	r1, r4, #32
   13f96:	d004      	beq.n	13fa2 <__cxa_begin_catch+0x1e>
   13f98:	bb83      	cbnz	r3, 13ffc <__cxa_begin_catch+0x78>
   13f9a:	461c      	mov	r4, r3
   13f9c:	6001      	str	r1, [r0, #0]
   13f9e:	4620      	mov	r0, r4
   13fa0:	bd38      	pop	{r3, r4, r5, pc}
   13fa2:	7862      	ldrb	r2, [r4, #1]
   13fa4:	2a4e      	cmp	r2, #78	; 0x4e
   13fa6:	d1f7      	bne.n	13f98 <__cxa_begin_catch+0x14>
   13fa8:	78a2      	ldrb	r2, [r4, #2]
   13faa:	2a55      	cmp	r2, #85	; 0x55
   13fac:	d1f4      	bne.n	13f98 <__cxa_begin_catch+0x14>
   13fae:	78e2      	ldrb	r2, [r4, #3]
   13fb0:	2a43      	cmp	r2, #67	; 0x43
   13fb2:	d1f1      	bne.n	13f98 <__cxa_begin_catch+0x14>
   13fb4:	7922      	ldrb	r2, [r4, #4]
   13fb6:	2a43      	cmp	r2, #67	; 0x43
   13fb8:	d1ee      	bne.n	13f98 <__cxa_begin_catch+0x14>
   13fba:	7962      	ldrb	r2, [r4, #5]
   13fbc:	2a2b      	cmp	r2, #43	; 0x2b
   13fbe:	d1eb      	bne.n	13f98 <__cxa_begin_catch+0x14>
   13fc0:	79a2      	ldrb	r2, [r4, #6]
   13fc2:	2a2b      	cmp	r2, #43	; 0x2b
   13fc4:	d1e8      	bne.n	13f98 <__cxa_begin_catch+0x14>
   13fc6:	79e2      	ldrb	r2, [r4, #7]
   13fc8:	2a01      	cmp	r2, #1
   13fca:	d8e5      	bhi.n	13f98 <__cxa_begin_catch+0x14>
   13fcc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13fd0:	2a00      	cmp	r2, #0
   13fd2:	db10      	blt.n	13ff6 <__cxa_begin_catch+0x72>
   13fd4:	3201      	adds	r2, #1
   13fd6:	6845      	ldr	r5, [r0, #4]
   13fd8:	f844 2c0c 	str.w	r2, [r4, #-12]
   13fdc:	3d01      	subs	r5, #1
   13fde:	6045      	str	r5, [r0, #4]
   13fe0:	428b      	cmp	r3, r1
   13fe2:	bf1c      	itt	ne
   13fe4:	f844 3c10 	strne.w	r3, [r4, #-16]
   13fe8:	6001      	strne	r1, [r0, #0]
   13fea:	4620      	mov	r0, r4
   13fec:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13fee:	f008 ff39 	bl	1ce64 <_Unwind_Complete>
   13ff2:	4620      	mov	r0, r4
   13ff4:	bd38      	pop	{r3, r4, r5, pc}
   13ff6:	f1c2 0201 	rsb	r2, r2, #1
   13ffa:	e7ec      	b.n	13fd6 <__cxa_begin_catch+0x52>
   13ffc:	f7ff fc64 	bl	138c8 <_ZSt9terminatev>

00014000 <__cxa_end_catch>:
   14000:	b508      	push	{r3, lr}
   14002:	f000 f843 	bl	1408c <__cxa_get_globals_fast>
   14006:	4602      	mov	r2, r0
   14008:	6800      	ldr	r0, [r0, #0]
   1400a:	2800      	cmp	r0, #0
   1400c:	d03d      	beq.n	1408a <__cxa_end_catch+0x8a>
   1400e:	f890 3020 	ldrb.w	r3, [r0, #32]
   14012:	2b47      	cmp	r3, #71	; 0x47
   14014:	d006      	beq.n	14024 <__cxa_end_catch+0x24>
   14016:	2300      	movs	r3, #0
   14018:	6013      	str	r3, [r2, #0]
   1401a:	3020      	adds	r0, #32
   1401c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14020:	f008 bf22 	b.w	1ce68 <_Unwind_DeleteException>
   14024:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   14028:	2b4e      	cmp	r3, #78	; 0x4e
   1402a:	d1f4      	bne.n	14016 <__cxa_end_catch+0x16>
   1402c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   14030:	2b55      	cmp	r3, #85	; 0x55
   14032:	d1f0      	bne.n	14016 <__cxa_end_catch+0x16>
   14034:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   14038:	2b43      	cmp	r3, #67	; 0x43
   1403a:	d1ec      	bne.n	14016 <__cxa_end_catch+0x16>
   1403c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14040:	2b43      	cmp	r3, #67	; 0x43
   14042:	d1e8      	bne.n	14016 <__cxa_end_catch+0x16>
   14044:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   14048:	2b2b      	cmp	r3, #43	; 0x2b
   1404a:	d1e4      	bne.n	14016 <__cxa_end_catch+0x16>
   1404c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   14050:	2b2b      	cmp	r3, #43	; 0x2b
   14052:	d1e0      	bne.n	14016 <__cxa_end_catch+0x16>
   14054:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   14058:	2b01      	cmp	r3, #1
   1405a:	d8dc      	bhi.n	14016 <__cxa_end_catch+0x16>
   1405c:	6943      	ldr	r3, [r0, #20]
   1405e:	2b00      	cmp	r3, #0
   14060:	db05      	blt.n	1406e <__cxa_end_catch+0x6e>
   14062:	3b01      	subs	r3, #1
   14064:	d008      	beq.n	14078 <__cxa_end_catch+0x78>
   14066:	1c5a      	adds	r2, r3, #1
   14068:	d00d      	beq.n	14086 <__cxa_end_catch+0x86>
   1406a:	6143      	str	r3, [r0, #20]
   1406c:	bd08      	pop	{r3, pc}
   1406e:	3301      	adds	r3, #1
   14070:	d1fb      	bne.n	1406a <__cxa_end_catch+0x6a>
   14072:	6901      	ldr	r1, [r0, #16]
   14074:	6011      	str	r1, [r2, #0]
   14076:	e7f8      	b.n	1406a <__cxa_end_catch+0x6a>
   14078:	6903      	ldr	r3, [r0, #16]
   1407a:	6013      	str	r3, [r2, #0]
   1407c:	3020      	adds	r0, #32
   1407e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14082:	f008 bef1 	b.w	1ce68 <_Unwind_DeleteException>
   14086:	f7ff fc1f 	bl	138c8 <_ZSt9terminatev>
   1408a:	bd08      	pop	{r3, pc}

0001408c <__cxa_get_globals_fast>:
   1408c:	4800      	ldr	r0, [pc, #0]	; (14090 <__cxa_get_globals_fast+0x4>)
   1408e:	4770      	bx	lr
   14090:	200022a0 	.word	0x200022a0

00014094 <__cxa_get_globals>:
   14094:	4800      	ldr	r0, [pc, #0]	; (14098 <__cxa_get_globals+0x4>)
   14096:	4770      	bx	lr
   14098:	200022a0 	.word	0x200022a0

0001409c <_ZL28read_encoded_value_with_basehjPKhPj>:
   1409c:	2850      	cmp	r0, #80	; 0x50
   1409e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140a0:	d054      	beq.n	1414c <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   140a2:	f000 040f 	and.w	r4, r0, #15
   140a6:	2c0c      	cmp	r4, #12
   140a8:	d84e      	bhi.n	14148 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   140aa:	e8df f004 	tbb	[pc, r4]
   140ae:	3907      	.short	0x3907
   140b0:	4d170749 	.word	0x4d170749
   140b4:	1f4d4d4d 	.word	0x1f4d4d4d
   140b8:	071b      	.short	0x071b
   140ba:	17          	.byte	0x17
   140bb:	00          	.byte	0x00
   140bc:	4615      	mov	r5, r2
   140be:	f855 4b04 	ldr.w	r4, [r5], #4
   140c2:	b144      	cbz	r4, 140d6 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   140c4:	f000 0670 	and.w	r6, r0, #112	; 0x70
   140c8:	2e10      	cmp	r6, #16
   140ca:	bf08      	it	eq
   140cc:	4611      	moveq	r1, r2
   140ce:	440c      	add	r4, r1
   140d0:	0602      	lsls	r2, r0, #24
   140d2:	bf48      	it	mi
   140d4:	6824      	ldrmi	r4, [r4, #0]
   140d6:	601c      	str	r4, [r3, #0]
   140d8:	4628      	mov	r0, r5
   140da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140dc:	4615      	mov	r5, r2
   140de:	f855 4b08 	ldr.w	r4, [r5], #8
   140e2:	e7ee      	b.n	140c2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   140e4:	4615      	mov	r5, r2
   140e6:	f935 4b02 	ldrsh.w	r4, [r5], #2
   140ea:	e7ea      	b.n	140c2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   140ec:	2400      	movs	r4, #0
   140ee:	4627      	mov	r7, r4
   140f0:	4615      	mov	r5, r2
   140f2:	f815 eb01 	ldrb.w	lr, [r5], #1
   140f6:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   140fa:	40be      	lsls	r6, r7
   140fc:	f01e 0f80 	tst.w	lr, #128	; 0x80
   14100:	ea44 0406 	orr.w	r4, r4, r6
   14104:	f107 0707 	add.w	r7, r7, #7
   14108:	d1f3      	bne.n	140f2 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   1410a:	2f1f      	cmp	r7, #31
   1410c:	d8d9      	bhi.n	140c2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1410e:	f01e 0f40 	tst.w	lr, #64	; 0x40
   14112:	d0d6      	beq.n	140c2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   14114:	f04f 36ff 	mov.w	r6, #4294967295
   14118:	fa06 f707 	lsl.w	r7, r6, r7
   1411c:	433c      	orrs	r4, r7
   1411e:	e7d1      	b.n	140c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   14120:	2400      	movs	r4, #0
   14122:	4627      	mov	r7, r4
   14124:	4615      	mov	r5, r2
   14126:	f815 eb01 	ldrb.w	lr, [r5], #1
   1412a:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   1412e:	40be      	lsls	r6, r7
   14130:	f01e 0f80 	tst.w	lr, #128	; 0x80
   14134:	ea44 0406 	orr.w	r4, r4, r6
   14138:	f107 0707 	add.w	r7, r7, #7
   1413c:	d1f3      	bne.n	14126 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   1413e:	e7c0      	b.n	140c2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   14140:	4615      	mov	r5, r2
   14142:	f835 4b02 	ldrh.w	r4, [r5], #2
   14146:	e7bc      	b.n	140c2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   14148:	f009 fc44 	bl	1d9d4 <abort>
   1414c:	3203      	adds	r2, #3
   1414e:	f022 0503 	bic.w	r5, r2, #3
   14152:	f855 4b04 	ldr.w	r4, [r5], #4
   14156:	601c      	str	r4, [r3, #0]
   14158:	4628      	mov	r0, r5
   1415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001415c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   1415c:	28ff      	cmp	r0, #255	; 0xff
   1415e:	d00d      	beq.n	1417c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14160:	f000 0070 	and.w	r0, r0, #112	; 0x70
   14164:	2820      	cmp	r0, #32
   14166:	d015      	beq.n	14194 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   14168:	d90a      	bls.n	14180 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1416a:	2840      	cmp	r0, #64	; 0x40
   1416c:	d00f      	beq.n	1418e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1416e:	2850      	cmp	r0, #80	; 0x50
   14170:	d004      	beq.n	1417c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14172:	2830      	cmp	r0, #48	; 0x30
   14174:	d108      	bne.n	14188 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   14176:	4608      	mov	r0, r1
   14178:	f009 bc26 	b.w	1d9c8 <_Unwind_GetDataRelBase>
   1417c:	2000      	movs	r0, #0
   1417e:	4770      	bx	lr
   14180:	2800      	cmp	r0, #0
   14182:	d0fb      	beq.n	1417c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14184:	2810      	cmp	r0, #16
   14186:	d0f9      	beq.n	1417c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   14188:	b508      	push	{r3, lr}
   1418a:	f009 fc23 	bl	1d9d4 <abort>
   1418e:	4608      	mov	r0, r1
   14190:	f009 bc06 	b.w	1d9a0 <_Unwind_GetRegionStart>
   14194:	4608      	mov	r0, r1
   14196:	f009 bc13 	b.w	1d9c0 <_Unwind_GetTextRelBase>
   1419a:	bf00      	nop

0001419c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1419e:	460c      	mov	r4, r1
   141a0:	4615      	mov	r5, r2
   141a2:	4607      	mov	r7, r0
   141a4:	2800      	cmp	r0, #0
   141a6:	d044      	beq.n	14232 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   141a8:	f009 fbfa 	bl	1d9a0 <_Unwind_GetRegionStart>
   141ac:	6028      	str	r0, [r5, #0]
   141ae:	7826      	ldrb	r6, [r4, #0]
   141b0:	2eff      	cmp	r6, #255	; 0xff
   141b2:	f104 0401 	add.w	r4, r4, #1
   141b6:	d032      	beq.n	1421e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   141b8:	4639      	mov	r1, r7
   141ba:	4630      	mov	r0, r6
   141bc:	f7ff ffce 	bl	1415c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   141c0:	4622      	mov	r2, r4
   141c2:	4601      	mov	r1, r0
   141c4:	1d2b      	adds	r3, r5, #4
   141c6:	4630      	mov	r0, r6
   141c8:	f7ff ff68 	bl	1409c <_ZL28read_encoded_value_with_basehjPKhPj>
   141cc:	4604      	mov	r4, r0
   141ce:	1c60      	adds	r0, r4, #1
   141d0:	7823      	ldrb	r3, [r4, #0]
   141d2:	752b      	strb	r3, [r5, #20]
   141d4:	2bff      	cmp	r3, #255	; 0xff
   141d6:	d029      	beq.n	1422c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   141d8:	2310      	movs	r3, #16
   141da:	2400      	movs	r4, #0
   141dc:	752b      	strb	r3, [r5, #20]
   141de:	4622      	mov	r2, r4
   141e0:	f810 1b01 	ldrb.w	r1, [r0], #1
   141e4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   141e8:	4093      	lsls	r3, r2
   141ea:	0609      	lsls	r1, r1, #24
   141ec:	ea44 0403 	orr.w	r4, r4, r3
   141f0:	f102 0207 	add.w	r2, r2, #7
   141f4:	d4f4      	bmi.n	141e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   141f6:	4404      	add	r4, r0
   141f8:	60ec      	str	r4, [r5, #12]
   141fa:	7803      	ldrb	r3, [r0, #0]
   141fc:	756b      	strb	r3, [r5, #21]
   141fe:	2400      	movs	r4, #0
   14200:	3001      	adds	r0, #1
   14202:	4622      	mov	r2, r4
   14204:	f810 1b01 	ldrb.w	r1, [r0], #1
   14208:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1420c:	4093      	lsls	r3, r2
   1420e:	431c      	orrs	r4, r3
   14210:	060b      	lsls	r3, r1, #24
   14212:	f102 0207 	add.w	r2, r2, #7
   14216:	d4f5      	bmi.n	14204 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   14218:	4404      	add	r4, r0
   1421a:	612c      	str	r4, [r5, #16]
   1421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1421e:	6068      	str	r0, [r5, #4]
   14220:	7823      	ldrb	r3, [r4, #0]
   14222:	752b      	strb	r3, [r5, #20]
   14224:	2bff      	cmp	r3, #255	; 0xff
   14226:	f104 0001 	add.w	r0, r4, #1
   1422a:	d1d5      	bne.n	141d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   1422c:	2300      	movs	r3, #0
   1422e:	60eb      	str	r3, [r5, #12]
   14230:	e7e3      	b.n	141fa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   14232:	e7bb      	b.n	141ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00014234 <__gxx_personality_v0>:
   14234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14238:	f000 0403 	and.w	r4, r0, #3
   1423c:	b097      	sub	sp, #92	; 0x5c
   1423e:	2300      	movs	r3, #0
   14240:	2c01      	cmp	r4, #1
   14242:	4689      	mov	r9, r1
   14244:	4617      	mov	r7, r2
   14246:	930a      	str	r3, [sp, #40]	; 0x28
   14248:	d01e      	beq.n	14288 <__gxx_personality_v0+0x54>
   1424a:	d30e      	bcc.n	1426a <__gxx_personality_v0+0x36>
   1424c:	2c02      	cmp	r4, #2
   1424e:	d10a      	bne.n	14266 <__gxx_personality_v0+0x32>
   14250:	4639      	mov	r1, r7
   14252:	4648      	mov	r0, r9
   14254:	f009 fb90 	bl	1d978 <__gnu_unwind_frame>
   14258:	2800      	cmp	r0, #0
   1425a:	f000 80a5 	beq.w	143a8 <__gxx_personality_v0+0x174>
   1425e:	2009      	movs	r0, #9
   14260:	b017      	add	sp, #92	; 0x5c
   14262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14266:	f009 fbb5 	bl	1d9d4 <abort>
   1426a:	0700      	lsls	r0, r0, #28
   1426c:	d4f0      	bmi.n	14250 <__gxx_personality_v0+0x1c>
   1426e:	2301      	movs	r3, #1
   14270:	9303      	str	r3, [sp, #12]
   14272:	aa16      	add	r2, sp, #88	; 0x58
   14274:	2300      	movs	r3, #0
   14276:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1427a:	4619      	mov	r1, r3
   1427c:	9200      	str	r2, [sp, #0]
   1427e:	4638      	mov	r0, r7
   14280:	220c      	movs	r2, #12
   14282:	f008 fe1d 	bl	1cec0 <_Unwind_VRS_Set>
   14286:	e00f      	b.n	142a8 <__gxx_personality_v0+0x74>
   14288:	f010 0408 	ands.w	r4, r0, #8
   1428c:	f000 8090 	beq.w	143b0 <__gxx_personality_v0+0x17c>
   14290:	aa16      	add	r2, sp, #88	; 0x58
   14292:	f044 0402 	orr.w	r4, r4, #2
   14296:	f842 1d2c 	str.w	r1, [r2, #-44]!
   1429a:	4638      	mov	r0, r7
   1429c:	9200      	str	r2, [sp, #0]
   1429e:	4619      	mov	r1, r3
   142a0:	220c      	movs	r2, #12
   142a2:	9403      	str	r4, [sp, #12]
   142a4:	f008 fe0c 	bl	1cec0 <_Unwind_VRS_Set>
   142a8:	4638      	mov	r0, r7
   142aa:	f009 fb7f 	bl	1d9ac <_Unwind_GetLanguageSpecificData>
   142ae:	9005      	str	r0, [sp, #20]
   142b0:	2800      	cmp	r0, #0
   142b2:	d0cd      	beq.n	14250 <__gxx_personality_v0+0x1c>
   142b4:	ab10      	add	r3, sp, #64	; 0x40
   142b6:	461a      	mov	r2, r3
   142b8:	9905      	ldr	r1, [sp, #20]
   142ba:	9306      	str	r3, [sp, #24]
   142bc:	4638      	mov	r0, r7
   142be:	f7ff ff6d 	bl	1419c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   142c2:	4639      	mov	r1, r7
   142c4:	4604      	mov	r4, r0
   142c6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   142ca:	f7ff ff47 	bl	1415c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   142ce:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   142d2:	2300      	movs	r3, #0
   142d4:	9012      	str	r0, [sp, #72]	; 0x48
   142d6:	4619      	mov	r1, r3
   142d8:	220f      	movs	r2, #15
   142da:	f8cd b000 	str.w	fp, [sp]
   142de:	4638      	mov	r0, r7
   142e0:	f008 fdc8 	bl	1ce74 <_Unwind_VRS_Get>
   142e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   142e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   142e8:	f023 0301 	bic.w	r3, r3, #1
   142ec:	42a2      	cmp	r2, r4
   142ee:	f103 36ff 	add.w	r6, r3, #4294967295
   142f2:	d975      	bls.n	143e0 <__gxx_personality_v0+0x1ac>
   142f4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   142f8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   142fc:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   14300:	2100      	movs	r1, #0
   14302:	4628      	mov	r0, r5
   14304:	f7ff ff2a 	bl	1415c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14308:	4622      	mov	r2, r4
   1430a:	4653      	mov	r3, sl
   1430c:	4601      	mov	r1, r0
   1430e:	4628      	mov	r0, r5
   14310:	f7ff fec4 	bl	1409c <_ZL28read_encoded_value_with_basehjPKhPj>
   14314:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   14318:	4605      	mov	r5, r0
   1431a:	2100      	movs	r1, #0
   1431c:	4620      	mov	r0, r4
   1431e:	f7ff ff1d 	bl	1415c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   14322:	462a      	mov	r2, r5
   14324:	4643      	mov	r3, r8
   14326:	4601      	mov	r1, r0
   14328:	4620      	mov	r0, r4
   1432a:	f7ff feb7 	bl	1409c <_ZL28read_encoded_value_with_basehjPKhPj>
   1432e:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   14332:	4605      	mov	r5, r0
   14334:	2100      	movs	r1, #0
   14336:	4620      	mov	r0, r4
   14338:	f7ff ff10 	bl	1415c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1433c:	462a      	mov	r2, r5
   1433e:	4601      	mov	r1, r0
   14340:	465b      	mov	r3, fp
   14342:	4620      	mov	r0, r4
   14344:	f7ff feaa 	bl	1409c <_ZL28read_encoded_value_with_basehjPKhPj>
   14348:	4604      	mov	r4, r0
   1434a:	2000      	movs	r0, #0
   1434c:	4602      	mov	r2, r0
   1434e:	f814 1b01 	ldrb.w	r1, [r4], #1
   14352:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   14356:	4093      	lsls	r3, r2
   14358:	0609      	lsls	r1, r1, #24
   1435a:	ea40 0003 	orr.w	r0, r0, r3
   1435e:	f102 0207 	add.w	r2, r2, #7
   14362:	d4f4      	bmi.n	1434e <__gxx_personality_v0+0x11a>
   14364:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14368:	4413      	add	r3, r2
   1436a:	429e      	cmp	r6, r3
   1436c:	d231      	bcs.n	143d2 <__gxx_personality_v0+0x19e>
   1436e:	9b03      	ldr	r3, [sp, #12]
   14370:	07db      	lsls	r3, r3, #31
   14372:	d539      	bpl.n	143e8 <__gxx_personality_v0+0x1b4>
   14374:	2500      	movs	r5, #0
   14376:	9504      	str	r5, [sp, #16]
   14378:	2300      	movs	r3, #0
   1437a:	4619      	mov	r1, r3
   1437c:	220d      	movs	r2, #13
   1437e:	f8cd 8000 	str.w	r8, [sp]
   14382:	4638      	mov	r0, r7
   14384:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14386:	f008 fd75 	bl	1ce74 <_Unwind_VRS_Get>
   1438a:	9a05      	ldr	r2, [sp, #20]
   1438c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1438e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   14392:	9a04      	ldr	r2, [sp, #16]
   14394:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   14398:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   1439c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   143a0:	f8c9 3020 	str.w	r3, [r9, #32]
   143a4:	2006      	movs	r0, #6
   143a6:	e75b      	b.n	14260 <__gxx_personality_v0+0x2c>
   143a8:	2008      	movs	r0, #8
   143aa:	b017      	add	sp, #92	; 0x5c
   143ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143b0:	ab10      	add	r3, sp, #64	; 0x40
   143b2:	9300      	str	r3, [sp, #0]
   143b4:	9306      	str	r3, [sp, #24]
   143b6:	220d      	movs	r2, #13
   143b8:	4623      	mov	r3, r4
   143ba:	4621      	mov	r1, r4
   143bc:	4638      	mov	r0, r7
   143be:	f8d9 5020 	ldr.w	r5, [r9, #32]
   143c2:	f008 fd57 	bl	1ce74 <_Unwind_VRS_Get>
   143c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   143c8:	429d      	cmp	r5, r3
   143ca:	d012      	beq.n	143f2 <__gxx_personality_v0+0x1be>
   143cc:	2302      	movs	r3, #2
   143ce:	9303      	str	r3, [sp, #12]
   143d0:	e74f      	b.n	14272 <__gxx_personality_v0+0x3e>
   143d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   143d4:	4413      	add	r3, r2
   143d6:	429e      	cmp	r6, r3
   143d8:	d359      	bcc.n	1448e <__gxx_personality_v0+0x25a>
   143da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   143dc:	42a3      	cmp	r3, r4
   143de:	d88d      	bhi.n	142fc <__gxx_personality_v0+0xc8>
   143e0:	2500      	movs	r5, #0
   143e2:	9504      	str	r5, [sp, #16]
   143e4:	2401      	movs	r4, #1
   143e6:	e105      	b.n	145f4 <__gxx_personality_v0+0x3c0>
   143e8:	9b03      	ldr	r3, [sp, #12]
   143ea:	071b      	lsls	r3, r3, #28
   143ec:	d54c      	bpl.n	14488 <__gxx_personality_v0+0x254>
   143ee:	f7ff fa6b 	bl	138c8 <_ZSt9terminatev>
   143f2:	aa16      	add	r2, sp, #88	; 0x58
   143f4:	4623      	mov	r3, r4
   143f6:	f842 9d2c 	str.w	r9, [r2, #-44]!
   143fa:	4621      	mov	r1, r4
   143fc:	9200      	str	r2, [sp, #0]
   143fe:	4638      	mov	r0, r7
   14400:	220c      	movs	r2, #12
   14402:	f008 fd5d 	bl	1cec0 <_Unwind_VRS_Set>
   14406:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   1440a:	9304      	str	r3, [sp, #16]
   1440c:	2b00      	cmp	r3, #0
   1440e:	d03b      	beq.n	14488 <__gxx_personality_v0+0x254>
   14410:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   14414:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   14418:	2403      	movs	r4, #3
   1441a:	2d00      	cmp	r5, #0
   1441c:	f2c0 8106 	blt.w	1462c <__gxx_personality_v0+0x3f8>
   14420:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14424:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14428:	a916      	add	r1, sp, #88	; 0x58
   1442a:	2300      	movs	r3, #0
   1442c:	f841 9d28 	str.w	r9, [r1, #-40]!
   14430:	461a      	mov	r2, r3
   14432:	9100      	str	r1, [sp, #0]
   14434:	4638      	mov	r0, r7
   14436:	4619      	mov	r1, r3
   14438:	f008 fd42 	bl	1cec0 <_Unwind_VRS_Set>
   1443c:	2300      	movs	r3, #0
   1443e:	4619      	mov	r1, r3
   14440:	2201      	movs	r2, #1
   14442:	f8cd a000 	str.w	sl, [sp]
   14446:	4638      	mov	r0, r7
   14448:	950d      	str	r5, [sp, #52]	; 0x34
   1444a:	f008 fd39 	bl	1cec0 <_Unwind_VRS_Set>
   1444e:	2300      	movs	r3, #0
   14450:	4619      	mov	r1, r3
   14452:	220f      	movs	r2, #15
   14454:	f8cd 8000 	str.w	r8, [sp]
   14458:	4638      	mov	r0, r7
   1445a:	f008 fd0b 	bl	1ce74 <_Unwind_VRS_Get>
   1445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14460:	9a04      	ldr	r2, [sp, #16]
   14462:	f8cd 8000 	str.w	r8, [sp]
   14466:	f003 0501 	and.w	r5, r3, #1
   1446a:	2300      	movs	r3, #0
   1446c:	4315      	orrs	r5, r2
   1446e:	4638      	mov	r0, r7
   14470:	4619      	mov	r1, r3
   14472:	220f      	movs	r2, #15
   14474:	950e      	str	r5, [sp, #56]	; 0x38
   14476:	f008 fd23 	bl	1cec0 <_Unwind_VRS_Set>
   1447a:	2c02      	cmp	r4, #2
   1447c:	f000 8080 	beq.w	14580 <__gxx_personality_v0+0x34c>
   14480:	2007      	movs	r0, #7
   14482:	b017      	add	sp, #92	; 0x5c
   14484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14488:	4648      	mov	r0, r9
   1448a:	f7ff fcfb 	bl	13e84 <__cxa_call_terminate>
   1448e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14490:	9304      	str	r3, [sp, #16]
   14492:	461a      	mov	r2, r3
   14494:	2b00      	cmp	r3, #0
   14496:	d178      	bne.n	1458a <__gxx_personality_v0+0x356>
   14498:	2800      	cmp	r0, #0
   1449a:	f43f aed9 	beq.w	14250 <__gxx_personality_v0+0x1c>
   1449e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   144a0:	9a04      	ldr	r2, [sp, #16]
   144a2:	3801      	subs	r0, #1
   144a4:	4403      	add	r3, r0
   144a6:	2a00      	cmp	r2, #0
   144a8:	f43f aed2 	beq.w	14250 <__gxx_personality_v0+0x1c>
   144ac:	2b00      	cmp	r3, #0
   144ae:	d075      	beq.n	1459c <__gxx_personality_v0+0x368>
   144b0:	9a03      	ldr	r2, [sp, #12]
   144b2:	f012 0208 	ands.w	r2, r2, #8
   144b6:	9209      	str	r2, [sp, #36]	; 0x24
   144b8:	f000 80f6 	beq.w	146a8 <__gxx_personality_v0+0x474>
   144bc:	2147      	movs	r1, #71	; 0x47
   144be:	224e      	movs	r2, #78	; 0x4e
   144c0:	f889 1000 	strb.w	r1, [r9]
   144c4:	f889 2001 	strb.w	r2, [r9, #1]
   144c8:	2155      	movs	r1, #85	; 0x55
   144ca:	2243      	movs	r2, #67	; 0x43
   144cc:	f889 1002 	strb.w	r1, [r9, #2]
   144d0:	f889 2003 	strb.w	r2, [r9, #3]
   144d4:	2146      	movs	r1, #70	; 0x46
   144d6:	224f      	movs	r2, #79	; 0x4f
   144d8:	f889 1004 	strb.w	r1, [r9, #4]
   144dc:	f889 2005 	strb.w	r2, [r9, #5]
   144e0:	2152      	movs	r1, #82	; 0x52
   144e2:	2200      	movs	r2, #0
   144e4:	f889 1006 	strb.w	r1, [r9, #6]
   144e8:	f889 2007 	strb.w	r2, [r9, #7]
   144ec:	2200      	movs	r2, #0
   144ee:	9208      	str	r2, [sp, #32]
   144f0:	9707      	str	r7, [sp, #28]
   144f2:	2500      	movs	r5, #0
   144f4:	4629      	mov	r1, r5
   144f6:	e000      	b.n	144fa <__gxx_personality_v0+0x2c6>
   144f8:	4623      	mov	r3, r4
   144fa:	461c      	mov	r4, r3
   144fc:	f814 0b01 	ldrb.w	r0, [r4], #1
   14500:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14504:	408a      	lsls	r2, r1
   14506:	0606      	lsls	r6, r0, #24
   14508:	ea45 0502 	orr.w	r5, r5, r2
   1450c:	f101 0107 	add.w	r1, r1, #7
   14510:	d4f2      	bmi.n	144f8 <__gxx_personality_v0+0x2c4>
   14512:	291f      	cmp	r1, #31
   14514:	d805      	bhi.n	14522 <__gxx_personality_v0+0x2ee>
   14516:	0642      	lsls	r2, r0, #25
   14518:	d503      	bpl.n	14522 <__gxx_personality_v0+0x2ee>
   1451a:	2201      	movs	r2, #1
   1451c:	408a      	lsls	r2, r1
   1451e:	4252      	negs	r2, r2
   14520:	4315      	orrs	r5, r2
   14522:	2600      	movs	r6, #0
   14524:	4631      	mov	r1, r6
   14526:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1452a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1452e:	408a      	lsls	r2, r1
   14530:	0607      	lsls	r7, r0, #24
   14532:	ea46 0602 	orr.w	r6, r6, r2
   14536:	f101 0107 	add.w	r1, r1, #7
   1453a:	d4f4      	bmi.n	14526 <__gxx_personality_v0+0x2f2>
   1453c:	291f      	cmp	r1, #31
   1453e:	d805      	bhi.n	1454c <__gxx_personality_v0+0x318>
   14540:	0640      	lsls	r0, r0, #25
   14542:	d503      	bpl.n	1454c <__gxx_personality_v0+0x318>
   14544:	2301      	movs	r3, #1
   14546:	408b      	lsls	r3, r1
   14548:	425b      	negs	r3, r3
   1454a:	431e      	orrs	r6, r3
   1454c:	2d00      	cmp	r5, #0
   1454e:	d05c      	beq.n	1460a <__gxx_personality_v0+0x3d6>
   14550:	dd5e      	ble.n	14610 <__gxx_personality_v0+0x3dc>
   14552:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   14556:	28ff      	cmp	r0, #255	; 0xff
   14558:	f000 80a4 	beq.w	146a4 <__gxx_personality_v0+0x470>
   1455c:	f000 0307 	and.w	r3, r0, #7
   14560:	2b04      	cmp	r3, #4
   14562:	f63f ae80 	bhi.w	14266 <__gxx_personality_v0+0x32>
   14566:	a201      	add	r2, pc, #4	; (adr r2, 1456c <__gxx_personality_v0+0x338>)
   14568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1456c:	000145d7 	.word	0x000145d7
   14570:	00014267 	.word	0x00014267
   14574:	000145dd 	.word	0x000145dd
   14578:	000145d7 	.word	0x000145d7
   1457c:	000145b5 	.word	0x000145b5
   14580:	4648      	mov	r0, r9
   14582:	f7ff fbf7 	bl	13d74 <__cxa_begin_cleanup>
   14586:	2007      	movs	r0, #7
   14588:	e66a      	b.n	14260 <__gxx_personality_v0+0x2c>
   1458a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1458c:	441a      	add	r2, r3
   1458e:	9204      	str	r2, [sp, #16]
   14590:	2800      	cmp	r0, #0
   14592:	d184      	bne.n	1449e <__gxx_personality_v0+0x26a>
   14594:	9b04      	ldr	r3, [sp, #16]
   14596:	2b00      	cmp	r3, #0
   14598:	f43f ae5a 	beq.w	14250 <__gxx_personality_v0+0x1c>
   1459c:	9b03      	ldr	r3, [sp, #12]
   1459e:	f013 0301 	ands.w	r3, r3, #1
   145a2:	f47f ae55 	bne.w	14250 <__gxx_personality_v0+0x1c>
   145a6:	9a03      	ldr	r2, [sp, #12]
   145a8:	f012 0508 	ands.w	r5, r2, #8
   145ac:	f040 8097 	bne.w	146de <__gxx_personality_v0+0x4aa>
   145b0:	2402      	movs	r4, #2
   145b2:	e739      	b.n	14428 <__gxx_personality_v0+0x1f4>
   145b4:	00eb      	lsls	r3, r5, #3
   145b6:	425b      	negs	r3, r3
   145b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   145ba:	9912      	ldr	r1, [sp, #72]	; 0x48
   145bc:	441a      	add	r2, r3
   145be:	4643      	mov	r3, r8
   145c0:	f7ff fd6c 	bl	1409c <_ZL28read_encoded_value_with_basehjPKhPj>
   145c4:	990e      	ldr	r1, [sp, #56]	; 0x38
   145c6:	b199      	cbz	r1, 145f0 <__gxx_personality_v0+0x3bc>
   145c8:	f1b9 0f00 	cmp.w	r9, #0
   145cc:	d109      	bne.n	145e2 <__gxx_personality_v0+0x3ae>
   145ce:	2e00      	cmp	r6, #0
   145d0:	d077      	beq.n	146c2 <__gxx_personality_v0+0x48e>
   145d2:	19a3      	adds	r3, r4, r6
   145d4:	e78d      	b.n	144f2 <__gxx_personality_v0+0x2be>
   145d6:	00ab      	lsls	r3, r5, #2
   145d8:	425b      	negs	r3, r3
   145da:	e7ed      	b.n	145b8 <__gxx_personality_v0+0x384>
   145dc:	006b      	lsls	r3, r5, #1
   145de:	425b      	negs	r3, r3
   145e0:	e7ea      	b.n	145b8 <__gxx_personality_v0+0x384>
   145e2:	ab0a      	add	r3, sp, #40	; 0x28
   145e4:	2200      	movs	r2, #0
   145e6:	4648      	mov	r0, r9
   145e8:	f7ff fb68 	bl	13cbc <__cxa_type_match>
   145ec:	2800      	cmp	r0, #0
   145ee:	d0ee      	beq.n	145ce <__gxx_personality_v0+0x39a>
   145f0:	9f07      	ldr	r7, [sp, #28]
   145f2:	2403      	movs	r4, #3
   145f4:	9b03      	ldr	r3, [sp, #12]
   145f6:	07da      	lsls	r2, r3, #31
   145f8:	d460      	bmi.n	146bc <__gxx_personality_v0+0x488>
   145fa:	9b03      	ldr	r3, [sp, #12]
   145fc:	0719      	lsls	r1, r3, #28
   145fe:	d466      	bmi.n	146ce <__gxx_personality_v0+0x49a>
   14600:	2c01      	cmp	r4, #1
   14602:	f43f af41 	beq.w	14488 <__gxx_personality_v0+0x254>
   14606:	9905      	ldr	r1, [sp, #20]
   14608:	e707      	b.n	1441a <__gxx_personality_v0+0x1e6>
   1460a:	2301      	movs	r3, #1
   1460c:	9308      	str	r3, [sp, #32]
   1460e:	e7de      	b.n	145ce <__gxx_personality_v0+0x39a>
   14610:	f1b9 0f00 	cmp.w	r9, #0
   14614:	d001      	beq.n	1461a <__gxx_personality_v0+0x3e6>
   14616:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14618:	b35b      	cbz	r3, 14672 <__gxx_personality_v0+0x43e>
   1461a:	1c6b      	adds	r3, r5, #1
   1461c:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14626:	2b00      	cmp	r3, #0
   14628:	d1d1      	bne.n	145ce <__gxx_personality_v0+0x39a>
   1462a:	e7e1      	b.n	145f0 <__gxx_personality_v0+0x3bc>
   1462c:	9a06      	ldr	r2, [sp, #24]
   1462e:	4638      	mov	r0, r7
   14630:	f7ff fdb4 	bl	1419c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   14634:	4639      	mov	r1, r7
   14636:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1463a:	f7ff fd8f 	bl	1415c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1463e:	00aa      	lsls	r2, r5, #2
   14640:	f082 0203 	eor.w	r2, r2, #3
   14644:	43d2      	mvns	r2, r2
   14646:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14648:	9012      	str	r0, [sp, #72]	; 0x48
   1464a:	58b3      	ldr	r3, [r6, r2]
   1464c:	4416      	add	r6, r2
   1464e:	b133      	cbz	r3, 1465e <__gxx_personality_v0+0x42a>
   14650:	4632      	mov	r2, r6
   14652:	2300      	movs	r3, #0
   14654:	f852 1f04 	ldr.w	r1, [r2, #4]!
   14658:	3301      	adds	r3, #1
   1465a:	2900      	cmp	r1, #0
   1465c:	d1fa      	bne.n	14654 <__gxx_personality_v0+0x420>
   1465e:	2204      	movs	r2, #4
   14660:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   14664:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   14668:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   1466c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   14670:	e6d6      	b.n	14420 <__gxx_personality_v0+0x1ec>
   14672:	1c6f      	adds	r7, r5, #1
   14674:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   14678:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1467a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1467c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   14680:	920f      	str	r2, [sp, #60]	; 0x3c
   14682:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   14686:	b921      	cbnz	r1, 14692 <__gxx_personality_v0+0x45e>
   14688:	e7b2      	b.n	145f0 <__gxx_personality_v0+0x3bc>
   1468a:	f857 1f04 	ldr.w	r1, [r7, #4]!
   1468e:	2900      	cmp	r1, #0
   14690:	d0ae      	beq.n	145f0 <__gxx_personality_v0+0x3bc>
   14692:	4439      	add	r1, r7
   14694:	465b      	mov	r3, fp
   14696:	2200      	movs	r2, #0
   14698:	4648      	mov	r0, r9
   1469a:	f7ff fb0f 	bl	13cbc <__cxa_type_match>
   1469e:	2800      	cmp	r0, #0
   146a0:	d0f3      	beq.n	1468a <__gxx_personality_v0+0x456>
   146a2:	e794      	b.n	145ce <__gxx_personality_v0+0x39a>
   146a4:	2300      	movs	r3, #0
   146a6:	e787      	b.n	145b8 <__gxx_personality_v0+0x384>
   146a8:	f899 2007 	ldrb.w	r2, [r9, #7]
   146ac:	2a01      	cmp	r2, #1
   146ae:	bf0c      	ite	eq
   146b0:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   146b4:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   146b8:	920a      	str	r2, [sp, #40]	; 0x28
   146ba:	e717      	b.n	144ec <__gxx_personality_v0+0x2b8>
   146bc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   146c0:	e65a      	b.n	14378 <__gxx_personality_v0+0x144>
   146c2:	9b08      	ldr	r3, [sp, #32]
   146c4:	9f07      	ldr	r7, [sp, #28]
   146c6:	2b00      	cmp	r3, #0
   146c8:	f47f af68 	bne.w	1459c <__gxx_personality_v0+0x368>
   146cc:	e5c0      	b.n	14250 <__gxx_personality_v0+0x1c>
   146ce:	2c01      	cmp	r4, #1
   146d0:	f43f ae8d 	beq.w	143ee <__gxx_personality_v0+0x1ba>
   146d4:	2d00      	cmp	r5, #0
   146d6:	f6bf aea3 	bge.w	14420 <__gxx_personality_v0+0x1ec>
   146da:	f7ff f903 	bl	138e4 <_ZSt10unexpectedv>
   146de:	461d      	mov	r5, r3
   146e0:	2402      	movs	r4, #2
   146e2:	e6a1      	b.n	14428 <__gxx_personality_v0+0x1f4>
   146e4:	f7ff fc4e 	bl	13f84 <__cxa_begin_catch>
   146e8:	e681      	b.n	143ee <__gxx_personality_v0+0x1ba>
   146ea:	bf00      	nop

000146ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   146ec:	b570      	push	{r4, r5, r6, lr}
   146ee:	4b3c      	ldr	r3, [pc, #240]	; (147e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   146f0:	781a      	ldrb	r2, [r3, #0]
   146f2:	b082      	sub	sp, #8
   146f4:	2a00      	cmp	r2, #0
   146f6:	d135      	bne.n	14764 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   146f8:	2401      	movs	r4, #1
   146fa:	701c      	strb	r4, [r3, #0]
   146fc:	f006 fbd2 	bl	1aea4 <__cxa_current_exception_type>
   14700:	2800      	cmp	r0, #0
   14702:	d05b      	beq.n	147bc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   14704:	6844      	ldr	r4, [r0, #4]
   14706:	4d37      	ldr	r5, [pc, #220]	; (147e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14708:	7823      	ldrb	r3, [r4, #0]
   1470a:	2b2a      	cmp	r3, #42	; 0x2a
   1470c:	ab02      	add	r3, sp, #8
   1470e:	f04f 32ff 	mov.w	r2, #4294967295
   14712:	bf08      	it	eq
   14714:	3401      	addeq	r4, #1
   14716:	f843 2d04 	str.w	r2, [r3, #-4]!
   1471a:	2200      	movs	r2, #0
   1471c:	4611      	mov	r1, r2
   1471e:	4620      	mov	r0, r4
   14720:	f006 fb52 	bl	1adc8 <__cxa_demangle>
   14724:	682b      	ldr	r3, [r5, #0]
   14726:	4606      	mov	r6, r0
   14728:	68db      	ldr	r3, [r3, #12]
   1472a:	482f      	ldr	r0, [pc, #188]	; (147e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   1472c:	2230      	movs	r2, #48	; 0x30
   1472e:	2101      	movs	r1, #1
   14730:	f009 fba4 	bl	1de7c <fwrite>
   14734:	9b01      	ldr	r3, [sp, #4]
   14736:	b17b      	cbz	r3, 14758 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   14738:	682b      	ldr	r3, [r5, #0]
   1473a:	4620      	mov	r0, r4
   1473c:	68d9      	ldr	r1, [r3, #12]
   1473e:	f009 f9c7 	bl	1dad0 <fputs>
   14742:	682b      	ldr	r3, [r5, #0]
   14744:	4829      	ldr	r0, [pc, #164]	; (147ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   14746:	68db      	ldr	r3, [r3, #12]
   14748:	2202      	movs	r2, #2
   1474a:	2101      	movs	r1, #1
   1474c:	f009 fb96 	bl	1de7c <fwrite>
   14750:	9b01      	ldr	r3, [sp, #4]
   14752:	b18b      	cbz	r3, 14778 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   14754:	f7ff f940 	bl	139d8 <__cxa_rethrow>
   14758:	682b      	ldr	r3, [r5, #0]
   1475a:	4630      	mov	r0, r6
   1475c:	68d9      	ldr	r1, [r3, #12]
   1475e:	f009 f9b7 	bl	1dad0 <fputs>
   14762:	e7ee      	b.n	14742 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   14764:	4b1f      	ldr	r3, [pc, #124]	; (147e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14766:	4822      	ldr	r0, [pc, #136]	; (147f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   14768:	681b      	ldr	r3, [r3, #0]
   1476a:	221d      	movs	r2, #29
   1476c:	68db      	ldr	r3, [r3, #12]
   1476e:	2101      	movs	r1, #1
   14770:	f009 fb84 	bl	1de7c <fwrite>
   14774:	f009 f92e 	bl	1d9d4 <abort>
   14778:	4630      	mov	r0, r6
   1477a:	f009 fbe1 	bl	1df40 <free>
   1477e:	e7e9      	b.n	14754 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   14780:	2901      	cmp	r1, #1
   14782:	460c      	mov	r4, r1
   14784:	d127      	bne.n	147d6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   14786:	f7ff fbfd 	bl	13f84 <__cxa_begin_catch>
   1478a:	6803      	ldr	r3, [r0, #0]
   1478c:	689b      	ldr	r3, [r3, #8]
   1478e:	4798      	blx	r3
   14790:	682b      	ldr	r3, [r5, #0]
   14792:	4606      	mov	r6, r0
   14794:	68db      	ldr	r3, [r3, #12]
   14796:	4817      	ldr	r0, [pc, #92]	; (147f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   14798:	4621      	mov	r1, r4
   1479a:	220b      	movs	r2, #11
   1479c:	f009 fb6e 	bl	1de7c <fwrite>
   147a0:	682b      	ldr	r3, [r5, #0]
   147a2:	4630      	mov	r0, r6
   147a4:	68d9      	ldr	r1, [r3, #12]
   147a6:	f009 f993 	bl	1dad0 <fputs>
   147aa:	682b      	ldr	r3, [r5, #0]
   147ac:	200a      	movs	r0, #10
   147ae:	68d9      	ldr	r1, [r3, #12]
   147b0:	f009 f91e 	bl	1d9f0 <fputc>
   147b4:	f7ff fc24 	bl	14000 <__cxa_end_catch>
   147b8:	f009 f90c 	bl	1d9d4 <abort>
   147bc:	4b09      	ldr	r3, [pc, #36]	; (147e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   147be:	480e      	ldr	r0, [pc, #56]	; (147f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   147c0:	681b      	ldr	r3, [r3, #0]
   147c2:	4621      	mov	r1, r4
   147c4:	68db      	ldr	r3, [r3, #12]
   147c6:	222d      	movs	r2, #45	; 0x2d
   147c8:	f009 fb58 	bl	1de7c <fwrite>
   147cc:	e7f4      	b.n	147b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   147ce:	f7ff fc17 	bl	14000 <__cxa_end_catch>
   147d2:	f7ff fa6d 	bl	13cb0 <__cxa_end_cleanup>
   147d6:	f7ff fbd5 	bl	13f84 <__cxa_begin_catch>
   147da:	f7ff fc11 	bl	14000 <__cxa_end_catch>
   147de:	e7eb      	b.n	147b8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   147e0:	200022ac 	.word	0x200022ac
   147e4:	20000100 	.word	0x20000100
   147e8:	00023d68 	.word	0x00023d68
   147ec:	00023d9c 	.word	0x00023d9c
   147f0:	00023d48 	.word	0x00023d48
   147f4:	00023dd0 	.word	0x00023dd0
   147f8:	00023da0 	.word	0x00023da0

000147fc <d_make_comp>:
   147fc:	b470      	push	{r4, r5, r6}
   147fe:	1e4c      	subs	r4, r1, #1
   14800:	2c4c      	cmp	r4, #76	; 0x4c
   14802:	d82d      	bhi.n	14860 <d_make_comp+0x64>
   14804:	e8df f004 	tbb	[pc, r4]
   14808:	3c3c3c3c 	.word	0x3c3c3c3c
   1480c:	2c2c2c2c 	.word	0x2c2c2c2c
   14810:	273c2727 	.word	0x273c2727
   14814:	27272727 	.word	0x27272727
   14818:	27272727 	.word	0x27272727
   1481c:	2c272727 	.word	0x2c272727
   14820:	28282828 	.word	0x28282828
   14824:	28282828 	.word	0x28282828
   14828:	2727273c 	.word	0x2727273c
   1482c:	272c2727 	.word	0x272c2727
   14830:	2c3c3e28 	.word	0x2c3c3e28
   14834:	3e28283c 	.word	0x3e28283c
   14838:	27272c2c 	.word	0x27272c2c
   1483c:	3c3c3c27 	.word	0x3c3c3c27
   14840:	3c273c3c 	.word	0x3c273c3c
   14844:	2c3c273c 	.word	0x2c3c273c
   14848:	2727272c 	.word	0x2727272c
   1484c:	272c2c2c 	.word	0x272c2c2c
   14850:	283c2727 	.word	0x283c2727
   14854:	3c          	.byte	0x3c
   14855:	00          	.byte	0x00
   14856:	b11a      	cbz	r2, 14860 <d_make_comp+0x64>
   14858:	6944      	ldr	r4, [r0, #20]
   1485a:	6985      	ldr	r5, [r0, #24]
   1485c:	42ac      	cmp	r4, r5
   1485e:	db02      	blt.n	14866 <d_make_comp+0x6a>
   14860:	2000      	movs	r0, #0
   14862:	bc70      	pop	{r4, r5, r6}
   14864:	4770      	bx	lr
   14866:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1486a:	6906      	ldr	r6, [r0, #16]
   1486c:	00ad      	lsls	r5, r5, #2
   1486e:	3401      	adds	r4, #1
   14870:	6144      	str	r4, [r0, #20]
   14872:	1970      	adds	r0, r6, r5
   14874:	d0f5      	beq.n	14862 <d_make_comp+0x66>
   14876:	5571      	strb	r1, [r6, r5]
   14878:	6042      	str	r2, [r0, #4]
   1487a:	6083      	str	r3, [r0, #8]
   1487c:	bc70      	pop	{r4, r5, r6}
   1487e:	4770      	bx	lr
   14880:	2a00      	cmp	r2, #0
   14882:	d0ed      	beq.n	14860 <d_make_comp+0x64>
   14884:	2b00      	cmp	r3, #0
   14886:	d0eb      	beq.n	14860 <d_make_comp+0x64>
   14888:	6944      	ldr	r4, [r0, #20]
   1488a:	6985      	ldr	r5, [r0, #24]
   1488c:	42ac      	cmp	r4, r5
   1488e:	dae7      	bge.n	14860 <d_make_comp+0x64>
   14890:	e7e9      	b.n	14866 <d_make_comp+0x6a>
   14892:	bf00      	nop

00014894 <d_cv_qualifiers>:
   14894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14898:	68c3      	ldr	r3, [r0, #12]
   1489a:	f1b2 0a00 	subs.w	sl, r2, #0
   1489e:	4604      	mov	r4, r0
   148a0:	460e      	mov	r6, r1
   148a2:	781a      	ldrb	r2, [r3, #0]
   148a4:	bf15      	itete	ne
   148a6:	f04f 091e 	movne.w	r9, #30
   148aa:	f04f 091b 	moveq.w	r9, #27
   148ae:	f04f 081d 	movne.w	r8, #29
   148b2:	f04f 081a 	moveq.w	r8, #26
   148b6:	bf14      	ite	ne
   148b8:	271c      	movne	r7, #28
   148ba:	2719      	moveq	r7, #25
   148bc:	460d      	mov	r5, r1
   148be:	e018      	b.n	148f2 <d_cv_qualifiers+0x5e>
   148c0:	2a56      	cmp	r2, #86	; 0x56
   148c2:	d01f      	beq.n	14904 <d_cv_qualifiers+0x70>
   148c4:	2a4b      	cmp	r2, #75	; 0x4b
   148c6:	d024      	beq.n	14912 <d_cv_qualifiers+0x7e>
   148c8:	2a44      	cmp	r2, #68	; 0x44
   148ca:	d12d      	bne.n	14928 <d_cv_qualifiers+0x94>
   148cc:	785a      	ldrb	r2, [r3, #1]
   148ce:	2a78      	cmp	r2, #120	; 0x78
   148d0:	d127      	bne.n	14922 <d_cv_qualifiers+0x8e>
   148d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   148d4:	3302      	adds	r3, #2
   148d6:	3211      	adds	r2, #17
   148d8:	60e3      	str	r3, [r4, #12]
   148da:	6322      	str	r2, [r4, #48]	; 0x30
   148dc:	214c      	movs	r1, #76	; 0x4c
   148de:	2300      	movs	r3, #0
   148e0:	461a      	mov	r2, r3
   148e2:	4620      	mov	r0, r4
   148e4:	f7ff ff8a 	bl	147fc <d_make_comp>
   148e8:	6028      	str	r0, [r5, #0]
   148ea:	b1c8      	cbz	r0, 14920 <d_cv_qualifiers+0x8c>
   148ec:	68e3      	ldr	r3, [r4, #12]
   148ee:	781a      	ldrb	r2, [r3, #0]
   148f0:	1d05      	adds	r5, r0, #4
   148f2:	2a72      	cmp	r2, #114	; 0x72
   148f4:	d1e4      	bne.n	148c0 <d_cv_qualifiers+0x2c>
   148f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
   148f8:	3301      	adds	r3, #1
   148fa:	3209      	adds	r2, #9
   148fc:	60e3      	str	r3, [r4, #12]
   148fe:	6322      	str	r2, [r4, #48]	; 0x30
   14900:	4639      	mov	r1, r7
   14902:	e7ec      	b.n	148de <d_cv_qualifiers+0x4a>
   14904:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14906:	3301      	adds	r3, #1
   14908:	3209      	adds	r2, #9
   1490a:	60e3      	str	r3, [r4, #12]
   1490c:	6322      	str	r2, [r4, #48]	; 0x30
   1490e:	4641      	mov	r1, r8
   14910:	e7e5      	b.n	148de <d_cv_qualifiers+0x4a>
   14912:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14914:	3301      	adds	r3, #1
   14916:	3206      	adds	r2, #6
   14918:	60e3      	str	r3, [r4, #12]
   1491a:	6322      	str	r2, [r4, #48]	; 0x30
   1491c:	4649      	mov	r1, r9
   1491e:	e7de      	b.n	148de <d_cv_qualifiers+0x4a>
   14920:	4605      	mov	r5, r0
   14922:	4628      	mov	r0, r5
   14924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14928:	f1ba 0f00 	cmp.w	sl, #0
   1492c:	d1f9      	bne.n	14922 <d_cv_qualifiers+0x8e>
   1492e:	2a46      	cmp	r2, #70	; 0x46
   14930:	d1f7      	bne.n	14922 <d_cv_qualifiers+0x8e>
   14932:	42b5      	cmp	r5, r6
   14934:	d0f5      	beq.n	14922 <d_cv_qualifiers+0x8e>
   14936:	201d      	movs	r0, #29
   14938:	211e      	movs	r1, #30
   1493a:	221c      	movs	r2, #28
   1493c:	e007      	b.n	1494e <d_cv_qualifiers+0xba>
   1493e:	2b1b      	cmp	r3, #27
   14940:	d00b      	beq.n	1495a <d_cv_qualifiers+0xc6>
   14942:	2b19      	cmp	r3, #25
   14944:	d100      	bne.n	14948 <d_cv_qualifiers+0xb4>
   14946:	7032      	strb	r2, [r6, #0]
   14948:	3604      	adds	r6, #4
   1494a:	42b5      	cmp	r5, r6
   1494c:	d0e9      	beq.n	14922 <d_cv_qualifiers+0x8e>
   1494e:	6836      	ldr	r6, [r6, #0]
   14950:	7833      	ldrb	r3, [r6, #0]
   14952:	2b1a      	cmp	r3, #26
   14954:	d1f3      	bne.n	1493e <d_cv_qualifiers+0xaa>
   14956:	7030      	strb	r0, [r6, #0]
   14958:	e7f6      	b.n	14948 <d_cv_qualifiers+0xb4>
   1495a:	7031      	strb	r1, [r6, #0]
   1495c:	e7f4      	b.n	14948 <d_cv_qualifiers+0xb4>
   1495e:	bf00      	nop

00014960 <d_ref_qualifier>:
   14960:	b410      	push	{r4}
   14962:	68c3      	ldr	r3, [r0, #12]
   14964:	781c      	ldrb	r4, [r3, #0]
   14966:	2c52      	cmp	r4, #82	; 0x52
   14968:	460a      	mov	r2, r1
   1496a:	d00f      	beq.n	1498c <d_ref_qualifier+0x2c>
   1496c:	2c4f      	cmp	r4, #79	; 0x4f
   1496e:	d003      	beq.n	14978 <d_ref_qualifier+0x18>
   14970:	4608      	mov	r0, r1
   14972:	f85d 4b04 	ldr.w	r4, [sp], #4
   14976:	4770      	bx	lr
   14978:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1497a:	3103      	adds	r1, #3
   1497c:	6301      	str	r1, [r0, #48]	; 0x30
   1497e:	2120      	movs	r1, #32
   14980:	3301      	adds	r3, #1
   14982:	60c3      	str	r3, [r0, #12]
   14984:	f85d 4b04 	ldr.w	r4, [sp], #4
   14988:	2300      	movs	r3, #0
   1498a:	e737      	b.n	147fc <d_make_comp>
   1498c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1498e:	3102      	adds	r1, #2
   14990:	6301      	str	r1, [r0, #48]	; 0x30
   14992:	211f      	movs	r1, #31
   14994:	e7f4      	b.n	14980 <d_ref_qualifier+0x20>
   14996:	bf00      	nop

00014998 <d_count_templates_scopes>:
   14998:	2a00      	cmp	r2, #0
   1499a:	d04d      	beq.n	14a38 <d_count_templates_scopes+0xa0>
   1499c:	b570      	push	{r4, r5, r6, lr}
   1499e:	4605      	mov	r5, r0
   149a0:	460e      	mov	r6, r1
   149a2:	4614      	mov	r4, r2
   149a4:	7823      	ldrb	r3, [r4, #0]
   149a6:	3b01      	subs	r3, #1
   149a8:	2b4c      	cmp	r3, #76	; 0x4c
   149aa:	d82b      	bhi.n	14a04 <d_count_templates_scopes+0x6c>
   149ac:	e8df f003 	tbb	[pc, r3]
   149b0:	3f363636 	.word	0x3f363636
   149b4:	27272a2a 	.word	0x27272a2a
   149b8:	36363636 	.word	0x36363636
   149bc:	36363636 	.word	0x36363636
   149c0:	36363636 	.word	0x36363636
   149c4:	2a363636 	.word	0x2a363636
   149c8:	36363636 	.word	0x36363636
   149cc:	36363636 	.word	0x36363636
   149d0:	2f2f3636 	.word	0x2f2f3636
   149d4:	362a3636 	.word	0x362a3636
   149d8:	2b363636 	.word	0x2b363636
   149dc:	36363636 	.word	0x36363636
   149e0:	3636272a 	.word	0x3636272a
   149e4:	36363636 	.word	0x36363636
   149e8:	36363636 	.word	0x36363636
   149ec:	2a363636 	.word	0x2a363636
   149f0:	2b2b362a 	.word	0x2b2b362a
   149f4:	362a2b2b 	.word	0x362a2b2b
   149f8:	36363636 	.word	0x36363636
   149fc:	36          	.byte	0x36
   149fd:	00          	.byte	0x00
   149fe:	68a4      	ldr	r4, [r4, #8]
   14a00:	2c00      	cmp	r4, #0
   14a02:	d1cf      	bne.n	149a4 <d_count_templates_scopes+0xc>
   14a04:	bd70      	pop	{r4, r5, r6, pc}
   14a06:	6864      	ldr	r4, [r4, #4]
   14a08:	2c00      	cmp	r4, #0
   14a0a:	d1cb      	bne.n	149a4 <d_count_templates_scopes+0xc>
   14a0c:	e7fa      	b.n	14a04 <d_count_templates_scopes+0x6c>
   14a0e:	6862      	ldr	r2, [r4, #4]
   14a10:	7813      	ldrb	r3, [r2, #0]
   14a12:	2b05      	cmp	r3, #5
   14a14:	d103      	bne.n	14a1e <d_count_templates_scopes+0x86>
   14a16:	6833      	ldr	r3, [r6, #0]
   14a18:	3301      	adds	r3, #1
   14a1a:	6033      	str	r3, [r6, #0]
   14a1c:	6862      	ldr	r2, [r4, #4]
   14a1e:	4631      	mov	r1, r6
   14a20:	4628      	mov	r0, r5
   14a22:	f7ff ffb9 	bl	14998 <d_count_templates_scopes>
   14a26:	68a4      	ldr	r4, [r4, #8]
   14a28:	2c00      	cmp	r4, #0
   14a2a:	d1bb      	bne.n	149a4 <d_count_templates_scopes+0xc>
   14a2c:	e7ea      	b.n	14a04 <d_count_templates_scopes+0x6c>
   14a2e:	682b      	ldr	r3, [r5, #0]
   14a30:	3301      	adds	r3, #1
   14a32:	602b      	str	r3, [r5, #0]
   14a34:	6862      	ldr	r2, [r4, #4]
   14a36:	e7f2      	b.n	14a1e <d_count_templates_scopes+0x86>
   14a38:	4770      	bx	lr
   14a3a:	bf00      	nop

00014a3c <d_append_buffer>:
   14a3c:	b37a      	cbz	r2, 14a9e <d_append_buffer+0x62>
   14a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a42:	460d      	mov	r5, r1
   14a44:	4604      	mov	r4, r0
   14a46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14a4a:	18af      	adds	r7, r5, r2
   14a4c:	f04f 0800 	mov.w	r8, #0
   14a50:	e009      	b.n	14a66 <d_append_buffer+0x2a>
   14a52:	460b      	mov	r3, r1
   14a54:	42bd      	cmp	r5, r7
   14a56:	f101 0101 	add.w	r1, r1, #1
   14a5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14a5e:	54e6      	strb	r6, [r4, r3]
   14a60:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14a64:	d019      	beq.n	14a9a <d_append_buffer+0x5e>
   14a66:	29ff      	cmp	r1, #255	; 0xff
   14a68:	f815 6b01 	ldrb.w	r6, [r5], #1
   14a6c:	d1f1      	bne.n	14a52 <d_append_buffer+0x16>
   14a6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14a72:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14a76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14a7a:	4620      	mov	r0, r4
   14a7c:	4798      	blx	r3
   14a7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14a82:	3301      	adds	r3, #1
   14a84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14a88:	2300      	movs	r3, #0
   14a8a:	2101      	movs	r1, #1
   14a8c:	42bd      	cmp	r5, r7
   14a8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14a92:	54e6      	strb	r6, [r4, r3]
   14a94:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14a98:	d1e5      	bne.n	14a66 <d_append_buffer+0x2a>
   14a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a9e:	4770      	bx	lr

00014aa0 <d_number.isra.0>:
   14aa0:	b470      	push	{r4, r5, r6}
   14aa2:	6802      	ldr	r2, [r0, #0]
   14aa4:	7811      	ldrb	r1, [r2, #0]
   14aa6:	296e      	cmp	r1, #110	; 0x6e
   14aa8:	d018      	beq.n	14adc <d_number.isra.0+0x3c>
   14aaa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   14aae:	2b09      	cmp	r3, #9
   14ab0:	d81e      	bhi.n	14af0 <d_number.isra.0+0x50>
   14ab2:	2600      	movs	r6, #0
   14ab4:	2300      	movs	r3, #0
   14ab6:	3201      	adds	r2, #1
   14ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14abc:	6002      	str	r2, [r0, #0]
   14abe:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   14ac2:	7811      	ldrb	r1, [r2, #0]
   14ac4:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14ac8:	2d09      	cmp	r5, #9
   14aca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   14ace:	d9f2      	bls.n	14ab6 <d_number.isra.0+0x16>
   14ad0:	b10e      	cbz	r6, 14ad6 <d_number.isra.0+0x36>
   14ad2:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   14ad6:	4618      	mov	r0, r3
   14ad8:	bc70      	pop	{r4, r5, r6}
   14ada:	4770      	bx	lr
   14adc:	1c53      	adds	r3, r2, #1
   14ade:	6003      	str	r3, [r0, #0]
   14ae0:	7851      	ldrb	r1, [r2, #1]
   14ae2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14ae6:	2a09      	cmp	r2, #9
   14ae8:	d802      	bhi.n	14af0 <d_number.isra.0+0x50>
   14aea:	461a      	mov	r2, r3
   14aec:	2601      	movs	r6, #1
   14aee:	e7e1      	b.n	14ab4 <d_number.isra.0+0x14>
   14af0:	2300      	movs	r3, #0
   14af2:	e7f0      	b.n	14ad6 <d_number.isra.0+0x36>

00014af4 <d_number_component>:
   14af4:	6943      	ldr	r3, [r0, #20]
   14af6:	6982      	ldr	r2, [r0, #24]
   14af8:	4293      	cmp	r3, r2
   14afa:	b510      	push	{r4, lr}
   14afc:	da0f      	bge.n	14b1e <d_number_component+0x2a>
   14afe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14b02:	6901      	ldr	r1, [r0, #16]
   14b04:	0092      	lsls	r2, r2, #2
   14b06:	3301      	adds	r3, #1
   14b08:	188c      	adds	r4, r1, r2
   14b0a:	6143      	str	r3, [r0, #20]
   14b0c:	d005      	beq.n	14b1a <d_number_component+0x26>
   14b0e:	2341      	movs	r3, #65	; 0x41
   14b10:	300c      	adds	r0, #12
   14b12:	548b      	strb	r3, [r1, r2]
   14b14:	f7ff ffc4 	bl	14aa0 <d_number.isra.0>
   14b18:	6060      	str	r0, [r4, #4]
   14b1a:	4620      	mov	r0, r4
   14b1c:	bd10      	pop	{r4, pc}
   14b1e:	2400      	movs	r4, #0
   14b20:	4620      	mov	r0, r4
   14b22:	bd10      	pop	{r4, pc}

00014b24 <d_compact_number>:
   14b24:	b510      	push	{r4, lr}
   14b26:	68c3      	ldr	r3, [r0, #12]
   14b28:	781a      	ldrb	r2, [r3, #0]
   14b2a:	2a5f      	cmp	r2, #95	; 0x5f
   14b2c:	4604      	mov	r4, r0
   14b2e:	d00d      	beq.n	14b4c <d_compact_number+0x28>
   14b30:	2a6e      	cmp	r2, #110	; 0x6e
   14b32:	d00f      	beq.n	14b54 <d_compact_number+0x30>
   14b34:	300c      	adds	r0, #12
   14b36:	f7ff ffb3 	bl	14aa0 <d_number.isra.0>
   14b3a:	3001      	adds	r0, #1
   14b3c:	d40a      	bmi.n	14b54 <d_compact_number+0x30>
   14b3e:	68e3      	ldr	r3, [r4, #12]
   14b40:	781a      	ldrb	r2, [r3, #0]
   14b42:	2a5f      	cmp	r2, #95	; 0x5f
   14b44:	d106      	bne.n	14b54 <d_compact_number+0x30>
   14b46:	3301      	adds	r3, #1
   14b48:	60e3      	str	r3, [r4, #12]
   14b4a:	bd10      	pop	{r4, pc}
   14b4c:	3301      	adds	r3, #1
   14b4e:	2000      	movs	r0, #0
   14b50:	60e3      	str	r3, [r4, #12]
   14b52:	bd10      	pop	{r4, pc}
   14b54:	f04f 30ff 	mov.w	r0, #4294967295
   14b58:	bd10      	pop	{r4, pc}
   14b5a:	bf00      	nop

00014b5c <d_template_param>:
   14b5c:	b538      	push	{r3, r4, r5, lr}
   14b5e:	68c3      	ldr	r3, [r0, #12]
   14b60:	781a      	ldrb	r2, [r3, #0]
   14b62:	2a54      	cmp	r2, #84	; 0x54
   14b64:	d001      	beq.n	14b6a <d_template_param+0xe>
   14b66:	2000      	movs	r0, #0
   14b68:	bd38      	pop	{r3, r4, r5, pc}
   14b6a:	3301      	adds	r3, #1
   14b6c:	60c3      	str	r3, [r0, #12]
   14b6e:	4604      	mov	r4, r0
   14b70:	f7ff ffd8 	bl	14b24 <d_compact_number>
   14b74:	1e05      	subs	r5, r0, #0
   14b76:	dbf6      	blt.n	14b66 <d_template_param+0xa>
   14b78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14b7a:	6963      	ldr	r3, [r4, #20]
   14b7c:	69a1      	ldr	r1, [r4, #24]
   14b7e:	3201      	adds	r2, #1
   14b80:	428b      	cmp	r3, r1
   14b82:	62a2      	str	r2, [r4, #40]	; 0x28
   14b84:	daef      	bge.n	14b66 <d_template_param+0xa>
   14b86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14b8a:	6921      	ldr	r1, [r4, #16]
   14b8c:	0092      	lsls	r2, r2, #2
   14b8e:	3301      	adds	r3, #1
   14b90:	1888      	adds	r0, r1, r2
   14b92:	6163      	str	r3, [r4, #20]
   14b94:	d002      	beq.n	14b9c <d_template_param+0x40>
   14b96:	2305      	movs	r3, #5
   14b98:	548b      	strb	r3, [r1, r2]
   14b9a:	6045      	str	r5, [r0, #4]
   14b9c:	bd38      	pop	{r3, r4, r5, pc}
   14b9e:	bf00      	nop

00014ba0 <d_source_name>:
   14ba0:	b570      	push	{r4, r5, r6, lr}
   14ba2:	4604      	mov	r4, r0
   14ba4:	300c      	adds	r0, #12
   14ba6:	f7ff ff7b 	bl	14aa0 <d_number.isra.0>
   14baa:	1e06      	subs	r6, r0, #0
   14bac:	dd4d      	ble.n	14c4a <d_source_name+0xaa>
   14bae:	68e5      	ldr	r5, [r4, #12]
   14bb0:	6863      	ldr	r3, [r4, #4]
   14bb2:	1b5b      	subs	r3, r3, r5
   14bb4:	429e      	cmp	r6, r3
   14bb6:	dc2b      	bgt.n	14c10 <d_source_name+0x70>
   14bb8:	68a2      	ldr	r2, [r4, #8]
   14bba:	19ab      	adds	r3, r5, r6
   14bbc:	0752      	lsls	r2, r2, #29
   14bbe:	60e3      	str	r3, [r4, #12]
   14bc0:	d504      	bpl.n	14bcc <d_source_name+0x2c>
   14bc2:	5daa      	ldrb	r2, [r5, r6]
   14bc4:	2a24      	cmp	r2, #36	; 0x24
   14bc6:	bf04      	itt	eq
   14bc8:	3301      	addeq	r3, #1
   14bca:	60e3      	streq	r3, [r4, #12]
   14bcc:	2e09      	cmp	r6, #9
   14bce:	dd0c      	ble.n	14bea <d_source_name+0x4a>
   14bd0:	2208      	movs	r2, #8
   14bd2:	491f      	ldr	r1, [pc, #124]	; (14c50 <d_source_name+0xb0>)
   14bd4:	4628      	mov	r0, r5
   14bd6:	f009 fcd3 	bl	1e580 <memcmp>
   14bda:	b930      	cbnz	r0, 14bea <d_source_name+0x4a>
   14bdc:	7a2b      	ldrb	r3, [r5, #8]
   14bde:	2b2e      	cmp	r3, #46	; 0x2e
   14be0:	d019      	beq.n	14c16 <d_source_name+0x76>
   14be2:	2b5f      	cmp	r3, #95	; 0x5f
   14be4:	d017      	beq.n	14c16 <d_source_name+0x76>
   14be6:	2b24      	cmp	r3, #36	; 0x24
   14be8:	d015      	beq.n	14c16 <d_source_name+0x76>
   14bea:	6963      	ldr	r3, [r4, #20]
   14bec:	69a2      	ldr	r2, [r4, #24]
   14bee:	4293      	cmp	r3, r2
   14bf0:	da0e      	bge.n	14c10 <d_source_name+0x70>
   14bf2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14bf6:	6921      	ldr	r1, [r4, #16]
   14bf8:	0092      	lsls	r2, r2, #2
   14bfa:	3301      	adds	r3, #1
   14bfc:	1888      	adds	r0, r1, r2
   14bfe:	6163      	str	r3, [r4, #20]
   14c00:	d006      	beq.n	14c10 <d_source_name+0x70>
   14c02:	b12d      	cbz	r5, 14c10 <d_source_name+0x70>
   14c04:	2300      	movs	r3, #0
   14c06:	548b      	strb	r3, [r1, r2]
   14c08:	6045      	str	r5, [r0, #4]
   14c0a:	6086      	str	r6, [r0, #8]
   14c0c:	62e0      	str	r0, [r4, #44]	; 0x2c
   14c0e:	bd70      	pop	{r4, r5, r6, pc}
   14c10:	2000      	movs	r0, #0
   14c12:	62e0      	str	r0, [r4, #44]	; 0x2c
   14c14:	bd70      	pop	{r4, r5, r6, pc}
   14c16:	7a6b      	ldrb	r3, [r5, #9]
   14c18:	2b4e      	cmp	r3, #78	; 0x4e
   14c1a:	d1e6      	bne.n	14bea <d_source_name+0x4a>
   14c1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14c1e:	6962      	ldr	r2, [r4, #20]
   14c20:	69a1      	ldr	r1, [r4, #24]
   14c22:	3316      	adds	r3, #22
   14c24:	1b9e      	subs	r6, r3, r6
   14c26:	428a      	cmp	r2, r1
   14c28:	6326      	str	r6, [r4, #48]	; 0x30
   14c2a:	daf1      	bge.n	14c10 <d_source_name+0x70>
   14c2c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14c30:	6921      	ldr	r1, [r4, #16]
   14c32:	009b      	lsls	r3, r3, #2
   14c34:	3201      	adds	r2, #1
   14c36:	18c8      	adds	r0, r1, r3
   14c38:	6162      	str	r2, [r4, #20]
   14c3a:	d0ea      	beq.n	14c12 <d_source_name+0x72>
   14c3c:	2500      	movs	r5, #0
   14c3e:	54cd      	strb	r5, [r1, r3]
   14c40:	4a04      	ldr	r2, [pc, #16]	; (14c54 <d_source_name+0xb4>)
   14c42:	6042      	str	r2, [r0, #4]
   14c44:	2315      	movs	r3, #21
   14c46:	6083      	str	r3, [r0, #8]
   14c48:	e7e3      	b.n	14c12 <d_source_name+0x72>
   14c4a:	2000      	movs	r0, #0
   14c4c:	bd70      	pop	{r4, r5, r6, pc}
   14c4e:	bf00      	nop
   14c50:	00024574 	.word	0x00024574
   14c54:	00024580 	.word	0x00024580

00014c58 <d_abi_tags>:
   14c58:	b570      	push	{r4, r5, r6, lr}
   14c5a:	68c3      	ldr	r3, [r0, #12]
   14c5c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   14c5e:	781a      	ldrb	r2, [r3, #0]
   14c60:	2a42      	cmp	r2, #66	; 0x42
   14c62:	4604      	mov	r4, r0
   14c64:	460d      	mov	r5, r1
   14c66:	d10f      	bne.n	14c88 <d_abi_tags+0x30>
   14c68:	3301      	adds	r3, #1
   14c6a:	60e3      	str	r3, [r4, #12]
   14c6c:	4620      	mov	r0, r4
   14c6e:	f7ff ff97 	bl	14ba0 <d_source_name>
   14c72:	462a      	mov	r2, r5
   14c74:	4603      	mov	r3, r0
   14c76:	214b      	movs	r1, #75	; 0x4b
   14c78:	4620      	mov	r0, r4
   14c7a:	f7ff fdbf 	bl	147fc <d_make_comp>
   14c7e:	68e3      	ldr	r3, [r4, #12]
   14c80:	781a      	ldrb	r2, [r3, #0]
   14c82:	2a42      	cmp	r2, #66	; 0x42
   14c84:	4605      	mov	r5, r0
   14c86:	d0ef      	beq.n	14c68 <d_abi_tags+0x10>
   14c88:	62e6      	str	r6, [r4, #44]	; 0x2c
   14c8a:	4628      	mov	r0, r5
   14c8c:	bd70      	pop	{r4, r5, r6, pc}
   14c8e:	bf00      	nop

00014c90 <d_substitution>:
   14c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c94:	4605      	mov	r5, r0
   14c96:	68c0      	ldr	r0, [r0, #12]
   14c98:	7803      	ldrb	r3, [r0, #0]
   14c9a:	2b53      	cmp	r3, #83	; 0x53
   14c9c:	d002      	beq.n	14ca4 <d_substitution+0x14>
   14c9e:	2000      	movs	r0, #0
   14ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ca4:	1c43      	adds	r3, r0, #1
   14ca6:	60eb      	str	r3, [r5, #12]
   14ca8:	7842      	ldrb	r2, [r0, #1]
   14caa:	b1a2      	cbz	r2, 14cd6 <d_substitution+0x46>
   14cac:	1c83      	adds	r3, r0, #2
   14cae:	60eb      	str	r3, [r5, #12]
   14cb0:	7842      	ldrb	r2, [r0, #1]
   14cb2:	2a5f      	cmp	r2, #95	; 0x5f
   14cb4:	d15a      	bne.n	14d6c <d_substitution+0xdc>
   14cb6:	2300      	movs	r3, #0
   14cb8:	6a2a      	ldr	r2, [r5, #32]
   14cba:	4293      	cmp	r3, r2
   14cbc:	d2ef      	bcs.n	14c9e <d_substitution+0xe>
   14cbe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14cc0:	69e9      	ldr	r1, [r5, #28]
   14cc2:	3201      	adds	r2, #1
   14cc4:	62aa      	str	r2, [r5, #40]	; 0x28
   14cc6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   14cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14cce:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   14cd2:	2b19      	cmp	r3, #25
   14cd4:	d94f      	bls.n	14d76 <d_substitution+0xe6>
   14cd6:	68ab      	ldr	r3, [r5, #8]
   14cd8:	f003 0308 	and.w	r3, r3, #8
   14cdc:	2b00      	cmp	r3, #0
   14cde:	bf14      	ite	ne
   14ce0:	2401      	movne	r4, #1
   14ce2:	2400      	moveq	r4, #0
   14ce4:	d101      	bne.n	14cea <d_substitution+0x5a>
   14ce6:	2900      	cmp	r1, #0
   14ce8:	d169      	bne.n	14dbe <d_substitution+0x12e>
   14cea:	4b46      	ldr	r3, [pc, #280]	; (14e04 <d_substitution+0x174>)
   14cec:	2174      	movs	r1, #116	; 0x74
   14cee:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   14cf2:	e003      	b.n	14cfc <d_substitution+0x6c>
   14cf4:	331c      	adds	r3, #28
   14cf6:	4283      	cmp	r3, r0
   14cf8:	d2d1      	bcs.n	14c9e <d_substitution+0xe>
   14cfa:	7819      	ldrb	r1, [r3, #0]
   14cfc:	428a      	cmp	r2, r1
   14cfe:	d1f9      	bne.n	14cf4 <d_substitution+0x64>
   14d00:	695e      	ldr	r6, [r3, #20]
   14d02:	2e00      	cmp	r6, #0
   14d04:	d07b      	beq.n	14dfe <d_substitution+0x16e>
   14d06:	696a      	ldr	r2, [r5, #20]
   14d08:	69a9      	ldr	r1, [r5, #24]
   14d0a:	428a      	cmp	r2, r1
   14d0c:	da63      	bge.n	14dd6 <d_substitution+0x146>
   14d0e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   14d12:	f8d5 e010 	ldr.w	lr, [r5, #16]
   14d16:	f8d3 8018 	ldr.w	r8, [r3, #24]
   14d1a:	00bf      	lsls	r7, r7, #2
   14d1c:	3201      	adds	r2, #1
   14d1e:	eb1e 0007 	adds.w	r0, lr, r7
   14d22:	616a      	str	r2, [r5, #20]
   14d24:	d006      	beq.n	14d34 <d_substitution+0xa4>
   14d26:	f04f 0c18 	mov.w	ip, #24
   14d2a:	f80e c007 	strb.w	ip, [lr, r7]
   14d2e:	6046      	str	r6, [r0, #4]
   14d30:	f8c0 8008 	str.w	r8, [r0, #8]
   14d34:	62e8      	str	r0, [r5, #44]	; 0x2c
   14d36:	2c00      	cmp	r4, #0
   14d38:	d04a      	beq.n	14dd0 <d_substitution+0x140>
   14d3a:	68de      	ldr	r6, [r3, #12]
   14d3c:	691c      	ldr	r4, [r3, #16]
   14d3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14d40:	4291      	cmp	r1, r2
   14d42:	4423      	add	r3, r4
   14d44:	632b      	str	r3, [r5, #48]	; 0x30
   14d46:	dd41      	ble.n	14dcc <d_substitution+0x13c>
   14d48:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14d4c:	6929      	ldr	r1, [r5, #16]
   14d4e:	009b      	lsls	r3, r3, #2
   14d50:	3201      	adds	r2, #1
   14d52:	18c8      	adds	r0, r1, r3
   14d54:	616a      	str	r2, [r5, #20]
   14d56:	d003      	beq.n	14d60 <d_substitution+0xd0>
   14d58:	2218      	movs	r2, #24
   14d5a:	54ca      	strb	r2, [r1, r3]
   14d5c:	6046      	str	r6, [r0, #4]
   14d5e:	6084      	str	r4, [r0, #8]
   14d60:	68eb      	ldr	r3, [r5, #12]
   14d62:	781b      	ldrb	r3, [r3, #0]
   14d64:	2b42      	cmp	r3, #66	; 0x42
   14d66:	d038      	beq.n	14dda <d_substitution+0x14a>
   14d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d6c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14d70:	b2e3      	uxtb	r3, r4
   14d72:	2b09      	cmp	r3, #9
   14d74:	d8ab      	bhi.n	14cce <d_substitution+0x3e>
   14d76:	2100      	movs	r1, #0
   14d78:	e00d      	b.n	14d96 <d_substitution+0x106>
   14d7a:	3b30      	subs	r3, #48	; 0x30
   14d7c:	4299      	cmp	r1, r3
   14d7e:	d88e      	bhi.n	14c9e <d_substitution+0xe>
   14d80:	68e9      	ldr	r1, [r5, #12]
   14d82:	780a      	ldrb	r2, [r1, #0]
   14d84:	1c48      	adds	r0, r1, #1
   14d86:	b11a      	cbz	r2, 14d90 <d_substitution+0x100>
   14d88:	60e8      	str	r0, [r5, #12]
   14d8a:	780a      	ldrb	r2, [r1, #0]
   14d8c:	2a5f      	cmp	r2, #95	; 0x5f
   14d8e:	d014      	beq.n	14dba <d_substitution+0x12a>
   14d90:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14d94:	4619      	mov	r1, r3
   14d96:	b2e4      	uxtb	r4, r4
   14d98:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14d9c:	2c09      	cmp	r4, #9
   14d9e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   14da2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14da6:	d9e8      	bls.n	14d7a <d_substitution+0xea>
   14da8:	2819      	cmp	r0, #25
   14daa:	f63f af78 	bhi.w	14c9e <d_substitution+0xe>
   14dae:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14db2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14db6:	3b37      	subs	r3, #55	; 0x37
   14db8:	e7e0      	b.n	14d7c <d_substitution+0xec>
   14dba:	3301      	adds	r3, #1
   14dbc:	e77c      	b.n	14cb8 <d_substitution+0x28>
   14dbe:	68eb      	ldr	r3, [r5, #12]
   14dc0:	781b      	ldrb	r3, [r3, #0]
   14dc2:	3b43      	subs	r3, #67	; 0x43
   14dc4:	2b01      	cmp	r3, #1
   14dc6:	bf98      	it	ls
   14dc8:	2401      	movls	r4, #1
   14dca:	e78e      	b.n	14cea <d_substitution+0x5a>
   14dcc:	2000      	movs	r0, #0
   14dce:	e7c7      	b.n	14d60 <d_substitution+0xd0>
   14dd0:	685e      	ldr	r6, [r3, #4]
   14dd2:	689c      	ldr	r4, [r3, #8]
   14dd4:	e7b3      	b.n	14d3e <d_substitution+0xae>
   14dd6:	2000      	movs	r0, #0
   14dd8:	e7ac      	b.n	14d34 <d_substitution+0xa4>
   14dda:	4601      	mov	r1, r0
   14ddc:	4628      	mov	r0, r5
   14dde:	f7ff ff3b 	bl	14c58 <d_abi_tags>
   14de2:	2800      	cmp	r0, #0
   14de4:	f43f af5b 	beq.w	14c9e <d_substitution+0xe>
   14de8:	6a2b      	ldr	r3, [r5, #32]
   14dea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14dec:	4293      	cmp	r3, r2
   14dee:	dabb      	bge.n	14d68 <d_substitution+0xd8>
   14df0:	69e9      	ldr	r1, [r5, #28]
   14df2:	1c5a      	adds	r2, r3, #1
   14df4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14df8:	622a      	str	r2, [r5, #32]
   14dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14dfe:	69a9      	ldr	r1, [r5, #24]
   14e00:	696a      	ldr	r2, [r5, #20]
   14e02:	e798      	b.n	14d36 <d_substitution+0xa6>
   14e04:	00023ddc 	.word	0x00023ddc

00014e08 <d_call_offset>:
   14e08:	b538      	push	{r3, r4, r5, lr}
   14e0a:	4604      	mov	r4, r0
   14e0c:	b929      	cbnz	r1, 14e1a <d_call_offset+0x12>
   14e0e:	68c3      	ldr	r3, [r0, #12]
   14e10:	781a      	ldrb	r2, [r3, #0]
   14e12:	b132      	cbz	r2, 14e22 <d_call_offset+0x1a>
   14e14:	1c5a      	adds	r2, r3, #1
   14e16:	60c2      	str	r2, [r0, #12]
   14e18:	7819      	ldrb	r1, [r3, #0]
   14e1a:	2968      	cmp	r1, #104	; 0x68
   14e1c:	d019      	beq.n	14e52 <d_call_offset+0x4a>
   14e1e:	2976      	cmp	r1, #118	; 0x76
   14e20:	d001      	beq.n	14e26 <d_call_offset+0x1e>
   14e22:	2000      	movs	r0, #0
   14e24:	bd38      	pop	{r3, r4, r5, pc}
   14e26:	f104 050c 	add.w	r5, r4, #12
   14e2a:	4628      	mov	r0, r5
   14e2c:	f7ff fe38 	bl	14aa0 <d_number.isra.0>
   14e30:	68e3      	ldr	r3, [r4, #12]
   14e32:	781a      	ldrb	r2, [r3, #0]
   14e34:	2a5f      	cmp	r2, #95	; 0x5f
   14e36:	d1f4      	bne.n	14e22 <d_call_offset+0x1a>
   14e38:	3301      	adds	r3, #1
   14e3a:	60e3      	str	r3, [r4, #12]
   14e3c:	4628      	mov	r0, r5
   14e3e:	f7ff fe2f 	bl	14aa0 <d_number.isra.0>
   14e42:	68e3      	ldr	r3, [r4, #12]
   14e44:	781a      	ldrb	r2, [r3, #0]
   14e46:	2a5f      	cmp	r2, #95	; 0x5f
   14e48:	d1eb      	bne.n	14e22 <d_call_offset+0x1a>
   14e4a:	3301      	adds	r3, #1
   14e4c:	60e3      	str	r3, [r4, #12]
   14e4e:	2001      	movs	r0, #1
   14e50:	bd38      	pop	{r3, r4, r5, pc}
   14e52:	f104 000c 	add.w	r0, r4, #12
   14e56:	f7ff fe23 	bl	14aa0 <d_number.isra.0>
   14e5a:	e7f2      	b.n	14e42 <d_call_offset+0x3a>

00014e5c <d_lookup_template_argument.isra.6>:
   14e5c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14e60:	b19b      	cbz	r3, 14e8a <d_lookup_template_argument.isra.6+0x2e>
   14e62:	680a      	ldr	r2, [r1, #0]
   14e64:	685b      	ldr	r3, [r3, #4]
   14e66:	2a00      	cmp	r2, #0
   14e68:	689b      	ldr	r3, [r3, #8]
   14e6a:	db09      	blt.n	14e80 <d_lookup_template_argument.isra.6+0x24>
   14e6c:	b923      	cbnz	r3, 14e78 <d_lookup_template_argument.isra.6+0x1c>
   14e6e:	e007      	b.n	14e80 <d_lookup_template_argument.isra.6+0x24>
   14e70:	b142      	cbz	r2, 14e84 <d_lookup_template_argument.isra.6+0x28>
   14e72:	689b      	ldr	r3, [r3, #8]
   14e74:	3a01      	subs	r2, #1
   14e76:	b11b      	cbz	r3, 14e80 <d_lookup_template_argument.isra.6+0x24>
   14e78:	7819      	ldrb	r1, [r3, #0]
   14e7a:	292f      	cmp	r1, #47	; 0x2f
   14e7c:	d0f8      	beq.n	14e70 <d_lookup_template_argument.isra.6+0x14>
   14e7e:	2300      	movs	r3, #0
   14e80:	4618      	mov	r0, r3
   14e82:	4770      	bx	lr
   14e84:	685b      	ldr	r3, [r3, #4]
   14e86:	4618      	mov	r0, r3
   14e88:	4770      	bx	lr
   14e8a:	2201      	movs	r2, #1
   14e8c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14e90:	e7f6      	b.n	14e80 <d_lookup_template_argument.isra.6+0x24>
   14e92:	bf00      	nop

00014e94 <d_find_pack>:
   14e94:	2900      	cmp	r1, #0
   14e96:	d041      	beq.n	14f1c <d_find_pack+0x88>
   14e98:	b538      	push	{r3, r4, r5, lr}
   14e9a:	4605      	mov	r5, r0
   14e9c:	460c      	mov	r4, r1
   14e9e:	7823      	ldrb	r3, [r4, #0]
   14ea0:	2b4b      	cmp	r3, #75	; 0x4b
   14ea2:	d827      	bhi.n	14ef4 <d_find_pack+0x60>
   14ea4:	e8df f003 	tbb	[pc, r3]
   14ea8:	2626262e 	.word	0x2626262e
   14eac:	2b2e3026 	.word	0x2b2e3026
   14eb0:	2626262b 	.word	0x2626262b
   14eb4:	26262626 	.word	0x26262626
   14eb8:	26262626 	.word	0x26262626
   14ebc:	26262626 	.word	0x26262626
   14ec0:	2626262e 	.word	0x2626262e
   14ec4:	26262626 	.word	0x26262626
   14ec8:	26262626 	.word	0x26262626
   14ecc:	2e262626 	.word	0x2e262626
   14ed0:	26262626 	.word	0x26262626
   14ed4:	2626262e 	.word	0x2626262e
   14ed8:	262b2e26 	.word	0x262b2e26
   14edc:	26262626 	.word	0x26262626
   14ee0:	26262626 	.word	0x26262626
   14ee4:	26262626 	.word	0x26262626
   14ee8:	26262e2e 	.word	0x26262e2e
   14eec:	2e2e2e26 	.word	0x2e2e2e26
   14ef0:	2e2e2626 	.word	0x2e2e2626
   14ef4:	6861      	ldr	r1, [r4, #4]
   14ef6:	4628      	mov	r0, r5
   14ef8:	f7ff ffcc 	bl	14e94 <d_find_pack>
   14efc:	b918      	cbnz	r0, 14f06 <d_find_pack+0x72>
   14efe:	68a4      	ldr	r4, [r4, #8]
   14f00:	2c00      	cmp	r4, #0
   14f02:	d1cc      	bne.n	14e9e <d_find_pack+0xa>
   14f04:	2000      	movs	r0, #0
   14f06:	bd38      	pop	{r3, r4, r5, pc}
   14f08:	1d21      	adds	r1, r4, #4
   14f0a:	4628      	mov	r0, r5
   14f0c:	f7ff ffa6 	bl	14e5c <d_lookup_template_argument.isra.6>
   14f10:	2800      	cmp	r0, #0
   14f12:	d0f7      	beq.n	14f04 <d_find_pack+0x70>
   14f14:	7803      	ldrb	r3, [r0, #0]
   14f16:	2b2f      	cmp	r3, #47	; 0x2f
   14f18:	d1f4      	bne.n	14f04 <d_find_pack+0x70>
   14f1a:	bd38      	pop	{r3, r4, r5, pc}
   14f1c:	2000      	movs	r0, #0
   14f1e:	4770      	bx	lr

00014f20 <d_growable_string_callback_adapter>:
   14f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f22:	4615      	mov	r5, r2
   14f24:	6852      	ldr	r2, [r2, #4]
   14f26:	68ac      	ldr	r4, [r5, #8]
   14f28:	1c4b      	adds	r3, r1, #1
   14f2a:	4413      	add	r3, r2
   14f2c:	42a3      	cmp	r3, r4
   14f2e:	b083      	sub	sp, #12
   14f30:	460e      	mov	r6, r1
   14f32:	4607      	mov	r7, r0
   14f34:	d813      	bhi.n	14f5e <d_growable_string_callback_adapter+0x3e>
   14f36:	68ec      	ldr	r4, [r5, #12]
   14f38:	b10c      	cbz	r4, 14f3e <d_growable_string_callback_adapter+0x1e>
   14f3a:	b003      	add	sp, #12
   14f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f3e:	e895 0009 	ldmia.w	r5, {r0, r3}
   14f42:	4632      	mov	r2, r6
   14f44:	4639      	mov	r1, r7
   14f46:	4418      	add	r0, r3
   14f48:	f009 fb4a 	bl	1e5e0 <memcpy>
   14f4c:	682b      	ldr	r3, [r5, #0]
   14f4e:	686a      	ldr	r2, [r5, #4]
   14f50:	4433      	add	r3, r6
   14f52:	549c      	strb	r4, [r3, r2]
   14f54:	686b      	ldr	r3, [r5, #4]
   14f56:	441e      	add	r6, r3
   14f58:	606e      	str	r6, [r5, #4]
   14f5a:	b003      	add	sp, #12
   14f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f5e:	68ea      	ldr	r2, [r5, #12]
   14f60:	2a00      	cmp	r2, #0
   14f62:	d1ea      	bne.n	14f3a <d_growable_string_callback_adapter+0x1a>
   14f64:	b91c      	cbnz	r4, 14f6e <d_growable_string_callback_adapter+0x4e>
   14f66:	2b02      	cmp	r3, #2
   14f68:	f04f 0402 	mov.w	r4, #2
   14f6c:	d902      	bls.n	14f74 <d_growable_string_callback_adapter+0x54>
   14f6e:	0064      	lsls	r4, r4, #1
   14f70:	42a3      	cmp	r3, r4
   14f72:	d8fc      	bhi.n	14f6e <d_growable_string_callback_adapter+0x4e>
   14f74:	4621      	mov	r1, r4
   14f76:	6828      	ldr	r0, [r5, #0]
   14f78:	f009 fcc2 	bl	1e900 <realloc>
   14f7c:	b110      	cbz	r0, 14f84 <d_growable_string_callback_adapter+0x64>
   14f7e:	6028      	str	r0, [r5, #0]
   14f80:	60ac      	str	r4, [r5, #8]
   14f82:	e7d8      	b.n	14f36 <d_growable_string_callback_adapter+0x16>
   14f84:	9001      	str	r0, [sp, #4]
   14f86:	6828      	ldr	r0, [r5, #0]
   14f88:	f008 ffda 	bl	1df40 <free>
   14f8c:	9b01      	ldr	r3, [sp, #4]
   14f8e:	602b      	str	r3, [r5, #0]
   14f90:	2201      	movs	r2, #1
   14f92:	606b      	str	r3, [r5, #4]
   14f94:	60ab      	str	r3, [r5, #8]
   14f96:	60ea      	str	r2, [r5, #12]
   14f98:	e7cf      	b.n	14f3a <d_growable_string_callback_adapter+0x1a>
   14f9a:	bf00      	nop

00014f9c <d_append_num>:
   14f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fa0:	b088      	sub	sp, #32
   14fa2:	460a      	mov	r2, r1
   14fa4:	4604      	mov	r4, r0
   14fa6:	491b      	ldr	r1, [pc, #108]	; (15014 <d_append_num+0x78>)
   14fa8:	a801      	add	r0, sp, #4
   14faa:	f009 feb7 	bl	1ed1c <sprintf>
   14fae:	a801      	add	r0, sp, #4
   14fb0:	f00a f866 	bl	1f080 <strlen>
   14fb4:	b350      	cbz	r0, 1500c <d_append_num+0x70>
   14fb6:	ad01      	add	r5, sp, #4
   14fb8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14fbc:	182f      	adds	r7, r5, r0
   14fbe:	f04f 0800 	mov.w	r8, #0
   14fc2:	e009      	b.n	14fd8 <d_append_num+0x3c>
   14fc4:	460b      	mov	r3, r1
   14fc6:	42bd      	cmp	r5, r7
   14fc8:	f101 0101 	add.w	r1, r1, #1
   14fcc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14fd0:	54e6      	strb	r6, [r4, r3]
   14fd2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14fd6:	d019      	beq.n	1500c <d_append_num+0x70>
   14fd8:	29ff      	cmp	r1, #255	; 0xff
   14fda:	f815 6b01 	ldrb.w	r6, [r5], #1
   14fde:	d1f1      	bne.n	14fc4 <d_append_num+0x28>
   14fe0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14fe4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14fe8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14fec:	4620      	mov	r0, r4
   14fee:	4798      	blx	r3
   14ff0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14ff4:	3301      	adds	r3, #1
   14ff6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14ffa:	2300      	movs	r3, #0
   14ffc:	2101      	movs	r1, #1
   14ffe:	42bd      	cmp	r5, r7
   15000:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   15004:	54e6      	strb	r6, [r4, r3]
   15006:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1500a:	d1e5      	bne.n	14fd8 <d_append_num+0x3c>
   1500c:	b008      	add	sp, #32
   1500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15012:	bf00      	nop
   15014:	00024598 	.word	0x00024598

00015018 <d_exprlist>:
   15018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1501c:	68c3      	ldr	r3, [r0, #12]
   1501e:	781d      	ldrb	r5, [r3, #0]
   15020:	b083      	sub	sp, #12
   15022:	2200      	movs	r2, #0
   15024:	428d      	cmp	r5, r1
   15026:	4604      	mov	r4, r0
   15028:	9201      	str	r2, [sp, #4]
   1502a:	f000 81c6 	beq.w	153ba <d_exprlist+0x3a2>
   1502e:	4688      	mov	r8, r1
   15030:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 154d0 <d_exprlist+0x4b8>
   15034:	ae01      	add	r6, sp, #4
   15036:	e023      	b.n	15080 <d_exprlist+0x68>
   15038:	2a66      	cmp	r2, #102	; 0x66
   1503a:	d04c      	beq.n	150d6 <d_exprlist+0xbe>
   1503c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   15040:	2909      	cmp	r1, #9
   15042:	f200 8217 	bhi.w	15474 <d_exprlist+0x45c>
   15046:	4620      	mov	r0, r4
   15048:	f001 fb10 	bl	1666c <d_unqualified_name>
   1504c:	4605      	mov	r5, r0
   1504e:	2800      	cmp	r0, #0
   15050:	f000 8170 	beq.w	15334 <d_exprlist+0x31c>
   15054:	68e3      	ldr	r3, [r4, #12]
   15056:	781b      	ldrb	r3, [r3, #0]
   15058:	2b49      	cmp	r3, #73	; 0x49
   1505a:	f000 8092 	beq.w	15182 <d_exprlist+0x16a>
   1505e:	6367      	str	r7, [r4, #52]	; 0x34
   15060:	462a      	mov	r2, r5
   15062:	2300      	movs	r3, #0
   15064:	212e      	movs	r1, #46	; 0x2e
   15066:	4620      	mov	r0, r4
   15068:	f7ff fbc8 	bl	147fc <d_make_comp>
   1506c:	6030      	str	r0, [r6, #0]
   1506e:	2800      	cmp	r0, #0
   15070:	d05b      	beq.n	1512a <d_exprlist+0x112>
   15072:	68e3      	ldr	r3, [r4, #12]
   15074:	781a      	ldrb	r2, [r3, #0]
   15076:	4542      	cmp	r2, r8
   15078:	f100 0608 	add.w	r6, r0, #8
   1507c:	f000 8107 	beq.w	1528e <d_exprlist+0x276>
   15080:	2501      	movs	r5, #1
   15082:	6b67      	ldr	r7, [r4, #52]	; 0x34
   15084:	6365      	str	r5, [r4, #52]	; 0x34
   15086:	781a      	ldrb	r2, [r3, #0]
   15088:	2a4c      	cmp	r2, #76	; 0x4c
   1508a:	d047      	beq.n	1511c <d_exprlist+0x104>
   1508c:	2a54      	cmp	r2, #84	; 0x54
   1508e:	d051      	beq.n	15134 <d_exprlist+0x11c>
   15090:	2a73      	cmp	r2, #115	; 0x73
   15092:	d1d1      	bne.n	15038 <d_exprlist+0x20>
   15094:	785a      	ldrb	r2, [r3, #1]
   15096:	2a72      	cmp	r2, #114	; 0x72
   15098:	f000 80e2 	beq.w	15260 <d_exprlist+0x248>
   1509c:	2a70      	cmp	r2, #112	; 0x70
   1509e:	f000 80fd 	beq.w	1529c <d_exprlist+0x284>
   150a2:	4620      	mov	r0, r4
   150a4:	f001 fa22 	bl	164ec <d_operator_name>
   150a8:	4605      	mov	r5, r0
   150aa:	2800      	cmp	r0, #0
   150ac:	f000 8142 	beq.w	15334 <d_exprlist+0x31c>
   150b0:	782b      	ldrb	r3, [r5, #0]
   150b2:	2b31      	cmp	r3, #49	; 0x31
   150b4:	d043      	beq.n	1513e <d_exprlist+0x126>
   150b6:	2b32      	cmp	r3, #50	; 0x32
   150b8:	d05c      	beq.n	15174 <d_exprlist+0x15c>
   150ba:	2b33      	cmp	r3, #51	; 0x33
   150bc:	d17b      	bne.n	151b6 <d_exprlist+0x19e>
   150be:	68e3      	ldr	r3, [r4, #12]
   150c0:	781a      	ldrb	r2, [r3, #0]
   150c2:	2a5f      	cmp	r2, #95	; 0x5f
   150c4:	f040 80c1 	bne.w	1524a <d_exprlist+0x232>
   150c8:	3301      	adds	r3, #1
   150ca:	60e3      	str	r3, [r4, #12]
   150cc:	2145      	movs	r1, #69	; 0x45
   150ce:	4620      	mov	r0, r4
   150d0:	f7ff ffa2 	bl	15018 <d_exprlist>
   150d4:	e0bc      	b.n	15250 <d_exprlist+0x238>
   150d6:	785a      	ldrb	r2, [r3, #1]
   150d8:	2a70      	cmp	r2, #112	; 0x70
   150da:	d1e2      	bne.n	150a2 <d_exprlist+0x8a>
   150dc:	1c9a      	adds	r2, r3, #2
   150de:	60e2      	str	r2, [r4, #12]
   150e0:	789a      	ldrb	r2, [r3, #2]
   150e2:	2a54      	cmp	r2, #84	; 0x54
   150e4:	d069      	beq.n	151ba <d_exprlist+0x1a2>
   150e6:	4620      	mov	r0, r4
   150e8:	f7ff fd1c 	bl	14b24 <d_compact_number>
   150ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   150f0:	4298      	cmp	r0, r3
   150f2:	d060      	beq.n	151b6 <d_exprlist+0x19e>
   150f4:	1c43      	adds	r3, r0, #1
   150f6:	d05e      	beq.n	151b6 <d_exprlist+0x19e>
   150f8:	3001      	adds	r0, #1
   150fa:	6963      	ldr	r3, [r4, #20]
   150fc:	69a2      	ldr	r2, [r4, #24]
   150fe:	4293      	cmp	r3, r2
   15100:	da59      	bge.n	151b6 <d_exprlist+0x19e>
   15102:	6922      	ldr	r2, [r4, #16]
   15104:	1c59      	adds	r1, r3, #1
   15106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1510a:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   1510e:	6161      	str	r1, [r4, #20]
   15110:	d051      	beq.n	151b6 <d_exprlist+0x19e>
   15112:	2106      	movs	r1, #6
   15114:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   15118:	6068      	str	r0, [r5, #4]
   1511a:	e7a0      	b.n	1505e <d_exprlist+0x46>
   1511c:	4620      	mov	r0, r4
   1511e:	f001 fef3 	bl	16f08 <d_expr_primary>
   15122:	4605      	mov	r5, r0
   15124:	6367      	str	r7, [r4, #52]	; 0x34
   15126:	2d00      	cmp	r5, #0
   15128:	d19a      	bne.n	15060 <d_exprlist+0x48>
   1512a:	2500      	movs	r5, #0
   1512c:	4628      	mov	r0, r5
   1512e:	b003      	add	sp, #12
   15130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15134:	4620      	mov	r0, r4
   15136:	f7ff fd11 	bl	14b5c <d_template_param>
   1513a:	4605      	mov	r5, r0
   1513c:	e7f2      	b.n	15124 <d_exprlist+0x10c>
   1513e:	f8d5 b004 	ldr.w	fp, [r5, #4]
   15142:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15144:	f8db 2008 	ldr.w	r2, [fp, #8]
   15148:	f8db a000 	ldr.w	sl, [fp]
   1514c:	3a02      	subs	r2, #2
   1514e:	4413      	add	r3, r2
   15150:	6323      	str	r3, [r4, #48]	; 0x30
   15152:	4650      	mov	r0, sl
   15154:	4649      	mov	r1, r9
   15156:	f009 fe17 	bl	1ed88 <strcmp>
   1515a:	2800      	cmp	r0, #0
   1515c:	f000 80e6 	beq.w	1532c <d_exprlist+0x314>
   15160:	f8db 300c 	ldr.w	r3, [fp, #12]
   15164:	2b03      	cmp	r3, #3
   15166:	d826      	bhi.n	151b6 <d_exprlist+0x19e>
   15168:	e8df f013 	tbh	[pc, r3, lsl #1]
   1516c:	0135002b 	.word	0x0135002b
   15170:	00a50033 	.word	0x00a50033
   15174:	686b      	ldr	r3, [r5, #4]
   15176:	2b03      	cmp	r3, #3
   15178:	d81d      	bhi.n	151b6 <d_exprlist+0x19e>
   1517a:	e8df f003 	tbb	[pc, r3]
   1517e:	6622      	.short	0x6622
   15180:	1c1c      	.short	0x1c1c
   15182:	4620      	mov	r0, r4
   15184:	f000 fc04 	bl	15990 <d_template_args>
   15188:	462a      	mov	r2, r5
   1518a:	4603      	mov	r3, r0
   1518c:	2104      	movs	r1, #4
   1518e:	4620      	mov	r0, r4
   15190:	f7ff fb34 	bl	147fc <d_make_comp>
   15194:	4605      	mov	r5, r0
   15196:	e7c5      	b.n	15124 <d_exprlist+0x10c>
   15198:	2a74      	cmp	r2, #116	; 0x74
   1519a:	d182      	bne.n	150a2 <d_exprlist+0x8a>
   1519c:	785b      	ldrb	r3, [r3, #1]
   1519e:	2b6c      	cmp	r3, #108	; 0x6c
   151a0:	f47f af7f 	bne.w	150a2 <d_exprlist+0x8a>
   151a4:	4620      	mov	r0, r4
   151a6:	f000 fdb9 	bl	15d1c <d_type>
   151aa:	68e3      	ldr	r3, [r4, #12]
   151ac:	785a      	ldrb	r2, [r3, #1]
   151ae:	4605      	mov	r5, r0
   151b0:	2a00      	cmp	r2, #0
   151b2:	f040 8169 	bne.w	15488 <d_exprlist+0x470>
   151b6:	6367      	str	r7, [r4, #52]	; 0x34
   151b8:	e7b7      	b.n	1512a <d_exprlist+0x112>
   151ba:	3303      	adds	r3, #3
   151bc:	60e3      	str	r3, [r4, #12]
   151be:	2000      	movs	r0, #0
   151c0:	e79b      	b.n	150fa <d_exprlist+0xe2>
   151c2:	462a      	mov	r2, r5
   151c4:	2300      	movs	r3, #0
   151c6:	2135      	movs	r1, #53	; 0x35
   151c8:	4620      	mov	r0, r4
   151ca:	f7ff fb17 	bl	147fc <d_make_comp>
   151ce:	4605      	mov	r5, r0
   151d0:	e7a8      	b.n	15124 <d_exprlist+0x10c>
   151d2:	f1ba 0f00 	cmp.w	sl, #0
   151d6:	d0ee      	beq.n	151b6 <d_exprlist+0x19e>
   151d8:	686b      	ldr	r3, [r5, #4]
   151da:	681b      	ldr	r3, [r3, #0]
   151dc:	785a      	ldrb	r2, [r3, #1]
   151de:	2a63      	cmp	r2, #99	; 0x63
   151e0:	f000 80d2 	beq.w	15388 <d_exprlist+0x370>
   151e4:	f89a 3000 	ldrb.w	r3, [sl]
   151e8:	2b66      	cmp	r3, #102	; 0x66
   151ea:	f000 80ef 	beq.w	153cc <d_exprlist+0x3b4>
   151ee:	4620      	mov	r0, r4
   151f0:	f000 f970 	bl	154d4 <d_expression_1>
   151f4:	4683      	mov	fp, r0
   151f6:	49b1      	ldr	r1, [pc, #708]	; (154bc <d_exprlist+0x4a4>)
   151f8:	4650      	mov	r0, sl
   151fa:	f009 fdc5 	bl	1ed88 <strcmp>
   151fe:	2800      	cmp	r0, #0
   15200:	f000 809d 	beq.w	1533e <d_exprlist+0x326>
   15204:	49ae      	ldr	r1, [pc, #696]	; (154c0 <d_exprlist+0x4a8>)
   15206:	4650      	mov	r0, sl
   15208:	f009 fdbe 	bl	1ed88 <strcmp>
   1520c:	b130      	cbz	r0, 1521c <d_exprlist+0x204>
   1520e:	4650      	mov	r0, sl
   15210:	49ac      	ldr	r1, [pc, #688]	; (154c4 <d_exprlist+0x4ac>)
   15212:	f009 fdb9 	bl	1ed88 <strcmp>
   15216:	2800      	cmp	r0, #0
   15218:	f040 8083 	bne.w	15322 <d_exprlist+0x30a>
   1521c:	4620      	mov	r0, r4
   1521e:	f001 fa25 	bl	1666c <d_unqualified_name>
   15222:	68e3      	ldr	r3, [r4, #12]
   15224:	781b      	ldrb	r3, [r3, #0]
   15226:	2b49      	cmp	r3, #73	; 0x49
   15228:	4682      	mov	sl, r0
   1522a:	f000 80e9 	beq.w	15400 <d_exprlist+0x3e8>
   1522e:	4653      	mov	r3, sl
   15230:	465a      	mov	r2, fp
   15232:	2138      	movs	r1, #56	; 0x38
   15234:	4620      	mov	r0, r4
   15236:	f7ff fae1 	bl	147fc <d_make_comp>
   1523a:	462a      	mov	r2, r5
   1523c:	4603      	mov	r3, r0
   1523e:	2137      	movs	r1, #55	; 0x37
   15240:	4620      	mov	r0, r4
   15242:	f7ff fadb 	bl	147fc <d_make_comp>
   15246:	4605      	mov	r5, r0
   15248:	e76c      	b.n	15124 <d_exprlist+0x10c>
   1524a:	4620      	mov	r0, r4
   1524c:	f000 f942 	bl	154d4 <d_expression_1>
   15250:	4603      	mov	r3, r0
   15252:	462a      	mov	r2, r5
   15254:	2136      	movs	r1, #54	; 0x36
   15256:	4620      	mov	r0, r4
   15258:	f7ff fad0 	bl	147fc <d_make_comp>
   1525c:	4605      	mov	r5, r0
   1525e:	e761      	b.n	15124 <d_exprlist+0x10c>
   15260:	3302      	adds	r3, #2
   15262:	60e3      	str	r3, [r4, #12]
   15264:	4620      	mov	r0, r4
   15266:	f000 fd59 	bl	15d1c <d_type>
   1526a:	4682      	mov	sl, r0
   1526c:	4620      	mov	r0, r4
   1526e:	f001 f9fd 	bl	1666c <d_unqualified_name>
   15272:	68e3      	ldr	r3, [r4, #12]
   15274:	781b      	ldrb	r3, [r3, #0]
   15276:	2b49      	cmp	r3, #73	; 0x49
   15278:	4683      	mov	fp, r0
   1527a:	f000 8093 	beq.w	153a4 <d_exprlist+0x38c>
   1527e:	4603      	mov	r3, r0
   15280:	4629      	mov	r1, r5
   15282:	4652      	mov	r2, sl
   15284:	4620      	mov	r0, r4
   15286:	f7ff fab9 	bl	147fc <d_make_comp>
   1528a:	4605      	mov	r5, r0
   1528c:	e74a      	b.n	15124 <d_exprlist+0x10c>
   1528e:	9d01      	ldr	r5, [sp, #4]
   15290:	3301      	adds	r3, #1
   15292:	4628      	mov	r0, r5
   15294:	60e3      	str	r3, [r4, #12]
   15296:	b003      	add	sp, #12
   15298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1529c:	3302      	adds	r3, #2
   1529e:	60e3      	str	r3, [r4, #12]
   152a0:	4620      	mov	r0, r4
   152a2:	f000 f917 	bl	154d4 <d_expression_1>
   152a6:	2300      	movs	r3, #0
   152a8:	4602      	mov	r2, r0
   152aa:	214a      	movs	r1, #74	; 0x4a
   152ac:	4620      	mov	r0, r4
   152ae:	f7ff faa5 	bl	147fc <d_make_comp>
   152b2:	4605      	mov	r5, r0
   152b4:	e736      	b.n	15124 <d_exprlist+0x10c>
   152b6:	f1ba 0f00 	cmp.w	sl, #0
   152ba:	f43f af7c 	beq.w	151b6 <d_exprlist+0x19e>
   152be:	4982      	ldr	r1, [pc, #520]	; (154c8 <d_exprlist+0x4b0>)
   152c0:	4650      	mov	r0, sl
   152c2:	f009 fd61 	bl	1ed88 <strcmp>
   152c6:	2800      	cmp	r0, #0
   152c8:	d03f      	beq.n	1534a <d_exprlist+0x332>
   152ca:	f89a 3000 	ldrb.w	r3, [sl]
   152ce:	2b66      	cmp	r3, #102	; 0x66
   152d0:	f000 80bd 	beq.w	1544e <d_exprlist+0x436>
   152d4:	2b6e      	cmp	r3, #110	; 0x6e
   152d6:	f47f af6e 	bne.w	151b6 <d_exprlist+0x19e>
   152da:	f89a 3001 	ldrb.w	r3, [sl, #1]
   152de:	2b77      	cmp	r3, #119	; 0x77
   152e0:	d002      	beq.n	152e8 <d_exprlist+0x2d0>
   152e2:	2b61      	cmp	r3, #97	; 0x61
   152e4:	f47f af67 	bne.w	151b6 <d_exprlist+0x19e>
   152e8:	215f      	movs	r1, #95	; 0x5f
   152ea:	4620      	mov	r0, r4
   152ec:	f7ff fe94 	bl	15018 <d_exprlist>
   152f0:	4682      	mov	sl, r0
   152f2:	4620      	mov	r0, r4
   152f4:	f000 fd12 	bl	15d1c <d_type>
   152f8:	68e3      	ldr	r3, [r4, #12]
   152fa:	781a      	ldrb	r2, [r3, #0]
   152fc:	2a45      	cmp	r2, #69	; 0x45
   152fe:	4683      	mov	fp, r0
   15300:	f000 80a1 	beq.w	15446 <d_exprlist+0x42e>
   15304:	2a70      	cmp	r2, #112	; 0x70
   15306:	f000 80a6 	beq.w	15456 <d_exprlist+0x43e>
   1530a:	2a69      	cmp	r2, #105	; 0x69
   1530c:	f47f af53 	bne.w	151b6 <d_exprlist+0x19e>
   15310:	785b      	ldrb	r3, [r3, #1]
   15312:	2b6c      	cmp	r3, #108	; 0x6c
   15314:	f47f af4f 	bne.w	151b6 <d_exprlist+0x19e>
   15318:	4620      	mov	r0, r4
   1531a:	f000 f8db 	bl	154d4 <d_expression_1>
   1531e:	4603      	mov	r3, r0
   15320:	e01f      	b.n	15362 <d_exprlist+0x34a>
   15322:	4620      	mov	r0, r4
   15324:	f000 f8d6 	bl	154d4 <d_expression_1>
   15328:	4682      	mov	sl, r0
   1532a:	e780      	b.n	1522e <d_exprlist+0x216>
   1532c:	4620      	mov	r0, r4
   1532e:	f000 fcf5 	bl	15d1c <d_type>
   15332:	e78d      	b.n	15250 <d_exprlist+0x238>
   15334:	4628      	mov	r0, r5
   15336:	6367      	str	r7, [r4, #52]	; 0x34
   15338:	b003      	add	sp, #12
   1533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1533e:	2145      	movs	r1, #69	; 0x45
   15340:	4620      	mov	r0, r4
   15342:	f7ff fe69 	bl	15018 <d_exprlist>
   15346:	4682      	mov	sl, r0
   15348:	e771      	b.n	1522e <d_exprlist+0x216>
   1534a:	4620      	mov	r0, r4
   1534c:	f000 f8c2 	bl	154d4 <d_expression_1>
   15350:	4682      	mov	sl, r0
   15352:	4620      	mov	r0, r4
   15354:	f000 f8be 	bl	154d4 <d_expression_1>
   15358:	4683      	mov	fp, r0
   1535a:	4620      	mov	r0, r4
   1535c:	f000 f8ba 	bl	154d4 <d_expression_1>
   15360:	4603      	mov	r3, r0
   15362:	465a      	mov	r2, fp
   15364:	213b      	movs	r1, #59	; 0x3b
   15366:	4620      	mov	r0, r4
   15368:	f7ff fa48 	bl	147fc <d_make_comp>
   1536c:	4652      	mov	r2, sl
   1536e:	4603      	mov	r3, r0
   15370:	213a      	movs	r1, #58	; 0x3a
   15372:	4620      	mov	r0, r4
   15374:	f7ff fa42 	bl	147fc <d_make_comp>
   15378:	462a      	mov	r2, r5
   1537a:	4603      	mov	r3, r0
   1537c:	2139      	movs	r1, #57	; 0x39
   1537e:	4620      	mov	r0, r4
   15380:	f7ff fa3c 	bl	147fc <d_make_comp>
   15384:	4605      	mov	r5, r0
   15386:	e6cd      	b.n	15124 <d_exprlist+0x10c>
   15388:	781b      	ldrb	r3, [r3, #0]
   1538a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1538e:	2a01      	cmp	r2, #1
   15390:	d903      	bls.n	1539a <d_exprlist+0x382>
   15392:	3b72      	subs	r3, #114	; 0x72
   15394:	2b01      	cmp	r3, #1
   15396:	f63f af25 	bhi.w	151e4 <d_exprlist+0x1cc>
   1539a:	4620      	mov	r0, r4
   1539c:	f000 fcbe 	bl	15d1c <d_type>
   153a0:	4683      	mov	fp, r0
   153a2:	e728      	b.n	151f6 <d_exprlist+0x1de>
   153a4:	4620      	mov	r0, r4
   153a6:	f000 faf3 	bl	15990 <d_template_args>
   153aa:	465a      	mov	r2, fp
   153ac:	4603      	mov	r3, r0
   153ae:	2104      	movs	r1, #4
   153b0:	4620      	mov	r0, r4
   153b2:	f7ff fa23 	bl	147fc <d_make_comp>
   153b6:	4603      	mov	r3, r0
   153b8:	e762      	b.n	15280 <d_exprlist+0x268>
   153ba:	3301      	adds	r3, #1
   153bc:	60c3      	str	r3, [r0, #12]
   153be:	212e      	movs	r1, #46	; 0x2e
   153c0:	4613      	mov	r3, r2
   153c2:	b003      	add	sp, #12
   153c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c8:	f7ff ba18 	b.w	147fc <d_make_comp>
   153cc:	4620      	mov	r0, r4
   153ce:	f001 f88d 	bl	164ec <d_operator_name>
   153d2:	4683      	mov	fp, r0
   153d4:	e70f      	b.n	151f6 <d_exprlist+0x1de>
   153d6:	f1ba 0f00 	cmp.w	sl, #0
   153da:	f43f af36 	beq.w	1524a <d_exprlist+0x232>
   153de:	f89a 3000 	ldrb.w	r3, [sl]
   153e2:	2b70      	cmp	r3, #112	; 0x70
   153e4:	d017      	beq.n	15416 <d_exprlist+0x3fe>
   153e6:	2b6d      	cmp	r3, #109	; 0x6d
   153e8:	d015      	beq.n	15416 <d_exprlist+0x3fe>
   153ea:	4650      	mov	r0, sl
   153ec:	4937      	ldr	r1, [pc, #220]	; (154cc <d_exprlist+0x4b4>)
   153ee:	f009 fccb 	bl	1ed88 <strcmp>
   153f2:	2800      	cmp	r0, #0
   153f4:	f47f af29 	bne.w	1524a <d_exprlist+0x232>
   153f8:	4620      	mov	r0, r4
   153fa:	f000 fa65 	bl	158c8 <d_template_args_1>
   153fe:	e727      	b.n	15250 <d_exprlist+0x238>
   15400:	4620      	mov	r0, r4
   15402:	f000 fac5 	bl	15990 <d_template_args>
   15406:	4652      	mov	r2, sl
   15408:	4603      	mov	r3, r0
   1540a:	2104      	movs	r1, #4
   1540c:	4620      	mov	r0, r4
   1540e:	f7ff f9f5 	bl	147fc <d_make_comp>
   15412:	4682      	mov	sl, r0
   15414:	e70b      	b.n	1522e <d_exprlist+0x216>
   15416:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1541a:	429a      	cmp	r2, r3
   1541c:	d1e5      	bne.n	153ea <d_exprlist+0x3d2>
   1541e:	68e3      	ldr	r3, [r4, #12]
   15420:	781a      	ldrb	r2, [r3, #0]
   15422:	2a5f      	cmp	r2, #95	; 0x5f
   15424:	d023      	beq.n	1546e <d_exprlist+0x456>
   15426:	4650      	mov	r0, sl
   15428:	4928      	ldr	r1, [pc, #160]	; (154cc <d_exprlist+0x4b4>)
   1542a:	f009 fcad 	bl	1ed88 <strcmp>
   1542e:	2800      	cmp	r0, #0
   15430:	d03f      	beq.n	154b2 <d_exprlist+0x49a>
   15432:	4620      	mov	r0, r4
   15434:	f000 f84e 	bl	154d4 <d_expression_1>
   15438:	4603      	mov	r3, r0
   1543a:	461a      	mov	r2, r3
   1543c:	2138      	movs	r1, #56	; 0x38
   1543e:	4620      	mov	r0, r4
   15440:	f7ff f9dc 	bl	147fc <d_make_comp>
   15444:	e704      	b.n	15250 <d_exprlist+0x238>
   15446:	3301      	adds	r3, #1
   15448:	60e3      	str	r3, [r4, #12]
   1544a:	2300      	movs	r3, #0
   1544c:	e789      	b.n	15362 <d_exprlist+0x34a>
   1544e:	4620      	mov	r0, r4
   15450:	f001 f84c 	bl	164ec <d_operator_name>
   15454:	e77c      	b.n	15350 <d_exprlist+0x338>
   15456:	785a      	ldrb	r2, [r3, #1]
   15458:	2a69      	cmp	r2, #105	; 0x69
   1545a:	f47f aeac 	bne.w	151b6 <d_exprlist+0x19e>
   1545e:	3302      	adds	r3, #2
   15460:	60e3      	str	r3, [r4, #12]
   15462:	2145      	movs	r1, #69	; 0x45
   15464:	4620      	mov	r0, r4
   15466:	f7ff fdd7 	bl	15018 <d_exprlist>
   1546a:	4603      	mov	r3, r0
   1546c:	e779      	b.n	15362 <d_exprlist+0x34a>
   1546e:	3301      	adds	r3, #1
   15470:	60e3      	str	r3, [r4, #12]
   15472:	e7ba      	b.n	153ea <d_exprlist+0x3d2>
   15474:	2a6f      	cmp	r2, #111	; 0x6f
   15476:	d015      	beq.n	154a4 <d_exprlist+0x48c>
   15478:	2a69      	cmp	r2, #105	; 0x69
   1547a:	f47f ae8d 	bne.w	15198 <d_exprlist+0x180>
   1547e:	785a      	ldrb	r2, [r3, #1]
   15480:	2a6c      	cmp	r2, #108	; 0x6c
   15482:	f47f ae0e 	bne.w	150a2 <d_exprlist+0x8a>
   15486:	2500      	movs	r5, #0
   15488:	3302      	adds	r3, #2
   1548a:	60e3      	str	r3, [r4, #12]
   1548c:	2145      	movs	r1, #69	; 0x45
   1548e:	4620      	mov	r0, r4
   15490:	f7ff fdc2 	bl	15018 <d_exprlist>
   15494:	462a      	mov	r2, r5
   15496:	4603      	mov	r3, r0
   15498:	2130      	movs	r1, #48	; 0x30
   1549a:	4620      	mov	r0, r4
   1549c:	f7ff f9ae 	bl	147fc <d_make_comp>
   154a0:	4605      	mov	r5, r0
   154a2:	e63f      	b.n	15124 <d_exprlist+0x10c>
   154a4:	785a      	ldrb	r2, [r3, #1]
   154a6:	2a6e      	cmp	r2, #110	; 0x6e
   154a8:	f47f adfb 	bne.w	150a2 <d_exprlist+0x8a>
   154ac:	3302      	adds	r3, #2
   154ae:	60e3      	str	r3, [r4, #12]
   154b0:	e5c9      	b.n	15046 <d_exprlist+0x2e>
   154b2:	4620      	mov	r0, r4
   154b4:	f000 fa08 	bl	158c8 <d_template_args_1>
   154b8:	4603      	mov	r3, r0
   154ba:	e7be      	b.n	1543a <d_exprlist+0x422>
   154bc:	000245a0 	.word	0x000245a0
   154c0:	000245a4 	.word	0x000245a4
   154c4:	000245a8 	.word	0x000245a8
   154c8:	000245ac 	.word	0x000245ac
   154cc:	0002459c 	.word	0x0002459c
   154d0:	00024aa0 	.word	0x00024aa0

000154d4 <d_expression_1>:
   154d4:	68c1      	ldr	r1, [r0, #12]
   154d6:	780b      	ldrb	r3, [r1, #0]
   154d8:	2b4c      	cmp	r3, #76	; 0x4c
   154da:	f000 8087 	beq.w	155ec <d_expression_1+0x118>
   154de:	2b54      	cmp	r3, #84	; 0x54
   154e0:	f000 8086 	beq.w	155f0 <d_expression_1+0x11c>
   154e4:	2b73      	cmp	r3, #115	; 0x73
   154e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   154ea:	4604      	mov	r4, r0
   154ec:	d037      	beq.n	1555e <d_expression_1+0x8a>
   154ee:	2b66      	cmp	r3, #102	; 0x66
   154f0:	d012      	beq.n	15518 <d_expression_1+0x44>
   154f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   154f6:	2a09      	cmp	r2, #9
   154f8:	f200 81b8 	bhi.w	1586c <d_expression_1+0x398>
   154fc:	4620      	mov	r0, r4
   154fe:	f001 f8b5 	bl	1666c <d_unqualified_name>
   15502:	4605      	mov	r5, r0
   15504:	2800      	cmp	r0, #0
   15506:	d06d      	beq.n	155e4 <d_expression_1+0x110>
   15508:	68e3      	ldr	r3, [r4, #12]
   1550a:	781b      	ldrb	r3, [r3, #0]
   1550c:	2b49      	cmp	r3, #73	; 0x49
   1550e:	f000 8088 	beq.w	15622 <d_expression_1+0x14e>
   15512:	4628      	mov	r0, r5
   15514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15518:	784b      	ldrb	r3, [r1, #1]
   1551a:	2b70      	cmp	r3, #112	; 0x70
   1551c:	d039      	beq.n	15592 <d_expression_1+0xbe>
   1551e:	4620      	mov	r0, r4
   15520:	f000 ffe4 	bl	164ec <d_operator_name>
   15524:	4605      	mov	r5, r0
   15526:	2800      	cmp	r0, #0
   15528:	d05c      	beq.n	155e4 <d_expression_1+0x110>
   1552a:	7803      	ldrb	r3, [r0, #0]
   1552c:	2b31      	cmp	r3, #49	; 0x31
   1552e:	d061      	beq.n	155f4 <d_expression_1+0x120>
   15530:	2b32      	cmp	r3, #50	; 0x32
   15532:	d025      	beq.n	15580 <d_expression_1+0xac>
   15534:	2b33      	cmp	r3, #51	; 0x33
   15536:	d155      	bne.n	155e4 <d_expression_1+0x110>
   15538:	68e3      	ldr	r3, [r4, #12]
   1553a:	781a      	ldrb	r2, [r3, #0]
   1553c:	2a5f      	cmp	r2, #95	; 0x5f
   1553e:	f040 81b4 	bne.w	158aa <d_expression_1+0x3d6>
   15542:	3301      	adds	r3, #1
   15544:	60e3      	str	r3, [r4, #12]
   15546:	2145      	movs	r1, #69	; 0x45
   15548:	4620      	mov	r0, r4
   1554a:	f7ff fd65 	bl	15018 <d_exprlist>
   1554e:	4603      	mov	r3, r0
   15550:	462a      	mov	r2, r5
   15552:	4620      	mov	r0, r4
   15554:	2136      	movs	r1, #54	; 0x36
   15556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1555a:	f7ff b94f 	b.w	147fc <d_make_comp>
   1555e:	784b      	ldrb	r3, [r1, #1]
   15560:	2b72      	cmp	r3, #114	; 0x72
   15562:	d069      	beq.n	15638 <d_expression_1+0x164>
   15564:	2b70      	cmp	r3, #112	; 0x70
   15566:	d1da      	bne.n	1551e <d_expression_1+0x4a>
   15568:	3102      	adds	r1, #2
   1556a:	60c1      	str	r1, [r0, #12]
   1556c:	f7ff ffb2 	bl	154d4 <d_expression_1>
   15570:	2300      	movs	r3, #0
   15572:	4602      	mov	r2, r0
   15574:	214a      	movs	r1, #74	; 0x4a
   15576:	4620      	mov	r0, r4
   15578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1557c:	f7ff b93e 	b.w	147fc <d_make_comp>
   15580:	6843      	ldr	r3, [r0, #4]
   15582:	2b03      	cmp	r3, #3
   15584:	d82e      	bhi.n	155e4 <d_expression_1+0x110>
   15586:	e8df f013 	tbh	[pc, r3, lsl #1]
   1558a:	0071      	.short	0x0071
   1558c:	002d0190 	.word	0x002d0190
   15590:	002d      	.short	0x002d
   15592:	1c8b      	adds	r3, r1, #2
   15594:	60c3      	str	r3, [r0, #12]
   15596:	788b      	ldrb	r3, [r1, #2]
   15598:	2b54      	cmp	r3, #84	; 0x54
   1559a:	d063      	beq.n	15664 <d_expression_1+0x190>
   1559c:	f7ff fac2 	bl	14b24 <d_compact_number>
   155a0:	43c3      	mvns	r3, r0
   155a2:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   155a6:	d01d      	beq.n	155e4 <d_expression_1+0x110>
   155a8:	3001      	adds	r0, #1
   155aa:	6963      	ldr	r3, [r4, #20]
   155ac:	69a2      	ldr	r2, [r4, #24]
   155ae:	4293      	cmp	r3, r2
   155b0:	da18      	bge.n	155e4 <d_expression_1+0x110>
   155b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   155b6:	6921      	ldr	r1, [r4, #16]
   155b8:	0092      	lsls	r2, r2, #2
   155ba:	3301      	adds	r3, #1
   155bc:	188d      	adds	r5, r1, r2
   155be:	6163      	str	r3, [r4, #20]
   155c0:	d0a7      	beq.n	15512 <d_expression_1+0x3e>
   155c2:	2306      	movs	r3, #6
   155c4:	548b      	strb	r3, [r1, r2]
   155c6:	6068      	str	r0, [r5, #4]
   155c8:	e7a3      	b.n	15512 <d_expression_1+0x3e>
   155ca:	2b74      	cmp	r3, #116	; 0x74
   155cc:	d1a7      	bne.n	1551e <d_expression_1+0x4a>
   155ce:	784b      	ldrb	r3, [r1, #1]
   155d0:	2b6c      	cmp	r3, #108	; 0x6c
   155d2:	d1a4      	bne.n	1551e <d_expression_1+0x4a>
   155d4:	f000 fba2 	bl	15d1c <d_type>
   155d8:	68e1      	ldr	r1, [r4, #12]
   155da:	784b      	ldrb	r3, [r1, #1]
   155dc:	4605      	mov	r5, r0
   155de:	2b00      	cmp	r3, #0
   155e0:	f040 814e 	bne.w	15880 <d_expression_1+0x3ac>
   155e4:	2500      	movs	r5, #0
   155e6:	4628      	mov	r0, r5
   155e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155ec:	f001 bc8c 	b.w	16f08 <d_expr_primary>
   155f0:	f7ff bab4 	b.w	14b5c <d_template_param>
   155f4:	6847      	ldr	r7, [r0, #4]
   155f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   155f8:	68ba      	ldr	r2, [r7, #8]
   155fa:	683e      	ldr	r6, [r7, #0]
   155fc:	49ac      	ldr	r1, [pc, #688]	; (158b0 <d_expression_1+0x3dc>)
   155fe:	3a02      	subs	r2, #2
   15600:	4413      	add	r3, r2
   15602:	6323      	str	r3, [r4, #48]	; 0x30
   15604:	4630      	mov	r0, r6
   15606:	f009 fbbf 	bl	1ed88 <strcmp>
   1560a:	2800      	cmp	r0, #0
   1560c:	f000 80ab 	beq.w	15766 <d_expression_1+0x292>
   15610:	68ff      	ldr	r7, [r7, #12]
   15612:	2f03      	cmp	r7, #3
   15614:	d8e6      	bhi.n	155e4 <d_expression_1+0x110>
   15616:	e8df f017 	tbh	[pc, r7, lsl #1]
   1561a:	0029      	.short	0x0029
   1561c:	007100ff 	.word	0x007100ff
   15620:	0031      	.short	0x0031
   15622:	4620      	mov	r0, r4
   15624:	f000 f9b4 	bl	15990 <d_template_args>
   15628:	462a      	mov	r2, r5
   1562a:	4603      	mov	r3, r0
   1562c:	2104      	movs	r1, #4
   1562e:	4620      	mov	r0, r4
   15630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15634:	f7ff b8e2 	b.w	147fc <d_make_comp>
   15638:	3102      	adds	r1, #2
   1563a:	60c1      	str	r1, [r0, #12]
   1563c:	f000 fb6e 	bl	15d1c <d_type>
   15640:	4605      	mov	r5, r0
   15642:	4620      	mov	r0, r4
   15644:	f001 f812 	bl	1666c <d_unqualified_name>
   15648:	68e3      	ldr	r3, [r4, #12]
   1564a:	781b      	ldrb	r3, [r3, #0]
   1564c:	2b49      	cmp	r3, #73	; 0x49
   1564e:	4606      	mov	r6, r0
   15650:	f000 80ae 	beq.w	157b0 <d_expression_1+0x2dc>
   15654:	4603      	mov	r3, r0
   15656:	462a      	mov	r2, r5
   15658:	4620      	mov	r0, r4
   1565a:	2101      	movs	r1, #1
   1565c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15660:	f7ff b8cc 	b.w	147fc <d_make_comp>
   15664:	3103      	adds	r1, #3
   15666:	60c1      	str	r1, [r0, #12]
   15668:	2000      	movs	r0, #0
   1566a:	e79e      	b.n	155aa <d_expression_1+0xd6>
   1566c:	462a      	mov	r2, r5
   1566e:	4620      	mov	r0, r4
   15670:	2300      	movs	r3, #0
   15672:	2135      	movs	r1, #53	; 0x35
   15674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15678:	f7ff b8c0 	b.w	147fc <d_make_comp>
   1567c:	2e00      	cmp	r6, #0
   1567e:	d0b1      	beq.n	155e4 <d_expression_1+0x110>
   15680:	498c      	ldr	r1, [pc, #560]	; (158b4 <d_expression_1+0x3e0>)
   15682:	4630      	mov	r0, r6
   15684:	f009 fb80 	bl	1ed88 <strcmp>
   15688:	2800      	cmp	r0, #0
   1568a:	d071      	beq.n	15770 <d_expression_1+0x29c>
   1568c:	7833      	ldrb	r3, [r6, #0]
   1568e:	2b66      	cmp	r3, #102	; 0x66
   15690:	f000 80b2 	beq.w	157f8 <d_expression_1+0x324>
   15694:	2b6e      	cmp	r3, #110	; 0x6e
   15696:	d1a5      	bne.n	155e4 <d_expression_1+0x110>
   15698:	7873      	ldrb	r3, [r6, #1]
   1569a:	2b77      	cmp	r3, #119	; 0x77
   1569c:	d001      	beq.n	156a2 <d_expression_1+0x1ce>
   1569e:	2b61      	cmp	r3, #97	; 0x61
   156a0:	d1a0      	bne.n	155e4 <d_expression_1+0x110>
   156a2:	215f      	movs	r1, #95	; 0x5f
   156a4:	4620      	mov	r0, r4
   156a6:	f7ff fcb7 	bl	15018 <d_exprlist>
   156aa:	4606      	mov	r6, r0
   156ac:	4620      	mov	r0, r4
   156ae:	f000 fb35 	bl	15d1c <d_type>
   156b2:	68e3      	ldr	r3, [r4, #12]
   156b4:	781a      	ldrb	r2, [r3, #0]
   156b6:	2a45      	cmp	r2, #69	; 0x45
   156b8:	4607      	mov	r7, r0
   156ba:	f000 8099 	beq.w	157f0 <d_expression_1+0x31c>
   156be:	2a70      	cmp	r2, #112	; 0x70
   156c0:	f000 809e 	beq.w	15800 <d_expression_1+0x32c>
   156c4:	2a69      	cmp	r2, #105	; 0x69
   156c6:	d18d      	bne.n	155e4 <d_expression_1+0x110>
   156c8:	785b      	ldrb	r3, [r3, #1]
   156ca:	2b6c      	cmp	r3, #108	; 0x6c
   156cc:	d18a      	bne.n	155e4 <d_expression_1+0x110>
   156ce:	4620      	mov	r0, r4
   156d0:	f7ff ff00 	bl	154d4 <d_expression_1>
   156d4:	4603      	mov	r3, r0
   156d6:	463a      	mov	r2, r7
   156d8:	213b      	movs	r1, #59	; 0x3b
   156da:	4620      	mov	r0, r4
   156dc:	f7ff f88e 	bl	147fc <d_make_comp>
   156e0:	4632      	mov	r2, r6
   156e2:	4603      	mov	r3, r0
   156e4:	213a      	movs	r1, #58	; 0x3a
   156e6:	4620      	mov	r0, r4
   156e8:	f7ff f888 	bl	147fc <d_make_comp>
   156ec:	462a      	mov	r2, r5
   156ee:	4603      	mov	r3, r0
   156f0:	2139      	movs	r1, #57	; 0x39
   156f2:	4620      	mov	r0, r4
   156f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   156f8:	f7ff b880 	b.w	147fc <d_make_comp>
   156fc:	2e00      	cmp	r6, #0
   156fe:	f43f af71 	beq.w	155e4 <d_expression_1+0x110>
   15702:	686b      	ldr	r3, [r5, #4]
   15704:	681b      	ldr	r3, [r3, #0]
   15706:	785a      	ldrb	r2, [r3, #1]
   15708:	2a63      	cmp	r2, #99	; 0x63
   1570a:	d044      	beq.n	15796 <d_expression_1+0x2c2>
   1570c:	7833      	ldrb	r3, [r6, #0]
   1570e:	2b66      	cmp	r3, #102	; 0x66
   15710:	d059      	beq.n	157c6 <d_expression_1+0x2f2>
   15712:	4620      	mov	r0, r4
   15714:	f7ff fede 	bl	154d4 <d_expression_1>
   15718:	4607      	mov	r7, r0
   1571a:	4967      	ldr	r1, [pc, #412]	; (158b8 <d_expression_1+0x3e4>)
   1571c:	4630      	mov	r0, r6
   1571e:	f009 fb33 	bl	1ed88 <strcmp>
   15722:	b390      	cbz	r0, 1578a <d_expression_1+0x2b6>
   15724:	4965      	ldr	r1, [pc, #404]	; (158bc <d_expression_1+0x3e8>)
   15726:	4630      	mov	r0, r6
   15728:	f009 fb2e 	bl	1ed88 <strcmp>
   1572c:	b128      	cbz	r0, 1573a <d_expression_1+0x266>
   1572e:	4630      	mov	r0, r6
   15730:	4963      	ldr	r1, [pc, #396]	; (158c0 <d_expression_1+0x3ec>)
   15732:	f009 fb29 	bl	1ed88 <strcmp>
   15736:	2800      	cmp	r0, #0
   15738:	d14a      	bne.n	157d0 <d_expression_1+0x2fc>
   1573a:	4620      	mov	r0, r4
   1573c:	f000 ff96 	bl	1666c <d_unqualified_name>
   15740:	68e3      	ldr	r3, [r4, #12]
   15742:	781b      	ldrb	r3, [r3, #0]
   15744:	2b49      	cmp	r3, #73	; 0x49
   15746:	4606      	mov	r6, r0
   15748:	d047      	beq.n	157da <d_expression_1+0x306>
   1574a:	4633      	mov	r3, r6
   1574c:	463a      	mov	r2, r7
   1574e:	2138      	movs	r1, #56	; 0x38
   15750:	4620      	mov	r0, r4
   15752:	f7ff f853 	bl	147fc <d_make_comp>
   15756:	462a      	mov	r2, r5
   15758:	4603      	mov	r3, r0
   1575a:	2137      	movs	r1, #55	; 0x37
   1575c:	4620      	mov	r0, r4
   1575e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15762:	f7ff b84b 	b.w	147fc <d_make_comp>
   15766:	4620      	mov	r0, r4
   15768:	f000 fad8 	bl	15d1c <d_type>
   1576c:	4603      	mov	r3, r0
   1576e:	e6ef      	b.n	15550 <d_expression_1+0x7c>
   15770:	4620      	mov	r0, r4
   15772:	f7ff feaf 	bl	154d4 <d_expression_1>
   15776:	4606      	mov	r6, r0
   15778:	4620      	mov	r0, r4
   1577a:	f7ff feab 	bl	154d4 <d_expression_1>
   1577e:	4607      	mov	r7, r0
   15780:	4620      	mov	r0, r4
   15782:	f7ff fea7 	bl	154d4 <d_expression_1>
   15786:	4603      	mov	r3, r0
   15788:	e7a5      	b.n	156d6 <d_expression_1+0x202>
   1578a:	2145      	movs	r1, #69	; 0x45
   1578c:	4620      	mov	r0, r4
   1578e:	f7ff fc43 	bl	15018 <d_exprlist>
   15792:	4606      	mov	r6, r0
   15794:	e7d9      	b.n	1574a <d_expression_1+0x276>
   15796:	781b      	ldrb	r3, [r3, #0]
   15798:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1579c:	2a01      	cmp	r2, #1
   1579e:	d902      	bls.n	157a6 <d_expression_1+0x2d2>
   157a0:	3b72      	subs	r3, #114	; 0x72
   157a2:	2b01      	cmp	r3, #1
   157a4:	d8b2      	bhi.n	1570c <d_expression_1+0x238>
   157a6:	4620      	mov	r0, r4
   157a8:	f000 fab8 	bl	15d1c <d_type>
   157ac:	4607      	mov	r7, r0
   157ae:	e7b4      	b.n	1571a <d_expression_1+0x246>
   157b0:	4620      	mov	r0, r4
   157b2:	f000 f8ed 	bl	15990 <d_template_args>
   157b6:	4632      	mov	r2, r6
   157b8:	4603      	mov	r3, r0
   157ba:	2104      	movs	r1, #4
   157bc:	4620      	mov	r0, r4
   157be:	f7ff f81d 	bl	147fc <d_make_comp>
   157c2:	4603      	mov	r3, r0
   157c4:	e747      	b.n	15656 <d_expression_1+0x182>
   157c6:	4620      	mov	r0, r4
   157c8:	f000 fe90 	bl	164ec <d_operator_name>
   157cc:	4607      	mov	r7, r0
   157ce:	e7a4      	b.n	1571a <d_expression_1+0x246>
   157d0:	4620      	mov	r0, r4
   157d2:	f7ff fe7f 	bl	154d4 <d_expression_1>
   157d6:	4606      	mov	r6, r0
   157d8:	e7b7      	b.n	1574a <d_expression_1+0x276>
   157da:	4620      	mov	r0, r4
   157dc:	f000 f8d8 	bl	15990 <d_template_args>
   157e0:	4632      	mov	r2, r6
   157e2:	4603      	mov	r3, r0
   157e4:	2104      	movs	r1, #4
   157e6:	4620      	mov	r0, r4
   157e8:	f7ff f808 	bl	147fc <d_make_comp>
   157ec:	4606      	mov	r6, r0
   157ee:	e7ac      	b.n	1574a <d_expression_1+0x276>
   157f0:	3301      	adds	r3, #1
   157f2:	60e3      	str	r3, [r4, #12]
   157f4:	2300      	movs	r3, #0
   157f6:	e76e      	b.n	156d6 <d_expression_1+0x202>
   157f8:	4620      	mov	r0, r4
   157fa:	f000 fe77 	bl	164ec <d_operator_name>
   157fe:	e7ba      	b.n	15776 <d_expression_1+0x2a2>
   15800:	785a      	ldrb	r2, [r3, #1]
   15802:	2a69      	cmp	r2, #105	; 0x69
   15804:	f47f aeee 	bne.w	155e4 <d_expression_1+0x110>
   15808:	3302      	adds	r3, #2
   1580a:	60e3      	str	r3, [r4, #12]
   1580c:	2145      	movs	r1, #69	; 0x45
   1580e:	4620      	mov	r0, r4
   15810:	f7ff fc02 	bl	15018 <d_exprlist>
   15814:	4603      	mov	r3, r0
   15816:	e75e      	b.n	156d6 <d_expression_1+0x202>
   15818:	2e00      	cmp	r6, #0
   1581a:	d046      	beq.n	158aa <d_expression_1+0x3d6>
   1581c:	7833      	ldrb	r3, [r6, #0]
   1581e:	2b70      	cmp	r3, #112	; 0x70
   15820:	d015      	beq.n	1584e <d_expression_1+0x37a>
   15822:	2b6d      	cmp	r3, #109	; 0x6d
   15824:	d013      	beq.n	1584e <d_expression_1+0x37a>
   15826:	2700      	movs	r7, #0
   15828:	4630      	mov	r0, r6
   1582a:	4926      	ldr	r1, [pc, #152]	; (158c4 <d_expression_1+0x3f0>)
   1582c:	f009 faac 	bl	1ed88 <strcmp>
   15830:	b1b8      	cbz	r0, 15862 <d_expression_1+0x38e>
   15832:	4620      	mov	r0, r4
   15834:	f7ff fe4e 	bl	154d4 <d_expression_1>
   15838:	4603      	mov	r3, r0
   1583a:	2f00      	cmp	r7, #0
   1583c:	f43f ae88 	beq.w	15550 <d_expression_1+0x7c>
   15840:	461a      	mov	r2, r3
   15842:	2138      	movs	r1, #56	; 0x38
   15844:	4620      	mov	r0, r4
   15846:	f7fe ffd9 	bl	147fc <d_make_comp>
   1584a:	4603      	mov	r3, r0
   1584c:	e680      	b.n	15550 <d_expression_1+0x7c>
   1584e:	7872      	ldrb	r2, [r6, #1]
   15850:	429a      	cmp	r2, r3
   15852:	d1e8      	bne.n	15826 <d_expression_1+0x352>
   15854:	68e3      	ldr	r3, [r4, #12]
   15856:	781a      	ldrb	r2, [r3, #0]
   15858:	2a5f      	cmp	r2, #95	; 0x5f
   1585a:	d1e5      	bne.n	15828 <d_expression_1+0x354>
   1585c:	3301      	adds	r3, #1
   1585e:	60e3      	str	r3, [r4, #12]
   15860:	e7e1      	b.n	15826 <d_expression_1+0x352>
   15862:	4620      	mov	r0, r4
   15864:	f000 f830 	bl	158c8 <d_template_args_1>
   15868:	4603      	mov	r3, r0
   1586a:	e7e6      	b.n	1583a <d_expression_1+0x366>
   1586c:	2b6f      	cmp	r3, #111	; 0x6f
   1586e:	d015      	beq.n	1589c <d_expression_1+0x3c8>
   15870:	2b69      	cmp	r3, #105	; 0x69
   15872:	f47f aeaa 	bne.w	155ca <d_expression_1+0xf6>
   15876:	784b      	ldrb	r3, [r1, #1]
   15878:	2b6c      	cmp	r3, #108	; 0x6c
   1587a:	f47f ae50 	bne.w	1551e <d_expression_1+0x4a>
   1587e:	2500      	movs	r5, #0
   15880:	3102      	adds	r1, #2
   15882:	60e1      	str	r1, [r4, #12]
   15884:	4620      	mov	r0, r4
   15886:	2145      	movs	r1, #69	; 0x45
   15888:	f7ff fbc6 	bl	15018 <d_exprlist>
   1588c:	462a      	mov	r2, r5
   1588e:	4603      	mov	r3, r0
   15890:	2130      	movs	r1, #48	; 0x30
   15892:	4620      	mov	r0, r4
   15894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15898:	f7fe bfb0 	b.w	147fc <d_make_comp>
   1589c:	784b      	ldrb	r3, [r1, #1]
   1589e:	2b6e      	cmp	r3, #110	; 0x6e
   158a0:	f47f ae3d 	bne.w	1551e <d_expression_1+0x4a>
   158a4:	3102      	adds	r1, #2
   158a6:	60c1      	str	r1, [r0, #12]
   158a8:	e628      	b.n	154fc <d_expression_1+0x28>
   158aa:	2700      	movs	r7, #0
   158ac:	e7c1      	b.n	15832 <d_expression_1+0x35e>
   158ae:	bf00      	nop
   158b0:	00024aa0 	.word	0x00024aa0
   158b4:	000245ac 	.word	0x000245ac
   158b8:	000245a0 	.word	0x000245a0
   158bc:	000245a4 	.word	0x000245a4
   158c0:	000245a8 	.word	0x000245a8
   158c4:	0002459c 	.word	0x0002459c

000158c8 <d_template_args_1>:
   158c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   158cc:	68c2      	ldr	r2, [r0, #12]
   158ce:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   158d2:	7813      	ldrb	r3, [r2, #0]
   158d4:	2b45      	cmp	r3, #69	; 0x45
   158d6:	b083      	sub	sp, #12
   158d8:	4604      	mov	r4, r0
   158da:	d04e      	beq.n	1597a <d_template_args_1+0xb2>
   158dc:	ae02      	add	r6, sp, #8
   158de:	2100      	movs	r1, #0
   158e0:	f846 1d04 	str.w	r1, [r6, #-4]!
   158e4:	2701      	movs	r7, #1
   158e6:	3b49      	subs	r3, #73	; 0x49
   158e8:	2b0f      	cmp	r3, #15
   158ea:	d83e      	bhi.n	1596a <d_template_args_1+0xa2>
   158ec:	e8df f003 	tbb	[pc, r3]
   158f0:	1b3d3838 	.word	0x1b3d3838
   158f4:	3d3d3d3d 	.word	0x3d3d3d3d
   158f8:	3d3d3d3d 	.word	0x3d3d3d3d
   158fc:	083d3d3d 	.word	0x083d3d3d
   15900:	3201      	adds	r2, #1
   15902:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   15906:	60e2      	str	r2, [r4, #12]
   15908:	6367      	str	r7, [r4, #52]	; 0x34
   1590a:	4620      	mov	r0, r4
   1590c:	f7ff fde2 	bl	154d4 <d_expression_1>
   15910:	68e3      	ldr	r3, [r4, #12]
   15912:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   15916:	781a      	ldrb	r2, [r3, #0]
   15918:	2a45      	cmp	r2, #69	; 0x45
   1591a:	4605      	mov	r5, r0
   1591c:	d02a      	beq.n	15974 <d_template_args_1+0xac>
   1591e:	2000      	movs	r0, #0
   15920:	b003      	add	sp, #12
   15922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15926:	4620      	mov	r0, r4
   15928:	f001 faee 	bl	16f08 <d_expr_primary>
   1592c:	4605      	mov	r5, r0
   1592e:	2300      	movs	r3, #0
   15930:	212f      	movs	r1, #47	; 0x2f
   15932:	462a      	mov	r2, r5
   15934:	4620      	mov	r0, r4
   15936:	2d00      	cmp	r5, #0
   15938:	d0f1      	beq.n	1591e <d_template_args_1+0x56>
   1593a:	f7fe ff5f 	bl	147fc <d_make_comp>
   1593e:	6030      	str	r0, [r6, #0]
   15940:	f100 0608 	add.w	r6, r0, #8
   15944:	2800      	cmp	r0, #0
   15946:	d0ea      	beq.n	1591e <d_template_args_1+0x56>
   15948:	68e2      	ldr	r2, [r4, #12]
   1594a:	7813      	ldrb	r3, [r2, #0]
   1594c:	2b45      	cmp	r3, #69	; 0x45
   1594e:	d1ca      	bne.n	158e6 <d_template_args_1+0x1e>
   15950:	9801      	ldr	r0, [sp, #4]
   15952:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   15956:	3201      	adds	r2, #1
   15958:	60e2      	str	r2, [r4, #12]
   1595a:	b003      	add	sp, #12
   1595c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15960:	4620      	mov	r0, r4
   15962:	f000 f815 	bl	15990 <d_template_args>
   15966:	4605      	mov	r5, r0
   15968:	e7e1      	b.n	1592e <d_template_args_1+0x66>
   1596a:	4620      	mov	r0, r4
   1596c:	f000 f9d6 	bl	15d1c <d_type>
   15970:	4605      	mov	r5, r0
   15972:	e7dc      	b.n	1592e <d_template_args_1+0x66>
   15974:	3301      	adds	r3, #1
   15976:	60e3      	str	r3, [r4, #12]
   15978:	e7d9      	b.n	1592e <d_template_args_1+0x66>
   1597a:	3201      	adds	r2, #1
   1597c:	2300      	movs	r3, #0
   1597e:	60c2      	str	r2, [r0, #12]
   15980:	212f      	movs	r1, #47	; 0x2f
   15982:	461a      	mov	r2, r3
   15984:	b003      	add	sp, #12
   15986:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1598a:	f7fe bf37 	b.w	147fc <d_make_comp>
   1598e:	bf00      	nop

00015990 <d_template_args>:
   15990:	68c2      	ldr	r2, [r0, #12]
   15992:	7813      	ldrb	r3, [r2, #0]
   15994:	3b49      	subs	r3, #73	; 0x49
   15996:	2b01      	cmp	r3, #1
   15998:	d802      	bhi.n	159a0 <d_template_args+0x10>
   1599a:	3201      	adds	r2, #1
   1599c:	60c2      	str	r2, [r0, #12]
   1599e:	e793      	b.n	158c8 <d_template_args_1>
   159a0:	2000      	movs	r0, #0
   159a2:	4770      	bx	lr

000159a4 <d_name>:
   159a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159a8:	68c2      	ldr	r2, [r0, #12]
   159aa:	7813      	ldrb	r3, [r2, #0]
   159ac:	3b4e      	subs	r3, #78	; 0x4e
   159ae:	b085      	sub	sp, #20
   159b0:	4605      	mov	r5, r0
   159b2:	2b0c      	cmp	r3, #12
   159b4:	d870      	bhi.n	15a98 <d_name+0xf4>
   159b6:	e8df f003 	tbb	[pc, r3]
   159ba:	6f1e      	.short	0x6f1e
   159bc:	5b6f6f6f 	.word	0x5b6f6f6f
   159c0:	6f6f176f 	.word	0x6f6f176f
   159c4:	6f6f      	.short	0x6f6f
   159c6:	07          	.byte	0x07
   159c7:	00          	.byte	0x00
   159c8:	3201      	adds	r2, #1
   159ca:	2100      	movs	r1, #0
   159cc:	60c2      	str	r2, [r0, #12]
   159ce:	f000 ffbd 	bl	1694c <d_encoding>
   159d2:	68eb      	ldr	r3, [r5, #12]
   159d4:	7819      	ldrb	r1, [r3, #0]
   159d6:	2945      	cmp	r1, #69	; 0x45
   159d8:	4606      	mov	r6, r0
   159da:	f000 8099 	beq.w	15b10 <d_name+0x16c>
   159de:	2200      	movs	r2, #0
   159e0:	4610      	mov	r0, r2
   159e2:	b005      	add	sp, #20
   159e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   159e8:	f000 fe40 	bl	1666c <d_unqualified_name>
   159ec:	4602      	mov	r2, r0
   159ee:	4610      	mov	r0, r2
   159f0:	b005      	add	sp, #20
   159f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   159f6:	3201      	adds	r2, #1
   159f8:	60c2      	str	r2, [r0, #12]
   159fa:	a903      	add	r1, sp, #12
   159fc:	2201      	movs	r2, #1
   159fe:	f7fe ff49 	bl	14894 <d_cv_qualifiers>
   15a02:	4681      	mov	r9, r0
   15a04:	2800      	cmp	r0, #0
   15a06:	d0ea      	beq.n	159de <d_name+0x3a>
   15a08:	2100      	movs	r1, #0
   15a0a:	4628      	mov	r0, r5
   15a0c:	f7fe ffa8 	bl	14960 <d_ref_qualifier>
   15a10:	68ea      	ldr	r2, [r5, #12]
   15a12:	4eb4      	ldr	r6, [pc, #720]	; (15ce4 <d_name+0x340>)
   15a14:	7814      	ldrb	r4, [r2, #0]
   15a16:	4680      	mov	r8, r0
   15a18:	2700      	movs	r7, #0
   15a1a:	2c00      	cmp	r4, #0
   15a1c:	f000 80e8 	beq.w	15bf0 <d_name+0x24c>
   15a20:	2c44      	cmp	r4, #68	; 0x44
   15a22:	f000 80d1 	beq.w	15bc8 <d_name+0x224>
   15a26:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   15a2a:	b2db      	uxtb	r3, r3
   15a2c:	2b1c      	cmp	r3, #28
   15a2e:	f240 80a8 	bls.w	15b82 <d_name+0x1de>
   15a32:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   15a36:	2b19      	cmp	r3, #25
   15a38:	f240 80a8 	bls.w	15b8c <d_name+0x1e8>
   15a3c:	2c55      	cmp	r4, #85	; 0x55
   15a3e:	f000 80de 	beq.w	15bfe <d_name+0x25a>
   15a42:	2c53      	cmp	r4, #83	; 0x53
   15a44:	f000 80f1 	beq.w	15c2a <d_name+0x286>
   15a48:	2c49      	cmp	r4, #73	; 0x49
   15a4a:	f000 80da 	beq.w	15c02 <d_name+0x25e>
   15a4e:	2c54      	cmp	r4, #84	; 0x54
   15a50:	f000 811f 	beq.w	15c92 <d_name+0x2ee>
   15a54:	2c45      	cmp	r4, #69	; 0x45
   15a56:	f000 814b 	beq.w	15cf0 <d_name+0x34c>
   15a5a:	2c4d      	cmp	r4, #77	; 0x4d
   15a5c:	f040 80c8 	bne.w	15bf0 <d_name+0x24c>
   15a60:	2f00      	cmp	r7, #0
   15a62:	f000 80c5 	beq.w	15bf0 <d_name+0x24c>
   15a66:	1c53      	adds	r3, r2, #1
   15a68:	60eb      	str	r3, [r5, #12]
   15a6a:	7854      	ldrb	r4, [r2, #1]
   15a6c:	461a      	mov	r2, r3
   15a6e:	e7d4      	b.n	15a1a <d_name+0x76>
   15a70:	7853      	ldrb	r3, [r2, #1]
   15a72:	2b74      	cmp	r3, #116	; 0x74
   15a74:	d031      	beq.n	15ada <d_name+0x136>
   15a76:	2100      	movs	r1, #0
   15a78:	f7ff f90a 	bl	14c90 <d_substitution>
   15a7c:	68eb      	ldr	r3, [r5, #12]
   15a7e:	7819      	ldrb	r1, [r3, #0]
   15a80:	2949      	cmp	r1, #73	; 0x49
   15a82:	4602      	mov	r2, r0
   15a84:	d1b3      	bne.n	159ee <d_name+0x4a>
   15a86:	3301      	adds	r3, #1
   15a88:	60eb      	str	r3, [r5, #12]
   15a8a:	4628      	mov	r0, r5
   15a8c:	9201      	str	r2, [sp, #4]
   15a8e:	f7ff ff1b 	bl	158c8 <d_template_args_1>
   15a92:	9a01      	ldr	r2, [sp, #4]
   15a94:	4603      	mov	r3, r0
   15a96:	e017      	b.n	15ac8 <d_name+0x124>
   15a98:	f000 fde8 	bl	1666c <d_unqualified_name>
   15a9c:	68eb      	ldr	r3, [r5, #12]
   15a9e:	7819      	ldrb	r1, [r3, #0]
   15aa0:	2949      	cmp	r1, #73	; 0x49
   15aa2:	4602      	mov	r2, r0
   15aa4:	d1a3      	bne.n	159ee <d_name+0x4a>
   15aa6:	2a00      	cmp	r2, #0
   15aa8:	d099      	beq.n	159de <d_name+0x3a>
   15aaa:	6a29      	ldr	r1, [r5, #32]
   15aac:	6a68      	ldr	r0, [r5, #36]	; 0x24
   15aae:	4281      	cmp	r1, r0
   15ab0:	da95      	bge.n	159de <d_name+0x3a>
   15ab2:	69ec      	ldr	r4, [r5, #28]
   15ab4:	1c48      	adds	r0, r1, #1
   15ab6:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   15aba:	6228      	str	r0, [r5, #32]
   15abc:	7819      	ldrb	r1, [r3, #0]
   15abe:	3949      	subs	r1, #73	; 0x49
   15ac0:	2901      	cmp	r1, #1
   15ac2:	bf88      	it	hi
   15ac4:	2300      	movhi	r3, #0
   15ac6:	d9de      	bls.n	15a86 <d_name+0xe2>
   15ac8:	4628      	mov	r0, r5
   15aca:	2104      	movs	r1, #4
   15acc:	f7fe fe96 	bl	147fc <d_make_comp>
   15ad0:	4602      	mov	r2, r0
   15ad2:	4610      	mov	r0, r2
   15ad4:	b005      	add	sp, #20
   15ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ada:	6943      	ldr	r3, [r0, #20]
   15adc:	6981      	ldr	r1, [r0, #24]
   15ade:	3202      	adds	r2, #2
   15ae0:	428b      	cmp	r3, r1
   15ae2:	60c2      	str	r2, [r0, #12]
   15ae4:	f2c0 80ab 	blt.w	15c3e <d_name+0x29a>
   15ae8:	2400      	movs	r4, #0
   15aea:	4628      	mov	r0, r5
   15aec:	f000 fdbe 	bl	1666c <d_unqualified_name>
   15af0:	4622      	mov	r2, r4
   15af2:	4603      	mov	r3, r0
   15af4:	2101      	movs	r1, #1
   15af6:	4628      	mov	r0, r5
   15af8:	f7fe fe80 	bl	147fc <d_make_comp>
   15afc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15afe:	68eb      	ldr	r3, [r5, #12]
   15b00:	3103      	adds	r1, #3
   15b02:	6329      	str	r1, [r5, #48]	; 0x30
   15b04:	7819      	ldrb	r1, [r3, #0]
   15b06:	2949      	cmp	r1, #73	; 0x49
   15b08:	4602      	mov	r2, r0
   15b0a:	f47f af70 	bne.w	159ee <d_name+0x4a>
   15b0e:	e7ca      	b.n	15aa6 <d_name+0x102>
   15b10:	1c5a      	adds	r2, r3, #1
   15b12:	60ea      	str	r2, [r5, #12]
   15b14:	7859      	ldrb	r1, [r3, #1]
   15b16:	2973      	cmp	r1, #115	; 0x73
   15b18:	f000 80a3 	beq.w	15c62 <d_name+0x2be>
   15b1c:	2964      	cmp	r1, #100	; 0x64
   15b1e:	f000 80bc 	beq.w	15c9a <d_name+0x2f6>
   15b22:	4628      	mov	r0, r5
   15b24:	f7ff ff3e 	bl	159a4 <d_name>
   15b28:	4604      	mov	r4, r0
   15b2a:	2800      	cmp	r0, #0
   15b2c:	d072      	beq.n	15c14 <d_name+0x270>
   15b2e:	7803      	ldrb	r3, [r0, #0]
   15b30:	2b45      	cmp	r3, #69	; 0x45
   15b32:	f000 8094 	beq.w	15c5e <d_name+0x2ba>
   15b36:	2b47      	cmp	r3, #71	; 0x47
   15b38:	f000 8091 	beq.w	15c5e <d_name+0x2ba>
   15b3c:	68eb      	ldr	r3, [r5, #12]
   15b3e:	781a      	ldrb	r2, [r3, #0]
   15b40:	2a5f      	cmp	r2, #95	; 0x5f
   15b42:	f040 808c 	bne.w	15c5e <d_name+0x2ba>
   15b46:	f04f 37ff 	mov.w	r7, #4294967295
   15b4a:	4628      	mov	r0, r5
   15b4c:	3301      	adds	r3, #1
   15b4e:	f840 3f0c 	str.w	r3, [r0, #12]!
   15b52:	f7fe ffa5 	bl	14aa0 <d_number.isra.0>
   15b56:	2800      	cmp	r0, #0
   15b58:	f6ff af41 	blt.w	159de <d_name+0x3a>
   15b5c:	1c7b      	adds	r3, r7, #1
   15b5e:	d07e      	beq.n	15c5e <d_name+0x2ba>
   15b60:	696b      	ldr	r3, [r5, #20]
   15b62:	69aa      	ldr	r2, [r5, #24]
   15b64:	4293      	cmp	r3, r2
   15b66:	da55      	bge.n	15c14 <d_name+0x270>
   15b68:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15b6c:	6929      	ldr	r1, [r5, #16]
   15b6e:	3301      	adds	r3, #1
   15b70:	0092      	lsls	r2, r2, #2
   15b72:	616b      	str	r3, [r5, #20]
   15b74:	188b      	adds	r3, r1, r2
   15b76:	d04e      	beq.n	15c16 <d_name+0x272>
   15b78:	2046      	movs	r0, #70	; 0x46
   15b7a:	5488      	strb	r0, [r1, r2]
   15b7c:	609f      	str	r7, [r3, #8]
   15b7e:	605c      	str	r4, [r3, #4]
   15b80:	e049      	b.n	15c16 <d_name+0x272>
   15b82:	fa26 f303 	lsr.w	r3, r6, r3
   15b86:	07d9      	lsls	r1, r3, #31
   15b88:	f57f af53 	bpl.w	15a32 <d_name+0x8e>
   15b8c:	4628      	mov	r0, r5
   15b8e:	f000 fd6d 	bl	1666c <d_unqualified_name>
   15b92:	b347      	cbz	r7, 15be6 <d_name+0x242>
   15b94:	2101      	movs	r1, #1
   15b96:	4603      	mov	r3, r0
   15b98:	463a      	mov	r2, r7
   15b9a:	4628      	mov	r0, r5
   15b9c:	f7fe fe2e 	bl	147fc <d_make_comp>
   15ba0:	4607      	mov	r7, r0
   15ba2:	2c53      	cmp	r4, #83	; 0x53
   15ba4:	d01c      	beq.n	15be0 <d_name+0x23c>
   15ba6:	68ea      	ldr	r2, [r5, #12]
   15ba8:	7814      	ldrb	r4, [r2, #0]
   15baa:	2c45      	cmp	r4, #69	; 0x45
   15bac:	f43f af3b 	beq.w	15a26 <d_name+0x82>
   15bb0:	b1f7      	cbz	r7, 15bf0 <d_name+0x24c>
   15bb2:	6a2b      	ldr	r3, [r5, #32]
   15bb4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15bb6:	428b      	cmp	r3, r1
   15bb8:	da1a      	bge.n	15bf0 <d_name+0x24c>
   15bba:	69e9      	ldr	r1, [r5, #28]
   15bbc:	1c58      	adds	r0, r3, #1
   15bbe:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   15bc2:	6228      	str	r0, [r5, #32]
   15bc4:	7814      	ldrb	r4, [r2, #0]
   15bc6:	e728      	b.n	15a1a <d_name+0x76>
   15bc8:	7853      	ldrb	r3, [r2, #1]
   15bca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15bce:	2b54      	cmp	r3, #84	; 0x54
   15bd0:	4628      	mov	r0, r5
   15bd2:	d00a      	beq.n	15bea <d_name+0x246>
   15bd4:	f000 fd4a 	bl	1666c <d_unqualified_name>
   15bd8:	2f00      	cmp	r7, #0
   15bda:	d1db      	bne.n	15b94 <d_name+0x1f0>
   15bdc:	4607      	mov	r7, r0
   15bde:	e7e2      	b.n	15ba6 <d_name+0x202>
   15be0:	68ea      	ldr	r2, [r5, #12]
   15be2:	7814      	ldrb	r4, [r2, #0]
   15be4:	e719      	b.n	15a1a <d_name+0x76>
   15be6:	4607      	mov	r7, r0
   15be8:	e7db      	b.n	15ba2 <d_name+0x1fe>
   15bea:	f000 f897 	bl	15d1c <d_type>
   15bee:	e7f3      	b.n	15bd8 <d_name+0x234>
   15bf0:	2200      	movs	r2, #0
   15bf2:	4610      	mov	r0, r2
   15bf4:	f8c9 2000 	str.w	r2, [r9]
   15bf8:	b005      	add	sp, #20
   15bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15bfe:	4628      	mov	r0, r5
   15c00:	e7e8      	b.n	15bd4 <d_name+0x230>
   15c02:	2f00      	cmp	r7, #0
   15c04:	d0f4      	beq.n	15bf0 <d_name+0x24c>
   15c06:	3201      	adds	r2, #1
   15c08:	60ea      	str	r2, [r5, #12]
   15c0a:	4628      	mov	r0, r5
   15c0c:	f7ff fe5c 	bl	158c8 <d_template_args_1>
   15c10:	2104      	movs	r1, #4
   15c12:	e7c0      	b.n	15b96 <d_name+0x1f2>
   15c14:	2300      	movs	r3, #0
   15c16:	4632      	mov	r2, r6
   15c18:	4628      	mov	r0, r5
   15c1a:	2102      	movs	r1, #2
   15c1c:	f7fe fdee 	bl	147fc <d_make_comp>
   15c20:	4602      	mov	r2, r0
   15c22:	4610      	mov	r0, r2
   15c24:	b005      	add	sp, #20
   15c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15c2a:	2101      	movs	r1, #1
   15c2c:	4628      	mov	r0, r5
   15c2e:	f7ff f82f 	bl	14c90 <d_substitution>
   15c32:	2f00      	cmp	r7, #0
   15c34:	d1ae      	bne.n	15b94 <d_name+0x1f0>
   15c36:	68ea      	ldr	r2, [r5, #12]
   15c38:	4607      	mov	r7, r0
   15c3a:	7814      	ldrb	r4, [r2, #0]
   15c3c:	e6ed      	b.n	15a1a <d_name+0x76>
   15c3e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15c42:	6901      	ldr	r1, [r0, #16]
   15c44:	0092      	lsls	r2, r2, #2
   15c46:	3301      	adds	r3, #1
   15c48:	188c      	adds	r4, r1, r2
   15c4a:	6143      	str	r3, [r0, #20]
   15c4c:	f43f af4d 	beq.w	15aea <d_name+0x146>
   15c50:	2300      	movs	r3, #0
   15c52:	548b      	strb	r3, [r1, r2]
   15c54:	4824      	ldr	r0, [pc, #144]	; (15ce8 <d_name+0x344>)
   15c56:	6060      	str	r0, [r4, #4]
   15c58:	2303      	movs	r3, #3
   15c5a:	60a3      	str	r3, [r4, #8]
   15c5c:	e745      	b.n	15aea <d_name+0x146>
   15c5e:	4623      	mov	r3, r4
   15c60:	e7d9      	b.n	15c16 <d_name+0x272>
   15c62:	1c9a      	adds	r2, r3, #2
   15c64:	60ea      	str	r2, [r5, #12]
   15c66:	789a      	ldrb	r2, [r3, #2]
   15c68:	2a5f      	cmp	r2, #95	; 0x5f
   15c6a:	d032      	beq.n	15cd2 <d_name+0x32e>
   15c6c:	696b      	ldr	r3, [r5, #20]
   15c6e:	69aa      	ldr	r2, [r5, #24]
   15c70:	4293      	cmp	r3, r2
   15c72:	dacf      	bge.n	15c14 <d_name+0x270>
   15c74:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15c78:	6929      	ldr	r1, [r5, #16]
   15c7a:	3301      	adds	r3, #1
   15c7c:	0092      	lsls	r2, r2, #2
   15c7e:	616b      	str	r3, [r5, #20]
   15c80:	188b      	adds	r3, r1, r2
   15c82:	d0c8      	beq.n	15c16 <d_name+0x272>
   15c84:	2400      	movs	r4, #0
   15c86:	548c      	strb	r4, [r1, r2]
   15c88:	4818      	ldr	r0, [pc, #96]	; (15cec <d_name+0x348>)
   15c8a:	6058      	str	r0, [r3, #4]
   15c8c:	220e      	movs	r2, #14
   15c8e:	609a      	str	r2, [r3, #8]
   15c90:	e7c1      	b.n	15c16 <d_name+0x272>
   15c92:	4628      	mov	r0, r5
   15c94:	f7fe ff62 	bl	14b5c <d_template_param>
   15c98:	e79e      	b.n	15bd8 <d_name+0x234>
   15c9a:	3302      	adds	r3, #2
   15c9c:	60eb      	str	r3, [r5, #12]
   15c9e:	4628      	mov	r0, r5
   15ca0:	f7fe ff40 	bl	14b24 <d_compact_number>
   15ca4:	1e07      	subs	r7, r0, #0
   15ca6:	f6ff ae9a 	blt.w	159de <d_name+0x3a>
   15caa:	4628      	mov	r0, r5
   15cac:	f7ff fe7a 	bl	159a4 <d_name>
   15cb0:	4604      	mov	r4, r0
   15cb2:	2800      	cmp	r0, #0
   15cb4:	f43f af54 	beq.w	15b60 <d_name+0x1bc>
   15cb8:	7803      	ldrb	r3, [r0, #0]
   15cba:	2b45      	cmp	r3, #69	; 0x45
   15cbc:	f43f af50 	beq.w	15b60 <d_name+0x1bc>
   15cc0:	2b47      	cmp	r3, #71	; 0x47
   15cc2:	f43f af4d 	beq.w	15b60 <d_name+0x1bc>
   15cc6:	68eb      	ldr	r3, [r5, #12]
   15cc8:	781a      	ldrb	r2, [r3, #0]
   15cca:	2a5f      	cmp	r2, #95	; 0x5f
   15ccc:	f47f af48 	bne.w	15b60 <d_name+0x1bc>
   15cd0:	e73b      	b.n	15b4a <d_name+0x1a6>
   15cd2:	4628      	mov	r0, r5
   15cd4:	3303      	adds	r3, #3
   15cd6:	f840 3f0c 	str.w	r3, [r0, #12]!
   15cda:	f7fe fee1 	bl	14aa0 <d_number.isra.0>
   15cde:	2800      	cmp	r0, #0
   15ce0:	dac4      	bge.n	15c6c <d_name+0x2c8>
   15ce2:	e67c      	b.n	159de <d_name+0x3a>
   15ce4:	100803ff 	.word	0x100803ff
   15ce8:	000245c0 	.word	0x000245c0
   15cec:	000245b0 	.word	0x000245b0
   15cf0:	f8c9 7000 	str.w	r7, [r9]
   15cf4:	2f00      	cmp	r7, #0
   15cf6:	f43f ae72 	beq.w	159de <d_name+0x3a>
   15cfa:	f1b8 0f00 	cmp.w	r8, #0
   15cfe:	d004      	beq.n	15d0a <d_name+0x366>
   15d00:	9b03      	ldr	r3, [sp, #12]
   15d02:	f8c8 3004 	str.w	r3, [r8, #4]
   15d06:	f8cd 800c 	str.w	r8, [sp, #12]
   15d0a:	7813      	ldrb	r3, [r2, #0]
   15d0c:	2b45      	cmp	r3, #69	; 0x45
   15d0e:	f47f ae66 	bne.w	159de <d_name+0x3a>
   15d12:	3201      	adds	r2, #1
   15d14:	60ea      	str	r2, [r5, #12]
   15d16:	9a03      	ldr	r2, [sp, #12]
   15d18:	e669      	b.n	159ee <d_name+0x4a>
   15d1a:	bf00      	nop

00015d1c <d_type>:
   15d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d20:	68c2      	ldr	r2, [r0, #12]
   15d22:	7813      	ldrb	r3, [r2, #0]
   15d24:	2b72      	cmp	r3, #114	; 0x72
   15d26:	b083      	sub	sp, #12
   15d28:	4604      	mov	r4, r0
   15d2a:	d058      	beq.n	15dde <d_type+0xc2>
   15d2c:	2b56      	cmp	r3, #86	; 0x56
   15d2e:	d056      	beq.n	15dde <d_type+0xc2>
   15d30:	2b4b      	cmp	r3, #75	; 0x4b
   15d32:	d054      	beq.n	15dde <d_type+0xc2>
   15d34:	2b44      	cmp	r3, #68	; 0x44
   15d36:	f000 809f 	beq.w	15e78 <d_type+0x15c>
   15d3a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   15d3e:	294a      	cmp	r1, #74	; 0x4a
   15d40:	f200 808a 	bhi.w	15e58 <d_type+0x13c>
   15d44:	e8df f011 	tbh	[pc, r1, lsl #1]
   15d48:	012a012a 	.word	0x012a012a
   15d4c:	012a012a 	.word	0x012a012a
   15d50:	012a012a 	.word	0x012a012a
   15d54:	012a012a 	.word	0x012a012a
   15d58:	012a012a 	.word	0x012a012a
   15d5c:	00880088 	.word	0x00880088
   15d60:	00880088 	.word	0x00880088
   15d64:	00880088 	.word	0x00880088
   15d68:	020b0088 	.word	0x020b0088
   15d6c:	01520088 	.word	0x01520088
   15d70:	00880088 	.word	0x00880088
   15d74:	0160014c 	.word	0x0160014c
   15d78:	00880088 	.word	0x00880088
   15d7c:	00880088 	.word	0x00880088
   15d80:	016e0088 	.word	0x016e0088
   15d84:	0186012a 	.word	0x0186012a
   15d88:	008801c3 	.word	0x008801c3
   15d8c:	01a20194 	.word	0x01a20194
   15d90:	01f301d1 	.word	0x01f301d1
   15d94:	00880088 	.word	0x00880088
   15d98:	00880088 	.word	0x00880088
   15d9c:	0088012a 	.word	0x0088012a
   15da0:	00880088 	.word	0x00880088
   15da4:	00880088 	.word	0x00880088
   15da8:	010c0088 	.word	0x010c0088
   15dac:	010c010c 	.word	0x010c010c
   15db0:	010c010c 	.word	0x010c010c
   15db4:	010c010c 	.word	0x010c010c
   15db8:	010c010c 	.word	0x010c010c
   15dbc:	0088010c 	.word	0x0088010c
   15dc0:	010c010c 	.word	0x010c010c
   15dc4:	010c010c 	.word	0x010c010c
   15dc8:	00880088 	.word	0x00880088
   15dcc:	010c0088 	.word	0x010c0088
   15dd0:	013e010c 	.word	0x013e010c
   15dd4:	010c010c 	.word	0x010c010c
   15dd8:	010c010c 	.word	0x010c010c
   15ddc:	010c      	.short	0x010c
   15dde:	2200      	movs	r2, #0
   15de0:	a901      	add	r1, sp, #4
   15de2:	4620      	mov	r0, r4
   15de4:	f7fe fd56 	bl	14894 <d_cv_qualifiers>
   15de8:	4605      	mov	r5, r0
   15dea:	2800      	cmp	r0, #0
   15dec:	d034      	beq.n	15e58 <d_type+0x13c>
   15dee:	68e3      	ldr	r3, [r4, #12]
   15df0:	781b      	ldrb	r3, [r3, #0]
   15df2:	2b46      	cmp	r3, #70	; 0x46
   15df4:	4620      	mov	r0, r4
   15df6:	d034      	beq.n	15e62 <d_type+0x146>
   15df8:	f7ff ff90 	bl	15d1c <d_type>
   15dfc:	6028      	str	r0, [r5, #0]
   15dfe:	b358      	cbz	r0, 15e58 <d_type+0x13c>
   15e00:	7803      	ldrb	r3, [r0, #0]
   15e02:	3b1f      	subs	r3, #31
   15e04:	2b01      	cmp	r3, #1
   15e06:	d930      	bls.n	15e6a <d_type+0x14e>
   15e08:	9a01      	ldr	r2, [sp, #4]
   15e0a:	b32a      	cbz	r2, 15e58 <d_type+0x13c>
   15e0c:	6a23      	ldr	r3, [r4, #32]
   15e0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15e10:	428b      	cmp	r3, r1
   15e12:	da21      	bge.n	15e58 <d_type+0x13c>
   15e14:	69e0      	ldr	r0, [r4, #28]
   15e16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15e1a:	9d01      	ldr	r5, [sp, #4]
   15e1c:	1c59      	adds	r1, r3, #1
   15e1e:	4628      	mov	r0, r5
   15e20:	6221      	str	r1, [r4, #32]
   15e22:	b003      	add	sp, #12
   15e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15e28:	2301      	movs	r3, #1
   15e2a:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15e2c:	6343      	str	r3, [r0, #52]	; 0x34
   15e2e:	f7ff fb51 	bl	154d4 <d_expression_1>
   15e32:	6365      	str	r5, [r4, #52]	; 0x34
   15e34:	4602      	mov	r2, r0
   15e36:	2300      	movs	r3, #0
   15e38:	2142      	movs	r1, #66	; 0x42
   15e3a:	4620      	mov	r0, r4
   15e3c:	f7fe fcde 	bl	147fc <d_make_comp>
   15e40:	4605      	mov	r5, r0
   15e42:	9001      	str	r0, [sp, #4]
   15e44:	b140      	cbz	r0, 15e58 <d_type+0x13c>
   15e46:	68e3      	ldr	r3, [r4, #12]
   15e48:	781a      	ldrb	r2, [r3, #0]
   15e4a:	b12a      	cbz	r2, 15e58 <d_type+0x13c>
   15e4c:	1c5a      	adds	r2, r3, #1
   15e4e:	60e2      	str	r2, [r4, #12]
   15e50:	781b      	ldrb	r3, [r3, #0]
   15e52:	2b45      	cmp	r3, #69	; 0x45
   15e54:	f000 80aa 	beq.w	15fac <d_type+0x290>
   15e58:	2500      	movs	r5, #0
   15e5a:	4628      	mov	r0, r5
   15e5c:	b003      	add	sp, #12
   15e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15e62:	f000 fd53 	bl	1690c <d_function_type>
   15e66:	6028      	str	r0, [r5, #0]
   15e68:	e7c9      	b.n	15dfe <d_type+0xe2>
   15e6a:	9a01      	ldr	r2, [sp, #4]
   15e6c:	6843      	ldr	r3, [r0, #4]
   15e6e:	6042      	str	r2, [r0, #4]
   15e70:	682a      	ldr	r2, [r5, #0]
   15e72:	9201      	str	r2, [sp, #4]
   15e74:	602b      	str	r3, [r5, #0]
   15e76:	e7c7      	b.n	15e08 <d_type+0xec>
   15e78:	7853      	ldrb	r3, [r2, #1]
   15e7a:	2b78      	cmp	r3, #120	; 0x78
   15e7c:	d0af      	beq.n	15dde <d_type+0xc2>
   15e7e:	1c53      	adds	r3, r2, #1
   15e80:	60c3      	str	r3, [r0, #12]
   15e82:	7853      	ldrb	r3, [r2, #1]
   15e84:	2b00      	cmp	r3, #0
   15e86:	d0e7      	beq.n	15e58 <d_type+0x13c>
   15e88:	1c93      	adds	r3, r2, #2
   15e8a:	60c3      	str	r3, [r0, #12]
   15e8c:	7853      	ldrb	r3, [r2, #1]
   15e8e:	3b46      	subs	r3, #70	; 0x46
   15e90:	2b30      	cmp	r3, #48	; 0x30
   15e92:	d8e1      	bhi.n	15e58 <d_type+0x13c>
   15e94:	a101      	add	r1, pc, #4	; (adr r1, 15e9c <d_type+0x180>)
   15e96:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15e9a:	bf00      	nop
   15e9c:	00016387 	.word	0x00016387
   15ea0:	00015e59 	.word	0x00015e59
   15ea4:	00015e59 	.word	0x00015e59
   15ea8:	00015e59 	.word	0x00015e59
   15eac:	00015e59 	.word	0x00015e59
   15eb0:	00015e59 	.word	0x00015e59
   15eb4:	00015e59 	.word	0x00015e59
   15eb8:	00015e59 	.word	0x00015e59
   15ebc:	00015e59 	.word	0x00015e59
   15ec0:	00015e59 	.word	0x00015e59
   15ec4:	00015e59 	.word	0x00015e59
   15ec8:	00015e59 	.word	0x00015e59
   15ecc:	00015e59 	.word	0x00015e59
   15ed0:	00015e59 	.word	0x00015e59
   15ed4:	00015e29 	.word	0x00015e29
   15ed8:	00015e59 	.word	0x00015e59
   15edc:	00015e59 	.word	0x00015e59
   15ee0:	00015e59 	.word	0x00015e59
   15ee4:	00015e59 	.word	0x00015e59
   15ee8:	00015e59 	.word	0x00015e59
   15eec:	00015e59 	.word	0x00015e59
   15ef0:	00015e59 	.word	0x00015e59
   15ef4:	00015e59 	.word	0x00015e59
   15ef8:	00015e59 	.word	0x00015e59
   15efc:	00015e59 	.word	0x00015e59
   15f00:	00015e59 	.word	0x00015e59
   15f04:	00015e59 	.word	0x00015e59
   15f08:	0001635b 	.word	0x0001635b
   15f0c:	00015e59 	.word	0x00015e59
   15f10:	0001632f 	.word	0x0001632f
   15f14:	0001630f 	.word	0x0001630f
   15f18:	000162e5 	.word	0x000162e5
   15f1c:	000162b7 	.word	0x000162b7
   15f20:	00015e59 	.word	0x00015e59
   15f24:	00016289 	.word	0x00016289
   15f28:	00016265 	.word	0x00016265
   15f2c:	00015e59 	.word	0x00015e59
   15f30:	00015e59 	.word	0x00015e59
   15f34:	00015e59 	.word	0x00015e59
   15f38:	00015e59 	.word	0x00015e59
   15f3c:	0001622b 	.word	0x0001622b
   15f40:	00015e59 	.word	0x00015e59
   15f44:	00016215 	.word	0x00016215
   15f48:	00015e59 	.word	0x00015e59
   15f4c:	00015e59 	.word	0x00015e59
   15f50:	000161e7 	.word	0x000161e7
   15f54:	00015e29 	.word	0x00015e29
   15f58:	00015e59 	.word	0x00015e59
   15f5c:	000161b1 	.word	0x000161b1
   15f60:	6960      	ldr	r0, [r4, #20]
   15f62:	69a5      	ldr	r5, [r4, #24]
   15f64:	49bc      	ldr	r1, [pc, #752]	; (16258 <d_type+0x53c>)
   15f66:	3b61      	subs	r3, #97	; 0x61
   15f68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15f6c:	42a8      	cmp	r0, r5
   15f6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15f72:	f280 823a 	bge.w	163ea <d_type+0x6ce>
   15f76:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15f7a:	6926      	ldr	r6, [r4, #16]
   15f7c:	0089      	lsls	r1, r1, #2
   15f7e:	3001      	adds	r0, #1
   15f80:	1875      	adds	r5, r6, r1
   15f82:	6160      	str	r0, [r4, #20]
   15f84:	f000 8231 	beq.w	163ea <d_type+0x6ce>
   15f88:	2027      	movs	r0, #39	; 0x27
   15f8a:	5470      	strb	r0, [r6, r1]
   15f8c:	606b      	str	r3, [r5, #4]
   15f8e:	6859      	ldr	r1, [r3, #4]
   15f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f92:	3201      	adds	r2, #1
   15f94:	440b      	add	r3, r1
   15f96:	60e2      	str	r2, [r4, #12]
   15f98:	6323      	str	r3, [r4, #48]	; 0x30
   15f9a:	e75e      	b.n	15e5a <d_type+0x13e>
   15f9c:	4620      	mov	r0, r4
   15f9e:	f7ff fd01 	bl	159a4 <d_name>
   15fa2:	4605      	mov	r5, r0
   15fa4:	9001      	str	r0, [sp, #4]
   15fa6:	2d00      	cmp	r5, #0
   15fa8:	f43f af56 	beq.w	15e58 <d_type+0x13c>
   15fac:	6a23      	ldr	r3, [r4, #32]
   15fae:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15fb0:	4293      	cmp	r3, r2
   15fb2:	f6bf af51 	bge.w	15e58 <d_type+0x13c>
   15fb6:	69e1      	ldr	r1, [r4, #28]
   15fb8:	1c5a      	adds	r2, r3, #1
   15fba:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15fbe:	9d01      	ldr	r5, [sp, #4]
   15fc0:	6222      	str	r2, [r4, #32]
   15fc2:	e74a      	b.n	15e5a <d_type+0x13e>
   15fc4:	3201      	adds	r2, #1
   15fc6:	60e2      	str	r2, [r4, #12]
   15fc8:	4620      	mov	r0, r4
   15fca:	f7fe fde9 	bl	14ba0 <d_source_name>
   15fce:	2300      	movs	r3, #0
   15fd0:	4602      	mov	r2, r0
   15fd2:	2128      	movs	r1, #40	; 0x28
   15fd4:	4620      	mov	r0, r4
   15fd6:	f7fe fc11 	bl	147fc <d_make_comp>
   15fda:	4605      	mov	r5, r0
   15fdc:	9001      	str	r0, [sp, #4]
   15fde:	e7e2      	b.n	15fa6 <d_type+0x28a>
   15fe0:	4620      	mov	r0, r4
   15fe2:	f000 fc93 	bl	1690c <d_function_type>
   15fe6:	4605      	mov	r5, r0
   15fe8:	9001      	str	r0, [sp, #4]
   15fea:	e7dc      	b.n	15fa6 <d_type+0x28a>
   15fec:	3201      	adds	r2, #1
   15fee:	60e2      	str	r2, [r4, #12]
   15ff0:	4620      	mov	r0, r4
   15ff2:	f7ff fe93 	bl	15d1c <d_type>
   15ff6:	2300      	movs	r3, #0
   15ff8:	4602      	mov	r2, r0
   15ffa:	2125      	movs	r1, #37	; 0x25
   15ffc:	4620      	mov	r0, r4
   15ffe:	f7fe fbfd 	bl	147fc <d_make_comp>
   16002:	4605      	mov	r5, r0
   16004:	9001      	str	r0, [sp, #4]
   16006:	e7ce      	b.n	15fa6 <d_type+0x28a>
   16008:	3201      	adds	r2, #1
   1600a:	60e2      	str	r2, [r4, #12]
   1600c:	4620      	mov	r0, r4
   1600e:	f7ff fe85 	bl	15d1c <d_type>
   16012:	2300      	movs	r3, #0
   16014:	4602      	mov	r2, r0
   16016:	2126      	movs	r1, #38	; 0x26
   16018:	4620      	mov	r0, r4
   1601a:	f7fe fbef 	bl	147fc <d_make_comp>
   1601e:	4605      	mov	r5, r0
   16020:	9001      	str	r0, [sp, #4]
   16022:	e7c0      	b.n	15fa6 <d_type+0x28a>
   16024:	3201      	adds	r2, #1
   16026:	60e2      	str	r2, [r4, #12]
   16028:	4620      	mov	r0, r4
   1602a:	f7ff fe77 	bl	15d1c <d_type>
   1602e:	4605      	mov	r5, r0
   16030:	2800      	cmp	r0, #0
   16032:	f000 80bb 	beq.w	161ac <d_type+0x490>
   16036:	4620      	mov	r0, r4
   16038:	f7ff fe70 	bl	15d1c <d_type>
   1603c:	2800      	cmp	r0, #0
   1603e:	f000 80b5 	beq.w	161ac <d_type+0x490>
   16042:	4603      	mov	r3, r0
   16044:	462a      	mov	r2, r5
   16046:	212b      	movs	r1, #43	; 0x2b
   16048:	4620      	mov	r0, r4
   1604a:	f7fe fbd7 	bl	147fc <d_make_comp>
   1604e:	4605      	mov	r5, r0
   16050:	9501      	str	r5, [sp, #4]
   16052:	e7a8      	b.n	15fa6 <d_type+0x28a>
   16054:	3201      	adds	r2, #1
   16056:	60e2      	str	r2, [r4, #12]
   16058:	4620      	mov	r0, r4
   1605a:	f7ff fe5f 	bl	15d1c <d_type>
   1605e:	2300      	movs	r3, #0
   16060:	4602      	mov	r2, r0
   16062:	2124      	movs	r1, #36	; 0x24
   16064:	4620      	mov	r0, r4
   16066:	f7fe fbc9 	bl	147fc <d_make_comp>
   1606a:	4605      	mov	r5, r0
   1606c:	9001      	str	r0, [sp, #4]
   1606e:	e79a      	b.n	15fa6 <d_type+0x28a>
   16070:	3201      	adds	r2, #1
   16072:	60e2      	str	r2, [r4, #12]
   16074:	4620      	mov	r0, r4
   16076:	f7ff fe51 	bl	15d1c <d_type>
   1607a:	2300      	movs	r3, #0
   1607c:	4602      	mov	r2, r0
   1607e:	2123      	movs	r1, #35	; 0x23
   16080:	4620      	mov	r0, r4
   16082:	f7fe fbbb 	bl	147fc <d_make_comp>
   16086:	4605      	mov	r5, r0
   16088:	9001      	str	r0, [sp, #4]
   1608a:	e78c      	b.n	15fa6 <d_type+0x28a>
   1608c:	7853      	ldrb	r3, [r2, #1]
   1608e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16092:	2a09      	cmp	r2, #9
   16094:	d905      	bls.n	160a2 <d_type+0x386>
   16096:	2b5f      	cmp	r3, #95	; 0x5f
   16098:	d003      	beq.n	160a2 <d_type+0x386>
   1609a:	3b41      	subs	r3, #65	; 0x41
   1609c:	2b19      	cmp	r3, #25
   1609e:	f200 81c3 	bhi.w	16428 <d_type+0x70c>
   160a2:	2100      	movs	r1, #0
   160a4:	4620      	mov	r0, r4
   160a6:	f7fe fdf3 	bl	14c90 <d_substitution>
   160aa:	68e3      	ldr	r3, [r4, #12]
   160ac:	9001      	str	r0, [sp, #4]
   160ae:	781b      	ldrb	r3, [r3, #0]
   160b0:	2b49      	cmp	r3, #73	; 0x49
   160b2:	4605      	mov	r5, r0
   160b4:	f47f aed1 	bne.w	15e5a <d_type+0x13e>
   160b8:	4620      	mov	r0, r4
   160ba:	f7ff fc69 	bl	15990 <d_template_args>
   160be:	462a      	mov	r2, r5
   160c0:	4603      	mov	r3, r0
   160c2:	2104      	movs	r1, #4
   160c4:	4620      	mov	r0, r4
   160c6:	f7fe fb99 	bl	147fc <d_make_comp>
   160ca:	4605      	mov	r5, r0
   160cc:	e7c0      	b.n	16050 <d_type+0x334>
   160ce:	3201      	adds	r2, #1
   160d0:	60e2      	str	r2, [r4, #12]
   160d2:	4620      	mov	r0, r4
   160d4:	f7ff fe22 	bl	15d1c <d_type>
   160d8:	2300      	movs	r3, #0
   160da:	4602      	mov	r2, r0
   160dc:	2122      	movs	r1, #34	; 0x22
   160de:	4620      	mov	r0, r4
   160e0:	f7fe fb8c 	bl	147fc <d_make_comp>
   160e4:	4605      	mov	r5, r0
   160e6:	9001      	str	r0, [sp, #4]
   160e8:	e75d      	b.n	15fa6 <d_type+0x28a>
   160ea:	4620      	mov	r0, r4
   160ec:	f7fe fd36 	bl	14b5c <d_template_param>
   160f0:	68e6      	ldr	r6, [r4, #12]
   160f2:	9001      	str	r0, [sp, #4]
   160f4:	7833      	ldrb	r3, [r6, #0]
   160f6:	2b49      	cmp	r3, #73	; 0x49
   160f8:	4605      	mov	r5, r0
   160fa:	f47f af54 	bne.w	15fa6 <d_type+0x28a>
   160fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16100:	2b00      	cmp	r3, #0
   16102:	f040 81a9 	bne.w	16458 <d_type+0x73c>
   16106:	2800      	cmp	r0, #0
   16108:	f43f aea6 	beq.w	15e58 <d_type+0x13c>
   1610c:	6a23      	ldr	r3, [r4, #32]
   1610e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16110:	4293      	cmp	r3, r2
   16112:	f6bf aea1 	bge.w	15e58 <d_type+0x13c>
   16116:	69e1      	ldr	r1, [r4, #28]
   16118:	1c5a      	adds	r2, r3, #1
   1611a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1611e:	6222      	str	r2, [r4, #32]
   16120:	4620      	mov	r0, r4
   16122:	9d01      	ldr	r5, [sp, #4]
   16124:	f7ff fc34 	bl	15990 <d_template_args>
   16128:	462a      	mov	r2, r5
   1612a:	4603      	mov	r3, r0
   1612c:	e7c9      	b.n	160c2 <d_type+0x3a6>
   1612e:	3201      	adds	r2, #1
   16130:	60e2      	str	r2, [r4, #12]
   16132:	4620      	mov	r0, r4
   16134:	f7fe fd34 	bl	14ba0 <d_source_name>
   16138:	68e3      	ldr	r3, [r4, #12]
   1613a:	9001      	str	r0, [sp, #4]
   1613c:	781b      	ldrb	r3, [r3, #0]
   1613e:	2b49      	cmp	r3, #73	; 0x49
   16140:	4605      	mov	r5, r0
   16142:	f000 817e 	beq.w	16442 <d_type+0x726>
   16146:	4620      	mov	r0, r4
   16148:	f7ff fde8 	bl	15d1c <d_type>
   1614c:	9b01      	ldr	r3, [sp, #4]
   1614e:	4602      	mov	r2, r0
   16150:	2121      	movs	r1, #33	; 0x21
   16152:	4620      	mov	r0, r4
   16154:	f7fe fb52 	bl	147fc <d_make_comp>
   16158:	4605      	mov	r5, r0
   1615a:	9001      	str	r0, [sp, #4]
   1615c:	e723      	b.n	15fa6 <d_type+0x28a>
   1615e:	1c51      	adds	r1, r2, #1
   16160:	60e1      	str	r1, [r4, #12]
   16162:	7853      	ldrb	r3, [r2, #1]
   16164:	2b5f      	cmp	r3, #95	; 0x5f
   16166:	f000 8144 	beq.w	163f2 <d_type+0x6d6>
   1616a:	3b30      	subs	r3, #48	; 0x30
   1616c:	2b09      	cmp	r3, #9
   1616e:	f200 814e 	bhi.w	1640e <d_type+0x6f2>
   16172:	460b      	mov	r3, r1
   16174:	3301      	adds	r3, #1
   16176:	60e3      	str	r3, [r4, #12]
   16178:	781a      	ldrb	r2, [r3, #0]
   1617a:	3a30      	subs	r2, #48	; 0x30
   1617c:	2a09      	cmp	r2, #9
   1617e:	d9f9      	bls.n	16174 <d_type+0x458>
   16180:	6962      	ldr	r2, [r4, #20]
   16182:	69a0      	ldr	r0, [r4, #24]
   16184:	4282      	cmp	r2, r0
   16186:	da11      	bge.n	161ac <d_type+0x490>
   16188:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   1618c:	6926      	ldr	r6, [r4, #16]
   1618e:	0080      	lsls	r0, r0, #2
   16190:	3201      	adds	r2, #1
   16192:	1835      	adds	r5, r6, r0
   16194:	6162      	str	r2, [r4, #20]
   16196:	d009      	beq.n	161ac <d_type+0x490>
   16198:	1a5a      	subs	r2, r3, r1
   1619a:	d007      	beq.n	161ac <d_type+0x490>
   1619c:	2700      	movs	r7, #0
   1619e:	5437      	strb	r7, [r6, r0]
   161a0:	6069      	str	r1, [r5, #4]
   161a2:	60aa      	str	r2, [r5, #8]
   161a4:	781a      	ldrb	r2, [r3, #0]
   161a6:	2a5f      	cmp	r2, #95	; 0x5f
   161a8:	f000 8190 	beq.w	164cc <d_type+0x7b0>
   161ac:	2500      	movs	r5, #0
   161ae:	e74f      	b.n	16050 <d_type+0x334>
   161b0:	7893      	ldrb	r3, [r2, #2]
   161b2:	2b5f      	cmp	r3, #95	; 0x5f
   161b4:	f000 8180 	beq.w	164b8 <d_type+0x79c>
   161b8:	f7fe fc9c 	bl	14af4 <d_number_component>
   161bc:	4605      	mov	r5, r0
   161be:	2d00      	cmp	r5, #0
   161c0:	f43f af46 	beq.w	16050 <d_type+0x334>
   161c4:	68e3      	ldr	r3, [r4, #12]
   161c6:	781a      	ldrb	r2, [r3, #0]
   161c8:	2a5f      	cmp	r2, #95	; 0x5f
   161ca:	d1ef      	bne.n	161ac <d_type+0x490>
   161cc:	3301      	adds	r3, #1
   161ce:	60e3      	str	r3, [r4, #12]
   161d0:	4620      	mov	r0, r4
   161d2:	f7ff fda3 	bl	15d1c <d_type>
   161d6:	462a      	mov	r2, r5
   161d8:	4603      	mov	r3, r0
   161da:	212d      	movs	r1, #45	; 0x2d
   161dc:	4620      	mov	r0, r4
   161de:	f7fe fb0d 	bl	147fc <d_make_comp>
   161e2:	4605      	mov	r5, r0
   161e4:	e734      	b.n	16050 <d_type+0x334>
   161e6:	6942      	ldr	r2, [r0, #20]
   161e8:	6983      	ldr	r3, [r0, #24]
   161ea:	429a      	cmp	r2, r3
   161ec:	f280 80fd 	bge.w	163ea <d_type+0x6ce>
   161f0:	230c      	movs	r3, #12
   161f2:	6901      	ldr	r1, [r0, #16]
   161f4:	fb03 f302 	mul.w	r3, r3, r2
   161f8:	18cd      	adds	r5, r1, r3
   161fa:	f102 0201 	add.w	r2, r2, #1
   161fe:	6142      	str	r2, [r0, #20]
   16200:	f000 80f3 	beq.w	163ea <d_type+0x6ce>
   16204:	4a15      	ldr	r2, [pc, #84]	; (1625c <d_type+0x540>)
   16206:	2027      	movs	r0, #39	; 0x27
   16208:	54c8      	strb	r0, [r1, r3]
   1620a:	606a      	str	r2, [r5, #4]
   1620c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1620e:	3308      	adds	r3, #8
   16210:	6323      	str	r3, [r4, #48]	; 0x30
   16212:	e622      	b.n	15e5a <d_type+0x13e>
   16214:	f7ff fd82 	bl	15d1c <d_type>
   16218:	2300      	movs	r3, #0
   1621a:	4602      	mov	r2, r0
   1621c:	214a      	movs	r1, #74	; 0x4a
   1621e:	4620      	mov	r0, r4
   16220:	f7fe faec 	bl	147fc <d_make_comp>
   16224:	4605      	mov	r5, r0
   16226:	9001      	str	r0, [sp, #4]
   16228:	e6bd      	b.n	15fa6 <d_type+0x28a>
   1622a:	6942      	ldr	r2, [r0, #20]
   1622c:	6983      	ldr	r3, [r0, #24]
   1622e:	429a      	cmp	r2, r3
   16230:	f280 80db 	bge.w	163ea <d_type+0x6ce>
   16234:	230c      	movs	r3, #12
   16236:	6901      	ldr	r1, [r0, #16]
   16238:	fb03 f302 	mul.w	r3, r3, r2
   1623c:	18cd      	adds	r5, r1, r3
   1623e:	f102 0201 	add.w	r2, r2, #1
   16242:	6142      	str	r2, [r0, #20]
   16244:	f000 80d1 	beq.w	163ea <d_type+0x6ce>
   16248:	2027      	movs	r0, #39	; 0x27
   1624a:	4a05      	ldr	r2, [pc, #20]	; (16260 <d_type+0x544>)
   1624c:	54c8      	strb	r0, [r1, r3]
   1624e:	606a      	str	r2, [r5, #4]
   16250:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16252:	3311      	adds	r3, #17
   16254:	6323      	str	r3, [r4, #48]	; 0x30
   16256:	e600      	b.n	15e5a <d_type+0x13e>
   16258:	00023ea0 	.word	0x00023ea0
   1625c:	000240f8 	.word	0x000240f8
   16260:	00024120 	.word	0x00024120
   16264:	6942      	ldr	r2, [r0, #20]
   16266:	6983      	ldr	r3, [r0, #24]
   16268:	429a      	cmp	r2, r3
   1626a:	f280 80be 	bge.w	163ea <d_type+0x6ce>
   1626e:	230c      	movs	r3, #12
   16270:	6901      	ldr	r1, [r0, #16]
   16272:	fb03 f302 	mul.w	r3, r3, r2
   16276:	18cd      	adds	r5, r1, r3
   16278:	f102 0201 	add.w	r2, r2, #1
   1627c:	6142      	str	r2, [r0, #20]
   1627e:	f000 80b4 	beq.w	163ea <d_type+0x6ce>
   16282:	2027      	movs	r0, #39	; 0x27
   16284:	4a92      	ldr	r2, [pc, #584]	; (164d0 <d_type+0x7b4>)
   16286:	e7bf      	b.n	16208 <d_type+0x4ec>
   16288:	6942      	ldr	r2, [r0, #20]
   1628a:	6983      	ldr	r3, [r0, #24]
   1628c:	429a      	cmp	r2, r3
   1628e:	f280 80ac 	bge.w	163ea <d_type+0x6ce>
   16292:	230c      	movs	r3, #12
   16294:	6901      	ldr	r1, [r0, #16]
   16296:	fb03 f302 	mul.w	r3, r3, r2
   1629a:	18cd      	adds	r5, r1, r3
   1629c:	f102 0201 	add.w	r2, r2, #1
   162a0:	6142      	str	r2, [r0, #20]
   162a2:	f000 80a2 	beq.w	163ea <d_type+0x6ce>
   162a6:	2027      	movs	r0, #39	; 0x27
   162a8:	4a8a      	ldr	r2, [pc, #552]	; (164d4 <d_type+0x7b8>)
   162aa:	54c8      	strb	r0, [r1, r3]
   162ac:	606a      	str	r2, [r5, #4]
   162ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
   162b0:	3304      	adds	r3, #4
   162b2:	6323      	str	r3, [r4, #48]	; 0x30
   162b4:	e5d1      	b.n	15e5a <d_type+0x13e>
   162b6:	6942      	ldr	r2, [r0, #20]
   162b8:	6983      	ldr	r3, [r0, #24]
   162ba:	429a      	cmp	r2, r3
   162bc:	f280 8095 	bge.w	163ea <d_type+0x6ce>
   162c0:	230c      	movs	r3, #12
   162c2:	6901      	ldr	r1, [r0, #16]
   162c4:	fb03 f302 	mul.w	r3, r3, r2
   162c8:	18cd      	adds	r5, r1, r3
   162ca:	f102 0201 	add.w	r2, r2, #1
   162ce:	6142      	str	r2, [r0, #20]
   162d0:	f000 808b 	beq.w	163ea <d_type+0x6ce>
   162d4:	4a80      	ldr	r2, [pc, #512]	; (164d8 <d_type+0x7bc>)
   162d6:	2027      	movs	r0, #39	; 0x27
   162d8:	54c8      	strb	r0, [r1, r3]
   162da:	606a      	str	r2, [r5, #4]
   162dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   162de:	3309      	adds	r3, #9
   162e0:	6323      	str	r3, [r4, #48]	; 0x30
   162e2:	e5ba      	b.n	15e5a <d_type+0x13e>
   162e4:	6942      	ldr	r2, [r0, #20]
   162e6:	6983      	ldr	r3, [r0, #24]
   162e8:	429a      	cmp	r2, r3
   162ea:	da7e      	bge.n	163ea <d_type+0x6ce>
   162ec:	230c      	movs	r3, #12
   162ee:	6901      	ldr	r1, [r0, #16]
   162f0:	fb03 f302 	mul.w	r3, r3, r2
   162f4:	18cd      	adds	r5, r1, r3
   162f6:	f102 0201 	add.w	r2, r2, #1
   162fa:	6142      	str	r2, [r0, #20]
   162fc:	d075      	beq.n	163ea <d_type+0x6ce>
   162fe:	2027      	movs	r0, #39	; 0x27
   16300:	4a76      	ldr	r2, [pc, #472]	; (164dc <d_type+0x7c0>)
   16302:	54c8      	strb	r0, [r1, r3]
   16304:	606a      	str	r2, [r5, #4]
   16306:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16308:	330a      	adds	r3, #10
   1630a:	6323      	str	r3, [r4, #48]	; 0x30
   1630c:	e5a5      	b.n	15e5a <d_type+0x13e>
   1630e:	6942      	ldr	r2, [r0, #20]
   16310:	6983      	ldr	r3, [r0, #24]
   16312:	429a      	cmp	r2, r3
   16314:	da69      	bge.n	163ea <d_type+0x6ce>
   16316:	230c      	movs	r3, #12
   16318:	6901      	ldr	r1, [r0, #16]
   1631a:	fb03 f302 	mul.w	r3, r3, r2
   1631e:	18cd      	adds	r5, r1, r3
   16320:	f102 0201 	add.w	r2, r2, #1
   16324:	6142      	str	r2, [r0, #20]
   16326:	d060      	beq.n	163ea <d_type+0x6ce>
   16328:	2027      	movs	r0, #39	; 0x27
   1632a:	4a6d      	ldr	r2, [pc, #436]	; (164e0 <d_type+0x7c4>)
   1632c:	e7d4      	b.n	162d8 <d_type+0x5bc>
   1632e:	6942      	ldr	r2, [r0, #20]
   16330:	6983      	ldr	r3, [r0, #24]
   16332:	429a      	cmp	r2, r3
   16334:	f6bf ad90 	bge.w	15e58 <d_type+0x13c>
   16338:	230c      	movs	r3, #12
   1633a:	6901      	ldr	r1, [r0, #16]
   1633c:	fb03 f302 	mul.w	r3, r3, r2
   16340:	18cd      	adds	r5, r1, r3
   16342:	f102 0201 	add.w	r2, r2, #1
   16346:	6142      	str	r2, [r0, #20]
   16348:	f43f ad87 	beq.w	15e5a <d_type+0x13e>
   1634c:	2000      	movs	r0, #0
   1634e:	54c8      	strb	r0, [r1, r3]
   16350:	4a64      	ldr	r2, [pc, #400]	; (164e4 <d_type+0x7c8>)
   16352:	606a      	str	r2, [r5, #4]
   16354:	230e      	movs	r3, #14
   16356:	60ab      	str	r3, [r5, #8]
   16358:	e57f      	b.n	15e5a <d_type+0x13e>
   1635a:	6942      	ldr	r2, [r0, #20]
   1635c:	6983      	ldr	r3, [r0, #24]
   1635e:	429a      	cmp	r2, r3
   16360:	f6bf ad7a 	bge.w	15e58 <d_type+0x13c>
   16364:	230c      	movs	r3, #12
   16366:	6901      	ldr	r1, [r0, #16]
   16368:	fb03 f302 	mul.w	r3, r3, r2
   1636c:	18cd      	adds	r5, r1, r3
   1636e:	f102 0201 	add.w	r2, r2, #1
   16372:	6142      	str	r2, [r0, #20]
   16374:	f43f ad71 	beq.w	15e5a <d_type+0x13e>
   16378:	2000      	movs	r0, #0
   1637a:	54c8      	strb	r0, [r1, r3]
   1637c:	4a5a      	ldr	r2, [pc, #360]	; (164e8 <d_type+0x7cc>)
   1637e:	606a      	str	r2, [r5, #4]
   16380:	2304      	movs	r3, #4
   16382:	60ab      	str	r3, [r5, #8]
   16384:	e569      	b.n	15e5a <d_type+0x13e>
   16386:	6943      	ldr	r3, [r0, #20]
   16388:	6981      	ldr	r1, [r0, #24]
   1638a:	428b      	cmp	r3, r1
   1638c:	da7a      	bge.n	16484 <d_type+0x768>
   1638e:	6900      	ldr	r0, [r0, #16]
   16390:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16394:	0089      	lsls	r1, r1, #2
   16396:	3301      	adds	r3, #1
   16398:	1845      	adds	r5, r0, r1
   1639a:	262c      	movs	r6, #44	; 0x2c
   1639c:	6163      	str	r3, [r4, #20]
   1639e:	9501      	str	r5, [sp, #4]
   163a0:	5446      	strb	r6, [r0, r1]
   163a2:	7893      	ldrb	r3, [r2, #2]
   163a4:	3b30      	subs	r3, #48	; 0x30
   163a6:	b2db      	uxtb	r3, r3
   163a8:	2b09      	cmp	r3, #9
   163aa:	bf94      	ite	ls
   163ac:	2301      	movls	r3, #1
   163ae:	2300      	movhi	r3, #0
   163b0:	812b      	strh	r3, [r5, #8]
   163b2:	d97b      	bls.n	164ac <d_type+0x790>
   163b4:	4620      	mov	r0, r4
   163b6:	f7ff fcb1 	bl	15d1c <d_type>
   163ba:	9b01      	ldr	r3, [sp, #4]
   163bc:	6068      	str	r0, [r5, #4]
   163be:	685b      	ldr	r3, [r3, #4]
   163c0:	2b00      	cmp	r3, #0
   163c2:	f43f ad49 	beq.w	15e58 <d_type+0x13c>
   163c6:	f104 000c 	add.w	r0, r4, #12
   163ca:	f7fe fb69 	bl	14aa0 <d_number.isra.0>
   163ce:	68e2      	ldr	r2, [r4, #12]
   163d0:	7813      	ldrb	r3, [r2, #0]
   163d2:	b113      	cbz	r3, 163da <d_type+0x6be>
   163d4:	1c53      	adds	r3, r2, #1
   163d6:	60e3      	str	r3, [r4, #12]
   163d8:	7813      	ldrb	r3, [r2, #0]
   163da:	9d01      	ldr	r5, [sp, #4]
   163dc:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   163e0:	fab3 f383 	clz	r3, r3
   163e4:	095b      	lsrs	r3, r3, #5
   163e6:	816b      	strh	r3, [r5, #10]
   163e8:	e537      	b.n	15e5a <d_type+0x13e>
   163ea:	2300      	movs	r3, #0
   163ec:	9301      	str	r3, [sp, #4]
   163ee:	685b      	ldr	r3, [r3, #4]
   163f0:	deff      	udf	#255	; 0xff
   163f2:	2500      	movs	r5, #0
   163f4:	3101      	adds	r1, #1
   163f6:	60e1      	str	r1, [r4, #12]
   163f8:	4620      	mov	r0, r4
   163fa:	f7ff fc8f 	bl	15d1c <d_type>
   163fe:	462a      	mov	r2, r5
   16400:	4603      	mov	r3, r0
   16402:	212a      	movs	r1, #42	; 0x2a
   16404:	4620      	mov	r0, r4
   16406:	f7fe f9f9 	bl	147fc <d_make_comp>
   1640a:	4605      	mov	r5, r0
   1640c:	e620      	b.n	16050 <d_type+0x334>
   1640e:	2301      	movs	r3, #1
   16410:	6b65      	ldr	r5, [r4, #52]	; 0x34
   16412:	6363      	str	r3, [r4, #52]	; 0x34
   16414:	4620      	mov	r0, r4
   16416:	f7ff f85d 	bl	154d4 <d_expression_1>
   1641a:	6365      	str	r5, [r4, #52]	; 0x34
   1641c:	4605      	mov	r5, r0
   1641e:	2800      	cmp	r0, #0
   16420:	f43f aec4 	beq.w	161ac <d_type+0x490>
   16424:	68e3      	ldr	r3, [r4, #12]
   16426:	e6bd      	b.n	161a4 <d_type+0x488>
   16428:	4620      	mov	r0, r4
   1642a:	f7ff fabb 	bl	159a4 <d_name>
   1642e:	4605      	mov	r5, r0
   16430:	9001      	str	r0, [sp, #4]
   16432:	2800      	cmp	r0, #0
   16434:	f43f ad10 	beq.w	15e58 <d_type+0x13c>
   16438:	7803      	ldrb	r3, [r0, #0]
   1643a:	2b18      	cmp	r3, #24
   1643c:	f47f adb6 	bne.w	15fac <d_type+0x290>
   16440:	e50b      	b.n	15e5a <d_type+0x13e>
   16442:	4620      	mov	r0, r4
   16444:	f7ff faa4 	bl	15990 <d_template_args>
   16448:	462a      	mov	r2, r5
   1644a:	4603      	mov	r3, r0
   1644c:	2104      	movs	r1, #4
   1644e:	4620      	mov	r0, r4
   16450:	f7fe f9d4 	bl	147fc <d_make_comp>
   16454:	9001      	str	r0, [sp, #4]
   16456:	e676      	b.n	16146 <d_type+0x42a>
   16458:	4620      	mov	r0, r4
   1645a:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1645e:	f8d4 8020 	ldr.w	r8, [r4, #32]
   16462:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   16464:	6b25      	ldr	r5, [r4, #48]	; 0x30
   16466:	f7ff fa93 	bl	15990 <d_template_args>
   1646a:	68e2      	ldr	r2, [r4, #12]
   1646c:	7812      	ldrb	r2, [r2, #0]
   1646e:	2a49      	cmp	r2, #73	; 0x49
   16470:	d00b      	beq.n	1648a <d_type+0x76e>
   16472:	6325      	str	r5, [r4, #48]	; 0x30
   16474:	60e6      	str	r6, [r4, #12]
   16476:	f8c4 9014 	str.w	r9, [r4, #20]
   1647a:	f8c4 8020 	str.w	r8, [r4, #32]
   1647e:	62a7      	str	r7, [r4, #40]	; 0x28
   16480:	9d01      	ldr	r5, [sp, #4]
   16482:	e590      	b.n	15fa6 <d_type+0x28a>
   16484:	2300      	movs	r3, #0
   16486:	701b      	strb	r3, [r3, #0]
   16488:	deff      	udf	#255	; 0xff
   1648a:	9b01      	ldr	r3, [sp, #4]
   1648c:	2b00      	cmp	r3, #0
   1648e:	f43f ace3 	beq.w	15e58 <d_type+0x13c>
   16492:	6a22      	ldr	r2, [r4, #32]
   16494:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16496:	428a      	cmp	r2, r1
   16498:	f6bf acde 	bge.w	15e58 <d_type+0x13c>
   1649c:	69e5      	ldr	r5, [r4, #28]
   1649e:	1c51      	adds	r1, r2, #1
   164a0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   164a4:	9a01      	ldr	r2, [sp, #4]
   164a6:	6221      	str	r1, [r4, #32]
   164a8:	4603      	mov	r3, r0
   164aa:	e60a      	b.n	160c2 <d_type+0x3a6>
   164ac:	f104 000c 	add.w	r0, r4, #12
   164b0:	f7fe faf6 	bl	14aa0 <d_number.isra.0>
   164b4:	9d01      	ldr	r5, [sp, #4]
   164b6:	e77d      	b.n	163b4 <d_type+0x698>
   164b8:	3203      	adds	r2, #3
   164ba:	2301      	movs	r3, #1
   164bc:	6b46      	ldr	r6, [r0, #52]	; 0x34
   164be:	60c2      	str	r2, [r0, #12]
   164c0:	6343      	str	r3, [r0, #52]	; 0x34
   164c2:	f7ff f807 	bl	154d4 <d_expression_1>
   164c6:	6366      	str	r6, [r4, #52]	; 0x34
   164c8:	4605      	mov	r5, r0
   164ca:	e678      	b.n	161be <d_type+0x4a2>
   164cc:	4619      	mov	r1, r3
   164ce:	e791      	b.n	163f4 <d_type+0x6d8>
   164d0:	0002410c 	.word	0x0002410c
   164d4:	000240e4 	.word	0x000240e4
   164d8:	000240a8 	.word	0x000240a8
   164dc:	000240d0 	.word	0x000240d0
   164e0:	000240bc 	.word	0x000240bc
   164e4:	000245cc 	.word	0x000245cc
   164e8:	000245c4 	.word	0x000245c4

000164ec <d_operator_name>:
   164ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164ee:	68c3      	ldr	r3, [r0, #12]
   164f0:	781e      	ldrb	r6, [r3, #0]
   164f2:	4684      	mov	ip, r0
   164f4:	b326      	cbz	r6, 16540 <d_operator_name+0x54>
   164f6:	1c5a      	adds	r2, r3, #1
   164f8:	60c2      	str	r2, [r0, #12]
   164fa:	785a      	ldrb	r2, [r3, #1]
   164fc:	781e      	ldrb	r6, [r3, #0]
   164fe:	2a00      	cmp	r2, #0
   16500:	d058      	beq.n	165b4 <d_operator_name+0xc8>
   16502:	1c9a      	adds	r2, r3, #2
   16504:	60c2      	str	r2, [r0, #12]
   16506:	2e76      	cmp	r6, #118	; 0x76
   16508:	4604      	mov	r4, r0
   1650a:	f893 e001 	ldrb.w	lr, [r3, #1]
   1650e:	d043      	beq.n	16598 <d_operator_name+0xac>
   16510:	2e63      	cmp	r6, #99	; 0x63
   16512:	d116      	bne.n	16542 <d_operator_name+0x56>
   16514:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   16518:	d113      	bne.n	16542 <d_operator_name+0x56>
   1651a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1651c:	6b85      	ldr	r5, [r0, #56]	; 0x38
   1651e:	fab3 f383 	clz	r3, r3
   16522:	095b      	lsrs	r3, r3, #5
   16524:	6383      	str	r3, [r0, #56]	; 0x38
   16526:	f7ff fbf9 	bl	15d1c <d_type>
   1652a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1652c:	4602      	mov	r2, r0
   1652e:	2b00      	cmp	r3, #0
   16530:	d052      	beq.n	165d8 <d_operator_name+0xec>
   16532:	2300      	movs	r3, #0
   16534:	2134      	movs	r1, #52	; 0x34
   16536:	4620      	mov	r0, r4
   16538:	f7fe f960 	bl	147fc <d_make_comp>
   1653c:	63a5      	str	r5, [r4, #56]	; 0x38
   1653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16540:	46b6      	mov	lr, r6
   16542:	4c28      	ldr	r4, [pc, #160]	; (165e4 <d_operator_name+0xf8>)
   16544:	2043      	movs	r0, #67	; 0x43
   16546:	2200      	movs	r2, #0
   16548:	e004      	b.n	16554 <d_operator_name+0x68>
   1654a:	bf94      	ite	ls
   1654c:	1c5a      	addls	r2, r3, #1
   1654e:	4618      	movhi	r0, r3
   16550:	4282      	cmp	r2, r0
   16552:	d02d      	beq.n	165b0 <d_operator_name+0xc4>
   16554:	1a83      	subs	r3, r0, r2
   16556:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1655a:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1655e:	0119      	lsls	r1, r3, #4
   16560:	1867      	adds	r7, r4, r1
   16562:	5861      	ldr	r1, [r4, r1]
   16564:	780d      	ldrb	r5, [r1, #0]
   16566:	42b5      	cmp	r5, r6
   16568:	d1ef      	bne.n	1654a <d_operator_name+0x5e>
   1656a:	7849      	ldrb	r1, [r1, #1]
   1656c:	4571      	cmp	r1, lr
   1656e:	d1ec      	bne.n	1654a <d_operator_name+0x5e>
   16570:	f8dc 3014 	ldr.w	r3, [ip, #20]
   16574:	f8dc 2018 	ldr.w	r2, [ip, #24]
   16578:	4293      	cmp	r3, r2
   1657a:	da19      	bge.n	165b0 <d_operator_name+0xc4>
   1657c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16580:	f8dc 1010 	ldr.w	r1, [ip, #16]
   16584:	0092      	lsls	r2, r2, #2
   16586:	3301      	adds	r3, #1
   16588:	1888      	adds	r0, r1, r2
   1658a:	f8cc 3014 	str.w	r3, [ip, #20]
   1658e:	d013      	beq.n	165b8 <d_operator_name+0xcc>
   16590:	2331      	movs	r3, #49	; 0x31
   16592:	548b      	strb	r3, [r1, r2]
   16594:	6047      	str	r7, [r0, #4]
   16596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16598:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   1659c:	b2eb      	uxtb	r3, r5
   1659e:	2b09      	cmp	r3, #9
   165a0:	d8cf      	bhi.n	16542 <d_operator_name+0x56>
   165a2:	f7fe fafd 	bl	14ba0 <d_source_name>
   165a6:	6963      	ldr	r3, [r4, #20]
   165a8:	69a2      	ldr	r2, [r4, #24]
   165aa:	4293      	cmp	r3, r2
   165ac:	4601      	mov	r1, r0
   165ae:	db04      	blt.n	165ba <d_operator_name+0xce>
   165b0:	2000      	movs	r0, #0
   165b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   165b4:	4696      	mov	lr, r2
   165b6:	e7c4      	b.n	16542 <d_operator_name+0x56>
   165b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   165ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   165be:	6926      	ldr	r6, [r4, #16]
   165c0:	0092      	lsls	r2, r2, #2
   165c2:	3301      	adds	r3, #1
   165c4:	18b0      	adds	r0, r6, r2
   165c6:	6163      	str	r3, [r4, #20]
   165c8:	d0f2      	beq.n	165b0 <d_operator_name+0xc4>
   165ca:	2900      	cmp	r1, #0
   165cc:	d0f0      	beq.n	165b0 <d_operator_name+0xc4>
   165ce:	2332      	movs	r3, #50	; 0x32
   165d0:	54b3      	strb	r3, [r6, r2]
   165d2:	6045      	str	r5, [r0, #4]
   165d4:	6081      	str	r1, [r0, #8]
   165d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   165d8:	2133      	movs	r1, #51	; 0x33
   165da:	4620      	mov	r0, r4
   165dc:	f7fe f90e 	bl	147fc <d_make_comp>
   165e0:	e7ac      	b.n	1653c <d_operator_name+0x50>
   165e2:	bf00      	nop
   165e4:	00024134 	.word	0x00024134

000165e8 <d_parmlist>:
   165e8:	b530      	push	{r4, r5, lr}
   165ea:	68c2      	ldr	r2, [r0, #12]
   165ec:	b083      	sub	sp, #12
   165ee:	2300      	movs	r3, #0
   165f0:	9301      	str	r3, [sp, #4]
   165f2:	7813      	ldrb	r3, [r2, #0]
   165f4:	b343      	cbz	r3, 16648 <d_parmlist+0x60>
   165f6:	2b45      	cmp	r3, #69	; 0x45
   165f8:	d026      	beq.n	16648 <d_parmlist+0x60>
   165fa:	2b2e      	cmp	r3, #46	; 0x2e
   165fc:	d024      	beq.n	16648 <d_parmlist+0x60>
   165fe:	4604      	mov	r4, r0
   16600:	ad01      	add	r5, sp, #4
   16602:	e015      	b.n	16630 <d_parmlist+0x48>
   16604:	2b4f      	cmp	r3, #79	; 0x4f
   16606:	d016      	beq.n	16636 <d_parmlist+0x4e>
   16608:	f7ff fb88 	bl	15d1c <d_type>
   1660c:	2300      	movs	r3, #0
   1660e:	4602      	mov	r2, r0
   16610:	212e      	movs	r1, #46	; 0x2e
   16612:	b1c8      	cbz	r0, 16648 <d_parmlist+0x60>
   16614:	4620      	mov	r0, r4
   16616:	f7fe f8f1 	bl	147fc <d_make_comp>
   1661a:	6028      	str	r0, [r5, #0]
   1661c:	b1a0      	cbz	r0, 16648 <d_parmlist+0x60>
   1661e:	68e2      	ldr	r2, [r4, #12]
   16620:	7813      	ldrb	r3, [r2, #0]
   16622:	f100 0508 	add.w	r5, r0, #8
   16626:	b14b      	cbz	r3, 1663c <d_parmlist+0x54>
   16628:	2b45      	cmp	r3, #69	; 0x45
   1662a:	d007      	beq.n	1663c <d_parmlist+0x54>
   1662c:	2b2e      	cmp	r3, #46	; 0x2e
   1662e:	d005      	beq.n	1663c <d_parmlist+0x54>
   16630:	2b52      	cmp	r3, #82	; 0x52
   16632:	4620      	mov	r0, r4
   16634:	d1e6      	bne.n	16604 <d_parmlist+0x1c>
   16636:	7853      	ldrb	r3, [r2, #1]
   16638:	2b45      	cmp	r3, #69	; 0x45
   1663a:	d1e5      	bne.n	16608 <d_parmlist+0x20>
   1663c:	9801      	ldr	r0, [sp, #4]
   1663e:	b118      	cbz	r0, 16648 <d_parmlist+0x60>
   16640:	6883      	ldr	r3, [r0, #8]
   16642:	b123      	cbz	r3, 1664e <d_parmlist+0x66>
   16644:	b003      	add	sp, #12
   16646:	bd30      	pop	{r4, r5, pc}
   16648:	2000      	movs	r0, #0
   1664a:	b003      	add	sp, #12
   1664c:	bd30      	pop	{r4, r5, pc}
   1664e:	6842      	ldr	r2, [r0, #4]
   16650:	7811      	ldrb	r1, [r2, #0]
   16652:	2927      	cmp	r1, #39	; 0x27
   16654:	d1f6      	bne.n	16644 <d_parmlist+0x5c>
   16656:	6852      	ldr	r2, [r2, #4]
   16658:	7c11      	ldrb	r1, [r2, #16]
   1665a:	2909      	cmp	r1, #9
   1665c:	d1f2      	bne.n	16644 <d_parmlist+0x5c>
   1665e:	6851      	ldr	r1, [r2, #4]
   16660:	6b22      	ldr	r2, [r4, #48]	; 0x30
   16662:	1a52      	subs	r2, r2, r1
   16664:	6322      	str	r2, [r4, #48]	; 0x30
   16666:	6043      	str	r3, [r0, #4]
   16668:	e7ec      	b.n	16644 <d_parmlist+0x5c>
   1666a:	bf00      	nop

0001666c <d_unqualified_name>:
   1666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1666e:	68c1      	ldr	r1, [r0, #12]
   16670:	780b      	ldrb	r3, [r1, #0]
   16672:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16676:	2a09      	cmp	r2, #9
   16678:	4604      	mov	r4, r0
   1667a:	d920      	bls.n	166be <d_unqualified_name+0x52>
   1667c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16680:	2a19      	cmp	r2, #25
   16682:	d925      	bls.n	166d0 <d_unqualified_name+0x64>
   16684:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   16688:	2a01      	cmp	r2, #1
   1668a:	d92c      	bls.n	166e6 <d_unqualified_name+0x7a>
   1668c:	2b4c      	cmp	r3, #76	; 0x4c
   1668e:	f000 8088 	beq.w	167a2 <d_unqualified_name+0x136>
   16692:	2b55      	cmp	r3, #85	; 0x55
   16694:	d133      	bne.n	166fe <d_unqualified_name+0x92>
   16696:	784b      	ldrb	r3, [r1, #1]
   16698:	2b6c      	cmp	r3, #108	; 0x6c
   1669a:	d033      	beq.n	16704 <d_unqualified_name+0x98>
   1669c:	2b74      	cmp	r3, #116	; 0x74
   1669e:	d12e      	bne.n	166fe <d_unqualified_name+0x92>
   166a0:	1c4b      	adds	r3, r1, #1
   166a2:	60c3      	str	r3, [r0, #12]
   166a4:	784b      	ldrb	r3, [r1, #1]
   166a6:	2b74      	cmp	r3, #116	; 0x74
   166a8:	d05a      	beq.n	16760 <d_unqualified_name+0xf4>
   166aa:	2b42      	cmp	r3, #66	; 0x42
   166ac:	f04f 0500 	mov.w	r5, #0
   166b0:	d10c      	bne.n	166cc <d_unqualified_name+0x60>
   166b2:	4629      	mov	r1, r5
   166b4:	4620      	mov	r0, r4
   166b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   166ba:	f7fe bacd 	b.w	14c58 <d_abi_tags>
   166be:	f7fe fa6f 	bl	14ba0 <d_source_name>
   166c2:	68e3      	ldr	r3, [r4, #12]
   166c4:	781b      	ldrb	r3, [r3, #0]
   166c6:	4605      	mov	r5, r0
   166c8:	2b42      	cmp	r3, #66	; 0x42
   166ca:	d0f2      	beq.n	166b2 <d_unqualified_name+0x46>
   166cc:	4628      	mov	r0, r5
   166ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166d0:	f7ff ff0c 	bl	164ec <d_operator_name>
   166d4:	4605      	mov	r5, r0
   166d6:	b118      	cbz	r0, 166e0 <d_unqualified_name+0x74>
   166d8:	7803      	ldrb	r3, [r0, #0]
   166da:	2b31      	cmp	r3, #49	; 0x31
   166dc:	f000 80b2 	beq.w	16844 <d_unqualified_name+0x1d8>
   166e0:	68e3      	ldr	r3, [r4, #12]
   166e2:	781b      	ldrb	r3, [r3, #0]
   166e4:	e7f0      	b.n	166c8 <d_unqualified_name+0x5c>
   166e6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   166e8:	b125      	cbz	r5, 166f4 <d_unqualified_name+0x88>
   166ea:	782a      	ldrb	r2, [r5, #0]
   166ec:	2a00      	cmp	r2, #0
   166ee:	d06c      	beq.n	167ca <d_unqualified_name+0x15e>
   166f0:	2a18      	cmp	r2, #24
   166f2:	d06a      	beq.n	167ca <d_unqualified_name+0x15e>
   166f4:	2b43      	cmp	r3, #67	; 0x43
   166f6:	f000 80bf 	beq.w	16878 <d_unqualified_name+0x20c>
   166fa:	2b44      	cmp	r3, #68	; 0x44
   166fc:	d06f      	beq.n	167de <d_unqualified_name+0x172>
   166fe:	2500      	movs	r5, #0
   16700:	4628      	mov	r0, r5
   16702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16704:	1c4b      	adds	r3, r1, #1
   16706:	60c3      	str	r3, [r0, #12]
   16708:	784b      	ldrb	r3, [r1, #1]
   1670a:	2b6c      	cmp	r3, #108	; 0x6c
   1670c:	d1cd      	bne.n	166aa <d_unqualified_name+0x3e>
   1670e:	3102      	adds	r1, #2
   16710:	60c1      	str	r1, [r0, #12]
   16712:	f7ff ff69 	bl	165e8 <d_parmlist>
   16716:	4606      	mov	r6, r0
   16718:	b1f0      	cbz	r0, 16758 <d_unqualified_name+0xec>
   1671a:	68e2      	ldr	r2, [r4, #12]
   1671c:	7813      	ldrb	r3, [r2, #0]
   1671e:	2b45      	cmp	r3, #69	; 0x45
   16720:	d1c3      	bne.n	166aa <d_unqualified_name+0x3e>
   16722:	3201      	adds	r2, #1
   16724:	60e2      	str	r2, [r4, #12]
   16726:	4620      	mov	r0, r4
   16728:	f7fe f9fc 	bl	14b24 <d_compact_number>
   1672c:	2800      	cmp	r0, #0
   1672e:	db13      	blt.n	16758 <d_unqualified_name+0xec>
   16730:	6963      	ldr	r3, [r4, #20]
   16732:	69a2      	ldr	r2, [r4, #24]
   16734:	4293      	cmp	r3, r2
   16736:	da0f      	bge.n	16758 <d_unqualified_name+0xec>
   16738:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1673c:	6921      	ldr	r1, [r4, #16]
   1673e:	0092      	lsls	r2, r2, #2
   16740:	3301      	adds	r3, #1
   16742:	188d      	adds	r5, r1, r2
   16744:	6163      	str	r3, [r4, #20]
   16746:	d0cb      	beq.n	166e0 <d_unqualified_name+0x74>
   16748:	2345      	movs	r3, #69	; 0x45
   1674a:	548b      	strb	r3, [r1, r2]
   1674c:	606e      	str	r6, [r5, #4]
   1674e:	60a8      	str	r0, [r5, #8]
   16750:	6a23      	ldr	r3, [r4, #32]
   16752:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16754:	4293      	cmp	r3, r2
   16756:	db1c      	blt.n	16792 <d_unqualified_name+0x126>
   16758:	68e3      	ldr	r3, [r4, #12]
   1675a:	2500      	movs	r5, #0
   1675c:	781b      	ldrb	r3, [r3, #0]
   1675e:	e7b3      	b.n	166c8 <d_unqualified_name+0x5c>
   16760:	3102      	adds	r1, #2
   16762:	60c1      	str	r1, [r0, #12]
   16764:	f7fe f9de 	bl	14b24 <d_compact_number>
   16768:	2800      	cmp	r0, #0
   1676a:	dbf5      	blt.n	16758 <d_unqualified_name+0xec>
   1676c:	6963      	ldr	r3, [r4, #20]
   1676e:	69a2      	ldr	r2, [r4, #24]
   16770:	4293      	cmp	r3, r2
   16772:	daf1      	bge.n	16758 <d_unqualified_name+0xec>
   16774:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16778:	6921      	ldr	r1, [r4, #16]
   1677a:	0092      	lsls	r2, r2, #2
   1677c:	3301      	adds	r3, #1
   1677e:	188d      	adds	r5, r1, r2
   16780:	6163      	str	r3, [r4, #20]
   16782:	d0ad      	beq.n	166e0 <d_unqualified_name+0x74>
   16784:	2347      	movs	r3, #71	; 0x47
   16786:	548b      	strb	r3, [r1, r2]
   16788:	6068      	str	r0, [r5, #4]
   1678a:	6a23      	ldr	r3, [r4, #32]
   1678c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1678e:	4293      	cmp	r3, r2
   16790:	dae2      	bge.n	16758 <d_unqualified_name+0xec>
   16792:	69e1      	ldr	r1, [r4, #28]
   16794:	68e2      	ldr	r2, [r4, #12]
   16796:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1679a:	3301      	adds	r3, #1
   1679c:	6223      	str	r3, [r4, #32]
   1679e:	7813      	ldrb	r3, [r2, #0]
   167a0:	e792      	b.n	166c8 <d_unqualified_name+0x5c>
   167a2:	3101      	adds	r1, #1
   167a4:	60c1      	str	r1, [r0, #12]
   167a6:	f7fe f9fb 	bl	14ba0 <d_source_name>
   167aa:	4605      	mov	r5, r0
   167ac:	2800      	cmp	r0, #0
   167ae:	d0a6      	beq.n	166fe <d_unqualified_name+0x92>
   167b0:	68e2      	ldr	r2, [r4, #12]
   167b2:	7813      	ldrb	r3, [r2, #0]
   167b4:	2b5f      	cmp	r3, #95	; 0x5f
   167b6:	d187      	bne.n	166c8 <d_unqualified_name+0x5c>
   167b8:	4620      	mov	r0, r4
   167ba:	3201      	adds	r2, #1
   167bc:	f840 2f0c 	str.w	r2, [r0, #12]!
   167c0:	f7fe f96e 	bl	14aa0 <d_number.isra.0>
   167c4:	2800      	cmp	r0, #0
   167c6:	da8b      	bge.n	166e0 <d_unqualified_name+0x74>
   167c8:	e799      	b.n	166fe <d_unqualified_name+0x92>
   167ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   167cc:	68aa      	ldr	r2, [r5, #8]
   167ce:	4413      	add	r3, r2
   167d0:	6323      	str	r3, [r4, #48]	; 0x30
   167d2:	780b      	ldrb	r3, [r1, #0]
   167d4:	2b43      	cmp	r3, #67	; 0x43
   167d6:	d04f      	beq.n	16878 <d_unqualified_name+0x20c>
   167d8:	2b44      	cmp	r3, #68	; 0x44
   167da:	f47f af66 	bne.w	166aa <d_unqualified_name+0x3e>
   167de:	784b      	ldrb	r3, [r1, #1]
   167e0:	3b30      	subs	r3, #48	; 0x30
   167e2:	2b05      	cmp	r3, #5
   167e4:	d88b      	bhi.n	166fe <d_unqualified_name+0x92>
   167e6:	a201      	add	r2, pc, #4	; (adr r2, 167ec <d_unqualified_name+0x180>)
   167e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   167ec:	00016841 	.word	0x00016841
   167f0:	00016805 	.word	0x00016805
   167f4:	0001683d 	.word	0x0001683d
   167f8:	000166ff 	.word	0x000166ff
   167fc:	00016839 	.word	0x00016839
   16800:	00016835 	.word	0x00016835
   16804:	2702      	movs	r7, #2
   16806:	6963      	ldr	r3, [r4, #20]
   16808:	69a2      	ldr	r2, [r4, #24]
   1680a:	1c88      	adds	r0, r1, #2
   1680c:	4293      	cmp	r3, r2
   1680e:	60e0      	str	r0, [r4, #12]
   16810:	da56      	bge.n	168c0 <d_unqualified_name+0x254>
   16812:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16816:	6920      	ldr	r0, [r4, #16]
   16818:	0092      	lsls	r2, r2, #2
   1681a:	3301      	adds	r3, #1
   1681c:	1886      	adds	r6, r0, r2
   1681e:	6163      	str	r3, [r4, #20]
   16820:	d005      	beq.n	1682e <d_unqualified_name+0x1c2>
   16822:	2d00      	cmp	r5, #0
   16824:	d04f      	beq.n	168c6 <d_unqualified_name+0x25a>
   16826:	2308      	movs	r3, #8
   16828:	5483      	strb	r3, [r0, r2]
   1682a:	7137      	strb	r7, [r6, #4]
   1682c:	60b5      	str	r5, [r6, #8]
   1682e:	788b      	ldrb	r3, [r1, #2]
   16830:	4635      	mov	r5, r6
   16832:	e749      	b.n	166c8 <d_unqualified_name+0x5c>
   16834:	2705      	movs	r7, #5
   16836:	e7e6      	b.n	16806 <d_unqualified_name+0x19a>
   16838:	2704      	movs	r7, #4
   1683a:	e7e4      	b.n	16806 <d_unqualified_name+0x19a>
   1683c:	2703      	movs	r7, #3
   1683e:	e7e2      	b.n	16806 <d_unqualified_name+0x19a>
   16840:	2701      	movs	r7, #1
   16842:	e7e0      	b.n	16806 <d_unqualified_name+0x19a>
   16844:	6842      	ldr	r2, [r0, #4]
   16846:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16848:	6896      	ldr	r6, [r2, #8]
   1684a:	6810      	ldr	r0, [r2, #0]
   1684c:	491f      	ldr	r1, [pc, #124]	; (168cc <d_unqualified_name+0x260>)
   1684e:	3307      	adds	r3, #7
   16850:	4433      	add	r3, r6
   16852:	6323      	str	r3, [r4, #48]	; 0x30
   16854:	f008 fa98 	bl	1ed88 <strcmp>
   16858:	2800      	cmp	r0, #0
   1685a:	f47f af41 	bne.w	166e0 <d_unqualified_name+0x74>
   1685e:	4620      	mov	r0, r4
   16860:	f7fe f99e 	bl	14ba0 <d_source_name>
   16864:	462a      	mov	r2, r5
   16866:	4603      	mov	r3, r0
   16868:	2136      	movs	r1, #54	; 0x36
   1686a:	4620      	mov	r0, r4
   1686c:	f7fd ffc6 	bl	147fc <d_make_comp>
   16870:	68e3      	ldr	r3, [r4, #12]
   16872:	4605      	mov	r5, r0
   16874:	781b      	ldrb	r3, [r3, #0]
   16876:	e727      	b.n	166c8 <d_unqualified_name+0x5c>
   16878:	784b      	ldrb	r3, [r1, #1]
   1687a:	3b31      	subs	r3, #49	; 0x31
   1687c:	2b04      	cmp	r3, #4
   1687e:	f63f af3e 	bhi.w	166fe <d_unqualified_name+0x92>
   16882:	e8df f003 	tbb	[pc, r3]
   16886:	0315      	.short	0x0315
   16888:	191b      	.short	0x191b
   1688a:	17          	.byte	0x17
   1688b:	00          	.byte	0x00
   1688c:	2702      	movs	r7, #2
   1688e:	6963      	ldr	r3, [r4, #20]
   16890:	69a2      	ldr	r2, [r4, #24]
   16892:	1c88      	adds	r0, r1, #2
   16894:	4293      	cmp	r3, r2
   16896:	60e0      	str	r0, [r4, #12]
   16898:	da12      	bge.n	168c0 <d_unqualified_name+0x254>
   1689a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1689e:	6920      	ldr	r0, [r4, #16]
   168a0:	0092      	lsls	r2, r2, #2
   168a2:	3301      	adds	r3, #1
   168a4:	1886      	adds	r6, r0, r2
   168a6:	6163      	str	r3, [r4, #20]
   168a8:	d0c1      	beq.n	1682e <d_unqualified_name+0x1c2>
   168aa:	b165      	cbz	r5, 168c6 <d_unqualified_name+0x25a>
   168ac:	2307      	movs	r3, #7
   168ae:	e7bb      	b.n	16828 <d_unqualified_name+0x1bc>
   168b0:	2701      	movs	r7, #1
   168b2:	e7ec      	b.n	1688e <d_unqualified_name+0x222>
   168b4:	2705      	movs	r7, #5
   168b6:	e7ea      	b.n	1688e <d_unqualified_name+0x222>
   168b8:	2704      	movs	r7, #4
   168ba:	e7e8      	b.n	1688e <d_unqualified_name+0x222>
   168bc:	2703      	movs	r7, #3
   168be:	e7e6      	b.n	1688e <d_unqualified_name+0x222>
   168c0:	788b      	ldrb	r3, [r1, #2]
   168c2:	2500      	movs	r5, #0
   168c4:	e700      	b.n	166c8 <d_unqualified_name+0x5c>
   168c6:	788b      	ldrb	r3, [r1, #2]
   168c8:	e6fe      	b.n	166c8 <d_unqualified_name+0x5c>
   168ca:	bf00      	nop
   168cc:	000245dc 	.word	0x000245dc

000168d0 <d_bare_function_type>:
   168d0:	b570      	push	{r4, r5, r6, lr}
   168d2:	68c3      	ldr	r3, [r0, #12]
   168d4:	781a      	ldrb	r2, [r3, #0]
   168d6:	2a4a      	cmp	r2, #74	; 0x4a
   168d8:	4604      	mov	r4, r0
   168da:	d00d      	beq.n	168f8 <d_bare_function_type+0x28>
   168dc:	b971      	cbnz	r1, 168fc <d_bare_function_type+0x2c>
   168de:	460d      	mov	r5, r1
   168e0:	4620      	mov	r0, r4
   168e2:	f7ff fe81 	bl	165e8 <d_parmlist>
   168e6:	b178      	cbz	r0, 16908 <d_bare_function_type+0x38>
   168e8:	4603      	mov	r3, r0
   168ea:	462a      	mov	r2, r5
   168ec:	4620      	mov	r0, r4
   168ee:	2129      	movs	r1, #41	; 0x29
   168f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   168f4:	f7fd bf82 	b.w	147fc <d_make_comp>
   168f8:	3301      	adds	r3, #1
   168fa:	60c3      	str	r3, [r0, #12]
   168fc:	4620      	mov	r0, r4
   168fe:	f7ff fa0d 	bl	15d1c <d_type>
   16902:	4605      	mov	r5, r0
   16904:	2800      	cmp	r0, #0
   16906:	d1eb      	bne.n	168e0 <d_bare_function_type+0x10>
   16908:	2000      	movs	r0, #0
   1690a:	bd70      	pop	{r4, r5, r6, pc}

0001690c <d_function_type>:
   1690c:	68c3      	ldr	r3, [r0, #12]
   1690e:	781a      	ldrb	r2, [r3, #0]
   16910:	2a46      	cmp	r2, #70	; 0x46
   16912:	d001      	beq.n	16918 <d_function_type+0xc>
   16914:	2000      	movs	r0, #0
   16916:	4770      	bx	lr
   16918:	b510      	push	{r4, lr}
   1691a:	1c5a      	adds	r2, r3, #1
   1691c:	60c2      	str	r2, [r0, #12]
   1691e:	785a      	ldrb	r2, [r3, #1]
   16920:	2a59      	cmp	r2, #89	; 0x59
   16922:	bf04      	itt	eq
   16924:	3302      	addeq	r3, #2
   16926:	60c3      	streq	r3, [r0, #12]
   16928:	2101      	movs	r1, #1
   1692a:	4604      	mov	r4, r0
   1692c:	f7ff ffd0 	bl	168d0 <d_bare_function_type>
   16930:	4601      	mov	r1, r0
   16932:	4620      	mov	r0, r4
   16934:	f7fe f814 	bl	14960 <d_ref_qualifier>
   16938:	68e3      	ldr	r3, [r4, #12]
   1693a:	781a      	ldrb	r2, [r3, #0]
   1693c:	2a45      	cmp	r2, #69	; 0x45
   1693e:	d001      	beq.n	16944 <d_function_type+0x38>
   16940:	2000      	movs	r0, #0
   16942:	bd10      	pop	{r4, pc}
   16944:	3301      	adds	r3, #1
   16946:	60e3      	str	r3, [r4, #12]
   16948:	bd10      	pop	{r4, pc}
   1694a:	bf00      	nop

0001694c <d_encoding>:
   1694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16950:	68c3      	ldr	r3, [r0, #12]
   16952:	781a      	ldrb	r2, [r3, #0]
   16954:	2a47      	cmp	r2, #71	; 0x47
   16956:	4605      	mov	r5, r0
   16958:	d01f      	beq.n	1699a <d_encoding+0x4e>
   1695a:	2a54      	cmp	r2, #84	; 0x54
   1695c:	d01d      	beq.n	1699a <d_encoding+0x4e>
   1695e:	460e      	mov	r6, r1
   16960:	f7ff f820 	bl	159a4 <d_name>
   16964:	4604      	mov	r4, r0
   16966:	b310      	cbz	r0, 169ae <d_encoding+0x62>
   16968:	b32e      	cbz	r6, 169b6 <d_encoding+0x6a>
   1696a:	68ab      	ldr	r3, [r5, #8]
   1696c:	07db      	lsls	r3, r3, #31
   1696e:	d422      	bmi.n	169b6 <d_encoding+0x6a>
   16970:	7823      	ldrb	r3, [r4, #0]
   16972:	f1a3 021c 	sub.w	r2, r3, #28
   16976:	2a04      	cmp	r2, #4
   16978:	d940      	bls.n	169fc <d_encoding+0xb0>
   1697a:	2b4c      	cmp	r3, #76	; 0x4c
   1697c:	d03e      	beq.n	169fc <d_encoding+0xb0>
   1697e:	2b02      	cmp	r3, #2
   16980:	d116      	bne.n	169b0 <d_encoding+0x64>
   16982:	68a3      	ldr	r3, [r4, #8]
   16984:	781a      	ldrb	r2, [r3, #0]
   16986:	f1a2 011c 	sub.w	r1, r2, #28
   1698a:	2904      	cmp	r1, #4
   1698c:	f240 8283 	bls.w	16e96 <d_encoding+0x54a>
   16990:	2a4c      	cmp	r2, #76	; 0x4c
   16992:	f000 8280 	beq.w	16e96 <d_encoding+0x54a>
   16996:	60a3      	str	r3, [r4, #8]
   16998:	e00a      	b.n	169b0 <d_encoding+0x64>
   1699a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1699c:	f101 0214 	add.w	r2, r1, #20
   169a0:	632a      	str	r2, [r5, #48]	; 0x30
   169a2:	781a      	ldrb	r2, [r3, #0]
   169a4:	2a54      	cmp	r2, #84	; 0x54
   169a6:	d02b      	beq.n	16a00 <d_encoding+0xb4>
   169a8:	2a47      	cmp	r2, #71	; 0x47
   169aa:	f000 809f 	beq.w	16aec <d_encoding+0x1a0>
   169ae:	2400      	movs	r4, #0
   169b0:	4620      	mov	r0, r4
   169b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169b6:	68eb      	ldr	r3, [r5, #12]
   169b8:	781b      	ldrb	r3, [r3, #0]
   169ba:	2b00      	cmp	r3, #0
   169bc:	d0f8      	beq.n	169b0 <d_encoding+0x64>
   169be:	2b45      	cmp	r3, #69	; 0x45
   169c0:	d0f6      	beq.n	169b0 <d_encoding+0x64>
   169c2:	4621      	mov	r1, r4
   169c4:	780a      	ldrb	r2, [r1, #0]
   169c6:	2a20      	cmp	r2, #32
   169c8:	f200 8113 	bhi.w	16bf2 <d_encoding+0x2a6>
   169cc:	2a1c      	cmp	r2, #28
   169ce:	f080 8112 	bcs.w	16bf6 <d_encoding+0x2aa>
   169d2:	2a04      	cmp	r2, #4
   169d4:	f040 8101 	bne.w	16bda <d_encoding+0x28e>
   169d8:	684a      	ldr	r2, [r1, #4]
   169da:	b16a      	cbz	r2, 169f8 <d_encoding+0xac>
   169dc:	7813      	ldrb	r3, [r2, #0]
   169de:	2b08      	cmp	r3, #8
   169e0:	f103 31ff 	add.w	r1, r3, #4294967295
   169e4:	f200 80f6 	bhi.w	16bd4 <d_encoding+0x288>
   169e8:	2b07      	cmp	r3, #7
   169ea:	f080 80f6 	bcs.w	16bda <d_encoding+0x28e>
   169ee:	2901      	cmp	r1, #1
   169f0:	d802      	bhi.n	169f8 <d_encoding+0xac>
   169f2:	6892      	ldr	r2, [r2, #8]
   169f4:	2a00      	cmp	r2, #0
   169f6:	d1f1      	bne.n	169dc <d_encoding+0x90>
   169f8:	2101      	movs	r1, #1
   169fa:	e0ef      	b.n	16bdc <d_encoding+0x290>
   169fc:	6864      	ldr	r4, [r4, #4]
   169fe:	e7b7      	b.n	16970 <d_encoding+0x24>
   16a00:	1c5a      	adds	r2, r3, #1
   16a02:	60ea      	str	r2, [r5, #12]
   16a04:	785a      	ldrb	r2, [r3, #1]
   16a06:	2a00      	cmp	r2, #0
   16a08:	d0d1      	beq.n	169ae <d_encoding+0x62>
   16a0a:	1c9a      	adds	r2, r3, #2
   16a0c:	60ea      	str	r2, [r5, #12]
   16a0e:	785b      	ldrb	r3, [r3, #1]
   16a10:	3b43      	subs	r3, #67	; 0x43
   16a12:	2b33      	cmp	r3, #51	; 0x33
   16a14:	d8cb      	bhi.n	169ae <d_encoding+0x62>
   16a16:	a201      	add	r2, pc, #4	; (adr r2, 16a1c <d_encoding+0xd0>)
   16a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16a1c:	00016e57 	.word	0x00016e57
   16a20:	000169af 	.word	0x000169af
   16a24:	000169af 	.word	0x000169af
   16a28:	00016e41 	.word	0x00016e41
   16a2c:	000169af 	.word	0x000169af
   16a30:	00016e2b 	.word	0x00016e2b
   16a34:	00016e15 	.word	0x00016e15
   16a38:	00016dff 	.word	0x00016dff
   16a3c:	000169af 	.word	0x000169af
   16a40:	000169af 	.word	0x000169af
   16a44:	000169af 	.word	0x000169af
   16a48:	000169af 	.word	0x000169af
   16a4c:	000169af 	.word	0x000169af
   16a50:	000169af 	.word	0x000169af
   16a54:	000169af 	.word	0x000169af
   16a58:	000169af 	.word	0x000169af
   16a5c:	00016de9 	.word	0x00016de9
   16a60:	00016dcf 	.word	0x00016dcf
   16a64:	000169af 	.word	0x000169af
   16a68:	00016db5 	.word	0x00016db5
   16a6c:	00016d9f 	.word	0x00016d9f
   16a70:	000169af 	.word	0x000169af
   16a74:	000169af 	.word	0x000169af
   16a78:	000169af 	.word	0x000169af
   16a7c:	000169af 	.word	0x000169af
   16a80:	000169af 	.word	0x000169af
   16a84:	000169af 	.word	0x000169af
   16a88:	000169af 	.word	0x000169af
   16a8c:	000169af 	.word	0x000169af
   16a90:	000169af 	.word	0x000169af
   16a94:	000169af 	.word	0x000169af
   16a98:	000169af 	.word	0x000169af
   16a9c:	00016d6b 	.word	0x00016d6b
   16aa0:	000169af 	.word	0x000169af
   16aa4:	000169af 	.word	0x000169af
   16aa8:	000169af 	.word	0x000169af
   16aac:	000169af 	.word	0x000169af
   16ab0:	00016d45 	.word	0x00016d45
   16ab4:	000169af 	.word	0x000169af
   16ab8:	000169af 	.word	0x000169af
   16abc:	000169af 	.word	0x000169af
   16ac0:	000169af 	.word	0x000169af
   16ac4:	000169af 	.word	0x000169af
   16ac8:	000169af 	.word	0x000169af
   16acc:	000169af 	.word	0x000169af
   16ad0:	000169af 	.word	0x000169af
   16ad4:	000169af 	.word	0x000169af
   16ad8:	000169af 	.word	0x000169af
   16adc:	000169af 	.word	0x000169af
   16ae0:	000169af 	.word	0x000169af
   16ae4:	000169af 	.word	0x000169af
   16ae8:	00016d1f 	.word	0x00016d1f
   16aec:	1c5a      	adds	r2, r3, #1
   16aee:	60ea      	str	r2, [r5, #12]
   16af0:	785a      	ldrb	r2, [r3, #1]
   16af2:	2a00      	cmp	r2, #0
   16af4:	f43f af5b 	beq.w	169ae <d_encoding+0x62>
   16af8:	1c9a      	adds	r2, r3, #2
   16afa:	60ea      	str	r2, [r5, #12]
   16afc:	785a      	ldrb	r2, [r3, #1]
   16afe:	3a41      	subs	r2, #65	; 0x41
   16b00:	2a31      	cmp	r2, #49	; 0x31
   16b02:	f63f af54 	bhi.w	169ae <d_encoding+0x62>
   16b06:	a101      	add	r1, pc, #4	; (adr r1, 16b0c <d_encoding+0x1c0>)
   16b08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   16b0c:	00016c01 	.word	0x00016c01
   16b10:	000169af 	.word	0x000169af
   16b14:	000169af 	.word	0x000169af
   16b18:	000169af 	.word	0x000169af
   16b1c:	000169af 	.word	0x000169af
   16b20:	000169af 	.word	0x000169af
   16b24:	000169af 	.word	0x000169af
   16b28:	000169af 	.word	0x000169af
   16b2c:	000169af 	.word	0x000169af
   16b30:	000169af 	.word	0x000169af
   16b34:	000169af 	.word	0x000169af
   16b38:	000169af 	.word	0x000169af
   16b3c:	000169af 	.word	0x000169af
   16b40:	000169af 	.word	0x000169af
   16b44:	000169af 	.word	0x000169af
   16b48:	000169af 	.word	0x000169af
   16b4c:	000169af 	.word	0x000169af
   16b50:	00016d01 	.word	0x00016d01
   16b54:	000169af 	.word	0x000169af
   16b58:	00016cd5 	.word	0x00016cd5
   16b5c:	000169af 	.word	0x000169af
   16b60:	00016cbf 	.word	0x00016cbf
   16b64:	000169af 	.word	0x000169af
   16b68:	000169af 	.word	0x000169af
   16b6c:	000169af 	.word	0x000169af
   16b70:	000169af 	.word	0x000169af
   16b74:	000169af 	.word	0x000169af
   16b78:	000169af 	.word	0x000169af
   16b7c:	000169af 	.word	0x000169af
   16b80:	000169af 	.word	0x000169af
   16b84:	000169af 	.word	0x000169af
   16b88:	000169af 	.word	0x000169af
   16b8c:	000169af 	.word	0x000169af
   16b90:	000169af 	.word	0x000169af
   16b94:	000169af 	.word	0x000169af
   16b98:	000169af 	.word	0x000169af
   16b9c:	000169af 	.word	0x000169af
   16ba0:	000169af 	.word	0x000169af
   16ba4:	000169af 	.word	0x000169af
   16ba8:	000169af 	.word	0x000169af
   16bac:	000169af 	.word	0x000169af
   16bb0:	000169af 	.word	0x000169af
   16bb4:	000169af 	.word	0x000169af
   16bb8:	000169af 	.word	0x000169af
   16bbc:	000169af 	.word	0x000169af
   16bc0:	000169af 	.word	0x000169af
   16bc4:	000169af 	.word	0x000169af
   16bc8:	000169af 	.word	0x000169af
   16bcc:	000169af 	.word	0x000169af
   16bd0:	00016c19 	.word	0x00016c19
   16bd4:	2b34      	cmp	r3, #52	; 0x34
   16bd6:	f47f af0f 	bne.w	169f8 <d_encoding+0xac>
   16bda:	2100      	movs	r1, #0
   16bdc:	4628      	mov	r0, r5
   16bde:	f7ff fe77 	bl	168d0 <d_bare_function_type>
   16be2:	4622      	mov	r2, r4
   16be4:	4603      	mov	r3, r0
   16be6:	2103      	movs	r1, #3
   16be8:	4628      	mov	r0, r5
   16bea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bee:	f7fd be05 	b.w	147fc <d_make_comp>
   16bf2:	2a4c      	cmp	r2, #76	; 0x4c
   16bf4:	d1f1      	bne.n	16bda <d_encoding+0x28e>
   16bf6:	6849      	ldr	r1, [r1, #4]
   16bf8:	2900      	cmp	r1, #0
   16bfa:	f47f aee3 	bne.w	169c4 <d_encoding+0x78>
   16bfe:	e7ed      	b.n	16bdc <d_encoding+0x290>
   16c00:	2100      	movs	r1, #0
   16c02:	4628      	mov	r0, r5
   16c04:	f7ff fea2 	bl	1694c <d_encoding>
   16c08:	2300      	movs	r3, #0
   16c0a:	4602      	mov	r2, r0
   16c0c:	2117      	movs	r1, #23
   16c0e:	4628      	mov	r0, r5
   16c10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c14:	f7fd bdf2 	b.w	147fc <d_make_comp>
   16c18:	f105 000c 	add.w	r0, r5, #12
   16c1c:	f7fd ff40 	bl	14aa0 <d_number.isra.0>
   16c20:	2801      	cmp	r0, #1
   16c22:	f77f aec4 	ble.w	169ae <d_encoding+0x62>
   16c26:	68eb      	ldr	r3, [r5, #12]
   16c28:	781a      	ldrb	r2, [r3, #0]
   16c2a:	2a00      	cmp	r2, #0
   16c2c:	f43f aebf 	beq.w	169ae <d_encoding+0x62>
   16c30:	1c5f      	adds	r7, r3, #1
   16c32:	60ef      	str	r7, [r5, #12]
   16c34:	781b      	ldrb	r3, [r3, #0]
   16c36:	2b5f      	cmp	r3, #95	; 0x5f
   16c38:	f47f aeb9 	bne.w	169ae <d_encoding+0x62>
   16c3c:	2200      	movs	r2, #0
   16c3e:	1e46      	subs	r6, r0, #1
   16c40:	4690      	mov	r8, r2
   16c42:	f04f 0940 	mov.w	r9, #64	; 0x40
   16c46:	783b      	ldrb	r3, [r7, #0]
   16c48:	2b00      	cmp	r3, #0
   16c4a:	f43f aeb0 	beq.w	169ae <d_encoding+0x62>
   16c4e:	2b24      	cmp	r3, #36	; 0x24
   16c50:	f000 8128 	beq.w	16ea4 <d_encoding+0x558>
   16c54:	463c      	mov	r4, r7
   16c56:	2100      	movs	r1, #0
   16c58:	e004      	b.n	16c64 <d_encoding+0x318>
   16c5a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   16c5e:	b123      	cbz	r3, 16c6a <d_encoding+0x31e>
   16c60:	2b24      	cmp	r3, #36	; 0x24
   16c62:	d002      	beq.n	16c6a <d_encoding+0x31e>
   16c64:	3101      	adds	r1, #1
   16c66:	42b1      	cmp	r1, r6
   16c68:	dbf7      	blt.n	16c5a <d_encoding+0x30e>
   16c6a:	696c      	ldr	r4, [r5, #20]
   16c6c:	69a8      	ldr	r0, [r5, #24]
   16c6e:	4284      	cmp	r4, r0
   16c70:	f280 8113 	bge.w	16e9a <d_encoding+0x54e>
   16c74:	6928      	ldr	r0, [r5, #16]
   16c76:	1c63      	adds	r3, r4, #1
   16c78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16c7c:	616b      	str	r3, [r5, #20]
   16c7e:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   16c82:	f000 810a 	beq.w	16e9a <d_encoding+0x54e>
   16c86:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   16c8a:	605f      	str	r7, [r3, #4]
   16c8c:	6099      	str	r1, [r3, #8]
   16c8e:	68ef      	ldr	r7, [r5, #12]
   16c90:	440f      	add	r7, r1
   16c92:	1a76      	subs	r6, r6, r1
   16c94:	60ef      	str	r7, [r5, #12]
   16c96:	2a00      	cmp	r2, #0
   16c98:	f000 8121 	beq.w	16ede <d_encoding+0x592>
   16c9c:	213f      	movs	r1, #63	; 0x3f
   16c9e:	4628      	mov	r0, r5
   16ca0:	f7fd fdac 	bl	147fc <d_make_comp>
   16ca4:	4602      	mov	r2, r0
   16ca6:	2800      	cmp	r0, #0
   16ca8:	f43f ae81 	beq.w	169ae <d_encoding+0x62>
   16cac:	2e00      	cmp	r6, #0
   16cae:	dcca      	bgt.n	16c46 <d_encoding+0x2fa>
   16cb0:	4628      	mov	r0, r5
   16cb2:	2300      	movs	r3, #0
   16cb4:	213e      	movs	r1, #62	; 0x3e
   16cb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cba:	f7fd bd9f 	b.w	147fc <d_make_comp>
   16cbe:	4628      	mov	r0, r5
   16cc0:	f7fe fe70 	bl	159a4 <d_name>
   16cc4:	2300      	movs	r3, #0
   16cc6:	4602      	mov	r2, r0
   16cc8:	2113      	movs	r1, #19
   16cca:	4628      	mov	r0, r5
   16ccc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cd0:	f7fd bd94 	b.w	147fc <d_make_comp>
   16cd4:	789a      	ldrb	r2, [r3, #2]
   16cd6:	2100      	movs	r1, #0
   16cd8:	4628      	mov	r0, r5
   16cda:	2a00      	cmp	r2, #0
   16cdc:	f000 8101 	beq.w	16ee2 <d_encoding+0x596>
   16ce0:	1cda      	adds	r2, r3, #3
   16ce2:	60ea      	str	r2, [r5, #12]
   16ce4:	789b      	ldrb	r3, [r3, #2]
   16ce6:	2b6e      	cmp	r3, #110	; 0x6e
   16ce8:	f040 80fb 	bne.w	16ee2 <d_encoding+0x596>
   16cec:	f7ff fe2e 	bl	1694c <d_encoding>
   16cf0:	2300      	movs	r3, #0
   16cf2:	4602      	mov	r2, r0
   16cf4:	2149      	movs	r1, #73	; 0x49
   16cf6:	4628      	mov	r0, r5
   16cf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cfc:	f7fd bd7e 	b.w	147fc <d_make_comp>
   16d00:	4628      	mov	r0, r5
   16d02:	f7fe fe4f 	bl	159a4 <d_name>
   16d06:	4604      	mov	r4, r0
   16d08:	4628      	mov	r0, r5
   16d0a:	f7fd fef3 	bl	14af4 <d_number_component>
   16d0e:	4622      	mov	r2, r4
   16d10:	4603      	mov	r3, r0
   16d12:	2116      	movs	r1, #22
   16d14:	4628      	mov	r0, r5
   16d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d1a:	f7fd bd6f 	b.w	147fc <d_make_comp>
   16d1e:	2176      	movs	r1, #118	; 0x76
   16d20:	4628      	mov	r0, r5
   16d22:	f7fe f871 	bl	14e08 <d_call_offset>
   16d26:	2800      	cmp	r0, #0
   16d28:	f43f ae41 	beq.w	169ae <d_encoding+0x62>
   16d2c:	2100      	movs	r1, #0
   16d2e:	4628      	mov	r0, r5
   16d30:	f7ff fe0c 	bl	1694c <d_encoding>
   16d34:	2300      	movs	r3, #0
   16d36:	4602      	mov	r2, r0
   16d38:	2110      	movs	r1, #16
   16d3a:	4628      	mov	r0, r5
   16d3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d40:	f7fd bd5c 	b.w	147fc <d_make_comp>
   16d44:	2168      	movs	r1, #104	; 0x68
   16d46:	4628      	mov	r0, r5
   16d48:	f7fe f85e 	bl	14e08 <d_call_offset>
   16d4c:	2800      	cmp	r0, #0
   16d4e:	f43f ae2e 	beq.w	169ae <d_encoding+0x62>
   16d52:	2100      	movs	r1, #0
   16d54:	4628      	mov	r0, r5
   16d56:	f7ff fdf9 	bl	1694c <d_encoding>
   16d5a:	2300      	movs	r3, #0
   16d5c:	4602      	mov	r2, r0
   16d5e:	210f      	movs	r1, #15
   16d60:	4628      	mov	r0, r5
   16d62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d66:	f7fd bd49 	b.w	147fc <d_make_comp>
   16d6a:	2100      	movs	r1, #0
   16d6c:	4628      	mov	r0, r5
   16d6e:	f7fe f84b 	bl	14e08 <d_call_offset>
   16d72:	2800      	cmp	r0, #0
   16d74:	f43f ae1b 	beq.w	169ae <d_encoding+0x62>
   16d78:	2100      	movs	r1, #0
   16d7a:	4628      	mov	r0, r5
   16d7c:	f7fe f844 	bl	14e08 <d_call_offset>
   16d80:	2800      	cmp	r0, #0
   16d82:	f43f ae14 	beq.w	169ae <d_encoding+0x62>
   16d86:	2100      	movs	r1, #0
   16d88:	4628      	mov	r0, r5
   16d8a:	f7ff fddf 	bl	1694c <d_encoding>
   16d8e:	2300      	movs	r3, #0
   16d90:	4602      	mov	r2, r0
   16d92:	2111      	movs	r1, #17
   16d94:	4628      	mov	r0, r5
   16d96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d9a:	f7fd bd2f 	b.w	147fc <d_make_comp>
   16d9e:	4628      	mov	r0, r5
   16da0:	f7fe fe00 	bl	159a4 <d_name>
   16da4:	2300      	movs	r3, #0
   16da6:	4602      	mov	r2, r0
   16da8:	2115      	movs	r1, #21
   16daa:	4628      	mov	r0, r5
   16dac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16db0:	f7fd bd24 	b.w	147fc <d_make_comp>
   16db4:	310f      	adds	r1, #15
   16db6:	6329      	str	r1, [r5, #48]	; 0x30
   16db8:	4628      	mov	r0, r5
   16dba:	f7fe ffaf 	bl	15d1c <d_type>
   16dbe:	2300      	movs	r3, #0
   16dc0:	4602      	mov	r2, r0
   16dc2:	2109      	movs	r1, #9
   16dc4:	4628      	mov	r0, r5
   16dc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16dca:	f7fd bd17 	b.w	147fc <d_make_comp>
   16dce:	310a      	adds	r1, #10
   16dd0:	6329      	str	r1, [r5, #48]	; 0x30
   16dd2:	4628      	mov	r0, r5
   16dd4:	f7fe ffa2 	bl	15d1c <d_type>
   16dd8:	2300      	movs	r3, #0
   16dda:	4602      	mov	r2, r0
   16ddc:	210a      	movs	r1, #10
   16dde:	4628      	mov	r0, r5
   16de0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16de4:	f7fd bd0a 	b.w	147fc <d_make_comp>
   16de8:	4628      	mov	r0, r5
   16dea:	f7fe ff97 	bl	15d1c <d_type>
   16dee:	2300      	movs	r3, #0
   16df0:	4602      	mov	r2, r0
   16df2:	210d      	movs	r1, #13
   16df4:	4628      	mov	r0, r5
   16df6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16dfa:	f7fd bcff 	b.w	147fc <d_make_comp>
   16dfe:	4628      	mov	r0, r5
   16e00:	f7fe ff8c 	bl	15d1c <d_type>
   16e04:	2300      	movs	r3, #0
   16e06:	4602      	mov	r2, r0
   16e08:	2112      	movs	r1, #18
   16e0a:	4628      	mov	r0, r5
   16e0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e10:	f7fd bcf4 	b.w	147fc <d_make_comp>
   16e14:	4628      	mov	r0, r5
   16e16:	f7fe ff81 	bl	15d1c <d_type>
   16e1a:	2300      	movs	r3, #0
   16e1c:	4602      	mov	r2, r0
   16e1e:	210c      	movs	r1, #12
   16e20:	4628      	mov	r0, r5
   16e22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e26:	f7fd bce9 	b.w	147fc <d_make_comp>
   16e2a:	4628      	mov	r0, r5
   16e2c:	f7fe fdba 	bl	159a4 <d_name>
   16e30:	2300      	movs	r3, #0
   16e32:	4602      	mov	r2, r0
   16e34:	2114      	movs	r1, #20
   16e36:	4628      	mov	r0, r5
   16e38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e3c:	f7fd bcde 	b.w	147fc <d_make_comp>
   16e40:	4628      	mov	r0, r5
   16e42:	f7fe ff6b 	bl	15d1c <d_type>
   16e46:	2300      	movs	r3, #0
   16e48:	4602      	mov	r2, r0
   16e4a:	210e      	movs	r1, #14
   16e4c:	4628      	mov	r0, r5
   16e4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e52:	f7fd bcd3 	b.w	147fc <d_make_comp>
   16e56:	4628      	mov	r0, r5
   16e58:	f7fe ff60 	bl	15d1c <d_type>
   16e5c:	4604      	mov	r4, r0
   16e5e:	f105 000c 	add.w	r0, r5, #12
   16e62:	f7fd fe1d 	bl	14aa0 <d_number.isra.0>
   16e66:	2800      	cmp	r0, #0
   16e68:	f6ff ada1 	blt.w	169ae <d_encoding+0x62>
   16e6c:	68eb      	ldr	r3, [r5, #12]
   16e6e:	781a      	ldrb	r2, [r3, #0]
   16e70:	2a5f      	cmp	r2, #95	; 0x5f
   16e72:	f47f ad9c 	bne.w	169ae <d_encoding+0x62>
   16e76:	3301      	adds	r3, #1
   16e78:	60eb      	str	r3, [r5, #12]
   16e7a:	4628      	mov	r0, r5
   16e7c:	f7fe ff4e 	bl	15d1c <d_type>
   16e80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16e82:	1d59      	adds	r1, r3, #5
   16e84:	6329      	str	r1, [r5, #48]	; 0x30
   16e86:	4602      	mov	r2, r0
   16e88:	4623      	mov	r3, r4
   16e8a:	4628      	mov	r0, r5
   16e8c:	210b      	movs	r1, #11
   16e8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e92:	f7fd bcb3 	b.w	147fc <d_make_comp>
   16e96:	685b      	ldr	r3, [r3, #4]
   16e98:	e574      	b.n	16984 <d_encoding+0x38>
   16e9a:	68eb      	ldr	r3, [r5, #12]
   16e9c:	440b      	add	r3, r1
   16e9e:	60eb      	str	r3, [r5, #12]
   16ea0:	2400      	movs	r4, #0
   16ea2:	e585      	b.n	169b0 <d_encoding+0x64>
   16ea4:	787b      	ldrb	r3, [r7, #1]
   16ea6:	2b53      	cmp	r3, #83	; 0x53
   16ea8:	d027      	beq.n	16efa <d_encoding+0x5ae>
   16eaa:	2b5f      	cmp	r3, #95	; 0x5f
   16eac:	d023      	beq.n	16ef6 <d_encoding+0x5aa>
   16eae:	2b24      	cmp	r3, #36	; 0x24
   16eb0:	f47f ad7d 	bne.w	169ae <d_encoding+0x62>
   16eb4:	4618      	mov	r0, r3
   16eb6:	6969      	ldr	r1, [r5, #20]
   16eb8:	69ab      	ldr	r3, [r5, #24]
   16eba:	4299      	cmp	r1, r3
   16ebc:	da1f      	bge.n	16efe <d_encoding+0x5b2>
   16ebe:	692c      	ldr	r4, [r5, #16]
   16ec0:	1c4f      	adds	r7, r1, #1
   16ec2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16ec6:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16eca:	616f      	str	r7, [r5, #20]
   16ecc:	d017      	beq.n	16efe <d_encoding+0x5b2>
   16ece:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16ed2:	6058      	str	r0, [r3, #4]
   16ed4:	68ef      	ldr	r7, [r5, #12]
   16ed6:	3702      	adds	r7, #2
   16ed8:	3e02      	subs	r6, #2
   16eda:	60ef      	str	r7, [r5, #12]
   16edc:	e6db      	b.n	16c96 <d_encoding+0x34a>
   16ede:	461a      	mov	r2, r3
   16ee0:	e6e4      	b.n	16cac <d_encoding+0x360>
   16ee2:	f7ff fd33 	bl	1694c <d_encoding>
   16ee6:	2300      	movs	r3, #0
   16ee8:	4602      	mov	r2, r0
   16eea:	2148      	movs	r1, #72	; 0x48
   16eec:	4628      	mov	r0, r5
   16eee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ef2:	f7fd bc83 	b.w	147fc <d_make_comp>
   16ef6:	202e      	movs	r0, #46	; 0x2e
   16ef8:	e7dd      	b.n	16eb6 <d_encoding+0x56a>
   16efa:	202f      	movs	r0, #47	; 0x2f
   16efc:	e7db      	b.n	16eb6 <d_encoding+0x56a>
   16efe:	68eb      	ldr	r3, [r5, #12]
   16f00:	3302      	adds	r3, #2
   16f02:	60eb      	str	r3, [r5, #12]
   16f04:	2400      	movs	r4, #0
   16f06:	e553      	b.n	169b0 <d_encoding+0x64>

00016f08 <d_expr_primary>:
   16f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f0a:	68c2      	ldr	r2, [r0, #12]
   16f0c:	7813      	ldrb	r3, [r2, #0]
   16f0e:	2b4c      	cmp	r3, #76	; 0x4c
   16f10:	d001      	beq.n	16f16 <d_expr_primary+0xe>
   16f12:	2000      	movs	r0, #0
   16f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f16:	1c53      	adds	r3, r2, #1
   16f18:	60c3      	str	r3, [r0, #12]
   16f1a:	7851      	ldrb	r1, [r2, #1]
   16f1c:	295f      	cmp	r1, #95	; 0x5f
   16f1e:	4605      	mov	r5, r0
   16f20:	d03a      	beq.n	16f98 <d_expr_primary+0x90>
   16f22:	295a      	cmp	r1, #90	; 0x5a
   16f24:	d03f      	beq.n	16fa6 <d_expr_primary+0x9e>
   16f26:	f7fe fef9 	bl	15d1c <d_type>
   16f2a:	2800      	cmp	r0, #0
   16f2c:	d0f1      	beq.n	16f12 <d_expr_primary+0xa>
   16f2e:	7803      	ldrb	r3, [r0, #0]
   16f30:	2b27      	cmp	r3, #39	; 0x27
   16f32:	d046      	beq.n	16fc2 <d_expr_primary+0xba>
   16f34:	68ee      	ldr	r6, [r5, #12]
   16f36:	7833      	ldrb	r3, [r6, #0]
   16f38:	2b6e      	cmp	r3, #110	; 0x6e
   16f3a:	d04b      	beq.n	16fd4 <d_expr_primary+0xcc>
   16f3c:	213c      	movs	r1, #60	; 0x3c
   16f3e:	2b45      	cmp	r3, #69	; 0x45
   16f40:	d04e      	beq.n	16fe0 <d_expr_primary+0xd8>
   16f42:	2b00      	cmp	r3, #0
   16f44:	d0e5      	beq.n	16f12 <d_expr_primary+0xa>
   16f46:	4633      	mov	r3, r6
   16f48:	e001      	b.n	16f4e <d_expr_primary+0x46>
   16f4a:	2c00      	cmp	r4, #0
   16f4c:	d0e1      	beq.n	16f12 <d_expr_primary+0xa>
   16f4e:	3301      	adds	r3, #1
   16f50:	60eb      	str	r3, [r5, #12]
   16f52:	781c      	ldrb	r4, [r3, #0]
   16f54:	2c45      	cmp	r4, #69	; 0x45
   16f56:	d1f8      	bne.n	16f4a <d_expr_primary+0x42>
   16f58:	1b9c      	subs	r4, r3, r6
   16f5a:	696b      	ldr	r3, [r5, #20]
   16f5c:	69aa      	ldr	r2, [r5, #24]
   16f5e:	4293      	cmp	r3, r2
   16f60:	da2d      	bge.n	16fbe <d_expr_primary+0xb6>
   16f62:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16f66:	692f      	ldr	r7, [r5, #16]
   16f68:	3301      	adds	r3, #1
   16f6a:	0092      	lsls	r2, r2, #2
   16f6c:	616b      	str	r3, [r5, #20]
   16f6e:	18bb      	adds	r3, r7, r2
   16f70:	d025      	beq.n	16fbe <d_expr_primary+0xb6>
   16f72:	b326      	cbz	r6, 16fbe <d_expr_primary+0xb6>
   16f74:	b31c      	cbz	r4, 16fbe <d_expr_primary+0xb6>
   16f76:	f04f 0e00 	mov.w	lr, #0
   16f7a:	f807 e002 	strb.w	lr, [r7, r2]
   16f7e:	605e      	str	r6, [r3, #4]
   16f80:	609c      	str	r4, [r3, #8]
   16f82:	4602      	mov	r2, r0
   16f84:	4628      	mov	r0, r5
   16f86:	f7fd fc39 	bl	147fc <d_make_comp>
   16f8a:	68eb      	ldr	r3, [r5, #12]
   16f8c:	781a      	ldrb	r2, [r3, #0]
   16f8e:	2a45      	cmp	r2, #69	; 0x45
   16f90:	d1bf      	bne.n	16f12 <d_expr_primary+0xa>
   16f92:	3301      	adds	r3, #1
   16f94:	60eb      	str	r3, [r5, #12]
   16f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f98:	1c93      	adds	r3, r2, #2
   16f9a:	60c3      	str	r3, [r0, #12]
   16f9c:	7892      	ldrb	r2, [r2, #2]
   16f9e:	2a5a      	cmp	r2, #90	; 0x5a
   16fa0:	bf18      	it	ne
   16fa2:	2000      	movne	r0, #0
   16fa4:	d107      	bne.n	16fb6 <d_expr_primary+0xae>
   16fa6:	3301      	adds	r3, #1
   16fa8:	60eb      	str	r3, [r5, #12]
   16faa:	2100      	movs	r1, #0
   16fac:	4628      	mov	r0, r5
   16fae:	f7ff fccd 	bl	1694c <d_encoding>
   16fb2:	68eb      	ldr	r3, [r5, #12]
   16fb4:	781a      	ldrb	r2, [r3, #0]
   16fb6:	2a45      	cmp	r2, #69	; 0x45
   16fb8:	d0eb      	beq.n	16f92 <d_expr_primary+0x8a>
   16fba:	2000      	movs	r0, #0
   16fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fbe:	2300      	movs	r3, #0
   16fc0:	e7df      	b.n	16f82 <d_expr_primary+0x7a>
   16fc2:	6843      	ldr	r3, [r0, #4]
   16fc4:	7c1a      	ldrb	r2, [r3, #16]
   16fc6:	2a00      	cmp	r2, #0
   16fc8:	d0b4      	beq.n	16f34 <d_expr_primary+0x2c>
   16fca:	685a      	ldr	r2, [r3, #4]
   16fcc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16fce:	1a9b      	subs	r3, r3, r2
   16fd0:	632b      	str	r3, [r5, #48]	; 0x30
   16fd2:	e7af      	b.n	16f34 <d_expr_primary+0x2c>
   16fd4:	1c72      	adds	r2, r6, #1
   16fd6:	60ea      	str	r2, [r5, #12]
   16fd8:	7873      	ldrb	r3, [r6, #1]
   16fda:	213d      	movs	r1, #61	; 0x3d
   16fdc:	4616      	mov	r6, r2
   16fde:	e7ae      	b.n	16f3e <d_expr_primary+0x36>
   16fe0:	2400      	movs	r4, #0
   16fe2:	e7ba      	b.n	16f5a <d_expr_primary+0x52>

00016fe4 <d_print_comp_inner>:
   16fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fe8:	4604      	mov	r4, r0
   16fea:	b095      	sub	sp, #84	; 0x54
   16fec:	2a00      	cmp	r2, #0
   16fee:	f000 80db 	beq.w	171a8 <d_print_comp_inner+0x1c4>
   16ff2:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16ff6:	2f00      	cmp	r7, #0
   16ff8:	f040 80c2 	bne.w	17180 <d_print_comp_inner+0x19c>
   16ffc:	7813      	ldrb	r3, [r2, #0]
   16ffe:	4688      	mov	r8, r1
   17000:	4615      	mov	r5, r2
   17002:	2b4d      	cmp	r3, #77	; 0x4d
   17004:	f201 81e6 	bhi.w	183d4 <d_print_comp_inner+0x13f0>
   17008:	e8df f013 	tbh	[pc, r3, lsl #1]
   1700c:	043c045a 	.word	0x043c045a
   17010:	03a4043c 	.word	0x03a4043c
   17014:	048904a5 	.word	0x048904a5
   17018:	038e04ea 	.word	0x038e04ea
   1701c:	0330037c 	.word	0x0330037c
   17020:	030a0356 	.word	0x030a0356
   17024:	029802e4 	.word	0x029802e4
   17028:	027202be 	.word	0x027202be
   1702c:	01f0024c 	.word	0x01f0024c
   17030:	01ca0226 	.word	0x01ca0226
   17034:	015801a4 	.word	0x015801a4
   17038:	0132017e 	.word	0x0132017e
   1703c:	00f2010b 	.word	0x00f2010b
   17040:	00f200f2 	.word	0x00f200f2
   17044:	00d400d4 	.word	0x00d400d4
   17048:	00d400d4 	.word	0x00d400d4
   1704c:	00d400d4 	.word	0x00d400d4
   17050:	06d500d4 	.word	0x06d500d4
   17054:	00d406d5 	.word	0x00d406d5
   17058:	06a900d4 	.word	0x06a900d4
   1705c:	069306fc 	.word	0x069306fc
   17060:	0701071d 	.word	0x0701071d
   17064:	07010788 	.word	0x07010788
   17068:	057b057b 	.word	0x057b057b
   1706c:	06060630 	.word	0x06060630
   17070:	09e405e0 	.word	0x09e405e0
   17074:	068e05ad 	.word	0x068e05ad
   17078:	004e0654 	.word	0x004e0654
   1707c:	094c0485 	.word	0x094c0485
   17080:	08df08df 	.word	0x08df08df
   17084:	08ae08ae 	.word	0x08ae08ae
   17088:	05480888 	.word	0x05480888
   1708c:	08e4053a 	.word	0x08e4053a
   17090:	09be0514 	.word	0x09be0514
   17094:	09980914 	.word	0x09980914
   17098:	07cb09e4 	.word	0x07cb09e4
   1709c:	07f10862 	.word	0x07f10862
   170a0:	04130817 	.word	0x04130817
   170a4:	055200d4 	.word	0x055200d4
   170a8:	68ab      	ldr	r3, [r5, #8]
   170aa:	781b      	ldrb	r3, [r3, #0]
   170ac:	2b38      	cmp	r3, #56	; 0x38
   170ae:	d17b      	bne.n	171a8 <d_print_comp_inner+0x1c4>
   170b0:	686a      	ldr	r2, [r5, #4]
   170b2:	6853      	ldr	r3, [r2, #4]
   170b4:	681b      	ldr	r3, [r3, #0]
   170b6:	7859      	ldrb	r1, [r3, #1]
   170b8:	2963      	cmp	r1, #99	; 0x63
   170ba:	f002 814a 	beq.w	19352 <d_print_comp_inner+0x236e>
   170be:	f105 0308 	add.w	r3, r5, #8
   170c2:	4641      	mov	r1, r8
   170c4:	4620      	mov	r0, r4
   170c6:	f003 fbbb 	bl	1a840 <d_maybe_print_fold_expression.isra.15>
   170ca:	4606      	mov	r6, r0
   170cc:	2800      	cmp	r0, #0
   170ce:	d157      	bne.n	17180 <d_print_comp_inner+0x19c>
   170d0:	686b      	ldr	r3, [r5, #4]
   170d2:	781a      	ldrb	r2, [r3, #0]
   170d4:	2a31      	cmp	r2, #49	; 0x31
   170d6:	f002 836b 	beq.w	197b0 <d_print_comp_inner+0x27cc>
   170da:	685b      	ldr	r3, [r3, #4]
   170dc:	49c7      	ldr	r1, [pc, #796]	; (173fc <d_print_comp_inner+0x418>)
   170de:	6818      	ldr	r0, [r3, #0]
   170e0:	f007 fe52 	bl	1ed88 <strcmp>
   170e4:	68ab      	ldr	r3, [r5, #8]
   170e6:	b920      	cbnz	r0, 170f2 <d_print_comp_inner+0x10e>
   170e8:	685a      	ldr	r2, [r3, #4]
   170ea:	7811      	ldrb	r1, [r2, #0]
   170ec:	2903      	cmp	r1, #3
   170ee:	f002 83a5 	beq.w	1983c <d_print_comp_inner+0x2858>
   170f2:	685a      	ldr	r2, [r3, #4]
   170f4:	4641      	mov	r1, r8
   170f6:	4620      	mov	r0, r4
   170f8:	f003 fb3e 	bl	1a778 <d_print_subexpr>
   170fc:	686f      	ldr	r7, [r5, #4]
   170fe:	49c0      	ldr	r1, [pc, #768]	; (17400 <d_print_comp_inner+0x41c>)
   17100:	687b      	ldr	r3, [r7, #4]
   17102:	f8d3 9000 	ldr.w	r9, [r3]
   17106:	4648      	mov	r0, r9
   17108:	f007 fe3e 	bl	1ed88 <strcmp>
   1710c:	4606      	mov	r6, r0
   1710e:	2800      	cmp	r0, #0
   17110:	f042 826f 	bne.w	195f2 <d_print_comp_inner+0x260e>
   17114:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17118:	29ff      	cmp	r1, #255	; 0xff
   1711a:	f002 844a 	beq.w	199b2 <d_print_comp_inner+0x29ce>
   1711e:	1c4a      	adds	r2, r1, #1
   17120:	235b      	movs	r3, #91	; 0x5b
   17122:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17126:	5463      	strb	r3, [r4, r1]
   17128:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1712c:	68ab      	ldr	r3, [r5, #8]
   1712e:	4641      	mov	r1, r8
   17130:	689a      	ldr	r2, [r3, #8]
   17132:	4620      	mov	r0, r4
   17134:	f002 fcfa 	bl	19b2c <d_print_comp>
   17138:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1713c:	29ff      	cmp	r1, #255	; 0xff
   1713e:	f002 8425 	beq.w	1998c <d_print_comp_inner+0x29a8>
   17142:	235d      	movs	r3, #93	; 0x5d
   17144:	1c4a      	adds	r2, r1, #1
   17146:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1714a:	5463      	strb	r3, [r4, r1]
   1714c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17150:	686b      	ldr	r3, [r5, #4]
   17152:	781a      	ldrb	r2, [r3, #0]
   17154:	2a31      	cmp	r2, #49	; 0x31
   17156:	d113      	bne.n	17180 <d_print_comp_inner+0x19c>
   17158:	685b      	ldr	r3, [r3, #4]
   1715a:	689a      	ldr	r2, [r3, #8]
   1715c:	2a01      	cmp	r2, #1
   1715e:	d10f      	bne.n	17180 <d_print_comp_inner+0x19c>
   17160:	685b      	ldr	r3, [r3, #4]
   17162:	781b      	ldrb	r3, [r3, #0]
   17164:	2b3e      	cmp	r3, #62	; 0x3e
   17166:	d10b      	bne.n	17180 <d_print_comp_inner+0x19c>
   17168:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1716c:	29ff      	cmp	r1, #255	; 0xff
   1716e:	f002 8482 	beq.w	19a76 <d_print_comp_inner+0x2a92>
   17172:	2329      	movs	r3, #41	; 0x29
   17174:	1c4a      	adds	r2, r1, #1
   17176:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1717a:	5463      	strb	r3, [r4, r1]
   1717c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17180:	b015      	add	sp, #84	; 0x54
   17182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17186:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1718a:	2b00      	cmp	r3, #0
   1718c:	f2c1 84a4 	blt.w	18ad8 <d_print_comp_inner+0x1af4>
   17190:	2b00      	cmp	r3, #0
   17192:	f002 8432 	beq.w	199fa <d_print_comp_inner+0x2a16>
   17196:	6880      	ldr	r0, [r0, #8]
   17198:	3b01      	subs	r3, #1
   1719a:	b110      	cbz	r0, 171a2 <d_print_comp_inner+0x1be>
   1719c:	7802      	ldrb	r2, [r0, #0]
   1719e:	2a2f      	cmp	r2, #47	; 0x2f
   171a0:	d0f6      	beq.n	17190 <d_print_comp_inner+0x1ac>
   171a2:	b10f      	cbz	r7, 171a8 <d_print_comp_inner+0x1c4>
   171a4:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   171a8:	2301      	movs	r3, #1
   171aa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   171ae:	b015      	add	sp, #84	; 0x54
   171b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b4:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   171b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   171bc:	9505      	str	r5, [sp, #20]
   171be:	ab14      	add	r3, sp, #80	; 0x50
   171c0:	2100      	movs	r1, #0
   171c2:	f843 cd40 	str.w	ip, [r3, #-64]!
   171c6:	9106      	str	r1, [sp, #24]
   171c8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   171cc:	9207      	str	r2, [sp, #28]
   171ce:	686a      	ldr	r2, [r5, #4]
   171d0:	4641      	mov	r1, r8
   171d2:	4620      	mov	r0, r4
   171d4:	f002 fcaa 	bl	19b2c <d_print_comp>
   171d8:	9b06      	ldr	r3, [sp, #24]
   171da:	2b00      	cmp	r3, #0
   171dc:	f001 8389 	beq.w	188f2 <d_print_comp_inner+0x190e>
   171e0:	9b04      	ldr	r3, [sp, #16]
   171e2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   171e6:	2f00      	cmp	r7, #0
   171e8:	d0ca      	beq.n	17180 <d_print_comp_inner+0x19c>
   171ea:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   171ee:	e7c7      	b.n	17180 <d_print_comp_inner+0x19c>
   171f0:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   171f4:	f1bc 0f00 	cmp.w	ip, #0
   171f8:	d0de      	beq.n	171b8 <d_print_comp_inner+0x1d4>
   171fa:	4662      	mov	r2, ip
   171fc:	e005      	b.n	1720a <d_print_comp_inner+0x226>
   171fe:	428b      	cmp	r3, r1
   17200:	f001 86b8 	beq.w	18f74 <d_print_comp_inner+0x1f90>
   17204:	6812      	ldr	r2, [r2, #0]
   17206:	2a00      	cmp	r2, #0
   17208:	d0d6      	beq.n	171b8 <d_print_comp_inner+0x1d4>
   1720a:	6890      	ldr	r0, [r2, #8]
   1720c:	2800      	cmp	r0, #0
   1720e:	d1f9      	bne.n	17204 <d_print_comp_inner+0x220>
   17210:	6851      	ldr	r1, [r2, #4]
   17212:	7809      	ldrb	r1, [r1, #0]
   17214:	f1a1 0e19 	sub.w	lr, r1, #25
   17218:	f1be 0f02 	cmp.w	lr, #2
   1721c:	d9ef      	bls.n	171fe <d_print_comp_inner+0x21a>
   1721e:	4607      	mov	r7, r0
   17220:	e7ca      	b.n	171b8 <d_print_comp_inner+0x1d4>
   17222:	68af      	ldr	r7, [r5, #8]
   17224:	686d      	ldr	r5, [r5, #4]
   17226:	2f00      	cmp	r7, #0
   17228:	d0aa      	beq.n	17180 <d_print_comp_inner+0x19c>
   1722a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1722e:	442f      	add	r7, r5
   17230:	f04f 0800 	mov.w	r8, #0
   17234:	e008      	b.n	17248 <d_print_comp_inner+0x264>
   17236:	460b      	mov	r3, r1
   17238:	3101      	adds	r1, #1
   1723a:	42bd      	cmp	r5, r7
   1723c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17240:	54e6      	strb	r6, [r4, r3]
   17242:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17246:	d09b      	beq.n	17180 <d_print_comp_inner+0x19c>
   17248:	29ff      	cmp	r1, #255	; 0xff
   1724a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1724e:	d1f2      	bne.n	17236 <d_print_comp_inner+0x252>
   17250:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17254:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17258:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1725c:	4620      	mov	r0, r4
   1725e:	4798      	blx	r3
   17260:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17264:	3301      	adds	r3, #1
   17266:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1726a:	2101      	movs	r1, #1
   1726c:	2300      	movs	r3, #0
   1726e:	e7e4      	b.n	1723a <d_print_comp_inner+0x256>
   17270:	4e64      	ldr	r6, [pc, #400]	; (17404 <d_print_comp_inner+0x420>)
   17272:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17276:	f106 0a11 	add.w	sl, r6, #17
   1727a:	f04f 0900 	mov.w	r9, #0
   1727e:	e009      	b.n	17294 <d_print_comp_inner+0x2b0>
   17280:	460b      	mov	r3, r1
   17282:	3101      	adds	r1, #1
   17284:	4556      	cmp	r6, sl
   17286:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1728a:	54e7      	strb	r7, [r4, r3]
   1728c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17290:	f001 8296 	beq.w	187c0 <d_print_comp_inner+0x17dc>
   17294:	29ff      	cmp	r1, #255	; 0xff
   17296:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1729a:	d1f1      	bne.n	17280 <d_print_comp_inner+0x29c>
   1729c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172a8:	4620      	mov	r0, r4
   172aa:	4798      	blx	r3
   172ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172b0:	3301      	adds	r3, #1
   172b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   172b6:	2101      	movs	r1, #1
   172b8:	2300      	movs	r3, #0
   172ba:	e7e3      	b.n	17284 <d_print_comp_inner+0x2a0>
   172bc:	4e52      	ldr	r6, [pc, #328]	; (17408 <d_print_comp_inner+0x424>)
   172be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172c2:	f106 0a19 	add.w	sl, r6, #25
   172c6:	f04f 0900 	mov.w	r9, #0
   172ca:	e009      	b.n	172e0 <d_print_comp_inner+0x2fc>
   172cc:	460b      	mov	r3, r1
   172ce:	3101      	adds	r1, #1
   172d0:	4556      	cmp	r6, sl
   172d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172d6:	54e7      	strb	r7, [r4, r3]
   172d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172dc:	f001 82a8 	beq.w	18830 <d_print_comp_inner+0x184c>
   172e0:	29ff      	cmp	r1, #255	; 0xff
   172e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   172e6:	d1f1      	bne.n	172cc <d_print_comp_inner+0x2e8>
   172e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172f4:	4620      	mov	r0, r4
   172f6:	4798      	blx	r3
   172f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172fc:	3301      	adds	r3, #1
   172fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17302:	2101      	movs	r1, #1
   17304:	2300      	movs	r3, #0
   17306:	e7e3      	b.n	172d0 <d_print_comp_inner+0x2ec>
   17308:	4e40      	ldr	r6, [pc, #256]	; (1740c <d_print_comp_inner+0x428>)
   1730a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1730e:	f106 0a15 	add.w	sl, r6, #21
   17312:	f04f 0900 	mov.w	r9, #0
   17316:	e009      	b.n	1732c <d_print_comp_inner+0x348>
   17318:	460b      	mov	r3, r1
   1731a:	3101      	adds	r1, #1
   1731c:	4556      	cmp	r6, sl
   1731e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17322:	54e7      	strb	r7, [r4, r3]
   17324:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17328:	f001 8251 	beq.w	187ce <d_print_comp_inner+0x17ea>
   1732c:	29ff      	cmp	r1, #255	; 0xff
   1732e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17332:	d1f1      	bne.n	17318 <d_print_comp_inner+0x334>
   17334:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17338:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1733c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17340:	4620      	mov	r0, r4
   17342:	4798      	blx	r3
   17344:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17348:	3301      	adds	r3, #1
   1734a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1734e:	2101      	movs	r1, #1
   17350:	2300      	movs	r3, #0
   17352:	e7e3      	b.n	1731c <d_print_comp_inner+0x338>
   17354:	4e2e      	ldr	r6, [pc, #184]	; (17410 <d_print_comp_inner+0x42c>)
   17356:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1735a:	f106 0a16 	add.w	sl, r6, #22
   1735e:	f04f 0900 	mov.w	r9, #0
   17362:	e009      	b.n	17378 <d_print_comp_inner+0x394>
   17364:	460b      	mov	r3, r1
   17366:	3101      	adds	r1, #1
   17368:	4556      	cmp	r6, sl
   1736a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1736e:	54e7      	strb	r7, [r4, r3]
   17370:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17374:	f001 8263 	beq.w	1883e <d_print_comp_inner+0x185a>
   17378:	29ff      	cmp	r1, #255	; 0xff
   1737a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1737e:	d1f1      	bne.n	17364 <d_print_comp_inner+0x380>
   17380:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17384:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17388:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1738c:	4620      	mov	r0, r4
   1738e:	4798      	blx	r3
   17390:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17394:	3301      	adds	r3, #1
   17396:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1739a:	2101      	movs	r1, #1
   1739c:	2300      	movs	r3, #0
   1739e:	e7e3      	b.n	17368 <d_print_comp_inner+0x384>
   173a0:	4e1c      	ldr	r6, [pc, #112]	; (17414 <d_print_comp_inner+0x430>)
   173a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173a6:	f106 0a13 	add.w	sl, r6, #19
   173aa:	f04f 0900 	mov.w	r9, #0
   173ae:	e009      	b.n	173c4 <d_print_comp_inner+0x3e0>
   173b0:	460b      	mov	r3, r1
   173b2:	3101      	adds	r1, #1
   173b4:	45b2      	cmp	sl, r6
   173b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173ba:	54e7      	strb	r7, [r4, r3]
   173bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173c0:	f001 8077 	beq.w	184b2 <d_print_comp_inner+0x14ce>
   173c4:	29ff      	cmp	r1, #255	; 0xff
   173c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   173ca:	d1f1      	bne.n	173b0 <d_print_comp_inner+0x3cc>
   173cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   173d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   173d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173d8:	4620      	mov	r0, r4
   173da:	4798      	blx	r3
   173dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   173e0:	3301      	adds	r3, #1
   173e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173e6:	2101      	movs	r1, #1
   173e8:	2300      	movs	r3, #0
   173ea:	e7e3      	b.n	173b4 <d_print_comp_inner+0x3d0>
   173ec:	4e0a      	ldr	r6, [pc, #40]	; (17418 <d_print_comp_inner+0x434>)
   173ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173f2:	f106 0a1a 	add.w	sl, r6, #26
   173f6:	f04f 0900 	mov.w	r9, #0
   173fa:	e019      	b.n	17430 <d_print_comp_inner+0x44c>
   173fc:	000245a0 	.word	0x000245a0
   17400:	0002479c 	.word	0x0002479c
   17404:	0002472b 	.word	0x0002472b
   17408:	000246f7 	.word	0x000246f7
   1740c:	00024713 	.word	0x00024713
   17410:	000246df 	.word	0x000246df
   17414:	000246cb 	.word	0x000246cb
   17418:	0002469f 	.word	0x0002469f
   1741c:	460b      	mov	r3, r1
   1741e:	3101      	adds	r1, #1
   17420:	4556      	cmp	r6, sl
   17422:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17426:	54e7      	strb	r7, [r4, r3]
   17428:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1742c:	f001 804f 	beq.w	184ce <d_print_comp_inner+0x14ea>
   17430:	29ff      	cmp	r1, #255	; 0xff
   17432:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17436:	d1f1      	bne.n	1741c <d_print_comp_inner+0x438>
   17438:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1743c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17440:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17444:	4620      	mov	r0, r4
   17446:	4798      	blx	r3
   17448:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1744c:	3301      	adds	r3, #1
   1744e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17452:	2101      	movs	r1, #1
   17454:	2300      	movs	r3, #0
   17456:	e7e3      	b.n	17420 <d_print_comp_inner+0x43c>
   17458:	4eb5      	ldr	r6, [pc, #724]	; (17730 <d_print_comp_inner+0x74c>)
   1745a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1745e:	f106 0a0f 	add.w	sl, r6, #15
   17462:	f04f 0900 	mov.w	r9, #0
   17466:	e009      	b.n	1747c <d_print_comp_inner+0x498>
   17468:	460b      	mov	r3, r1
   1746a:	3101      	adds	r1, #1
   1746c:	4556      	cmp	r6, sl
   1746e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17472:	54e7      	strb	r7, [r4, r3]
   17474:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17478:	f001 8022 	beq.w	184c0 <d_print_comp_inner+0x14dc>
   1747c:	29ff      	cmp	r1, #255	; 0xff
   1747e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17482:	d1f1      	bne.n	17468 <d_print_comp_inner+0x484>
   17484:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17488:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1748c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17490:	4620      	mov	r0, r4
   17492:	4798      	blx	r3
   17494:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17498:	3301      	adds	r3, #1
   1749a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1749e:	2101      	movs	r1, #1
   174a0:	2300      	movs	r3, #0
   174a2:	e7e3      	b.n	1746c <d_print_comp_inner+0x488>
   174a4:	4ea3      	ldr	r6, [pc, #652]	; (17734 <d_print_comp_inner+0x750>)
   174a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   174aa:	f106 0a11 	add.w	sl, r6, #17
   174ae:	f04f 0900 	mov.w	r9, #0
   174b2:	e009      	b.n	174c8 <d_print_comp_inner+0x4e4>
   174b4:	460b      	mov	r3, r1
   174b6:	3101      	adds	r1, #1
   174b8:	4556      	cmp	r6, sl
   174ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   174be:	54e7      	strb	r7, [r4, r3]
   174c0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   174c4:	f001 800a 	beq.w	184dc <d_print_comp_inner+0x14f8>
   174c8:	29ff      	cmp	r1, #255	; 0xff
   174ca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   174ce:	d1f1      	bne.n	174b4 <d_print_comp_inner+0x4d0>
   174d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   174d4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   174d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   174dc:	4620      	mov	r0, r4
   174de:	4798      	blx	r3
   174e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   174e4:	3301      	adds	r3, #1
   174e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   174ea:	2101      	movs	r1, #1
   174ec:	2300      	movs	r3, #0
   174ee:	e7e3      	b.n	174b8 <d_print_comp_inner+0x4d4>
   174f0:	4e91      	ldr	r6, [pc, #580]	; (17738 <d_print_comp_inner+0x754>)
   174f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   174f6:	f106 0a15 	add.w	sl, r6, #21
   174fa:	f04f 0900 	mov.w	r9, #0
   174fe:	e009      	b.n	17514 <d_print_comp_inner+0x530>
   17500:	460b      	mov	r3, r1
   17502:	3101      	adds	r1, #1
   17504:	4556      	cmp	r6, sl
   17506:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1750a:	54e7      	strb	r7, [r4, r3]
   1750c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17510:	f000 87b3 	beq.w	1847a <d_print_comp_inner+0x1496>
   17514:	29ff      	cmp	r1, #255	; 0xff
   17516:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1751a:	d1f1      	bne.n	17500 <d_print_comp_inner+0x51c>
   1751c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17520:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17524:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17528:	4620      	mov	r0, r4
   1752a:	4798      	blx	r3
   1752c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17530:	3301      	adds	r3, #1
   17532:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17536:	2101      	movs	r1, #1
   17538:	2300      	movs	r3, #0
   1753a:	e7e3      	b.n	17504 <d_print_comp_inner+0x520>
   1753c:	4e7f      	ldr	r6, [pc, #508]	; (1773c <d_print_comp_inner+0x758>)
   1753e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17542:	f106 0a12 	add.w	sl, r6, #18
   17546:	f04f 0900 	mov.w	r9, #0
   1754a:	e009      	b.n	17560 <d_print_comp_inner+0x57c>
   1754c:	460b      	mov	r3, r1
   1754e:	3101      	adds	r1, #1
   17550:	45b2      	cmp	sl, r6
   17552:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17556:	54e7      	strb	r7, [r4, r3]
   17558:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1755c:	f000 879b 	beq.w	18496 <d_print_comp_inner+0x14b2>
   17560:	29ff      	cmp	r1, #255	; 0xff
   17562:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17566:	d1f1      	bne.n	1754c <d_print_comp_inner+0x568>
   17568:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1756c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17570:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17574:	4620      	mov	r0, r4
   17576:	4798      	blx	r3
   17578:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1757c:	3301      	adds	r3, #1
   1757e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17582:	2101      	movs	r1, #1
   17584:	2300      	movs	r3, #0
   17586:	e7e3      	b.n	17550 <d_print_comp_inner+0x56c>
   17588:	4e6d      	ldr	r6, [pc, #436]	; (17740 <d_print_comp_inner+0x75c>)
   1758a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1758e:	f106 0a10 	add.w	sl, r6, #16
   17592:	f04f 0900 	mov.w	r9, #0
   17596:	e009      	b.n	175ac <d_print_comp_inner+0x5c8>
   17598:	460b      	mov	r3, r1
   1759a:	3101      	adds	r1, #1
   1759c:	4556      	cmp	r6, sl
   1759e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175a2:	54e7      	strb	r7, [r4, r3]
   175a4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175a8:	f000 876e 	beq.w	18488 <d_print_comp_inner+0x14a4>
   175ac:	29ff      	cmp	r1, #255	; 0xff
   175ae:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   175b2:	d1f1      	bne.n	17598 <d_print_comp_inner+0x5b4>
   175b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   175bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   175c0:	4620      	mov	r0, r4
   175c2:	4798      	blx	r3
   175c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175c8:	3301      	adds	r3, #1
   175ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   175ce:	2101      	movs	r1, #1
   175d0:	2300      	movs	r3, #0
   175d2:	e7e3      	b.n	1759c <d_print_comp_inner+0x5b8>
   175d4:	4e5b      	ldr	r6, [pc, #364]	; (17744 <d_print_comp_inner+0x760>)
   175d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   175da:	f106 0a0d 	add.w	sl, r6, #13
   175de:	f04f 0900 	mov.w	r9, #0
   175e2:	e009      	b.n	175f8 <d_print_comp_inner+0x614>
   175e4:	460b      	mov	r3, r1
   175e6:	3101      	adds	r1, #1
   175e8:	4556      	cmp	r6, sl
   175ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175ee:	54e7      	strb	r7, [r4, r3]
   175f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175f4:	f000 8756 	beq.w	184a4 <d_print_comp_inner+0x14c0>
   175f8:	29ff      	cmp	r1, #255	; 0xff
   175fa:	f816 7b01 	ldrb.w	r7, [r6], #1
   175fe:	d1f1      	bne.n	175e4 <d_print_comp_inner+0x600>
   17600:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17604:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17608:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1760c:	4620      	mov	r0, r4
   1760e:	4798      	blx	r3
   17610:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17614:	3301      	adds	r3, #1
   17616:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1761a:	2101      	movs	r1, #1
   1761c:	2300      	movs	r3, #0
   1761e:	e7e3      	b.n	175e8 <d_print_comp_inner+0x604>
   17620:	4e49      	ldr	r6, [pc, #292]	; (17748 <d_print_comp_inner+0x764>)
   17622:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17626:	f106 0a18 	add.w	sl, r6, #24
   1762a:	f04f 0900 	mov.w	r9, #0
   1762e:	e009      	b.n	17644 <d_print_comp_inner+0x660>
   17630:	460b      	mov	r3, r1
   17632:	3101      	adds	r1, #1
   17634:	45b2      	cmp	sl, r6
   17636:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1763a:	54e7      	strb	r7, [r4, r3]
   1763c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17640:	f000 86e3 	beq.w	1840a <d_print_comp_inner+0x1426>
   17644:	29ff      	cmp	r1, #255	; 0xff
   17646:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1764a:	d1f1      	bne.n	17630 <d_print_comp_inner+0x64c>
   1764c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17650:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17654:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17658:	4620      	mov	r0, r4
   1765a:	4798      	blx	r3
   1765c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17660:	3301      	adds	r3, #1
   17662:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17666:	2101      	movs	r1, #1
   17668:	2300      	movs	r3, #0
   1766a:	e7e3      	b.n	17634 <d_print_comp_inner+0x650>
   1766c:	4e37      	ldr	r6, [pc, #220]	; (1774c <d_print_comp_inner+0x768>)
   1766e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17672:	f106 0a0b 	add.w	sl, r6, #11
   17676:	f04f 0900 	mov.w	r9, #0
   1767a:	e009      	b.n	17690 <d_print_comp_inner+0x6ac>
   1767c:	460b      	mov	r3, r1
   1767e:	3101      	adds	r1, #1
   17680:	45b2      	cmp	sl, r6
   17682:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17686:	54e7      	strb	r7, [r4, r3]
   17688:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1768c:	f000 87ca 	beq.w	18624 <d_print_comp_inner+0x1640>
   17690:	29ff      	cmp	r1, #255	; 0xff
   17692:	f816 7b01 	ldrb.w	r7, [r6], #1
   17696:	d1f1      	bne.n	1767c <d_print_comp_inner+0x698>
   17698:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1769c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176a4:	4620      	mov	r0, r4
   176a6:	4798      	blx	r3
   176a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176ac:	3301      	adds	r3, #1
   176ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176b2:	2101      	movs	r1, #1
   176b4:	2300      	movs	r3, #0
   176b6:	e7e3      	b.n	17680 <d_print_comp_inner+0x69c>
   176b8:	4e25      	ldr	r6, [pc, #148]	; (17750 <d_print_comp_inner+0x76c>)
   176ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   176be:	f106 0a08 	add.w	sl, r6, #8
   176c2:	f04f 0900 	mov.w	r9, #0
   176c6:	e009      	b.n	176dc <d_print_comp_inner+0x6f8>
   176c8:	460b      	mov	r3, r1
   176ca:	3101      	adds	r1, #1
   176cc:	45b2      	cmp	sl, r6
   176ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176d2:	54e7      	strb	r7, [r4, r3]
   176d4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   176d8:	f000 86c8 	beq.w	1846c <d_print_comp_inner+0x1488>
   176dc:	29ff      	cmp	r1, #255	; 0xff
   176de:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   176e2:	d1f1      	bne.n	176c8 <d_print_comp_inner+0x6e4>
   176e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176e8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176f0:	4620      	mov	r0, r4
   176f2:	4798      	blx	r3
   176f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176f8:	3301      	adds	r3, #1
   176fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176fe:	2101      	movs	r1, #1
   17700:	2300      	movs	r3, #0
   17702:	e7e3      	b.n	176cc <d_print_comp_inner+0x6e8>
   17704:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17708:	29ff      	cmp	r1, #255	; 0xff
   1770a:	f001 847c 	beq.w	19006 <d_print_comp_inner+0x2022>
   1770e:	1c4a      	adds	r2, r1, #1
   17710:	237e      	movs	r3, #126	; 0x7e
   17712:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17716:	5463      	strb	r3, [r4, r1]
   17718:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1771c:	4641      	mov	r1, r8
   1771e:	68aa      	ldr	r2, [r5, #8]
   17720:	4620      	mov	r0, r4
   17722:	f002 fa03 	bl	19b2c <d_print_comp>
   17726:	e52b      	b.n	17180 <d_print_comp_inner+0x19c>
   17728:	68aa      	ldr	r2, [r5, #8]
   1772a:	f002 f9ff 	bl	19b2c <d_print_comp>
   1772e:	e527      	b.n	17180 <d_print_comp_inner+0x19c>
   17730:	000246bb 	.word	0x000246bb
   17734:	0002468b 	.word	0x0002468b
   17738:	00024687 	.word	0x00024687
   1773c:	0002465f 	.word	0x0002465f
   17740:	00024673 	.word	0x00024673
   17744:	00024650 	.word	0x00024650
   17748:	0002462b 	.word	0x0002462b
   1774c:	00024614 	.word	0x00024614
   17750:	0002461f 	.word	0x0002461f
   17754:	2200      	movs	r2, #0
   17756:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1775a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1775e:	686e      	ldr	r6, [r5, #4]
   17760:	9300      	str	r3, [sp, #0]
   17762:	2e00      	cmp	r6, #0
   17764:	f000 864c 	beq.w	18400 <d_print_comp_inner+0x141c>
   17768:	f10d 0910 	add.w	r9, sp, #16
   1776c:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   17770:	4617      	mov	r7, r2
   17772:	4696      	mov	lr, r2
   17774:	464b      	mov	r3, r9
   17776:	7831      	ldrb	r1, [r6, #0]
   17778:	601a      	str	r2, [r3, #0]
   1777a:	f1a1 021c 	sub.w	r2, r1, #28
   1777e:	2a04      	cmp	r2, #4
   17780:	605e      	str	r6, [r3, #4]
   17782:	f8c3 e008 	str.w	lr, [r3, #8]
   17786:	f8c3 c00c 	str.w	ip, [r3, #12]
   1778a:	f107 0701 	add.w	r7, r7, #1
   1778e:	4618      	mov	r0, r3
   17790:	461a      	mov	r2, r3
   17792:	f240 862a 	bls.w	183ea <d_print_comp_inner+0x1406>
   17796:	294c      	cmp	r1, #76	; 0x4c
   17798:	f000 8627 	beq.w	183ea <d_print_comp_inner+0x1406>
   1779c:	2904      	cmp	r1, #4
   1779e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   177a2:	f001 87bb 	beq.w	1971c <d_print_comp_inner+0x2738>
   177a6:	2902      	cmp	r1, #2
   177a8:	d11a      	bne.n	177e0 <d_print_comp_inner+0x7fc>
   177aa:	f8d6 b008 	ldr.w	fp, [r6, #8]
   177ae:	f89b 3000 	ldrb.w	r3, [fp]
   177b2:	2b46      	cmp	r3, #70	; 0x46
   177b4:	f002 8035 	beq.w	19822 <d_print_comp_inner+0x283e>
   177b8:	462b      	mov	r3, r5
   177ba:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   177be:	9601      	str	r6, [sp, #4]
   177c0:	465d      	mov	r5, fp
   177c2:	4676      	mov	r6, lr
   177c4:	46a2      	mov	sl, r4
   177c6:	469b      	mov	fp, r3
   177c8:	782b      	ldrb	r3, [r5, #0]
   177ca:	f1a3 021c 	sub.w	r2, r3, #28
   177ce:	2a04      	cmp	r2, #4
   177d0:	f241 805d 	bls.w	1888e <d_print_comp_inner+0x18aa>
   177d4:	2b4c      	cmp	r3, #76	; 0x4c
   177d6:	f001 805a 	beq.w	1888e <d_print_comp_inner+0x18aa>
   177da:	9e01      	ldr	r6, [sp, #4]
   177dc:	4654      	mov	r4, sl
   177de:	465d      	mov	r5, fp
   177e0:	68aa      	ldr	r2, [r5, #8]
   177e2:	4641      	mov	r1, r8
   177e4:	4620      	mov	r0, r4
   177e6:	f002 f9a1 	bl	19b2c <d_print_comp>
   177ea:	7833      	ldrb	r3, [r6, #0]
   177ec:	2b04      	cmp	r3, #4
   177ee:	f002 8020 	beq.w	19832 <d_print_comp_inner+0x284e>
   177f2:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   177f6:	2620      	movs	r6, #32
   177f8:	f859 5c08 	ldr.w	r5, [r9, #-8]
   177fc:	3f01      	subs	r7, #1
   177fe:	b985      	cbnz	r5, 17822 <d_print_comp_inner+0x83e>
   17800:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17804:	29ff      	cmp	r1, #255	; 0xff
   17806:	f002 8043 	beq.w	19890 <d_print_comp_inner+0x28ac>
   1780a:	1c4b      	adds	r3, r1, #1
   1780c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17810:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17814:	5466      	strb	r6, [r4, r1]
   17816:	4620      	mov	r0, r4
   17818:	4641      	mov	r1, r8
   1781a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1781e:	f002 f995 	bl	19b4c <d_print_mod>
   17822:	f1a9 0910 	sub.w	r9, r9, #16
   17826:	2f00      	cmp	r7, #0
   17828:	d1e6      	bne.n	177f8 <d_print_comp_inner+0x814>
   1782a:	9b00      	ldr	r3, [sp, #0]
   1782c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17830:	e4a6      	b.n	17180 <d_print_comp_inner+0x19c>
   17832:	4ed1      	ldr	r6, [pc, #836]	; (17b78 <d_print_comp_inner+0xb94>)
   17834:	686a      	ldr	r2, [r5, #4]
   17836:	f002 f979 	bl	19b2c <d_print_comp>
   1783a:	f106 0a05 	add.w	sl, r6, #5
   1783e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17842:	f04f 0900 	mov.w	r9, #0
   17846:	e009      	b.n	1785c <d_print_comp_inner+0x878>
   17848:	460b      	mov	r3, r1
   1784a:	3101      	adds	r1, #1
   1784c:	45b2      	cmp	sl, r6
   1784e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17852:	54e7      	strb	r7, [r4, r3]
   17854:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17858:	f000 86d1 	beq.w	185fe <d_print_comp_inner+0x161a>
   1785c:	29ff      	cmp	r1, #255	; 0xff
   1785e:	f816 7b01 	ldrb.w	r7, [r6], #1
   17862:	d1f1      	bne.n	17848 <d_print_comp_inner+0x864>
   17864:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17868:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1786c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17870:	4620      	mov	r0, r4
   17872:	4798      	blx	r3
   17874:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17878:	3301      	adds	r3, #1
   1787a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1787e:	2101      	movs	r1, #1
   17880:	2300      	movs	r3, #0
   17882:	e7e3      	b.n	1784c <d_print_comp_inner+0x868>
   17884:	686a      	ldr	r2, [r5, #4]
   17886:	f002 f951 	bl	19b2c <d_print_comp>
   1788a:	f018 0904 	ands.w	r9, r8, #4
   1788e:	f001 82aa 	beq.w	18de6 <d_print_comp_inner+0x1e02>
   17892:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17896:	29ff      	cmp	r1, #255	; 0xff
   17898:	f001 859a 	beq.w	193d0 <d_print_comp_inner+0x23ec>
   1789c:	1c4a      	adds	r2, r1, #1
   1789e:	232e      	movs	r3, #46	; 0x2e
   178a0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   178a4:	5463      	strb	r3, [r4, r1]
   178a6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   178aa:	68ad      	ldr	r5, [r5, #8]
   178ac:	782b      	ldrb	r3, [r5, #0]
   178ae:	2b46      	cmp	r3, #70	; 0x46
   178b0:	f001 83cc 	beq.w	1904c <d_print_comp_inner+0x2068>
   178b4:	462a      	mov	r2, r5
   178b6:	4641      	mov	r1, r8
   178b8:	4620      	mov	r0, r4
   178ba:	f002 f937 	bl	19b2c <d_print_comp>
   178be:	e45f      	b.n	17180 <d_print_comp_inner+0x19c>
   178c0:	f011 0804 	ands.w	r8, r1, #4
   178c4:	f041 808b 	bne.w	189de <d_print_comp_inner+0x19fa>
   178c8:	68af      	ldr	r7, [r5, #8]
   178ca:	686d      	ldr	r5, [r5, #4]
   178cc:	2f00      	cmp	r7, #0
   178ce:	f43f ac57 	beq.w	17180 <d_print_comp_inner+0x19c>
   178d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178d6:	442f      	add	r7, r5
   178d8:	e009      	b.n	178ee <d_print_comp_inner+0x90a>
   178da:	460b      	mov	r3, r1
   178dc:	3101      	adds	r1, #1
   178de:	42bd      	cmp	r5, r7
   178e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   178e4:	54e6      	strb	r6, [r4, r3]
   178e6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   178ea:	f43f ac49 	beq.w	17180 <d_print_comp_inner+0x19c>
   178ee:	29ff      	cmp	r1, #255	; 0xff
   178f0:	f815 6b01 	ldrb.w	r6, [r5], #1
   178f4:	d1f1      	bne.n	178da <d_print_comp_inner+0x8f6>
   178f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   178fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17902:	4620      	mov	r0, r4
   17904:	4798      	blx	r3
   17906:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1790a:	3301      	adds	r3, #1
   1790c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17910:	2101      	movs	r1, #1
   17912:	2300      	movs	r3, #0
   17914:	e7e3      	b.n	178de <d_print_comp_inner+0x8fa>
   17916:	2301      	movs	r3, #1
   17918:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1791c:	e430      	b.n	17180 <d_print_comp_inner+0x19c>
   1791e:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   17922:	2b00      	cmp	r3, #0
   17924:	f041 8106 	bne.w	18b34 <d_print_comp_inner+0x1b50>
   17928:	1d29      	adds	r1, r5, #4
   1792a:	f7fd fa97 	bl	14e5c <d_lookup_template_argument.isra.6>
   1792e:	2800      	cmp	r0, #0
   17930:	f43f ac3a 	beq.w	171a8 <d_print_comp_inner+0x1c4>
   17934:	7803      	ldrb	r3, [r0, #0]
   17936:	2b2f      	cmp	r3, #47	; 0x2f
   17938:	f001 83fc 	beq.w	19134 <d_print_comp_inner+0x2150>
   1793c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   17940:	682b      	ldr	r3, [r5, #0]
   17942:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   17946:	4602      	mov	r2, r0
   17948:	4641      	mov	r1, r8
   1794a:	4620      	mov	r0, r4
   1794c:	f002 f8ee 	bl	19b2c <d_print_comp>
   17950:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   17954:	e414      	b.n	17180 <d_print_comp_inner+0x19c>
   17956:	2300      	movs	r3, #0
   17958:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   1795c:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   17960:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17964:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   17968:	f011 0f04 	tst.w	r1, #4
   1796c:	686e      	ldr	r6, [r5, #4]
   1796e:	d005      	beq.n	1797c <d_print_comp_inner+0x998>
   17970:	7833      	ldrb	r3, [r6, #0]
   17972:	b91b      	cbnz	r3, 1797c <d_print_comp_inner+0x998>
   17974:	68b2      	ldr	r2, [r6, #8]
   17976:	2a06      	cmp	r2, #6
   17978:	f001 853c 	beq.w	193f4 <d_print_comp_inner+0x2410>
   1797c:	4632      	mov	r2, r6
   1797e:	4641      	mov	r1, r8
   17980:	4620      	mov	r0, r4
   17982:	f002 f8d3 	bl	19b2c <d_print_comp>
   17986:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1798a:	2b3c      	cmp	r3, #60	; 0x3c
   1798c:	f001 8274 	beq.w	18e78 <d_print_comp_inner+0x1e94>
   17990:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17994:	2bff      	cmp	r3, #255	; 0xff
   17996:	f001 8489 	beq.w	192ac <d_print_comp_inner+0x22c8>
   1799a:	1c59      	adds	r1, r3, #1
   1799c:	223c      	movs	r2, #60	; 0x3c
   1799e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   179a2:	54e2      	strb	r2, [r4, r3]
   179a4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   179a8:	4641      	mov	r1, r8
   179aa:	68aa      	ldr	r2, [r5, #8]
   179ac:	4620      	mov	r0, r4
   179ae:	f002 f8bd 	bl	19b2c <d_print_comp>
   179b2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   179b6:	2b3e      	cmp	r3, #62	; 0x3e
   179b8:	f001 8239 	beq.w	18e2e <d_print_comp_inner+0x1e4a>
   179bc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   179c0:	2bff      	cmp	r3, #255	; 0xff
   179c2:	f001 8460 	beq.w	19286 <d_print_comp_inner+0x22a2>
   179c6:	1c59      	adds	r1, r3, #1
   179c8:	223e      	movs	r2, #62	; 0x3e
   179ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   179ce:	54e2      	strb	r2, [r4, r3]
   179d0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   179d4:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   179d8:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   179dc:	f7ff bbd0 	b.w	17180 <d_print_comp_inner+0x19c>
   179e0:	686f      	ldr	r7, [r5, #4]
   179e2:	2f00      	cmp	r7, #0
   179e4:	f001 8082 	beq.w	18aec <d_print_comp_inner+0x1b08>
   179e8:	4d64      	ldr	r5, [pc, #400]	; (17b7c <d_print_comp_inner+0xb98>)
   179ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   179ee:	f105 0906 	add.w	r9, r5, #6
   179f2:	f04f 0800 	mov.w	r8, #0
   179f6:	e009      	b.n	17a0c <d_print_comp_inner+0xa28>
   179f8:	460b      	mov	r3, r1
   179fa:	3101      	adds	r1, #1
   179fc:	45a9      	cmp	r9, r5
   179fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a02:	54e6      	strb	r6, [r4, r3]
   17a04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17a08:	f000 8782 	beq.w	18910 <d_print_comp_inner+0x192c>
   17a0c:	29ff      	cmp	r1, #255	; 0xff
   17a0e:	f815 6b01 	ldrb.w	r6, [r5], #1
   17a12:	d1f1      	bne.n	179f8 <d_print_comp_inner+0xa14>
   17a14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17a1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a20:	4620      	mov	r0, r4
   17a22:	4798      	blx	r3
   17a24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a28:	3301      	adds	r3, #1
   17a2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a2e:	2101      	movs	r1, #1
   17a30:	2300      	movs	r3, #0
   17a32:	e7e3      	b.n	179fc <d_print_comp_inner+0xa18>
   17a34:	4e52      	ldr	r6, [pc, #328]	; (17b80 <d_print_comp_inner+0xb9c>)
   17a36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a3a:	f106 0a0a 	add.w	sl, r6, #10
   17a3e:	f04f 0900 	mov.w	r9, #0
   17a42:	e009      	b.n	17a58 <d_print_comp_inner+0xa74>
   17a44:	460b      	mov	r3, r1
   17a46:	3101      	adds	r1, #1
   17a48:	4556      	cmp	r6, sl
   17a4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a4e:	54e7      	strb	r7, [r4, r3]
   17a50:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17a54:	f000 8701 	beq.w	1885a <d_print_comp_inner+0x1876>
   17a58:	29ff      	cmp	r1, #255	; 0xff
   17a5a:	f816 7b01 	ldrb.w	r7, [r6], #1
   17a5e:	d1f1      	bne.n	17a44 <d_print_comp_inner+0xa60>
   17a60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a64:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17a68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a6c:	4620      	mov	r0, r4
   17a6e:	4798      	blx	r3
   17a70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a74:	3301      	adds	r3, #1
   17a76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a7a:	2101      	movs	r1, #1
   17a7c:	2300      	movs	r3, #0
   17a7e:	e7e3      	b.n	17a48 <d_print_comp_inner+0xa64>
   17a80:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a84:	792d      	ldrb	r5, [r5, #4]
   17a86:	29ff      	cmp	r1, #255	; 0xff
   17a88:	f001 82ab 	beq.w	18fe2 <d_print_comp_inner+0x1ffe>
   17a8c:	1c4b      	adds	r3, r1, #1
   17a8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17a92:	5465      	strb	r5, [r4, r1]
   17a94:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17a98:	f7ff bb72 	b.w	17180 <d_print_comp_inner+0x19c>
   17a9c:	686a      	ldr	r2, [r5, #4]
   17a9e:	f002 f845 	bl	19b2c <d_print_comp>
   17aa2:	68aa      	ldr	r2, [r5, #8]
   17aa4:	4641      	mov	r1, r8
   17aa6:	4620      	mov	r0, r4
   17aa8:	f002 f840 	bl	19b2c <d_print_comp>
   17aac:	f7ff bb68 	b.w	17180 <d_print_comp_inner+0x19c>
   17ab0:	4e34      	ldr	r6, [pc, #208]	; (17b84 <d_print_comp_inner+0xba0>)
   17ab2:	686a      	ldr	r2, [r5, #4]
   17ab4:	f002 f83a 	bl	19b2c <d_print_comp>
   17ab8:	f106 0a08 	add.w	sl, r6, #8
   17abc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17ac0:	f04f 0900 	mov.w	r9, #0
   17ac4:	e009      	b.n	17ada <d_print_comp_inner+0xaf6>
   17ac6:	460b      	mov	r3, r1
   17ac8:	3101      	adds	r1, #1
   17aca:	4556      	cmp	r6, sl
   17acc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ad0:	54e7      	strb	r7, [r4, r3]
   17ad2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ad6:	f000 8508 	beq.w	184ea <d_print_comp_inner+0x1506>
   17ada:	29ff      	cmp	r1, #255	; 0xff
   17adc:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17ae0:	d1f1      	bne.n	17ac6 <d_print_comp_inner+0xae2>
   17ae2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ae6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17aea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17aee:	4620      	mov	r0, r4
   17af0:	4798      	blx	r3
   17af2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17af6:	3301      	adds	r3, #1
   17af8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17afc:	2101      	movs	r1, #1
   17afe:	2300      	movs	r3, #0
   17b00:	e7e3      	b.n	17aca <d_print_comp_inner+0xae6>
   17b02:	686a      	ldr	r2, [r5, #4]
   17b04:	b10a      	cbz	r2, 17b0a <d_print_comp_inner+0xb26>
   17b06:	f002 f811 	bl	19b2c <d_print_comp>
   17b0a:	68ab      	ldr	r3, [r5, #8]
   17b0c:	2b00      	cmp	r3, #0
   17b0e:	f43f ab37 	beq.w	17180 <d_print_comp_inner+0x19c>
   17b12:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   17b16:	2efd      	cmp	r6, #253	; 0xfd
   17b18:	f201 81bc 	bhi.w	18e94 <d_print_comp_inner+0x1eb0>
   17b1c:	4f1a      	ldr	r7, [pc, #104]	; (17b88 <d_print_comp_inner+0xba4>)
   17b1e:	f04f 0a00 	mov.w	sl, #0
   17b22:	f107 0b02 	add.w	fp, r7, #2
   17b26:	4631      	mov	r1, r6
   17b28:	e009      	b.n	17b3e <d_print_comp_inner+0xb5a>
   17b2a:	460b      	mov	r3, r1
   17b2c:	3101      	adds	r1, #1
   17b2e:	455f      	cmp	r7, fp
   17b30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b34:	54e6      	strb	r6, [r4, r3]
   17b36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17b3a:	f000 86c1 	beq.w	188c0 <d_print_comp_inner+0x18dc>
   17b3e:	29ff      	cmp	r1, #255	; 0xff
   17b40:	f817 6b01 	ldrb.w	r6, [r7], #1
   17b44:	d1f1      	bne.n	17b2a <d_print_comp_inner+0xb46>
   17b46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b4a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17b4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b52:	4620      	mov	r0, r4
   17b54:	4798      	blx	r3
   17b56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b5a:	3301      	adds	r3, #1
   17b5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b60:	2101      	movs	r1, #1
   17b62:	2300      	movs	r3, #0
   17b64:	e7e3      	b.n	17b2e <d_print_comp_inner+0xb4a>
   17b66:	4e09      	ldr	r6, [pc, #36]	; (17b8c <d_print_comp_inner+0xba8>)
   17b68:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b6c:	f106 0a09 	add.w	sl, r6, #9
   17b70:	f04f 0900 	mov.w	r9, #0
   17b74:	e016      	b.n	17ba4 <d_print_comp_inner+0xbc0>
   17b76:	bf00      	nop
   17b78:	000245e0 	.word	0x000245e0
   17b7c:	000247ec 	.word	0x000247ec
   17b80:	000247d8 	.word	0x000247d8
   17b84:	00024853 	.word	0x00024853
   17b88:	00024774 	.word	0x00024774
   17b8c:	00024783 	.word	0x00024783
   17b90:	460b      	mov	r3, r1
   17b92:	3101      	adds	r1, #1
   17b94:	4556      	cmp	r6, sl
   17b96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b9a:	54e7      	strb	r7, [r4, r3]
   17b9c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ba0:	f000 8594 	beq.w	186cc <d_print_comp_inner+0x16e8>
   17ba4:	29ff      	cmp	r1, #255	; 0xff
   17ba6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17baa:	d1f1      	bne.n	17b90 <d_print_comp_inner+0xbac>
   17bac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17bb0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17bb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bb8:	4620      	mov	r0, r4
   17bba:	4798      	blx	r3
   17bbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bc0:	3301      	adds	r3, #1
   17bc2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17bc6:	2101      	movs	r1, #1
   17bc8:	2300      	movs	r3, #0
   17bca:	e7e3      	b.n	17b94 <d_print_comp_inner+0xbb0>
   17bcc:	4ed1      	ldr	r6, [pc, #836]	; (17f14 <d_print_comp_inner+0xf30>)
   17bce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17bd2:	f106 0a09 	add.w	sl, r6, #9
   17bd6:	f04f 0900 	mov.w	r9, #0
   17bda:	e009      	b.n	17bf0 <d_print_comp_inner+0xc0c>
   17bdc:	460b      	mov	r3, r1
   17bde:	3101      	adds	r1, #1
   17be0:	4556      	cmp	r6, sl
   17be2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17be6:	54e7      	strb	r7, [r4, r3]
   17be8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17bec:	f000 8597 	beq.w	1871e <d_print_comp_inner+0x173a>
   17bf0:	29ff      	cmp	r1, #255	; 0xff
   17bf2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17bf6:	d1f1      	bne.n	17bdc <d_print_comp_inner+0xbf8>
   17bf8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17bfc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c04:	4620      	mov	r0, r4
   17c06:	4798      	blx	r3
   17c08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c0c:	3301      	adds	r3, #1
   17c0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c12:	2101      	movs	r1, #1
   17c14:	2300      	movs	r3, #0
   17c16:	e7e3      	b.n	17be0 <d_print_comp_inner+0xbfc>
   17c18:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17c1c:	4dbe      	ldr	r5, [pc, #760]	; (17f18 <d_print_comp_inner+0xf34>)
   17c1e:	f8da 7008 	ldr.w	r7, [sl, #8]
   17c22:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c26:	f105 0808 	add.w	r8, r5, #8
   17c2a:	f04f 0900 	mov.w	r9, #0
   17c2e:	e009      	b.n	17c44 <d_print_comp_inner+0xc60>
   17c30:	460b      	mov	r3, r1
   17c32:	3101      	adds	r1, #1
   17c34:	45a8      	cmp	r8, r5
   17c36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c3a:	54e6      	strb	r6, [r4, r3]
   17c3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17c40:	f000 8506 	beq.w	18650 <d_print_comp_inner+0x166c>
   17c44:	29ff      	cmp	r1, #255	; 0xff
   17c46:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   17c4a:	d1f1      	bne.n	17c30 <d_print_comp_inner+0xc4c>
   17c4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c58:	4620      	mov	r0, r4
   17c5a:	4798      	blx	r3
   17c5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c60:	3301      	adds	r3, #1
   17c62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c66:	2101      	movs	r1, #1
   17c68:	2300      	movs	r3, #0
   17c6a:	e7e3      	b.n	17c34 <d_print_comp_inner+0xc50>
   17c6c:	686a      	ldr	r2, [r5, #4]
   17c6e:	68ae      	ldr	r6, [r5, #8]
   17c70:	b10a      	cbz	r2, 17c76 <d_print_comp_inner+0xc92>
   17c72:	f001 ff5b 	bl	19b2c <d_print_comp>
   17c76:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17c7a:	2bff      	cmp	r3, #255	; 0xff
   17c7c:	f001 82b1 	beq.w	191e2 <d_print_comp_inner+0x21fe>
   17c80:	1c5a      	adds	r2, r3, #1
   17c82:	257b      	movs	r5, #123	; 0x7b
   17c84:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17c88:	4641      	mov	r1, r8
   17c8a:	54e5      	strb	r5, [r4, r3]
   17c8c:	4632      	mov	r2, r6
   17c8e:	4620      	mov	r0, r4
   17c90:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17c94:	f001 ff4a 	bl	19b2c <d_print_comp>
   17c98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17c9c:	29ff      	cmp	r1, #255	; 0xff
   17c9e:	f001 81e7 	beq.w	19070 <d_print_comp_inner+0x208c>
   17ca2:	1c4a      	adds	r2, r1, #1
   17ca4:	237d      	movs	r3, #125	; 0x7d
   17ca6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17caa:	5463      	strb	r3, [r4, r1]
   17cac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17cb0:	f7ff ba66 	b.w	17180 <d_print_comp_inner+0x19c>
   17cb4:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17cb8:	68ae      	ldr	r6, [r5, #8]
   17cba:	f899 3000 	ldrb.w	r3, [r9]
   17cbe:	2b31      	cmp	r3, #49	; 0x31
   17cc0:	f000 87cb 	beq.w	18c5a <d_print_comp_inner+0x1c76>
   17cc4:	2b33      	cmp	r3, #51	; 0x33
   17cc6:	f041 86d3 	bne.w	19a70 <d_print_comp_inner+0x2a8c>
   17cca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17cce:	29ff      	cmp	r1, #255	; 0xff
   17cd0:	f001 84c3 	beq.w	1965a <d_print_comp_inner+0x2676>
   17cd4:	1c4a      	adds	r2, r1, #1
   17cd6:	2328      	movs	r3, #40	; 0x28
   17cd8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17cdc:	5463      	strb	r3, [r4, r1]
   17cde:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17ce2:	a904      	add	r1, sp, #16
   17ce4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17ce8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   17cec:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17cf0:	4620      	mov	r0, r4
   17cf2:	4641      	mov	r1, r8
   17cf4:	9305      	str	r3, [sp, #20]
   17cf6:	9204      	str	r2, [sp, #16]
   17cf8:	f7ff f974 	bl	16fe4 <d_print_comp_inner>
   17cfc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17d00:	9b05      	ldr	r3, [sp, #20]
   17d02:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   17d06:	29ff      	cmp	r1, #255	; 0xff
   17d08:	f001 8496 	beq.w	19638 <d_print_comp_inner+0x2654>
   17d0c:	2329      	movs	r3, #41	; 0x29
   17d0e:	1c4a      	adds	r2, r1, #1
   17d10:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17d14:	5463      	strb	r3, [r4, r1]
   17d16:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17d1a:	4632      	mov	r2, r6
   17d1c:	4641      	mov	r1, r8
   17d1e:	4620      	mov	r0, r4
   17d20:	f002 fd2a 	bl	1a778 <d_print_subexpr>
   17d24:	f7ff ba2c 	b.w	17180 <d_print_comp_inner+0x19c>
   17d28:	686a      	ldr	r2, [r5, #4]
   17d2a:	f002 fce7 	bl	1a6fc <d_print_expr_op>
   17d2e:	f7ff ba27 	b.w	17180 <d_print_comp_inner+0x19c>
   17d32:	f011 0f20 	tst.w	r1, #32
   17d36:	f040 8753 	bne.w	18be0 <d_print_comp_inner+0x1bfc>
   17d3a:	686a      	ldr	r2, [r5, #4]
   17d3c:	b11a      	cbz	r2, 17d46 <d_print_comp_inner+0xd62>
   17d3e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   17d42:	f001 81d0 	beq.w	190e6 <d_print_comp_inner+0x2102>
   17d46:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   17d4a:	f105 0208 	add.w	r2, r5, #8
   17d4e:	4641      	mov	r1, r8
   17d50:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17d54:	4620      	mov	r0, r4
   17d56:	f002 fbdd 	bl	1a514 <d_print_function_type.isra.11>
   17d5a:	f7ff ba11 	b.w	17180 <d_print_comp_inner+0x19c>
   17d5e:	f011 0804 	ands.w	r8, r1, #4
   17d62:	686b      	ldr	r3, [r5, #4]
   17d64:	f040 8612 	bne.w	1898c <d_print_comp_inner+0x19a8>
   17d68:	e893 00a0 	ldmia.w	r3, {r5, r7}
   17d6c:	2f00      	cmp	r7, #0
   17d6e:	f43f aa07 	beq.w	17180 <d_print_comp_inner+0x19c>
   17d72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d76:	442f      	add	r7, r5
   17d78:	e009      	b.n	17d8e <d_print_comp_inner+0xdaa>
   17d7a:	460b      	mov	r3, r1
   17d7c:	3101      	adds	r1, #1
   17d7e:	42bd      	cmp	r5, r7
   17d80:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d84:	54e6      	strb	r6, [r4, r3]
   17d86:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17d8a:	f43f a9f9 	beq.w	17180 <d_print_comp_inner+0x19c>
   17d8e:	29ff      	cmp	r1, #255	; 0xff
   17d90:	f815 6b01 	ldrb.w	r6, [r5], #1
   17d94:	d1f1      	bne.n	17d7a <d_print_comp_inner+0xd96>
   17d96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d9a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17d9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17da2:	4620      	mov	r0, r4
   17da4:	4798      	blx	r3
   17da6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17daa:	3301      	adds	r3, #1
   17dac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17db0:	2101      	movs	r1, #1
   17db2:	2300      	movs	r3, #0
   17db4:	e7e3      	b.n	17d7e <d_print_comp_inner+0xd9a>
   17db6:	6869      	ldr	r1, [r5, #4]
   17db8:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17dbc:	780b      	ldrb	r3, [r1, #0]
   17dbe:	2f00      	cmp	r7, #0
   17dc0:	f040 85e1 	bne.w	18986 <d_print_comp_inner+0x19a2>
   17dc4:	2b05      	cmp	r3, #5
   17dc6:	f001 81c7 	beq.w	19158 <d_print_comp_inner+0x2174>
   17dca:	2b23      	cmp	r3, #35	; 0x23
   17dcc:	f000 8689 	beq.w	18ae2 <d_print_comp_inner+0x1afe>
   17dd0:	782a      	ldrb	r2, [r5, #0]
   17dd2:	429a      	cmp	r2, r3
   17dd4:	f000 8685 	beq.w	18ae2 <d_print_comp_inner+0x1afe>
   17dd8:	2b24      	cmp	r3, #36	; 0x24
   17dda:	f47f a9eb 	bne.w	171b4 <d_print_comp_inner+0x1d0>
   17dde:	a814      	add	r0, sp, #80	; 0x50
   17de0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17de4:	684a      	ldr	r2, [r1, #4]
   17de6:	f840 3d40 	str.w	r3, [r0, #-64]!
   17dea:	2100      	movs	r1, #0
   17dec:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17df0:	9505      	str	r5, [sp, #20]
   17df2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17df6:	9106      	str	r1, [sp, #24]
   17df8:	9307      	str	r3, [sp, #28]
   17dfa:	2a00      	cmp	r2, #0
   17dfc:	f47f a9e8 	bne.w	171d0 <d_print_comp_inner+0x1ec>
   17e00:	f7ff b9e5 	b.w	171ce <d_print_comp_inner+0x1ea>
   17e04:	686a      	ldr	r2, [r5, #4]
   17e06:	f001 fe91 	bl	19b2c <d_print_comp>
   17e0a:	f7ff b9b9 	b.w	17180 <d_print_comp_inner+0x19c>
   17e0e:	ab14      	add	r3, sp, #80	; 0x50
   17e10:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17e14:	f843 2d40 	str.w	r2, [r3, #-64]!
   17e18:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17e1c:	68aa      	ldr	r2, [r5, #8]
   17e1e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17e22:	9307      	str	r3, [sp, #28]
   17e24:	2600      	movs	r6, #0
   17e26:	9505      	str	r5, [sp, #20]
   17e28:	9606      	str	r6, [sp, #24]
   17e2a:	f001 fe7f 	bl	19b2c <d_print_comp>
   17e2e:	9b06      	ldr	r3, [sp, #24]
   17e30:	b923      	cbnz	r3, 17e3c <d_print_comp_inner+0xe58>
   17e32:	462a      	mov	r2, r5
   17e34:	4641      	mov	r1, r8
   17e36:	4620      	mov	r0, r4
   17e38:	f001 fe88 	bl	19b4c <d_print_mod>
   17e3c:	9b04      	ldr	r3, [sp, #16]
   17e3e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17e42:	f7ff b99d 	b.w	17180 <d_print_comp_inner+0x19c>
   17e46:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17e4a:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17e4e:	f849 bd40 	str.w	fp, [r9, #-64]!
   17e52:	2200      	movs	r2, #0
   17e54:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17e58:	f8cd b000 	str.w	fp, [sp]
   17e5c:	4659      	mov	r1, fp
   17e5e:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17e62:	9505      	str	r5, [sp, #20]
   17e64:	9206      	str	r2, [sp, #24]
   17e66:	9307      	str	r3, [sp, #28]
   17e68:	2900      	cmp	r1, #0
   17e6a:	f001 83a0 	beq.w	195ae <d_print_comp_inner+0x25ca>
   17e6e:	684b      	ldr	r3, [r1, #4]
   17e70:	781b      	ldrb	r3, [r3, #0]
   17e72:	3b19      	subs	r3, #25
   17e74:	2b02      	cmp	r3, #2
   17e76:	f201 839a 	bhi.w	195ae <d_print_comp_inner+0x25ca>
   17e7a:	46ac      	mov	ip, r5
   17e7c:	2701      	movs	r7, #1
   17e7e:	460e      	mov	r6, r1
   17e80:	464d      	mov	r5, r9
   17e82:	e004      	b.n	17e8e <d_print_comp_inner+0xeaa>
   17e84:	6873      	ldr	r3, [r6, #4]
   17e86:	781b      	ldrb	r3, [r3, #0]
   17e88:	3b19      	subs	r3, #25
   17e8a:	2b02      	cmp	r3, #2
   17e8c:	d81b      	bhi.n	17ec6 <d_print_comp_inner+0xee2>
   17e8e:	68b3      	ldr	r3, [r6, #8]
   17e90:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17e94:	aa14      	add	r2, sp, #80	; 0x50
   17e96:	eb02 0b0e 	add.w	fp, r2, lr
   17e9a:	b98b      	cbnz	r3, 17ec0 <d_print_comp_inner+0xedc>
   17e9c:	2f03      	cmp	r7, #3
   17e9e:	f201 80f9 	bhi.w	19094 <d_print_comp_inner+0x20b0>
   17ea2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17ea6:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17eaa:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17eae:	f84b 5c40 	str.w	r5, [fp, #-64]
   17eb2:	2301      	movs	r3, #1
   17eb4:	eb09 050e 	add.w	r5, r9, lr
   17eb8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17ebc:	3701      	adds	r7, #1
   17ebe:	60b3      	str	r3, [r6, #8]
   17ec0:	6836      	ldr	r6, [r6, #0]
   17ec2:	2e00      	cmp	r6, #0
   17ec4:	d1de      	bne.n	17e84 <d_print_comp_inner+0xea0>
   17ec6:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17eca:	4641      	mov	r1, r8
   17ecc:	4620      	mov	r0, r4
   17ece:	4665      	mov	r5, ip
   17ed0:	f001 fe2c 	bl	19b2c <d_print_comp>
   17ed4:	9b06      	ldr	r3, [sp, #24]
   17ed6:	9a00      	ldr	r2, [sp, #0]
   17ed8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17edc:	2b00      	cmp	r3, #0
   17ede:	f47f a94f 	bne.w	17180 <d_print_comp_inner+0x19c>
   17ee2:	2f01      	cmp	r7, #1
   17ee4:	d00c      	beq.n	17f00 <d_print_comp_inner+0xf1c>
   17ee6:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17eea:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17eee:	3f01      	subs	r7, #1
   17ef0:	4641      	mov	r1, r8
   17ef2:	4620      	mov	r0, r4
   17ef4:	f001 fe2a 	bl	19b4c <d_print_mod>
   17ef8:	2f01      	cmp	r7, #1
   17efa:	f1a9 0910 	sub.w	r9, r9, #16
   17efe:	d1f4      	bne.n	17eea <d_print_comp_inner+0xf06>
   17f00:	1d2a      	adds	r2, r5, #4
   17f02:	4641      	mov	r1, r8
   17f04:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17f08:	4620      	mov	r0, r4
   17f0a:	f002 fa27 	bl	1a35c <d_print_array_type.isra.10>
   17f0e:	f7ff b937 	b.w	17180 <d_print_comp_inner+0x19c>
   17f12:	bf00      	nop
   17f14:	00024783 	.word	0x00024783
   17f18:	00024777 	.word	0x00024777
   17f1c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17f20:	2b00      	cmp	r3, #0
   17f22:	f040 8674 	bne.w	18c0e <d_print_comp_inner+0x1c2a>
   17f26:	686a      	ldr	r2, [r5, #4]
   17f28:	4bd5      	ldr	r3, [pc, #852]	; (18280 <d_print_comp_inner+0x129c>)
   17f2a:	6851      	ldr	r1, [r2, #4]
   17f2c:	4299      	cmp	r1, r3
   17f2e:	f000 866a 	beq.w	18c06 <d_print_comp_inner+0x1c22>
   17f32:	4641      	mov	r1, r8
   17f34:	4620      	mov	r0, r4
   17f36:	f001 fdf9 	bl	19b2c <d_print_comp>
   17f3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17f3e:	2bff      	cmp	r3, #255	; 0xff
   17f40:	f001 82b2 	beq.w	194a8 <d_print_comp_inner+0x24c4>
   17f44:	1c59      	adds	r1, r3, #1
   17f46:	2220      	movs	r2, #32
   17f48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f4c:	54e2      	strb	r2, [r4, r3]
   17f4e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17f52:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17f56:	2b00      	cmp	r3, #0
   17f58:	f000 8595 	beq.w	18a86 <d_print_comp_inner+0x1aa2>
   17f5c:	4dc9      	ldr	r5, [pc, #804]	; (18284 <d_print_comp_inner+0x12a0>)
   17f5e:	f04f 0800 	mov.w	r8, #0
   17f62:	1daf      	adds	r7, r5, #6
   17f64:	e009      	b.n	17f7a <d_print_comp_inner+0xf96>
   17f66:	460b      	mov	r3, r1
   17f68:	3101      	adds	r1, #1
   17f6a:	42bd      	cmp	r5, r7
   17f6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f70:	54e6      	strb	r6, [r4, r3]
   17f72:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17f76:	f43f a903 	beq.w	17180 <d_print_comp_inner+0x19c>
   17f7a:	29ff      	cmp	r1, #255	; 0xff
   17f7c:	f815 6b01 	ldrb.w	r6, [r5], #1
   17f80:	d1f1      	bne.n	17f66 <d_print_comp_inner+0xf82>
   17f82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f86:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17f8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f8e:	4620      	mov	r0, r4
   17f90:	4798      	blx	r3
   17f92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f96:	3301      	adds	r3, #1
   17f98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f9c:	2101      	movs	r1, #1
   17f9e:	2300      	movs	r3, #0
   17fa0:	e7e3      	b.n	17f6a <d_print_comp_inner+0xf86>
   17fa2:	4eb9      	ldr	r6, [pc, #740]	; (18288 <d_print_comp_inner+0x12a4>)
   17fa4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17fa8:	f106 090e 	add.w	r9, r6, #14
   17fac:	f04f 0800 	mov.w	r8, #0
   17fb0:	e009      	b.n	17fc6 <d_print_comp_inner+0xfe2>
   17fb2:	460b      	mov	r3, r1
   17fb4:	3101      	adds	r1, #1
   17fb6:	45b1      	cmp	r9, r6
   17fb8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17fbc:	54e7      	strb	r7, [r4, r3]
   17fbe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17fc2:	f000 83b3 	beq.w	1872c <d_print_comp_inner+0x1748>
   17fc6:	29ff      	cmp	r1, #255	; 0xff
   17fc8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17fcc:	d1f1      	bne.n	17fb2 <d_print_comp_inner+0xfce>
   17fce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fd2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17fd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17fda:	4620      	mov	r0, r4
   17fdc:	4798      	blx	r3
   17fde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17fe2:	3301      	adds	r3, #1
   17fe4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17fe8:	2101      	movs	r1, #1
   17fea:	2300      	movs	r3, #0
   17fec:	e7e3      	b.n	17fb6 <d_print_comp_inner+0xfd2>
   17fee:	4ea7      	ldr	r6, [pc, #668]	; (1828c <d_print_comp_inner+0x12a8>)
   17ff0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17ff4:	f106 0a1a 	add.w	sl, r6, #26
   17ff8:	f04f 0900 	mov.w	r9, #0
   17ffc:	e009      	b.n	18012 <d_print_comp_inner+0x102e>
   17ffe:	460b      	mov	r3, r1
   18000:	3101      	adds	r1, #1
   18002:	4556      	cmp	r6, sl
   18004:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18008:	54e7      	strb	r7, [r4, r3]
   1800a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1800e:	f000 82ef 	beq.w	185f0 <d_print_comp_inner+0x160c>
   18012:	29ff      	cmp	r1, #255	; 0xff
   18014:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18018:	d1f1      	bne.n	17ffe <d_print_comp_inner+0x101a>
   1801a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1801e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18022:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18026:	4620      	mov	r0, r4
   18028:	4798      	blx	r3
   1802a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1802e:	3301      	adds	r3, #1
   18030:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18034:	2101      	movs	r1, #1
   18036:	2300      	movs	r3, #0
   18038:	e7e3      	b.n	18002 <d_print_comp_inner+0x101e>
   1803a:	6869      	ldr	r1, [r5, #4]
   1803c:	f7fc ff2a 	bl	14e94 <d_find_pack>
   18040:	f04f 0900 	mov.w	r9, #0
   18044:	2800      	cmp	r0, #0
   18046:	f001 835d 	beq.w	19704 <d_print_comp_inner+0x2720>
   1804a:	7803      	ldrb	r3, [r0, #0]
   1804c:	2b2f      	cmp	r3, #47	; 0x2f
   1804e:	f040 8457 	bne.w	18900 <d_print_comp_inner+0x191c>
   18052:	6843      	ldr	r3, [r0, #4]
   18054:	2b00      	cmp	r3, #0
   18056:	f000 8453 	beq.w	18900 <d_print_comp_inner+0x191c>
   1805a:	6880      	ldr	r0, [r0, #8]
   1805c:	f109 0901 	add.w	r9, r9, #1
   18060:	2800      	cmp	r0, #0
   18062:	d1f2      	bne.n	1804a <d_print_comp_inner+0x1066>
   18064:	686b      	ldr	r3, [r5, #4]
   18066:	9300      	str	r3, [sp, #0]
   18068:	f109 33ff 	add.w	r3, r9, #4294967295
   1806c:	9301      	str	r3, [sp, #4]
   1806e:	f04f 0a00 	mov.w	sl, #0
   18072:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   18076:	9a00      	ldr	r2, [sp, #0]
   18078:	4641      	mov	r1, r8
   1807a:	4620      	mov	r0, r4
   1807c:	f001 fd56 	bl	19b2c <d_print_comp>
   18080:	9b01      	ldr	r3, [sp, #4]
   18082:	42bb      	cmp	r3, r7
   18084:	f340 81ab 	ble.w	183de <d_print_comp_inner+0x13fa>
   18088:	4d81      	ldr	r5, [pc, #516]	; (18290 <d_print_comp_inner+0x12ac>)
   1808a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1808e:	f105 0b02 	add.w	fp, r5, #2
   18092:	e009      	b.n	180a8 <d_print_comp_inner+0x10c4>
   18094:	460b      	mov	r3, r1
   18096:	3101      	adds	r1, #1
   18098:	45ab      	cmp	fp, r5
   1809a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1809e:	54e6      	strb	r6, [r4, r3]
   180a0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   180a4:	f000 819b 	beq.w	183de <d_print_comp_inner+0x13fa>
   180a8:	29ff      	cmp	r1, #255	; 0xff
   180aa:	f815 6b01 	ldrb.w	r6, [r5], #1
   180ae:	d1f1      	bne.n	18094 <d_print_comp_inner+0x10b0>
   180b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180b4:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   180b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180bc:	4620      	mov	r0, r4
   180be:	4798      	blx	r3
   180c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180c4:	3301      	adds	r3, #1
   180c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180ca:	2101      	movs	r1, #1
   180cc:	2300      	movs	r3, #0
   180ce:	e7e3      	b.n	18098 <d_print_comp_inner+0x10b4>
   180d0:	4e70      	ldr	r6, [pc, #448]	; (18294 <d_print_comp_inner+0x12b0>)
   180d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   180d6:	f106 0a16 	add.w	sl, r6, #22
   180da:	f04f 0900 	mov.w	r9, #0
   180de:	e009      	b.n	180f4 <d_print_comp_inner+0x1110>
   180e0:	460b      	mov	r3, r1
   180e2:	3101      	adds	r1, #1
   180e4:	45b2      	cmp	sl, r6
   180e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   180ea:	54e7      	strb	r7, [r4, r3]
   180ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180f0:	f000 835f 	beq.w	187b2 <d_print_comp_inner+0x17ce>
   180f4:	29ff      	cmp	r1, #255	; 0xff
   180f6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   180fa:	d1f1      	bne.n	180e0 <d_print_comp_inner+0x10fc>
   180fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18100:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18104:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18108:	4620      	mov	r0, r4
   1810a:	4798      	blx	r3
   1810c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18110:	3301      	adds	r3, #1
   18112:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18116:	2101      	movs	r1, #1
   18118:	2300      	movs	r3, #0
   1811a:	e7e3      	b.n	180e4 <d_print_comp_inner+0x1100>
   1811c:	4e5e      	ldr	r6, [pc, #376]	; (18298 <d_print_comp_inner+0x12b4>)
   1811e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18122:	f106 0a0e 	add.w	sl, r6, #14
   18126:	f04f 0900 	mov.w	r9, #0
   1812a:	e009      	b.n	18140 <d_print_comp_inner+0x115c>
   1812c:	460b      	mov	r3, r1
   1812e:	3101      	adds	r1, #1
   18130:	4556      	cmp	r6, sl
   18132:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18136:	54e7      	strb	r7, [r4, r3]
   18138:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1813c:	f000 83a0 	beq.w	18880 <d_print_comp_inner+0x189c>
   18140:	29ff      	cmp	r1, #255	; 0xff
   18142:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18146:	d1f1      	bne.n	1812c <d_print_comp_inner+0x1148>
   18148:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1814c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18150:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18154:	4620      	mov	r0, r4
   18156:	4798      	blx	r3
   18158:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1815c:	3301      	adds	r3, #1
   1815e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18162:	2101      	movs	r1, #1
   18164:	2300      	movs	r3, #0
   18166:	e7e3      	b.n	18130 <d_print_comp_inner+0x114c>
   18168:	686a      	ldr	r2, [r5, #4]
   1816a:	7811      	ldrb	r1, [r2, #0]
   1816c:	2927      	cmp	r1, #39	; 0x27
   1816e:	f000 8615 	beq.w	18d9c <d_print_comp_inner+0x1db8>
   18172:	2600      	movs	r6, #0
   18174:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18178:	29ff      	cmp	r1, #255	; 0xff
   1817a:	f001 80c5 	beq.w	19308 <d_print_comp_inner+0x2324>
   1817e:	2328      	movs	r3, #40	; 0x28
   18180:	1c4a      	adds	r2, r1, #1
   18182:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18186:	5463      	strb	r3, [r4, r1]
   18188:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1818c:	686a      	ldr	r2, [r5, #4]
   1818e:	4641      	mov	r1, r8
   18190:	4620      	mov	r0, r4
   18192:	f001 fccb 	bl	19b2c <d_print_comp>
   18196:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1819a:	2bff      	cmp	r3, #255	; 0xff
   1819c:	f001 8099 	beq.w	192d2 <d_print_comp_inner+0x22ee>
   181a0:	1c59      	adds	r1, r3, #1
   181a2:	2229      	movs	r2, #41	; 0x29
   181a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   181a8:	54e2      	strb	r2, [r4, r3]
   181aa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   181ae:	782b      	ldrb	r3, [r5, #0]
   181b0:	2b3d      	cmp	r3, #61	; 0x3d
   181b2:	f000 86e6 	beq.w	18f82 <d_print_comp_inner+0x1f9e>
   181b6:	2e08      	cmp	r6, #8
   181b8:	f000 867f 	beq.w	18eba <d_print_comp_inner+0x1ed6>
   181bc:	68aa      	ldr	r2, [r5, #8]
   181be:	4641      	mov	r1, r8
   181c0:	4620      	mov	r0, r4
   181c2:	f001 fcb3 	bl	19b2c <d_print_comp>
   181c6:	f7fe bfdb 	b.w	17180 <d_print_comp_inner+0x19c>
   181ca:	2301      	movs	r3, #1
   181cc:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   181d0:	f7fe bfd6 	b.w	17180 <d_print_comp_inner+0x19c>
   181d4:	686a      	ldr	r2, [r5, #4]
   181d6:	4931      	ldr	r1, [pc, #196]	; (1829c <d_print_comp_inner+0x12b8>)
   181d8:	a804      	add	r0, sp, #16
   181da:	f006 fd9f 	bl	1ed1c <sprintf>
   181de:	a804      	add	r0, sp, #16
   181e0:	f006 ff4e 	bl	1f080 <strlen>
   181e4:	2800      	cmp	r0, #0
   181e6:	f43e afcb 	beq.w	17180 <d_print_comp_inner+0x19c>
   181ea:	ad04      	add	r5, sp, #16
   181ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   181f0:	182f      	adds	r7, r5, r0
   181f2:	f04f 0800 	mov.w	r8, #0
   181f6:	e009      	b.n	1820c <d_print_comp_inner+0x1228>
   181f8:	460b      	mov	r3, r1
   181fa:	3101      	adds	r1, #1
   181fc:	42bd      	cmp	r5, r7
   181fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18202:	54e6      	strb	r6, [r4, r3]
   18204:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18208:	f43e afba 	beq.w	17180 <d_print_comp_inner+0x19c>
   1820c:	29ff      	cmp	r1, #255	; 0xff
   1820e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18212:	d1f1      	bne.n	181f8 <d_print_comp_inner+0x1214>
   18214:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18218:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1821c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18220:	4620      	mov	r0, r4
   18222:	4798      	blx	r3
   18224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18228:	3301      	adds	r3, #1
   1822a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1822e:	2101      	movs	r1, #1
   18230:	2300      	movs	r3, #0
   18232:	e7e3      	b.n	181fc <d_print_comp_inner+0x1218>
   18234:	4e1a      	ldr	r6, [pc, #104]	; (182a0 <d_print_comp_inner+0x12bc>)
   18236:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1823a:	f106 0a1c 	add.w	sl, r6, #28
   1823e:	f04f 0900 	mov.w	r9, #0
   18242:	e009      	b.n	18258 <d_print_comp_inner+0x1274>
   18244:	460b      	mov	r3, r1
   18246:	3101      	adds	r1, #1
   18248:	4556      	cmp	r6, sl
   1824a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1824e:	54e7      	strb	r7, [r4, r3]
   18250:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18254:	f000 82fa 	beq.w	1884c <d_print_comp_inner+0x1868>
   18258:	29ff      	cmp	r1, #255	; 0xff
   1825a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1825e:	d1f1      	bne.n	18244 <d_print_comp_inner+0x1260>
   18260:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18264:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18268:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1826c:	4620      	mov	r0, r4
   1826e:	4798      	blx	r3
   18270:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18274:	3301      	adds	r3, #1
   18276:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1827a:	2101      	movs	r1, #1
   1827c:	2300      	movs	r3, #0
   1827e:	e7e3      	b.n	18248 <d_print_comp_inner+0x1264>
   18280:	00023f40 	.word	0x00023f40
   18284:	00024764 	.word	0x00024764
   18288:	00024843 	.word	0x00024843
   1828c:	0002473f 	.word	0x0002473f
   18290:	00024774 	.word	0x00024774
   18294:	00024743 	.word	0x00024743
   18298:	000247c7 	.word	0x000247c7
   1829c:	00024598 	.word	0x00024598
   182a0:	00024813 	.word	0x00024813
   182a4:	68ab      	ldr	r3, [r5, #8]
   182a6:	781a      	ldrb	r2, [r3, #0]
   182a8:	2a3a      	cmp	r2, #58	; 0x3a
   182aa:	f47e af7d 	bne.w	171a8 <d_print_comp_inner+0x1c4>
   182ae:	689b      	ldr	r3, [r3, #8]
   182b0:	781b      	ldrb	r3, [r3, #0]
   182b2:	2b3b      	cmp	r3, #59	; 0x3b
   182b4:	f47e af78 	bne.w	171a8 <d_print_comp_inner+0x1c4>
   182b8:	f105 0308 	add.w	r3, r5, #8
   182bc:	686a      	ldr	r2, [r5, #4]
   182be:	f002 fabf 	bl	1a840 <d_maybe_print_fold_expression.isra.15>
   182c2:	4606      	mov	r6, r0
   182c4:	2800      	cmp	r0, #0
   182c6:	f47e af5b 	bne.w	17180 <d_print_comp_inner+0x19c>
   182ca:	f8d5 a004 	ldr.w	sl, [r5, #4]
   182ce:	68aa      	ldr	r2, [r5, #8]
   182d0:	f8da 1004 	ldr.w	r1, [sl, #4]
   182d4:	6893      	ldr	r3, [r2, #8]
   182d6:	6808      	ldr	r0, [r1, #0]
   182d8:	49d6      	ldr	r1, [pc, #856]	; (18634 <d_print_comp_inner+0x1650>)
   182da:	f8d2 9004 	ldr.w	r9, [r2, #4]
   182de:	685f      	ldr	r7, [r3, #4]
   182e0:	689d      	ldr	r5, [r3, #8]
   182e2:	f006 fd51 	bl	1ed88 <strcmp>
   182e6:	2800      	cmp	r0, #0
   182e8:	f001 82e2 	beq.w	198b0 <d_print_comp_inner+0x28cc>
   182ec:	2204      	movs	r2, #4
   182ee:	49d2      	ldr	r1, [pc, #840]	; (18638 <d_print_comp_inner+0x1654>)
   182f0:	4620      	mov	r0, r4
   182f2:	f7fc fba3 	bl	14a3c <d_append_buffer>
   182f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   182fa:	b183      	cbz	r3, 1831e <d_print_comp_inner+0x133a>
   182fc:	4641      	mov	r1, r8
   182fe:	464a      	mov	r2, r9
   18300:	4620      	mov	r0, r4
   18302:	f002 fa39 	bl	1a778 <d_print_subexpr>
   18306:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1830a:	29ff      	cmp	r1, #255	; 0xff
   1830c:	f001 83ec 	beq.w	19ae8 <d_print_comp_inner+0x2b04>
   18310:	2320      	movs	r3, #32
   18312:	1c4a      	adds	r2, r1, #1
   18314:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18318:	5463      	strb	r3, [r4, r1]
   1831a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1831e:	463a      	mov	r2, r7
   18320:	4641      	mov	r1, r8
   18322:	4620      	mov	r0, r4
   18324:	f001 fc02 	bl	19b2c <d_print_comp>
   18328:	2d00      	cmp	r5, #0
   1832a:	f43e af29 	beq.w	17180 <d_print_comp_inner+0x19c>
   1832e:	462a      	mov	r2, r5
   18330:	4641      	mov	r1, r8
   18332:	4620      	mov	r0, r4
   18334:	f002 fa20 	bl	1a778 <d_print_subexpr>
   18338:	f7fe bf22 	b.w	17180 <d_print_comp_inner+0x19c>
   1833c:	4ebf      	ldr	r6, [pc, #764]	; (1863c <d_print_comp_inner+0x1658>)
   1833e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18342:	f106 0a08 	add.w	sl, r6, #8
   18346:	f04f 0900 	mov.w	r9, #0
   1834a:	e009      	b.n	18360 <d_print_comp_inner+0x137c>
   1834c:	460b      	mov	r3, r1
   1834e:	3101      	adds	r1, #1
   18350:	4556      	cmp	r6, sl
   18352:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18356:	54e7      	strb	r7, [r4, r3]
   18358:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1835c:	f000 80d8 	beq.w	18510 <d_print_comp_inner+0x152c>
   18360:	29ff      	cmp	r1, #255	; 0xff
   18362:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18366:	d1f1      	bne.n	1834c <d_print_comp_inner+0x1368>
   18368:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1836c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18370:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18374:	4620      	mov	r0, r4
   18376:	4798      	blx	r3
   18378:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1837c:	3301      	adds	r3, #1
   1837e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18382:	2101      	movs	r1, #1
   18384:	2300      	movs	r3, #0
   18386:	e7e3      	b.n	18350 <d_print_comp_inner+0x136c>
   18388:	4ead      	ldr	r6, [pc, #692]	; (18640 <d_print_comp_inner+0x165c>)
   1838a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1838e:	f106 0a1d 	add.w	sl, r6, #29
   18392:	f04f 0900 	mov.w	r9, #0
   18396:	e009      	b.n	183ac <d_print_comp_inner+0x13c8>
   18398:	460b      	mov	r3, r1
   1839a:	3101      	adds	r1, #1
   1839c:	45b2      	cmp	sl, r6
   1839e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   183a2:	54e7      	strb	r7, [r4, r3]
   183a4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   183a8:	f000 81fc 	beq.w	187a4 <d_print_comp_inner+0x17c0>
   183ac:	29ff      	cmp	r1, #255	; 0xff
   183ae:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   183b2:	d1f1      	bne.n	18398 <d_print_comp_inner+0x13b4>
   183b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   183b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   183bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   183c0:	4620      	mov	r0, r4
   183c2:	4798      	blx	r3
   183c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183c8:	3301      	adds	r3, #1
   183ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   183ce:	2101      	movs	r1, #1
   183d0:	2300      	movs	r3, #0
   183d2:	e7e3      	b.n	1839c <d_print_comp_inner+0x13b8>
   183d4:	2301      	movs	r3, #1
   183d6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   183da:	f7fe bed1 	b.w	17180 <d_print_comp_inner+0x19c>
   183de:	3701      	adds	r7, #1
   183e0:	454f      	cmp	r7, r9
   183e2:	f47f ae46 	bne.w	18072 <d_print_comp_inner+0x108e>
   183e6:	f7fe becb 	b.w	17180 <d_print_comp_inner+0x19c>
   183ea:	6876      	ldr	r6, [r6, #4]
   183ec:	2e00      	cmp	r6, #0
   183ee:	f001 806e 	beq.w	194ce <d_print_comp_inner+0x24ea>
   183f2:	2f04      	cmp	r7, #4
   183f4:	f103 0310 	add.w	r3, r3, #16
   183f8:	f47f a9bd 	bne.w	17776 <d_print_comp_inner+0x792>
   183fc:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   18400:	2301      	movs	r3, #1
   18402:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18406:	f7fe bebb 	b.w	17180 <d_print_comp_inner+0x19c>
   1840a:	4e8e      	ldr	r6, [pc, #568]	; (18644 <d_print_comp_inner+0x1660>)
   1840c:	686a      	ldr	r2, [r5, #4]
   1840e:	4641      	mov	r1, r8
   18410:	4620      	mov	r0, r4
   18412:	f001 fb8b 	bl	19b2c <d_print_comp>
   18416:	f106 0a04 	add.w	sl, r6, #4
   1841a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1841e:	f04f 0900 	mov.w	r9, #0
   18422:	e008      	b.n	18436 <d_print_comp_inner+0x1452>
   18424:	460b      	mov	r3, r1
   18426:	3101      	adds	r1, #1
   18428:	45b2      	cmp	sl, r6
   1842a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1842e:	54e7      	strb	r7, [r4, r3]
   18430:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18434:	d013      	beq.n	1845e <d_print_comp_inner+0x147a>
   18436:	29ff      	cmp	r1, #255	; 0xff
   18438:	f816 7b01 	ldrb.w	r7, [r6], #1
   1843c:	d1f2      	bne.n	18424 <d_print_comp_inner+0x1440>
   1843e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18442:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18446:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1844a:	4620      	mov	r0, r4
   1844c:	4798      	blx	r3
   1844e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18452:	3301      	adds	r3, #1
   18454:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18458:	2101      	movs	r1, #1
   1845a:	2300      	movs	r3, #0
   1845c:	e7e4      	b.n	18428 <d_print_comp_inner+0x1444>
   1845e:	68aa      	ldr	r2, [r5, #8]
   18460:	4641      	mov	r1, r8
   18462:	4620      	mov	r0, r4
   18464:	f001 fb62 	bl	19b2c <d_print_comp>
   18468:	f7fe be8a 	b.w	17180 <d_print_comp_inner+0x19c>
   1846c:	686a      	ldr	r2, [r5, #4]
   1846e:	4641      	mov	r1, r8
   18470:	4620      	mov	r0, r4
   18472:	f001 fb5b 	bl	19b2c <d_print_comp>
   18476:	f7fe be83 	b.w	17180 <d_print_comp_inner+0x19c>
   1847a:	686a      	ldr	r2, [r5, #4]
   1847c:	4641      	mov	r1, r8
   1847e:	4620      	mov	r0, r4
   18480:	f001 fb54 	bl	19b2c <d_print_comp>
   18484:	f7fe be7c 	b.w	17180 <d_print_comp_inner+0x19c>
   18488:	686a      	ldr	r2, [r5, #4]
   1848a:	4641      	mov	r1, r8
   1848c:	4620      	mov	r0, r4
   1848e:	f001 fb4d 	bl	19b2c <d_print_comp>
   18492:	f7fe be75 	b.w	17180 <d_print_comp_inner+0x19c>
   18496:	686a      	ldr	r2, [r5, #4]
   18498:	4641      	mov	r1, r8
   1849a:	4620      	mov	r0, r4
   1849c:	f001 fb46 	bl	19b2c <d_print_comp>
   184a0:	f7fe be6e 	b.w	17180 <d_print_comp_inner+0x19c>
   184a4:	686a      	ldr	r2, [r5, #4]
   184a6:	4641      	mov	r1, r8
   184a8:	4620      	mov	r0, r4
   184aa:	f001 fb3f 	bl	19b2c <d_print_comp>
   184ae:	f7fe be67 	b.w	17180 <d_print_comp_inner+0x19c>
   184b2:	686a      	ldr	r2, [r5, #4]
   184b4:	4641      	mov	r1, r8
   184b6:	4620      	mov	r0, r4
   184b8:	f001 fb38 	bl	19b2c <d_print_comp>
   184bc:	f7fe be60 	b.w	17180 <d_print_comp_inner+0x19c>
   184c0:	686a      	ldr	r2, [r5, #4]
   184c2:	4641      	mov	r1, r8
   184c4:	4620      	mov	r0, r4
   184c6:	f001 fb31 	bl	19b2c <d_print_comp>
   184ca:	f7fe be59 	b.w	17180 <d_print_comp_inner+0x19c>
   184ce:	686a      	ldr	r2, [r5, #4]
   184d0:	4641      	mov	r1, r8
   184d2:	4620      	mov	r0, r4
   184d4:	f001 fb2a 	bl	19b2c <d_print_comp>
   184d8:	f7fe be52 	b.w	17180 <d_print_comp_inner+0x19c>
   184dc:	686a      	ldr	r2, [r5, #4]
   184de:	4641      	mov	r1, r8
   184e0:	4620      	mov	r0, r4
   184e2:	f001 fb23 	bl	19b2c <d_print_comp>
   184e6:	f7fe be4b 	b.w	17180 <d_print_comp_inner+0x19c>
   184ea:	4641      	mov	r1, r8
   184ec:	68aa      	ldr	r2, [r5, #8]
   184ee:	4620      	mov	r0, r4
   184f0:	f001 fb1c 	bl	19b2c <d_print_comp>
   184f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184f8:	29ff      	cmp	r1, #255	; 0xff
   184fa:	f000 8560 	beq.w	18fbe <d_print_comp_inner+0x1fda>
   184fe:	1c4a      	adds	r2, r1, #1
   18500:	235d      	movs	r3, #93	; 0x5d
   18502:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18506:	5463      	strb	r3, [r4, r1]
   18508:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1850c:	f7fe be38 	b.w	17180 <d_print_comp_inner+0x19c>
   18510:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18514:	4e4c      	ldr	r6, [pc, #304]	; (18648 <d_print_comp_inner+0x1664>)
   18516:	3301      	adds	r3, #1
   18518:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1851c:	4641      	mov	r1, r8
   1851e:	686a      	ldr	r2, [r5, #4]
   18520:	4620      	mov	r0, r4
   18522:	f001 fb03 	bl	19b2c <d_print_comp>
   18526:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1852a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1852e:	3b01      	subs	r3, #1
   18530:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18534:	f106 0902 	add.w	r9, r6, #2
   18538:	f04f 0800 	mov.w	r8, #0
   1853c:	e008      	b.n	18550 <d_print_comp_inner+0x156c>
   1853e:	460b      	mov	r3, r1
   18540:	3101      	adds	r1, #1
   18542:	454e      	cmp	r6, r9
   18544:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18548:	54e7      	strb	r7, [r4, r3]
   1854a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1854e:	d013      	beq.n	18578 <d_print_comp_inner+0x1594>
   18550:	29ff      	cmp	r1, #255	; 0xff
   18552:	f816 7b01 	ldrb.w	r7, [r6], #1
   18556:	d1f2      	bne.n	1853e <d_print_comp_inner+0x155a>
   18558:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1855c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18560:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18564:	4620      	mov	r0, r4
   18566:	4798      	blx	r3
   18568:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1856c:	3301      	adds	r3, #1
   1856e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18572:	2101      	movs	r1, #1
   18574:	2300      	movs	r3, #0
   18576:	e7e4      	b.n	18542 <d_print_comp_inner+0x155e>
   18578:	68aa      	ldr	r2, [r5, #8]
   1857a:	4934      	ldr	r1, [pc, #208]	; (1864c <d_print_comp_inner+0x1668>)
   1857c:	3201      	adds	r2, #1
   1857e:	a804      	add	r0, sp, #16
   18580:	f006 fbcc 	bl	1ed1c <sprintf>
   18584:	a804      	add	r0, sp, #16
   18586:	f006 fd7b 	bl	1f080 <strlen>
   1858a:	b318      	cbz	r0, 185d4 <d_print_comp_inner+0x15f0>
   1858c:	ad04      	add	r5, sp, #16
   1858e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18592:	182f      	adds	r7, r5, r0
   18594:	f04f 0800 	mov.w	r8, #0
   18598:	e008      	b.n	185ac <d_print_comp_inner+0x15c8>
   1859a:	460b      	mov	r3, r1
   1859c:	3101      	adds	r1, #1
   1859e:	42af      	cmp	r7, r5
   185a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   185a4:	54e6      	strb	r6, [r4, r3]
   185a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   185aa:	d015      	beq.n	185d8 <d_print_comp_inner+0x15f4>
   185ac:	29ff      	cmp	r1, #255	; 0xff
   185ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   185b2:	d1f2      	bne.n	1859a <d_print_comp_inner+0x15b6>
   185b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   185bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   185c0:	4620      	mov	r0, r4
   185c2:	4798      	blx	r3
   185c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   185c8:	3301      	adds	r3, #1
   185ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   185ce:	2101      	movs	r1, #1
   185d0:	2300      	movs	r3, #0
   185d2:	e7e4      	b.n	1859e <d_print_comp_inner+0x15ba>
   185d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   185d8:	29ff      	cmp	r1, #255	; 0xff
   185da:	f000 8560 	beq.w	1909e <d_print_comp_inner+0x20ba>
   185de:	1c4a      	adds	r2, r1, #1
   185e0:	237d      	movs	r3, #125	; 0x7d
   185e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   185e6:	5463      	strb	r3, [r4, r1]
   185e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   185ec:	f7fe bdc8 	b.w	17180 <d_print_comp_inner+0x19c>
   185f0:	686a      	ldr	r2, [r5, #4]
   185f2:	4641      	mov	r1, r8
   185f4:	4620      	mov	r0, r4
   185f6:	f001 fa99 	bl	19b2c <d_print_comp>
   185fa:	f7fe bdc1 	b.w	17180 <d_print_comp_inner+0x19c>
   185fe:	4641      	mov	r1, r8
   18600:	68aa      	ldr	r2, [r5, #8]
   18602:	4620      	mov	r0, r4
   18604:	f001 fa92 	bl	19b2c <d_print_comp>
   18608:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1860c:	29ff      	cmp	r1, #255	; 0xff
   1860e:	f000 850b 	beq.w	19028 <d_print_comp_inner+0x2044>
   18612:	1c4a      	adds	r2, r1, #1
   18614:	235d      	movs	r3, #93	; 0x5d
   18616:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1861a:	5463      	strb	r3, [r4, r1]
   1861c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18620:	f7fe bdae 	b.w	17180 <d_print_comp_inner+0x19c>
   18624:	686a      	ldr	r2, [r5, #4]
   18626:	4641      	mov	r1, r8
   18628:	4620      	mov	r0, r4
   1862a:	f001 fa7f 	bl	19b2c <d_print_comp>
   1862e:	f7fe bda7 	b.w	17180 <d_print_comp_inner+0x19c>
   18632:	bf00      	nop
   18634:	000245ac 	.word	0x000245ac
   18638:	000247a4 	.word	0x000247a4
   1863c:	00024833 	.word	0x00024833
   18640:	000247f3 	.word	0x000247f3
   18644:	00024648 	.word	0x00024648
   18648:	00024840 	.word	0x00024840
   1864c:	00024598 	.word	0x00024598
   18650:	f8da 5004 	ldr.w	r5, [sl, #4]
   18654:	782b      	ldrb	r3, [r5, #0]
   18656:	3b61      	subs	r3, #97	; 0x61
   18658:	2b19      	cmp	r3, #25
   1865a:	d809      	bhi.n	18670 <d_print_comp_inner+0x168c>
   1865c:	29ff      	cmp	r1, #255	; 0xff
   1865e:	f000 8793 	beq.w	19588 <d_print_comp_inner+0x25a4>
   18662:	2320      	movs	r3, #32
   18664:	1c4a      	adds	r2, r1, #1
   18666:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1866a:	5463      	strb	r3, [r4, r1]
   1866c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18670:	19eb      	adds	r3, r5, r7
   18672:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18676:	2b20      	cmp	r3, #32
   18678:	bf08      	it	eq
   1867a:	f107 37ff 	addeq.w	r7, r7, #4294967295
   1867e:	2f00      	cmp	r7, #0
   18680:	f43e ad7e 	beq.w	17180 <d_print_comp_inner+0x19c>
   18684:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18688:	442f      	add	r7, r5
   1868a:	f04f 0800 	mov.w	r8, #0
   1868e:	e009      	b.n	186a4 <d_print_comp_inner+0x16c0>
   18690:	460b      	mov	r3, r1
   18692:	3101      	adds	r1, #1
   18694:	42af      	cmp	r7, r5
   18696:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1869a:	54e6      	strb	r6, [r4, r3]
   1869c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   186a0:	f43e ad6e 	beq.w	17180 <d_print_comp_inner+0x19c>
   186a4:	29ff      	cmp	r1, #255	; 0xff
   186a6:	f815 6b01 	ldrb.w	r6, [r5], #1
   186aa:	d1f1      	bne.n	18690 <d_print_comp_inner+0x16ac>
   186ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   186b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   186b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   186b8:	4620      	mov	r0, r4
   186ba:	4798      	blx	r3
   186bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   186c0:	3301      	adds	r3, #1
   186c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   186c6:	2101      	movs	r1, #1
   186c8:	2300      	movs	r3, #0
   186ca:	e7e3      	b.n	18694 <d_print_comp_inner+0x16b0>
   186cc:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   186d0:	b13a      	cbz	r2, 186e2 <d_print_comp_inner+0x16fe>
   186d2:	ab14      	add	r3, sp, #80	; 0x50
   186d4:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   186d8:	f843 1d48 	str.w	r1, [r3, #-72]!
   186dc:	9203      	str	r2, [sp, #12]
   186de:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   186e2:	686b      	ldr	r3, [r5, #4]
   186e4:	781a      	ldrb	r2, [r3, #0]
   186e6:	2a04      	cmp	r2, #4
   186e8:	f000 830e 	beq.w	18d08 <d_print_comp_inner+0x1d24>
   186ec:	a804      	add	r0, sp, #16
   186ee:	461a      	mov	r2, r3
   186f0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   186f4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   186f8:	4641      	mov	r1, r8
   186fa:	4620      	mov	r0, r4
   186fc:	9304      	str	r3, [sp, #16]
   186fe:	9505      	str	r5, [sp, #20]
   18700:	f7fe fc70 	bl	16fe4 <d_print_comp_inner>
   18704:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18708:	9a05      	ldr	r2, [sp, #20]
   1870a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1870e:	2b00      	cmp	r3, #0
   18710:	f43e ad36 	beq.w	17180 <d_print_comp_inner+0x19c>
   18714:	9b02      	ldr	r3, [sp, #8]
   18716:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1871a:	f7fe bd31 	b.w	17180 <d_print_comp_inner+0x19c>
   1871e:	68aa      	ldr	r2, [r5, #8]
   18720:	4641      	mov	r1, r8
   18722:	4620      	mov	r0, r4
   18724:	f001 fa02 	bl	19b2c <d_print_comp>
   18728:	f7fe bd2a 	b.w	17180 <d_print_comp_inner+0x19c>
   1872c:	686a      	ldr	r2, [r5, #4]
   1872e:	49d8      	ldr	r1, [pc, #864]	; (18a90 <d_print_comp_inner+0x1aac>)
   18730:	3201      	adds	r2, #1
   18732:	a804      	add	r0, sp, #16
   18734:	f006 faf2 	bl	1ed1c <sprintf>
   18738:	a804      	add	r0, sp, #16
   1873a:	f006 fca1 	bl	1f080 <strlen>
   1873e:	b318      	cbz	r0, 18788 <d_print_comp_inner+0x17a4>
   18740:	ad04      	add	r5, sp, #16
   18742:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18746:	182f      	adds	r7, r5, r0
   18748:	f04f 0800 	mov.w	r8, #0
   1874c:	e008      	b.n	18760 <d_print_comp_inner+0x177c>
   1874e:	460b      	mov	r3, r1
   18750:	3101      	adds	r1, #1
   18752:	42bd      	cmp	r5, r7
   18754:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18758:	54e6      	strb	r6, [r4, r3]
   1875a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1875e:	d015      	beq.n	1878c <d_print_comp_inner+0x17a8>
   18760:	29ff      	cmp	r1, #255	; 0xff
   18762:	f815 6b01 	ldrb.w	r6, [r5], #1
   18766:	d1f2      	bne.n	1874e <d_print_comp_inner+0x176a>
   18768:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1876c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18770:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18774:	4620      	mov	r0, r4
   18776:	4798      	blx	r3
   18778:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1877c:	3301      	adds	r3, #1
   1877e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18782:	2101      	movs	r1, #1
   18784:	2300      	movs	r3, #0
   18786:	e7e4      	b.n	18752 <d_print_comp_inner+0x176e>
   18788:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1878c:	29ff      	cmp	r1, #255	; 0xff
   1878e:	f000 8404 	beq.w	18f9a <d_print_comp_inner+0x1fb6>
   18792:	1c4a      	adds	r2, r1, #1
   18794:	237d      	movs	r3, #125	; 0x7d
   18796:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1879a:	5463      	strb	r3, [r4, r1]
   1879c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   187a0:	f7fe bcee 	b.w	17180 <d_print_comp_inner+0x19c>
   187a4:	686a      	ldr	r2, [r5, #4]
   187a6:	4641      	mov	r1, r8
   187a8:	4620      	mov	r0, r4
   187aa:	f001 f9bf 	bl	19b2c <d_print_comp>
   187ae:	f7fe bce7 	b.w	17180 <d_print_comp_inner+0x19c>
   187b2:	686a      	ldr	r2, [r5, #4]
   187b4:	4641      	mov	r1, r8
   187b6:	4620      	mov	r0, r4
   187b8:	f001 f9b8 	bl	19b2c <d_print_comp>
   187bc:	f7fe bce0 	b.w	17180 <d_print_comp_inner+0x19c>
   187c0:	686a      	ldr	r2, [r5, #4]
   187c2:	4641      	mov	r1, r8
   187c4:	4620      	mov	r0, r4
   187c6:	f001 f9b1 	bl	19b2c <d_print_comp>
   187ca:	f7fe bcd9 	b.w	17180 <d_print_comp_inner+0x19c>
   187ce:	4eb1      	ldr	r6, [pc, #708]	; (18a94 <d_print_comp_inner+0x1ab0>)
   187d0:	68aa      	ldr	r2, [r5, #8]
   187d2:	4641      	mov	r1, r8
   187d4:	4620      	mov	r0, r4
   187d6:	f001 f9a9 	bl	19b2c <d_print_comp>
   187da:	f106 0a05 	add.w	sl, r6, #5
   187de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   187e2:	f04f 0900 	mov.w	r9, #0
   187e6:	e008      	b.n	187fa <d_print_comp_inner+0x1816>
   187e8:	460b      	mov	r3, r1
   187ea:	3101      	adds	r1, #1
   187ec:	4556      	cmp	r6, sl
   187ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187f2:	54e7      	strb	r7, [r4, r3]
   187f4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   187f8:	d013      	beq.n	18822 <d_print_comp_inner+0x183e>
   187fa:	29ff      	cmp	r1, #255	; 0xff
   187fc:	f816 7b01 	ldrb.w	r7, [r6], #1
   18800:	d1f2      	bne.n	187e8 <d_print_comp_inner+0x1804>
   18802:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18806:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1880a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1880e:	4620      	mov	r0, r4
   18810:	4798      	blx	r3
   18812:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18816:	3301      	adds	r3, #1
   18818:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1881c:	2101      	movs	r1, #1
   1881e:	2300      	movs	r3, #0
   18820:	e7e4      	b.n	187ec <d_print_comp_inner+0x1808>
   18822:	686a      	ldr	r2, [r5, #4]
   18824:	4641      	mov	r1, r8
   18826:	4620      	mov	r0, r4
   18828:	f001 f980 	bl	19b2c <d_print_comp>
   1882c:	f7fe bca8 	b.w	17180 <d_print_comp_inner+0x19c>
   18830:	686a      	ldr	r2, [r5, #4]
   18832:	4641      	mov	r1, r8
   18834:	4620      	mov	r0, r4
   18836:	f001 f979 	bl	19b2c <d_print_comp>
   1883a:	f7fe bca1 	b.w	17180 <d_print_comp_inner+0x19c>
   1883e:	686a      	ldr	r2, [r5, #4]
   18840:	4641      	mov	r1, r8
   18842:	4620      	mov	r0, r4
   18844:	f001 f972 	bl	19b2c <d_print_comp>
   18848:	f7fe bc9a 	b.w	17180 <d_print_comp_inner+0x19c>
   1884c:	686a      	ldr	r2, [r5, #4]
   1884e:	4641      	mov	r1, r8
   18850:	4620      	mov	r0, r4
   18852:	f001 f96b 	bl	19b2c <d_print_comp>
   18856:	f7fe bc93 	b.w	17180 <d_print_comp_inner+0x19c>
   1885a:	4641      	mov	r1, r8
   1885c:	686a      	ldr	r2, [r5, #4]
   1885e:	4620      	mov	r0, r4
   18860:	f001 f964 	bl	19b2c <d_print_comp>
   18864:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18868:	29ff      	cmp	r1, #255	; 0xff
   1886a:	f000 842a 	beq.w	190c2 <d_print_comp_inner+0x20de>
   1886e:	1c4a      	adds	r2, r1, #1
   18870:	2329      	movs	r3, #41	; 0x29
   18872:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18876:	5463      	strb	r3, [r4, r1]
   18878:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1887c:	f7fe bc80 	b.w	17180 <d_print_comp_inner+0x19c>
   18880:	686a      	ldr	r2, [r5, #4]
   18882:	4641      	mov	r1, r8
   18884:	4620      	mov	r0, r4
   18886:	f001 f951 	bl	19b2c <d_print_comp>
   1888a:	f7fe bc79 	b.w	17180 <d_print_comp_inner+0x19c>
   1888e:	2f04      	cmp	r7, #4
   18890:	f1a6 0410 	sub.w	r4, r6, #16
   18894:	f106 0e10 	add.w	lr, r6, #16
   18898:	f000 8722 	beq.w	196e0 <d_print_comp_inner+0x26fc>
   1889c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   188a0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   188a4:	2300      	movs	r3, #0
   188a6:	f84e 4c10 	str.w	r4, [lr, #-16]
   188aa:	e906 1008 	stmdb	r6, {r3, ip}
   188ae:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   188b2:	f846 5c0c 	str.w	r5, [r6, #-12]
   188b6:	686d      	ldr	r5, [r5, #4]
   188b8:	3701      	adds	r7, #1
   188ba:	4676      	mov	r6, lr
   188bc:	f7fe bf84 	b.w	177c8 <d_print_comp_inner+0x7e4>
   188c0:	68aa      	ldr	r2, [r5, #8]
   188c2:	9300      	str	r3, [sp, #0]
   188c4:	460e      	mov	r6, r1
   188c6:	4620      	mov	r0, r4
   188c8:	4641      	mov	r1, r8
   188ca:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   188ce:	f001 f92d 	bl	19b2c <d_print_comp>
   188d2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   188d6:	9b00      	ldr	r3, [sp, #0]
   188d8:	4295      	cmp	r5, r2
   188da:	f47e ac51 	bne.w	17180 <d_print_comp_inner+0x19c>
   188de:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   188e2:	42b2      	cmp	r2, r6
   188e4:	f47e ac4c 	bne.w	17180 <d_print_comp_inner+0x19c>
   188e8:	3b01      	subs	r3, #1
   188ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   188ee:	f7fe bc47 	b.w	17180 <d_print_comp_inner+0x19c>
   188f2:	462a      	mov	r2, r5
   188f4:	4641      	mov	r1, r8
   188f6:	4620      	mov	r0, r4
   188f8:	f001 f928 	bl	19b4c <d_print_mod>
   188fc:	f7fe bc70 	b.w	171e0 <d_print_comp_inner+0x1fc>
   18900:	686b      	ldr	r3, [r5, #4]
   18902:	9300      	str	r3, [sp, #0]
   18904:	f1b9 0f00 	cmp.w	r9, #0
   18908:	f47f abae 	bne.w	18068 <d_print_comp_inner+0x1084>
   1890c:	f7fe bc38 	b.w	17180 <d_print_comp_inner+0x19c>
   18910:	463a      	mov	r2, r7
   18912:	a804      	add	r0, sp, #16
   18914:	495e      	ldr	r1, [pc, #376]	; (18a90 <d_print_comp_inner+0x1aac>)
   18916:	f006 fa01 	bl	1ed1c <sprintf>
   1891a:	a804      	add	r0, sp, #16
   1891c:	f006 fbb0 	bl	1f080 <strlen>
   18920:	b318      	cbz	r0, 1896a <d_print_comp_inner+0x1986>
   18922:	ad04      	add	r5, sp, #16
   18924:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18928:	182f      	adds	r7, r5, r0
   1892a:	f04f 0800 	mov.w	r8, #0
   1892e:	e008      	b.n	18942 <d_print_comp_inner+0x195e>
   18930:	460b      	mov	r3, r1
   18932:	3101      	adds	r1, #1
   18934:	42af      	cmp	r7, r5
   18936:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1893a:	54e6      	strb	r6, [r4, r3]
   1893c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18940:	d015      	beq.n	1896e <d_print_comp_inner+0x198a>
   18942:	29ff      	cmp	r1, #255	; 0xff
   18944:	f815 6b01 	ldrb.w	r6, [r5], #1
   18948:	d1f2      	bne.n	18930 <d_print_comp_inner+0x194c>
   1894a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1894e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18952:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18956:	4620      	mov	r0, r4
   18958:	4798      	blx	r3
   1895a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1895e:	3301      	adds	r3, #1
   18960:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18964:	2101      	movs	r1, #1
   18966:	2300      	movs	r3, #0
   18968:	e7e4      	b.n	18934 <d_print_comp_inner+0x1950>
   1896a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1896e:	29ff      	cmp	r1, #255	; 0xff
   18970:	f000 84dd 	beq.w	1932e <d_print_comp_inner+0x234a>
   18974:	1c4a      	adds	r2, r1, #1
   18976:	237d      	movs	r3, #125	; 0x7d
   18978:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1897c:	5463      	strb	r3, [r4, r1]
   1897e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18982:	f7fe bbfd 	b.w	17180 <d_print_comp_inner+0x19c>
   18986:	2700      	movs	r7, #0
   18988:	f7ff ba1f 	b.w	17dca <d_print_comp_inner+0xde6>
   1898c:	68df      	ldr	r7, [r3, #12]
   1898e:	689d      	ldr	r5, [r3, #8]
   18990:	2f00      	cmp	r7, #0
   18992:	f43e abf5 	beq.w	17180 <d_print_comp_inner+0x19c>
   18996:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1899a:	442f      	add	r7, r5
   1899c:	f04f 0800 	mov.w	r8, #0
   189a0:	e009      	b.n	189b6 <d_print_comp_inner+0x19d2>
   189a2:	460b      	mov	r3, r1
   189a4:	3101      	adds	r1, #1
   189a6:	42bd      	cmp	r5, r7
   189a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   189ac:	54e6      	strb	r6, [r4, r3]
   189ae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   189b2:	f43e abe5 	beq.w	17180 <d_print_comp_inner+0x19c>
   189b6:	29ff      	cmp	r1, #255	; 0xff
   189b8:	f815 6b01 	ldrb.w	r6, [r5], #1
   189bc:	d1f1      	bne.n	189a2 <d_print_comp_inner+0x19be>
   189be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   189c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189ca:	4620      	mov	r0, r4
   189cc:	4798      	blx	r3
   189ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189d2:	3301      	adds	r3, #1
   189d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189d8:	2101      	movs	r1, #1
   189da:	2300      	movs	r3, #0
   189dc:	e7e3      	b.n	189a6 <d_print_comp_inner+0x19c2>
   189de:	686e      	ldr	r6, [r5, #4]
   189e0:	68af      	ldr	r7, [r5, #8]
   189e2:	4437      	add	r7, r6
   189e4:	42be      	cmp	r6, r7
   189e6:	f4be abcb 	bcs.w	17180 <d_print_comp_inner+0x19c>
   189ea:	f04f 0800 	mov.w	r8, #0
   189ee:	e00d      	b.n	18a0c <d_print_comp_inner+0x1a28>
   189f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189f4:	29ff      	cmp	r1, #255	; 0xff
   189f6:	d036      	beq.n	18a66 <d_print_comp_inner+0x1a82>
   189f8:	1c4b      	adds	r3, r1, #1
   189fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   189fe:	5465      	strb	r5, [r4, r1]
   18a00:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18a04:	3601      	adds	r6, #1
   18a06:	42b7      	cmp	r7, r6
   18a08:	f67e abba 	bls.w	17180 <d_print_comp_inner+0x19c>
   18a0c:	1bbb      	subs	r3, r7, r6
   18a0e:	2b03      	cmp	r3, #3
   18a10:	7835      	ldrb	r5, [r6, #0]
   18a12:	dded      	ble.n	189f0 <d_print_comp_inner+0x1a0c>
   18a14:	2d5f      	cmp	r5, #95	; 0x5f
   18a16:	d1eb      	bne.n	189f0 <d_print_comp_inner+0x1a0c>
   18a18:	7873      	ldrb	r3, [r6, #1]
   18a1a:	2b5f      	cmp	r3, #95	; 0x5f
   18a1c:	d1e8      	bne.n	189f0 <d_print_comp_inner+0x1a0c>
   18a1e:	78b3      	ldrb	r3, [r6, #2]
   18a20:	2b55      	cmp	r3, #85	; 0x55
   18a22:	d1e5      	bne.n	189f0 <d_print_comp_inner+0x1a0c>
   18a24:	1cf3      	adds	r3, r6, #3
   18a26:	429f      	cmp	r7, r3
   18a28:	d9e2      	bls.n	189f0 <d_print_comp_inner+0x1a0c>
   18a2a:	2000      	movs	r0, #0
   18a2c:	e006      	b.n	18a3c <d_print_comp_inner+0x1a58>
   18a2e:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   18a32:	429f      	cmp	r7, r3
   18a34:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   18a38:	f000 85c7 	beq.w	195ca <d_print_comp_inner+0x25e6>
   18a3c:	4699      	mov	r9, r3
   18a3e:	f813 5b01 	ldrb.w	r5, [r3], #1
   18a42:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   18a46:	b2d1      	uxtb	r1, r2
   18a48:	2909      	cmp	r1, #9
   18a4a:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   18a4e:	d9f0      	bls.n	18a32 <d_print_comp_inner+0x1a4e>
   18a50:	f1be 0f05 	cmp.w	lr, #5
   18a54:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   18a58:	d9e9      	bls.n	18a2e <d_print_comp_inner+0x1a4a>
   18a5a:	2a05      	cmp	r2, #5
   18a5c:	f200 8743 	bhi.w	198e6 <d_print_comp_inner+0x2902>
   18a60:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   18a64:	e7e5      	b.n	18a32 <d_print_comp_inner+0x1a4e>
   18a66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a6a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18a6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a72:	4620      	mov	r0, r4
   18a74:	4798      	blx	r3
   18a76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a7a:	3301      	adds	r3, #1
   18a7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a80:	2100      	movs	r1, #0
   18a82:	2301      	movs	r3, #1
   18a84:	e7b9      	b.n	189fa <d_print_comp_inner+0x1a16>
   18a86:	4d04      	ldr	r5, [pc, #16]	; (18a98 <d_print_comp_inner+0x1ab4>)
   18a88:	4698      	mov	r8, r3
   18a8a:	1daf      	adds	r7, r5, #6
   18a8c:	e010      	b.n	18ab0 <d_print_comp_inner+0x1acc>
   18a8e:	bf00      	nop
   18a90:	00024598 	.word	0x00024598
   18a94:	0002470c 	.word	0x0002470c
   18a98:	0002476c 	.word	0x0002476c
   18a9c:	460b      	mov	r3, r1
   18a9e:	3101      	adds	r1, #1
   18aa0:	42bd      	cmp	r5, r7
   18aa2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18aa6:	54e6      	strb	r6, [r4, r3]
   18aa8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18aac:	f43e ab68 	beq.w	17180 <d_print_comp_inner+0x19c>
   18ab0:	29ff      	cmp	r1, #255	; 0xff
   18ab2:	f815 6b01 	ldrb.w	r6, [r5], #1
   18ab6:	d1f1      	bne.n	18a9c <d_print_comp_inner+0x1ab8>
   18ab8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18abc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18ac0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ac4:	4620      	mov	r0, r4
   18ac6:	4798      	blx	r3
   18ac8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18acc:	3301      	adds	r3, #1
   18ace:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ad2:	2101      	movs	r1, #1
   18ad4:	2300      	movs	r3, #0
   18ad6:	e7e3      	b.n	18aa0 <d_print_comp_inner+0x1abc>
   18ad8:	782b      	ldrb	r3, [r5, #0]
   18ada:	2b2f      	cmp	r3, #47	; 0x2f
   18adc:	f47e ab6a 	bne.w	171b4 <d_print_comp_inner+0x1d0>
   18ae0:	4601      	mov	r1, r0
   18ae2:	460d      	mov	r5, r1
   18ae4:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18ae8:	f7fe bb66 	b.w	171b8 <d_print_comp_inner+0x1d4>
   18aec:	4dd7      	ldr	r5, [pc, #860]	; (18e4c <d_print_comp_inner+0x1e68>)
   18aee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18af2:	f105 0804 	add.w	r8, r5, #4
   18af6:	e009      	b.n	18b0c <d_print_comp_inner+0x1b28>
   18af8:	460b      	mov	r3, r1
   18afa:	3101      	adds	r1, #1
   18afc:	45a8      	cmp	r8, r5
   18afe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18b02:	54e6      	strb	r6, [r4, r3]
   18b04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18b08:	f43e ab3a 	beq.w	17180 <d_print_comp_inner+0x19c>
   18b0c:	29ff      	cmp	r1, #255	; 0xff
   18b0e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18b12:	d1f1      	bne.n	18af8 <d_print_comp_inner+0x1b14>
   18b14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b18:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18b1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b20:	4620      	mov	r0, r4
   18b22:	4798      	blx	r3
   18b24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b28:	3301      	adds	r3, #1
   18b2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b2e:	2101      	movs	r1, #1
   18b30:	2300      	movs	r3, #0
   18b32:	e7e3      	b.n	18afc <d_print_comp_inner+0x1b18>
   18b34:	4ec6      	ldr	r6, [pc, #792]	; (18e50 <d_print_comp_inner+0x1e6c>)
   18b36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18b3a:	f106 0905 	add.w	r9, r6, #5
   18b3e:	f04f 0800 	mov.w	r8, #0
   18b42:	e008      	b.n	18b56 <d_print_comp_inner+0x1b72>
   18b44:	460b      	mov	r3, r1
   18b46:	3101      	adds	r1, #1
   18b48:	45b1      	cmp	r9, r6
   18b4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18b4e:	54e7      	strb	r7, [r4, r3]
   18b50:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18b54:	d013      	beq.n	18b7e <d_print_comp_inner+0x1b9a>
   18b56:	29ff      	cmp	r1, #255	; 0xff
   18b58:	f816 7b01 	ldrb.w	r7, [r6], #1
   18b5c:	d1f2      	bne.n	18b44 <d_print_comp_inner+0x1b60>
   18b5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b62:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18b66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b6a:	4620      	mov	r0, r4
   18b6c:	4798      	blx	r3
   18b6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b72:	3301      	adds	r3, #1
   18b74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b78:	2101      	movs	r1, #1
   18b7a:	2300      	movs	r3, #0
   18b7c:	e7e4      	b.n	18b48 <d_print_comp_inner+0x1b64>
   18b7e:	686a      	ldr	r2, [r5, #4]
   18b80:	49b4      	ldr	r1, [pc, #720]	; (18e54 <d_print_comp_inner+0x1e70>)
   18b82:	3201      	adds	r2, #1
   18b84:	a804      	add	r0, sp, #16
   18b86:	f006 f8c9 	bl	1ed1c <sprintf>
   18b8a:	a804      	add	r0, sp, #16
   18b8c:	f006 fa78 	bl	1f080 <strlen>
   18b90:	2800      	cmp	r0, #0
   18b92:	f43e aaf5 	beq.w	17180 <d_print_comp_inner+0x19c>
   18b96:	ad04      	add	r5, sp, #16
   18b98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b9c:	182f      	adds	r7, r5, r0
   18b9e:	f04f 0800 	mov.w	r8, #0
   18ba2:	e009      	b.n	18bb8 <d_print_comp_inner+0x1bd4>
   18ba4:	460b      	mov	r3, r1
   18ba6:	3101      	adds	r1, #1
   18ba8:	42af      	cmp	r7, r5
   18baa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18bae:	54e6      	strb	r6, [r4, r3]
   18bb0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18bb4:	f43e aae4 	beq.w	17180 <d_print_comp_inner+0x19c>
   18bb8:	29ff      	cmp	r1, #255	; 0xff
   18bba:	f815 6b01 	ldrb.w	r6, [r5], #1
   18bbe:	d1f1      	bne.n	18ba4 <d_print_comp_inner+0x1bc0>
   18bc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bc4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18bc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bcc:	4620      	mov	r0, r4
   18bce:	4798      	blx	r3
   18bd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bd4:	3301      	adds	r3, #1
   18bd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bda:	2101      	movs	r1, #1
   18bdc:	2300      	movs	r3, #0
   18bde:	e7e3      	b.n	18ba8 <d_print_comp_inner+0x1bc4>
   18be0:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   18be4:	f105 0208 	add.w	r2, r5, #8
   18be8:	4641      	mov	r1, r8
   18bea:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   18bee:	f001 fc91 	bl	1a514 <d_print_function_type.isra.11>
   18bf2:	686a      	ldr	r2, [r5, #4]
   18bf4:	2a00      	cmp	r2, #0
   18bf6:	f43e aac3 	beq.w	17180 <d_print_comp_inner+0x19c>
   18bfa:	4641      	mov	r1, r8
   18bfc:	4620      	mov	r0, r4
   18bfe:	f000 ff95 	bl	19b2c <d_print_comp>
   18c02:	f7fe babd 	b.w	17180 <d_print_comp_inner+0x19c>
   18c06:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c0a:	f7ff b9a2 	b.w	17f52 <d_print_comp_inner+0xf6e>
   18c0e:	4e92      	ldr	r6, [pc, #584]	; (18e58 <d_print_comp_inner+0x1e74>)
   18c10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18c14:	f106 0a05 	add.w	sl, r6, #5
   18c18:	f04f 0900 	mov.w	r9, #0
   18c1c:	e009      	b.n	18c32 <d_print_comp_inner+0x1c4e>
   18c1e:	460b      	mov	r3, r1
   18c20:	3101      	adds	r1, #1
   18c22:	45b2      	cmp	sl, r6
   18c24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18c28:	54e7      	strb	r7, [r4, r3]
   18c2a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18c2e:	f43f a97a 	beq.w	17f26 <d_print_comp_inner+0xf42>
   18c32:	29ff      	cmp	r1, #255	; 0xff
   18c34:	f816 7b01 	ldrb.w	r7, [r6], #1
   18c38:	d1f1      	bne.n	18c1e <d_print_comp_inner+0x1c3a>
   18c3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18c42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c46:	4620      	mov	r0, r4
   18c48:	4798      	blx	r3
   18c4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c4e:	3301      	adds	r3, #1
   18c50:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c54:	2101      	movs	r1, #1
   18c56:	2300      	movs	r3, #0
   18c58:	e7e3      	b.n	18c22 <d_print_comp_inner+0x1c3e>
   18c5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18c5e:	497f      	ldr	r1, [pc, #508]	; (18e5c <d_print_comp_inner+0x1e78>)
   18c60:	681f      	ldr	r7, [r3, #0]
   18c62:	4638      	mov	r0, r7
   18c64:	f006 f890 	bl	1ed88 <strcmp>
   18c68:	f896 a000 	ldrb.w	sl, [r6]
   18c6c:	b918      	cbnz	r0, 18c76 <d_print_comp_inner+0x1c92>
   18c6e:	f1ba 0f03 	cmp.w	sl, #3
   18c72:	f000 851b 	beq.w	196ac <d_print_comp_inner+0x26c8>
   18c76:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   18c7a:	f000 85fd 	beq.w	19878 <d_print_comp_inner+0x2894>
   18c7e:	4978      	ldr	r1, [pc, #480]	; (18e60 <d_print_comp_inner+0x1e7c>)
   18c80:	4638      	mov	r0, r7
   18c82:	f006 f881 	bl	1ed88 <strcmp>
   18c86:	4605      	mov	r5, r0
   18c88:	2800      	cmp	r0, #0
   18c8a:	f000 8135 	beq.w	18ef8 <d_print_comp_inner+0x1f14>
   18c8e:	4975      	ldr	r1, [pc, #468]	; (18e64 <d_print_comp_inner+0x1e80>)
   18c90:	4638      	mov	r0, r7
   18c92:	f006 f879 	bl	1ed88 <strcmp>
   18c96:	2800      	cmp	r0, #0
   18c98:	f000 82b6 	beq.w	19208 <d_print_comp_inner+0x2224>
   18c9c:	464a      	mov	r2, r9
   18c9e:	4641      	mov	r1, r8
   18ca0:	4620      	mov	r0, r4
   18ca2:	f001 fd2b 	bl	1a6fc <d_print_expr_op>
   18ca6:	2f00      	cmp	r7, #0
   18ca8:	f43f a837 	beq.w	17d1a <d_print_comp_inner+0xd36>
   18cac:	496e      	ldr	r1, [pc, #440]	; (18e68 <d_print_comp_inner+0x1e84>)
   18cae:	4638      	mov	r0, r7
   18cb0:	f006 f86a 	bl	1ed88 <strcmp>
   18cb4:	2800      	cmp	r0, #0
   18cb6:	f000 8384 	beq.w	193c2 <d_print_comp_inner+0x23de>
   18cba:	4638      	mov	r0, r7
   18cbc:	496b      	ldr	r1, [pc, #428]	; (18e6c <d_print_comp_inner+0x1e88>)
   18cbe:	f006 f863 	bl	1ed88 <strcmp>
   18cc2:	4605      	mov	r5, r0
   18cc4:	2800      	cmp	r0, #0
   18cc6:	f47f a828 	bne.w	17d1a <d_print_comp_inner+0xd36>
   18cca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18cce:	2bff      	cmp	r3, #255	; 0xff
   18cd0:	f000 84db 	beq.w	1968a <d_print_comp_inner+0x26a6>
   18cd4:	1c58      	adds	r0, r3, #1
   18cd6:	2528      	movs	r5, #40	; 0x28
   18cd8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   18cdc:	4641      	mov	r1, r8
   18cde:	54e5      	strb	r5, [r4, r3]
   18ce0:	4632      	mov	r2, r6
   18ce2:	4620      	mov	r0, r4
   18ce4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18ce8:	f000 ff20 	bl	19b2c <d_print_comp>
   18cec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18cf0:	29ff      	cmp	r1, #255	; 0xff
   18cf2:	f000 846d 	beq.w	195d0 <d_print_comp_inner+0x25ec>
   18cf6:	2329      	movs	r3, #41	; 0x29
   18cf8:	1c4a      	adds	r2, r1, #1
   18cfa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18cfe:	5463      	strb	r3, [r4, r1]
   18d00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d04:	f7fe ba3c 	b.w	17180 <d_print_comp_inner+0x19c>
   18d08:	f10d 0910 	add.w	r9, sp, #16
   18d0c:	685a      	ldr	r2, [r3, #4]
   18d0e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   18d12:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18d16:	4641      	mov	r1, r8
   18d18:	4620      	mov	r0, r4
   18d1a:	9204      	str	r2, [sp, #16]
   18d1c:	9305      	str	r3, [sp, #20]
   18d1e:	f7fe f961 	bl	16fe4 <d_print_comp_inner>
   18d22:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18d26:	9a05      	ldr	r2, [sp, #20]
   18d28:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18d2c:	b113      	cbz	r3, 18d34 <d_print_comp_inner+0x1d50>
   18d2e:	9b02      	ldr	r3, [sp, #8]
   18d30:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18d34:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18d38:	2b3c      	cmp	r3, #60	; 0x3c
   18d3a:	f000 83d9 	beq.w	194f0 <d_print_comp_inner+0x250c>
   18d3e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d42:	29ff      	cmp	r1, #255	; 0xff
   18d44:	f000 8467 	beq.w	19616 <d_print_comp_inner+0x2632>
   18d48:	1c4a      	adds	r2, r1, #1
   18d4a:	233c      	movs	r3, #60	; 0x3c
   18d4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d50:	5463      	strb	r3, [r4, r1]
   18d52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d56:	686b      	ldr	r3, [r5, #4]
   18d58:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18d5c:	689b      	ldr	r3, [r3, #8]
   18d5e:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18d62:	461a      	mov	r2, r3
   18d64:	4641      	mov	r1, r8
   18d66:	4620      	mov	r0, r4
   18d68:	9304      	str	r3, [sp, #16]
   18d6a:	9505      	str	r5, [sp, #20]
   18d6c:	f7fe f93a 	bl	16fe4 <d_print_comp_inner>
   18d70:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18d74:	9a05      	ldr	r2, [sp, #20]
   18d76:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18d7a:	2b3e      	cmp	r3, #62	; 0x3e
   18d7c:	f000 83ab 	beq.w	194d6 <d_print_comp_inner+0x24f2>
   18d80:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d84:	29ff      	cmp	r1, #255	; 0xff
   18d86:	f000 849a 	beq.w	196be <d_print_comp_inner+0x26da>
   18d8a:	233e      	movs	r3, #62	; 0x3e
   18d8c:	1c4a      	adds	r2, r1, #1
   18d8e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d92:	5463      	strb	r3, [r4, r1]
   18d94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d98:	f7fe b9f2 	b.w	17180 <d_print_comp_inner+0x19c>
   18d9c:	6852      	ldr	r2, [r2, #4]
   18d9e:	7c16      	ldrb	r6, [r2, #16]
   18da0:	2e00      	cmp	r6, #0
   18da2:	f43f a9e7 	beq.w	18174 <d_print_comp_inner+0x1190>
   18da6:	2e06      	cmp	r6, #6
   18da8:	f240 8337 	bls.w	1941a <d_print_comp_inner+0x2436>
   18dac:	2e07      	cmp	r6, #7
   18dae:	f47f a9e1 	bne.w	18174 <d_print_comp_inner+0x1190>
   18db2:	68aa      	ldr	r2, [r5, #8]
   18db4:	7811      	ldrb	r1, [r2, #0]
   18db6:	2900      	cmp	r1, #0
   18db8:	f47f a9dc 	bne.w	18174 <d_print_comp_inner+0x1190>
   18dbc:	6891      	ldr	r1, [r2, #8]
   18dbe:	2901      	cmp	r1, #1
   18dc0:	f47f a9d8 	bne.w	18174 <d_print_comp_inner+0x1190>
   18dc4:	2b3c      	cmp	r3, #60	; 0x3c
   18dc6:	f47f a9d5 	bne.w	18174 <d_print_comp_inner+0x1190>
   18dca:	6853      	ldr	r3, [r2, #4]
   18dcc:	781b      	ldrb	r3, [r3, #0]
   18dce:	2b30      	cmp	r3, #48	; 0x30
   18dd0:	f000 8626 	beq.w	19a20 <d_print_comp_inner+0x2a3c>
   18dd4:	2b31      	cmp	r3, #49	; 0x31
   18dd6:	f47f a9cd 	bne.w	18174 <d_print_comp_inner+0x1190>
   18dda:	2204      	movs	r2, #4
   18ddc:	4924      	ldr	r1, [pc, #144]	; (18e70 <d_print_comp_inner+0x1e8c>)
   18dde:	f7fb fe2d 	bl	14a3c <d_append_buffer>
   18de2:	f7fe b9cd 	b.w	17180 <d_print_comp_inner+0x19c>
   18de6:	4e23      	ldr	r6, [pc, #140]	; (18e74 <d_print_comp_inner+0x1e90>)
   18de8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18dec:	f106 0a02 	add.w	sl, r6, #2
   18df0:	e009      	b.n	18e06 <d_print_comp_inner+0x1e22>
   18df2:	460b      	mov	r3, r1
   18df4:	3101      	adds	r1, #1
   18df6:	45b2      	cmp	sl, r6
   18df8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18dfc:	54e7      	strb	r7, [r4, r3]
   18dfe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18e02:	f43e ad52 	beq.w	178aa <d_print_comp_inner+0x8c6>
   18e06:	29ff      	cmp	r1, #255	; 0xff
   18e08:	f816 7b01 	ldrb.w	r7, [r6], #1
   18e0c:	d1f1      	bne.n	18df2 <d_print_comp_inner+0x1e0e>
   18e0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e12:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18e16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e1a:	4620      	mov	r0, r4
   18e1c:	4798      	blx	r3
   18e1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e22:	3301      	adds	r3, #1
   18e24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e28:	2101      	movs	r1, #1
   18e2a:	2300      	movs	r3, #0
   18e2c:	e7e3      	b.n	18df6 <d_print_comp_inner+0x1e12>
   18e2e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e32:	29ff      	cmp	r1, #255	; 0xff
   18e34:	f000 84e4 	beq.w	19800 <d_print_comp_inner+0x281c>
   18e38:	2220      	movs	r2, #32
   18e3a:	1c4b      	adds	r3, r1, #1
   18e3c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18e40:	5462      	strb	r2, [r4, r1]
   18e42:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18e46:	f7fe bdbb 	b.w	179c0 <d_print_comp_inner+0x9dc>
   18e4a:	bf00      	nop
   18e4c:	000247e4 	.word	0x000247e4
   18e50:	0002460c 	.word	0x0002460c
   18e54:	00024598 	.word	0x00024598
   18e58:	0002475c 	.word	0x0002475c
   18e5c:	00024790 	.word	0x00024790
   18e60:	00024860 	.word	0x00024860
   18e64:	0002459c 	.word	0x0002459c
   18e68:	00024794 	.word	0x00024794
   18e6c:	00024aa0 	.word	0x00024aa0
   18e70:	000247c0 	.word	0x000247c0
   18e74:	000245e8 	.word	0x000245e8
   18e78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e7c:	29ff      	cmp	r1, #255	; 0xff
   18e7e:	f000 8465 	beq.w	1974c <d_print_comp_inner+0x2768>
   18e82:	2220      	movs	r2, #32
   18e84:	1c4b      	adds	r3, r1, #1
   18e86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18e8a:	5462      	strb	r2, [r4, r1]
   18e8c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18e90:	f7fe bd80 	b.w	17994 <d_print_comp_inner+0x9b0>
   18e94:	2700      	movs	r7, #0
   18e96:	55a7      	strb	r7, [r4, r6]
   18e98:	4631      	mov	r1, r6
   18e9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ea2:	4620      	mov	r0, r4
   18ea4:	4798      	blx	r3
   18ea6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18eaa:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18eae:	3301      	adds	r3, #1
   18eb0:	463e      	mov	r6, r7
   18eb2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18eb6:	f7fe be31 	b.w	17b1c <d_print_comp_inner+0xb38>
   18eba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ebe:	29ff      	cmp	r1, #255	; 0xff
   18ec0:	f000 8465 	beq.w	1978e <d_print_comp_inner+0x27aa>
   18ec4:	1c4a      	adds	r2, r1, #1
   18ec6:	235b      	movs	r3, #91	; 0x5b
   18ec8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ecc:	5463      	strb	r3, [r4, r1]
   18ece:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ed2:	4641      	mov	r1, r8
   18ed4:	68aa      	ldr	r2, [r5, #8]
   18ed6:	4620      	mov	r0, r4
   18ed8:	f000 fe28 	bl	19b2c <d_print_comp>
   18edc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ee0:	29ff      	cmp	r1, #255	; 0xff
   18ee2:	f000 8312 	beq.w	1950a <d_print_comp_inner+0x2526>
   18ee6:	235d      	movs	r3, #93	; 0x5d
   18ee8:	1c4a      	adds	r2, r1, #1
   18eea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18eee:	5463      	strb	r3, [r4, r1]
   18ef0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ef4:	f7fe b944 	b.w	17180 <d_print_comp_inner+0x19c>
   18ef8:	4631      	mov	r1, r6
   18efa:	4620      	mov	r0, r4
   18efc:	f7fb ffca 	bl	14e94 <d_find_pack>
   18f00:	b928      	cbnz	r0, 18f0e <d_print_comp_inner+0x1f2a>
   18f02:	e007      	b.n	18f14 <d_print_comp_inner+0x1f30>
   18f04:	6843      	ldr	r3, [r0, #4]
   18f06:	b12b      	cbz	r3, 18f14 <d_print_comp_inner+0x1f30>
   18f08:	6880      	ldr	r0, [r0, #8]
   18f0a:	3501      	adds	r5, #1
   18f0c:	b110      	cbz	r0, 18f14 <d_print_comp_inner+0x1f30>
   18f0e:	7803      	ldrb	r3, [r0, #0]
   18f10:	2b2f      	cmp	r3, #47	; 0x2f
   18f12:	d0f7      	beq.n	18f04 <d_print_comp_inner+0x1f20>
   18f14:	462a      	mov	r2, r5
   18f16:	a804      	add	r0, sp, #16
   18f18:	49d4      	ldr	r1, [pc, #848]	; (1926c <d_print_comp_inner+0x2288>)
   18f1a:	f005 feff 	bl	1ed1c <sprintf>
   18f1e:	a804      	add	r0, sp, #16
   18f20:	f006 f8ae 	bl	1f080 <strlen>
   18f24:	2800      	cmp	r0, #0
   18f26:	f43e a92b 	beq.w	17180 <d_print_comp_inner+0x19c>
   18f2a:	ad04      	add	r5, sp, #16
   18f2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f30:	182f      	adds	r7, r5, r0
   18f32:	f04f 0800 	mov.w	r8, #0
   18f36:	e009      	b.n	18f4c <d_print_comp_inner+0x1f68>
   18f38:	460b      	mov	r3, r1
   18f3a:	3101      	adds	r1, #1
   18f3c:	42bd      	cmp	r5, r7
   18f3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18f42:	54e6      	strb	r6, [r4, r3]
   18f44:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18f48:	f43e a91a 	beq.w	17180 <d_print_comp_inner+0x19c>
   18f4c:	29ff      	cmp	r1, #255	; 0xff
   18f4e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18f52:	d1f1      	bne.n	18f38 <d_print_comp_inner+0x1f54>
   18f54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f58:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18f5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f60:	4620      	mov	r0, r4
   18f62:	4798      	blx	r3
   18f64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f68:	3301      	adds	r3, #1
   18f6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f6e:	2101      	movs	r1, #1
   18f70:	2300      	movs	r3, #0
   18f72:	e7e3      	b.n	18f3c <d_print_comp_inner+0x1f58>
   18f74:	686a      	ldr	r2, [r5, #4]
   18f76:	4641      	mov	r1, r8
   18f78:	4620      	mov	r0, r4
   18f7a:	f000 fdd7 	bl	19b2c <d_print_comp>
   18f7e:	f7fe b8ff 	b.w	17180 <d_print_comp_inner+0x19c>
   18f82:	29ff      	cmp	r1, #255	; 0xff
   18f84:	f000 83d2 	beq.w	1972c <d_print_comp_inner+0x2748>
   18f88:	232d      	movs	r3, #45	; 0x2d
   18f8a:	1c4a      	adds	r2, r1, #1
   18f8c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f90:	5463      	strb	r3, [r4, r1]
   18f92:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f96:	f7ff b90e 	b.w	181b6 <d_print_comp_inner+0x11d2>
   18f9a:	2500      	movs	r5, #0
   18f9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fa0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fa4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18fa8:	4620      	mov	r0, r4
   18faa:	4798      	blx	r3
   18fac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fb0:	3301      	adds	r3, #1
   18fb2:	4629      	mov	r1, r5
   18fb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18fb8:	2201      	movs	r2, #1
   18fba:	f7ff bbeb 	b.w	18794 <d_print_comp_inner+0x17b0>
   18fbe:	2500      	movs	r5, #0
   18fc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fc8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18fcc:	4620      	mov	r0, r4
   18fce:	4798      	blx	r3
   18fd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fd4:	3301      	adds	r3, #1
   18fd6:	4629      	mov	r1, r5
   18fd8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18fdc:	2201      	movs	r2, #1
   18fde:	f7ff ba8f 	b.w	18500 <d_print_comp_inner+0x151c>
   18fe2:	2600      	movs	r6, #0
   18fe4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18fe8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18fec:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18ff0:	4798      	blx	r3
   18ff2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ff6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18ffa:	3301      	adds	r3, #1
   18ffc:	4631      	mov	r1, r6
   18ffe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19002:	f7fe bd43 	b.w	17a8c <d_print_comp_inner+0xaa8>
   19006:	2600      	movs	r6, #0
   19008:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1900c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19010:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19014:	4798      	blx	r3
   19016:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1901a:	3301      	adds	r3, #1
   1901c:	4631      	mov	r1, r6
   1901e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19022:	2201      	movs	r2, #1
   19024:	f7fe bb74 	b.w	17710 <d_print_comp_inner+0x72c>
   19028:	2500      	movs	r5, #0
   1902a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1902e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19032:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19036:	4620      	mov	r0, r4
   19038:	4798      	blx	r3
   1903a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1903e:	3301      	adds	r3, #1
   19040:	4629      	mov	r1, r5
   19042:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19046:	2201      	movs	r2, #1
   19048:	f7ff bae4 	b.w	18614 <d_print_comp_inner+0x1630>
   1904c:	220d      	movs	r2, #13
   1904e:	4988      	ldr	r1, [pc, #544]	; (19270 <d_print_comp_inner+0x228c>)
   19050:	4620      	mov	r0, r4
   19052:	f7fb fcf3 	bl	14a3c <d_append_buffer>
   19056:	68a9      	ldr	r1, [r5, #8]
   19058:	4620      	mov	r0, r4
   1905a:	3101      	adds	r1, #1
   1905c:	f7fb ff9e 	bl	14f9c <d_append_num>
   19060:	2203      	movs	r2, #3
   19062:	4984      	ldr	r1, [pc, #528]	; (19274 <d_print_comp_inner+0x2290>)
   19064:	4620      	mov	r0, r4
   19066:	f7fb fce9 	bl	14a3c <d_append_buffer>
   1906a:	686d      	ldr	r5, [r5, #4]
   1906c:	f7fe bc22 	b.w	178b4 <d_print_comp_inner+0x8d0>
   19070:	2500      	movs	r5, #0
   19072:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19076:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1907a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1907e:	4620      	mov	r0, r4
   19080:	4798      	blx	r3
   19082:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19086:	3301      	adds	r3, #1
   19088:	4629      	mov	r1, r5
   1908a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1908e:	2201      	movs	r2, #1
   19090:	f7fe be08 	b.w	17ca4 <d_print_comp_inner+0xcc0>
   19094:	2301      	movs	r3, #1
   19096:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1909a:	f7fe b871 	b.w	17180 <d_print_comp_inner+0x19c>
   1909e:	2500      	movs	r5, #0
   190a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190a8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   190ac:	4620      	mov	r0, r4
   190ae:	4798      	blx	r3
   190b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190b4:	3301      	adds	r3, #1
   190b6:	4629      	mov	r1, r5
   190b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190bc:	2201      	movs	r2, #1
   190be:	f7ff ba8f 	b.w	185e0 <d_print_comp_inner+0x15fc>
   190c2:	2500      	movs	r5, #0
   190c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190cc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   190d0:	4620      	mov	r0, r4
   190d2:	4798      	blx	r3
   190d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190d8:	3301      	adds	r3, #1
   190da:	4629      	mov	r1, r5
   190dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190e0:	2201      	movs	r2, #1
   190e2:	f7ff bbc5 	b.w	18870 <d_print_comp_inner+0x188c>
   190e6:	a914      	add	r1, sp, #80	; 0x50
   190e8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   190ec:	f841 0d40 	str.w	r0, [r1, #-64]!
   190f0:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   190f4:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   190f8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   190fc:	4620      	mov	r0, r4
   190fe:	4641      	mov	r1, r8
   19100:	9306      	str	r3, [sp, #24]
   19102:	9607      	str	r6, [sp, #28]
   19104:	9505      	str	r5, [sp, #20]
   19106:	f000 fd11 	bl	19b2c <d_print_comp>
   1910a:	9e06      	ldr	r6, [sp, #24]
   1910c:	9b04      	ldr	r3, [sp, #16]
   1910e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19112:	2e00      	cmp	r6, #0
   19114:	f47e a834 	bne.w	17180 <d_print_comp_inner+0x19c>
   19118:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1911c:	29ff      	cmp	r1, #255	; 0xff
   1911e:	f000 8409 	beq.w	19934 <d_print_comp_inner+0x2950>
   19122:	2320      	movs	r3, #32
   19124:	1c4a      	adds	r2, r1, #1
   19126:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1912a:	5463      	strb	r3, [r4, r1]
   1912c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19130:	f7fe be0b 	b.w	17d4a <d_print_comp_inner+0xd66>
   19134:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   19138:	2b00      	cmp	r3, #0
   1913a:	f6fe abff 	blt.w	1793c <d_print_comp_inner+0x958>
   1913e:	2b00      	cmp	r3, #0
   19140:	f000 829d 	beq.w	1967e <d_print_comp_inner+0x269a>
   19144:	6880      	ldr	r0, [r0, #8]
   19146:	3b01      	subs	r3, #1
   19148:	2800      	cmp	r0, #0
   1914a:	f43e a82d 	beq.w	171a8 <d_print_comp_inner+0x1c4>
   1914e:	7802      	ldrb	r2, [r0, #0]
   19150:	2a2f      	cmp	r2, #47	; 0x2f
   19152:	d0f4      	beq.n	1913e <d_print_comp_inner+0x215a>
   19154:	f7fe b828 	b.w	171a8 <d_print_comp_inner+0x1c4>
   19158:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   1915c:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   19160:	f1be 0f00 	cmp.w	lr, #0
   19164:	dd14      	ble.n	19190 <d_print_comp_inner+0x21ac>
   19166:	6813      	ldr	r3, [r2, #0]
   19168:	4299      	cmp	r1, r3
   1916a:	f000 83f5 	beq.w	19958 <d_print_comp_inner+0x2974>
   1916e:	f102 0008 	add.w	r0, r2, #8
   19172:	463b      	mov	r3, r7
   19174:	46a4      	mov	ip, r4
   19176:	e004      	b.n	19182 <d_print_comp_inner+0x219e>
   19178:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   1917c:	42a1      	cmp	r1, r4
   1917e:	f000 81d4 	beq.w	1952a <d_print_comp_inner+0x2546>
   19182:	3301      	adds	r3, #1
   19184:	459e      	cmp	lr, r3
   19186:	4681      	mov	r9, r0
   19188:	f100 0008 	add.w	r0, r0, #8
   1918c:	d1f4      	bne.n	19178 <d_print_comp_inner+0x2194>
   1918e:	4664      	mov	r4, ip
   19190:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   19194:	459e      	cmp	lr, r3
   19196:	f280 84b9 	bge.w	19b0c <d_print_comp_inner+0x2b28>
   1919a:	f10e 0301 	add.w	r3, lr, #1
   1919e:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   191a2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   191a6:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   191aa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   191ae:	3004      	adds	r0, #4
   191b0:	468e      	mov	lr, r1
   191b2:	2a00      	cmp	r2, #0
   191b4:	f000 848d 	beq.w	19ad2 <d_print_comp_inner+0x2aee>
   191b8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   191bc:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   191c0:	428b      	cmp	r3, r1
   191c2:	f103 0c01 	add.w	ip, r3, #1
   191c6:	f280 84a1 	bge.w	19b0c <d_print_comp_inner+0x2b28>
   191ca:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   191ce:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   191d2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   191d6:	6851      	ldr	r1, [r2, #4]
   191d8:	6059      	str	r1, [r3, #4]
   191da:	6003      	str	r3, [r0, #0]
   191dc:	6812      	ldr	r2, [r2, #0]
   191de:	4618      	mov	r0, r3
   191e0:	e7e7      	b.n	191b2 <d_print_comp_inner+0x21ce>
   191e2:	2500      	movs	r5, #0
   191e4:	4619      	mov	r1, r3
   191e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191ee:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   191f2:	4620      	mov	r0, r4
   191f4:	4798      	blx	r3
   191f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191fa:	1c5a      	adds	r2, r3, #1
   191fc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19200:	462b      	mov	r3, r5
   19202:	2201      	movs	r2, #1
   19204:	f7fe bd3d 	b.w	17c82 <d_print_comp_inner+0xc9e>
   19208:	2e00      	cmp	r6, #0
   1920a:	f000 844d 	beq.w	19aa8 <d_print_comp_inner+0x2ac4>
   1920e:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   19212:	f040 8488 	bne.w	19b26 <d_print_comp_inner+0x2b42>
   19216:	6873      	ldr	r3, [r6, #4]
   19218:	b373      	cbz	r3, 19278 <d_print_comp_inner+0x2294>
   1921a:	4607      	mov	r7, r0
   1921c:	e007      	b.n	1922e <d_print_comp_inner+0x224a>
   1921e:	3701      	adds	r7, #1
   19220:	68b6      	ldr	r6, [r6, #8]
   19222:	b356      	cbz	r6, 1927a <d_print_comp_inner+0x2296>
   19224:	7833      	ldrb	r3, [r6, #0]
   19226:	2b2f      	cmp	r3, #47	; 0x2f
   19228:	d127      	bne.n	1927a <d_print_comp_inner+0x2296>
   1922a:	6873      	ldr	r3, [r6, #4]
   1922c:	b32b      	cbz	r3, 1927a <d_print_comp_inner+0x2296>
   1922e:	781a      	ldrb	r2, [r3, #0]
   19230:	2a4a      	cmp	r2, #74	; 0x4a
   19232:	d1f4      	bne.n	1921e <d_print_comp_inner+0x223a>
   19234:	6859      	ldr	r1, [r3, #4]
   19236:	4620      	mov	r0, r4
   19238:	f7fb fe2c 	bl	14e94 <d_find_pack>
   1923c:	b198      	cbz	r0, 19266 <d_print_comp_inner+0x2282>
   1923e:	7803      	ldrb	r3, [r0, #0]
   19240:	2b2f      	cmp	r3, #47	; 0x2f
   19242:	f040 846c 	bne.w	19b1e <d_print_comp_inner+0x2b3a>
   19246:	6843      	ldr	r3, [r0, #4]
   19248:	2b00      	cmp	r3, #0
   1924a:	f000 8464 	beq.w	19b16 <d_print_comp_inner+0x2b32>
   1924e:	4603      	mov	r3, r0
   19250:	2000      	movs	r0, #0
   19252:	e004      	b.n	1925e <d_print_comp_inner+0x227a>
   19254:	781a      	ldrb	r2, [r3, #0]
   19256:	2a2f      	cmp	r2, #47	; 0x2f
   19258:	d105      	bne.n	19266 <d_print_comp_inner+0x2282>
   1925a:	685a      	ldr	r2, [r3, #4]
   1925c:	b11a      	cbz	r2, 19266 <d_print_comp_inner+0x2282>
   1925e:	689b      	ldr	r3, [r3, #8]
   19260:	3001      	adds	r0, #1
   19262:	2b00      	cmp	r3, #0
   19264:	d1f6      	bne.n	19254 <d_print_comp_inner+0x2270>
   19266:	4407      	add	r7, r0
   19268:	e7da      	b.n	19220 <d_print_comp_inner+0x223c>
   1926a:	bf00      	nop
   1926c:	00024598 	.word	0x00024598
   19270:	000245ec 	.word	0x000245ec
   19274:	000245fc 	.word	0x000245fc
   19278:	461f      	mov	r7, r3
   1927a:	4639      	mov	r1, r7
   1927c:	4620      	mov	r0, r4
   1927e:	f7fb fe8d 	bl	14f9c <d_append_num>
   19282:	f7fd bf7d 	b.w	17180 <d_print_comp_inner+0x19c>
   19286:	2500      	movs	r5, #0
   19288:	4619      	mov	r1, r3
   1928a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1928e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19292:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19296:	4620      	mov	r0, r4
   19298:	4798      	blx	r3
   1929a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1929e:	1c5a      	adds	r2, r3, #1
   192a0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   192a4:	462b      	mov	r3, r5
   192a6:	2101      	movs	r1, #1
   192a8:	f7fe bb8e 	b.w	179c8 <d_print_comp_inner+0x9e4>
   192ac:	2600      	movs	r6, #0
   192ae:	4619      	mov	r1, r3
   192b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192b8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   192bc:	4620      	mov	r0, r4
   192be:	4798      	blx	r3
   192c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192c4:	1c5a      	adds	r2, r3, #1
   192c6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   192ca:	4633      	mov	r3, r6
   192cc:	2101      	movs	r1, #1
   192ce:	f7fe bb65 	b.w	1799c <d_print_comp_inner+0x9b8>
   192d2:	2200      	movs	r2, #0
   192d4:	4619      	mov	r1, r3
   192d6:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   192da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192e2:	4620      	mov	r0, r4
   192e4:	4798      	blx	r3
   192e6:	2329      	movs	r3, #41	; 0x29
   192e8:	7023      	strb	r3, [r4, #0]
   192ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   192ee:	782a      	ldrb	r2, [r5, #0]
   192f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192f4:	2101      	movs	r1, #1
   192f6:	3301      	adds	r3, #1
   192f8:	2a3d      	cmp	r2, #61	; 0x3d
   192fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19302:	f47e af58 	bne.w	181b6 <d_print_comp_inner+0x11d2>
   19306:	e63f      	b.n	18f88 <d_print_comp_inner+0x1fa4>
   19308:	2700      	movs	r7, #0
   1930a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1930e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   19312:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19316:	4620      	mov	r0, r4
   19318:	4798      	blx	r3
   1931a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1931e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   19322:	3301      	adds	r3, #1
   19324:	4639      	mov	r1, r7
   19326:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1932a:	f7fe bf28 	b.w	1817e <d_print_comp_inner+0x119a>
   1932e:	2500      	movs	r5, #0
   19330:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19334:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19338:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1933c:	4620      	mov	r0, r4
   1933e:	4798      	blx	r3
   19340:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19344:	3301      	adds	r3, #1
   19346:	4629      	mov	r1, r5
   19348:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1934c:	2201      	movs	r2, #1
   1934e:	f7ff bb12 	b.w	18976 <d_print_comp_inner+0x1992>
   19352:	781b      	ldrb	r3, [r3, #0]
   19354:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   19358:	2901      	cmp	r1, #1
   1935a:	d903      	bls.n	19364 <d_print_comp_inner+0x2380>
   1935c:	3b72      	subs	r3, #114	; 0x72
   1935e:	2b01      	cmp	r3, #1
   19360:	f63d aead 	bhi.w	170be <d_print_comp_inner+0xda>
   19364:	4641      	mov	r1, r8
   19366:	4620      	mov	r0, r4
   19368:	f001 f9c8 	bl	1a6fc <d_print_expr_op>
   1936c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19370:	29ff      	cmp	r1, #255	; 0xff
   19372:	f000 8271 	beq.w	19858 <d_print_comp_inner+0x2874>
   19376:	1c4a      	adds	r2, r1, #1
   19378:	233c      	movs	r3, #60	; 0x3c
   1937a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1937e:	5463      	strb	r3, [r4, r1]
   19380:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19384:	68ab      	ldr	r3, [r5, #8]
   19386:	4641      	mov	r1, r8
   19388:	685a      	ldr	r2, [r3, #4]
   1938a:	4620      	mov	r0, r4
   1938c:	f000 fbce 	bl	19b2c <d_print_comp>
   19390:	2202      	movs	r2, #2
   19392:	49d5      	ldr	r1, [pc, #852]	; (196e8 <d_print_comp_inner+0x2704>)
   19394:	4620      	mov	r0, r4
   19396:	f7fb fb51 	bl	14a3c <d_append_buffer>
   1939a:	68ab      	ldr	r3, [r5, #8]
   1939c:	4641      	mov	r1, r8
   1939e:	689a      	ldr	r2, [r3, #8]
   193a0:	4620      	mov	r0, r4
   193a2:	f000 fbc3 	bl	19b2c <d_print_comp>
   193a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   193aa:	29ff      	cmp	r1, #255	; 0xff
   193ac:	f000 81df 	beq.w	1976e <d_print_comp_inner+0x278a>
   193b0:	2329      	movs	r3, #41	; 0x29
   193b2:	1c4a      	adds	r2, r1, #1
   193b4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   193b8:	5463      	strb	r3, [r4, r1]
   193ba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   193be:	f7fd bedf 	b.w	17180 <d_print_comp_inner+0x19c>
   193c2:	4632      	mov	r2, r6
   193c4:	4641      	mov	r1, r8
   193c6:	4620      	mov	r0, r4
   193c8:	f000 fbb0 	bl	19b2c <d_print_comp>
   193cc:	f7fd bed8 	b.w	17180 <d_print_comp_inner+0x19c>
   193d0:	2600      	movs	r6, #0
   193d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193da:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   193de:	4620      	mov	r0, r4
   193e0:	4798      	blx	r3
   193e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193e6:	3301      	adds	r3, #1
   193e8:	4631      	mov	r1, r6
   193ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193ee:	2201      	movs	r2, #1
   193f0:	f7fe ba55 	b.w	1789e <d_print_comp_inner+0x8ba>
   193f4:	49bd      	ldr	r1, [pc, #756]	; (196ec <d_print_comp_inner+0x2708>)
   193f6:	6870      	ldr	r0, [r6, #4]
   193f8:	f005 feb0 	bl	1f15c <strncmp>
   193fc:	2800      	cmp	r0, #0
   193fe:	f47e aabd 	bne.w	1797c <d_print_comp_inner+0x998>
   19402:	68aa      	ldr	r2, [r5, #8]
   19404:	4641      	mov	r1, r8
   19406:	4620      	mov	r0, r4
   19408:	f000 fb90 	bl	19b2c <d_print_comp>
   1940c:	2202      	movs	r2, #2
   1940e:	49b8      	ldr	r1, [pc, #736]	; (196f0 <d_print_comp_inner+0x270c>)
   19410:	4620      	mov	r0, r4
   19412:	f7fb fb13 	bl	14a3c <d_append_buffer>
   19416:	f7fe badd 	b.w	179d4 <d_print_comp_inner+0x9f0>
   1941a:	68aa      	ldr	r2, [r5, #8]
   1941c:	7817      	ldrb	r7, [r2, #0]
   1941e:	2f00      	cmp	r7, #0
   19420:	f47e aea8 	bne.w	18174 <d_print_comp_inner+0x1190>
   19424:	2b3d      	cmp	r3, #61	; 0x3d
   19426:	f000 82ef 	beq.w	19a08 <d_print_comp_inner+0x2a24>
   1942a:	68aa      	ldr	r2, [r5, #8]
   1942c:	4641      	mov	r1, r8
   1942e:	4620      	mov	r0, r4
   19430:	3e02      	subs	r6, #2
   19432:	f000 fb7b 	bl	19b2c <d_print_comp>
   19436:	2e04      	cmp	r6, #4
   19438:	f63d aea2 	bhi.w	17180 <d_print_comp_inner+0x19c>
   1943c:	e8df f006 	tbb	[pc, r6]
   19440:	0a111826 	.word	0x0a111826
   19444:	03          	.byte	0x03
   19445:	00          	.byte	0x00
   19446:	4620      	mov	r0, r4
   19448:	2203      	movs	r2, #3
   1944a:	49aa      	ldr	r1, [pc, #680]	; (196f4 <d_print_comp_inner+0x2710>)
   1944c:	f7fb faf6 	bl	14a3c <d_append_buffer>
   19450:	f7fd be96 	b.w	17180 <d_print_comp_inner+0x19c>
   19454:	4620      	mov	r0, r4
   19456:	2202      	movs	r2, #2
   19458:	49a7      	ldr	r1, [pc, #668]	; (196f8 <d_print_comp_inner+0x2714>)
   1945a:	f7fb faef 	bl	14a3c <d_append_buffer>
   1945e:	f7fd be8f 	b.w	17180 <d_print_comp_inner+0x19c>
   19462:	4620      	mov	r0, r4
   19464:	2202      	movs	r2, #2
   19466:	49a5      	ldr	r1, [pc, #660]	; (196fc <d_print_comp_inner+0x2718>)
   19468:	f7fb fae8 	bl	14a3c <d_append_buffer>
   1946c:	f7fd be88 	b.w	17180 <d_print_comp_inner+0x19c>
   19470:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19474:	29ff      	cmp	r1, #255	; 0xff
   19476:	f000 831a 	beq.w	19aae <d_print_comp_inner+0x2aca>
   1947a:	236c      	movs	r3, #108	; 0x6c
   1947c:	1c4a      	adds	r2, r1, #1
   1947e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19482:	5463      	strb	r3, [r4, r1]
   19484:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19488:	f7fd be7a 	b.w	17180 <d_print_comp_inner+0x19c>
   1948c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19490:	29ff      	cmp	r1, #255	; 0xff
   19492:	f000 82db 	beq.w	19a4c <d_print_comp_inner+0x2a68>
   19496:	2375      	movs	r3, #117	; 0x75
   19498:	1c4a      	adds	r2, r1, #1
   1949a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1949e:	5463      	strb	r3, [r4, r1]
   194a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   194a4:	f7fd be6c 	b.w	17180 <d_print_comp_inner+0x19c>
   194a8:	2600      	movs	r6, #0
   194aa:	4619      	mov	r1, r3
   194ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194b4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   194b8:	4620      	mov	r0, r4
   194ba:	4798      	blx	r3
   194bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194c0:	1c5a      	adds	r2, r3, #1
   194c2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   194c6:	4633      	mov	r3, r6
   194c8:	2101      	movs	r1, #1
   194ca:	f7fe bd3c 	b.w	17f46 <d_print_comp_inner+0xf62>
   194ce:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   194d2:	f7fe bf95 	b.w	18400 <d_print_comp_inner+0x141c>
   194d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   194da:	29ff      	cmp	r1, #255	; 0xff
   194dc:	f000 8244 	beq.w	19968 <d_print_comp_inner+0x2984>
   194e0:	2320      	movs	r3, #32
   194e2:	1c4a      	adds	r2, r1, #1
   194e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   194e8:	5463      	strb	r3, [r4, r1]
   194ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   194ee:	e447      	b.n	18d80 <d_print_comp_inner+0x1d9c>
   194f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   194f4:	29ff      	cmp	r1, #255	; 0xff
   194f6:	f000 826e 	beq.w	199d6 <d_print_comp_inner+0x29f2>
   194fa:	2320      	movs	r3, #32
   194fc:	1c4a      	adds	r2, r1, #1
   194fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19502:	5463      	strb	r3, [r4, r1]
   19504:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19508:	e419      	b.n	18d3e <d_print_comp_inner+0x1d5a>
   1950a:	2500      	movs	r5, #0
   1950c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19510:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19514:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19518:	4620      	mov	r0, r4
   1951a:	4798      	blx	r3
   1951c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19520:	3301      	adds	r3, #1
   19522:	4629      	mov	r1, r5
   19524:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19528:	e4dd      	b.n	18ee6 <d_print_comp_inner+0x1f02>
   1952a:	4664      	mov	r4, ip
   1952c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   19530:	b1d8      	cbz	r0, 1956a <d_print_comp_inner+0x2586>
   19532:	6802      	ldr	r2, [r0, #0]
   19534:	4291      	cmp	r1, r2
   19536:	d00a      	beq.n	1954e <d_print_comp_inner+0x256a>
   19538:	4603      	mov	r3, r0
   1953a:	e004      	b.n	19546 <d_print_comp_inner+0x2562>
   1953c:	685b      	ldr	r3, [r3, #4]
   1953e:	b1a3      	cbz	r3, 1956a <d_print_comp_inner+0x2586>
   19540:	681a      	ldr	r2, [r3, #0]
   19542:	4291      	cmp	r1, r2
   19544:	d003      	beq.n	1954e <d_print_comp_inner+0x256a>
   19546:	4295      	cmp	r5, r2
   19548:	d1f8      	bne.n	1953c <d_print_comp_inner+0x2558>
   1954a:	4298      	cmp	r0, r3
   1954c:	d0f6      	beq.n	1953c <d_print_comp_inner+0x2558>
   1954e:	3104      	adds	r1, #4
   19550:	4620      	mov	r0, r4
   19552:	f7fb fc83 	bl	14e5c <d_lookup_template_argument.isra.6>
   19556:	2800      	cmp	r0, #0
   19558:	f43d ae26 	beq.w	171a8 <d_print_comp_inner+0x1c4>
   1955c:	7803      	ldrb	r3, [r0, #0]
   1955e:	2b2f      	cmp	r3, #47	; 0x2f
   19560:	f43d ae11 	beq.w	17186 <d_print_comp_inner+0x1a2>
   19564:	4601      	mov	r1, r0
   19566:	f7fe bc30 	b.w	17dca <d_print_comp_inner+0xde6>
   1956a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1956e:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   19572:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19576:	3104      	adds	r1, #4
   19578:	4620      	mov	r0, r4
   1957a:	f7fb fc6f 	bl	14e5c <d_lookup_template_argument.isra.6>
   1957e:	2800      	cmp	r0, #0
   19580:	f43d ae10 	beq.w	171a4 <d_print_comp_inner+0x1c0>
   19584:	2701      	movs	r7, #1
   19586:	e7e9      	b.n	1955c <d_print_comp_inner+0x2578>
   19588:	2600      	movs	r6, #0
   1958a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1958e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19592:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19596:	4620      	mov	r0, r4
   19598:	4798      	blx	r3
   1959a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1959e:	f8da 5004 	ldr.w	r5, [sl, #4]
   195a2:	3301      	adds	r3, #1
   195a4:	4631      	mov	r1, r6
   195a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195aa:	f7ff b85a 	b.w	18662 <d_print_comp_inner+0x167e>
   195ae:	68aa      	ldr	r2, [r5, #8]
   195b0:	4641      	mov	r1, r8
   195b2:	4620      	mov	r0, r4
   195b4:	f000 faba 	bl	19b2c <d_print_comp>
   195b8:	9b06      	ldr	r3, [sp, #24]
   195ba:	9a00      	ldr	r2, [sp, #0]
   195bc:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   195c0:	2b00      	cmp	r3, #0
   195c2:	f43e ac9d 	beq.w	17f00 <d_print_comp_inner+0xf1c>
   195c6:	f7fd bddb 	b.w	17180 <d_print_comp_inner+0x19c>
   195ca:	255f      	movs	r5, #95	; 0x5f
   195cc:	f7ff ba10 	b.w	189f0 <d_print_comp_inner+0x1a0c>
   195d0:	2500      	movs	r5, #0
   195d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195d6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   195da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195de:	4620      	mov	r0, r4
   195e0:	4798      	blx	r3
   195e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195e6:	3301      	adds	r3, #1
   195e8:	4629      	mov	r1, r5
   195ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195ee:	f7ff bb82 	b.w	18cf6 <d_print_comp_inner+0x1d12>
   195f2:	4648      	mov	r0, r9
   195f4:	4942      	ldr	r1, [pc, #264]	; (19700 <d_print_comp_inner+0x271c>)
   195f6:	f005 fbc7 	bl	1ed88 <strcmp>
   195fa:	b120      	cbz	r0, 19606 <d_print_comp_inner+0x2622>
   195fc:	463a      	mov	r2, r7
   195fe:	4641      	mov	r1, r8
   19600:	4620      	mov	r0, r4
   19602:	f001 f87b 	bl	1a6fc <d_print_expr_op>
   19606:	68ab      	ldr	r3, [r5, #8]
   19608:	4641      	mov	r1, r8
   1960a:	689a      	ldr	r2, [r3, #8]
   1960c:	4620      	mov	r0, r4
   1960e:	f001 f8b3 	bl	1a778 <d_print_subexpr>
   19612:	f7fd bd9d 	b.w	17150 <d_print_comp_inner+0x16c>
   19616:	2600      	movs	r6, #0
   19618:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1961c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19620:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19624:	4620      	mov	r0, r4
   19626:	4798      	blx	r3
   19628:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1962c:	3301      	adds	r3, #1
   1962e:	4631      	mov	r1, r6
   19630:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19634:	f7ff bb88 	b.w	18d48 <d_print_comp_inner+0x1d64>
   19638:	2500      	movs	r5, #0
   1963a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1963e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19642:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19646:	4620      	mov	r0, r4
   19648:	4798      	blx	r3
   1964a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1964e:	3301      	adds	r3, #1
   19650:	4629      	mov	r1, r5
   19652:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19656:	f7fe bb59 	b.w	17d0c <d_print_comp_inner+0xd28>
   1965a:	2500      	movs	r5, #0
   1965c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19660:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19664:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19668:	4798      	blx	r3
   1966a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1966e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19672:	3301      	adds	r3, #1
   19674:	4629      	mov	r1, r5
   19676:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1967a:	f7fe bb2b 	b.w	17cd4 <d_print_comp_inner+0xcf0>
   1967e:	6840      	ldr	r0, [r0, #4]
   19680:	2800      	cmp	r0, #0
   19682:	f43d ad91 	beq.w	171a8 <d_print_comp_inner+0x1c4>
   19686:	f7fe b959 	b.w	1793c <d_print_comp_inner+0x958>
   1968a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   1968e:	4619      	mov	r1, r3
   19690:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19694:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19698:	4620      	mov	r0, r4
   1969a:	4798      	blx	r3
   1969c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196a0:	1c5a      	adds	r2, r3, #1
   196a2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   196a6:	462b      	mov	r3, r5
   196a8:	f7ff bb14 	b.w	18cd4 <d_print_comp_inner+0x1cf0>
   196ac:	6873      	ldr	r3, [r6, #4]
   196ae:	781a      	ldrb	r2, [r3, #0]
   196b0:	2a01      	cmp	r2, #1
   196b2:	f000 8153 	beq.w	1995c <d_print_comp_inner+0x2978>
   196b6:	f896 a000 	ldrb.w	sl, [r6]
   196ba:	f7ff bae0 	b.w	18c7e <d_print_comp_inner+0x1c9a>
   196be:	2500      	movs	r5, #0
   196c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   196c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196cc:	4620      	mov	r0, r4
   196ce:	4798      	blx	r3
   196d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196d4:	3301      	adds	r3, #1
   196d6:	4629      	mov	r1, r5
   196d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196dc:	f7ff bb55 	b.w	18d8a <d_print_comp_inner+0x1da6>
   196e0:	4654      	mov	r4, sl
   196e2:	f7fe be8d 	b.w	18400 <d_print_comp_inner+0x141c>
   196e6:	bf00      	nop
   196e8:	00024798 	.word	0x00024798
   196ec:	00024600 	.word	0x00024600
   196f0:	00024608 	.word	0x00024608
   196f4:	000247b4 	.word	0x000247b4
   196f8:	000247b0 	.word	0x000247b0
   196fc:	000247ac 	.word	0x000247ac
   19700:	000245a0 	.word	0x000245a0
   19704:	686a      	ldr	r2, [r5, #4]
   19706:	4641      	mov	r1, r8
   19708:	4620      	mov	r0, r4
   1970a:	f001 f835 	bl	1a778 <d_print_subexpr>
   1970e:	4620      	mov	r0, r4
   19710:	2203      	movs	r2, #3
   19712:	49e2      	ldr	r1, [pc, #904]	; (19a9c <d_print_comp_inner+0x2ab8>)
   19714:	f7fb f992 	bl	14a3c <d_append_buffer>
   19718:	f7fd bd32 	b.w	17180 <d_print_comp_inner+0x19c>
   1971c:	ab14      	add	r3, sp, #80	; 0x50
   1971e:	9603      	str	r6, [sp, #12]
   19720:	f843 cd48 	str.w	ip, [r3, #-72]!
   19724:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19728:	f7fe b85a 	b.w	177e0 <d_print_comp_inner+0x7fc>
   1972c:	2700      	movs	r7, #0
   1972e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19732:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   19736:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1973a:	4620      	mov	r0, r4
   1973c:	4798      	blx	r3
   1973e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19742:	3301      	adds	r3, #1
   19744:	4639      	mov	r1, r7
   19746:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1974a:	e41d      	b.n	18f88 <d_print_comp_inner+0x1fa4>
   1974c:	2600      	movs	r6, #0
   1974e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19752:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19756:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1975a:	4620      	mov	r0, r4
   1975c:	4798      	blx	r3
   1975e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19762:	3301      	adds	r3, #1
   19764:	4631      	mov	r1, r6
   19766:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1976a:	f7ff bb8a 	b.w	18e82 <d_print_comp_inner+0x1e9e>
   1976e:	2500      	movs	r5, #0
   19770:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19774:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19778:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1977c:	4620      	mov	r0, r4
   1977e:	4798      	blx	r3
   19780:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19784:	3301      	adds	r3, #1
   19786:	4629      	mov	r1, r5
   19788:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1978c:	e610      	b.n	193b0 <d_print_comp_inner+0x23cc>
   1978e:	2600      	movs	r6, #0
   19790:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19794:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19798:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1979c:	4620      	mov	r0, r4
   1979e:	4798      	blx	r3
   197a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197a4:	3301      	adds	r3, #1
   197a6:	4631      	mov	r1, r6
   197a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197ac:	f7ff bb8a 	b.w	18ec4 <d_print_comp_inner+0x1ee0>
   197b0:	685a      	ldr	r2, [r3, #4]
   197b2:	6891      	ldr	r1, [r2, #8]
   197b4:	2901      	cmp	r1, #1
   197b6:	f47d ac90 	bne.w	170da <d_print_comp_inner+0xf6>
   197ba:	6852      	ldr	r2, [r2, #4]
   197bc:	7812      	ldrb	r2, [r2, #0]
   197be:	2a3e      	cmp	r2, #62	; 0x3e
   197c0:	f47d ac8b 	bne.w	170da <d_print_comp_inner+0xf6>
   197c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   197c8:	29ff      	cmp	r1, #255	; 0xff
   197ca:	d10f      	bne.n	197ec <d_print_comp_inner+0x2808>
   197cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197d0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   197d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197d8:	4620      	mov	r0, r4
   197da:	4798      	blx	r3
   197dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197e0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   197e4:	3301      	adds	r3, #1
   197e6:	4631      	mov	r1, r6
   197e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197ec:	2328      	movs	r3, #40	; 0x28
   197ee:	1c4a      	adds	r2, r1, #1
   197f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   197f4:	5463      	strb	r3, [r4, r1]
   197f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   197fa:	686b      	ldr	r3, [r5, #4]
   197fc:	f7fd bc6d 	b.w	170da <d_print_comp_inner+0xf6>
   19800:	2500      	movs	r5, #0
   19802:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19806:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1980a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1980e:	4620      	mov	r0, r4
   19810:	4798      	blx	r3
   19812:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19816:	3301      	adds	r3, #1
   19818:	4629      	mov	r1, r5
   1981a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1981e:	f7ff bb0b 	b.w	18e38 <d_print_comp_inner+0x1e54>
   19822:	f8db b004 	ldr.w	fp, [fp, #4]
   19826:	f1bb 0f00 	cmp.w	fp, #0
   1982a:	f43e ade9 	beq.w	18400 <d_print_comp_inner+0x141c>
   1982e:	f7fd bfc3 	b.w	177b8 <d_print_comp_inner+0x7d4>
   19832:	9b02      	ldr	r3, [sp, #8]
   19834:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19838:	f7fd bfdb 	b.w	177f2 <d_print_comp_inner+0x80e>
   1983c:	6893      	ldr	r3, [r2, #8]
   1983e:	781b      	ldrb	r3, [r3, #0]
   19840:	2b29      	cmp	r3, #41	; 0x29
   19842:	bf1c      	itt	ne
   19844:	2301      	movne	r3, #1
   19846:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1984a:	6852      	ldr	r2, [r2, #4]
   1984c:	4641      	mov	r1, r8
   1984e:	4620      	mov	r0, r4
   19850:	f000 ff92 	bl	1a778 <d_print_subexpr>
   19854:	f7fd bc52 	b.w	170fc <d_print_comp_inner+0x118>
   19858:	2600      	movs	r6, #0
   1985a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1985e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19862:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19866:	4620      	mov	r0, r4
   19868:	4798      	blx	r3
   1986a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1986e:	3301      	adds	r3, #1
   19870:	4631      	mov	r1, r6
   19872:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19876:	e57e      	b.n	19376 <d_print_comp_inner+0x2392>
   19878:	6872      	ldr	r2, [r6, #4]
   1987a:	4641      	mov	r1, r8
   1987c:	4620      	mov	r0, r4
   1987e:	f000 ff7b 	bl	1a778 <d_print_subexpr>
   19882:	464a      	mov	r2, r9
   19884:	4641      	mov	r1, r8
   19886:	4620      	mov	r0, r4
   19888:	f000 ff38 	bl	1a6fc <d_print_expr_op>
   1988c:	f7fd bc78 	b.w	17180 <d_print_comp_inner+0x19c>
   19890:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19894:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19898:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1989c:	4620      	mov	r0, r4
   1989e:	4798      	blx	r3
   198a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198a4:	3301      	adds	r3, #1
   198a6:	4629      	mov	r1, r5
   198a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198ac:	f7fd bfad 	b.w	1780a <d_print_comp_inner+0x826>
   198b0:	464a      	mov	r2, r9
   198b2:	4641      	mov	r1, r8
   198b4:	4620      	mov	r0, r4
   198b6:	f000 ff5f 	bl	1a778 <d_print_subexpr>
   198ba:	4652      	mov	r2, sl
   198bc:	4641      	mov	r1, r8
   198be:	4620      	mov	r0, r4
   198c0:	f000 ff1c 	bl	1a6fc <d_print_expr_op>
   198c4:	463a      	mov	r2, r7
   198c6:	4641      	mov	r1, r8
   198c8:	4620      	mov	r0, r4
   198ca:	f000 ff55 	bl	1a778 <d_print_subexpr>
   198ce:	4620      	mov	r0, r4
   198d0:	2203      	movs	r2, #3
   198d2:	4973      	ldr	r1, [pc, #460]	; (19aa0 <d_print_comp_inner+0x2abc>)
   198d4:	f7fb f8b2 	bl	14a3c <d_append_buffer>
   198d8:	462a      	mov	r2, r5
   198da:	4641      	mov	r1, r8
   198dc:	4620      	mov	r0, r4
   198de:	f000 ff4b 	bl	1a778 <d_print_subexpr>
   198e2:	f7fd bc4d 	b.w	17180 <d_print_comp_inner+0x19c>
   198e6:	454f      	cmp	r7, r9
   198e8:	f67f ae6f 	bls.w	195ca <d_print_comp_inner+0x25e6>
   198ec:	2d5f      	cmp	r5, #95	; 0x5f
   198ee:	f47f ae6c 	bne.w	195ca <d_print_comp_inner+0x25e6>
   198f2:	28ff      	cmp	r0, #255	; 0xff
   198f4:	f63f a87c 	bhi.w	189f0 <d_print_comp_inner+0x1a0c>
   198f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   198fc:	29ff      	cmp	r1, #255	; 0xff
   198fe:	b2c5      	uxtb	r5, r0
   19900:	d10f      	bne.n	19922 <d_print_comp_inner+0x293e>
   19902:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19906:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1990a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1990e:	4620      	mov	r0, r4
   19910:	4798      	blx	r3
   19912:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19916:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1991a:	3301      	adds	r3, #1
   1991c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19920:	2100      	movs	r1, #0
   19922:	1c4b      	adds	r3, r1, #1
   19924:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19928:	464e      	mov	r6, r9
   1992a:	5465      	strb	r5, [r4, r1]
   1992c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19930:	f7ff b868 	b.w	18a04 <d_print_comp_inner+0x1a20>
   19934:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19938:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1993c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19940:	4620      	mov	r0, r4
   19942:	4798      	blx	r3
   19944:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19948:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1994c:	3301      	adds	r3, #1
   1994e:	4631      	mov	r1, r6
   19950:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19954:	f7ff bbe5 	b.w	19122 <d_print_comp_inner+0x213e>
   19958:	4691      	mov	r9, r2
   1995a:	e5e7      	b.n	1952c <d_print_comp_inner+0x2548>
   1995c:	68b2      	ldr	r2, [r6, #8]
   1995e:	7812      	ldrb	r2, [r2, #0]
   19960:	2a29      	cmp	r2, #41	; 0x29
   19962:	bf08      	it	eq
   19964:	461e      	moveq	r6, r3
   19966:	e6a6      	b.n	196b6 <d_print_comp_inner+0x26d2>
   19968:	2500      	movs	r5, #0
   1996a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1996e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19972:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19976:	4620      	mov	r0, r4
   19978:	4798      	blx	r3
   1997a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1997e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19982:	3301      	adds	r3, #1
   19984:	4629      	mov	r1, r5
   19986:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1998a:	e5a9      	b.n	194e0 <d_print_comp_inner+0x24fc>
   1998c:	2600      	movs	r6, #0
   1998e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19992:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19996:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1999a:	4620      	mov	r0, r4
   1999c:	4798      	blx	r3
   1999e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199a2:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   199a6:	3301      	adds	r3, #1
   199a8:	4631      	mov	r1, r6
   199aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199ae:	f7fd bbc8 	b.w	17142 <d_print_comp_inner+0x15e>
   199b2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   199b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199be:	4620      	mov	r0, r4
   199c0:	4798      	blx	r3
   199c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199c6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   199ca:	3301      	adds	r3, #1
   199cc:	4631      	mov	r1, r6
   199ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199d2:	f7fd bba4 	b.w	1711e <d_print_comp_inner+0x13a>
   199d6:	2600      	movs	r6, #0
   199d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199dc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   199e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199e4:	4620      	mov	r0, r4
   199e6:	4798      	blx	r3
   199e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199ec:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   199f0:	3301      	adds	r3, #1
   199f2:	4631      	mov	r1, r6
   199f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199f8:	e57f      	b.n	194fa <d_print_comp_inner+0x2516>
   199fa:	6841      	ldr	r1, [r0, #4]
   199fc:	2900      	cmp	r1, #0
   199fe:	f43d abd0 	beq.w	171a2 <d_print_comp_inner+0x1be>
   19a02:	780b      	ldrb	r3, [r1, #0]
   19a04:	f7fe b9e1 	b.w	17dca <d_print_comp_inner+0xde6>
   19a08:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a0c:	29ff      	cmp	r1, #255	; 0xff
   19a0e:	d00d      	beq.n	19a2c <d_print_comp_inner+0x2a48>
   19a10:	232d      	movs	r3, #45	; 0x2d
   19a12:	1c4a      	adds	r2, r1, #1
   19a14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19a18:	5463      	strb	r3, [r4, r1]
   19a1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19a1e:	e504      	b.n	1942a <d_print_comp_inner+0x2446>
   19a20:	2205      	movs	r2, #5
   19a22:	4920      	ldr	r1, [pc, #128]	; (19aa4 <d_print_comp_inner+0x2ac0>)
   19a24:	f7fb f80a 	bl	14a3c <d_append_buffer>
   19a28:	f7fd bbaa 	b.w	17180 <d_print_comp_inner+0x19c>
   19a2c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19a30:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   19a34:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19a38:	4798      	blx	r3
   19a3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a3e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   19a42:	3301      	adds	r3, #1
   19a44:	4639      	mov	r1, r7
   19a46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a4a:	e7e1      	b.n	19a10 <d_print_comp_inner+0x2a2c>
   19a4c:	2500      	movs	r5, #0
   19a4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a52:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19a56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a5a:	4620      	mov	r0, r4
   19a5c:	4798      	blx	r3
   19a5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a62:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19a66:	3301      	adds	r3, #1
   19a68:	4629      	mov	r1, r5
   19a6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a6e:	e512      	b.n	19496 <d_print_comp_inner+0x24b2>
   19a70:	2700      	movs	r7, #0
   19a72:	f7ff b913 	b.w	18c9c <d_print_comp_inner+0x1cb8>
   19a76:	2500      	movs	r5, #0
   19a78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a7c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19a80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a84:	4620      	mov	r0, r4
   19a86:	4798      	blx	r3
   19a88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a8c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19a90:	3301      	adds	r3, #1
   19a92:	4629      	mov	r1, r5
   19a94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a98:	f7fd bb6b 	b.w	17172 <d_print_comp_inner+0x18e>
   19a9c:	00022cdc 	.word	0x00022cdc
   19aa0:	000247a0 	.word	0x000247a0
   19aa4:	000247b8 	.word	0x000247b8
   19aa8:	4637      	mov	r7, r6
   19aaa:	f7ff bbe6 	b.w	1927a <d_print_comp_inner+0x2296>
   19aae:	2500      	movs	r5, #0
   19ab0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ab4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19ab8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19abc:	4620      	mov	r0, r4
   19abe:	4798      	blx	r3
   19ac0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ac4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19ac8:	3301      	adds	r3, #1
   19aca:	4629      	mov	r1, r5
   19acc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ad0:	e4d3      	b.n	1947a <d_print_comp_inner+0x2496>
   19ad2:	4671      	mov	r1, lr
   19ad4:	6002      	str	r2, [r0, #0]
   19ad6:	3104      	adds	r1, #4
   19ad8:	4620      	mov	r0, r4
   19ada:	f7fb f9bf 	bl	14e5c <d_lookup_template_argument.isra.6>
   19ade:	2800      	cmp	r0, #0
   19ae0:	f47f ad3c 	bne.w	1955c <d_print_comp_inner+0x2578>
   19ae4:	f7fd bb60 	b.w	171a8 <d_print_comp_inner+0x1c4>
   19ae8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19aec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19af0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19af4:	4620      	mov	r0, r4
   19af6:	4798      	blx	r3
   19af8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19afc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19b00:	3301      	adds	r3, #1
   19b02:	4631      	mov	r1, r6
   19b04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b08:	f7fe bc02 	b.w	18310 <d_print_comp_inner+0x132c>
   19b0c:	2301      	movs	r3, #1
   19b0e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   19b12:	f7fd bb35 	b.w	17180 <d_print_comp_inner+0x19c>
   19b16:	4618      	mov	r0, r3
   19b18:	4407      	add	r7, r0
   19b1a:	f7ff bb81 	b.w	19220 <d_print_comp_inner+0x223c>
   19b1e:	2000      	movs	r0, #0
   19b20:	4407      	add	r7, r0
   19b22:	f7ff bb7d 	b.w	19220 <d_print_comp_inner+0x223c>
   19b26:	4607      	mov	r7, r0
   19b28:	f7ff bba7 	b.w	1927a <d_print_comp_inner+0x2296>

00019b2c <d_print_comp>:
   19b2c:	b510      	push	{r4, lr}
   19b2e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19b32:	b082      	sub	sp, #8
   19b34:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19b38:	4604      	mov	r4, r0
   19b3a:	e88d 000c 	stmia.w	sp, {r2, r3}
   19b3e:	f7fd fa51 	bl	16fe4 <d_print_comp_inner>
   19b42:	9b01      	ldr	r3, [sp, #4]
   19b44:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19b48:	b002      	add	sp, #8
   19b4a:	bd10      	pop	{r4, pc}

00019b4c <d_print_mod>:
   19b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b50:	7813      	ldrb	r3, [r2, #0]
   19b52:	3b03      	subs	r3, #3
   19b54:	b082      	sub	sp, #8
   19b56:	4615      	mov	r5, r2
   19b58:	4604      	mov	r4, r0
   19b5a:	4688      	mov	r8, r1
   19b5c:	2b49      	cmp	r3, #73	; 0x49
   19b5e:	f200 8223 	bhi.w	19fa8 <d_print_mod+0x45c>
   19b62:	e8df f013 	tbh	[pc, r3, lsl #1]
   19b66:	01e7      	.short	0x01e7
   19b68:	02210221 	.word	0x02210221
   19b6c:	02210221 	.word	0x02210221
   19b70:	02210221 	.word	0x02210221
   19b74:	02210221 	.word	0x02210221
   19b78:	02210221 	.word	0x02210221
   19b7c:	02210221 	.word	0x02210221
   19b80:	02210221 	.word	0x02210221
   19b84:	02210221 	.word	0x02210221
   19b88:	02210221 	.word	0x02210221
   19b8c:	02210221 	.word	0x02210221
   19b90:	01e90221 	.word	0x01e90221
   19b94:	01a80182 	.word	0x01a80182
   19b98:	018201e9 	.word	0x018201e9
   19b9c:	01cd01a8 	.word	0x01cd01a8
   19ba0:	006f01da 	.word	0x006f01da
   19ba4:	009c008c 	.word	0x009c008c
   19ba8:	00cf00ab 	.word	0x00cf00ab
   19bac:	022100f4 	.word	0x022100f4
   19bb0:	02210221 	.word	0x02210221
   19bb4:	01190221 	.word	0x01190221
   19bb8:	015c0221 	.word	0x015c0221
   19bbc:	02210221 	.word	0x02210221
   19bc0:	02210221 	.word	0x02210221
   19bc4:	02210221 	.word	0x02210221
   19bc8:	02210221 	.word	0x02210221
   19bcc:	02210221 	.word	0x02210221
   19bd0:	02210221 	.word	0x02210221
   19bd4:	02210221 	.word	0x02210221
   19bd8:	02210221 	.word	0x02210221
   19bdc:	02210221 	.word	0x02210221
   19be0:	02210221 	.word	0x02210221
   19be4:	02210221 	.word	0x02210221
   19be8:	02210221 	.word	0x02210221
   19bec:	02210221 	.word	0x02210221
   19bf0:	02210221 	.word	0x02210221
   19bf4:	02210221 	.word	0x02210221
   19bf8:	004a      	.short	0x004a
   19bfa:	4dd3      	ldr	r5, [pc, #844]	; (19f48 <d_print_mod+0x3fc>)
   19bfc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19c00:	f105 0711 	add.w	r7, r5, #17
   19c04:	f04f 0800 	mov.w	r8, #0
   19c08:	e008      	b.n	19c1c <d_print_mod+0xd0>
   19c0a:	460b      	mov	r3, r1
   19c0c:	3101      	adds	r1, #1
   19c0e:	42bd      	cmp	r5, r7
   19c10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c14:	54e6      	strb	r6, [r4, r3]
   19c16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19c1a:	d02d      	beq.n	19c78 <d_print_mod+0x12c>
   19c1c:	29ff      	cmp	r1, #255	; 0xff
   19c1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19c22:	d1f2      	bne.n	19c0a <d_print_mod+0xbe>
   19c24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c28:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19c2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c30:	4620      	mov	r0, r4
   19c32:	4798      	blx	r3
   19c34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c38:	3301      	adds	r3, #1
   19c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c3e:	2101      	movs	r1, #1
   19c40:	2300      	movs	r3, #0
   19c42:	e7e4      	b.n	19c0e <d_print_mod+0xc2>
   19c44:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19c48:	29ff      	cmp	r1, #255	; 0xff
   19c4a:	f000 81f7 	beq.w	1a03c <d_print_mod+0x4f0>
   19c4e:	1c4a      	adds	r2, r1, #1
   19c50:	2320      	movs	r3, #32
   19c52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19c56:	5463      	strb	r3, [r4, r1]
   19c58:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19c5c:	68aa      	ldr	r2, [r5, #8]
   19c5e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19c62:	9200      	str	r2, [sp, #0]
   19c64:	4641      	mov	r1, r8
   19c66:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19c6a:	4620      	mov	r0, r4
   19c6c:	9301      	str	r3, [sp, #4]
   19c6e:	f7fd f9b9 	bl	16fe4 <d_print_comp_inner>
   19c72:	9b01      	ldr	r3, [sp, #4]
   19c74:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19c78:	b002      	add	sp, #8
   19c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19c7e:	f011 0504 	ands.w	r5, r1, #4
   19c82:	d1f9      	bne.n	19c78 <d_print_mod+0x12c>
   19c84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19c88:	2bff      	cmp	r3, #255	; 0xff
   19c8a:	f000 821c 	beq.w	1a0c6 <d_print_mod+0x57a>
   19c8e:	222a      	movs	r2, #42	; 0x2a
   19c90:	1c59      	adds	r1, r3, #1
   19c92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19c96:	54e2      	strb	r2, [r4, r3]
   19c98:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19c9c:	e7ec      	b.n	19c78 <d_print_mod+0x12c>
   19c9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ca2:	29ff      	cmp	r1, #255	; 0xff
   19ca4:	f000 81b9 	beq.w	1a01a <d_print_mod+0x4ce>
   19ca8:	1c4a      	adds	r2, r1, #1
   19caa:	2326      	movs	r3, #38	; 0x26
   19cac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19cb0:	5463      	strb	r3, [r4, r1]
   19cb2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19cb6:	b002      	add	sp, #8
   19cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19cbc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19cc0:	4da2      	ldr	r5, [pc, #648]	; (19f4c <d_print_mod+0x400>)
   19cc2:	f04f 0800 	mov.w	r8, #0
   19cc6:	1caf      	adds	r7, r5, #2
   19cc8:	e008      	b.n	19cdc <d_print_mod+0x190>
   19cca:	460b      	mov	r3, r1
   19ccc:	3101      	adds	r1, #1
   19cce:	42bd      	cmp	r5, r7
   19cd0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19cd4:	54e6      	strb	r6, [r4, r3]
   19cd6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19cda:	d0cd      	beq.n	19c78 <d_print_mod+0x12c>
   19cdc:	29ff      	cmp	r1, #255	; 0xff
   19cde:	f815 6b01 	ldrb.w	r6, [r5], #1
   19ce2:	d1f2      	bne.n	19cca <d_print_mod+0x17e>
   19ce4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ce8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19cec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19cf0:	4620      	mov	r0, r4
   19cf2:	4798      	blx	r3
   19cf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19cf8:	3301      	adds	r3, #1
   19cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cfe:	2101      	movs	r1, #1
   19d00:	2300      	movs	r3, #0
   19d02:	e7e4      	b.n	19cce <d_print_mod+0x182>
   19d04:	4d92      	ldr	r5, [pc, #584]	; (19f50 <d_print_mod+0x404>)
   19d06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19d0a:	f105 0708 	add.w	r7, r5, #8
   19d0e:	f04f 0800 	mov.w	r8, #0
   19d12:	e008      	b.n	19d26 <d_print_mod+0x1da>
   19d14:	460b      	mov	r3, r1
   19d16:	3101      	adds	r1, #1
   19d18:	42bd      	cmp	r5, r7
   19d1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d1e:	54e6      	strb	r6, [r4, r3]
   19d20:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19d24:	d0a8      	beq.n	19c78 <d_print_mod+0x12c>
   19d26:	29ff      	cmp	r1, #255	; 0xff
   19d28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19d2c:	d1f2      	bne.n	19d14 <d_print_mod+0x1c8>
   19d2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19d36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d3a:	4620      	mov	r0, r4
   19d3c:	4798      	blx	r3
   19d3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d42:	3301      	adds	r3, #1
   19d44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d48:	2101      	movs	r1, #1
   19d4a:	2300      	movs	r3, #0
   19d4c:	e7e4      	b.n	19d18 <d_print_mod+0x1cc>
   19d4e:	4d81      	ldr	r5, [pc, #516]	; (19f54 <d_print_mod+0x408>)
   19d50:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19d54:	f105 070a 	add.w	r7, r5, #10
   19d58:	f04f 0800 	mov.w	r8, #0
   19d5c:	e008      	b.n	19d70 <d_print_mod+0x224>
   19d5e:	460b      	mov	r3, r1
   19d60:	3101      	adds	r1, #1
   19d62:	42bd      	cmp	r5, r7
   19d64:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d68:	54e6      	strb	r6, [r4, r3]
   19d6a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19d6e:	d083      	beq.n	19c78 <d_print_mod+0x12c>
   19d70:	29ff      	cmp	r1, #255	; 0xff
   19d72:	f815 6b01 	ldrb.w	r6, [r5], #1
   19d76:	d1f2      	bne.n	19d5e <d_print_mod+0x212>
   19d78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19d80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d84:	4620      	mov	r0, r4
   19d86:	4798      	blx	r3
   19d88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d8c:	3301      	adds	r3, #1
   19d8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d92:	2101      	movs	r1, #1
   19d94:	2300      	movs	r3, #0
   19d96:	e7e4      	b.n	19d62 <d_print_mod+0x216>
   19d98:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   19d9c:	2b28      	cmp	r3, #40	; 0x28
   19d9e:	d00b      	beq.n	19db8 <d_print_mod+0x26c>
   19da0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19da4:	2bff      	cmp	r3, #255	; 0xff
   19da6:	f000 8126 	beq.w	19ff6 <d_print_mod+0x4aa>
   19daa:	2220      	movs	r2, #32
   19dac:	1c59      	adds	r1, r3, #1
   19dae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19db2:	54e2      	strb	r2, [r4, r3]
   19db4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19db8:	686a      	ldr	r2, [r5, #4]
   19dba:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19dbe:	4d66      	ldr	r5, [pc, #408]	; (19f58 <d_print_mod+0x40c>)
   19dc0:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19dc4:	4641      	mov	r1, r8
   19dc6:	4620      	mov	r0, r4
   19dc8:	9301      	str	r3, [sp, #4]
   19dca:	9200      	str	r2, [sp, #0]
   19dcc:	f7fd f90a 	bl	16fe4 <d_print_comp_inner>
   19dd0:	9b01      	ldr	r3, [sp, #4]
   19dd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19dd6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19dda:	1cef      	adds	r7, r5, #3
   19ddc:	f04f 0800 	mov.w	r8, #0
   19de0:	e009      	b.n	19df6 <d_print_mod+0x2aa>
   19de2:	460b      	mov	r3, r1
   19de4:	3101      	adds	r1, #1
   19de6:	42bd      	cmp	r5, r7
   19de8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19dec:	54e6      	strb	r6, [r4, r3]
   19dee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19df2:	f43f af41 	beq.w	19c78 <d_print_mod+0x12c>
   19df6:	29ff      	cmp	r1, #255	; 0xff
   19df8:	f815 6b01 	ldrb.w	r6, [r5], #1
   19dfc:	d1f1      	bne.n	19de2 <d_print_mod+0x296>
   19dfe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e02:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19e06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19e0a:	4620      	mov	r0, r4
   19e0c:	4798      	blx	r3
   19e0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e12:	3301      	adds	r3, #1
   19e14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e18:	2101      	movs	r1, #1
   19e1a:	2300      	movs	r3, #0
   19e1c:	e7e3      	b.n	19de6 <d_print_mod+0x29a>
   19e1e:	4e4f      	ldr	r6, [pc, #316]	; (19f5c <d_print_mod+0x410>)
   19e20:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19e24:	f106 0a0a 	add.w	sl, r6, #10
   19e28:	f04f 0900 	mov.w	r9, #0
   19e2c:	e009      	b.n	19e42 <d_print_mod+0x2f6>
   19e2e:	460b      	mov	r3, r1
   19e30:	3101      	adds	r1, #1
   19e32:	4556      	cmp	r6, sl
   19e34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19e38:	54e7      	strb	r7, [r4, r3]
   19e3a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19e3e:	f000 80c0 	beq.w	19fc2 <d_print_mod+0x476>
   19e42:	29ff      	cmp	r1, #255	; 0xff
   19e44:	f816 7b01 	ldrb.w	r7, [r6], #1
   19e48:	d1f1      	bne.n	19e2e <d_print_mod+0x2e2>
   19e4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e4e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19e52:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19e56:	4620      	mov	r0, r4
   19e58:	4798      	blx	r3
   19e5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e5e:	3301      	adds	r3, #1
   19e60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e64:	2101      	movs	r1, #1
   19e66:	2300      	movs	r3, #0
   19e68:	e7e3      	b.n	19e32 <d_print_mod+0x2e6>
   19e6a:	4d3d      	ldr	r5, [pc, #244]	; (19f60 <d_print_mod+0x414>)
   19e6c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19e70:	f105 0709 	add.w	r7, r5, #9
   19e74:	f04f 0800 	mov.w	r8, #0
   19e78:	e009      	b.n	19e8e <d_print_mod+0x342>
   19e7a:	460b      	mov	r3, r1
   19e7c:	3101      	adds	r1, #1
   19e7e:	42bd      	cmp	r5, r7
   19e80:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19e84:	54e6      	strb	r6, [r4, r3]
   19e86:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19e8a:	f43f aef5 	beq.w	19c78 <d_print_mod+0x12c>
   19e8e:	29ff      	cmp	r1, #255	; 0xff
   19e90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19e94:	d1f1      	bne.n	19e7a <d_print_mod+0x32e>
   19e96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e9a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19e9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19ea2:	4620      	mov	r0, r4
   19ea4:	4798      	blx	r3
   19ea6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19eaa:	3301      	adds	r3, #1
   19eac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19eb0:	2101      	movs	r1, #1
   19eb2:	2300      	movs	r3, #0
   19eb4:	e7e3      	b.n	19e7e <d_print_mod+0x332>
   19eb6:	4d2b      	ldr	r5, [pc, #172]	; (19f64 <d_print_mod+0x418>)
   19eb8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ebc:	1daf      	adds	r7, r5, #6
   19ebe:	f04f 0800 	mov.w	r8, #0
   19ec2:	e009      	b.n	19ed8 <d_print_mod+0x38c>
   19ec4:	460b      	mov	r3, r1
   19ec6:	3101      	adds	r1, #1
   19ec8:	42bd      	cmp	r5, r7
   19eca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ece:	54e6      	strb	r6, [r4, r3]
   19ed0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19ed4:	f43f aed0 	beq.w	19c78 <d_print_mod+0x12c>
   19ed8:	29ff      	cmp	r1, #255	; 0xff
   19eda:	f815 6b01 	ldrb.w	r6, [r5], #1
   19ede:	d1f1      	bne.n	19ec4 <d_print_mod+0x378>
   19ee0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ee4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19ee8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19eec:	4620      	mov	r0, r4
   19eee:	4798      	blx	r3
   19ef0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ef4:	3301      	adds	r3, #1
   19ef6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19efa:	2101      	movs	r1, #1
   19efc:	2300      	movs	r3, #0
   19efe:	e7e3      	b.n	19ec8 <d_print_mod+0x37c>
   19f00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19f04:	2bff      	cmp	r3, #255	; 0xff
   19f06:	f000 80cc 	beq.w	1a0a2 <d_print_mod+0x556>
   19f0a:	2220      	movs	r2, #32
   19f0c:	1c59      	adds	r1, r3, #1
   19f0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f12:	54e2      	strb	r2, [r4, r3]
   19f14:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19f18:	e6c3      	b.n	19ca2 <d_print_mod+0x156>
   19f1a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19f1e:	2bff      	cmp	r3, #255	; 0xff
   19f20:	f000 80ad 	beq.w	1a07e <d_print_mod+0x532>
   19f24:	2220      	movs	r2, #32
   19f26:	1c59      	adds	r1, r3, #1
   19f28:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f2c:	54e2      	strb	r2, [r4, r3]
   19f2e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19f32:	e6c5      	b.n	19cc0 <d_print_mod+0x174>
   19f34:	686a      	ldr	r2, [r5, #4]
   19f36:	e692      	b.n	19c5e <d_print_mod+0x112>
   19f38:	4d0b      	ldr	r5, [pc, #44]	; (19f68 <d_print_mod+0x41c>)
   19f3a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19f3e:	f105 0709 	add.w	r7, r5, #9
   19f42:	f04f 0800 	mov.w	r8, #0
   19f46:	e01b      	b.n	19f80 <d_print_mod+0x434>
   19f48:	00024883 	.word	0x00024883
   19f4c:	00024898 	.word	0x00024898
   19f50:	0002489b 	.word	0x0002489b
   19f54:	000248a8 	.word	0x000248a8
   19f58:	000248b4 	.word	0x000248b4
   19f5c:	000248b8 	.word	0x000248b8
   19f60:	0002486f 	.word	0x0002486f
   19f64:	0002487c 	.word	0x0002487c
   19f68:	00024863 	.word	0x00024863
   19f6c:	460b      	mov	r3, r1
   19f6e:	3101      	adds	r1, #1
   19f70:	42af      	cmp	r7, r5
   19f72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f76:	54e6      	strb	r6, [r4, r3]
   19f78:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19f7c:	f43f ae7c 	beq.w	19c78 <d_print_mod+0x12c>
   19f80:	29ff      	cmp	r1, #255	; 0xff
   19f82:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19f86:	d1f1      	bne.n	19f6c <d_print_mod+0x420>
   19f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f94:	4620      	mov	r0, r4
   19f96:	4798      	blx	r3
   19f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f9c:	3301      	adds	r3, #1
   19f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19fa2:	2101      	movs	r1, #1
   19fa4:	2300      	movs	r3, #0
   19fa6:	e7e3      	b.n	19f70 <d_print_mod+0x424>
   19fa8:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19fac:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19fb0:	462a      	mov	r2, r5
   19fb2:	9301      	str	r3, [sp, #4]
   19fb4:	9500      	str	r5, [sp, #0]
   19fb6:	f7fd f815 	bl	16fe4 <d_print_comp_inner>
   19fba:	9b01      	ldr	r3, [sp, #4]
   19fbc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19fc0:	e65a      	b.n	19c78 <d_print_mod+0x12c>
   19fc2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19fc6:	686a      	ldr	r2, [r5, #4]
   19fc8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19fcc:	4641      	mov	r1, r8
   19fce:	4620      	mov	r0, r4
   19fd0:	9301      	str	r3, [sp, #4]
   19fd2:	9200      	str	r2, [sp, #0]
   19fd4:	f7fd f806 	bl	16fe4 <d_print_comp_inner>
   19fd8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19fdc:	9b01      	ldr	r3, [sp, #4]
   19fde:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19fe2:	29ff      	cmp	r1, #255	; 0xff
   19fe4:	d03a      	beq.n	1a05c <d_print_mod+0x510>
   19fe6:	1c4a      	adds	r2, r1, #1
   19fe8:	2329      	movs	r3, #41	; 0x29
   19fea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19fee:	5463      	strb	r3, [r4, r1]
   19ff0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19ff4:	e640      	b.n	19c78 <d_print_mod+0x12c>
   19ff6:	2600      	movs	r6, #0
   19ff8:	4619      	mov	r1, r3
   19ffa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19ffe:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a002:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a006:	4798      	blx	r3
   1a008:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a00c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1a010:	1c5a      	adds	r2, r3, #1
   1a012:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a016:	4633      	mov	r3, r6
   1a018:	e6c7      	b.n	19daa <d_print_mod+0x25e>
   1a01a:	2500      	movs	r5, #0
   1a01c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a020:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a024:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a028:	4620      	mov	r0, r4
   1a02a:	4798      	blx	r3
   1a02c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a030:	3301      	adds	r3, #1
   1a032:	4629      	mov	r1, r5
   1a034:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a038:	2201      	movs	r2, #1
   1a03a:	e636      	b.n	19caa <d_print_mod+0x15e>
   1a03c:	2600      	movs	r6, #0
   1a03e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a042:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a046:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a04a:	4798      	blx	r3
   1a04c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a050:	3301      	adds	r3, #1
   1a052:	4631      	mov	r1, r6
   1a054:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a058:	2201      	movs	r2, #1
   1a05a:	e5f9      	b.n	19c50 <d_print_mod+0x104>
   1a05c:	2500      	movs	r5, #0
   1a05e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a062:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a066:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a06a:	4620      	mov	r0, r4
   1a06c:	4798      	blx	r3
   1a06e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a072:	3301      	adds	r3, #1
   1a074:	4629      	mov	r1, r5
   1a076:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a07a:	2201      	movs	r2, #1
   1a07c:	e7b4      	b.n	19fe8 <d_print_mod+0x49c>
   1a07e:	2500      	movs	r5, #0
   1a080:	4619      	mov	r1, r3
   1a082:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a086:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a08a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a08e:	4798      	blx	r3
   1a090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a094:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a098:	1c5a      	adds	r2, r3, #1
   1a09a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a09e:	462b      	mov	r3, r5
   1a0a0:	e740      	b.n	19f24 <d_print_mod+0x3d8>
   1a0a2:	2500      	movs	r5, #0
   1a0a4:	4619      	mov	r1, r3
   1a0a6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a0aa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a0ae:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a0b2:	4798      	blx	r3
   1a0b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0b8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a0bc:	1c5a      	adds	r2, r3, #1
   1a0be:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a0c2:	462b      	mov	r3, r5
   1a0c4:	e721      	b.n	19f0a <d_print_mod+0x3be>
   1a0c6:	4619      	mov	r1, r3
   1a0c8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a0cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a0d0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a0d4:	4798      	blx	r3
   1a0d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0da:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1a0de:	1c5a      	adds	r2, r3, #1
   1a0e0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a0e4:	462b      	mov	r3, r5
   1a0e6:	e5d2      	b.n	19c8e <d_print_mod+0x142>

0001a0e8 <d_print_mod_list>:
   1a0e8:	2a00      	cmp	r2, #0
   1a0ea:	f000 80a1 	beq.w	1a230 <d_print_mod_list+0x148>
   1a0ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0f2:	461e      	mov	r6, r3
   1a0f4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   1a0f8:	b089      	sub	sp, #36	; 0x24
   1a0fa:	4605      	mov	r5, r0
   1a0fc:	bb43      	cbnz	r3, 1a150 <d_print_mod_list+0x68>
   1a0fe:	460f      	mov	r7, r1
   1a100:	4614      	mov	r4, r2
   1a102:	f04f 0801 	mov.w	r8, #1
   1a106:	e002      	b.n	1a10e <d_print_mod_list+0x26>
   1a108:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a10c:	bb03      	cbnz	r3, 1a150 <d_print_mod_list+0x68>
   1a10e:	68a3      	ldr	r3, [r4, #8]
   1a110:	b9db      	cbnz	r3, 1a14a <d_print_mod_list+0x62>
   1a112:	6862      	ldr	r2, [r4, #4]
   1a114:	7813      	ldrb	r3, [r2, #0]
   1a116:	b92e      	cbnz	r6, 1a124 <d_print_mod_list+0x3c>
   1a118:	f1a3 011c 	sub.w	r1, r3, #28
   1a11c:	2904      	cmp	r1, #4
   1a11e:	d914      	bls.n	1a14a <d_print_mod_list+0x62>
   1a120:	2b4c      	cmp	r3, #76	; 0x4c
   1a122:	d012      	beq.n	1a14a <d_print_mod_list+0x62>
   1a124:	68e1      	ldr	r1, [r4, #12]
   1a126:	f8c4 8008 	str.w	r8, [r4, #8]
   1a12a:	2b29      	cmp	r3, #41	; 0x29
   1a12c:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   1a130:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   1a134:	d00f      	beq.n	1a156 <d_print_mod_list+0x6e>
   1a136:	2b2a      	cmp	r3, #42	; 0x2a
   1a138:	d018      	beq.n	1a16c <d_print_mod_list+0x84>
   1a13a:	2b02      	cmp	r3, #2
   1a13c:	d021      	beq.n	1a182 <d_print_mod_list+0x9a>
   1a13e:	4639      	mov	r1, r7
   1a140:	4628      	mov	r0, r5
   1a142:	f7ff fd03 	bl	19b4c <d_print_mod>
   1a146:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a14a:	6824      	ldr	r4, [r4, #0]
   1a14c:	2c00      	cmp	r4, #0
   1a14e:	d1db      	bne.n	1a108 <d_print_mod_list+0x20>
   1a150:	b009      	add	sp, #36	; 0x24
   1a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a156:	6823      	ldr	r3, [r4, #0]
   1a158:	3208      	adds	r2, #8
   1a15a:	4639      	mov	r1, r7
   1a15c:	4628      	mov	r0, r5
   1a15e:	f000 f9d9 	bl	1a514 <d_print_function_type.isra.11>
   1a162:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a166:	b009      	add	sp, #36	; 0x24
   1a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a16c:	6823      	ldr	r3, [r4, #0]
   1a16e:	3204      	adds	r2, #4
   1a170:	4639      	mov	r1, r7
   1a172:	4628      	mov	r0, r5
   1a174:	f000 f8f2 	bl	1a35c <d_print_array_type.isra.10>
   1a178:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a17c:	b009      	add	sp, #36	; 0x24
   1a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a182:	2600      	movs	r6, #0
   1a184:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   1a188:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   1a18c:	6852      	ldr	r2, [r2, #4]
   1a18e:	4639      	mov	r1, r7
   1a190:	4628      	mov	r0, r5
   1a192:	f7ff fccb 	bl	19b2c <d_print_comp>
   1a196:	f017 0a04 	ands.w	sl, r7, #4
   1a19a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   1a19e:	d023      	beq.n	1a1e8 <d_print_mod_list+0x100>
   1a1a0:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a1a4:	29ff      	cmp	r1, #255	; 0xff
   1a1a6:	f000 80c1 	beq.w	1a32c <d_print_mod_list+0x244>
   1a1aa:	1c4a      	adds	r2, r1, #1
   1a1ac:	232e      	movs	r3, #46	; 0x2e
   1a1ae:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   1a1b2:	546b      	strb	r3, [r5, r1]
   1a1b4:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   1a1b8:	6863      	ldr	r3, [r4, #4]
   1a1ba:	689c      	ldr	r4, [r3, #8]
   1a1bc:	7823      	ldrb	r3, [r4, #0]
   1a1be:	2b46      	cmp	r3, #70	; 0x46
   1a1c0:	d037      	beq.n	1a232 <d_print_mod_list+0x14a>
   1a1c2:	f1a3 021c 	sub.w	r2, r3, #28
   1a1c6:	2a04      	cmp	r2, #4
   1a1c8:	d90b      	bls.n	1a1e2 <d_print_mod_list+0xfa>
   1a1ca:	2b4c      	cmp	r3, #76	; 0x4c
   1a1cc:	d009      	beq.n	1a1e2 <d_print_mod_list+0xfa>
   1a1ce:	4622      	mov	r2, r4
   1a1d0:	4639      	mov	r1, r7
   1a1d2:	4628      	mov	r0, r5
   1a1d4:	f7ff fcaa 	bl	19b2c <d_print_comp>
   1a1d8:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1a1dc:	b009      	add	sp, #36	; 0x24
   1a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1e2:	6864      	ldr	r4, [r4, #4]
   1a1e4:	7823      	ldrb	r3, [r4, #0]
   1a1e6:	e7ec      	b.n	1a1c2 <d_print_mod_list+0xda>
   1a1e8:	4e58      	ldr	r6, [pc, #352]	; (1a34c <d_print_mod_list+0x264>)
   1a1ea:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a1ee:	f106 0b02 	add.w	fp, r6, #2
   1a1f2:	e009      	b.n	1a208 <d_print_mod_list+0x120>
   1a1f4:	460b      	mov	r3, r1
   1a1f6:	3101      	adds	r1, #1
   1a1f8:	455e      	cmp	r6, fp
   1a1fa:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a1fe:	f805 8003 	strb.w	r8, [r5, r3]
   1a202:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a206:	d0d7      	beq.n	1a1b8 <d_print_mod_list+0xd0>
   1a208:	29ff      	cmp	r1, #255	; 0xff
   1a20a:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a20e:	d1f1      	bne.n	1a1f4 <d_print_mod_list+0x10c>
   1a210:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a214:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   1a218:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a21c:	4628      	mov	r0, r5
   1a21e:	4798      	blx	r3
   1a220:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a224:	3301      	adds	r3, #1
   1a226:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a22a:	2101      	movs	r1, #1
   1a22c:	2300      	movs	r3, #0
   1a22e:	e7e3      	b.n	1a1f8 <d_print_mod_list+0x110>
   1a230:	4770      	bx	lr
   1a232:	4e47      	ldr	r6, [pc, #284]	; (1a350 <d_print_mod_list+0x268>)
   1a234:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a238:	f106 0a0d 	add.w	sl, r6, #13
   1a23c:	f04f 0b00 	mov.w	fp, #0
   1a240:	e009      	b.n	1a256 <d_print_mod_list+0x16e>
   1a242:	460b      	mov	r3, r1
   1a244:	3101      	adds	r1, #1
   1a246:	45b2      	cmp	sl, r6
   1a248:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a24c:	f805 8003 	strb.w	r8, [r5, r3]
   1a250:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a254:	d013      	beq.n	1a27e <d_print_mod_list+0x196>
   1a256:	29ff      	cmp	r1, #255	; 0xff
   1a258:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a25c:	d1f1      	bne.n	1a242 <d_print_mod_list+0x15a>
   1a25e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a262:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a266:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a26a:	4628      	mov	r0, r5
   1a26c:	4798      	blx	r3
   1a26e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a272:	3301      	adds	r3, #1
   1a274:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a278:	2101      	movs	r1, #1
   1a27a:	2300      	movs	r3, #0
   1a27c:	e7e3      	b.n	1a246 <d_print_mod_list+0x15e>
   1a27e:	68a2      	ldr	r2, [r4, #8]
   1a280:	4934      	ldr	r1, [pc, #208]	; (1a354 <d_print_mod_list+0x26c>)
   1a282:	3201      	adds	r2, #1
   1a284:	a801      	add	r0, sp, #4
   1a286:	f004 fd49 	bl	1ed1c <sprintf>
   1a28a:	a801      	add	r0, sp, #4
   1a28c:	f004 fef8 	bl	1f080 <strlen>
   1a290:	b328      	cbz	r0, 1a2de <d_print_mod_list+0x1f6>
   1a292:	ae01      	add	r6, sp, #4
   1a294:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a298:	eb06 0a00 	add.w	sl, r6, r0
   1a29c:	f04f 0b00 	mov.w	fp, #0
   1a2a0:	e009      	b.n	1a2b6 <d_print_mod_list+0x1ce>
   1a2a2:	460b      	mov	r3, r1
   1a2a4:	3101      	adds	r1, #1
   1a2a6:	45b2      	cmp	sl, r6
   1a2a8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a2ac:	f805 8003 	strb.w	r8, [r5, r3]
   1a2b0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a2b4:	d015      	beq.n	1a2e2 <d_print_mod_list+0x1fa>
   1a2b6:	29ff      	cmp	r1, #255	; 0xff
   1a2b8:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a2bc:	d1f1      	bne.n	1a2a2 <d_print_mod_list+0x1ba>
   1a2be:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a2c2:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a2c6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a2ca:	4628      	mov	r0, r5
   1a2cc:	4798      	blx	r3
   1a2ce:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a2d2:	3301      	adds	r3, #1
   1a2d4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a2d8:	2101      	movs	r1, #1
   1a2da:	2300      	movs	r3, #0
   1a2dc:	e7e3      	b.n	1a2a6 <d_print_mod_list+0x1be>
   1a2de:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1a2e2:	4e1d      	ldr	r6, [pc, #116]	; (1a358 <d_print_mod_list+0x270>)
   1a2e4:	f04f 0b00 	mov.w	fp, #0
   1a2e8:	f106 0a03 	add.w	sl, r6, #3
   1a2ec:	e00a      	b.n	1a304 <d_print_mod_list+0x21c>
   1a2ee:	460b      	mov	r3, r1
   1a2f0:	3101      	adds	r1, #1
   1a2f2:	45b2      	cmp	sl, r6
   1a2f4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1a2f8:	f805 8003 	strb.w	r8, [r5, r3]
   1a2fc:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   1a300:	f43f af6f 	beq.w	1a1e2 <d_print_mod_list+0xfa>
   1a304:	29ff      	cmp	r1, #255	; 0xff
   1a306:	f816 8b01 	ldrb.w	r8, [r6], #1
   1a30a:	d1f0      	bne.n	1a2ee <d_print_mod_list+0x206>
   1a30c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a310:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   1a314:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a318:	4628      	mov	r0, r5
   1a31a:	4798      	blx	r3
   1a31c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a320:	3301      	adds	r3, #1
   1a322:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a326:	2101      	movs	r1, #1
   1a328:	2300      	movs	r3, #0
   1a32a:	e7e2      	b.n	1a2f2 <d_print_mod_list+0x20a>
   1a32c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1a330:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1a334:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   1a338:	4628      	mov	r0, r5
   1a33a:	4798      	blx	r3
   1a33c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a340:	3301      	adds	r3, #1
   1a342:	4631      	mov	r1, r6
   1a344:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a348:	2201      	movs	r2, #1
   1a34a:	e72f      	b.n	1a1ac <d_print_mod_list+0xc4>
   1a34c:	000245e8 	.word	0x000245e8
   1a350:	000245ec 	.word	0x000245ec
   1a354:	00024598 	.word	0x00024598
   1a358:	000245fc 	.word	0x000245fc

0001a35c <d_print_array_type.isra.10>:
   1a35c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a360:	4604      	mov	r4, r0
   1a362:	460f      	mov	r7, r1
   1a364:	4690      	mov	r8, r2
   1a366:	b163      	cbz	r3, 1a382 <d_print_array_type.isra.10+0x26>
   1a368:	461e      	mov	r6, r3
   1a36a:	461a      	mov	r2, r3
   1a36c:	6893      	ldr	r3, [r2, #8]
   1a36e:	b393      	cbz	r3, 1a3d6 <d_print_array_type.isra.10+0x7a>
   1a370:	6812      	ldr	r2, [r2, #0]
   1a372:	2a00      	cmp	r2, #0
   1a374:	d1fa      	bne.n	1a36c <d_print_array_type.isra.10+0x10>
   1a376:	4613      	mov	r3, r2
   1a378:	4639      	mov	r1, r7
   1a37a:	4632      	mov	r2, r6
   1a37c:	4620      	mov	r0, r4
   1a37e:	f7ff feb3 	bl	1a0e8 <d_print_mod_list>
   1a382:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a386:	29ff      	cmp	r1, #255	; 0xff
   1a388:	f000 808d 	beq.w	1a4a6 <d_print_array_type.isra.10+0x14a>
   1a38c:	1c4b      	adds	r3, r1, #1
   1a38e:	2220      	movs	r2, #32
   1a390:	2bff      	cmp	r3, #255	; 0xff
   1a392:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a396:	5462      	strb	r2, [r4, r1]
   1a398:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a39c:	d068      	beq.n	1a470 <d_print_array_type.isra.10+0x114>
   1a39e:	225b      	movs	r2, #91	; 0x5b
   1a3a0:	1c59      	adds	r1, r3, #1
   1a3a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a3a6:	54e2      	strb	r2, [r4, r3]
   1a3a8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a3ac:	f8d8 2000 	ldr.w	r2, [r8]
   1a3b0:	b12a      	cbz	r2, 1a3be <d_print_array_type.isra.10+0x62>
   1a3b2:	4639      	mov	r1, r7
   1a3b4:	4620      	mov	r0, r4
   1a3b6:	f7ff fbb9 	bl	19b2c <d_print_comp>
   1a3ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a3be:	29ff      	cmp	r1, #255	; 0xff
   1a3c0:	f000 8082 	beq.w	1a4c8 <d_print_array_type.isra.10+0x16c>
   1a3c4:	1c4a      	adds	r2, r1, #1
   1a3c6:	235d      	movs	r3, #93	; 0x5d
   1a3c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a3cc:	5463      	strb	r3, [r4, r1]
   1a3ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a3d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3d6:	6852      	ldr	r2, [r2, #4]
   1a3d8:	7812      	ldrb	r2, [r2, #0]
   1a3da:	2a2a      	cmp	r2, #42	; 0x2a
   1a3dc:	d03f      	beq.n	1a45e <d_print_array_type.isra.10+0x102>
   1a3de:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a510 <d_print_array_type.isra.10+0x1b4>
   1a3e2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a3e6:	461d      	mov	r5, r3
   1a3e8:	f109 0b02 	add.w	fp, r9, #2
   1a3ec:	e00a      	b.n	1a404 <d_print_array_type.isra.10+0xa8>
   1a3ee:	460b      	mov	r3, r1
   1a3f0:	45cb      	cmp	fp, r9
   1a3f2:	f101 0101 	add.w	r1, r1, #1
   1a3f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a3fa:	f804 a003 	strb.w	sl, [r4, r3]
   1a3fe:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a402:	d01a      	beq.n	1a43a <d_print_array_type.isra.10+0xde>
   1a404:	29ff      	cmp	r1, #255	; 0xff
   1a406:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a40a:	d1f0      	bne.n	1a3ee <d_print_array_type.isra.10+0x92>
   1a40c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a410:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a418:	4620      	mov	r0, r4
   1a41a:	4798      	blx	r3
   1a41c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a420:	3301      	adds	r3, #1
   1a422:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a426:	2300      	movs	r3, #0
   1a428:	2101      	movs	r1, #1
   1a42a:	45cb      	cmp	fp, r9
   1a42c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a430:	f804 a003 	strb.w	sl, [r4, r3]
   1a434:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a438:	d1e4      	bne.n	1a404 <d_print_array_type.isra.10+0xa8>
   1a43a:	2300      	movs	r3, #0
   1a43c:	4632      	mov	r2, r6
   1a43e:	4639      	mov	r1, r7
   1a440:	4620      	mov	r0, r4
   1a442:	f7ff fe51 	bl	1a0e8 <d_print_mod_list>
   1a446:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a44a:	2bff      	cmp	r3, #255	; 0xff
   1a44c:	d04d      	beq.n	1a4ea <d_print_array_type.isra.10+0x18e>
   1a44e:	1c59      	adds	r1, r3, #1
   1a450:	2229      	movs	r2, #41	; 0x29
   1a452:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a456:	54e2      	strb	r2, [r4, r3]
   1a458:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a45c:	e793      	b.n	1a386 <d_print_array_type.isra.10+0x2a>
   1a45e:	4632      	mov	r2, r6
   1a460:	4639      	mov	r1, r7
   1a462:	4620      	mov	r0, r4
   1a464:	f7ff fe40 	bl	1a0e8 <d_print_mod_list>
   1a468:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a46c:	2bff      	cmp	r3, #255	; 0xff
   1a46e:	d196      	bne.n	1a39e <d_print_array_type.isra.10+0x42>
   1a470:	2200      	movs	r2, #0
   1a472:	4619      	mov	r1, r3
   1a474:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a478:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a47c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a480:	4620      	mov	r0, r4
   1a482:	4798      	blx	r3
   1a484:	235b      	movs	r3, #91	; 0x5b
   1a486:	7023      	strb	r3, [r4, #0]
   1a488:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a48c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a490:	f8d8 2000 	ldr.w	r2, [r8]
   1a494:	3301      	adds	r3, #1
   1a496:	2101      	movs	r1, #1
   1a498:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a49c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4a0:	2a00      	cmp	r2, #0
   1a4a2:	d186      	bne.n	1a3b2 <d_print_array_type.isra.10+0x56>
   1a4a4:	e78e      	b.n	1a3c4 <d_print_array_type.isra.10+0x68>
   1a4a6:	2500      	movs	r5, #0
   1a4a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4ac:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a4b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4b4:	4620      	mov	r0, r4
   1a4b6:	4798      	blx	r3
   1a4b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4bc:	3301      	adds	r3, #1
   1a4be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4c2:	4629      	mov	r1, r5
   1a4c4:	2301      	movs	r3, #1
   1a4c6:	e762      	b.n	1a38e <d_print_array_type.isra.10+0x32>
   1a4c8:	2500      	movs	r5, #0
   1a4ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4d2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a4d6:	4620      	mov	r0, r4
   1a4d8:	4798      	blx	r3
   1a4da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4de:	3301      	adds	r3, #1
   1a4e0:	4629      	mov	r1, r5
   1a4e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4e6:	2201      	movs	r2, #1
   1a4e8:	e76d      	b.n	1a3c6 <d_print_array_type.isra.10+0x6a>
   1a4ea:	2500      	movs	r5, #0
   1a4ec:	4619      	mov	r1, r3
   1a4ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4f6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a4fa:	4620      	mov	r0, r4
   1a4fc:	4798      	blx	r3
   1a4fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a502:	1c5a      	adds	r2, r3, #1
   1a504:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a508:	462b      	mov	r3, r5
   1a50a:	2101      	movs	r1, #1
   1a50c:	e7a0      	b.n	1a450 <d_print_array_type.isra.10+0xf4>
   1a50e:	bf00      	nop
   1a510:	000247e0 	.word	0x000247e0

0001a514 <d_print_function_type.isra.11>:
   1a514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a518:	4604      	mov	r4, r0
   1a51a:	b083      	sub	sp, #12
   1a51c:	460e      	mov	r6, r1
   1a51e:	4617      	mov	r7, r2
   1a520:	461d      	mov	r5, r3
   1a522:	b34b      	cbz	r3, 1a578 <d_print_function_type.isra.11+0x64>
   1a524:	689b      	ldr	r3, [r3, #8]
   1a526:	bb3b      	cbnz	r3, 1a578 <d_print_function_type.isra.11+0x64>
   1a528:	462a      	mov	r2, r5
   1a52a:	2001      	movs	r0, #1
   1a52c:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a6f8 <d_print_function_type.isra.11+0x1e4>
   1a530:	e006      	b.n	1a540 <d_print_function_type.isra.11+0x2c>
   1a532:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a536:	d15a      	bne.n	1a5ee <d_print_function_type.isra.11+0xda>
   1a538:	6812      	ldr	r2, [r2, #0]
   1a53a:	b1ea      	cbz	r2, 1a578 <d_print_function_type.isra.11+0x64>
   1a53c:	6893      	ldr	r3, [r2, #8]
   1a53e:	b9db      	cbnz	r3, 1a578 <d_print_function_type.isra.11+0x64>
   1a540:	6853      	ldr	r3, [r2, #4]
   1a542:	781b      	ldrb	r3, [r3, #0]
   1a544:	3b19      	subs	r3, #25
   1a546:	b2db      	uxtb	r3, r3
   1a548:	2b12      	cmp	r3, #18
   1a54a:	fa00 f103 	lsl.w	r1, r0, r3
   1a54e:	d8f3      	bhi.n	1a538 <d_print_function_type.isra.11+0x24>
   1a550:	ea11 0f0e 	tst.w	r1, lr
   1a554:	d0ed      	beq.n	1a532 <d_print_function_type.isra.11+0x1e>
   1a556:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a55a:	2b20      	cmp	r3, #32
   1a55c:	d04d      	beq.n	1a5fa <d_print_function_type.isra.11+0xe6>
   1a55e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a562:	2bff      	cmp	r3, #255	; 0xff
   1a564:	f000 80b4 	beq.w	1a6d0 <d_print_function_type.isra.11+0x1bc>
   1a568:	1c59      	adds	r1, r3, #1
   1a56a:	2220      	movs	r2, #32
   1a56c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a570:	54e2      	strb	r2, [r4, r3]
   1a572:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a576:	e042      	b.n	1a5fe <d_print_function_type.isra.11+0xea>
   1a578:	2300      	movs	r3, #0
   1a57a:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a57e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a582:	4631      	mov	r1, r6
   1a584:	462a      	mov	r2, r5
   1a586:	4620      	mov	r0, r4
   1a588:	f7ff fdae 	bl	1a0e8 <d_print_mod_list>
   1a58c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a590:	29ff      	cmp	r1, #255	; 0xff
   1a592:	d056      	beq.n	1a642 <d_print_function_type.isra.11+0x12e>
   1a594:	1c4b      	adds	r3, r1, #1
   1a596:	2228      	movs	r2, #40	; 0x28
   1a598:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a59c:	5462      	strb	r2, [r4, r1]
   1a59e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a5a2:	6838      	ldr	r0, [r7, #0]
   1a5a4:	b178      	cbz	r0, 1a5c6 <d_print_function_type.isra.11+0xb2>
   1a5a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a5aa:	9000      	str	r0, [sp, #0]
   1a5ac:	4602      	mov	r2, r0
   1a5ae:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a5b2:	4631      	mov	r1, r6
   1a5b4:	4620      	mov	r0, r4
   1a5b6:	9301      	str	r3, [sp, #4]
   1a5b8:	f7fc fd14 	bl	16fe4 <d_print_comp_inner>
   1a5bc:	9a01      	ldr	r2, [sp, #4]
   1a5be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a5c2:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a5c6:	2bff      	cmp	r3, #255	; 0xff
   1a5c8:	d04d      	beq.n	1a666 <d_print_function_type.isra.11+0x152>
   1a5ca:	1c5a      	adds	r2, r3, #1
   1a5cc:	2029      	movs	r0, #41	; 0x29
   1a5ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a5d2:	4631      	mov	r1, r6
   1a5d4:	54e0      	strb	r0, [r4, r3]
   1a5d6:	462a      	mov	r2, r5
   1a5d8:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a5dc:	2301      	movs	r3, #1
   1a5de:	4620      	mov	r0, r4
   1a5e0:	f7ff fd82 	bl	1a0e8 <d_print_mod_list>
   1a5e4:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a5e8:	b003      	add	sp, #12
   1a5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a5ee:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a5f2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a5f6:	2a28      	cmp	r2, #40	; 0x28
   1a5f8:	d1af      	bne.n	1a55a <d_print_function_type.isra.11+0x46>
   1a5fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a5fe:	29ff      	cmp	r1, #255	; 0xff
   1a600:	d054      	beq.n	1a6ac <d_print_function_type.isra.11+0x198>
   1a602:	1c4a      	adds	r2, r1, #1
   1a604:	2328      	movs	r3, #40	; 0x28
   1a606:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a60a:	5463      	strb	r3, [r4, r1]
   1a60c:	f04f 0900 	mov.w	r9, #0
   1a610:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a614:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a618:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a61c:	464b      	mov	r3, r9
   1a61e:	462a      	mov	r2, r5
   1a620:	4631      	mov	r1, r6
   1a622:	4620      	mov	r0, r4
   1a624:	f7ff fd60 	bl	1a0e8 <d_print_mod_list>
   1a628:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a62c:	2bff      	cmp	r3, #255	; 0xff
   1a62e:	d02c      	beq.n	1a68a <d_print_function_type.isra.11+0x176>
   1a630:	1c59      	adds	r1, r3, #1
   1a632:	2229      	movs	r2, #41	; 0x29
   1a634:	29ff      	cmp	r1, #255	; 0xff
   1a636:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a63a:	54e2      	strb	r2, [r4, r3]
   1a63c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a640:	d1a8      	bne.n	1a594 <d_print_function_type.isra.11+0x80>
   1a642:	f04f 0900 	mov.w	r9, #0
   1a646:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a64a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a64e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a652:	4620      	mov	r0, r4
   1a654:	4798      	blx	r3
   1a656:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a65a:	3301      	adds	r3, #1
   1a65c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a660:	4649      	mov	r1, r9
   1a662:	2301      	movs	r3, #1
   1a664:	e797      	b.n	1a596 <d_print_function_type.isra.11+0x82>
   1a666:	2700      	movs	r7, #0
   1a668:	4619      	mov	r1, r3
   1a66a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a66e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a672:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a676:	4620      	mov	r0, r4
   1a678:	4798      	blx	r3
   1a67a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a67e:	1c5a      	adds	r2, r3, #1
   1a680:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a684:	463b      	mov	r3, r7
   1a686:	2201      	movs	r2, #1
   1a688:	e7a0      	b.n	1a5cc <d_print_function_type.isra.11+0xb8>
   1a68a:	4619      	mov	r1, r3
   1a68c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a690:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a694:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a698:	4620      	mov	r0, r4
   1a69a:	4798      	blx	r3
   1a69c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6a0:	1c5a      	adds	r2, r3, #1
   1a6a2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a6a6:	464b      	mov	r3, r9
   1a6a8:	2101      	movs	r1, #1
   1a6aa:	e7c2      	b.n	1a632 <d_print_function_type.isra.11+0x11e>
   1a6ac:	f04f 0800 	mov.w	r8, #0
   1a6b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a6bc:	4620      	mov	r0, r4
   1a6be:	4798      	blx	r3
   1a6c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6c4:	3301      	adds	r3, #1
   1a6c6:	4641      	mov	r1, r8
   1a6c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6cc:	2201      	movs	r2, #1
   1a6ce:	e799      	b.n	1a604 <d_print_function_type.isra.11+0xf0>
   1a6d0:	f04f 0800 	mov.w	r8, #0
   1a6d4:	4619      	mov	r1, r3
   1a6d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a6da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a6de:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a6e2:	4620      	mov	r0, r4
   1a6e4:	4798      	blx	r3
   1a6e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6ea:	1c5a      	adds	r2, r3, #1
   1a6ec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a6f0:	4643      	mov	r3, r8
   1a6f2:	2101      	movs	r1, #1
   1a6f4:	e739      	b.n	1a56a <d_print_function_type.isra.11+0x56>
   1a6f6:	bf00      	nop
   1a6f8:	00043107 	.word	0x00043107

0001a6fc <d_print_expr_op>:
   1a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a700:	7815      	ldrb	r5, [r2, #0]
   1a702:	2d31      	cmp	r5, #49	; 0x31
   1a704:	b082      	sub	sp, #8
   1a706:	4613      	mov	r3, r2
   1a708:	4604      	mov	r4, r0
   1a70a:	d00d      	beq.n	1a728 <d_print_expr_op+0x2c>
   1a70c:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a710:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a714:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a718:	f7fc fc64 	bl	16fe4 <d_print_comp_inner>
   1a71c:	9b01      	ldr	r3, [sp, #4]
   1a71e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a722:	b002      	add	sp, #8
   1a724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a728:	6853      	ldr	r3, [r2, #4]
   1a72a:	689f      	ldr	r7, [r3, #8]
   1a72c:	685d      	ldr	r5, [r3, #4]
   1a72e:	2f00      	cmp	r7, #0
   1a730:	d0f7      	beq.n	1a722 <d_print_expr_op+0x26>
   1a732:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a736:	442f      	add	r7, r5
   1a738:	f04f 0800 	mov.w	r8, #0
   1a73c:	e008      	b.n	1a750 <d_print_expr_op+0x54>
   1a73e:	460b      	mov	r3, r1
   1a740:	3101      	adds	r1, #1
   1a742:	42bd      	cmp	r5, r7
   1a744:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a748:	54e6      	strb	r6, [r4, r3]
   1a74a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a74e:	d0e8      	beq.n	1a722 <d_print_expr_op+0x26>
   1a750:	29ff      	cmp	r1, #255	; 0xff
   1a752:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a756:	d1f2      	bne.n	1a73e <d_print_expr_op+0x42>
   1a758:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a75c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a760:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a764:	4620      	mov	r0, r4
   1a766:	4798      	blx	r3
   1a768:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a76c:	3301      	adds	r3, #1
   1a76e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a772:	2101      	movs	r1, #1
   1a774:	2300      	movs	r3, #0
   1a776:	e7e4      	b.n	1a742 <d_print_expr_op+0x46>

0001a778 <d_print_subexpr>:
   1a778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a77a:	7813      	ldrb	r3, [r2, #0]
   1a77c:	2b01      	cmp	r3, #1
   1a77e:	b083      	sub	sp, #12
   1a780:	4615      	mov	r5, r2
   1a782:	460e      	mov	r6, r1
   1a784:	4604      	mov	r4, r0
   1a786:	d929      	bls.n	1a7dc <d_print_subexpr+0x64>
   1a788:	2b30      	cmp	r3, #48	; 0x30
   1a78a:	d027      	beq.n	1a7dc <d_print_subexpr+0x64>
   1a78c:	2b06      	cmp	r3, #6
   1a78e:	d025      	beq.n	1a7dc <d_print_subexpr+0x64>
   1a790:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a794:	29ff      	cmp	r1, #255	; 0xff
   1a796:	d031      	beq.n	1a7fc <d_print_subexpr+0x84>
   1a798:	1c4a      	adds	r2, r1, #1
   1a79a:	2328      	movs	r3, #40	; 0x28
   1a79c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a7a0:	5463      	strb	r3, [r4, r1]
   1a7a2:	462a      	mov	r2, r5
   1a7a4:	4631      	mov	r1, r6
   1a7a6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a7aa:	4620      	mov	r0, r4
   1a7ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a7b0:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a7b4:	9301      	str	r3, [sp, #4]
   1a7b6:	9500      	str	r5, [sp, #0]
   1a7b8:	f7fc fc14 	bl	16fe4 <d_print_comp_inner>
   1a7bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a7c0:	9b01      	ldr	r3, [sp, #4]
   1a7c2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a7c6:	29ff      	cmp	r1, #255	; 0xff
   1a7c8:	d028      	beq.n	1a81c <d_print_subexpr+0xa4>
   1a7ca:	1c4a      	adds	r2, r1, #1
   1a7cc:	2329      	movs	r3, #41	; 0x29
   1a7ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a7d2:	5463      	strb	r3, [r4, r1]
   1a7d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a7d8:	b003      	add	sp, #12
   1a7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7dc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a7e0:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a7e4:	4631      	mov	r1, r6
   1a7e6:	462a      	mov	r2, r5
   1a7e8:	4620      	mov	r0, r4
   1a7ea:	9301      	str	r3, [sp, #4]
   1a7ec:	9500      	str	r5, [sp, #0]
   1a7ee:	f7fc fbf9 	bl	16fe4 <d_print_comp_inner>
   1a7f2:	9b01      	ldr	r3, [sp, #4]
   1a7f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a7f8:	b003      	add	sp, #12
   1a7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7fc:	2700      	movs	r7, #0
   1a7fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a802:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a806:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a80a:	4798      	blx	r3
   1a80c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a810:	3301      	adds	r3, #1
   1a812:	4639      	mov	r1, r7
   1a814:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a818:	2201      	movs	r2, #1
   1a81a:	e7be      	b.n	1a79a <d_print_subexpr+0x22>
   1a81c:	2500      	movs	r5, #0
   1a81e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a822:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a826:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a82a:	4620      	mov	r0, r4
   1a82c:	4798      	blx	r3
   1a82e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a832:	3301      	adds	r3, #1
   1a834:	4629      	mov	r1, r5
   1a836:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a83a:	2201      	movs	r2, #1
   1a83c:	e7c6      	b.n	1a7cc <d_print_subexpr+0x54>
   1a83e:	bf00      	nop

0001a840 <d_maybe_print_fold_expression.isra.15>:
   1a840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a844:	6852      	ldr	r2, [r2, #4]
   1a846:	6812      	ldr	r2, [r2, #0]
   1a848:	7815      	ldrb	r5, [r2, #0]
   1a84a:	2d66      	cmp	r5, #102	; 0x66
   1a84c:	d002      	beq.n	1a854 <d_maybe_print_fold_expression.isra.15+0x14>
   1a84e:	2000      	movs	r0, #0
   1a850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a854:	681b      	ldr	r3, [r3, #0]
   1a856:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a85a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a85e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a862:	f899 3000 	ldrb.w	r3, [r9]
   1a866:	2b3b      	cmp	r3, #59	; 0x3b
   1a868:	f04f 33ff 	mov.w	r3, #4294967295
   1a86c:	bf04      	itt	eq
   1a86e:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a872:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a876:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a87a:	7853      	ldrb	r3, [r2, #1]
   1a87c:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a880:	bf18      	it	ne
   1a882:	2500      	movne	r5, #0
   1a884:	460e      	mov	r6, r1
   1a886:	4604      	mov	r4, r0
   1a888:	2b26      	cmp	r3, #38	; 0x26
   1a88a:	d82b      	bhi.n	1a8e4 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a88c:	e8df f003 	tbb	[pc, r3]
   1a890:	2a2a2a90 	.word	0x2a2a2a90
   1a894:	2a902a2a 	.word	0x2a902a2a
   1a898:	2a2a2a2a 	.word	0x2a2a2a2a
   1a89c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a8a0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a8a4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a8a8:	2a2a2a2a 	.word	0x2a2a2a2a
   1a8ac:	2a2a2a2a 	.word	0x2a2a2a2a
   1a8b0:	2a2a2a6a 	.word	0x2a2a2a6a
   1a8b4:	2a2a      	.short	0x2a2a
   1a8b6:	2f          	.byte	0x2f
   1a8b7:	00          	.byte	0x00
   1a8b8:	4642      	mov	r2, r8
   1a8ba:	4631      	mov	r1, r6
   1a8bc:	4620      	mov	r0, r4
   1a8be:	f7ff ff1d 	bl	1a6fc <d_print_expr_op>
   1a8c2:	464a      	mov	r2, r9
   1a8c4:	4631      	mov	r1, r6
   1a8c6:	4620      	mov	r0, r4
   1a8c8:	f7ff ff56 	bl	1a778 <d_print_subexpr>
   1a8cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a8d0:	29ff      	cmp	r1, #255	; 0xff
   1a8d2:	f000 80b2 	beq.w	1aa3a <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a8d6:	1c4a      	adds	r2, r1, #1
   1a8d8:	2329      	movs	r3, #41	; 0x29
   1a8da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a8de:	5463      	strb	r3, [r4, r1]
   1a8e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a8e4:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a8e8:	2001      	movs	r0, #1
   1a8ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a8f2:	29ff      	cmp	r1, #255	; 0xff
   1a8f4:	f000 80c5 	beq.w	1aa82 <d_maybe_print_fold_expression.isra.15+0x242>
   1a8f8:	1c4a      	adds	r2, r1, #1
   1a8fa:	2328      	movs	r3, #40	; 0x28
   1a8fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a900:	4620      	mov	r0, r4
   1a902:	5463      	strb	r3, [r4, r1]
   1a904:	464a      	mov	r2, r9
   1a906:	4631      	mov	r1, r6
   1a908:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a90c:	4d65      	ldr	r5, [pc, #404]	; (1aaa4 <d_maybe_print_fold_expression.isra.15+0x264>)
   1a90e:	f7ff ff33 	bl	1a778 <d_print_subexpr>
   1a912:	4642      	mov	r2, r8
   1a914:	4631      	mov	r1, r6
   1a916:	4620      	mov	r0, r4
   1a918:	f7ff fef0 	bl	1a6fc <d_print_expr_op>
   1a91c:	f105 0904 	add.w	r9, r5, #4
   1a920:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a924:	f04f 0800 	mov.w	r8, #0
   1a928:	e008      	b.n	1a93c <d_maybe_print_fold_expression.isra.15+0xfc>
   1a92a:	460b      	mov	r3, r1
   1a92c:	3101      	adds	r1, #1
   1a92e:	45a9      	cmp	r9, r5
   1a930:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a934:	54e6      	strb	r6, [r4, r3]
   1a936:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a93a:	d0d3      	beq.n	1a8e4 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a93c:	29ff      	cmp	r1, #255	; 0xff
   1a93e:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a942:	d1f2      	bne.n	1a92a <d_maybe_print_fold_expression.isra.15+0xea>
   1a944:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a948:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a94c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a950:	4620      	mov	r0, r4
   1a952:	4798      	blx	r3
   1a954:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a958:	3301      	adds	r3, #1
   1a95a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a95e:	2101      	movs	r1, #1
   1a960:	2300      	movs	r3, #0
   1a962:	e7e4      	b.n	1a92e <d_maybe_print_fold_expression.isra.15+0xee>
   1a964:	4d50      	ldr	r5, [pc, #320]	; (1aaa8 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a966:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a96a:	f105 0b04 	add.w	fp, r5, #4
   1a96e:	e009      	b.n	1a984 <d_maybe_print_fold_expression.isra.15+0x144>
   1a970:	460b      	mov	r3, r1
   1a972:	3101      	adds	r1, #1
   1a974:	455d      	cmp	r5, fp
   1a976:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a97a:	f804 a003 	strb.w	sl, [r4, r3]
   1a97e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a982:	d099      	beq.n	1a8b8 <d_maybe_print_fold_expression.isra.15+0x78>
   1a984:	29ff      	cmp	r1, #255	; 0xff
   1a986:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a98a:	d1f1      	bne.n	1a970 <d_maybe_print_fold_expression.isra.15+0x130>
   1a98c:	f04f 0300 	mov.w	r3, #0
   1a990:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a994:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a998:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a99c:	4620      	mov	r0, r4
   1a99e:	4798      	blx	r3
   1a9a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a9a4:	3301      	adds	r3, #1
   1a9a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a9aa:	2101      	movs	r1, #1
   1a9ac:	2300      	movs	r3, #0
   1a9ae:	e7e1      	b.n	1a974 <d_maybe_print_fold_expression.isra.15+0x134>
   1a9b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a9b4:	2bff      	cmp	r3, #255	; 0xff
   1a9b6:	d051      	beq.n	1aa5c <d_maybe_print_fold_expression.isra.15+0x21c>
   1a9b8:	1c59      	adds	r1, r3, #1
   1a9ba:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a9be:	464a      	mov	r2, r9
   1a9c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a9c4:	4620      	mov	r0, r4
   1a9c6:	f804 e003 	strb.w	lr, [r4, r3]
   1a9ca:	4631      	mov	r1, r6
   1a9cc:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a9d0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1aaac <d_maybe_print_fold_expression.isra.15+0x26c>
   1a9d4:	f7ff fed0 	bl	1a778 <d_print_subexpr>
   1a9d8:	4631      	mov	r1, r6
   1a9da:	4642      	mov	r2, r8
   1a9dc:	4620      	mov	r0, r4
   1a9de:	f7ff fe8d 	bl	1a6fc <d_print_expr_op>
   1a9e2:	f109 0b03 	add.w	fp, r9, #3
   1a9e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a9ea:	e009      	b.n	1aa00 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a9ec:	460b      	mov	r3, r1
   1a9ee:	3101      	adds	r1, #1
   1a9f0:	45cb      	cmp	fp, r9
   1a9f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a9f6:	f804 a003 	strb.w	sl, [r4, r3]
   1a9fa:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a9fe:	d015      	beq.n	1aa2c <d_maybe_print_fold_expression.isra.15+0x1ec>
   1aa00:	29ff      	cmp	r1, #255	; 0xff
   1aa02:	f819 ab01 	ldrb.w	sl, [r9], #1
   1aa06:	d1f1      	bne.n	1a9ec <d_maybe_print_fold_expression.isra.15+0x1ac>
   1aa08:	f04f 0300 	mov.w	r3, #0
   1aa0c:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1aa10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aa14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aa18:	4620      	mov	r0, r4
   1aa1a:	4798      	blx	r3
   1aa1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aa20:	3301      	adds	r3, #1
   1aa22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa26:	2101      	movs	r1, #1
   1aa28:	2300      	movs	r3, #0
   1aa2a:	e7e1      	b.n	1a9f0 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1aa2c:	4642      	mov	r2, r8
   1aa2e:	4631      	mov	r1, r6
   1aa30:	4620      	mov	r0, r4
   1aa32:	f7ff fe63 	bl	1a6fc <d_print_expr_op>
   1aa36:	462a      	mov	r2, r5
   1aa38:	e744      	b.n	1a8c4 <d_maybe_print_fold_expression.isra.15+0x84>
   1aa3a:	2500      	movs	r5, #0
   1aa3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aa40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1aa44:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1aa48:	4620      	mov	r0, r4
   1aa4a:	4798      	blx	r3
   1aa4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aa50:	3301      	adds	r3, #1
   1aa52:	4629      	mov	r1, r5
   1aa54:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa58:	2201      	movs	r2, #1
   1aa5a:	e73d      	b.n	1a8d8 <d_maybe_print_fold_expression.isra.15+0x98>
   1aa5c:	f04f 0a00 	mov.w	sl, #0
   1aa60:	4619      	mov	r1, r3
   1aa62:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1aa66:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1aa6a:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1aa6e:	4798      	blx	r3
   1aa70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aa74:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1aa78:	1c5a      	adds	r2, r3, #1
   1aa7a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1aa7e:	4653      	mov	r3, sl
   1aa80:	e79a      	b.n	1a9b8 <d_maybe_print_fold_expression.isra.15+0x178>
   1aa82:	2500      	movs	r5, #0
   1aa84:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1aa88:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1aa8c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1aa90:	4798      	blx	r3
   1aa92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aa96:	3301      	adds	r3, #1
   1aa98:	4629      	mov	r1, r5
   1aa9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa9e:	2201      	movs	r2, #1
   1aaa0:	e72b      	b.n	1a8fa <d_maybe_print_fold_expression.isra.15+0xba>
   1aaa2:	bf00      	nop
   1aaa4:	000248cc 	.word	0x000248cc
   1aaa8:	000248c4 	.word	0x000248c4
   1aaac:	00022cdc 	.word	0x00022cdc

0001aab0 <d_demangle_callback.constprop.17>:
   1aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aab4:	b0e7      	sub	sp, #412	; 0x19c
   1aab6:	f890 9000 	ldrb.w	r9, [r0]
   1aaba:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1aabe:	af00      	add	r7, sp, #0
   1aac0:	4605      	mov	r5, r0
   1aac2:	4688      	mov	r8, r1
   1aac4:	4616      	mov	r6, r2
   1aac6:	f000 80f1 	beq.w	1acac <d_demangle_callback.constprop.17+0x1fc>
   1aaca:	2208      	movs	r2, #8
   1aacc:	49bd      	ldr	r1, [pc, #756]	; (1adc4 <d_demangle_callback.constprop.17+0x314>)
   1aace:	4628      	mov	r0, r5
   1aad0:	f004 fb44 	bl	1f15c <strncmp>
   1aad4:	b948      	cbnz	r0, 1aaea <d_demangle_callback.constprop.17+0x3a>
   1aad6:	7a2b      	ldrb	r3, [r5, #8]
   1aad8:	2b2e      	cmp	r3, #46	; 0x2e
   1aada:	f000 80d6 	beq.w	1ac8a <d_demangle_callback.constprop.17+0x1da>
   1aade:	2b5f      	cmp	r3, #95	; 0x5f
   1aae0:	f000 80d3 	beq.w	1ac8a <d_demangle_callback.constprop.17+0x1da>
   1aae4:	2b24      	cmp	r3, #36	; 0x24
   1aae6:	f000 80d0 	beq.w	1ac8a <d_demangle_callback.constprop.17+0x1da>
   1aaea:	f04f 0a00 	mov.w	sl, #0
   1aaee:	4628      	mov	r0, r5
   1aaf0:	f004 fac6 	bl	1f080 <strlen>
   1aaf4:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1aaf8:	0083      	lsls	r3, r0, #2
   1aafa:	eb03 020b 	add.w	r2, r3, fp
   1aafe:	0092      	lsls	r2, r2, #2
   1ab00:	3208      	adds	r2, #8
   1ab02:	330a      	adds	r3, #10
   1ab04:	ebad 0d02 	sub.w	sp, sp, r2
   1ab08:	f023 0307 	bic.w	r3, r3, #7
   1ab0c:	2400      	movs	r4, #0
   1ab0e:	466a      	mov	r2, sp
   1ab10:	1829      	adds	r1, r5, r0
   1ab12:	ebad 0d03 	sub.w	sp, sp, r3
   1ab16:	f1ba 0f01 	cmp.w	sl, #1
   1ab1a:	f04f 0311 	mov.w	r3, #17
   1ab1e:	627a      	str	r2, [r7, #36]	; 0x24
   1ab20:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1ab24:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1ab28:	617d      	str	r5, [r7, #20]
   1ab2a:	623d      	str	r5, [r7, #32]
   1ab2c:	63b8      	str	r0, [r7, #56]	; 0x38
   1ab2e:	61b9      	str	r1, [r7, #24]
   1ab30:	61fb      	str	r3, [r7, #28]
   1ab32:	62bc      	str	r4, [r7, #40]	; 0x28
   1ab34:	637c      	str	r4, [r7, #52]	; 0x34
   1ab36:	63fc      	str	r4, [r7, #60]	; 0x3c
   1ab38:	643c      	str	r4, [r7, #64]	; 0x40
   1ab3a:	647c      	str	r4, [r7, #68]	; 0x44
   1ab3c:	64bc      	str	r4, [r7, #72]	; 0x48
   1ab3e:	64fc      	str	r4, [r7, #76]	; 0x4c
   1ab40:	f000 80bb 	beq.w	1acba <d_demangle_callback.constprop.17+0x20a>
   1ab44:	f0c0 80cf 	bcc.w	1ace6 <d_demangle_callback.constprop.17+0x236>
   1ab48:	7aeb      	ldrb	r3, [r5, #11]
   1ab4a:	f1ba 0f02 	cmp.w	sl, #2
   1ab4e:	bf18      	it	ne
   1ab50:	f04f 0944 	movne.w	r9, #68	; 0x44
   1ab54:	f105 0a0b 	add.w	sl, r5, #11
   1ab58:	bf08      	it	eq
   1ab5a:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1ab5e:	2b5f      	cmp	r3, #95	; 0x5f
   1ab60:	f8c7 a020 	str.w	sl, [r7, #32]
   1ab64:	f000 80b2 	beq.w	1accc <d_demangle_callback.constprop.17+0x21c>
   1ab68:	4650      	mov	r0, sl
   1ab6a:	607a      	str	r2, [r7, #4]
   1ab6c:	f004 fa88 	bl	1f080 <strlen>
   1ab70:	f1bb 0f00 	cmp.w	fp, #0
   1ab74:	687a      	ldr	r2, [r7, #4]
   1ab76:	f340 80bf 	ble.w	1acf8 <d_demangle_callback.constprop.17+0x248>
   1ab7a:	2301      	movs	r3, #1
   1ab7c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ab7e:	2800      	cmp	r0, #0
   1ab80:	f000 80ba 	beq.w	1acf8 <d_demangle_callback.constprop.17+0x248>
   1ab84:	2300      	movs	r3, #0
   1ab86:	f8c2 a004 	str.w	sl, [r2, #4]
   1ab8a:	6090      	str	r0, [r2, #8]
   1ab8c:	7013      	strb	r3, [r2, #0]
   1ab8e:	4649      	mov	r1, r9
   1ab90:	2300      	movs	r3, #0
   1ab92:	f107 0014 	add.w	r0, r7, #20
   1ab96:	f7f9 fe31 	bl	147fc <d_make_comp>
   1ab9a:	6a3c      	ldr	r4, [r7, #32]
   1ab9c:	4605      	mov	r5, r0
   1ab9e:	4620      	mov	r0, r4
   1aba0:	f004 fa6e 	bl	1f080 <strlen>
   1aba4:	1823      	adds	r3, r4, r0
   1aba6:	623b      	str	r3, [r7, #32]
   1aba8:	f814 9000 	ldrb.w	r9, [r4, r0]
   1abac:	f1b9 0f00 	cmp.w	r9, #0
   1abb0:	f040 8086 	bne.w	1acc0 <d_demangle_callback.constprop.17+0x210>
   1abb4:	2d00      	cmp	r5, #0
   1abb6:	f000 8083 	beq.w	1acc0 <d_demangle_callback.constprop.17+0x210>
   1abba:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1abbe:	462a      	mov	r2, r5
   1abc0:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1abc4:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1abc8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1abcc:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1abd0:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1abd4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1abd8:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1abdc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1abe0:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1abe4:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1abe8:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1abec:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1abf0:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1abf4:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1abf8:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1abfc:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1ac00:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1ac04:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1ac08:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1ac0c:	f7f9 fec4 	bl	14998 <d_count_templates_scopes>
   1ac10:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1ac14:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1ac18:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ac1c:	613b      	str	r3, [r7, #16]
   1ac1e:	00d0      	lsls	r0, r2, #3
   1ac20:	fb01 f102 	mul.w	r1, r1, r2
   1ac24:	3008      	adds	r0, #8
   1ac26:	46e8      	mov	r8, sp
   1ac28:	00ca      	lsls	r2, r1, #3
   1ac2a:	ebad 0d00 	sub.w	sp, sp, r0
   1ac2e:	4668      	mov	r0, sp
   1ac30:	3208      	adds	r2, #8
   1ac32:	ebad 0d02 	sub.w	sp, sp, r2
   1ac36:	f107 060c 	add.w	r6, r7, #12
   1ac3a:	462a      	mov	r2, r5
   1ac3c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1ac40:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1ac44:	4620      	mov	r0, r4
   1ac46:	2111      	movs	r1, #17
   1ac48:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1ac4c:	60fd      	str	r5, [r7, #12]
   1ac4e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1ac52:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1ac56:	f7fc f9c5 	bl	16fe4 <d_print_comp_inner>
   1ac5a:	693b      	ldr	r3, [r7, #16]
   1ac5c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ac60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ac64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ac68:	f804 9001 	strb.w	r9, [r4, r1]
   1ac6c:	4620      	mov	r0, r4
   1ac6e:	46c5      	mov	sp, r8
   1ac70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ac74:	4798      	blx	r3
   1ac76:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1ac7a:	fab0 f080 	clz	r0, r0
   1ac7e:	0940      	lsrs	r0, r0, #5
   1ac80:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1ac84:	46bd      	mov	sp, r7
   1ac86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac8a:	7a6b      	ldrb	r3, [r5, #9]
   1ac8c:	2b44      	cmp	r3, #68	; 0x44
   1ac8e:	d002      	beq.n	1ac96 <d_demangle_callback.constprop.17+0x1e6>
   1ac90:	2b49      	cmp	r3, #73	; 0x49
   1ac92:	f47f af2a 	bne.w	1aaea <d_demangle_callback.constprop.17+0x3a>
   1ac96:	7aaa      	ldrb	r2, [r5, #10]
   1ac98:	2a5f      	cmp	r2, #95	; 0x5f
   1ac9a:	f47f af26 	bne.w	1aaea <d_demangle_callback.constprop.17+0x3a>
   1ac9e:	2b49      	cmp	r3, #73	; 0x49
   1aca0:	bf14      	ite	ne
   1aca2:	f04f 0a03 	movne.w	sl, #3
   1aca6:	f04f 0a02 	moveq.w	sl, #2
   1acaa:	e720      	b.n	1aaee <d_demangle_callback.constprop.17+0x3e>
   1acac:	7843      	ldrb	r3, [r0, #1]
   1acae:	2b5a      	cmp	r3, #90	; 0x5a
   1acb0:	f47f af0b 	bne.w	1aaca <d_demangle_callback.constprop.17+0x1a>
   1acb4:	f04f 0a01 	mov.w	sl, #1
   1acb8:	e719      	b.n	1aaee <d_demangle_callback.constprop.17+0x3e>
   1acba:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1acbe:	d01d      	beq.n	1acfc <d_demangle_callback.constprop.17+0x24c>
   1acc0:	2000      	movs	r0, #0
   1acc2:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1acc6:	46bd      	mov	sp, r7
   1acc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1accc:	7b2b      	ldrb	r3, [r5, #12]
   1acce:	2b5a      	cmp	r3, #90	; 0x5a
   1acd0:	f47f af4a 	bne.w	1ab68 <d_demangle_callback.constprop.17+0xb8>
   1acd4:	350d      	adds	r5, #13
   1acd6:	4621      	mov	r1, r4
   1acd8:	f107 0014 	add.w	r0, r7, #20
   1acdc:	623d      	str	r5, [r7, #32]
   1acde:	f7fb fe35 	bl	1694c <d_encoding>
   1ace2:	4602      	mov	r2, r0
   1ace4:	e753      	b.n	1ab8e <d_demangle_callback.constprop.17+0xde>
   1ace6:	f107 0014 	add.w	r0, r7, #20
   1acea:	f7fb f817 	bl	15d1c <d_type>
   1acee:	6a3b      	ldr	r3, [r7, #32]
   1acf0:	4605      	mov	r5, r0
   1acf2:	f893 9000 	ldrb.w	r9, [r3]
   1acf6:	e759      	b.n	1abac <d_demangle_callback.constprop.17+0xfc>
   1acf8:	2200      	movs	r2, #0
   1acfa:	e748      	b.n	1ab8e <d_demangle_callback.constprop.17+0xde>
   1acfc:	786b      	ldrb	r3, [r5, #1]
   1acfe:	2b5a      	cmp	r3, #90	; 0x5a
   1ad00:	d1de      	bne.n	1acc0 <d_demangle_callback.constprop.17+0x210>
   1ad02:	3502      	adds	r5, #2
   1ad04:	4651      	mov	r1, sl
   1ad06:	f107 0014 	add.w	r0, r7, #20
   1ad0a:	623d      	str	r5, [r7, #32]
   1ad0c:	f7fb fe1e 	bl	1694c <d_encoding>
   1ad10:	69fb      	ldr	r3, [r7, #28]
   1ad12:	07db      	lsls	r3, r3, #31
   1ad14:	4605      	mov	r5, r0
   1ad16:	d551      	bpl.n	1adbc <d_demangle_callback.constprop.17+0x30c>
   1ad18:	6a38      	ldr	r0, [r7, #32]
   1ad1a:	f890 9000 	ldrb.w	r9, [r0]
   1ad1e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1ad22:	f47f af43 	bne.w	1abac <d_demangle_callback.constprop.17+0xfc>
   1ad26:	7843      	ldrb	r3, [r0, #1]
   1ad28:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1ad2c:	2a19      	cmp	r2, #25
   1ad2e:	d939      	bls.n	1ada4 <d_demangle_callback.constprop.17+0x2f4>
   1ad30:	2b5f      	cmp	r3, #95	; 0x5f
   1ad32:	d037      	beq.n	1ada4 <d_demangle_callback.constprop.17+0x2f4>
   1ad34:	3b30      	subs	r3, #48	; 0x30
   1ad36:	2b09      	cmp	r3, #9
   1ad38:	d840      	bhi.n	1adbc <d_demangle_callback.constprop.17+0x30c>
   1ad3a:	7803      	ldrb	r3, [r0, #0]
   1ad3c:	4602      	mov	r2, r0
   1ad3e:	2b2e      	cmp	r3, #46	; 0x2e
   1ad40:	d112      	bne.n	1ad68 <d_demangle_callback.constprop.17+0x2b8>
   1ad42:	7853      	ldrb	r3, [r2, #1]
   1ad44:	3b30      	subs	r3, #48	; 0x30
   1ad46:	2b09      	cmp	r3, #9
   1ad48:	d80e      	bhi.n	1ad68 <d_demangle_callback.constprop.17+0x2b8>
   1ad4a:	7893      	ldrb	r3, [r2, #2]
   1ad4c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1ad50:	2909      	cmp	r1, #9
   1ad52:	f102 0202 	add.w	r2, r2, #2
   1ad56:	d8f2      	bhi.n	1ad3e <d_demangle_callback.constprop.17+0x28e>
   1ad58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1ad5c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1ad60:	2909      	cmp	r1, #9
   1ad62:	d9f9      	bls.n	1ad58 <d_demangle_callback.constprop.17+0x2a8>
   1ad64:	2b2e      	cmp	r3, #46	; 0x2e
   1ad66:	d0ec      	beq.n	1ad42 <d_demangle_callback.constprop.17+0x292>
   1ad68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ad6c:	623a      	str	r2, [r7, #32]
   1ad6e:	4299      	cmp	r1, r3
   1ad70:	da16      	bge.n	1ada0 <d_demangle_callback.constprop.17+0x2f0>
   1ad72:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1ad76:	1c4b      	adds	r3, r1, #1
   1ad78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1ad7c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ad7e:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1ad82:	d00d      	beq.n	1ada0 <d_demangle_callback.constprop.17+0x2f0>
   1ad84:	1a12      	subs	r2, r2, r0
   1ad86:	d00b      	beq.n	1ada0 <d_demangle_callback.constprop.17+0x2f0>
   1ad88:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1ad8c:	6058      	str	r0, [r3, #4]
   1ad8e:	609a      	str	r2, [r3, #8]
   1ad90:	462a      	mov	r2, r5
   1ad92:	214d      	movs	r1, #77	; 0x4d
   1ad94:	f107 0014 	add.w	r0, r7, #20
   1ad98:	f7f9 fd30 	bl	147fc <d_make_comp>
   1ad9c:	4605      	mov	r5, r0
   1ad9e:	e7bb      	b.n	1ad18 <d_demangle_callback.constprop.17+0x268>
   1ada0:	2300      	movs	r3, #0
   1ada2:	e7f5      	b.n	1ad90 <d_demangle_callback.constprop.17+0x2e0>
   1ada4:	1c81      	adds	r1, r0, #2
   1ada6:	460a      	mov	r2, r1
   1ada8:	f811 3b01 	ldrb.w	r3, [r1], #1
   1adac:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1adb0:	f1be 0f19 	cmp.w	lr, #25
   1adb4:	d9f7      	bls.n	1ada6 <d_demangle_callback.constprop.17+0x2f6>
   1adb6:	2b5f      	cmp	r3, #95	; 0x5f
   1adb8:	d0f5      	beq.n	1ada6 <d_demangle_callback.constprop.17+0x2f6>
   1adba:	e7c0      	b.n	1ad3e <d_demangle_callback.constprop.17+0x28e>
   1adbc:	6a3b      	ldr	r3, [r7, #32]
   1adbe:	f893 9000 	ldrb.w	r9, [r3]
   1adc2:	e6f3      	b.n	1abac <d_demangle_callback.constprop.17+0xfc>
   1adc4:	00024574 	.word	0x00024574

0001adc8 <__cxa_demangle>:
   1adc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1adcc:	b084      	sub	sp, #16
   1adce:	b378      	cbz	r0, 1ae30 <__cxa_demangle+0x68>
   1add0:	b101      	cbz	r1, 1add4 <__cxa_demangle+0xc>
   1add2:	b36a      	cbz	r2, 1ae30 <__cxa_demangle+0x68>
   1add4:	2400      	movs	r4, #0
   1add6:	4616      	mov	r6, r2
   1add8:	460d      	mov	r5, r1
   1adda:	466a      	mov	r2, sp
   1addc:	4927      	ldr	r1, [pc, #156]	; (1ae7c <__cxa_demangle+0xb4>)
   1adde:	9400      	str	r4, [sp, #0]
   1ade0:	461f      	mov	r7, r3
   1ade2:	9401      	str	r4, [sp, #4]
   1ade4:	9402      	str	r4, [sp, #8]
   1ade6:	9403      	str	r4, [sp, #12]
   1ade8:	f7ff fe62 	bl	1aab0 <d_demangle_callback.constprop.17>
   1adec:	2800      	cmp	r0, #0
   1adee:	d03f      	beq.n	1ae70 <__cxa_demangle+0xa8>
   1adf0:	9b03      	ldr	r3, [sp, #12]
   1adf2:	b1d3      	cbz	r3, 1ae2a <__cxa_demangle+0x62>
   1adf4:	f04f 0801 	mov.w	r8, #1
   1adf8:	9c00      	ldr	r4, [sp, #0]
   1adfa:	b35c      	cbz	r4, 1ae54 <__cxa_demangle+0x8c>
   1adfc:	b33d      	cbz	r5, 1ae4e <__cxa_demangle+0x86>
   1adfe:	4620      	mov	r0, r4
   1ae00:	f004 f93e 	bl	1f080 <strlen>
   1ae04:	6833      	ldr	r3, [r6, #0]
   1ae06:	4298      	cmp	r0, r3
   1ae08:	d21b      	bcs.n	1ae42 <__cxa_demangle+0x7a>
   1ae0a:	1c42      	adds	r2, r0, #1
   1ae0c:	4621      	mov	r1, r4
   1ae0e:	4628      	mov	r0, r5
   1ae10:	f003 fbe6 	bl	1e5e0 <memcpy>
   1ae14:	4620      	mov	r0, r4
   1ae16:	f003 f893 	bl	1df40 <free>
   1ae1a:	462c      	mov	r4, r5
   1ae1c:	b10f      	cbz	r7, 1ae22 <__cxa_demangle+0x5a>
   1ae1e:	2300      	movs	r3, #0
   1ae20:	603b      	str	r3, [r7, #0]
   1ae22:	4620      	mov	r0, r4
   1ae24:	b004      	add	sp, #16
   1ae26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae2a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1ae2e:	e7e3      	b.n	1adf8 <__cxa_demangle+0x30>
   1ae30:	b113      	cbz	r3, 1ae38 <__cxa_demangle+0x70>
   1ae32:	f06f 0202 	mvn.w	r2, #2
   1ae36:	601a      	str	r2, [r3, #0]
   1ae38:	2400      	movs	r4, #0
   1ae3a:	4620      	mov	r0, r4
   1ae3c:	b004      	add	sp, #16
   1ae3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae42:	4628      	mov	r0, r5
   1ae44:	f003 f87c 	bl	1df40 <free>
   1ae48:	f8c6 8000 	str.w	r8, [r6]
   1ae4c:	e7e6      	b.n	1ae1c <__cxa_demangle+0x54>
   1ae4e:	2e00      	cmp	r6, #0
   1ae50:	d1fa      	bne.n	1ae48 <__cxa_demangle+0x80>
   1ae52:	e7e3      	b.n	1ae1c <__cxa_demangle+0x54>
   1ae54:	2f00      	cmp	r7, #0
   1ae56:	d0ef      	beq.n	1ae38 <__cxa_demangle+0x70>
   1ae58:	f1b8 0f01 	cmp.w	r8, #1
   1ae5c:	d004      	beq.n	1ae68 <__cxa_demangle+0xa0>
   1ae5e:	f06f 0301 	mvn.w	r3, #1
   1ae62:	603b      	str	r3, [r7, #0]
   1ae64:	2400      	movs	r4, #0
   1ae66:	e7dc      	b.n	1ae22 <__cxa_demangle+0x5a>
   1ae68:	f04f 33ff 	mov.w	r3, #4294967295
   1ae6c:	603b      	str	r3, [r7, #0]
   1ae6e:	e7d8      	b.n	1ae22 <__cxa_demangle+0x5a>
   1ae70:	9800      	ldr	r0, [sp, #0]
   1ae72:	f003 f865 	bl	1df40 <free>
   1ae76:	2f00      	cmp	r7, #0
   1ae78:	d1f1      	bne.n	1ae5e <__cxa_demangle+0x96>
   1ae7a:	e7dd      	b.n	1ae38 <__cxa_demangle+0x70>
   1ae7c:	00014f21 	.word	0x00014f21

0001ae80 <__gcclibcxx_demangle_callback>:
   1ae80:	b160      	cbz	r0, 1ae9c <__gcclibcxx_demangle_callback+0x1c>
   1ae82:	b508      	push	{r3, lr}
   1ae84:	b139      	cbz	r1, 1ae96 <__gcclibcxx_demangle_callback+0x16>
   1ae86:	f7ff fe13 	bl	1aab0 <d_demangle_callback.constprop.17>
   1ae8a:	2800      	cmp	r0, #0
   1ae8c:	bf0c      	ite	eq
   1ae8e:	f06f 0001 	mvneq.w	r0, #1
   1ae92:	2000      	movne	r0, #0
   1ae94:	bd08      	pop	{r3, pc}
   1ae96:	f06f 0002 	mvn.w	r0, #2
   1ae9a:	bd08      	pop	{r3, pc}
   1ae9c:	f06f 0002 	mvn.w	r0, #2
   1aea0:	4770      	bx	lr
   1aea2:	bf00      	nop

0001aea4 <__cxa_current_exception_type>:
   1aea4:	b508      	push	{r3, lr}
   1aea6:	f7f9 f8f5 	bl	14094 <__cxa_get_globals>
   1aeaa:	6800      	ldr	r0, [r0, #0]
   1aeac:	b130      	cbz	r0, 1aebc <__cxa_current_exception_type+0x18>
   1aeae:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1aeb2:	2b01      	cmp	r3, #1
   1aeb4:	bf04      	itt	eq
   1aeb6:	6800      	ldreq	r0, [r0, #0]
   1aeb8:	3878      	subeq	r0, #120	; 0x78
   1aeba:	6800      	ldr	r0, [r0, #0]
   1aebc:	bd08      	pop	{r3, pc}
   1aebe:	bf00      	nop

0001aec0 <powf>:
   1aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aec2:	ed2d 8b04 	vpush	{d8-d9}
   1aec6:	4db3      	ldr	r5, [pc, #716]	; (1b194 <powf+0x2d4>)
   1aec8:	b08b      	sub	sp, #44	; 0x2c
   1aeca:	eef0 8a40 	vmov.f32	s17, s0
   1aece:	eeb0 8a60 	vmov.f32	s16, s1
   1aed2:	f000 f9df 	bl	1b294 <__ieee754_powf>
   1aed6:	f995 4000 	ldrsb.w	r4, [r5]
   1aeda:	1c63      	adds	r3, r4, #1
   1aedc:	eeb0 9a40 	vmov.f32	s18, s0
   1aee0:	d02e      	beq.n	1af40 <powf+0x80>
   1aee2:	eeb4 8a48 	vcmp.f32	s16, s16
   1aee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aeea:	d629      	bvs.n	1af40 <powf+0x80>
   1aeec:	eef4 8a68 	vcmp.f32	s17, s17
   1aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aef4:	f180 80a2 	bvs.w	1b03c <powf+0x17c>
   1aef8:	eef5 8a40 	vcmp.f32	s17, #0.0
   1aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af00:	d124      	bne.n	1af4c <powf+0x8c>
   1af02:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1af06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af0a:	d159      	bne.n	1afc0 <powf+0x100>
   1af0c:	2301      	movs	r3, #1
   1af0e:	4aa2      	ldr	r2, [pc, #648]	; (1b198 <powf+0x2d8>)
   1af10:	9300      	str	r3, [sp, #0]
   1af12:	ee18 0a90 	vmov	r0, s17
   1af16:	2300      	movs	r3, #0
   1af18:	9201      	str	r2, [sp, #4]
   1af1a:	9308      	str	r3, [sp, #32]
   1af1c:	f000 ff3a 	bl	1bd94 <__aeabi_f2d>
   1af20:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1af24:	ee18 0a10 	vmov	r0, s16
   1af28:	f000 ff34 	bl	1bd94 <__aeabi_f2d>
   1af2c:	2200      	movs	r2, #0
   1af2e:	2300      	movs	r3, #0
   1af30:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1af34:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1af38:	2c00      	cmp	r4, #0
   1af3a:	d067      	beq.n	1b00c <powf+0x14c>
   1af3c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1af40:	eeb0 0a49 	vmov.f32	s0, s18
   1af44:	b00b      	add	sp, #44	; 0x2c
   1af46:	ecbd 8b04 	vpop	{d8-d9}
   1af4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af4c:	f000 fd3a 	bl	1b9c4 <finitef>
   1af50:	4604      	mov	r4, r0
   1af52:	2800      	cmp	r0, #0
   1af54:	f000 8091 	beq.w	1b07a <powf+0x1ba>
   1af58:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1af5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1af60:	d1ee      	bne.n	1af40 <powf+0x80>
   1af62:	eeb0 0a68 	vmov.f32	s0, s17
   1af66:	f000 fd2d 	bl	1b9c4 <finitef>
   1af6a:	2800      	cmp	r0, #0
   1af6c:	d0e8      	beq.n	1af40 <powf+0x80>
   1af6e:	eeb0 0a48 	vmov.f32	s0, s16
   1af72:	f000 fd27 	bl	1b9c4 <finitef>
   1af76:	2800      	cmp	r0, #0
   1af78:	d0e2      	beq.n	1af40 <powf+0x80>
   1af7a:	2304      	movs	r3, #4
   1af7c:	4a86      	ldr	r2, [pc, #536]	; (1b198 <powf+0x2d8>)
   1af7e:	9300      	str	r3, [sp, #0]
   1af80:	ee18 0a90 	vmov	r0, s17
   1af84:	2300      	movs	r3, #0
   1af86:	9308      	str	r3, [sp, #32]
   1af88:	9201      	str	r2, [sp, #4]
   1af8a:	f000 ff03 	bl	1bd94 <__aeabi_f2d>
   1af8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1af92:	ee18 0a10 	vmov	r0, s16
   1af96:	f000 fefd 	bl	1bd94 <__aeabi_f2d>
   1af9a:	2600      	movs	r6, #0
   1af9c:	2700      	movs	r7, #0
   1af9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1afa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1afa6:	f995 3000 	ldrsb.w	r3, [r5]
   1afaa:	2b02      	cmp	r3, #2
   1afac:	d003      	beq.n	1afb6 <powf+0xf6>
   1afae:	4668      	mov	r0, sp
   1afb0:	f000 fc6c 	bl	1b88c <matherr>
   1afb4:	bb80      	cbnz	r0, 1b018 <powf+0x158>
   1afb6:	f002 fd15 	bl	1d9e4 <__errno>
   1afba:	2322      	movs	r3, #34	; 0x22
   1afbc:	6003      	str	r3, [r0, #0]
   1afbe:	e02b      	b.n	1b018 <powf+0x158>
   1afc0:	eeb0 0a48 	vmov.f32	s0, s16
   1afc4:	f000 fcfe 	bl	1b9c4 <finitef>
   1afc8:	2800      	cmp	r0, #0
   1afca:	d0b9      	beq.n	1af40 <powf+0x80>
   1afcc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1afd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1afd4:	d5b4      	bpl.n	1af40 <powf+0x80>
   1afd6:	2301      	movs	r3, #1
   1afd8:	4a6f      	ldr	r2, [pc, #444]	; (1b198 <powf+0x2d8>)
   1afda:	9300      	str	r3, [sp, #0]
   1afdc:	ee18 0a90 	vmov	r0, s17
   1afe0:	2300      	movs	r3, #0
   1afe2:	9308      	str	r3, [sp, #32]
   1afe4:	9201      	str	r2, [sp, #4]
   1afe6:	f000 fed5 	bl	1bd94 <__aeabi_f2d>
   1afea:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1afee:	ee18 0a10 	vmov	r0, s16
   1aff2:	f000 fecf 	bl	1bd94 <__aeabi_f2d>
   1aff6:	f995 3000 	ldrsb.w	r3, [r5]
   1affa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1affe:	2b00      	cmp	r3, #0
   1b000:	f040 809b 	bne.w	1b13a <powf+0x27a>
   1b004:	2200      	movs	r2, #0
   1b006:	2300      	movs	r3, #0
   1b008:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b00c:	4668      	mov	r0, sp
   1b00e:	f000 fc3d 	bl	1b88c <matherr>
   1b012:	2800      	cmp	r0, #0
   1b014:	f000 808c 	beq.w	1b130 <powf+0x270>
   1b018:	9b08      	ldr	r3, [sp, #32]
   1b01a:	b11b      	cbz	r3, 1b024 <powf+0x164>
   1b01c:	f002 fce2 	bl	1d9e4 <__errno>
   1b020:	9b08      	ldr	r3, [sp, #32]
   1b022:	6003      	str	r3, [r0, #0]
   1b024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b028:	f001 f9ea 	bl	1c400 <__aeabi_d2f>
   1b02c:	ee09 0a10 	vmov	s18, r0
   1b030:	eeb0 0a49 	vmov.f32	s0, s18
   1b034:	b00b      	add	sp, #44	; 0x2c
   1b036:	ecbd 8b04 	vpop	{d8-d9}
   1b03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b03c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1b040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b044:	f47f af7c 	bne.w	1af40 <powf+0x80>
   1b048:	2301      	movs	r3, #1
   1b04a:	4a53      	ldr	r2, [pc, #332]	; (1b198 <powf+0x2d8>)
   1b04c:	9300      	str	r3, [sp, #0]
   1b04e:	ee18 0a90 	vmov	r0, s17
   1b052:	2300      	movs	r3, #0
   1b054:	9201      	str	r2, [sp, #4]
   1b056:	9308      	str	r3, [sp, #32]
   1b058:	f000 fe9c 	bl	1bd94 <__aeabi_f2d>
   1b05c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b060:	ee18 0a10 	vmov	r0, s16
   1b064:	f000 fe96 	bl	1bd94 <__aeabi_f2d>
   1b068:	4b4c      	ldr	r3, [pc, #304]	; (1b19c <powf+0x2dc>)
   1b06a:	2200      	movs	r2, #0
   1b06c:	2c02      	cmp	r4, #2
   1b06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b072:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b076:	d1c9      	bne.n	1b00c <powf+0x14c>
   1b078:	e760      	b.n	1af3c <powf+0x7c>
   1b07a:	eeb0 0a68 	vmov.f32	s0, s17
   1b07e:	f000 fca1 	bl	1b9c4 <finitef>
   1b082:	2800      	cmp	r0, #0
   1b084:	f43f af68 	beq.w	1af58 <powf+0x98>
   1b088:	eeb0 0a48 	vmov.f32	s0, s16
   1b08c:	f000 fc9a 	bl	1b9c4 <finitef>
   1b090:	2800      	cmp	r0, #0
   1b092:	f43f af61 	beq.w	1af58 <powf+0x98>
   1b096:	eeb4 9a49 	vcmp.f32	s18, s18
   1b09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b09e:	f180 8087 	bvs.w	1b1b0 <powf+0x2f0>
   1b0a2:	4b3d      	ldr	r3, [pc, #244]	; (1b198 <powf+0x2d8>)
   1b0a4:	9408      	str	r4, [sp, #32]
   1b0a6:	2203      	movs	r2, #3
   1b0a8:	ee18 0a90 	vmov	r0, s17
   1b0ac:	e88d 000c 	stmia.w	sp, {r2, r3}
   1b0b0:	f000 fe70 	bl	1bd94 <__aeabi_f2d>
   1b0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b0b8:	ee18 0a10 	vmov	r0, s16
   1b0bc:	f000 fe6a 	bl	1bd94 <__aeabi_f2d>
   1b0c0:	f995 3000 	ldrsb.w	r3, [r5]
   1b0c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b0c8:	2b00      	cmp	r3, #0
   1b0ca:	d13d      	bne.n	1b148 <powf+0x288>
   1b0cc:	4b34      	ldr	r3, [pc, #208]	; (1b1a0 <powf+0x2e0>)
   1b0ce:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1b0d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1b0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b0da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b0de:	f57f af66 	bpl.w	1afae <powf+0xee>
   1b0e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1b0e6:	ee68 7a27 	vmul.f32	s15, s16, s15
   1b0ea:	ee17 0a90 	vmov	r0, s15
   1b0ee:	f000 fe51 	bl	1bd94 <__aeabi_f2d>
   1b0f2:	4606      	mov	r6, r0
   1b0f4:	460f      	mov	r7, r1
   1b0f6:	ec47 6b10 	vmov	d0, r6, r7
   1b0fa:	f000 fbc9 	bl	1b890 <rint>
   1b0fe:	4630      	mov	r0, r6
   1b100:	ec53 2b10 	vmov	r2, r3, d0
   1b104:	4639      	mov	r1, r7
   1b106:	f001 f901 	bl	1c30c <__aeabi_dcmpeq>
   1b10a:	2800      	cmp	r0, #0
   1b10c:	d13f      	bne.n	1b18e <powf+0x2ce>
   1b10e:	4925      	ldr	r1, [pc, #148]	; (1b1a4 <powf+0x2e4>)
   1b110:	f995 3000 	ldrsb.w	r3, [r5]
   1b114:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1b118:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b11c:	e745      	b.n	1afaa <powf+0xea>
   1b11e:	4610      	mov	r0, r2
   1b120:	4619      	mov	r1, r3
   1b122:	f000 ffb5 	bl	1c090 <__aeabi_ddiv>
   1b126:	2c02      	cmp	r4, #2
   1b128:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b12c:	f47f af6e 	bne.w	1b00c <powf+0x14c>
   1b130:	f002 fc58 	bl	1d9e4 <__errno>
   1b134:	2321      	movs	r3, #33	; 0x21
   1b136:	6003      	str	r3, [r0, #0]
   1b138:	e76e      	b.n	1b018 <powf+0x158>
   1b13a:	491b      	ldr	r1, [pc, #108]	; (1b1a8 <powf+0x2e8>)
   1b13c:	2000      	movs	r0, #0
   1b13e:	2b02      	cmp	r3, #2
   1b140:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b144:	d0f4      	beq.n	1b130 <powf+0x270>
   1b146:	e761      	b.n	1b00c <powf+0x14c>
   1b148:	4918      	ldr	r1, [pc, #96]	; (1b1ac <powf+0x2ec>)
   1b14a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1b14e:	2000      	movs	r0, #0
   1b150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b154:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b158:	f57f af27 	bpl.w	1afaa <powf+0xea>
   1b15c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1b160:	ee68 7a27 	vmul.f32	s15, s16, s15
   1b164:	ee17 0a90 	vmov	r0, s15
   1b168:	f000 fe14 	bl	1bd94 <__aeabi_f2d>
   1b16c:	4606      	mov	r6, r0
   1b16e:	460f      	mov	r7, r1
   1b170:	ec47 6b10 	vmov	d0, r6, r7
   1b174:	f000 fb8c 	bl	1b890 <rint>
   1b178:	4630      	mov	r0, r6
   1b17a:	ec53 2b10 	vmov	r2, r3, d0
   1b17e:	4639      	mov	r1, r7
   1b180:	f001 f8c4 	bl	1c30c <__aeabi_dcmpeq>
   1b184:	b918      	cbnz	r0, 1b18e <powf+0x2ce>
   1b186:	4b08      	ldr	r3, [pc, #32]	; (1b1a8 <powf+0x2e8>)
   1b188:	2200      	movs	r2, #0
   1b18a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b18e:	f995 3000 	ldrsb.w	r3, [r5]
   1b192:	e70a      	b.n	1afaa <powf+0xea>
   1b194:	200000fc 	.word	0x200000fc
   1b198:	00024dc0 	.word	0x00024dc0
   1b19c:	3ff00000 	.word	0x3ff00000
   1b1a0:	47efffff 	.word	0x47efffff
   1b1a4:	c7efffff 	.word	0xc7efffff
   1b1a8:	fff00000 	.word	0xfff00000
   1b1ac:	7ff00000 	.word	0x7ff00000
   1b1b0:	4b0c      	ldr	r3, [pc, #48]	; (1b1e4 <powf+0x324>)
   1b1b2:	9408      	str	r4, [sp, #32]
   1b1b4:	2201      	movs	r2, #1
   1b1b6:	ee18 0a90 	vmov	r0, s17
   1b1ba:	e88d 000c 	stmia.w	sp, {r2, r3}
   1b1be:	f000 fde9 	bl	1bd94 <__aeabi_f2d>
   1b1c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b1c6:	ee18 0a10 	vmov	r0, s16
   1b1ca:	f000 fde3 	bl	1bd94 <__aeabi_f2d>
   1b1ce:	f995 4000 	ldrsb.w	r4, [r5]
   1b1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b1d6:	2200      	movs	r2, #0
   1b1d8:	2300      	movs	r3, #0
   1b1da:	2c00      	cmp	r4, #0
   1b1dc:	d19f      	bne.n	1b11e <powf+0x25e>
   1b1de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b1e2:	e713      	b.n	1b00c <powf+0x14c>
   1b1e4:	00024dc0 	.word	0x00024dc0

0001b1e8 <sqrtf>:
   1b1e8:	b510      	push	{r4, lr}
   1b1ea:	ed2d 8b02 	vpush	{d8}
   1b1ee:	b08a      	sub	sp, #40	; 0x28
   1b1f0:	eeb0 8a40 	vmov.f32	s16, s0
   1b1f4:	f000 fb46 	bl	1b884 <__ieee754_sqrtf>
   1b1f8:	4b24      	ldr	r3, [pc, #144]	; (1b28c <sqrtf+0xa4>)
   1b1fa:	f993 4000 	ldrsb.w	r4, [r3]
   1b1fe:	1c63      	adds	r3, r4, #1
   1b200:	d009      	beq.n	1b216 <sqrtf+0x2e>
   1b202:	eeb4 8a48 	vcmp.f32	s16, s16
   1b206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b20a:	d604      	bvs.n	1b216 <sqrtf+0x2e>
   1b20c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1b210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b214:	d403      	bmi.n	1b21e <sqrtf+0x36>
   1b216:	b00a      	add	sp, #40	; 0x28
   1b218:	ecbd 8b02 	vpop	{d8}
   1b21c:	bd10      	pop	{r4, pc}
   1b21e:	2301      	movs	r3, #1
   1b220:	4a1b      	ldr	r2, [pc, #108]	; (1b290 <sqrtf+0xa8>)
   1b222:	9300      	str	r3, [sp, #0]
   1b224:	ee18 0a10 	vmov	r0, s16
   1b228:	2300      	movs	r3, #0
   1b22a:	9201      	str	r2, [sp, #4]
   1b22c:	9308      	str	r3, [sp, #32]
   1b22e:	f000 fdb1 	bl	1bd94 <__aeabi_f2d>
   1b232:	2200      	movs	r2, #0
   1b234:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1b238:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1b23c:	2300      	movs	r3, #0
   1b23e:	b1bc      	cbz	r4, 1b270 <sqrtf+0x88>
   1b240:	4610      	mov	r0, r2
   1b242:	4619      	mov	r1, r3
   1b244:	f000 ff24 	bl	1c090 <__aeabi_ddiv>
   1b248:	2c02      	cmp	r4, #2
   1b24a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b24e:	d111      	bne.n	1b274 <sqrtf+0x8c>
   1b250:	f002 fbc8 	bl	1d9e4 <__errno>
   1b254:	2321      	movs	r3, #33	; 0x21
   1b256:	6003      	str	r3, [r0, #0]
   1b258:	9b08      	ldr	r3, [sp, #32]
   1b25a:	b98b      	cbnz	r3, 1b280 <sqrtf+0x98>
   1b25c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b260:	f001 f8ce 	bl	1c400 <__aeabi_d2f>
   1b264:	ee00 0a10 	vmov	s0, r0
   1b268:	b00a      	add	sp, #40	; 0x28
   1b26a:	ecbd 8b02 	vpop	{d8}
   1b26e:	bd10      	pop	{r4, pc}
   1b270:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b274:	4668      	mov	r0, sp
   1b276:	f000 fb09 	bl	1b88c <matherr>
   1b27a:	2800      	cmp	r0, #0
   1b27c:	d1ec      	bne.n	1b258 <sqrtf+0x70>
   1b27e:	e7e7      	b.n	1b250 <sqrtf+0x68>
   1b280:	f002 fbb0 	bl	1d9e4 <__errno>
   1b284:	9b08      	ldr	r3, [sp, #32]
   1b286:	6003      	str	r3, [r0, #0]
   1b288:	e7e8      	b.n	1b25c <sqrtf+0x74>
   1b28a:	bf00      	nop
   1b28c:	200000fc 	.word	0x200000fc
   1b290:	00024dc8 	.word	0x00024dc8

0001b294 <__ieee754_powf>:
   1b294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b298:	ed2d 8b02 	vpush	{d8}
   1b29c:	b082      	sub	sp, #8
   1b29e:	edcd 0a00 	vstr	s1, [sp]
   1b2a2:	9c00      	ldr	r4, [sp, #0]
   1b2a4:	ed8d 0a01 	vstr	s0, [sp, #4]
   1b2a8:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1b2ac:	d014      	beq.n	1b2d8 <__ieee754_powf+0x44>
   1b2ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1b2b2:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1b2b6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b2ba:	dd07      	ble.n	1b2cc <__ieee754_powf+0x38>
   1b2bc:	4858      	ldr	r0, [pc, #352]	; (1b420 <__ieee754_powf+0x18c>)
   1b2be:	b002      	add	sp, #8
   1b2c0:	ecbd 8b02 	vpop	{d8}
   1b2c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b2c8:	f000 bb86 	b.w	1b9d8 <nanf>
   1b2cc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b2d0:	dd09      	ble.n	1b2e6 <__ieee754_powf+0x52>
   1b2d2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b2d6:	d1f1      	bne.n	1b2bc <__ieee754_powf+0x28>
   1b2d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1b2dc:	b002      	add	sp, #8
   1b2de:	ecbd 8b02 	vpop	{d8}
   1b2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b2e6:	f1b8 0f00 	cmp.w	r8, #0
   1b2ea:	db4d      	blt.n	1b388 <__ieee754_powf+0xf4>
   1b2ec:	f04f 0a00 	mov.w	sl, #0
   1b2f0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1b2f4:	d03f      	beq.n	1b376 <__ieee754_powf+0xe2>
   1b2f6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b2fa:	d058      	beq.n	1b3ae <__ieee754_powf+0x11a>
   1b2fc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b300:	d06e      	beq.n	1b3e0 <__ieee754_powf+0x14c>
   1b302:	9d01      	ldr	r5, [sp, #4]
   1b304:	f8dd 9000 	ldr.w	r9, [sp]
   1b308:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1b30c:	ee00 5a10 	vmov	s0, r5
   1b310:	d01c      	beq.n	1b34c <__ieee754_powf+0xb8>
   1b312:	f000 fb4f 	bl	1b9b4 <fabsf>
   1b316:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b31a:	d04d      	beq.n	1b3b8 <__ieee754_powf+0x124>
   1b31c:	2f00      	cmp	r7, #0
   1b31e:	d04b      	beq.n	1b3b8 <__ieee754_powf+0x124>
   1b320:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b324:	d048      	beq.n	1b3b8 <__ieee754_powf+0x124>
   1b326:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1b32a:	3b01      	subs	r3, #1
   1b32c:	ea5a 0203 	orrs.w	r2, sl, r3
   1b330:	d06e      	beq.n	1b410 <__ieee754_powf+0x17c>
   1b332:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1b336:	dd7b      	ble.n	1b430 <__ieee754_powf+0x19c>
   1b338:	4a3a      	ldr	r2, [pc, #232]	; (1b424 <__ieee754_powf+0x190>)
   1b33a:	4297      	cmp	r7, r2
   1b33c:	f300 81c8 	bgt.w	1b6d0 <__ieee754_powf+0x43c>
   1b340:	2c00      	cmp	r4, #0
   1b342:	f2c0 81cb 	blt.w	1b6dc <__ieee754_powf+0x448>
   1b346:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b428 <__ieee754_powf+0x194>
   1b34a:	e7c7      	b.n	1b2dc <__ieee754_powf+0x48>
   1b34c:	f1b8 0f00 	cmp.w	r8, #0
   1b350:	da4b      	bge.n	1b3ea <__ieee754_powf+0x156>
   1b352:	f000 fb2f 	bl	1b9b4 <fabsf>
   1b356:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1b35a:	d001      	beq.n	1b360 <__ieee754_powf+0xcc>
   1b35c:	2f00      	cmp	r7, #0
   1b35e:	d1df      	bne.n	1b320 <__ieee754_powf+0x8c>
   1b360:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1b364:	ea57 030a 	orrs.w	r3, r7, sl
   1b368:	d04d      	beq.n	1b406 <__ieee754_powf+0x172>
   1b36a:	f1ba 0f01 	cmp.w	sl, #1
   1b36e:	d1b5      	bne.n	1b2dc <__ieee754_powf+0x48>
   1b370:	eeb1 0a40 	vneg.f32	s0, s0
   1b374:	e7b2      	b.n	1b2dc <__ieee754_powf+0x48>
   1b376:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1b37a:	d0ad      	beq.n	1b2d8 <__ieee754_powf+0x44>
   1b37c:	dd29      	ble.n	1b3d2 <__ieee754_powf+0x13e>
   1b37e:	2c00      	cmp	r4, #0
   1b380:	dbe1      	blt.n	1b346 <__ieee754_powf+0xb2>
   1b382:	ed9d 0a00 	vldr	s0, [sp]
   1b386:	e7a9      	b.n	1b2dc <__ieee754_powf+0x48>
   1b388:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1b38c:	da1e      	bge.n	1b3cc <__ieee754_powf+0x138>
   1b38e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1b392:	db09      	blt.n	1b3a8 <__ieee754_powf+0x114>
   1b394:	15f3      	asrs	r3, r6, #23
   1b396:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1b39a:	fa46 f203 	asr.w	r2, r6, r3
   1b39e:	fa02 f303 	lsl.w	r3, r2, r3
   1b3a2:	429e      	cmp	r6, r3
   1b3a4:	f000 818f 	beq.w	1b6c6 <__ieee754_powf+0x432>
   1b3a8:	f04f 0a00 	mov.w	sl, #0
   1b3ac:	e7a3      	b.n	1b2f6 <__ieee754_powf+0x62>
   1b3ae:	2c00      	cmp	r4, #0
   1b3b0:	db22      	blt.n	1b3f8 <__ieee754_powf+0x164>
   1b3b2:	ed9d 0a01 	vldr	s0, [sp, #4]
   1b3b6:	e791      	b.n	1b2dc <__ieee754_powf+0x48>
   1b3b8:	2c00      	cmp	r4, #0
   1b3ba:	bfbc      	itt	lt
   1b3bc:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1b3c0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1b3c4:	f1b8 0f00 	cmp.w	r8, #0
   1b3c8:	da88      	bge.n	1b2dc <__ieee754_powf+0x48>
   1b3ca:	e7c9      	b.n	1b360 <__ieee754_powf+0xcc>
   1b3cc:	f04f 0a02 	mov.w	sl, #2
   1b3d0:	e78e      	b.n	1b2f0 <__ieee754_powf+0x5c>
   1b3d2:	2c00      	cmp	r4, #0
   1b3d4:	dab7      	bge.n	1b346 <__ieee754_powf+0xb2>
   1b3d6:	eddd 7a00 	vldr	s15, [sp]
   1b3da:	eeb1 0a67 	vneg.f32	s0, s15
   1b3de:	e77d      	b.n	1b2dc <__ieee754_powf+0x48>
   1b3e0:	eddd 7a01 	vldr	s15, [sp, #4]
   1b3e4:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b3e8:	e778      	b.n	1b2dc <__ieee754_powf+0x48>
   1b3ea:	b002      	add	sp, #8
   1b3ec:	ecbd 8b02 	vpop	{d8}
   1b3f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b3f4:	f000 ba46 	b.w	1b884 <__ieee754_sqrtf>
   1b3f8:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b3fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b400:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b404:	e76a      	b.n	1b2dc <__ieee754_powf+0x48>
   1b406:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b40a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b40e:	e765      	b.n	1b2dc <__ieee754_powf+0x48>
   1b410:	ee07 5a90 	vmov	s15, r5
   1b414:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b418:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b41c:	e75e      	b.n	1b2dc <__ieee754_powf+0x48>
   1b41e:	bf00      	nop
   1b420:	0002485c 	.word	0x0002485c
   1b424:	3f7ffff7 	.word	0x3f7ffff7
   1b428:	00000000 	.word	0x00000000
   1b42c:	4b800000 	.word	0x4b800000
   1b430:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b434:	f280 815f 	bge.w	1b6f6 <__ieee754_powf+0x462>
   1b438:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b42c <__ieee754_powf+0x198>
   1b43c:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b440:	f06f 0217 	mvn.w	r2, #23
   1b444:	ee17 7a90 	vmov	r7, s15
   1b448:	48ee      	ldr	r0, [pc, #952]	; (1b804 <__ieee754_powf+0x570>)
   1b44a:	15f9      	asrs	r1, r7, #23
   1b44c:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b450:	397f      	subs	r1, #127	; 0x7f
   1b452:	4287      	cmp	r7, r0
   1b454:	4411      	add	r1, r2
   1b456:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b45a:	f340 8144 	ble.w	1b6e6 <__ieee754_powf+0x452>
   1b45e:	48ea      	ldr	r0, [pc, #936]	; (1b808 <__ieee754_powf+0x574>)
   1b460:	4287      	cmp	r7, r0
   1b462:	f340 8191 	ble.w	1b788 <__ieee754_powf+0x4f4>
   1b466:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b80c <__ieee754_powf+0x578>
   1b46a:	3101      	adds	r1, #1
   1b46c:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b470:	eef0 3a64 	vmov.f32	s7, s9
   1b474:	2500      	movs	r5, #0
   1b476:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b47a:	ee06 2a90 	vmov	s13, r2
   1b47e:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b486:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b48a:	1052      	asrs	r2, r2, #1
   1b48c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b490:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b494:	442a      	add	r2, r5
   1b496:	48de      	ldr	r0, [pc, #888]	; (1b810 <__ieee754_powf+0x57c>)
   1b498:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b49c:	ee07 2a90 	vmov	s15, r2
   1b4a0:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b4a4:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b4a8:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b814 <__ieee754_powf+0x580>
   1b4ac:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b818 <__ieee754_powf+0x584>
   1b4b0:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b81c <__ieee754_powf+0x588>
   1b4b4:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b820 <__ieee754_powf+0x58c>
   1b4b8:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b824 <__ieee754_powf+0x590>
   1b4bc:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b828 <__ieee754_powf+0x594>
   1b4c0:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b82c <__ieee754_powf+0x598>
   1b4c4:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b830 <__ieee754_powf+0x59c>
   1b4c8:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b4cc:	ee14 2a10 	vmov	r2, s8
   1b4d0:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b4d4:	4002      	ands	r2, r0
   1b4d6:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b4da:	eeb0 5a61 	vmov.f32	s10, s3
   1b4de:	ee05 2a90 	vmov	s11, r2
   1b4e2:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b4e6:	eef1 1a65 	vneg.f32	s3, s11
   1b4ea:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b4ee:	eef0 7a60 	vmov.f32	s15, s1
   1b4f2:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b4f6:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b4fa:	eeb0 5a41 	vmov.f32	s10, s2
   1b4fe:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b502:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b506:	eeb0 7a42 	vmov.f32	s14, s4
   1b50a:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b50e:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b512:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b516:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b51a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b51e:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b522:	eeb0 7a45 	vmov.f32	s14, s10
   1b526:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b52a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b834 <__ieee754_powf+0x5a0>
   1b52e:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b532:	ee07 1a10 	vmov	s14, r1
   1b536:	ee16 2a10 	vmov	r2, s12
   1b53a:	4002      	ands	r2, r0
   1b53c:	ee06 2a10 	vmov	s12, r2
   1b540:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b548:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b54c:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b550:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b554:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b558:	eef0 6a67 	vmov.f32	s13, s15
   1b55c:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b560:	ee16 2a90 	vmov	r2, s13
   1b564:	4002      	ands	r2, r0
   1b566:	ee06 2a90 	vmov	s13, r2
   1b56a:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b56e:	ee05 2a90 	vmov	s11, r2
   1b572:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b576:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b57a:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b57e:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b582:	eef0 6a67 	vmov.f32	s13, s15
   1b586:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b58a:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b58e:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b592:	ee16 2a90 	vmov	r2, s13
   1b596:	4002      	ands	r2, r0
   1b598:	ee06 2a90 	vmov	s13, r2
   1b59c:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b5a0:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b5a4:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b5a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b5ac:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b5b0:	f024 040f 	bic.w	r4, r4, #15
   1b5b4:	ee07 9a10 	vmov	s14, r9
   1b5b8:	ee06 4a10 	vmov	s12, r4
   1b5bc:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b5c0:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b5c4:	ee07 4a10 	vmov	s14, r4
   1b5c8:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b5cc:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b5d0:	ea5a 0303 	orrs.w	r3, sl, r3
   1b5d4:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b5d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b5dc:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b5e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b5e4:	ee16 2a90 	vmov	r2, s13
   1b5e8:	bf14      	ite	ne
   1b5ea:	eeb0 8a46 	vmovne.f32	s16, s12
   1b5ee:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b5f2:	2a00      	cmp	r2, #0
   1b5f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b5f8:	f340 80b3 	ble.w	1b762 <__ieee754_powf+0x4ce>
   1b5fc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b600:	f300 8086 	bgt.w	1b710 <__ieee754_powf+0x47c>
   1b604:	d079      	beq.n	1b6fa <__ieee754_powf+0x466>
   1b606:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b60a:	f300 8088 	bgt.w	1b71e <__ieee754_powf+0x48a>
   1b60e:	2100      	movs	r1, #0
   1b610:	4608      	mov	r0, r1
   1b612:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b616:	f023 030f 	bic.w	r3, r3, #15
   1b61a:	ee06 3a10 	vmov	s12, r3
   1b61e:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b838 <__ieee754_powf+0x5a4>
   1b622:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b83c <__ieee754_powf+0x5a8>
   1b626:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b840 <__ieee754_powf+0x5ac>
   1b62a:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b844 <__ieee754_powf+0x5b0>
   1b62e:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b848 <__ieee754_powf+0x5b4>
   1b632:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b84c <__ieee754_powf+0x5b8>
   1b636:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b850 <__ieee754_powf+0x5bc>
   1b63a:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b854 <__ieee754_powf+0x5c0>
   1b63e:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b642:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b646:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b64a:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b64e:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b652:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b656:	eef0 7a47 	vmov.f32	s15, s14
   1b65a:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b65e:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b662:	eef0 1a47 	vmov.f32	s3, s14
   1b666:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b66a:	eeb0 6a63 	vmov.f32	s12, s7
   1b66e:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b672:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b676:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b67a:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b67e:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b682:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b686:	eeb0 6a45 	vmov.f32	s12, s10
   1b68a:	eeb0 5a47 	vmov.f32	s10, s14
   1b68e:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b692:	eef0 6a45 	vmov.f32	s13, s10
   1b696:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b69a:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b69e:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b6a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b6a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b6aa:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b6ae:	ee10 3a10 	vmov	r3, s0
   1b6b2:	440b      	add	r3, r1
   1b6b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b6b8:	f2c0 80a0 	blt.w	1b7fc <__ieee754_powf+0x568>
   1b6bc:	ee00 3a10 	vmov	s0, r3
   1b6c0:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b6c4:	e60a      	b.n	1b2dc <__ieee754_powf+0x48>
   1b6c6:	f002 0201 	and.w	r2, r2, #1
   1b6ca:	f1c2 0a02 	rsb	sl, r2, #2
   1b6ce:	e612      	b.n	1b2f6 <__ieee754_powf+0x62>
   1b6d0:	4a61      	ldr	r2, [pc, #388]	; (1b858 <__ieee754_powf+0x5c4>)
   1b6d2:	4297      	cmp	r7, r2
   1b6d4:	dd61      	ble.n	1b79a <__ieee754_powf+0x506>
   1b6d6:	2c00      	cmp	r4, #0
   1b6d8:	f77f ae35 	ble.w	1b346 <__ieee754_powf+0xb2>
   1b6dc:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b85c <__ieee754_powf+0x5c8>
   1b6e0:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b6e4:	e5fa      	b.n	1b2dc <__ieee754_powf+0x48>
   1b6e6:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b80c <__ieee754_powf+0x578>
   1b6ea:	2500      	movs	r5, #0
   1b6ec:	eef0 3a64 	vmov.f32	s7, s9
   1b6f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b6f4:	e6c1      	b.n	1b47a <__ieee754_powf+0x1e6>
   1b6f6:	2200      	movs	r2, #0
   1b6f8:	e6a6      	b.n	1b448 <__ieee754_powf+0x1b4>
   1b6fa:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b860 <__ieee754_powf+0x5cc>
   1b6fe:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b702:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b706:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b70e:	dd06      	ble.n	1b71e <__ieee754_powf+0x48a>
   1b710:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b85c <__ieee754_powf+0x5c8>
   1b714:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b718:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b71c:	e5de      	b.n	1b2dc <__ieee754_powf+0x48>
   1b71e:	15db      	asrs	r3, r3, #23
   1b720:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b724:	3b7e      	subs	r3, #126	; 0x7e
   1b726:	fa41 f303 	asr.w	r3, r1, r3
   1b72a:	4413      	add	r3, r2
   1b72c:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b730:	4c4c      	ldr	r4, [pc, #304]	; (1b864 <__ieee754_powf+0x5d0>)
   1b732:	397f      	subs	r1, #127	; 0x7f
   1b734:	410c      	asrs	r4, r1
   1b736:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b73a:	ea23 0304 	bic.w	r3, r3, r4
   1b73e:	ee06 3a90 	vmov	s13, r3
   1b742:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b746:	f1c1 0117 	rsb	r1, r1, #23
   1b74a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b74e:	4108      	asrs	r0, r1
   1b750:	2a00      	cmp	r2, #0
   1b752:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b756:	bfb8      	it	lt
   1b758:	4240      	neglt	r0, r0
   1b75a:	05c1      	lsls	r1, r0, #23
   1b75c:	ee16 2a90 	vmov	r2, s13
   1b760:	e757      	b.n	1b612 <__ieee754_powf+0x37e>
   1b762:	4941      	ldr	r1, [pc, #260]	; (1b868 <__ieee754_powf+0x5d4>)
   1b764:	428b      	cmp	r3, r1
   1b766:	dc08      	bgt.n	1b77a <__ieee754_powf+0x4e6>
   1b768:	f47f af4d 	bne.w	1b606 <__ieee754_powf+0x372>
   1b76c:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b770:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b778:	d8d1      	bhi.n	1b71e <__ieee754_powf+0x48a>
   1b77a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b86c <__ieee754_powf+0x5d8>
   1b77e:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b782:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b786:	e5a9      	b.n	1b2dc <__ieee754_powf+0x48>
   1b788:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b870 <__ieee754_powf+0x5dc>
   1b78c:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b874 <__ieee754_powf+0x5e0>
   1b790:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b794:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b798:	e66f      	b.n	1b47a <__ieee754_powf+0x1e6>
   1b79a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b79e:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b7a2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b820 <__ieee754_powf+0x58c>
   1b7a6:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b878 <__ieee754_powf+0x5e4>
   1b7aa:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b87c <__ieee754_powf+0x5e8>
   1b7ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b880 <__ieee754_powf+0x5ec>
   1b7b2:	eeb1 6a40 	vneg.f32	s12, s0
   1b7b6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b7ba:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b7be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b7c2:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b7c6:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b7ca:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b7ce:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b7d2:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b7d6:	eef0 6a67 	vmov.f32	s13, s15
   1b7da:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b7de:	ee16 2a90 	vmov	r2, s13
   1b7e2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b7e6:	f022 020f 	bic.w	r2, r2, #15
   1b7ea:	ee07 2a10 	vmov	s14, r2
   1b7ee:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b7f2:	ee06 2a90 	vmov	s13, r2
   1b7f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b7fa:	e6d7      	b.n	1b5ac <__ieee754_powf+0x318>
   1b7fc:	f000 f8f2 	bl	1b9e4 <scalbnf>
   1b800:	e75e      	b.n	1b6c0 <__ieee754_powf+0x42c>
   1b802:	bf00      	nop
   1b804:	001cc471 	.word	0x001cc471
   1b808:	005db3d6 	.word	0x005db3d6
   1b80c:	00000000 	.word	0x00000000
   1b810:	fffff000 	.word	0xfffff000
   1b814:	3e53f142 	.word	0x3e53f142
   1b818:	3e6c3255 	.word	0x3e6c3255
   1b81c:	3e8ba305 	.word	0x3e8ba305
   1b820:	3eaaaaab 	.word	0x3eaaaaab
   1b824:	3edb6db7 	.word	0x3edb6db7
   1b828:	3f19999a 	.word	0x3f19999a
   1b82c:	3f76384f 	.word	0x3f76384f
   1b830:	369dc3a0 	.word	0x369dc3a0
   1b834:	3f763800 	.word	0x3f763800
   1b838:	35bfbe8c 	.word	0x35bfbe8c
   1b83c:	3f317218 	.word	0x3f317218
   1b840:	3f317200 	.word	0x3f317200
   1b844:	b5ddea0e 	.word	0xb5ddea0e
   1b848:	3331bb4c 	.word	0x3331bb4c
   1b84c:	388ab355 	.word	0x388ab355
   1b850:	bb360b61 	.word	0xbb360b61
   1b854:	3e2aaaab 	.word	0x3e2aaaab
   1b858:	3f800007 	.word	0x3f800007
   1b85c:	7149f2ca 	.word	0x7149f2ca
   1b860:	3338aa3c 	.word	0x3338aa3c
   1b864:	007fffff 	.word	0x007fffff
   1b868:	43160000 	.word	0x43160000
   1b86c:	0da24260 	.word	0x0da24260
   1b870:	3f15c000 	.word	0x3f15c000
   1b874:	35d1cfdc 	.word	0x35d1cfdc
   1b878:	3fb8aa3b 	.word	0x3fb8aa3b
   1b87c:	36eca570 	.word	0x36eca570
   1b880:	3fb8aa00 	.word	0x3fb8aa00

0001b884 <__ieee754_sqrtf>:
   1b884:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b888:	4770      	bx	lr
   1b88a:	bf00      	nop

0001b88c <matherr>:
   1b88c:	2000      	movs	r0, #0
   1b88e:	4770      	bx	lr

0001b890 <rint>:
   1b890:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b892:	ec53 2b10 	vmov	r2, r3, d0
   1b896:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b89a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b89e:	2813      	cmp	r0, #19
   1b8a0:	b083      	sub	sp, #12
   1b8a2:	4619      	mov	r1, r3
   1b8a4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b8a8:	ee10 5a10 	vmov	r5, s0
   1b8ac:	dc2f      	bgt.n	1b90e <rint+0x7e>
   1b8ae:	2800      	cmp	r0, #0
   1b8b0:	db49      	blt.n	1b946 <rint+0xb6>
   1b8b2:	4e3e      	ldr	r6, [pc, #248]	; (1b9ac <rint+0x11c>)
   1b8b4:	4106      	asrs	r6, r0
   1b8b6:	ea03 0706 	and.w	r7, r3, r6
   1b8ba:	4317      	orrs	r7, r2
   1b8bc:	d02c      	beq.n	1b918 <rint+0x88>
   1b8be:	0876      	lsrs	r6, r6, #1
   1b8c0:	4033      	ands	r3, r6
   1b8c2:	431d      	orrs	r5, r3
   1b8c4:	d00c      	beq.n	1b8e0 <rint+0x50>
   1b8c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b8ca:	2813      	cmp	r0, #19
   1b8cc:	ea21 0606 	bic.w	r6, r1, r6
   1b8d0:	fa43 f100 	asr.w	r1, r3, r0
   1b8d4:	ea41 0106 	orr.w	r1, r1, r6
   1b8d8:	bf0c      	ite	eq
   1b8da:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b8de:	2500      	movne	r5, #0
   1b8e0:	4833      	ldr	r0, [pc, #204]	; (1b9b0 <rint+0x120>)
   1b8e2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b8e6:	462a      	mov	r2, r5
   1b8e8:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b8ec:	4610      	mov	r0, r2
   1b8ee:	462b      	mov	r3, r5
   1b8f0:	4622      	mov	r2, r4
   1b8f2:	f000 f8f1 	bl	1bad8 <__adddf3>
   1b8f6:	e9cd 0100 	strd	r0, r1, [sp]
   1b8fa:	4622      	mov	r2, r4
   1b8fc:	462b      	mov	r3, r5
   1b8fe:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b902:	f000 f8e7 	bl	1bad4 <__aeabi_dsub>
   1b906:	ec41 0b10 	vmov	d0, r0, r1
   1b90a:	b003      	add	sp, #12
   1b90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b90e:	2833      	cmp	r0, #51	; 0x33
   1b910:	dd06      	ble.n	1b920 <rint+0x90>
   1b912:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b916:	d040      	beq.n	1b99a <rint+0x10a>
   1b918:	ec43 2b10 	vmov	d0, r2, r3
   1b91c:	b003      	add	sp, #12
   1b91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b920:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b924:	f04f 30ff 	mov.w	r0, #4294967295
   1b928:	40f0      	lsrs	r0, r6
   1b92a:	4202      	tst	r2, r0
   1b92c:	d0f4      	beq.n	1b918 <rint+0x88>
   1b92e:	0840      	lsrs	r0, r0, #1
   1b930:	4202      	tst	r2, r0
   1b932:	d0d5      	beq.n	1b8e0 <rint+0x50>
   1b934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b938:	ea25 0000 	bic.w	r0, r5, r0
   1b93c:	fa43 f606 	asr.w	r6, r3, r6
   1b940:	ea46 0500 	orr.w	r5, r6, r0
   1b944:	e7cc      	b.n	1b8e0 <rint+0x50>
   1b946:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b94a:	4310      	orrs	r0, r2
   1b94c:	d0e4      	beq.n	1b918 <rint+0x88>
   1b94e:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b952:	4310      	orrs	r0, r2
   1b954:	4247      	negs	r7, r0
   1b956:	4307      	orrs	r7, r0
   1b958:	4d15      	ldr	r5, [pc, #84]	; (1b9b0 <rint+0x120>)
   1b95a:	0c5e      	lsrs	r6, r3, #17
   1b95c:	0b3f      	lsrs	r7, r7, #12
   1b95e:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b962:	0476      	lsls	r6, r6, #17
   1b964:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b968:	ea43 0106 	orr.w	r1, r3, r6
   1b96c:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b970:	ee10 0a10 	vmov	r0, s0
   1b974:	4632      	mov	r2, r6
   1b976:	463b      	mov	r3, r7
   1b978:	f000 f8ae 	bl	1bad8 <__adddf3>
   1b97c:	e9cd 0100 	strd	r0, r1, [sp]
   1b980:	463b      	mov	r3, r7
   1b982:	4632      	mov	r2, r6
   1b984:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b988:	f000 f8a4 	bl	1bad4 <__aeabi_dsub>
   1b98c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b990:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b994:	ec41 0b10 	vmov	d0, r0, r1
   1b998:	e7c0      	b.n	1b91c <rint+0x8c>
   1b99a:	ee10 0a10 	vmov	r0, s0
   1b99e:	4619      	mov	r1, r3
   1b9a0:	f000 f89a 	bl	1bad8 <__adddf3>
   1b9a4:	ec41 0b10 	vmov	d0, r0, r1
   1b9a8:	e7b8      	b.n	1b91c <rint+0x8c>
   1b9aa:	bf00      	nop
   1b9ac:	000fffff 	.word	0x000fffff
   1b9b0:	00024dd0 	.word	0x00024dd0

0001b9b4 <fabsf>:
   1b9b4:	ee10 3a10 	vmov	r3, s0
   1b9b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b9bc:	ee00 3a10 	vmov	s0, r3
   1b9c0:	4770      	bx	lr
   1b9c2:	bf00      	nop

0001b9c4 <finitef>:
   1b9c4:	ee10 3a10 	vmov	r3, s0
   1b9c8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b9cc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b9d0:	bfac      	ite	ge
   1b9d2:	2000      	movge	r0, #0
   1b9d4:	2001      	movlt	r0, #1
   1b9d6:	4770      	bx	lr

0001b9d8 <nanf>:
   1b9d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b9e0 <nanf+0x8>
   1b9dc:	4770      	bx	lr
   1b9de:	bf00      	nop
   1b9e0:	7fc00000 	.word	0x7fc00000

0001b9e4 <scalbnf>:
   1b9e4:	b508      	push	{r3, lr}
   1b9e6:	ee10 3a10 	vmov	r3, s0
   1b9ea:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b9ee:	ed2d 8b02 	vpush	{d8}
   1b9f2:	d011      	beq.n	1ba18 <scalbnf+0x34>
   1b9f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b9f8:	d211      	bcs.n	1ba1e <scalbnf+0x3a>
   1b9fa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b9fe:	d313      	bcc.n	1ba28 <scalbnf+0x44>
   1ba00:	0dd2      	lsrs	r2, r2, #23
   1ba02:	4402      	add	r2, r0
   1ba04:	2afe      	cmp	r2, #254	; 0xfe
   1ba06:	dc2e      	bgt.n	1ba66 <scalbnf+0x82>
   1ba08:	2a00      	cmp	r2, #0
   1ba0a:	dd1a      	ble.n	1ba42 <scalbnf+0x5e>
   1ba0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1ba10:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1ba14:	ee00 3a10 	vmov	s0, r3
   1ba18:	ecbd 8b02 	vpop	{d8}
   1ba1c:	bd08      	pop	{r3, pc}
   1ba1e:	ecbd 8b02 	vpop	{d8}
   1ba22:	ee30 0a00 	vadd.f32	s0, s0, s0
   1ba26:	bd08      	pop	{r3, pc}
   1ba28:	4b1d      	ldr	r3, [pc, #116]	; (1baa0 <scalbnf+0xbc>)
   1ba2a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1baa4 <scalbnf+0xc0>
   1ba2e:	4298      	cmp	r0, r3
   1ba30:	ee20 0a27 	vmul.f32	s0, s0, s15
   1ba34:	db22      	blt.n	1ba7c <scalbnf+0x98>
   1ba36:	ee10 3a10 	vmov	r3, s0
   1ba3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1ba3e:	3a19      	subs	r2, #25
   1ba40:	e7df      	b.n	1ba02 <scalbnf+0x1e>
   1ba42:	f112 0f16 	cmn.w	r2, #22
   1ba46:	da1e      	bge.n	1ba86 <scalbnf+0xa2>
   1ba48:	f24c 3350 	movw	r3, #50000	; 0xc350
   1ba4c:	4298      	cmp	r0, r3
   1ba4e:	dc0a      	bgt.n	1ba66 <scalbnf+0x82>
   1ba50:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1baa8 <scalbnf+0xc4>
   1ba54:	eef0 0a40 	vmov.f32	s1, s0
   1ba58:	eeb0 0a48 	vmov.f32	s0, s16
   1ba5c:	f000 f82a 	bl	1bab4 <copysignf>
   1ba60:	ee20 0a08 	vmul.f32	s0, s0, s16
   1ba64:	e7d8      	b.n	1ba18 <scalbnf+0x34>
   1ba66:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1baac <scalbnf+0xc8>
   1ba6a:	eef0 0a40 	vmov.f32	s1, s0
   1ba6e:	eeb0 0a48 	vmov.f32	s0, s16
   1ba72:	f000 f81f 	bl	1bab4 <copysignf>
   1ba76:	ee20 0a08 	vmul.f32	s0, s0, s16
   1ba7a:	e7cd      	b.n	1ba18 <scalbnf+0x34>
   1ba7c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1baa8 <scalbnf+0xc4>
   1ba80:	ee20 0a20 	vmul.f32	s0, s0, s1
   1ba84:	e7c8      	b.n	1ba18 <scalbnf+0x34>
   1ba86:	3219      	adds	r2, #25
   1ba88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1ba8c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1ba90:	eddf 7a07 	vldr	s15, [pc, #28]	; 1bab0 <scalbnf+0xcc>
   1ba94:	ee00 3a10 	vmov	s0, r3
   1ba98:	ee20 0a27 	vmul.f32	s0, s0, s15
   1ba9c:	e7bc      	b.n	1ba18 <scalbnf+0x34>
   1ba9e:	bf00      	nop
   1baa0:	ffff3cb0 	.word	0xffff3cb0
   1baa4:	4c000000 	.word	0x4c000000
   1baa8:	0da24260 	.word	0x0da24260
   1baac:	7149f2ca 	.word	0x7149f2ca
   1bab0:	33000000 	.word	0x33000000

0001bab4 <copysignf>:
   1bab4:	ee10 3a10 	vmov	r3, s0
   1bab8:	ee10 2a90 	vmov	r2, s1
   1babc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1bac0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1bac4:	4313      	orrs	r3, r2
   1bac6:	ee00 3a10 	vmov	s0, r3
   1baca:	4770      	bx	lr

0001bacc <__aeabi_drsub>:
   1bacc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1bad0:	e002      	b.n	1bad8 <__adddf3>
   1bad2:	bf00      	nop

0001bad4 <__aeabi_dsub>:
   1bad4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001bad8 <__adddf3>:
   1bad8:	b530      	push	{r4, r5, lr}
   1bada:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1bade:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1bae2:	ea94 0f05 	teq	r4, r5
   1bae6:	bf08      	it	eq
   1bae8:	ea90 0f02 	teqeq	r0, r2
   1baec:	bf1f      	itttt	ne
   1baee:	ea54 0c00 	orrsne.w	ip, r4, r0
   1baf2:	ea55 0c02 	orrsne.w	ip, r5, r2
   1baf6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1bafa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1bafe:	f000 80e2 	beq.w	1bcc6 <__adddf3+0x1ee>
   1bb02:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1bb06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1bb0a:	bfb8      	it	lt
   1bb0c:	426d      	neglt	r5, r5
   1bb0e:	dd0c      	ble.n	1bb2a <__adddf3+0x52>
   1bb10:	442c      	add	r4, r5
   1bb12:	ea80 0202 	eor.w	r2, r0, r2
   1bb16:	ea81 0303 	eor.w	r3, r1, r3
   1bb1a:	ea82 0000 	eor.w	r0, r2, r0
   1bb1e:	ea83 0101 	eor.w	r1, r3, r1
   1bb22:	ea80 0202 	eor.w	r2, r0, r2
   1bb26:	ea81 0303 	eor.w	r3, r1, r3
   1bb2a:	2d36      	cmp	r5, #54	; 0x36
   1bb2c:	bf88      	it	hi
   1bb2e:	bd30      	pophi	{r4, r5, pc}
   1bb30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bb34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bb38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1bb3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1bb40:	d002      	beq.n	1bb48 <__adddf3+0x70>
   1bb42:	4240      	negs	r0, r0
   1bb44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1bb48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1bb4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bb50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1bb54:	d002      	beq.n	1bb5c <__adddf3+0x84>
   1bb56:	4252      	negs	r2, r2
   1bb58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1bb5c:	ea94 0f05 	teq	r4, r5
   1bb60:	f000 80a7 	beq.w	1bcb2 <__adddf3+0x1da>
   1bb64:	f1a4 0401 	sub.w	r4, r4, #1
   1bb68:	f1d5 0e20 	rsbs	lr, r5, #32
   1bb6c:	db0d      	blt.n	1bb8a <__adddf3+0xb2>
   1bb6e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1bb72:	fa22 f205 	lsr.w	r2, r2, r5
   1bb76:	1880      	adds	r0, r0, r2
   1bb78:	f141 0100 	adc.w	r1, r1, #0
   1bb7c:	fa03 f20e 	lsl.w	r2, r3, lr
   1bb80:	1880      	adds	r0, r0, r2
   1bb82:	fa43 f305 	asr.w	r3, r3, r5
   1bb86:	4159      	adcs	r1, r3
   1bb88:	e00e      	b.n	1bba8 <__adddf3+0xd0>
   1bb8a:	f1a5 0520 	sub.w	r5, r5, #32
   1bb8e:	f10e 0e20 	add.w	lr, lr, #32
   1bb92:	2a01      	cmp	r2, #1
   1bb94:	fa03 fc0e 	lsl.w	ip, r3, lr
   1bb98:	bf28      	it	cs
   1bb9a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1bb9e:	fa43 f305 	asr.w	r3, r3, r5
   1bba2:	18c0      	adds	r0, r0, r3
   1bba4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1bba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bbac:	d507      	bpl.n	1bbbe <__adddf3+0xe6>
   1bbae:	f04f 0e00 	mov.w	lr, #0
   1bbb2:	f1dc 0c00 	rsbs	ip, ip, #0
   1bbb6:	eb7e 0000 	sbcs.w	r0, lr, r0
   1bbba:	eb6e 0101 	sbc.w	r1, lr, r1
   1bbbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1bbc2:	d31b      	bcc.n	1bbfc <__adddf3+0x124>
   1bbc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1bbc8:	d30c      	bcc.n	1bbe4 <__adddf3+0x10c>
   1bbca:	0849      	lsrs	r1, r1, #1
   1bbcc:	ea5f 0030 	movs.w	r0, r0, rrx
   1bbd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1bbd4:	f104 0401 	add.w	r4, r4, #1
   1bbd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1bbdc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1bbe0:	f080 809a 	bcs.w	1bd18 <__adddf3+0x240>
   1bbe4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1bbe8:	bf08      	it	eq
   1bbea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bbee:	f150 0000 	adcs.w	r0, r0, #0
   1bbf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bbf6:	ea41 0105 	orr.w	r1, r1, r5
   1bbfa:	bd30      	pop	{r4, r5, pc}
   1bbfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1bc00:	4140      	adcs	r0, r0
   1bc02:	eb41 0101 	adc.w	r1, r1, r1
   1bc06:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc0a:	f1a4 0401 	sub.w	r4, r4, #1
   1bc0e:	d1e9      	bne.n	1bbe4 <__adddf3+0x10c>
   1bc10:	f091 0f00 	teq	r1, #0
   1bc14:	bf04      	itt	eq
   1bc16:	4601      	moveq	r1, r0
   1bc18:	2000      	moveq	r0, #0
   1bc1a:	fab1 f381 	clz	r3, r1
   1bc1e:	bf08      	it	eq
   1bc20:	3320      	addeq	r3, #32
   1bc22:	f1a3 030b 	sub.w	r3, r3, #11
   1bc26:	f1b3 0220 	subs.w	r2, r3, #32
   1bc2a:	da0c      	bge.n	1bc46 <__adddf3+0x16e>
   1bc2c:	320c      	adds	r2, #12
   1bc2e:	dd08      	ble.n	1bc42 <__adddf3+0x16a>
   1bc30:	f102 0c14 	add.w	ip, r2, #20
   1bc34:	f1c2 020c 	rsb	r2, r2, #12
   1bc38:	fa01 f00c 	lsl.w	r0, r1, ip
   1bc3c:	fa21 f102 	lsr.w	r1, r1, r2
   1bc40:	e00c      	b.n	1bc5c <__adddf3+0x184>
   1bc42:	f102 0214 	add.w	r2, r2, #20
   1bc46:	bfd8      	it	le
   1bc48:	f1c2 0c20 	rsble	ip, r2, #32
   1bc4c:	fa01 f102 	lsl.w	r1, r1, r2
   1bc50:	fa20 fc0c 	lsr.w	ip, r0, ip
   1bc54:	bfdc      	itt	le
   1bc56:	ea41 010c 	orrle.w	r1, r1, ip
   1bc5a:	4090      	lslle	r0, r2
   1bc5c:	1ae4      	subs	r4, r4, r3
   1bc5e:	bfa2      	ittt	ge
   1bc60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1bc64:	4329      	orrge	r1, r5
   1bc66:	bd30      	popge	{r4, r5, pc}
   1bc68:	ea6f 0404 	mvn.w	r4, r4
   1bc6c:	3c1f      	subs	r4, #31
   1bc6e:	da1c      	bge.n	1bcaa <__adddf3+0x1d2>
   1bc70:	340c      	adds	r4, #12
   1bc72:	dc0e      	bgt.n	1bc92 <__adddf3+0x1ba>
   1bc74:	f104 0414 	add.w	r4, r4, #20
   1bc78:	f1c4 0220 	rsb	r2, r4, #32
   1bc7c:	fa20 f004 	lsr.w	r0, r0, r4
   1bc80:	fa01 f302 	lsl.w	r3, r1, r2
   1bc84:	ea40 0003 	orr.w	r0, r0, r3
   1bc88:	fa21 f304 	lsr.w	r3, r1, r4
   1bc8c:	ea45 0103 	orr.w	r1, r5, r3
   1bc90:	bd30      	pop	{r4, r5, pc}
   1bc92:	f1c4 040c 	rsb	r4, r4, #12
   1bc96:	f1c4 0220 	rsb	r2, r4, #32
   1bc9a:	fa20 f002 	lsr.w	r0, r0, r2
   1bc9e:	fa01 f304 	lsl.w	r3, r1, r4
   1bca2:	ea40 0003 	orr.w	r0, r0, r3
   1bca6:	4629      	mov	r1, r5
   1bca8:	bd30      	pop	{r4, r5, pc}
   1bcaa:	fa21 f004 	lsr.w	r0, r1, r4
   1bcae:	4629      	mov	r1, r5
   1bcb0:	bd30      	pop	{r4, r5, pc}
   1bcb2:	f094 0f00 	teq	r4, #0
   1bcb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1bcba:	bf06      	itte	eq
   1bcbc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1bcc0:	3401      	addeq	r4, #1
   1bcc2:	3d01      	subne	r5, #1
   1bcc4:	e74e      	b.n	1bb64 <__adddf3+0x8c>
   1bcc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1bcca:	bf18      	it	ne
   1bccc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1bcd0:	d029      	beq.n	1bd26 <__adddf3+0x24e>
   1bcd2:	ea94 0f05 	teq	r4, r5
   1bcd6:	bf08      	it	eq
   1bcd8:	ea90 0f02 	teqeq	r0, r2
   1bcdc:	d005      	beq.n	1bcea <__adddf3+0x212>
   1bcde:	ea54 0c00 	orrs.w	ip, r4, r0
   1bce2:	bf04      	itt	eq
   1bce4:	4619      	moveq	r1, r3
   1bce6:	4610      	moveq	r0, r2
   1bce8:	bd30      	pop	{r4, r5, pc}
   1bcea:	ea91 0f03 	teq	r1, r3
   1bcee:	bf1e      	ittt	ne
   1bcf0:	2100      	movne	r1, #0
   1bcf2:	2000      	movne	r0, #0
   1bcf4:	bd30      	popne	{r4, r5, pc}
   1bcf6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1bcfa:	d105      	bne.n	1bd08 <__adddf3+0x230>
   1bcfc:	0040      	lsls	r0, r0, #1
   1bcfe:	4149      	adcs	r1, r1
   1bd00:	bf28      	it	cs
   1bd02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1bd06:	bd30      	pop	{r4, r5, pc}
   1bd08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1bd0c:	bf3c      	itt	cc
   1bd0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1bd12:	bd30      	popcc	{r4, r5, pc}
   1bd14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bd18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1bd1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bd20:	f04f 0000 	mov.w	r0, #0
   1bd24:	bd30      	pop	{r4, r5, pc}
   1bd26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1bd2a:	bf1a      	itte	ne
   1bd2c:	4619      	movne	r1, r3
   1bd2e:	4610      	movne	r0, r2
   1bd30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1bd34:	bf1c      	itt	ne
   1bd36:	460b      	movne	r3, r1
   1bd38:	4602      	movne	r2, r0
   1bd3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bd3e:	bf06      	itte	eq
   1bd40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1bd44:	ea91 0f03 	teqeq	r1, r3
   1bd48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1bd4c:	bd30      	pop	{r4, r5, pc}
   1bd4e:	bf00      	nop

0001bd50 <__aeabi_ui2d>:
   1bd50:	f090 0f00 	teq	r0, #0
   1bd54:	bf04      	itt	eq
   1bd56:	2100      	moveq	r1, #0
   1bd58:	4770      	bxeq	lr
   1bd5a:	b530      	push	{r4, r5, lr}
   1bd5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bd60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bd64:	f04f 0500 	mov.w	r5, #0
   1bd68:	f04f 0100 	mov.w	r1, #0
   1bd6c:	e750      	b.n	1bc10 <__adddf3+0x138>
   1bd6e:	bf00      	nop

0001bd70 <__aeabi_i2d>:
   1bd70:	f090 0f00 	teq	r0, #0
   1bd74:	bf04      	itt	eq
   1bd76:	2100      	moveq	r1, #0
   1bd78:	4770      	bxeq	lr
   1bd7a:	b530      	push	{r4, r5, lr}
   1bd7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bd80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bd84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1bd88:	bf48      	it	mi
   1bd8a:	4240      	negmi	r0, r0
   1bd8c:	f04f 0100 	mov.w	r1, #0
   1bd90:	e73e      	b.n	1bc10 <__adddf3+0x138>
   1bd92:	bf00      	nop

0001bd94 <__aeabi_f2d>:
   1bd94:	0042      	lsls	r2, r0, #1
   1bd96:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1bd9a:	ea4f 0131 	mov.w	r1, r1, rrx
   1bd9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1bda2:	bf1f      	itttt	ne
   1bda4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1bda8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bdac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1bdb0:	4770      	bxne	lr
   1bdb2:	f092 0f00 	teq	r2, #0
   1bdb6:	bf14      	ite	ne
   1bdb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1bdbc:	4770      	bxeq	lr
   1bdbe:	b530      	push	{r4, r5, lr}
   1bdc0:	f44f 7460 	mov.w	r4, #896	; 0x380
   1bdc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1bdc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bdcc:	e720      	b.n	1bc10 <__adddf3+0x138>
   1bdce:	bf00      	nop

0001bdd0 <__aeabi_ul2d>:
   1bdd0:	ea50 0201 	orrs.w	r2, r0, r1
   1bdd4:	bf08      	it	eq
   1bdd6:	4770      	bxeq	lr
   1bdd8:	b530      	push	{r4, r5, lr}
   1bdda:	f04f 0500 	mov.w	r5, #0
   1bdde:	e00a      	b.n	1bdf6 <__aeabi_l2d+0x16>

0001bde0 <__aeabi_l2d>:
   1bde0:	ea50 0201 	orrs.w	r2, r0, r1
   1bde4:	bf08      	it	eq
   1bde6:	4770      	bxeq	lr
   1bde8:	b530      	push	{r4, r5, lr}
   1bdea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1bdee:	d502      	bpl.n	1bdf6 <__aeabi_l2d+0x16>
   1bdf0:	4240      	negs	r0, r0
   1bdf2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1bdf6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1bdfa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1bdfe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1be02:	f43f aedc 	beq.w	1bbbe <__adddf3+0xe6>
   1be06:	f04f 0203 	mov.w	r2, #3
   1be0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1be0e:	bf18      	it	ne
   1be10:	3203      	addne	r2, #3
   1be12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1be16:	bf18      	it	ne
   1be18:	3203      	addne	r2, #3
   1be1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1be1e:	f1c2 0320 	rsb	r3, r2, #32
   1be22:	fa00 fc03 	lsl.w	ip, r0, r3
   1be26:	fa20 f002 	lsr.w	r0, r0, r2
   1be2a:	fa01 fe03 	lsl.w	lr, r1, r3
   1be2e:	ea40 000e 	orr.w	r0, r0, lr
   1be32:	fa21 f102 	lsr.w	r1, r1, r2
   1be36:	4414      	add	r4, r2
   1be38:	e6c1      	b.n	1bbbe <__adddf3+0xe6>
   1be3a:	bf00      	nop

0001be3c <__aeabi_dmul>:
   1be3c:	b570      	push	{r4, r5, r6, lr}
   1be3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1be42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1be46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1be4a:	bf1d      	ittte	ne
   1be4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1be50:	ea94 0f0c 	teqne	r4, ip
   1be54:	ea95 0f0c 	teqne	r5, ip
   1be58:	f000 f8de 	bleq	1c018 <__aeabi_dmul+0x1dc>
   1be5c:	442c      	add	r4, r5
   1be5e:	ea81 0603 	eor.w	r6, r1, r3
   1be62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1be66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1be6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1be6e:	bf18      	it	ne
   1be70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1be74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1be78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1be7c:	d038      	beq.n	1bef0 <__aeabi_dmul+0xb4>
   1be7e:	fba0 ce02 	umull	ip, lr, r0, r2
   1be82:	f04f 0500 	mov.w	r5, #0
   1be86:	fbe1 e502 	umlal	lr, r5, r1, r2
   1be8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1be8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   1be92:	f04f 0600 	mov.w	r6, #0
   1be96:	fbe1 5603 	umlal	r5, r6, r1, r3
   1be9a:	f09c 0f00 	teq	ip, #0
   1be9e:	bf18      	it	ne
   1bea0:	f04e 0e01 	orrne.w	lr, lr, #1
   1bea4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1bea8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1beac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1beb0:	d204      	bcs.n	1bebc <__aeabi_dmul+0x80>
   1beb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1beb6:	416d      	adcs	r5, r5
   1beb8:	eb46 0606 	adc.w	r6, r6, r6
   1bebc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1bec0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1bec4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1bec8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1becc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1bed0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bed4:	bf88      	it	hi
   1bed6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1beda:	d81e      	bhi.n	1bf1a <__aeabi_dmul+0xde>
   1bedc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1bee0:	bf08      	it	eq
   1bee2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1bee6:	f150 0000 	adcs.w	r0, r0, #0
   1beea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1beee:	bd70      	pop	{r4, r5, r6, pc}
   1bef0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1bef4:	ea46 0101 	orr.w	r1, r6, r1
   1bef8:	ea40 0002 	orr.w	r0, r0, r2
   1befc:	ea81 0103 	eor.w	r1, r1, r3
   1bf00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1bf04:	bfc2      	ittt	gt
   1bf06:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bf0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bf0e:	bd70      	popgt	{r4, r5, r6, pc}
   1bf10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bf14:	f04f 0e00 	mov.w	lr, #0
   1bf18:	3c01      	subs	r4, #1
   1bf1a:	f300 80ab 	bgt.w	1c074 <__aeabi_dmul+0x238>
   1bf1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1bf22:	bfde      	ittt	le
   1bf24:	2000      	movle	r0, #0
   1bf26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1bf2a:	bd70      	pople	{r4, r5, r6, pc}
   1bf2c:	f1c4 0400 	rsb	r4, r4, #0
   1bf30:	3c20      	subs	r4, #32
   1bf32:	da35      	bge.n	1bfa0 <__aeabi_dmul+0x164>
   1bf34:	340c      	adds	r4, #12
   1bf36:	dc1b      	bgt.n	1bf70 <__aeabi_dmul+0x134>
   1bf38:	f104 0414 	add.w	r4, r4, #20
   1bf3c:	f1c4 0520 	rsb	r5, r4, #32
   1bf40:	fa00 f305 	lsl.w	r3, r0, r5
   1bf44:	fa20 f004 	lsr.w	r0, r0, r4
   1bf48:	fa01 f205 	lsl.w	r2, r1, r5
   1bf4c:	ea40 0002 	orr.w	r0, r0, r2
   1bf50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1bf54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bf58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bf5c:	fa21 f604 	lsr.w	r6, r1, r4
   1bf60:	eb42 0106 	adc.w	r1, r2, r6
   1bf64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bf68:	bf08      	it	eq
   1bf6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bf6e:	bd70      	pop	{r4, r5, r6, pc}
   1bf70:	f1c4 040c 	rsb	r4, r4, #12
   1bf74:	f1c4 0520 	rsb	r5, r4, #32
   1bf78:	fa00 f304 	lsl.w	r3, r0, r4
   1bf7c:	fa20 f005 	lsr.w	r0, r0, r5
   1bf80:	fa01 f204 	lsl.w	r2, r1, r4
   1bf84:	ea40 0002 	orr.w	r0, r0, r2
   1bf88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bf8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bf90:	f141 0100 	adc.w	r1, r1, #0
   1bf94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bf98:	bf08      	it	eq
   1bf9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bf9e:	bd70      	pop	{r4, r5, r6, pc}
   1bfa0:	f1c4 0520 	rsb	r5, r4, #32
   1bfa4:	fa00 f205 	lsl.w	r2, r0, r5
   1bfa8:	ea4e 0e02 	orr.w	lr, lr, r2
   1bfac:	fa20 f304 	lsr.w	r3, r0, r4
   1bfb0:	fa01 f205 	lsl.w	r2, r1, r5
   1bfb4:	ea43 0302 	orr.w	r3, r3, r2
   1bfb8:	fa21 f004 	lsr.w	r0, r1, r4
   1bfbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bfc0:	fa21 f204 	lsr.w	r2, r1, r4
   1bfc4:	ea20 0002 	bic.w	r0, r0, r2
   1bfc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1bfcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bfd0:	bf08      	it	eq
   1bfd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bfd6:	bd70      	pop	{r4, r5, r6, pc}
   1bfd8:	f094 0f00 	teq	r4, #0
   1bfdc:	d10f      	bne.n	1bffe <__aeabi_dmul+0x1c2>
   1bfde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1bfe2:	0040      	lsls	r0, r0, #1
   1bfe4:	eb41 0101 	adc.w	r1, r1, r1
   1bfe8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bfec:	bf08      	it	eq
   1bfee:	3c01      	subeq	r4, #1
   1bff0:	d0f7      	beq.n	1bfe2 <__aeabi_dmul+0x1a6>
   1bff2:	ea41 0106 	orr.w	r1, r1, r6
   1bff6:	f095 0f00 	teq	r5, #0
   1bffa:	bf18      	it	ne
   1bffc:	4770      	bxne	lr
   1bffe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c002:	0052      	lsls	r2, r2, #1
   1c004:	eb43 0303 	adc.w	r3, r3, r3
   1c008:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c00c:	bf08      	it	eq
   1c00e:	3d01      	subeq	r5, #1
   1c010:	d0f7      	beq.n	1c002 <__aeabi_dmul+0x1c6>
   1c012:	ea43 0306 	orr.w	r3, r3, r6
   1c016:	4770      	bx	lr
   1c018:	ea94 0f0c 	teq	r4, ip
   1c01c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c020:	bf18      	it	ne
   1c022:	ea95 0f0c 	teqne	r5, ip
   1c026:	d00c      	beq.n	1c042 <__aeabi_dmul+0x206>
   1c028:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c02c:	bf18      	it	ne
   1c02e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c032:	d1d1      	bne.n	1bfd8 <__aeabi_dmul+0x19c>
   1c034:	ea81 0103 	eor.w	r1, r1, r3
   1c038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c03c:	f04f 0000 	mov.w	r0, #0
   1c040:	bd70      	pop	{r4, r5, r6, pc}
   1c042:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c046:	bf06      	itte	eq
   1c048:	4610      	moveq	r0, r2
   1c04a:	4619      	moveq	r1, r3
   1c04c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c050:	d019      	beq.n	1c086 <__aeabi_dmul+0x24a>
   1c052:	ea94 0f0c 	teq	r4, ip
   1c056:	d102      	bne.n	1c05e <__aeabi_dmul+0x222>
   1c058:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c05c:	d113      	bne.n	1c086 <__aeabi_dmul+0x24a>
   1c05e:	ea95 0f0c 	teq	r5, ip
   1c062:	d105      	bne.n	1c070 <__aeabi_dmul+0x234>
   1c064:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c068:	bf1c      	itt	ne
   1c06a:	4610      	movne	r0, r2
   1c06c:	4619      	movne	r1, r3
   1c06e:	d10a      	bne.n	1c086 <__aeabi_dmul+0x24a>
   1c070:	ea81 0103 	eor.w	r1, r1, r3
   1c074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c078:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c07c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c080:	f04f 0000 	mov.w	r0, #0
   1c084:	bd70      	pop	{r4, r5, r6, pc}
   1c086:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c08a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1c08e:	bd70      	pop	{r4, r5, r6, pc}

0001c090 <__aeabi_ddiv>:
   1c090:	b570      	push	{r4, r5, r6, lr}
   1c092:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c096:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c09a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c09e:	bf1d      	ittte	ne
   1c0a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c0a4:	ea94 0f0c 	teqne	r4, ip
   1c0a8:	ea95 0f0c 	teqne	r5, ip
   1c0ac:	f000 f8a7 	bleq	1c1fe <__aeabi_ddiv+0x16e>
   1c0b0:	eba4 0405 	sub.w	r4, r4, r5
   1c0b4:	ea81 0e03 	eor.w	lr, r1, r3
   1c0b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c0bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c0c0:	f000 8088 	beq.w	1c1d4 <__aeabi_ddiv+0x144>
   1c0c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c0c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c0cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1c0d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c0d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1c0d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1c0dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1c0e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1c0e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1c0e8:	429d      	cmp	r5, r3
   1c0ea:	bf08      	it	eq
   1c0ec:	4296      	cmpeq	r6, r2
   1c0ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1c0f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1c0f6:	d202      	bcs.n	1c0fe <__aeabi_ddiv+0x6e>
   1c0f8:	085b      	lsrs	r3, r3, #1
   1c0fa:	ea4f 0232 	mov.w	r2, r2, rrx
   1c0fe:	1ab6      	subs	r6, r6, r2
   1c100:	eb65 0503 	sbc.w	r5, r5, r3
   1c104:	085b      	lsrs	r3, r3, #1
   1c106:	ea4f 0232 	mov.w	r2, r2, rrx
   1c10a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1c10e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1c112:	ebb6 0e02 	subs.w	lr, r6, r2
   1c116:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c11a:	bf22      	ittt	cs
   1c11c:	1ab6      	subcs	r6, r6, r2
   1c11e:	4675      	movcs	r5, lr
   1c120:	ea40 000c 	orrcs.w	r0, r0, ip
   1c124:	085b      	lsrs	r3, r3, #1
   1c126:	ea4f 0232 	mov.w	r2, r2, rrx
   1c12a:	ebb6 0e02 	subs.w	lr, r6, r2
   1c12e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c132:	bf22      	ittt	cs
   1c134:	1ab6      	subcs	r6, r6, r2
   1c136:	4675      	movcs	r5, lr
   1c138:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1c13c:	085b      	lsrs	r3, r3, #1
   1c13e:	ea4f 0232 	mov.w	r2, r2, rrx
   1c142:	ebb6 0e02 	subs.w	lr, r6, r2
   1c146:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c14a:	bf22      	ittt	cs
   1c14c:	1ab6      	subcs	r6, r6, r2
   1c14e:	4675      	movcs	r5, lr
   1c150:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1c154:	085b      	lsrs	r3, r3, #1
   1c156:	ea4f 0232 	mov.w	r2, r2, rrx
   1c15a:	ebb6 0e02 	subs.w	lr, r6, r2
   1c15e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c162:	bf22      	ittt	cs
   1c164:	1ab6      	subcs	r6, r6, r2
   1c166:	4675      	movcs	r5, lr
   1c168:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1c16c:	ea55 0e06 	orrs.w	lr, r5, r6
   1c170:	d018      	beq.n	1c1a4 <__aeabi_ddiv+0x114>
   1c172:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1c176:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1c17a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1c17e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1c182:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1c186:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1c18a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1c18e:	d1c0      	bne.n	1c112 <__aeabi_ddiv+0x82>
   1c190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c194:	d10b      	bne.n	1c1ae <__aeabi_ddiv+0x11e>
   1c196:	ea41 0100 	orr.w	r1, r1, r0
   1c19a:	f04f 0000 	mov.w	r0, #0
   1c19e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1c1a2:	e7b6      	b.n	1c112 <__aeabi_ddiv+0x82>
   1c1a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c1a8:	bf04      	itt	eq
   1c1aa:	4301      	orreq	r1, r0
   1c1ac:	2000      	moveq	r0, #0
   1c1ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c1b2:	bf88      	it	hi
   1c1b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c1b8:	f63f aeaf 	bhi.w	1bf1a <__aeabi_dmul+0xde>
   1c1bc:	ebb5 0c03 	subs.w	ip, r5, r3
   1c1c0:	bf04      	itt	eq
   1c1c2:	ebb6 0c02 	subseq.w	ip, r6, r2
   1c1c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c1ca:	f150 0000 	adcs.w	r0, r0, #0
   1c1ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c1d2:	bd70      	pop	{r4, r5, r6, pc}
   1c1d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1c1d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1c1dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1c1e0:	bfc2      	ittt	gt
   1c1e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c1e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c1ea:	bd70      	popgt	{r4, r5, r6, pc}
   1c1ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c1f0:	f04f 0e00 	mov.w	lr, #0
   1c1f4:	3c01      	subs	r4, #1
   1c1f6:	e690      	b.n	1bf1a <__aeabi_dmul+0xde>
   1c1f8:	ea45 0e06 	orr.w	lr, r5, r6
   1c1fc:	e68d      	b.n	1bf1a <__aeabi_dmul+0xde>
   1c1fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c202:	ea94 0f0c 	teq	r4, ip
   1c206:	bf08      	it	eq
   1c208:	ea95 0f0c 	teqeq	r5, ip
   1c20c:	f43f af3b 	beq.w	1c086 <__aeabi_dmul+0x24a>
   1c210:	ea94 0f0c 	teq	r4, ip
   1c214:	d10a      	bne.n	1c22c <__aeabi_ddiv+0x19c>
   1c216:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c21a:	f47f af34 	bne.w	1c086 <__aeabi_dmul+0x24a>
   1c21e:	ea95 0f0c 	teq	r5, ip
   1c222:	f47f af25 	bne.w	1c070 <__aeabi_dmul+0x234>
   1c226:	4610      	mov	r0, r2
   1c228:	4619      	mov	r1, r3
   1c22a:	e72c      	b.n	1c086 <__aeabi_dmul+0x24a>
   1c22c:	ea95 0f0c 	teq	r5, ip
   1c230:	d106      	bne.n	1c240 <__aeabi_ddiv+0x1b0>
   1c232:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c236:	f43f aefd 	beq.w	1c034 <__aeabi_dmul+0x1f8>
   1c23a:	4610      	mov	r0, r2
   1c23c:	4619      	mov	r1, r3
   1c23e:	e722      	b.n	1c086 <__aeabi_dmul+0x24a>
   1c240:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c244:	bf18      	it	ne
   1c246:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c24a:	f47f aec5 	bne.w	1bfd8 <__aeabi_dmul+0x19c>
   1c24e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1c252:	f47f af0d 	bne.w	1c070 <__aeabi_dmul+0x234>
   1c256:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1c25a:	f47f aeeb 	bne.w	1c034 <__aeabi_dmul+0x1f8>
   1c25e:	e712      	b.n	1c086 <__aeabi_dmul+0x24a>

0001c260 <__gedf2>:
   1c260:	f04f 3cff 	mov.w	ip, #4294967295
   1c264:	e006      	b.n	1c274 <__cmpdf2+0x4>
   1c266:	bf00      	nop

0001c268 <__ledf2>:
   1c268:	f04f 0c01 	mov.w	ip, #1
   1c26c:	e002      	b.n	1c274 <__cmpdf2+0x4>
   1c26e:	bf00      	nop

0001c270 <__cmpdf2>:
   1c270:	f04f 0c01 	mov.w	ip, #1
   1c274:	f84d cd04 	str.w	ip, [sp, #-4]!
   1c278:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c27c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c280:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c284:	bf18      	it	ne
   1c286:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1c28a:	d01b      	beq.n	1c2c4 <__cmpdf2+0x54>
   1c28c:	b001      	add	sp, #4
   1c28e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1c292:	bf0c      	ite	eq
   1c294:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1c298:	ea91 0f03 	teqne	r1, r3
   1c29c:	bf02      	ittt	eq
   1c29e:	ea90 0f02 	teqeq	r0, r2
   1c2a2:	2000      	moveq	r0, #0
   1c2a4:	4770      	bxeq	lr
   1c2a6:	f110 0f00 	cmn.w	r0, #0
   1c2aa:	ea91 0f03 	teq	r1, r3
   1c2ae:	bf58      	it	pl
   1c2b0:	4299      	cmppl	r1, r3
   1c2b2:	bf08      	it	eq
   1c2b4:	4290      	cmpeq	r0, r2
   1c2b6:	bf2c      	ite	cs
   1c2b8:	17d8      	asrcs	r0, r3, #31
   1c2ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1c2be:	f040 0001 	orr.w	r0, r0, #1
   1c2c2:	4770      	bx	lr
   1c2c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c2c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c2cc:	d102      	bne.n	1c2d4 <__cmpdf2+0x64>
   1c2ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c2d2:	d107      	bne.n	1c2e4 <__cmpdf2+0x74>
   1c2d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c2d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c2dc:	d1d6      	bne.n	1c28c <__cmpdf2+0x1c>
   1c2de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c2e2:	d0d3      	beq.n	1c28c <__cmpdf2+0x1c>
   1c2e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c2e8:	4770      	bx	lr
   1c2ea:	bf00      	nop

0001c2ec <__aeabi_cdrcmple>:
   1c2ec:	4684      	mov	ip, r0
   1c2ee:	4610      	mov	r0, r2
   1c2f0:	4662      	mov	r2, ip
   1c2f2:	468c      	mov	ip, r1
   1c2f4:	4619      	mov	r1, r3
   1c2f6:	4663      	mov	r3, ip
   1c2f8:	e000      	b.n	1c2fc <__aeabi_cdcmpeq>
   1c2fa:	bf00      	nop

0001c2fc <__aeabi_cdcmpeq>:
   1c2fc:	b501      	push	{r0, lr}
   1c2fe:	f7ff ffb7 	bl	1c270 <__cmpdf2>
   1c302:	2800      	cmp	r0, #0
   1c304:	bf48      	it	mi
   1c306:	f110 0f00 	cmnmi.w	r0, #0
   1c30a:	bd01      	pop	{r0, pc}

0001c30c <__aeabi_dcmpeq>:
   1c30c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c310:	f7ff fff4 	bl	1c2fc <__aeabi_cdcmpeq>
   1c314:	bf0c      	ite	eq
   1c316:	2001      	moveq	r0, #1
   1c318:	2000      	movne	r0, #0
   1c31a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c31e:	bf00      	nop

0001c320 <__aeabi_dcmplt>:
   1c320:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c324:	f7ff ffea 	bl	1c2fc <__aeabi_cdcmpeq>
   1c328:	bf34      	ite	cc
   1c32a:	2001      	movcc	r0, #1
   1c32c:	2000      	movcs	r0, #0
   1c32e:	f85d fb08 	ldr.w	pc, [sp], #8
   1c332:	bf00      	nop

0001c334 <__aeabi_dcmple>:
   1c334:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c338:	f7ff ffe0 	bl	1c2fc <__aeabi_cdcmpeq>
   1c33c:	bf94      	ite	ls
   1c33e:	2001      	movls	r0, #1
   1c340:	2000      	movhi	r0, #0
   1c342:	f85d fb08 	ldr.w	pc, [sp], #8
   1c346:	bf00      	nop

0001c348 <__aeabi_dcmpge>:
   1c348:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c34c:	f7ff ffce 	bl	1c2ec <__aeabi_cdrcmple>
   1c350:	bf94      	ite	ls
   1c352:	2001      	movls	r0, #1
   1c354:	2000      	movhi	r0, #0
   1c356:	f85d fb08 	ldr.w	pc, [sp], #8
   1c35a:	bf00      	nop

0001c35c <__aeabi_dcmpgt>:
   1c35c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c360:	f7ff ffc4 	bl	1c2ec <__aeabi_cdrcmple>
   1c364:	bf34      	ite	cc
   1c366:	2001      	movcc	r0, #1
   1c368:	2000      	movcs	r0, #0
   1c36a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c36e:	bf00      	nop

0001c370 <__aeabi_d2iz>:
   1c370:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c374:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c378:	d215      	bcs.n	1c3a6 <__aeabi_d2iz+0x36>
   1c37a:	d511      	bpl.n	1c3a0 <__aeabi_d2iz+0x30>
   1c37c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c380:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c384:	d912      	bls.n	1c3ac <__aeabi_d2iz+0x3c>
   1c386:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c38a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c38e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c392:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c396:	fa23 f002 	lsr.w	r0, r3, r2
   1c39a:	bf18      	it	ne
   1c39c:	4240      	negne	r0, r0
   1c39e:	4770      	bx	lr
   1c3a0:	f04f 0000 	mov.w	r0, #0
   1c3a4:	4770      	bx	lr
   1c3a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c3aa:	d105      	bne.n	1c3b8 <__aeabi_d2iz+0x48>
   1c3ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c3b0:	bf08      	it	eq
   1c3b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c3b6:	4770      	bx	lr
   1c3b8:	f04f 0000 	mov.w	r0, #0
   1c3bc:	4770      	bx	lr
   1c3be:	bf00      	nop

0001c3c0 <__aeabi_d2uiz>:
   1c3c0:	004a      	lsls	r2, r1, #1
   1c3c2:	d211      	bcs.n	1c3e8 <__aeabi_d2uiz+0x28>
   1c3c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c3c8:	d211      	bcs.n	1c3ee <__aeabi_d2uiz+0x2e>
   1c3ca:	d50d      	bpl.n	1c3e8 <__aeabi_d2uiz+0x28>
   1c3cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c3d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c3d4:	d40e      	bmi.n	1c3f4 <__aeabi_d2uiz+0x34>
   1c3d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c3da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c3de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c3e2:	fa23 f002 	lsr.w	r0, r3, r2
   1c3e6:	4770      	bx	lr
   1c3e8:	f04f 0000 	mov.w	r0, #0
   1c3ec:	4770      	bx	lr
   1c3ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c3f2:	d102      	bne.n	1c3fa <__aeabi_d2uiz+0x3a>
   1c3f4:	f04f 30ff 	mov.w	r0, #4294967295
   1c3f8:	4770      	bx	lr
   1c3fa:	f04f 0000 	mov.w	r0, #0
   1c3fe:	4770      	bx	lr

0001c400 <__aeabi_d2f>:
   1c400:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c404:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c408:	bf24      	itt	cs
   1c40a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c40e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c412:	d90d      	bls.n	1c430 <__aeabi_d2f+0x30>
   1c414:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c418:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c41c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c420:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c424:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c428:	bf08      	it	eq
   1c42a:	f020 0001 	biceq.w	r0, r0, #1
   1c42e:	4770      	bx	lr
   1c430:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c434:	d121      	bne.n	1c47a <__aeabi_d2f+0x7a>
   1c436:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c43a:	bfbc      	itt	lt
   1c43c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c440:	4770      	bxlt	lr
   1c442:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c446:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c44a:	f1c2 0218 	rsb	r2, r2, #24
   1c44e:	f1c2 0c20 	rsb	ip, r2, #32
   1c452:	fa10 f30c 	lsls.w	r3, r0, ip
   1c456:	fa20 f002 	lsr.w	r0, r0, r2
   1c45a:	bf18      	it	ne
   1c45c:	f040 0001 	orrne.w	r0, r0, #1
   1c460:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c464:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c468:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c46c:	ea40 000c 	orr.w	r0, r0, ip
   1c470:	fa23 f302 	lsr.w	r3, r3, r2
   1c474:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c478:	e7cc      	b.n	1c414 <__aeabi_d2f+0x14>
   1c47a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c47e:	d107      	bne.n	1c490 <__aeabi_d2f+0x90>
   1c480:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c484:	bf1e      	ittt	ne
   1c486:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c48a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c48e:	4770      	bxne	lr
   1c490:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c494:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c498:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c49c:	4770      	bx	lr
   1c49e:	bf00      	nop

0001c4a0 <__aeabi_frsub>:
   1c4a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c4a4:	e002      	b.n	1c4ac <__addsf3>
   1c4a6:	bf00      	nop

0001c4a8 <__aeabi_fsub>:
   1c4a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c4ac <__addsf3>:
   1c4ac:	0042      	lsls	r2, r0, #1
   1c4ae:	bf1f      	itttt	ne
   1c4b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c4b4:	ea92 0f03 	teqne	r2, r3
   1c4b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c4bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c4c0:	d06a      	beq.n	1c598 <__addsf3+0xec>
   1c4c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c4c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c4ca:	bfc1      	itttt	gt
   1c4cc:	18d2      	addgt	r2, r2, r3
   1c4ce:	4041      	eorgt	r1, r0
   1c4d0:	4048      	eorgt	r0, r1
   1c4d2:	4041      	eorgt	r1, r0
   1c4d4:	bfb8      	it	lt
   1c4d6:	425b      	neglt	r3, r3
   1c4d8:	2b19      	cmp	r3, #25
   1c4da:	bf88      	it	hi
   1c4dc:	4770      	bxhi	lr
   1c4de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c4e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c4e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c4ea:	bf18      	it	ne
   1c4ec:	4240      	negne	r0, r0
   1c4ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c4f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c4fa:	bf18      	it	ne
   1c4fc:	4249      	negne	r1, r1
   1c4fe:	ea92 0f03 	teq	r2, r3
   1c502:	d03f      	beq.n	1c584 <__addsf3+0xd8>
   1c504:	f1a2 0201 	sub.w	r2, r2, #1
   1c508:	fa41 fc03 	asr.w	ip, r1, r3
   1c50c:	eb10 000c 	adds.w	r0, r0, ip
   1c510:	f1c3 0320 	rsb	r3, r3, #32
   1c514:	fa01 f103 	lsl.w	r1, r1, r3
   1c518:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c51c:	d502      	bpl.n	1c524 <__addsf3+0x78>
   1c51e:	4249      	negs	r1, r1
   1c520:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c524:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c528:	d313      	bcc.n	1c552 <__addsf3+0xa6>
   1c52a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c52e:	d306      	bcc.n	1c53e <__addsf3+0x92>
   1c530:	0840      	lsrs	r0, r0, #1
   1c532:	ea4f 0131 	mov.w	r1, r1, rrx
   1c536:	f102 0201 	add.w	r2, r2, #1
   1c53a:	2afe      	cmp	r2, #254	; 0xfe
   1c53c:	d251      	bcs.n	1c5e2 <__addsf3+0x136>
   1c53e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c542:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c546:	bf08      	it	eq
   1c548:	f020 0001 	biceq.w	r0, r0, #1
   1c54c:	ea40 0003 	orr.w	r0, r0, r3
   1c550:	4770      	bx	lr
   1c552:	0049      	lsls	r1, r1, #1
   1c554:	eb40 0000 	adc.w	r0, r0, r0
   1c558:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c55c:	f1a2 0201 	sub.w	r2, r2, #1
   1c560:	d1ed      	bne.n	1c53e <__addsf3+0x92>
   1c562:	fab0 fc80 	clz	ip, r0
   1c566:	f1ac 0c08 	sub.w	ip, ip, #8
   1c56a:	ebb2 020c 	subs.w	r2, r2, ip
   1c56e:	fa00 f00c 	lsl.w	r0, r0, ip
   1c572:	bfaa      	itet	ge
   1c574:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c578:	4252      	neglt	r2, r2
   1c57a:	4318      	orrge	r0, r3
   1c57c:	bfbc      	itt	lt
   1c57e:	40d0      	lsrlt	r0, r2
   1c580:	4318      	orrlt	r0, r3
   1c582:	4770      	bx	lr
   1c584:	f092 0f00 	teq	r2, #0
   1c588:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c58c:	bf06      	itte	eq
   1c58e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c592:	3201      	addeq	r2, #1
   1c594:	3b01      	subne	r3, #1
   1c596:	e7b5      	b.n	1c504 <__addsf3+0x58>
   1c598:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c59c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c5a0:	bf18      	it	ne
   1c5a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c5a6:	d021      	beq.n	1c5ec <__addsf3+0x140>
   1c5a8:	ea92 0f03 	teq	r2, r3
   1c5ac:	d004      	beq.n	1c5b8 <__addsf3+0x10c>
   1c5ae:	f092 0f00 	teq	r2, #0
   1c5b2:	bf08      	it	eq
   1c5b4:	4608      	moveq	r0, r1
   1c5b6:	4770      	bx	lr
   1c5b8:	ea90 0f01 	teq	r0, r1
   1c5bc:	bf1c      	itt	ne
   1c5be:	2000      	movne	r0, #0
   1c5c0:	4770      	bxne	lr
   1c5c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c5c6:	d104      	bne.n	1c5d2 <__addsf3+0x126>
   1c5c8:	0040      	lsls	r0, r0, #1
   1c5ca:	bf28      	it	cs
   1c5cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c5d0:	4770      	bx	lr
   1c5d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c5d6:	bf3c      	itt	cc
   1c5d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c5dc:	4770      	bxcc	lr
   1c5de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c5e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c5e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c5ea:	4770      	bx	lr
   1c5ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c5f0:	bf16      	itet	ne
   1c5f2:	4608      	movne	r0, r1
   1c5f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c5f8:	4601      	movne	r1, r0
   1c5fa:	0242      	lsls	r2, r0, #9
   1c5fc:	bf06      	itte	eq
   1c5fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c602:	ea90 0f01 	teqeq	r0, r1
   1c606:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c60a:	4770      	bx	lr

0001c60c <__aeabi_ui2f>:
   1c60c:	f04f 0300 	mov.w	r3, #0
   1c610:	e004      	b.n	1c61c <__aeabi_i2f+0x8>
   1c612:	bf00      	nop

0001c614 <__aeabi_i2f>:
   1c614:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c618:	bf48      	it	mi
   1c61a:	4240      	negmi	r0, r0
   1c61c:	ea5f 0c00 	movs.w	ip, r0
   1c620:	bf08      	it	eq
   1c622:	4770      	bxeq	lr
   1c624:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c628:	4601      	mov	r1, r0
   1c62a:	f04f 0000 	mov.w	r0, #0
   1c62e:	e01c      	b.n	1c66a <__aeabi_l2f+0x2a>

0001c630 <__aeabi_ul2f>:
   1c630:	ea50 0201 	orrs.w	r2, r0, r1
   1c634:	bf08      	it	eq
   1c636:	4770      	bxeq	lr
   1c638:	f04f 0300 	mov.w	r3, #0
   1c63c:	e00a      	b.n	1c654 <__aeabi_l2f+0x14>
   1c63e:	bf00      	nop

0001c640 <__aeabi_l2f>:
   1c640:	ea50 0201 	orrs.w	r2, r0, r1
   1c644:	bf08      	it	eq
   1c646:	4770      	bxeq	lr
   1c648:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c64c:	d502      	bpl.n	1c654 <__aeabi_l2f+0x14>
   1c64e:	4240      	negs	r0, r0
   1c650:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c654:	ea5f 0c01 	movs.w	ip, r1
   1c658:	bf02      	ittt	eq
   1c65a:	4684      	moveq	ip, r0
   1c65c:	4601      	moveq	r1, r0
   1c65e:	2000      	moveq	r0, #0
   1c660:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c664:	bf08      	it	eq
   1c666:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c66a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c66e:	fabc f28c 	clz	r2, ip
   1c672:	3a08      	subs	r2, #8
   1c674:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c678:	db10      	blt.n	1c69c <__aeabi_l2f+0x5c>
   1c67a:	fa01 fc02 	lsl.w	ip, r1, r2
   1c67e:	4463      	add	r3, ip
   1c680:	fa00 fc02 	lsl.w	ip, r0, r2
   1c684:	f1c2 0220 	rsb	r2, r2, #32
   1c688:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c68c:	fa20 f202 	lsr.w	r2, r0, r2
   1c690:	eb43 0002 	adc.w	r0, r3, r2
   1c694:	bf08      	it	eq
   1c696:	f020 0001 	biceq.w	r0, r0, #1
   1c69a:	4770      	bx	lr
   1c69c:	f102 0220 	add.w	r2, r2, #32
   1c6a0:	fa01 fc02 	lsl.w	ip, r1, r2
   1c6a4:	f1c2 0220 	rsb	r2, r2, #32
   1c6a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c6ac:	fa21 f202 	lsr.w	r2, r1, r2
   1c6b0:	eb43 0002 	adc.w	r0, r3, r2
   1c6b4:	bf08      	it	eq
   1c6b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c6ba:	4770      	bx	lr

0001c6bc <__aeabi_ldivmod>:
   1c6bc:	b97b      	cbnz	r3, 1c6de <__aeabi_ldivmod+0x22>
   1c6be:	b972      	cbnz	r2, 1c6de <__aeabi_ldivmod+0x22>
   1c6c0:	2900      	cmp	r1, #0
   1c6c2:	bfbe      	ittt	lt
   1c6c4:	2000      	movlt	r0, #0
   1c6c6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c6ca:	e006      	blt.n	1c6da <__aeabi_ldivmod+0x1e>
   1c6cc:	bf08      	it	eq
   1c6ce:	2800      	cmpeq	r0, #0
   1c6d0:	bf1c      	itt	ne
   1c6d2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c6d6:	f04f 30ff 	movne.w	r0, #4294967295
   1c6da:	f001 b979 	b.w	1d9d0 <__aeabi_idiv0>
   1c6de:	f1ad 0c08 	sub.w	ip, sp, #8
   1c6e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c6e6:	2900      	cmp	r1, #0
   1c6e8:	db09      	blt.n	1c6fe <__aeabi_ldivmod+0x42>
   1c6ea:	2b00      	cmp	r3, #0
   1c6ec:	db1a      	blt.n	1c724 <__aeabi_ldivmod+0x68>
   1c6ee:	f000 f885 	bl	1c7fc <__udivmoddi4>
   1c6f2:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c6f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c6fa:	b004      	add	sp, #16
   1c6fc:	4770      	bx	lr
   1c6fe:	4240      	negs	r0, r0
   1c700:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c704:	2b00      	cmp	r3, #0
   1c706:	db1b      	blt.n	1c740 <__aeabi_ldivmod+0x84>
   1c708:	f000 f878 	bl	1c7fc <__udivmoddi4>
   1c70c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c714:	b004      	add	sp, #16
   1c716:	4240      	negs	r0, r0
   1c718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c71c:	4252      	negs	r2, r2
   1c71e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c722:	4770      	bx	lr
   1c724:	4252      	negs	r2, r2
   1c726:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c72a:	f000 f867 	bl	1c7fc <__udivmoddi4>
   1c72e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c736:	b004      	add	sp, #16
   1c738:	4240      	negs	r0, r0
   1c73a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c73e:	4770      	bx	lr
   1c740:	4252      	negs	r2, r2
   1c742:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c746:	f000 f859 	bl	1c7fc <__udivmoddi4>
   1c74a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c74e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c752:	b004      	add	sp, #16
   1c754:	4252      	negs	r2, r2
   1c756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c75a:	4770      	bx	lr

0001c75c <__aeabi_uldivmod>:
   1c75c:	b953      	cbnz	r3, 1c774 <__aeabi_uldivmod+0x18>
   1c75e:	b94a      	cbnz	r2, 1c774 <__aeabi_uldivmod+0x18>
   1c760:	2900      	cmp	r1, #0
   1c762:	bf08      	it	eq
   1c764:	2800      	cmpeq	r0, #0
   1c766:	bf1c      	itt	ne
   1c768:	f04f 31ff 	movne.w	r1, #4294967295
   1c76c:	f04f 30ff 	movne.w	r0, #4294967295
   1c770:	f001 b92e 	b.w	1d9d0 <__aeabi_idiv0>
   1c774:	f1ad 0c08 	sub.w	ip, sp, #8
   1c778:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c77c:	f000 f83e 	bl	1c7fc <__udivmoddi4>
   1c780:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c788:	b004      	add	sp, #16
   1c78a:	4770      	bx	lr

0001c78c <__aeabi_f2lz>:
   1c78c:	ee07 0a90 	vmov	s15, r0
   1c790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c798:	d401      	bmi.n	1c79e <__aeabi_f2lz+0x12>
   1c79a:	f000 b809 	b.w	1c7b0 <__aeabi_f2ulz>
   1c79e:	b508      	push	{r3, lr}
   1c7a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c7a4:	f000 f804 	bl	1c7b0 <__aeabi_f2ulz>
   1c7a8:	4240      	negs	r0, r0
   1c7aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c7ae:	bd08      	pop	{r3, pc}

0001c7b0 <__aeabi_f2ulz>:
   1c7b0:	b5d0      	push	{r4, r6, r7, lr}
   1c7b2:	f7ff faef 	bl	1bd94 <__aeabi_f2d>
   1c7b6:	2200      	movs	r2, #0
   1c7b8:	4b0e      	ldr	r3, [pc, #56]	; (1c7f4 <__aeabi_f2ulz+0x44>)
   1c7ba:	4606      	mov	r6, r0
   1c7bc:	460f      	mov	r7, r1
   1c7be:	f7ff fb3d 	bl	1be3c <__aeabi_dmul>
   1c7c2:	f7ff fdfd 	bl	1c3c0 <__aeabi_d2uiz>
   1c7c6:	4604      	mov	r4, r0
   1c7c8:	f7ff fac2 	bl	1bd50 <__aeabi_ui2d>
   1c7cc:	2200      	movs	r2, #0
   1c7ce:	4b0a      	ldr	r3, [pc, #40]	; (1c7f8 <__aeabi_f2ulz+0x48>)
   1c7d0:	f7ff fb34 	bl	1be3c <__aeabi_dmul>
   1c7d4:	4602      	mov	r2, r0
   1c7d6:	460b      	mov	r3, r1
   1c7d8:	4630      	mov	r0, r6
   1c7da:	4639      	mov	r1, r7
   1c7dc:	f7ff f97a 	bl	1bad4 <__aeabi_dsub>
   1c7e0:	f7ff fdee 	bl	1c3c0 <__aeabi_d2uiz>
   1c7e4:	4623      	mov	r3, r4
   1c7e6:	2200      	movs	r2, #0
   1c7e8:	ea42 0200 	orr.w	r2, r2, r0
   1c7ec:	4610      	mov	r0, r2
   1c7ee:	4619      	mov	r1, r3
   1c7f0:	bdd0      	pop	{r4, r6, r7, pc}
   1c7f2:	bf00      	nop
   1c7f4:	3df00000 	.word	0x3df00000
   1c7f8:	41f00000 	.word	0x41f00000

0001c7fc <__udivmoddi4>:
   1c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c800:	468c      	mov	ip, r1
   1c802:	460d      	mov	r5, r1
   1c804:	4604      	mov	r4, r0
   1c806:	9e08      	ldr	r6, [sp, #32]
   1c808:	2b00      	cmp	r3, #0
   1c80a:	d151      	bne.n	1c8b0 <__udivmoddi4+0xb4>
   1c80c:	428a      	cmp	r2, r1
   1c80e:	4617      	mov	r7, r2
   1c810:	d96d      	bls.n	1c8ee <__udivmoddi4+0xf2>
   1c812:	fab2 fe82 	clz	lr, r2
   1c816:	f1be 0f00 	cmp.w	lr, #0
   1c81a:	d00b      	beq.n	1c834 <__udivmoddi4+0x38>
   1c81c:	f1ce 0c20 	rsb	ip, lr, #32
   1c820:	fa01 f50e 	lsl.w	r5, r1, lr
   1c824:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c828:	fa02 f70e 	lsl.w	r7, r2, lr
   1c82c:	ea4c 0c05 	orr.w	ip, ip, r5
   1c830:	fa00 f40e 	lsl.w	r4, r0, lr
   1c834:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c838:	0c25      	lsrs	r5, r4, #16
   1c83a:	fbbc f8fa 	udiv	r8, ip, sl
   1c83e:	fa1f f987 	uxth.w	r9, r7
   1c842:	fb0a cc18 	mls	ip, sl, r8, ip
   1c846:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c84a:	fb08 f309 	mul.w	r3, r8, r9
   1c84e:	42ab      	cmp	r3, r5
   1c850:	d90a      	bls.n	1c868 <__udivmoddi4+0x6c>
   1c852:	19ed      	adds	r5, r5, r7
   1c854:	f108 32ff 	add.w	r2, r8, #4294967295
   1c858:	f080 8123 	bcs.w	1caa2 <__udivmoddi4+0x2a6>
   1c85c:	42ab      	cmp	r3, r5
   1c85e:	f240 8120 	bls.w	1caa2 <__udivmoddi4+0x2a6>
   1c862:	f1a8 0802 	sub.w	r8, r8, #2
   1c866:	443d      	add	r5, r7
   1c868:	1aed      	subs	r5, r5, r3
   1c86a:	b2a4      	uxth	r4, r4
   1c86c:	fbb5 f0fa 	udiv	r0, r5, sl
   1c870:	fb0a 5510 	mls	r5, sl, r0, r5
   1c874:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c878:	fb00 f909 	mul.w	r9, r0, r9
   1c87c:	45a1      	cmp	r9, r4
   1c87e:	d909      	bls.n	1c894 <__udivmoddi4+0x98>
   1c880:	19e4      	adds	r4, r4, r7
   1c882:	f100 33ff 	add.w	r3, r0, #4294967295
   1c886:	f080 810a 	bcs.w	1ca9e <__udivmoddi4+0x2a2>
   1c88a:	45a1      	cmp	r9, r4
   1c88c:	f240 8107 	bls.w	1ca9e <__udivmoddi4+0x2a2>
   1c890:	3802      	subs	r0, #2
   1c892:	443c      	add	r4, r7
   1c894:	eba4 0409 	sub.w	r4, r4, r9
   1c898:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c89c:	2100      	movs	r1, #0
   1c89e:	2e00      	cmp	r6, #0
   1c8a0:	d061      	beq.n	1c966 <__udivmoddi4+0x16a>
   1c8a2:	fa24 f40e 	lsr.w	r4, r4, lr
   1c8a6:	2300      	movs	r3, #0
   1c8a8:	6034      	str	r4, [r6, #0]
   1c8aa:	6073      	str	r3, [r6, #4]
   1c8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c8b0:	428b      	cmp	r3, r1
   1c8b2:	d907      	bls.n	1c8c4 <__udivmoddi4+0xc8>
   1c8b4:	2e00      	cmp	r6, #0
   1c8b6:	d054      	beq.n	1c962 <__udivmoddi4+0x166>
   1c8b8:	2100      	movs	r1, #0
   1c8ba:	e886 0021 	stmia.w	r6, {r0, r5}
   1c8be:	4608      	mov	r0, r1
   1c8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c8c4:	fab3 f183 	clz	r1, r3
   1c8c8:	2900      	cmp	r1, #0
   1c8ca:	f040 808e 	bne.w	1c9ea <__udivmoddi4+0x1ee>
   1c8ce:	42ab      	cmp	r3, r5
   1c8d0:	d302      	bcc.n	1c8d8 <__udivmoddi4+0xdc>
   1c8d2:	4282      	cmp	r2, r0
   1c8d4:	f200 80fa 	bhi.w	1cacc <__udivmoddi4+0x2d0>
   1c8d8:	1a84      	subs	r4, r0, r2
   1c8da:	eb65 0503 	sbc.w	r5, r5, r3
   1c8de:	2001      	movs	r0, #1
   1c8e0:	46ac      	mov	ip, r5
   1c8e2:	2e00      	cmp	r6, #0
   1c8e4:	d03f      	beq.n	1c966 <__udivmoddi4+0x16a>
   1c8e6:	e886 1010 	stmia.w	r6, {r4, ip}
   1c8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c8ee:	b912      	cbnz	r2, 1c8f6 <__udivmoddi4+0xfa>
   1c8f0:	2701      	movs	r7, #1
   1c8f2:	fbb7 f7f2 	udiv	r7, r7, r2
   1c8f6:	fab7 fe87 	clz	lr, r7
   1c8fa:	f1be 0f00 	cmp.w	lr, #0
   1c8fe:	d134      	bne.n	1c96a <__udivmoddi4+0x16e>
   1c900:	1beb      	subs	r3, r5, r7
   1c902:	0c3a      	lsrs	r2, r7, #16
   1c904:	fa1f fc87 	uxth.w	ip, r7
   1c908:	2101      	movs	r1, #1
   1c90a:	fbb3 f8f2 	udiv	r8, r3, r2
   1c90e:	0c25      	lsrs	r5, r4, #16
   1c910:	fb02 3318 	mls	r3, r2, r8, r3
   1c914:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c918:	fb0c f308 	mul.w	r3, ip, r8
   1c91c:	42ab      	cmp	r3, r5
   1c91e:	d907      	bls.n	1c930 <__udivmoddi4+0x134>
   1c920:	19ed      	adds	r5, r5, r7
   1c922:	f108 30ff 	add.w	r0, r8, #4294967295
   1c926:	d202      	bcs.n	1c92e <__udivmoddi4+0x132>
   1c928:	42ab      	cmp	r3, r5
   1c92a:	f200 80d1 	bhi.w	1cad0 <__udivmoddi4+0x2d4>
   1c92e:	4680      	mov	r8, r0
   1c930:	1aed      	subs	r5, r5, r3
   1c932:	b2a3      	uxth	r3, r4
   1c934:	fbb5 f0f2 	udiv	r0, r5, r2
   1c938:	fb02 5510 	mls	r5, r2, r0, r5
   1c93c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c940:	fb0c fc00 	mul.w	ip, ip, r0
   1c944:	45a4      	cmp	ip, r4
   1c946:	d907      	bls.n	1c958 <__udivmoddi4+0x15c>
   1c948:	19e4      	adds	r4, r4, r7
   1c94a:	f100 33ff 	add.w	r3, r0, #4294967295
   1c94e:	d202      	bcs.n	1c956 <__udivmoddi4+0x15a>
   1c950:	45a4      	cmp	ip, r4
   1c952:	f200 80b8 	bhi.w	1cac6 <__udivmoddi4+0x2ca>
   1c956:	4618      	mov	r0, r3
   1c958:	eba4 040c 	sub.w	r4, r4, ip
   1c95c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c960:	e79d      	b.n	1c89e <__udivmoddi4+0xa2>
   1c962:	4631      	mov	r1, r6
   1c964:	4630      	mov	r0, r6
   1c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c96a:	f1ce 0420 	rsb	r4, lr, #32
   1c96e:	fa05 f30e 	lsl.w	r3, r5, lr
   1c972:	fa07 f70e 	lsl.w	r7, r7, lr
   1c976:	fa20 f804 	lsr.w	r8, r0, r4
   1c97a:	0c3a      	lsrs	r2, r7, #16
   1c97c:	fa25 f404 	lsr.w	r4, r5, r4
   1c980:	ea48 0803 	orr.w	r8, r8, r3
   1c984:	fbb4 f1f2 	udiv	r1, r4, r2
   1c988:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c98c:	fb02 4411 	mls	r4, r2, r1, r4
   1c990:	fa1f fc87 	uxth.w	ip, r7
   1c994:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c998:	fb01 f30c 	mul.w	r3, r1, ip
   1c99c:	42ab      	cmp	r3, r5
   1c99e:	fa00 f40e 	lsl.w	r4, r0, lr
   1c9a2:	d909      	bls.n	1c9b8 <__udivmoddi4+0x1bc>
   1c9a4:	19ed      	adds	r5, r5, r7
   1c9a6:	f101 30ff 	add.w	r0, r1, #4294967295
   1c9aa:	f080 808a 	bcs.w	1cac2 <__udivmoddi4+0x2c6>
   1c9ae:	42ab      	cmp	r3, r5
   1c9b0:	f240 8087 	bls.w	1cac2 <__udivmoddi4+0x2c6>
   1c9b4:	3902      	subs	r1, #2
   1c9b6:	443d      	add	r5, r7
   1c9b8:	1aeb      	subs	r3, r5, r3
   1c9ba:	fa1f f588 	uxth.w	r5, r8
   1c9be:	fbb3 f0f2 	udiv	r0, r3, r2
   1c9c2:	fb02 3310 	mls	r3, r2, r0, r3
   1c9c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c9ca:	fb00 f30c 	mul.w	r3, r0, ip
   1c9ce:	42ab      	cmp	r3, r5
   1c9d0:	d907      	bls.n	1c9e2 <__udivmoddi4+0x1e6>
   1c9d2:	19ed      	adds	r5, r5, r7
   1c9d4:	f100 38ff 	add.w	r8, r0, #4294967295
   1c9d8:	d26f      	bcs.n	1caba <__udivmoddi4+0x2be>
   1c9da:	42ab      	cmp	r3, r5
   1c9dc:	d96d      	bls.n	1caba <__udivmoddi4+0x2be>
   1c9de:	3802      	subs	r0, #2
   1c9e0:	443d      	add	r5, r7
   1c9e2:	1aeb      	subs	r3, r5, r3
   1c9e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c9e8:	e78f      	b.n	1c90a <__udivmoddi4+0x10e>
   1c9ea:	f1c1 0720 	rsb	r7, r1, #32
   1c9ee:	fa22 f807 	lsr.w	r8, r2, r7
   1c9f2:	408b      	lsls	r3, r1
   1c9f4:	fa05 f401 	lsl.w	r4, r5, r1
   1c9f8:	ea48 0303 	orr.w	r3, r8, r3
   1c9fc:	fa20 fe07 	lsr.w	lr, r0, r7
   1ca00:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1ca04:	40fd      	lsrs	r5, r7
   1ca06:	ea4e 0e04 	orr.w	lr, lr, r4
   1ca0a:	fbb5 f9fc 	udiv	r9, r5, ip
   1ca0e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1ca12:	fb0c 5519 	mls	r5, ip, r9, r5
   1ca16:	fa1f f883 	uxth.w	r8, r3
   1ca1a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1ca1e:	fb09 f408 	mul.w	r4, r9, r8
   1ca22:	42ac      	cmp	r4, r5
   1ca24:	fa02 f201 	lsl.w	r2, r2, r1
   1ca28:	fa00 fa01 	lsl.w	sl, r0, r1
   1ca2c:	d908      	bls.n	1ca40 <__udivmoddi4+0x244>
   1ca2e:	18ed      	adds	r5, r5, r3
   1ca30:	f109 30ff 	add.w	r0, r9, #4294967295
   1ca34:	d243      	bcs.n	1cabe <__udivmoddi4+0x2c2>
   1ca36:	42ac      	cmp	r4, r5
   1ca38:	d941      	bls.n	1cabe <__udivmoddi4+0x2c2>
   1ca3a:	f1a9 0902 	sub.w	r9, r9, #2
   1ca3e:	441d      	add	r5, r3
   1ca40:	1b2d      	subs	r5, r5, r4
   1ca42:	fa1f fe8e 	uxth.w	lr, lr
   1ca46:	fbb5 f0fc 	udiv	r0, r5, ip
   1ca4a:	fb0c 5510 	mls	r5, ip, r0, r5
   1ca4e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1ca52:	fb00 f808 	mul.w	r8, r0, r8
   1ca56:	45a0      	cmp	r8, r4
   1ca58:	d907      	bls.n	1ca6a <__udivmoddi4+0x26e>
   1ca5a:	18e4      	adds	r4, r4, r3
   1ca5c:	f100 35ff 	add.w	r5, r0, #4294967295
   1ca60:	d229      	bcs.n	1cab6 <__udivmoddi4+0x2ba>
   1ca62:	45a0      	cmp	r8, r4
   1ca64:	d927      	bls.n	1cab6 <__udivmoddi4+0x2ba>
   1ca66:	3802      	subs	r0, #2
   1ca68:	441c      	add	r4, r3
   1ca6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1ca6e:	eba4 0408 	sub.w	r4, r4, r8
   1ca72:	fba0 8902 	umull	r8, r9, r0, r2
   1ca76:	454c      	cmp	r4, r9
   1ca78:	46c6      	mov	lr, r8
   1ca7a:	464d      	mov	r5, r9
   1ca7c:	d315      	bcc.n	1caaa <__udivmoddi4+0x2ae>
   1ca7e:	d012      	beq.n	1caa6 <__udivmoddi4+0x2aa>
   1ca80:	b156      	cbz	r6, 1ca98 <__udivmoddi4+0x29c>
   1ca82:	ebba 030e 	subs.w	r3, sl, lr
   1ca86:	eb64 0405 	sbc.w	r4, r4, r5
   1ca8a:	fa04 f707 	lsl.w	r7, r4, r7
   1ca8e:	40cb      	lsrs	r3, r1
   1ca90:	431f      	orrs	r7, r3
   1ca92:	40cc      	lsrs	r4, r1
   1ca94:	6037      	str	r7, [r6, #0]
   1ca96:	6074      	str	r4, [r6, #4]
   1ca98:	2100      	movs	r1, #0
   1ca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ca9e:	4618      	mov	r0, r3
   1caa0:	e6f8      	b.n	1c894 <__udivmoddi4+0x98>
   1caa2:	4690      	mov	r8, r2
   1caa4:	e6e0      	b.n	1c868 <__udivmoddi4+0x6c>
   1caa6:	45c2      	cmp	sl, r8
   1caa8:	d2ea      	bcs.n	1ca80 <__udivmoddi4+0x284>
   1caaa:	ebb8 0e02 	subs.w	lr, r8, r2
   1caae:	eb69 0503 	sbc.w	r5, r9, r3
   1cab2:	3801      	subs	r0, #1
   1cab4:	e7e4      	b.n	1ca80 <__udivmoddi4+0x284>
   1cab6:	4628      	mov	r0, r5
   1cab8:	e7d7      	b.n	1ca6a <__udivmoddi4+0x26e>
   1caba:	4640      	mov	r0, r8
   1cabc:	e791      	b.n	1c9e2 <__udivmoddi4+0x1e6>
   1cabe:	4681      	mov	r9, r0
   1cac0:	e7be      	b.n	1ca40 <__udivmoddi4+0x244>
   1cac2:	4601      	mov	r1, r0
   1cac4:	e778      	b.n	1c9b8 <__udivmoddi4+0x1bc>
   1cac6:	3802      	subs	r0, #2
   1cac8:	443c      	add	r4, r7
   1caca:	e745      	b.n	1c958 <__udivmoddi4+0x15c>
   1cacc:	4608      	mov	r0, r1
   1cace:	e708      	b.n	1c8e2 <__udivmoddi4+0xe6>
   1cad0:	f1a8 0802 	sub.w	r8, r8, #2
   1cad4:	443d      	add	r5, r7
   1cad6:	e72b      	b.n	1c930 <__udivmoddi4+0x134>

0001cad8 <selfrel_offset31>:
   1cad8:	6803      	ldr	r3, [r0, #0]
   1cada:	005a      	lsls	r2, r3, #1
   1cadc:	bf4c      	ite	mi
   1cade:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1cae2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1cae6:	4418      	add	r0, r3
   1cae8:	4770      	bx	lr
   1caea:	bf00      	nop

0001caec <search_EIT_table>:
   1caec:	b361      	cbz	r1, 1cb48 <search_EIT_table+0x5c>
   1caee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caf2:	f101 3aff 	add.w	sl, r1, #4294967295
   1caf6:	4690      	mov	r8, r2
   1caf8:	4606      	mov	r6, r0
   1cafa:	46d1      	mov	r9, sl
   1cafc:	2700      	movs	r7, #0
   1cafe:	eb07 0409 	add.w	r4, r7, r9
   1cb02:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1cb06:	1064      	asrs	r4, r4, #1
   1cb08:	00e5      	lsls	r5, r4, #3
   1cb0a:	1971      	adds	r1, r6, r5
   1cb0c:	4608      	mov	r0, r1
   1cb0e:	f7ff ffe3 	bl	1cad8 <selfrel_offset31>
   1cb12:	45a2      	cmp	sl, r4
   1cb14:	4683      	mov	fp, r0
   1cb16:	f105 0008 	add.w	r0, r5, #8
   1cb1a:	4430      	add	r0, r6
   1cb1c:	d009      	beq.n	1cb32 <search_EIT_table+0x46>
   1cb1e:	f7ff ffdb 	bl	1cad8 <selfrel_offset31>
   1cb22:	45c3      	cmp	fp, r8
   1cb24:	f100 30ff 	add.w	r0, r0, #4294967295
   1cb28:	d805      	bhi.n	1cb36 <search_EIT_table+0x4a>
   1cb2a:	4540      	cmp	r0, r8
   1cb2c:	d209      	bcs.n	1cb42 <search_EIT_table+0x56>
   1cb2e:	1c67      	adds	r7, r4, #1
   1cb30:	e7e5      	b.n	1cafe <search_EIT_table+0x12>
   1cb32:	45c3      	cmp	fp, r8
   1cb34:	d905      	bls.n	1cb42 <search_EIT_table+0x56>
   1cb36:	42a7      	cmp	r7, r4
   1cb38:	d002      	beq.n	1cb40 <search_EIT_table+0x54>
   1cb3a:	f104 39ff 	add.w	r9, r4, #4294967295
   1cb3e:	e7de      	b.n	1cafe <search_EIT_table+0x12>
   1cb40:	2100      	movs	r1, #0
   1cb42:	4608      	mov	r0, r1
   1cb44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb48:	4608      	mov	r0, r1
   1cb4a:	4770      	bx	lr

0001cb4c <__gnu_unwind_get_pr_addr>:
   1cb4c:	2801      	cmp	r0, #1
   1cb4e:	d007      	beq.n	1cb60 <__gnu_unwind_get_pr_addr+0x14>
   1cb50:	2802      	cmp	r0, #2
   1cb52:	d007      	beq.n	1cb64 <__gnu_unwind_get_pr_addr+0x18>
   1cb54:	4b04      	ldr	r3, [pc, #16]	; (1cb68 <__gnu_unwind_get_pr_addr+0x1c>)
   1cb56:	2800      	cmp	r0, #0
   1cb58:	bf0c      	ite	eq
   1cb5a:	4618      	moveq	r0, r3
   1cb5c:	2000      	movne	r0, #0
   1cb5e:	4770      	bx	lr
   1cb60:	4802      	ldr	r0, [pc, #8]	; (1cb6c <__gnu_unwind_get_pr_addr+0x20>)
   1cb62:	4770      	bx	lr
   1cb64:	4802      	ldr	r0, [pc, #8]	; (1cb70 <__gnu_unwind_get_pr_addr+0x24>)
   1cb66:	4770      	bx	lr
   1cb68:	0001d251 	.word	0x0001d251
   1cb6c:	0001d255 	.word	0x0001d255
   1cb70:	0001d259 	.word	0x0001d259

0001cb74 <get_eit_entry>:
   1cb74:	b530      	push	{r4, r5, lr}
   1cb76:	4b24      	ldr	r3, [pc, #144]	; (1cc08 <get_eit_entry+0x94>)
   1cb78:	b083      	sub	sp, #12
   1cb7a:	4604      	mov	r4, r0
   1cb7c:	1e8d      	subs	r5, r1, #2
   1cb7e:	b37b      	cbz	r3, 1cbe0 <get_eit_entry+0x6c>
   1cb80:	a901      	add	r1, sp, #4
   1cb82:	4628      	mov	r0, r5
   1cb84:	f3af 8000 	nop.w
   1cb88:	b320      	cbz	r0, 1cbd4 <get_eit_entry+0x60>
   1cb8a:	9901      	ldr	r1, [sp, #4]
   1cb8c:	462a      	mov	r2, r5
   1cb8e:	f7ff ffad 	bl	1caec <search_EIT_table>
   1cb92:	4601      	mov	r1, r0
   1cb94:	b1f0      	cbz	r0, 1cbd4 <get_eit_entry+0x60>
   1cb96:	f7ff ff9f 	bl	1cad8 <selfrel_offset31>
   1cb9a:	684b      	ldr	r3, [r1, #4]
   1cb9c:	64a0      	str	r0, [r4, #72]	; 0x48
   1cb9e:	2b01      	cmp	r3, #1
   1cba0:	d012      	beq.n	1cbc8 <get_eit_entry+0x54>
   1cba2:	2b00      	cmp	r3, #0
   1cba4:	f101 0004 	add.w	r0, r1, #4
   1cba8:	db20      	blt.n	1cbec <get_eit_entry+0x78>
   1cbaa:	f7ff ff95 	bl	1cad8 <selfrel_offset31>
   1cbae:	2300      	movs	r3, #0
   1cbb0:	64e0      	str	r0, [r4, #76]	; 0x4c
   1cbb2:	6523      	str	r3, [r4, #80]	; 0x50
   1cbb4:	6803      	ldr	r3, [r0, #0]
   1cbb6:	2b00      	cmp	r3, #0
   1cbb8:	db1c      	blt.n	1cbf4 <get_eit_entry+0x80>
   1cbba:	f7ff ff8d 	bl	1cad8 <selfrel_offset31>
   1cbbe:	2300      	movs	r3, #0
   1cbc0:	6120      	str	r0, [r4, #16]
   1cbc2:	4618      	mov	r0, r3
   1cbc4:	b003      	add	sp, #12
   1cbc6:	bd30      	pop	{r4, r5, pc}
   1cbc8:	2300      	movs	r3, #0
   1cbca:	6123      	str	r3, [r4, #16]
   1cbcc:	2305      	movs	r3, #5
   1cbce:	4618      	mov	r0, r3
   1cbd0:	b003      	add	sp, #12
   1cbd2:	bd30      	pop	{r4, r5, pc}
   1cbd4:	2300      	movs	r3, #0
   1cbd6:	6123      	str	r3, [r4, #16]
   1cbd8:	2309      	movs	r3, #9
   1cbda:	4618      	mov	r0, r3
   1cbdc:	b003      	add	sp, #12
   1cbde:	bd30      	pop	{r4, r5, pc}
   1cbe0:	490a      	ldr	r1, [pc, #40]	; (1cc0c <get_eit_entry+0x98>)
   1cbe2:	480b      	ldr	r0, [pc, #44]	; (1cc10 <get_eit_entry+0x9c>)
   1cbe4:	1a09      	subs	r1, r1, r0
   1cbe6:	10c9      	asrs	r1, r1, #3
   1cbe8:	9101      	str	r1, [sp, #4]
   1cbea:	e7cf      	b.n	1cb8c <get_eit_entry+0x18>
   1cbec:	2301      	movs	r3, #1
   1cbee:	64e0      	str	r0, [r4, #76]	; 0x4c
   1cbf0:	6523      	str	r3, [r4, #80]	; 0x50
   1cbf2:	e7df      	b.n	1cbb4 <get_eit_entry+0x40>
   1cbf4:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1cbf8:	f7ff ffa8 	bl	1cb4c <__gnu_unwind_get_pr_addr>
   1cbfc:	2800      	cmp	r0, #0
   1cbfe:	6120      	str	r0, [r4, #16]
   1cc00:	bf14      	ite	ne
   1cc02:	2300      	movne	r3, #0
   1cc04:	2309      	moveq	r3, #9
   1cc06:	e7dc      	b.n	1cbc2 <get_eit_entry+0x4e>
   1cc08:	00000000 	.word	0x00000000
   1cc0c:	00025314 	.word	0x00025314
   1cc10:	0002518c 	.word	0x0002518c

0001cc14 <restore_non_core_regs>:
   1cc14:	6803      	ldr	r3, [r0, #0]
   1cc16:	07da      	lsls	r2, r3, #31
   1cc18:	b510      	push	{r4, lr}
   1cc1a:	4604      	mov	r4, r0
   1cc1c:	d406      	bmi.n	1cc2c <restore_non_core_regs+0x18>
   1cc1e:	079b      	lsls	r3, r3, #30
   1cc20:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1cc24:	d509      	bpl.n	1cc3a <restore_non_core_regs+0x26>
   1cc26:	f000 fc51 	bl	1d4cc <__gnu_Unwind_Restore_VFP_D>
   1cc2a:	6823      	ldr	r3, [r4, #0]
   1cc2c:	0759      	lsls	r1, r3, #29
   1cc2e:	d509      	bpl.n	1cc44 <restore_non_core_regs+0x30>
   1cc30:	071a      	lsls	r2, r3, #28
   1cc32:	d50e      	bpl.n	1cc52 <restore_non_core_regs+0x3e>
   1cc34:	06db      	lsls	r3, r3, #27
   1cc36:	d513      	bpl.n	1cc60 <restore_non_core_regs+0x4c>
   1cc38:	bd10      	pop	{r4, pc}
   1cc3a:	f000 fc3f 	bl	1d4bc <__gnu_Unwind_Restore_VFP>
   1cc3e:	6823      	ldr	r3, [r4, #0]
   1cc40:	0759      	lsls	r1, r3, #29
   1cc42:	d4f5      	bmi.n	1cc30 <restore_non_core_regs+0x1c>
   1cc44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1cc48:	f000 fc48 	bl	1d4dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1cc4c:	6823      	ldr	r3, [r4, #0]
   1cc4e:	071a      	lsls	r2, r3, #28
   1cc50:	d4f0      	bmi.n	1cc34 <restore_non_core_regs+0x20>
   1cc52:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1cc56:	f000 fc49 	bl	1d4ec <__gnu_Unwind_Restore_WMMXD>
   1cc5a:	6823      	ldr	r3, [r4, #0]
   1cc5c:	06db      	lsls	r3, r3, #27
   1cc5e:	d4eb      	bmi.n	1cc38 <restore_non_core_regs+0x24>
   1cc60:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1cc64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cc68:	f000 bc84 	b.w	1d574 <__gnu_Unwind_Restore_WMMXC>

0001cc6c <_Unwind_decode_typeinfo_ptr.isra.0>:
   1cc6c:	6803      	ldr	r3, [r0, #0]
   1cc6e:	b103      	cbz	r3, 1cc72 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1cc70:	4403      	add	r3, r0
   1cc72:	4618      	mov	r0, r3
   1cc74:	4770      	bx	lr
   1cc76:	bf00      	nop

0001cc78 <__gnu_unwind_24bit.isra.1>:
   1cc78:	2009      	movs	r0, #9
   1cc7a:	4770      	bx	lr

0001cc7c <_Unwind_DebugHook>:
   1cc7c:	4770      	bx	lr
   1cc7e:	bf00      	nop

0001cc80 <unwind_phase2>:
   1cc80:	b570      	push	{r4, r5, r6, lr}
   1cc82:	4604      	mov	r4, r0
   1cc84:	460d      	mov	r5, r1
   1cc86:	e008      	b.n	1cc9a <unwind_phase2+0x1a>
   1cc88:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1cc8a:	6163      	str	r3, [r4, #20]
   1cc8c:	462a      	mov	r2, r5
   1cc8e:	6923      	ldr	r3, [r4, #16]
   1cc90:	4621      	mov	r1, r4
   1cc92:	2001      	movs	r0, #1
   1cc94:	4798      	blx	r3
   1cc96:	2808      	cmp	r0, #8
   1cc98:	d108      	bne.n	1ccac <unwind_phase2+0x2c>
   1cc9a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1cc9c:	4620      	mov	r0, r4
   1cc9e:	f7ff ff69 	bl	1cb74 <get_eit_entry>
   1cca2:	4606      	mov	r6, r0
   1cca4:	2800      	cmp	r0, #0
   1cca6:	d0ef      	beq.n	1cc88 <unwind_phase2+0x8>
   1cca8:	f000 fe94 	bl	1d9d4 <abort>
   1ccac:	2807      	cmp	r0, #7
   1ccae:	d1fb      	bne.n	1cca8 <unwind_phase2+0x28>
   1ccb0:	4630      	mov	r0, r6
   1ccb2:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1ccb4:	f7ff ffe2 	bl	1cc7c <_Unwind_DebugHook>
   1ccb8:	1d28      	adds	r0, r5, #4
   1ccba:	f000 fbf3 	bl	1d4a4 <__restore_core_regs>
   1ccbe:	bf00      	nop

0001ccc0 <unwind_phase2_forced>:
   1ccc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ccc4:	1d0c      	adds	r4, r1, #4
   1ccc6:	4605      	mov	r5, r0
   1ccc8:	4692      	mov	sl, r2
   1ccca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1cccc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1ccd0:	ae03      	add	r6, sp, #12
   1ccd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ccd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ccd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ccd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ccda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ccdc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1cce0:	ac02      	add	r4, sp, #8
   1cce2:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1cce6:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1ccea:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1ccee:	2300      	movs	r3, #0
   1ccf0:	4628      	mov	r0, r5
   1ccf2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1ccf4:	6023      	str	r3, [r4, #0]
   1ccf6:	f7ff ff3d 	bl	1cb74 <get_eit_entry>
   1ccfa:	f1ba 0f00 	cmp.w	sl, #0
   1ccfe:	4607      	mov	r7, r0
   1cd00:	bf14      	ite	ne
   1cd02:	260a      	movne	r6, #10
   1cd04:	2609      	moveq	r6, #9
   1cd06:	b17f      	cbz	r7, 1cd28 <unwind_phase2_forced+0x68>
   1cd08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cd0a:	f046 0110 	orr.w	r1, r6, #16
   1cd0e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1cd12:	462a      	mov	r2, r5
   1cd14:	6463      	str	r3, [r4, #68]	; 0x44
   1cd16:	2001      	movs	r0, #1
   1cd18:	462b      	mov	r3, r5
   1cd1a:	47c0      	blx	r8
   1cd1c:	bb78      	cbnz	r0, 1cd7e <unwind_phase2_forced+0xbe>
   1cd1e:	4638      	mov	r0, r7
   1cd20:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cd28:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1cd2a:	616b      	str	r3, [r5, #20]
   1cd2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1cd30:	4621      	mov	r1, r4
   1cd32:	a87a      	add	r0, sp, #488	; 0x1e8
   1cd34:	f001 fc54 	bl	1e5e0 <memcpy>
   1cd38:	692b      	ldr	r3, [r5, #16]
   1cd3a:	aa7a      	add	r2, sp, #488	; 0x1e8
   1cd3c:	4629      	mov	r1, r5
   1cd3e:	4630      	mov	r0, r6
   1cd40:	4798      	blx	r3
   1cd42:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1cd44:	4682      	mov	sl, r0
   1cd46:	e88d 0210 	stmia.w	sp, {r4, r9}
   1cd4a:	4631      	mov	r1, r6
   1cd4c:	6463      	str	r3, [r4, #68]	; 0x44
   1cd4e:	462a      	mov	r2, r5
   1cd50:	462b      	mov	r3, r5
   1cd52:	2001      	movs	r0, #1
   1cd54:	47c0      	blx	r8
   1cd56:	b990      	cbnz	r0, 1cd7e <unwind_phase2_forced+0xbe>
   1cd58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1cd5c:	a97a      	add	r1, sp, #488	; 0x1e8
   1cd5e:	4620      	mov	r0, r4
   1cd60:	f001 fc3e 	bl	1e5e0 <memcpy>
   1cd64:	f1ba 0f08 	cmp.w	sl, #8
   1cd68:	d106      	bne.n	1cd78 <unwind_phase2_forced+0xb8>
   1cd6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cd6c:	4628      	mov	r0, r5
   1cd6e:	f7ff ff01 	bl	1cb74 <get_eit_entry>
   1cd72:	2609      	movs	r6, #9
   1cd74:	4607      	mov	r7, r0
   1cd76:	e7c6      	b.n	1cd06 <unwind_phase2_forced+0x46>
   1cd78:	f1ba 0f07 	cmp.w	sl, #7
   1cd7c:	d005      	beq.n	1cd8a <unwind_phase2_forced+0xca>
   1cd7e:	2709      	movs	r7, #9
   1cd80:	4638      	mov	r0, r7
   1cd82:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1cd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cd8a:	4638      	mov	r0, r7
   1cd8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1cd8e:	f7ff ff75 	bl	1cc7c <_Unwind_DebugHook>
   1cd92:	a803      	add	r0, sp, #12
   1cd94:	f000 fb86 	bl	1d4a4 <__restore_core_regs>

0001cd98 <_Unwind_GetCFA>:
   1cd98:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1cd9a:	4770      	bx	lr

0001cd9c <__gnu_Unwind_RaiseException>:
   1cd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd9e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1cda0:	640b      	str	r3, [r1, #64]	; 0x40
   1cda2:	1d0e      	adds	r6, r1, #4
   1cda4:	460f      	mov	r7, r1
   1cda6:	4604      	mov	r4, r0
   1cda8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cdaa:	b0f9      	sub	sp, #484	; 0x1e4
   1cdac:	ad01      	add	r5, sp, #4
   1cdae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cdb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cdb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cdb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cdb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1cdb8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1cdbc:	f04f 36ff 	mov.w	r6, #4294967295
   1cdc0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1cdc4:	9600      	str	r6, [sp, #0]
   1cdc6:	e006      	b.n	1cdd6 <__gnu_Unwind_RaiseException+0x3a>
   1cdc8:	6923      	ldr	r3, [r4, #16]
   1cdca:	466a      	mov	r2, sp
   1cdcc:	4621      	mov	r1, r4
   1cdce:	4798      	blx	r3
   1cdd0:	2808      	cmp	r0, #8
   1cdd2:	4605      	mov	r5, r0
   1cdd4:	d108      	bne.n	1cde8 <__gnu_Unwind_RaiseException+0x4c>
   1cdd6:	9910      	ldr	r1, [sp, #64]	; 0x40
   1cdd8:	4620      	mov	r0, r4
   1cdda:	f7ff fecb 	bl	1cb74 <get_eit_entry>
   1cdde:	2800      	cmp	r0, #0
   1cde0:	d0f2      	beq.n	1cdc8 <__gnu_Unwind_RaiseException+0x2c>
   1cde2:	2009      	movs	r0, #9
   1cde4:	b079      	add	sp, #484	; 0x1e4
   1cde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cde8:	4668      	mov	r0, sp
   1cdea:	f7ff ff13 	bl	1cc14 <restore_non_core_regs>
   1cdee:	2d06      	cmp	r5, #6
   1cdf0:	d1f7      	bne.n	1cde2 <__gnu_Unwind_RaiseException+0x46>
   1cdf2:	4639      	mov	r1, r7
   1cdf4:	4620      	mov	r0, r4
   1cdf6:	f7ff ff43 	bl	1cc80 <unwind_phase2>
   1cdfa:	bf00      	nop

0001cdfc <__gnu_Unwind_ForcedUnwind>:
   1cdfc:	b430      	push	{r4, r5}
   1cdfe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1ce00:	60c1      	str	r1, [r0, #12]
   1ce02:	6182      	str	r2, [r0, #24]
   1ce04:	4619      	mov	r1, r3
   1ce06:	641d      	str	r5, [r3, #64]	; 0x40
   1ce08:	2200      	movs	r2, #0
   1ce0a:	bc30      	pop	{r4, r5}
   1ce0c:	e758      	b.n	1ccc0 <unwind_phase2_forced>
   1ce0e:	bf00      	nop

0001ce10 <__gnu_Unwind_Resume>:
   1ce10:	b570      	push	{r4, r5, r6, lr}
   1ce12:	68c6      	ldr	r6, [r0, #12]
   1ce14:	6943      	ldr	r3, [r0, #20]
   1ce16:	640b      	str	r3, [r1, #64]	; 0x40
   1ce18:	b126      	cbz	r6, 1ce24 <__gnu_Unwind_Resume+0x14>
   1ce1a:	2201      	movs	r2, #1
   1ce1c:	f7ff ff50 	bl	1ccc0 <unwind_phase2_forced>
   1ce20:	f000 fdd8 	bl	1d9d4 <abort>
   1ce24:	6903      	ldr	r3, [r0, #16]
   1ce26:	460a      	mov	r2, r1
   1ce28:	4604      	mov	r4, r0
   1ce2a:	460d      	mov	r5, r1
   1ce2c:	4601      	mov	r1, r0
   1ce2e:	2002      	movs	r0, #2
   1ce30:	4798      	blx	r3
   1ce32:	2807      	cmp	r0, #7
   1ce34:	d007      	beq.n	1ce46 <__gnu_Unwind_Resume+0x36>
   1ce36:	2808      	cmp	r0, #8
   1ce38:	d103      	bne.n	1ce42 <__gnu_Unwind_Resume+0x32>
   1ce3a:	4629      	mov	r1, r5
   1ce3c:	4620      	mov	r0, r4
   1ce3e:	f7ff ff1f 	bl	1cc80 <unwind_phase2>
   1ce42:	f000 fdc7 	bl	1d9d4 <abort>
   1ce46:	4630      	mov	r0, r6
   1ce48:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1ce4a:	f7ff ff17 	bl	1cc7c <_Unwind_DebugHook>
   1ce4e:	1d28      	adds	r0, r5, #4
   1ce50:	f000 fb28 	bl	1d4a4 <__restore_core_regs>

0001ce54 <__gnu_Unwind_Resume_or_Rethrow>:
   1ce54:	68c2      	ldr	r2, [r0, #12]
   1ce56:	b11a      	cbz	r2, 1ce60 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1ce58:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1ce5a:	640a      	str	r2, [r1, #64]	; 0x40
   1ce5c:	2200      	movs	r2, #0
   1ce5e:	e72f      	b.n	1ccc0 <unwind_phase2_forced>
   1ce60:	e79c      	b.n	1cd9c <__gnu_Unwind_RaiseException>
   1ce62:	bf00      	nop

0001ce64 <_Unwind_Complete>:
   1ce64:	4770      	bx	lr
   1ce66:	bf00      	nop

0001ce68 <_Unwind_DeleteException>:
   1ce68:	6883      	ldr	r3, [r0, #8]
   1ce6a:	b113      	cbz	r3, 1ce72 <_Unwind_DeleteException+0xa>
   1ce6c:	4601      	mov	r1, r0
   1ce6e:	2001      	movs	r0, #1
   1ce70:	4718      	bx	r3
   1ce72:	4770      	bx	lr

0001ce74 <_Unwind_VRS_Get>:
   1ce74:	b500      	push	{lr}
   1ce76:	2904      	cmp	r1, #4
   1ce78:	d807      	bhi.n	1ce8a <_Unwind_VRS_Get+0x16>
   1ce7a:	e8df f001 	tbb	[pc, r1]
   1ce7e:	0903      	.short	0x0903
   1ce80:	0906      	.short	0x0906
   1ce82:	09          	.byte	0x09
   1ce83:	00          	.byte	0x00
   1ce84:	b90b      	cbnz	r3, 1ce8a <_Unwind_VRS_Get+0x16>
   1ce86:	2a0f      	cmp	r2, #15
   1ce88:	d905      	bls.n	1ce96 <_Unwind_VRS_Get+0x22>
   1ce8a:	2002      	movs	r0, #2
   1ce8c:	f85d fb04 	ldr.w	pc, [sp], #4
   1ce90:	2001      	movs	r0, #1
   1ce92:	f85d fb04 	ldr.w	pc, [sp], #4
   1ce96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1ce9a:	4618      	mov	r0, r3
   1ce9c:	6853      	ldr	r3, [r2, #4]
   1ce9e:	9a01      	ldr	r2, [sp, #4]
   1cea0:	6013      	str	r3, [r2, #0]
   1cea2:	f85d fb04 	ldr.w	pc, [sp], #4
   1cea6:	bf00      	nop

0001cea8 <_Unwind_GetGR>:
   1cea8:	b510      	push	{r4, lr}
   1ceaa:	b084      	sub	sp, #16
   1ceac:	2300      	movs	r3, #0
   1ceae:	ac03      	add	r4, sp, #12
   1ceb0:	460a      	mov	r2, r1
   1ceb2:	9400      	str	r4, [sp, #0]
   1ceb4:	4619      	mov	r1, r3
   1ceb6:	f7ff ffdd 	bl	1ce74 <_Unwind_VRS_Get>
   1ceba:	9803      	ldr	r0, [sp, #12]
   1cebc:	b004      	add	sp, #16
   1cebe:	bd10      	pop	{r4, pc}

0001cec0 <_Unwind_VRS_Set>:
   1cec0:	b500      	push	{lr}
   1cec2:	2904      	cmp	r1, #4
   1cec4:	d807      	bhi.n	1ced6 <_Unwind_VRS_Set+0x16>
   1cec6:	e8df f001 	tbb	[pc, r1]
   1ceca:	0903      	.short	0x0903
   1cecc:	0906      	.short	0x0906
   1cece:	09          	.byte	0x09
   1cecf:	00          	.byte	0x00
   1ced0:	b90b      	cbnz	r3, 1ced6 <_Unwind_VRS_Set+0x16>
   1ced2:	2a0f      	cmp	r2, #15
   1ced4:	d905      	bls.n	1cee2 <_Unwind_VRS_Set+0x22>
   1ced6:	2002      	movs	r0, #2
   1ced8:	f85d fb04 	ldr.w	pc, [sp], #4
   1cedc:	2001      	movs	r0, #1
   1cede:	f85d fb04 	ldr.w	pc, [sp], #4
   1cee2:	9901      	ldr	r1, [sp, #4]
   1cee4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cee8:	6809      	ldr	r1, [r1, #0]
   1ceea:	6051      	str	r1, [r2, #4]
   1ceec:	4618      	mov	r0, r3
   1ceee:	f85d fb04 	ldr.w	pc, [sp], #4
   1cef2:	bf00      	nop

0001cef4 <_Unwind_SetGR>:
   1cef4:	b510      	push	{r4, lr}
   1cef6:	b084      	sub	sp, #16
   1cef8:	ac04      	add	r4, sp, #16
   1cefa:	2300      	movs	r3, #0
   1cefc:	f844 2d04 	str.w	r2, [r4, #-4]!
   1cf00:	460a      	mov	r2, r1
   1cf02:	9400      	str	r4, [sp, #0]
   1cf04:	4619      	mov	r1, r3
   1cf06:	f7ff ffdb 	bl	1cec0 <_Unwind_VRS_Set>
   1cf0a:	b004      	add	sp, #16
   1cf0c:	bd10      	pop	{r4, pc}
   1cf0e:	bf00      	nop

0001cf10 <__gnu_Unwind_Backtrace>:
   1cf10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf12:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1cf14:	6413      	str	r3, [r2, #64]	; 0x40
   1cf16:	1d15      	adds	r5, r2, #4
   1cf18:	4607      	mov	r7, r0
   1cf1a:	460e      	mov	r6, r1
   1cf1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cf1e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1cf22:	ac17      	add	r4, sp, #92	; 0x5c
   1cf24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cf26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cf28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cf2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cf2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cf2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cf32:	f04f 35ff 	mov.w	r5, #4294967295
   1cf36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1cf3a:	9516      	str	r5, [sp, #88]	; 0x58
   1cf3c:	e010      	b.n	1cf60 <__gnu_Unwind_Backtrace+0x50>
   1cf3e:	a816      	add	r0, sp, #88	; 0x58
   1cf40:	f7ff ffd8 	bl	1cef4 <_Unwind_SetGR>
   1cf44:	4631      	mov	r1, r6
   1cf46:	a816      	add	r0, sp, #88	; 0x58
   1cf48:	47b8      	blx	r7
   1cf4a:	aa16      	add	r2, sp, #88	; 0x58
   1cf4c:	4669      	mov	r1, sp
   1cf4e:	b978      	cbnz	r0, 1cf70 <__gnu_Unwind_Backtrace+0x60>
   1cf50:	9b04      	ldr	r3, [sp, #16]
   1cf52:	2008      	movs	r0, #8
   1cf54:	4798      	blx	r3
   1cf56:	2805      	cmp	r0, #5
   1cf58:	4604      	mov	r4, r0
   1cf5a:	d00a      	beq.n	1cf72 <__gnu_Unwind_Backtrace+0x62>
   1cf5c:	2809      	cmp	r0, #9
   1cf5e:	d007      	beq.n	1cf70 <__gnu_Unwind_Backtrace+0x60>
   1cf60:	9926      	ldr	r1, [sp, #152]	; 0x98
   1cf62:	4668      	mov	r0, sp
   1cf64:	f7ff fe06 	bl	1cb74 <get_eit_entry>
   1cf68:	466a      	mov	r2, sp
   1cf6a:	210c      	movs	r1, #12
   1cf6c:	2800      	cmp	r0, #0
   1cf6e:	d0e6      	beq.n	1cf3e <__gnu_Unwind_Backtrace+0x2e>
   1cf70:	2409      	movs	r4, #9
   1cf72:	a816      	add	r0, sp, #88	; 0x58
   1cf74:	f7ff fe4e 	bl	1cc14 <restore_non_core_regs>
   1cf78:	4620      	mov	r0, r4
   1cf7a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1cf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cf80 <__gnu_unwind_pr_common>:
   1cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf84:	460d      	mov	r5, r1
   1cf86:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1cf88:	b08b      	sub	sp, #44	; 0x2c
   1cf8a:	1d0c      	adds	r4, r1, #4
   1cf8c:	6809      	ldr	r1, [r1, #0]
   1cf8e:	9107      	str	r1, [sp, #28]
   1cf90:	4691      	mov	r9, r2
   1cf92:	9408      	str	r4, [sp, #32]
   1cf94:	f000 0b03 	and.w	fp, r0, #3
   1cf98:	461e      	mov	r6, r3
   1cf9a:	2b00      	cmp	r3, #0
   1cf9c:	d160      	bne.n	1d060 <__gnu_unwind_pr_common+0xe0>
   1cf9e:	0209      	lsls	r1, r1, #8
   1cfa0:	2303      	movs	r3, #3
   1cfa2:	9107      	str	r1, [sp, #28]
   1cfa4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1cfa8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cfac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cfae:	f1bb 0f02 	cmp.w	fp, #2
   1cfb2:	bf08      	it	eq
   1cfb4:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1cfb6:	f013 0301 	ands.w	r3, r3, #1
   1cfba:	d140      	bne.n	1d03e <__gnu_unwind_pr_common+0xbe>
   1cfbc:	9301      	str	r3, [sp, #4]
   1cfbe:	f000 0308 	and.w	r3, r0, #8
   1cfc2:	9303      	str	r3, [sp, #12]
   1cfc4:	f8d4 8000 	ldr.w	r8, [r4]
   1cfc8:	f1b8 0f00 	cmp.w	r8, #0
   1cfcc:	d039      	beq.n	1d042 <__gnu_unwind_pr_common+0xc2>
   1cfce:	2e02      	cmp	r6, #2
   1cfd0:	d043      	beq.n	1d05a <__gnu_unwind_pr_common+0xda>
   1cfd2:	f8b4 8000 	ldrh.w	r8, [r4]
   1cfd6:	8867      	ldrh	r7, [r4, #2]
   1cfd8:	3404      	adds	r4, #4
   1cfda:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1cfdc:	f027 0a01 	bic.w	sl, r7, #1
   1cfe0:	210f      	movs	r1, #15
   1cfe2:	4648      	mov	r0, r9
   1cfe4:	449a      	add	sl, r3
   1cfe6:	f7ff ff5f 	bl	1cea8 <_Unwind_GetGR>
   1cfea:	4582      	cmp	sl, r0
   1cfec:	d833      	bhi.n	1d056 <__gnu_unwind_pr_common+0xd6>
   1cfee:	f028 0301 	bic.w	r3, r8, #1
   1cff2:	449a      	add	sl, r3
   1cff4:	4550      	cmp	r0, sl
   1cff6:	bf2c      	ite	cs
   1cff8:	2000      	movcs	r0, #0
   1cffa:	2001      	movcc	r0, #1
   1cffc:	007f      	lsls	r7, r7, #1
   1cffe:	f007 0702 	and.w	r7, r7, #2
   1d002:	f008 0801 	and.w	r8, r8, #1
   1d006:	ea47 0708 	orr.w	r7, r7, r8
   1d00a:	2f01      	cmp	r7, #1
   1d00c:	d03e      	beq.n	1d08c <__gnu_unwind_pr_common+0x10c>
   1d00e:	d335      	bcc.n	1d07c <__gnu_unwind_pr_common+0xfc>
   1d010:	2f02      	cmp	r7, #2
   1d012:	d11c      	bne.n	1d04e <__gnu_unwind_pr_common+0xce>
   1d014:	6823      	ldr	r3, [r4, #0]
   1d016:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1d01a:	9202      	str	r2, [sp, #8]
   1d01c:	f1bb 0f00 	cmp.w	fp, #0
   1d020:	d176      	bne.n	1d110 <__gnu_unwind_pr_common+0x190>
   1d022:	b128      	cbz	r0, 1d030 <__gnu_unwind_pr_common+0xb0>
   1d024:	9903      	ldr	r1, [sp, #12]
   1d026:	2900      	cmp	r1, #0
   1d028:	d07e      	beq.n	1d128 <__gnu_unwind_pr_common+0x1a8>
   1d02a:	2a00      	cmp	r2, #0
   1d02c:	f000 80a6 	beq.w	1d17c <__gnu_unwind_pr_common+0x1fc>
   1d030:	2b00      	cmp	r3, #0
   1d032:	db77      	blt.n	1d124 <__gnu_unwind_pr_common+0x1a4>
   1d034:	9b02      	ldr	r3, [sp, #8]
   1d036:	3301      	adds	r3, #1
   1d038:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1d03c:	e7c2      	b.n	1cfc4 <__gnu_unwind_pr_common+0x44>
   1d03e:	2300      	movs	r3, #0
   1d040:	9301      	str	r3, [sp, #4]
   1d042:	2e02      	cmp	r6, #2
   1d044:	dd3e      	ble.n	1d0c4 <__gnu_unwind_pr_common+0x144>
   1d046:	f7ff fe17 	bl	1cc78 <__gnu_unwind_24bit.isra.1>
   1d04a:	2800      	cmp	r0, #0
   1d04c:	d040      	beq.n	1d0d0 <__gnu_unwind_pr_common+0x150>
   1d04e:	2009      	movs	r0, #9
   1d050:	b00b      	add	sp, #44	; 0x2c
   1d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d056:	2000      	movs	r0, #0
   1d058:	e7d0      	b.n	1cffc <__gnu_unwind_pr_common+0x7c>
   1d05a:	6867      	ldr	r7, [r4, #4]
   1d05c:	3408      	adds	r4, #8
   1d05e:	e7bc      	b.n	1cfda <__gnu_unwind_pr_common+0x5a>
   1d060:	2b02      	cmp	r3, #2
   1d062:	dca3      	bgt.n	1cfac <__gnu_unwind_pr_common+0x2c>
   1d064:	0c0b      	lsrs	r3, r1, #16
   1d066:	b2da      	uxtb	r2, r3
   1d068:	0409      	lsls	r1, r1, #16
   1d06a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1d06e:	2302      	movs	r3, #2
   1d070:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1d074:	9107      	str	r1, [sp, #28]
   1d076:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1d07a:	e797      	b.n	1cfac <__gnu_unwind_pr_common+0x2c>
   1d07c:	f1bb 0f00 	cmp.w	fp, #0
   1d080:	d002      	beq.n	1d088 <__gnu_unwind_pr_common+0x108>
   1d082:	2800      	cmp	r0, #0
   1d084:	f040 80bd 	bne.w	1d202 <__gnu_unwind_pr_common+0x282>
   1d088:	3404      	adds	r4, #4
   1d08a:	e79b      	b.n	1cfc4 <__gnu_unwind_pr_common+0x44>
   1d08c:	f1bb 0f00 	cmp.w	fp, #0
   1d090:	d125      	bne.n	1d0de <__gnu_unwind_pr_common+0x15e>
   1d092:	b1a8      	cbz	r0, 1d0c0 <__gnu_unwind_pr_common+0x140>
   1d094:	e894 000c 	ldmia.w	r4, {r2, r3}
   1d098:	1c99      	adds	r1, r3, #2
   1d09a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1d09e:	d0d6      	beq.n	1d04e <__gnu_unwind_pr_common+0xce>
   1d0a0:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1d0a4:	3301      	adds	r3, #1
   1d0a6:	9106      	str	r1, [sp, #24]
   1d0a8:	f000 80a3 	beq.w	1d1f2 <__gnu_unwind_pr_common+0x272>
   1d0ac:	1d20      	adds	r0, r4, #4
   1d0ae:	f7ff fddd 	bl	1cc6c <_Unwind_decode_typeinfo_ptr.isra.0>
   1d0b2:	ab06      	add	r3, sp, #24
   1d0b4:	4601      	mov	r1, r0
   1d0b6:	4628      	mov	r0, r5
   1d0b8:	f7f6 fe00 	bl	13cbc <__cxa_type_match>
   1d0bc:	2800      	cmp	r0, #0
   1d0be:	d177      	bne.n	1d1b0 <__gnu_unwind_pr_common+0x230>
   1d0c0:	3408      	adds	r4, #8
   1d0c2:	e77f      	b.n	1cfc4 <__gnu_unwind_pr_common+0x44>
   1d0c4:	a907      	add	r1, sp, #28
   1d0c6:	4648      	mov	r0, r9
   1d0c8:	f000 faee 	bl	1d6a8 <__gnu_unwind_execute>
   1d0cc:	2800      	cmp	r0, #0
   1d0ce:	d1be      	bne.n	1d04e <__gnu_unwind_pr_common+0xce>
   1d0d0:	9b01      	ldr	r3, [sp, #4]
   1d0d2:	2b00      	cmp	r3, #0
   1d0d4:	d15c      	bne.n	1d190 <__gnu_unwind_pr_common+0x210>
   1d0d6:	2008      	movs	r0, #8
   1d0d8:	b00b      	add	sp, #44	; 0x2c
   1d0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0de:	210d      	movs	r1, #13
   1d0e0:	4648      	mov	r0, r9
   1d0e2:	6a2f      	ldr	r7, [r5, #32]
   1d0e4:	f7ff fee0 	bl	1cea8 <_Unwind_GetGR>
   1d0e8:	4287      	cmp	r7, r0
   1d0ea:	d1e9      	bne.n	1d0c0 <__gnu_unwind_pr_common+0x140>
   1d0ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d0ee:	429c      	cmp	r4, r3
   1d0f0:	d1e6      	bne.n	1d0c0 <__gnu_unwind_pr_common+0x140>
   1d0f2:	4620      	mov	r0, r4
   1d0f4:	f7ff fcf0 	bl	1cad8 <selfrel_offset31>
   1d0f8:	210f      	movs	r1, #15
   1d0fa:	4602      	mov	r2, r0
   1d0fc:	4648      	mov	r0, r9
   1d0fe:	f7ff fef9 	bl	1cef4 <_Unwind_SetGR>
   1d102:	4648      	mov	r0, r9
   1d104:	462a      	mov	r2, r5
   1d106:	2100      	movs	r1, #0
   1d108:	f7ff fef4 	bl	1cef4 <_Unwind_SetGR>
   1d10c:	2007      	movs	r0, #7
   1d10e:	e79f      	b.n	1d050 <__gnu_unwind_pr_common+0xd0>
   1d110:	210d      	movs	r1, #13
   1d112:	4648      	mov	r0, r9
   1d114:	6a2f      	ldr	r7, [r5, #32]
   1d116:	f7ff fec7 	bl	1cea8 <_Unwind_GetGR>
   1d11a:	4287      	cmp	r7, r0
   1d11c:	d058      	beq.n	1d1d0 <__gnu_unwind_pr_common+0x250>
   1d11e:	6823      	ldr	r3, [r4, #0]
   1d120:	2b00      	cmp	r3, #0
   1d122:	da87      	bge.n	1d034 <__gnu_unwind_pr_common+0xb4>
   1d124:	3404      	adds	r4, #4
   1d126:	e785      	b.n	1d034 <__gnu_unwind_pr_common+0xb4>
   1d128:	9b02      	ldr	r3, [sp, #8]
   1d12a:	b33b      	cbz	r3, 1d17c <__gnu_unwind_pr_common+0x1fc>
   1d12c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1d130:	1d27      	adds	r7, r4, #4
   1d132:	f8cd b010 	str.w	fp, [sp, #16]
   1d136:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1d13a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1d13e:	9605      	str	r6, [sp, #20]
   1d140:	46a3      	mov	fp, r4
   1d142:	461c      	mov	r4, r3
   1d144:	e002      	b.n	1d14c <__gnu_unwind_pr_common+0x1cc>
   1d146:	45b2      	cmp	sl, r6
   1d148:	46b0      	mov	r8, r6
   1d14a:	d016      	beq.n	1d17a <__gnu_unwind_pr_common+0x1fa>
   1d14c:	4638      	mov	r0, r7
   1d14e:	9406      	str	r4, [sp, #24]
   1d150:	f7ff fd8c 	bl	1cc6c <_Unwind_decode_typeinfo_ptr.isra.0>
   1d154:	ab06      	add	r3, sp, #24
   1d156:	4601      	mov	r1, r0
   1d158:	2200      	movs	r2, #0
   1d15a:	4628      	mov	r0, r5
   1d15c:	f7f6 fdae 	bl	13cbc <__cxa_type_match>
   1d160:	f108 0601 	add.w	r6, r8, #1
   1d164:	3704      	adds	r7, #4
   1d166:	2800      	cmp	r0, #0
   1d168:	d0ed      	beq.n	1d146 <__gnu_unwind_pr_common+0x1c6>
   1d16a:	9b02      	ldr	r3, [sp, #8]
   1d16c:	9e05      	ldr	r6, [sp, #20]
   1d16e:	4543      	cmp	r3, r8
   1d170:	465c      	mov	r4, fp
   1d172:	f8dd b010 	ldr.w	fp, [sp, #16]
   1d176:	d1d2      	bne.n	1d11e <__gnu_unwind_pr_common+0x19e>
   1d178:	e000      	b.n	1d17c <__gnu_unwind_pr_common+0x1fc>
   1d17a:	465c      	mov	r4, fp
   1d17c:	4648      	mov	r0, r9
   1d17e:	210d      	movs	r1, #13
   1d180:	f7ff fe92 	bl	1cea8 <_Unwind_GetGR>
   1d184:	9b06      	ldr	r3, [sp, #24]
   1d186:	6228      	str	r0, [r5, #32]
   1d188:	62ac      	str	r4, [r5, #40]	; 0x28
   1d18a:	626b      	str	r3, [r5, #36]	; 0x24
   1d18c:	2006      	movs	r0, #6
   1d18e:	e75f      	b.n	1d050 <__gnu_unwind_pr_common+0xd0>
   1d190:	210f      	movs	r1, #15
   1d192:	4648      	mov	r0, r9
   1d194:	f7ff fe88 	bl	1cea8 <_Unwind_GetGR>
   1d198:	210e      	movs	r1, #14
   1d19a:	4602      	mov	r2, r0
   1d19c:	4648      	mov	r0, r9
   1d19e:	f7ff fea9 	bl	1cef4 <_Unwind_SetGR>
   1d1a2:	4648      	mov	r0, r9
   1d1a4:	4a29      	ldr	r2, [pc, #164]	; (1d24c <__gnu_unwind_pr_common+0x2cc>)
   1d1a6:	210f      	movs	r1, #15
   1d1a8:	f7ff fea4 	bl	1cef4 <_Unwind_SetGR>
   1d1ac:	2007      	movs	r0, #7
   1d1ae:	e74f      	b.n	1d050 <__gnu_unwind_pr_common+0xd0>
   1d1b0:	4607      	mov	r7, r0
   1d1b2:	210d      	movs	r1, #13
   1d1b4:	4648      	mov	r0, r9
   1d1b6:	f7ff fe77 	bl	1cea8 <_Unwind_GetGR>
   1d1ba:	2f02      	cmp	r7, #2
   1d1bc:	6228      	str	r0, [r5, #32]
   1d1be:	d11d      	bne.n	1d1fc <__gnu_unwind_pr_common+0x27c>
   1d1c0:	462b      	mov	r3, r5
   1d1c2:	9a06      	ldr	r2, [sp, #24]
   1d1c4:	f843 2f2c 	str.w	r2, [r3, #44]!
   1d1c8:	626b      	str	r3, [r5, #36]	; 0x24
   1d1ca:	62ac      	str	r4, [r5, #40]	; 0x28
   1d1cc:	2006      	movs	r0, #6
   1d1ce:	e73f      	b.n	1d050 <__gnu_unwind_pr_common+0xd0>
   1d1d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d1d2:	429c      	cmp	r4, r3
   1d1d4:	d1a3      	bne.n	1d11e <__gnu_unwind_pr_common+0x19e>
   1d1d6:	2204      	movs	r2, #4
   1d1d8:	2700      	movs	r7, #0
   1d1da:	18a3      	adds	r3, r4, r2
   1d1dc:	9902      	ldr	r1, [sp, #8]
   1d1de:	62a9      	str	r1, [r5, #40]	; 0x28
   1d1e0:	62ef      	str	r7, [r5, #44]	; 0x2c
   1d1e2:	632a      	str	r2, [r5, #48]	; 0x30
   1d1e4:	636b      	str	r3, [r5, #52]	; 0x34
   1d1e6:	6823      	ldr	r3, [r4, #0]
   1d1e8:	42bb      	cmp	r3, r7
   1d1ea:	db1d      	blt.n	1d228 <__gnu_unwind_pr_common+0x2a8>
   1d1ec:	2301      	movs	r3, #1
   1d1ee:	9301      	str	r3, [sp, #4]
   1d1f0:	e720      	b.n	1d034 <__gnu_unwind_pr_common+0xb4>
   1d1f2:	4648      	mov	r0, r9
   1d1f4:	210d      	movs	r1, #13
   1d1f6:	f7ff fe57 	bl	1cea8 <_Unwind_GetGR>
   1d1fa:	6228      	str	r0, [r5, #32]
   1d1fc:	9b06      	ldr	r3, [sp, #24]
   1d1fe:	626b      	str	r3, [r5, #36]	; 0x24
   1d200:	e7e3      	b.n	1d1ca <__gnu_unwind_pr_common+0x24a>
   1d202:	4620      	mov	r0, r4
   1d204:	f7ff fc68 	bl	1cad8 <selfrel_offset31>
   1d208:	3404      	adds	r4, #4
   1d20a:	4606      	mov	r6, r0
   1d20c:	63ac      	str	r4, [r5, #56]	; 0x38
   1d20e:	4628      	mov	r0, r5
   1d210:	f7f6 fdb0 	bl	13d74 <__cxa_begin_cleanup>
   1d214:	2800      	cmp	r0, #0
   1d216:	f43f af1a 	beq.w	1d04e <__gnu_unwind_pr_common+0xce>
   1d21a:	4648      	mov	r0, r9
   1d21c:	4632      	mov	r2, r6
   1d21e:	210f      	movs	r1, #15
   1d220:	f7ff fe68 	bl	1cef4 <_Unwind_SetGR>
   1d224:	2007      	movs	r0, #7
   1d226:	e713      	b.n	1d050 <__gnu_unwind_pr_common+0xd0>
   1d228:	4608      	mov	r0, r1
   1d22a:	3001      	adds	r0, #1
   1d22c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1d230:	f7ff fc52 	bl	1cad8 <selfrel_offset31>
   1d234:	210f      	movs	r1, #15
   1d236:	4602      	mov	r2, r0
   1d238:	4648      	mov	r0, r9
   1d23a:	f7ff fe5b 	bl	1cef4 <_Unwind_SetGR>
   1d23e:	4648      	mov	r0, r9
   1d240:	462a      	mov	r2, r5
   1d242:	4639      	mov	r1, r7
   1d244:	f7ff fe56 	bl	1cef4 <_Unwind_SetGR>
   1d248:	2007      	movs	r0, #7
   1d24a:	e701      	b.n	1d050 <__gnu_unwind_pr_common+0xd0>
   1d24c:	00013ea5 	.word	0x00013ea5

0001d250 <__aeabi_unwind_cpp_pr0>:
   1d250:	2300      	movs	r3, #0
   1d252:	e695      	b.n	1cf80 <__gnu_unwind_pr_common>

0001d254 <__aeabi_unwind_cpp_pr1>:
   1d254:	2301      	movs	r3, #1
   1d256:	e693      	b.n	1cf80 <__gnu_unwind_pr_common>

0001d258 <__aeabi_unwind_cpp_pr2>:
   1d258:	2302      	movs	r3, #2
   1d25a:	e691      	b.n	1cf80 <__gnu_unwind_pr_common>

0001d25c <_Unwind_VRS_Pop>:
   1d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d25e:	4604      	mov	r4, r0
   1d260:	b0c5      	sub	sp, #276	; 0x114
   1d262:	2904      	cmp	r1, #4
   1d264:	d80d      	bhi.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d266:	e8df f001 	tbb	[pc, r1]
   1d26a:	0353      	.short	0x0353
   1d26c:	310c      	.short	0x310c
   1d26e:	0f          	.byte	0x0f
   1d26f:	00          	.byte	0x00
   1d270:	2b01      	cmp	r3, #1
   1d272:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1d276:	b295      	uxth	r5, r2
   1d278:	d162      	bne.n	1d340 <_Unwind_VRS_Pop+0xe4>
   1d27a:	1972      	adds	r2, r6, r5
   1d27c:	2a10      	cmp	r2, #16
   1d27e:	f240 809b 	bls.w	1d3b8 <_Unwind_VRS_Pop+0x15c>
   1d282:	2002      	movs	r0, #2
   1d284:	b045      	add	sp, #276	; 0x114
   1d286:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d288:	2b00      	cmp	r3, #0
   1d28a:	d1fa      	bne.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d28c:	2a10      	cmp	r2, #16
   1d28e:	d8f8      	bhi.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d290:	6823      	ldr	r3, [r4, #0]
   1d292:	06d8      	lsls	r0, r3, #27
   1d294:	f100 80c6 	bmi.w	1d424 <_Unwind_VRS_Pop+0x1c8>
   1d298:	ae22      	add	r6, sp, #136	; 0x88
   1d29a:	4630      	mov	r0, r6
   1d29c:	9201      	str	r2, [sp, #4]
   1d29e:	f000 f973 	bl	1d588 <__gnu_Unwind_Save_WMMXC>
   1d2a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d2a4:	9a01      	ldr	r2, [sp, #4]
   1d2a6:	2300      	movs	r3, #0
   1d2a8:	2501      	movs	r5, #1
   1d2aa:	fa05 f103 	lsl.w	r1, r5, r3
   1d2ae:	4211      	tst	r1, r2
   1d2b0:	d003      	beq.n	1d2ba <_Unwind_VRS_Pop+0x5e>
   1d2b2:	6801      	ldr	r1, [r0, #0]
   1d2b4:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1d2b8:	3004      	adds	r0, #4
   1d2ba:	3301      	adds	r3, #1
   1d2bc:	2b04      	cmp	r3, #4
   1d2be:	d1f4      	bne.n	1d2aa <_Unwind_VRS_Pop+0x4e>
   1d2c0:	63a0      	str	r0, [r4, #56]	; 0x38
   1d2c2:	4630      	mov	r0, r6
   1d2c4:	f000 f956 	bl	1d574 <__gnu_Unwind_Restore_WMMXC>
   1d2c8:	2000      	movs	r0, #0
   1d2ca:	e7db      	b.n	1d284 <_Unwind_VRS_Pop+0x28>
   1d2cc:	2b03      	cmp	r3, #3
   1d2ce:	d1d8      	bne.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d2d0:	0c15      	lsrs	r5, r2, #16
   1d2d2:	b297      	uxth	r7, r2
   1d2d4:	19eb      	adds	r3, r5, r7
   1d2d6:	2b10      	cmp	r3, #16
   1d2d8:	d8d3      	bhi.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d2da:	6823      	ldr	r3, [r4, #0]
   1d2dc:	071e      	lsls	r6, r3, #28
   1d2de:	f100 80b5 	bmi.w	1d44c <_Unwind_VRS_Pop+0x1f0>
   1d2e2:	ae22      	add	r6, sp, #136	; 0x88
   1d2e4:	4630      	mov	r0, r6
   1d2e6:	f000 f923 	bl	1d530 <__gnu_Unwind_Save_WMMXD>
   1d2ea:	00ed      	lsls	r5, r5, #3
   1d2ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d2ee:	b14f      	cbz	r7, 1d304 <_Unwind_VRS_Pop+0xa8>
   1d2f0:	3d04      	subs	r5, #4
   1d2f2:	1971      	adds	r1, r6, r5
   1d2f4:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1d2f8:	f853 2b04 	ldr.w	r2, [r3], #4
   1d2fc:	f841 2f04 	str.w	r2, [r1, #4]!
   1d300:	4283      	cmp	r3, r0
   1d302:	d1f9      	bne.n	1d2f8 <_Unwind_VRS_Pop+0x9c>
   1d304:	4630      	mov	r0, r6
   1d306:	63a3      	str	r3, [r4, #56]	; 0x38
   1d308:	f000 f8f0 	bl	1d4ec <__gnu_Unwind_Restore_WMMXD>
   1d30c:	2000      	movs	r0, #0
   1d30e:	e7b9      	b.n	1d284 <_Unwind_VRS_Pop+0x28>
   1d310:	2b00      	cmp	r3, #0
   1d312:	d1b6      	bne.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d314:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1d316:	b297      	uxth	r7, r2
   1d318:	1d20      	adds	r0, r4, #4
   1d31a:	2601      	movs	r6, #1
   1d31c:	fa06 f103 	lsl.w	r1, r6, r3
   1d320:	4239      	tst	r1, r7
   1d322:	f103 0301 	add.w	r3, r3, #1
   1d326:	d002      	beq.n	1d32e <_Unwind_VRS_Pop+0xd2>
   1d328:	6829      	ldr	r1, [r5, #0]
   1d32a:	6001      	str	r1, [r0, #0]
   1d32c:	3504      	adds	r5, #4
   1d32e:	2b10      	cmp	r3, #16
   1d330:	f100 0004 	add.w	r0, r0, #4
   1d334:	d1f2      	bne.n	1d31c <_Unwind_VRS_Pop+0xc0>
   1d336:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1d33a:	d13b      	bne.n	1d3b4 <_Unwind_VRS_Pop+0x158>
   1d33c:	63a5      	str	r5, [r4, #56]	; 0x38
   1d33e:	e7a1      	b.n	1d284 <_Unwind_VRS_Pop+0x28>
   1d340:	2b05      	cmp	r3, #5
   1d342:	d19e      	bne.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d344:	1977      	adds	r7, r6, r5
   1d346:	2f20      	cmp	r7, #32
   1d348:	d89b      	bhi.n	1d282 <_Unwind_VRS_Pop+0x26>
   1d34a:	2e0f      	cmp	r6, #15
   1d34c:	d966      	bls.n	1d41c <_Unwind_VRS_Pop+0x1c0>
   1d34e:	462f      	mov	r7, r5
   1d350:	2d00      	cmp	r5, #0
   1d352:	d13a      	bne.n	1d3ca <_Unwind_VRS_Pop+0x16e>
   1d354:	462a      	mov	r2, r5
   1d356:	2700      	movs	r7, #0
   1d358:	2a00      	cmp	r2, #0
   1d35a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d35c:	dd72      	ble.n	1d444 <_Unwind_VRS_Pop+0x1e8>
   1d35e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1d362:	4601      	mov	r1, r0
   1d364:	a844      	add	r0, sp, #272	; 0x110
   1d366:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d36a:	388c      	subs	r0, #140	; 0x8c
   1d36c:	f851 5b04 	ldr.w	r5, [r1], #4
   1d370:	f840 5f04 	str.w	r5, [r0, #4]!
   1d374:	4291      	cmp	r1, r2
   1d376:	d1f9      	bne.n	1d36c <_Unwind_VRS_Pop+0x110>
   1d378:	4608      	mov	r0, r1
   1d37a:	b197      	cbz	r7, 1d3a2 <_Unwind_VRS_Pop+0x146>
   1d37c:	2e10      	cmp	r6, #16
   1d37e:	4632      	mov	r2, r6
   1d380:	a944      	add	r1, sp, #272	; 0x110
   1d382:	bf38      	it	cc
   1d384:	2210      	movcc	r2, #16
   1d386:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1d38a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1d38e:	0079      	lsls	r1, r7, #1
   1d390:	3a04      	subs	r2, #4
   1d392:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d396:	f850 5b04 	ldr.w	r5, [r0], #4
   1d39a:	f842 5f04 	str.w	r5, [r2, #4]!
   1d39e:	4288      	cmp	r0, r1
   1d3a0:	d1f9      	bne.n	1d396 <_Unwind_VRS_Pop+0x13a>
   1d3a2:	2b01      	cmp	r3, #1
   1d3a4:	d048      	beq.n	1d438 <_Unwind_VRS_Pop+0x1dc>
   1d3a6:	2e0f      	cmp	r6, #15
   1d3a8:	63a1      	str	r1, [r4, #56]	; 0x38
   1d3aa:	d933      	bls.n	1d414 <_Unwind_VRS_Pop+0x1b8>
   1d3ac:	b117      	cbz	r7, 1d3b4 <_Unwind_VRS_Pop+0x158>
   1d3ae:	a802      	add	r0, sp, #8
   1d3b0:	f000 f894 	bl	1d4dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d3b4:	2000      	movs	r0, #0
   1d3b6:	e765      	b.n	1d284 <_Unwind_VRS_Pop+0x28>
   1d3b8:	2e0f      	cmp	r6, #15
   1d3ba:	f63f af62 	bhi.w	1d282 <_Unwind_VRS_Pop+0x26>
   1d3be:	2700      	movs	r7, #0
   1d3c0:	6822      	ldr	r2, [r4, #0]
   1d3c2:	07d1      	lsls	r1, r2, #31
   1d3c4:	d417      	bmi.n	1d3f6 <_Unwind_VRS_Pop+0x19a>
   1d3c6:	2f00      	cmp	r7, #0
   1d3c8:	d060      	beq.n	1d48c <_Unwind_VRS_Pop+0x230>
   1d3ca:	6822      	ldr	r2, [r4, #0]
   1d3cc:	0751      	lsls	r1, r2, #29
   1d3ce:	d445      	bmi.n	1d45c <_Unwind_VRS_Pop+0x200>
   1d3d0:	2b01      	cmp	r3, #1
   1d3d2:	d04d      	beq.n	1d470 <_Unwind_VRS_Pop+0x214>
   1d3d4:	2e0f      	cmp	r6, #15
   1d3d6:	d806      	bhi.n	1d3e6 <_Unwind_VRS_Pop+0x18a>
   1d3d8:	a822      	add	r0, sp, #136	; 0x88
   1d3da:	9301      	str	r3, [sp, #4]
   1d3dc:	f000 f87a 	bl	1d4d4 <__gnu_Unwind_Save_VFP_D>
   1d3e0:	9b01      	ldr	r3, [sp, #4]
   1d3e2:	2f00      	cmp	r7, #0
   1d3e4:	d0b6      	beq.n	1d354 <_Unwind_VRS_Pop+0xf8>
   1d3e6:	a802      	add	r0, sp, #8
   1d3e8:	9301      	str	r3, [sp, #4]
   1d3ea:	f000 f87b 	bl	1d4e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d3ee:	9b01      	ldr	r3, [sp, #4]
   1d3f0:	f1c6 0210 	rsb	r2, r6, #16
   1d3f4:	e7b0      	b.n	1d358 <_Unwind_VRS_Pop+0xfc>
   1d3f6:	f022 0101 	bic.w	r1, r2, #1
   1d3fa:	2b05      	cmp	r3, #5
   1d3fc:	6021      	str	r1, [r4, #0]
   1d3fe:	9301      	str	r3, [sp, #4]
   1d400:	4620      	mov	r0, r4
   1d402:	d03b      	beq.n	1d47c <_Unwind_VRS_Pop+0x220>
   1d404:	f022 0203 	bic.w	r2, r2, #3
   1d408:	f840 2b48 	str.w	r2, [r0], #72
   1d40c:	f000 f85a 	bl	1d4c4 <__gnu_Unwind_Save_VFP>
   1d410:	9b01      	ldr	r3, [sp, #4]
   1d412:	e7d8      	b.n	1d3c6 <_Unwind_VRS_Pop+0x16a>
   1d414:	a822      	add	r0, sp, #136	; 0x88
   1d416:	f000 f859 	bl	1d4cc <__gnu_Unwind_Restore_VFP_D>
   1d41a:	e7c7      	b.n	1d3ac <_Unwind_VRS_Pop+0x150>
   1d41c:	2f10      	cmp	r7, #16
   1d41e:	d9ce      	bls.n	1d3be <_Unwind_VRS_Pop+0x162>
   1d420:	3f10      	subs	r7, #16
   1d422:	e7cd      	b.n	1d3c0 <_Unwind_VRS_Pop+0x164>
   1d424:	f023 0310 	bic.w	r3, r3, #16
   1d428:	6023      	str	r3, [r4, #0]
   1d42a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d42e:	9201      	str	r2, [sp, #4]
   1d430:	f000 f8aa 	bl	1d588 <__gnu_Unwind_Save_WMMXC>
   1d434:	9a01      	ldr	r2, [sp, #4]
   1d436:	e72f      	b.n	1d298 <_Unwind_VRS_Pop+0x3c>
   1d438:	3104      	adds	r1, #4
   1d43a:	63a1      	str	r1, [r4, #56]	; 0x38
   1d43c:	a822      	add	r0, sp, #136	; 0x88
   1d43e:	f000 f83d 	bl	1d4bc <__gnu_Unwind_Restore_VFP>
   1d442:	e7b7      	b.n	1d3b4 <_Unwind_VRS_Pop+0x158>
   1d444:	2f00      	cmp	r7, #0
   1d446:	d199      	bne.n	1d37c <_Unwind_VRS_Pop+0x120>
   1d448:	4601      	mov	r1, r0
   1d44a:	e7aa      	b.n	1d3a2 <_Unwind_VRS_Pop+0x146>
   1d44c:	f023 0308 	bic.w	r3, r3, #8
   1d450:	6023      	str	r3, [r4, #0]
   1d452:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d456:	f000 f86b 	bl	1d530 <__gnu_Unwind_Save_WMMXD>
   1d45a:	e742      	b.n	1d2e2 <_Unwind_VRS_Pop+0x86>
   1d45c:	4620      	mov	r0, r4
   1d45e:	f022 0204 	bic.w	r2, r2, #4
   1d462:	f840 2bd0 	str.w	r2, [r0], #208
   1d466:	9301      	str	r3, [sp, #4]
   1d468:	f000 f83c 	bl	1d4e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d46c:	9b01      	ldr	r3, [sp, #4]
   1d46e:	e7af      	b.n	1d3d0 <_Unwind_VRS_Pop+0x174>
   1d470:	a822      	add	r0, sp, #136	; 0x88
   1d472:	9301      	str	r3, [sp, #4]
   1d474:	f000 f826 	bl	1d4c4 <__gnu_Unwind_Save_VFP>
   1d478:	9b01      	ldr	r3, [sp, #4]
   1d47a:	e7b9      	b.n	1d3f0 <_Unwind_VRS_Pop+0x194>
   1d47c:	f041 0102 	orr.w	r1, r1, #2
   1d480:	f840 1b48 	str.w	r1, [r0], #72
   1d484:	f000 f826 	bl	1d4d4 <__gnu_Unwind_Save_VFP_D>
   1d488:	9b01      	ldr	r3, [sp, #4]
   1d48a:	e79c      	b.n	1d3c6 <_Unwind_VRS_Pop+0x16a>
   1d48c:	2b01      	cmp	r3, #1
   1d48e:	d003      	beq.n	1d498 <_Unwind_VRS_Pop+0x23c>
   1d490:	2e0f      	cmp	r6, #15
   1d492:	f63f af5f 	bhi.w	1d354 <_Unwind_VRS_Pop+0xf8>
   1d496:	e79f      	b.n	1d3d8 <_Unwind_VRS_Pop+0x17c>
   1d498:	a822      	add	r0, sp, #136	; 0x88
   1d49a:	9301      	str	r3, [sp, #4]
   1d49c:	f000 f812 	bl	1d4c4 <__gnu_Unwind_Save_VFP>
   1d4a0:	9b01      	ldr	r3, [sp, #4]
   1d4a2:	e757      	b.n	1d354 <_Unwind_VRS_Pop+0xf8>

0001d4a4 <__restore_core_regs>:
   1d4a4:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d4a8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d4ac:	469c      	mov	ip, r3
   1d4ae:	46a6      	mov	lr, r4
   1d4b0:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d4b4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d4b8:	46e5      	mov	sp, ip
   1d4ba:	bd00      	pop	{pc}

0001d4bc <__gnu_Unwind_Restore_VFP>:
   1d4bc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d4c0:	4770      	bx	lr
   1d4c2:	bf00      	nop

0001d4c4 <__gnu_Unwind_Save_VFP>:
   1d4c4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d4c8:	4770      	bx	lr
   1d4ca:	bf00      	nop

0001d4cc <__gnu_Unwind_Restore_VFP_D>:
   1d4cc:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d4d0:	4770      	bx	lr
   1d4d2:	bf00      	nop

0001d4d4 <__gnu_Unwind_Save_VFP_D>:
   1d4d4:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d4d8:	4770      	bx	lr
   1d4da:	bf00      	nop

0001d4dc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d4dc:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d4e0:	4770      	bx	lr
   1d4e2:	bf00      	nop

0001d4e4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d4e4:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d4e8:	4770      	bx	lr
   1d4ea:	bf00      	nop

0001d4ec <__gnu_Unwind_Restore_WMMXD>:
   1d4ec:	ecf0 0102 	ldfe	f0, [r0], #8
   1d4f0:	ecf0 1102 	ldfe	f1, [r0], #8
   1d4f4:	ecf0 2102 	ldfe	f2, [r0], #8
   1d4f8:	ecf0 3102 	ldfe	f3, [r0], #8
   1d4fc:	ecf0 4102 	ldfe	f4, [r0], #8
   1d500:	ecf0 5102 	ldfe	f5, [r0], #8
   1d504:	ecf0 6102 	ldfe	f6, [r0], #8
   1d508:	ecf0 7102 	ldfe	f7, [r0], #8
   1d50c:	ecf0 8102 	ldfp	f0, [r0], #8
   1d510:	ecf0 9102 	ldfp	f1, [r0], #8
   1d514:	ecf0 a102 	ldfp	f2, [r0], #8
   1d518:	ecf0 b102 	ldfp	f3, [r0], #8
   1d51c:	ecf0 c102 	ldfp	f4, [r0], #8
   1d520:	ecf0 d102 	ldfp	f5, [r0], #8
   1d524:	ecf0 e102 	ldfp	f6, [r0], #8
   1d528:	ecf0 f102 	ldfp	f7, [r0], #8
   1d52c:	4770      	bx	lr
   1d52e:	bf00      	nop

0001d530 <__gnu_Unwind_Save_WMMXD>:
   1d530:	ece0 0102 	stfe	f0, [r0], #8
   1d534:	ece0 1102 	stfe	f1, [r0], #8
   1d538:	ece0 2102 	stfe	f2, [r0], #8
   1d53c:	ece0 3102 	stfe	f3, [r0], #8
   1d540:	ece0 4102 	stfe	f4, [r0], #8
   1d544:	ece0 5102 	stfe	f5, [r0], #8
   1d548:	ece0 6102 	stfe	f6, [r0], #8
   1d54c:	ece0 7102 	stfe	f7, [r0], #8
   1d550:	ece0 8102 	stfp	f0, [r0], #8
   1d554:	ece0 9102 	stfp	f1, [r0], #8
   1d558:	ece0 a102 	stfp	f2, [r0], #8
   1d55c:	ece0 b102 	stfp	f3, [r0], #8
   1d560:	ece0 c102 	stfp	f4, [r0], #8
   1d564:	ece0 d102 	stfp	f5, [r0], #8
   1d568:	ece0 e102 	stfp	f6, [r0], #8
   1d56c:	ece0 f102 	stfp	f7, [r0], #8
   1d570:	4770      	bx	lr
   1d572:	bf00      	nop

0001d574 <__gnu_Unwind_Restore_WMMXC>:
   1d574:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d578:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d57c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d580:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d584:	4770      	bx	lr
   1d586:	bf00      	nop

0001d588 <__gnu_Unwind_Save_WMMXC>:
   1d588:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d58c:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d590:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d594:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d598:	4770      	bx	lr
   1d59a:	bf00      	nop

0001d59c <_Unwind_RaiseException>:
   1d59c:	46ec      	mov	ip, sp
   1d59e:	b500      	push	{lr}
   1d5a0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d5a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d5a8:	f04f 0300 	mov.w	r3, #0
   1d5ac:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d5b0:	a901      	add	r1, sp, #4
   1d5b2:	f7ff fbf3 	bl	1cd9c <__gnu_Unwind_RaiseException>
   1d5b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d5ba:	b012      	add	sp, #72	; 0x48
   1d5bc:	4770      	bx	lr
   1d5be:	bf00      	nop

0001d5c0 <_Unwind_Resume>:
   1d5c0:	46ec      	mov	ip, sp
   1d5c2:	b500      	push	{lr}
   1d5c4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d5c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d5cc:	f04f 0300 	mov.w	r3, #0
   1d5d0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d5d4:	a901      	add	r1, sp, #4
   1d5d6:	f7ff fc1b 	bl	1ce10 <__gnu_Unwind_Resume>
   1d5da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d5de:	b012      	add	sp, #72	; 0x48
   1d5e0:	4770      	bx	lr
   1d5e2:	bf00      	nop

0001d5e4 <_Unwind_Resume_or_Rethrow>:
   1d5e4:	46ec      	mov	ip, sp
   1d5e6:	b500      	push	{lr}
   1d5e8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d5ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d5f0:	f04f 0300 	mov.w	r3, #0
   1d5f4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d5f8:	a901      	add	r1, sp, #4
   1d5fa:	f7ff fc2b 	bl	1ce54 <__gnu_Unwind_Resume_or_Rethrow>
   1d5fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d602:	b012      	add	sp, #72	; 0x48
   1d604:	4770      	bx	lr
   1d606:	bf00      	nop

0001d608 <_Unwind_ForcedUnwind>:
   1d608:	46ec      	mov	ip, sp
   1d60a:	b500      	push	{lr}
   1d60c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d610:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d614:	f04f 0300 	mov.w	r3, #0
   1d618:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d61c:	ab01      	add	r3, sp, #4
   1d61e:	f7ff fbed 	bl	1cdfc <__gnu_Unwind_ForcedUnwind>
   1d622:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d626:	b012      	add	sp, #72	; 0x48
   1d628:	4770      	bx	lr
   1d62a:	bf00      	nop

0001d62c <_Unwind_Backtrace>:
   1d62c:	46ec      	mov	ip, sp
   1d62e:	b500      	push	{lr}
   1d630:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d634:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d638:	f04f 0300 	mov.w	r3, #0
   1d63c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d640:	aa01      	add	r2, sp, #4
   1d642:	f7ff fc65 	bl	1cf10 <__gnu_Unwind_Backtrace>
   1d646:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d64a:	b012      	add	sp, #72	; 0x48
   1d64c:	4770      	bx	lr
   1d64e:	bf00      	nop

0001d650 <next_unwind_byte>:
   1d650:	7a02      	ldrb	r2, [r0, #8]
   1d652:	b91a      	cbnz	r2, 1d65c <next_unwind_byte+0xc>
   1d654:	7a43      	ldrb	r3, [r0, #9]
   1d656:	b943      	cbnz	r3, 1d66a <next_unwind_byte+0x1a>
   1d658:	20b0      	movs	r0, #176	; 0xb0
   1d65a:	4770      	bx	lr
   1d65c:	6803      	ldr	r3, [r0, #0]
   1d65e:	3a01      	subs	r2, #1
   1d660:	7202      	strb	r2, [r0, #8]
   1d662:	021a      	lsls	r2, r3, #8
   1d664:	6002      	str	r2, [r0, #0]
   1d666:	0e18      	lsrs	r0, r3, #24
   1d668:	4770      	bx	lr
   1d66a:	6842      	ldr	r2, [r0, #4]
   1d66c:	3b01      	subs	r3, #1
   1d66e:	b410      	push	{r4}
   1d670:	7243      	strb	r3, [r0, #9]
   1d672:	6813      	ldr	r3, [r2, #0]
   1d674:	2103      	movs	r1, #3
   1d676:	1d14      	adds	r4, r2, #4
   1d678:	7201      	strb	r1, [r0, #8]
   1d67a:	021a      	lsls	r2, r3, #8
   1d67c:	6044      	str	r4, [r0, #4]
   1d67e:	6002      	str	r2, [r0, #0]
   1d680:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d684:	0e18      	lsrs	r0, r3, #24
   1d686:	4770      	bx	lr

0001d688 <_Unwind_GetGR.constprop.0>:
   1d688:	b500      	push	{lr}
   1d68a:	b085      	sub	sp, #20
   1d68c:	aa03      	add	r2, sp, #12
   1d68e:	2300      	movs	r3, #0
   1d690:	9200      	str	r2, [sp, #0]
   1d692:	4619      	mov	r1, r3
   1d694:	220c      	movs	r2, #12
   1d696:	f7ff fbed 	bl	1ce74 <_Unwind_VRS_Get>
   1d69a:	9803      	ldr	r0, [sp, #12]
   1d69c:	b005      	add	sp, #20
   1d69e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d6a2:	bf00      	nop

0001d6a4 <unwind_UCB_from_context>:
   1d6a4:	e7f0      	b.n	1d688 <_Unwind_GetGR.constprop.0>
   1d6a6:	bf00      	nop

0001d6a8 <__gnu_unwind_execute>:
   1d6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6ac:	4606      	mov	r6, r0
   1d6ae:	b085      	sub	sp, #20
   1d6b0:	460f      	mov	r7, r1
   1d6b2:	f04f 0800 	mov.w	r8, #0
   1d6b6:	4638      	mov	r0, r7
   1d6b8:	f7ff ffca 	bl	1d650 <next_unwind_byte>
   1d6bc:	28b0      	cmp	r0, #176	; 0xb0
   1d6be:	4604      	mov	r4, r0
   1d6c0:	d023      	beq.n	1d70a <__gnu_unwind_execute+0x62>
   1d6c2:	0605      	lsls	r5, r0, #24
   1d6c4:	d427      	bmi.n	1d716 <__gnu_unwind_execute+0x6e>
   1d6c6:	2300      	movs	r3, #0
   1d6c8:	f10d 090c 	add.w	r9, sp, #12
   1d6cc:	4619      	mov	r1, r3
   1d6ce:	0085      	lsls	r5, r0, #2
   1d6d0:	220d      	movs	r2, #13
   1d6d2:	f8cd 9000 	str.w	r9, [sp]
   1d6d6:	4630      	mov	r0, r6
   1d6d8:	f7ff fbcc 	bl	1ce74 <_Unwind_VRS_Get>
   1d6dc:	b2ed      	uxtb	r5, r5
   1d6de:	9b03      	ldr	r3, [sp, #12]
   1d6e0:	f8cd 9000 	str.w	r9, [sp]
   1d6e4:	0660      	lsls	r0, r4, #25
   1d6e6:	f105 0504 	add.w	r5, r5, #4
   1d6ea:	bf4c      	ite	mi
   1d6ec:	1b5d      	submi	r5, r3, r5
   1d6ee:	18ed      	addpl	r5, r5, r3
   1d6f0:	2300      	movs	r3, #0
   1d6f2:	4619      	mov	r1, r3
   1d6f4:	220d      	movs	r2, #13
   1d6f6:	4630      	mov	r0, r6
   1d6f8:	9503      	str	r5, [sp, #12]
   1d6fa:	f7ff fbe1 	bl	1cec0 <_Unwind_VRS_Set>
   1d6fe:	4638      	mov	r0, r7
   1d700:	f7ff ffa6 	bl	1d650 <next_unwind_byte>
   1d704:	28b0      	cmp	r0, #176	; 0xb0
   1d706:	4604      	mov	r4, r0
   1d708:	d1db      	bne.n	1d6c2 <__gnu_unwind_execute+0x1a>
   1d70a:	f1b8 0f00 	cmp.w	r8, #0
   1d70e:	f000 8095 	beq.w	1d83c <__gnu_unwind_execute+0x194>
   1d712:	2000      	movs	r0, #0
   1d714:	e01c      	b.n	1d750 <__gnu_unwind_execute+0xa8>
   1d716:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d71a:	2b80      	cmp	r3, #128	; 0x80
   1d71c:	d05d      	beq.n	1d7da <__gnu_unwind_execute+0x132>
   1d71e:	2b90      	cmp	r3, #144	; 0x90
   1d720:	d019      	beq.n	1d756 <__gnu_unwind_execute+0xae>
   1d722:	2ba0      	cmp	r3, #160	; 0xa0
   1d724:	d02c      	beq.n	1d780 <__gnu_unwind_execute+0xd8>
   1d726:	2bb0      	cmp	r3, #176	; 0xb0
   1d728:	d03f      	beq.n	1d7aa <__gnu_unwind_execute+0x102>
   1d72a:	2bc0      	cmp	r3, #192	; 0xc0
   1d72c:	d06c      	beq.n	1d808 <__gnu_unwind_execute+0x160>
   1d72e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d732:	2bd0      	cmp	r3, #208	; 0xd0
   1d734:	d10b      	bne.n	1d74e <__gnu_unwind_execute+0xa6>
   1d736:	f000 0207 	and.w	r2, r0, #7
   1d73a:	3201      	adds	r2, #1
   1d73c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d740:	2305      	movs	r3, #5
   1d742:	2101      	movs	r1, #1
   1d744:	4630      	mov	r0, r6
   1d746:	f7ff fd89 	bl	1d25c <_Unwind_VRS_Pop>
   1d74a:	2800      	cmp	r0, #0
   1d74c:	d0b3      	beq.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d74e:	2009      	movs	r0, #9
   1d750:	b005      	add	sp, #20
   1d752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d756:	f000 030d 	and.w	r3, r0, #13
   1d75a:	2b0d      	cmp	r3, #13
   1d75c:	d0f7      	beq.n	1d74e <__gnu_unwind_execute+0xa6>
   1d75e:	ad03      	add	r5, sp, #12
   1d760:	2300      	movs	r3, #0
   1d762:	f000 020f 	and.w	r2, r0, #15
   1d766:	4619      	mov	r1, r3
   1d768:	9500      	str	r5, [sp, #0]
   1d76a:	4630      	mov	r0, r6
   1d76c:	f7ff fb82 	bl	1ce74 <_Unwind_VRS_Get>
   1d770:	2300      	movs	r3, #0
   1d772:	9500      	str	r5, [sp, #0]
   1d774:	4619      	mov	r1, r3
   1d776:	220d      	movs	r2, #13
   1d778:	4630      	mov	r0, r6
   1d77a:	f7ff fba1 	bl	1cec0 <_Unwind_VRS_Set>
   1d77e:	e79a      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d780:	43c2      	mvns	r2, r0
   1d782:	f002 0307 	and.w	r3, r2, #7
   1d786:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d78a:	411a      	asrs	r2, r3
   1d78c:	0701      	lsls	r1, r0, #28
   1d78e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d792:	f04f 0300 	mov.w	r3, #0
   1d796:	bf48      	it	mi
   1d798:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d79c:	4619      	mov	r1, r3
   1d79e:	4630      	mov	r0, r6
   1d7a0:	f7ff fd5c 	bl	1d25c <_Unwind_VRS_Pop>
   1d7a4:	2800      	cmp	r0, #0
   1d7a6:	d1d2      	bne.n	1d74e <__gnu_unwind_execute+0xa6>
   1d7a8:	e785      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d7aa:	28b1      	cmp	r0, #177	; 0xb1
   1d7ac:	d057      	beq.n	1d85e <__gnu_unwind_execute+0x1b6>
   1d7ae:	28b2      	cmp	r0, #178	; 0xb2
   1d7b0:	d068      	beq.n	1d884 <__gnu_unwind_execute+0x1dc>
   1d7b2:	28b3      	cmp	r0, #179	; 0xb3
   1d7b4:	f000 8095 	beq.w	1d8e2 <__gnu_unwind_execute+0x23a>
   1d7b8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d7bc:	2bb4      	cmp	r3, #180	; 0xb4
   1d7be:	d0c6      	beq.n	1d74e <__gnu_unwind_execute+0xa6>
   1d7c0:	f000 0207 	and.w	r2, r0, #7
   1d7c4:	3201      	adds	r2, #1
   1d7c6:	2301      	movs	r3, #1
   1d7c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d7cc:	4619      	mov	r1, r3
   1d7ce:	4630      	mov	r0, r6
   1d7d0:	f7ff fd44 	bl	1d25c <_Unwind_VRS_Pop>
   1d7d4:	2800      	cmp	r0, #0
   1d7d6:	d1ba      	bne.n	1d74e <__gnu_unwind_execute+0xa6>
   1d7d8:	e76d      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d7da:	4638      	mov	r0, r7
   1d7dc:	f7ff ff38 	bl	1d650 <next_unwind_byte>
   1d7e0:	0224      	lsls	r4, r4, #8
   1d7e2:	4304      	orrs	r4, r0
   1d7e4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d7e8:	d0b1      	beq.n	1d74e <__gnu_unwind_execute+0xa6>
   1d7ea:	0124      	lsls	r4, r4, #4
   1d7ec:	2300      	movs	r3, #0
   1d7ee:	b2a2      	uxth	r2, r4
   1d7f0:	4619      	mov	r1, r3
   1d7f2:	4630      	mov	r0, r6
   1d7f4:	f7ff fd32 	bl	1d25c <_Unwind_VRS_Pop>
   1d7f8:	2800      	cmp	r0, #0
   1d7fa:	d1a8      	bne.n	1d74e <__gnu_unwind_execute+0xa6>
   1d7fc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d800:	bf18      	it	ne
   1d802:	f04f 0801 	movne.w	r8, #1
   1d806:	e756      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d808:	28c6      	cmp	r0, #198	; 0xc6
   1d80a:	d07d      	beq.n	1d908 <__gnu_unwind_execute+0x260>
   1d80c:	28c7      	cmp	r0, #199	; 0xc7
   1d80e:	f000 8086 	beq.w	1d91e <__gnu_unwind_execute+0x276>
   1d812:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d816:	2bc0      	cmp	r3, #192	; 0xc0
   1d818:	f000 8094 	beq.w	1d944 <__gnu_unwind_execute+0x29c>
   1d81c:	28c8      	cmp	r0, #200	; 0xc8
   1d81e:	f000 809f 	beq.w	1d960 <__gnu_unwind_execute+0x2b8>
   1d822:	28c9      	cmp	r0, #201	; 0xc9
   1d824:	d193      	bne.n	1d74e <__gnu_unwind_execute+0xa6>
   1d826:	4638      	mov	r0, r7
   1d828:	f7ff ff12 	bl	1d650 <next_unwind_byte>
   1d82c:	0302      	lsls	r2, r0, #12
   1d82e:	f000 000f 	and.w	r0, r0, #15
   1d832:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d836:	3001      	adds	r0, #1
   1d838:	4302      	orrs	r2, r0
   1d83a:	e781      	b.n	1d740 <__gnu_unwind_execute+0x98>
   1d83c:	ac03      	add	r4, sp, #12
   1d83e:	4643      	mov	r3, r8
   1d840:	220e      	movs	r2, #14
   1d842:	4641      	mov	r1, r8
   1d844:	9400      	str	r4, [sp, #0]
   1d846:	4630      	mov	r0, r6
   1d848:	f7ff fb14 	bl	1ce74 <_Unwind_VRS_Get>
   1d84c:	9400      	str	r4, [sp, #0]
   1d84e:	4630      	mov	r0, r6
   1d850:	4643      	mov	r3, r8
   1d852:	220f      	movs	r2, #15
   1d854:	4641      	mov	r1, r8
   1d856:	f7ff fb33 	bl	1cec0 <_Unwind_VRS_Set>
   1d85a:	4640      	mov	r0, r8
   1d85c:	e778      	b.n	1d750 <__gnu_unwind_execute+0xa8>
   1d85e:	4638      	mov	r0, r7
   1d860:	f7ff fef6 	bl	1d650 <next_unwind_byte>
   1d864:	2800      	cmp	r0, #0
   1d866:	f43f af72 	beq.w	1d74e <__gnu_unwind_execute+0xa6>
   1d86a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d86e:	f47f af6e 	bne.w	1d74e <__gnu_unwind_execute+0xa6>
   1d872:	4602      	mov	r2, r0
   1d874:	4619      	mov	r1, r3
   1d876:	4630      	mov	r0, r6
   1d878:	f7ff fcf0 	bl	1d25c <_Unwind_VRS_Pop>
   1d87c:	2800      	cmp	r0, #0
   1d87e:	f47f af66 	bne.w	1d74e <__gnu_unwind_execute+0xa6>
   1d882:	e718      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d884:	2300      	movs	r3, #0
   1d886:	f10d 090c 	add.w	r9, sp, #12
   1d88a:	220d      	movs	r2, #13
   1d88c:	4619      	mov	r1, r3
   1d88e:	f8cd 9000 	str.w	r9, [sp]
   1d892:	4630      	mov	r0, r6
   1d894:	f7ff faee 	bl	1ce74 <_Unwind_VRS_Get>
   1d898:	4638      	mov	r0, r7
   1d89a:	f7ff fed9 	bl	1d650 <next_unwind_byte>
   1d89e:	0602      	lsls	r2, r0, #24
   1d8a0:	f04f 0402 	mov.w	r4, #2
   1d8a4:	d50c      	bpl.n	1d8c0 <__gnu_unwind_execute+0x218>
   1d8a6:	9b03      	ldr	r3, [sp, #12]
   1d8a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d8ac:	40a0      	lsls	r0, r4
   1d8ae:	4403      	add	r3, r0
   1d8b0:	4638      	mov	r0, r7
   1d8b2:	9303      	str	r3, [sp, #12]
   1d8b4:	f7ff fecc 	bl	1d650 <next_unwind_byte>
   1d8b8:	0603      	lsls	r3, r0, #24
   1d8ba:	f104 0407 	add.w	r4, r4, #7
   1d8be:	d4f2      	bmi.n	1d8a6 <__gnu_unwind_execute+0x1fe>
   1d8c0:	9b03      	ldr	r3, [sp, #12]
   1d8c2:	f8cd 9000 	str.w	r9, [sp]
   1d8c6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d8ca:	40a2      	lsls	r2, r4
   1d8cc:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d8d0:	2300      	movs	r3, #0
   1d8d2:	4414      	add	r4, r2
   1d8d4:	4619      	mov	r1, r3
   1d8d6:	220d      	movs	r2, #13
   1d8d8:	4630      	mov	r0, r6
   1d8da:	9403      	str	r4, [sp, #12]
   1d8dc:	f7ff faf0 	bl	1cec0 <_Unwind_VRS_Set>
   1d8e0:	e6e9      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d8e2:	4638      	mov	r0, r7
   1d8e4:	f7ff feb4 	bl	1d650 <next_unwind_byte>
   1d8e8:	0301      	lsls	r1, r0, #12
   1d8ea:	f000 000f 	and.w	r0, r0, #15
   1d8ee:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d8f2:	1c42      	adds	r2, r0, #1
   1d8f4:	2301      	movs	r3, #1
   1d8f6:	430a      	orrs	r2, r1
   1d8f8:	4630      	mov	r0, r6
   1d8fa:	4619      	mov	r1, r3
   1d8fc:	f7ff fcae 	bl	1d25c <_Unwind_VRS_Pop>
   1d900:	2800      	cmp	r0, #0
   1d902:	f47f af24 	bne.w	1d74e <__gnu_unwind_execute+0xa6>
   1d906:	e6d6      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d908:	4638      	mov	r0, r7
   1d90a:	f7ff fea1 	bl	1d650 <next_unwind_byte>
   1d90e:	0301      	lsls	r1, r0, #12
   1d910:	f000 000f 	and.w	r0, r0, #15
   1d914:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d918:	1c42      	adds	r2, r0, #1
   1d91a:	2303      	movs	r3, #3
   1d91c:	e7eb      	b.n	1d8f6 <__gnu_unwind_execute+0x24e>
   1d91e:	4638      	mov	r0, r7
   1d920:	f7ff fe96 	bl	1d650 <next_unwind_byte>
   1d924:	2800      	cmp	r0, #0
   1d926:	f43f af12 	beq.w	1d74e <__gnu_unwind_execute+0xa6>
   1d92a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d92e:	f47f af0e 	bne.w	1d74e <__gnu_unwind_execute+0xa6>
   1d932:	4602      	mov	r2, r0
   1d934:	2104      	movs	r1, #4
   1d936:	4630      	mov	r0, r6
   1d938:	f7ff fc90 	bl	1d25c <_Unwind_VRS_Pop>
   1d93c:	2800      	cmp	r0, #0
   1d93e:	f47f af06 	bne.w	1d74e <__gnu_unwind_execute+0xa6>
   1d942:	e6b8      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d944:	f000 020f 	and.w	r2, r0, #15
   1d948:	3201      	adds	r2, #1
   1d94a:	2303      	movs	r3, #3
   1d94c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d950:	4619      	mov	r1, r3
   1d952:	4630      	mov	r0, r6
   1d954:	f7ff fc82 	bl	1d25c <_Unwind_VRS_Pop>
   1d958:	2800      	cmp	r0, #0
   1d95a:	f47f aef8 	bne.w	1d74e <__gnu_unwind_execute+0xa6>
   1d95e:	e6aa      	b.n	1d6b6 <__gnu_unwind_execute+0xe>
   1d960:	4638      	mov	r0, r7
   1d962:	f7ff fe75 	bl	1d650 <next_unwind_byte>
   1d966:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d96a:	f000 030f 	and.w	r3, r0, #15
   1d96e:	3210      	adds	r2, #16
   1d970:	3301      	adds	r3, #1
   1d972:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d976:	e6e3      	b.n	1d740 <__gnu_unwind_execute+0x98>

0001d978 <__gnu_unwind_frame>:
   1d978:	b510      	push	{r4, lr}
   1d97a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d97c:	b084      	sub	sp, #16
   1d97e:	685a      	ldr	r2, [r3, #4]
   1d980:	2003      	movs	r0, #3
   1d982:	f88d 000c 	strb.w	r0, [sp, #12]
   1d986:	79dc      	ldrb	r4, [r3, #7]
   1d988:	f88d 400d 	strb.w	r4, [sp, #13]
   1d98c:	0212      	lsls	r2, r2, #8
   1d98e:	3308      	adds	r3, #8
   1d990:	4608      	mov	r0, r1
   1d992:	a901      	add	r1, sp, #4
   1d994:	9201      	str	r2, [sp, #4]
   1d996:	9302      	str	r3, [sp, #8]
   1d998:	f7ff fe86 	bl	1d6a8 <__gnu_unwind_execute>
   1d99c:	b004      	add	sp, #16
   1d99e:	bd10      	pop	{r4, pc}

0001d9a0 <_Unwind_GetRegionStart>:
   1d9a0:	b508      	push	{r3, lr}
   1d9a2:	f7ff fe7f 	bl	1d6a4 <unwind_UCB_from_context>
   1d9a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d9a8:	bd08      	pop	{r3, pc}
   1d9aa:	bf00      	nop

0001d9ac <_Unwind_GetLanguageSpecificData>:
   1d9ac:	b508      	push	{r3, lr}
   1d9ae:	f7ff fe79 	bl	1d6a4 <unwind_UCB_from_context>
   1d9b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d9b4:	79c3      	ldrb	r3, [r0, #7]
   1d9b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d9ba:	3008      	adds	r0, #8
   1d9bc:	bd08      	pop	{r3, pc}
   1d9be:	bf00      	nop

0001d9c0 <_Unwind_GetTextRelBase>:
   1d9c0:	b508      	push	{r3, lr}
   1d9c2:	f000 f807 	bl	1d9d4 <abort>
   1d9c6:	bf00      	nop

0001d9c8 <_Unwind_GetDataRelBase>:
   1d9c8:	b508      	push	{r3, lr}
   1d9ca:	f7ff fff9 	bl	1d9c0 <_Unwind_GetTextRelBase>
   1d9ce:	bf00      	nop

0001d9d0 <__aeabi_idiv0>:
   1d9d0:	4770      	bx	lr
   1d9d2:	bf00      	nop

0001d9d4 <abort>:
   1d9d4:	b508      	push	{r3, lr}
   1d9d6:	2006      	movs	r0, #6
   1d9d8:	f001 f982 	bl	1ece0 <raise>
   1d9dc:	2001      	movs	r0, #1
   1d9de:	f005 f92f 	bl	22c40 <_exit>
   1d9e2:	bf00      	nop

0001d9e4 <__errno>:
   1d9e4:	4b01      	ldr	r3, [pc, #4]	; (1d9ec <__errno+0x8>)
   1d9e6:	6818      	ldr	r0, [r3, #0]
   1d9e8:	4770      	bx	lr
   1d9ea:	bf00      	nop
   1d9ec:	20000100 	.word	0x20000100

0001d9f0 <fputc>:
   1d9f0:	4b14      	ldr	r3, [pc, #80]	; (1da44 <fputc+0x54>)
   1d9f2:	b570      	push	{r4, r5, r6, lr}
   1d9f4:	681d      	ldr	r5, [r3, #0]
   1d9f6:	4606      	mov	r6, r0
   1d9f8:	460c      	mov	r4, r1
   1d9fa:	b10d      	cbz	r5, 1da00 <fputc+0x10>
   1d9fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d9fe:	b1c3      	cbz	r3, 1da32 <fputc+0x42>
   1da00:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da02:	07d8      	lsls	r0, r3, #31
   1da04:	d402      	bmi.n	1da0c <fputc+0x1c>
   1da06:	89a3      	ldrh	r3, [r4, #12]
   1da08:	0599      	lsls	r1, r3, #22
   1da0a:	d516      	bpl.n	1da3a <fputc+0x4a>
   1da0c:	4628      	mov	r0, r5
   1da0e:	4622      	mov	r2, r4
   1da10:	4631      	mov	r1, r6
   1da12:	f000 ff3d 	bl	1e890 <_putc_r>
   1da16:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da18:	07da      	lsls	r2, r3, #31
   1da1a:	4605      	mov	r5, r0
   1da1c:	d402      	bmi.n	1da24 <fputc+0x34>
   1da1e:	89a3      	ldrh	r3, [r4, #12]
   1da20:	059b      	lsls	r3, r3, #22
   1da22:	d501      	bpl.n	1da28 <fputc+0x38>
   1da24:	4628      	mov	r0, r5
   1da26:	bd70      	pop	{r4, r5, r6, pc}
   1da28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1da2a:	f000 fa7f 	bl	1df2c <__retarget_lock_release_recursive>
   1da2e:	4628      	mov	r0, r5
   1da30:	bd70      	pop	{r4, r5, r6, pc}
   1da32:	4628      	mov	r0, r5
   1da34:	f004 f81e 	bl	21a74 <__sinit>
   1da38:	e7e2      	b.n	1da00 <fputc+0x10>
   1da3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1da3c:	f000 fa74 	bl	1df28 <__retarget_lock_acquire_recursive>
   1da40:	e7e4      	b.n	1da0c <fputc+0x1c>
   1da42:	bf00      	nop
   1da44:	20000100 	.word	0x20000100

0001da48 <_fputs_r>:
   1da48:	b530      	push	{r4, r5, lr}
   1da4a:	b087      	sub	sp, #28
   1da4c:	4605      	mov	r5, r0
   1da4e:	4608      	mov	r0, r1
   1da50:	4614      	mov	r4, r2
   1da52:	9101      	str	r1, [sp, #4]
   1da54:	f001 fb14 	bl	1f080 <strlen>
   1da58:	aa01      	add	r2, sp, #4
   1da5a:	2301      	movs	r3, #1
   1da5c:	9005      	str	r0, [sp, #20]
   1da5e:	9002      	str	r0, [sp, #8]
   1da60:	9203      	str	r2, [sp, #12]
   1da62:	9304      	str	r3, [sp, #16]
   1da64:	b10d      	cbz	r5, 1da6a <_fputs_r+0x22>
   1da66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1da68:	b333      	cbz	r3, 1dab8 <_fputs_r+0x70>
   1da6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da6c:	f013 0f01 	tst.w	r3, #1
   1da70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da74:	b29a      	uxth	r2, r3
   1da76:	d101      	bne.n	1da7c <_fputs_r+0x34>
   1da78:	0590      	lsls	r0, r2, #22
   1da7a:	d521      	bpl.n	1dac0 <_fputs_r+0x78>
   1da7c:	0491      	lsls	r1, r2, #18
   1da7e:	d406      	bmi.n	1da8e <_fputs_r+0x46>
   1da80:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1da82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1da86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1da8a:	81a3      	strh	r3, [r4, #12]
   1da8c:	6662      	str	r2, [r4, #100]	; 0x64
   1da8e:	4628      	mov	r0, r5
   1da90:	aa03      	add	r2, sp, #12
   1da92:	4621      	mov	r1, r4
   1da94:	f000 f824 	bl	1dae0 <__sfvwrite_r>
   1da98:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da9a:	07da      	lsls	r2, r3, #31
   1da9c:	4605      	mov	r5, r0
   1da9e:	d402      	bmi.n	1daa6 <_fputs_r+0x5e>
   1daa0:	89a3      	ldrh	r3, [r4, #12]
   1daa2:	059b      	lsls	r3, r3, #22
   1daa4:	d502      	bpl.n	1daac <_fputs_r+0x64>
   1daa6:	4628      	mov	r0, r5
   1daa8:	b007      	add	sp, #28
   1daaa:	bd30      	pop	{r4, r5, pc}
   1daac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1daae:	f000 fa3d 	bl	1df2c <__retarget_lock_release_recursive>
   1dab2:	4628      	mov	r0, r5
   1dab4:	b007      	add	sp, #28
   1dab6:	bd30      	pop	{r4, r5, pc}
   1dab8:	4628      	mov	r0, r5
   1daba:	f003 ffdb 	bl	21a74 <__sinit>
   1dabe:	e7d4      	b.n	1da6a <_fputs_r+0x22>
   1dac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dac2:	f000 fa31 	bl	1df28 <__retarget_lock_acquire_recursive>
   1dac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1daca:	b29a      	uxth	r2, r3
   1dacc:	e7d6      	b.n	1da7c <_fputs_r+0x34>
   1dace:	bf00      	nop

0001dad0 <fputs>:
   1dad0:	4b02      	ldr	r3, [pc, #8]	; (1dadc <fputs+0xc>)
   1dad2:	460a      	mov	r2, r1
   1dad4:	4601      	mov	r1, r0
   1dad6:	6818      	ldr	r0, [r3, #0]
   1dad8:	f7ff bfb6 	b.w	1da48 <_fputs_r>
   1dadc:	20000100 	.word	0x20000100

0001dae0 <__sfvwrite_r>:
   1dae0:	6893      	ldr	r3, [r2, #8]
   1dae2:	2b00      	cmp	r3, #0
   1dae4:	d073      	beq.n	1dbce <__sfvwrite_r+0xee>
   1dae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daea:	898b      	ldrh	r3, [r1, #12]
   1daec:	b083      	sub	sp, #12
   1daee:	460c      	mov	r4, r1
   1daf0:	0719      	lsls	r1, r3, #28
   1daf2:	9000      	str	r0, [sp, #0]
   1daf4:	4616      	mov	r6, r2
   1daf6:	d526      	bpl.n	1db46 <__sfvwrite_r+0x66>
   1daf8:	6922      	ldr	r2, [r4, #16]
   1dafa:	b322      	cbz	r2, 1db46 <__sfvwrite_r+0x66>
   1dafc:	f013 0002 	ands.w	r0, r3, #2
   1db00:	6835      	ldr	r5, [r6, #0]
   1db02:	d02c      	beq.n	1db5e <__sfvwrite_r+0x7e>
   1db04:	f04f 0900 	mov.w	r9, #0
   1db08:	4fb0      	ldr	r7, [pc, #704]	; (1ddcc <__sfvwrite_r+0x2ec>)
   1db0a:	46c8      	mov	r8, r9
   1db0c:	46b2      	mov	sl, r6
   1db0e:	45b8      	cmp	r8, r7
   1db10:	4643      	mov	r3, r8
   1db12:	464a      	mov	r2, r9
   1db14:	bf28      	it	cs
   1db16:	463b      	movcs	r3, r7
   1db18:	9800      	ldr	r0, [sp, #0]
   1db1a:	f1b8 0f00 	cmp.w	r8, #0
   1db1e:	d050      	beq.n	1dbc2 <__sfvwrite_r+0xe2>
   1db20:	69e1      	ldr	r1, [r4, #28]
   1db22:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1db24:	47b0      	blx	r6
   1db26:	2800      	cmp	r0, #0
   1db28:	dd58      	ble.n	1dbdc <__sfvwrite_r+0xfc>
   1db2a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1db2e:	1a1b      	subs	r3, r3, r0
   1db30:	4481      	add	r9, r0
   1db32:	eba8 0800 	sub.w	r8, r8, r0
   1db36:	f8ca 3008 	str.w	r3, [sl, #8]
   1db3a:	2b00      	cmp	r3, #0
   1db3c:	d1e7      	bne.n	1db0e <__sfvwrite_r+0x2e>
   1db3e:	2000      	movs	r0, #0
   1db40:	b003      	add	sp, #12
   1db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db46:	4621      	mov	r1, r4
   1db48:	9800      	ldr	r0, [sp, #0]
   1db4a:	f002 fe6b 	bl	20824 <__swsetup_r>
   1db4e:	2800      	cmp	r0, #0
   1db50:	f040 8133 	bne.w	1ddba <__sfvwrite_r+0x2da>
   1db54:	89a3      	ldrh	r3, [r4, #12]
   1db56:	6835      	ldr	r5, [r6, #0]
   1db58:	f013 0002 	ands.w	r0, r3, #2
   1db5c:	d1d2      	bne.n	1db04 <__sfvwrite_r+0x24>
   1db5e:	f013 0901 	ands.w	r9, r3, #1
   1db62:	d145      	bne.n	1dbf0 <__sfvwrite_r+0x110>
   1db64:	464f      	mov	r7, r9
   1db66:	9601      	str	r6, [sp, #4]
   1db68:	b337      	cbz	r7, 1dbb8 <__sfvwrite_r+0xd8>
   1db6a:	059a      	lsls	r2, r3, #22
   1db6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1db70:	f140 8083 	bpl.w	1dc7a <__sfvwrite_r+0x19a>
   1db74:	4547      	cmp	r7, r8
   1db76:	46c3      	mov	fp, r8
   1db78:	f0c0 80ab 	bcc.w	1dcd2 <__sfvwrite_r+0x1f2>
   1db7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1db80:	f040 80ac 	bne.w	1dcdc <__sfvwrite_r+0x1fc>
   1db84:	6820      	ldr	r0, [r4, #0]
   1db86:	46ba      	mov	sl, r7
   1db88:	465a      	mov	r2, fp
   1db8a:	4649      	mov	r1, r9
   1db8c:	f000 fdc2 	bl	1e714 <memmove>
   1db90:	68a2      	ldr	r2, [r4, #8]
   1db92:	6823      	ldr	r3, [r4, #0]
   1db94:	eba2 0208 	sub.w	r2, r2, r8
   1db98:	445b      	add	r3, fp
   1db9a:	60a2      	str	r2, [r4, #8]
   1db9c:	6023      	str	r3, [r4, #0]
   1db9e:	9a01      	ldr	r2, [sp, #4]
   1dba0:	6893      	ldr	r3, [r2, #8]
   1dba2:	eba3 030a 	sub.w	r3, r3, sl
   1dba6:	44d1      	add	r9, sl
   1dba8:	eba7 070a 	sub.w	r7, r7, sl
   1dbac:	6093      	str	r3, [r2, #8]
   1dbae:	2b00      	cmp	r3, #0
   1dbb0:	d0c5      	beq.n	1db3e <__sfvwrite_r+0x5e>
   1dbb2:	89a3      	ldrh	r3, [r4, #12]
   1dbb4:	2f00      	cmp	r7, #0
   1dbb6:	d1d8      	bne.n	1db6a <__sfvwrite_r+0x8a>
   1dbb8:	f8d5 9000 	ldr.w	r9, [r5]
   1dbbc:	686f      	ldr	r7, [r5, #4]
   1dbbe:	3508      	adds	r5, #8
   1dbc0:	e7d2      	b.n	1db68 <__sfvwrite_r+0x88>
   1dbc2:	f8d5 9000 	ldr.w	r9, [r5]
   1dbc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1dbca:	3508      	adds	r5, #8
   1dbcc:	e79f      	b.n	1db0e <__sfvwrite_r+0x2e>
   1dbce:	2000      	movs	r0, #0
   1dbd0:	4770      	bx	lr
   1dbd2:	4621      	mov	r1, r4
   1dbd4:	9800      	ldr	r0, [sp, #0]
   1dbd6:	f003 fef5 	bl	219c4 <_fflush_r>
   1dbda:	b370      	cbz	r0, 1dc3a <__sfvwrite_r+0x15a>
   1dbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dbe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dbe4:	f04f 30ff 	mov.w	r0, #4294967295
   1dbe8:	81a3      	strh	r3, [r4, #12]
   1dbea:	b003      	add	sp, #12
   1dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbf0:	4681      	mov	r9, r0
   1dbf2:	4633      	mov	r3, r6
   1dbf4:	464e      	mov	r6, r9
   1dbf6:	46a8      	mov	r8, r5
   1dbf8:	469a      	mov	sl, r3
   1dbfa:	464d      	mov	r5, r9
   1dbfc:	b34e      	cbz	r6, 1dc52 <__sfvwrite_r+0x172>
   1dbfe:	b380      	cbz	r0, 1dc62 <__sfvwrite_r+0x182>
   1dc00:	6820      	ldr	r0, [r4, #0]
   1dc02:	6923      	ldr	r3, [r4, #16]
   1dc04:	6962      	ldr	r2, [r4, #20]
   1dc06:	45b1      	cmp	r9, r6
   1dc08:	46cb      	mov	fp, r9
   1dc0a:	bf28      	it	cs
   1dc0c:	46b3      	movcs	fp, r6
   1dc0e:	4298      	cmp	r0, r3
   1dc10:	465f      	mov	r7, fp
   1dc12:	d904      	bls.n	1dc1e <__sfvwrite_r+0x13e>
   1dc14:	68a3      	ldr	r3, [r4, #8]
   1dc16:	4413      	add	r3, r2
   1dc18:	459b      	cmp	fp, r3
   1dc1a:	f300 80a6 	bgt.w	1dd6a <__sfvwrite_r+0x28a>
   1dc1e:	4593      	cmp	fp, r2
   1dc20:	db4b      	blt.n	1dcba <__sfvwrite_r+0x1da>
   1dc22:	4613      	mov	r3, r2
   1dc24:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1dc26:	69e1      	ldr	r1, [r4, #28]
   1dc28:	9800      	ldr	r0, [sp, #0]
   1dc2a:	462a      	mov	r2, r5
   1dc2c:	47b8      	blx	r7
   1dc2e:	1e07      	subs	r7, r0, #0
   1dc30:	ddd4      	ble.n	1dbdc <__sfvwrite_r+0xfc>
   1dc32:	ebb9 0907 	subs.w	r9, r9, r7
   1dc36:	d0cc      	beq.n	1dbd2 <__sfvwrite_r+0xf2>
   1dc38:	2001      	movs	r0, #1
   1dc3a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1dc3e:	1bdb      	subs	r3, r3, r7
   1dc40:	443d      	add	r5, r7
   1dc42:	1bf6      	subs	r6, r6, r7
   1dc44:	f8ca 3008 	str.w	r3, [sl, #8]
   1dc48:	2b00      	cmp	r3, #0
   1dc4a:	f43f af78 	beq.w	1db3e <__sfvwrite_r+0x5e>
   1dc4e:	2e00      	cmp	r6, #0
   1dc50:	d1d5      	bne.n	1dbfe <__sfvwrite_r+0x11e>
   1dc52:	f108 0308 	add.w	r3, r8, #8
   1dc56:	e913 0060 	ldmdb	r3, {r5, r6}
   1dc5a:	4698      	mov	r8, r3
   1dc5c:	3308      	adds	r3, #8
   1dc5e:	2e00      	cmp	r6, #0
   1dc60:	d0f9      	beq.n	1dc56 <__sfvwrite_r+0x176>
   1dc62:	4632      	mov	r2, r6
   1dc64:	210a      	movs	r1, #10
   1dc66:	4628      	mov	r0, r5
   1dc68:	f000 fc3a 	bl	1e4e0 <memchr>
   1dc6c:	2800      	cmp	r0, #0
   1dc6e:	f000 80a1 	beq.w	1ddb4 <__sfvwrite_r+0x2d4>
   1dc72:	3001      	adds	r0, #1
   1dc74:	eba0 0905 	sub.w	r9, r0, r5
   1dc78:	e7c2      	b.n	1dc00 <__sfvwrite_r+0x120>
   1dc7a:	6820      	ldr	r0, [r4, #0]
   1dc7c:	6923      	ldr	r3, [r4, #16]
   1dc7e:	4298      	cmp	r0, r3
   1dc80:	d802      	bhi.n	1dc88 <__sfvwrite_r+0x1a8>
   1dc82:	6963      	ldr	r3, [r4, #20]
   1dc84:	429f      	cmp	r7, r3
   1dc86:	d25d      	bcs.n	1dd44 <__sfvwrite_r+0x264>
   1dc88:	45b8      	cmp	r8, r7
   1dc8a:	bf28      	it	cs
   1dc8c:	46b8      	movcs	r8, r7
   1dc8e:	4642      	mov	r2, r8
   1dc90:	4649      	mov	r1, r9
   1dc92:	f000 fd3f 	bl	1e714 <memmove>
   1dc96:	68a3      	ldr	r3, [r4, #8]
   1dc98:	6822      	ldr	r2, [r4, #0]
   1dc9a:	eba3 0308 	sub.w	r3, r3, r8
   1dc9e:	4442      	add	r2, r8
   1dca0:	60a3      	str	r3, [r4, #8]
   1dca2:	6022      	str	r2, [r4, #0]
   1dca4:	b10b      	cbz	r3, 1dcaa <__sfvwrite_r+0x1ca>
   1dca6:	46c2      	mov	sl, r8
   1dca8:	e779      	b.n	1db9e <__sfvwrite_r+0xbe>
   1dcaa:	4621      	mov	r1, r4
   1dcac:	9800      	ldr	r0, [sp, #0]
   1dcae:	f003 fe89 	bl	219c4 <_fflush_r>
   1dcb2:	2800      	cmp	r0, #0
   1dcb4:	d192      	bne.n	1dbdc <__sfvwrite_r+0xfc>
   1dcb6:	46c2      	mov	sl, r8
   1dcb8:	e771      	b.n	1db9e <__sfvwrite_r+0xbe>
   1dcba:	465a      	mov	r2, fp
   1dcbc:	4629      	mov	r1, r5
   1dcbe:	f000 fd29 	bl	1e714 <memmove>
   1dcc2:	68a2      	ldr	r2, [r4, #8]
   1dcc4:	6823      	ldr	r3, [r4, #0]
   1dcc6:	eba2 020b 	sub.w	r2, r2, fp
   1dcca:	445b      	add	r3, fp
   1dccc:	60a2      	str	r2, [r4, #8]
   1dcce:	6023      	str	r3, [r4, #0]
   1dcd0:	e7af      	b.n	1dc32 <__sfvwrite_r+0x152>
   1dcd2:	6820      	ldr	r0, [r4, #0]
   1dcd4:	46b8      	mov	r8, r7
   1dcd6:	46ba      	mov	sl, r7
   1dcd8:	46bb      	mov	fp, r7
   1dcda:	e755      	b.n	1db88 <__sfvwrite_r+0xa8>
   1dcdc:	6962      	ldr	r2, [r4, #20]
   1dcde:	6820      	ldr	r0, [r4, #0]
   1dce0:	6921      	ldr	r1, [r4, #16]
   1dce2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1dce6:	eba0 0a01 	sub.w	sl, r0, r1
   1dcea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1dcee:	f10a 0001 	add.w	r0, sl, #1
   1dcf2:	ea4f 0868 	mov.w	r8, r8, asr #1
   1dcf6:	4438      	add	r0, r7
   1dcf8:	4540      	cmp	r0, r8
   1dcfa:	4642      	mov	r2, r8
   1dcfc:	bf84      	itt	hi
   1dcfe:	4680      	movhi	r8, r0
   1dd00:	4642      	movhi	r2, r8
   1dd02:	055b      	lsls	r3, r3, #21
   1dd04:	d544      	bpl.n	1dd90 <__sfvwrite_r+0x2b0>
   1dd06:	4611      	mov	r1, r2
   1dd08:	9800      	ldr	r0, [sp, #0]
   1dd0a:	f000 f921 	bl	1df50 <_malloc_r>
   1dd0e:	4683      	mov	fp, r0
   1dd10:	2800      	cmp	r0, #0
   1dd12:	d055      	beq.n	1ddc0 <__sfvwrite_r+0x2e0>
   1dd14:	4652      	mov	r2, sl
   1dd16:	6921      	ldr	r1, [r4, #16]
   1dd18:	f000 fc62 	bl	1e5e0 <memcpy>
   1dd1c:	89a3      	ldrh	r3, [r4, #12]
   1dd1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1dd22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1dd26:	81a3      	strh	r3, [r4, #12]
   1dd28:	eb0b 000a 	add.w	r0, fp, sl
   1dd2c:	eba8 030a 	sub.w	r3, r8, sl
   1dd30:	f8c4 b010 	str.w	fp, [r4, #16]
   1dd34:	f8c4 8014 	str.w	r8, [r4, #20]
   1dd38:	6020      	str	r0, [r4, #0]
   1dd3a:	60a3      	str	r3, [r4, #8]
   1dd3c:	46b8      	mov	r8, r7
   1dd3e:	46ba      	mov	sl, r7
   1dd40:	46bb      	mov	fp, r7
   1dd42:	e721      	b.n	1db88 <__sfvwrite_r+0xa8>
   1dd44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1dd48:	42b9      	cmp	r1, r7
   1dd4a:	bf28      	it	cs
   1dd4c:	4639      	movcs	r1, r7
   1dd4e:	464a      	mov	r2, r9
   1dd50:	fb91 f1f3 	sdiv	r1, r1, r3
   1dd54:	9800      	ldr	r0, [sp, #0]
   1dd56:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1dd58:	fb03 f301 	mul.w	r3, r3, r1
   1dd5c:	69e1      	ldr	r1, [r4, #28]
   1dd5e:	47b0      	blx	r6
   1dd60:	f1b0 0a00 	subs.w	sl, r0, #0
   1dd64:	f73f af1b 	bgt.w	1db9e <__sfvwrite_r+0xbe>
   1dd68:	e738      	b.n	1dbdc <__sfvwrite_r+0xfc>
   1dd6a:	461a      	mov	r2, r3
   1dd6c:	4629      	mov	r1, r5
   1dd6e:	9301      	str	r3, [sp, #4]
   1dd70:	f000 fcd0 	bl	1e714 <memmove>
   1dd74:	6822      	ldr	r2, [r4, #0]
   1dd76:	9b01      	ldr	r3, [sp, #4]
   1dd78:	9800      	ldr	r0, [sp, #0]
   1dd7a:	441a      	add	r2, r3
   1dd7c:	6022      	str	r2, [r4, #0]
   1dd7e:	4621      	mov	r1, r4
   1dd80:	f003 fe20 	bl	219c4 <_fflush_r>
   1dd84:	9b01      	ldr	r3, [sp, #4]
   1dd86:	2800      	cmp	r0, #0
   1dd88:	f47f af28 	bne.w	1dbdc <__sfvwrite_r+0xfc>
   1dd8c:	461f      	mov	r7, r3
   1dd8e:	e750      	b.n	1dc32 <__sfvwrite_r+0x152>
   1dd90:	9800      	ldr	r0, [sp, #0]
   1dd92:	f000 fdbd 	bl	1e910 <_realloc_r>
   1dd96:	4683      	mov	fp, r0
   1dd98:	2800      	cmp	r0, #0
   1dd9a:	d1c5      	bne.n	1dd28 <__sfvwrite_r+0x248>
   1dd9c:	9d00      	ldr	r5, [sp, #0]
   1dd9e:	6921      	ldr	r1, [r4, #16]
   1dda0:	4628      	mov	r0, r5
   1dda2:	f003 ff09 	bl	21bb8 <_free_r>
   1dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ddaa:	220c      	movs	r2, #12
   1ddac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1ddb0:	602a      	str	r2, [r5, #0]
   1ddb2:	e715      	b.n	1dbe0 <__sfvwrite_r+0x100>
   1ddb4:	f106 0901 	add.w	r9, r6, #1
   1ddb8:	e722      	b.n	1dc00 <__sfvwrite_r+0x120>
   1ddba:	f04f 30ff 	mov.w	r0, #4294967295
   1ddbe:	e6bf      	b.n	1db40 <__sfvwrite_r+0x60>
   1ddc0:	9a00      	ldr	r2, [sp, #0]
   1ddc2:	230c      	movs	r3, #12
   1ddc4:	6013      	str	r3, [r2, #0]
   1ddc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ddca:	e709      	b.n	1dbe0 <__sfvwrite_r+0x100>
   1ddcc:	7ffffc00 	.word	0x7ffffc00

0001ddd0 <_fwrite_r>:
   1ddd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddd4:	b086      	sub	sp, #24
   1ddd6:	fb02 f503 	mul.w	r5, r2, r3
   1ddda:	4690      	mov	r8, r2
   1dddc:	461e      	mov	r6, r3
   1ddde:	aa01      	add	r2, sp, #4
   1dde0:	2301      	movs	r3, #1
   1dde2:	9101      	str	r1, [sp, #4]
   1dde4:	9502      	str	r5, [sp, #8]
   1dde6:	9505      	str	r5, [sp, #20]
   1dde8:	9203      	str	r2, [sp, #12]
   1ddea:	9304      	str	r3, [sp, #16]
   1ddec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1ddee:	4607      	mov	r7, r0
   1ddf0:	b110      	cbz	r0, 1ddf8 <_fwrite_r+0x28>
   1ddf2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1ddf4:	2b00      	cmp	r3, #0
   1ddf6:	d031      	beq.n	1de5c <_fwrite_r+0x8c>
   1ddf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ddfa:	f013 0f01 	tst.w	r3, #1
   1ddfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1de02:	b29a      	uxth	r2, r3
   1de04:	d101      	bne.n	1de0a <_fwrite_r+0x3a>
   1de06:	0591      	lsls	r1, r2, #22
   1de08:	d52b      	bpl.n	1de62 <_fwrite_r+0x92>
   1de0a:	0492      	lsls	r2, r2, #18
   1de0c:	d406      	bmi.n	1de1c <_fwrite_r+0x4c>
   1de0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1de10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1de14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1de18:	81a3      	strh	r3, [r4, #12]
   1de1a:	6662      	str	r2, [r4, #100]	; 0x64
   1de1c:	4638      	mov	r0, r7
   1de1e:	aa03      	add	r2, sp, #12
   1de20:	4621      	mov	r1, r4
   1de22:	f7ff fe5d 	bl	1dae0 <__sfvwrite_r>
   1de26:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1de28:	b940      	cbnz	r0, 1de3c <_fwrite_r+0x6c>
   1de2a:	07d8      	lsls	r0, r3, #31
   1de2c:	d402      	bmi.n	1de34 <_fwrite_r+0x64>
   1de2e:	89a3      	ldrh	r3, [r4, #12]
   1de30:	0599      	lsls	r1, r3, #22
   1de32:	d51d      	bpl.n	1de70 <_fwrite_r+0xa0>
   1de34:	4630      	mov	r0, r6
   1de36:	b006      	add	sp, #24
   1de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de3c:	07da      	lsls	r2, r3, #31
   1de3e:	d506      	bpl.n	1de4e <_fwrite_r+0x7e>
   1de40:	9805      	ldr	r0, [sp, #20]
   1de42:	1a2d      	subs	r5, r5, r0
   1de44:	fbb5 f0f8 	udiv	r0, r5, r8
   1de48:	b006      	add	sp, #24
   1de4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de4e:	89a3      	ldrh	r3, [r4, #12]
   1de50:	059b      	lsls	r3, r3, #22
   1de52:	d4f5      	bmi.n	1de40 <_fwrite_r+0x70>
   1de54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1de56:	f000 f869 	bl	1df2c <__retarget_lock_release_recursive>
   1de5a:	e7f1      	b.n	1de40 <_fwrite_r+0x70>
   1de5c:	f003 fe0a 	bl	21a74 <__sinit>
   1de60:	e7ca      	b.n	1ddf8 <_fwrite_r+0x28>
   1de62:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1de64:	f000 f860 	bl	1df28 <__retarget_lock_acquire_recursive>
   1de68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1de6c:	b29a      	uxth	r2, r3
   1de6e:	e7cc      	b.n	1de0a <_fwrite_r+0x3a>
   1de70:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1de72:	f000 f85b 	bl	1df2c <__retarget_lock_release_recursive>
   1de76:	4630      	mov	r0, r6
   1de78:	e7e6      	b.n	1de48 <_fwrite_r+0x78>
   1de7a:	bf00      	nop

0001de7c <fwrite>:
   1de7c:	b510      	push	{r4, lr}
   1de7e:	b082      	sub	sp, #8
   1de80:	4c05      	ldr	r4, [pc, #20]	; (1de98 <fwrite+0x1c>)
   1de82:	9300      	str	r3, [sp, #0]
   1de84:	6824      	ldr	r4, [r4, #0]
   1de86:	4613      	mov	r3, r2
   1de88:	460a      	mov	r2, r1
   1de8a:	4601      	mov	r1, r0
   1de8c:	4620      	mov	r0, r4
   1de8e:	f7ff ff9f 	bl	1ddd0 <_fwrite_r>
   1de92:	b002      	add	sp, #8
   1de94:	bd10      	pop	{r4, pc}
   1de96:	bf00      	nop
   1de98:	20000100 	.word	0x20000100

0001de9c <__libc_init_array>:
   1de9c:	b570      	push	{r4, r5, r6, lr}
   1de9e:	4e0f      	ldr	r6, [pc, #60]	; (1dedc <__libc_init_array+0x40>)
   1dea0:	4d0f      	ldr	r5, [pc, #60]	; (1dee0 <__libc_init_array+0x44>)
   1dea2:	1b76      	subs	r6, r6, r5
   1dea4:	10b6      	asrs	r6, r6, #2
   1dea6:	bf18      	it	ne
   1dea8:	2400      	movne	r4, #0
   1deaa:	d005      	beq.n	1deb8 <__libc_init_array+0x1c>
   1deac:	3401      	adds	r4, #1
   1deae:	f855 3b04 	ldr.w	r3, [r5], #4
   1deb2:	4798      	blx	r3
   1deb4:	42a6      	cmp	r6, r4
   1deb6:	d1f9      	bne.n	1deac <__libc_init_array+0x10>
   1deb8:	4e0a      	ldr	r6, [pc, #40]	; (1dee4 <__libc_init_array+0x48>)
   1deba:	4d0b      	ldr	r5, [pc, #44]	; (1dee8 <__libc_init_array+0x4c>)
   1debc:	1b76      	subs	r6, r6, r5
   1debe:	f004 fed3 	bl	22c68 <_init>
   1dec2:	10b6      	asrs	r6, r6, #2
   1dec4:	bf18      	it	ne
   1dec6:	2400      	movne	r4, #0
   1dec8:	d006      	beq.n	1ded8 <__libc_init_array+0x3c>
   1deca:	3401      	adds	r4, #1
   1decc:	f855 3b04 	ldr.w	r3, [r5], #4
   1ded0:	4798      	blx	r3
   1ded2:	42a6      	cmp	r6, r4
   1ded4:	d1f9      	bne.n	1deca <__libc_init_array+0x2e>
   1ded6:	bd70      	pop	{r4, r5, r6, pc}
   1ded8:	bd70      	pop	{r4, r5, r6, pc}
   1deda:	bf00      	nop
   1dedc:	00022c80 	.word	0x00022c80
   1dee0:	00022c80 	.word	0x00022c80
   1dee4:	00022cb8 	.word	0x00022cb8
   1dee8:	00022c80 	.word	0x00022c80

0001deec <__itoa>:
   1deec:	1e93      	subs	r3, r2, #2
   1deee:	2b22      	cmp	r3, #34	; 0x22
   1def0:	d810      	bhi.n	1df14 <__itoa+0x28>
   1def2:	2a0a      	cmp	r2, #10
   1def4:	b510      	push	{r4, lr}
   1def6:	d006      	beq.n	1df06 <__itoa+0x1a>
   1def8:	2300      	movs	r3, #0
   1defa:	460c      	mov	r4, r1
   1defc:	4419      	add	r1, r3
   1defe:	f002 fbd5 	bl	206ac <__utoa>
   1df02:	4620      	mov	r0, r4
   1df04:	bd10      	pop	{r4, pc}
   1df06:	2800      	cmp	r0, #0
   1df08:	daf6      	bge.n	1def8 <__itoa+0xc>
   1df0a:	232d      	movs	r3, #45	; 0x2d
   1df0c:	700b      	strb	r3, [r1, #0]
   1df0e:	4240      	negs	r0, r0
   1df10:	2301      	movs	r3, #1
   1df12:	e7f2      	b.n	1defa <__itoa+0xe>
   1df14:	2000      	movs	r0, #0
   1df16:	7008      	strb	r0, [r1, #0]
   1df18:	4770      	bx	lr
   1df1a:	bf00      	nop

0001df1c <itoa>:
   1df1c:	f7ff bfe6 	b.w	1deec <__itoa>

0001df20 <__retarget_lock_init_recursive>:
   1df20:	4770      	bx	lr
   1df22:	bf00      	nop

0001df24 <__retarget_lock_close_recursive>:
   1df24:	4770      	bx	lr
   1df26:	bf00      	nop

0001df28 <__retarget_lock_acquire_recursive>:
   1df28:	4770      	bx	lr
   1df2a:	bf00      	nop

0001df2c <__retarget_lock_release_recursive>:
   1df2c:	4770      	bx	lr
   1df2e:	bf00      	nop

0001df30 <malloc>:
   1df30:	4b02      	ldr	r3, [pc, #8]	; (1df3c <malloc+0xc>)
   1df32:	4601      	mov	r1, r0
   1df34:	6818      	ldr	r0, [r3, #0]
   1df36:	f000 b80b 	b.w	1df50 <_malloc_r>
   1df3a:	bf00      	nop
   1df3c:	20000100 	.word	0x20000100

0001df40 <free>:
   1df40:	4b02      	ldr	r3, [pc, #8]	; (1df4c <free+0xc>)
   1df42:	4601      	mov	r1, r0
   1df44:	6818      	ldr	r0, [r3, #0]
   1df46:	f003 be37 	b.w	21bb8 <_free_r>
   1df4a:	bf00      	nop
   1df4c:	20000100 	.word	0x20000100

0001df50 <_malloc_r>:
   1df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df54:	f101 060b 	add.w	r6, r1, #11
   1df58:	2e16      	cmp	r6, #22
   1df5a:	b083      	sub	sp, #12
   1df5c:	4605      	mov	r5, r0
   1df5e:	f240 809e 	bls.w	1e09e <_malloc_r+0x14e>
   1df62:	f036 0607 	bics.w	r6, r6, #7
   1df66:	f100 80bd 	bmi.w	1e0e4 <_malloc_r+0x194>
   1df6a:	42b1      	cmp	r1, r6
   1df6c:	f200 80ba 	bhi.w	1e0e4 <_malloc_r+0x194>
   1df70:	f000 fc82 	bl	1e878 <__malloc_lock>
   1df74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1df78:	f0c0 8293 	bcc.w	1e4a2 <_malloc_r+0x552>
   1df7c:	0a73      	lsrs	r3, r6, #9
   1df7e:	f000 80b8 	beq.w	1e0f2 <_malloc_r+0x1a2>
   1df82:	2b04      	cmp	r3, #4
   1df84:	f200 8179 	bhi.w	1e27a <_malloc_r+0x32a>
   1df88:	09b3      	lsrs	r3, r6, #6
   1df8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1df8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1df92:	00c3      	lsls	r3, r0, #3
   1df94:	4fbf      	ldr	r7, [pc, #764]	; (1e294 <_malloc_r+0x344>)
   1df96:	443b      	add	r3, r7
   1df98:	f1a3 0108 	sub.w	r1, r3, #8
   1df9c:	685c      	ldr	r4, [r3, #4]
   1df9e:	42a1      	cmp	r1, r4
   1dfa0:	d106      	bne.n	1dfb0 <_malloc_r+0x60>
   1dfa2:	e00c      	b.n	1dfbe <_malloc_r+0x6e>
   1dfa4:	2a00      	cmp	r2, #0
   1dfa6:	f280 80aa 	bge.w	1e0fe <_malloc_r+0x1ae>
   1dfaa:	68e4      	ldr	r4, [r4, #12]
   1dfac:	42a1      	cmp	r1, r4
   1dfae:	d006      	beq.n	1dfbe <_malloc_r+0x6e>
   1dfb0:	6863      	ldr	r3, [r4, #4]
   1dfb2:	f023 0303 	bic.w	r3, r3, #3
   1dfb6:	1b9a      	subs	r2, r3, r6
   1dfb8:	2a0f      	cmp	r2, #15
   1dfba:	ddf3      	ble.n	1dfa4 <_malloc_r+0x54>
   1dfbc:	4670      	mov	r0, lr
   1dfbe:	693c      	ldr	r4, [r7, #16]
   1dfc0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1e2a8 <_malloc_r+0x358>
   1dfc4:	4574      	cmp	r4, lr
   1dfc6:	f000 81ab 	beq.w	1e320 <_malloc_r+0x3d0>
   1dfca:	6863      	ldr	r3, [r4, #4]
   1dfcc:	f023 0303 	bic.w	r3, r3, #3
   1dfd0:	1b9a      	subs	r2, r3, r6
   1dfd2:	2a0f      	cmp	r2, #15
   1dfd4:	f300 8190 	bgt.w	1e2f8 <_malloc_r+0x3a8>
   1dfd8:	2a00      	cmp	r2, #0
   1dfda:	f8c7 e014 	str.w	lr, [r7, #20]
   1dfde:	f8c7 e010 	str.w	lr, [r7, #16]
   1dfe2:	f280 809d 	bge.w	1e120 <_malloc_r+0x1d0>
   1dfe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dfea:	f080 8161 	bcs.w	1e2b0 <_malloc_r+0x360>
   1dfee:	08db      	lsrs	r3, r3, #3
   1dff0:	f103 0c01 	add.w	ip, r3, #1
   1dff4:	1099      	asrs	r1, r3, #2
   1dff6:	687a      	ldr	r2, [r7, #4]
   1dff8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1dffc:	f8c4 8008 	str.w	r8, [r4, #8]
   1e000:	2301      	movs	r3, #1
   1e002:	408b      	lsls	r3, r1
   1e004:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1e008:	4313      	orrs	r3, r2
   1e00a:	3908      	subs	r1, #8
   1e00c:	60e1      	str	r1, [r4, #12]
   1e00e:	607b      	str	r3, [r7, #4]
   1e010:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1e014:	f8c8 400c 	str.w	r4, [r8, #12]
   1e018:	1082      	asrs	r2, r0, #2
   1e01a:	2401      	movs	r4, #1
   1e01c:	4094      	lsls	r4, r2
   1e01e:	429c      	cmp	r4, r3
   1e020:	f200 808b 	bhi.w	1e13a <_malloc_r+0x1ea>
   1e024:	421c      	tst	r4, r3
   1e026:	d106      	bne.n	1e036 <_malloc_r+0xe6>
   1e028:	f020 0003 	bic.w	r0, r0, #3
   1e02c:	0064      	lsls	r4, r4, #1
   1e02e:	421c      	tst	r4, r3
   1e030:	f100 0004 	add.w	r0, r0, #4
   1e034:	d0fa      	beq.n	1e02c <_malloc_r+0xdc>
   1e036:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1e03a:	46cc      	mov	ip, r9
   1e03c:	4680      	mov	r8, r0
   1e03e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1e042:	459c      	cmp	ip, r3
   1e044:	d107      	bne.n	1e056 <_malloc_r+0x106>
   1e046:	e16d      	b.n	1e324 <_malloc_r+0x3d4>
   1e048:	2a00      	cmp	r2, #0
   1e04a:	f280 817b 	bge.w	1e344 <_malloc_r+0x3f4>
   1e04e:	68db      	ldr	r3, [r3, #12]
   1e050:	459c      	cmp	ip, r3
   1e052:	f000 8167 	beq.w	1e324 <_malloc_r+0x3d4>
   1e056:	6859      	ldr	r1, [r3, #4]
   1e058:	f021 0103 	bic.w	r1, r1, #3
   1e05c:	1b8a      	subs	r2, r1, r6
   1e05e:	2a0f      	cmp	r2, #15
   1e060:	ddf2      	ble.n	1e048 <_malloc_r+0xf8>
   1e062:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1e066:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e06a:	9300      	str	r3, [sp, #0]
   1e06c:	199c      	adds	r4, r3, r6
   1e06e:	4628      	mov	r0, r5
   1e070:	f046 0601 	orr.w	r6, r6, #1
   1e074:	f042 0501 	orr.w	r5, r2, #1
   1e078:	605e      	str	r6, [r3, #4]
   1e07a:	f8c8 c00c 	str.w	ip, [r8, #12]
   1e07e:	f8cc 8008 	str.w	r8, [ip, #8]
   1e082:	617c      	str	r4, [r7, #20]
   1e084:	613c      	str	r4, [r7, #16]
   1e086:	f8c4 e00c 	str.w	lr, [r4, #12]
   1e08a:	f8c4 e008 	str.w	lr, [r4, #8]
   1e08e:	6065      	str	r5, [r4, #4]
   1e090:	505a      	str	r2, [r3, r1]
   1e092:	f000 fbf7 	bl	1e884 <__malloc_unlock>
   1e096:	9b00      	ldr	r3, [sp, #0]
   1e098:	f103 0408 	add.w	r4, r3, #8
   1e09c:	e01e      	b.n	1e0dc <_malloc_r+0x18c>
   1e09e:	2910      	cmp	r1, #16
   1e0a0:	d820      	bhi.n	1e0e4 <_malloc_r+0x194>
   1e0a2:	f000 fbe9 	bl	1e878 <__malloc_lock>
   1e0a6:	2610      	movs	r6, #16
   1e0a8:	2318      	movs	r3, #24
   1e0aa:	2002      	movs	r0, #2
   1e0ac:	4f79      	ldr	r7, [pc, #484]	; (1e294 <_malloc_r+0x344>)
   1e0ae:	443b      	add	r3, r7
   1e0b0:	f1a3 0208 	sub.w	r2, r3, #8
   1e0b4:	685c      	ldr	r4, [r3, #4]
   1e0b6:	4294      	cmp	r4, r2
   1e0b8:	f000 813d 	beq.w	1e336 <_malloc_r+0x3e6>
   1e0bc:	6863      	ldr	r3, [r4, #4]
   1e0be:	68e1      	ldr	r1, [r4, #12]
   1e0c0:	68a6      	ldr	r6, [r4, #8]
   1e0c2:	f023 0303 	bic.w	r3, r3, #3
   1e0c6:	4423      	add	r3, r4
   1e0c8:	4628      	mov	r0, r5
   1e0ca:	685a      	ldr	r2, [r3, #4]
   1e0cc:	60f1      	str	r1, [r6, #12]
   1e0ce:	f042 0201 	orr.w	r2, r2, #1
   1e0d2:	608e      	str	r6, [r1, #8]
   1e0d4:	605a      	str	r2, [r3, #4]
   1e0d6:	f000 fbd5 	bl	1e884 <__malloc_unlock>
   1e0da:	3408      	adds	r4, #8
   1e0dc:	4620      	mov	r0, r4
   1e0de:	b003      	add	sp, #12
   1e0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0e4:	2400      	movs	r4, #0
   1e0e6:	230c      	movs	r3, #12
   1e0e8:	4620      	mov	r0, r4
   1e0ea:	602b      	str	r3, [r5, #0]
   1e0ec:	b003      	add	sp, #12
   1e0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0f2:	2040      	movs	r0, #64	; 0x40
   1e0f4:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e0f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1e0fc:	e74a      	b.n	1df94 <_malloc_r+0x44>
   1e0fe:	4423      	add	r3, r4
   1e100:	68e1      	ldr	r1, [r4, #12]
   1e102:	685a      	ldr	r2, [r3, #4]
   1e104:	68a6      	ldr	r6, [r4, #8]
   1e106:	f042 0201 	orr.w	r2, r2, #1
   1e10a:	60f1      	str	r1, [r6, #12]
   1e10c:	4628      	mov	r0, r5
   1e10e:	608e      	str	r6, [r1, #8]
   1e110:	605a      	str	r2, [r3, #4]
   1e112:	f000 fbb7 	bl	1e884 <__malloc_unlock>
   1e116:	3408      	adds	r4, #8
   1e118:	4620      	mov	r0, r4
   1e11a:	b003      	add	sp, #12
   1e11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e120:	4423      	add	r3, r4
   1e122:	4628      	mov	r0, r5
   1e124:	685a      	ldr	r2, [r3, #4]
   1e126:	f042 0201 	orr.w	r2, r2, #1
   1e12a:	605a      	str	r2, [r3, #4]
   1e12c:	f000 fbaa 	bl	1e884 <__malloc_unlock>
   1e130:	3408      	adds	r4, #8
   1e132:	4620      	mov	r0, r4
   1e134:	b003      	add	sp, #12
   1e136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e13a:	68bc      	ldr	r4, [r7, #8]
   1e13c:	6863      	ldr	r3, [r4, #4]
   1e13e:	f023 0803 	bic.w	r8, r3, #3
   1e142:	45b0      	cmp	r8, r6
   1e144:	d304      	bcc.n	1e150 <_malloc_r+0x200>
   1e146:	eba8 0306 	sub.w	r3, r8, r6
   1e14a:	2b0f      	cmp	r3, #15
   1e14c:	f300 8085 	bgt.w	1e25a <_malloc_r+0x30a>
   1e150:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1e2ac <_malloc_r+0x35c>
   1e154:	4b50      	ldr	r3, [pc, #320]	; (1e298 <_malloc_r+0x348>)
   1e156:	f8d9 2000 	ldr.w	r2, [r9]
   1e15a:	681b      	ldr	r3, [r3, #0]
   1e15c:	3201      	adds	r2, #1
   1e15e:	4433      	add	r3, r6
   1e160:	eb04 0a08 	add.w	sl, r4, r8
   1e164:	f000 8155 	beq.w	1e412 <_malloc_r+0x4c2>
   1e168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1e16c:	330f      	adds	r3, #15
   1e16e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1e172:	f02b 0b0f 	bic.w	fp, fp, #15
   1e176:	4659      	mov	r1, fp
   1e178:	4628      	mov	r0, r5
   1e17a:	f000 fd6f 	bl	1ec5c <_sbrk_r>
   1e17e:	1c41      	adds	r1, r0, #1
   1e180:	4602      	mov	r2, r0
   1e182:	f000 80fc 	beq.w	1e37e <_malloc_r+0x42e>
   1e186:	4582      	cmp	sl, r0
   1e188:	f200 80f7 	bhi.w	1e37a <_malloc_r+0x42a>
   1e18c:	4b43      	ldr	r3, [pc, #268]	; (1e29c <_malloc_r+0x34c>)
   1e18e:	6819      	ldr	r1, [r3, #0]
   1e190:	4459      	add	r1, fp
   1e192:	6019      	str	r1, [r3, #0]
   1e194:	f000 814d 	beq.w	1e432 <_malloc_r+0x4e2>
   1e198:	f8d9 0000 	ldr.w	r0, [r9]
   1e19c:	3001      	adds	r0, #1
   1e19e:	bf1b      	ittet	ne
   1e1a0:	eba2 0a0a 	subne.w	sl, r2, sl
   1e1a4:	4451      	addne	r1, sl
   1e1a6:	f8c9 2000 	streq.w	r2, [r9]
   1e1aa:	6019      	strne	r1, [r3, #0]
   1e1ac:	f012 0107 	ands.w	r1, r2, #7
   1e1b0:	f000 8115 	beq.w	1e3de <_malloc_r+0x48e>
   1e1b4:	f1c1 0008 	rsb	r0, r1, #8
   1e1b8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1e1bc:	4402      	add	r2, r0
   1e1be:	3108      	adds	r1, #8
   1e1c0:	eb02 090b 	add.w	r9, r2, fp
   1e1c4:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1e1c8:	eba1 0909 	sub.w	r9, r1, r9
   1e1cc:	4649      	mov	r1, r9
   1e1ce:	4628      	mov	r0, r5
   1e1d0:	9301      	str	r3, [sp, #4]
   1e1d2:	9200      	str	r2, [sp, #0]
   1e1d4:	f000 fd42 	bl	1ec5c <_sbrk_r>
   1e1d8:	1c43      	adds	r3, r0, #1
   1e1da:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1e1de:	f000 8143 	beq.w	1e468 <_malloc_r+0x518>
   1e1e2:	1a80      	subs	r0, r0, r2
   1e1e4:	4448      	add	r0, r9
   1e1e6:	f040 0001 	orr.w	r0, r0, #1
   1e1ea:	6819      	ldr	r1, [r3, #0]
   1e1ec:	60ba      	str	r2, [r7, #8]
   1e1ee:	4449      	add	r1, r9
   1e1f0:	42bc      	cmp	r4, r7
   1e1f2:	6050      	str	r0, [r2, #4]
   1e1f4:	6019      	str	r1, [r3, #0]
   1e1f6:	d017      	beq.n	1e228 <_malloc_r+0x2d8>
   1e1f8:	f1b8 0f0f 	cmp.w	r8, #15
   1e1fc:	f240 80fb 	bls.w	1e3f6 <_malloc_r+0x4a6>
   1e200:	6860      	ldr	r0, [r4, #4]
   1e202:	f1a8 020c 	sub.w	r2, r8, #12
   1e206:	f022 0207 	bic.w	r2, r2, #7
   1e20a:	eb04 0e02 	add.w	lr, r4, r2
   1e20e:	f000 0001 	and.w	r0, r0, #1
   1e212:	f04f 0c05 	mov.w	ip, #5
   1e216:	4310      	orrs	r0, r2
   1e218:	2a0f      	cmp	r2, #15
   1e21a:	6060      	str	r0, [r4, #4]
   1e21c:	f8ce c004 	str.w	ip, [lr, #4]
   1e220:	f8ce c008 	str.w	ip, [lr, #8]
   1e224:	f200 8117 	bhi.w	1e456 <_malloc_r+0x506>
   1e228:	4b1d      	ldr	r3, [pc, #116]	; (1e2a0 <_malloc_r+0x350>)
   1e22a:	68bc      	ldr	r4, [r7, #8]
   1e22c:	681a      	ldr	r2, [r3, #0]
   1e22e:	4291      	cmp	r1, r2
   1e230:	bf88      	it	hi
   1e232:	6019      	strhi	r1, [r3, #0]
   1e234:	4b1b      	ldr	r3, [pc, #108]	; (1e2a4 <_malloc_r+0x354>)
   1e236:	681a      	ldr	r2, [r3, #0]
   1e238:	4291      	cmp	r1, r2
   1e23a:	6862      	ldr	r2, [r4, #4]
   1e23c:	bf88      	it	hi
   1e23e:	6019      	strhi	r1, [r3, #0]
   1e240:	f022 0203 	bic.w	r2, r2, #3
   1e244:	4296      	cmp	r6, r2
   1e246:	eba2 0306 	sub.w	r3, r2, r6
   1e24a:	d801      	bhi.n	1e250 <_malloc_r+0x300>
   1e24c:	2b0f      	cmp	r3, #15
   1e24e:	dc04      	bgt.n	1e25a <_malloc_r+0x30a>
   1e250:	4628      	mov	r0, r5
   1e252:	f000 fb17 	bl	1e884 <__malloc_unlock>
   1e256:	2400      	movs	r4, #0
   1e258:	e740      	b.n	1e0dc <_malloc_r+0x18c>
   1e25a:	19a2      	adds	r2, r4, r6
   1e25c:	f043 0301 	orr.w	r3, r3, #1
   1e260:	f046 0601 	orr.w	r6, r6, #1
   1e264:	6066      	str	r6, [r4, #4]
   1e266:	4628      	mov	r0, r5
   1e268:	60ba      	str	r2, [r7, #8]
   1e26a:	6053      	str	r3, [r2, #4]
   1e26c:	f000 fb0a 	bl	1e884 <__malloc_unlock>
   1e270:	3408      	adds	r4, #8
   1e272:	4620      	mov	r0, r4
   1e274:	b003      	add	sp, #12
   1e276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e27a:	2b14      	cmp	r3, #20
   1e27c:	d971      	bls.n	1e362 <_malloc_r+0x412>
   1e27e:	2b54      	cmp	r3, #84	; 0x54
   1e280:	f200 80a3 	bhi.w	1e3ca <_malloc_r+0x47a>
   1e284:	0b33      	lsrs	r3, r6, #12
   1e286:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1e28a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1e28e:	00c3      	lsls	r3, r0, #3
   1e290:	e680      	b.n	1df94 <_malloc_r+0x44>
   1e292:	bf00      	nop
   1e294:	2000069c 	.word	0x2000069c
   1e298:	200022e0 	.word	0x200022e0
   1e29c:	200022b0 	.word	0x200022b0
   1e2a0:	200022d8 	.word	0x200022d8
   1e2a4:	200022dc 	.word	0x200022dc
   1e2a8:	200006a4 	.word	0x200006a4
   1e2ac:	20000aa4 	.word	0x20000aa4
   1e2b0:	0a5a      	lsrs	r2, r3, #9
   1e2b2:	2a04      	cmp	r2, #4
   1e2b4:	d95b      	bls.n	1e36e <_malloc_r+0x41e>
   1e2b6:	2a14      	cmp	r2, #20
   1e2b8:	f200 80ae 	bhi.w	1e418 <_malloc_r+0x4c8>
   1e2bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1e2c0:	00c9      	lsls	r1, r1, #3
   1e2c2:	325b      	adds	r2, #91	; 0x5b
   1e2c4:	eb07 0c01 	add.w	ip, r7, r1
   1e2c8:	5879      	ldr	r1, [r7, r1]
   1e2ca:	f1ac 0c08 	sub.w	ip, ip, #8
   1e2ce:	458c      	cmp	ip, r1
   1e2d0:	f000 8088 	beq.w	1e3e4 <_malloc_r+0x494>
   1e2d4:	684a      	ldr	r2, [r1, #4]
   1e2d6:	f022 0203 	bic.w	r2, r2, #3
   1e2da:	4293      	cmp	r3, r2
   1e2dc:	d273      	bcs.n	1e3c6 <_malloc_r+0x476>
   1e2de:	6889      	ldr	r1, [r1, #8]
   1e2e0:	458c      	cmp	ip, r1
   1e2e2:	d1f7      	bne.n	1e2d4 <_malloc_r+0x384>
   1e2e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1e2e8:	687b      	ldr	r3, [r7, #4]
   1e2ea:	60e2      	str	r2, [r4, #12]
   1e2ec:	f8c4 c008 	str.w	ip, [r4, #8]
   1e2f0:	6094      	str	r4, [r2, #8]
   1e2f2:	f8cc 400c 	str.w	r4, [ip, #12]
   1e2f6:	e68f      	b.n	1e018 <_malloc_r+0xc8>
   1e2f8:	19a1      	adds	r1, r4, r6
   1e2fa:	f046 0c01 	orr.w	ip, r6, #1
   1e2fe:	f042 0601 	orr.w	r6, r2, #1
   1e302:	f8c4 c004 	str.w	ip, [r4, #4]
   1e306:	4628      	mov	r0, r5
   1e308:	6179      	str	r1, [r7, #20]
   1e30a:	6139      	str	r1, [r7, #16]
   1e30c:	f8c1 e00c 	str.w	lr, [r1, #12]
   1e310:	f8c1 e008 	str.w	lr, [r1, #8]
   1e314:	604e      	str	r6, [r1, #4]
   1e316:	50e2      	str	r2, [r4, r3]
   1e318:	f000 fab4 	bl	1e884 <__malloc_unlock>
   1e31c:	3408      	adds	r4, #8
   1e31e:	e6dd      	b.n	1e0dc <_malloc_r+0x18c>
   1e320:	687b      	ldr	r3, [r7, #4]
   1e322:	e679      	b.n	1e018 <_malloc_r+0xc8>
   1e324:	f108 0801 	add.w	r8, r8, #1
   1e328:	f018 0f03 	tst.w	r8, #3
   1e32c:	f10c 0c08 	add.w	ip, ip, #8
   1e330:	f47f ae85 	bne.w	1e03e <_malloc_r+0xee>
   1e334:	e02d      	b.n	1e392 <_malloc_r+0x442>
   1e336:	68dc      	ldr	r4, [r3, #12]
   1e338:	42a3      	cmp	r3, r4
   1e33a:	bf08      	it	eq
   1e33c:	3002      	addeq	r0, #2
   1e33e:	f43f ae3e 	beq.w	1dfbe <_malloc_r+0x6e>
   1e342:	e6bb      	b.n	1e0bc <_malloc_r+0x16c>
   1e344:	4419      	add	r1, r3
   1e346:	461c      	mov	r4, r3
   1e348:	684a      	ldr	r2, [r1, #4]
   1e34a:	68db      	ldr	r3, [r3, #12]
   1e34c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1e350:	f042 0201 	orr.w	r2, r2, #1
   1e354:	604a      	str	r2, [r1, #4]
   1e356:	4628      	mov	r0, r5
   1e358:	60f3      	str	r3, [r6, #12]
   1e35a:	609e      	str	r6, [r3, #8]
   1e35c:	f000 fa92 	bl	1e884 <__malloc_unlock>
   1e360:	e6bc      	b.n	1e0dc <_malloc_r+0x18c>
   1e362:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1e366:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1e36a:	00c3      	lsls	r3, r0, #3
   1e36c:	e612      	b.n	1df94 <_malloc_r+0x44>
   1e36e:	099a      	lsrs	r2, r3, #6
   1e370:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1e374:	00c9      	lsls	r1, r1, #3
   1e376:	3238      	adds	r2, #56	; 0x38
   1e378:	e7a4      	b.n	1e2c4 <_malloc_r+0x374>
   1e37a:	42bc      	cmp	r4, r7
   1e37c:	d054      	beq.n	1e428 <_malloc_r+0x4d8>
   1e37e:	68bc      	ldr	r4, [r7, #8]
   1e380:	6862      	ldr	r2, [r4, #4]
   1e382:	f022 0203 	bic.w	r2, r2, #3
   1e386:	e75d      	b.n	1e244 <_malloc_r+0x2f4>
   1e388:	f859 3908 	ldr.w	r3, [r9], #-8
   1e38c:	4599      	cmp	r9, r3
   1e38e:	f040 8086 	bne.w	1e49e <_malloc_r+0x54e>
   1e392:	f010 0f03 	tst.w	r0, #3
   1e396:	f100 30ff 	add.w	r0, r0, #4294967295
   1e39a:	d1f5      	bne.n	1e388 <_malloc_r+0x438>
   1e39c:	687b      	ldr	r3, [r7, #4]
   1e39e:	ea23 0304 	bic.w	r3, r3, r4
   1e3a2:	607b      	str	r3, [r7, #4]
   1e3a4:	0064      	lsls	r4, r4, #1
   1e3a6:	429c      	cmp	r4, r3
   1e3a8:	f63f aec7 	bhi.w	1e13a <_malloc_r+0x1ea>
   1e3ac:	2c00      	cmp	r4, #0
   1e3ae:	f43f aec4 	beq.w	1e13a <_malloc_r+0x1ea>
   1e3b2:	421c      	tst	r4, r3
   1e3b4:	4640      	mov	r0, r8
   1e3b6:	f47f ae3e 	bne.w	1e036 <_malloc_r+0xe6>
   1e3ba:	0064      	lsls	r4, r4, #1
   1e3bc:	421c      	tst	r4, r3
   1e3be:	f100 0004 	add.w	r0, r0, #4
   1e3c2:	d0fa      	beq.n	1e3ba <_malloc_r+0x46a>
   1e3c4:	e637      	b.n	1e036 <_malloc_r+0xe6>
   1e3c6:	468c      	mov	ip, r1
   1e3c8:	e78c      	b.n	1e2e4 <_malloc_r+0x394>
   1e3ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e3ce:	d815      	bhi.n	1e3fc <_malloc_r+0x4ac>
   1e3d0:	0bf3      	lsrs	r3, r6, #15
   1e3d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e3d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e3da:	00c3      	lsls	r3, r0, #3
   1e3dc:	e5da      	b.n	1df94 <_malloc_r+0x44>
   1e3de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e3e2:	e6ed      	b.n	1e1c0 <_malloc_r+0x270>
   1e3e4:	687b      	ldr	r3, [r7, #4]
   1e3e6:	1092      	asrs	r2, r2, #2
   1e3e8:	2101      	movs	r1, #1
   1e3ea:	fa01 f202 	lsl.w	r2, r1, r2
   1e3ee:	4313      	orrs	r3, r2
   1e3f0:	607b      	str	r3, [r7, #4]
   1e3f2:	4662      	mov	r2, ip
   1e3f4:	e779      	b.n	1e2ea <_malloc_r+0x39a>
   1e3f6:	2301      	movs	r3, #1
   1e3f8:	6053      	str	r3, [r2, #4]
   1e3fa:	e729      	b.n	1e250 <_malloc_r+0x300>
   1e3fc:	f240 5254 	movw	r2, #1364	; 0x554
   1e400:	4293      	cmp	r3, r2
   1e402:	d822      	bhi.n	1e44a <_malloc_r+0x4fa>
   1e404:	0cb3      	lsrs	r3, r6, #18
   1e406:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e40a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e40e:	00c3      	lsls	r3, r0, #3
   1e410:	e5c0      	b.n	1df94 <_malloc_r+0x44>
   1e412:	f103 0b10 	add.w	fp, r3, #16
   1e416:	e6ae      	b.n	1e176 <_malloc_r+0x226>
   1e418:	2a54      	cmp	r2, #84	; 0x54
   1e41a:	d829      	bhi.n	1e470 <_malloc_r+0x520>
   1e41c:	0b1a      	lsrs	r2, r3, #12
   1e41e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e422:	00c9      	lsls	r1, r1, #3
   1e424:	326e      	adds	r2, #110	; 0x6e
   1e426:	e74d      	b.n	1e2c4 <_malloc_r+0x374>
   1e428:	4b20      	ldr	r3, [pc, #128]	; (1e4ac <_malloc_r+0x55c>)
   1e42a:	6819      	ldr	r1, [r3, #0]
   1e42c:	4459      	add	r1, fp
   1e42e:	6019      	str	r1, [r3, #0]
   1e430:	e6b2      	b.n	1e198 <_malloc_r+0x248>
   1e432:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e436:	2800      	cmp	r0, #0
   1e438:	f47f aeae 	bne.w	1e198 <_malloc_r+0x248>
   1e43c:	eb08 030b 	add.w	r3, r8, fp
   1e440:	68ba      	ldr	r2, [r7, #8]
   1e442:	f043 0301 	orr.w	r3, r3, #1
   1e446:	6053      	str	r3, [r2, #4]
   1e448:	e6ee      	b.n	1e228 <_malloc_r+0x2d8>
   1e44a:	207f      	movs	r0, #127	; 0x7f
   1e44c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e450:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e454:	e59e      	b.n	1df94 <_malloc_r+0x44>
   1e456:	f104 0108 	add.w	r1, r4, #8
   1e45a:	4628      	mov	r0, r5
   1e45c:	9300      	str	r3, [sp, #0]
   1e45e:	f003 fbab 	bl	21bb8 <_free_r>
   1e462:	9b00      	ldr	r3, [sp, #0]
   1e464:	6819      	ldr	r1, [r3, #0]
   1e466:	e6df      	b.n	1e228 <_malloc_r+0x2d8>
   1e468:	2001      	movs	r0, #1
   1e46a:	f04f 0900 	mov.w	r9, #0
   1e46e:	e6bc      	b.n	1e1ea <_malloc_r+0x29a>
   1e470:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e474:	d805      	bhi.n	1e482 <_malloc_r+0x532>
   1e476:	0bda      	lsrs	r2, r3, #15
   1e478:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e47c:	00c9      	lsls	r1, r1, #3
   1e47e:	3277      	adds	r2, #119	; 0x77
   1e480:	e720      	b.n	1e2c4 <_malloc_r+0x374>
   1e482:	f240 5154 	movw	r1, #1364	; 0x554
   1e486:	428a      	cmp	r2, r1
   1e488:	d805      	bhi.n	1e496 <_malloc_r+0x546>
   1e48a:	0c9a      	lsrs	r2, r3, #18
   1e48c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e490:	00c9      	lsls	r1, r1, #3
   1e492:	327c      	adds	r2, #124	; 0x7c
   1e494:	e716      	b.n	1e2c4 <_malloc_r+0x374>
   1e496:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e49a:	227e      	movs	r2, #126	; 0x7e
   1e49c:	e712      	b.n	1e2c4 <_malloc_r+0x374>
   1e49e:	687b      	ldr	r3, [r7, #4]
   1e4a0:	e780      	b.n	1e3a4 <_malloc_r+0x454>
   1e4a2:	08f0      	lsrs	r0, r6, #3
   1e4a4:	f106 0308 	add.w	r3, r6, #8
   1e4a8:	e600      	b.n	1e0ac <_malloc_r+0x15c>
   1e4aa:	bf00      	nop
   1e4ac:	200022b0 	.word	0x200022b0

0001e4b0 <__ascii_mbtowc>:
   1e4b0:	b082      	sub	sp, #8
   1e4b2:	b149      	cbz	r1, 1e4c8 <__ascii_mbtowc+0x18>
   1e4b4:	b15a      	cbz	r2, 1e4ce <__ascii_mbtowc+0x1e>
   1e4b6:	b16b      	cbz	r3, 1e4d4 <__ascii_mbtowc+0x24>
   1e4b8:	7813      	ldrb	r3, [r2, #0]
   1e4ba:	600b      	str	r3, [r1, #0]
   1e4bc:	7812      	ldrb	r2, [r2, #0]
   1e4be:	1c10      	adds	r0, r2, #0
   1e4c0:	bf18      	it	ne
   1e4c2:	2001      	movne	r0, #1
   1e4c4:	b002      	add	sp, #8
   1e4c6:	4770      	bx	lr
   1e4c8:	a901      	add	r1, sp, #4
   1e4ca:	2a00      	cmp	r2, #0
   1e4cc:	d1f3      	bne.n	1e4b6 <__ascii_mbtowc+0x6>
   1e4ce:	4610      	mov	r0, r2
   1e4d0:	b002      	add	sp, #8
   1e4d2:	4770      	bx	lr
   1e4d4:	f06f 0001 	mvn.w	r0, #1
   1e4d8:	e7f4      	b.n	1e4c4 <__ascii_mbtowc+0x14>
   1e4da:	bf00      	nop
   1e4dc:	0000      	movs	r0, r0
	...

0001e4e0 <memchr>:
   1e4e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e4e4:	2a10      	cmp	r2, #16
   1e4e6:	db2b      	blt.n	1e540 <memchr+0x60>
   1e4e8:	f010 0f07 	tst.w	r0, #7
   1e4ec:	d008      	beq.n	1e500 <memchr+0x20>
   1e4ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e4f2:	3a01      	subs	r2, #1
   1e4f4:	428b      	cmp	r3, r1
   1e4f6:	d02d      	beq.n	1e554 <memchr+0x74>
   1e4f8:	f010 0f07 	tst.w	r0, #7
   1e4fc:	b342      	cbz	r2, 1e550 <memchr+0x70>
   1e4fe:	d1f6      	bne.n	1e4ee <memchr+0xe>
   1e500:	b4f0      	push	{r4, r5, r6, r7}
   1e502:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e506:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e50a:	f022 0407 	bic.w	r4, r2, #7
   1e50e:	f07f 0700 	mvns.w	r7, #0
   1e512:	2300      	movs	r3, #0
   1e514:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e518:	3c08      	subs	r4, #8
   1e51a:	ea85 0501 	eor.w	r5, r5, r1
   1e51e:	ea86 0601 	eor.w	r6, r6, r1
   1e522:	fa85 f547 	uadd8	r5, r5, r7
   1e526:	faa3 f587 	sel	r5, r3, r7
   1e52a:	fa86 f647 	uadd8	r6, r6, r7
   1e52e:	faa5 f687 	sel	r6, r5, r7
   1e532:	b98e      	cbnz	r6, 1e558 <memchr+0x78>
   1e534:	d1ee      	bne.n	1e514 <memchr+0x34>
   1e536:	bcf0      	pop	{r4, r5, r6, r7}
   1e538:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e53c:	f002 0207 	and.w	r2, r2, #7
   1e540:	b132      	cbz	r2, 1e550 <memchr+0x70>
   1e542:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e546:	3a01      	subs	r2, #1
   1e548:	ea83 0301 	eor.w	r3, r3, r1
   1e54c:	b113      	cbz	r3, 1e554 <memchr+0x74>
   1e54e:	d1f8      	bne.n	1e542 <memchr+0x62>
   1e550:	2000      	movs	r0, #0
   1e552:	4770      	bx	lr
   1e554:	3801      	subs	r0, #1
   1e556:	4770      	bx	lr
   1e558:	2d00      	cmp	r5, #0
   1e55a:	bf06      	itte	eq
   1e55c:	4635      	moveq	r5, r6
   1e55e:	3803      	subeq	r0, #3
   1e560:	3807      	subne	r0, #7
   1e562:	f015 0f01 	tst.w	r5, #1
   1e566:	d107      	bne.n	1e578 <memchr+0x98>
   1e568:	3001      	adds	r0, #1
   1e56a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e56e:	bf02      	ittt	eq
   1e570:	3001      	addeq	r0, #1
   1e572:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e576:	3001      	addeq	r0, #1
   1e578:	bcf0      	pop	{r4, r5, r6, r7}
   1e57a:	3801      	subs	r0, #1
   1e57c:	4770      	bx	lr
   1e57e:	bf00      	nop

0001e580 <memcmp>:
   1e580:	2a03      	cmp	r2, #3
   1e582:	b470      	push	{r4, r5, r6}
   1e584:	d922      	bls.n	1e5cc <memcmp+0x4c>
   1e586:	ea40 0301 	orr.w	r3, r0, r1
   1e58a:	079b      	lsls	r3, r3, #30
   1e58c:	d011      	beq.n	1e5b2 <memcmp+0x32>
   1e58e:	7803      	ldrb	r3, [r0, #0]
   1e590:	780c      	ldrb	r4, [r1, #0]
   1e592:	42a3      	cmp	r3, r4
   1e594:	d11d      	bne.n	1e5d2 <memcmp+0x52>
   1e596:	440a      	add	r2, r1
   1e598:	3101      	adds	r1, #1
   1e59a:	e005      	b.n	1e5a8 <memcmp+0x28>
   1e59c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e5a0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e5a4:	42a3      	cmp	r3, r4
   1e5a6:	d114      	bne.n	1e5d2 <memcmp+0x52>
   1e5a8:	4291      	cmp	r1, r2
   1e5aa:	d1f7      	bne.n	1e59c <memcmp+0x1c>
   1e5ac:	2000      	movs	r0, #0
   1e5ae:	bc70      	pop	{r4, r5, r6}
   1e5b0:	4770      	bx	lr
   1e5b2:	680d      	ldr	r5, [r1, #0]
   1e5b4:	6806      	ldr	r6, [r0, #0]
   1e5b6:	42ae      	cmp	r6, r5
   1e5b8:	460c      	mov	r4, r1
   1e5ba:	4603      	mov	r3, r0
   1e5bc:	f101 0104 	add.w	r1, r1, #4
   1e5c0:	f100 0004 	add.w	r0, r0, #4
   1e5c4:	d108      	bne.n	1e5d8 <memcmp+0x58>
   1e5c6:	3a04      	subs	r2, #4
   1e5c8:	2a03      	cmp	r2, #3
   1e5ca:	d8f2      	bhi.n	1e5b2 <memcmp+0x32>
   1e5cc:	2a00      	cmp	r2, #0
   1e5ce:	d1de      	bne.n	1e58e <memcmp+0xe>
   1e5d0:	e7ec      	b.n	1e5ac <memcmp+0x2c>
   1e5d2:	1b18      	subs	r0, r3, r4
   1e5d4:	bc70      	pop	{r4, r5, r6}
   1e5d6:	4770      	bx	lr
   1e5d8:	4621      	mov	r1, r4
   1e5da:	4618      	mov	r0, r3
   1e5dc:	e7d7      	b.n	1e58e <memcmp+0xe>
   1e5de:	bf00      	nop

0001e5e0 <memcpy>:
   1e5e0:	4684      	mov	ip, r0
   1e5e2:	ea41 0300 	orr.w	r3, r1, r0
   1e5e6:	f013 0303 	ands.w	r3, r3, #3
   1e5ea:	d16d      	bne.n	1e6c8 <memcpy+0xe8>
   1e5ec:	3a40      	subs	r2, #64	; 0x40
   1e5ee:	d341      	bcc.n	1e674 <memcpy+0x94>
   1e5f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e5f4:	f840 3b04 	str.w	r3, [r0], #4
   1e5f8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e5fc:	f840 3b04 	str.w	r3, [r0], #4
   1e600:	f851 3b04 	ldr.w	r3, [r1], #4
   1e604:	f840 3b04 	str.w	r3, [r0], #4
   1e608:	f851 3b04 	ldr.w	r3, [r1], #4
   1e60c:	f840 3b04 	str.w	r3, [r0], #4
   1e610:	f851 3b04 	ldr.w	r3, [r1], #4
   1e614:	f840 3b04 	str.w	r3, [r0], #4
   1e618:	f851 3b04 	ldr.w	r3, [r1], #4
   1e61c:	f840 3b04 	str.w	r3, [r0], #4
   1e620:	f851 3b04 	ldr.w	r3, [r1], #4
   1e624:	f840 3b04 	str.w	r3, [r0], #4
   1e628:	f851 3b04 	ldr.w	r3, [r1], #4
   1e62c:	f840 3b04 	str.w	r3, [r0], #4
   1e630:	f851 3b04 	ldr.w	r3, [r1], #4
   1e634:	f840 3b04 	str.w	r3, [r0], #4
   1e638:	f851 3b04 	ldr.w	r3, [r1], #4
   1e63c:	f840 3b04 	str.w	r3, [r0], #4
   1e640:	f851 3b04 	ldr.w	r3, [r1], #4
   1e644:	f840 3b04 	str.w	r3, [r0], #4
   1e648:	f851 3b04 	ldr.w	r3, [r1], #4
   1e64c:	f840 3b04 	str.w	r3, [r0], #4
   1e650:	f851 3b04 	ldr.w	r3, [r1], #4
   1e654:	f840 3b04 	str.w	r3, [r0], #4
   1e658:	f851 3b04 	ldr.w	r3, [r1], #4
   1e65c:	f840 3b04 	str.w	r3, [r0], #4
   1e660:	f851 3b04 	ldr.w	r3, [r1], #4
   1e664:	f840 3b04 	str.w	r3, [r0], #4
   1e668:	f851 3b04 	ldr.w	r3, [r1], #4
   1e66c:	f840 3b04 	str.w	r3, [r0], #4
   1e670:	3a40      	subs	r2, #64	; 0x40
   1e672:	d2bd      	bcs.n	1e5f0 <memcpy+0x10>
   1e674:	3230      	adds	r2, #48	; 0x30
   1e676:	d311      	bcc.n	1e69c <memcpy+0xbc>
   1e678:	f851 3b04 	ldr.w	r3, [r1], #4
   1e67c:	f840 3b04 	str.w	r3, [r0], #4
   1e680:	f851 3b04 	ldr.w	r3, [r1], #4
   1e684:	f840 3b04 	str.w	r3, [r0], #4
   1e688:	f851 3b04 	ldr.w	r3, [r1], #4
   1e68c:	f840 3b04 	str.w	r3, [r0], #4
   1e690:	f851 3b04 	ldr.w	r3, [r1], #4
   1e694:	f840 3b04 	str.w	r3, [r0], #4
   1e698:	3a10      	subs	r2, #16
   1e69a:	d2ed      	bcs.n	1e678 <memcpy+0x98>
   1e69c:	320c      	adds	r2, #12
   1e69e:	d305      	bcc.n	1e6ac <memcpy+0xcc>
   1e6a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e6a4:	f840 3b04 	str.w	r3, [r0], #4
   1e6a8:	3a04      	subs	r2, #4
   1e6aa:	d2f9      	bcs.n	1e6a0 <memcpy+0xc0>
   1e6ac:	3204      	adds	r2, #4
   1e6ae:	d008      	beq.n	1e6c2 <memcpy+0xe2>
   1e6b0:	07d2      	lsls	r2, r2, #31
   1e6b2:	bf1c      	itt	ne
   1e6b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e6b8:	f800 3b01 	strbne.w	r3, [r0], #1
   1e6bc:	d301      	bcc.n	1e6c2 <memcpy+0xe2>
   1e6be:	880b      	ldrh	r3, [r1, #0]
   1e6c0:	8003      	strh	r3, [r0, #0]
   1e6c2:	4660      	mov	r0, ip
   1e6c4:	4770      	bx	lr
   1e6c6:	bf00      	nop
   1e6c8:	2a08      	cmp	r2, #8
   1e6ca:	d313      	bcc.n	1e6f4 <memcpy+0x114>
   1e6cc:	078b      	lsls	r3, r1, #30
   1e6ce:	d08d      	beq.n	1e5ec <memcpy+0xc>
   1e6d0:	f010 0303 	ands.w	r3, r0, #3
   1e6d4:	d08a      	beq.n	1e5ec <memcpy+0xc>
   1e6d6:	f1c3 0304 	rsb	r3, r3, #4
   1e6da:	1ad2      	subs	r2, r2, r3
   1e6dc:	07db      	lsls	r3, r3, #31
   1e6de:	bf1c      	itt	ne
   1e6e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e6e4:	f800 3b01 	strbne.w	r3, [r0], #1
   1e6e8:	d380      	bcc.n	1e5ec <memcpy+0xc>
   1e6ea:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e6ee:	f820 3b02 	strh.w	r3, [r0], #2
   1e6f2:	e77b      	b.n	1e5ec <memcpy+0xc>
   1e6f4:	3a04      	subs	r2, #4
   1e6f6:	d3d9      	bcc.n	1e6ac <memcpy+0xcc>
   1e6f8:	3a01      	subs	r2, #1
   1e6fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e6fe:	f800 3b01 	strb.w	r3, [r0], #1
   1e702:	d2f9      	bcs.n	1e6f8 <memcpy+0x118>
   1e704:	780b      	ldrb	r3, [r1, #0]
   1e706:	7003      	strb	r3, [r0, #0]
   1e708:	784b      	ldrb	r3, [r1, #1]
   1e70a:	7043      	strb	r3, [r0, #1]
   1e70c:	788b      	ldrb	r3, [r1, #2]
   1e70e:	7083      	strb	r3, [r0, #2]
   1e710:	4660      	mov	r0, ip
   1e712:	4770      	bx	lr

0001e714 <memmove>:
   1e714:	4288      	cmp	r0, r1
   1e716:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e718:	d90d      	bls.n	1e736 <memmove+0x22>
   1e71a:	188b      	adds	r3, r1, r2
   1e71c:	4298      	cmp	r0, r3
   1e71e:	d20a      	bcs.n	1e736 <memmove+0x22>
   1e720:	1884      	adds	r4, r0, r2
   1e722:	2a00      	cmp	r2, #0
   1e724:	d051      	beq.n	1e7ca <memmove+0xb6>
   1e726:	4622      	mov	r2, r4
   1e728:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e72c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e730:	4299      	cmp	r1, r3
   1e732:	d1f9      	bne.n	1e728 <memmove+0x14>
   1e734:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e736:	2a0f      	cmp	r2, #15
   1e738:	d948      	bls.n	1e7cc <memmove+0xb8>
   1e73a:	ea41 0300 	orr.w	r3, r1, r0
   1e73e:	079b      	lsls	r3, r3, #30
   1e740:	d146      	bne.n	1e7d0 <memmove+0xbc>
   1e742:	f100 0410 	add.w	r4, r0, #16
   1e746:	f101 0310 	add.w	r3, r1, #16
   1e74a:	4615      	mov	r5, r2
   1e74c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e750:	f844 6c10 	str.w	r6, [r4, #-16]
   1e754:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e758:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e75c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e760:	f844 6c08 	str.w	r6, [r4, #-8]
   1e764:	3d10      	subs	r5, #16
   1e766:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e76a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e76e:	2d0f      	cmp	r5, #15
   1e770:	f103 0310 	add.w	r3, r3, #16
   1e774:	f104 0410 	add.w	r4, r4, #16
   1e778:	d8e8      	bhi.n	1e74c <memmove+0x38>
   1e77a:	f1a2 0310 	sub.w	r3, r2, #16
   1e77e:	f023 030f 	bic.w	r3, r3, #15
   1e782:	f002 0e0f 	and.w	lr, r2, #15
   1e786:	3310      	adds	r3, #16
   1e788:	f1be 0f03 	cmp.w	lr, #3
   1e78c:	4419      	add	r1, r3
   1e78e:	4403      	add	r3, r0
   1e790:	d921      	bls.n	1e7d6 <memmove+0xc2>
   1e792:	1f1e      	subs	r6, r3, #4
   1e794:	460d      	mov	r5, r1
   1e796:	4674      	mov	r4, lr
   1e798:	3c04      	subs	r4, #4
   1e79a:	f855 7b04 	ldr.w	r7, [r5], #4
   1e79e:	f846 7f04 	str.w	r7, [r6, #4]!
   1e7a2:	2c03      	cmp	r4, #3
   1e7a4:	d8f8      	bhi.n	1e798 <memmove+0x84>
   1e7a6:	f1ae 0404 	sub.w	r4, lr, #4
   1e7aa:	f024 0403 	bic.w	r4, r4, #3
   1e7ae:	3404      	adds	r4, #4
   1e7b0:	4421      	add	r1, r4
   1e7b2:	4423      	add	r3, r4
   1e7b4:	f002 0203 	and.w	r2, r2, #3
   1e7b8:	b162      	cbz	r2, 1e7d4 <memmove+0xc0>
   1e7ba:	3b01      	subs	r3, #1
   1e7bc:	440a      	add	r2, r1
   1e7be:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e7c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e7c6:	428a      	cmp	r2, r1
   1e7c8:	d1f9      	bne.n	1e7be <memmove+0xaa>
   1e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7cc:	4603      	mov	r3, r0
   1e7ce:	e7f3      	b.n	1e7b8 <memmove+0xa4>
   1e7d0:	4603      	mov	r3, r0
   1e7d2:	e7f2      	b.n	1e7ba <memmove+0xa6>
   1e7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7d6:	4672      	mov	r2, lr
   1e7d8:	e7ee      	b.n	1e7b8 <memmove+0xa4>
   1e7da:	bf00      	nop

0001e7dc <memset>:
   1e7dc:	b470      	push	{r4, r5, r6}
   1e7de:	0786      	lsls	r6, r0, #30
   1e7e0:	d046      	beq.n	1e870 <memset+0x94>
   1e7e2:	1e54      	subs	r4, r2, #1
   1e7e4:	2a00      	cmp	r2, #0
   1e7e6:	d041      	beq.n	1e86c <memset+0x90>
   1e7e8:	b2ca      	uxtb	r2, r1
   1e7ea:	4603      	mov	r3, r0
   1e7ec:	e002      	b.n	1e7f4 <memset+0x18>
   1e7ee:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e7f2:	d33b      	bcc.n	1e86c <memset+0x90>
   1e7f4:	f803 2b01 	strb.w	r2, [r3], #1
   1e7f8:	079d      	lsls	r5, r3, #30
   1e7fa:	d1f8      	bne.n	1e7ee <memset+0x12>
   1e7fc:	2c03      	cmp	r4, #3
   1e7fe:	d92e      	bls.n	1e85e <memset+0x82>
   1e800:	b2cd      	uxtb	r5, r1
   1e802:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e806:	2c0f      	cmp	r4, #15
   1e808:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e80c:	d919      	bls.n	1e842 <memset+0x66>
   1e80e:	f103 0210 	add.w	r2, r3, #16
   1e812:	4626      	mov	r6, r4
   1e814:	3e10      	subs	r6, #16
   1e816:	2e0f      	cmp	r6, #15
   1e818:	f842 5c10 	str.w	r5, [r2, #-16]
   1e81c:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e820:	f842 5c08 	str.w	r5, [r2, #-8]
   1e824:	f842 5c04 	str.w	r5, [r2, #-4]
   1e828:	f102 0210 	add.w	r2, r2, #16
   1e82c:	d8f2      	bhi.n	1e814 <memset+0x38>
   1e82e:	f1a4 0210 	sub.w	r2, r4, #16
   1e832:	f022 020f 	bic.w	r2, r2, #15
   1e836:	f004 040f 	and.w	r4, r4, #15
   1e83a:	3210      	adds	r2, #16
   1e83c:	2c03      	cmp	r4, #3
   1e83e:	4413      	add	r3, r2
   1e840:	d90d      	bls.n	1e85e <memset+0x82>
   1e842:	461e      	mov	r6, r3
   1e844:	4622      	mov	r2, r4
   1e846:	3a04      	subs	r2, #4
   1e848:	2a03      	cmp	r2, #3
   1e84a:	f846 5b04 	str.w	r5, [r6], #4
   1e84e:	d8fa      	bhi.n	1e846 <memset+0x6a>
   1e850:	1f22      	subs	r2, r4, #4
   1e852:	f022 0203 	bic.w	r2, r2, #3
   1e856:	3204      	adds	r2, #4
   1e858:	4413      	add	r3, r2
   1e85a:	f004 0403 	and.w	r4, r4, #3
   1e85e:	b12c      	cbz	r4, 1e86c <memset+0x90>
   1e860:	b2c9      	uxtb	r1, r1
   1e862:	441c      	add	r4, r3
   1e864:	f803 1b01 	strb.w	r1, [r3], #1
   1e868:	429c      	cmp	r4, r3
   1e86a:	d1fb      	bne.n	1e864 <memset+0x88>
   1e86c:	bc70      	pop	{r4, r5, r6}
   1e86e:	4770      	bx	lr
   1e870:	4614      	mov	r4, r2
   1e872:	4603      	mov	r3, r0
   1e874:	e7c2      	b.n	1e7fc <memset+0x20>
   1e876:	bf00      	nop

0001e878 <__malloc_lock>:
   1e878:	4801      	ldr	r0, [pc, #4]	; (1e880 <__malloc_lock+0x8>)
   1e87a:	f7ff bb55 	b.w	1df28 <__retarget_lock_acquire_recursive>
   1e87e:	bf00      	nop
   1e880:	20002398 	.word	0x20002398

0001e884 <__malloc_unlock>:
   1e884:	4801      	ldr	r0, [pc, #4]	; (1e88c <__malloc_unlock+0x8>)
   1e886:	f7ff bb51 	b.w	1df2c <__retarget_lock_release_recursive>
   1e88a:	bf00      	nop
   1e88c:	20002398 	.word	0x20002398

0001e890 <_putc_r>:
   1e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e892:	460e      	mov	r6, r1
   1e894:	4614      	mov	r4, r2
   1e896:	4607      	mov	r7, r0
   1e898:	b108      	cbz	r0, 1e89e <_putc_r+0xe>
   1e89a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e89c:	b34b      	cbz	r3, 1e8f2 <_putc_r+0x62>
   1e89e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e8a0:	07d8      	lsls	r0, r3, #31
   1e8a2:	d402      	bmi.n	1e8aa <_putc_r+0x1a>
   1e8a4:	89a3      	ldrh	r3, [r4, #12]
   1e8a6:	0599      	lsls	r1, r3, #22
   1e8a8:	d526      	bpl.n	1e8f8 <_putc_r+0x68>
   1e8aa:	68a3      	ldr	r3, [r4, #8]
   1e8ac:	3b01      	subs	r3, #1
   1e8ae:	2b00      	cmp	r3, #0
   1e8b0:	60a3      	str	r3, [r4, #8]
   1e8b2:	db11      	blt.n	1e8d8 <_putc_r+0x48>
   1e8b4:	b2f5      	uxtb	r5, r6
   1e8b6:	6823      	ldr	r3, [r4, #0]
   1e8b8:	1c5a      	adds	r2, r3, #1
   1e8ba:	6022      	str	r2, [r4, #0]
   1e8bc:	701e      	strb	r6, [r3, #0]
   1e8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e8c0:	07da      	lsls	r2, r3, #31
   1e8c2:	d402      	bmi.n	1e8ca <_putc_r+0x3a>
   1e8c4:	89a3      	ldrh	r3, [r4, #12]
   1e8c6:	059b      	lsls	r3, r3, #22
   1e8c8:	d501      	bpl.n	1e8ce <_putc_r+0x3e>
   1e8ca:	4628      	mov	r0, r5
   1e8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e8ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e8d0:	f7ff fb2c 	bl	1df2c <__retarget_lock_release_recursive>
   1e8d4:	4628      	mov	r0, r5
   1e8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e8d8:	69a2      	ldr	r2, [r4, #24]
   1e8da:	4293      	cmp	r3, r2
   1e8dc:	db02      	blt.n	1e8e4 <_putc_r+0x54>
   1e8de:	b2f5      	uxtb	r5, r6
   1e8e0:	2d0a      	cmp	r5, #10
   1e8e2:	d1e8      	bne.n	1e8b6 <_putc_r+0x26>
   1e8e4:	4631      	mov	r1, r6
   1e8e6:	4638      	mov	r0, r7
   1e8e8:	4622      	mov	r2, r4
   1e8ea:	f001 ff1f 	bl	2072c <__swbuf_r>
   1e8ee:	4605      	mov	r5, r0
   1e8f0:	e7e5      	b.n	1e8be <_putc_r+0x2e>
   1e8f2:	f003 f8bf 	bl	21a74 <__sinit>
   1e8f6:	e7d2      	b.n	1e89e <_putc_r+0xe>
   1e8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e8fa:	f7ff fb15 	bl	1df28 <__retarget_lock_acquire_recursive>
   1e8fe:	e7d4      	b.n	1e8aa <_putc_r+0x1a>

0001e900 <realloc>:
   1e900:	4b02      	ldr	r3, [pc, #8]	; (1e90c <realloc+0xc>)
   1e902:	460a      	mov	r2, r1
   1e904:	4601      	mov	r1, r0
   1e906:	6818      	ldr	r0, [r3, #0]
   1e908:	f000 b802 	b.w	1e910 <_realloc_r>
   1e90c:	20000100 	.word	0x20000100

0001e910 <_realloc_r>:
   1e910:	2900      	cmp	r1, #0
   1e912:	f000 8095 	beq.w	1ea40 <_realloc_r+0x130>
   1e916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e91a:	460d      	mov	r5, r1
   1e91c:	4616      	mov	r6, r2
   1e91e:	b083      	sub	sp, #12
   1e920:	4680      	mov	r8, r0
   1e922:	f106 070b 	add.w	r7, r6, #11
   1e926:	f7ff ffa7 	bl	1e878 <__malloc_lock>
   1e92a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e92e:	2f16      	cmp	r7, #22
   1e930:	f02e 0403 	bic.w	r4, lr, #3
   1e934:	f1a5 0908 	sub.w	r9, r5, #8
   1e938:	d83c      	bhi.n	1e9b4 <_realloc_r+0xa4>
   1e93a:	2210      	movs	r2, #16
   1e93c:	4617      	mov	r7, r2
   1e93e:	42be      	cmp	r6, r7
   1e940:	d83d      	bhi.n	1e9be <_realloc_r+0xae>
   1e942:	4294      	cmp	r4, r2
   1e944:	da43      	bge.n	1e9ce <_realloc_r+0xbe>
   1e946:	4bc4      	ldr	r3, [pc, #784]	; (1ec58 <_realloc_r+0x348>)
   1e948:	6899      	ldr	r1, [r3, #8]
   1e94a:	eb09 0004 	add.w	r0, r9, r4
   1e94e:	4288      	cmp	r0, r1
   1e950:	f000 80b4 	beq.w	1eabc <_realloc_r+0x1ac>
   1e954:	6843      	ldr	r3, [r0, #4]
   1e956:	f023 0101 	bic.w	r1, r3, #1
   1e95a:	4401      	add	r1, r0
   1e95c:	6849      	ldr	r1, [r1, #4]
   1e95e:	07c9      	lsls	r1, r1, #31
   1e960:	d54c      	bpl.n	1e9fc <_realloc_r+0xec>
   1e962:	f01e 0f01 	tst.w	lr, #1
   1e966:	f000 809b 	beq.w	1eaa0 <_realloc_r+0x190>
   1e96a:	4631      	mov	r1, r6
   1e96c:	4640      	mov	r0, r8
   1e96e:	f7ff faef 	bl	1df50 <_malloc_r>
   1e972:	4606      	mov	r6, r0
   1e974:	2800      	cmp	r0, #0
   1e976:	d03a      	beq.n	1e9ee <_realloc_r+0xde>
   1e978:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e97c:	f023 0301 	bic.w	r3, r3, #1
   1e980:	444b      	add	r3, r9
   1e982:	f1a0 0208 	sub.w	r2, r0, #8
   1e986:	429a      	cmp	r2, r3
   1e988:	f000 8121 	beq.w	1ebce <_realloc_r+0x2be>
   1e98c:	1f22      	subs	r2, r4, #4
   1e98e:	2a24      	cmp	r2, #36	; 0x24
   1e990:	f200 8107 	bhi.w	1eba2 <_realloc_r+0x292>
   1e994:	2a13      	cmp	r2, #19
   1e996:	f200 80db 	bhi.w	1eb50 <_realloc_r+0x240>
   1e99a:	4603      	mov	r3, r0
   1e99c:	462a      	mov	r2, r5
   1e99e:	6811      	ldr	r1, [r2, #0]
   1e9a0:	6019      	str	r1, [r3, #0]
   1e9a2:	6851      	ldr	r1, [r2, #4]
   1e9a4:	6059      	str	r1, [r3, #4]
   1e9a6:	6892      	ldr	r2, [r2, #8]
   1e9a8:	609a      	str	r2, [r3, #8]
   1e9aa:	4629      	mov	r1, r5
   1e9ac:	4640      	mov	r0, r8
   1e9ae:	f003 f903 	bl	21bb8 <_free_r>
   1e9b2:	e01c      	b.n	1e9ee <_realloc_r+0xde>
   1e9b4:	f027 0707 	bic.w	r7, r7, #7
   1e9b8:	2f00      	cmp	r7, #0
   1e9ba:	463a      	mov	r2, r7
   1e9bc:	dabf      	bge.n	1e93e <_realloc_r+0x2e>
   1e9be:	2600      	movs	r6, #0
   1e9c0:	230c      	movs	r3, #12
   1e9c2:	4630      	mov	r0, r6
   1e9c4:	f8c8 3000 	str.w	r3, [r8]
   1e9c8:	b003      	add	sp, #12
   1e9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9ce:	462e      	mov	r6, r5
   1e9d0:	1be3      	subs	r3, r4, r7
   1e9d2:	2b0f      	cmp	r3, #15
   1e9d4:	d81e      	bhi.n	1ea14 <_realloc_r+0x104>
   1e9d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e9da:	f003 0301 	and.w	r3, r3, #1
   1e9de:	4323      	orrs	r3, r4
   1e9e0:	444c      	add	r4, r9
   1e9e2:	f8c9 3004 	str.w	r3, [r9, #4]
   1e9e6:	6863      	ldr	r3, [r4, #4]
   1e9e8:	f043 0301 	orr.w	r3, r3, #1
   1e9ec:	6063      	str	r3, [r4, #4]
   1e9ee:	4640      	mov	r0, r8
   1e9f0:	f7ff ff48 	bl	1e884 <__malloc_unlock>
   1e9f4:	4630      	mov	r0, r6
   1e9f6:	b003      	add	sp, #12
   1e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9fc:	f023 0303 	bic.w	r3, r3, #3
   1ea00:	18e1      	adds	r1, r4, r3
   1ea02:	4291      	cmp	r1, r2
   1ea04:	db1f      	blt.n	1ea46 <_realloc_r+0x136>
   1ea06:	68c3      	ldr	r3, [r0, #12]
   1ea08:	6882      	ldr	r2, [r0, #8]
   1ea0a:	462e      	mov	r6, r5
   1ea0c:	60d3      	str	r3, [r2, #12]
   1ea0e:	460c      	mov	r4, r1
   1ea10:	609a      	str	r2, [r3, #8]
   1ea12:	e7dd      	b.n	1e9d0 <_realloc_r+0xc0>
   1ea14:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1ea18:	eb09 0107 	add.w	r1, r9, r7
   1ea1c:	f002 0201 	and.w	r2, r2, #1
   1ea20:	444c      	add	r4, r9
   1ea22:	f043 0301 	orr.w	r3, r3, #1
   1ea26:	4317      	orrs	r7, r2
   1ea28:	f8c9 7004 	str.w	r7, [r9, #4]
   1ea2c:	604b      	str	r3, [r1, #4]
   1ea2e:	6863      	ldr	r3, [r4, #4]
   1ea30:	f043 0301 	orr.w	r3, r3, #1
   1ea34:	3108      	adds	r1, #8
   1ea36:	6063      	str	r3, [r4, #4]
   1ea38:	4640      	mov	r0, r8
   1ea3a:	f003 f8bd 	bl	21bb8 <_free_r>
   1ea3e:	e7d6      	b.n	1e9ee <_realloc_r+0xde>
   1ea40:	4611      	mov	r1, r2
   1ea42:	f7ff ba85 	b.w	1df50 <_malloc_r>
   1ea46:	f01e 0f01 	tst.w	lr, #1
   1ea4a:	d18e      	bne.n	1e96a <_realloc_r+0x5a>
   1ea4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1ea50:	eba9 0a01 	sub.w	sl, r9, r1
   1ea54:	f8da 1004 	ldr.w	r1, [sl, #4]
   1ea58:	f021 0103 	bic.w	r1, r1, #3
   1ea5c:	440b      	add	r3, r1
   1ea5e:	4423      	add	r3, r4
   1ea60:	4293      	cmp	r3, r2
   1ea62:	db25      	blt.n	1eab0 <_realloc_r+0x1a0>
   1ea64:	68c2      	ldr	r2, [r0, #12]
   1ea66:	6881      	ldr	r1, [r0, #8]
   1ea68:	4656      	mov	r6, sl
   1ea6a:	60ca      	str	r2, [r1, #12]
   1ea6c:	6091      	str	r1, [r2, #8]
   1ea6e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1ea72:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1ea76:	1f22      	subs	r2, r4, #4
   1ea78:	2a24      	cmp	r2, #36	; 0x24
   1ea7a:	60c1      	str	r1, [r0, #12]
   1ea7c:	6088      	str	r0, [r1, #8]
   1ea7e:	f200 8094 	bhi.w	1ebaa <_realloc_r+0x29a>
   1ea82:	2a13      	cmp	r2, #19
   1ea84:	d96f      	bls.n	1eb66 <_realloc_r+0x256>
   1ea86:	6829      	ldr	r1, [r5, #0]
   1ea88:	f8ca 1008 	str.w	r1, [sl, #8]
   1ea8c:	6869      	ldr	r1, [r5, #4]
   1ea8e:	f8ca 100c 	str.w	r1, [sl, #12]
   1ea92:	2a1b      	cmp	r2, #27
   1ea94:	f200 80a2 	bhi.w	1ebdc <_realloc_r+0x2cc>
   1ea98:	3508      	adds	r5, #8
   1ea9a:	f10a 0210 	add.w	r2, sl, #16
   1ea9e:	e063      	b.n	1eb68 <_realloc_r+0x258>
   1eaa0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1eaa4:	eba9 0a03 	sub.w	sl, r9, r3
   1eaa8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1eaac:	f021 0103 	bic.w	r1, r1, #3
   1eab0:	1863      	adds	r3, r4, r1
   1eab2:	4293      	cmp	r3, r2
   1eab4:	f6ff af59 	blt.w	1e96a <_realloc_r+0x5a>
   1eab8:	4656      	mov	r6, sl
   1eaba:	e7d8      	b.n	1ea6e <_realloc_r+0x15e>
   1eabc:	6841      	ldr	r1, [r0, #4]
   1eabe:	f021 0b03 	bic.w	fp, r1, #3
   1eac2:	44a3      	add	fp, r4
   1eac4:	f107 0010 	add.w	r0, r7, #16
   1eac8:	4583      	cmp	fp, r0
   1eaca:	da56      	bge.n	1eb7a <_realloc_r+0x26a>
   1eacc:	f01e 0f01 	tst.w	lr, #1
   1ead0:	f47f af4b 	bne.w	1e96a <_realloc_r+0x5a>
   1ead4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1ead8:	eba9 0a01 	sub.w	sl, r9, r1
   1eadc:	f8da 1004 	ldr.w	r1, [sl, #4]
   1eae0:	f021 0103 	bic.w	r1, r1, #3
   1eae4:	448b      	add	fp, r1
   1eae6:	4558      	cmp	r0, fp
   1eae8:	dce2      	bgt.n	1eab0 <_realloc_r+0x1a0>
   1eaea:	4656      	mov	r6, sl
   1eaec:	f8da 100c 	ldr.w	r1, [sl, #12]
   1eaf0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1eaf4:	1f22      	subs	r2, r4, #4
   1eaf6:	2a24      	cmp	r2, #36	; 0x24
   1eaf8:	60c1      	str	r1, [r0, #12]
   1eafa:	6088      	str	r0, [r1, #8]
   1eafc:	f200 808f 	bhi.w	1ec1e <_realloc_r+0x30e>
   1eb00:	2a13      	cmp	r2, #19
   1eb02:	f240 808a 	bls.w	1ec1a <_realloc_r+0x30a>
   1eb06:	6829      	ldr	r1, [r5, #0]
   1eb08:	f8ca 1008 	str.w	r1, [sl, #8]
   1eb0c:	6869      	ldr	r1, [r5, #4]
   1eb0e:	f8ca 100c 	str.w	r1, [sl, #12]
   1eb12:	2a1b      	cmp	r2, #27
   1eb14:	f200 808a 	bhi.w	1ec2c <_realloc_r+0x31c>
   1eb18:	3508      	adds	r5, #8
   1eb1a:	f10a 0210 	add.w	r2, sl, #16
   1eb1e:	6829      	ldr	r1, [r5, #0]
   1eb20:	6011      	str	r1, [r2, #0]
   1eb22:	6869      	ldr	r1, [r5, #4]
   1eb24:	6051      	str	r1, [r2, #4]
   1eb26:	68a9      	ldr	r1, [r5, #8]
   1eb28:	6091      	str	r1, [r2, #8]
   1eb2a:	eb0a 0107 	add.w	r1, sl, r7
   1eb2e:	ebab 0207 	sub.w	r2, fp, r7
   1eb32:	f042 0201 	orr.w	r2, r2, #1
   1eb36:	6099      	str	r1, [r3, #8]
   1eb38:	604a      	str	r2, [r1, #4]
   1eb3a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1eb3e:	f003 0301 	and.w	r3, r3, #1
   1eb42:	431f      	orrs	r7, r3
   1eb44:	4640      	mov	r0, r8
   1eb46:	f8ca 7004 	str.w	r7, [sl, #4]
   1eb4a:	f7ff fe9b 	bl	1e884 <__malloc_unlock>
   1eb4e:	e751      	b.n	1e9f4 <_realloc_r+0xe4>
   1eb50:	682b      	ldr	r3, [r5, #0]
   1eb52:	6003      	str	r3, [r0, #0]
   1eb54:	686b      	ldr	r3, [r5, #4]
   1eb56:	6043      	str	r3, [r0, #4]
   1eb58:	2a1b      	cmp	r2, #27
   1eb5a:	d82d      	bhi.n	1ebb8 <_realloc_r+0x2a8>
   1eb5c:	f100 0308 	add.w	r3, r0, #8
   1eb60:	f105 0208 	add.w	r2, r5, #8
   1eb64:	e71b      	b.n	1e99e <_realloc_r+0x8e>
   1eb66:	4632      	mov	r2, r6
   1eb68:	6829      	ldr	r1, [r5, #0]
   1eb6a:	6011      	str	r1, [r2, #0]
   1eb6c:	6869      	ldr	r1, [r5, #4]
   1eb6e:	6051      	str	r1, [r2, #4]
   1eb70:	68a9      	ldr	r1, [r5, #8]
   1eb72:	6091      	str	r1, [r2, #8]
   1eb74:	461c      	mov	r4, r3
   1eb76:	46d1      	mov	r9, sl
   1eb78:	e72a      	b.n	1e9d0 <_realloc_r+0xc0>
   1eb7a:	eb09 0107 	add.w	r1, r9, r7
   1eb7e:	ebab 0b07 	sub.w	fp, fp, r7
   1eb82:	f04b 0201 	orr.w	r2, fp, #1
   1eb86:	6099      	str	r1, [r3, #8]
   1eb88:	604a      	str	r2, [r1, #4]
   1eb8a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1eb8e:	f003 0301 	and.w	r3, r3, #1
   1eb92:	431f      	orrs	r7, r3
   1eb94:	4640      	mov	r0, r8
   1eb96:	f845 7c04 	str.w	r7, [r5, #-4]
   1eb9a:	f7ff fe73 	bl	1e884 <__malloc_unlock>
   1eb9e:	462e      	mov	r6, r5
   1eba0:	e728      	b.n	1e9f4 <_realloc_r+0xe4>
   1eba2:	4629      	mov	r1, r5
   1eba4:	f7ff fdb6 	bl	1e714 <memmove>
   1eba8:	e6ff      	b.n	1e9aa <_realloc_r+0x9a>
   1ebaa:	4629      	mov	r1, r5
   1ebac:	4630      	mov	r0, r6
   1ebae:	461c      	mov	r4, r3
   1ebb0:	46d1      	mov	r9, sl
   1ebb2:	f7ff fdaf 	bl	1e714 <memmove>
   1ebb6:	e70b      	b.n	1e9d0 <_realloc_r+0xc0>
   1ebb8:	68ab      	ldr	r3, [r5, #8]
   1ebba:	6083      	str	r3, [r0, #8]
   1ebbc:	68eb      	ldr	r3, [r5, #12]
   1ebbe:	60c3      	str	r3, [r0, #12]
   1ebc0:	2a24      	cmp	r2, #36	; 0x24
   1ebc2:	d017      	beq.n	1ebf4 <_realloc_r+0x2e4>
   1ebc4:	f100 0310 	add.w	r3, r0, #16
   1ebc8:	f105 0210 	add.w	r2, r5, #16
   1ebcc:	e6e7      	b.n	1e99e <_realloc_r+0x8e>
   1ebce:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1ebd2:	f023 0303 	bic.w	r3, r3, #3
   1ebd6:	441c      	add	r4, r3
   1ebd8:	462e      	mov	r6, r5
   1ebda:	e6f9      	b.n	1e9d0 <_realloc_r+0xc0>
   1ebdc:	68a9      	ldr	r1, [r5, #8]
   1ebde:	f8ca 1010 	str.w	r1, [sl, #16]
   1ebe2:	68e9      	ldr	r1, [r5, #12]
   1ebe4:	f8ca 1014 	str.w	r1, [sl, #20]
   1ebe8:	2a24      	cmp	r2, #36	; 0x24
   1ebea:	d00c      	beq.n	1ec06 <_realloc_r+0x2f6>
   1ebec:	3510      	adds	r5, #16
   1ebee:	f10a 0218 	add.w	r2, sl, #24
   1ebf2:	e7b9      	b.n	1eb68 <_realloc_r+0x258>
   1ebf4:	692b      	ldr	r3, [r5, #16]
   1ebf6:	6103      	str	r3, [r0, #16]
   1ebf8:	696b      	ldr	r3, [r5, #20]
   1ebfa:	6143      	str	r3, [r0, #20]
   1ebfc:	f105 0218 	add.w	r2, r5, #24
   1ec00:	f100 0318 	add.w	r3, r0, #24
   1ec04:	e6cb      	b.n	1e99e <_realloc_r+0x8e>
   1ec06:	692a      	ldr	r2, [r5, #16]
   1ec08:	f8ca 2018 	str.w	r2, [sl, #24]
   1ec0c:	696a      	ldr	r2, [r5, #20]
   1ec0e:	f8ca 201c 	str.w	r2, [sl, #28]
   1ec12:	3518      	adds	r5, #24
   1ec14:	f10a 0220 	add.w	r2, sl, #32
   1ec18:	e7a6      	b.n	1eb68 <_realloc_r+0x258>
   1ec1a:	4632      	mov	r2, r6
   1ec1c:	e77f      	b.n	1eb1e <_realloc_r+0x20e>
   1ec1e:	4629      	mov	r1, r5
   1ec20:	4630      	mov	r0, r6
   1ec22:	9301      	str	r3, [sp, #4]
   1ec24:	f7ff fd76 	bl	1e714 <memmove>
   1ec28:	9b01      	ldr	r3, [sp, #4]
   1ec2a:	e77e      	b.n	1eb2a <_realloc_r+0x21a>
   1ec2c:	68a9      	ldr	r1, [r5, #8]
   1ec2e:	f8ca 1010 	str.w	r1, [sl, #16]
   1ec32:	68e9      	ldr	r1, [r5, #12]
   1ec34:	f8ca 1014 	str.w	r1, [sl, #20]
   1ec38:	2a24      	cmp	r2, #36	; 0x24
   1ec3a:	d003      	beq.n	1ec44 <_realloc_r+0x334>
   1ec3c:	3510      	adds	r5, #16
   1ec3e:	f10a 0218 	add.w	r2, sl, #24
   1ec42:	e76c      	b.n	1eb1e <_realloc_r+0x20e>
   1ec44:	692a      	ldr	r2, [r5, #16]
   1ec46:	f8ca 2018 	str.w	r2, [sl, #24]
   1ec4a:	696a      	ldr	r2, [r5, #20]
   1ec4c:	f8ca 201c 	str.w	r2, [sl, #28]
   1ec50:	3518      	adds	r5, #24
   1ec52:	f10a 0220 	add.w	r2, sl, #32
   1ec56:	e762      	b.n	1eb1e <_realloc_r+0x20e>
   1ec58:	2000069c 	.word	0x2000069c

0001ec5c <_sbrk_r>:
   1ec5c:	b538      	push	{r3, r4, r5, lr}
   1ec5e:	4c07      	ldr	r4, [pc, #28]	; (1ec7c <_sbrk_r+0x20>)
   1ec60:	2300      	movs	r3, #0
   1ec62:	4605      	mov	r5, r0
   1ec64:	4608      	mov	r0, r1
   1ec66:	6023      	str	r3, [r4, #0]
   1ec68:	f003 ff74 	bl	22b54 <_sbrk>
   1ec6c:	1c43      	adds	r3, r0, #1
   1ec6e:	d000      	beq.n	1ec72 <_sbrk_r+0x16>
   1ec70:	bd38      	pop	{r3, r4, r5, pc}
   1ec72:	6823      	ldr	r3, [r4, #0]
   1ec74:	2b00      	cmp	r3, #0
   1ec76:	d0fb      	beq.n	1ec70 <_sbrk_r+0x14>
   1ec78:	602b      	str	r3, [r5, #0]
   1ec7a:	bd38      	pop	{r3, r4, r5, pc}
   1ec7c:	200023ac 	.word	0x200023ac

0001ec80 <_raise_r>:
   1ec80:	291f      	cmp	r1, #31
   1ec82:	d828      	bhi.n	1ecd6 <_raise_r+0x56>
   1ec84:	b520      	push	{r5, lr}
   1ec86:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1ec8a:	b082      	sub	sp, #8
   1ec8c:	4605      	mov	r5, r0
   1ec8e:	b1aa      	cbz	r2, 1ecbc <_raise_r+0x3c>
   1ec90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1ec94:	b193      	cbz	r3, 1ecbc <_raise_r+0x3c>
   1ec96:	2b01      	cmp	r3, #1
   1ec98:	d00e      	beq.n	1ecb8 <_raise_r+0x38>
   1ec9a:	1c58      	adds	r0, r3, #1
   1ec9c:	d007      	beq.n	1ecae <_raise_r+0x2e>
   1ec9e:	2500      	movs	r5, #0
   1eca0:	4608      	mov	r0, r1
   1eca2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1eca6:	4798      	blx	r3
   1eca8:	4628      	mov	r0, r5
   1ecaa:	b002      	add	sp, #8
   1ecac:	bd20      	pop	{r5, pc}
   1ecae:	2316      	movs	r3, #22
   1ecb0:	2001      	movs	r0, #1
   1ecb2:	602b      	str	r3, [r5, #0]
   1ecb4:	b002      	add	sp, #8
   1ecb6:	bd20      	pop	{r5, pc}
   1ecb8:	2000      	movs	r0, #0
   1ecba:	e7f6      	b.n	1ecaa <_raise_r+0x2a>
   1ecbc:	4628      	mov	r0, r5
   1ecbe:	9101      	str	r1, [sp, #4]
   1ecc0:	f000 f82a 	bl	1ed18 <_getpid_r>
   1ecc4:	9901      	ldr	r1, [sp, #4]
   1ecc6:	460a      	mov	r2, r1
   1ecc8:	4601      	mov	r1, r0
   1ecca:	4628      	mov	r0, r5
   1eccc:	b002      	add	sp, #8
   1ecce:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1ecd2:	f000 b80d 	b.w	1ecf0 <_kill_r>
   1ecd6:	2316      	movs	r3, #22
   1ecd8:	6003      	str	r3, [r0, #0]
   1ecda:	f04f 30ff 	mov.w	r0, #4294967295
   1ecde:	4770      	bx	lr

0001ece0 <raise>:
   1ece0:	4b02      	ldr	r3, [pc, #8]	; (1ecec <raise+0xc>)
   1ece2:	4601      	mov	r1, r0
   1ece4:	6818      	ldr	r0, [r3, #0]
   1ece6:	f7ff bfcb 	b.w	1ec80 <_raise_r>
   1ecea:	bf00      	nop
   1ecec:	20000100 	.word	0x20000100

0001ecf0 <_kill_r>:
   1ecf0:	b538      	push	{r3, r4, r5, lr}
   1ecf2:	460b      	mov	r3, r1
   1ecf4:	4c07      	ldr	r4, [pc, #28]	; (1ed14 <_kill_r+0x24>)
   1ecf6:	4605      	mov	r5, r0
   1ecf8:	4611      	mov	r1, r2
   1ecfa:	4618      	mov	r0, r3
   1ecfc:	2300      	movs	r3, #0
   1ecfe:	6023      	str	r3, [r4, #0]
   1ed00:	f003 ffa2 	bl	22c48 <_kill>
   1ed04:	1c43      	adds	r3, r0, #1
   1ed06:	d000      	beq.n	1ed0a <_kill_r+0x1a>
   1ed08:	bd38      	pop	{r3, r4, r5, pc}
   1ed0a:	6823      	ldr	r3, [r4, #0]
   1ed0c:	2b00      	cmp	r3, #0
   1ed0e:	d0fb      	beq.n	1ed08 <_kill_r+0x18>
   1ed10:	602b      	str	r3, [r5, #0]
   1ed12:	bd38      	pop	{r3, r4, r5, pc}
   1ed14:	200023ac 	.word	0x200023ac

0001ed18 <_getpid_r>:
   1ed18:	f003 bf1a 	b.w	22b50 <_getpid>

0001ed1c <sprintf>:
   1ed1c:	b40e      	push	{r1, r2, r3}
   1ed1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed20:	b09c      	sub	sp, #112	; 0x70
   1ed22:	ab21      	add	r3, sp, #132	; 0x84
   1ed24:	490f      	ldr	r1, [pc, #60]	; (1ed64 <sprintf+0x48>)
   1ed26:	f853 2b04 	ldr.w	r2, [r3], #4
   1ed2a:	9301      	str	r3, [sp, #4]
   1ed2c:	4605      	mov	r5, r0
   1ed2e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1ed32:	6808      	ldr	r0, [r1, #0]
   1ed34:	9502      	str	r5, [sp, #8]
   1ed36:	f44f 7702 	mov.w	r7, #520	; 0x208
   1ed3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1ed3e:	a902      	add	r1, sp, #8
   1ed40:	9506      	str	r5, [sp, #24]
   1ed42:	f8ad 7014 	strh.w	r7, [sp, #20]
   1ed46:	9404      	str	r4, [sp, #16]
   1ed48:	9407      	str	r4, [sp, #28]
   1ed4a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1ed4e:	f000 fa57 	bl	1f200 <_svfprintf_r>
   1ed52:	9b02      	ldr	r3, [sp, #8]
   1ed54:	2200      	movs	r2, #0
   1ed56:	701a      	strb	r2, [r3, #0]
   1ed58:	b01c      	add	sp, #112	; 0x70
   1ed5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ed5e:	b003      	add	sp, #12
   1ed60:	4770      	bx	lr
   1ed62:	bf00      	nop
   1ed64:	20000100 	.word	0x20000100
	...
   1ed80:	eba2 0003 	sub.w	r0, r2, r3
   1ed84:	4770      	bx	lr
   1ed86:	bf00      	nop

0001ed88 <strcmp>:
   1ed88:	7802      	ldrb	r2, [r0, #0]
   1ed8a:	780b      	ldrb	r3, [r1, #0]
   1ed8c:	2a01      	cmp	r2, #1
   1ed8e:	bf28      	it	cs
   1ed90:	429a      	cmpcs	r2, r3
   1ed92:	d1f5      	bne.n	1ed80 <sprintf+0x64>
   1ed94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1ed98:	ea40 0401 	orr.w	r4, r0, r1
   1ed9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1eda0:	f06f 0c00 	mvn.w	ip, #0
   1eda4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1eda8:	b312      	cbz	r2, 1edf0 <strcmp+0x68>
   1edaa:	ea80 0401 	eor.w	r4, r0, r1
   1edae:	f014 0f07 	tst.w	r4, #7
   1edb2:	d16a      	bne.n	1ee8a <strcmp+0x102>
   1edb4:	f000 0407 	and.w	r4, r0, #7
   1edb8:	f020 0007 	bic.w	r0, r0, #7
   1edbc:	f004 0503 	and.w	r5, r4, #3
   1edc0:	f021 0107 	bic.w	r1, r1, #7
   1edc4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1edc8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1edcc:	f014 0f04 	tst.w	r4, #4
   1edd0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1edd4:	fa0c f405 	lsl.w	r4, ip, r5
   1edd8:	ea62 0204 	orn	r2, r2, r4
   1eddc:	ea66 0604 	orn	r6, r6, r4
   1ede0:	d00a      	beq.n	1edf8 <strcmp+0x70>
   1ede2:	ea63 0304 	orn	r3, r3, r4
   1ede6:	4662      	mov	r2, ip
   1ede8:	ea67 0704 	orn	r7, r7, r4
   1edec:	4666      	mov	r6, ip
   1edee:	e003      	b.n	1edf8 <strcmp+0x70>
   1edf0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1edf4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1edf8:	fa82 f54c 	uadd8	r5, r2, ip
   1edfc:	ea82 0406 	eor.w	r4, r2, r6
   1ee00:	faa4 f48c 	sel	r4, r4, ip
   1ee04:	bb6c      	cbnz	r4, 1ee62 <strcmp+0xda>
   1ee06:	fa83 f54c 	uadd8	r5, r3, ip
   1ee0a:	ea83 0507 	eor.w	r5, r3, r7
   1ee0e:	faa5 f58c 	sel	r5, r5, ip
   1ee12:	b995      	cbnz	r5, 1ee3a <strcmp+0xb2>
   1ee14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1ee18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1ee1c:	fa82 f54c 	uadd8	r5, r2, ip
   1ee20:	ea82 0406 	eor.w	r4, r2, r6
   1ee24:	faa4 f48c 	sel	r4, r4, ip
   1ee28:	fa83 f54c 	uadd8	r5, r3, ip
   1ee2c:	ea83 0507 	eor.w	r5, r3, r7
   1ee30:	faa5 f58c 	sel	r5, r5, ip
   1ee34:	4325      	orrs	r5, r4
   1ee36:	d0db      	beq.n	1edf0 <strcmp+0x68>
   1ee38:	b99c      	cbnz	r4, 1ee62 <strcmp+0xda>
   1ee3a:	ba2d      	rev	r5, r5
   1ee3c:	fab5 f485 	clz	r4, r5
   1ee40:	f024 0407 	bic.w	r4, r4, #7
   1ee44:	fa27 f104 	lsr.w	r1, r7, r4
   1ee48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ee4c:	fa23 f304 	lsr.w	r3, r3, r4
   1ee50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ee54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ee58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ee5c:	eba0 0001 	sub.w	r0, r0, r1
   1ee60:	4770      	bx	lr
   1ee62:	ba24      	rev	r4, r4
   1ee64:	fab4 f484 	clz	r4, r4
   1ee68:	f024 0407 	bic.w	r4, r4, #7
   1ee6c:	fa26 f104 	lsr.w	r1, r6, r4
   1ee70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ee74:	fa22 f204 	lsr.w	r2, r2, r4
   1ee78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ee7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ee80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ee84:	eba0 0001 	sub.w	r0, r0, r1
   1ee88:	4770      	bx	lr
   1ee8a:	f014 0f03 	tst.w	r4, #3
   1ee8e:	d13c      	bne.n	1ef0a <strcmp+0x182>
   1ee90:	f010 0403 	ands.w	r4, r0, #3
   1ee94:	d128      	bne.n	1eee8 <strcmp+0x160>
   1ee96:	f850 2b08 	ldr.w	r2, [r0], #8
   1ee9a:	f851 3b08 	ldr.w	r3, [r1], #8
   1ee9e:	fa82 f54c 	uadd8	r5, r2, ip
   1eea2:	ea82 0503 	eor.w	r5, r2, r3
   1eea6:	faa5 f58c 	sel	r5, r5, ip
   1eeaa:	b95d      	cbnz	r5, 1eec4 <strcmp+0x13c>
   1eeac:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1eeb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1eeb4:	fa82 f54c 	uadd8	r5, r2, ip
   1eeb8:	ea82 0503 	eor.w	r5, r2, r3
   1eebc:	faa5 f58c 	sel	r5, r5, ip
   1eec0:	2d00      	cmp	r5, #0
   1eec2:	d0e8      	beq.n	1ee96 <strcmp+0x10e>
   1eec4:	ba2d      	rev	r5, r5
   1eec6:	fab5 f485 	clz	r4, r5
   1eeca:	f024 0407 	bic.w	r4, r4, #7
   1eece:	fa23 f104 	lsr.w	r1, r3, r4
   1eed2:	fa22 f204 	lsr.w	r2, r2, r4
   1eed6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1eeda:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eede:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eee2:	eba0 0001 	sub.w	r0, r0, r1
   1eee6:	4770      	bx	lr
   1eee8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1eeec:	f020 0003 	bic.w	r0, r0, #3
   1eef0:	f850 2b08 	ldr.w	r2, [r0], #8
   1eef4:	f021 0103 	bic.w	r1, r1, #3
   1eef8:	f851 3b08 	ldr.w	r3, [r1], #8
   1eefc:	fa0c f404 	lsl.w	r4, ip, r4
   1ef00:	ea62 0204 	orn	r2, r2, r4
   1ef04:	ea63 0304 	orn	r3, r3, r4
   1ef08:	e7c9      	b.n	1ee9e <strcmp+0x116>
   1ef0a:	f010 0403 	ands.w	r4, r0, #3
   1ef0e:	d01a      	beq.n	1ef46 <strcmp+0x1be>
   1ef10:	eba1 0104 	sub.w	r1, r1, r4
   1ef14:	f020 0003 	bic.w	r0, r0, #3
   1ef18:	07e4      	lsls	r4, r4, #31
   1ef1a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ef1e:	d006      	beq.n	1ef2e <strcmp+0x1a6>
   1ef20:	d20f      	bcs.n	1ef42 <strcmp+0x1ba>
   1ef22:	788b      	ldrb	r3, [r1, #2]
   1ef24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1ef28:	1ae4      	subs	r4, r4, r3
   1ef2a:	d106      	bne.n	1ef3a <strcmp+0x1b2>
   1ef2c:	b12b      	cbz	r3, 1ef3a <strcmp+0x1b2>
   1ef2e:	78cb      	ldrb	r3, [r1, #3]
   1ef30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1ef34:	1ae4      	subs	r4, r4, r3
   1ef36:	d100      	bne.n	1ef3a <strcmp+0x1b2>
   1ef38:	b91b      	cbnz	r3, 1ef42 <strcmp+0x1ba>
   1ef3a:	4620      	mov	r0, r4
   1ef3c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1ef40:	4770      	bx	lr
   1ef42:	f101 0104 	add.w	r1, r1, #4
   1ef46:	f850 2b04 	ldr.w	r2, [r0], #4
   1ef4a:	07cc      	lsls	r4, r1, #31
   1ef4c:	f021 0103 	bic.w	r1, r1, #3
   1ef50:	f851 3b04 	ldr.w	r3, [r1], #4
   1ef54:	d848      	bhi.n	1efe8 <strcmp+0x260>
   1ef56:	d224      	bcs.n	1efa2 <strcmp+0x21a>
   1ef58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1ef5c:	fa82 f54c 	uadd8	r5, r2, ip
   1ef60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1ef64:	faa5 f58c 	sel	r5, r5, ip
   1ef68:	d10a      	bne.n	1ef80 <strcmp+0x1f8>
   1ef6a:	b965      	cbnz	r5, 1ef86 <strcmp+0x1fe>
   1ef6c:	f851 3b04 	ldr.w	r3, [r1], #4
   1ef70:	ea84 0402 	eor.w	r4, r4, r2
   1ef74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1ef78:	d10e      	bne.n	1ef98 <strcmp+0x210>
   1ef7a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ef7e:	e7eb      	b.n	1ef58 <strcmp+0x1d0>
   1ef80:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1ef84:	e055      	b.n	1f032 <strcmp+0x2aa>
   1ef86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1ef8a:	d14d      	bne.n	1f028 <strcmp+0x2a0>
   1ef8c:	7808      	ldrb	r0, [r1, #0]
   1ef8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ef92:	f1c0 0000 	rsb	r0, r0, #0
   1ef96:	4770      	bx	lr
   1ef98:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ef9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1efa0:	e047      	b.n	1f032 <strcmp+0x2aa>
   1efa2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1efa6:	fa82 f54c 	uadd8	r5, r2, ip
   1efaa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1efae:	faa5 f58c 	sel	r5, r5, ip
   1efb2:	d10a      	bne.n	1efca <strcmp+0x242>
   1efb4:	b965      	cbnz	r5, 1efd0 <strcmp+0x248>
   1efb6:	f851 3b04 	ldr.w	r3, [r1], #4
   1efba:	ea84 0402 	eor.w	r4, r4, r2
   1efbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1efc2:	d10c      	bne.n	1efde <strcmp+0x256>
   1efc4:	f850 2b04 	ldr.w	r2, [r0], #4
   1efc8:	e7eb      	b.n	1efa2 <strcmp+0x21a>
   1efca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1efce:	e030      	b.n	1f032 <strcmp+0x2aa>
   1efd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1efd4:	d128      	bne.n	1f028 <strcmp+0x2a0>
   1efd6:	880b      	ldrh	r3, [r1, #0]
   1efd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1efdc:	e029      	b.n	1f032 <strcmp+0x2aa>
   1efde:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1efe2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1efe6:	e024      	b.n	1f032 <strcmp+0x2aa>
   1efe8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1efec:	fa82 f54c 	uadd8	r5, r2, ip
   1eff0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1eff4:	faa5 f58c 	sel	r5, r5, ip
   1eff8:	d10a      	bne.n	1f010 <strcmp+0x288>
   1effa:	b965      	cbnz	r5, 1f016 <strcmp+0x28e>
   1effc:	f851 3b04 	ldr.w	r3, [r1], #4
   1f000:	ea84 0402 	eor.w	r4, r4, r2
   1f004:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1f008:	d109      	bne.n	1f01e <strcmp+0x296>
   1f00a:	f850 2b04 	ldr.w	r2, [r0], #4
   1f00e:	e7eb      	b.n	1efe8 <strcmp+0x260>
   1f010:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1f014:	e00d      	b.n	1f032 <strcmp+0x2aa>
   1f016:	f015 0fff 	tst.w	r5, #255	; 0xff
   1f01a:	d105      	bne.n	1f028 <strcmp+0x2a0>
   1f01c:	680b      	ldr	r3, [r1, #0]
   1f01e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1f022:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f026:	e004      	b.n	1f032 <strcmp+0x2aa>
   1f028:	f04f 0000 	mov.w	r0, #0
   1f02c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f030:	4770      	bx	lr
   1f032:	ba12      	rev	r2, r2
   1f034:	ba1b      	rev	r3, r3
   1f036:	fa82 f44c 	uadd8	r4, r2, ip
   1f03a:	ea82 0403 	eor.w	r4, r2, r3
   1f03e:	faa4 f58c 	sel	r5, r4, ip
   1f042:	fab5 f485 	clz	r4, r5
   1f046:	fa02 f204 	lsl.w	r2, r2, r4
   1f04a:	fa03 f304 	lsl.w	r3, r3, r4
   1f04e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1f052:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1f056:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1f05a:	4770      	bx	lr
	...

0001f080 <strlen>:
   1f080:	f890 f000 	pld	[r0]
   1f084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1f088:	f020 0107 	bic.w	r1, r0, #7
   1f08c:	f06f 0c00 	mvn.w	ip, #0
   1f090:	f010 0407 	ands.w	r4, r0, #7
   1f094:	f891 f020 	pld	[r1, #32]
   1f098:	f040 8049 	bne.w	1f12e <strlen+0xae>
   1f09c:	f04f 0400 	mov.w	r4, #0
   1f0a0:	f06f 0007 	mvn.w	r0, #7
   1f0a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1f0a8:	f891 f040 	pld	[r1, #64]	; 0x40
   1f0ac:	f100 0008 	add.w	r0, r0, #8
   1f0b0:	fa82 f24c 	uadd8	r2, r2, ip
   1f0b4:	faa4 f28c 	sel	r2, r4, ip
   1f0b8:	fa83 f34c 	uadd8	r3, r3, ip
   1f0bc:	faa2 f38c 	sel	r3, r2, ip
   1f0c0:	bb4b      	cbnz	r3, 1f116 <strlen+0x96>
   1f0c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1f0c6:	fa82 f24c 	uadd8	r2, r2, ip
   1f0ca:	f100 0008 	add.w	r0, r0, #8
   1f0ce:	faa4 f28c 	sel	r2, r4, ip
   1f0d2:	fa83 f34c 	uadd8	r3, r3, ip
   1f0d6:	faa2 f38c 	sel	r3, r2, ip
   1f0da:	b9e3      	cbnz	r3, 1f116 <strlen+0x96>
   1f0dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1f0e0:	fa82 f24c 	uadd8	r2, r2, ip
   1f0e4:	f100 0008 	add.w	r0, r0, #8
   1f0e8:	faa4 f28c 	sel	r2, r4, ip
   1f0ec:	fa83 f34c 	uadd8	r3, r3, ip
   1f0f0:	faa2 f38c 	sel	r3, r2, ip
   1f0f4:	b97b      	cbnz	r3, 1f116 <strlen+0x96>
   1f0f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1f0fa:	f101 0120 	add.w	r1, r1, #32
   1f0fe:	fa82 f24c 	uadd8	r2, r2, ip
   1f102:	f100 0008 	add.w	r0, r0, #8
   1f106:	faa4 f28c 	sel	r2, r4, ip
   1f10a:	fa83 f34c 	uadd8	r3, r3, ip
   1f10e:	faa2 f38c 	sel	r3, r2, ip
   1f112:	2b00      	cmp	r3, #0
   1f114:	d0c6      	beq.n	1f0a4 <strlen+0x24>
   1f116:	2a00      	cmp	r2, #0
   1f118:	bf04      	itt	eq
   1f11a:	3004      	addeq	r0, #4
   1f11c:	461a      	moveq	r2, r3
   1f11e:	ba12      	rev	r2, r2
   1f120:	fab2 f282 	clz	r2, r2
   1f124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1f128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1f12c:	4770      	bx	lr
   1f12e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1f132:	f004 0503 	and.w	r5, r4, #3
   1f136:	f1c4 0000 	rsb	r0, r4, #0
   1f13a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1f13e:	f014 0f04 	tst.w	r4, #4
   1f142:	f891 f040 	pld	[r1, #64]	; 0x40
   1f146:	fa0c f505 	lsl.w	r5, ip, r5
   1f14a:	ea62 0205 	orn	r2, r2, r5
   1f14e:	bf1c      	itt	ne
   1f150:	ea63 0305 	ornne	r3, r3, r5
   1f154:	4662      	movne	r2, ip
   1f156:	f04f 0400 	mov.w	r4, #0
   1f15a:	e7a9      	b.n	1f0b0 <strlen+0x30>

0001f15c <strncmp>:
   1f15c:	2a00      	cmp	r2, #0
   1f15e:	d041      	beq.n	1f1e4 <strncmp+0x88>
   1f160:	ea40 0301 	orr.w	r3, r0, r1
   1f164:	f013 0303 	ands.w	r3, r3, #3
   1f168:	b4f0      	push	{r4, r5, r6, r7}
   1f16a:	d125      	bne.n	1f1b8 <strncmp+0x5c>
   1f16c:	2a03      	cmp	r2, #3
   1f16e:	d923      	bls.n	1f1b8 <strncmp+0x5c>
   1f170:	6804      	ldr	r4, [r0, #0]
   1f172:	680d      	ldr	r5, [r1, #0]
   1f174:	42ac      	cmp	r4, r5
   1f176:	d11f      	bne.n	1f1b8 <strncmp+0x5c>
   1f178:	3a04      	subs	r2, #4
   1f17a:	d038      	beq.n	1f1ee <strncmp+0x92>
   1f17c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1f180:	ea25 0404 	bic.w	r4, r5, r4
   1f184:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1f188:	d12e      	bne.n	1f1e8 <strncmp+0x8c>
   1f18a:	3004      	adds	r0, #4
   1f18c:	3104      	adds	r1, #4
   1f18e:	e00f      	b.n	1f1b0 <strncmp+0x54>
   1f190:	f850 3b04 	ldr.w	r3, [r0], #4
   1f194:	680e      	ldr	r6, [r1, #0]
   1f196:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1f19a:	42b3      	cmp	r3, r6
   1f19c:	ea24 0403 	bic.w	r4, r4, r3
   1f1a0:	f101 0104 	add.w	r1, r1, #4
   1f1a4:	d126      	bne.n	1f1f4 <strncmp+0x98>
   1f1a6:	3a04      	subs	r2, #4
   1f1a8:	d021      	beq.n	1f1ee <strncmp+0x92>
   1f1aa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1f1ae:	d11b      	bne.n	1f1e8 <strncmp+0x8c>
   1f1b0:	2a03      	cmp	r2, #3
   1f1b2:	4607      	mov	r7, r0
   1f1b4:	460d      	mov	r5, r1
   1f1b6:	d8eb      	bhi.n	1f190 <strncmp+0x34>
   1f1b8:	7805      	ldrb	r5, [r0, #0]
   1f1ba:	780c      	ldrb	r4, [r1, #0]
   1f1bc:	42ac      	cmp	r4, r5
   1f1be:	f102 33ff 	add.w	r3, r2, #4294967295
   1f1c2:	d11a      	bne.n	1f1fa <strncmp+0x9e>
   1f1c4:	b183      	cbz	r3, 1f1e8 <strncmp+0x8c>
   1f1c6:	b914      	cbnz	r4, 1f1ce <strncmp+0x72>
   1f1c8:	e00e      	b.n	1f1e8 <strncmp+0x8c>
   1f1ca:	b16b      	cbz	r3, 1f1e8 <strncmp+0x8c>
   1f1cc:	b17a      	cbz	r2, 1f1ee <strncmp+0x92>
   1f1ce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1f1d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f1d6:	42a2      	cmp	r2, r4
   1f1d8:	f103 33ff 	add.w	r3, r3, #4294967295
   1f1dc:	d0f5      	beq.n	1f1ca <strncmp+0x6e>
   1f1de:	1b10      	subs	r0, r2, r4
   1f1e0:	bcf0      	pop	{r4, r5, r6, r7}
   1f1e2:	4770      	bx	lr
   1f1e4:	4610      	mov	r0, r2
   1f1e6:	4770      	bx	lr
   1f1e8:	2000      	movs	r0, #0
   1f1ea:	bcf0      	pop	{r4, r5, r6, r7}
   1f1ec:	4770      	bx	lr
   1f1ee:	4610      	mov	r0, r2
   1f1f0:	bcf0      	pop	{r4, r5, r6, r7}
   1f1f2:	4770      	bx	lr
   1f1f4:	4629      	mov	r1, r5
   1f1f6:	4638      	mov	r0, r7
   1f1f8:	e7de      	b.n	1f1b8 <strncmp+0x5c>
   1f1fa:	462a      	mov	r2, r5
   1f1fc:	e7ef      	b.n	1f1de <strncmp+0x82>
   1f1fe:	bf00      	nop

0001f200 <_svfprintf_r>:
   1f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f204:	b0c1      	sub	sp, #260	; 0x104
   1f206:	460c      	mov	r4, r1
   1f208:	9107      	str	r1, [sp, #28]
   1f20a:	4692      	mov	sl, r2
   1f20c:	930b      	str	r3, [sp, #44]	; 0x2c
   1f20e:	9008      	str	r0, [sp, #32]
   1f210:	f002 fde2 	bl	21dd8 <_localeconv_r>
   1f214:	6803      	ldr	r3, [r0, #0]
   1f216:	9314      	str	r3, [sp, #80]	; 0x50
   1f218:	4618      	mov	r0, r3
   1f21a:	f7ff ff31 	bl	1f080 <strlen>
   1f21e:	89a3      	ldrh	r3, [r4, #12]
   1f220:	9013      	str	r0, [sp, #76]	; 0x4c
   1f222:	0619      	lsls	r1, r3, #24
   1f224:	d503      	bpl.n	1f22e <_svfprintf_r+0x2e>
   1f226:	6923      	ldr	r3, [r4, #16]
   1f228:	2b00      	cmp	r3, #0
   1f22a:	f001 801b 	beq.w	20264 <_svfprintf_r+0x1064>
   1f22e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f480 <_svfprintf_r+0x280>
   1f232:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f236:	2300      	movs	r3, #0
   1f238:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1f23c:	930f      	str	r3, [sp, #60]	; 0x3c
   1f23e:	9325      	str	r3, [sp, #148]	; 0x94
   1f240:	9324      	str	r3, [sp, #144]	; 0x90
   1f242:	9312      	str	r3, [sp, #72]	; 0x48
   1f244:	9315      	str	r3, [sp, #84]	; 0x54
   1f246:	9305      	str	r3, [sp, #20]
   1f248:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1f24c:	46c8      	mov	r8, r9
   1f24e:	f89a 3000 	ldrb.w	r3, [sl]
   1f252:	4654      	mov	r4, sl
   1f254:	b1e3      	cbz	r3, 1f290 <_svfprintf_r+0x90>
   1f256:	2b25      	cmp	r3, #37	; 0x25
   1f258:	d102      	bne.n	1f260 <_svfprintf_r+0x60>
   1f25a:	e019      	b.n	1f290 <_svfprintf_r+0x90>
   1f25c:	2b25      	cmp	r3, #37	; 0x25
   1f25e:	d003      	beq.n	1f268 <_svfprintf_r+0x68>
   1f260:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1f264:	2b00      	cmp	r3, #0
   1f266:	d1f9      	bne.n	1f25c <_svfprintf_r+0x5c>
   1f268:	eba4 050a 	sub.w	r5, r4, sl
   1f26c:	b185      	cbz	r5, 1f290 <_svfprintf_r+0x90>
   1f26e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f270:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f272:	f8c8 a000 	str.w	sl, [r8]
   1f276:	3301      	adds	r3, #1
   1f278:	442a      	add	r2, r5
   1f27a:	2b07      	cmp	r3, #7
   1f27c:	f8c8 5004 	str.w	r5, [r8, #4]
   1f280:	9225      	str	r2, [sp, #148]	; 0x94
   1f282:	9324      	str	r3, [sp, #144]	; 0x90
   1f284:	dc7f      	bgt.n	1f386 <_svfprintf_r+0x186>
   1f286:	f108 0808 	add.w	r8, r8, #8
   1f28a:	9b05      	ldr	r3, [sp, #20]
   1f28c:	442b      	add	r3, r5
   1f28e:	9305      	str	r3, [sp, #20]
   1f290:	7823      	ldrb	r3, [r4, #0]
   1f292:	2b00      	cmp	r3, #0
   1f294:	d07f      	beq.n	1f396 <_svfprintf_r+0x196>
   1f296:	2300      	movs	r3, #0
   1f298:	461a      	mov	r2, r3
   1f29a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f29e:	4619      	mov	r1, r3
   1f2a0:	9309      	str	r3, [sp, #36]	; 0x24
   1f2a2:	469b      	mov	fp, r3
   1f2a4:	f04f 30ff 	mov.w	r0, #4294967295
   1f2a8:	7863      	ldrb	r3, [r4, #1]
   1f2aa:	9006      	str	r0, [sp, #24]
   1f2ac:	f104 0a01 	add.w	sl, r4, #1
   1f2b0:	f10a 0a01 	add.w	sl, sl, #1
   1f2b4:	f1a3 0020 	sub.w	r0, r3, #32
   1f2b8:	2858      	cmp	r0, #88	; 0x58
   1f2ba:	f200 83d3 	bhi.w	1fa64 <_svfprintf_r+0x864>
   1f2be:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f2c2:	023f      	.short	0x023f
   1f2c4:	03d103d1 	.word	0x03d103d1
   1f2c8:	03d10247 	.word	0x03d10247
   1f2cc:	03d103d1 	.word	0x03d103d1
   1f2d0:	03d103d1 	.word	0x03d103d1
   1f2d4:	024c03d1 	.word	0x024c03d1
   1f2d8:	03d1020a 	.word	0x03d1020a
   1f2dc:	0273005d 	.word	0x0273005d
   1f2e0:	028e03d1 	.word	0x028e03d1
   1f2e4:	03c103c1 	.word	0x03c103c1
   1f2e8:	03c103c1 	.word	0x03c103c1
   1f2ec:	03c103c1 	.word	0x03c103c1
   1f2f0:	03c103c1 	.word	0x03c103c1
   1f2f4:	03d103c1 	.word	0x03d103c1
   1f2f8:	03d103d1 	.word	0x03d103d1
   1f2fc:	03d103d1 	.word	0x03d103d1
   1f300:	03d103d1 	.word	0x03d103d1
   1f304:	03d103d1 	.word	0x03d103d1
   1f308:	033f03d1 	.word	0x033f03d1
   1f30c:	03d1035f 	.word	0x03d1035f
   1f310:	03d1035f 	.word	0x03d1035f
   1f314:	03d103d1 	.word	0x03d103d1
   1f318:	03aa03d1 	.word	0x03aa03d1
   1f31c:	03d103d1 	.word	0x03d103d1
   1f320:	03d103af 	.word	0x03d103af
   1f324:	03d103d1 	.word	0x03d103d1
   1f328:	03d103d1 	.word	0x03d103d1
   1f32c:	03d10261 	.word	0x03d10261
   1f330:	032603d1 	.word	0x032603d1
   1f334:	03d103d1 	.word	0x03d103d1
   1f338:	03d103d1 	.word	0x03d103d1
   1f33c:	03d103d1 	.word	0x03d103d1
   1f340:	03d103d1 	.word	0x03d103d1
   1f344:	03d103d1 	.word	0x03d103d1
   1f348:	02e302ce 	.word	0x02e302ce
   1f34c:	035f035f 	.word	0x035f035f
   1f350:	0293035f 	.word	0x0293035f
   1f354:	03d102e3 	.word	0x03d102e3
   1f358:	029803d1 	.word	0x029803d1
   1f35c:	02a503d1 	.word	0x02a503d1
   1f360:	02bc01d3 	.word	0x02bc01d3
   1f364:	03d1020f 	.word	0x03d1020f
   1f368:	03d101e8 	.word	0x03d101e8
   1f36c:	03d1007e 	.word	0x03d1007e
   1f370:	021403d1 	.word	0x021403d1
   1f374:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f376:	930b      	str	r3, [sp, #44]	; 0x2c
   1f378:	4240      	negs	r0, r0
   1f37a:	9009      	str	r0, [sp, #36]	; 0x24
   1f37c:	f04b 0b04 	orr.w	fp, fp, #4
   1f380:	f89a 3000 	ldrb.w	r3, [sl]
   1f384:	e794      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f386:	aa23      	add	r2, sp, #140	; 0x8c
   1f388:	9907      	ldr	r1, [sp, #28]
   1f38a:	9808      	ldr	r0, [sp, #32]
   1f38c:	f003 f8ea 	bl	22564 <__ssprint_r>
   1f390:	b940      	cbnz	r0, 1f3a4 <_svfprintf_r+0x1a4>
   1f392:	46c8      	mov	r8, r9
   1f394:	e779      	b.n	1f28a <_svfprintf_r+0x8a>
   1f396:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1f398:	b123      	cbz	r3, 1f3a4 <_svfprintf_r+0x1a4>
   1f39a:	9808      	ldr	r0, [sp, #32]
   1f39c:	9907      	ldr	r1, [sp, #28]
   1f39e:	aa23      	add	r2, sp, #140	; 0x8c
   1f3a0:	f003 f8e0 	bl	22564 <__ssprint_r>
   1f3a4:	9b07      	ldr	r3, [sp, #28]
   1f3a6:	899b      	ldrh	r3, [r3, #12]
   1f3a8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f3ac:	9b05      	ldr	r3, [sp, #20]
   1f3ae:	bf18      	it	ne
   1f3b0:	f04f 33ff 	movne.w	r3, #4294967295
   1f3b4:	9305      	str	r3, [sp, #20]
   1f3b6:	9805      	ldr	r0, [sp, #20]
   1f3b8:	b041      	add	sp, #260	; 0x104
   1f3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3be:	f01b 0f20 	tst.w	fp, #32
   1f3c2:	930d      	str	r3, [sp, #52]	; 0x34
   1f3c4:	f040 81e5 	bne.w	1f792 <_svfprintf_r+0x592>
   1f3c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f3ca:	f01b 0f10 	tst.w	fp, #16
   1f3ce:	4613      	mov	r3, r2
   1f3d0:	f040 8588 	bne.w	1fee4 <_svfprintf_r+0xce4>
   1f3d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f3d8:	f000 8584 	beq.w	1fee4 <_svfprintf_r+0xce4>
   1f3dc:	8814      	ldrh	r4, [r2, #0]
   1f3de:	3204      	adds	r2, #4
   1f3e0:	2500      	movs	r5, #0
   1f3e2:	2301      	movs	r3, #1
   1f3e4:	920b      	str	r2, [sp, #44]	; 0x2c
   1f3e6:	2700      	movs	r7, #0
   1f3e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f3ec:	9906      	ldr	r1, [sp, #24]
   1f3ee:	1c4a      	adds	r2, r1, #1
   1f3f0:	f000 826d 	beq.w	1f8ce <_svfprintf_r+0x6ce>
   1f3f4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1f3f8:	9203      	str	r2, [sp, #12]
   1f3fa:	ea54 0205 	orrs.w	r2, r4, r5
   1f3fe:	f040 826c 	bne.w	1f8da <_svfprintf_r+0x6da>
   1f402:	2900      	cmp	r1, #0
   1f404:	f040 8451 	bne.w	1fcaa <_svfprintf_r+0xaaa>
   1f408:	2b00      	cmp	r3, #0
   1f40a:	f040 850b 	bne.w	1fe24 <_svfprintf_r+0xc24>
   1f40e:	f01b 0301 	ands.w	r3, fp, #1
   1f412:	930a      	str	r3, [sp, #40]	; 0x28
   1f414:	f000 861a 	beq.w	2004c <_svfprintf_r+0xe4c>
   1f418:	ae40      	add	r6, sp, #256	; 0x100
   1f41a:	2330      	movs	r3, #48	; 0x30
   1f41c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f420:	9b06      	ldr	r3, [sp, #24]
   1f422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f424:	4293      	cmp	r3, r2
   1f426:	bfb8      	it	lt
   1f428:	4613      	movlt	r3, r2
   1f42a:	9304      	str	r3, [sp, #16]
   1f42c:	2300      	movs	r3, #0
   1f42e:	930e      	str	r3, [sp, #56]	; 0x38
   1f430:	b117      	cbz	r7, 1f438 <_svfprintf_r+0x238>
   1f432:	9b04      	ldr	r3, [sp, #16]
   1f434:	3301      	adds	r3, #1
   1f436:	9304      	str	r3, [sp, #16]
   1f438:	9b03      	ldr	r3, [sp, #12]
   1f43a:	f013 0302 	ands.w	r3, r3, #2
   1f43e:	930c      	str	r3, [sp, #48]	; 0x30
   1f440:	d002      	beq.n	1f448 <_svfprintf_r+0x248>
   1f442:	9b04      	ldr	r3, [sp, #16]
   1f444:	3302      	adds	r3, #2
   1f446:	9304      	str	r3, [sp, #16]
   1f448:	9b03      	ldr	r3, [sp, #12]
   1f44a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f44e:	f040 8320 	bne.w	1fa92 <_svfprintf_r+0x892>
   1f452:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f454:	9a04      	ldr	r2, [sp, #16]
   1f456:	eba3 0b02 	sub.w	fp, r3, r2
   1f45a:	f1bb 0f00 	cmp.w	fp, #0
   1f45e:	f340 8318 	ble.w	1fa92 <_svfprintf_r+0x892>
   1f462:	f1bb 0f10 	cmp.w	fp, #16
   1f466:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f468:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f46a:	dd30      	ble.n	1f4ce <_svfprintf_r+0x2ce>
   1f46c:	4643      	mov	r3, r8
   1f46e:	4621      	mov	r1, r4
   1f470:	46a8      	mov	r8, r5
   1f472:	2710      	movs	r7, #16
   1f474:	9c08      	ldr	r4, [sp, #32]
   1f476:	9d07      	ldr	r5, [sp, #28]
   1f478:	e00d      	b.n	1f496 <_svfprintf_r+0x296>
   1f47a:	bf00      	nop
   1f47c:	f3af 8000 	nop.w
	...
   1f488:	f1ab 0b10 	sub.w	fp, fp, #16
   1f48c:	f1bb 0f10 	cmp.w	fp, #16
   1f490:	f103 0308 	add.w	r3, r3, #8
   1f494:	dd18      	ble.n	1f4c8 <_svfprintf_r+0x2c8>
   1f496:	3201      	adds	r2, #1
   1f498:	48b7      	ldr	r0, [pc, #732]	; (1f778 <_svfprintf_r+0x578>)
   1f49a:	9224      	str	r2, [sp, #144]	; 0x90
   1f49c:	3110      	adds	r1, #16
   1f49e:	2a07      	cmp	r2, #7
   1f4a0:	9125      	str	r1, [sp, #148]	; 0x94
   1f4a2:	e883 0081 	stmia.w	r3, {r0, r7}
   1f4a6:	ddef      	ble.n	1f488 <_svfprintf_r+0x288>
   1f4a8:	aa23      	add	r2, sp, #140	; 0x8c
   1f4aa:	4629      	mov	r1, r5
   1f4ac:	4620      	mov	r0, r4
   1f4ae:	f003 f859 	bl	22564 <__ssprint_r>
   1f4b2:	2800      	cmp	r0, #0
   1f4b4:	f47f af76 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1f4b8:	f1ab 0b10 	sub.w	fp, fp, #16
   1f4bc:	f1bb 0f10 	cmp.w	fp, #16
   1f4c0:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f4c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f4c4:	464b      	mov	r3, r9
   1f4c6:	dce6      	bgt.n	1f496 <_svfprintf_r+0x296>
   1f4c8:	4645      	mov	r5, r8
   1f4ca:	460c      	mov	r4, r1
   1f4cc:	4698      	mov	r8, r3
   1f4ce:	3201      	adds	r2, #1
   1f4d0:	4ba9      	ldr	r3, [pc, #676]	; (1f778 <_svfprintf_r+0x578>)
   1f4d2:	9224      	str	r2, [sp, #144]	; 0x90
   1f4d4:	445c      	add	r4, fp
   1f4d6:	2a07      	cmp	r2, #7
   1f4d8:	9425      	str	r4, [sp, #148]	; 0x94
   1f4da:	e888 0808 	stmia.w	r8, {r3, fp}
   1f4de:	f300 84a6 	bgt.w	1fe2e <_svfprintf_r+0xc2e>
   1f4e2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f4e6:	f108 0808 	add.w	r8, r8, #8
   1f4ea:	b177      	cbz	r7, 1f50a <_svfprintf_r+0x30a>
   1f4ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f4ee:	3301      	adds	r3, #1
   1f4f0:	3401      	adds	r4, #1
   1f4f2:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f4f6:	2201      	movs	r2, #1
   1f4f8:	2b07      	cmp	r3, #7
   1f4fa:	9425      	str	r4, [sp, #148]	; 0x94
   1f4fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f4fe:	e888 0006 	stmia.w	r8, {r1, r2}
   1f502:	f300 83f4 	bgt.w	1fcee <_svfprintf_r+0xaee>
   1f506:	f108 0808 	add.w	r8, r8, #8
   1f50a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f50c:	b16b      	cbz	r3, 1f52a <_svfprintf_r+0x32a>
   1f50e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f510:	3301      	adds	r3, #1
   1f512:	3402      	adds	r4, #2
   1f514:	a91c      	add	r1, sp, #112	; 0x70
   1f516:	2202      	movs	r2, #2
   1f518:	2b07      	cmp	r3, #7
   1f51a:	9425      	str	r4, [sp, #148]	; 0x94
   1f51c:	9324      	str	r3, [sp, #144]	; 0x90
   1f51e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f522:	f300 83d9 	bgt.w	1fcd8 <_svfprintf_r+0xad8>
   1f526:	f108 0808 	add.w	r8, r8, #8
   1f52a:	2d80      	cmp	r5, #128	; 0x80
   1f52c:	f000 8322 	beq.w	1fb74 <_svfprintf_r+0x974>
   1f530:	9b06      	ldr	r3, [sp, #24]
   1f532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f534:	1a9f      	subs	r7, r3, r2
   1f536:	2f00      	cmp	r7, #0
   1f538:	dd36      	ble.n	1f5a8 <_svfprintf_r+0x3a8>
   1f53a:	2f10      	cmp	r7, #16
   1f53c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f53e:	4d8f      	ldr	r5, [pc, #572]	; (1f77c <_svfprintf_r+0x57c>)
   1f540:	dd27      	ble.n	1f592 <_svfprintf_r+0x392>
   1f542:	4642      	mov	r2, r8
   1f544:	4621      	mov	r1, r4
   1f546:	46b0      	mov	r8, r6
   1f548:	f04f 0b10 	mov.w	fp, #16
   1f54c:	462e      	mov	r6, r5
   1f54e:	9c08      	ldr	r4, [sp, #32]
   1f550:	9d07      	ldr	r5, [sp, #28]
   1f552:	e004      	b.n	1f55e <_svfprintf_r+0x35e>
   1f554:	3f10      	subs	r7, #16
   1f556:	2f10      	cmp	r7, #16
   1f558:	f102 0208 	add.w	r2, r2, #8
   1f55c:	dd15      	ble.n	1f58a <_svfprintf_r+0x38a>
   1f55e:	3301      	adds	r3, #1
   1f560:	3110      	adds	r1, #16
   1f562:	2b07      	cmp	r3, #7
   1f564:	9125      	str	r1, [sp, #148]	; 0x94
   1f566:	9324      	str	r3, [sp, #144]	; 0x90
   1f568:	e882 0840 	stmia.w	r2, {r6, fp}
   1f56c:	ddf2      	ble.n	1f554 <_svfprintf_r+0x354>
   1f56e:	aa23      	add	r2, sp, #140	; 0x8c
   1f570:	4629      	mov	r1, r5
   1f572:	4620      	mov	r0, r4
   1f574:	f002 fff6 	bl	22564 <__ssprint_r>
   1f578:	2800      	cmp	r0, #0
   1f57a:	f47f af13 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1f57e:	3f10      	subs	r7, #16
   1f580:	2f10      	cmp	r7, #16
   1f582:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f584:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f586:	464a      	mov	r2, r9
   1f588:	dce9      	bgt.n	1f55e <_svfprintf_r+0x35e>
   1f58a:	4635      	mov	r5, r6
   1f58c:	460c      	mov	r4, r1
   1f58e:	4646      	mov	r6, r8
   1f590:	4690      	mov	r8, r2
   1f592:	3301      	adds	r3, #1
   1f594:	443c      	add	r4, r7
   1f596:	2b07      	cmp	r3, #7
   1f598:	9425      	str	r4, [sp, #148]	; 0x94
   1f59a:	9324      	str	r3, [sp, #144]	; 0x90
   1f59c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f5a0:	f300 838f 	bgt.w	1fcc2 <_svfprintf_r+0xac2>
   1f5a4:	f108 0808 	add.w	r8, r8, #8
   1f5a8:	9b03      	ldr	r3, [sp, #12]
   1f5aa:	05df      	lsls	r7, r3, #23
   1f5ac:	f100 8273 	bmi.w	1fa96 <_svfprintf_r+0x896>
   1f5b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f5b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f5b4:	f8c8 6000 	str.w	r6, [r8]
   1f5b8:	3301      	adds	r3, #1
   1f5ba:	440c      	add	r4, r1
   1f5bc:	2b07      	cmp	r3, #7
   1f5be:	9425      	str	r4, [sp, #148]	; 0x94
   1f5c0:	f8c8 1004 	str.w	r1, [r8, #4]
   1f5c4:	9324      	str	r3, [sp, #144]	; 0x90
   1f5c6:	f300 835b 	bgt.w	1fc80 <_svfprintf_r+0xa80>
   1f5ca:	f108 0808 	add.w	r8, r8, #8
   1f5ce:	9b03      	ldr	r3, [sp, #12]
   1f5d0:	075b      	lsls	r3, r3, #29
   1f5d2:	d53a      	bpl.n	1f64a <_svfprintf_r+0x44a>
   1f5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f5d6:	9a04      	ldr	r2, [sp, #16]
   1f5d8:	1a9d      	subs	r5, r3, r2
   1f5da:	2d00      	cmp	r5, #0
   1f5dc:	dd35      	ble.n	1f64a <_svfprintf_r+0x44a>
   1f5de:	2d10      	cmp	r5, #16
   1f5e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f5e2:	dd20      	ble.n	1f626 <_svfprintf_r+0x426>
   1f5e4:	2610      	movs	r6, #16
   1f5e6:	9f08      	ldr	r7, [sp, #32]
   1f5e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f5ec:	e004      	b.n	1f5f8 <_svfprintf_r+0x3f8>
   1f5ee:	3d10      	subs	r5, #16
   1f5f0:	2d10      	cmp	r5, #16
   1f5f2:	f108 0808 	add.w	r8, r8, #8
   1f5f6:	dd16      	ble.n	1f626 <_svfprintf_r+0x426>
   1f5f8:	3301      	adds	r3, #1
   1f5fa:	4a5f      	ldr	r2, [pc, #380]	; (1f778 <_svfprintf_r+0x578>)
   1f5fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f5fe:	3410      	adds	r4, #16
   1f600:	2b07      	cmp	r3, #7
   1f602:	9425      	str	r4, [sp, #148]	; 0x94
   1f604:	e888 0044 	stmia.w	r8, {r2, r6}
   1f608:	ddf1      	ble.n	1f5ee <_svfprintf_r+0x3ee>
   1f60a:	aa23      	add	r2, sp, #140	; 0x8c
   1f60c:	4659      	mov	r1, fp
   1f60e:	4638      	mov	r0, r7
   1f610:	f002 ffa8 	bl	22564 <__ssprint_r>
   1f614:	2800      	cmp	r0, #0
   1f616:	f47f aec5 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1f61a:	3d10      	subs	r5, #16
   1f61c:	2d10      	cmp	r5, #16
   1f61e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f620:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f622:	46c8      	mov	r8, r9
   1f624:	dce8      	bgt.n	1f5f8 <_svfprintf_r+0x3f8>
   1f626:	3301      	adds	r3, #1
   1f628:	4a53      	ldr	r2, [pc, #332]	; (1f778 <_svfprintf_r+0x578>)
   1f62a:	9324      	str	r3, [sp, #144]	; 0x90
   1f62c:	442c      	add	r4, r5
   1f62e:	2b07      	cmp	r3, #7
   1f630:	9425      	str	r4, [sp, #148]	; 0x94
   1f632:	e888 0024 	stmia.w	r8, {r2, r5}
   1f636:	dd08      	ble.n	1f64a <_svfprintf_r+0x44a>
   1f638:	aa23      	add	r2, sp, #140	; 0x8c
   1f63a:	9907      	ldr	r1, [sp, #28]
   1f63c:	9808      	ldr	r0, [sp, #32]
   1f63e:	f002 ff91 	bl	22564 <__ssprint_r>
   1f642:	2800      	cmp	r0, #0
   1f644:	f47f aeae 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1f648:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f64a:	9b05      	ldr	r3, [sp, #20]
   1f64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f64e:	9904      	ldr	r1, [sp, #16]
   1f650:	428a      	cmp	r2, r1
   1f652:	bfac      	ite	ge
   1f654:	189b      	addge	r3, r3, r2
   1f656:	185b      	addlt	r3, r3, r1
   1f658:	9305      	str	r3, [sp, #20]
   1f65a:	2c00      	cmp	r4, #0
   1f65c:	f040 831b 	bne.w	1fc96 <_svfprintf_r+0xa96>
   1f660:	2300      	movs	r3, #0
   1f662:	9324      	str	r3, [sp, #144]	; 0x90
   1f664:	46c8      	mov	r8, r9
   1f666:	e5f2      	b.n	1f24e <_svfprintf_r+0x4e>
   1f668:	930d      	str	r3, [sp, #52]	; 0x34
   1f66a:	f01b 0320 	ands.w	r3, fp, #32
   1f66e:	f040 81de 	bne.w	1fa2e <_svfprintf_r+0x82e>
   1f672:	f01b 0210 	ands.w	r2, fp, #16
   1f676:	f040 842d 	bne.w	1fed4 <_svfprintf_r+0xcd4>
   1f67a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f67e:	f000 8429 	beq.w	1fed4 <_svfprintf_r+0xcd4>
   1f682:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f684:	4613      	mov	r3, r2
   1f686:	460a      	mov	r2, r1
   1f688:	3204      	adds	r2, #4
   1f68a:	880c      	ldrh	r4, [r1, #0]
   1f68c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f68e:	2500      	movs	r5, #0
   1f690:	e6a9      	b.n	1f3e6 <_svfprintf_r+0x1e6>
   1f692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f694:	930d      	str	r3, [sp, #52]	; 0x34
   1f696:	6816      	ldr	r6, [r2, #0]
   1f698:	2400      	movs	r4, #0
   1f69a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f69e:	1d15      	adds	r5, r2, #4
   1f6a0:	2e00      	cmp	r6, #0
   1f6a2:	f000 86b5 	beq.w	20410 <_svfprintf_r+0x1210>
   1f6a6:	9a06      	ldr	r2, [sp, #24]
   1f6a8:	1c53      	adds	r3, r2, #1
   1f6aa:	f000 8617 	beq.w	202dc <_svfprintf_r+0x10dc>
   1f6ae:	4621      	mov	r1, r4
   1f6b0:	4630      	mov	r0, r6
   1f6b2:	f7fe ff15 	bl	1e4e0 <memchr>
   1f6b6:	2800      	cmp	r0, #0
   1f6b8:	f000 8708 	beq.w	204cc <_svfprintf_r+0x12cc>
   1f6bc:	1b83      	subs	r3, r0, r6
   1f6be:	930a      	str	r3, [sp, #40]	; 0x28
   1f6c0:	9406      	str	r4, [sp, #24]
   1f6c2:	950b      	str	r5, [sp, #44]	; 0x2c
   1f6c4:	f8cd b00c 	str.w	fp, [sp, #12]
   1f6c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f6cc:	9304      	str	r3, [sp, #16]
   1f6ce:	940e      	str	r4, [sp, #56]	; 0x38
   1f6d0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f6d4:	e6ac      	b.n	1f430 <_svfprintf_r+0x230>
   1f6d6:	f89a 3000 	ldrb.w	r3, [sl]
   1f6da:	2201      	movs	r2, #1
   1f6dc:	212b      	movs	r1, #43	; 0x2b
   1f6de:	e5e7      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f6e0:	f04b 0b20 	orr.w	fp, fp, #32
   1f6e4:	f89a 3000 	ldrb.w	r3, [sl]
   1f6e8:	e5e2      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f6ea:	930d      	str	r3, [sp, #52]	; 0x34
   1f6ec:	2a00      	cmp	r2, #0
   1f6ee:	f040 87aa 	bne.w	20646 <_svfprintf_r+0x1446>
   1f6f2:	4b23      	ldr	r3, [pc, #140]	; (1f780 <_svfprintf_r+0x580>)
   1f6f4:	9312      	str	r3, [sp, #72]	; 0x48
   1f6f6:	f01b 0f20 	tst.w	fp, #32
   1f6fa:	f040 8112 	bne.w	1f922 <_svfprintf_r+0x722>
   1f6fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f700:	f01b 0f10 	tst.w	fp, #16
   1f704:	4613      	mov	r3, r2
   1f706:	f040 83e0 	bne.w	1feca <_svfprintf_r+0xcca>
   1f70a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f70e:	f000 83dc 	beq.w	1feca <_svfprintf_r+0xcca>
   1f712:	3304      	adds	r3, #4
   1f714:	8814      	ldrh	r4, [r2, #0]
   1f716:	930b      	str	r3, [sp, #44]	; 0x2c
   1f718:	2500      	movs	r5, #0
   1f71a:	f01b 0f01 	tst.w	fp, #1
   1f71e:	f000 810d 	beq.w	1f93c <_svfprintf_r+0x73c>
   1f722:	ea54 0305 	orrs.w	r3, r4, r5
   1f726:	f000 8109 	beq.w	1f93c <_svfprintf_r+0x73c>
   1f72a:	2330      	movs	r3, #48	; 0x30
   1f72c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f730:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f734:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f738:	f04b 0b02 	orr.w	fp, fp, #2
   1f73c:	2302      	movs	r3, #2
   1f73e:	e652      	b.n	1f3e6 <_svfprintf_r+0x1e6>
   1f740:	f89a 3000 	ldrb.w	r3, [sl]
   1f744:	2900      	cmp	r1, #0
   1f746:	f47f adb3 	bne.w	1f2b0 <_svfprintf_r+0xb0>
   1f74a:	2201      	movs	r2, #1
   1f74c:	2120      	movs	r1, #32
   1f74e:	e5af      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f750:	f04b 0b01 	orr.w	fp, fp, #1
   1f754:	f89a 3000 	ldrb.w	r3, [sl]
   1f758:	e5aa      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f75a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f75c:	6823      	ldr	r3, [r4, #0]
   1f75e:	9309      	str	r3, [sp, #36]	; 0x24
   1f760:	4618      	mov	r0, r3
   1f762:	2800      	cmp	r0, #0
   1f764:	4623      	mov	r3, r4
   1f766:	f103 0304 	add.w	r3, r3, #4
   1f76a:	f6ff ae03 	blt.w	1f374 <_svfprintf_r+0x174>
   1f76e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f770:	f89a 3000 	ldrb.w	r3, [sl]
   1f774:	e59c      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f776:	bf00      	nop
   1f778:	00024e34 	.word	0x00024e34
   1f77c:	00024e44 	.word	0x00024e44
   1f780:	00024e14 	.word	0x00024e14
   1f784:	f04b 0b10 	orr.w	fp, fp, #16
   1f788:	f01b 0f20 	tst.w	fp, #32
   1f78c:	930d      	str	r3, [sp, #52]	; 0x34
   1f78e:	f43f ae1b 	beq.w	1f3c8 <_svfprintf_r+0x1c8>
   1f792:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f794:	3507      	adds	r5, #7
   1f796:	f025 0307 	bic.w	r3, r5, #7
   1f79a:	f103 0208 	add.w	r2, r3, #8
   1f79e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f7a2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f7a4:	2301      	movs	r3, #1
   1f7a6:	e61e      	b.n	1f3e6 <_svfprintf_r+0x1e6>
   1f7a8:	f89a 3000 	ldrb.w	r3, [sl]
   1f7ac:	2b2a      	cmp	r3, #42	; 0x2a
   1f7ae:	f10a 0401 	add.w	r4, sl, #1
   1f7b2:	f000 873b 	beq.w	2062c <_svfprintf_r+0x142c>
   1f7b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f7ba:	2809      	cmp	r0, #9
   1f7bc:	46a2      	mov	sl, r4
   1f7be:	f200 8691 	bhi.w	204e4 <_svfprintf_r+0x12e4>
   1f7c2:	2300      	movs	r3, #0
   1f7c4:	461c      	mov	r4, r3
   1f7c6:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f7ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f7ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f7d2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f7d6:	2809      	cmp	r0, #9
   1f7d8:	d9f5      	bls.n	1f7c6 <_svfprintf_r+0x5c6>
   1f7da:	9406      	str	r4, [sp, #24]
   1f7dc:	e56a      	b.n	1f2b4 <_svfprintf_r+0xb4>
   1f7de:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f7e2:	f89a 3000 	ldrb.w	r3, [sl]
   1f7e6:	e563      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f7e8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f7ec:	f89a 3000 	ldrb.w	r3, [sl]
   1f7f0:	e55e      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f7f2:	f89a 3000 	ldrb.w	r3, [sl]
   1f7f6:	2b6c      	cmp	r3, #108	; 0x6c
   1f7f8:	bf03      	ittte	eq
   1f7fa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f7fe:	f04b 0b20 	orreq.w	fp, fp, #32
   1f802:	f10a 0a01 	addeq.w	sl, sl, #1
   1f806:	f04b 0b10 	orrne.w	fp, fp, #16
   1f80a:	e551      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1f80c:	2a00      	cmp	r2, #0
   1f80e:	f040 871e 	bne.w	2064e <_svfprintf_r+0x144e>
   1f812:	f01b 0f20 	tst.w	fp, #32
   1f816:	f040 8509 	bne.w	2022c <_svfprintf_r+0x102c>
   1f81a:	f01b 0f10 	tst.w	fp, #16
   1f81e:	f040 84bc 	bne.w	2019a <_svfprintf_r+0xf9a>
   1f822:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f826:	f000 84b8 	beq.w	2019a <_svfprintf_r+0xf9a>
   1f82a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f82c:	6813      	ldr	r3, [r2, #0]
   1f82e:	3204      	adds	r2, #4
   1f830:	920b      	str	r2, [sp, #44]	; 0x2c
   1f832:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f836:	801a      	strh	r2, [r3, #0]
   1f838:	e509      	b.n	1f24e <_svfprintf_r+0x4e>
   1f83a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f83c:	4bb9      	ldr	r3, [pc, #740]	; (1fb24 <_svfprintf_r+0x924>)
   1f83e:	680c      	ldr	r4, [r1, #0]
   1f840:	9312      	str	r3, [sp, #72]	; 0x48
   1f842:	2230      	movs	r2, #48	; 0x30
   1f844:	2378      	movs	r3, #120	; 0x78
   1f846:	3104      	adds	r1, #4
   1f848:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f84c:	930d      	str	r3, [sp, #52]	; 0x34
   1f84e:	f04b 0b02 	orr.w	fp, fp, #2
   1f852:	910b      	str	r1, [sp, #44]	; 0x2c
   1f854:	2500      	movs	r5, #0
   1f856:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f85a:	2302      	movs	r3, #2
   1f85c:	e5c3      	b.n	1f3e6 <_svfprintf_r+0x1e6>
   1f85e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f860:	930d      	str	r3, [sp, #52]	; 0x34
   1f862:	680a      	ldr	r2, [r1, #0]
   1f864:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f868:	2300      	movs	r3, #0
   1f86a:	460a      	mov	r2, r1
   1f86c:	461f      	mov	r7, r3
   1f86e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f872:	3204      	adds	r2, #4
   1f874:	2301      	movs	r3, #1
   1f876:	9304      	str	r3, [sp, #16]
   1f878:	f8cd b00c 	str.w	fp, [sp, #12]
   1f87c:	9706      	str	r7, [sp, #24]
   1f87e:	970e      	str	r7, [sp, #56]	; 0x38
   1f880:	920b      	str	r2, [sp, #44]	; 0x2c
   1f882:	930a      	str	r3, [sp, #40]	; 0x28
   1f884:	ae26      	add	r6, sp, #152	; 0x98
   1f886:	e5d7      	b.n	1f438 <_svfprintf_r+0x238>
   1f888:	930d      	str	r3, [sp, #52]	; 0x34
   1f88a:	2a00      	cmp	r2, #0
   1f88c:	f040 86fe 	bne.w	2068c <_svfprintf_r+0x148c>
   1f890:	f01b 0f20 	tst.w	fp, #32
   1f894:	d15d      	bne.n	1f952 <_svfprintf_r+0x752>
   1f896:	f01b 0f10 	tst.w	fp, #16
   1f89a:	f040 8335 	bne.w	1ff08 <_svfprintf_r+0xd08>
   1f89e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f8a2:	f000 8331 	beq.w	1ff08 <_svfprintf_r+0xd08>
   1f8a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f8a8:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f8ac:	3104      	adds	r1, #4
   1f8ae:	17e5      	asrs	r5, r4, #31
   1f8b0:	4622      	mov	r2, r4
   1f8b2:	462b      	mov	r3, r5
   1f8b4:	910b      	str	r1, [sp, #44]	; 0x2c
   1f8b6:	2a00      	cmp	r2, #0
   1f8b8:	f173 0300 	sbcs.w	r3, r3, #0
   1f8bc:	db58      	blt.n	1f970 <_svfprintf_r+0x770>
   1f8be:	9906      	ldr	r1, [sp, #24]
   1f8c0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f8c4:	1c4a      	adds	r2, r1, #1
   1f8c6:	f04f 0301 	mov.w	r3, #1
   1f8ca:	f47f ad93 	bne.w	1f3f4 <_svfprintf_r+0x1f4>
   1f8ce:	ea54 0205 	orrs.w	r2, r4, r5
   1f8d2:	f000 81ec 	beq.w	1fcae <_svfprintf_r+0xaae>
   1f8d6:	f8cd b00c 	str.w	fp, [sp, #12]
   1f8da:	2b01      	cmp	r3, #1
   1f8dc:	f000 8283 	beq.w	1fde6 <_svfprintf_r+0xbe6>
   1f8e0:	2b02      	cmp	r3, #2
   1f8e2:	f040 8213 	bne.w	1fd0c <_svfprintf_r+0xb0c>
   1f8e6:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f8e8:	464e      	mov	r6, r9
   1f8ea:	0923      	lsrs	r3, r4, #4
   1f8ec:	f004 010f 	and.w	r1, r4, #15
   1f8f0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f8f4:	092a      	lsrs	r2, r5, #4
   1f8f6:	461c      	mov	r4, r3
   1f8f8:	4615      	mov	r5, r2
   1f8fa:	5c43      	ldrb	r3, [r0, r1]
   1f8fc:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f900:	ea54 0305 	orrs.w	r3, r4, r5
   1f904:	d1f1      	bne.n	1f8ea <_svfprintf_r+0x6ea>
   1f906:	eba9 0306 	sub.w	r3, r9, r6
   1f90a:	930a      	str	r3, [sp, #40]	; 0x28
   1f90c:	e588      	b.n	1f420 <_svfprintf_r+0x220>
   1f90e:	930d      	str	r3, [sp, #52]	; 0x34
   1f910:	2a00      	cmp	r2, #0
   1f912:	f040 86b7 	bne.w	20684 <_svfprintf_r+0x1484>
   1f916:	4b84      	ldr	r3, [pc, #528]	; (1fb28 <_svfprintf_r+0x928>)
   1f918:	9312      	str	r3, [sp, #72]	; 0x48
   1f91a:	f01b 0f20 	tst.w	fp, #32
   1f91e:	f43f aeee 	beq.w	1f6fe <_svfprintf_r+0x4fe>
   1f922:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f924:	3507      	adds	r5, #7
   1f926:	f025 0307 	bic.w	r3, r5, #7
   1f92a:	f103 0208 	add.w	r2, r3, #8
   1f92e:	f01b 0f01 	tst.w	fp, #1
   1f932:	920b      	str	r2, [sp, #44]	; 0x2c
   1f934:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f938:	f47f aef3 	bne.w	1f722 <_svfprintf_r+0x522>
   1f93c:	2302      	movs	r3, #2
   1f93e:	e552      	b.n	1f3e6 <_svfprintf_r+0x1e6>
   1f940:	930d      	str	r3, [sp, #52]	; 0x34
   1f942:	2a00      	cmp	r2, #0
   1f944:	f040 869a 	bne.w	2067c <_svfprintf_r+0x147c>
   1f948:	f04b 0b10 	orr.w	fp, fp, #16
   1f94c:	f01b 0f20 	tst.w	fp, #32
   1f950:	d0a1      	beq.n	1f896 <_svfprintf_r+0x696>
   1f952:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f954:	3507      	adds	r5, #7
   1f956:	f025 0507 	bic.w	r5, r5, #7
   1f95a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f95e:	2a00      	cmp	r2, #0
   1f960:	f105 0108 	add.w	r1, r5, #8
   1f964:	461d      	mov	r5, r3
   1f966:	f173 0300 	sbcs.w	r3, r3, #0
   1f96a:	910b      	str	r1, [sp, #44]	; 0x2c
   1f96c:	4614      	mov	r4, r2
   1f96e:	daa6      	bge.n	1f8be <_svfprintf_r+0x6be>
   1f970:	272d      	movs	r7, #45	; 0x2d
   1f972:	4264      	negs	r4, r4
   1f974:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f978:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f97c:	2301      	movs	r3, #1
   1f97e:	e535      	b.n	1f3ec <_svfprintf_r+0x1ec>
   1f980:	930d      	str	r3, [sp, #52]	; 0x34
   1f982:	2a00      	cmp	r2, #0
   1f984:	f040 8676 	bne.w	20674 <_svfprintf_r+0x1474>
   1f988:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f98a:	f01b 0f08 	tst.w	fp, #8
   1f98e:	f105 0507 	add.w	r5, r5, #7
   1f992:	f000 83e8 	beq.w	20166 <_svfprintf_r+0xf66>
   1f996:	f025 0307 	bic.w	r3, r5, #7
   1f99a:	ed93 7b00 	vldr	d7, [r3]
   1f99e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f9a2:	f103 0208 	add.w	r2, r3, #8
   1f9a6:	920b      	str	r2, [sp, #44]	; 0x2c
   1f9a8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f9ac:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f9b0:	9116      	str	r1, [sp, #88]	; 0x58
   1f9b2:	9317      	str	r3, [sp, #92]	; 0x5c
   1f9b4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f9b8:	f04f 32ff 	mov.w	r2, #4294967295
   1f9bc:	4620      	mov	r0, r4
   1f9be:	4629      	mov	r1, r5
   1f9c0:	4b5a      	ldr	r3, [pc, #360]	; (1fb2c <_svfprintf_r+0x92c>)
   1f9c2:	f002 ffa5 	bl	22910 <__aeabi_dcmpun>
   1f9c6:	2800      	cmp	r0, #0
   1f9c8:	f040 834f 	bne.w	2006a <_svfprintf_r+0xe6a>
   1f9cc:	f04f 32ff 	mov.w	r2, #4294967295
   1f9d0:	4b56      	ldr	r3, [pc, #344]	; (1fb2c <_svfprintf_r+0x92c>)
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	4629      	mov	r1, r5
   1f9d6:	f7fc fcad 	bl	1c334 <__aeabi_dcmple>
   1f9da:	2800      	cmp	r0, #0
   1f9dc:	f040 8345 	bne.w	2006a <_svfprintf_r+0xe6a>
   1f9e0:	2200      	movs	r2, #0
   1f9e2:	2300      	movs	r3, #0
   1f9e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f9e8:	f7fc fc9a 	bl	1c320 <__aeabi_dcmplt>
   1f9ec:	2800      	cmp	r0, #0
   1f9ee:	f040 8533 	bne.w	20458 <_svfprintf_r+0x1258>
   1f9f2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f9f6:	4e4e      	ldr	r6, [pc, #312]	; (1fb30 <_svfprintf_r+0x930>)
   1f9f8:	4b4e      	ldr	r3, [pc, #312]	; (1fb34 <_svfprintf_r+0x934>)
   1f9fa:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f9fe:	9003      	str	r0, [sp, #12]
   1fa00:	980d      	ldr	r0, [sp, #52]	; 0x34
   1fa02:	2203      	movs	r2, #3
   1fa04:	2100      	movs	r1, #0
   1fa06:	9204      	str	r2, [sp, #16]
   1fa08:	9106      	str	r1, [sp, #24]
   1fa0a:	2847      	cmp	r0, #71	; 0x47
   1fa0c:	bfd8      	it	le
   1fa0e:	461e      	movle	r6, r3
   1fa10:	920a      	str	r2, [sp, #40]	; 0x28
   1fa12:	910e      	str	r1, [sp, #56]	; 0x38
   1fa14:	e50c      	b.n	1f430 <_svfprintf_r+0x230>
   1fa16:	f04b 0b08 	orr.w	fp, fp, #8
   1fa1a:	f89a 3000 	ldrb.w	r3, [sl]
   1fa1e:	e447      	b.n	1f2b0 <_svfprintf_r+0xb0>
   1fa20:	f04b 0b10 	orr.w	fp, fp, #16
   1fa24:	930d      	str	r3, [sp, #52]	; 0x34
   1fa26:	f01b 0320 	ands.w	r3, fp, #32
   1fa2a:	f43f ae22 	beq.w	1f672 <_svfprintf_r+0x472>
   1fa2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1fa30:	3507      	adds	r5, #7
   1fa32:	f025 0307 	bic.w	r3, r5, #7
   1fa36:	f103 0208 	add.w	r2, r3, #8
   1fa3a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1fa3e:	920b      	str	r2, [sp, #44]	; 0x2c
   1fa40:	2300      	movs	r3, #0
   1fa42:	e4d0      	b.n	1f3e6 <_svfprintf_r+0x1e6>
   1fa44:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1fa48:	2300      	movs	r3, #0
   1fa4a:	461c      	mov	r4, r3
   1fa4c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1fa50:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1fa54:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1fa58:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1fa5c:	2809      	cmp	r0, #9
   1fa5e:	d9f5      	bls.n	1fa4c <_svfprintf_r+0x84c>
   1fa60:	9409      	str	r4, [sp, #36]	; 0x24
   1fa62:	e427      	b.n	1f2b4 <_svfprintf_r+0xb4>
   1fa64:	930d      	str	r3, [sp, #52]	; 0x34
   1fa66:	2a00      	cmp	r2, #0
   1fa68:	f040 85f5 	bne.w	20656 <_svfprintf_r+0x1456>
   1fa6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1fa6e:	2a00      	cmp	r2, #0
   1fa70:	f43f ac91 	beq.w	1f396 <_svfprintf_r+0x196>
   1fa74:	2300      	movs	r3, #0
   1fa76:	2101      	movs	r1, #1
   1fa78:	461f      	mov	r7, r3
   1fa7a:	9104      	str	r1, [sp, #16]
   1fa7c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1fa80:	f8cd b00c 	str.w	fp, [sp, #12]
   1fa84:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1fa88:	9306      	str	r3, [sp, #24]
   1fa8a:	930e      	str	r3, [sp, #56]	; 0x38
   1fa8c:	910a      	str	r1, [sp, #40]	; 0x28
   1fa8e:	ae26      	add	r6, sp, #152	; 0x98
   1fa90:	e4d2      	b.n	1f438 <_svfprintf_r+0x238>
   1fa92:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa94:	e529      	b.n	1f4ea <_svfprintf_r+0x2ea>
   1fa96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fa98:	2b65      	cmp	r3, #101	; 0x65
   1fa9a:	f340 80a9 	ble.w	1fbf0 <_svfprintf_r+0x9f0>
   1fa9e:	2200      	movs	r2, #0
   1faa0:	2300      	movs	r3, #0
   1faa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1faa6:	f7fc fc31 	bl	1c30c <__aeabi_dcmpeq>
   1faaa:	2800      	cmp	r0, #0
   1faac:	f000 8152 	beq.w	1fd54 <_svfprintf_r+0xb54>
   1fab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fab2:	4a21      	ldr	r2, [pc, #132]	; (1fb38 <_svfprintf_r+0x938>)
   1fab4:	f8c8 2000 	str.w	r2, [r8]
   1fab8:	3301      	adds	r3, #1
   1faba:	3401      	adds	r4, #1
   1fabc:	2201      	movs	r2, #1
   1fabe:	2b07      	cmp	r3, #7
   1fac0:	9425      	str	r4, [sp, #148]	; 0x94
   1fac2:	9324      	str	r3, [sp, #144]	; 0x90
   1fac4:	f8c8 2004 	str.w	r2, [r8, #4]
   1fac8:	f300 836f 	bgt.w	201aa <_svfprintf_r+0xfaa>
   1facc:	f108 0808 	add.w	r8, r8, #8
   1fad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fad4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fad6:	4293      	cmp	r3, r2
   1fad8:	db03      	blt.n	1fae2 <_svfprintf_r+0x8e2>
   1fada:	9b03      	ldr	r3, [sp, #12]
   1fadc:	07dd      	lsls	r5, r3, #31
   1fade:	f57f ad76 	bpl.w	1f5ce <_svfprintf_r+0x3ce>
   1fae2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fae4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1fae6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fae8:	f8c8 2000 	str.w	r2, [r8]
   1faec:	3301      	adds	r3, #1
   1faee:	440c      	add	r4, r1
   1faf0:	2b07      	cmp	r3, #7
   1faf2:	f8c8 1004 	str.w	r1, [r8, #4]
   1faf6:	9425      	str	r4, [sp, #148]	; 0x94
   1faf8:	9324      	str	r3, [sp, #144]	; 0x90
   1fafa:	f300 83a3 	bgt.w	20244 <_svfprintf_r+0x1044>
   1fafe:	f108 0808 	add.w	r8, r8, #8
   1fb02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fb04:	1e5e      	subs	r6, r3, #1
   1fb06:	2e00      	cmp	r6, #0
   1fb08:	f77f ad61 	ble.w	1f5ce <_svfprintf_r+0x3ce>
   1fb0c:	2e10      	cmp	r6, #16
   1fb0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb10:	4d0a      	ldr	r5, [pc, #40]	; (1fb3c <_svfprintf_r+0x93c>)
   1fb12:	f340 81ef 	ble.w	1fef4 <_svfprintf_r+0xcf4>
   1fb16:	4622      	mov	r2, r4
   1fb18:	2710      	movs	r7, #16
   1fb1a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fb1e:	9c07      	ldr	r4, [sp, #28]
   1fb20:	e014      	b.n	1fb4c <_svfprintf_r+0x94c>
   1fb22:	bf00      	nop
   1fb24:	00024e14 	.word	0x00024e14
   1fb28:	00024e00 	.word	0x00024e00
   1fb2c:	7fefffff 	.word	0x7fefffff
   1fb30:	00024df4 	.word	0x00024df4
   1fb34:	00024df0 	.word	0x00024df0
   1fb38:	00024e30 	.word	0x00024e30
   1fb3c:	00024e44 	.word	0x00024e44
   1fb40:	f108 0808 	add.w	r8, r8, #8
   1fb44:	3e10      	subs	r6, #16
   1fb46:	2e10      	cmp	r6, #16
   1fb48:	f340 81d3 	ble.w	1fef2 <_svfprintf_r+0xcf2>
   1fb4c:	3301      	adds	r3, #1
   1fb4e:	3210      	adds	r2, #16
   1fb50:	2b07      	cmp	r3, #7
   1fb52:	9225      	str	r2, [sp, #148]	; 0x94
   1fb54:	9324      	str	r3, [sp, #144]	; 0x90
   1fb56:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fb5a:	ddf1      	ble.n	1fb40 <_svfprintf_r+0x940>
   1fb5c:	aa23      	add	r2, sp, #140	; 0x8c
   1fb5e:	4621      	mov	r1, r4
   1fb60:	4658      	mov	r0, fp
   1fb62:	f002 fcff 	bl	22564 <__ssprint_r>
   1fb66:	2800      	cmp	r0, #0
   1fb68:	f47f ac1c 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fb6c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fb6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb70:	46c8      	mov	r8, r9
   1fb72:	e7e7      	b.n	1fb44 <_svfprintf_r+0x944>
   1fb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb76:	9a04      	ldr	r2, [sp, #16]
   1fb78:	1a9f      	subs	r7, r3, r2
   1fb7a:	2f00      	cmp	r7, #0
   1fb7c:	f77f acd8 	ble.w	1f530 <_svfprintf_r+0x330>
   1fb80:	2f10      	cmp	r7, #16
   1fb82:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb84:	4db7      	ldr	r5, [pc, #732]	; (1fe64 <_svfprintf_r+0xc64>)
   1fb86:	dd27      	ble.n	1fbd8 <_svfprintf_r+0x9d8>
   1fb88:	4642      	mov	r2, r8
   1fb8a:	4621      	mov	r1, r4
   1fb8c:	46b0      	mov	r8, r6
   1fb8e:	f04f 0b10 	mov.w	fp, #16
   1fb92:	462e      	mov	r6, r5
   1fb94:	9c08      	ldr	r4, [sp, #32]
   1fb96:	9d07      	ldr	r5, [sp, #28]
   1fb98:	e004      	b.n	1fba4 <_svfprintf_r+0x9a4>
   1fb9a:	3f10      	subs	r7, #16
   1fb9c:	2f10      	cmp	r7, #16
   1fb9e:	f102 0208 	add.w	r2, r2, #8
   1fba2:	dd15      	ble.n	1fbd0 <_svfprintf_r+0x9d0>
   1fba4:	3301      	adds	r3, #1
   1fba6:	3110      	adds	r1, #16
   1fba8:	2b07      	cmp	r3, #7
   1fbaa:	9125      	str	r1, [sp, #148]	; 0x94
   1fbac:	9324      	str	r3, [sp, #144]	; 0x90
   1fbae:	e882 0840 	stmia.w	r2, {r6, fp}
   1fbb2:	ddf2      	ble.n	1fb9a <_svfprintf_r+0x99a>
   1fbb4:	aa23      	add	r2, sp, #140	; 0x8c
   1fbb6:	4629      	mov	r1, r5
   1fbb8:	4620      	mov	r0, r4
   1fbba:	f002 fcd3 	bl	22564 <__ssprint_r>
   1fbbe:	2800      	cmp	r0, #0
   1fbc0:	f47f abf0 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fbc4:	3f10      	subs	r7, #16
   1fbc6:	2f10      	cmp	r7, #16
   1fbc8:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fbca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbcc:	464a      	mov	r2, r9
   1fbce:	dce9      	bgt.n	1fba4 <_svfprintf_r+0x9a4>
   1fbd0:	4635      	mov	r5, r6
   1fbd2:	460c      	mov	r4, r1
   1fbd4:	4646      	mov	r6, r8
   1fbd6:	4690      	mov	r8, r2
   1fbd8:	3301      	adds	r3, #1
   1fbda:	443c      	add	r4, r7
   1fbdc:	2b07      	cmp	r3, #7
   1fbde:	9425      	str	r4, [sp, #148]	; 0x94
   1fbe0:	9324      	str	r3, [sp, #144]	; 0x90
   1fbe2:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fbe6:	f300 8234 	bgt.w	20052 <_svfprintf_r+0xe52>
   1fbea:	f108 0808 	add.w	r8, r8, #8
   1fbee:	e49f      	b.n	1f530 <_svfprintf_r+0x330>
   1fbf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fbf2:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fbf4:	2b01      	cmp	r3, #1
   1fbf6:	f340 8200 	ble.w	1fffa <_svfprintf_r+0xdfa>
   1fbfa:	3701      	adds	r7, #1
   1fbfc:	3401      	adds	r4, #1
   1fbfe:	2301      	movs	r3, #1
   1fc00:	2f07      	cmp	r7, #7
   1fc02:	9425      	str	r4, [sp, #148]	; 0x94
   1fc04:	9724      	str	r7, [sp, #144]	; 0x90
   1fc06:	f8c8 6000 	str.w	r6, [r8]
   1fc0a:	f8c8 3004 	str.w	r3, [r8, #4]
   1fc0e:	f300 8205 	bgt.w	2001c <_svfprintf_r+0xe1c>
   1fc12:	f108 0808 	add.w	r8, r8, #8
   1fc16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fc18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1fc1a:	f8c8 3000 	str.w	r3, [r8]
   1fc1e:	3701      	adds	r7, #1
   1fc20:	4414      	add	r4, r2
   1fc22:	2f07      	cmp	r7, #7
   1fc24:	9425      	str	r4, [sp, #148]	; 0x94
   1fc26:	9724      	str	r7, [sp, #144]	; 0x90
   1fc28:	f8c8 2004 	str.w	r2, [r8, #4]
   1fc2c:	f300 8202 	bgt.w	20034 <_svfprintf_r+0xe34>
   1fc30:	f108 0808 	add.w	r8, r8, #8
   1fc34:	2300      	movs	r3, #0
   1fc36:	2200      	movs	r2, #0
   1fc38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fc3c:	f7fc fb66 	bl	1c30c <__aeabi_dcmpeq>
   1fc40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fc42:	2800      	cmp	r0, #0
   1fc44:	f040 8101 	bne.w	1fe4a <_svfprintf_r+0xc4a>
   1fc48:	3b01      	subs	r3, #1
   1fc4a:	3701      	adds	r7, #1
   1fc4c:	3601      	adds	r6, #1
   1fc4e:	441c      	add	r4, r3
   1fc50:	2f07      	cmp	r7, #7
   1fc52:	9724      	str	r7, [sp, #144]	; 0x90
   1fc54:	9425      	str	r4, [sp, #148]	; 0x94
   1fc56:	f8c8 6000 	str.w	r6, [r8]
   1fc5a:	f8c8 3004 	str.w	r3, [r8, #4]
   1fc5e:	f300 8128 	bgt.w	1feb2 <_svfprintf_r+0xcb2>
   1fc62:	f108 0808 	add.w	r8, r8, #8
   1fc66:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1fc68:	f8c8 2004 	str.w	r2, [r8, #4]
   1fc6c:	3701      	adds	r7, #1
   1fc6e:	4414      	add	r4, r2
   1fc70:	ab1f      	add	r3, sp, #124	; 0x7c
   1fc72:	2f07      	cmp	r7, #7
   1fc74:	9425      	str	r4, [sp, #148]	; 0x94
   1fc76:	9724      	str	r7, [sp, #144]	; 0x90
   1fc78:	f8c8 3000 	str.w	r3, [r8]
   1fc7c:	f77f aca5 	ble.w	1f5ca <_svfprintf_r+0x3ca>
   1fc80:	aa23      	add	r2, sp, #140	; 0x8c
   1fc82:	9907      	ldr	r1, [sp, #28]
   1fc84:	9808      	ldr	r0, [sp, #32]
   1fc86:	f002 fc6d 	bl	22564 <__ssprint_r>
   1fc8a:	2800      	cmp	r0, #0
   1fc8c:	f47f ab8a 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fc90:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc92:	46c8      	mov	r8, r9
   1fc94:	e49b      	b.n	1f5ce <_svfprintf_r+0x3ce>
   1fc96:	aa23      	add	r2, sp, #140	; 0x8c
   1fc98:	9907      	ldr	r1, [sp, #28]
   1fc9a:	9808      	ldr	r0, [sp, #32]
   1fc9c:	f002 fc62 	bl	22564 <__ssprint_r>
   1fca0:	2800      	cmp	r0, #0
   1fca2:	f43f acdd 	beq.w	1f660 <_svfprintf_r+0x460>
   1fca6:	f7ff bb7d 	b.w	1f3a4 <_svfprintf_r+0x1a4>
   1fcaa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fcae:	2b01      	cmp	r3, #1
   1fcb0:	f000 8135 	beq.w	1ff1e <_svfprintf_r+0xd1e>
   1fcb4:	2b02      	cmp	r3, #2
   1fcb6:	d125      	bne.n	1fd04 <_svfprintf_r+0xb04>
   1fcb8:	f8cd b00c 	str.w	fp, [sp, #12]
   1fcbc:	2400      	movs	r4, #0
   1fcbe:	2500      	movs	r5, #0
   1fcc0:	e611      	b.n	1f8e6 <_svfprintf_r+0x6e6>
   1fcc2:	aa23      	add	r2, sp, #140	; 0x8c
   1fcc4:	9907      	ldr	r1, [sp, #28]
   1fcc6:	9808      	ldr	r0, [sp, #32]
   1fcc8:	f002 fc4c 	bl	22564 <__ssprint_r>
   1fccc:	2800      	cmp	r0, #0
   1fcce:	f47f ab69 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fcd2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fcd4:	46c8      	mov	r8, r9
   1fcd6:	e467      	b.n	1f5a8 <_svfprintf_r+0x3a8>
   1fcd8:	aa23      	add	r2, sp, #140	; 0x8c
   1fcda:	9907      	ldr	r1, [sp, #28]
   1fcdc:	9808      	ldr	r0, [sp, #32]
   1fcde:	f002 fc41 	bl	22564 <__ssprint_r>
   1fce2:	2800      	cmp	r0, #0
   1fce4:	f47f ab5e 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fce8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fcea:	46c8      	mov	r8, r9
   1fcec:	e41d      	b.n	1f52a <_svfprintf_r+0x32a>
   1fcee:	aa23      	add	r2, sp, #140	; 0x8c
   1fcf0:	9907      	ldr	r1, [sp, #28]
   1fcf2:	9808      	ldr	r0, [sp, #32]
   1fcf4:	f002 fc36 	bl	22564 <__ssprint_r>
   1fcf8:	2800      	cmp	r0, #0
   1fcfa:	f47f ab53 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fcfe:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd00:	46c8      	mov	r8, r9
   1fd02:	e402      	b.n	1f50a <_svfprintf_r+0x30a>
   1fd04:	f8cd b00c 	str.w	fp, [sp, #12]
   1fd08:	2400      	movs	r4, #0
   1fd0a:	2500      	movs	r5, #0
   1fd0c:	4649      	mov	r1, r9
   1fd0e:	e000      	b.n	1fd12 <_svfprintf_r+0xb12>
   1fd10:	4631      	mov	r1, r6
   1fd12:	08e2      	lsrs	r2, r4, #3
   1fd14:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1fd18:	08e8      	lsrs	r0, r5, #3
   1fd1a:	f004 0307 	and.w	r3, r4, #7
   1fd1e:	4605      	mov	r5, r0
   1fd20:	4614      	mov	r4, r2
   1fd22:	3330      	adds	r3, #48	; 0x30
   1fd24:	ea54 0205 	orrs.w	r2, r4, r5
   1fd28:	f801 3c01 	strb.w	r3, [r1, #-1]
   1fd2c:	f101 36ff 	add.w	r6, r1, #4294967295
   1fd30:	d1ee      	bne.n	1fd10 <_svfprintf_r+0xb10>
   1fd32:	9a03      	ldr	r2, [sp, #12]
   1fd34:	07d2      	lsls	r2, r2, #31
   1fd36:	f57f ade6 	bpl.w	1f906 <_svfprintf_r+0x706>
   1fd3a:	2b30      	cmp	r3, #48	; 0x30
   1fd3c:	f43f ade3 	beq.w	1f906 <_svfprintf_r+0x706>
   1fd40:	3902      	subs	r1, #2
   1fd42:	2330      	movs	r3, #48	; 0x30
   1fd44:	f806 3c01 	strb.w	r3, [r6, #-1]
   1fd48:	eba9 0301 	sub.w	r3, r9, r1
   1fd4c:	930a      	str	r3, [sp, #40]	; 0x28
   1fd4e:	460e      	mov	r6, r1
   1fd50:	f7ff bb66 	b.w	1f420 <_svfprintf_r+0x220>
   1fd54:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fd56:	2900      	cmp	r1, #0
   1fd58:	f340 8231 	ble.w	201be <_svfprintf_r+0xfbe>
   1fd5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fd5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fd60:	4293      	cmp	r3, r2
   1fd62:	bfa8      	it	ge
   1fd64:	4613      	movge	r3, r2
   1fd66:	2b00      	cmp	r3, #0
   1fd68:	461f      	mov	r7, r3
   1fd6a:	dd0d      	ble.n	1fd88 <_svfprintf_r+0xb88>
   1fd6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd6e:	f8c8 6000 	str.w	r6, [r8]
   1fd72:	3301      	adds	r3, #1
   1fd74:	443c      	add	r4, r7
   1fd76:	2b07      	cmp	r3, #7
   1fd78:	9425      	str	r4, [sp, #148]	; 0x94
   1fd7a:	f8c8 7004 	str.w	r7, [r8, #4]
   1fd7e:	9324      	str	r3, [sp, #144]	; 0x90
   1fd80:	f300 8321 	bgt.w	203c6 <_svfprintf_r+0x11c6>
   1fd84:	f108 0808 	add.w	r8, r8, #8
   1fd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fd8a:	2f00      	cmp	r7, #0
   1fd8c:	bfa8      	it	ge
   1fd8e:	1bdb      	subge	r3, r3, r7
   1fd90:	2b00      	cmp	r3, #0
   1fd92:	461f      	mov	r7, r3
   1fd94:	f340 80d7 	ble.w	1ff46 <_svfprintf_r+0xd46>
   1fd98:	2f10      	cmp	r7, #16
   1fd9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fd9c:	4d31      	ldr	r5, [pc, #196]	; (1fe64 <_svfprintf_r+0xc64>)
   1fd9e:	f340 81f0 	ble.w	20182 <_svfprintf_r+0xf82>
   1fda2:	4642      	mov	r2, r8
   1fda4:	4621      	mov	r1, r4
   1fda6:	46b0      	mov	r8, r6
   1fda8:	f04f 0b10 	mov.w	fp, #16
   1fdac:	462e      	mov	r6, r5
   1fdae:	9c08      	ldr	r4, [sp, #32]
   1fdb0:	9d07      	ldr	r5, [sp, #28]
   1fdb2:	e004      	b.n	1fdbe <_svfprintf_r+0xbbe>
   1fdb4:	3208      	adds	r2, #8
   1fdb6:	3f10      	subs	r7, #16
   1fdb8:	2f10      	cmp	r7, #16
   1fdba:	f340 81de 	ble.w	2017a <_svfprintf_r+0xf7a>
   1fdbe:	3301      	adds	r3, #1
   1fdc0:	3110      	adds	r1, #16
   1fdc2:	2b07      	cmp	r3, #7
   1fdc4:	9125      	str	r1, [sp, #148]	; 0x94
   1fdc6:	9324      	str	r3, [sp, #144]	; 0x90
   1fdc8:	e882 0840 	stmia.w	r2, {r6, fp}
   1fdcc:	ddf2      	ble.n	1fdb4 <_svfprintf_r+0xbb4>
   1fdce:	aa23      	add	r2, sp, #140	; 0x8c
   1fdd0:	4629      	mov	r1, r5
   1fdd2:	4620      	mov	r0, r4
   1fdd4:	f002 fbc6 	bl	22564 <__ssprint_r>
   1fdd8:	2800      	cmp	r0, #0
   1fdda:	f47f aae3 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fdde:	9925      	ldr	r1, [sp, #148]	; 0x94
   1fde0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fde2:	464a      	mov	r2, r9
   1fde4:	e7e7      	b.n	1fdb6 <_svfprintf_r+0xbb6>
   1fde6:	2d00      	cmp	r5, #0
   1fde8:	bf08      	it	eq
   1fdea:	2c0a      	cmpeq	r4, #10
   1fdec:	f0c0 8095 	bcc.w	1ff1a <_svfprintf_r+0xd1a>
   1fdf0:	464e      	mov	r6, r9
   1fdf2:	4620      	mov	r0, r4
   1fdf4:	4629      	mov	r1, r5
   1fdf6:	220a      	movs	r2, #10
   1fdf8:	2300      	movs	r3, #0
   1fdfa:	f7fc fcaf 	bl	1c75c <__aeabi_uldivmod>
   1fdfe:	3230      	adds	r2, #48	; 0x30
   1fe00:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1fe04:	4620      	mov	r0, r4
   1fe06:	4629      	mov	r1, r5
   1fe08:	2300      	movs	r3, #0
   1fe0a:	220a      	movs	r2, #10
   1fe0c:	f7fc fca6 	bl	1c75c <__aeabi_uldivmod>
   1fe10:	4604      	mov	r4, r0
   1fe12:	460d      	mov	r5, r1
   1fe14:	ea54 0305 	orrs.w	r3, r4, r5
   1fe18:	d1eb      	bne.n	1fdf2 <_svfprintf_r+0xbf2>
   1fe1a:	eba9 0306 	sub.w	r3, r9, r6
   1fe1e:	930a      	str	r3, [sp, #40]	; 0x28
   1fe20:	f7ff bafe 	b.w	1f420 <_svfprintf_r+0x220>
   1fe24:	9b06      	ldr	r3, [sp, #24]
   1fe26:	930a      	str	r3, [sp, #40]	; 0x28
   1fe28:	464e      	mov	r6, r9
   1fe2a:	f7ff baf9 	b.w	1f420 <_svfprintf_r+0x220>
   1fe2e:	aa23      	add	r2, sp, #140	; 0x8c
   1fe30:	9907      	ldr	r1, [sp, #28]
   1fe32:	9808      	ldr	r0, [sp, #32]
   1fe34:	f002 fb96 	bl	22564 <__ssprint_r>
   1fe38:	2800      	cmp	r0, #0
   1fe3a:	f47f aab3 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fe3e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fe42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe44:	46c8      	mov	r8, r9
   1fe46:	f7ff bb50 	b.w	1f4ea <_svfprintf_r+0x2ea>
   1fe4a:	1e5e      	subs	r6, r3, #1
   1fe4c:	2e00      	cmp	r6, #0
   1fe4e:	f77f af0a 	ble.w	1fc66 <_svfprintf_r+0xa66>
   1fe52:	2e10      	cmp	r6, #16
   1fe54:	4d03      	ldr	r5, [pc, #12]	; (1fe64 <_svfprintf_r+0xc64>)
   1fe56:	dd23      	ble.n	1fea0 <_svfprintf_r+0xca0>
   1fe58:	4622      	mov	r2, r4
   1fe5a:	f04f 0b10 	mov.w	fp, #16
   1fe5e:	9c08      	ldr	r4, [sp, #32]
   1fe60:	e007      	b.n	1fe72 <_svfprintf_r+0xc72>
   1fe62:	bf00      	nop
   1fe64:	00024e44 	.word	0x00024e44
   1fe68:	3e10      	subs	r6, #16
   1fe6a:	2e10      	cmp	r6, #16
   1fe6c:	f108 0808 	add.w	r8, r8, #8
   1fe70:	dd15      	ble.n	1fe9e <_svfprintf_r+0xc9e>
   1fe72:	3701      	adds	r7, #1
   1fe74:	3210      	adds	r2, #16
   1fe76:	2f07      	cmp	r7, #7
   1fe78:	9225      	str	r2, [sp, #148]	; 0x94
   1fe7a:	9724      	str	r7, [sp, #144]	; 0x90
   1fe7c:	e888 0820 	stmia.w	r8, {r5, fp}
   1fe80:	ddf2      	ble.n	1fe68 <_svfprintf_r+0xc68>
   1fe82:	aa23      	add	r2, sp, #140	; 0x8c
   1fe84:	9907      	ldr	r1, [sp, #28]
   1fe86:	4620      	mov	r0, r4
   1fe88:	f002 fb6c 	bl	22564 <__ssprint_r>
   1fe8c:	2800      	cmp	r0, #0
   1fe8e:	f47f aa89 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fe92:	3e10      	subs	r6, #16
   1fe94:	2e10      	cmp	r6, #16
   1fe96:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fe98:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fe9a:	46c8      	mov	r8, r9
   1fe9c:	dce9      	bgt.n	1fe72 <_svfprintf_r+0xc72>
   1fe9e:	4614      	mov	r4, r2
   1fea0:	3701      	adds	r7, #1
   1fea2:	4434      	add	r4, r6
   1fea4:	2f07      	cmp	r7, #7
   1fea6:	9425      	str	r4, [sp, #148]	; 0x94
   1fea8:	9724      	str	r7, [sp, #144]	; 0x90
   1feaa:	e888 0060 	stmia.w	r8, {r5, r6}
   1feae:	f77f aed8 	ble.w	1fc62 <_svfprintf_r+0xa62>
   1feb2:	aa23      	add	r2, sp, #140	; 0x8c
   1feb4:	9907      	ldr	r1, [sp, #28]
   1feb6:	9808      	ldr	r0, [sp, #32]
   1feb8:	f002 fb54 	bl	22564 <__ssprint_r>
   1febc:	2800      	cmp	r0, #0
   1febe:	f47f aa71 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1fec2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fec4:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fec6:	46c8      	mov	r8, r9
   1fec8:	e6cd      	b.n	1fc66 <_svfprintf_r+0xa66>
   1feca:	681c      	ldr	r4, [r3, #0]
   1fecc:	3304      	adds	r3, #4
   1fece:	930b      	str	r3, [sp, #44]	; 0x2c
   1fed0:	2500      	movs	r5, #0
   1fed2:	e422      	b.n	1f71a <_svfprintf_r+0x51a>
   1fed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fed6:	460a      	mov	r2, r1
   1fed8:	3204      	adds	r2, #4
   1feda:	680c      	ldr	r4, [r1, #0]
   1fedc:	920b      	str	r2, [sp, #44]	; 0x2c
   1fede:	2500      	movs	r5, #0
   1fee0:	f7ff ba81 	b.w	1f3e6 <_svfprintf_r+0x1e6>
   1fee4:	3204      	adds	r2, #4
   1fee6:	681c      	ldr	r4, [r3, #0]
   1fee8:	920b      	str	r2, [sp, #44]	; 0x2c
   1feea:	2301      	movs	r3, #1
   1feec:	2500      	movs	r5, #0
   1feee:	f7ff ba7a 	b.w	1f3e6 <_svfprintf_r+0x1e6>
   1fef2:	4614      	mov	r4, r2
   1fef4:	3301      	adds	r3, #1
   1fef6:	4434      	add	r4, r6
   1fef8:	2b07      	cmp	r3, #7
   1fefa:	9425      	str	r4, [sp, #148]	; 0x94
   1fefc:	9324      	str	r3, [sp, #144]	; 0x90
   1fefe:	e888 0060 	stmia.w	r8, {r5, r6}
   1ff02:	f77f ab62 	ble.w	1f5ca <_svfprintf_r+0x3ca>
   1ff06:	e6bb      	b.n	1fc80 <_svfprintf_r+0xa80>
   1ff08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ff0a:	6814      	ldr	r4, [r2, #0]
   1ff0c:	4613      	mov	r3, r2
   1ff0e:	3304      	adds	r3, #4
   1ff10:	17e5      	asrs	r5, r4, #31
   1ff12:	930b      	str	r3, [sp, #44]	; 0x2c
   1ff14:	4622      	mov	r2, r4
   1ff16:	462b      	mov	r3, r5
   1ff18:	e4cd      	b.n	1f8b6 <_svfprintf_r+0x6b6>
   1ff1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1ff1e:	f8cd b00c 	str.w	fp, [sp, #12]
   1ff22:	ae40      	add	r6, sp, #256	; 0x100
   1ff24:	3430      	adds	r4, #48	; 0x30
   1ff26:	2301      	movs	r3, #1
   1ff28:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1ff2c:	930a      	str	r3, [sp, #40]	; 0x28
   1ff2e:	f7ff ba77 	b.w	1f420 <_svfprintf_r+0x220>
   1ff32:	aa23      	add	r2, sp, #140	; 0x8c
   1ff34:	9907      	ldr	r1, [sp, #28]
   1ff36:	9808      	ldr	r0, [sp, #32]
   1ff38:	f002 fb14 	bl	22564 <__ssprint_r>
   1ff3c:	2800      	cmp	r0, #0
   1ff3e:	f47f aa31 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1ff42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ff44:	46c8      	mov	r8, r9
   1ff46:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1ff48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ff4a:	429a      	cmp	r2, r3
   1ff4c:	db44      	blt.n	1ffd8 <_svfprintf_r+0xdd8>
   1ff4e:	9b03      	ldr	r3, [sp, #12]
   1ff50:	07d9      	lsls	r1, r3, #31
   1ff52:	d441      	bmi.n	1ffd8 <_svfprintf_r+0xdd8>
   1ff54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ff56:	980e      	ldr	r0, [sp, #56]	; 0x38
   1ff58:	1a9a      	subs	r2, r3, r2
   1ff5a:	1a1d      	subs	r5, r3, r0
   1ff5c:	4295      	cmp	r5, r2
   1ff5e:	bfa8      	it	ge
   1ff60:	4615      	movge	r5, r2
   1ff62:	2d00      	cmp	r5, #0
   1ff64:	dd0e      	ble.n	1ff84 <_svfprintf_r+0xd84>
   1ff66:	9924      	ldr	r1, [sp, #144]	; 0x90
   1ff68:	f8c8 5004 	str.w	r5, [r8, #4]
   1ff6c:	3101      	adds	r1, #1
   1ff6e:	4406      	add	r6, r0
   1ff70:	442c      	add	r4, r5
   1ff72:	2907      	cmp	r1, #7
   1ff74:	f8c8 6000 	str.w	r6, [r8]
   1ff78:	9425      	str	r4, [sp, #148]	; 0x94
   1ff7a:	9124      	str	r1, [sp, #144]	; 0x90
   1ff7c:	f300 823a 	bgt.w	203f4 <_svfprintf_r+0x11f4>
   1ff80:	f108 0808 	add.w	r8, r8, #8
   1ff84:	2d00      	cmp	r5, #0
   1ff86:	bfac      	ite	ge
   1ff88:	1b56      	subge	r6, r2, r5
   1ff8a:	4616      	movlt	r6, r2
   1ff8c:	2e00      	cmp	r6, #0
   1ff8e:	f77f ab1e 	ble.w	1f5ce <_svfprintf_r+0x3ce>
   1ff92:	2e10      	cmp	r6, #16
   1ff94:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ff96:	4db1      	ldr	r5, [pc, #708]	; (2025c <_svfprintf_r+0x105c>)
   1ff98:	ddac      	ble.n	1fef4 <_svfprintf_r+0xcf4>
   1ff9a:	4622      	mov	r2, r4
   1ff9c:	2710      	movs	r7, #16
   1ff9e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1ffa2:	9c07      	ldr	r4, [sp, #28]
   1ffa4:	e004      	b.n	1ffb0 <_svfprintf_r+0xdb0>
   1ffa6:	f108 0808 	add.w	r8, r8, #8
   1ffaa:	3e10      	subs	r6, #16
   1ffac:	2e10      	cmp	r6, #16
   1ffae:	dda0      	ble.n	1fef2 <_svfprintf_r+0xcf2>
   1ffb0:	3301      	adds	r3, #1
   1ffb2:	3210      	adds	r2, #16
   1ffb4:	2b07      	cmp	r3, #7
   1ffb6:	9225      	str	r2, [sp, #148]	; 0x94
   1ffb8:	9324      	str	r3, [sp, #144]	; 0x90
   1ffba:	e888 00a0 	stmia.w	r8, {r5, r7}
   1ffbe:	ddf2      	ble.n	1ffa6 <_svfprintf_r+0xda6>
   1ffc0:	aa23      	add	r2, sp, #140	; 0x8c
   1ffc2:	4621      	mov	r1, r4
   1ffc4:	4658      	mov	r0, fp
   1ffc6:	f002 facd 	bl	22564 <__ssprint_r>
   1ffca:	2800      	cmp	r0, #0
   1ffcc:	f47f a9ea 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   1ffd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ffd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ffd4:	46c8      	mov	r8, r9
   1ffd6:	e7e8      	b.n	1ffaa <_svfprintf_r+0xdaa>
   1ffd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ffda:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1ffdc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1ffde:	f8c8 1000 	str.w	r1, [r8]
   1ffe2:	3301      	adds	r3, #1
   1ffe4:	4404      	add	r4, r0
   1ffe6:	2b07      	cmp	r3, #7
   1ffe8:	9425      	str	r4, [sp, #148]	; 0x94
   1ffea:	f8c8 0004 	str.w	r0, [r8, #4]
   1ffee:	9324      	str	r3, [sp, #144]	; 0x90
   1fff0:	f300 81f4 	bgt.w	203dc <_svfprintf_r+0x11dc>
   1fff4:	f108 0808 	add.w	r8, r8, #8
   1fff8:	e7ac      	b.n	1ff54 <_svfprintf_r+0xd54>
   1fffa:	9b03      	ldr	r3, [sp, #12]
   1fffc:	07da      	lsls	r2, r3, #31
   1fffe:	f53f adfc 	bmi.w	1fbfa <_svfprintf_r+0x9fa>
   20002:	3701      	adds	r7, #1
   20004:	3401      	adds	r4, #1
   20006:	2301      	movs	r3, #1
   20008:	2f07      	cmp	r7, #7
   2000a:	9425      	str	r4, [sp, #148]	; 0x94
   2000c:	9724      	str	r7, [sp, #144]	; 0x90
   2000e:	f8c8 6000 	str.w	r6, [r8]
   20012:	f8c8 3004 	str.w	r3, [r8, #4]
   20016:	f77f ae24 	ble.w	1fc62 <_svfprintf_r+0xa62>
   2001a:	e74a      	b.n	1feb2 <_svfprintf_r+0xcb2>
   2001c:	aa23      	add	r2, sp, #140	; 0x8c
   2001e:	9907      	ldr	r1, [sp, #28]
   20020:	9808      	ldr	r0, [sp, #32]
   20022:	f002 fa9f 	bl	22564 <__ssprint_r>
   20026:	2800      	cmp	r0, #0
   20028:	f47f a9bc 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   2002c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2002e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   20030:	46c8      	mov	r8, r9
   20032:	e5f0      	b.n	1fc16 <_svfprintf_r+0xa16>
   20034:	aa23      	add	r2, sp, #140	; 0x8c
   20036:	9907      	ldr	r1, [sp, #28]
   20038:	9808      	ldr	r0, [sp, #32]
   2003a:	f002 fa93 	bl	22564 <__ssprint_r>
   2003e:	2800      	cmp	r0, #0
   20040:	f47f a9b0 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   20044:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20046:	9f24      	ldr	r7, [sp, #144]	; 0x90
   20048:	46c8      	mov	r8, r9
   2004a:	e5f3      	b.n	1fc34 <_svfprintf_r+0xa34>
   2004c:	464e      	mov	r6, r9
   2004e:	f7ff b9e7 	b.w	1f420 <_svfprintf_r+0x220>
   20052:	aa23      	add	r2, sp, #140	; 0x8c
   20054:	9907      	ldr	r1, [sp, #28]
   20056:	9808      	ldr	r0, [sp, #32]
   20058:	f002 fa84 	bl	22564 <__ssprint_r>
   2005c:	2800      	cmp	r0, #0
   2005e:	f47f a9a1 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   20062:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20064:	46c8      	mov	r8, r9
   20066:	f7ff ba63 	b.w	1f530 <_svfprintf_r+0x330>
   2006a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2006e:	4602      	mov	r2, r0
   20070:	460b      	mov	r3, r1
   20072:	f002 fc4d 	bl	22910 <__aeabi_dcmpun>
   20076:	2800      	cmp	r0, #0
   20078:	f040 8298 	bne.w	205ac <_svfprintf_r+0x13ac>
   2007c:	9b06      	ldr	r3, [sp, #24]
   2007e:	3301      	adds	r3, #1
   20080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20082:	f023 0720 	bic.w	r7, r3, #32
   20086:	f000 81d2 	beq.w	2042e <_svfprintf_r+0x122e>
   2008a:	2f47      	cmp	r7, #71	; 0x47
   2008c:	f000 8120 	beq.w	202d0 <_svfprintf_r+0x10d0>
   20090:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20092:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   20096:	2b00      	cmp	r3, #0
   20098:	9203      	str	r2, [sp, #12]
   2009a:	f2c0 81f0 	blt.w	2047e <_svfprintf_r+0x127e>
   2009e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   200a2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   200a6:	2300      	movs	r3, #0
   200a8:	930c      	str	r3, [sp, #48]	; 0x30
   200aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   200ac:	2b66      	cmp	r3, #102	; 0x66
   200ae:	f000 81c1 	beq.w	20434 <_svfprintf_r+0x1234>
   200b2:	2b46      	cmp	r3, #70	; 0x46
   200b4:	f000 80f1 	beq.w	2029a <_svfprintf_r+0x109a>
   200b8:	2f45      	cmp	r7, #69	; 0x45
   200ba:	bf0c      	ite	eq
   200bc:	9b06      	ldreq	r3, [sp, #24]
   200be:	9d06      	ldrne	r5, [sp, #24]
   200c0:	9808      	ldr	r0, [sp, #32]
   200c2:	bf08      	it	eq
   200c4:	1c5d      	addeq	r5, r3, #1
   200c6:	aa21      	add	r2, sp, #132	; 0x84
   200c8:	ab1e      	add	r3, sp, #120	; 0x78
   200ca:	9201      	str	r2, [sp, #4]
   200cc:	9300      	str	r3, [sp, #0]
   200ce:	462a      	mov	r2, r5
   200d0:	ab1d      	add	r3, sp, #116	; 0x74
   200d2:	2102      	movs	r1, #2
   200d4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   200d8:	f000 fcae 	bl	20a38 <_dtoa_r>
   200dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   200de:	2b67      	cmp	r3, #103	; 0x67
   200e0:	4606      	mov	r6, r0
   200e2:	f040 81d5 	bne.w	20490 <_svfprintf_r+0x1290>
   200e6:	f01b 0f01 	tst.w	fp, #1
   200ea:	f000 824e 	beq.w	2058a <_svfprintf_r+0x138a>
   200ee:	1974      	adds	r4, r6, r5
   200f0:	2200      	movs	r2, #0
   200f2:	2300      	movs	r3, #0
   200f4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   200f8:	f7fc f908 	bl	1c30c <__aeabi_dcmpeq>
   200fc:	2800      	cmp	r0, #0
   200fe:	f040 8160 	bne.w	203c2 <_svfprintf_r+0x11c2>
   20102:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20104:	42a3      	cmp	r3, r4
   20106:	d206      	bcs.n	20116 <_svfprintf_r+0xf16>
   20108:	2130      	movs	r1, #48	; 0x30
   2010a:	1c5a      	adds	r2, r3, #1
   2010c:	9221      	str	r2, [sp, #132]	; 0x84
   2010e:	7019      	strb	r1, [r3, #0]
   20110:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20112:	429c      	cmp	r4, r3
   20114:	d8f9      	bhi.n	2010a <_svfprintf_r+0xf0a>
   20116:	1b9b      	subs	r3, r3, r6
   20118:	2f47      	cmp	r7, #71	; 0x47
   2011a:	930f      	str	r3, [sp, #60]	; 0x3c
   2011c:	f000 80f0 	beq.w	20300 <_svfprintf_r+0x1100>
   20120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20122:	2b65      	cmp	r3, #101	; 0x65
   20124:	f340 81c3 	ble.w	204ae <_svfprintf_r+0x12ae>
   20128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2012a:	2b66      	cmp	r3, #102	; 0x66
   2012c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2012e:	930e      	str	r3, [sp, #56]	; 0x38
   20130:	f000 81c0 	beq.w	204b4 <_svfprintf_r+0x12b4>
   20134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   20138:	4619      	mov	r1, r3
   2013a:	4291      	cmp	r1, r2
   2013c:	f300 8191 	bgt.w	20462 <_svfprintf_r+0x1262>
   20140:	f01b 0f01 	tst.w	fp, #1
   20144:	f040 8223 	bne.w	2058e <_svfprintf_r+0x138e>
   20148:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2014c:	9304      	str	r3, [sp, #16]
   2014e:	2367      	movs	r3, #103	; 0x67
   20150:	920a      	str	r2, [sp, #40]	; 0x28
   20152:	930d      	str	r3, [sp, #52]	; 0x34
   20154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20156:	2b00      	cmp	r3, #0
   20158:	f040 80cb 	bne.w	202f2 <_svfprintf_r+0x10f2>
   2015c:	9306      	str	r3, [sp, #24]
   2015e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   20162:	f7ff b965 	b.w	1f430 <_svfprintf_r+0x230>
   20166:	f025 0507 	bic.w	r5, r5, #7
   2016a:	ed95 7b00 	vldr	d7, [r5]
   2016e:	f105 0308 	add.w	r3, r5, #8
   20172:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   20176:	930b      	str	r3, [sp, #44]	; 0x2c
   20178:	e416      	b.n	1f9a8 <_svfprintf_r+0x7a8>
   2017a:	4635      	mov	r5, r6
   2017c:	460c      	mov	r4, r1
   2017e:	4646      	mov	r6, r8
   20180:	4690      	mov	r8, r2
   20182:	3301      	adds	r3, #1
   20184:	443c      	add	r4, r7
   20186:	2b07      	cmp	r3, #7
   20188:	9425      	str	r4, [sp, #148]	; 0x94
   2018a:	9324      	str	r3, [sp, #144]	; 0x90
   2018c:	e888 00a0 	stmia.w	r8, {r5, r7}
   20190:	f73f aecf 	bgt.w	1ff32 <_svfprintf_r+0xd32>
   20194:	f108 0808 	add.w	r8, r8, #8
   20198:	e6d5      	b.n	1ff46 <_svfprintf_r+0xd46>
   2019a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2019c:	6813      	ldr	r3, [r2, #0]
   2019e:	3204      	adds	r2, #4
   201a0:	920b      	str	r2, [sp, #44]	; 0x2c
   201a2:	9a05      	ldr	r2, [sp, #20]
   201a4:	601a      	str	r2, [r3, #0]
   201a6:	f7ff b852 	b.w	1f24e <_svfprintf_r+0x4e>
   201aa:	aa23      	add	r2, sp, #140	; 0x8c
   201ac:	9907      	ldr	r1, [sp, #28]
   201ae:	9808      	ldr	r0, [sp, #32]
   201b0:	f002 f9d8 	bl	22564 <__ssprint_r>
   201b4:	2800      	cmp	r0, #0
   201b6:	f47f a8f5 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   201ba:	46c8      	mov	r8, r9
   201bc:	e488      	b.n	1fad0 <_svfprintf_r+0x8d0>
   201be:	9b24      	ldr	r3, [sp, #144]	; 0x90
   201c0:	4a27      	ldr	r2, [pc, #156]	; (20260 <_svfprintf_r+0x1060>)
   201c2:	f8c8 2000 	str.w	r2, [r8]
   201c6:	3301      	adds	r3, #1
   201c8:	3401      	adds	r4, #1
   201ca:	2201      	movs	r2, #1
   201cc:	2b07      	cmp	r3, #7
   201ce:	9425      	str	r4, [sp, #148]	; 0x94
   201d0:	9324      	str	r3, [sp, #144]	; 0x90
   201d2:	f8c8 2004 	str.w	r2, [r8, #4]
   201d6:	dc54      	bgt.n	20282 <_svfprintf_r+0x1082>
   201d8:	f108 0808 	add.w	r8, r8, #8
   201dc:	b929      	cbnz	r1, 201ea <_svfprintf_r+0xfea>
   201de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   201e0:	b91b      	cbnz	r3, 201ea <_svfprintf_r+0xfea>
   201e2:	9b03      	ldr	r3, [sp, #12]
   201e4:	07d8      	lsls	r0, r3, #31
   201e6:	f57f a9f2 	bpl.w	1f5ce <_svfprintf_r+0x3ce>
   201ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   201ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
   201ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   201f0:	f8c8 2000 	str.w	r2, [r8]
   201f4:	3301      	adds	r3, #1
   201f6:	4602      	mov	r2, r0
   201f8:	4422      	add	r2, r4
   201fa:	2b07      	cmp	r3, #7
   201fc:	9225      	str	r2, [sp, #148]	; 0x94
   201fe:	f8c8 0004 	str.w	r0, [r8, #4]
   20202:	9324      	str	r3, [sp, #144]	; 0x90
   20204:	f300 8195 	bgt.w	20532 <_svfprintf_r+0x1332>
   20208:	f108 0808 	add.w	r8, r8, #8
   2020c:	2900      	cmp	r1, #0
   2020e:	f2c0 816d 	blt.w	204ec <_svfprintf_r+0x12ec>
   20212:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20214:	f8c8 6000 	str.w	r6, [r8]
   20218:	3301      	adds	r3, #1
   2021a:	188c      	adds	r4, r1, r2
   2021c:	2b07      	cmp	r3, #7
   2021e:	9425      	str	r4, [sp, #148]	; 0x94
   20220:	9324      	str	r3, [sp, #144]	; 0x90
   20222:	f8c8 1004 	str.w	r1, [r8, #4]
   20226:	f77f a9d0 	ble.w	1f5ca <_svfprintf_r+0x3ca>
   2022a:	e529      	b.n	1fc80 <_svfprintf_r+0xa80>
   2022c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2022e:	9905      	ldr	r1, [sp, #20]
   20230:	6813      	ldr	r3, [r2, #0]
   20232:	17cd      	asrs	r5, r1, #31
   20234:	4608      	mov	r0, r1
   20236:	3204      	adds	r2, #4
   20238:	4629      	mov	r1, r5
   2023a:	920b      	str	r2, [sp, #44]	; 0x2c
   2023c:	e9c3 0100 	strd	r0, r1, [r3]
   20240:	f7ff b805 	b.w	1f24e <_svfprintf_r+0x4e>
   20244:	aa23      	add	r2, sp, #140	; 0x8c
   20246:	9907      	ldr	r1, [sp, #28]
   20248:	9808      	ldr	r0, [sp, #32]
   2024a:	f002 f98b 	bl	22564 <__ssprint_r>
   2024e:	2800      	cmp	r0, #0
   20250:	f47f a8a8 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   20254:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20256:	46c8      	mov	r8, r9
   20258:	e453      	b.n	1fb02 <_svfprintf_r+0x902>
   2025a:	bf00      	nop
   2025c:	00024e44 	.word	0x00024e44
   20260:	00024e30 	.word	0x00024e30
   20264:	2140      	movs	r1, #64	; 0x40
   20266:	9808      	ldr	r0, [sp, #32]
   20268:	f7fd fe72 	bl	1df50 <_malloc_r>
   2026c:	9a07      	ldr	r2, [sp, #28]
   2026e:	6010      	str	r0, [r2, #0]
   20270:	6110      	str	r0, [r2, #16]
   20272:	2800      	cmp	r0, #0
   20274:	f000 81f6 	beq.w	20664 <_svfprintf_r+0x1464>
   20278:	9a07      	ldr	r2, [sp, #28]
   2027a:	2340      	movs	r3, #64	; 0x40
   2027c:	6153      	str	r3, [r2, #20]
   2027e:	f7fe bfd6 	b.w	1f22e <_svfprintf_r+0x2e>
   20282:	aa23      	add	r2, sp, #140	; 0x8c
   20284:	9907      	ldr	r1, [sp, #28]
   20286:	9808      	ldr	r0, [sp, #32]
   20288:	f002 f96c 	bl	22564 <__ssprint_r>
   2028c:	2800      	cmp	r0, #0
   2028e:	f47f a889 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   20292:	991d      	ldr	r1, [sp, #116]	; 0x74
   20294:	9c25      	ldr	r4, [sp, #148]	; 0x94
   20296:	46c8      	mov	r8, r9
   20298:	e7a0      	b.n	201dc <_svfprintf_r+0xfdc>
   2029a:	9d06      	ldr	r5, [sp, #24]
   2029c:	9808      	ldr	r0, [sp, #32]
   2029e:	aa21      	add	r2, sp, #132	; 0x84
   202a0:	ab1e      	add	r3, sp, #120	; 0x78
   202a2:	9201      	str	r2, [sp, #4]
   202a4:	9300      	str	r3, [sp, #0]
   202a6:	462a      	mov	r2, r5
   202a8:	ab1d      	add	r3, sp, #116	; 0x74
   202aa:	2103      	movs	r1, #3
   202ac:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   202b0:	f000 fbc2 	bl	20a38 <_dtoa_r>
   202b4:	4606      	mov	r6, r0
   202b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   202b8:	2b46      	cmp	r3, #70	; 0x46
   202ba:	eb06 0405 	add.w	r4, r6, r5
   202be:	f47f af17 	bne.w	200f0 <_svfprintf_r+0xef0>
   202c2:	7833      	ldrb	r3, [r6, #0]
   202c4:	2b30      	cmp	r3, #48	; 0x30
   202c6:	f000 817d 	beq.w	205c4 <_svfprintf_r+0x13c4>
   202ca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   202cc:	442c      	add	r4, r5
   202ce:	e70f      	b.n	200f0 <_svfprintf_r+0xef0>
   202d0:	9b06      	ldr	r3, [sp, #24]
   202d2:	2b00      	cmp	r3, #0
   202d4:	bf08      	it	eq
   202d6:	2301      	moveq	r3, #1
   202d8:	9306      	str	r3, [sp, #24]
   202da:	e6d9      	b.n	20090 <_svfprintf_r+0xe90>
   202dc:	4630      	mov	r0, r6
   202de:	9406      	str	r4, [sp, #24]
   202e0:	f7fe fece 	bl	1f080 <strlen>
   202e4:	950b      	str	r5, [sp, #44]	; 0x2c
   202e6:	900a      	str	r0, [sp, #40]	; 0x28
   202e8:	f8cd b00c 	str.w	fp, [sp, #12]
   202ec:	4603      	mov	r3, r0
   202ee:	f7ff b9eb 	b.w	1f6c8 <_svfprintf_r+0x4c8>
   202f2:	272d      	movs	r7, #45	; 0x2d
   202f4:	2300      	movs	r3, #0
   202f6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   202fa:	9306      	str	r3, [sp, #24]
   202fc:	f7ff b899 	b.w	1f432 <_svfprintf_r+0x232>
   20300:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20302:	930e      	str	r3, [sp, #56]	; 0x38
   20304:	461a      	mov	r2, r3
   20306:	3303      	adds	r3, #3
   20308:	db04      	blt.n	20314 <_svfprintf_r+0x1114>
   2030a:	9b06      	ldr	r3, [sp, #24]
   2030c:	4619      	mov	r1, r3
   2030e:	4291      	cmp	r1, r2
   20310:	f6bf af10 	bge.w	20134 <_svfprintf_r+0xf34>
   20314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20316:	3b02      	subs	r3, #2
   20318:	930d      	str	r3, [sp, #52]	; 0x34
   2031a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2031e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   20322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20324:	3b01      	subs	r3, #1
   20326:	2b00      	cmp	r3, #0
   20328:	931d      	str	r3, [sp, #116]	; 0x74
   2032a:	bfbd      	ittte	lt
   2032c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   2032e:	f1c3 0301 	rsblt	r3, r3, #1
   20332:	222d      	movlt	r2, #45	; 0x2d
   20334:	222b      	movge	r2, #43	; 0x2b
   20336:	2b09      	cmp	r3, #9
   20338:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   2033c:	f340 811d 	ble.w	2057a <_svfprintf_r+0x137a>
   20340:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   20344:	4620      	mov	r0, r4
   20346:	4daf      	ldr	r5, [pc, #700]	; (20604 <_svfprintf_r+0x1404>)
   20348:	e000      	b.n	2034c <_svfprintf_r+0x114c>
   2034a:	4610      	mov	r0, r2
   2034c:	fb85 1203 	smull	r1, r2, r5, r3
   20350:	17d9      	asrs	r1, r3, #31
   20352:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   20356:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2035a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2035e:	3230      	adds	r2, #48	; 0x30
   20360:	2909      	cmp	r1, #9
   20362:	f800 2c01 	strb.w	r2, [r0, #-1]
   20366:	460b      	mov	r3, r1
   20368:	f100 32ff 	add.w	r2, r0, #4294967295
   2036c:	dced      	bgt.n	2034a <_svfprintf_r+0x114a>
   2036e:	3330      	adds	r3, #48	; 0x30
   20370:	3802      	subs	r0, #2
   20372:	b2d9      	uxtb	r1, r3
   20374:	4284      	cmp	r4, r0
   20376:	f802 1c01 	strb.w	r1, [r2, #-1]
   2037a:	f240 8170 	bls.w	2065e <_svfprintf_r+0x145e>
   2037e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   20382:	4613      	mov	r3, r2
   20384:	e001      	b.n	2038a <_svfprintf_r+0x118a>
   20386:	f813 1b01 	ldrb.w	r1, [r3], #1
   2038a:	f800 1b01 	strb.w	r1, [r0], #1
   2038e:	42a3      	cmp	r3, r4
   20390:	d1f9      	bne.n	20386 <_svfprintf_r+0x1186>
   20392:	3301      	adds	r3, #1
   20394:	1a9b      	subs	r3, r3, r2
   20396:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   2039a:	4413      	add	r3, r2
   2039c:	aa1f      	add	r2, sp, #124	; 0x7c
   2039e:	1a9b      	subs	r3, r3, r2
   203a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   203a2:	9315      	str	r3, [sp, #84]	; 0x54
   203a4:	2a01      	cmp	r2, #1
   203a6:	4413      	add	r3, r2
   203a8:	930a      	str	r3, [sp, #40]	; 0x28
   203aa:	f340 8120 	ble.w	205ee <_svfprintf_r+0x13ee>
   203ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   203b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   203b2:	4413      	add	r3, r2
   203b4:	930a      	str	r3, [sp, #40]	; 0x28
   203b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   203ba:	9304      	str	r3, [sp, #16]
   203bc:	2300      	movs	r3, #0
   203be:	930e      	str	r3, [sp, #56]	; 0x38
   203c0:	e6c8      	b.n	20154 <_svfprintf_r+0xf54>
   203c2:	4623      	mov	r3, r4
   203c4:	e6a7      	b.n	20116 <_svfprintf_r+0xf16>
   203c6:	aa23      	add	r2, sp, #140	; 0x8c
   203c8:	9907      	ldr	r1, [sp, #28]
   203ca:	9808      	ldr	r0, [sp, #32]
   203cc:	f002 f8ca 	bl	22564 <__ssprint_r>
   203d0:	2800      	cmp	r0, #0
   203d2:	f47e afe7 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   203d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   203d8:	46c8      	mov	r8, r9
   203da:	e4d5      	b.n	1fd88 <_svfprintf_r+0xb88>
   203dc:	aa23      	add	r2, sp, #140	; 0x8c
   203de:	9907      	ldr	r1, [sp, #28]
   203e0:	9808      	ldr	r0, [sp, #32]
   203e2:	f002 f8bf 	bl	22564 <__ssprint_r>
   203e6:	2800      	cmp	r0, #0
   203e8:	f47e afdc 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   203ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   203ee:	9c25      	ldr	r4, [sp, #148]	; 0x94
   203f0:	46c8      	mov	r8, r9
   203f2:	e5af      	b.n	1ff54 <_svfprintf_r+0xd54>
   203f4:	aa23      	add	r2, sp, #140	; 0x8c
   203f6:	9907      	ldr	r1, [sp, #28]
   203f8:	9808      	ldr	r0, [sp, #32]
   203fa:	f002 f8b3 	bl	22564 <__ssprint_r>
   203fe:	2800      	cmp	r0, #0
   20400:	f47e afd0 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   20404:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20408:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2040a:	1a9a      	subs	r2, r3, r2
   2040c:	46c8      	mov	r8, r9
   2040e:	e5b9      	b.n	1ff84 <_svfprintf_r+0xd84>
   20410:	9b06      	ldr	r3, [sp, #24]
   20412:	960e      	str	r6, [sp, #56]	; 0x38
   20414:	2b06      	cmp	r3, #6
   20416:	bf28      	it	cs
   20418:	2306      	movcs	r3, #6
   2041a:	9606      	str	r6, [sp, #24]
   2041c:	4637      	mov	r7, r6
   2041e:	9304      	str	r3, [sp, #16]
   20420:	950b      	str	r5, [sp, #44]	; 0x2c
   20422:	f8cd b00c 	str.w	fp, [sp, #12]
   20426:	930a      	str	r3, [sp, #40]	; 0x28
   20428:	4e77      	ldr	r6, [pc, #476]	; (20608 <_svfprintf_r+0x1408>)
   2042a:	f7ff b801 	b.w	1f430 <_svfprintf_r+0x230>
   2042e:	2306      	movs	r3, #6
   20430:	9306      	str	r3, [sp, #24]
   20432:	e62d      	b.n	20090 <_svfprintf_r+0xe90>
   20434:	9c06      	ldr	r4, [sp, #24]
   20436:	9808      	ldr	r0, [sp, #32]
   20438:	aa21      	add	r2, sp, #132	; 0x84
   2043a:	ab1e      	add	r3, sp, #120	; 0x78
   2043c:	9201      	str	r2, [sp, #4]
   2043e:	9300      	str	r3, [sp, #0]
   20440:	4622      	mov	r2, r4
   20442:	ab1d      	add	r3, sp, #116	; 0x74
   20444:	2103      	movs	r1, #3
   20446:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   2044a:	f000 faf5 	bl	20a38 <_dtoa_r>
   2044e:	4623      	mov	r3, r4
   20450:	4606      	mov	r6, r0
   20452:	1904      	adds	r4, r0, r4
   20454:	461d      	mov	r5, r3
   20456:	e734      	b.n	202c2 <_svfprintf_r+0x10c2>
   20458:	272d      	movs	r7, #45	; 0x2d
   2045a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2045e:	f7ff baca 	b.w	1f9f6 <_svfprintf_r+0x7f6>
   20462:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20466:	4413      	add	r3, r2
   20468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2046a:	930a      	str	r3, [sp, #40]	; 0x28
   2046c:	2a00      	cmp	r2, #0
   2046e:	f340 80b7 	ble.w	205e0 <_svfprintf_r+0x13e0>
   20472:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20476:	9304      	str	r3, [sp, #16]
   20478:	2367      	movs	r3, #103	; 0x67
   2047a:	930d      	str	r3, [sp, #52]	; 0x34
   2047c:	e66a      	b.n	20154 <_svfprintf_r+0xf54>
   2047e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20482:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20486:	9319      	str	r3, [sp, #100]	; 0x64
   20488:	232d      	movs	r3, #45	; 0x2d
   2048a:	9118      	str	r1, [sp, #96]	; 0x60
   2048c:	930c      	str	r3, [sp, #48]	; 0x30
   2048e:	e60c      	b.n	200aa <_svfprintf_r+0xeaa>
   20490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20492:	2b47      	cmp	r3, #71	; 0x47
   20494:	f47f ae2b 	bne.w	200ee <_svfprintf_r+0xeee>
   20498:	f01b 0f01 	tst.w	fp, #1
   2049c:	f47f af0b 	bne.w	202b6 <_svfprintf_r+0x10b6>
   204a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   204a2:	2f47      	cmp	r7, #71	; 0x47
   204a4:	eba3 0306 	sub.w	r3, r3, r6
   204a8:	930f      	str	r3, [sp, #60]	; 0x3c
   204aa:	f43f af29 	beq.w	20300 <_svfprintf_r+0x1100>
   204ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   204b0:	930e      	str	r3, [sp, #56]	; 0x38
   204b2:	e732      	b.n	2031a <_svfprintf_r+0x111a>
   204b4:	2b00      	cmp	r3, #0
   204b6:	f340 80af 	ble.w	20618 <_svfprintf_r+0x1418>
   204ba:	9a06      	ldr	r2, [sp, #24]
   204bc:	2a00      	cmp	r2, #0
   204be:	d16b      	bne.n	20598 <_svfprintf_r+0x1398>
   204c0:	f01b 0f01 	tst.w	fp, #1
   204c4:	d168      	bne.n	20598 <_svfprintf_r+0x1398>
   204c6:	9304      	str	r3, [sp, #16]
   204c8:	930a      	str	r3, [sp, #40]	; 0x28
   204ca:	e643      	b.n	20154 <_svfprintf_r+0xf54>
   204cc:	9b06      	ldr	r3, [sp, #24]
   204ce:	9304      	str	r3, [sp, #16]
   204d0:	930a      	str	r3, [sp, #40]	; 0x28
   204d2:	9006      	str	r0, [sp, #24]
   204d4:	950b      	str	r5, [sp, #44]	; 0x2c
   204d6:	f8cd b00c 	str.w	fp, [sp, #12]
   204da:	900e      	str	r0, [sp, #56]	; 0x38
   204dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   204e0:	f7fe bfa6 	b.w	1f430 <_svfprintf_r+0x230>
   204e4:	2000      	movs	r0, #0
   204e6:	9006      	str	r0, [sp, #24]
   204e8:	f7fe bee4 	b.w	1f2b4 <_svfprintf_r+0xb4>
   204ec:	424f      	negs	r7, r1
   204ee:	3110      	adds	r1, #16
   204f0:	4d46      	ldr	r5, [pc, #280]	; (2060c <_svfprintf_r+0x140c>)
   204f2:	da2b      	bge.n	2054c <_svfprintf_r+0x134c>
   204f4:	2410      	movs	r4, #16
   204f6:	f8dd b020 	ldr.w	fp, [sp, #32]
   204fa:	e004      	b.n	20506 <_svfprintf_r+0x1306>
   204fc:	f108 0808 	add.w	r8, r8, #8
   20500:	3f10      	subs	r7, #16
   20502:	2f10      	cmp	r7, #16
   20504:	dd22      	ble.n	2054c <_svfprintf_r+0x134c>
   20506:	3301      	adds	r3, #1
   20508:	3210      	adds	r2, #16
   2050a:	2b07      	cmp	r3, #7
   2050c:	9225      	str	r2, [sp, #148]	; 0x94
   2050e:	9324      	str	r3, [sp, #144]	; 0x90
   20510:	f8c8 5000 	str.w	r5, [r8]
   20514:	f8c8 4004 	str.w	r4, [r8, #4]
   20518:	ddf0      	ble.n	204fc <_svfprintf_r+0x12fc>
   2051a:	aa23      	add	r2, sp, #140	; 0x8c
   2051c:	9907      	ldr	r1, [sp, #28]
   2051e:	4658      	mov	r0, fp
   20520:	f002 f820 	bl	22564 <__ssprint_r>
   20524:	2800      	cmp	r0, #0
   20526:	f47e af3d 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   2052a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2052c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2052e:	46c8      	mov	r8, r9
   20530:	e7e6      	b.n	20500 <_svfprintf_r+0x1300>
   20532:	aa23      	add	r2, sp, #140	; 0x8c
   20534:	9907      	ldr	r1, [sp, #28]
   20536:	9808      	ldr	r0, [sp, #32]
   20538:	f002 f814 	bl	22564 <__ssprint_r>
   2053c:	2800      	cmp	r0, #0
   2053e:	f47e af31 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   20542:	991d      	ldr	r1, [sp, #116]	; 0x74
   20544:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20546:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20548:	46c8      	mov	r8, r9
   2054a:	e65f      	b.n	2020c <_svfprintf_r+0x100c>
   2054c:	3301      	adds	r3, #1
   2054e:	443a      	add	r2, r7
   20550:	2b07      	cmp	r3, #7
   20552:	e888 00a0 	stmia.w	r8, {r5, r7}
   20556:	9225      	str	r2, [sp, #148]	; 0x94
   20558:	9324      	str	r3, [sp, #144]	; 0x90
   2055a:	f108 0808 	add.w	r8, r8, #8
   2055e:	f77f ae58 	ble.w	20212 <_svfprintf_r+0x1012>
   20562:	aa23      	add	r2, sp, #140	; 0x8c
   20564:	9907      	ldr	r1, [sp, #28]
   20566:	9808      	ldr	r0, [sp, #32]
   20568:	f001 fffc 	bl	22564 <__ssprint_r>
   2056c:	2800      	cmp	r0, #0
   2056e:	f47e af19 	bne.w	1f3a4 <_svfprintf_r+0x1a4>
   20572:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20574:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20576:	46c8      	mov	r8, r9
   20578:	e64b      	b.n	20212 <_svfprintf_r+0x1012>
   2057a:	3330      	adds	r3, #48	; 0x30
   2057c:	2230      	movs	r2, #48	; 0x30
   2057e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20582:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20586:	ab20      	add	r3, sp, #128	; 0x80
   20588:	e708      	b.n	2039c <_svfprintf_r+0x119c>
   2058a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2058c:	e5c3      	b.n	20116 <_svfprintf_r+0xf16>
   2058e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20592:	4413      	add	r3, r2
   20594:	930a      	str	r3, [sp, #40]	; 0x28
   20596:	e76c      	b.n	20472 <_svfprintf_r+0x1272>
   20598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2059a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2059c:	4413      	add	r3, r2
   2059e:	9a06      	ldr	r2, [sp, #24]
   205a0:	441a      	add	r2, r3
   205a2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   205a6:	920a      	str	r2, [sp, #40]	; 0x28
   205a8:	9304      	str	r3, [sp, #16]
   205aa:	e5d3      	b.n	20154 <_svfprintf_r+0xf54>
   205ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   205ae:	4e18      	ldr	r6, [pc, #96]	; (20610 <_svfprintf_r+0x1410>)
   205b0:	2b00      	cmp	r3, #0
   205b2:	bfb6      	itet	lt
   205b4:	272d      	movlt	r7, #45	; 0x2d
   205b6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   205ba:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   205be:	4b15      	ldr	r3, [pc, #84]	; (20614 <_svfprintf_r+0x1414>)
   205c0:	f7ff ba1b 	b.w	1f9fa <_svfprintf_r+0x7fa>
   205c4:	2200      	movs	r2, #0
   205c6:	2300      	movs	r3, #0
   205c8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   205cc:	f7fb fe9e 	bl	1c30c <__aeabi_dcmpeq>
   205d0:	2800      	cmp	r0, #0
   205d2:	f47f ae7a 	bne.w	202ca <_svfprintf_r+0x10ca>
   205d6:	f1c5 0501 	rsb	r5, r5, #1
   205da:	951d      	str	r5, [sp, #116]	; 0x74
   205dc:	442c      	add	r4, r5
   205de:	e587      	b.n	200f0 <_svfprintf_r+0xef0>
   205e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   205e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   205e4:	f1c3 0301 	rsb	r3, r3, #1
   205e8:	441a      	add	r2, r3
   205ea:	4613      	mov	r3, r2
   205ec:	e7d2      	b.n	20594 <_svfprintf_r+0x1394>
   205ee:	f01b 0301 	ands.w	r3, fp, #1
   205f2:	930e      	str	r3, [sp, #56]	; 0x38
   205f4:	f47f aedb 	bne.w	203ae <_svfprintf_r+0x11ae>
   205f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   205fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   205fe:	9304      	str	r3, [sp, #16]
   20600:	e5a8      	b.n	20154 <_svfprintf_r+0xf54>
   20602:	bf00      	nop
   20604:	66666667 	.word	0x66666667
   20608:	00024e28 	.word	0x00024e28
   2060c:	00024e44 	.word	0x00024e44
   20610:	00024dfc 	.word	0x00024dfc
   20614:	00024df8 	.word	0x00024df8
   20618:	9b06      	ldr	r3, [sp, #24]
   2061a:	b913      	cbnz	r3, 20622 <_svfprintf_r+0x1422>
   2061c:	f01b 0f01 	tst.w	fp, #1
   20620:	d002      	beq.n	20628 <_svfprintf_r+0x1428>
   20622:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20624:	3301      	adds	r3, #1
   20626:	e7ba      	b.n	2059e <_svfprintf_r+0x139e>
   20628:	2301      	movs	r3, #1
   2062a:	e74c      	b.n	204c6 <_svfprintf_r+0x12c6>
   2062c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2062e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   20632:	6828      	ldr	r0, [r5, #0]
   20634:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   20638:	9006      	str	r0, [sp, #24]
   2063a:	4628      	mov	r0, r5
   2063c:	3004      	adds	r0, #4
   2063e:	46a2      	mov	sl, r4
   20640:	900b      	str	r0, [sp, #44]	; 0x2c
   20642:	f7fe be35 	b.w	1f2b0 <_svfprintf_r+0xb0>
   20646:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2064a:	f7ff b852 	b.w	1f6f2 <_svfprintf_r+0x4f2>
   2064e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20652:	f7ff b8de 	b.w	1f812 <_svfprintf_r+0x612>
   20656:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2065a:	f7ff ba07 	b.w	1fa6c <_svfprintf_r+0x86c>
   2065e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   20662:	e69b      	b.n	2039c <_svfprintf_r+0x119c>
   20664:	9a08      	ldr	r2, [sp, #32]
   20666:	230c      	movs	r3, #12
   20668:	6013      	str	r3, [r2, #0]
   2066a:	f04f 33ff 	mov.w	r3, #4294967295
   2066e:	9305      	str	r3, [sp, #20]
   20670:	f7fe bea1 	b.w	1f3b6 <_svfprintf_r+0x1b6>
   20674:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20678:	f7ff b986 	b.w	1f988 <_svfprintf_r+0x788>
   2067c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20680:	f7ff b962 	b.w	1f948 <_svfprintf_r+0x748>
   20684:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20688:	f7ff b945 	b.w	1f916 <_svfprintf_r+0x716>
   2068c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20690:	f7ff b8fe 	b.w	1f890 <_svfprintf_r+0x690>

00020694 <write>:
   20694:	b410      	push	{r4}
   20696:	4c04      	ldr	r4, [pc, #16]	; (206a8 <write+0x14>)
   20698:	4613      	mov	r3, r2
   2069a:	460a      	mov	r2, r1
   2069c:	4601      	mov	r1, r0
   2069e:	6820      	ldr	r0, [r4, #0]
   206a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   206a4:	f000 b8a8 	b.w	207f8 <_write_r>
   206a8:	20000100 	.word	0x20000100

000206ac <__utoa>:
   206ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   206ae:	f8df e078 	ldr.w	lr, [pc, #120]	; 20728 <__utoa+0x7c>
   206b2:	4616      	mov	r6, r2
   206b4:	4604      	mov	r4, r0
   206b6:	460f      	mov	r7, r1
   206b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   206bc:	b08b      	sub	sp, #44	; 0x2c
   206be:	466d      	mov	r5, sp
   206c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   206c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   206c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   206c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
   206cc:	1eb3      	subs	r3, r6, #2
   206ce:	f845 0b04 	str.w	r0, [r5], #4
   206d2:	2b22      	cmp	r3, #34	; 0x22
   206d4:	7029      	strb	r1, [r5, #0]
   206d6:	d822      	bhi.n	2071e <__utoa+0x72>
   206d8:	1e7d      	subs	r5, r7, #1
   206da:	4628      	mov	r0, r5
   206dc:	2200      	movs	r2, #0
   206de:	e000      	b.n	206e2 <__utoa+0x36>
   206e0:	461a      	mov	r2, r3
   206e2:	fbb4 f1f6 	udiv	r1, r4, r6
   206e6:	ab0a      	add	r3, sp, #40	; 0x28
   206e8:	fb06 4411 	mls	r4, r6, r1, r4
   206ec:	4423      	add	r3, r4
   206ee:	460c      	mov	r4, r1
   206f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   206f4:	f800 3f01 	strb.w	r3, [r0, #1]!
   206f8:	1c53      	adds	r3, r2, #1
   206fa:	2900      	cmp	r1, #0
   206fc:	d1f0      	bne.n	206e0 <__utoa+0x34>
   206fe:	54f9      	strb	r1, [r7, r3]
   20700:	18bb      	adds	r3, r7, r2
   20702:	b14a      	cbz	r2, 20718 <__utoa+0x6c>
   20704:	7819      	ldrb	r1, [r3, #0]
   20706:	7868      	ldrb	r0, [r5, #1]
   20708:	f805 1f01 	strb.w	r1, [r5, #1]!
   2070c:	3401      	adds	r4, #1
   2070e:	1b11      	subs	r1, r2, r4
   20710:	428c      	cmp	r4, r1
   20712:	f803 0901 	strb.w	r0, [r3], #-1
   20716:	dbf5      	blt.n	20704 <__utoa+0x58>
   20718:	4638      	mov	r0, r7
   2071a:	b00b      	add	sp, #44	; 0x2c
   2071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2071e:	2000      	movs	r0, #0
   20720:	7038      	strb	r0, [r7, #0]
   20722:	b00b      	add	sp, #44	; 0x2c
   20724:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20726:	bf00      	nop
   20728:	00024e54 	.word	0x00024e54

0002072c <__swbuf_r>:
   2072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2072e:	460d      	mov	r5, r1
   20730:	4614      	mov	r4, r2
   20732:	4606      	mov	r6, r0
   20734:	b110      	cbz	r0, 2073c <__swbuf_r+0x10>
   20736:	6b83      	ldr	r3, [r0, #56]	; 0x38
   20738:	2b00      	cmp	r3, #0
   2073a:	d04b      	beq.n	207d4 <__swbuf_r+0xa8>
   2073c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20740:	69a3      	ldr	r3, [r4, #24]
   20742:	60a3      	str	r3, [r4, #8]
   20744:	b291      	uxth	r1, r2
   20746:	0708      	lsls	r0, r1, #28
   20748:	d539      	bpl.n	207be <__swbuf_r+0x92>
   2074a:	6923      	ldr	r3, [r4, #16]
   2074c:	2b00      	cmp	r3, #0
   2074e:	d036      	beq.n	207be <__swbuf_r+0x92>
   20750:	b2ed      	uxtb	r5, r5
   20752:	0489      	lsls	r1, r1, #18
   20754:	462f      	mov	r7, r5
   20756:	d515      	bpl.n	20784 <__swbuf_r+0x58>
   20758:	6822      	ldr	r2, [r4, #0]
   2075a:	6961      	ldr	r1, [r4, #20]
   2075c:	1ad3      	subs	r3, r2, r3
   2075e:	428b      	cmp	r3, r1
   20760:	da1c      	bge.n	2079c <__swbuf_r+0x70>
   20762:	3301      	adds	r3, #1
   20764:	68a1      	ldr	r1, [r4, #8]
   20766:	1c50      	adds	r0, r2, #1
   20768:	3901      	subs	r1, #1
   2076a:	60a1      	str	r1, [r4, #8]
   2076c:	6020      	str	r0, [r4, #0]
   2076e:	7015      	strb	r5, [r2, #0]
   20770:	6962      	ldr	r2, [r4, #20]
   20772:	429a      	cmp	r2, r3
   20774:	d01a      	beq.n	207ac <__swbuf_r+0x80>
   20776:	89a3      	ldrh	r3, [r4, #12]
   20778:	07db      	lsls	r3, r3, #31
   2077a:	d501      	bpl.n	20780 <__swbuf_r+0x54>
   2077c:	2d0a      	cmp	r5, #10
   2077e:	d015      	beq.n	207ac <__swbuf_r+0x80>
   20780:	4638      	mov	r0, r7
   20782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20784:	6e61      	ldr	r1, [r4, #100]	; 0x64
   20786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2078a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2078e:	81a2      	strh	r2, [r4, #12]
   20790:	6822      	ldr	r2, [r4, #0]
   20792:	6661      	str	r1, [r4, #100]	; 0x64
   20794:	6961      	ldr	r1, [r4, #20]
   20796:	1ad3      	subs	r3, r2, r3
   20798:	428b      	cmp	r3, r1
   2079a:	dbe2      	blt.n	20762 <__swbuf_r+0x36>
   2079c:	4621      	mov	r1, r4
   2079e:	4630      	mov	r0, r6
   207a0:	f001 f910 	bl	219c4 <_fflush_r>
   207a4:	b940      	cbnz	r0, 207b8 <__swbuf_r+0x8c>
   207a6:	6822      	ldr	r2, [r4, #0]
   207a8:	2301      	movs	r3, #1
   207aa:	e7db      	b.n	20764 <__swbuf_r+0x38>
   207ac:	4621      	mov	r1, r4
   207ae:	4630      	mov	r0, r6
   207b0:	f001 f908 	bl	219c4 <_fflush_r>
   207b4:	2800      	cmp	r0, #0
   207b6:	d0e3      	beq.n	20780 <__swbuf_r+0x54>
   207b8:	f04f 37ff 	mov.w	r7, #4294967295
   207bc:	e7e0      	b.n	20780 <__swbuf_r+0x54>
   207be:	4621      	mov	r1, r4
   207c0:	4630      	mov	r0, r6
   207c2:	f000 f82f 	bl	20824 <__swsetup_r>
   207c6:	2800      	cmp	r0, #0
   207c8:	d1f6      	bne.n	207b8 <__swbuf_r+0x8c>
   207ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   207ce:	6923      	ldr	r3, [r4, #16]
   207d0:	b291      	uxth	r1, r2
   207d2:	e7bd      	b.n	20750 <__swbuf_r+0x24>
   207d4:	f001 f94e 	bl	21a74 <__sinit>
   207d8:	e7b0      	b.n	2073c <__swbuf_r+0x10>
   207da:	bf00      	nop

000207dc <__ascii_wctomb>:
   207dc:	b121      	cbz	r1, 207e8 <__ascii_wctomb+0xc>
   207de:	2aff      	cmp	r2, #255	; 0xff
   207e0:	d804      	bhi.n	207ec <__ascii_wctomb+0x10>
   207e2:	700a      	strb	r2, [r1, #0]
   207e4:	2001      	movs	r0, #1
   207e6:	4770      	bx	lr
   207e8:	4608      	mov	r0, r1
   207ea:	4770      	bx	lr
   207ec:	238a      	movs	r3, #138	; 0x8a
   207ee:	6003      	str	r3, [r0, #0]
   207f0:	f04f 30ff 	mov.w	r0, #4294967295
   207f4:	4770      	bx	lr
   207f6:	bf00      	nop

000207f8 <_write_r>:
   207f8:	b570      	push	{r4, r5, r6, lr}
   207fa:	460d      	mov	r5, r1
   207fc:	4c08      	ldr	r4, [pc, #32]	; (20820 <_write_r+0x28>)
   207fe:	4611      	mov	r1, r2
   20800:	4606      	mov	r6, r0
   20802:	461a      	mov	r2, r3
   20804:	4628      	mov	r0, r5
   20806:	2300      	movs	r3, #0
   20808:	6023      	str	r3, [r4, #0]
   2080a:	f002 f935 	bl	22a78 <_write>
   2080e:	1c43      	adds	r3, r0, #1
   20810:	d000      	beq.n	20814 <_write_r+0x1c>
   20812:	bd70      	pop	{r4, r5, r6, pc}
   20814:	6823      	ldr	r3, [r4, #0]
   20816:	2b00      	cmp	r3, #0
   20818:	d0fb      	beq.n	20812 <_write_r+0x1a>
   2081a:	6033      	str	r3, [r6, #0]
   2081c:	bd70      	pop	{r4, r5, r6, pc}
   2081e:	bf00      	nop
   20820:	200023ac 	.word	0x200023ac

00020824 <__swsetup_r>:
   20824:	b538      	push	{r3, r4, r5, lr}
   20826:	4b30      	ldr	r3, [pc, #192]	; (208e8 <__swsetup_r+0xc4>)
   20828:	681b      	ldr	r3, [r3, #0]
   2082a:	4605      	mov	r5, r0
   2082c:	460c      	mov	r4, r1
   2082e:	b113      	cbz	r3, 20836 <__swsetup_r+0x12>
   20830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20832:	2a00      	cmp	r2, #0
   20834:	d038      	beq.n	208a8 <__swsetup_r+0x84>
   20836:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2083a:	b293      	uxth	r3, r2
   2083c:	0718      	lsls	r0, r3, #28
   2083e:	d50c      	bpl.n	2085a <__swsetup_r+0x36>
   20840:	6920      	ldr	r0, [r4, #16]
   20842:	b1a8      	cbz	r0, 20870 <__swsetup_r+0x4c>
   20844:	f013 0201 	ands.w	r2, r3, #1
   20848:	d01e      	beq.n	20888 <__swsetup_r+0x64>
   2084a:	6963      	ldr	r3, [r4, #20]
   2084c:	2200      	movs	r2, #0
   2084e:	425b      	negs	r3, r3
   20850:	61a3      	str	r3, [r4, #24]
   20852:	60a2      	str	r2, [r4, #8]
   20854:	b1f0      	cbz	r0, 20894 <__swsetup_r+0x70>
   20856:	2000      	movs	r0, #0
   20858:	bd38      	pop	{r3, r4, r5, pc}
   2085a:	06d9      	lsls	r1, r3, #27
   2085c:	d53c      	bpl.n	208d8 <__swsetup_r+0xb4>
   2085e:	0758      	lsls	r0, r3, #29
   20860:	d426      	bmi.n	208b0 <__swsetup_r+0x8c>
   20862:	6920      	ldr	r0, [r4, #16]
   20864:	f042 0308 	orr.w	r3, r2, #8
   20868:	81a3      	strh	r3, [r4, #12]
   2086a:	b29b      	uxth	r3, r3
   2086c:	2800      	cmp	r0, #0
   2086e:	d1e9      	bne.n	20844 <__swsetup_r+0x20>
   20870:	f403 7220 	and.w	r2, r3, #640	; 0x280
   20874:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   20878:	d0e4      	beq.n	20844 <__swsetup_r+0x20>
   2087a:	4628      	mov	r0, r5
   2087c:	4621      	mov	r1, r4
   2087e:	f001 fae7 	bl	21e50 <__smakebuf_r>
   20882:	89a3      	ldrh	r3, [r4, #12]
   20884:	6920      	ldr	r0, [r4, #16]
   20886:	e7dd      	b.n	20844 <__swsetup_r+0x20>
   20888:	0799      	lsls	r1, r3, #30
   2088a:	bf58      	it	pl
   2088c:	6962      	ldrpl	r2, [r4, #20]
   2088e:	60a2      	str	r2, [r4, #8]
   20890:	2800      	cmp	r0, #0
   20892:	d1e0      	bne.n	20856 <__swsetup_r+0x32>
   20894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20898:	061a      	lsls	r2, r3, #24
   2089a:	d5dd      	bpl.n	20858 <__swsetup_r+0x34>
   2089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   208a0:	81a3      	strh	r3, [r4, #12]
   208a2:	f04f 30ff 	mov.w	r0, #4294967295
   208a6:	bd38      	pop	{r3, r4, r5, pc}
   208a8:	4618      	mov	r0, r3
   208aa:	f001 f8e3 	bl	21a74 <__sinit>
   208ae:	e7c2      	b.n	20836 <__swsetup_r+0x12>
   208b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   208b2:	b151      	cbz	r1, 208ca <__swsetup_r+0xa6>
   208b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   208b8:	4299      	cmp	r1, r3
   208ba:	d004      	beq.n	208c6 <__swsetup_r+0xa2>
   208bc:	4628      	mov	r0, r5
   208be:	f001 f97b 	bl	21bb8 <_free_r>
   208c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   208c6:	2300      	movs	r3, #0
   208c8:	6323      	str	r3, [r4, #48]	; 0x30
   208ca:	2300      	movs	r3, #0
   208cc:	6920      	ldr	r0, [r4, #16]
   208ce:	6063      	str	r3, [r4, #4]
   208d0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   208d4:	6020      	str	r0, [r4, #0]
   208d6:	e7c5      	b.n	20864 <__swsetup_r+0x40>
   208d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   208dc:	2309      	movs	r3, #9
   208de:	602b      	str	r3, [r5, #0]
   208e0:	f04f 30ff 	mov.w	r0, #4294967295
   208e4:	81a2      	strh	r2, [r4, #12]
   208e6:	bd38      	pop	{r3, r4, r5, pc}
   208e8:	20000100 	.word	0x20000100

000208ec <register_fini>:
   208ec:	4b02      	ldr	r3, [pc, #8]	; (208f8 <register_fini+0xc>)
   208ee:	b113      	cbz	r3, 208f6 <register_fini+0xa>
   208f0:	4802      	ldr	r0, [pc, #8]	; (208fc <register_fini+0x10>)
   208f2:	f000 b805 	b.w	20900 <atexit>
   208f6:	4770      	bx	lr
   208f8:	00000000 	.word	0x00000000
   208fc:	00021ae5 	.word	0x00021ae5

00020900 <atexit>:
   20900:	2300      	movs	r3, #0
   20902:	4601      	mov	r1, r0
   20904:	461a      	mov	r2, r3
   20906:	4618      	mov	r0, r3
   20908:	f001 beaa 	b.w	22660 <__register_exitproc>

0002090c <quorem>:
   2090c:	6902      	ldr	r2, [r0, #16]
   2090e:	690b      	ldr	r3, [r1, #16]
   20910:	4293      	cmp	r3, r2
   20912:	f300 808d 	bgt.w	20a30 <quorem+0x124>
   20916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2091a:	f103 38ff 	add.w	r8, r3, #4294967295
   2091e:	f101 0714 	add.w	r7, r1, #20
   20922:	f100 0b14 	add.w	fp, r0, #20
   20926:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2092a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2092e:	ea4f 0488 	mov.w	r4, r8, lsl #2
   20932:	b083      	sub	sp, #12
   20934:	3201      	adds	r2, #1
   20936:	fbb3 f9f2 	udiv	r9, r3, r2
   2093a:	eb0b 0304 	add.w	r3, fp, r4
   2093e:	9400      	str	r4, [sp, #0]
   20940:	eb07 0a04 	add.w	sl, r7, r4
   20944:	9301      	str	r3, [sp, #4]
   20946:	f1b9 0f00 	cmp.w	r9, #0
   2094a:	d039      	beq.n	209c0 <quorem+0xb4>
   2094c:	2500      	movs	r5, #0
   2094e:	462e      	mov	r6, r5
   20950:	46bc      	mov	ip, r7
   20952:	46de      	mov	lr, fp
   20954:	f85c 4b04 	ldr.w	r4, [ip], #4
   20958:	f8de 3000 	ldr.w	r3, [lr]
   2095c:	b2a2      	uxth	r2, r4
   2095e:	fb09 5502 	mla	r5, r9, r2, r5
   20962:	0c22      	lsrs	r2, r4, #16
   20964:	0c2c      	lsrs	r4, r5, #16
   20966:	fb09 4202 	mla	r2, r9, r2, r4
   2096a:	b2ad      	uxth	r5, r5
   2096c:	1b75      	subs	r5, r6, r5
   2096e:	b296      	uxth	r6, r2
   20970:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   20974:	fa15 f383 	uxtah	r3, r5, r3
   20978:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2097c:	b29b      	uxth	r3, r3
   2097e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20982:	45e2      	cmp	sl, ip
   20984:	ea4f 4512 	mov.w	r5, r2, lsr #16
   20988:	f84e 3b04 	str.w	r3, [lr], #4
   2098c:	ea4f 4626 	mov.w	r6, r6, asr #16
   20990:	d2e0      	bcs.n	20954 <quorem+0x48>
   20992:	9b00      	ldr	r3, [sp, #0]
   20994:	f85b 3003 	ldr.w	r3, [fp, r3]
   20998:	b993      	cbnz	r3, 209c0 <quorem+0xb4>
   2099a:	9c01      	ldr	r4, [sp, #4]
   2099c:	1f23      	subs	r3, r4, #4
   2099e:	459b      	cmp	fp, r3
   209a0:	d20c      	bcs.n	209bc <quorem+0xb0>
   209a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   209a6:	b94b      	cbnz	r3, 209bc <quorem+0xb0>
   209a8:	f1a4 0308 	sub.w	r3, r4, #8
   209ac:	e002      	b.n	209b4 <quorem+0xa8>
   209ae:	681a      	ldr	r2, [r3, #0]
   209b0:	3b04      	subs	r3, #4
   209b2:	b91a      	cbnz	r2, 209bc <quorem+0xb0>
   209b4:	459b      	cmp	fp, r3
   209b6:	f108 38ff 	add.w	r8, r8, #4294967295
   209ba:	d3f8      	bcc.n	209ae <quorem+0xa2>
   209bc:	f8c0 8010 	str.w	r8, [r0, #16]
   209c0:	4604      	mov	r4, r0
   209c2:	f001 fc8d 	bl	222e0 <__mcmp>
   209c6:	2800      	cmp	r0, #0
   209c8:	db2e      	blt.n	20a28 <quorem+0x11c>
   209ca:	f109 0901 	add.w	r9, r9, #1
   209ce:	465d      	mov	r5, fp
   209d0:	2300      	movs	r3, #0
   209d2:	f857 1b04 	ldr.w	r1, [r7], #4
   209d6:	6828      	ldr	r0, [r5, #0]
   209d8:	b28a      	uxth	r2, r1
   209da:	1a9a      	subs	r2, r3, r2
   209dc:	0c0b      	lsrs	r3, r1, #16
   209de:	fa12 f280 	uxtah	r2, r2, r0
   209e2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   209e6:	eb03 4322 	add.w	r3, r3, r2, asr #16
   209ea:	b292      	uxth	r2, r2
   209ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   209f0:	45ba      	cmp	sl, r7
   209f2:	f845 2b04 	str.w	r2, [r5], #4
   209f6:	ea4f 4323 	mov.w	r3, r3, asr #16
   209fa:	d2ea      	bcs.n	209d2 <quorem+0xc6>
   209fc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   20a00:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   20a04:	b982      	cbnz	r2, 20a28 <quorem+0x11c>
   20a06:	1f1a      	subs	r2, r3, #4
   20a08:	4593      	cmp	fp, r2
   20a0a:	d20b      	bcs.n	20a24 <quorem+0x118>
   20a0c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20a10:	b942      	cbnz	r2, 20a24 <quorem+0x118>
   20a12:	3b08      	subs	r3, #8
   20a14:	e002      	b.n	20a1c <quorem+0x110>
   20a16:	681a      	ldr	r2, [r3, #0]
   20a18:	3b04      	subs	r3, #4
   20a1a:	b91a      	cbnz	r2, 20a24 <quorem+0x118>
   20a1c:	459b      	cmp	fp, r3
   20a1e:	f108 38ff 	add.w	r8, r8, #4294967295
   20a22:	d3f8      	bcc.n	20a16 <quorem+0x10a>
   20a24:	f8c4 8010 	str.w	r8, [r4, #16]
   20a28:	4648      	mov	r0, r9
   20a2a:	b003      	add	sp, #12
   20a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a30:	2000      	movs	r0, #0
   20a32:	4770      	bx	lr
   20a34:	0000      	movs	r0, r0
	...

00020a38 <_dtoa_r>:
   20a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a3c:	ec57 6b10 	vmov	r6, r7, d0
   20a40:	b097      	sub	sp, #92	; 0x5c
   20a42:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20a44:	9102      	str	r1, [sp, #8]
   20a46:	4604      	mov	r4, r0
   20a48:	4693      	mov	fp, r2
   20a4a:	9303      	str	r3, [sp, #12]
   20a4c:	e9cd 6700 	strd	r6, r7, [sp]
   20a50:	b14d      	cbz	r5, 20a66 <_dtoa_r+0x2e>
   20a52:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20a54:	606a      	str	r2, [r5, #4]
   20a56:	2301      	movs	r3, #1
   20a58:	4093      	lsls	r3, r2
   20a5a:	60ab      	str	r3, [r5, #8]
   20a5c:	4629      	mov	r1, r5
   20a5e:	f001 fa67 	bl	21f30 <_Bfree>
   20a62:	2300      	movs	r3, #0
   20a64:	6423      	str	r3, [r4, #64]	; 0x40
   20a66:	e9dd 2300 	ldrd	r2, r3, [sp]
   20a6a:	2b00      	cmp	r3, #0
   20a6c:	4699      	mov	r9, r3
   20a6e:	db38      	blt.n	20ae2 <_dtoa_r+0xaa>
   20a70:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20a72:	2300      	movs	r3, #0
   20a74:	6013      	str	r3, [r2, #0]
   20a76:	4ba0      	ldr	r3, [pc, #640]	; (20cf8 <_dtoa_r+0x2c0>)
   20a78:	ea33 0309 	bics.w	r3, r3, r9
   20a7c:	d017      	beq.n	20aae <_dtoa_r+0x76>
   20a7e:	e9dd 6700 	ldrd	r6, r7, [sp]
   20a82:	2200      	movs	r2, #0
   20a84:	2300      	movs	r3, #0
   20a86:	4630      	mov	r0, r6
   20a88:	4639      	mov	r1, r7
   20a8a:	f7fb fc3f 	bl	1c30c <__aeabi_dcmpeq>
   20a8e:	4680      	mov	r8, r0
   20a90:	2800      	cmp	r0, #0
   20a92:	d02f      	beq.n	20af4 <_dtoa_r+0xbc>
   20a94:	9a03      	ldr	r2, [sp, #12]
   20a96:	2301      	movs	r3, #1
   20a98:	6013      	str	r3, [r2, #0]
   20a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20a9c:	2b00      	cmp	r3, #0
   20a9e:	f000 80c4 	beq.w	20c2a <_dtoa_r+0x1f2>
   20aa2:	4896      	ldr	r0, [pc, #600]	; (20cfc <_dtoa_r+0x2c4>)
   20aa4:	6018      	str	r0, [r3, #0]
   20aa6:	3801      	subs	r0, #1
   20aa8:	b017      	add	sp, #92	; 0x5c
   20aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20aae:	9a03      	ldr	r2, [sp, #12]
   20ab0:	f242 730f 	movw	r3, #9999	; 0x270f
   20ab4:	6013      	str	r3, [r2, #0]
   20ab6:	9b00      	ldr	r3, [sp, #0]
   20ab8:	b96b      	cbnz	r3, 20ad6 <_dtoa_r+0x9e>
   20aba:	f3c9 0313 	ubfx	r3, r9, #0, #20
   20abe:	b953      	cbnz	r3, 20ad6 <_dtoa_r+0x9e>
   20ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20ac2:	488f      	ldr	r0, [pc, #572]	; (20d00 <_dtoa_r+0x2c8>)
   20ac4:	2b00      	cmp	r3, #0
   20ac6:	d0ef      	beq.n	20aa8 <_dtoa_r+0x70>
   20ac8:	f100 0308 	add.w	r3, r0, #8
   20acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   20ace:	6013      	str	r3, [r2, #0]
   20ad0:	b017      	add	sp, #92	; 0x5c
   20ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20ad8:	488a      	ldr	r0, [pc, #552]	; (20d04 <_dtoa_r+0x2cc>)
   20ada:	2b00      	cmp	r3, #0
   20adc:	d0e4      	beq.n	20aa8 <_dtoa_r+0x70>
   20ade:	1cc3      	adds	r3, r0, #3
   20ae0:	e7f4      	b.n	20acc <_dtoa_r+0x94>
   20ae2:	9a01      	ldr	r2, [sp, #4]
   20ae4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   20ae8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20aea:	f8cd 9004 	str.w	r9, [sp, #4]
   20aee:	2301      	movs	r3, #1
   20af0:	6013      	str	r3, [r2, #0]
   20af2:	e7c0      	b.n	20a76 <_dtoa_r+0x3e>
   20af4:	aa14      	add	r2, sp, #80	; 0x50
   20af6:	a915      	add	r1, sp, #84	; 0x54
   20af8:	ec47 6b10 	vmov	d0, r6, r7
   20afc:	4620      	mov	r0, r4
   20afe:	f001 fc8f 	bl	22420 <__d2b>
   20b02:	ea5f 5519 	movs.w	r5, r9, lsr #20
   20b06:	4682      	mov	sl, r0
   20b08:	d073      	beq.n	20bf2 <_dtoa_r+0x1ba>
   20b0a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   20b0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   20b12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20b16:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   20b1a:	4630      	mov	r0, r6
   20b1c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   20b20:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   20b24:	2200      	movs	r2, #0
   20b26:	4b78      	ldr	r3, [pc, #480]	; (20d08 <_dtoa_r+0x2d0>)
   20b28:	f7fa ffd4 	bl	1bad4 <__aeabi_dsub>
   20b2c:	a36c      	add	r3, pc, #432	; (adr r3, 20ce0 <_dtoa_r+0x2a8>)
   20b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b32:	f7fb f983 	bl	1be3c <__aeabi_dmul>
   20b36:	a36c      	add	r3, pc, #432	; (adr r3, 20ce8 <_dtoa_r+0x2b0>)
   20b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b3c:	f7fa ffcc 	bl	1bad8 <__adddf3>
   20b40:	4606      	mov	r6, r0
   20b42:	4628      	mov	r0, r5
   20b44:	460f      	mov	r7, r1
   20b46:	f7fb f913 	bl	1bd70 <__aeabi_i2d>
   20b4a:	a369      	add	r3, pc, #420	; (adr r3, 20cf0 <_dtoa_r+0x2b8>)
   20b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b50:	f7fb f974 	bl	1be3c <__aeabi_dmul>
   20b54:	4602      	mov	r2, r0
   20b56:	460b      	mov	r3, r1
   20b58:	4630      	mov	r0, r6
   20b5a:	4639      	mov	r1, r7
   20b5c:	f7fa ffbc 	bl	1bad8 <__adddf3>
   20b60:	4606      	mov	r6, r0
   20b62:	460f      	mov	r7, r1
   20b64:	f7fb fc04 	bl	1c370 <__aeabi_d2iz>
   20b68:	2200      	movs	r2, #0
   20b6a:	9004      	str	r0, [sp, #16]
   20b6c:	2300      	movs	r3, #0
   20b6e:	4630      	mov	r0, r6
   20b70:	4639      	mov	r1, r7
   20b72:	f7fb fbd5 	bl	1c320 <__aeabi_dcmplt>
   20b76:	2800      	cmp	r0, #0
   20b78:	f040 816f 	bne.w	20e5a <_dtoa_r+0x422>
   20b7c:	9e04      	ldr	r6, [sp, #16]
   20b7e:	2e16      	cmp	r6, #22
   20b80:	f200 8159 	bhi.w	20e36 <_dtoa_r+0x3fe>
   20b84:	4b61      	ldr	r3, [pc, #388]	; (20d0c <_dtoa_r+0x2d4>)
   20b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   20b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
   20b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20b92:	f7fb fbe3 	bl	1c35c <__aeabi_dcmpgt>
   20b96:	2800      	cmp	r0, #0
   20b98:	f000 81c4 	beq.w	20f24 <_dtoa_r+0x4ec>
   20b9c:	1e73      	subs	r3, r6, #1
   20b9e:	9304      	str	r3, [sp, #16]
   20ba0:	2300      	movs	r3, #0
   20ba2:	930c      	str	r3, [sp, #48]	; 0x30
   20ba4:	eba8 0505 	sub.w	r5, r8, r5
   20ba8:	1e6b      	subs	r3, r5, #1
   20baa:	9305      	str	r3, [sp, #20]
   20bac:	f100 814f 	bmi.w	20e4e <_dtoa_r+0x416>
   20bb0:	2300      	movs	r3, #0
   20bb2:	9306      	str	r3, [sp, #24]
   20bb4:	9b04      	ldr	r3, [sp, #16]
   20bb6:	2b00      	cmp	r3, #0
   20bb8:	f2c0 8140 	blt.w	20e3c <_dtoa_r+0x404>
   20bbc:	9a05      	ldr	r2, [sp, #20]
   20bbe:	930b      	str	r3, [sp, #44]	; 0x2c
   20bc0:	4611      	mov	r1, r2
   20bc2:	4419      	add	r1, r3
   20bc4:	2300      	movs	r3, #0
   20bc6:	9105      	str	r1, [sp, #20]
   20bc8:	930a      	str	r3, [sp, #40]	; 0x28
   20bca:	9b02      	ldr	r3, [sp, #8]
   20bcc:	2b09      	cmp	r3, #9
   20bce:	d82e      	bhi.n	20c2e <_dtoa_r+0x1f6>
   20bd0:	2b05      	cmp	r3, #5
   20bd2:	f340 8651 	ble.w	21878 <_dtoa_r+0xe40>
   20bd6:	3b04      	subs	r3, #4
   20bd8:	9302      	str	r3, [sp, #8]
   20bda:	2700      	movs	r7, #0
   20bdc:	9b02      	ldr	r3, [sp, #8]
   20bde:	3b02      	subs	r3, #2
   20be0:	2b03      	cmp	r3, #3
   20be2:	f200 8633 	bhi.w	2184c <_dtoa_r+0xe14>
   20be6:	e8df f013 	tbh	[pc, r3, lsl #1]
   20bea:	03d6      	.short	0x03d6
   20bec:	03e302cb 	.word	0x03e302cb
   20bf0:	0464      	.short	0x0464
   20bf2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   20bf6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   20bf8:	4445      	add	r5, r8
   20bfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
   20bfe:	2b20      	cmp	r3, #32
   20c00:	f340 818a 	ble.w	20f18 <_dtoa_r+0x4e0>
   20c04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20c08:	fa09 f903 	lsl.w	r9, r9, r3
   20c0c:	9b00      	ldr	r3, [sp, #0]
   20c0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   20c12:	fa23 f000 	lsr.w	r0, r3, r0
   20c16:	ea40 0009 	orr.w	r0, r0, r9
   20c1a:	f7fb f899 	bl	1bd50 <__aeabi_ui2d>
   20c1e:	2301      	movs	r3, #1
   20c20:	3d01      	subs	r5, #1
   20c22:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   20c26:	9310      	str	r3, [sp, #64]	; 0x40
   20c28:	e77c      	b.n	20b24 <_dtoa_r+0xec>
   20c2a:	4839      	ldr	r0, [pc, #228]	; (20d10 <_dtoa_r+0x2d8>)
   20c2c:	e73c      	b.n	20aa8 <_dtoa_r+0x70>
   20c2e:	2100      	movs	r1, #0
   20c30:	6461      	str	r1, [r4, #68]	; 0x44
   20c32:	4620      	mov	r0, r4
   20c34:	468b      	mov	fp, r1
   20c36:	f001 f955 	bl	21ee4 <_Balloc>
   20c3a:	f04f 33ff 	mov.w	r3, #4294967295
   20c3e:	9308      	str	r3, [sp, #32]
   20c40:	930d      	str	r3, [sp, #52]	; 0x34
   20c42:	2301      	movs	r3, #1
   20c44:	9007      	str	r0, [sp, #28]
   20c46:	6420      	str	r0, [r4, #64]	; 0x40
   20c48:	f8cd b008 	str.w	fp, [sp, #8]
   20c4c:	9309      	str	r3, [sp, #36]	; 0x24
   20c4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20c50:	2b00      	cmp	r3, #0
   20c52:	f2c0 80d0 	blt.w	20df6 <_dtoa_r+0x3be>
   20c56:	9a04      	ldr	r2, [sp, #16]
   20c58:	2a0e      	cmp	r2, #14
   20c5a:	f300 80cc 	bgt.w	20df6 <_dtoa_r+0x3be>
   20c5e:	4b2b      	ldr	r3, [pc, #172]	; (20d0c <_dtoa_r+0x2d4>)
   20c60:	f1bb 0f00 	cmp.w	fp, #0
   20c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20c68:	e9d3 8900 	ldrd	r8, r9, [r3]
   20c6c:	f2c0 83be 	blt.w	213ec <_dtoa_r+0x9b4>
   20c70:	e9dd 6700 	ldrd	r6, r7, [sp]
   20c74:	4642      	mov	r2, r8
   20c76:	464b      	mov	r3, r9
   20c78:	4630      	mov	r0, r6
   20c7a:	4639      	mov	r1, r7
   20c7c:	f7fb fa08 	bl	1c090 <__aeabi_ddiv>
   20c80:	f7fb fb76 	bl	1c370 <__aeabi_d2iz>
   20c84:	4683      	mov	fp, r0
   20c86:	f7fb f873 	bl	1bd70 <__aeabi_i2d>
   20c8a:	4642      	mov	r2, r8
   20c8c:	464b      	mov	r3, r9
   20c8e:	f7fb f8d5 	bl	1be3c <__aeabi_dmul>
   20c92:	460b      	mov	r3, r1
   20c94:	4602      	mov	r2, r0
   20c96:	4639      	mov	r1, r7
   20c98:	4630      	mov	r0, r6
   20c9a:	f7fa ff1b 	bl	1bad4 <__aeabi_dsub>
   20c9e:	9d07      	ldr	r5, [sp, #28]
   20ca0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20ca4:	702b      	strb	r3, [r5, #0]
   20ca6:	9b08      	ldr	r3, [sp, #32]
   20ca8:	2b01      	cmp	r3, #1
   20caa:	4606      	mov	r6, r0
   20cac:	460f      	mov	r7, r1
   20cae:	f105 0501 	add.w	r5, r5, #1
   20cb2:	d061      	beq.n	20d78 <_dtoa_r+0x340>
   20cb4:	2200      	movs	r2, #0
   20cb6:	4b17      	ldr	r3, [pc, #92]	; (20d14 <_dtoa_r+0x2dc>)
   20cb8:	f7fb f8c0 	bl	1be3c <__aeabi_dmul>
   20cbc:	2200      	movs	r2, #0
   20cbe:	2300      	movs	r3, #0
   20cc0:	4606      	mov	r6, r0
   20cc2:	460f      	mov	r7, r1
   20cc4:	f7fb fb22 	bl	1c30c <__aeabi_dcmpeq>
   20cc8:	2800      	cmp	r0, #0
   20cca:	f040 8081 	bne.w	20dd0 <_dtoa_r+0x398>
   20cce:	f8cd a000 	str.w	sl, [sp]
   20cd2:	9402      	str	r4, [sp, #8]
   20cd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20cd8:	9c08      	ldr	r4, [sp, #32]
   20cda:	e028      	b.n	20d2e <_dtoa_r+0x2f6>
   20cdc:	f3af 8000 	nop.w
   20ce0:	636f4361 	.word	0x636f4361
   20ce4:	3fd287a7 	.word	0x3fd287a7
   20ce8:	8b60c8b3 	.word	0x8b60c8b3
   20cec:	3fc68a28 	.word	0x3fc68a28
   20cf0:	509f79fb 	.word	0x509f79fb
   20cf4:	3fd34413 	.word	0x3fd34413
   20cf8:	7ff00000 	.word	0x7ff00000
   20cfc:	00024e31 	.word	0x00024e31
   20d00:	00024f80 	.word	0x00024f80
   20d04:	00024f8c 	.word	0x00024f8c
   20d08:	3ff80000 	.word	0x3ff80000
   20d0c:	00024fb8 	.word	0x00024fb8
   20d10:	00024e30 	.word	0x00024e30
   20d14:	40240000 	.word	0x40240000
   20d18:	f7fb f890 	bl	1be3c <__aeabi_dmul>
   20d1c:	2200      	movs	r2, #0
   20d1e:	2300      	movs	r3, #0
   20d20:	4606      	mov	r6, r0
   20d22:	460f      	mov	r7, r1
   20d24:	f7fb faf2 	bl	1c30c <__aeabi_dcmpeq>
   20d28:	2800      	cmp	r0, #0
   20d2a:	f040 83c5 	bne.w	214b8 <_dtoa_r+0xa80>
   20d2e:	4642      	mov	r2, r8
   20d30:	464b      	mov	r3, r9
   20d32:	4630      	mov	r0, r6
   20d34:	4639      	mov	r1, r7
   20d36:	f7fb f9ab 	bl	1c090 <__aeabi_ddiv>
   20d3a:	f7fb fb19 	bl	1c370 <__aeabi_d2iz>
   20d3e:	4683      	mov	fp, r0
   20d40:	f7fb f816 	bl	1bd70 <__aeabi_i2d>
   20d44:	4642      	mov	r2, r8
   20d46:	464b      	mov	r3, r9
   20d48:	f7fb f878 	bl	1be3c <__aeabi_dmul>
   20d4c:	4602      	mov	r2, r0
   20d4e:	460b      	mov	r3, r1
   20d50:	4630      	mov	r0, r6
   20d52:	4639      	mov	r1, r7
   20d54:	f7fa febe 	bl	1bad4 <__aeabi_dsub>
   20d58:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   20d5c:	f805 eb01 	strb.w	lr, [r5], #1
   20d60:	eba5 0e0a 	sub.w	lr, r5, sl
   20d64:	45a6      	cmp	lr, r4
   20d66:	4606      	mov	r6, r0
   20d68:	460f      	mov	r7, r1
   20d6a:	f04f 0200 	mov.w	r2, #0
   20d6e:	4b6e      	ldr	r3, [pc, #440]	; (20f28 <_dtoa_r+0x4f0>)
   20d70:	d1d2      	bne.n	20d18 <_dtoa_r+0x2e0>
   20d72:	f8dd a000 	ldr.w	sl, [sp]
   20d76:	9c02      	ldr	r4, [sp, #8]
   20d78:	4632      	mov	r2, r6
   20d7a:	463b      	mov	r3, r7
   20d7c:	4630      	mov	r0, r6
   20d7e:	4639      	mov	r1, r7
   20d80:	f7fa feaa 	bl	1bad8 <__adddf3>
   20d84:	4606      	mov	r6, r0
   20d86:	460f      	mov	r7, r1
   20d88:	4602      	mov	r2, r0
   20d8a:	460b      	mov	r3, r1
   20d8c:	4640      	mov	r0, r8
   20d8e:	4649      	mov	r1, r9
   20d90:	f7fb fac6 	bl	1c320 <__aeabi_dcmplt>
   20d94:	b948      	cbnz	r0, 20daa <_dtoa_r+0x372>
   20d96:	4632      	mov	r2, r6
   20d98:	463b      	mov	r3, r7
   20d9a:	4640      	mov	r0, r8
   20d9c:	4649      	mov	r1, r9
   20d9e:	f7fb fab5 	bl	1c30c <__aeabi_dcmpeq>
   20da2:	b1a8      	cbz	r0, 20dd0 <_dtoa_r+0x398>
   20da4:	f01b 0f01 	tst.w	fp, #1
   20da8:	d012      	beq.n	20dd0 <_dtoa_r+0x398>
   20daa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   20dae:	9a07      	ldr	r2, [sp, #28]
   20db0:	1e6b      	subs	r3, r5, #1
   20db2:	e004      	b.n	20dbe <_dtoa_r+0x386>
   20db4:	429a      	cmp	r2, r3
   20db6:	f000 842d 	beq.w	21614 <_dtoa_r+0xbdc>
   20dba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   20dbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20dc2:	f103 0501 	add.w	r5, r3, #1
   20dc6:	d0f5      	beq.n	20db4 <_dtoa_r+0x37c>
   20dc8:	f108 0801 	add.w	r8, r8, #1
   20dcc:	f883 8000 	strb.w	r8, [r3]
   20dd0:	4651      	mov	r1, sl
   20dd2:	4620      	mov	r0, r4
   20dd4:	f001 f8ac 	bl	21f30 <_Bfree>
   20dd8:	2200      	movs	r2, #0
   20dda:	9b04      	ldr	r3, [sp, #16]
   20ddc:	702a      	strb	r2, [r5, #0]
   20dde:	9a03      	ldr	r2, [sp, #12]
   20de0:	3301      	adds	r3, #1
   20de2:	6013      	str	r3, [r2, #0]
   20de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20de6:	2b00      	cmp	r3, #0
   20de8:	f000 83a3 	beq.w	21532 <_dtoa_r+0xafa>
   20dec:	9807      	ldr	r0, [sp, #28]
   20dee:	601d      	str	r5, [r3, #0]
   20df0:	b017      	add	sp, #92	; 0x5c
   20df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20df8:	2a00      	cmp	r2, #0
   20dfa:	d040      	beq.n	20e7e <_dtoa_r+0x446>
   20dfc:	9a02      	ldr	r2, [sp, #8]
   20dfe:	2a01      	cmp	r2, #1
   20e00:	f340 831c 	ble.w	2143c <_dtoa_r+0xa04>
   20e04:	9b08      	ldr	r3, [sp, #32]
   20e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20e08:	1e5f      	subs	r7, r3, #1
   20e0a:	42ba      	cmp	r2, r7
   20e0c:	f2c0 8394 	blt.w	21538 <_dtoa_r+0xb00>
   20e10:	1bd7      	subs	r7, r2, r7
   20e12:	9b08      	ldr	r3, [sp, #32]
   20e14:	2b00      	cmp	r3, #0
   20e16:	f2c0 847e 	blt.w	21716 <_dtoa_r+0xcde>
   20e1a:	9d06      	ldr	r5, [sp, #24]
   20e1c:	9b08      	ldr	r3, [sp, #32]
   20e1e:	9a06      	ldr	r2, [sp, #24]
   20e20:	441a      	add	r2, r3
   20e22:	9206      	str	r2, [sp, #24]
   20e24:	9a05      	ldr	r2, [sp, #20]
   20e26:	2101      	movs	r1, #1
   20e28:	441a      	add	r2, r3
   20e2a:	4620      	mov	r0, r4
   20e2c:	9205      	str	r2, [sp, #20]
   20e2e:	f001 f919 	bl	22064 <__i2b>
   20e32:	4606      	mov	r6, r0
   20e34:	e026      	b.n	20e84 <_dtoa_r+0x44c>
   20e36:	2301      	movs	r3, #1
   20e38:	930c      	str	r3, [sp, #48]	; 0x30
   20e3a:	e6b3      	b.n	20ba4 <_dtoa_r+0x16c>
   20e3c:	9a06      	ldr	r2, [sp, #24]
   20e3e:	9b04      	ldr	r3, [sp, #16]
   20e40:	1ad2      	subs	r2, r2, r3
   20e42:	425b      	negs	r3, r3
   20e44:	930a      	str	r3, [sp, #40]	; 0x28
   20e46:	2300      	movs	r3, #0
   20e48:	9206      	str	r2, [sp, #24]
   20e4a:	930b      	str	r3, [sp, #44]	; 0x2c
   20e4c:	e6bd      	b.n	20bca <_dtoa_r+0x192>
   20e4e:	f1c5 0301 	rsb	r3, r5, #1
   20e52:	9306      	str	r3, [sp, #24]
   20e54:	2300      	movs	r3, #0
   20e56:	9305      	str	r3, [sp, #20]
   20e58:	e6ac      	b.n	20bb4 <_dtoa_r+0x17c>
   20e5a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20e5e:	4648      	mov	r0, r9
   20e60:	f7fa ff86 	bl	1bd70 <__aeabi_i2d>
   20e64:	4602      	mov	r2, r0
   20e66:	460b      	mov	r3, r1
   20e68:	4630      	mov	r0, r6
   20e6a:	4639      	mov	r1, r7
   20e6c:	f7fb fa4e 	bl	1c30c <__aeabi_dcmpeq>
   20e70:	2800      	cmp	r0, #0
   20e72:	f47f ae83 	bne.w	20b7c <_dtoa_r+0x144>
   20e76:	f109 33ff 	add.w	r3, r9, #4294967295
   20e7a:	9304      	str	r3, [sp, #16]
   20e7c:	e67e      	b.n	20b7c <_dtoa_r+0x144>
   20e7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20e80:	9d06      	ldr	r5, [sp, #24]
   20e82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20e84:	2d00      	cmp	r5, #0
   20e86:	dd0c      	ble.n	20ea2 <_dtoa_r+0x46a>
   20e88:	9905      	ldr	r1, [sp, #20]
   20e8a:	2900      	cmp	r1, #0
   20e8c:	460b      	mov	r3, r1
   20e8e:	dd08      	ble.n	20ea2 <_dtoa_r+0x46a>
   20e90:	42a9      	cmp	r1, r5
   20e92:	9a06      	ldr	r2, [sp, #24]
   20e94:	bfa8      	it	ge
   20e96:	462b      	movge	r3, r5
   20e98:	1ad2      	subs	r2, r2, r3
   20e9a:	1aed      	subs	r5, r5, r3
   20e9c:	1acb      	subs	r3, r1, r3
   20e9e:	9206      	str	r2, [sp, #24]
   20ea0:	9305      	str	r3, [sp, #20]
   20ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ea4:	b1d3      	cbz	r3, 20edc <_dtoa_r+0x4a4>
   20ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20ea8:	2b00      	cmp	r3, #0
   20eaa:	f000 82c0 	beq.w	2142e <_dtoa_r+0x9f6>
   20eae:	2f00      	cmp	r7, #0
   20eb0:	dd10      	ble.n	20ed4 <_dtoa_r+0x49c>
   20eb2:	4631      	mov	r1, r6
   20eb4:	463a      	mov	r2, r7
   20eb6:	4620      	mov	r0, r4
   20eb8:	f001 f970 	bl	2219c <__pow5mult>
   20ebc:	4652      	mov	r2, sl
   20ebe:	4601      	mov	r1, r0
   20ec0:	4606      	mov	r6, r0
   20ec2:	4620      	mov	r0, r4
   20ec4:	f001 f8d8 	bl	22078 <__multiply>
   20ec8:	4651      	mov	r1, sl
   20eca:	4680      	mov	r8, r0
   20ecc:	4620      	mov	r0, r4
   20ece:	f001 f82f 	bl	21f30 <_Bfree>
   20ed2:	46c2      	mov	sl, r8
   20ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ed6:	1bda      	subs	r2, r3, r7
   20ed8:	f040 82aa 	bne.w	21430 <_dtoa_r+0x9f8>
   20edc:	2101      	movs	r1, #1
   20ede:	4620      	mov	r0, r4
   20ee0:	f001 f8c0 	bl	22064 <__i2b>
   20ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20ee6:	2b00      	cmp	r3, #0
   20ee8:	4681      	mov	r9, r0
   20eea:	dd1f      	ble.n	20f2c <_dtoa_r+0x4f4>
   20eec:	4601      	mov	r1, r0
   20eee:	461a      	mov	r2, r3
   20ef0:	4620      	mov	r0, r4
   20ef2:	f001 f953 	bl	2219c <__pow5mult>
   20ef6:	9b02      	ldr	r3, [sp, #8]
   20ef8:	2b01      	cmp	r3, #1
   20efa:	4681      	mov	r9, r0
   20efc:	f340 825b 	ble.w	213b6 <_dtoa_r+0x97e>
   20f00:	f04f 0800 	mov.w	r8, #0
   20f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20f08:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   20f0c:	6918      	ldr	r0, [r3, #16]
   20f0e:	f001 f859 	bl	21fc4 <__hi0bits>
   20f12:	f1c0 0020 	rsb	r0, r0, #32
   20f16:	e013      	b.n	20f40 <_dtoa_r+0x508>
   20f18:	f1c3 0920 	rsb	r9, r3, #32
   20f1c:	9b00      	ldr	r3, [sp, #0]
   20f1e:	fa03 f009 	lsl.w	r0, r3, r9
   20f22:	e67a      	b.n	20c1a <_dtoa_r+0x1e2>
   20f24:	900c      	str	r0, [sp, #48]	; 0x30
   20f26:	e63d      	b.n	20ba4 <_dtoa_r+0x16c>
   20f28:	40240000 	.word	0x40240000
   20f2c:	9b02      	ldr	r3, [sp, #8]
   20f2e:	2b01      	cmp	r3, #1
   20f30:	f340 828d 	ble.w	2144e <_dtoa_r+0xa16>
   20f34:	f04f 0800 	mov.w	r8, #0
   20f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20f3a:	2001      	movs	r0, #1
   20f3c:	2b00      	cmp	r3, #0
   20f3e:	d1e1      	bne.n	20f04 <_dtoa_r+0x4cc>
   20f40:	9a05      	ldr	r2, [sp, #20]
   20f42:	4410      	add	r0, r2
   20f44:	f010 001f 	ands.w	r0, r0, #31
   20f48:	f000 80a1 	beq.w	2108e <_dtoa_r+0x656>
   20f4c:	f1c0 0320 	rsb	r3, r0, #32
   20f50:	2b04      	cmp	r3, #4
   20f52:	f340 848c 	ble.w	2186e <_dtoa_r+0xe36>
   20f56:	9b06      	ldr	r3, [sp, #24]
   20f58:	f1c0 001c 	rsb	r0, r0, #28
   20f5c:	4403      	add	r3, r0
   20f5e:	9306      	str	r3, [sp, #24]
   20f60:	4613      	mov	r3, r2
   20f62:	4403      	add	r3, r0
   20f64:	4405      	add	r5, r0
   20f66:	9305      	str	r3, [sp, #20]
   20f68:	9b06      	ldr	r3, [sp, #24]
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	dd05      	ble.n	20f7a <_dtoa_r+0x542>
   20f6e:	4651      	mov	r1, sl
   20f70:	461a      	mov	r2, r3
   20f72:	4620      	mov	r0, r4
   20f74:	f001 f962 	bl	2223c <__lshift>
   20f78:	4682      	mov	sl, r0
   20f7a:	9b05      	ldr	r3, [sp, #20]
   20f7c:	2b00      	cmp	r3, #0
   20f7e:	dd05      	ble.n	20f8c <_dtoa_r+0x554>
   20f80:	4649      	mov	r1, r9
   20f82:	461a      	mov	r2, r3
   20f84:	4620      	mov	r0, r4
   20f86:	f001 f959 	bl	2223c <__lshift>
   20f8a:	4681      	mov	r9, r0
   20f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20f8e:	2b00      	cmp	r3, #0
   20f90:	f040 8086 	bne.w	210a0 <_dtoa_r+0x668>
   20f94:	9b08      	ldr	r3, [sp, #32]
   20f96:	2b00      	cmp	r3, #0
   20f98:	f340 8269 	ble.w	2146e <_dtoa_r+0xa36>
   20f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20f9e:	2b00      	cmp	r3, #0
   20fa0:	f000 8098 	beq.w	210d4 <_dtoa_r+0x69c>
   20fa4:	2d00      	cmp	r5, #0
   20fa6:	dd05      	ble.n	20fb4 <_dtoa_r+0x57c>
   20fa8:	4631      	mov	r1, r6
   20faa:	462a      	mov	r2, r5
   20fac:	4620      	mov	r0, r4
   20fae:	f001 f945 	bl	2223c <__lshift>
   20fb2:	4606      	mov	r6, r0
   20fb4:	f1b8 0f00 	cmp.w	r8, #0
   20fb8:	f040 8336 	bne.w	21628 <_dtoa_r+0xbf0>
   20fbc:	46b0      	mov	r8, r6
   20fbe:	9b08      	ldr	r3, [sp, #32]
   20fc0:	9a07      	ldr	r2, [sp, #28]
   20fc2:	3b01      	subs	r3, #1
   20fc4:	18d3      	adds	r3, r2, r3
   20fc6:	9308      	str	r3, [sp, #32]
   20fc8:	9b00      	ldr	r3, [sp, #0]
   20fca:	f003 0301 	and.w	r3, r3, #1
   20fce:	9309      	str	r3, [sp, #36]	; 0x24
   20fd0:	4617      	mov	r7, r2
   20fd2:	4649      	mov	r1, r9
   20fd4:	4650      	mov	r0, sl
   20fd6:	f7ff fc99 	bl	2090c <quorem>
   20fda:	4631      	mov	r1, r6
   20fdc:	4605      	mov	r5, r0
   20fde:	4650      	mov	r0, sl
   20fe0:	f001 f97e 	bl	222e0 <__mcmp>
   20fe4:	4642      	mov	r2, r8
   20fe6:	4649      	mov	r1, r9
   20fe8:	4683      	mov	fp, r0
   20fea:	4620      	mov	r0, r4
   20fec:	f001 f994 	bl	22318 <__mdiff>
   20ff0:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20ff4:	9200      	str	r2, [sp, #0]
   20ff6:	68c2      	ldr	r2, [r0, #12]
   20ff8:	4601      	mov	r1, r0
   20ffa:	2a00      	cmp	r2, #0
   20ffc:	f040 8232 	bne.w	21464 <_dtoa_r+0xa2c>
   21000:	9006      	str	r0, [sp, #24]
   21002:	4650      	mov	r0, sl
   21004:	f001 f96c 	bl	222e0 <__mcmp>
   21008:	9b06      	ldr	r3, [sp, #24]
   2100a:	9005      	str	r0, [sp, #20]
   2100c:	4619      	mov	r1, r3
   2100e:	4620      	mov	r0, r4
   21010:	f000 ff8e 	bl	21f30 <_Bfree>
   21014:	9a05      	ldr	r2, [sp, #20]
   21016:	b932      	cbnz	r2, 21026 <_dtoa_r+0x5ee>
   21018:	9b02      	ldr	r3, [sp, #8]
   2101a:	b923      	cbnz	r3, 21026 <_dtoa_r+0x5ee>
   2101c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2101e:	2b00      	cmp	r3, #0
   21020:	f000 83de 	beq.w	217e0 <_dtoa_r+0xda8>
   21024:	9a02      	ldr	r2, [sp, #8]
   21026:	f1bb 0f00 	cmp.w	fp, #0
   2102a:	f2c0 82a2 	blt.w	21572 <_dtoa_r+0xb3a>
   2102e:	d105      	bne.n	2103c <_dtoa_r+0x604>
   21030:	9b02      	ldr	r3, [sp, #8]
   21032:	b91b      	cbnz	r3, 2103c <_dtoa_r+0x604>
   21034:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21036:	2b00      	cmp	r3, #0
   21038:	f000 829b 	beq.w	21572 <_dtoa_r+0xb3a>
   2103c:	2a00      	cmp	r2, #0
   2103e:	f300 8307 	bgt.w	21650 <_dtoa_r+0xc18>
   21042:	f89d 3000 	ldrb.w	r3, [sp]
   21046:	703b      	strb	r3, [r7, #0]
   21048:	9b08      	ldr	r3, [sp, #32]
   2104a:	f107 0b01 	add.w	fp, r7, #1
   2104e:	429f      	cmp	r7, r3
   21050:	465d      	mov	r5, fp
   21052:	f000 8308 	beq.w	21666 <_dtoa_r+0xc2e>
   21056:	4651      	mov	r1, sl
   21058:	2300      	movs	r3, #0
   2105a:	220a      	movs	r2, #10
   2105c:	4620      	mov	r0, r4
   2105e:	f000 ff71 	bl	21f44 <__multadd>
   21062:	4546      	cmp	r6, r8
   21064:	4682      	mov	sl, r0
   21066:	4631      	mov	r1, r6
   21068:	f04f 0300 	mov.w	r3, #0
   2106c:	f04f 020a 	mov.w	r2, #10
   21070:	4620      	mov	r0, r4
   21072:	f000 81f1 	beq.w	21458 <_dtoa_r+0xa20>
   21076:	f000 ff65 	bl	21f44 <__multadd>
   2107a:	4641      	mov	r1, r8
   2107c:	4606      	mov	r6, r0
   2107e:	2300      	movs	r3, #0
   21080:	220a      	movs	r2, #10
   21082:	4620      	mov	r0, r4
   21084:	f000 ff5e 	bl	21f44 <__multadd>
   21088:	465f      	mov	r7, fp
   2108a:	4680      	mov	r8, r0
   2108c:	e7a1      	b.n	20fd2 <_dtoa_r+0x59a>
   2108e:	201c      	movs	r0, #28
   21090:	9b06      	ldr	r3, [sp, #24]
   21092:	4403      	add	r3, r0
   21094:	9306      	str	r3, [sp, #24]
   21096:	9b05      	ldr	r3, [sp, #20]
   21098:	4403      	add	r3, r0
   2109a:	4405      	add	r5, r0
   2109c:	9305      	str	r3, [sp, #20]
   2109e:	e763      	b.n	20f68 <_dtoa_r+0x530>
   210a0:	4649      	mov	r1, r9
   210a2:	4650      	mov	r0, sl
   210a4:	f001 f91c 	bl	222e0 <__mcmp>
   210a8:	2800      	cmp	r0, #0
   210aa:	f6bf af73 	bge.w	20f94 <_dtoa_r+0x55c>
   210ae:	9f04      	ldr	r7, [sp, #16]
   210b0:	4651      	mov	r1, sl
   210b2:	2300      	movs	r3, #0
   210b4:	220a      	movs	r2, #10
   210b6:	4620      	mov	r0, r4
   210b8:	3f01      	subs	r7, #1
   210ba:	9704      	str	r7, [sp, #16]
   210bc:	f000 ff42 	bl	21f44 <__multadd>
   210c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   210c2:	4682      	mov	sl, r0
   210c4:	2b00      	cmp	r3, #0
   210c6:	f040 83a7 	bne.w	21818 <_dtoa_r+0xde0>
   210ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   210cc:	2b00      	cmp	r3, #0
   210ce:	f340 83b0 	ble.w	21832 <_dtoa_r+0xdfa>
   210d2:	9308      	str	r3, [sp, #32]
   210d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   210d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   210dc:	465d      	mov	r5, fp
   210de:	e002      	b.n	210e6 <_dtoa_r+0x6ae>
   210e0:	f000 ff30 	bl	21f44 <__multadd>
   210e4:	4682      	mov	sl, r0
   210e6:	4649      	mov	r1, r9
   210e8:	4650      	mov	r0, sl
   210ea:	f7ff fc0f 	bl	2090c <quorem>
   210ee:	f100 0730 	add.w	r7, r0, #48	; 0x30
   210f2:	f805 7b01 	strb.w	r7, [r5], #1
   210f6:	eba5 030b 	sub.w	r3, r5, fp
   210fa:	4543      	cmp	r3, r8
   210fc:	f04f 020a 	mov.w	r2, #10
   21100:	f04f 0300 	mov.w	r3, #0
   21104:	4651      	mov	r1, sl
   21106:	4620      	mov	r0, r4
   21108:	dbea      	blt.n	210e0 <_dtoa_r+0x6a8>
   2110a:	9b07      	ldr	r3, [sp, #28]
   2110c:	9a08      	ldr	r2, [sp, #32]
   2110e:	9700      	str	r7, [sp, #0]
   21110:	2a01      	cmp	r2, #1
   21112:	bfac      	ite	ge
   21114:	189b      	addge	r3, r3, r2
   21116:	3301      	addlt	r3, #1
   21118:	461d      	mov	r5, r3
   2111a:	f04f 0b00 	mov.w	fp, #0
   2111e:	4651      	mov	r1, sl
   21120:	2201      	movs	r2, #1
   21122:	4620      	mov	r0, r4
   21124:	f001 f88a 	bl	2223c <__lshift>
   21128:	4649      	mov	r1, r9
   2112a:	4682      	mov	sl, r0
   2112c:	f001 f8d8 	bl	222e0 <__mcmp>
   21130:	2800      	cmp	r0, #0
   21132:	f340 823a 	ble.w	215aa <_dtoa_r+0xb72>
   21136:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2113a:	9907      	ldr	r1, [sp, #28]
   2113c:	1e6b      	subs	r3, r5, #1
   2113e:	e004      	b.n	2114a <_dtoa_r+0x712>
   21140:	428b      	cmp	r3, r1
   21142:	f000 81af 	beq.w	214a4 <_dtoa_r+0xa6c>
   21146:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2114a:	2a39      	cmp	r2, #57	; 0x39
   2114c:	f103 0501 	add.w	r5, r3, #1
   21150:	d0f6      	beq.n	21140 <_dtoa_r+0x708>
   21152:	3201      	adds	r2, #1
   21154:	701a      	strb	r2, [r3, #0]
   21156:	4649      	mov	r1, r9
   21158:	4620      	mov	r0, r4
   2115a:	f000 fee9 	bl	21f30 <_Bfree>
   2115e:	2e00      	cmp	r6, #0
   21160:	f43f ae36 	beq.w	20dd0 <_dtoa_r+0x398>
   21164:	f1bb 0f00 	cmp.w	fp, #0
   21168:	d005      	beq.n	21176 <_dtoa_r+0x73e>
   2116a:	45b3      	cmp	fp, r6
   2116c:	d003      	beq.n	21176 <_dtoa_r+0x73e>
   2116e:	4659      	mov	r1, fp
   21170:	4620      	mov	r0, r4
   21172:	f000 fedd 	bl	21f30 <_Bfree>
   21176:	4631      	mov	r1, r6
   21178:	4620      	mov	r0, r4
   2117a:	f000 fed9 	bl	21f30 <_Bfree>
   2117e:	e627      	b.n	20dd0 <_dtoa_r+0x398>
   21180:	2300      	movs	r3, #0
   21182:	9309      	str	r3, [sp, #36]	; 0x24
   21184:	9b04      	ldr	r3, [sp, #16]
   21186:	445b      	add	r3, fp
   21188:	930d      	str	r3, [sp, #52]	; 0x34
   2118a:	3301      	adds	r3, #1
   2118c:	2b01      	cmp	r3, #1
   2118e:	461e      	mov	r6, r3
   21190:	461d      	mov	r5, r3
   21192:	9308      	str	r3, [sp, #32]
   21194:	bfb8      	it	lt
   21196:	2601      	movlt	r6, #1
   21198:	2100      	movs	r1, #0
   2119a:	2e17      	cmp	r6, #23
   2119c:	6461      	str	r1, [r4, #68]	; 0x44
   2119e:	d90a      	bls.n	211b6 <_dtoa_r+0x77e>
   211a0:	2201      	movs	r2, #1
   211a2:	2304      	movs	r3, #4
   211a4:	005b      	lsls	r3, r3, #1
   211a6:	f103 0014 	add.w	r0, r3, #20
   211aa:	4286      	cmp	r6, r0
   211ac:	4611      	mov	r1, r2
   211ae:	f102 0201 	add.w	r2, r2, #1
   211b2:	d2f7      	bcs.n	211a4 <_dtoa_r+0x76c>
   211b4:	6461      	str	r1, [r4, #68]	; 0x44
   211b6:	4620      	mov	r0, r4
   211b8:	f000 fe94 	bl	21ee4 <_Balloc>
   211bc:	2d0e      	cmp	r5, #14
   211be:	9007      	str	r0, [sp, #28]
   211c0:	6420      	str	r0, [r4, #64]	; 0x40
   211c2:	f63f ad44 	bhi.w	20c4e <_dtoa_r+0x216>
   211c6:	2f00      	cmp	r7, #0
   211c8:	f43f ad41 	beq.w	20c4e <_dtoa_r+0x216>
   211cc:	9904      	ldr	r1, [sp, #16]
   211ce:	2900      	cmp	r1, #0
   211d0:	ed9d 7b00 	vldr	d7, [sp]
   211d4:	f340 81f6 	ble.w	215c4 <_dtoa_r+0xb8c>
   211d8:	4bb9      	ldr	r3, [pc, #740]	; (214c0 <_dtoa_r+0xa88>)
   211da:	f001 020f 	and.w	r2, r1, #15
   211de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   211e2:	110d      	asrs	r5, r1, #4
   211e4:	e9d3 6700 	ldrd	r6, r7, [r3]
   211e8:	06eb      	lsls	r3, r5, #27
   211ea:	f140 81ad 	bpl.w	21548 <_dtoa_r+0xb10>
   211ee:	4bb5      	ldr	r3, [pc, #724]	; (214c4 <_dtoa_r+0xa8c>)
   211f0:	ec51 0b17 	vmov	r0, r1, d7
   211f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   211f8:	f7fa ff4a 	bl	1c090 <__aeabi_ddiv>
   211fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   21200:	f005 050f 	and.w	r5, r5, #15
   21204:	f04f 0903 	mov.w	r9, #3
   21208:	b18d      	cbz	r5, 2122e <_dtoa_r+0x7f6>
   2120a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 214c4 <_dtoa_r+0xa8c>
   2120e:	07e8      	lsls	r0, r5, #31
   21210:	d509      	bpl.n	21226 <_dtoa_r+0x7ee>
   21212:	4630      	mov	r0, r6
   21214:	4639      	mov	r1, r7
   21216:	e9d8 2300 	ldrd	r2, r3, [r8]
   2121a:	f7fa fe0f 	bl	1be3c <__aeabi_dmul>
   2121e:	f109 0901 	add.w	r9, r9, #1
   21222:	4606      	mov	r6, r0
   21224:	460f      	mov	r7, r1
   21226:	106d      	asrs	r5, r5, #1
   21228:	f108 0808 	add.w	r8, r8, #8
   2122c:	d1ef      	bne.n	2120e <_dtoa_r+0x7d6>
   2122e:	463b      	mov	r3, r7
   21230:	4632      	mov	r2, r6
   21232:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   21236:	f7fa ff2b 	bl	1c090 <__aeabi_ddiv>
   2123a:	4607      	mov	r7, r0
   2123c:	4688      	mov	r8, r1
   2123e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21240:	b143      	cbz	r3, 21254 <_dtoa_r+0x81c>
   21242:	2200      	movs	r2, #0
   21244:	4ba0      	ldr	r3, [pc, #640]	; (214c8 <_dtoa_r+0xa90>)
   21246:	4638      	mov	r0, r7
   21248:	4641      	mov	r1, r8
   2124a:	f7fb f869 	bl	1c320 <__aeabi_dcmplt>
   2124e:	2800      	cmp	r0, #0
   21250:	f040 8273 	bne.w	2173a <_dtoa_r+0xd02>
   21254:	4648      	mov	r0, r9
   21256:	f7fa fd8b 	bl	1bd70 <__aeabi_i2d>
   2125a:	463a      	mov	r2, r7
   2125c:	4643      	mov	r3, r8
   2125e:	f7fa fded 	bl	1be3c <__aeabi_dmul>
   21262:	4b9a      	ldr	r3, [pc, #616]	; (214cc <_dtoa_r+0xa94>)
   21264:	2200      	movs	r2, #0
   21266:	f7fa fc37 	bl	1bad8 <__adddf3>
   2126a:	9b08      	ldr	r3, [sp, #32]
   2126c:	4605      	mov	r5, r0
   2126e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21272:	2b00      	cmp	r3, #0
   21274:	f000 8140 	beq.w	214f8 <_dtoa_r+0xac0>
   21278:	9b04      	ldr	r3, [sp, #16]
   2127a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2127e:	9311      	str	r3, [sp, #68]	; 0x44
   21280:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21282:	2b00      	cmp	r3, #0
   21284:	f000 81f6 	beq.w	21674 <_dtoa_r+0xc3c>
   21288:	4b8d      	ldr	r3, [pc, #564]	; (214c0 <_dtoa_r+0xa88>)
   2128a:	4991      	ldr	r1, [pc, #580]	; (214d0 <_dtoa_r+0xa98>)
   2128c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   21290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   21294:	2000      	movs	r0, #0
   21296:	f7fa fefb 	bl	1c090 <__aeabi_ddiv>
   2129a:	462a      	mov	r2, r5
   2129c:	4633      	mov	r3, r6
   2129e:	f7fa fc19 	bl	1bad4 <__aeabi_dsub>
   212a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   212a6:	4641      	mov	r1, r8
   212a8:	4638      	mov	r0, r7
   212aa:	f7fb f861 	bl	1c370 <__aeabi_d2iz>
   212ae:	4605      	mov	r5, r0
   212b0:	f7fa fd5e 	bl	1bd70 <__aeabi_i2d>
   212b4:	4602      	mov	r2, r0
   212b6:	460b      	mov	r3, r1
   212b8:	4638      	mov	r0, r7
   212ba:	4641      	mov	r1, r8
   212bc:	f7fa fc0a 	bl	1bad4 <__aeabi_dsub>
   212c0:	3530      	adds	r5, #48	; 0x30
   212c2:	fa5f f885 	uxtb.w	r8, r5
   212c6:	9d07      	ldr	r5, [sp, #28]
   212c8:	4606      	mov	r6, r0
   212ca:	460f      	mov	r7, r1
   212cc:	f885 8000 	strb.w	r8, [r5]
   212d0:	4602      	mov	r2, r0
   212d2:	460b      	mov	r3, r1
   212d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   212d8:	3501      	adds	r5, #1
   212da:	f7fb f83f 	bl	1c35c <__aeabi_dcmpgt>
   212de:	2800      	cmp	r0, #0
   212e0:	d156      	bne.n	21390 <_dtoa_r+0x958>
   212e2:	4632      	mov	r2, r6
   212e4:	463b      	mov	r3, r7
   212e6:	2000      	movs	r0, #0
   212e8:	4977      	ldr	r1, [pc, #476]	; (214c8 <_dtoa_r+0xa90>)
   212ea:	f7fa fbf3 	bl	1bad4 <__aeabi_dsub>
   212ee:	4602      	mov	r2, r0
   212f0:	460b      	mov	r3, r1
   212f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   212f6:	f7fb f831 	bl	1c35c <__aeabi_dcmpgt>
   212fa:	2800      	cmp	r0, #0
   212fc:	f040 8262 	bne.w	217c4 <_dtoa_r+0xd8c>
   21300:	f1b9 0f01 	cmp.w	r9, #1
   21304:	f43f aca3 	beq.w	20c4e <_dtoa_r+0x216>
   21308:	9b07      	ldr	r3, [sp, #28]
   2130a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   2130e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   21312:	4499      	add	r9, r3
   21314:	46a0      	mov	r8, r4
   21316:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   2131a:	e00d      	b.n	21338 <_dtoa_r+0x900>
   2131c:	2000      	movs	r0, #0
   2131e:	496a      	ldr	r1, [pc, #424]	; (214c8 <_dtoa_r+0xa90>)
   21320:	f7fa fbd8 	bl	1bad4 <__aeabi_dsub>
   21324:	4652      	mov	r2, sl
   21326:	465b      	mov	r3, fp
   21328:	f7fa fffa 	bl	1c320 <__aeabi_dcmplt>
   2132c:	2800      	cmp	r0, #0
   2132e:	f040 8244 	bne.w	217ba <_dtoa_r+0xd82>
   21332:	454d      	cmp	r5, r9
   21334:	f000 824a 	beq.w	217cc <_dtoa_r+0xd94>
   21338:	4650      	mov	r0, sl
   2133a:	4659      	mov	r1, fp
   2133c:	2200      	movs	r2, #0
   2133e:	4b65      	ldr	r3, [pc, #404]	; (214d4 <_dtoa_r+0xa9c>)
   21340:	f7fa fd7c 	bl	1be3c <__aeabi_dmul>
   21344:	2200      	movs	r2, #0
   21346:	4b63      	ldr	r3, [pc, #396]	; (214d4 <_dtoa_r+0xa9c>)
   21348:	4682      	mov	sl, r0
   2134a:	468b      	mov	fp, r1
   2134c:	4630      	mov	r0, r6
   2134e:	4639      	mov	r1, r7
   21350:	f7fa fd74 	bl	1be3c <__aeabi_dmul>
   21354:	460f      	mov	r7, r1
   21356:	4606      	mov	r6, r0
   21358:	f7fb f80a 	bl	1c370 <__aeabi_d2iz>
   2135c:	4604      	mov	r4, r0
   2135e:	f7fa fd07 	bl	1bd70 <__aeabi_i2d>
   21362:	4602      	mov	r2, r0
   21364:	460b      	mov	r3, r1
   21366:	4630      	mov	r0, r6
   21368:	4639      	mov	r1, r7
   2136a:	f7fa fbb3 	bl	1bad4 <__aeabi_dsub>
   2136e:	3430      	adds	r4, #48	; 0x30
   21370:	b2e4      	uxtb	r4, r4
   21372:	4652      	mov	r2, sl
   21374:	465b      	mov	r3, fp
   21376:	f805 4b01 	strb.w	r4, [r5], #1
   2137a:	4606      	mov	r6, r0
   2137c:	460f      	mov	r7, r1
   2137e:	f7fa ffcf 	bl	1c320 <__aeabi_dcmplt>
   21382:	4632      	mov	r2, r6
   21384:	463b      	mov	r3, r7
   21386:	2800      	cmp	r0, #0
   21388:	d0c8      	beq.n	2131c <_dtoa_r+0x8e4>
   2138a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2138e:	4644      	mov	r4, r8
   21390:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21392:	9304      	str	r3, [sp, #16]
   21394:	e51c      	b.n	20dd0 <_dtoa_r+0x398>
   21396:	2300      	movs	r3, #0
   21398:	9309      	str	r3, [sp, #36]	; 0x24
   2139a:	f1bb 0f00 	cmp.w	fp, #0
   2139e:	f340 80da 	ble.w	21556 <_dtoa_r+0xb1e>
   213a2:	465e      	mov	r6, fp
   213a4:	465d      	mov	r5, fp
   213a6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   213aa:	f8cd b020 	str.w	fp, [sp, #32]
   213ae:	e6f3      	b.n	21198 <_dtoa_r+0x760>
   213b0:	2301      	movs	r3, #1
   213b2:	9309      	str	r3, [sp, #36]	; 0x24
   213b4:	e7f1      	b.n	2139a <_dtoa_r+0x962>
   213b6:	9b00      	ldr	r3, [sp, #0]
   213b8:	2b00      	cmp	r3, #0
   213ba:	f47f ada1 	bne.w	20f00 <_dtoa_r+0x4c8>
   213be:	e9dd 1200 	ldrd	r1, r2, [sp]
   213c2:	f3c2 0313 	ubfx	r3, r2, #0, #20
   213c6:	2b00      	cmp	r3, #0
   213c8:	f47f adb4 	bne.w	20f34 <_dtoa_r+0x4fc>
   213cc:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   213d0:	0d3f      	lsrs	r7, r7, #20
   213d2:	053f      	lsls	r7, r7, #20
   213d4:	2f00      	cmp	r7, #0
   213d6:	f000 8200 	beq.w	217da <_dtoa_r+0xda2>
   213da:	9b06      	ldr	r3, [sp, #24]
   213dc:	3301      	adds	r3, #1
   213de:	9306      	str	r3, [sp, #24]
   213e0:	9b05      	ldr	r3, [sp, #20]
   213e2:	3301      	adds	r3, #1
   213e4:	9305      	str	r3, [sp, #20]
   213e6:	f04f 0801 	mov.w	r8, #1
   213ea:	e5a5      	b.n	20f38 <_dtoa_r+0x500>
   213ec:	9b08      	ldr	r3, [sp, #32]
   213ee:	2b00      	cmp	r3, #0
   213f0:	f73f ac3e 	bgt.w	20c70 <_dtoa_r+0x238>
   213f4:	f040 8099 	bne.w	2152a <_dtoa_r+0xaf2>
   213f8:	4649      	mov	r1, r9
   213fa:	2200      	movs	r2, #0
   213fc:	4b36      	ldr	r3, [pc, #216]	; (214d8 <_dtoa_r+0xaa0>)
   213fe:	4640      	mov	r0, r8
   21400:	f7fa fd1c 	bl	1be3c <__aeabi_dmul>
   21404:	e9dd 2300 	ldrd	r2, r3, [sp]
   21408:	f7fa ff9e 	bl	1c348 <__aeabi_dcmpge>
   2140c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21410:	464e      	mov	r6, r9
   21412:	2800      	cmp	r0, #0
   21414:	d03e      	beq.n	21494 <_dtoa_r+0xa5c>
   21416:	ea6f 030b 	mvn.w	r3, fp
   2141a:	9d07      	ldr	r5, [sp, #28]
   2141c:	9304      	str	r3, [sp, #16]
   2141e:	4649      	mov	r1, r9
   21420:	4620      	mov	r0, r4
   21422:	f000 fd85 	bl	21f30 <_Bfree>
   21426:	2e00      	cmp	r6, #0
   21428:	f43f acd2 	beq.w	20dd0 <_dtoa_r+0x398>
   2142c:	e6a3      	b.n	21176 <_dtoa_r+0x73e>
   2142e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21430:	4651      	mov	r1, sl
   21432:	4620      	mov	r0, r4
   21434:	f000 feb2 	bl	2219c <__pow5mult>
   21438:	4682      	mov	sl, r0
   2143a:	e54f      	b.n	20edc <_dtoa_r+0x4a4>
   2143c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2143e:	2a00      	cmp	r2, #0
   21440:	f000 816f 	beq.w	21722 <_dtoa_r+0xcea>
   21444:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21448:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2144a:	9d06      	ldr	r5, [sp, #24]
   2144c:	e4e7      	b.n	20e1e <_dtoa_r+0x3e6>
   2144e:	9b00      	ldr	r3, [sp, #0]
   21450:	2b00      	cmp	r3, #0
   21452:	f47f ad6f 	bne.w	20f34 <_dtoa_r+0x4fc>
   21456:	e7b2      	b.n	213be <_dtoa_r+0x986>
   21458:	f000 fd74 	bl	21f44 <__multadd>
   2145c:	465f      	mov	r7, fp
   2145e:	4606      	mov	r6, r0
   21460:	4680      	mov	r8, r0
   21462:	e5b6      	b.n	20fd2 <_dtoa_r+0x59a>
   21464:	4620      	mov	r0, r4
   21466:	f000 fd63 	bl	21f30 <_Bfree>
   2146a:	2201      	movs	r2, #1
   2146c:	e5db      	b.n	21026 <_dtoa_r+0x5ee>
   2146e:	9b02      	ldr	r3, [sp, #8]
   21470:	2b02      	cmp	r3, #2
   21472:	f77f ad93 	ble.w	20f9c <_dtoa_r+0x564>
   21476:	9b08      	ldr	r3, [sp, #32]
   21478:	2b00      	cmp	r3, #0
   2147a:	d1cc      	bne.n	21416 <_dtoa_r+0x9de>
   2147c:	4649      	mov	r1, r9
   2147e:	2205      	movs	r2, #5
   21480:	4620      	mov	r0, r4
   21482:	f000 fd5f 	bl	21f44 <__multadd>
   21486:	4601      	mov	r1, r0
   21488:	4681      	mov	r9, r0
   2148a:	4650      	mov	r0, sl
   2148c:	f000 ff28 	bl	222e0 <__mcmp>
   21490:	2800      	cmp	r0, #0
   21492:	ddc0      	ble.n	21416 <_dtoa_r+0x9de>
   21494:	9a04      	ldr	r2, [sp, #16]
   21496:	9907      	ldr	r1, [sp, #28]
   21498:	2331      	movs	r3, #49	; 0x31
   2149a:	3201      	adds	r2, #1
   2149c:	9204      	str	r2, [sp, #16]
   2149e:	700b      	strb	r3, [r1, #0]
   214a0:	1c4d      	adds	r5, r1, #1
   214a2:	e7bc      	b.n	2141e <_dtoa_r+0x9e6>
   214a4:	9a04      	ldr	r2, [sp, #16]
   214a6:	3201      	adds	r2, #1
   214a8:	9204      	str	r2, [sp, #16]
   214aa:	9a07      	ldr	r2, [sp, #28]
   214ac:	2331      	movs	r3, #49	; 0x31
   214ae:	7013      	strb	r3, [r2, #0]
   214b0:	e651      	b.n	21156 <_dtoa_r+0x71e>
   214b2:	2301      	movs	r3, #1
   214b4:	9309      	str	r3, [sp, #36]	; 0x24
   214b6:	e665      	b.n	21184 <_dtoa_r+0x74c>
   214b8:	f8dd a000 	ldr.w	sl, [sp]
   214bc:	9c02      	ldr	r4, [sp, #8]
   214be:	e487      	b.n	20dd0 <_dtoa_r+0x398>
   214c0:	00024fb8 	.word	0x00024fb8
   214c4:	00024f90 	.word	0x00024f90
   214c8:	3ff00000 	.word	0x3ff00000
   214cc:	401c0000 	.word	0x401c0000
   214d0:	3fe00000 	.word	0x3fe00000
   214d4:	40240000 	.word	0x40240000
   214d8:	40140000 	.word	0x40140000
   214dc:	4648      	mov	r0, r9
   214de:	f7fa fc47 	bl	1bd70 <__aeabi_i2d>
   214e2:	463a      	mov	r2, r7
   214e4:	4643      	mov	r3, r8
   214e6:	f7fa fca9 	bl	1be3c <__aeabi_dmul>
   214ea:	2200      	movs	r2, #0
   214ec:	4bc4      	ldr	r3, [pc, #784]	; (21800 <_dtoa_r+0xdc8>)
   214ee:	f7fa faf3 	bl	1bad8 <__adddf3>
   214f2:	4605      	mov	r5, r0
   214f4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   214f8:	4641      	mov	r1, r8
   214fa:	2200      	movs	r2, #0
   214fc:	4bc1      	ldr	r3, [pc, #772]	; (21804 <_dtoa_r+0xdcc>)
   214fe:	4638      	mov	r0, r7
   21500:	f7fa fae8 	bl	1bad4 <__aeabi_dsub>
   21504:	462a      	mov	r2, r5
   21506:	4633      	mov	r3, r6
   21508:	4680      	mov	r8, r0
   2150a:	4689      	mov	r9, r1
   2150c:	f7fa ff26 	bl	1c35c <__aeabi_dcmpgt>
   21510:	2800      	cmp	r0, #0
   21512:	f040 80ab 	bne.w	2166c <_dtoa_r+0xc34>
   21516:	462a      	mov	r2, r5
   21518:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2151c:	4640      	mov	r0, r8
   2151e:	4649      	mov	r1, r9
   21520:	f7fa fefe 	bl	1c320 <__aeabi_dcmplt>
   21524:	2800      	cmp	r0, #0
   21526:	f43f ab92 	beq.w	20c4e <_dtoa_r+0x216>
   2152a:	f04f 0900 	mov.w	r9, #0
   2152e:	464e      	mov	r6, r9
   21530:	e771      	b.n	21416 <_dtoa_r+0x9de>
   21532:	9807      	ldr	r0, [sp, #28]
   21534:	f7ff bab8 	b.w	20aa8 <_dtoa_r+0x70>
   21538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2153a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2153c:	970a      	str	r7, [sp, #40]	; 0x28
   2153e:	1afb      	subs	r3, r7, r3
   21540:	441a      	add	r2, r3
   21542:	920b      	str	r2, [sp, #44]	; 0x2c
   21544:	2700      	movs	r7, #0
   21546:	e464      	b.n	20e12 <_dtoa_r+0x3da>
   21548:	ed9d 7b00 	vldr	d7, [sp]
   2154c:	f04f 0902 	mov.w	r9, #2
   21550:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21554:	e658      	b.n	21208 <_dtoa_r+0x7d0>
   21556:	2100      	movs	r1, #0
   21558:	6461      	str	r1, [r4, #68]	; 0x44
   2155a:	4620      	mov	r0, r4
   2155c:	f000 fcc2 	bl	21ee4 <_Balloc>
   21560:	f04f 0b01 	mov.w	fp, #1
   21564:	9007      	str	r0, [sp, #28]
   21566:	6420      	str	r0, [r4, #64]	; 0x40
   21568:	f8cd b020 	str.w	fp, [sp, #32]
   2156c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21570:	e629      	b.n	211c6 <_dtoa_r+0x78e>
   21572:	2a00      	cmp	r2, #0
   21574:	dd12      	ble.n	2159c <_dtoa_r+0xb64>
   21576:	4651      	mov	r1, sl
   21578:	2201      	movs	r2, #1
   2157a:	4620      	mov	r0, r4
   2157c:	f000 fe5e 	bl	2223c <__lshift>
   21580:	4649      	mov	r1, r9
   21582:	4682      	mov	sl, r0
   21584:	f000 feac 	bl	222e0 <__mcmp>
   21588:	2800      	cmp	r0, #0
   2158a:	f340 8131 	ble.w	217f0 <_dtoa_r+0xdb8>
   2158e:	9b00      	ldr	r3, [sp, #0]
   21590:	2b39      	cmp	r3, #57	; 0x39
   21592:	f000 80f7 	beq.w	21784 <_dtoa_r+0xd4c>
   21596:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2159a:	9300      	str	r3, [sp, #0]
   2159c:	f89d 3000 	ldrb.w	r3, [sp]
   215a0:	703b      	strb	r3, [r7, #0]
   215a2:	46b3      	mov	fp, r6
   215a4:	1c7d      	adds	r5, r7, #1
   215a6:	4646      	mov	r6, r8
   215a8:	e5d5      	b.n	21156 <_dtoa_r+0x71e>
   215aa:	d104      	bne.n	215b6 <_dtoa_r+0xb7e>
   215ac:	9b00      	ldr	r3, [sp, #0]
   215ae:	07db      	lsls	r3, r3, #31
   215b0:	d501      	bpl.n	215b6 <_dtoa_r+0xb7e>
   215b2:	e5c0      	b.n	21136 <_dtoa_r+0x6fe>
   215b4:	4615      	mov	r5, r2
   215b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   215ba:	2b30      	cmp	r3, #48	; 0x30
   215bc:	f105 32ff 	add.w	r2, r5, #4294967295
   215c0:	d0f8      	beq.n	215b4 <_dtoa_r+0xb7c>
   215c2:	e5c8      	b.n	21156 <_dtoa_r+0x71e>
   215c4:	f000 80b4 	beq.w	21730 <_dtoa_r+0xcf8>
   215c8:	9b04      	ldr	r3, [sp, #16]
   215ca:	425d      	negs	r5, r3
   215cc:	4b8e      	ldr	r3, [pc, #568]	; (21808 <_dtoa_r+0xdd0>)
   215ce:	f005 020f 	and.w	r2, r5, #15
   215d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   215d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   215da:	e9dd 0100 	ldrd	r0, r1, [sp]
   215de:	f7fa fc2d 	bl	1be3c <__aeabi_dmul>
   215e2:	112d      	asrs	r5, r5, #4
   215e4:	4607      	mov	r7, r0
   215e6:	4688      	mov	r8, r1
   215e8:	f000 8128 	beq.w	2183c <_dtoa_r+0xe04>
   215ec:	4e87      	ldr	r6, [pc, #540]	; (2180c <_dtoa_r+0xdd4>)
   215ee:	f04f 0902 	mov.w	r9, #2
   215f2:	07e9      	lsls	r1, r5, #31
   215f4:	d509      	bpl.n	2160a <_dtoa_r+0xbd2>
   215f6:	4638      	mov	r0, r7
   215f8:	4641      	mov	r1, r8
   215fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   215fe:	f7fa fc1d 	bl	1be3c <__aeabi_dmul>
   21602:	f109 0901 	add.w	r9, r9, #1
   21606:	4607      	mov	r7, r0
   21608:	4688      	mov	r8, r1
   2160a:	106d      	asrs	r5, r5, #1
   2160c:	f106 0608 	add.w	r6, r6, #8
   21610:	d1ef      	bne.n	215f2 <_dtoa_r+0xbba>
   21612:	e614      	b.n	2123e <_dtoa_r+0x806>
   21614:	9907      	ldr	r1, [sp, #28]
   21616:	2230      	movs	r2, #48	; 0x30
   21618:	700a      	strb	r2, [r1, #0]
   2161a:	9a04      	ldr	r2, [sp, #16]
   2161c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21620:	3201      	adds	r2, #1
   21622:	9204      	str	r2, [sp, #16]
   21624:	f7ff bbd0 	b.w	20dc8 <_dtoa_r+0x390>
   21628:	6871      	ldr	r1, [r6, #4]
   2162a:	4620      	mov	r0, r4
   2162c:	f000 fc5a 	bl	21ee4 <_Balloc>
   21630:	6933      	ldr	r3, [r6, #16]
   21632:	3302      	adds	r3, #2
   21634:	009a      	lsls	r2, r3, #2
   21636:	4605      	mov	r5, r0
   21638:	f106 010c 	add.w	r1, r6, #12
   2163c:	300c      	adds	r0, #12
   2163e:	f7fc ffcf 	bl	1e5e0 <memcpy>
   21642:	4629      	mov	r1, r5
   21644:	2201      	movs	r2, #1
   21646:	4620      	mov	r0, r4
   21648:	f000 fdf8 	bl	2223c <__lshift>
   2164c:	4680      	mov	r8, r0
   2164e:	e4b6      	b.n	20fbe <_dtoa_r+0x586>
   21650:	9b00      	ldr	r3, [sp, #0]
   21652:	2b39      	cmp	r3, #57	; 0x39
   21654:	f000 8096 	beq.w	21784 <_dtoa_r+0xd4c>
   21658:	9b00      	ldr	r3, [sp, #0]
   2165a:	3301      	adds	r3, #1
   2165c:	46b3      	mov	fp, r6
   2165e:	703b      	strb	r3, [r7, #0]
   21660:	1c7d      	adds	r5, r7, #1
   21662:	4646      	mov	r6, r8
   21664:	e577      	b.n	21156 <_dtoa_r+0x71e>
   21666:	46b3      	mov	fp, r6
   21668:	4646      	mov	r6, r8
   2166a:	e558      	b.n	2111e <_dtoa_r+0x6e6>
   2166c:	f04f 0900 	mov.w	r9, #0
   21670:	464e      	mov	r6, r9
   21672:	e70f      	b.n	21494 <_dtoa_r+0xa5c>
   21674:	4964      	ldr	r1, [pc, #400]	; (21808 <_dtoa_r+0xdd0>)
   21676:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2167a:	462a      	mov	r2, r5
   2167c:	4633      	mov	r3, r6
   2167e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21682:	f7fa fbdb 	bl	1be3c <__aeabi_dmul>
   21686:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2168a:	4638      	mov	r0, r7
   2168c:	4641      	mov	r1, r8
   2168e:	f7fa fe6f 	bl	1c370 <__aeabi_d2iz>
   21692:	4605      	mov	r5, r0
   21694:	f7fa fb6c 	bl	1bd70 <__aeabi_i2d>
   21698:	4602      	mov	r2, r0
   2169a:	460b      	mov	r3, r1
   2169c:	4638      	mov	r0, r7
   2169e:	4641      	mov	r1, r8
   216a0:	f7fa fa18 	bl	1bad4 <__aeabi_dsub>
   216a4:	9a07      	ldr	r2, [sp, #28]
   216a6:	3530      	adds	r5, #48	; 0x30
   216a8:	f1b9 0f01 	cmp.w	r9, #1
   216ac:	7015      	strb	r5, [r2, #0]
   216ae:	4606      	mov	r6, r0
   216b0:	460f      	mov	r7, r1
   216b2:	f102 0501 	add.w	r5, r2, #1
   216b6:	d01c      	beq.n	216f2 <_dtoa_r+0xcba>
   216b8:	9b07      	ldr	r3, [sp, #28]
   216ba:	4499      	add	r9, r3
   216bc:	2200      	movs	r2, #0
   216be:	4b54      	ldr	r3, [pc, #336]	; (21810 <_dtoa_r+0xdd8>)
   216c0:	4630      	mov	r0, r6
   216c2:	4639      	mov	r1, r7
   216c4:	f7fa fbba 	bl	1be3c <__aeabi_dmul>
   216c8:	460f      	mov	r7, r1
   216ca:	4606      	mov	r6, r0
   216cc:	f7fa fe50 	bl	1c370 <__aeabi_d2iz>
   216d0:	4680      	mov	r8, r0
   216d2:	f7fa fb4d 	bl	1bd70 <__aeabi_i2d>
   216d6:	f108 0830 	add.w	r8, r8, #48	; 0x30
   216da:	4602      	mov	r2, r0
   216dc:	460b      	mov	r3, r1
   216de:	4630      	mov	r0, r6
   216e0:	4639      	mov	r1, r7
   216e2:	f7fa f9f7 	bl	1bad4 <__aeabi_dsub>
   216e6:	f805 8b01 	strb.w	r8, [r5], #1
   216ea:	454d      	cmp	r5, r9
   216ec:	4606      	mov	r6, r0
   216ee:	460f      	mov	r7, r1
   216f0:	d1e4      	bne.n	216bc <_dtoa_r+0xc84>
   216f2:	2200      	movs	r2, #0
   216f4:	4b47      	ldr	r3, [pc, #284]	; (21814 <_dtoa_r+0xddc>)
   216f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   216fa:	f7fa f9ed 	bl	1bad8 <__adddf3>
   216fe:	4632      	mov	r2, r6
   21700:	463b      	mov	r3, r7
   21702:	f7fa fe0d 	bl	1c320 <__aeabi_dcmplt>
   21706:	2800      	cmp	r0, #0
   21708:	d042      	beq.n	21790 <_dtoa_r+0xd58>
   2170a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2170c:	9304      	str	r3, [sp, #16]
   2170e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21712:	f7ff bb4c 	b.w	20dae <_dtoa_r+0x376>
   21716:	9b06      	ldr	r3, [sp, #24]
   21718:	9a08      	ldr	r2, [sp, #32]
   2171a:	1a9d      	subs	r5, r3, r2
   2171c:	2300      	movs	r3, #0
   2171e:	f7ff bb7e 	b.w	20e1e <_dtoa_r+0x3e6>
   21722:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21724:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21726:	9d06      	ldr	r5, [sp, #24]
   21728:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2172c:	f7ff bb77 	b.w	20e1e <_dtoa_r+0x3e6>
   21730:	e9dd 7800 	ldrd	r7, r8, [sp]
   21734:	f04f 0902 	mov.w	r9, #2
   21738:	e581      	b.n	2123e <_dtoa_r+0x806>
   2173a:	9b08      	ldr	r3, [sp, #32]
   2173c:	2b00      	cmp	r3, #0
   2173e:	f43f aecd 	beq.w	214dc <_dtoa_r+0xaa4>
   21742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21744:	2b00      	cmp	r3, #0
   21746:	f77f aa82 	ble.w	20c4e <_dtoa_r+0x216>
   2174a:	2200      	movs	r2, #0
   2174c:	4b30      	ldr	r3, [pc, #192]	; (21810 <_dtoa_r+0xdd8>)
   2174e:	4638      	mov	r0, r7
   21750:	4641      	mov	r1, r8
   21752:	f7fa fb73 	bl	1be3c <__aeabi_dmul>
   21756:	4607      	mov	r7, r0
   21758:	4688      	mov	r8, r1
   2175a:	f109 0001 	add.w	r0, r9, #1
   2175e:	f7fa fb07 	bl	1bd70 <__aeabi_i2d>
   21762:	463a      	mov	r2, r7
   21764:	4643      	mov	r3, r8
   21766:	f7fa fb69 	bl	1be3c <__aeabi_dmul>
   2176a:	2200      	movs	r2, #0
   2176c:	4b24      	ldr	r3, [pc, #144]	; (21800 <_dtoa_r+0xdc8>)
   2176e:	f7fa f9b3 	bl	1bad8 <__adddf3>
   21772:	9a04      	ldr	r2, [sp, #16]
   21774:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21778:	3a01      	subs	r2, #1
   2177a:	4605      	mov	r5, r0
   2177c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21780:	9211      	str	r2, [sp, #68]	; 0x44
   21782:	e57d      	b.n	21280 <_dtoa_r+0x848>
   21784:	2239      	movs	r2, #57	; 0x39
   21786:	46b3      	mov	fp, r6
   21788:	703a      	strb	r2, [r7, #0]
   2178a:	4646      	mov	r6, r8
   2178c:	1c7d      	adds	r5, r7, #1
   2178e:	e4d4      	b.n	2113a <_dtoa_r+0x702>
   21790:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21794:	2000      	movs	r0, #0
   21796:	491f      	ldr	r1, [pc, #124]	; (21814 <_dtoa_r+0xddc>)
   21798:	f7fa f99c 	bl	1bad4 <__aeabi_dsub>
   2179c:	4632      	mov	r2, r6
   2179e:	463b      	mov	r3, r7
   217a0:	f7fa fddc 	bl	1c35c <__aeabi_dcmpgt>
   217a4:	b910      	cbnz	r0, 217ac <_dtoa_r+0xd74>
   217a6:	f7ff ba52 	b.w	20c4e <_dtoa_r+0x216>
   217aa:	4615      	mov	r5, r2
   217ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   217b0:	2b30      	cmp	r3, #48	; 0x30
   217b2:	f105 32ff 	add.w	r2, r5, #4294967295
   217b6:	d0f8      	beq.n	217aa <_dtoa_r+0xd72>
   217b8:	e5ea      	b.n	21390 <_dtoa_r+0x958>
   217ba:	4643      	mov	r3, r8
   217bc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   217c0:	46a0      	mov	r8, r4
   217c2:	461c      	mov	r4, r3
   217c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   217c6:	9304      	str	r3, [sp, #16]
   217c8:	f7ff baf1 	b.w	20dae <_dtoa_r+0x376>
   217cc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   217d0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   217d4:	4644      	mov	r4, r8
   217d6:	f7ff ba3a 	b.w	20c4e <_dtoa_r+0x216>
   217da:	46b8      	mov	r8, r7
   217dc:	f7ff bbac 	b.w	20f38 <_dtoa_r+0x500>
   217e0:	9b00      	ldr	r3, [sp, #0]
   217e2:	2b39      	cmp	r3, #57	; 0x39
   217e4:	d0ce      	beq.n	21784 <_dtoa_r+0xd4c>
   217e6:	f1bb 0f00 	cmp.w	fp, #0
   217ea:	f73f aed4 	bgt.w	21596 <_dtoa_r+0xb5e>
   217ee:	e6d5      	b.n	2159c <_dtoa_r+0xb64>
   217f0:	f47f aed4 	bne.w	2159c <_dtoa_r+0xb64>
   217f4:	9b00      	ldr	r3, [sp, #0]
   217f6:	07da      	lsls	r2, r3, #31
   217f8:	f57f aed0 	bpl.w	2159c <_dtoa_r+0xb64>
   217fc:	e6c7      	b.n	2158e <_dtoa_r+0xb56>
   217fe:	bf00      	nop
   21800:	401c0000 	.word	0x401c0000
   21804:	40140000 	.word	0x40140000
   21808:	00024fb8 	.word	0x00024fb8
   2180c:	00024f90 	.word	0x00024f90
   21810:	40240000 	.word	0x40240000
   21814:	3fe00000 	.word	0x3fe00000
   21818:	4631      	mov	r1, r6
   2181a:	2300      	movs	r3, #0
   2181c:	220a      	movs	r2, #10
   2181e:	4620      	mov	r0, r4
   21820:	f000 fb90 	bl	21f44 <__multadd>
   21824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21826:	2b00      	cmp	r3, #0
   21828:	4606      	mov	r6, r0
   2182a:	dd0a      	ble.n	21842 <_dtoa_r+0xe0a>
   2182c:	9308      	str	r3, [sp, #32]
   2182e:	f7ff bbb9 	b.w	20fa4 <_dtoa_r+0x56c>
   21832:	9b02      	ldr	r3, [sp, #8]
   21834:	2b02      	cmp	r3, #2
   21836:	dc22      	bgt.n	2187e <_dtoa_r+0xe46>
   21838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2183a:	e44a      	b.n	210d2 <_dtoa_r+0x69a>
   2183c:	f04f 0902 	mov.w	r9, #2
   21840:	e4fd      	b.n	2123e <_dtoa_r+0x806>
   21842:	9b02      	ldr	r3, [sp, #8]
   21844:	2b02      	cmp	r3, #2
   21846:	dc1a      	bgt.n	2187e <_dtoa_r+0xe46>
   21848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2184a:	e7ef      	b.n	2182c <_dtoa_r+0xdf4>
   2184c:	2500      	movs	r5, #0
   2184e:	6465      	str	r5, [r4, #68]	; 0x44
   21850:	4629      	mov	r1, r5
   21852:	4620      	mov	r0, r4
   21854:	f000 fb46 	bl	21ee4 <_Balloc>
   21858:	f04f 33ff 	mov.w	r3, #4294967295
   2185c:	9308      	str	r3, [sp, #32]
   2185e:	930d      	str	r3, [sp, #52]	; 0x34
   21860:	2301      	movs	r3, #1
   21862:	9007      	str	r0, [sp, #28]
   21864:	46ab      	mov	fp, r5
   21866:	6420      	str	r0, [r4, #64]	; 0x40
   21868:	9309      	str	r3, [sp, #36]	; 0x24
   2186a:	f7ff b9f0 	b.w	20c4e <_dtoa_r+0x216>
   2186e:	f43f ab7b 	beq.w	20f68 <_dtoa_r+0x530>
   21872:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21876:	e40b      	b.n	21090 <_dtoa_r+0x658>
   21878:	2701      	movs	r7, #1
   2187a:	f7ff b9af 	b.w	20bdc <_dtoa_r+0x1a4>
   2187e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21880:	9308      	str	r3, [sp, #32]
   21882:	e5f8      	b.n	21476 <_dtoa_r+0xa3e>

00021884 <__sflush_r>:
   21884:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21888:	b29a      	uxth	r2, r3
   2188a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2188e:	460d      	mov	r5, r1
   21890:	0711      	lsls	r1, r2, #28
   21892:	4680      	mov	r8, r0
   21894:	d43a      	bmi.n	2190c <__sflush_r+0x88>
   21896:	686a      	ldr	r2, [r5, #4]
   21898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2189c:	2a00      	cmp	r2, #0
   2189e:	81ab      	strh	r3, [r5, #12]
   218a0:	dd6f      	ble.n	21982 <__sflush_r+0xfe>
   218a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   218a4:	2c00      	cmp	r4, #0
   218a6:	d049      	beq.n	2193c <__sflush_r+0xb8>
   218a8:	2200      	movs	r2, #0
   218aa:	b29b      	uxth	r3, r3
   218ac:	f8d8 6000 	ldr.w	r6, [r8]
   218b0:	f8c8 2000 	str.w	r2, [r8]
   218b4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   218b8:	d067      	beq.n	2198a <__sflush_r+0x106>
   218ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   218bc:	075f      	lsls	r7, r3, #29
   218be:	d505      	bpl.n	218cc <__sflush_r+0x48>
   218c0:	6869      	ldr	r1, [r5, #4]
   218c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   218c4:	1a52      	subs	r2, r2, r1
   218c6:	b10b      	cbz	r3, 218cc <__sflush_r+0x48>
   218c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   218ca:	1ad2      	subs	r2, r2, r3
   218cc:	2300      	movs	r3, #0
   218ce:	69e9      	ldr	r1, [r5, #28]
   218d0:	4640      	mov	r0, r8
   218d2:	47a0      	blx	r4
   218d4:	1c44      	adds	r4, r0, #1
   218d6:	d03c      	beq.n	21952 <__sflush_r+0xce>
   218d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   218dc:	692a      	ldr	r2, [r5, #16]
   218de:	602a      	str	r2, [r5, #0]
   218e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   218e4:	2200      	movs	r2, #0
   218e6:	81ab      	strh	r3, [r5, #12]
   218e8:	04db      	lsls	r3, r3, #19
   218ea:	606a      	str	r2, [r5, #4]
   218ec:	d447      	bmi.n	2197e <__sflush_r+0xfa>
   218ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   218f0:	f8c8 6000 	str.w	r6, [r8]
   218f4:	b311      	cbz	r1, 2193c <__sflush_r+0xb8>
   218f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   218fa:	4299      	cmp	r1, r3
   218fc:	d002      	beq.n	21904 <__sflush_r+0x80>
   218fe:	4640      	mov	r0, r8
   21900:	f000 f95a 	bl	21bb8 <_free_r>
   21904:	2000      	movs	r0, #0
   21906:	6328      	str	r0, [r5, #48]	; 0x30
   21908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2190c:	692e      	ldr	r6, [r5, #16]
   2190e:	b1ae      	cbz	r6, 2193c <__sflush_r+0xb8>
   21910:	682c      	ldr	r4, [r5, #0]
   21912:	602e      	str	r6, [r5, #0]
   21914:	0791      	lsls	r1, r2, #30
   21916:	bf0c      	ite	eq
   21918:	696b      	ldreq	r3, [r5, #20]
   2191a:	2300      	movne	r3, #0
   2191c:	1ba4      	subs	r4, r4, r6
   2191e:	60ab      	str	r3, [r5, #8]
   21920:	e00a      	b.n	21938 <__sflush_r+0xb4>
   21922:	4623      	mov	r3, r4
   21924:	4632      	mov	r2, r6
   21926:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   21928:	69e9      	ldr	r1, [r5, #28]
   2192a:	4640      	mov	r0, r8
   2192c:	47b8      	blx	r7
   2192e:	2800      	cmp	r0, #0
   21930:	eba4 0400 	sub.w	r4, r4, r0
   21934:	4406      	add	r6, r0
   21936:	dd04      	ble.n	21942 <__sflush_r+0xbe>
   21938:	2c00      	cmp	r4, #0
   2193a:	dcf2      	bgt.n	21922 <__sflush_r+0x9e>
   2193c:	2000      	movs	r0, #0
   2193e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21942:	89ab      	ldrh	r3, [r5, #12]
   21944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21948:	81ab      	strh	r3, [r5, #12]
   2194a:	f04f 30ff 	mov.w	r0, #4294967295
   2194e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21952:	f8d8 4000 	ldr.w	r4, [r8]
   21956:	2c1d      	cmp	r4, #29
   21958:	d8f3      	bhi.n	21942 <__sflush_r+0xbe>
   2195a:	4b19      	ldr	r3, [pc, #100]	; (219c0 <__sflush_r+0x13c>)
   2195c:	40e3      	lsrs	r3, r4
   2195e:	43db      	mvns	r3, r3
   21960:	f013 0301 	ands.w	r3, r3, #1
   21964:	d1ed      	bne.n	21942 <__sflush_r+0xbe>
   21966:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   2196a:	606b      	str	r3, [r5, #4]
   2196c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   21970:	6929      	ldr	r1, [r5, #16]
   21972:	81ab      	strh	r3, [r5, #12]
   21974:	04da      	lsls	r2, r3, #19
   21976:	6029      	str	r1, [r5, #0]
   21978:	d5b9      	bpl.n	218ee <__sflush_r+0x6a>
   2197a:	2c00      	cmp	r4, #0
   2197c:	d1b7      	bne.n	218ee <__sflush_r+0x6a>
   2197e:	6528      	str	r0, [r5, #80]	; 0x50
   21980:	e7b5      	b.n	218ee <__sflush_r+0x6a>
   21982:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21984:	2a00      	cmp	r2, #0
   21986:	dc8c      	bgt.n	218a2 <__sflush_r+0x1e>
   21988:	e7d8      	b.n	2193c <__sflush_r+0xb8>
   2198a:	2301      	movs	r3, #1
   2198c:	69e9      	ldr	r1, [r5, #28]
   2198e:	4640      	mov	r0, r8
   21990:	47a0      	blx	r4
   21992:	1c43      	adds	r3, r0, #1
   21994:	4602      	mov	r2, r0
   21996:	d002      	beq.n	2199e <__sflush_r+0x11a>
   21998:	89ab      	ldrh	r3, [r5, #12]
   2199a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2199c:	e78e      	b.n	218bc <__sflush_r+0x38>
   2199e:	f8d8 3000 	ldr.w	r3, [r8]
   219a2:	2b00      	cmp	r3, #0
   219a4:	d0f8      	beq.n	21998 <__sflush_r+0x114>
   219a6:	2b1d      	cmp	r3, #29
   219a8:	d001      	beq.n	219ae <__sflush_r+0x12a>
   219aa:	2b16      	cmp	r3, #22
   219ac:	d102      	bne.n	219b4 <__sflush_r+0x130>
   219ae:	f8c8 6000 	str.w	r6, [r8]
   219b2:	e7c3      	b.n	2193c <__sflush_r+0xb8>
   219b4:	89ab      	ldrh	r3, [r5, #12]
   219b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   219ba:	81ab      	strh	r3, [r5, #12]
   219bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   219c0:	20400001 	.word	0x20400001

000219c4 <_fflush_r>:
   219c4:	b538      	push	{r3, r4, r5, lr}
   219c6:	460d      	mov	r5, r1
   219c8:	4604      	mov	r4, r0
   219ca:	b108      	cbz	r0, 219d0 <_fflush_r+0xc>
   219cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   219ce:	b1bb      	cbz	r3, 21a00 <_fflush_r+0x3c>
   219d0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   219d4:	b188      	cbz	r0, 219fa <_fflush_r+0x36>
   219d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   219d8:	07db      	lsls	r3, r3, #31
   219da:	d401      	bmi.n	219e0 <_fflush_r+0x1c>
   219dc:	0581      	lsls	r1, r0, #22
   219de:	d517      	bpl.n	21a10 <_fflush_r+0x4c>
   219e0:	4620      	mov	r0, r4
   219e2:	4629      	mov	r1, r5
   219e4:	f7ff ff4e 	bl	21884 <__sflush_r>
   219e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   219ea:	07da      	lsls	r2, r3, #31
   219ec:	4604      	mov	r4, r0
   219ee:	d402      	bmi.n	219f6 <_fflush_r+0x32>
   219f0:	89ab      	ldrh	r3, [r5, #12]
   219f2:	059b      	lsls	r3, r3, #22
   219f4:	d507      	bpl.n	21a06 <_fflush_r+0x42>
   219f6:	4620      	mov	r0, r4
   219f8:	bd38      	pop	{r3, r4, r5, pc}
   219fa:	4604      	mov	r4, r0
   219fc:	4620      	mov	r0, r4
   219fe:	bd38      	pop	{r3, r4, r5, pc}
   21a00:	f000 f838 	bl	21a74 <__sinit>
   21a04:	e7e4      	b.n	219d0 <_fflush_r+0xc>
   21a06:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21a08:	f7fc fa90 	bl	1df2c <__retarget_lock_release_recursive>
   21a0c:	4620      	mov	r0, r4
   21a0e:	bd38      	pop	{r3, r4, r5, pc}
   21a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21a12:	f7fc fa89 	bl	1df28 <__retarget_lock_acquire_recursive>
   21a16:	e7e3      	b.n	219e0 <_fflush_r+0x1c>

00021a18 <_cleanup_r>:
   21a18:	4901      	ldr	r1, [pc, #4]	; (21a20 <_cleanup_r+0x8>)
   21a1a:	f000 b9b3 	b.w	21d84 <_fwalk_reent>
   21a1e:	bf00      	nop
   21a20:	000227a9 	.word	0x000227a9

00021a24 <std.isra.0>:
   21a24:	b510      	push	{r4, lr}
   21a26:	2300      	movs	r3, #0
   21a28:	4604      	mov	r4, r0
   21a2a:	8181      	strh	r1, [r0, #12]
   21a2c:	81c2      	strh	r2, [r0, #14]
   21a2e:	6003      	str	r3, [r0, #0]
   21a30:	6043      	str	r3, [r0, #4]
   21a32:	6083      	str	r3, [r0, #8]
   21a34:	6643      	str	r3, [r0, #100]	; 0x64
   21a36:	6103      	str	r3, [r0, #16]
   21a38:	6143      	str	r3, [r0, #20]
   21a3a:	6183      	str	r3, [r0, #24]
   21a3c:	4619      	mov	r1, r3
   21a3e:	2208      	movs	r2, #8
   21a40:	305c      	adds	r0, #92	; 0x5c
   21a42:	f7fc fecb 	bl	1e7dc <memset>
   21a46:	4807      	ldr	r0, [pc, #28]	; (21a64 <std.isra.0+0x40>)
   21a48:	4907      	ldr	r1, [pc, #28]	; (21a68 <std.isra.0+0x44>)
   21a4a:	4a08      	ldr	r2, [pc, #32]	; (21a6c <std.isra.0+0x48>)
   21a4c:	4b08      	ldr	r3, [pc, #32]	; (21a70 <std.isra.0+0x4c>)
   21a4e:	6220      	str	r0, [r4, #32]
   21a50:	61e4      	str	r4, [r4, #28]
   21a52:	6261      	str	r1, [r4, #36]	; 0x24
   21a54:	62a2      	str	r2, [r4, #40]	; 0x28
   21a56:	62e3      	str	r3, [r4, #44]	; 0x2c
   21a58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   21a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21a60:	f7fc ba5e 	b.w	1df20 <__retarget_lock_init_recursive>
   21a64:	000224dd 	.word	0x000224dd
   21a68:	00022501 	.word	0x00022501
   21a6c:	0002253d 	.word	0x0002253d
   21a70:	0002255d 	.word	0x0002255d

00021a74 <__sinit>:
   21a74:	b510      	push	{r4, lr}
   21a76:	4604      	mov	r4, r0
   21a78:	4812      	ldr	r0, [pc, #72]	; (21ac4 <__sinit+0x50>)
   21a7a:	f7fc fa55 	bl	1df28 <__retarget_lock_acquire_recursive>
   21a7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21a80:	b9d2      	cbnz	r2, 21ab8 <__sinit+0x44>
   21a82:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21a86:	4810      	ldr	r0, [pc, #64]	; (21ac8 <__sinit+0x54>)
   21a88:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   21a8c:	2103      	movs	r1, #3
   21a8e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21a92:	63e0      	str	r0, [r4, #60]	; 0x3c
   21a94:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21a98:	6860      	ldr	r0, [r4, #4]
   21a9a:	2104      	movs	r1, #4
   21a9c:	f7ff ffc2 	bl	21a24 <std.isra.0>
   21aa0:	2201      	movs	r2, #1
   21aa2:	2109      	movs	r1, #9
   21aa4:	68a0      	ldr	r0, [r4, #8]
   21aa6:	f7ff ffbd 	bl	21a24 <std.isra.0>
   21aaa:	2202      	movs	r2, #2
   21aac:	2112      	movs	r1, #18
   21aae:	68e0      	ldr	r0, [r4, #12]
   21ab0:	f7ff ffb8 	bl	21a24 <std.isra.0>
   21ab4:	2301      	movs	r3, #1
   21ab6:	63a3      	str	r3, [r4, #56]	; 0x38
   21ab8:	4802      	ldr	r0, [pc, #8]	; (21ac4 <__sinit+0x50>)
   21aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21abe:	f7fc ba35 	b.w	1df2c <__retarget_lock_release_recursive>
   21ac2:	bf00      	nop
   21ac4:	20002394 	.word	0x20002394
   21ac8:	00021a19 	.word	0x00021a19

00021acc <__sfp_lock_acquire>:
   21acc:	4801      	ldr	r0, [pc, #4]	; (21ad4 <__sfp_lock_acquire+0x8>)
   21ace:	f7fc ba2b 	b.w	1df28 <__retarget_lock_acquire_recursive>
   21ad2:	bf00      	nop
   21ad4:	200023a8 	.word	0x200023a8

00021ad8 <__sfp_lock_release>:
   21ad8:	4801      	ldr	r0, [pc, #4]	; (21ae0 <__sfp_lock_release+0x8>)
   21ada:	f7fc ba27 	b.w	1df2c <__retarget_lock_release_recursive>
   21ade:	bf00      	nop
   21ae0:	200023a8 	.word	0x200023a8

00021ae4 <__libc_fini_array>:
   21ae4:	b538      	push	{r3, r4, r5, lr}
   21ae6:	4c0a      	ldr	r4, [pc, #40]	; (21b10 <__libc_fini_array+0x2c>)
   21ae8:	4d0a      	ldr	r5, [pc, #40]	; (21b14 <__libc_fini_array+0x30>)
   21aea:	1b64      	subs	r4, r4, r5
   21aec:	10a4      	asrs	r4, r4, #2
   21aee:	d00a      	beq.n	21b06 <__libc_fini_array+0x22>
   21af0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   21af4:	3b01      	subs	r3, #1
   21af6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   21afa:	3c01      	subs	r4, #1
   21afc:	f855 3904 	ldr.w	r3, [r5], #-4
   21b00:	4798      	blx	r3
   21b02:	2c00      	cmp	r4, #0
   21b04:	d1f9      	bne.n	21afa <__libc_fini_array+0x16>
   21b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21b0a:	f001 b8b3 	b.w	22c74 <_fini>
   21b0e:	bf00      	nop
   21b10:	00022cbc 	.word	0x00022cbc
   21b14:	00022cb8 	.word	0x00022cb8

00021b18 <_malloc_trim_r>:
   21b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b1a:	4f24      	ldr	r7, [pc, #144]	; (21bac <_malloc_trim_r+0x94>)
   21b1c:	460c      	mov	r4, r1
   21b1e:	4606      	mov	r6, r0
   21b20:	f7fc feaa 	bl	1e878 <__malloc_lock>
   21b24:	68bb      	ldr	r3, [r7, #8]
   21b26:	685d      	ldr	r5, [r3, #4]
   21b28:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   21b2c:	310f      	adds	r1, #15
   21b2e:	f025 0503 	bic.w	r5, r5, #3
   21b32:	4429      	add	r1, r5
   21b34:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   21b38:	f021 010f 	bic.w	r1, r1, #15
   21b3c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21b40:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21b44:	db07      	blt.n	21b56 <_malloc_trim_r+0x3e>
   21b46:	2100      	movs	r1, #0
   21b48:	4630      	mov	r0, r6
   21b4a:	f7fd f887 	bl	1ec5c <_sbrk_r>
   21b4e:	68bb      	ldr	r3, [r7, #8]
   21b50:	442b      	add	r3, r5
   21b52:	4298      	cmp	r0, r3
   21b54:	d004      	beq.n	21b60 <_malloc_trim_r+0x48>
   21b56:	4630      	mov	r0, r6
   21b58:	f7fc fe94 	bl	1e884 <__malloc_unlock>
   21b5c:	2000      	movs	r0, #0
   21b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21b60:	4261      	negs	r1, r4
   21b62:	4630      	mov	r0, r6
   21b64:	f7fd f87a 	bl	1ec5c <_sbrk_r>
   21b68:	3001      	adds	r0, #1
   21b6a:	d00d      	beq.n	21b88 <_malloc_trim_r+0x70>
   21b6c:	4b10      	ldr	r3, [pc, #64]	; (21bb0 <_malloc_trim_r+0x98>)
   21b6e:	68ba      	ldr	r2, [r7, #8]
   21b70:	6819      	ldr	r1, [r3, #0]
   21b72:	1b2d      	subs	r5, r5, r4
   21b74:	f045 0501 	orr.w	r5, r5, #1
   21b78:	4630      	mov	r0, r6
   21b7a:	1b09      	subs	r1, r1, r4
   21b7c:	6055      	str	r5, [r2, #4]
   21b7e:	6019      	str	r1, [r3, #0]
   21b80:	f7fc fe80 	bl	1e884 <__malloc_unlock>
   21b84:	2001      	movs	r0, #1
   21b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21b88:	2100      	movs	r1, #0
   21b8a:	4630      	mov	r0, r6
   21b8c:	f7fd f866 	bl	1ec5c <_sbrk_r>
   21b90:	68ba      	ldr	r2, [r7, #8]
   21b92:	1a83      	subs	r3, r0, r2
   21b94:	2b0f      	cmp	r3, #15
   21b96:	ddde      	ble.n	21b56 <_malloc_trim_r+0x3e>
   21b98:	4c06      	ldr	r4, [pc, #24]	; (21bb4 <_malloc_trim_r+0x9c>)
   21b9a:	4905      	ldr	r1, [pc, #20]	; (21bb0 <_malloc_trim_r+0x98>)
   21b9c:	6824      	ldr	r4, [r4, #0]
   21b9e:	f043 0301 	orr.w	r3, r3, #1
   21ba2:	1b00      	subs	r0, r0, r4
   21ba4:	6053      	str	r3, [r2, #4]
   21ba6:	6008      	str	r0, [r1, #0]
   21ba8:	e7d5      	b.n	21b56 <_malloc_trim_r+0x3e>
   21baa:	bf00      	nop
   21bac:	2000069c 	.word	0x2000069c
   21bb0:	200022b0 	.word	0x200022b0
   21bb4:	20000aa4 	.word	0x20000aa4

00021bb8 <_free_r>:
   21bb8:	2900      	cmp	r1, #0
   21bba:	d044      	beq.n	21c46 <_free_r+0x8e>
   21bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21bc0:	460d      	mov	r5, r1
   21bc2:	4680      	mov	r8, r0
   21bc4:	f7fc fe58 	bl	1e878 <__malloc_lock>
   21bc8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   21bcc:	4969      	ldr	r1, [pc, #420]	; (21d74 <_free_r+0x1bc>)
   21bce:	f027 0301 	bic.w	r3, r7, #1
   21bd2:	f1a5 0408 	sub.w	r4, r5, #8
   21bd6:	18e2      	adds	r2, r4, r3
   21bd8:	688e      	ldr	r6, [r1, #8]
   21bda:	6850      	ldr	r0, [r2, #4]
   21bdc:	42b2      	cmp	r2, r6
   21bde:	f020 0003 	bic.w	r0, r0, #3
   21be2:	d05e      	beq.n	21ca2 <_free_r+0xea>
   21be4:	07fe      	lsls	r6, r7, #31
   21be6:	6050      	str	r0, [r2, #4]
   21be8:	d40b      	bmi.n	21c02 <_free_r+0x4a>
   21bea:	f855 7c08 	ldr.w	r7, [r5, #-8]
   21bee:	1be4      	subs	r4, r4, r7
   21bf0:	f101 0e08 	add.w	lr, r1, #8
   21bf4:	68a5      	ldr	r5, [r4, #8]
   21bf6:	4575      	cmp	r5, lr
   21bf8:	443b      	add	r3, r7
   21bfa:	d06d      	beq.n	21cd8 <_free_r+0x120>
   21bfc:	68e7      	ldr	r7, [r4, #12]
   21bfe:	60ef      	str	r7, [r5, #12]
   21c00:	60bd      	str	r5, [r7, #8]
   21c02:	1815      	adds	r5, r2, r0
   21c04:	686d      	ldr	r5, [r5, #4]
   21c06:	07ed      	lsls	r5, r5, #31
   21c08:	d53e      	bpl.n	21c88 <_free_r+0xd0>
   21c0a:	f043 0201 	orr.w	r2, r3, #1
   21c0e:	6062      	str	r2, [r4, #4]
   21c10:	50e3      	str	r3, [r4, r3]
   21c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21c16:	d217      	bcs.n	21c48 <_free_r+0x90>
   21c18:	08db      	lsrs	r3, r3, #3
   21c1a:	1c58      	adds	r0, r3, #1
   21c1c:	109a      	asrs	r2, r3, #2
   21c1e:	684d      	ldr	r5, [r1, #4]
   21c20:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   21c24:	60a7      	str	r7, [r4, #8]
   21c26:	2301      	movs	r3, #1
   21c28:	4093      	lsls	r3, r2
   21c2a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   21c2e:	432b      	orrs	r3, r5
   21c30:	3a08      	subs	r2, #8
   21c32:	60e2      	str	r2, [r4, #12]
   21c34:	604b      	str	r3, [r1, #4]
   21c36:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   21c3a:	60fc      	str	r4, [r7, #12]
   21c3c:	4640      	mov	r0, r8
   21c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21c42:	f7fc be1f 	b.w	1e884 <__malloc_unlock>
   21c46:	4770      	bx	lr
   21c48:	0a5a      	lsrs	r2, r3, #9
   21c4a:	2a04      	cmp	r2, #4
   21c4c:	d852      	bhi.n	21cf4 <_free_r+0x13c>
   21c4e:	099a      	lsrs	r2, r3, #6
   21c50:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21c54:	00ff      	lsls	r7, r7, #3
   21c56:	f102 0538 	add.w	r5, r2, #56	; 0x38
   21c5a:	19c8      	adds	r0, r1, r7
   21c5c:	59ca      	ldr	r2, [r1, r7]
   21c5e:	3808      	subs	r0, #8
   21c60:	4290      	cmp	r0, r2
   21c62:	d04f      	beq.n	21d04 <_free_r+0x14c>
   21c64:	6851      	ldr	r1, [r2, #4]
   21c66:	f021 0103 	bic.w	r1, r1, #3
   21c6a:	428b      	cmp	r3, r1
   21c6c:	d232      	bcs.n	21cd4 <_free_r+0x11c>
   21c6e:	6892      	ldr	r2, [r2, #8]
   21c70:	4290      	cmp	r0, r2
   21c72:	d1f7      	bne.n	21c64 <_free_r+0xac>
   21c74:	68c3      	ldr	r3, [r0, #12]
   21c76:	60a0      	str	r0, [r4, #8]
   21c78:	60e3      	str	r3, [r4, #12]
   21c7a:	609c      	str	r4, [r3, #8]
   21c7c:	60c4      	str	r4, [r0, #12]
   21c7e:	4640      	mov	r0, r8
   21c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21c84:	f7fc bdfe 	b.w	1e884 <__malloc_unlock>
   21c88:	6895      	ldr	r5, [r2, #8]
   21c8a:	4f3b      	ldr	r7, [pc, #236]	; (21d78 <_free_r+0x1c0>)
   21c8c:	42bd      	cmp	r5, r7
   21c8e:	4403      	add	r3, r0
   21c90:	d040      	beq.n	21d14 <_free_r+0x15c>
   21c92:	68d0      	ldr	r0, [r2, #12]
   21c94:	60e8      	str	r0, [r5, #12]
   21c96:	f043 0201 	orr.w	r2, r3, #1
   21c9a:	6085      	str	r5, [r0, #8]
   21c9c:	6062      	str	r2, [r4, #4]
   21c9e:	50e3      	str	r3, [r4, r3]
   21ca0:	e7b7      	b.n	21c12 <_free_r+0x5a>
   21ca2:	07ff      	lsls	r7, r7, #31
   21ca4:	4403      	add	r3, r0
   21ca6:	d407      	bmi.n	21cb8 <_free_r+0x100>
   21ca8:	f855 2c08 	ldr.w	r2, [r5, #-8]
   21cac:	1aa4      	subs	r4, r4, r2
   21cae:	4413      	add	r3, r2
   21cb0:	68a0      	ldr	r0, [r4, #8]
   21cb2:	68e2      	ldr	r2, [r4, #12]
   21cb4:	60c2      	str	r2, [r0, #12]
   21cb6:	6090      	str	r0, [r2, #8]
   21cb8:	4a30      	ldr	r2, [pc, #192]	; (21d7c <_free_r+0x1c4>)
   21cba:	6812      	ldr	r2, [r2, #0]
   21cbc:	f043 0001 	orr.w	r0, r3, #1
   21cc0:	4293      	cmp	r3, r2
   21cc2:	6060      	str	r0, [r4, #4]
   21cc4:	608c      	str	r4, [r1, #8]
   21cc6:	d3b9      	bcc.n	21c3c <_free_r+0x84>
   21cc8:	4b2d      	ldr	r3, [pc, #180]	; (21d80 <_free_r+0x1c8>)
   21cca:	4640      	mov	r0, r8
   21ccc:	6819      	ldr	r1, [r3, #0]
   21cce:	f7ff ff23 	bl	21b18 <_malloc_trim_r>
   21cd2:	e7b3      	b.n	21c3c <_free_r+0x84>
   21cd4:	4610      	mov	r0, r2
   21cd6:	e7cd      	b.n	21c74 <_free_r+0xbc>
   21cd8:	1811      	adds	r1, r2, r0
   21cda:	6849      	ldr	r1, [r1, #4]
   21cdc:	07c9      	lsls	r1, r1, #31
   21cde:	d444      	bmi.n	21d6a <_free_r+0x1b2>
   21ce0:	6891      	ldr	r1, [r2, #8]
   21ce2:	68d2      	ldr	r2, [r2, #12]
   21ce4:	60ca      	str	r2, [r1, #12]
   21ce6:	4403      	add	r3, r0
   21ce8:	f043 0001 	orr.w	r0, r3, #1
   21cec:	6091      	str	r1, [r2, #8]
   21cee:	6060      	str	r0, [r4, #4]
   21cf0:	50e3      	str	r3, [r4, r3]
   21cf2:	e7a3      	b.n	21c3c <_free_r+0x84>
   21cf4:	2a14      	cmp	r2, #20
   21cf6:	d816      	bhi.n	21d26 <_free_r+0x16e>
   21cf8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   21cfc:	00ff      	lsls	r7, r7, #3
   21cfe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   21d02:	e7aa      	b.n	21c5a <_free_r+0xa2>
   21d04:	10aa      	asrs	r2, r5, #2
   21d06:	2301      	movs	r3, #1
   21d08:	684d      	ldr	r5, [r1, #4]
   21d0a:	4093      	lsls	r3, r2
   21d0c:	432b      	orrs	r3, r5
   21d0e:	604b      	str	r3, [r1, #4]
   21d10:	4603      	mov	r3, r0
   21d12:	e7b0      	b.n	21c76 <_free_r+0xbe>
   21d14:	f043 0201 	orr.w	r2, r3, #1
   21d18:	614c      	str	r4, [r1, #20]
   21d1a:	610c      	str	r4, [r1, #16]
   21d1c:	60e5      	str	r5, [r4, #12]
   21d1e:	60a5      	str	r5, [r4, #8]
   21d20:	6062      	str	r2, [r4, #4]
   21d22:	50e3      	str	r3, [r4, r3]
   21d24:	e78a      	b.n	21c3c <_free_r+0x84>
   21d26:	2a54      	cmp	r2, #84	; 0x54
   21d28:	d806      	bhi.n	21d38 <_free_r+0x180>
   21d2a:	0b1a      	lsrs	r2, r3, #12
   21d2c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   21d30:	00ff      	lsls	r7, r7, #3
   21d32:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   21d36:	e790      	b.n	21c5a <_free_r+0xa2>
   21d38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   21d3c:	d806      	bhi.n	21d4c <_free_r+0x194>
   21d3e:	0bda      	lsrs	r2, r3, #15
   21d40:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21d44:	00ff      	lsls	r7, r7, #3
   21d46:	f102 0577 	add.w	r5, r2, #119	; 0x77
   21d4a:	e786      	b.n	21c5a <_free_r+0xa2>
   21d4c:	f240 5054 	movw	r0, #1364	; 0x554
   21d50:	4282      	cmp	r2, r0
   21d52:	d806      	bhi.n	21d62 <_free_r+0x1aa>
   21d54:	0c9a      	lsrs	r2, r3, #18
   21d56:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   21d5a:	00ff      	lsls	r7, r7, #3
   21d5c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21d60:	e77b      	b.n	21c5a <_free_r+0xa2>
   21d62:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21d66:	257e      	movs	r5, #126	; 0x7e
   21d68:	e777      	b.n	21c5a <_free_r+0xa2>
   21d6a:	f043 0101 	orr.w	r1, r3, #1
   21d6e:	6061      	str	r1, [r4, #4]
   21d70:	6013      	str	r3, [r2, #0]
   21d72:	e763      	b.n	21c3c <_free_r+0x84>
   21d74:	2000069c 	.word	0x2000069c
   21d78:	200006a4 	.word	0x200006a4
   21d7c:	20000aa8 	.word	0x20000aa8
   21d80:	200022e0 	.word	0x200022e0

00021d84 <_fwalk_reent>:
   21d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21d88:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   21d8c:	d01f      	beq.n	21dce <_fwalk_reent+0x4a>
   21d8e:	4688      	mov	r8, r1
   21d90:	4606      	mov	r6, r0
   21d92:	f04f 0900 	mov.w	r9, #0
   21d96:	687d      	ldr	r5, [r7, #4]
   21d98:	68bc      	ldr	r4, [r7, #8]
   21d9a:	3d01      	subs	r5, #1
   21d9c:	d411      	bmi.n	21dc2 <_fwalk_reent+0x3e>
   21d9e:	89a3      	ldrh	r3, [r4, #12]
   21da0:	2b01      	cmp	r3, #1
   21da2:	f105 35ff 	add.w	r5, r5, #4294967295
   21da6:	d908      	bls.n	21dba <_fwalk_reent+0x36>
   21da8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21dac:	3301      	adds	r3, #1
   21dae:	4621      	mov	r1, r4
   21db0:	4630      	mov	r0, r6
   21db2:	d002      	beq.n	21dba <_fwalk_reent+0x36>
   21db4:	47c0      	blx	r8
   21db6:	ea49 0900 	orr.w	r9, r9, r0
   21dba:	1c6b      	adds	r3, r5, #1
   21dbc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21dc0:	d1ed      	bne.n	21d9e <_fwalk_reent+0x1a>
   21dc2:	683f      	ldr	r7, [r7, #0]
   21dc4:	2f00      	cmp	r7, #0
   21dc6:	d1e6      	bne.n	21d96 <_fwalk_reent+0x12>
   21dc8:	4648      	mov	r0, r9
   21dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21dce:	46b9      	mov	r9, r7
   21dd0:	4648      	mov	r0, r9
   21dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21dd6:	bf00      	nop

00021dd8 <_localeconv_r>:
   21dd8:	4a04      	ldr	r2, [pc, #16]	; (21dec <_localeconv_r+0x14>)
   21dda:	4b05      	ldr	r3, [pc, #20]	; (21df0 <_localeconv_r+0x18>)
   21ddc:	6812      	ldr	r2, [r2, #0]
   21dde:	6b50      	ldr	r0, [r2, #52]	; 0x34
   21de0:	2800      	cmp	r0, #0
   21de2:	bf08      	it	eq
   21de4:	4618      	moveq	r0, r3
   21de6:	30f0      	adds	r0, #240	; 0xf0
   21de8:	4770      	bx	lr
   21dea:	bf00      	nop
   21dec:	20000100 	.word	0x20000100
   21df0:	20000530 	.word	0x20000530

00021df4 <__swhatbuf_r>:
   21df4:	b570      	push	{r4, r5, r6, lr}
   21df6:	460c      	mov	r4, r1
   21df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21dfc:	2900      	cmp	r1, #0
   21dfe:	b090      	sub	sp, #64	; 0x40
   21e00:	4615      	mov	r5, r2
   21e02:	461e      	mov	r6, r3
   21e04:	db14      	blt.n	21e30 <__swhatbuf_r+0x3c>
   21e06:	aa01      	add	r2, sp, #4
   21e08:	f000 fd30 	bl	2286c <_fstat_r>
   21e0c:	2800      	cmp	r0, #0
   21e0e:	db0f      	blt.n	21e30 <__swhatbuf_r+0x3c>
   21e10:	9a02      	ldr	r2, [sp, #8]
   21e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21e16:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   21e1a:	fab2 f282 	clz	r2, r2
   21e1e:	0952      	lsrs	r2, r2, #5
   21e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21e24:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21e28:	6032      	str	r2, [r6, #0]
   21e2a:	602b      	str	r3, [r5, #0]
   21e2c:	b010      	add	sp, #64	; 0x40
   21e2e:	bd70      	pop	{r4, r5, r6, pc}
   21e30:	89a2      	ldrh	r2, [r4, #12]
   21e32:	2300      	movs	r3, #0
   21e34:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21e38:	6033      	str	r3, [r6, #0]
   21e3a:	d004      	beq.n	21e46 <__swhatbuf_r+0x52>
   21e3c:	2240      	movs	r2, #64	; 0x40
   21e3e:	4618      	mov	r0, r3
   21e40:	602a      	str	r2, [r5, #0]
   21e42:	b010      	add	sp, #64	; 0x40
   21e44:	bd70      	pop	{r4, r5, r6, pc}
   21e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21e4a:	602b      	str	r3, [r5, #0]
   21e4c:	b010      	add	sp, #64	; 0x40
   21e4e:	bd70      	pop	{r4, r5, r6, pc}

00021e50 <__smakebuf_r>:
   21e50:	898a      	ldrh	r2, [r1, #12]
   21e52:	0792      	lsls	r2, r2, #30
   21e54:	460b      	mov	r3, r1
   21e56:	d506      	bpl.n	21e66 <__smakebuf_r+0x16>
   21e58:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21e5c:	2101      	movs	r1, #1
   21e5e:	601a      	str	r2, [r3, #0]
   21e60:	611a      	str	r2, [r3, #16]
   21e62:	6159      	str	r1, [r3, #20]
   21e64:	4770      	bx	lr
   21e66:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e68:	b083      	sub	sp, #12
   21e6a:	ab01      	add	r3, sp, #4
   21e6c:	466a      	mov	r2, sp
   21e6e:	460c      	mov	r4, r1
   21e70:	4606      	mov	r6, r0
   21e72:	f7ff ffbf 	bl	21df4 <__swhatbuf_r>
   21e76:	9900      	ldr	r1, [sp, #0]
   21e78:	4605      	mov	r5, r0
   21e7a:	4630      	mov	r0, r6
   21e7c:	f7fc f868 	bl	1df50 <_malloc_r>
   21e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21e84:	b1d8      	cbz	r0, 21ebe <__smakebuf_r+0x6e>
   21e86:	9a01      	ldr	r2, [sp, #4]
   21e88:	4f15      	ldr	r7, [pc, #84]	; (21ee0 <__smakebuf_r+0x90>)
   21e8a:	9900      	ldr	r1, [sp, #0]
   21e8c:	63f7      	str	r7, [r6, #60]	; 0x3c
   21e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21e92:	81a3      	strh	r3, [r4, #12]
   21e94:	6020      	str	r0, [r4, #0]
   21e96:	6120      	str	r0, [r4, #16]
   21e98:	6161      	str	r1, [r4, #20]
   21e9a:	b91a      	cbnz	r2, 21ea4 <__smakebuf_r+0x54>
   21e9c:	432b      	orrs	r3, r5
   21e9e:	81a3      	strh	r3, [r4, #12]
   21ea0:	b003      	add	sp, #12
   21ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ea4:	4630      	mov	r0, r6
   21ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21eaa:	f000 fcf3 	bl	22894 <_isatty_r>
   21eae:	b1a0      	cbz	r0, 21eda <__smakebuf_r+0x8a>
   21eb0:	89a3      	ldrh	r3, [r4, #12]
   21eb2:	f023 0303 	bic.w	r3, r3, #3
   21eb6:	f043 0301 	orr.w	r3, r3, #1
   21eba:	b21b      	sxth	r3, r3
   21ebc:	e7ee      	b.n	21e9c <__smakebuf_r+0x4c>
   21ebe:	059a      	lsls	r2, r3, #22
   21ec0:	d4ee      	bmi.n	21ea0 <__smakebuf_r+0x50>
   21ec2:	f023 0303 	bic.w	r3, r3, #3
   21ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21eca:	f043 0302 	orr.w	r3, r3, #2
   21ece:	2101      	movs	r1, #1
   21ed0:	81a3      	strh	r3, [r4, #12]
   21ed2:	6022      	str	r2, [r4, #0]
   21ed4:	6122      	str	r2, [r4, #16]
   21ed6:	6161      	str	r1, [r4, #20]
   21ed8:	e7e2      	b.n	21ea0 <__smakebuf_r+0x50>
   21eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21ede:	e7dd      	b.n	21e9c <__smakebuf_r+0x4c>
   21ee0:	00021a19 	.word	0x00021a19

00021ee4 <_Balloc>:
   21ee4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21ee6:	b570      	push	{r4, r5, r6, lr}
   21ee8:	4605      	mov	r5, r0
   21eea:	460c      	mov	r4, r1
   21eec:	b14b      	cbz	r3, 21f02 <_Balloc+0x1e>
   21eee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21ef2:	b180      	cbz	r0, 21f16 <_Balloc+0x32>
   21ef4:	6802      	ldr	r2, [r0, #0]
   21ef6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21efa:	2300      	movs	r3, #0
   21efc:	6103      	str	r3, [r0, #16]
   21efe:	60c3      	str	r3, [r0, #12]
   21f00:	bd70      	pop	{r4, r5, r6, pc}
   21f02:	2221      	movs	r2, #33	; 0x21
   21f04:	2104      	movs	r1, #4
   21f06:	f000 fc0d 	bl	22724 <_calloc_r>
   21f0a:	64e8      	str	r0, [r5, #76]	; 0x4c
   21f0c:	4603      	mov	r3, r0
   21f0e:	2800      	cmp	r0, #0
   21f10:	d1ed      	bne.n	21eee <_Balloc+0xa>
   21f12:	2000      	movs	r0, #0
   21f14:	bd70      	pop	{r4, r5, r6, pc}
   21f16:	2101      	movs	r1, #1
   21f18:	fa01 f604 	lsl.w	r6, r1, r4
   21f1c:	1d72      	adds	r2, r6, #5
   21f1e:	4628      	mov	r0, r5
   21f20:	0092      	lsls	r2, r2, #2
   21f22:	f000 fbff 	bl	22724 <_calloc_r>
   21f26:	2800      	cmp	r0, #0
   21f28:	d0f3      	beq.n	21f12 <_Balloc+0x2e>
   21f2a:	6044      	str	r4, [r0, #4]
   21f2c:	6086      	str	r6, [r0, #8]
   21f2e:	e7e4      	b.n	21efa <_Balloc+0x16>

00021f30 <_Bfree>:
   21f30:	b131      	cbz	r1, 21f40 <_Bfree+0x10>
   21f32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21f34:	684a      	ldr	r2, [r1, #4]
   21f36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21f3a:	6008      	str	r0, [r1, #0]
   21f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21f40:	4770      	bx	lr
   21f42:	bf00      	nop

00021f44 <__multadd>:
   21f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   21f46:	690c      	ldr	r4, [r1, #16]
   21f48:	b083      	sub	sp, #12
   21f4a:	460d      	mov	r5, r1
   21f4c:	4606      	mov	r6, r0
   21f4e:	f101 0e14 	add.w	lr, r1, #20
   21f52:	2700      	movs	r7, #0
   21f54:	f8de 0000 	ldr.w	r0, [lr]
   21f58:	b281      	uxth	r1, r0
   21f5a:	fb02 3301 	mla	r3, r2, r1, r3
   21f5e:	0c01      	lsrs	r1, r0, #16
   21f60:	0c18      	lsrs	r0, r3, #16
   21f62:	fb02 0101 	mla	r1, r2, r1, r0
   21f66:	b29b      	uxth	r3, r3
   21f68:	3701      	adds	r7, #1
   21f6a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21f6e:	42bc      	cmp	r4, r7
   21f70:	f84e 3b04 	str.w	r3, [lr], #4
   21f74:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21f78:	dcec      	bgt.n	21f54 <__multadd+0x10>
   21f7a:	b13b      	cbz	r3, 21f8c <__multadd+0x48>
   21f7c:	68aa      	ldr	r2, [r5, #8]
   21f7e:	4294      	cmp	r4, r2
   21f80:	da07      	bge.n	21f92 <__multadd+0x4e>
   21f82:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21f86:	3401      	adds	r4, #1
   21f88:	6153      	str	r3, [r2, #20]
   21f8a:	612c      	str	r4, [r5, #16]
   21f8c:	4628      	mov	r0, r5
   21f8e:	b003      	add	sp, #12
   21f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21f92:	6869      	ldr	r1, [r5, #4]
   21f94:	9301      	str	r3, [sp, #4]
   21f96:	3101      	adds	r1, #1
   21f98:	4630      	mov	r0, r6
   21f9a:	f7ff ffa3 	bl	21ee4 <_Balloc>
   21f9e:	692a      	ldr	r2, [r5, #16]
   21fa0:	3202      	adds	r2, #2
   21fa2:	f105 010c 	add.w	r1, r5, #12
   21fa6:	4607      	mov	r7, r0
   21fa8:	0092      	lsls	r2, r2, #2
   21faa:	300c      	adds	r0, #12
   21fac:	f7fc fb18 	bl	1e5e0 <memcpy>
   21fb0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21fb2:	6869      	ldr	r1, [r5, #4]
   21fb4:	9b01      	ldr	r3, [sp, #4]
   21fb6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21fba:	6028      	str	r0, [r5, #0]
   21fbc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21fc0:	463d      	mov	r5, r7
   21fc2:	e7de      	b.n	21f82 <__multadd+0x3e>

00021fc4 <__hi0bits>:
   21fc4:	0c02      	lsrs	r2, r0, #16
   21fc6:	0412      	lsls	r2, r2, #16
   21fc8:	4603      	mov	r3, r0
   21fca:	b9b2      	cbnz	r2, 21ffa <__hi0bits+0x36>
   21fcc:	0403      	lsls	r3, r0, #16
   21fce:	2010      	movs	r0, #16
   21fd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21fd4:	bf04      	itt	eq
   21fd6:	021b      	lsleq	r3, r3, #8
   21fd8:	3008      	addeq	r0, #8
   21fda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21fde:	bf04      	itt	eq
   21fe0:	011b      	lsleq	r3, r3, #4
   21fe2:	3004      	addeq	r0, #4
   21fe4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21fe8:	bf04      	itt	eq
   21fea:	009b      	lsleq	r3, r3, #2
   21fec:	3002      	addeq	r0, #2
   21fee:	2b00      	cmp	r3, #0
   21ff0:	db02      	blt.n	21ff8 <__hi0bits+0x34>
   21ff2:	005b      	lsls	r3, r3, #1
   21ff4:	d403      	bmi.n	21ffe <__hi0bits+0x3a>
   21ff6:	2020      	movs	r0, #32
   21ff8:	4770      	bx	lr
   21ffa:	2000      	movs	r0, #0
   21ffc:	e7e8      	b.n	21fd0 <__hi0bits+0xc>
   21ffe:	3001      	adds	r0, #1
   22000:	4770      	bx	lr
   22002:	bf00      	nop

00022004 <__lo0bits>:
   22004:	6803      	ldr	r3, [r0, #0]
   22006:	f013 0207 	ands.w	r2, r3, #7
   2200a:	4601      	mov	r1, r0
   2200c:	d007      	beq.n	2201e <__lo0bits+0x1a>
   2200e:	07da      	lsls	r2, r3, #31
   22010:	d421      	bmi.n	22056 <__lo0bits+0x52>
   22012:	0798      	lsls	r0, r3, #30
   22014:	d421      	bmi.n	2205a <__lo0bits+0x56>
   22016:	089b      	lsrs	r3, r3, #2
   22018:	600b      	str	r3, [r1, #0]
   2201a:	2002      	movs	r0, #2
   2201c:	4770      	bx	lr
   2201e:	b298      	uxth	r0, r3
   22020:	b198      	cbz	r0, 2204a <__lo0bits+0x46>
   22022:	4610      	mov	r0, r2
   22024:	f013 0fff 	tst.w	r3, #255	; 0xff
   22028:	bf04      	itt	eq
   2202a:	0a1b      	lsreq	r3, r3, #8
   2202c:	3008      	addeq	r0, #8
   2202e:	071a      	lsls	r2, r3, #28
   22030:	bf04      	itt	eq
   22032:	091b      	lsreq	r3, r3, #4
   22034:	3004      	addeq	r0, #4
   22036:	079a      	lsls	r2, r3, #30
   22038:	bf04      	itt	eq
   2203a:	089b      	lsreq	r3, r3, #2
   2203c:	3002      	addeq	r0, #2
   2203e:	07da      	lsls	r2, r3, #31
   22040:	d407      	bmi.n	22052 <__lo0bits+0x4e>
   22042:	085b      	lsrs	r3, r3, #1
   22044:	d104      	bne.n	22050 <__lo0bits+0x4c>
   22046:	2020      	movs	r0, #32
   22048:	4770      	bx	lr
   2204a:	0c1b      	lsrs	r3, r3, #16
   2204c:	2010      	movs	r0, #16
   2204e:	e7e9      	b.n	22024 <__lo0bits+0x20>
   22050:	3001      	adds	r0, #1
   22052:	600b      	str	r3, [r1, #0]
   22054:	4770      	bx	lr
   22056:	2000      	movs	r0, #0
   22058:	4770      	bx	lr
   2205a:	085b      	lsrs	r3, r3, #1
   2205c:	600b      	str	r3, [r1, #0]
   2205e:	2001      	movs	r0, #1
   22060:	4770      	bx	lr
   22062:	bf00      	nop

00022064 <__i2b>:
   22064:	b510      	push	{r4, lr}
   22066:	460c      	mov	r4, r1
   22068:	2101      	movs	r1, #1
   2206a:	f7ff ff3b 	bl	21ee4 <_Balloc>
   2206e:	2201      	movs	r2, #1
   22070:	6144      	str	r4, [r0, #20]
   22072:	6102      	str	r2, [r0, #16]
   22074:	bd10      	pop	{r4, pc}
   22076:	bf00      	nop

00022078 <__multiply>:
   22078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2207c:	690c      	ldr	r4, [r1, #16]
   2207e:	6915      	ldr	r5, [r2, #16]
   22080:	42ac      	cmp	r4, r5
   22082:	b083      	sub	sp, #12
   22084:	468b      	mov	fp, r1
   22086:	4616      	mov	r6, r2
   22088:	da04      	bge.n	22094 <__multiply+0x1c>
   2208a:	4622      	mov	r2, r4
   2208c:	46b3      	mov	fp, r6
   2208e:	462c      	mov	r4, r5
   22090:	460e      	mov	r6, r1
   22092:	4615      	mov	r5, r2
   22094:	f8db 3008 	ldr.w	r3, [fp, #8]
   22098:	f8db 1004 	ldr.w	r1, [fp, #4]
   2209c:	eb04 0805 	add.w	r8, r4, r5
   220a0:	4598      	cmp	r8, r3
   220a2:	bfc8      	it	gt
   220a4:	3101      	addgt	r1, #1
   220a6:	f7ff ff1d 	bl	21ee4 <_Balloc>
   220aa:	f100 0914 	add.w	r9, r0, #20
   220ae:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   220b2:	45d1      	cmp	r9, sl
   220b4:	9000      	str	r0, [sp, #0]
   220b6:	d205      	bcs.n	220c4 <__multiply+0x4c>
   220b8:	464b      	mov	r3, r9
   220ba:	2100      	movs	r1, #0
   220bc:	f843 1b04 	str.w	r1, [r3], #4
   220c0:	459a      	cmp	sl, r3
   220c2:	d8fb      	bhi.n	220bc <__multiply+0x44>
   220c4:	f106 0c14 	add.w	ip, r6, #20
   220c8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   220cc:	f10b 0b14 	add.w	fp, fp, #20
   220d0:	459c      	cmp	ip, r3
   220d2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   220d6:	d24c      	bcs.n	22172 <__multiply+0xfa>
   220d8:	f8cd a004 	str.w	sl, [sp, #4]
   220dc:	469a      	mov	sl, r3
   220de:	f8dc 5000 	ldr.w	r5, [ip]
   220e2:	b2af      	uxth	r7, r5
   220e4:	b1ef      	cbz	r7, 22122 <__multiply+0xaa>
   220e6:	2100      	movs	r1, #0
   220e8:	464d      	mov	r5, r9
   220ea:	465e      	mov	r6, fp
   220ec:	460c      	mov	r4, r1
   220ee:	f856 2b04 	ldr.w	r2, [r6], #4
   220f2:	6828      	ldr	r0, [r5, #0]
   220f4:	b293      	uxth	r3, r2
   220f6:	b281      	uxth	r1, r0
   220f8:	fb07 1303 	mla	r3, r7, r3, r1
   220fc:	0c12      	lsrs	r2, r2, #16
   220fe:	0c01      	lsrs	r1, r0, #16
   22100:	4423      	add	r3, r4
   22102:	fb07 1102 	mla	r1, r7, r2, r1
   22106:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2210a:	b29b      	uxth	r3, r3
   2210c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   22110:	45b6      	cmp	lr, r6
   22112:	f845 3b04 	str.w	r3, [r5], #4
   22116:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2211a:	d8e8      	bhi.n	220ee <__multiply+0x76>
   2211c:	602c      	str	r4, [r5, #0]
   2211e:	f8dc 5000 	ldr.w	r5, [ip]
   22122:	0c2d      	lsrs	r5, r5, #16
   22124:	d01d      	beq.n	22162 <__multiply+0xea>
   22126:	f8d9 3000 	ldr.w	r3, [r9]
   2212a:	4648      	mov	r0, r9
   2212c:	461c      	mov	r4, r3
   2212e:	4659      	mov	r1, fp
   22130:	2200      	movs	r2, #0
   22132:	880e      	ldrh	r6, [r1, #0]
   22134:	0c24      	lsrs	r4, r4, #16
   22136:	fb05 4406 	mla	r4, r5, r6, r4
   2213a:	4422      	add	r2, r4
   2213c:	b29b      	uxth	r3, r3
   2213e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   22142:	f840 3b04 	str.w	r3, [r0], #4
   22146:	f851 3b04 	ldr.w	r3, [r1], #4
   2214a:	6804      	ldr	r4, [r0, #0]
   2214c:	0c1b      	lsrs	r3, r3, #16
   2214e:	b2a6      	uxth	r6, r4
   22150:	fb05 6303 	mla	r3, r5, r3, r6
   22154:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   22158:	458e      	cmp	lr, r1
   2215a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2215e:	d8e8      	bhi.n	22132 <__multiply+0xba>
   22160:	6003      	str	r3, [r0, #0]
   22162:	f10c 0c04 	add.w	ip, ip, #4
   22166:	45e2      	cmp	sl, ip
   22168:	f109 0904 	add.w	r9, r9, #4
   2216c:	d8b7      	bhi.n	220de <__multiply+0x66>
   2216e:	f8dd a004 	ldr.w	sl, [sp, #4]
   22172:	f1b8 0f00 	cmp.w	r8, #0
   22176:	dd0b      	ble.n	22190 <__multiply+0x118>
   22178:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2217c:	f1aa 0a04 	sub.w	sl, sl, #4
   22180:	b11b      	cbz	r3, 2218a <__multiply+0x112>
   22182:	e005      	b.n	22190 <__multiply+0x118>
   22184:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   22188:	b913      	cbnz	r3, 22190 <__multiply+0x118>
   2218a:	f1b8 0801 	subs.w	r8, r8, #1
   2218e:	d1f9      	bne.n	22184 <__multiply+0x10c>
   22190:	9800      	ldr	r0, [sp, #0]
   22192:	f8c0 8010 	str.w	r8, [r0, #16]
   22196:	b003      	add	sp, #12
   22198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002219c <__pow5mult>:
   2219c:	f012 0303 	ands.w	r3, r2, #3
   221a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221a4:	4614      	mov	r4, r2
   221a6:	4607      	mov	r7, r0
   221a8:	d12e      	bne.n	22208 <__pow5mult+0x6c>
   221aa:	460d      	mov	r5, r1
   221ac:	10a4      	asrs	r4, r4, #2
   221ae:	d01c      	beq.n	221ea <__pow5mult+0x4e>
   221b0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   221b2:	b396      	cbz	r6, 2221a <__pow5mult+0x7e>
   221b4:	07e3      	lsls	r3, r4, #31
   221b6:	f04f 0800 	mov.w	r8, #0
   221ba:	d406      	bmi.n	221ca <__pow5mult+0x2e>
   221bc:	1064      	asrs	r4, r4, #1
   221be:	d014      	beq.n	221ea <__pow5mult+0x4e>
   221c0:	6830      	ldr	r0, [r6, #0]
   221c2:	b1a8      	cbz	r0, 221f0 <__pow5mult+0x54>
   221c4:	4606      	mov	r6, r0
   221c6:	07e3      	lsls	r3, r4, #31
   221c8:	d5f8      	bpl.n	221bc <__pow5mult+0x20>
   221ca:	4632      	mov	r2, r6
   221cc:	4629      	mov	r1, r5
   221ce:	4638      	mov	r0, r7
   221d0:	f7ff ff52 	bl	22078 <__multiply>
   221d4:	b1b5      	cbz	r5, 22204 <__pow5mult+0x68>
   221d6:	686a      	ldr	r2, [r5, #4]
   221d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   221da:	1064      	asrs	r4, r4, #1
   221dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   221e0:	6029      	str	r1, [r5, #0]
   221e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   221e6:	4605      	mov	r5, r0
   221e8:	d1ea      	bne.n	221c0 <__pow5mult+0x24>
   221ea:	4628      	mov	r0, r5
   221ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   221f0:	4632      	mov	r2, r6
   221f2:	4631      	mov	r1, r6
   221f4:	4638      	mov	r0, r7
   221f6:	f7ff ff3f 	bl	22078 <__multiply>
   221fa:	6030      	str	r0, [r6, #0]
   221fc:	f8c0 8000 	str.w	r8, [r0]
   22200:	4606      	mov	r6, r0
   22202:	e7e0      	b.n	221c6 <__pow5mult+0x2a>
   22204:	4605      	mov	r5, r0
   22206:	e7d9      	b.n	221bc <__pow5mult+0x20>
   22208:	1e5a      	subs	r2, r3, #1
   2220a:	4d0b      	ldr	r5, [pc, #44]	; (22238 <__pow5mult+0x9c>)
   2220c:	2300      	movs	r3, #0
   2220e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   22212:	f7ff fe97 	bl	21f44 <__multadd>
   22216:	4605      	mov	r5, r0
   22218:	e7c8      	b.n	221ac <__pow5mult+0x10>
   2221a:	2101      	movs	r1, #1
   2221c:	4638      	mov	r0, r7
   2221e:	f7ff fe61 	bl	21ee4 <_Balloc>
   22222:	f240 2171 	movw	r1, #625	; 0x271
   22226:	2201      	movs	r2, #1
   22228:	2300      	movs	r3, #0
   2222a:	6141      	str	r1, [r0, #20]
   2222c:	6102      	str	r2, [r0, #16]
   2222e:	4606      	mov	r6, r0
   22230:	64b8      	str	r0, [r7, #72]	; 0x48
   22232:	6003      	str	r3, [r0, #0]
   22234:	e7be      	b.n	221b4 <__pow5mult+0x18>
   22236:	bf00      	nop
   22238:	00025080 	.word	0x00025080

0002223c <__lshift>:
   2223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22240:	4691      	mov	r9, r2
   22242:	690a      	ldr	r2, [r1, #16]
   22244:	688b      	ldr	r3, [r1, #8]
   22246:	ea4f 1469 	mov.w	r4, r9, asr #5
   2224a:	eb04 0802 	add.w	r8, r4, r2
   2224e:	f108 0501 	add.w	r5, r8, #1
   22252:	429d      	cmp	r5, r3
   22254:	460e      	mov	r6, r1
   22256:	4607      	mov	r7, r0
   22258:	6849      	ldr	r1, [r1, #4]
   2225a:	dd04      	ble.n	22266 <__lshift+0x2a>
   2225c:	005b      	lsls	r3, r3, #1
   2225e:	429d      	cmp	r5, r3
   22260:	f101 0101 	add.w	r1, r1, #1
   22264:	dcfa      	bgt.n	2225c <__lshift+0x20>
   22266:	4638      	mov	r0, r7
   22268:	f7ff fe3c 	bl	21ee4 <_Balloc>
   2226c:	2c00      	cmp	r4, #0
   2226e:	f100 0314 	add.w	r3, r0, #20
   22272:	dd06      	ble.n	22282 <__lshift+0x46>
   22274:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   22278:	2100      	movs	r1, #0
   2227a:	f843 1b04 	str.w	r1, [r3], #4
   2227e:	429a      	cmp	r2, r3
   22280:	d1fb      	bne.n	2227a <__lshift+0x3e>
   22282:	6934      	ldr	r4, [r6, #16]
   22284:	f106 0114 	add.w	r1, r6, #20
   22288:	f019 091f 	ands.w	r9, r9, #31
   2228c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   22290:	d01d      	beq.n	222ce <__lshift+0x92>
   22292:	f1c9 0c20 	rsb	ip, r9, #32
   22296:	2200      	movs	r2, #0
   22298:	680c      	ldr	r4, [r1, #0]
   2229a:	fa04 f409 	lsl.w	r4, r4, r9
   2229e:	4314      	orrs	r4, r2
   222a0:	f843 4b04 	str.w	r4, [r3], #4
   222a4:	f851 2b04 	ldr.w	r2, [r1], #4
   222a8:	458e      	cmp	lr, r1
   222aa:	fa22 f20c 	lsr.w	r2, r2, ip
   222ae:	d8f3      	bhi.n	22298 <__lshift+0x5c>
   222b0:	601a      	str	r2, [r3, #0]
   222b2:	b10a      	cbz	r2, 222b8 <__lshift+0x7c>
   222b4:	f108 0502 	add.w	r5, r8, #2
   222b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   222ba:	6872      	ldr	r2, [r6, #4]
   222bc:	3d01      	subs	r5, #1
   222be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   222c2:	6105      	str	r5, [r0, #16]
   222c4:	6031      	str	r1, [r6, #0]
   222c6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   222ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   222ce:	3b04      	subs	r3, #4
   222d0:	f851 2b04 	ldr.w	r2, [r1], #4
   222d4:	f843 2f04 	str.w	r2, [r3, #4]!
   222d8:	458e      	cmp	lr, r1
   222da:	d8f9      	bhi.n	222d0 <__lshift+0x94>
   222dc:	e7ec      	b.n	222b8 <__lshift+0x7c>
   222de:	bf00      	nop

000222e0 <__mcmp>:
   222e0:	b430      	push	{r4, r5}
   222e2:	690b      	ldr	r3, [r1, #16]
   222e4:	4605      	mov	r5, r0
   222e6:	6900      	ldr	r0, [r0, #16]
   222e8:	1ac0      	subs	r0, r0, r3
   222ea:	d10f      	bne.n	2230c <__mcmp+0x2c>
   222ec:	009b      	lsls	r3, r3, #2
   222ee:	3514      	adds	r5, #20
   222f0:	3114      	adds	r1, #20
   222f2:	4419      	add	r1, r3
   222f4:	442b      	add	r3, r5
   222f6:	e001      	b.n	222fc <__mcmp+0x1c>
   222f8:	429d      	cmp	r5, r3
   222fa:	d207      	bcs.n	2230c <__mcmp+0x2c>
   222fc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   22300:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22304:	4294      	cmp	r4, r2
   22306:	d0f7      	beq.n	222f8 <__mcmp+0x18>
   22308:	d302      	bcc.n	22310 <__mcmp+0x30>
   2230a:	2001      	movs	r0, #1
   2230c:	bc30      	pop	{r4, r5}
   2230e:	4770      	bx	lr
   22310:	f04f 30ff 	mov.w	r0, #4294967295
   22314:	e7fa      	b.n	2230c <__mcmp+0x2c>
   22316:	bf00      	nop

00022318 <__mdiff>:
   22318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2231c:	690f      	ldr	r7, [r1, #16]
   2231e:	460e      	mov	r6, r1
   22320:	6911      	ldr	r1, [r2, #16]
   22322:	1a7f      	subs	r7, r7, r1
   22324:	2f00      	cmp	r7, #0
   22326:	4690      	mov	r8, r2
   22328:	d117      	bne.n	2235a <__mdiff+0x42>
   2232a:	0089      	lsls	r1, r1, #2
   2232c:	f106 0514 	add.w	r5, r6, #20
   22330:	f102 0e14 	add.w	lr, r2, #20
   22334:	186b      	adds	r3, r5, r1
   22336:	4471      	add	r1, lr
   22338:	e001      	b.n	2233e <__mdiff+0x26>
   2233a:	429d      	cmp	r5, r3
   2233c:	d25c      	bcs.n	223f8 <__mdiff+0xe0>
   2233e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22342:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   22346:	42a2      	cmp	r2, r4
   22348:	d0f7      	beq.n	2233a <__mdiff+0x22>
   2234a:	d25e      	bcs.n	2240a <__mdiff+0xf2>
   2234c:	4633      	mov	r3, r6
   2234e:	462c      	mov	r4, r5
   22350:	4646      	mov	r6, r8
   22352:	4675      	mov	r5, lr
   22354:	4698      	mov	r8, r3
   22356:	2701      	movs	r7, #1
   22358:	e005      	b.n	22366 <__mdiff+0x4e>
   2235a:	db58      	blt.n	2240e <__mdiff+0xf6>
   2235c:	f106 0514 	add.w	r5, r6, #20
   22360:	f108 0414 	add.w	r4, r8, #20
   22364:	2700      	movs	r7, #0
   22366:	6871      	ldr	r1, [r6, #4]
   22368:	f7ff fdbc 	bl	21ee4 <_Balloc>
   2236c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22370:	6936      	ldr	r6, [r6, #16]
   22372:	60c7      	str	r7, [r0, #12]
   22374:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   22378:	46a6      	mov	lr, r4
   2237a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2237e:	f100 0414 	add.w	r4, r0, #20
   22382:	2300      	movs	r3, #0
   22384:	f85e 1b04 	ldr.w	r1, [lr], #4
   22388:	f855 8b04 	ldr.w	r8, [r5], #4
   2238c:	b28a      	uxth	r2, r1
   2238e:	fa13 f388 	uxtah	r3, r3, r8
   22392:	0c09      	lsrs	r1, r1, #16
   22394:	1a9a      	subs	r2, r3, r2
   22396:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2239a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2239e:	b292      	uxth	r2, r2
   223a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   223a4:	45f4      	cmp	ip, lr
   223a6:	f844 2b04 	str.w	r2, [r4], #4
   223aa:	ea4f 4323 	mov.w	r3, r3, asr #16
   223ae:	d8e9      	bhi.n	22384 <__mdiff+0x6c>
   223b0:	42af      	cmp	r7, r5
   223b2:	d917      	bls.n	223e4 <__mdiff+0xcc>
   223b4:	46a4      	mov	ip, r4
   223b6:	46ae      	mov	lr, r5
   223b8:	f85e 2b04 	ldr.w	r2, [lr], #4
   223bc:	fa13 f382 	uxtah	r3, r3, r2
   223c0:	1419      	asrs	r1, r3, #16
   223c2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   223c6:	b29b      	uxth	r3, r3
   223c8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   223cc:	4577      	cmp	r7, lr
   223ce:	f84c 2b04 	str.w	r2, [ip], #4
   223d2:	ea4f 4321 	mov.w	r3, r1, asr #16
   223d6:	d8ef      	bhi.n	223b8 <__mdiff+0xa0>
   223d8:	43ed      	mvns	r5, r5
   223da:	442f      	add	r7, r5
   223dc:	f027 0703 	bic.w	r7, r7, #3
   223e0:	3704      	adds	r7, #4
   223e2:	443c      	add	r4, r7
   223e4:	3c04      	subs	r4, #4
   223e6:	b922      	cbnz	r2, 223f2 <__mdiff+0xda>
   223e8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   223ec:	3e01      	subs	r6, #1
   223ee:	2b00      	cmp	r3, #0
   223f0:	d0fa      	beq.n	223e8 <__mdiff+0xd0>
   223f2:	6106      	str	r6, [r0, #16]
   223f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   223f8:	2100      	movs	r1, #0
   223fa:	f7ff fd73 	bl	21ee4 <_Balloc>
   223fe:	2201      	movs	r2, #1
   22400:	2300      	movs	r3, #0
   22402:	6102      	str	r2, [r0, #16]
   22404:	6143      	str	r3, [r0, #20]
   22406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2240a:	4674      	mov	r4, lr
   2240c:	e7ab      	b.n	22366 <__mdiff+0x4e>
   2240e:	4633      	mov	r3, r6
   22410:	f106 0414 	add.w	r4, r6, #20
   22414:	f102 0514 	add.w	r5, r2, #20
   22418:	4616      	mov	r6, r2
   2241a:	2701      	movs	r7, #1
   2241c:	4698      	mov	r8, r3
   2241e:	e7a2      	b.n	22366 <__mdiff+0x4e>

00022420 <__d2b>:
   22420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22424:	ec57 6b10 	vmov	r6, r7, d0
   22428:	b083      	sub	sp, #12
   2242a:	4688      	mov	r8, r1
   2242c:	2101      	movs	r1, #1
   2242e:	463c      	mov	r4, r7
   22430:	f3c7 550a 	ubfx	r5, r7, #20, #11
   22434:	4617      	mov	r7, r2
   22436:	f7ff fd55 	bl	21ee4 <_Balloc>
   2243a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2243e:	4681      	mov	r9, r0
   22440:	b10d      	cbz	r5, 22446 <__d2b+0x26>
   22442:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   22446:	9401      	str	r4, [sp, #4]
   22448:	b31e      	cbz	r6, 22492 <__d2b+0x72>
   2244a:	a802      	add	r0, sp, #8
   2244c:	f840 6d08 	str.w	r6, [r0, #-8]!
   22450:	f7ff fdd8 	bl	22004 <__lo0bits>
   22454:	2800      	cmp	r0, #0
   22456:	d134      	bne.n	224c2 <__d2b+0xa2>
   22458:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2245c:	f8c9 2014 	str.w	r2, [r9, #20]
   22460:	2b00      	cmp	r3, #0
   22462:	bf0c      	ite	eq
   22464:	2101      	moveq	r1, #1
   22466:	2102      	movne	r1, #2
   22468:	f8c9 3018 	str.w	r3, [r9, #24]
   2246c:	f8c9 1010 	str.w	r1, [r9, #16]
   22470:	b9dd      	cbnz	r5, 224aa <__d2b+0x8a>
   22472:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   22476:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2247a:	f8c8 0000 	str.w	r0, [r8]
   2247e:	6918      	ldr	r0, [r3, #16]
   22480:	f7ff fda0 	bl	21fc4 <__hi0bits>
   22484:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22488:	6038      	str	r0, [r7, #0]
   2248a:	4648      	mov	r0, r9
   2248c:	b003      	add	sp, #12
   2248e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22492:	a801      	add	r0, sp, #4
   22494:	f7ff fdb6 	bl	22004 <__lo0bits>
   22498:	9b01      	ldr	r3, [sp, #4]
   2249a:	f8c9 3014 	str.w	r3, [r9, #20]
   2249e:	2101      	movs	r1, #1
   224a0:	3020      	adds	r0, #32
   224a2:	f8c9 1010 	str.w	r1, [r9, #16]
   224a6:	2d00      	cmp	r5, #0
   224a8:	d0e3      	beq.n	22472 <__d2b+0x52>
   224aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   224ae:	4405      	add	r5, r0
   224b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   224b4:	f8c8 5000 	str.w	r5, [r8]
   224b8:	6038      	str	r0, [r7, #0]
   224ba:	4648      	mov	r0, r9
   224bc:	b003      	add	sp, #12
   224be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   224c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   224c6:	f1c0 0220 	rsb	r2, r0, #32
   224ca:	fa03 f202 	lsl.w	r2, r3, r2
   224ce:	430a      	orrs	r2, r1
   224d0:	40c3      	lsrs	r3, r0
   224d2:	9301      	str	r3, [sp, #4]
   224d4:	f8c9 2014 	str.w	r2, [r9, #20]
   224d8:	e7c2      	b.n	22460 <__d2b+0x40>
   224da:	bf00      	nop

000224dc <__sread>:
   224dc:	b510      	push	{r4, lr}
   224de:	460c      	mov	r4, r1
   224e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   224e4:	f000 f9fe 	bl	228e4 <_read_r>
   224e8:	2800      	cmp	r0, #0
   224ea:	db03      	blt.n	224f4 <__sread+0x18>
   224ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   224ee:	4403      	add	r3, r0
   224f0:	6523      	str	r3, [r4, #80]	; 0x50
   224f2:	bd10      	pop	{r4, pc}
   224f4:	89a3      	ldrh	r3, [r4, #12]
   224f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   224fa:	81a3      	strh	r3, [r4, #12]
   224fc:	bd10      	pop	{r4, pc}
   224fe:	bf00      	nop

00022500 <__swrite>:
   22500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22504:	4616      	mov	r6, r2
   22506:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2250a:	461f      	mov	r7, r3
   2250c:	05d3      	lsls	r3, r2, #23
   2250e:	460c      	mov	r4, r1
   22510:	4605      	mov	r5, r0
   22512:	d507      	bpl.n	22524 <__swrite+0x24>
   22514:	2200      	movs	r2, #0
   22516:	2302      	movs	r3, #2
   22518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2251c:	f000 f9cc 	bl	228b8 <_lseek_r>
   22520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22528:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   2252c:	81a2      	strh	r2, [r4, #12]
   2252e:	463b      	mov	r3, r7
   22530:	4632      	mov	r2, r6
   22532:	4628      	mov	r0, r5
   22534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22538:	f7fe b95e 	b.w	207f8 <_write_r>

0002253c <__sseek>:
   2253c:	b510      	push	{r4, lr}
   2253e:	460c      	mov	r4, r1
   22540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22544:	f000 f9b8 	bl	228b8 <_lseek_r>
   22548:	89a3      	ldrh	r3, [r4, #12]
   2254a:	1c42      	adds	r2, r0, #1
   2254c:	bf0e      	itee	eq
   2254e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22556:	6520      	strne	r0, [r4, #80]	; 0x50
   22558:	81a3      	strh	r3, [r4, #12]
   2255a:	bd10      	pop	{r4, pc}

0002255c <__sclose>:
   2255c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22560:	f000 b910 	b.w	22784 <_close_r>

00022564 <__ssprint_r>:
   22564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22568:	6893      	ldr	r3, [r2, #8]
   2256a:	b083      	sub	sp, #12
   2256c:	4690      	mov	r8, r2
   2256e:	2b00      	cmp	r3, #0
   22570:	d070      	beq.n	22654 <__ssprint_r+0xf0>
   22572:	4682      	mov	sl, r0
   22574:	460c      	mov	r4, r1
   22576:	6817      	ldr	r7, [r2, #0]
   22578:	688d      	ldr	r5, [r1, #8]
   2257a:	6808      	ldr	r0, [r1, #0]
   2257c:	e042      	b.n	22604 <__ssprint_r+0xa0>
   2257e:	89a3      	ldrh	r3, [r4, #12]
   22580:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22584:	d02e      	beq.n	225e4 <__ssprint_r+0x80>
   22586:	6965      	ldr	r5, [r4, #20]
   22588:	6921      	ldr	r1, [r4, #16]
   2258a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2258e:	eba0 0b01 	sub.w	fp, r0, r1
   22592:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22596:	f10b 0001 	add.w	r0, fp, #1
   2259a:	106d      	asrs	r5, r5, #1
   2259c:	4430      	add	r0, r6
   2259e:	42a8      	cmp	r0, r5
   225a0:	462a      	mov	r2, r5
   225a2:	bf84      	itt	hi
   225a4:	4605      	movhi	r5, r0
   225a6:	462a      	movhi	r2, r5
   225a8:	055b      	lsls	r3, r3, #21
   225aa:	d538      	bpl.n	2261e <__ssprint_r+0xba>
   225ac:	4611      	mov	r1, r2
   225ae:	4650      	mov	r0, sl
   225b0:	f7fb fcce 	bl	1df50 <_malloc_r>
   225b4:	2800      	cmp	r0, #0
   225b6:	d03c      	beq.n	22632 <__ssprint_r+0xce>
   225b8:	465a      	mov	r2, fp
   225ba:	6921      	ldr	r1, [r4, #16]
   225bc:	9001      	str	r0, [sp, #4]
   225be:	f7fc f80f 	bl	1e5e0 <memcpy>
   225c2:	89a2      	ldrh	r2, [r4, #12]
   225c4:	9b01      	ldr	r3, [sp, #4]
   225c6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   225ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   225ce:	81a2      	strh	r2, [r4, #12]
   225d0:	eba5 020b 	sub.w	r2, r5, fp
   225d4:	eb03 000b 	add.w	r0, r3, fp
   225d8:	6165      	str	r5, [r4, #20]
   225da:	6123      	str	r3, [r4, #16]
   225dc:	6020      	str	r0, [r4, #0]
   225de:	60a2      	str	r2, [r4, #8]
   225e0:	4635      	mov	r5, r6
   225e2:	46b3      	mov	fp, r6
   225e4:	465a      	mov	r2, fp
   225e6:	4649      	mov	r1, r9
   225e8:	f7fc f894 	bl	1e714 <memmove>
   225ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   225f0:	68a2      	ldr	r2, [r4, #8]
   225f2:	6820      	ldr	r0, [r4, #0]
   225f4:	1b55      	subs	r5, r2, r5
   225f6:	4458      	add	r0, fp
   225f8:	1b9e      	subs	r6, r3, r6
   225fa:	60a5      	str	r5, [r4, #8]
   225fc:	6020      	str	r0, [r4, #0]
   225fe:	f8c8 6008 	str.w	r6, [r8, #8]
   22602:	b33e      	cbz	r6, 22654 <__ssprint_r+0xf0>
   22604:	687e      	ldr	r6, [r7, #4]
   22606:	463b      	mov	r3, r7
   22608:	3708      	adds	r7, #8
   2260a:	2e00      	cmp	r6, #0
   2260c:	d0fa      	beq.n	22604 <__ssprint_r+0xa0>
   2260e:	42ae      	cmp	r6, r5
   22610:	f8d3 9000 	ldr.w	r9, [r3]
   22614:	46ab      	mov	fp, r5
   22616:	d2b2      	bcs.n	2257e <__ssprint_r+0x1a>
   22618:	4635      	mov	r5, r6
   2261a:	46b3      	mov	fp, r6
   2261c:	e7e2      	b.n	225e4 <__ssprint_r+0x80>
   2261e:	4650      	mov	r0, sl
   22620:	f7fc f976 	bl	1e910 <_realloc_r>
   22624:	4603      	mov	r3, r0
   22626:	2800      	cmp	r0, #0
   22628:	d1d2      	bne.n	225d0 <__ssprint_r+0x6c>
   2262a:	6921      	ldr	r1, [r4, #16]
   2262c:	4650      	mov	r0, sl
   2262e:	f7ff fac3 	bl	21bb8 <_free_r>
   22632:	230c      	movs	r3, #12
   22634:	f8ca 3000 	str.w	r3, [sl]
   22638:	89a3      	ldrh	r3, [r4, #12]
   2263a:	2200      	movs	r2, #0
   2263c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22640:	f04f 30ff 	mov.w	r0, #4294967295
   22644:	81a3      	strh	r3, [r4, #12]
   22646:	f8c8 2008 	str.w	r2, [r8, #8]
   2264a:	f8c8 2004 	str.w	r2, [r8, #4]
   2264e:	b003      	add	sp, #12
   22650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22654:	2000      	movs	r0, #0
   22656:	f8c8 0004 	str.w	r0, [r8, #4]
   2265a:	b003      	add	sp, #12
   2265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022660 <__register_exitproc>:
   22660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22664:	4d2c      	ldr	r5, [pc, #176]	; (22718 <__register_exitproc+0xb8>)
   22666:	4606      	mov	r6, r0
   22668:	6828      	ldr	r0, [r5, #0]
   2266a:	4698      	mov	r8, r3
   2266c:	460f      	mov	r7, r1
   2266e:	4691      	mov	r9, r2
   22670:	f7fb fc5a 	bl	1df28 <__retarget_lock_acquire_recursive>
   22674:	4b29      	ldr	r3, [pc, #164]	; (2271c <__register_exitproc+0xbc>)
   22676:	681c      	ldr	r4, [r3, #0]
   22678:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2267c:	2b00      	cmp	r3, #0
   2267e:	d03e      	beq.n	226fe <__register_exitproc+0x9e>
   22680:	685a      	ldr	r2, [r3, #4]
   22682:	2a1f      	cmp	r2, #31
   22684:	dc1c      	bgt.n	226c0 <__register_exitproc+0x60>
   22686:	f102 0e01 	add.w	lr, r2, #1
   2268a:	b176      	cbz	r6, 226aa <__register_exitproc+0x4a>
   2268c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22690:	2401      	movs	r4, #1
   22692:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22696:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2269a:	4094      	lsls	r4, r2
   2269c:	4320      	orrs	r0, r4
   2269e:	2e02      	cmp	r6, #2
   226a0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   226a4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   226a8:	d023      	beq.n	226f2 <__register_exitproc+0x92>
   226aa:	3202      	adds	r2, #2
   226ac:	f8c3 e004 	str.w	lr, [r3, #4]
   226b0:	6828      	ldr	r0, [r5, #0]
   226b2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   226b6:	f7fb fc39 	bl	1df2c <__retarget_lock_release_recursive>
   226ba:	2000      	movs	r0, #0
   226bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   226c0:	4b17      	ldr	r3, [pc, #92]	; (22720 <__register_exitproc+0xc0>)
   226c2:	b30b      	cbz	r3, 22708 <__register_exitproc+0xa8>
   226c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   226c8:	f7fb fc32 	bl	1df30 <malloc>
   226cc:	4603      	mov	r3, r0
   226ce:	b1d8      	cbz	r0, 22708 <__register_exitproc+0xa8>
   226d0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   226d4:	6002      	str	r2, [r0, #0]
   226d6:	2100      	movs	r1, #0
   226d8:	6041      	str	r1, [r0, #4]
   226da:	460a      	mov	r2, r1
   226dc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   226e0:	f04f 0e01 	mov.w	lr, #1
   226e4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   226e8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   226ec:	2e00      	cmp	r6, #0
   226ee:	d0dc      	beq.n	226aa <__register_exitproc+0x4a>
   226f0:	e7cc      	b.n	2268c <__register_exitproc+0x2c>
   226f2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   226f6:	430c      	orrs	r4, r1
   226f8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   226fc:	e7d5      	b.n	226aa <__register_exitproc+0x4a>
   226fe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22702:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22706:	e7bb      	b.n	22680 <__register_exitproc+0x20>
   22708:	6828      	ldr	r0, [r5, #0]
   2270a:	f7fb fc0f 	bl	1df2c <__retarget_lock_release_recursive>
   2270e:	f04f 30ff 	mov.w	r0, #4294967295
   22712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22716:	bf00      	nop
   22718:	20000aac 	.word	0x20000aac
   2271c:	00024de0 	.word	0x00024de0
   22720:	0001df31 	.word	0x0001df31

00022724 <_calloc_r>:
   22724:	b510      	push	{r4, lr}
   22726:	fb02 f101 	mul.w	r1, r2, r1
   2272a:	f7fb fc11 	bl	1df50 <_malloc_r>
   2272e:	4604      	mov	r4, r0
   22730:	b1d8      	cbz	r0, 2276a <_calloc_r+0x46>
   22732:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22736:	f022 0203 	bic.w	r2, r2, #3
   2273a:	3a04      	subs	r2, #4
   2273c:	2a24      	cmp	r2, #36	; 0x24
   2273e:	d818      	bhi.n	22772 <_calloc_r+0x4e>
   22740:	2a13      	cmp	r2, #19
   22742:	d914      	bls.n	2276e <_calloc_r+0x4a>
   22744:	2300      	movs	r3, #0
   22746:	2a1b      	cmp	r2, #27
   22748:	6003      	str	r3, [r0, #0]
   2274a:	6043      	str	r3, [r0, #4]
   2274c:	d916      	bls.n	2277c <_calloc_r+0x58>
   2274e:	2a24      	cmp	r2, #36	; 0x24
   22750:	6083      	str	r3, [r0, #8]
   22752:	60c3      	str	r3, [r0, #12]
   22754:	bf11      	iteee	ne
   22756:	f100 0210 	addne.w	r2, r0, #16
   2275a:	6103      	streq	r3, [r0, #16]
   2275c:	6143      	streq	r3, [r0, #20]
   2275e:	f100 0218 	addeq.w	r2, r0, #24
   22762:	2300      	movs	r3, #0
   22764:	6013      	str	r3, [r2, #0]
   22766:	6053      	str	r3, [r2, #4]
   22768:	6093      	str	r3, [r2, #8]
   2276a:	4620      	mov	r0, r4
   2276c:	bd10      	pop	{r4, pc}
   2276e:	4602      	mov	r2, r0
   22770:	e7f7      	b.n	22762 <_calloc_r+0x3e>
   22772:	2100      	movs	r1, #0
   22774:	f7fc f832 	bl	1e7dc <memset>
   22778:	4620      	mov	r0, r4
   2277a:	bd10      	pop	{r4, pc}
   2277c:	f100 0208 	add.w	r2, r0, #8
   22780:	e7ef      	b.n	22762 <_calloc_r+0x3e>
   22782:	bf00      	nop

00022784 <_close_r>:
   22784:	b538      	push	{r3, r4, r5, lr}
   22786:	4c07      	ldr	r4, [pc, #28]	; (227a4 <_close_r+0x20>)
   22788:	2300      	movs	r3, #0
   2278a:	4605      	mov	r5, r0
   2278c:	4608      	mov	r0, r1
   2278e:	6023      	str	r3, [r4, #0]
   22790:	f000 f9ac 	bl	22aec <_close>
   22794:	1c43      	adds	r3, r0, #1
   22796:	d000      	beq.n	2279a <_close_r+0x16>
   22798:	bd38      	pop	{r3, r4, r5, pc}
   2279a:	6823      	ldr	r3, [r4, #0]
   2279c:	2b00      	cmp	r3, #0
   2279e:	d0fb      	beq.n	22798 <_close_r+0x14>
   227a0:	602b      	str	r3, [r5, #0]
   227a2:	bd38      	pop	{r3, r4, r5, pc}
   227a4:	200023ac 	.word	0x200023ac

000227a8 <_fclose_r>:
   227a8:	b570      	push	{r4, r5, r6, lr}
   227aa:	b159      	cbz	r1, 227c4 <_fclose_r+0x1c>
   227ac:	4605      	mov	r5, r0
   227ae:	460c      	mov	r4, r1
   227b0:	b110      	cbz	r0, 227b8 <_fclose_r+0x10>
   227b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   227b4:	2b00      	cmp	r3, #0
   227b6:	d03c      	beq.n	22832 <_fclose_r+0x8a>
   227b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   227ba:	07d8      	lsls	r0, r3, #31
   227bc:	d505      	bpl.n	227ca <_fclose_r+0x22>
   227be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   227c2:	b92b      	cbnz	r3, 227d0 <_fclose_r+0x28>
   227c4:	2600      	movs	r6, #0
   227c6:	4630      	mov	r0, r6
   227c8:	bd70      	pop	{r4, r5, r6, pc}
   227ca:	89a3      	ldrh	r3, [r4, #12]
   227cc:	0599      	lsls	r1, r3, #22
   227ce:	d53c      	bpl.n	2284a <_fclose_r+0xa2>
   227d0:	4621      	mov	r1, r4
   227d2:	4628      	mov	r0, r5
   227d4:	f7ff f856 	bl	21884 <__sflush_r>
   227d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   227da:	4606      	mov	r6, r0
   227dc:	b133      	cbz	r3, 227ec <_fclose_r+0x44>
   227de:	69e1      	ldr	r1, [r4, #28]
   227e0:	4628      	mov	r0, r5
   227e2:	4798      	blx	r3
   227e4:	2800      	cmp	r0, #0
   227e6:	bfb8      	it	lt
   227e8:	f04f 36ff 	movlt.w	r6, #4294967295
   227ec:	89a3      	ldrh	r3, [r4, #12]
   227ee:	061a      	lsls	r2, r3, #24
   227f0:	d422      	bmi.n	22838 <_fclose_r+0x90>
   227f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   227f4:	b141      	cbz	r1, 22808 <_fclose_r+0x60>
   227f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   227fa:	4299      	cmp	r1, r3
   227fc:	d002      	beq.n	22804 <_fclose_r+0x5c>
   227fe:	4628      	mov	r0, r5
   22800:	f7ff f9da 	bl	21bb8 <_free_r>
   22804:	2300      	movs	r3, #0
   22806:	6323      	str	r3, [r4, #48]	; 0x30
   22808:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2280a:	b121      	cbz	r1, 22816 <_fclose_r+0x6e>
   2280c:	4628      	mov	r0, r5
   2280e:	f7ff f9d3 	bl	21bb8 <_free_r>
   22812:	2300      	movs	r3, #0
   22814:	6463      	str	r3, [r4, #68]	; 0x44
   22816:	f7ff f959 	bl	21acc <__sfp_lock_acquire>
   2281a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2281c:	2200      	movs	r2, #0
   2281e:	07db      	lsls	r3, r3, #31
   22820:	81a2      	strh	r2, [r4, #12]
   22822:	d50e      	bpl.n	22842 <_fclose_r+0x9a>
   22824:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22826:	f7fb fb7d 	bl	1df24 <__retarget_lock_close_recursive>
   2282a:	f7ff f955 	bl	21ad8 <__sfp_lock_release>
   2282e:	4630      	mov	r0, r6
   22830:	bd70      	pop	{r4, r5, r6, pc}
   22832:	f7ff f91f 	bl	21a74 <__sinit>
   22836:	e7bf      	b.n	227b8 <_fclose_r+0x10>
   22838:	6921      	ldr	r1, [r4, #16]
   2283a:	4628      	mov	r0, r5
   2283c:	f7ff f9bc 	bl	21bb8 <_free_r>
   22840:	e7d7      	b.n	227f2 <_fclose_r+0x4a>
   22842:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22844:	f7fb fb72 	bl	1df2c <__retarget_lock_release_recursive>
   22848:	e7ec      	b.n	22824 <_fclose_r+0x7c>
   2284a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2284c:	f7fb fb6c 	bl	1df28 <__retarget_lock_acquire_recursive>
   22850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22854:	2b00      	cmp	r3, #0
   22856:	d1bb      	bne.n	227d0 <_fclose_r+0x28>
   22858:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2285a:	f016 0601 	ands.w	r6, r6, #1
   2285e:	d1b1      	bne.n	227c4 <_fclose_r+0x1c>
   22860:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22862:	f7fb fb63 	bl	1df2c <__retarget_lock_release_recursive>
   22866:	4630      	mov	r0, r6
   22868:	bd70      	pop	{r4, r5, r6, pc}
   2286a:	bf00      	nop

0002286c <_fstat_r>:
   2286c:	b538      	push	{r3, r4, r5, lr}
   2286e:	460b      	mov	r3, r1
   22870:	4c07      	ldr	r4, [pc, #28]	; (22890 <_fstat_r+0x24>)
   22872:	4605      	mov	r5, r0
   22874:	4611      	mov	r1, r2
   22876:	4618      	mov	r0, r3
   22878:	2300      	movs	r3, #0
   2287a:	6023      	str	r3, [r4, #0]
   2287c:	f000 f9b4 	bl	22be8 <_fstat>
   22880:	1c43      	adds	r3, r0, #1
   22882:	d000      	beq.n	22886 <_fstat_r+0x1a>
   22884:	bd38      	pop	{r3, r4, r5, pc}
   22886:	6823      	ldr	r3, [r4, #0]
   22888:	2b00      	cmp	r3, #0
   2288a:	d0fb      	beq.n	22884 <_fstat_r+0x18>
   2288c:	602b      	str	r3, [r5, #0]
   2288e:	bd38      	pop	{r3, r4, r5, pc}
   22890:	200023ac 	.word	0x200023ac

00022894 <_isatty_r>:
   22894:	b538      	push	{r3, r4, r5, lr}
   22896:	4c07      	ldr	r4, [pc, #28]	; (228b4 <_isatty_r+0x20>)
   22898:	2300      	movs	r3, #0
   2289a:	4605      	mov	r5, r0
   2289c:	4608      	mov	r0, r1
   2289e:	6023      	str	r3, [r4, #0]
   228a0:	f000 f9b0 	bl	22c04 <_isatty>
   228a4:	1c43      	adds	r3, r0, #1
   228a6:	d000      	beq.n	228aa <_isatty_r+0x16>
   228a8:	bd38      	pop	{r3, r4, r5, pc}
   228aa:	6823      	ldr	r3, [r4, #0]
   228ac:	2b00      	cmp	r3, #0
   228ae:	d0fb      	beq.n	228a8 <_isatty_r+0x14>
   228b0:	602b      	str	r3, [r5, #0]
   228b2:	bd38      	pop	{r3, r4, r5, pc}
   228b4:	200023ac 	.word	0x200023ac

000228b8 <_lseek_r>:
   228b8:	b570      	push	{r4, r5, r6, lr}
   228ba:	460d      	mov	r5, r1
   228bc:	4c08      	ldr	r4, [pc, #32]	; (228e0 <_lseek_r+0x28>)
   228be:	4611      	mov	r1, r2
   228c0:	4606      	mov	r6, r0
   228c2:	461a      	mov	r2, r3
   228c4:	4628      	mov	r0, r5
   228c6:	2300      	movs	r3, #0
   228c8:	6023      	str	r3, [r4, #0]
   228ca:	f000 f8d3 	bl	22a74 <_lseek>
   228ce:	1c43      	adds	r3, r0, #1
   228d0:	d000      	beq.n	228d4 <_lseek_r+0x1c>
   228d2:	bd70      	pop	{r4, r5, r6, pc}
   228d4:	6823      	ldr	r3, [r4, #0]
   228d6:	2b00      	cmp	r3, #0
   228d8:	d0fb      	beq.n	228d2 <_lseek_r+0x1a>
   228da:	6033      	str	r3, [r6, #0]
   228dc:	bd70      	pop	{r4, r5, r6, pc}
   228de:	bf00      	nop
   228e0:	200023ac 	.word	0x200023ac

000228e4 <_read_r>:
   228e4:	b570      	push	{r4, r5, r6, lr}
   228e6:	460d      	mov	r5, r1
   228e8:	4c08      	ldr	r4, [pc, #32]	; (2290c <_read_r+0x28>)
   228ea:	4611      	mov	r1, r2
   228ec:	4606      	mov	r6, r0
   228ee:	461a      	mov	r2, r3
   228f0:	4628      	mov	r0, r5
   228f2:	2300      	movs	r3, #0
   228f4:	6023      	str	r3, [r4, #0]
   228f6:	f000 f84b 	bl	22990 <_read>
   228fa:	1c43      	adds	r3, r0, #1
   228fc:	d000      	beq.n	22900 <_read_r+0x1c>
   228fe:	bd70      	pop	{r4, r5, r6, pc}
   22900:	6823      	ldr	r3, [r4, #0]
   22902:	2b00      	cmp	r3, #0
   22904:	d0fb      	beq.n	228fe <_read_r+0x1a>
   22906:	6033      	str	r3, [r6, #0]
   22908:	bd70      	pop	{r4, r5, r6, pc}
   2290a:	bf00      	nop
   2290c:	200023ac 	.word	0x200023ac

00022910 <__aeabi_dcmpun>:
   22910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   22914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22918:	d102      	bne.n	22920 <__aeabi_dcmpun+0x10>
   2291a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2291e:	d10a      	bne.n	22936 <__aeabi_dcmpun+0x26>
   22920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   22924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22928:	d102      	bne.n	22930 <__aeabi_dcmpun+0x20>
   2292a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2292e:	d102      	bne.n	22936 <__aeabi_dcmpun+0x26>
   22930:	f04f 0000 	mov.w	r0, #0
   22934:	4770      	bx	lr
   22936:	f04f 0001 	mov.w	r0, #1
   2293a:	4770      	bx	lr

0002293c <findslot>:
   2293c:	4b0b      	ldr	r3, [pc, #44]	; (2296c <findslot+0x30>)
   2293e:	681b      	ldr	r3, [r3, #0]
   22940:	b510      	push	{r4, lr}
   22942:	4604      	mov	r4, r0
   22944:	b10b      	cbz	r3, 2294a <findslot+0xe>
   22946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22948:	b14a      	cbz	r2, 2295e <findslot+0x22>
   2294a:	2c13      	cmp	r4, #19
   2294c:	d80c      	bhi.n	22968 <findslot+0x2c>
   2294e:	4808      	ldr	r0, [pc, #32]	; (22970 <findslot+0x34>)
   22950:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   22954:	3301      	adds	r3, #1
   22956:	d007      	beq.n	22968 <findslot+0x2c>
   22958:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2295c:	bd10      	pop	{r4, pc}
   2295e:	4618      	mov	r0, r3
   22960:	f7ff f888 	bl	21a74 <__sinit>
   22964:	2c13      	cmp	r4, #19
   22966:	d9f2      	bls.n	2294e <findslot+0x12>
   22968:	2000      	movs	r0, #0
   2296a:	bd10      	pop	{r4, pc}
   2296c:	20000100 	.word	0x20000100
   22970:	200022e8 	.word	0x200022e8

00022974 <checkerror.part.0>:
   22974:	b570      	push	{r4, r5, r6, lr}
   22976:	f7fb f835 	bl	1d9e4 <__errno>
   2297a:	2413      	movs	r4, #19
   2297c:	4605      	mov	r5, r0
   2297e:	2600      	movs	r6, #0
   22980:	4620      	mov	r0, r4
   22982:	4631      	mov	r1, r6
   22984:	beab      	bkpt	0x00ab
   22986:	4604      	mov	r4, r0
   22988:	f04f 30ff 	mov.w	r0, #4294967295
   2298c:	602c      	str	r4, [r5, #0]
   2298e:	bd70      	pop	{r4, r5, r6, pc}

00022990 <_read>:
   22990:	b5f0      	push	{r4, r5, r6, r7, lr}
   22992:	b085      	sub	sp, #20
   22994:	460c      	mov	r4, r1
   22996:	4616      	mov	r6, r2
   22998:	f7ff ffd0 	bl	2293c <findslot>
   2299c:	b1c8      	cbz	r0, 229d2 <_read+0x42>
   2299e:	6803      	ldr	r3, [r0, #0]
   229a0:	9301      	str	r3, [sp, #4]
   229a2:	9402      	str	r4, [sp, #8]
   229a4:	4605      	mov	r5, r0
   229a6:	9603      	str	r6, [sp, #12]
   229a8:	2406      	movs	r4, #6
   229aa:	af01      	add	r7, sp, #4
   229ac:	4620      	mov	r0, r4
   229ae:	4639      	mov	r1, r7
   229b0:	beab      	bkpt	0x00ab
   229b2:	4604      	mov	r4, r0
   229b4:	1c62      	adds	r2, r4, #1
   229b6:	4620      	mov	r0, r4
   229b8:	d005      	beq.n	229c6 <_read+0x36>
   229ba:	686b      	ldr	r3, [r5, #4]
   229bc:	1a30      	subs	r0, r6, r0
   229be:	4403      	add	r3, r0
   229c0:	606b      	str	r3, [r5, #4]
   229c2:	b005      	add	sp, #20
   229c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   229c6:	f7ff ffd5 	bl	22974 <checkerror.part.0>
   229ca:	1c43      	adds	r3, r0, #1
   229cc:	d1f5      	bne.n	229ba <_read+0x2a>
   229ce:	b005      	add	sp, #20
   229d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   229d2:	f7fb f807 	bl	1d9e4 <__errno>
   229d6:	2309      	movs	r3, #9
   229d8:	6003      	str	r3, [r0, #0]
   229da:	f04f 30ff 	mov.w	r0, #4294967295
   229de:	e7f0      	b.n	229c2 <_read+0x32>

000229e0 <_swilseek>:
   229e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   229e2:	b083      	sub	sp, #12
   229e4:	460d      	mov	r5, r1
   229e6:	4614      	mov	r4, r2
   229e8:	f7ff ffa8 	bl	2293c <findslot>
   229ec:	2800      	cmp	r0, #0
   229ee:	d03a      	beq.n	22a66 <_swilseek+0x86>
   229f0:	2c02      	cmp	r4, #2
   229f2:	d825      	bhi.n	22a40 <_swilseek+0x60>
   229f4:	2c01      	cmp	r4, #1
   229f6:	4606      	mov	r6, r0
   229f8:	d01f      	beq.n	22a3a <_swilseek+0x5a>
   229fa:	2c02      	cmp	r4, #2
   229fc:	d010      	beq.n	22a20 <_swilseek+0x40>
   229fe:	466f      	mov	r7, sp
   22a00:	6833      	ldr	r3, [r6, #0]
   22a02:	240a      	movs	r4, #10
   22a04:	e88d 0028 	stmia.w	sp, {r3, r5}
   22a08:	4620      	mov	r0, r4
   22a0a:	4639      	mov	r1, r7
   22a0c:	beab      	bkpt	0x00ab
   22a0e:	4604      	mov	r4, r0
   22a10:	1c63      	adds	r3, r4, #1
   22a12:	d01c      	beq.n	22a4e <_swilseek+0x6e>
   22a14:	2c00      	cmp	r4, #0
   22a16:	db23      	blt.n	22a60 <_swilseek+0x80>
   22a18:	6075      	str	r5, [r6, #4]
   22a1a:	4628      	mov	r0, r5
   22a1c:	b003      	add	sp, #12
   22a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22a20:	af02      	add	r7, sp, #8
   22a22:	6803      	ldr	r3, [r0, #0]
   22a24:	f847 3d08 	str.w	r3, [r7, #-8]!
   22a28:	240c      	movs	r4, #12
   22a2a:	4620      	mov	r0, r4
   22a2c:	4639      	mov	r1, r7
   22a2e:	beab      	bkpt	0x00ab
   22a30:	4604      	mov	r4, r0
   22a32:	1c61      	adds	r1, r4, #1
   22a34:	d00f      	beq.n	22a56 <_swilseek+0x76>
   22a36:	4425      	add	r5, r4
   22a38:	e7e2      	b.n	22a00 <_swilseek+0x20>
   22a3a:	6840      	ldr	r0, [r0, #4]
   22a3c:	182d      	adds	r5, r5, r0
   22a3e:	d5de      	bpl.n	229fe <_swilseek+0x1e>
   22a40:	f7fa ffd0 	bl	1d9e4 <__errno>
   22a44:	2316      	movs	r3, #22
   22a46:	6003      	str	r3, [r0, #0]
   22a48:	f04f 35ff 	mov.w	r5, #4294967295
   22a4c:	e7e5      	b.n	22a1a <_swilseek+0x3a>
   22a4e:	f7ff ff91 	bl	22974 <checkerror.part.0>
   22a52:	4604      	mov	r4, r0
   22a54:	e7de      	b.n	22a14 <_swilseek+0x34>
   22a56:	f7ff ff8d 	bl	22974 <checkerror.part.0>
   22a5a:	1c42      	adds	r2, r0, #1
   22a5c:	4604      	mov	r4, r0
   22a5e:	d1ea      	bne.n	22a36 <_swilseek+0x56>
   22a60:	f04f 35ff 	mov.w	r5, #4294967295
   22a64:	e7d9      	b.n	22a1a <_swilseek+0x3a>
   22a66:	f7fa ffbd 	bl	1d9e4 <__errno>
   22a6a:	2309      	movs	r3, #9
   22a6c:	6003      	str	r3, [r0, #0]
   22a6e:	f04f 35ff 	mov.w	r5, #4294967295
   22a72:	e7d2      	b.n	22a1a <_swilseek+0x3a>

00022a74 <_lseek>:
   22a74:	f7ff bfb4 	b.w	229e0 <_swilseek>

00022a78 <_write>:
   22a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a7a:	b085      	sub	sp, #20
   22a7c:	460c      	mov	r4, r1
   22a7e:	4616      	mov	r6, r2
   22a80:	f7ff ff5c 	bl	2293c <findslot>
   22a84:	b350      	cbz	r0, 22adc <_write+0x64>
   22a86:	6803      	ldr	r3, [r0, #0]
   22a88:	9301      	str	r3, [sp, #4]
   22a8a:	9402      	str	r4, [sp, #8]
   22a8c:	4605      	mov	r5, r0
   22a8e:	9603      	str	r6, [sp, #12]
   22a90:	2405      	movs	r4, #5
   22a92:	af01      	add	r7, sp, #4
   22a94:	4620      	mov	r0, r4
   22a96:	4639      	mov	r1, r7
   22a98:	beab      	bkpt	0x00ab
   22a9a:	4604      	mov	r4, r0
   22a9c:	1c63      	adds	r3, r4, #1
   22a9e:	d016      	beq.n	22ace <_write+0x56>
   22aa0:	2c00      	cmp	r4, #0
   22aa2:	db18      	blt.n	22ad6 <_write+0x5e>
   22aa4:	686a      	ldr	r2, [r5, #4]
   22aa6:	1b30      	subs	r0, r6, r4
   22aa8:	4402      	add	r2, r0
   22aaa:	42a6      	cmp	r6, r4
   22aac:	606a      	str	r2, [r5, #4]
   22aae:	d001      	beq.n	22ab4 <_write+0x3c>
   22ab0:	b005      	add	sp, #20
   22ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22ab4:	f7fa ff96 	bl	1d9e4 <__errno>
   22ab8:	2513      	movs	r5, #19
   22aba:	4606      	mov	r6, r0
   22abc:	2400      	movs	r4, #0
   22abe:	4628      	mov	r0, r5
   22ac0:	4621      	mov	r1, r4
   22ac2:	beab      	bkpt	0x00ab
   22ac4:	4605      	mov	r5, r0
   22ac6:	4620      	mov	r0, r4
   22ac8:	6035      	str	r5, [r6, #0]
   22aca:	b005      	add	sp, #20
   22acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22ace:	f7ff ff51 	bl	22974 <checkerror.part.0>
   22ad2:	4604      	mov	r4, r0
   22ad4:	e7e4      	b.n	22aa0 <_write+0x28>
   22ad6:	f04f 30ff 	mov.w	r0, #4294967295
   22ada:	e7e9      	b.n	22ab0 <_write+0x38>
   22adc:	f7fa ff82 	bl	1d9e4 <__errno>
   22ae0:	2309      	movs	r3, #9
   22ae2:	6003      	str	r3, [r0, #0]
   22ae4:	f04f 30ff 	mov.w	r0, #4294967295
   22ae8:	e7e2      	b.n	22ab0 <_write+0x38>
   22aea:	bf00      	nop

00022aec <_close>:
   22aec:	b570      	push	{r4, r5, r6, lr}
   22aee:	b082      	sub	sp, #8
   22af0:	4604      	mov	r4, r0
   22af2:	f7ff ff23 	bl	2293c <findslot>
   22af6:	b310      	cbz	r0, 22b3e <_close+0x52>
   22af8:	3c01      	subs	r4, #1
   22afa:	2c01      	cmp	r4, #1
   22afc:	4606      	mov	r6, r0
   22afe:	d911      	bls.n	22b24 <_close+0x38>
   22b00:	ad02      	add	r5, sp, #8
   22b02:	6833      	ldr	r3, [r6, #0]
   22b04:	f845 3d04 	str.w	r3, [r5, #-4]!
   22b08:	2402      	movs	r4, #2
   22b0a:	4620      	mov	r0, r4
   22b0c:	4629      	mov	r1, r5
   22b0e:	beab      	bkpt	0x00ab
   22b10:	4604      	mov	r4, r0
   22b12:	1c63      	adds	r3, r4, #1
   22b14:	4620      	mov	r0, r4
   22b16:	d00f      	beq.n	22b38 <_close+0x4c>
   22b18:	b910      	cbnz	r0, 22b20 <_close+0x34>
   22b1a:	f04f 33ff 	mov.w	r3, #4294967295
   22b1e:	6033      	str	r3, [r6, #0]
   22b20:	b002      	add	sp, #8
   22b22:	bd70      	pop	{r4, r5, r6, pc}
   22b24:	4b09      	ldr	r3, [pc, #36]	; (22b4c <_close+0x60>)
   22b26:	689a      	ldr	r2, [r3, #8]
   22b28:	691b      	ldr	r3, [r3, #16]
   22b2a:	429a      	cmp	r2, r3
   22b2c:	d1e8      	bne.n	22b00 <_close+0x14>
   22b2e:	f04f 33ff 	mov.w	r3, #4294967295
   22b32:	6003      	str	r3, [r0, #0]
   22b34:	2000      	movs	r0, #0
   22b36:	e7f3      	b.n	22b20 <_close+0x34>
   22b38:	f7ff ff1c 	bl	22974 <checkerror.part.0>
   22b3c:	e7ec      	b.n	22b18 <_close+0x2c>
   22b3e:	f7fa ff51 	bl	1d9e4 <__errno>
   22b42:	2309      	movs	r3, #9
   22b44:	6003      	str	r3, [r0, #0]
   22b46:	f04f 30ff 	mov.w	r0, #4294967295
   22b4a:	e7e9      	b.n	22b20 <_close+0x34>
   22b4c:	200022e8 	.word	0x200022e8

00022b50 <_getpid>:
   22b50:	2001      	movs	r0, #1
   22b52:	4770      	bx	lr

00022b54 <_sbrk>:
   22b54:	4a0e      	ldr	r2, [pc, #56]	; (22b90 <_sbrk+0x3c>)
   22b56:	6813      	ldr	r3, [r2, #0]
   22b58:	b510      	push	{r4, lr}
   22b5a:	b1ab      	cbz	r3, 22b88 <_sbrk+0x34>
   22b5c:	4418      	add	r0, r3
   22b5e:	4669      	mov	r1, sp
   22b60:	4288      	cmp	r0, r1
   22b62:	d809      	bhi.n	22b78 <_sbrk+0x24>
   22b64:	490b      	ldr	r1, [pc, #44]	; (22b94 <_sbrk+0x40>)
   22b66:	4c0c      	ldr	r4, [pc, #48]	; (22b98 <_sbrk+0x44>)
   22b68:	6809      	ldr	r1, [r1, #0]
   22b6a:	42a1      	cmp	r1, r4
   22b6c:	d001      	beq.n	22b72 <_sbrk+0x1e>
   22b6e:	4288      	cmp	r0, r1
   22b70:	d802      	bhi.n	22b78 <_sbrk+0x24>
   22b72:	6010      	str	r0, [r2, #0]
   22b74:	4618      	mov	r0, r3
   22b76:	bd10      	pop	{r4, pc}
   22b78:	f7fa ff34 	bl	1d9e4 <__errno>
   22b7c:	230c      	movs	r3, #12
   22b7e:	6003      	str	r3, [r0, #0]
   22b80:	f04f 33ff 	mov.w	r3, #4294967295
   22b84:	4618      	mov	r0, r3
   22b86:	bd10      	pop	{r4, pc}
   22b88:	4b04      	ldr	r3, [pc, #16]	; (22b9c <_sbrk+0x48>)
   22b8a:	6013      	str	r3, [r2, #0]
   22b8c:	e7e6      	b.n	22b5c <_sbrk+0x8>
   22b8e:	bf00      	nop
   22b90:	200022e4 	.word	0x200022e4
   22b94:	20000ab0 	.word	0x20000ab0
   22b98:	cafedead 	.word	0xcafedead
   22b9c:	200023b0 	.word	0x200023b0

00022ba0 <_swistat>:
   22ba0:	b570      	push	{r4, r5, r6, lr}
   22ba2:	460d      	mov	r5, r1
   22ba4:	f7ff feca 	bl	2293c <findslot>
   22ba8:	b1b8      	cbz	r0, 22bda <_swistat+0x3a>
   22baa:	686b      	ldr	r3, [r5, #4]
   22bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22bb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22bb4:	4606      	mov	r6, r0
   22bb6:	606b      	str	r3, [r5, #4]
   22bb8:	62ea      	str	r2, [r5, #44]	; 0x2c
   22bba:	240c      	movs	r4, #12
   22bbc:	4620      	mov	r0, r4
   22bbe:	4631      	mov	r1, r6
   22bc0:	beab      	bkpt	0x00ab
   22bc2:	4604      	mov	r4, r0
   22bc4:	1c62      	adds	r2, r4, #1
   22bc6:	4620      	mov	r0, r4
   22bc8:	d002      	beq.n	22bd0 <_swistat+0x30>
   22bca:	6128      	str	r0, [r5, #16]
   22bcc:	2000      	movs	r0, #0
   22bce:	bd70      	pop	{r4, r5, r6, pc}
   22bd0:	f7ff fed0 	bl	22974 <checkerror.part.0>
   22bd4:	1c43      	adds	r3, r0, #1
   22bd6:	d1f8      	bne.n	22bca <_swistat+0x2a>
   22bd8:	e7f9      	b.n	22bce <_swistat+0x2e>
   22bda:	f7fa ff03 	bl	1d9e4 <__errno>
   22bde:	2309      	movs	r3, #9
   22be0:	6003      	str	r3, [r0, #0]
   22be2:	f04f 30ff 	mov.w	r0, #4294967295
   22be6:	bd70      	pop	{r4, r5, r6, pc}

00022be8 <_fstat>:
   22be8:	b538      	push	{r3, r4, r5, lr}
   22bea:	223c      	movs	r2, #60	; 0x3c
   22bec:	460c      	mov	r4, r1
   22bee:	4605      	mov	r5, r0
   22bf0:	4608      	mov	r0, r1
   22bf2:	2100      	movs	r1, #0
   22bf4:	f7fb fdf2 	bl	1e7dc <memset>
   22bf8:	4621      	mov	r1, r4
   22bfa:	4628      	mov	r0, r5
   22bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22c00:	f7ff bfce 	b.w	22ba0 <_swistat>

00022c04 <_isatty>:
   22c04:	b570      	push	{r4, r5, r6, lr}
   22c06:	f7ff fe99 	bl	2293c <findslot>
   22c0a:	4605      	mov	r5, r0
   22c0c:	b190      	cbz	r0, 22c34 <_isatty+0x30>
   22c0e:	2409      	movs	r4, #9
   22c10:	4620      	mov	r0, r4
   22c12:	4629      	mov	r1, r5
   22c14:	beab      	bkpt	0x00ab
   22c16:	4604      	mov	r4, r0
   22c18:	2c01      	cmp	r4, #1
   22c1a:	d009      	beq.n	22c30 <_isatty+0x2c>
   22c1c:	f7fa fee2 	bl	1d9e4 <__errno>
   22c20:	2513      	movs	r5, #19
   22c22:	4606      	mov	r6, r0
   22c24:	2400      	movs	r4, #0
   22c26:	4628      	mov	r0, r5
   22c28:	4621      	mov	r1, r4
   22c2a:	beab      	bkpt	0x00ab
   22c2c:	4605      	mov	r5, r0
   22c2e:	6035      	str	r5, [r6, #0]
   22c30:	4620      	mov	r0, r4
   22c32:	bd70      	pop	{r4, r5, r6, pc}
   22c34:	f7fa fed6 	bl	1d9e4 <__errno>
   22c38:	2209      	movs	r2, #9
   22c3a:	462c      	mov	r4, r5
   22c3c:	6002      	str	r2, [r0, #0]
   22c3e:	e7f7      	b.n	22c30 <_isatty+0x2c>

00022c40 <_exit>:
   22c40:	f04f 31ff 	mov.w	r1, #4294967295
   22c44:	f000 b800 	b.w	22c48 <_kill>

00022c48 <_kill>:
   22c48:	2906      	cmp	r1, #6
   22c4a:	b530      	push	{r4, r5, lr}
   22c4c:	bf0c      	ite	eq
   22c4e:	4d04      	ldreq	r5, [pc, #16]	; (22c60 <_kill+0x18>)
   22c50:	4d04      	ldrne	r5, [pc, #16]	; (22c64 <_kill+0x1c>)
   22c52:	2418      	movs	r4, #24
   22c54:	4620      	mov	r0, r4
   22c56:	4629      	mov	r1, r5
   22c58:	beab      	bkpt	0x00ab
   22c5a:	4604      	mov	r4, r0
   22c5c:	4620      	mov	r0, r4
   22c5e:	bd30      	pop	{r4, r5, pc}
   22c60:	00020023 	.word	0x00020023
   22c64:	00020026 	.word	0x00020026

00022c68 <_init>:
   22c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c6a:	bf00      	nop
   22c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   22c6e:	bc08      	pop	{r3}
   22c70:	469e      	mov	lr, r3
   22c72:	4770      	bx	lr

00022c74 <_fini>:
   22c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c76:	bf00      	nop
   22c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   22c7a:	bc08      	pop	{r3}
   22c7c:	469e      	mov	lr, r3
   22c7e:	4770      	bx	lr

00022c80 <__init_array_start>:
   22c80:	000208ed 	.word	0x000208ed

00022c84 <__frame_dummy_init_array_entry>:
   22c84:	00004289 000077b1 000098b5 00009c65     .B...w......e...
   22c94:	0000a791 0000b321 0000d7d1 0000efd9     ....!...........
   22ca4:	0000fd01 00010079 00011e49 00011f2d     ....y...I...-...
   22cb4:	00013859                                Y8..

00022cb8 <__do_global_dtors_aux_fini_array_entry>:
   22cb8:	00004265                                eB..

00022cbc <__fini_array_end>:
   22cbc:	6f746f4d 	.word	0x6f746f4d
   22cc0:	6e452072 	.word	0x6e452072
   22cc4:	656c6261 	.word	0x656c6261
   22cc8:	00000064 	.word	0x00000064
   22ccc:	74696157 	.word	0x74696157
   22cd0:	20676e69 	.word	0x20676e69
   22cd4:	20726f66 	.word	0x20726f66
   22cd8:	42464c48 	.word	0x42464c48
   22cdc:	002e2e2e 	.word	0x002e2e2e
   22ce0:	6f746f4d 	.word	0x6f746f4d
   22ce4:	65522072 	.word	0x65522072
   22ce8:	00796461 	.word	0x00796461
   22cec:	65766f4d 	.word	0x65766f4d
   22cf0:	6a657220 	.word	0x6a657220
   22cf4:	65746365 	.word	0x65746365
   22cf8:	69202c64 	.word	0x69202c64
   22cfc:	6c61766e 	.word	0x6c61766e
   22d00:	74206469 	.word	0x74206469
   22d04:	7571726f 	.word	0x7571726f
   22d08:	65722065 	.word	0x65722065
   22d0c:	73657571 	.word	0x73657571
   22d10:	00646574 	.word	0x00646574
   22d14:	6f746f4d 	.word	0x6f746f4d
   22d18:	74732072 	.word	0x74732072
   22d1c:	73757461 	.word	0x73757461
   22d20:	4927203a 	.word	0x4927203a
   22d24:	6c41206e 	.word	0x6c41206e
   22d28:	27747265 	.word	0x27747265
   22d2c:	6f4d202e 	.word	0x6f4d202e
   22d30:	43206576 	.word	0x43206576
   22d34:	65636e61 	.word	0x65636e61
   22d38:	2e64656c 	.word	0x2e64656c
   22d3c:	00000000 	.word	0x00000000
   22d40:	6d6d6f43 	.word	0x6d6d6f43
   22d44:	69646e61 	.word	0x69646e61
   22d48:	7420676e 	.word	0x7420676e
   22d4c:	7571726f 	.word	0x7571726f
   22d50:	00203a65 	.word	0x00203a65
   22d54:	69766f4d 	.word	0x69766f4d
   22d58:	2e2e676e 	.word	0x2e2e676e
   22d5c:	6157202e 	.word	0x6157202e
   22d60:	6e697469 	.word	0x6e697469
   22d64:	6f662067 	.word	0x6f662067
   22d68:	4c482072 	.word	0x4c482072
   22d6c:	00004246 	.word	0x00004246
   22d70:	65766f4d 	.word	0x65766f4d
   22d74:	6e6f4420 	.word	0x6e6f4420
   22d78:	00000065 	.word	0x00000065

00022d7c <CSWTCH.95>:
   22d7c:	02030406 00000002                       ........

00022d84 <_ZN9ClearCoreL11tcc_modulesE>:
   22d84:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22d94:	43001000                                ...C

00022d98 <_ZTVN9ClearCore11MotorDriverE>:
	...
   22da0:	00004c51 00004c55 00004c41 00004c45     QL..UL..AL..EL..
   22db0:	0000e595 00004c35 00004c49 00004c39     ....5L..IL..9L..
   22dc0:	00005341 00005b75 0000599d 00005a95     AS..u[...Y...Z..
   22dd0:	00004db9 ffffffd0 00000000 00005a8d     .M...........Z..
   22de0:	00005b6d 00004e09                       m[...N..

00022de8 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22de8:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22df8:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022e08 <_ZTVN9ClearCore7ISerialE>:
	...
   22e10:	000136dd 000136dd 000136dd 000136dd     .6...6...6...6..
   22e20:	000136dd 000136dd 000136dd 000136dd     .6...6...6...6..
   22e30:	000136dd 000136dd 000136dd 000136dd     .6...6...6...6..
   22e40:	000136dd 000136dd 000136dd 000136dd     .6...6...6...6..
   22e50:	000136dd 000136dd                       .6...6..

00022e58 <_ZTVN9ClearCore9SerialUsbE>:
	...
   22e60:	00005f19 00005f0d 00005f31 00005f3d     ._..._..1_..=_..
   22e70:	00005f49 00005f55 00005f61 00005f6d     I_..U_..a_..m_..
   22e80:	00005f79 00005f85 00005f91 00005f19     y_..._..._..._..
   22e90:	00005f25 00005f25 00005e91 00005e9d     %_..%_...^...^..
   22ea0:	00005ea1 00005ead 00005eb9 00005ec5     .^...^...^...^..
   22eb0:	00005ed9 00005f9d 00005fc1 00005ff1     .^..._..._..._..
   22ec0:	00005ee5 00005ef1 00005f01 fffffffc     .^...^..._......
   22ed0:	00000000 00005ebd 00005ed1 00005edd     .....^...^...^..
   22ee0:	00005fb9 00005fe9 00006031 00005ee9     ._..._..1`...^..
   22ef0:	00005e89 00005f05 00005ef9 008061fc     .^..._...^...a..
   22f00:	00806010 00806014 00806018              .`...`...`..

00022f0c <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22f14:	000100d1 000100e1 00010ffd 00010359     ............Y...
   22f24:	00010205 000077c1 000100f5 0001012d     .....w......-...
   22f34:	0001016d 00010149 00010159 000101ad     m...I...Y.......
   22f44:	000100c9 000077c9 00010471 000077c5     .....w..q....w..
   22f54:	00010645 00010561                       E...a...

00022f5c <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22f64:	000100d1 000100e1 00010ffd 00010359     ............Y...
   22f74:	00010205 000077c1 000100f5 0001012d     .....w......-...
   22f84:	0001016d 00010149 00010159 000101ad     m...I...Y.......
   22f94:	000100c9 000077c9 00010471 000077c5     .....w..q....w..
   22fa4:	00010645 00010561 40003c00 4101a000     E...a....<.@...A
   22fb4:	43001400                                ...C

00022fb8 <_ZN9ClearCore10hBridgeConE>:
   22fb8:	2000137c 20001400                       |.. ... 

00022fc0 <_ZN9ClearCore15MotorConnectorsE>:
   22fc0:	20000b70 20000cb8 20000e00 20000f48     p.. ... ... H.. 

00022fd0 <_ZN9ClearCoreL10ConnectorsE>:
   22fd0:	200011f0 2000125c 200012bc 2000131c     ... \.. ... ... 
   22fe0:	2000137c 20001400 20001160 20001190     |.. ... `.. ... 
   22ff0:	200011c0 20000b28 20001094 200010d8     ... (.. ... ... 
   23000:	2000111c 20001484 20000b70 20000cb8     ... ... p.. ... 
   23010:	20000e00 20000f48 200015e4 2000173c     ... H.. ... <.. 
   23020:	20001494                                ... 

00023024 <_ZN9ClearCoreL10MicroSD_SSE>:
   23024:	0504003d ffffff00 ffffffff 00ff0500     =...............

00023034 <_ZN9ClearCoreL10XBee_Rx_INE>:
   23034:	08180150 ffffff00 ffff0102 00ffffff     P...............

00023044 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   23044:	02120142 ffffff00 ffff0207 00040001     B...............

00023054 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   23054:	04140144 ffffff00 ffff0107 00060201     D...............

00023064 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   23064:	0a0a001c ffffff00 00010200 00040200     ................

00023074 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   23074:	0909001b ff03ff00 01000100 00ff0100     ................

00023084 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23084:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023094 <_ZN9ClearCoreL11IN07n_QuadBE>:
   23094:	01110239 ffffff01 ffff0106 00ff0100     9...............

000230a4 <_ZN9ClearCoreL11IN08n_QuadIE>:
   230a4:	0212023a ffffff01 ffff0206 00ff0200     :...............

000230b4 <_ZN9ClearCoreL11IN09n_AIN09E>:
   230b4:	0707010e ff09ff01 ffffffff 00ffffff     ................

000230c4 <_ZN9ClearCoreL11IN10n_AIN10E>:
   230c4:	0606010d ff08ff01 ffffffff 00ffffff     ................

000230d4 <_ZN9ClearCoreL11IN11n_AIN11E>:
   230d4:	0505010a ff07ff01 ffffffff 00ffffff     ................

000230e4 <_ZN9ClearCoreL11IN12n_AIN12E>:
   230e4:	03030206 ff05ff01 ffffffff 00ffffff     ................

000230f4 <_ZN9ClearCoreL11MicroSD_SCKE>:
   230f4:	09090110 ff01ff00 01040104 00ffffff     ................

00023104 <_ZN9ClearCoreL11XBee_CTS_INE>:
   23104:	09190253 ffffff00 ffff0302 00ffffff     S...............

00023114 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   23114:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00023124 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   23124:	05150145 ffffff00 ffff0007 00070301     E...............

00023134 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   23134:	ff08001a ff02ff00 00000000 00ff0000     ................

00023144 <_ZN9ClearCoreL12MicroSD_MISOE>:
   23144:	0a0a0120 ffffff00 00050204 00040400      ...............

00023154 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   23154:	0808010f ff00ff00 00040004 00ffffff     ................

00023164 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   23164:	07170049 ffffff00 01040005 00ff0701     I...............

00023174 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   23174:	08180252 ffffff00 ffff0202 00ffffff     R...............

00023184 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   23184:	03130143 ffffff00 ffff0307 00050101     C...............

00023194 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   23194:	0b0b001d ffffff00 01010300 00050300     ................

000231a4 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   231a4:	05050012 01ffff00 0100ffff 00ffffff     ................

000231b4 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   231b4:	04140046 ffffff01 00070205 00ff0401     F...............

000231c4 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   231c4:	00100140 ffffff00 00060005 00020003     @...............

000231d4 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   231d4:	03030164 ffffff00 0106ffff 00ffffff     d...............

000231e4 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   231e4:	0e0e0124 ffffff00 00050204 00000004     $...............

000231f4 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   231f4:	0c0c0122 ffffff00 00040004 00060003     "...............

00023204 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   23204:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00023214 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   23214:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00023224 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   23224:	0f0f0125 ffffff00 01050304 00010104     %...............

00023234 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   23234:	0d0d0123 ffffff00 01040104 00070103     #...............

00023244 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   23244:	06160048 ffffff00 00040003 00ff0601     H...............

00023254 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   23254:	00100034 ffffff00 00020001 00020001     4...............

00023264 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   23264:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

00023274 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   23274:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

00023284 <_ZN9ClearCoreL5IN01nE>:
   23284:	02110107 00ffff00 ffffffff 00ffffff     ................

00023294 <_ZN9ClearCoreL5IN02nE>:
   23294:	03030008 ffffff00 ffffffff 00ffffff     ................

000232a4 <_ZN9ClearCoreL5IN03nE>:
   232a4:	04150211 ffffff00 0000ffff 00ffffff     ................

000232b4 <_ZN9ClearCoreL5IN04nE>:
   232b4:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

000232c4 <_ZN9ClearCoreL5IN05nE>:
   232c4:	0313023b ffffff00 ffff0306 00ff0300     ;...............

000232d4 <_ZN9ClearCoreL5OUT00E>:
   232d4:	00000001 ffffff00 0002ffff 00ffffff     ................

000232e4 <_ZN9ClearCoreL5OUT01E>:
   232e4:	01010002 ffffff00 0102ffff 00ffffff     ................

000232f4 <_ZN9ClearCoreL5OUT02E>:
   232f4:	06060013 ffffff00 0001ffff 00ffffff     ................

00023304 <_ZN9ClearCoreL5OUT03E>:
   23304:	07070014 ffffff00 0101ffff 00ffffff     ................

00023314 <_ZN9ClearCoreL6Aout00E>:
   23314:	02020007 01ffff00 0100ffff 00ffffff     ................

00023324 <_ZN9ClearCoreL6Mtr0_BE>:
   23324:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

00023334 <_ZN9ClearCoreL6Mtr1_BE>:
   23334:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00023344 <_ZN9ClearCoreL7Mtr1_AnE>:
   23344:	05150047 ffffff00 01070305 00ff0501     G...............

00023354 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   23354:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   23364:	00000080 00000040 00000020 00000010     ....@... .......
   23374:	00000008 00000004 01000000 02000000     ................
   23384:	04000000 08000000 00800000 00400000     ..............@.
   23394:	00200000 00004000 00008000 00040000     .. ..@..........
   233a4:	00080000                                ....

000233a8 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   233b0:	0000b331 0000b3a5 000136dd              1........6..

000233bc <_ZN9ClearCoreL11IN06n_QuadAE>:
   233bc:	00100238 ffffff01 ffff0006 00ff0000     8...............

000233cc <_ZN9ClearCoreL11IN07n_QuadBE>:
   233cc:	01110239 ffffff01 ffff0106 00ff0100     9...............

000233dc <_ZN9ClearCoreL11IN08n_QuadIE>:
   233dc:	0212023a ffffff01 ffff0206 00ff0200     :...............
   233ec:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   233fc:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   2340c:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   2341c:	2e747369 00000063 00023464 00023454     ist.c...d4..T4..
   2342c:	00023434 00023444                       44..D4..

00023434 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   23434:	01010204 ff0bff00 ffffffff 00ffffff     ................

00023444 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   23444:	00000203 ff0aff00 ffffffff 00ffffff     ................

00023454 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   23454:	02020205 ff04ff00 ffffffff 00ffffff     ................

00023464 <_ZN9ClearCoreL9_5VOB_MONE>:
   23464:	04040109 ff06ff00 ffffffff 00ffffff     ................

00023474 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   2347c:	0000d825 0000da55 0000d829 0000d82d     %...U...)...-...
   2348c:	0000db4d 0000db69 0000d81d 00004c39     M...i.......9L..
   2349c:	0000da3d 0000dc05                       =.......

000234a4 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   234ac:	0000dca9 0000dcb9 0000dcad 0000dcb1     ................
   234bc:	0000df0d 0000dcb5 0000dca5 00004c39     ............9L..
   234cc:	0000dde1 0000de59                       ....Y...

000234d4 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   234dc:	0000df55 0000e029 0000df59 0000df5d     U...)...Y...]...
   234ec:	0000e4c5 0000df71 0000d81d 00004c39     ....q.......9L..
   234fc:	0000e2b9 0000e505                       ........

00023504 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   23504:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   23514:	42001400 42001800 43001400 43001800     ...B...B...C...C

00023524 <_ZTVN9ClearCore9ConnectorE>:
	...
   2352c:	0000e579 000136dd 000136dd 000136dd     y....6...6...6..
   2353c:	000136dd 000136dd 000136dd 00005e89     .6...6...6...^..
   2354c:	000136dd 000136dd                       .6...6..

00023554 <_ZTVN9ClearCore9DigitalInE>:
	...
   2355c:	0000e57d 0000e581 0000e58d 0000e591     }...............
   2356c:	0000e595 00004c35 0000dca5 00004c39     ....5L......9L..
   2357c:	0000e689 0000e5bd                       ........

00023584 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   2358c:	0000e8e9 0000ed81 0000e8ed 0000e8f1     ................
   2359c:	0000e9b5 0000e9f1 0000d81d 00004c39     ............9L..
   235ac:	0000eba5 0000ecb9                       ........

000235b4 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   235b4:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   235c4:	43001000                                ...C

000235c8 <_ZTVN9ClearCore7CcioPinE>:
	...
   235d0:	0000fd11 0000fd6d 0000fd15 0000fd19     ....m...........
   235e0:	0000fddd 0000fe39 0000fe19 00005e89     ....9........^..
   235f0:	0000fd29 0000fd2d                       )...-...

000235f8 <_ZTVN9ClearCore10SerialBaseE>:
	...
   23600:	000100d1 000100e1 00010ffd 00010359     ............Y...
   23610:	00010205 000077c1 000100f5 0001012d     .....w......-...
   23620:	0001016d 00010149 00010159 000101ad     m...I...Y.......
   23630:	000100c9 000077c9 00010471 000077c5     .....w..q....w..
   23640:	00010645 00010561                       E...a...

00023648 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   23648:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   23658:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00023668 <_ZTVN9ClearCore12SerialDriverE>:
	...
   23670:	000100d1 000100e1 000116cd 00011721     ............!...
   23680:	0001155d 000077c1 000100f5 0001012d     ]....w......-...
   23690:	0001016d 00010149 00010159 000101ad     m...I...Y.......
   236a0:	000100c9 000077c9 00010471 000077c5     .....w..q....w..
   236b0:	00010645 00010561 000114b1 00011579     E...a.......y...
   236c0:	000114c1 000114cd 000114dd 00011865     ............e...
   236d0:	000114f1 0001176d 000114fd fffffebc     ....m...........
   236e0:	00000000 000114b9 000116c5 000114c5     ................
   236f0:	000114d5 000114e9 00011919 000114f5     ................
   23700:	00005e89 00011501 0001185d              .^......]...

0002370c <_ZTVN9ClearCore9LedDriverE>:
	...
   23714:	00011921 00011925 00011931 00011935     !...%...1...5...
   23724:	00011949 00011961 00011939 00005e89     I...a...9....^..
   23734:	0001193d 00011941                       =...A...

0002373c <_usb_ep_cfgs>:
   2373c:	20001f3c 00000000 00000040 20001f7c     <.. ....@...|.. 
   2374c:	00000000 00000040 20001fbc 00000000     ....@...... ....
   2375c:	00000040                                @...

00023760 <sinTable_q15>:
   23760:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   23770:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   23780:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   23790:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   237a0:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   237b0:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   237c0:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   237d0:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   237e0:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   237f0:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   23800:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   23810:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   23820:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   23830:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   23840:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   23850:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   23860:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   23870:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   23880:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   23890:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   238a0:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   238b0:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   238c0:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   238d0:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   238e0:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   238f0:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   23900:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   23910:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   23920:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   23930:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   23940:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   23950:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   23960:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   23970:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   23980:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   23990:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   239a0:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   239b0:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   239c0:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   239d0:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   239e0:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   239f0:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   23a00:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   23a10:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   23a20:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   23a30:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   23a40:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   23a50:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   23a60:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   23a70:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   23a80:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   23a90:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   23aa0:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   23ab0:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   23ac0:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   23ad0:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   23ae0:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   23af0:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   23b00:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   23b10:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   23b20:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   23b30:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   23b40:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   23b50:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   23b60:	00000000 65727570 72697620 6c617574     ....pure virtual
   23b70:	74656d20 20646f68 6c6c6163 000a6465      method called..
   23b80:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

00023b90 <_ZTISt9bad_alloc>:
   23b90:	00023cb0 00023b9c 00023bf0              .<...;...;..

00023b9c <_ZTSSt9bad_alloc>:
   23b9c:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023bac <_ZTVSt9bad_alloc>:
   23bac:	00000000 00023b90 000136f9 0001370d     .....;...6...7..
   23bbc:	000136f1 3a647473 6461623a 6378655f     .6..std::bad_exc
   23bcc:	69747065 00006e6f                       eption..

00023bd4 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23bd4:	00023d24 00023bf8                       $=...;..

00023bdc <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23bdc:	00023d24 00023c18                       $=...<..

00023be4 <_ZTISt13bad_exception>:
   23be4:	00023cb0 00023c3c 00023bf0              .<..<<...;..

00023bf0 <_ZTISt9exception>:
   23bf0:	00023d24 00023c50                       $=..P<..

00023bf8 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23bf8:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23c08:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023c18 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23c18:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23c28:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23c38:	00456e6f                                onE.

00023c3c <_ZTSSt13bad_exception>:
   23c3c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   23c4c:	0000006e                                n...

00023c50 <_ZTSSt9exception>:
   23c50:	65397453 70656378 6e6f6974 00000000     St9exception....

00023c60 <_ZTVSt13bad_exception>:
   23c60:	00000000 00023be4 00013885 00013891     .....;...8...8..
   23c70:	00013889                                .8..

00023c74 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23c74:	00023cb0 00023c80 00023cec              .<...<...<..

00023c80 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   23c80:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23c90:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23ca0:	456f666e 00000000                       nfoE....

00023ca8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23ca8:	00000000 00023c74 00013a59 00013a6d     ....t<..Y:..m:..
   23cb8:	00013b85 00013b85 00013c41 00013bb5     .;...;..A<...;..
   23cc8:	00013b55 00013ac5 00013a89              U;...:...:..

00023cd4 <_ZTISt9type_info>:
   23cd4:	00023d24 00023cdc                       $=...<..

00023cdc <_ZTSSt9type_info>:
   23cdc:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023cec <_ZTIN10__cxxabiv117__class_type_infoE>:
   23cec:	00023cb0 00023cf8 00023cd4              .<...<...<..

00023cf8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23cf8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23d08:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23d18:	00000045                                E...

00023d1c <_ZTVN10__cxxabiv117__class_type_infoE>:
   23d1c:	00000000 00023cec 00013bf9 00013c0d     .....<...;...<..
   23d2c:	00013b85 00013b85 00013c41 00013bb5     .;...;..A<...;..
   23d3c:	00013c29 00013c6d 00013bed 6d726574     )<..m<...;..term
   23d4c:	74616e69 61632065 64656c6c 63657220     inate called rec
   23d5c:	69737275 796c6576 0000000a 6d726574     ursively....term
   23d6c:	74616e69 61632065 64656c6c 74666120     inate called aft
   23d7c:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23d8c:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23d9c:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23dac:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23dbc:	69746361 65206576 70656378 6e6f6974     active exception
   23dcc:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023ddc <standard_subs>:
   23ddc:	00000074 000245c0 00000003 000245c0     t....E.......E..
   23dec:	00000003 00000000 00000000 00000061     ............a...
   23dfc:	000248d4 0000000e 000248d4 0000000e     .H.......H......
   23e0c:	000248e4 00000009 00000062 000248f0     .H......b....H..
   23e1c:	00000011 000248f0 00000011 00024904     .....H.......I..
   23e2c:	0000000c 00000073 00024914 0000000b     ....s....I......
   23e3c:	00024920 00000046 00024904 0000000c      I..F....I......
   23e4c:	00000069 00024968 0000000c 00024978     i...hI......xI..
   23e5c:	00000031 000249ac 0000000d 0000006f     1....I......o...
   23e6c:	000249bc 0000000c 000249cc 00000031     .I.......I..1...
   23e7c:	00024a00 0000000d 00000064 00024a10     .J......d....J..
   23e8c:	0000000d 00024a20 00000032 00024a54     .... J..2...TJ..
   23e9c:	0000000e                                ....

00023ea0 <cplus_demangle_builtin_types>:
   23ea0:	00024c64 0000000b 00024c64 0000000b     dL......dL......
   23eb0:	00000000 00024c70 00000004 00024c78     ....pL......xL..
   23ec0:	00000007 00000007 00024c80 00000004     .........L......
   23ed0:	00024c88 00000004 00000000 00024c90     .L...........L..
   23ee0:	00000006 00024c90 00000006 00000008     .....L..........
   23ef0:	00024c98 0000000b 00024c98 0000000b     .L.......L......
   23f00:	00000008 00024ca4 00000005 00024ca4     .....L.......L..
   23f10:	00000005 00000008 00024cac 0000000a     .........L......
   23f20:	00024cac 0000000a 00000008 00024cb8     .L...........L..
   23f30:	0000000d 00024cb8 0000000d 00000000     .....L..........
   23f40:	00024cc8 00000003 00024cc8 00000003     .L.......L......
   23f50:	00000001 00024ccc 0000000c 00024cdc     .....L.......L..
   23f60:	00000008 00000002 00000000 00000000     ................
	...
   23f7c:	00024ce8 00000004 00024ce8 00000004     .L.......L......
   23f8c:	00000003 00024cf0 0000000d 00024cf0     .....L.......L..
   23f9c:	0000000d 00000004 00024d00 00000008     .........M......
   23fac:	00024d00 00000008 00000000 00024d0c     .M...........M..
   23fbc:	00000011 00024d0c 00000011 00000000     .....M..........
	...
   24008:	00024d20 00000005 00024d20 00000005      M...... M......
   24018:	00000000 00024d28 0000000e 00024d28     ....(M......(M..
   24028:	0000000e 00000000 00000000 00000000     ................
	...
   24044:	00024d38 00000004 00024d38 00000004     8M......8M......
   24054:	00000009 00024d40 00000007 00024c80     ....@M.......L..
   24064:	00000004 00000000 00024d48 00000009     ........HM......
   24074:	00024ce8 00000004 00000005 00024d54     .L..........TM..
   24084:	00000012 00024d54 00000012 00000006     ....TM..........
   24094:	00022cdc 00000003 00022cdc 00000003     .,.......,......
   240a4:	00000000 00024d68 00000009 00024d68     ....hM......hM..
   240b4:	00000009 00000000 00024d74 00000009     ........tM......
   240c4:	00024d74 00000009 00000000 00024d80     tM...........M..
   240d4:	0000000a 00024d80 0000000a 00000000     .....M..........
   240e4:	00024d8c 00000004 00024d8c 00000004     .M.......M......
   240f4:	00000008 00024d94 00000008 00024d94     .....M.......M..
   24104:	00000008 00000000 00024da0 00000008     .........M......
   24114:	00024da0 00000008 00000000 00024dac     .M...........M..
   24124:	00000011 00024dac 00000011 00000000     .....M..........

00024134 <cplus_demangle_operators>:
   24134:	00024a64 00024a68 00000002 00000002     dJ..hJ..........
   24144:	00024a6c 00024a70 00000001 00000002     lJ..pJ..........
   24154:	00024a74 00024898 00000002 00000002     tJ...H..........
   24164:	00024790 00024a78 00000001 00000001     .G..xJ..........
   24174:	00024a7c 00024a78 00000001 00000002     |J..xJ..........
   24184:	00024a80 00024a84 00000008 00000001     .J...J..........
   24194:	00024a90 00024a84 00000008 00000001     .J...J..........
   241a4:	00024a94 00024a98 0000000a 00000002     .J...J..........
   241b4:	000245a0 00024aa4 00000002 00000002     .E...J..........
   241c4:	00024aa8 00024aac 00000001 00000002     .J...J..........
   241d4:	00024ab0 00024ab4 00000001 00000001     .J...J..........
   241e4:	00024ab8 00024abc 00000002 00000002     .J...J..........
   241f4:	00024ac0 00024ac4 00000009 00000001     .J...J..........
   24204:	00024ad0 00024ad4 0000000c 00000002     .J...J..........
   24214:	00024ae4 00024ae8 00000001 00000001     .J...J..........
   24224:	00024aec 00024af0 00000007 00000001     .J...J..........
   24234:	00024af8 00024afc 00000002 00000002     .J...J..........
   24244:	000245a4 00024c2c 00000001 00000002     .E..,L..........
   24254:	00024b00 00024b04 00000001 00000002     .K...K..........
   24264:	00024b08 00024b0c 00000002 00000002     .K...K..........
   24274:	00024b10 00024b14 00000001 00000002     .K...K..........
   24284:	00024b18 00024b1c 00000002 00000002     .K...K..........
   24294:	00024b20 00022cdc 00000003 00000003      K...,..........
   242a4:	00024b24 00022cdc 00000003 00000003     $K...,..........
   242b4:	00024b28 00022cdc 00000003 00000002     (K...,..........
   242c4:	00024b2c 00022cdc 00000003 00000002     ,K...,..........
   242d4:	00024b30 00024b34 00000002 00000002     0K..4K..........
   242e4:	00024794 000245e8 00000002 00000001     .G...E..........
   242f4:	00024b38 000249a8 00000001 00000002     8K...I..........
   24304:	0002479c 00024608 00000002 00000002     .G...F..........
   24314:	00024b3c 00024b40 00000003 00000002     <K..@K..........
   24324:	00024c94 00024b44 00000002 00000002     .L..DK..........
   24334:	000245dc 00024b48 0000000b 00000001     .E..HK..........
   24344:	00024b54 00024b58 00000002 00000002     TK..XK..........
   24354:	00024b5c 00024b60 00000001 00000002     \K..`K..........
   24364:	00024b64 00024b68 00000002 00000002     dK..hK..........
   24374:	00024b6c 00024b70 00000002 00000002     lK..pK..........
   24384:	00024b74 00024b78 00000001 00000002     tK..xK..........
   24394:	00024b7c 00024ae8 00000001 00000002     |K...J..........
   243a4:	00024b80 00024b84 00000002 00000001     .K...K..........
   243b4:	00024b88 00024b8c 00000005 00000003     .K...K..........
   243c4:	00024b94 00024b98 00000002 00000002     .K...K..........
   243d4:	00024d64 00024b78 00000001 00000001     dM..xK..........
   243e4:	00024b9c 00024ba0 00000001 00000001     .K...K..........
   243f4:	00024ba4 00024ba8 00000003 00000003     .K...K..........
   24404:	00024bac 00024bb0 00000002 00000002     .K...K..........
   24414:	00024bb4 00024bb8 00000002 00000002     .K...K..........
   24424:	000248e0 00024bbc 00000001 00000002     .H...K..........
   24434:	00024bc0 00024bc4 00000002 00000002     .K...K..........
   24444:	00024bc8 00024bcc 00000001 00000002     .K...K..........
   24454:	00024bd0 00024bd4 00000003 00000002     .K...K..........
   24464:	00024bd8 00024bdc 00000002 00000001     .K...K..........
   24474:	00024be0 00024bcc 00000001 00000001     .K...K..........
   24484:	000245a8 00024be4 00000002 00000002     .E...K..........
   24494:	000245ac 00024be8 00000001 00000003     .E...K..........
   244a4:	00024bec 00024bf0 00000002 00000002     .K...K..........
   244b4:	00024bf4 00024bf8 00000003 00000002     .K...K..........
   244c4:	00024bfc 00024c00 00000010 00000002     .K...L..........
   244d4:	00024c14 00024c18 00000001 00000002     .L...L..........
   244e4:	00024c1c 00024c20 00000002 00000002     .L.. L..........
   244f4:	0002459c 00024c24 00000009 00000001     .E..$L..........
   24504:	00024860 00024c24 00000009 00000001     `H..$L..........
   24514:	00024c30 00024c34 0000000b 00000002     0L..4L..........
   24524:	00024aa0 00024c40 00000007 00000001     .J..@L..........
   24534:	00024c48 00024c40 00000007 00000001     HL..@L..........
   24544:	00024c4c 00024c50 00000005 00000000     LL..PL..........
   24554:	00024c58 00024c5c 00000006 00000001     XL..\L..........
	...
   24574:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   24584:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   24594:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   245a4:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   245b4:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   245c4:	6f747561 00000000 6c636564 65707974     auto....decltype
   245d4:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   245e4:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   245f4:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   24604:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   24614:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   24624:	20726f66 00000000 736e6f63 63757274     for ....construc
   24634:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   24644:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   24654:	6f666e69 726f6620 00000020 65707974     info for ...type
   24664:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   24674:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   24684:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   24694:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   246a4:	6e616972 65722074 6e727574 75687420     riant return thu
   246b4:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   246c4:	66207373 0020726f 72617567 61762064     ss for .guard va
   246d4:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   246e4:	74696e69 6e756620 6f697463 6f66206e     init function fo
   246f4:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   24704:	636e7566 6e6f6974 726f6620 00000020     function for ...
   24714:	65666572 636e6572 65742065 726f706d     reference tempor
   24724:	20797261 00000023 64646968 61206e65     ary #...hidden a
   24734:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   24744:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   24754:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   24764:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   24774:	0000202c 7265706f 726f7461 00000000     , ..operator....
   24784:	7265706f 726f7461 00000020 00006461     operator ...ad..
   24794:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   247a4:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   247b4:	006c6c75 736c6166 00000065 65757274     ull.false...true
   247c4:	00000000 6176616a 73657220 6372756f     ....java resourc
   247d4:	00002065 6c636564 65707974 00002820     e ..decltype (..
   247e4:	73696874 00000000 7261707b 0000236d     this....{parm#..
   247f4:	626f6c67 63206c61 74736e6f 74637572     global construct
   24804:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   24814:	626f6c67 64206c61 72747365 6f746375     global destructo
   24824:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   24834:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   24844:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   24854:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   24864:	73657220 63697274 00000074 6c6f7620      restrict... vol
   24874:	6c697461 00000065 6e6f6320 00007473     atile... const..
   24884:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   24894:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   248a4:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   248b4:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   248c4:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   248d4:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   248e4:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   248f4:	7361623a 735f6369 6e697274 00000067     :basic_string...
   24904:	69736162 74735f63 676e6972 00000000     basic_string....
   24914:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   24924:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   24934:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   24944:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   24954:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   24964:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   24974:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   24984:	65727473 633c6d61 2c726168 64747320     stream<char, std
   24994:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   249a4:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   249b4:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   249c4:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   249d4:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   249e4:	64747320 68633a3a 745f7261 74696172      std::char_trait
   249f4:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   24a04:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   24a14:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   24a24:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   24a34:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   24a44:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   24a54:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   24a64:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   24a74:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   24a84:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   24a94:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24aa4:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24ab4:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24ac4:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   24ad4:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   24ae4:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   24af4:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   24b04:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   24b14:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   24b24:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   24b34:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   24b44:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   24b54:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   24b64:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   24b74:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   24b84:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24b94:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24ba4:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24bb4:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24bc4:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24bd4:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   24be4:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   24bf4:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   24c04:	70726574 5f746572 74736163 00000000     terpret_cast....
   24c14:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   24c24:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   24c34:	74617473 635f6369 00747361 657a6973     static_cast.size
   24c44:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   24c54:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   24c64:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   24c74:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   24c84:	00000000 65747962 00000000 62756f64     ....byte....doub
   24c94:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24ca4:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24cb4:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24cc4:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24cd4:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24ce4:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24cf4:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24d04:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24d14:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24d24:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24d34:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24d44:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24d54:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24d64:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24d74:	69636564 366c616d 00000034 69636564     decimal64...deci
   24d84:	316c616d 00003832 666c6168 00000000     mal128..half....
   24d94:	72616863 745f3631 00000000 72616863     char16_t....char
   24da4:	745f3233 00000000 6c636564 65707974     32_t....decltype
   24db4:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   24dc4:	00000000 74727173 00000066              ....sqrtf...

00024dd0 <TWO52>:
   24dd0:	00000000 43300000 00000000 c3300000     ......0C......0.

00024de0 <_global_impure_ptr>:
   24de0:	20000108 00000043 49534f50 00000058     ... C...POSIX...
   24df0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   24e00:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   24e10:	00000000 33323130 37363534 62613938     ....0123456789ab
   24e20:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   24e30:	00000030                                0...

00024e34 <blanks.8346>:
   24e34:	20202020 20202020 20202020 20202020                     

00024e44 <zeroes.8347>:
   24e44:	30303030 30303030 30303030 30303030     0000000000000000
   24e54:	33323130 37363534 62613938 66656463     0123456789abcdef
   24e64:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24e74:	7a797877 00000000                       wxyz....

00024e7c <_ctype_>:
   24e7c:	20202000 20202020 28282020 20282828     .         ((((( 
   24e8c:	20202020 20202020 20202020 20202020                     
   24e9c:	10108820 10101010 10101010 10101010      ...............
   24eac:	04040410 04040404 10040404 10101010     ................
   24ebc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24ecc:	01010101 01010101 01010101 10101010     ................
   24edc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24eec:	02020202 02020202 02020202 10101010     ................
   24efc:	00000020 00000000 00000000 00000000      ...............
	...
   24f80:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024f90 <__mprec_bigtens>:
   24f90:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24fa0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24fb0:	7f73bf3c 75154fdd                       <.s..O.u

00024fb8 <__mprec_tens>:
   24fb8:	00000000 3ff00000 00000000 40240000     .......?......$@
   24fc8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24fd8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24fe8:	00000000 412e8480 00000000 416312d0     .......A......cA
   24ff8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   25008:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   25018:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   25028:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   25038:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   25048:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   25058:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   25068:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   25078:	79d99db4 44ea7843                       ...yCx.D

00025080 <p05.7178>:
   25080:	00000005 00000019 0000007d              ........}...

0002508c <__EH_FRAME_BEGIN__>:
   2508c:	00000000                                ....
