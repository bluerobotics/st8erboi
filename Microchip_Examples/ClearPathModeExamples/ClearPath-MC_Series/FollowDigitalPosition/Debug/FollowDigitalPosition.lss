
FollowDigitalPosition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020df8  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00024df8  00024df8  00024df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  00024ef4  00024ef4  00024ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ac0  20000000  0002507c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018f8  20000ac0  00025b40  00030ac0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a842c  00000000  00000000  00030bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd6b  00000000  00000000  000d8fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f0  00000000  00000000  000e8d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007b48  00000000  00000000  000ea540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f2088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014206  00000000  00000000  00113c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f19a4  00000000  00000000  00127e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000074f0  00000000  00000000  002197b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000232c2  00000000  00000000  00220ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 55 a8 00 00 d1 42 00 00 d1 42 00 00     ... U....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	f1 a6 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 c5 a5 00 00 d5 a5 00 00 e5 a5 00 00     .B..............
    407c:	f5 a5 00 00 05 a6 00 00 15 a6 00 00 25 a6 00 00     ............%...
    408c:	35 a6 00 00 45 a6 00 00 55 a6 00 00 65 a6 00 00     5...E...U...e...
    409c:	75 a6 00 00 85 a6 00 00 91 a6 00 00 a1 a6 00 00     u...............
    40ac:	b1 a6 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 59 a5 00 00 d1 42 00 00 65 a5 00 00     .B..Y....B..e...
    4104:	71 a5 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     q....B...B...B..
    4114:	d1 42 00 00 7d a5 00 00 d1 42 00 00 89 a5 00 00     .B..}....B......
    4124:	95 a5 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 a1 a5 00 00 d1 42 00 00 ad a5 00 00     .B.......B......
    4174:	b9 a5 00 00 00 00 00 00 00 00 00 00 c5 31 01 00     .............1..
    4184:	c9 31 01 00 cd 31 01 00 d1 31 01 00 4d a5 00 00     .1...1...1..M...
    4194:	45 a7 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     E....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	c1 a6 00 00 d1 42 00 00 d1 42 00 00 d9 a6 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ac0 	.word	0x20000ac0
    4280:	00000000 	.word	0x00000000
    4284:	00024df4 	.word	0x00024df4

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00024df4 	.word	0x00024df4
    42c4:	20000ac4 	.word	0x20000ac4
    42c8:	20000ab4 	.word	0x20000ab4
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_Z18LockSensorCallbackv>:
 * Parameters:
 *    None
 *
 * Returns: None
 */
void LockSensorCallback() {
    42d4:	b508      	push	{r3, lr}
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    42d6:	2100      	movs	r1, #0
    42d8:	4806      	ldr	r0, [pc, #24]	; (42f4 <_Z18LockSensorCallbackv+0x20>)
    42da:	f006 fd05 	bl	ace8 <Delay_cycles>
    // A 1 ms delay is required in order to pass the correct filtered sensor
    // state.
    Delay_ms(1);
    motor.MotorInAState(LockSensor.State());
    42de:	4806      	ldr	r0, [pc, #24]	; (42f8 <_Z18LockSensorCallbackv+0x24>)
    42e0:	f000 fed2 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    42e4:	1c01      	adds	r1, r0, #0
    42e6:	bf18      	it	ne
    42e8:	2101      	movne	r1, #1
    42ea:	4804      	ldr	r0, [pc, #16]	; (42fc <_Z18LockSensorCallbackv+0x28>)
}
    42ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    motor.MotorInAState(LockSensor.State());
    42f0:	f001 bc18 	b.w	5b24 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    42f4:	0001d4c0 	.word	0x0001d4c0
    42f8:	20001290 	.word	0x20001290
    42fc:	20000ca0 	.word	0x20000ca0

00004300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    4304:	f01a fcbc 	bl	1ec80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4308:	b168      	cbz	r0, 4326 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x26>
            if (!SendChar(buffer[iChar])) {
    430a:	4e0d      	ldr	r6, [pc, #52]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x40>)
    430c:	1825      	adds	r5, r4, r0
    430e:	e001      	b.n	4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4310:	42a5      	cmp	r5, r4
    4312:	d008      	beq.n	4326 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x26>
            if (!SendChar(buffer[iChar])) {
    4314:	f814 1b01 	ldrb.w	r1, [r4], #1
    4318:	4630      	mov	r0, r6
    431a:	f002 fbe1 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    431e:	2800      	cmp	r0, #0
    4320:	d1f6      	bne.n	4310 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x10>
        return Send(nullTermStr) && SendLine();
    }
    4322:	2000      	movs	r0, #0
    4324:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    4326:	210d      	movs	r1, #13
    4328:	4805      	ldr	r0, [pc, #20]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x40>)
    432a:	f002 fbd9 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    432e:	2800      	cmp	r0, #0
    4330:	d0f7      	beq.n	4322 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x22>
    4332:	210a      	movs	r1, #10
    4334:	4802      	ldr	r0, [pc, #8]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x40>)
    }
    4336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    433a:	f002 bbd1 	b.w	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    433e:	bf00      	nop
    4340:	200015c0 	.word	0x200015c0
    4344:	00000000 	.word	0x00000000

00004348 <_Z15CommandPositionl>:
bool CommandPosition(int32_t commandedPosition) {
    4348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    434c:	4680      	mov	r8, r0
    if (abs(commandedPosition) > abs(positionMaxPWM) ||
    434e:	4f56      	ldr	r7, [pc, #344]	; (44a8 <_Z15CommandPositionl+0x160>)
    4350:	ea80 70e0 	eor.w	r0, r0, r0, asr #31
bool CommandPosition(int32_t commandedPosition) {
    4354:	b08b      	sub	sp, #44	; 0x2c
    if (abs(commandedPosition) > abs(positionMaxPWM) ||
    4356:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
    435a:	f017 fb25 	bl	1b9a8 <__aeabi_i2d>
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    435e:	e897 0044 	ldmia.w	r7, {r2, r6}
    4362:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    4366:	4604      	mov	r4, r0
    4368:	460d      	mov	r5, r1
    436a:	f017 fe13 	bl	1bf94 <__aeabi_dcmpgt>
    436e:	b960      	cbnz	r0, 438a <_Z15CommandPositionl+0x42>
        abs(commandedPosition) < abs(positionZeroPWM)) {
    4370:	f8df 914c 	ldr.w	r9, [pc, #332]	; 44c0 <_Z15CommandPositionl+0x178>
    4374:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4378:	f8d9 2000 	ldr.w	r2, [r9]
    437c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    if (abs(commandedPosition) > abs(positionMaxPWM) ||
    4380:	4620      	mov	r0, r4
    4382:	4629      	mov	r1, r5
    4384:	f017 fde8 	bl	1bf58 <__aeabi_dcmplt>
    4388:	b1a8      	cbz	r0, 43b6 <_Z15CommandPositionl+0x6e>
    438a:	4c48      	ldr	r4, [pc, #288]	; (44ac <_Z15CommandPositionl+0x164>)
            if (!SendChar(buffer[iChar])) {
    438c:	4d48      	ldr	r5, [pc, #288]	; (44b0 <_Z15CommandPositionl+0x168>)
    438e:	f104 0629 	add.w	r6, r4, #41	; 0x29
    4392:	f814 1b01 	ldrb.w	r1, [r4], #1
    4396:	4628      	mov	r0, r5
    4398:	f002 fba2 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    439c:	b138      	cbz	r0, 43ae <_Z15CommandPositionl+0x66>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    439e:	42a6      	cmp	r6, r4
    43a0:	d1f7      	bne.n	4392 <_Z15CommandPositionl+0x4a>
        return SendChar('\r') && SendChar('\n');
    43a2:	210d      	movs	r1, #13
    43a4:	4842      	ldr	r0, [pc, #264]	; (44b0 <_Z15CommandPositionl+0x168>)
    43a6:	f002 fb9b 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43aa:	2800      	cmp	r0, #0
    43ac:	d16d      	bne.n	448a <_Z15CommandPositionl+0x142>
        return false;
    43ae:	2000      	movs	r0, #0
}
    43b0:	b00b      	add	sp, #44	; 0x2c
    43b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (motor.StatusReg().bit.MotorInFault) {
    43b6:	4b3f      	ldr	r3, [pc, #252]	; (44b4 <_Z15CommandPositionl+0x16c>)
    43b8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    43bc:	06db      	lsls	r3, r3, #27
    43be:	d451      	bmi.n	4464 <_Z15CommandPositionl+0x11c>
    43c0:	4c3d      	ldr	r4, [pc, #244]	; (44b8 <_Z15CommandPositionl+0x170>)
            if (!SendChar(buffer[iChar])) {
    43c2:	4d3b      	ldr	r5, [pc, #236]	; (44b0 <_Z15CommandPositionl+0x168>)
    43c4:	f104 0614 	add.w	r6, r4, #20
    43c8:	f814 1b01 	ldrb.w	r1, [r4], #1
    43cc:	4628      	mov	r0, r5
    43ce:	f002 fb87 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43d2:	b108      	cbz	r0, 43d8 <_Z15CommandPositionl+0x90>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43d4:	42a6      	cmp	r6, r4
    43d6:	d1f7      	bne.n	43c8 <_Z15CommandPositionl+0x80>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[2 + 8 * sizeof(number)];
        itoa(number, strRep, radix);
    43d8:	a901      	add	r1, sp, #4
    43da:	220a      	movs	r2, #10
    43dc:	4640      	mov	r0, r8
    43de:	f019 fbb9 	bl	1db54 <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    43e2:	a801      	add	r0, sp, #4
    43e4:	f01a fc4c 	bl	1ec80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43e8:	b160      	cbz	r0, 4404 <_Z15CommandPositionl+0xbc>
    43ea:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    43ec:	4e30      	ldr	r6, [pc, #192]	; (44b0 <_Z15CommandPositionl+0x168>)
    43ee:	1825      	adds	r5, r4, r0
    43f0:	e001      	b.n	43f6 <_Z15CommandPositionl+0xae>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43f2:	42a5      	cmp	r5, r4
    43f4:	d006      	beq.n	4404 <_Z15CommandPositionl+0xbc>
            if (!SendChar(buffer[iChar])) {
    43f6:	f814 1b01 	ldrb.w	r1, [r4], #1
    43fa:	4630      	mov	r0, r6
    43fc:	f002 fb70 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4400:	2800      	cmp	r0, #0
    4402:	d1f6      	bne.n	43f2 <_Z15CommandPositionl+0xaa>
        return SendChar('\r') && SendChar('\n');
    4404:	210d      	movs	r1, #13
    4406:	482a      	ldr	r0, [pc, #168]	; (44b0 <_Z15CommandPositionl+0x168>)
    4408:	f002 fb6a 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    440c:	2800      	cmp	r0, #0
    440e:	d141      	bne.n	4494 <_Z15CommandPositionl+0x14c>
    double scaleFactor = 255 / abs(positionMaxPWM - positionZeroPWM);
    4410:	e9d9 4500 	ldrd	r4, r5, [r9]
    4414:	e9d7 0100 	ldrd	r0, r1, [r7]
    4418:	4622      	mov	r2, r4
    441a:	462b      	mov	r3, r5
    441c:	f017 f976 	bl	1b70c <__aeabi_dsub>
    4420:	4602      	mov	r2, r0
    4422:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    4426:	a11e      	add	r1, pc, #120	; (adr r1, 44a0 <_Z15CommandPositionl+0x158>)
    4428:	e9d1 0100 	ldrd	r0, r1, [r1]
    442c:	f017 fc4c 	bl	1bcc8 <__aeabi_ddiv>
    4430:	4606      	mov	r6, r0
    uint8_t dutyRequest = abs(commandedPosition - positionZeroPWM) * scaleFactor;
    4432:	4640      	mov	r0, r8
    double scaleFactor = 255 / abs(positionMaxPWM - positionZeroPWM);
    4434:	460f      	mov	r7, r1
    uint8_t dutyRequest = abs(commandedPosition - positionZeroPWM) * scaleFactor;
    4436:	f017 fab7 	bl	1b9a8 <__aeabi_i2d>
    443a:	4622      	mov	r2, r4
    443c:	462b      	mov	r3, r5
    443e:	f017 f965 	bl	1b70c <__aeabi_dsub>
    4442:	4602      	mov	r2, r0
    4444:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    4448:	4630      	mov	r0, r6
    444a:	4639      	mov	r1, r7
    444c:	f017 fb12 	bl	1ba74 <__aeabi_dmul>
    4450:	f017 fdd2 	bl	1bff8 <__aeabi_d2uiz>
    motor.MotorInBDuty(dutyRequest);
    4454:	b2c1      	uxtb	r1, r0
    4456:	4817      	ldr	r0, [pc, #92]	; (44b4 <_Z15CommandPositionl+0x16c>)
    4458:	f001 fb7e 	bl	5b58 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>
    445c:	2001      	movs	r0, #1
}
    445e:	b00b      	add	sp, #44	; 0x2c
    4460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4464:	4c15      	ldr	r4, [pc, #84]	; (44bc <_Z15CommandPositionl+0x174>)
            if (!SendChar(buffer[iChar])) {
    4466:	4d12      	ldr	r5, [pc, #72]	; (44b0 <_Z15CommandPositionl+0x168>)
    4468:	f104 0669 	add.w	r6, r4, #105	; 0x69
    446c:	f814 1b01 	ldrb.w	r1, [r4], #1
    4470:	4628      	mov	r0, r5
    4472:	f002 fb35 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4476:	2800      	cmp	r0, #0
    4478:	d099      	beq.n	43ae <_Z15CommandPositionl+0x66>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    447a:	42a6      	cmp	r6, r4
    447c:	d1f6      	bne.n	446c <_Z15CommandPositionl+0x124>
        return SendChar('\r') && SendChar('\n');
    447e:	210d      	movs	r1, #13
    4480:	480b      	ldr	r0, [pc, #44]	; (44b0 <_Z15CommandPositionl+0x168>)
    4482:	f002 fb2d 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4486:	2800      	cmp	r0, #0
    4488:	d091      	beq.n	43ae <_Z15CommandPositionl+0x66>
    448a:	210a      	movs	r1, #10
    448c:	4808      	ldr	r0, [pc, #32]	; (44b0 <_Z15CommandPositionl+0x168>)
    448e:	f002 fb27 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4492:	e78c      	b.n	43ae <_Z15CommandPositionl+0x66>
    4494:	210a      	movs	r1, #10
    4496:	4806      	ldr	r0, [pc, #24]	; (44b0 <_Z15CommandPositionl+0x168>)
    4498:	f002 fb22 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    449c:	e7b8      	b.n	4410 <_Z15CommandPositionl+0xc8>
    449e:	bf00      	nop
    44a0:	00000000 	.word	0x00000000
    44a4:	406fe000 	.word	0x406fe000
    44a8:	20000000 	.word	0x20000000
    44ac:	00022928 	.word	0x00022928
    44b0:	200015c0 	.word	0x200015c0
    44b4:	20000ca0 	.word	0x20000ca0
    44b8:	000229c0 	.word	0x000229c0
    44bc:	00022954 	.word	0x00022954
    44c0:	20000ae0 	.word	0x20000ae0

000044c4 <main>:
int main() {
    44c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    AnalogSensor.Mode(Connector::INPUT_ANALOG);
    44c8:	2101      	movs	r1, #1
int main() {
    44ca:	ed2d 8b02 	vpush	{d8}
    AnalogSensor.Mode(Connector::INPUT_ANALOG);
    44ce:	485d      	ldr	r0, [pc, #372]	; (4644 <main+0x180>)
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    44d0:	4c5d      	ldr	r4, [pc, #372]	; (4648 <main+0x184>)
    44d2:	f000 fc77 	bl	4dc4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    44d6:	4b5d      	ldr	r3, [pc, #372]	; (464c <main+0x188>)
                          Connector::CPM_MODE_A_DIRECT_B_PWM);
    44d8:	220b      	movs	r2, #11
    44da:	6818      	ldr	r0, [r3, #0]
    44dc:	2102      	movs	r1, #2
    44de:	f007 fe83 	bl	c1e8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    44e2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    44e6:	2b02      	cmp	r3, #2
    44e8:	d008      	beq.n	44fc <main+0x38>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    44ea:	4959      	ldr	r1, [pc, #356]	; (4650 <main+0x18c>)
    44ec:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
        m_hlfbMode = newMode;
    44f0:	2202      	movs	r2, #2
        m_hlfbCarrierLost = true;
    44f2:	2301      	movs	r3, #1
        m_hlfbMode = newMode;
    44f4:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    44f8:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
        The only valid mode for this connector type is: #INPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    virtual bool Mode(ConnectorModes newMode) override {
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
            m_mode = newMode;
    44fc:	4d55      	ldr	r5, [pc, #340]	; (4654 <main+0x190>)
    LockSensor.InterruptHandlerSet(LockSensorCallback, InputManager::CHANGE, true);
    44fe:	4956      	ldr	r1, [pc, #344]	; (4658 <main+0x194>)
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4500:	4f56      	ldr	r7, [pc, #344]	; (465c <main+0x198>)
    4502:	2302      	movs	r3, #2
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    4504:	2601      	movs	r6, #1
    LockSensor.InterruptHandlerSet(LockSensorCallback, InputManager::CHANGE, true);
    4506:	461a      	mov	r2, r3
    4508:	71ab      	strb	r3, [r5, #6]
    450a:	f884 60e4 	strb.w	r6, [r4, #228]	; 0xe4
    450e:	4633      	mov	r3, r6
                m_hlfbCarrierLossStateChange_ms =
    4510:	2604      	movs	r6, #4
    4512:	4628      	mov	r0, r5
    4514:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
    4518:	f000 ff12 	bl	5340 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb>
    motor.MotorInAState(LockSensor.State());
    451c:	4628      	mov	r0, r5
    451e:	f000 fdb3 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    4522:	1c01      	adds	r1, r0, #0
    4524:	bf18      	it	ne
    4526:	2101      	movne	r1, #1
    4528:	4847      	ldr	r0, [pc, #284]	; (4648 <main+0x184>)
    452a:	f001 fafb 	bl	5b24 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    SerialPort.Speed(baudRate);
    452e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    4532:	4638      	mov	r0, r7
    4534:	f002 fabc 	bl	6ab0 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    4538:	f006 fbac 	bl	ac94 <Milliseconds>
    453c:	4606      	mov	r6, r0
    SerialPort.PortOpen();
    453e:	4638      	mov	r0, r7
    4540:	f002 faaa 	bl	6a98 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4544:	f241 3587 	movw	r5, #4999	; 0x1387
    4548:	4638      	mov	r0, r7
    454a:	f002 fa9f 	bl	6a8c <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    454e:	2800      	cmp	r0, #0
    4550:	d06d      	beq.n	462e <main+0x16a>
    motor.EnableRequest(true);
    4552:	2101      	movs	r1, #1
    4554:	483c      	ldr	r0, [pc, #240]	; (4648 <main+0x184>)
    4556:	f001 fb27 	bl	5ba8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    455a:	4841      	ldr	r0, [pc, #260]	; (4660 <main+0x19c>)
    455c:	f7ff fed0 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
    SerialPort.SendLine("Waiting for HLFB...");
    4560:	4840      	ldr	r0, [pc, #256]	; (4664 <main+0x1a0>)
    4562:	f7ff fecd 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4566:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    456a:	2b01      	cmp	r3, #1
    456c:	d003      	beq.n	4576 <main+0xb2>
			!motor.StatusReg().bit.MotorInFault) {
    456e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4572:	06da      	lsls	r2, r3, #27
    4574:	d5f7      	bpl.n	4566 <main+0xa2>
    if (motor.StatusReg().bit.MotorInFault) {
    4576:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    457a:	06db      	lsls	r3, r3, #27
    457c:	d55d      	bpl.n	463a <main+0x176>
		SerialPort.SendLine("Motor fault detected.");		
    457e:	483a      	ldr	r0, [pc, #232]	; (4668 <main+0x1a4>)
    4580:	f7ff febe 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
			SerialPort.SendLine("Enable automatic fault handling by setting HANDLE_MOTOR_FAULTS to 1.");
    4584:	4839      	ldr	r0, [pc, #228]	; (466c <main+0x1a8>)
    4586:	f7ff febb 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
		SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");		
    458a:	4839      	ldr	r0, [pc, #228]	; (4670 <main+0x1ac>)
    458c:	f7ff feb8 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
    4590:	210d      	movs	r1, #13
    4592:	4832      	ldr	r0, [pc, #200]	; (465c <main+0x198>)
    4594:	f002 faa4 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4598:	b118      	cbz	r0, 45a2 <main+0xde>
    459a:	210a      	movs	r1, #10
    459c:	482f      	ldr	r0, [pc, #188]	; (465c <main+0x198>)
    459e:	f002 fa9f 	bl	6ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>

        \return The filtered analog input voltage in volts
    **/
    float AnalogVoltage() {
        // If there is not a valid reading available, return zero.
        if (!m_analogValid) {
    45a2:	2600      	movs	r6, #0
    45a4:	2700      	movs	r7, #0
    45a6:	4c27      	ldr	r4, [pc, #156]	; (4644 <main+0x180>)
    45a8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 467c <main+0x1b8>
    45ac:	4d31      	ldr	r5, [pc, #196]	; (4674 <main+0x1b0>)
        \return Voltage on the given ADC channel.

        \note For performance reasons, does not perform any bounds checking.
    **/
    float AnalogVoltage(AdcChannels adcChannel) {
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    45ae:	f647 78ff 	movw	r8, #32767	; 0x7fff
    45b2:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
    45b6:	e00f      	b.n	45d8 <main+0x114>
    45b8:	4630      	mov	r0, r6
    45ba:	4639      	mov	r1, r7
            static_cast<int32_t>(round(analogVoltage / 10 * positionMaxPWM));
    45bc:	e9d5 2300 	ldrd	r2, r3, [r5]
    45c0:	f017 fa58 	bl	1ba74 <__aeabi_dmul>
    45c4:	ec41 0b10 	vmov	d0, r0, r1
    45c8:	f016 fa3e 	bl	1aa48 <round>
    45cc:	ec51 0b10 	vmov	r0, r1, d0
    45d0:	f017 fcea 	bl	1bfa8 <__aeabi_d2iz>
        CommandPosition(commandedPosition);    // See below for the detailed function definition.
    45d4:	f7ff feb8 	bl	4348 <_Z15CommandPositionl>
    45d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    45dc:	2b00      	cmp	r3, #0
    45de:	d0eb      	beq.n	45b8 <main+0xf4>
            return 0;
        }
        return AdcManager::Instance().AnalogVoltage(m_adcChannel);
    45e0:	f000 f84e 	bl	4680 <_ZN9ClearCore10AdcManager8InstanceEv>
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    45e4:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    45e8:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    45ec:	f101 0208 	add.w	r2, r1, #8
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    45f0:	fa48 f303 	asr.w	r3, r8, r3
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    45f4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
    45f8:	b292      	uxth	r2, r2
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    45fa:	ee07 2a90 	vmov	s15, r2
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    45fe:	43db      	mvns	r3, r3
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    4600:	eb09 0181 	add.w	r1, r9, r1, lsl #2
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    4604:	f3c3 030e 	ubfx	r3, r3, #0, #15
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    4608:	edd1 6a00 	vldr	s13, [r1]
    460c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    4610:	ee07 3a90 	vmov	s15, r3
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    4614:	ee27 7a26 	vmul.f32	s14, s14, s13
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    4618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    461c:	eec7 6a27 	vdiv.f32	s13, s14, s15
    4620:	eec6 7a88 	vdiv.f32	s15, s13, s16
    4624:	ee17 0a90 	vmov	r0, s15
    4628:	f017 f9d0 	bl	1b9cc <__aeabi_f2d>
    462c:	e7c6      	b.n	45bc <main+0xf8>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    462e:	f006 fb31 	bl	ac94 <Milliseconds>
    4632:	1b80      	subs	r0, r0, r6
    4634:	42a8      	cmp	r0, r5
    4636:	d987      	bls.n	4548 <main+0x84>
    4638:	e78b      	b.n	4552 <main+0x8e>
		SerialPort.SendLine("Motor Ready");	
    463a:	480f      	ldr	r0, [pc, #60]	; (4678 <main+0x1b4>)
    463c:	f7ff fe60 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
    4640:	e7af      	b.n	45a2 <main+0xde>
    4642:	bf00      	nop
    4644:	20000c5c 	.word	0x20000c5c
    4648:	20000ca0 	.word	0x20000ca0
    464c:	20001d48 	.word	0x20001d48
    4650:	c61c3c00 	.word	0xc61c3c00
    4654:	20001290 	.word	0x20001290
    4658:	000042d5 	.word	0x000042d5
    465c:	200015c0 	.word	0x200015c0
    4660:	000229d8 	.word	0x000229d8
    4664:	000229e8 	.word	0x000229e8
    4668:	000229fc 	.word	0x000229fc
    466c:	00022a14 	.word	0x00022a14
    4670:	00022a5c 	.word	0x00022a5c
    4674:	20000000 	.word	0x20000000
    4678:	00022aa0 	.word	0x00022aa0
    467c:	00022abc 	.word	0x00022abc

00004680 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    4680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    4682:	4d1f      	ldr	r5, [pc, #124]	; (4700 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    4684:	682c      	ldr	r4, [r5, #0]
    4686:	f014 0401 	ands.w	r4, r4, #1
    468a:	d002      	beq.n	4692 <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    468c:	4b1d      	ldr	r3, [pc, #116]	; (4704 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    468e:	6818      	ldr	r0, [r3, #0]
    4690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4692:	2074      	movs	r0, #116	; 0x74
    4694:	f00e fdc8 	bl	13228 <_Znwj>
    4698:	4e1a      	ldr	r6, [pc, #104]	; (4704 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    469a:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    469c:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    469e:	210c      	movs	r1, #12
    46a0:	f04f 30ff 	mov.w	r0, #4294967295
    46a4:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    46a6:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    46a8:	605c      	str	r4, [r3, #4]
    46aa:	6658      	str	r0, [r3, #100]	; 0x64
    46ac:	609c      	str	r4, [r3, #8]
    46ae:	6698      	str	r0, [r3, #104]	; 0x68
    46b0:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    46b2:	841c      	strh	r4, [r3, #32]
    46b4:	611c      	str	r4, [r3, #16]
    46b6:	625c      	str	r4, [r3, #36]	; 0x24
    46b8:	615c      	str	r4, [r3, #20]
    46ba:	851c      	strh	r4, [r3, #40]	; 0x28
    46bc:	619c      	str	r4, [r3, #24]
    46be:	62dc      	str	r4, [r3, #44]	; 0x2c
    46c0:	61dc      	str	r4, [r3, #28]
    46c2:	861c      	strh	r4, [r3, #48]	; 0x30
    46c4:	635c      	str	r4, [r3, #52]	; 0x34
    46c6:	871c      	strh	r4, [r3, #56]	; 0x38
    46c8:	63dc      	str	r4, [r3, #60]	; 0x3c
    46ca:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    46ce:	645c      	str	r4, [r3, #68]	; 0x44
    46d0:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    46d4:	64dc      	str	r4, [r3, #76]	; 0x4c
    46d6:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    46da:	655c      	str	r4, [r3, #84]	; 0x54
    46dc:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    46e0:	65dc      	str	r4, [r3, #92]	; 0x5c
    46e2:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    46e6:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    46ea:	671c      	str	r4, [r3, #112]	; 0x70
    46ec:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    46f0:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    46f4:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    46f8:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    46fa:	6033      	str	r3, [r6, #0]
    46fc:	602a      	str	r2, [r5, #0]
}
    46fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4700:	20000ae8 	.word	0x20000ae8
    4704:	20000b20 	.word	0x20000b20

00004708 <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    4708:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    470a:	4bbd      	ldr	r3, [pc, #756]	; (4a00 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    470c:	4605      	mov	r5, r0
    };
    470e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    4710:	b085      	sub	sp, #20
    };
    4712:	ac04      	add	r4, sp, #16
    4714:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    4718:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    471a:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    471c:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    4720:	2303      	movs	r3, #3
    4722:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    4726:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    472a:	f245 03c3 	movw	r3, #20675	; 0x50c3
    472e:	842b      	strh	r3, [r5, #32]
    4730:	852b      	strh	r3, [r5, #40]	; 0x28
    4732:	862b      	strh	r3, [r5, #48]	; 0x30
    4734:	872b      	strh	r3, [r5, #56]	; 0x38
    4736:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    473a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    473e:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    4742:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    4746:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    474a:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    474c:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    4750:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    4754:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    4758:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    475a:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    475c:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    475e:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    4760:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    4762:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    4766:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    476a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    476e:	07cf      	lsls	r7, r1, #31
    4770:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    4774:	f04f 0401 	mov.w	r4, #1
    4778:	bf54      	ite	pl
    477a:	f364 0003 	bfipl	r0, r4, #0, #4
    477e:	f364 1007 	bfimi	r0, r4, #4, #4
    4782:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    4786:	4a9f      	ldr	r2, [pc, #636]	; (4a04 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    4788:	4413      	add	r3, r2
    478a:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    478c:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    478e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4792:	f041 0101 	orr.w	r1, r1, #1
    4796:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    479a:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    479c:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    479e:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    47a2:	01db      	lsls	r3, r3, #7
    47a4:	441a      	add	r2, r3
    47a6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    47aa:	07ce      	lsls	r6, r1, #31
    47ac:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    47b0:	bf54      	ite	pl
    47b2:	f364 0003 	bfipl	r0, r4, #0, #4
    47b6:	f364 1007 	bfimi	r0, r4, #4, #4
    47ba:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    47be:	4a91      	ldr	r2, [pc, #580]	; (4a04 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    47c0:	4413      	add	r3, r2
    47c2:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    47c4:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    47c6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    47ca:	f041 0101 	orr.w	r1, r1, #1
    47ce:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    47d2:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    47d4:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    47d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    47da:	01db      	lsls	r3, r3, #7
    47dc:	441a      	add	r2, r3
    47de:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    47e2:	07cf      	lsls	r7, r1, #31
    47e4:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    47e8:	bf54      	ite	pl
    47ea:	f364 0003 	bfipl	r0, r4, #0, #4
    47ee:	f364 1007 	bfimi	r0, r4, #4, #4
    47f2:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    47f6:	4a83      	ldr	r2, [pc, #524]	; (4a04 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    47f8:	4413      	add	r3, r2
    47fa:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    47fc:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    47fe:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4802:	f041 0101 	orr.w	r1, r1, #1
    4806:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    480a:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    480c:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    480e:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    4812:	01db      	lsls	r3, r3, #7
    4814:	441a      	add	r2, r3
    4816:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    481a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    481e:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    4822:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    4824:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4828:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    482a:	bf4c      	ite	mi
    482c:	f364 1007 	bfimi	r0, r4, #4, #4
    4830:	f364 0003 	bfipl	r0, r4, #0, #4
    4834:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    4838:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    483c:	4a72      	ldr	r2, [pc, #456]	; (4a08 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    483e:	f041 0101 	orr.w	r1, r1, #1
    4842:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    4846:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    484a:	f36f 1386 	bfc	r3, #6, #1
    484e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    4852:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    4856:	065f      	lsls	r7, r3, #25
    4858:	d4fb      	bmi.n	4852 <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    485a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    485e:	496a      	ldr	r1, [pc, #424]	; (4a08 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    4860:	2004      	movs	r0, #4
    4862:	f360 0303 	bfi	r3, r0, #0, #4
    4866:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    486a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    486e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4872:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    4876:	684b      	ldr	r3, [r1, #4]
    4878:	06de      	lsls	r6, r3, #27
    487a:	d4fc      	bmi.n	4876 <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    487c:	4963      	ldr	r1, [pc, #396]	; (4a0c <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    487e:	4a64      	ldr	r2, [pc, #400]	; (4a10 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    4880:	6a0b      	ldr	r3, [r1, #32]
    4882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4886:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    4888:	8813      	ldrh	r3, [r2, #0]
    488a:	f043 0301 	orr.w	r3, r3, #1
    488e:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    4890:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4892:	f013 0301 	ands.w	r3, r3, #1
    4896:	d1fb      	bne.n	4890 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    4898:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    489c:	290a      	cmp	r1, #10
    489e:	f000 80e7 	beq.w	4a70 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    48a2:	290c      	cmp	r1, #12
    48a4:	f000 80df 	beq.w	4a66 <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    48a8:	2908      	cmp	r1, #8
    48aa:	f000 80d5 	beq.w	4a58 <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    48ae:	4b58      	ldr	r3, [pc, #352]	; (4a10 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    48b0:	881a      	ldrh	r2, [r3, #0]
    48b2:	2101      	movs	r1, #1
    48b4:	f361 220a 	bfi	r2, r1, #8, #3
    48b8:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    48ba:	889a      	ldrh	r2, [r3, #4]
    48bc:	b292      	uxth	r2, r2
    48be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    48c2:	f042 0204 	orr.w	r2, r2, #4
    48c6:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    48c8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    48ca:	f014 0404 	ands.w	r4, r4, #4
    48ce:	d1fb      	bne.n	48c8 <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    48d0:	4620      	mov	r0, r4
    48d2:	f000 fddf 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    48d6:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    48d8:	4620      	mov	r0, r4
    48da:	f000 fde5 	bl	54a8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    48de:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    48e0:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    48e2:	f023 0302 	bic.w	r3, r3, #2
    48e6:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    48e8:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    48ea:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    48ec:	6833      	ldr	r3, [r6, #0]
    48ee:	2b01      	cmp	r3, #1
    48f0:	d0fc      	beq.n	48ec <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    48f2:	4b48      	ldr	r3, [pc, #288]	; (4a14 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    48f4:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    48f6:	4948      	ldr	r1, [pc, #288]	; (4a18 <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    48f8:	4f48      	ldr	r7, [pc, #288]	; (4a1c <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    48fa:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    48fe:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    4900:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    4902:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    4904:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    4906:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    4908:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    490a:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    490c:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    490e:	f000 fdc1 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    4912:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    4914:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    4916:	f023 0302 	bic.w	r3, r3, #2
    491a:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    491c:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    491e:	6803      	ldr	r3, [r0, #0]
    4920:	2b01      	cmp	r3, #1
    4922:	d0fc      	beq.n	491e <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    4924:	4b3e      	ldr	r3, [pc, #248]	; (4a20 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    4926:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    4928:	2001      	movs	r0, #1
    492a:	f000 fdbd 	bl	54a8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    492e:	2300      	movs	r3, #0
    4930:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    4932:	4a37      	ldr	r2, [pc, #220]	; (4a10 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    4934:	4e3b      	ldr	r6, [pc, #236]	; (4a24 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    4936:	493c      	ldr	r1, [pc, #240]	; (4a28 <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    4938:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    493a:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    493e:	2408      	movs	r4, #8
    4940:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    4942:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    4944:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    4946:	6b93      	ldr	r3, [r2, #56]	; 0x38
    4948:	f043 0301 	orr.w	r3, r3, #1
    494c:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    494e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4950:	075c      	lsls	r4, r3, #29
    4952:	d4fc      	bmi.n	494e <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    4954:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    4956:	492e      	ldr	r1, [pc, #184]	; (4a10 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    4958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    495c:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    495e:	7a13      	ldrb	r3, [r2, #8]
    4960:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    4964:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    4966:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    4968:	06d8      	lsls	r0, r3, #27
    496a:	d4fc      	bmi.n	4966 <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    496c:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    496e:	4c28      	ldr	r4, [pc, #160]	; (4a10 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    4970:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    4972:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4974:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    4978:	d1fb      	bne.n	4972 <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    497a:	78e3      	ldrb	r3, [r4, #3]
    497c:	f043 0301 	orr.w	r3, r3, #1
    4980:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4982:	f000 fd87 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4986:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4988:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    498a:	6813      	ldr	r3, [r2, #0]
    498c:	f043 0302 	orr.w	r3, r3, #2
    4990:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4992:	f000 fd7f 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4996:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    4998:	4a1d      	ldr	r2, [pc, #116]	; (4a10 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    499a:	f043 0302 	orr.w	r3, r3, #2
    499e:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    49a0:	88a3      	ldrh	r3, [r4, #4]
    49a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    49a6:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    49a8:	8823      	ldrh	r3, [r4, #0]
    49aa:	f043 0302 	orr.w	r3, r3, #2
    49ae:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    49b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    49b2:	0799      	lsls	r1, r3, #30
    49b4:	d4fc      	bmi.n	49b0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    49b6:	2000      	movs	r0, #0
    49b8:	f000 fd6c 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    49bc:	6803      	ldr	r3, [r0, #0]
    49be:	079a      	lsls	r2, r3, #30
    49c0:	d4f9      	bmi.n	49b6 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    49c2:	2001      	movs	r0, #1
    49c4:	f000 fd66 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    49c8:	6803      	ldr	r3, [r0, #0]
    49ca:	079b      	lsls	r3, r3, #30
    49cc:	d4f9      	bmi.n	49c2 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    49ce:	4a10      	ldr	r2, [pc, #64]	; (4a10 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    49d0:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    49d4:	f013 0301 	ands.w	r3, r3, #1
    49d8:	d1fa      	bne.n	49d0 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    49da:	4e14      	ldr	r6, [pc, #80]	; (4a2c <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    49dc:	4c14      	ldr	r4, [pc, #80]	; (4a30 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    49de:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    49e0:	f242 51ff 	movw	r1, #9727	; 0x25ff
    49e4:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    49e8:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    49ea:	8029      	strh	r1, [r5, #0]
    49ec:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    49ee:	8229      	strh	r1, [r5, #16]
    49f0:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    49f2:	806b      	strh	r3, [r5, #2]
    49f4:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    49f6:	826b      	strh	r3, [r5, #18]
    49f8:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    49fa:	80aa      	strh	r2, [r5, #4]
    49fc:	e01a      	b.n	4a34 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    49fe:	bf00      	nop
    4a00:	00022aac 	.word	0x00022aac
    4a04:	41008000 	.word	0x41008000
    4a08:	40001c00 	.word	0x40001c00
    4a0c:	40000800 	.word	0x40000800
    4a10:	43002000 	.word	0x43002000
    4a14:	00204600 	.word	0x00204600
    4a18:	20000afc 	.word	0x20000afc
    4a1c:	43002040 	.word	0x43002040
    4a20:	00204700 	.word	0x00204700
    4a24:	20000b20 	.word	0x20000b20
    4a28:	43002034 	.word	0x43002034
    4a2c:	25ff0000 	.word	0x25ff0000
    4a30:	60f80000 	.word	0x60f80000
    4a34:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    4a36:	82aa      	strh	r2, [r5, #20]
    4a38:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    4a3a:	80eb      	strh	r3, [r5, #6]
    4a3c:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    4a3e:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    4a40:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    4a44:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    4a46:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    4a48:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    4a4a:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    4a4c:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    4a4e:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    4a50:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    4a52:	83eb      	strh	r3, [r5, #30]
}
    4a54:	b005      	add	sp, #20
    4a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    4a58:	88d3      	ldrh	r3, [r2, #6]
    4a5a:	f043 0318 	orr.w	r3, r3, #24
    4a5e:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    4a60:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    4a64:	e723      	b.n	48ae <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    4a66:	88d0      	ldrh	r0, [r2, #6]
    4a68:	f363 00c4 	bfi	r0, r3, #3, #2
    4a6c:	80d0      	strh	r0, [r2, #6]
    4a6e:	e7f7      	b.n	4a60 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    4a70:	88d3      	ldrh	r3, [r2, #6]
    4a72:	2002      	movs	r0, #2
    4a74:	f360 03c4 	bfi	r3, r0, #3, #2
    4a78:	80d3      	strh	r3, [r2, #6]
    4a7a:	e7f1      	b.n	4a60 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

00004a7c <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    4a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    4a80:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    4a84:	2b00      	cmp	r3, #0
    4a86:	f000 80ab 	beq.w	4be0 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    4a8a:	4b89      	ldr	r3, [pc, #548]	; (4cb0 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4a8c:	4604      	mov	r4, r0
    4a8e:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    4a92:	f010 0001 	ands.w	r0, r0, #1
    4a96:	f000 80a5 	beq.w	4be4 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    4a9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4a9c:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    4aa0:	3301      	adds	r3, #1
    4aa2:	4293      	cmp	r3, r2
    4aa4:	6723      	str	r3, [r4, #112]	; 0x70
    4aa6:	d302      	bcc.n	4aae <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    4aa8:	2301      	movs	r3, #1
    4aaa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    4aae:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4ab0:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4ab2:	8821      	ldrh	r1, [r4, #0]
    4ab4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    4ab6:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    4ab8:	fb83 6706 	smull	r6, r7, r3, r6
    4abc:	0bf2      	lsrs	r2, r6, #15
    4abe:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    4ac2:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4ac4:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    4ac8:	fb01 f103 	mul.w	r1, r1, r3
    4acc:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    4ad0:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4ad2:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4ad4:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4ad6:	6262      	str	r2, [r4, #36]	; 0x24
    4ad8:	fb80 8905 	smull	r8, r9, r0, r5
    4adc:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    4ae0:	b2b2      	uxth	r2, r6
    4ae2:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4ae6:	fb02 f000 	mul.w	r0, r2, r0
    4aea:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    4aee:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    4af2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4af4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4af6:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    4af8:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4afa:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4afc:	88a0      	ldrh	r0, [r4, #4]
    4afe:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    4b00:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4b04:	fb81 2302 	smull	r2, r3, r1, r2
    4b08:	0bd2      	lsrs	r2, r2, #15
    4b0a:	b280      	uxth	r0, r0
    4b0c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4b10:	fb00 f101 	mul.w	r1, r0, r1
    4b14:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    4b18:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4b1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4b1e:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    4b20:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4b22:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4b24:	88e1      	ldrh	r1, [r4, #6]
    4b26:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4b2a:	fb86 8903 	smull	r8, r9, r6, r3
    4b2e:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    4b32:	b289      	uxth	r1, r1
    4b34:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4b38:	fb01 f606 	mul.w	r6, r1, r6
    4b3c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    4b40:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    4b44:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4b46:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4b48:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4b4a:	8923      	ldrh	r3, [r4, #8]
    4b4c:	63e1      	str	r1, [r4, #60]	; 0x3c
    4b4e:	fb85 6706 	smull	r6, r7, r5, r6
    4b52:	0bf2      	lsrs	r2, r6, #15
    4b54:	b29b      	uxth	r3, r3
    4b56:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4b5a:	fb03 f505 	mul.w	r5, r3, r5
    4b5e:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    4b62:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    4b66:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4b68:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4b6a:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4b6c:	8961      	ldrh	r1, [r4, #10]
    4b6e:	6462      	str	r2, [r4, #68]	; 0x44
    4b70:	fb80 6706 	smull	r6, r7, r0, r6
    4b74:	0bf3      	lsrs	r3, r6, #15
    4b76:	b28a      	uxth	r2, r1
    4b78:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4b7c:	fb02 f000 	mul.w	r0, r2, r0
    4b80:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    4b84:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    4b88:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4b8a:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4b8c:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4b8e:	89a0      	ldrh	r0, [r4, #12]
    4b90:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    4b94:	6d62      	ldr	r2, [r4, #84]	; 0x54
    4b96:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    4b9a:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    4b9c:	fb83 8902 	smull	r8, r9, r3, r2
    4ba0:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    4ba4:	b280      	uxth	r0, r0
    4ba6:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4baa:	fb00 f303 	mul.w	r3, r0, r3
    4bae:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    4bb2:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    4bb6:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4bb8:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4bba:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4bbe:	89e0      	ldrh	r0, [r4, #14]
    4bc0:	6562      	str	r2, [r4, #84]	; 0x54
    4bc2:	0bf3      	lsrs	r3, r6, #15
    4bc4:	b282      	uxth	r2, r0
    4bc6:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4bca:	fb02 f101 	mul.w	r1, r2, r1
    4bce:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    4bd2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    4bd6:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4bd8:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4bda:	83e2      	strh	r2, [r4, #30]
    4bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    4be4:	f000 fc56 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4be8:	6803      	ldr	r3, [r0, #0]
    4bea:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4bee:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    4bf0:	2e00      	cmp	r6, #0
    4bf2:	f47f af52 	bne.w	4a9a <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    4bf6:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    4bf8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    4bfc:	2501      	movs	r5, #1
    4bfe:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4cbc <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    4c02:	4f2c      	ldr	r7, [pc, #176]	; (4cb4 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    4c04:	e00f      	b.n	4c26 <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    4c06:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    4c0a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    4c0e:	b29b      	uxth	r3, r3
    4c10:	f1c2 010f 	rsb	r1, r2, #15
    4c14:	408b      	lsls	r3, r1
    4c16:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    4c18:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    4c1a:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    4c1e:	462e      	mov	r6, r5
    4c20:	dc0c      	bgt.n	4c3c <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    4c22:	3501      	adds	r5, #1
    4c24:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    4c26:	2d01      	cmp	r5, #1
    4c28:	d1ed      	bne.n	4c06 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    4c2a:	f04f 31ff 	mov.w	r1, #4294967295
    4c2e:	6838      	ldr	r0, [r7, #0]
    4c30:	f001 fff6 	bl	6c20 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    4c34:	0703      	lsls	r3, r0, #28
    4c36:	d5e6      	bpl.n	4c06 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    4c38:	462e      	mov	r6, r5
    4c3a:	e7f2      	b.n	4c22 <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    4c3c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    4c40:	429a      	cmp	r2, r3
    4c42:	d005      	beq.n	4c50 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    4c44:	2b0a      	cmp	r3, #10
    4c46:	d02c      	beq.n	4ca2 <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    4c48:	2b0c      	cmp	r3, #12
    4c4a:	d024      	beq.n	4c96 <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    4c4c:	2b08      	cmp	r3, #8
    4c4e:	d01a      	beq.n	4c86 <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    4c50:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    4c52:	4b19      	ldr	r3, [pc, #100]	; (4cb8 <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    4c54:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    4c56:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    4c5a:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4c5c:	2000      	movs	r0, #0
    4c5e:	f000 fc19 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4c62:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4c64:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4c66:	6813      	ldr	r3, [r2, #0]
    4c68:	f043 0302 	orr.w	r3, r3, #2
    4c6c:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4c6e:	f000 fc11 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4c72:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    4c74:	4a0e      	ldr	r2, [pc, #56]	; (4cb0 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4c76:	f043 0302 	orr.w	r3, r3, #2
    4c7a:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    4c7c:	8893      	ldrh	r3, [r2, #4]
    4c7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    4c82:	8093      	strh	r3, [r2, #4]
    4c84:	e713      	b.n	4aae <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    4c86:	490a      	ldr	r1, [pc, #40]	; (4cb0 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4c88:	88ca      	ldrh	r2, [r1, #6]
    4c8a:	f042 0218 	orr.w	r2, r2, #24
    4c8e:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    4c90:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    4c94:	e7dc      	b.n	4c50 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    4c96:	4a06      	ldr	r2, [pc, #24]	; (4cb0 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4c98:	88d1      	ldrh	r1, [r2, #6]
    4c9a:	f36f 01c4 	bfc	r1, #3, #2
    4c9e:	80d1      	strh	r1, [r2, #6]
    4ca0:	e7f6      	b.n	4c90 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    4ca2:	4a03      	ldr	r2, [pc, #12]	; (4cb0 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4ca4:	88d1      	ldrh	r1, [r2, #6]
    4ca6:	2002      	movs	r0, #2
    4ca8:	f360 01c4 	bfi	r1, r0, #3, #2
    4cac:	80d1      	strh	r1, [r2, #6]
    4cae:	e7ef      	b.n	4c90 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    4cb0:	43002000 	.word	0x43002000
    4cb4:	20000c08 	.word	0x20000c08
    4cb8:	20001b10 	.word	0x20001b10
    4cbc:	20000aec 	.word	0x20000aec

00004cc0 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    4cc0:	2907      	cmp	r1, #7
    4cc2:	dc33      	bgt.n	4d2c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    4cc4:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    4cc6:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    4cc8:	b083      	sub	sp, #12
    4cca:	4605      	mov	r5, r0
    switch (theUnits) {
    4ccc:	d033      	beq.n	4d36 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    4cce:	d336      	bcc.n	4d3e <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    4cd0:	2b02      	cmp	r3, #2
    4cd2:	d12d      	bne.n	4d30 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    4cd4:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    4cd6:	1d0c      	adds	r4, r1, #4
    4cd8:	f016 fe66 	bl	1b9a8 <__aeabi_i2d>
    4cdc:	460b      	mov	r3, r1
    4cde:	4602      	mov	r2, r0
    4ce0:	491a      	ldr	r1, [pc, #104]	; (4d4c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    4ce2:	2000      	movs	r0, #0
    4ce4:	f016 fff0 	bl	1bcc8 <__aeabi_ddiv>
    4ce8:	f017 f9a6 	bl	1c038 <__aeabi_d2f>
    4cec:	ed9f 0a18 	vldr	s0, [pc, #96]	; 4d50 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    4cf0:	ee00 0a90 	vmov	s1, r0
    4cf4:	f015 ff00 	bl	1aaf8 <powf>
    4cf8:	eddf 6a16 	vldr	s13, [pc, #88]	; 4d54 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    4cfc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 4d58 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    4d00:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4d04:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    4d08:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    4d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
    4d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d12:	bf49      	itett	mi
    4d14:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    4d18:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    4d1c:	edcd 7a01 	vstrmi	s15, [sp, #4]
    4d20:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    4d24:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    4d28:	b003      	add	sp, #12
    4d2a:	bd30      	pop	{r4, r5, pc}
        return false;
    4d2c:	2000      	movs	r0, #0
    4d2e:	4770      	bx	lr
            return false;
    4d30:	2000      	movs	r0, #0
}
    4d32:	b003      	add	sp, #12
    4d34:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    4d36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    4d3a:	b290      	uxth	r0, r2
    4d3c:	e7cb      	b.n	4cd6 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    4d3e:	3104      	adds	r1, #4
            return true;
    4d40:	2001      	movs	r0, #1
        m_tc = newTc;
    4d42:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    4d46:	b003      	add	sp, #12
    4d48:	bd30      	pop	{r4, r5, pc}
    4d4a:	bf00      	nop
    4d4c:	3ff00000 	.word	0x3ff00000
    4d50:	3c23d70a 	.word	0x3c23d70a
    4d54:	47000000 	.word	0x47000000
    4d58:	46fffe00 	.word	0x46fffe00

00004d5c <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    4d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    4d5e:	f7ff fc8f 	bl	4680 <_ZN9ClearCore10AdcManager8InstanceEv>
    4d62:	4a0f      	ldr	r2, [pc, #60]	; (4da0 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    4d64:	4b0f      	ldr	r3, [pc, #60]	; (4da4 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    4d66:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    4d68:	2104      	movs	r1, #4
    4d6a:	2205      	movs	r2, #5
    4d6c:	2706      	movs	r7, #6
    4d6e:	2607      	movs	r6, #7
    4d70:	2508      	movs	r5, #8
    4d72:	2409      	movs	r4, #9
    4d74:	200a      	movs	r0, #10
    4d76:	8019      	strh	r1, [r3, #0]
    4d78:	809a      	strh	r2, [r3, #4]
    4d7a:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    4d7e:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    4d80:	811f      	strh	r7, [r3, #8]
    4d82:	819e      	strh	r6, [r3, #12]
    4d84:	821d      	strh	r5, [r3, #16]
    4d86:	829c      	strh	r4, [r3, #20]
    4d88:	8318      	strh	r0, [r3, #24]
    4d8a:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    4d8c:	805a      	strh	r2, [r3, #2]
    4d8e:	80da      	strh	r2, [r3, #6]
    4d90:	815a      	strh	r2, [r3, #10]
    4d92:	81da      	strh	r2, [r3, #14]
    4d94:	825a      	strh	r2, [r3, #18]
    4d96:	82da      	strh	r2, [r3, #22]
    4d98:	835a      	strh	r2, [r3, #26]
    4d9a:	83da      	strh	r2, [r3, #30]
    4d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d9e:	bf00      	nop
    4da0:	20000afc 	.word	0x20000afc
    4da4:	20000b00 	.word	0x20000b00

00004da8 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
        a fault state is not possible and so this function will always
        return false.
    **/
    bool IsInHwFault() override {
        return false;
    }
    4da8:	2000      	movs	r0, #0
    4daa:	4770      	bx	lr

00004dac <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4dac:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4db0:	4770      	bx	lr
    4db2:	bf00      	nop

00004db4 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4db4:	7980      	ldrb	r0, [r0, #6]
    4db6:	4770      	bx	lr

00004db8 <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    4db8:	2003      	movs	r0, #3
    4dba:	4770      	bx	lr

00004dbc <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    4dbc:	2000      	movs	r0, #0
    4dbe:	4770      	bx	lr

00004dc0 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    4dc0:	2000      	movs	r0, #0
    4dc2:	4770      	bx	lr

00004dc4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    4dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4dc6:	7983      	ldrb	r3, [r0, #6]
    4dc8:	428b      	cmp	r3, r1
    4dca:	d072      	beq.n	4eb2 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    4dcc:	2901      	cmp	r1, #1
    4dce:	460c      	mov	r4, r1
    4dd0:	4605      	mov	r5, r0
    4dd2:	d03c      	beq.n	4e4e <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    4dd4:	2902      	cmp	r1, #2
    4dd6:	d135      	bne.n	4e44 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        \brief Atomic set of shift register state fields.

        \param[in] bitsToSet LED bit in the shift register to be set.
    **/
    void ShifterStateSet(Masks bitsToSet) {
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4dd8:	4e37      	ldr	r6, [pc, #220]	; (4eb8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    4dda:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4ddc:	f3bf 8f5b 	dmb	ish
    4de0:	e856 2f00 	ldrex	r2, [r6]
    4de4:	431a      	orrs	r2, r3
    4de6:	e846 2100 	strex	r1, r2, [r6]
    4dea:	2900      	cmp	r1, #0
    4dec:	d1f8      	bne.n	4de0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    4dee:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    4df2:	3ef4      	subs	r6, #244	; 0xf4
    4df4:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    4df8:	b143      	cbz	r3, 4e0c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    4dfa:	4b30      	ldr	r3, [pc, #192]	; (4ebc <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    4dfc:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4dfe:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    4e00:	6e53      	ldr	r3, [r2, #100]	; 0x64
    4e02:	420b      	tst	r3, r1
    4e04:	d0fc      	beq.n	4e00 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    4e06:	4628      	mov	r0, r5
    4e08:	f000 fab0 	bl	536c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    4e0c:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    4e0e:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    4e12:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    4e14:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4e18:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    4e1c:	2001      	movs	r0, #1
    4e1e:	4098      	lsls	r0, r3
    4e20:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4e24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    4e28:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    4e2c:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    4e2e:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    4e32:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4e34:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    4e38:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    4e3c:	4603      	mov	r3, r0
            m_mode = newMode;
    4e3e:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    4e40:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    4e44:	1ae0      	subs	r0, r4, r3
    4e46:	fab0 f080 	clz	r0, r0
    4e4a:	0940      	lsrs	r0, r0, #5
    4e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4e4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4e50:	4e19      	ldr	r6, [pc, #100]	; (4eb8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    4e52:	f3bf 8f5b 	dmb	ish
    4e56:	43db      	mvns	r3, r3
    4e58:	e856 2f00 	ldrex	r2, [r6]
    4e5c:	401a      	ands	r2, r3
    4e5e:	e846 2100 	strex	r1, r2, [r6]
    4e62:	2900      	cmp	r1, #0
    4e64:	d1f8      	bne.n	4e58 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    4e66:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    4e6a:	3ef4      	subs	r6, #244	; 0xf4
    4e6c:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    4e70:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    4e72:	b11b      	cbz	r3, 4e7c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    4e74:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d0fb      	beq.n	4e74 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    4e7c:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4e7e:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    4e82:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    4e84:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4e88:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4e8a:	f003 030f 	and.w	r3, r3, #15
    4e8e:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4e92:	fa00 f303 	lsl.w	r3, r0, r3
    4e96:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    4e98:	4603      	mov	r3, r0
    return (m_mode == newMode);
    4e9a:	1ae0      	subs	r0, r4, r3
    4e9c:	4329      	orrs	r1, r5
    4e9e:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4ea2:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    4ea6:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4eaa:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    4eae:	0940      	lsrs	r0, r0, #5
    4eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    4eb2:	2001      	movs	r0, #1
}
    4eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4eb6:	bf00      	nop
    4eb8:	20001c04 	.word	0x20001c04
    4ebc:	20000afc 	.word	0x20000afc

00004ec0 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    4ec0:	b570      	push	{r4, r5, r6, lr}
    4ec2:	4604      	mov	r4, r0
    4ec4:	4616      	mov	r6, r2
      m_analogValid(false) {}
    4ec6:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    4ec8:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    4ecc:	f000 fa06 	bl	52dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4ed0:	2300      	movs	r3, #0
    4ed2:	4a05      	ldr	r2, [pc, #20]	; (4ee8 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    4ed4:	6326      	str	r6, [r4, #48]	; 0x30
    4ed6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    4eda:	6022      	str	r2, [r4, #0]
    4edc:	63a3      	str	r3, [r4, #56]	; 0x38
    4ede:	63e3      	str	r3, [r4, #60]	; 0x3c
    4ee0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    4ee4:	4620      	mov	r0, r4
    4ee6:	bd70      	pop	{r4, r5, r6, pc}
    4ee8:	00022b24 	.word	0x00022b24

00004eec <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    4eec:	7982      	ldrb	r2, [r0, #6]
    4eee:	2a01      	cmp	r2, #1
    4ef0:	d004      	beq.n	4efc <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    4ef2:	2a02      	cmp	r2, #2
    4ef4:	d101      	bne.n	4efa <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    4ef6:	f000 b941 	b.w	517c <_ZN9ClearCore9DigitalIn7RefreshEv>
    4efa:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    4efc:	4a17      	ldr	r2, [pc, #92]	; (4f5c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    4efe:	6b01      	ldr	r1, [r0, #48]	; 0x30
    4f00:	6812      	ldr	r2, [r2, #0]
    4f02:	4603      	mov	r3, r0
    4f04:	6e50      	ldr	r0, [r2, #100]	; 0x64
    4f06:	4208      	tst	r0, r1
    4f08:	d126      	bne.n	4f58 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    4f0a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    4f0e:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    4f10:	b991      	cbnz	r1, 4f38 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    4f12:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4f14:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    4f18:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    4f1a:	2c07      	cmp	r4, #7
    4f1c:	b280      	uxth	r0, r0
    4f1e:	dc07      	bgt.n	4f30 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    4f20:	0400      	lsls	r0, r0, #16
    4f22:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    4f26:	3408      	adds	r4, #8
        return (m_z >> 16);
    4f28:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    4f2a:	6270      	str	r0, [r6, #36]	; 0x24
    4f2c:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    4f30:	2201      	movs	r2, #1
    4f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    4f36:	e000      	b.n	4f3a <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    4f38:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    4f3a:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    4f3c:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    4f3e:	4908      	ldr	r1, [pc, #32]	; (4f60 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    4f40:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    4f44:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    4f48:	b2d8      	uxtb	r0, r3
    4f4a:	440a      	add	r2, r1
    4f4c:	2802      	cmp	r0, #2
    4f4e:	bfd8      	it	le
    4f50:	2300      	movle	r3, #0
    4f52:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    4f56:	bc70      	pop	{r4, r5, r6}
    4f58:	4770      	bx	lr
    4f5a:	bf00      	nop
    4f5c:	20000afc 	.word	0x20000afc
    4f60:	20001b10 	.word	0x20001b10

00004f64 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    4f64:	4b29      	ldr	r3, [pc, #164]	; (500c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    4f66:	b570      	push	{r4, r5, r6, lr}
    4f68:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    4f6a:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    4f6c:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    4f6e:	4628      	mov	r0, r5
    4f70:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    4f74:	2301      	movs	r3, #1
    4f76:	2202      	movs	r2, #2
    4f78:	f7ff fea2 	bl	4cc0 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    4f7c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    4f80:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    4f82:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    4f86:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    4f88:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    4f8a:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    4f8c:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    4f8e:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    4f90:	4620      	mov	r0, r4
    4f92:	f000 f88d 	bl	50b0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    4f96:	6823      	ldr	r3, [r4, #0]
    4f98:	4a1d      	ldr	r2, [pc, #116]	; (5010 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    4f9a:	685b      	ldr	r3, [r3, #4]
    4f9c:	4293      	cmp	r3, r2
    4f9e:	d130      	bne.n	5002 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    4fa0:	79a3      	ldrb	r3, [r4, #6]
    4fa2:	2b01      	cmp	r3, #1
    4fa4:	d02c      	beq.n	5000 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4fa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4fa8:	4a1a      	ldr	r2, [pc, #104]	; (5014 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    4faa:	f3bf 8f5b 	dmb	ish
    4fae:	43db      	mvns	r3, r3
    4fb0:	e852 1f00 	ldrex	r1, [r2]
    4fb4:	4019      	ands	r1, r3
    4fb6:	e842 1000 	strex	r0, r1, [r2]
    4fba:	2800      	cmp	r0, #0
    4fbc:	d1f8      	bne.n	4fb0 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    4fbe:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    4fc2:	3af4      	subs	r2, #244	; 0xf4
    4fc4:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    4fc8:	2101      	movs	r1, #1
    4fca:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    4fcc:	b11b      	cbz	r3, 4fd6 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    4fce:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d0fb      	beq.n	4fce <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    4fd6:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4fd8:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    4fdc:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    4fde:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4fe2:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4fe6:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4fe8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4fec:	408b      	lsls	r3, r1
    4fee:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    4ff0:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4ff2:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4ff6:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    4ffa:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    4ffe:	bd70      	pop	{r4, r5, r6, pc}
    5000:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    5002:	4620      	mov	r0, r4
    5004:	2101      	movs	r1, #1
}
    5006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    500a:	4718      	bx	r3
    500c:	20000afc 	.word	0x20000afc
    5010:	00004dc5 	.word	0x00004dc5
    5014:	20001c04 	.word	0x20001c04

00005018 <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    5018:	7982      	ldrb	r2, [r0, #6]
    501a:	2a01      	cmp	r2, #1
    501c:	d005      	beq.n	502a <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    501e:	2a02      	cmp	r2, #2
    5020:	d101      	bne.n	5026 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    5022:	f000 b831 	b.w	5088 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    5026:	2000      	movs	r0, #0
    5028:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    502a:	4b0b      	ldr	r3, [pc, #44]	; (5058 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    502c:	b510      	push	{r4, lr}
    502e:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    5030:	6818      	ldr	r0, [r3, #0]
    5032:	f001 fdfb 	bl	6c2c <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    5036:	b958      	cbnz	r0, 5050 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    5038:	4b08      	ldr	r3, [pc, #32]	; (505c <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    503a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    503c:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    503e:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    5040:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    5044:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    5046:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    504a:	4118      	asrs	r0, r3
    504c:	b200      	sxth	r0, r0
    504e:	bd10      	pop	{r4, pc}
                state = -1;
    5050:	f04f 30ff 	mov.w	r0, #4294967295
}
    5054:	bd10      	pop	{r4, pc}
    5056:	bf00      	nop
    5058:	20000c08 	.word	0x20000c08
    505c:	20000afc 	.word	0x20000afc

00005060 <_ZN9ClearCore9Connector4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() {
        return m_mode;
    }
    5060:	7980      	ldrb	r0, [r0, #6]
    5062:	4770      	bx	lr

00005064 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    5064:	f04f 30ff 	mov.w	r0, #4294967295
    5068:	4770      	bx	lr
    506a:	bf00      	nop

0000506c <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    506c:	7980      	ldrb	r0, [r0, #6]
    506e:	4770      	bx	lr

00005070 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    5070:	2902      	cmp	r1, #2
            m_mode = newMode;
    5072:	bf06      	itte	eq
    5074:	7181      	strbeq	r1, [r0, #6]
            return true;
    5076:	2001      	moveq	r0, #1
            return false;
    5078:	2000      	movne	r0, #0
    }
    507a:	4770      	bx	lr

0000507c <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    507c:	2000      	movs	r0, #0
    507e:	4770      	bx	lr

00005080 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    5080:	2000      	movs	r0, #0
    5082:	4770      	bx	lr

00005084 <_ZN9ClearCore9DigitalIn5StateEs>:
    }
    5084:	2000      	movs	r0, #0
    5086:	4770      	bx	lr

00005088 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    5088:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    508a:	b113      	cbz	r3, 5092 <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    508c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    5090:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    5092:	4b06      	ldr	r3, [pc, #24]	; (50ac <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    5094:	68c1      	ldr	r1, [r0, #12]
    5096:	681a      	ldr	r2, [r3, #0]
    5098:	6943      	ldr	r3, [r0, #20]
    509a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    509e:	6812      	ldr	r2, [r2, #0]
    50a0:	421a      	tst	r2, r3
    50a2:	bf0c      	ite	eq
    50a4:	2001      	moveq	r0, #1
    50a6:	2000      	movne	r0, #0
    50a8:	4770      	bx	lr
    50aa:	bf00      	nop
    50ac:	20000bfc 	.word	0x20000bfc

000050b0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    50b0:	4b2e      	ldr	r3, [pc, #184]	; (516c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    50b2:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    50b4:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    50b8:	68c3      	ldr	r3, [r0, #12]
    50ba:	6904      	ldr	r4, [r0, #16]
    50bc:	01da      	lsls	r2, r3, #7
    50be:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    50c2:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    50c4:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    50c8:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    50cc:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    50ce:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    50d2:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    50d6:	d034      	beq.n	5142 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    50d8:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    50dc:	f366 1707 	bfi	r7, r6, #4, #4
    50e0:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    50e4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    50e8:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    50ea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    50ee:	4422      	add	r2, r4
    if (m_interruptAvail) {
    50f0:	2d00      	cmp	r5, #0
    50f2:	d134      	bne.n	515e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    50f4:	2402      	movs	r4, #2
    50f6:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    50fa:	4a1d      	ldr	r2, [pc, #116]	; (5170 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    50fc:	6884      	ldr	r4, [r0, #8]
    50fe:	6812      	ldr	r2, [r2, #0]
    5100:	4e1c      	ldr	r6, [pc, #112]	; (5174 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    5102:	3306      	adds	r3, #6
    5104:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    5106:	f1a3 050c 	sub.w	r5, r3, #12
    510a:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    510c:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    510e:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    5110:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    5112:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    5114:	6242      	str	r2, [r0, #36]	; 0x24
    5116:	43e4      	mvns	r4, r4
    5118:	f3bf 8f5b 	dmb	ish
    511c:	e856 3f00 	ldrex	r3, [r6]
    5120:	4023      	ands	r3, r4
    5122:	e846 3200 	strex	r2, r3, [r6]
    5126:	2a00      	cmp	r2, #0
    5128:	d1f8      	bne.n	511c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    512a:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    512e:	6803      	ldr	r3, [r0, #0]
    5130:	4a11      	ldr	r2, [pc, #68]	; (5178 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    5132:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    5134:	8081      	strh	r1, [r0, #4]
    5136:	4293      	cmp	r3, r2
    5138:	d115      	bne.n	5166 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    513a:	2302      	movs	r3, #2
    513c:	7183      	strb	r3, [r0, #6]
}
    513e:	bcf0      	pop	{r4, r5, r6, r7}
    5140:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5142:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    5146:	f367 0603 	bfi	r6, r7, #0, #4
    514a:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    514e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    5152:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    5154:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    5158:	4422      	add	r2, r4
    if (m_interruptAvail) {
    515a:	2d00      	cmp	r5, #0
    515c:	d0ca      	beq.n	50f4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    515e:	2403      	movs	r4, #3
    5160:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    5164:	e7c9      	b.n	50fa <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    5166:	2102      	movs	r1, #2
}
    5168:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    516a:	4718      	bx	r3
    516c:	00010003 	.word	0x00010003
    5170:	20000bfc 	.word	0x20000bfc
    5174:	20001c04 	.word	0x20001c04
    5178:	00005071 	.word	0x00005071

0000517c <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    517c:	69c2      	ldr	r2, [r0, #28]
    517e:	6943      	ldr	r3, [r0, #20]
    5180:	6812      	ldr	r2, [r2, #0]
    5182:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    5184:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    5186:	d005      	beq.n	5194 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    5188:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    518a:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    518c:	2a00      	cmp	r2, #0
    518e:	d039      	beq.n	5204 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    5190:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    5194:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    5196:	2a00      	cmp	r2, #0
    5198:	d0fa      	beq.n	5190 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    519a:	3a01      	subs	r2, #1
    519c:	b292      	uxth	r2, r2
    519e:	8582      	strh	r2, [r0, #44]	; 0x2c
    51a0:	2a00      	cmp	r2, #0
    51a2:	d1f5      	bne.n	5190 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    51a4:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    51a6:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    51a8:	6809      	ldr	r1, [r1, #0]
    51aa:	400b      	ands	r3, r1
    51ac:	2b00      	cmp	r3, #0
    51ae:	bf0c      	ite	eq
    51b0:	2301      	moveq	r3, #1
    51b2:	2300      	movne	r3, #0
    51b4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    51b8:	d053      	beq.n	5262 <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    51ba:	f3bf 8f5b 	dmb	ish
    51be:	4b41      	ldr	r3, [pc, #260]	; (52c4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    51c0:	43d2      	mvns	r2, r2
    51c2:	e853 1f00 	ldrex	r1, [r3]
    51c6:	4011      	ands	r1, r2
    51c8:	e843 1e00 	strex	lr, r1, [r3]
    51cc:	f1be 0f00 	cmp.w	lr, #0
    51d0:	d1f7      	bne.n	51c2 <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    51d2:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    51d6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    51da:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    51de:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    51e0:	2b00      	cmp	r3, #0
    51e2:	d14a      	bne.n	527a <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    51e4:	f3bf 8f5b 	dmb	ish
    51e8:	2301      	movs	r3, #1
    51ea:	408b      	lsls	r3, r1
    51ec:	43db      	mvns	r3, r3
    51ee:	e852 1f00 	ldrex	r1, [r2]
    51f2:	4019      	ands	r1, r3
    51f4:	e842 1000 	strex	r0, r1, [r2]
    51f8:	2800      	cmp	r0, #0
    51fa:	d1f8      	bne.n	51ee <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    51fc:	f3bf 8f5b 	dmb	ish
}
    5200:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    5204:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    5206:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    5208:	6809      	ldr	r1, [r1, #0]
    520a:	400b      	ands	r3, r1
    520c:	2b00      	cmp	r3, #0
    520e:	bf0c      	ite	eq
    5210:	2301      	moveq	r3, #1
    5212:	2300      	movne	r3, #0
    5214:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    5218:	d047      	beq.n	52aa <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    521a:	f3bf 8f5b 	dmb	ish
    521e:	4b29      	ldr	r3, [pc, #164]	; (52c4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    5220:	43d2      	mvns	r2, r2
    5222:	e853 1f00 	ldrex	r1, [r3]
    5226:	4011      	ands	r1, r2
    5228:	e843 1e00 	strex	lr, r1, [r3]
    522c:	f1be 0f00 	cmp.w	lr, #0
    5230:	d1f7      	bne.n	5222 <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    5232:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    5236:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    523a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    523e:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    5240:	bb3b      	cbnz	r3, 5292 <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    5242:	f3bf 8f5b 	dmb	ish
    5246:	2301      	movs	r3, #1
    5248:	408b      	lsls	r3, r1
    524a:	43db      	mvns	r3, r3
    524c:	e852 1f00 	ldrex	r1, [r2]
    5250:	4019      	ands	r1, r3
    5252:	e842 1000 	strex	r0, r1, [r2]
    5256:	2800      	cmp	r0, #0
    5258:	d1f8      	bne.n	524c <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    525a:	f3bf 8f5b 	dmb	ish
}
    525e:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5262:	4b18      	ldr	r3, [pc, #96]	; (52c4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    5264:	f3bf 8f5b 	dmb	ish
    5268:	e853 1f00 	ldrex	r1, [r3]
    526c:	4311      	orrs	r1, r2
    526e:	e843 1e00 	strex	lr, r1, [r3]
    5272:	f1be 0f00 	cmp.w	lr, #0
    5276:	d0ac      	beq.n	51d2 <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    5278:	e7f6      	b.n	5268 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    527a:	2301      	movs	r3, #1
    527c:	408b      	lsls	r3, r1
    527e:	f3bf 8f5b 	dmb	ish
    5282:	e852 1f00 	ldrex	r1, [r2]
    5286:	4319      	orrs	r1, r3
    5288:	e842 1000 	strex	r0, r1, [r2]
    528c:	2800      	cmp	r0, #0
    528e:	d0e4      	beq.n	525a <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    5290:	e7f7      	b.n	5282 <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    5292:	2301      	movs	r3, #1
    5294:	408b      	lsls	r3, r1
    5296:	f3bf 8f5b 	dmb	ish
    529a:	e852 1f00 	ldrex	r1, [r2]
    529e:	4319      	orrs	r1, r3
    52a0:	e842 1000 	strex	r0, r1, [r2]
    52a4:	2800      	cmp	r0, #0
    52a6:	d0d8      	beq.n	525a <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    52a8:	e7f7      	b.n	529a <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    52aa:	4b06      	ldr	r3, [pc, #24]	; (52c4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    52ac:	f3bf 8f5b 	dmb	ish
    52b0:	e853 1f00 	ldrex	r1, [r3]
    52b4:	4311      	orrs	r1, r2
    52b6:	e843 1e00 	strex	lr, r1, [r3]
    52ba:	f1be 0f00 	cmp.w	lr, #0
    52be:	d0b8      	beq.n	5232 <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    52c0:	e7f6      	b.n	52b0 <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    52c2:	bf00      	nop
    52c4:	20001c04 	.word	0x20001c04

000052c8 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    52c8:	4a03      	ldr	r2, [pc, #12]	; (52d8 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    52ca:	6002      	str	r2, [r0, #0]
    52cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    52d0:	2200      	movs	r2, #0
    52d2:	8081      	strh	r1, [r0, #4]
    52d4:	7182      	strb	r2, [r0, #6]
    52d6:	4770      	bx	lr
    52d8:	00022b54 	.word	0x00022b54

000052dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    52dc:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    52de:	f992 4001 	ldrsb.w	r4, [r2, #1]
    52e2:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    52e4:	4d0d      	ldr	r5, [pc, #52]	; (531c <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    52e6:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    52e8:	2400      	movs	r4, #0
    52ea:	f64f 76ff 	movw	r6, #65535	; 0xffff
    52ee:	8086      	strh	r6, [r0, #4]
    52f0:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    52f2:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    52f4:	7895      	ldrb	r5, [r2, #2]
    52f6:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    52f8:	2101      	movs	r1, #1
    52fa:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    52fc:	6141      	str	r1, [r0, #20]
    52fe:	78d1      	ldrb	r1, [r2, #3]
    5300:	7601      	strb	r1, [r0, #24]
    5302:	7911      	ldrb	r1, [r2, #4]
    5304:	4a06      	ldr	r2, [pc, #24]	; (5320 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    5306:	61c4      	str	r4, [r0, #28]
    5308:	6204      	str	r4, [r0, #32]
    530a:	6244      	str	r4, [r0, #36]	; 0x24
    530c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    5310:	7641      	strb	r1, [r0, #25]
    5312:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    5316:	bc70      	pop	{r4, r5, r6}
    5318:	4770      	bx	lr
    531a:	bf00      	nop
    531c:	00022b84 	.word	0x00022b84
    5320:	00010003 	.word	0x00010003

00005324 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    5324:	4b05      	ldr	r3, [pc, #20]	; (533c <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    5326:	68c1      	ldr	r1, [r0, #12]
    5328:	681a      	ldr	r2, [r3, #0]
    532a:	6943      	ldr	r3, [r0, #20]
    532c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    5330:	6812      	ldr	r2, [r2, #0]
    5332:	421a      	tst	r2, r3
}
    5334:	bf0c      	ite	eq
    5336:	2001      	moveq	r0, #1
    5338:	2000      	movne	r0, #0
    533a:	4770      	bx	lr
    533c:	20000bfc 	.word	0x20000bfc

00005340 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb>:
                                    bool enable) {
    5340:	b530      	push	{r4, r5, lr}
    5342:	4604      	mov	r4, r0
    if (!m_interruptAvail) {
    5344:	7e40      	ldrb	r0, [r0, #25]
                                    bool enable) {
    5346:	b083      	sub	sp, #12
    if (!m_interruptAvail) {
    5348:	b158      	cbz	r0, 5362 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb+0x22>
    return InputMgr.InterruptHandlerSet(m_extInt, callback, trigger, enable);
    534a:	4807      	ldr	r0, [pc, #28]	; (5368 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb+0x28>)
    534c:	461d      	mov	r5, r3
    534e:	4613      	mov	r3, r2
    5350:	460a      	mov	r2, r1
    5352:	f994 1018 	ldrsb.w	r1, [r4, #24]
    5356:	6800      	ldr	r0, [r0, #0]
    5358:	9500      	str	r5, [sp, #0]
    535a:	2400      	movs	r4, #0
    535c:	9401      	str	r4, [sp, #4]
    535e:	f000 f8ef 	bl	5540 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb>
}
    5362:	b003      	add	sp, #12
    5364:	bd30      	pop	{r4, r5, pc}
    5366:	bf00      	nop
    5368:	20000bfc 	.word	0x20000bfc

0000536c <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    536c:	6a03      	ldr	r3, [r0, #32]
    536e:	6941      	ldr	r1, [r0, #20]
    5370:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    5372:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    5374:	400b      	ands	r3, r1
    5376:	2b00      	cmp	r3, #0
    5378:	bf0c      	ite	eq
    537a:	2301      	moveq	r3, #1
    537c:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    537e:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    5380:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    5384:	d023      	beq.n	53ce <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5386:	f3bf 8f5b 	dmb	ish
    538a:	4b1e      	ldr	r3, [pc, #120]	; (5404 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    538c:	43d2      	mvns	r2, r2
    538e:	e853 1f00 	ldrex	r1, [r3]
    5392:	4011      	ands	r1, r2
    5394:	e843 1e00 	strex	lr, r1, [r3]
    5398:	f1be 0f00 	cmp.w	lr, #0
    539c:	d1f7      	bne.n	538e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    539e:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    53a2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    53a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    53aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    53ac:	b9db      	cbnz	r3, 53e6 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    53ae:	f3bf 8f5b 	dmb	ish
    53b2:	2301      	movs	r3, #1
    53b4:	408b      	lsls	r3, r1
    53b6:	43db      	mvns	r3, r3
    53b8:	e852 1f00 	ldrex	r1, [r2]
    53bc:	4019      	ands	r1, r3
    53be:	e842 1000 	strex	r0, r1, [r2]
    53c2:	2800      	cmp	r0, #0
    53c4:	d1f8      	bne.n	53b8 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    53c6:	f3bf 8f5b 	dmb	ish
    53ca:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    53ce:	4b0d      	ldr	r3, [pc, #52]	; (5404 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    53d0:	f3bf 8f5b 	dmb	ish
    53d4:	e853 1f00 	ldrex	r1, [r3]
    53d8:	4311      	orrs	r1, r2
    53da:	e843 1e00 	strex	lr, r1, [r3]
    53de:	f1be 0f00 	cmp.w	lr, #0
    53e2:	d0dc      	beq.n	539e <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    53e4:	e7f6      	b.n	53d4 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    53e6:	2301      	movs	r3, #1
    53e8:	408b      	lsls	r3, r1
    53ea:	f3bf 8f5b 	dmb	ish
    53ee:	e852 1f00 	ldrex	r1, [r2]
    53f2:	4319      	orrs	r1, r3
    53f4:	e842 1000 	strex	r0, r1, [r2]
    53f8:	2800      	cmp	r0, #0
    53fa:	d1f8      	bne.n	53ee <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    53fc:	f3bf 8f5b 	dmb	ish
    5400:	f85d fb04 	ldr.w	pc, [sp], #4
    5404:	20001c04 	.word	0x20001c04

00005408 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    5408:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    540a:	4c07      	ldr	r4, [pc, #28]	; (5428 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    540c:	6823      	ldr	r3, [r4, #0]
    540e:	07db      	lsls	r3, r3, #31
    5410:	d502      	bpl.n	5418 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    5412:	4b06      	ldr	r3, [pc, #24]	; (542c <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    5414:	6818      	ldr	r0, [r3, #0]
    5416:	bd10      	pop	{r4, pc}
    5418:	2001      	movs	r0, #1
    541a:	f00d ff05 	bl	13228 <_Znwj>
    541e:	4a03      	ldr	r2, [pc, #12]	; (542c <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    5420:	2301      	movs	r3, #1
    5422:	6010      	str	r0, [r2, #0]
    5424:	6023      	str	r3, [r4, #0]
    return *instance;
}
    5426:	bd10      	pop	{r4, pc}
    5428:	20000b24 	.word	0x20000b24
    542c:	20000bf4 	.word	0x20000bf4

00005430 <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    5430:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    5432:	4a13      	ldr	r2, [pc, #76]	; (5480 <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    5434:	4913      	ldr	r1, [pc, #76]	; (5484 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    5436:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    5438:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    543a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    543e:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    5440:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    5442:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    5444:	8813      	ldrh	r3, [r2, #0]
    5446:	b29b      	uxth	r3, r3
    5448:	2b01      	cmp	r3, #1
    544a:	d0fb      	beq.n	5444 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    544c:	4b0e      	ldr	r3, [pc, #56]	; (5488 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    544e:	4d0f      	ldr	r5, [pc, #60]	; (548c <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    5450:	4c0f      	ldr	r4, [pc, #60]	; (5490 <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    5452:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5456:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    5458:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    545c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5460:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    5464:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    5466:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    5468:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    546a:	7b51      	ldrb	r1, [r2, #13]
    546c:	f041 0101 	orr.w	r1, r1, #1
    5470:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5472:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    5474:	6913      	ldr	r3, [r2, #16]
    5476:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    547a:	6113      	str	r3, [r2, #16]
}
    547c:	bc70      	pop	{r4, r5, r6}
    547e:	4770      	bx	lr
    5480:	40000800 	.word	0x40000800
    5484:	4100a000 	.word	0x4100a000
    5488:	e000e100 	.word	0xe000e100
    548c:	20000b30 	.word	0x20000b30
    5490:	20000b90 	.word	0x20000b90

00005494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    5494:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    5496:	bfda      	itte	le
    5498:	4b02      	ldrle	r3, [pc, #8]	; (54a4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    549a:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    549e:	2000      	movgt	r0, #0
}
    54a0:	4770      	bx	lr
    54a2:	bf00      	nop
    54a4:	4100a040 	.word	0x4100a040

000054a8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    54a8:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    54aa:	bfda      	itte	le
    54ac:	4b02      	ldrle	r3, [pc, #8]	; (54b8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    54ae:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    54b2:	2000      	movgt	r0, #0
}
    54b4:	4770      	bx	lr
    54b6:	bf00      	nop
    54b8:	20000b30 	.word	0x20000b30

000054bc <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    54bc:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    54be:	f7ff ffa3 	bl	5408 <_ZN9ClearCore10DmaManager8InstanceEv>
    54c2:	4b01      	ldr	r3, [pc, #4]	; (54c8 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    54c4:	6018      	str	r0, [r3, #0]
    54c6:	bd08      	pop	{r3, pc}
    54c8:	20000bf0 	.word	0x20000bf0

000054cc <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    54cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    54ce:	4e14      	ldr	r6, [pc, #80]	; (5520 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    54d0:	6834      	ldr	r4, [r6, #0]
    54d2:	f014 0401 	ands.w	r4, r4, #1
    54d6:	d002      	beq.n	54de <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    54d8:	4b12      	ldr	r3, [pc, #72]	; (5524 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    54da:	6818      	ldr	r0, [r3, #0]
    54dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54de:	2080      	movs	r0, #128	; 0x80
    54e0:	f00d fea2 	bl	13228 <_Znwj>
    54e4:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    54e6:	2701      	movs	r7, #1
    54e8:	2240      	movs	r2, #64	; 0x40
    54ea:	602c      	str	r4, [r5, #0]
    54ec:	606c      	str	r4, [r5, #4]
    54ee:	60ac      	str	r4, [r5, #8]
    54f0:	60ec      	str	r4, [r5, #12]
    54f2:	612c      	str	r4, [r5, #16]
    54f4:	616c      	str	r4, [r5, #20]
    54f6:	4621      	mov	r1, r4
    54f8:	61ac      	str	r4, [r5, #24]
    54fa:	61ec      	str	r4, [r5, #28]
    54fc:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    54fe:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    5500:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    5502:	62ec      	str	r4, [r5, #44]	; 0x2c
    5504:	632c      	str	r4, [r5, #48]	; 0x30
    5506:	636c      	str	r4, [r5, #52]	; 0x34
    5508:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    550c:	303c      	adds	r0, #60	; 0x3c
    550e:	f018 ff6d 	bl	1e3ec <memset>
    static InputManager *instance = new InputManager();
    5512:	4b04      	ldr	r3, [pc, #16]	; (5524 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    5514:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    5518:	6037      	str	r7, [r6, #0]
    551a:	601d      	str	r5, [r3, #0]
    551c:	4628      	mov	r0, r5
}
    551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5520:	20000bf8 	.word	0x20000bf8
    5524:	20000c00 	.word	0x20000c00

00005528 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    5528:	4902      	ldr	r1, [pc, #8]	; (5534 <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    552a:	4a03      	ldr	r2, [pc, #12]	; (5538 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    552c:	4b03      	ldr	r3, [pc, #12]	; (553c <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    552e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    5532:	4770      	bx	lr
    5534:	41008020 	.word	0x41008020
    5538:	410080a0 	.word	0x410080a0
    553c:	41008120 	.word	0x41008120

00005540 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb>:
    }
}

bool InputManager::InterruptHandlerSet(int8_t extInt, voidFuncPtr callback,
                                       InterruptTrigger trigger, bool enable,
                                       bool oneTime) {
    5540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    5544:	b2cc      	uxtb	r4, r1
    5546:	2c0f      	cmp	r4, #15
                                       bool oneTime) {
    5548:	f89d 701c 	ldrb.w	r7, [sp, #28]
    554c:	f89d e020 	ldrb.w	lr, [sp, #32]
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    5550:	d870      	bhi.n	5634 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xf4>
        return false; // Invalid external interrupt number
    }

    EIC->CTRLA.bit.ENABLE = 0;
    5552:	4d3c      	ldr	r5, [pc, #240]	; (5644 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    5554:	782c      	ldrb	r4, [r5, #0]
    5556:	f36f 0441 	bfc	r4, #1, #1
    555a:	702c      	strb	r4, [r5, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    555c:	686c      	ldr	r4, [r5, #4]
    555e:	f014 0402 	ands.w	r4, r4, #2
    5562:	d1fb      	bne.n	555c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x1c>

    // Clear any existing interrupt flag
    EIC->INTFLAG.reg = (1UL << extInt);
    5564:	2601      	movs	r6, #1
    5566:	408e      	lsls	r6, r1
    5568:	616e      	str	r6, [r5, #20]

    if (callback != nullptr) {
    556a:	2a00      	cmp	r2, #0
    556c:	d068      	beq.n	5640 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x100>
    556e:	10cd      	asrs	r5, r1, #3
    5570:	00ad      	lsls	r5, r5, #2
    5572:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    5576:	f505 5520 	add.w	r5, r5, #10240	; 0x2800
        // Clear the existing interrupt trigger condition
        uint8_t shiftAmt = 4 * (extInt % 8);
    557a:	f001 0c07 	and.w	ip, r1, #7
        EIC->CONFIG[extInt / 8].reg &= ~(0xf << shiftAmt);
    557e:	f8d5 801c 	ldr.w	r8, [r5, #28]
    5582:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    5586:	f04f 090f 	mov.w	r9, #15
    558a:	fa09 f90c 	lsl.w	r9, r9, ip
    558e:	b2db      	uxtb	r3, r3
    5590:	ea28 0809 	bic.w	r8, r8, r9
    5594:	2b04      	cmp	r3, #4
    5596:	f8c5 801c 	str.w	r8, [r5, #28]
    559a:	d945      	bls.n	5628 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xe8>

        // Set the interrupt trigger condition
        EIC->CONFIG[extInt / 8].reg |=
            static_cast<uint32_t>(EicSense(trigger) << shiftAmt);
    559c:	69eb      	ldr	r3, [r5, #28]
    559e:	431c      	orrs	r4, r3
        EIC->CONFIG[extInt / 8].reg |=
    55a0:	61ec      	str	r4, [r5, #28]
    }
    else {
        enable = false;
    }

    m_interruptServiceRoutines[extInt] = callback;
    55a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2

    if (oneTime) {
        m_oneTimeFlags |= (1UL << extInt);
    55a6:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    m_interruptServiceRoutines[extInt] = callback;
    55aa:	63ca      	str	r2, [r1, #60]	; 0x3c
    if (oneTime) {
    55ac:	f1be 0f00 	cmp.w	lr, #0
    55b0:	d11f      	bne.n	55f2 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xb2>
    }
    else  {
        m_oneTimeFlags &= ~(1UL << extInt);
    55b2:	ea23 0306 	bic.w	r3, r3, r6
    55b6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
                                   bool clearPending) {
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
        return; // Invalid external interrupt number
    }

    if (enable) {
    55ba:	b307      	cbz	r7, 55fe <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xbe>
        if (clearPending) {
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    55bc:	f3bf 8f5b 	dmb	ish
    55c0:	f100 0334 	add.w	r3, r0, #52	; 0x34
    55c4:	e853 2f00 	ldrex	r2, [r3]
    55c8:	4332      	orrs	r2, r6
    55ca:	e843 2100 	strex	r1, r2, [r3]
    55ce:	2900      	cmp	r1, #0
    55d0:	d1f8      	bne.n	55c4 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x84>
    55d2:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    55d6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    55da:	bb73      	cbnz	r3, 563a <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xfa>
    EIC->CTRLA.bit.ENABLE = 1;
    55dc:	4a19      	ldr	r2, [pc, #100]	; (5644 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    55de:	7813      	ldrb	r3, [r2, #0]
    55e0:	f043 0302 	orr.w	r3, r3, #2
    55e4:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    55e6:	6853      	ldr	r3, [r2, #4]
    55e8:	079b      	lsls	r3, r3, #30
    55ea:	d4fc      	bmi.n	55e6 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xa6>
    return true;
    55ec:	2001      	movs	r0, #1
    55ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        m_oneTimeFlags |= (1UL << extInt);
    55f2:	4333      	orrs	r3, r6
    55f4:	b29b      	uxth	r3, r3
    55f6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    if (enable) {
    55fa:	2f00      	cmp	r7, #0
    55fc:	d1de      	bne.n	55bc <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x7c>
            EIC->INTENSET.reg = (1UL << extInt);
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    55fe:	f3bf 8f5b 	dmb	ish
    5602:	43f3      	mvns	r3, r6
    5604:	f100 0234 	add.w	r2, r0, #52	; 0x34
    5608:	e852 1f00 	ldrex	r1, [r2]
    560c:	4019      	ands	r1, r3
    560e:	e842 1400 	strex	r4, r1, [r2]
    5612:	2c00      	cmp	r4, #0
    5614:	d1f8      	bne.n	5608 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xc8>
    5616:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    561a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    561e:	2b00      	cmp	r3, #0
    5620:	d0dc      	beq.n	55dc <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
            EIC->INTENCLR.reg = (1UL << extInt);
    5622:	4b08      	ldr	r3, [pc, #32]	; (5644 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    5624:	60de      	str	r6, [r3, #12]
    5626:	e7d9      	b.n	55dc <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
    5628:	4c07      	ldr	r4, [pc, #28]	; (5648 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x108>)
    562a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
    562e:	fa04 f40c 	lsl.w	r4, r4, ip
    5632:	e7b3      	b.n	559c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x5c>
        return false; // Invalid external interrupt number
    5634:	2000      	movs	r0, #0
}
    5636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            EIC->INTENSET.reg = (1UL << extInt);
    563a:	4b02      	ldr	r3, [pc, #8]	; (5644 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    563c:	611e      	str	r6, [r3, #16]
    563e:	e7cd      	b.n	55dc <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
        enable = false;
    5640:	4617      	mov	r7, r2
    5642:	e7ae      	b.n	55a2 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x62>
    5644:	40002800 	.word	0x40002800
    5648:	00022bac 	.word	0x00022bac

0000564c <_ZN9ClearCore12InputManager15InterruptEnableEabb>:
                                   bool clearPending) {
    564c:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    564e:	b2cc      	uxtb	r4, r1
    5650:	2c0f      	cmp	r4, #15
    5652:	d82e      	bhi.n	56b2 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
    if (enable) {
    5654:	b1b2      	cbz	r2, 5684 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    5656:	bb6b      	cbnz	r3, 56b4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    5658:	2301      	movs	r3, #1
    565a:	fa03 f101 	lsl.w	r1, r3, r1
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    565e:	f100 0334 	add.w	r3, r0, #52	; 0x34
    5662:	f3bf 8f5b 	dmb	ish
    5666:	e853 2f00 	ldrex	r2, [r3]
    566a:	430a      	orrs	r2, r1
    566c:	e843 2400 	strex	r4, r2, [r3]
    5670:	2c00      	cmp	r4, #0
    5672:	d1f8      	bne.n	5666 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    5674:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    5678:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    567c:	b1cb      	cbz	r3, 56b2 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    567e:	4b10      	ldr	r3, [pc, #64]	; (56c0 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    5680:	6119      	str	r1, [r3, #16]
    5682:	bd10      	pop	{r4, pc}
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    5684:	2301      	movs	r3, #1
    5686:	fa03 f101 	lsl.w	r1, r3, r1
    568a:	43ca      	mvns	r2, r1
    568c:	f100 0334 	add.w	r3, r0, #52	; 0x34
    5690:	f3bf 8f5b 	dmb	ish
    5694:	e853 4f00 	ldrex	r4, [r3]
    5698:	4014      	ands	r4, r2
    569a:	e843 4e00 	strex	lr, r4, [r3]
    569e:	f1be 0f00 	cmp.w	lr, #0
    56a2:	d1f7      	bne.n	5694 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    56a4:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    56a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    56ac:	b10b      	cbz	r3, 56b2 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    56ae:	4b04      	ldr	r3, [pc, #16]	; (56c0 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    56b0:	60d9      	str	r1, [r3, #12]
    56b2:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    56b4:	2201      	movs	r2, #1
    56b6:	4b02      	ldr	r3, [pc, #8]	; (56c0 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    56b8:	fa02 f101 	lsl.w	r1, r2, r1
    56bc:	6159      	str	r1, [r3, #20]
    56be:	e7ce      	b.n	565e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    56c0:	40002800 	.word	0x40002800

000056c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    56c4:	290f      	cmp	r1, #15
    56c6:	dc14      	bgt.n	56f2 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    56c8:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    56cc:	40cb      	lsrs	r3, r1
    56ce:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    56d2:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    56d6:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    56d8:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    56dc:	d10a      	bne.n	56f4 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    56de:	4a0f      	ldr	r2, [pc, #60]	; (571c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    56e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    56e4:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    56e6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    56e8:	b113      	cbz	r3, 56f0 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    56ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    56ee:	4718      	bx	r3
    56f0:	bd10      	pop	{r4, pc}
    56f2:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    56f4:	43dc      	mvns	r4, r3
    56f6:	f100 0234 	add.w	r2, r0, #52	; 0x34
    56fa:	f3bf 8f5b 	dmb	ish
    56fe:	e852 ef00 	ldrex	lr, [r2]
    5702:	ea0e 0e04 	and.w	lr, lr, r4
    5706:	e842 ec00 	strex	ip, lr, [r2]
    570a:	f1bc 0f00 	cmp.w	ip, #0
    570e:	d1f6      	bne.n	56fe <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    5710:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    5714:	4a01      	ldr	r2, [pc, #4]	; (571c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    5716:	60d3      	str	r3, [r2, #12]
    5718:	e7e1      	b.n	56de <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    571a:	bf00      	nop
    571c:	40002800 	.word	0x40002800

00005720 <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    5720:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    5722:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	60c3      	str	r3, [r0, #12]
    5728:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    572a:	404b      	eors	r3, r1
    572c:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    572e:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    5730:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    5732:	6881      	ldr	r1, [r0, #8]
    5734:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    5736:	4053      	eors	r3, r2
    5738:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    573a:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    573c:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    573e:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    5740:	4053      	eors	r3, r2
    5742:	6203      	str	r3, [r0, #32]
    5744:	4770      	bx	lr
    5746:	bf00      	nop

00005748 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    5748:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    574a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    574c:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    574e:	f3bf 8f5b 	dmb	ish
    5752:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    5756:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    575a:	e852 1f00 	ldrex	r1, [r2]
    575e:	4319      	orrs	r1, r3
    5760:	e842 1e00 	strex	lr, r1, [r2]
    5764:	f1be 0f00 	cmp.w	lr, #0
    5768:	d1f7      	bne.n	575a <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    576a:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    576e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5770:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    5772:	f3bf 8f5b 	dmb	ish
    5776:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    577a:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    577e:	e852 1f00 	ldrex	r1, [r2]
    5782:	4319      	orrs	r1, r3
    5784:	e842 1e00 	strex	lr, r1, [r2]
    5788:	f1be 0f00 	cmp.w	lr, #0
    578c:	d1f7      	bne.n	577e <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    578e:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    5792:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5794:	6283      	str	r3, [r0, #40]	; 0x28
    5796:	f85d fb04 	ldr.w	pc, [sp], #4
    579a:	bf00      	nop

0000579c <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    579c:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    579e:	f7ff fe95 	bl	54cc <_ZN9ClearCore12InputManager8InstanceEv>
    57a2:	4b01      	ldr	r3, [pc, #4]	; (57a8 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    57a4:	6018      	str	r0, [r3, #0]
    57a6:	bd08      	pop	{r3, pc}
    57a8:	20000bfc 	.word	0x20000bfc

000057ac <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    57ac:	2006      	movs	r0, #6
    57ae:	4770      	bx	lr

000057b0 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    57b0:	2001      	movs	r0, #1
    57b2:	4770      	bx	lr

000057b4 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    57b4:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    57b8:	4770      	bx	lr
    57ba:	bf00      	nop

000057bc <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    57bc:	7980      	ldrb	r0, [r0, #6]
    57be:	4770      	bx	lr

000057c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    57c0:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    57c2:	7983      	ldrb	r3, [r0, #6]
    57c4:	428b      	cmp	r3, r1
    57c6:	f000 80a7 	beq.w	5918 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    57ca:	f1a1 0309 	sub.w	r3, r1, #9
    57ce:	460d      	mov	r5, r1
    57d0:	4604      	mov	r4, r0
    57d2:	2b03      	cmp	r3, #3
    57d4:	f200 80a2 	bhi.w	591c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    57d8:	e8df f003 	tbb	[pc, r3]
    57dc:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    57e0:	3030      	adds	r0, #48	; 0x30
    57e2:	f007 f931 	bl	ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    57e6:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    57e8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    57ec:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    57ee:	2200      	movs	r2, #0
    57f0:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    57f4:	b13b      	cbz	r3, 5806 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    57f6:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    57fa:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    57fe:	680b      	ldr	r3, [r1, #0]
    5800:	4013      	ands	r3, r2
    5802:	d1fc      	bne.n	57fe <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    5804:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    5806:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    580a:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    580c:	2200      	movs	r2, #0
    580e:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    5812:	b13b      	cbz	r3, 5824 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    5814:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    5818:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    581c:	680b      	ldr	r3, [r1, #0]
    581e:	4013      	ands	r3, r2
    5820:	d1fc      	bne.n	581c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    5822:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5824:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5828:	4a3d      	ldr	r2, [pc, #244]	; (5920 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    582a:	f991 3001 	ldrsb.w	r3, [r1, #1]
    582e:	7889      	ldrb	r1, [r1, #2]
    5830:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    5834:	440b      	add	r3, r1
            m_mode = newMode;
    5836:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5838:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    583c:	f041 0101 	orr.w	r1, r1, #1
    5840:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5844:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5848:	f991 3001 	ldrsb.w	r3, [r1, #1]
    584c:	7889      	ldrb	r1, [r1, #2]
    584e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    5852:	440b      	add	r3, r1
    5854:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5858:	f042 0201 	orr.w	r2, r2, #1
    585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    5860:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    5862:	b662      	cpsie	i
    return true;
    5864:	2001      	movs	r0, #1
    5866:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    5868:	3030      	adds	r0, #48	; 0x30
    586a:	f007 f8ed 	bl	ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    586e:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    5870:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    5874:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    5876:	2200      	movs	r2, #0
    5878:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    587c:	b13b      	cbz	r3, 588e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    587e:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    5882:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5886:	680b      	ldr	r3, [r1, #0]
    5888:	4013      	ands	r3, r2
    588a:	d1fc      	bne.n	5886 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    588c:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    588e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5892:	4a23      	ldr	r2, [pc, #140]	; (5920 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    5894:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5898:	7889      	ldrb	r1, [r1, #2]
    589a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    589e:	440b      	add	r3, r1
    58a0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    58a4:	f36f 0100 	bfc	r1, #0, #1
    58a8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    58ac:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    58b0:	f991 3001 	ldrsb.w	r3, [r1, #1]
    58b4:	7889      	ldrb	r1, [r1, #2]
    58b6:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    58ba:	440b      	add	r3, r1
    58bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    58c0:	f042 0201 	orr.w	r2, r2, #1
    58c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    58c8:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    58ca:	b662      	cpsie	i
    return true;
    58cc:	2001      	movs	r0, #1
    58ce:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    58d0:	3030      	adds	r0, #48	; 0x30
    58d2:	f007 f8b9 	bl	ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    58d6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    58da:	4a11      	ldr	r2, [pc, #68]	; (5920 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    58dc:	f991 3001 	ldrsb.w	r3, [r1, #1]
    58e0:	7889      	ldrb	r1, [r1, #2]
    58e2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    58e6:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    58e8:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    58ea:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    58ee:	f36f 0100 	bfc	r1, #0, #1
    58f2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    58f6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    58fa:	f991 3001 	ldrsb.w	r3, [r1, #1]
    58fe:	7889      	ldrb	r1, [r1, #2]
    5900:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    5904:	440b      	add	r3, r1
    return true;
    5906:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5908:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    590c:	f36f 0200 	bfc	r2, #0, #1
    5910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5914:	71a5      	strb	r5, [r4, #6]
            break;
    5916:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    5918:	2001      	movs	r0, #1
    591a:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    591c:	2000      	movs	r0, #0
}
    591e:	bd38      	pop	{r3, r4, r5, pc}
    5920:	41008000 	.word	0x41008000

00005924 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    5924:	7983      	ldrb	r3, [r0, #6]
    5926:	2b0a      	cmp	r3, #10
    5928:	d00f      	beq.n	594a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    592a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    592e:	b1a3      	cbz	r3, 595a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    5930:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5934:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5938:	f993 3001 	ldrsb.w	r3, [r3, #1]
    593c:	01db      	lsls	r3, r3, #7
    593e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5942:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5946:	615a      	str	r2, [r3, #20]
    5948:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    594a:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    594e:	079b      	lsls	r3, r3, #30
    5950:	d5eb      	bpl.n	592a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    5952:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    5956:	2b00      	cmp	r3, #0
    5958:	d0ea      	beq.n	5930 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    595a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    595e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5962:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5966:	01db      	lsls	r3, r3, #7
    5968:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    596c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5970:	619a      	str	r2, [r3, #24]
    5972:	4770      	bx	lr

00005974 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    5974:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5978:	e7d4      	b.n	5924 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    597a:	bf00      	nop

0000597c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    597c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5980:	9f08      	ldr	r7, [sp, #32]
    5982:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    5986:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    598a:	4604      	mov	r4, r0
    598c:	4616      	mov	r6, r2
    598e:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    5990:	463a      	mov	r2, r7
    5992:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    5994:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    5996:	f7ff fca1 	bl	52dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    599a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    599e:	f007 f821 	bl	c9e4 <_ZN9ClearCore13StepGeneratorC1Ev>
    59a2:	4b5c      	ldr	r3, [pc, #368]	; (5b14 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    59a4:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    59a8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    59ac:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    59b0:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    59b4:	6322      	str	r2, [r4, #48]	; 0x30
    59b6:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    59ba:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    59bc:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    59be:	f8df a160 	ldr.w	sl, [pc, #352]	; 5b20 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    59c2:	4f55      	ldr	r7, [pc, #340]	; (5b18 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    59c4:	2101      	movs	r1, #1
    59c6:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    59ca:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    59ce:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    59d0:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    59d4:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    59d8:	f04f 0e02 	mov.w	lr, #2
    59dc:	2200      	movs	r2, #0
    59de:	f64f 70ff 	movw	r0, #65535	; 0xffff
    59e2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    59e6:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    59ea:	f04f 33ff 	mov.w	r3, #4294967295
    59ee:	f04f 0e19 	mov.w	lr, #25
    59f2:	f04f 0903 	mov.w	r9, #3
    59f6:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    59fa:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    59fe:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    5a02:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    5a06:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    5a0a:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    5a0e:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    5a12:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    5a16:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    5a1a:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    5a1e:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    5a22:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    5a26:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    5a2a:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    5a2e:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    5a32:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5a36:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    5a3a:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    5a3e:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    5a42:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    5a46:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    5a4a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    5a4e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    5a52:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    5a56:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    5a5a:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    5a5e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    5a62:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5a66:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    5a6a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    5a6e:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    5a72:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    5a76:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    5a7a:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    5a7e:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    5a82:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    5a86:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    5a88:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    5a8c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    5a90:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    5a94:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5a96:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    5a98:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    5a9c:	2b04      	cmp	r3, #4
    5a9e:	bf9c      	itt	ls
    5aa0:	4a1e      	ldrls	r2, [pc, #120]	; (5b1c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    5aa2:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5aa4:	fbb6 f1f2 	udiv	r1, r6, r2
    5aa8:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5aac:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5ab0:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5ab2:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5ab6:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5aba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5abe:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5ac2:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5ac4:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5ac8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5acc:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5ad0:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5ad2:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5ad4:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    5ad8:	2a04      	cmp	r2, #4
    5ada:	bf9a      	itte	ls
    5adc:	4b0f      	ldrls	r3, [pc, #60]	; (5b1c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    5ade:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5ae0:	2200      	movhi	r2, #0
    5ae2:	fbb0 f3f2 	udiv	r3, r0, r2
    5ae6:	fb02 0313 	mls	r3, r2, r3, r0
    5aea:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5aec:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5af0:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5af4:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5af8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5afc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    5b00:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5b02:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    5b06:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5b0a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    5b0e:	4620      	mov	r0, r4
    5b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b14:	00022be4 	.word	0x00022be4
    5b18:	00022bc8 	.word	0x00022bc8
    5b1c:	00022bc0 	.word	0x00022bc0
    5b20:	c61c3c00 	.word	0xc61c3c00

00005b24 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    5b24:	7983      	ldrb	r3, [r0, #6]
    5b26:	2b09      	cmp	r3, #9
    5b28:	d003      	beq.n	5b32 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    5b2a:	2b0b      	cmp	r3, #11
    5b2c:	d001      	beq.n	5b32 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    5b2e:	2000      	movs	r0, #0
}
    5b30:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5b32:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5b36:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5b3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5b3e:	01db      	lsls	r3, r3, #7
    5b40:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5b44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5b48:	b111      	cbz	r1, 5b50 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    5b4a:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5b4c:	615a      	str	r2, [r3, #20]
    5b4e:	4770      	bx	lr
    5b50:	2001      	movs	r0, #1
    5b52:	619a      	str	r2, [r3, #24]
    5b54:	4770      	bx	lr
    5b56:	bf00      	nop

00005b58 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>:
bool MotorDriver::MotorInBDuty(uint8_t duty) {
    5b58:	b430      	push	{r4, r5}
    if (Connector::m_mode == Connector::CPM_MODE_A_DIRECT_B_PWM ||
    5b5a:	7984      	ldrb	r4, [r0, #6]
    5b5c:	3c0b      	subs	r4, #11
    5b5e:	2c01      	cmp	r4, #1
    5b60:	d902      	bls.n	5b68 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x10>
    return false;
    5b62:	2000      	movs	r0, #0
}
    5b64:	bc30      	pop	{r4, r5}
    5b66:	4770      	bx	lr
        m_bDutyCnt = (static_cast<uint32_t>(duty) * m_stepsPerSampleMax +
    5b68:	6b82      	ldr	r2, [r0, #56]	; 0x38
                      (UINT8_MAX / 2)) / UINT8_MAX;
    5b6a:	4c0e      	ldr	r4, [pc, #56]	; (5ba4 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x4c>)
    if (*m_bTccBuffer == m_bDutyCnt) {
    5b6c:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
        m_bDutyCnt = (static_cast<uint32_t>(duty) * m_stepsPerSampleMax +
    5b70:	fb02 f301 	mul.w	r3, r2, r1
    5b74:	337f      	adds	r3, #127	; 0x7f
                      (UINT8_MAX / 2)) / UINT8_MAX;
    5b76:	fba4 2303 	umull	r2, r3, r4, r3
    5b7a:	09db      	lsrs	r3, r3, #7
    if (*m_bTccBuffer == m_bDutyCnt) {
    5b7c:	6829      	ldr	r1, [r5, #0]
                      (UINT8_MAX / 2)) / UINT8_MAX;
    5b7e:	f8a0 3112 	strh.w	r3, [r0, #274]	; 0x112
    5b82:	b29a      	uxth	r2, r3
    if (*m_bTccBuffer == m_bDutyCnt) {
    5b84:	4291      	cmp	r1, r2
    5b86:	d00a      	beq.n	5b9e <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x46>
    5b88:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
    5b8c:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5b90:	6823      	ldr	r3, [r4, #0]
    5b92:	4219      	tst	r1, r3
    5b94:	d1fc      	bne.n	5b90 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x38>
    *m_bTccBuffer = m_bDutyCnt;
    5b96:	602a      	str	r2, [r5, #0]
        return true;
    5b98:	2001      	movs	r0, #1
}
    5b9a:	bc30      	pop	{r4, r5}
    5b9c:	4770      	bx	lr
        return true;
    5b9e:	2001      	movs	r0, #1
    5ba0:	e7e0      	b.n	5b64 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0xc>
    5ba2:	bf00      	nop
    5ba4:	80808081 	.word	0x80808081

00005ba8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    5ba8:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5baa:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    5bae:	b083      	sub	sp, #12
    5bb0:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5bb2:	2b00      	cmp	r3, #0
    5bb4:	d171      	bne.n	5c9a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    5bb6:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    5bba:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    5bbe:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    5bc2:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5bc6:	428a      	cmp	r2, r1
    5bc8:	d031      	beq.n	5c2e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    5bca:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    5bce:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5bd2:	2200      	movs	r2, #0
    5bd4:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5bd8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    5bdc:	b358      	cbz	r0, 5c36 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    5bde:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5be0:	b672      	cpsid	i
    if (wasDisabled && value) {
    5be2:	b36b      	cbz	r3, 5c40 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    5be4:	b371      	cbz	r1, 5c44 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    5be6:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5bea:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5bec:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5bf0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5bf4:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5bf6:	79a3      	ldrb	r3, [r4, #6]
    5bf8:	2b0a      	cmp	r3, #10
    5bfa:	d02a      	beq.n	5c52 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5bfc:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5c00:	428b      	cmp	r3, r1
    5c02:	d035      	beq.n	5c70 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    5c04:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5c08:	2900      	cmp	r1, #0
    5c0a:	d13b      	bne.n	5c84 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5c0c:	f3bf 8f5b 	dmb	ish
    5c10:	4a2d      	ldr	r2, [pc, #180]	; (5cc8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    5c12:	43db      	mvns	r3, r3
    5c14:	e852 0f00 	ldrex	r0, [r2]
    5c18:	4018      	ands	r0, r3
    5c1a:	e842 0500 	strex	r5, r0, [r2]
    5c1e:	2d00      	cmp	r5, #0
    5c20:	d1f8      	bne.n	5c14 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    5c22:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5c26:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    5c2a:	b003      	add	sp, #12
    5c2c:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    5c2e:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    5c32:	2a00      	cmp	r2, #0
    5c34:	d133      	bne.n	5c9e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    5c36:	2900      	cmp	r1, #0
    5c38:	d0d1      	beq.n	5bde <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    5c3a:	b672      	cpsid	i
    if (wasDisabled && value) {
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d1d1      	bne.n	5be4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    5c40:	2900      	cmp	r1, #0
    5c42:	d1d7      	bne.n	5bf4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    5c44:	2300      	movs	r3, #0
    5c46:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    5c4a:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5c4c:	79a3      	ldrb	r3, [r4, #6]
    5c4e:	2b0a      	cmp	r3, #10
    5c50:	d1d4      	bne.n	5bfc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5c52:	b919      	cbnz	r1, 5c5c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    5c54:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5c58:	079a      	lsls	r2, r3, #30
    5c5a:	d428      	bmi.n	5cae <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    5c5c:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5c60:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5c62:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5c66:	bf48      	it	mi
    5c68:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5c6c:	428b      	cmp	r3, r1
    5c6e:	d1c9      	bne.n	5c04 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    5c70:	2d00      	cmp	r5, #0
    5c72:	d0d8      	beq.n	5c26 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    5c74:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d1d4      	bne.n	5c26 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    5c7c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5c80:	2900      	cmp	r1, #0
    5c82:	d0c3      	beq.n	5c0c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5c84:	f3bf 8f5b 	dmb	ish
    5c88:	4a0f      	ldr	r2, [pc, #60]	; (5cc8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    5c8a:	e852 0f00 	ldrex	r0, [r2]
    5c8e:	4318      	orrs	r0, r3
    5c90:	e842 0500 	strex	r5, r0, [r2]
    5c94:	2d00      	cmp	r5, #0
    5c96:	d0c4      	beq.n	5c22 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    5c98:	e7f7      	b.n	5c8a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5c9a:	2300      	movs	r3, #0
    5c9c:	e78f      	b.n	5bbe <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    5c9e:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    5ca0:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5ca4:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5ca8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    5cac:	e797      	b.n	5bde <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5cae:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5cb2:	9101      	str	r1, [sp, #4]
    5cb4:	f043 0310 	orr.w	r3, r3, #16
    5cb8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5cbc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5cc0:	f006 fec2 	bl	ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5cc4:	9901      	ldr	r1, [sp, #4]
    5cc6:	e7c9      	b.n	5c5c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    5cc8:	20001c04 	.word	0x20001c04

00005ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    5ccc:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5cd0:	2b00      	cmp	r3, #0
    5cd2:	d04a      	beq.n	5d6a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5cd4:	4a35      	ldr	r2, [pc, #212]	; (5dac <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    5cd6:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5cda:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    5cdc:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5cde:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    5ce0:	b98b      	cbnz	r3, 5d06 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    5ce2:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5ce6:	2b01      	cmp	r3, #1
    5ce8:	d022      	beq.n	5d30 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    5cea:	2b02      	cmp	r3, #2
    5cec:	d13b      	bne.n	5d66 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    5cee:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d145      	bne.n	5d82 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    5cf6:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d13c      	bne.n	5d78 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5cfe:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5d02:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5d06:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    5d0a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5d0e:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    5d10:	428b      	cmp	r3, r1
    5d12:	d32b      	bcc.n	5d6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    5d14:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    5d18:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    5d1c:	3b01      	subs	r3, #1
    5d1e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5d22:	b94b      	cbnz	r3, 5d38 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    5d24:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    5d28:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5d2c:	2b01      	cmp	r3, #1
    5d2e:	d1dc      	bne.n	5cea <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    5d30:	2302      	movs	r3, #2
    5d32:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5d36:	e7da      	b.n	5cee <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    5d38:	4b1d      	ldr	r3, [pc, #116]	; (5db0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    5d3a:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    5d3e:	f3bf 8f5b 	dmb	ish
    5d42:	e853 1f00 	ldrex	r1, [r3]
    5d46:	4051      	eors	r1, r2
    5d48:	e843 1e00 	strex	lr, r1, [r3]
    5d4c:	f1be 0f00 	cmp.w	lr, #0
    5d50:	d1f7      	bne.n	5d42 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    5d52:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    5d56:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5d5a:	2b01      	cmp	r3, #1
    5d5c:	d1c5      	bne.n	5cea <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    5d5e:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    5d62:	2b00      	cmp	r3, #0
    5d64:	d0e4      	beq.n	5d30 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    5d66:	f85d fb04 	ldr.w	pc, [sp], #4
    5d6a:	4770      	bx	lr
    switch (m_clearFaultState) {
    5d6c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5d70:	2b02      	cmp	r3, #2
    5d72:	d0bc      	beq.n	5cee <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    5d74:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    5d78:	3b01      	subs	r3, #1
    5d7a:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    5d7e:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    5d82:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    5d84:	f500 7394 	add.w	r3, r0, #296	; 0x128
    5d88:	f3bf 8f5b 	dmb	ish
    5d8c:	e853 1f00 	ldrex	r1, [r3]
    5d90:	f021 0120 	bic.w	r1, r1, #32
    5d94:	e843 1e00 	strex	lr, r1, [r3]
    5d98:	f1be 0f00 	cmp.w	lr, #0
    5d9c:	d1f6      	bne.n	5d8c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    5d9e:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5da2:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    5da6:	f85d fb04 	ldr.w	pc, [sp], #4
    5daa:	bf00      	nop
    5dac:	20001d30 	.word	0x20001d30
    5db0:	20001c04 	.word	0x20001c04

00005db4 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5db4:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    5db8:	b570      	push	{r4, r5, r6, lr}
    5dba:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    5dbc:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d163      	bne.n	5e8c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    5dc4:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    5dc8:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    5dcc:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5dd0:	bb39      	cbnz	r1, 5e22 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    5dd2:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    5dd6:	b672      	cpsid	i
    if (wasDisabled && value) {
    5dd8:	b35b      	cbz	r3, 5e32 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    5dda:	b365      	cbz	r5, 5e36 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    5ddc:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5de0:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5de2:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5de6:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5dea:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5dec:	79a3      	ldrb	r3, [r4, #6]
    5dee:	2b0a      	cmp	r3, #10
    5df0:	d028      	beq.n	5e44 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5df2:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5df6:	42ab      	cmp	r3, r5
    5df8:	d033      	beq.n	5e62 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    5dfa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5dfe:	2d00      	cmp	r5, #0
    5e00:	d139      	bne.n	5e76 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5e02:	f3bf 8f5b 	dmb	ish
    5e06:	4a28      	ldr	r2, [pc, #160]	; (5ea8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5e08:	43db      	mvns	r3, r3
    5e0a:	e852 1f00 	ldrex	r1, [r2]
    5e0e:	4019      	ands	r1, r3
    5e10:	e842 1000 	strex	r0, r1, [r2]
    5e14:	2800      	cmp	r0, #0
    5e16:	d1f8      	bne.n	5e0a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    5e18:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5e1c:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    5e20:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    5e22:	2500      	movs	r5, #0
    5e24:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5e28:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    5e2c:	b672      	cpsid	i
    if (wasDisabled && value) {
    5e2e:	2b00      	cmp	r3, #0
    5e30:	d1d3      	bne.n	5dda <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    5e32:	2d00      	cmp	r5, #0
    5e34:	d1d9      	bne.n	5dea <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    5e36:	2300      	movs	r3, #0
    5e38:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    5e3c:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5e3e:	79a3      	ldrb	r3, [r4, #6]
    5e40:	2b0a      	cmp	r3, #10
    5e42:	d1d6      	bne.n	5df2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5e44:	b91d      	cbnz	r5, 5e4e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5e46:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5e4a:	079a      	lsls	r2, r3, #30
    5e4c:	d420      	bmi.n	5e90 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    5e4e:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5e52:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5e54:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5e58:	bf48      	it	mi
    5e5a:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5e5e:	42ab      	cmp	r3, r5
    5e60:	d1cb      	bne.n	5dfa <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    5e62:	2e00      	cmp	r6, #0
    5e64:	d0da      	beq.n	5e1c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    5e66:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d1d6      	bne.n	5e1c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    5e6e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5e72:	2d00      	cmp	r5, #0
    5e74:	d0c5      	beq.n	5e02 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5e76:	f3bf 8f5b 	dmb	ish
    5e7a:	4a0b      	ldr	r2, [pc, #44]	; (5ea8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5e7c:	e852 1f00 	ldrex	r1, [r2]
    5e80:	4319      	orrs	r1, r3
    5e82:	e842 1000 	strex	r0, r1, [r2]
    5e86:	2800      	cmp	r0, #0
    5e88:	d0c6      	beq.n	5e18 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    5e8a:	e7f7      	b.n	5e7c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5e8c:	2300      	movs	r3, #0
    5e8e:	e79d      	b.n	5dcc <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5e90:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5e94:	f043 0310 	orr.w	r3, r3, #16
    5e98:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5e9c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5ea0:	f006 fdd2 	bl	ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5ea4:	e7d3      	b.n	5e4e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5ea6:	bf00      	nop
    5ea8:	20001c04 	.word	0x20001c04
    5eac:	00000000 	.word	0x00000000

00005eb0 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    5eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    5eb2:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5eb6:	b903      	cbnz	r3, 5eba <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    5eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5eba:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    5ebc:	f7ff f95e 	bl	517c <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5ec0:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5ec2:	4a98      	ldr	r2, [pc, #608]	; (6124 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    5ec4:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5ec8:	2b0a      	cmp	r3, #10
    5eca:	bf08      	it	eq
    5ecc:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5ed0:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5ed4:	bf08      	it	eq
    5ed6:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    5eda:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5ede:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5ee0:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5ee4:	bf18      	it	ne
    5ee6:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5ee8:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5eea:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    5eec:	f240 80df 	bls.w	60ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5ef0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5ef4:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5ef6:	4a8c      	ldr	r2, [pc, #560]	; (6128 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5ef8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5efc:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5f00:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5f04:	1c48      	adds	r0, r1, #1
    5f06:	d012      	beq.n	5f2e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5f08:	4888      	ldr	r0, [pc, #544]	; (612c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5f0a:	f004 f847 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5f0e:	6803      	ldr	r3, [r0, #0]
    5f10:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5f12:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5f14:	4798      	blx	r3
    5f16:	2809      	cmp	r0, #9
    5f18:	f000 8248 	beq.w	63ac <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    5f1c:	4628      	mov	r0, r5
    5f1e:	f7ff f8b3 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    5f22:	1c01      	adds	r1, r0, #0
    5f24:	bf18      	it	ne
    5f26:	2101      	movne	r1, #1
    5f28:	4620      	mov	r0, r4
    5f2a:	f7ff fe3d 	bl	5ba8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5f2e:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5f32:	1c4a      	adds	r2, r1, #1
    5f34:	d016      	beq.n	5f64 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5f36:	79a3      	ldrb	r3, [r4, #6]
    5f38:	2b0a      	cmp	r3, #10
    5f3a:	d039      	beq.n	5fb0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5f3c:	487b      	ldr	r0, [pc, #492]	; (612c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5f3e:	f004 f82d 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5f42:	6803      	ldr	r3, [r0, #0]
    5f44:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5f46:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5f48:	4798      	blx	r3
    5f4a:	2809      	cmp	r0, #9
    5f4c:	f000 80d0 	beq.w	60f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    5f50:	4628      	mov	r0, r5
    5f52:	f7ff f899 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5f56:	79a3      	ldrb	r3, [r4, #6]
    5f58:	2b09      	cmp	r3, #9
    5f5a:	f000 80d3 	beq.w	6104 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    5f5e:	2b0b      	cmp	r3, #11
    5f60:	f000 80d0 	beq.w	6104 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5f64:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5f68:	1c4b      	adds	r3, r1, #1
    5f6a:	d021      	beq.n	5fb0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    5f6c:	79a3      	ldrb	r3, [r4, #6]
    5f6e:	2b0a      	cmp	r3, #10
    5f70:	d01e      	beq.n	5fb0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5f72:	486e      	ldr	r0, [pc, #440]	; (612c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5f74:	f004 f812 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5f78:	6803      	ldr	r3, [r0, #0]
    5f7a:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5f7c:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5f7e:	4798      	blx	r3
    5f80:	2809      	cmp	r0, #9
    5f82:	f000 8239 	beq.w	63f8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    5f86:	4628      	mov	r0, r5
    5f88:	f7ff f87e 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5f8c:	79a3      	ldrb	r3, [r4, #6]
    5f8e:	2b09      	cmp	r3, #9
    5f90:	d10e      	bne.n	5fb0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5f92:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5f96:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    5f9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5f9e:	01db      	lsls	r3, r3, #7
    5fa0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5fa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5fa8:	2800      	cmp	r0, #0
    5faa:	f000 81d4 	beq.w	6356 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    5fae:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    5fb0:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    5fb4:	1c4f      	adds	r7, r1, #1
    5fb6:	d010      	beq.n	5fda <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5fb8:	485c      	ldr	r0, [pc, #368]	; (612c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5fba:	f003 ffef 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5fbe:	6803      	ldr	r3, [r0, #0]
    5fc0:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5fc2:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5fc4:	4798      	blx	r3
    5fc6:	2809      	cmp	r0, #9
    5fc8:	f000 817d 	beq.w	62c6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    5fcc:	682b      	ldr	r3, [r5, #0]
    5fce:	4628      	mov	r0, r5
    5fd0:	681b      	ldr	r3, [r3, #0]
    5fd2:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5fd4:	2804      	cmp	r0, #4
    5fd6:	f000 8176 	beq.w	62c6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    5fda:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    5fde:	1c4e      	adds	r6, r1, #1
    5fe0:	d015      	beq.n	600e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5fe2:	4852      	ldr	r0, [pc, #328]	; (612c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5fe4:	f003 ffda 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5fe8:	6803      	ldr	r3, [r0, #0]
    5fea:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5fec:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5fee:	4798      	blx	r3
    5ff0:	2809      	cmp	r0, #9
    5ff2:	f000 81e6 	beq.w	63c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5ff6:	4628      	mov	r0, r5
    5ff8:	f7ff f846 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    5ffc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6000:	fab0 f080 	clz	r0, r0
    6004:	0940      	lsrs	r0, r0, #5
    6006:	f360 03c3 	bfi	r3, r0, #3, #1
    600a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    600e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    6012:	1c4d      	adds	r5, r1, #1
    6014:	d015      	beq.n	6042 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    6016:	4845      	ldr	r0, [pc, #276]	; (612c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    6018:	f003 ffc0 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    601c:	6803      	ldr	r3, [r0, #0]
    601e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    6020:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    6022:	4798      	blx	r3
    6024:	2809      	cmp	r0, #9
    6026:	f000 81d1 	beq.w	63cc <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    602a:	4628      	mov	r0, r5
    602c:	f7ff f82c 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    6030:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6034:	fab0 f080 	clz	r0, r0
    6038:	0940      	lsrs	r0, r0, #5
    603a:	f360 1304 	bfi	r3, r0, #4, #1
    603e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    6042:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    6046:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    604a:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    604e:	1c48      	adds	r0, r1, #1
    6050:	f000 8132 	beq.w	62b8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    6054:	4835      	ldr	r0, [pc, #212]	; (612c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    6056:	f003 ffa1 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    605a:	6803      	ldr	r3, [r0, #0]
    605c:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    605e:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    6060:	4798      	blx	r3
    6062:	2809      	cmp	r0, #9
    6064:	f000 81c0 	beq.w	63e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    6068:	4638      	mov	r0, r7
    606a:	f7ff f80d 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    606e:	fab0 f780 	clz	r7, r0
    6072:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    6074:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    6078:	2b00      	cmp	r3, #0
    607a:	f040 8131 	bne.w	62e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    607e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    6082:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    6086:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    608a:	2900      	cmp	r1, #0
    608c:	d152      	bne.n	6134 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    608e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    6092:	0792      	lsls	r2, r2, #30
    6094:	d54e      	bpl.n	6134 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    6096:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    609a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    609e:	2800      	cmp	r0, #0
    60a0:	f000 8152 	beq.w	6348 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    60a4:	06d7      	lsls	r7, r2, #27
    60a6:	d549      	bpl.n	613c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    60a8:	f046 0604 	orr.w	r6, r6, #4
    60ac:	e046      	b.n	613c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    60ae:	07aa      	lsls	r2, r5, #30
    60b0:	f000 8161 	beq.w	6376 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    60b4:	2333      	movs	r3, #51	; 0x33
    60b6:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    60b8:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    60bc:	2201      	movs	r2, #1
    60be:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    60c2:	b29a      	uxth	r2, r3
    60c4:	3200      	adds	r2, #0
    60c6:	bf18      	it	ne
    60c8:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    60ca:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    60ce:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    60d2:	06eb      	lsls	r3, r5, #27
    60d4:	f100 8158 	bmi.w	6388 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    60d8:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    60dc:	2b00      	cmp	r3, #0
    60de:	f040 810f 	bne.w	6300 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    60e2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    60e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    60ea:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    60ee:	e707      	b.n	5f00 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    60f0:	4b0f      	ldr	r3, [pc, #60]	; (6130 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    60f2:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    60f6:	6818      	ldr	r0, [r3, #0]
    60f8:	f009 fd52 	bl	fba0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    60fc:	79a3      	ldrb	r3, [r4, #6]
    60fe:	2b09      	cmp	r3, #9
    6100:	f47f af2d 	bne.w	5f5e <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    6104:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    6108:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    610c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    6110:	01db      	lsls	r3, r3, #7
    6112:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6116:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    611a:	2800      	cmp	r0, #0
    611c:	f000 8119 	beq.w	6352 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    6120:	615a      	str	r2, [r3, #20]
    6122:	e71f      	b.n	5f64 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    6124:	00022c2c 	.word	0x00022c2c
    6128:	c61c3c00 	.word	0xc61c3c00
    612c:	20001b0c 	.word	0x20001b0c
    6130:	20001f38 	.word	0x20001f38
    6134:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    6138:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    613c:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    6140:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    6144:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    6148:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    614c:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    6150:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    6154:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    6158:	2b00      	cmp	r3, #0
    615a:	f000 80ab 	beq.w	62b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    615e:	1f98      	subs	r0, r3, #6
    6160:	bf18      	it	ne
    6162:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    6164:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    6168:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    616c:	2a00      	cmp	r2, #0
    616e:	f000 809b 	beq.w	62a8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    6172:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    6176:	b111      	cbz	r1, 617e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    6178:	07af      	lsls	r7, r5, #30
    617a:	f140 80df 	bpl.w	633c <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    617e:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    6182:	2b03      	cmp	r3, #3
    6184:	d071      	beq.n	626a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    6186:	f015 0302 	ands.w	r3, r5, #2
    618a:	f040 80ce 	bne.w	632a <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    618e:	2900      	cmp	r1, #0
    6190:	d06b      	beq.n	626a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    6192:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    6196:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    619a:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    619e:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    61a2:	2b00      	cmp	r3, #0
    61a4:	d065      	beq.n	6272 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    61a6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    61aa:	2b00      	cmp	r3, #0
    61ac:	f340 8113 	ble.w	63d6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    61b0:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    61b4:	2201      	movs	r2, #1
            m_enableCounter--;
    61b6:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    61b8:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    61bc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    61c0:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    61c4:	b11b      	cbz	r3, 61ce <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    61c6:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    61c8:	bf48      	it	mi
    61ca:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    61ce:	1c32      	adds	r2, r6, #0
    61d0:	bf18      	it	ne
    61d2:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    61d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    61d8:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    61dc:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    61e0:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    61e4:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    61e8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    61ec:	f3bf 8f5b 	dmb	ish
    61f0:	e852 1f00 	ldrex	r1, [r2]
    61f4:	4319      	orrs	r1, r3
    61f6:	e842 1000 	strex	r0, r1, [r2]
    61fa:	2800      	cmp	r0, #0
    61fc:	d1f8      	bne.n	61f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    61fe:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    6202:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    6206:	f3bf 8f5b 	dmb	ish
    620a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    620e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    6212:	e853 2f00 	ldrex	r2, [r3]
    6216:	432a      	orrs	r2, r5
    6218:	e843 2100 	strex	r1, r2, [r3]
    621c:	2900      	cmp	r1, #0
    621e:	d1f8      	bne.n	6212 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    6220:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    6224:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    6226:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    622a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    622e:	2b0a      	cmp	r3, #10
    6230:	f47f ae42 	bne.w	5eb8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    6234:	f104 0530 	add.w	r5, r4, #48	; 0x30
    6238:	4628      	mov	r0, r5
    623a:	f006 f95d 	bl	c4f8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    623e:	4628      	mov	r0, r5
    6240:	f006 fc7e 	bl	cb40 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    6244:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    6248:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    624a:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    624c:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    6250:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    6252:	4282      	cmp	r2, r0
    6254:	f43f ae30 	beq.w	5eb8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    6258:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    625c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    6260:	680b      	ldr	r3, [r1, #0]
    6262:	4213      	tst	r3, r2
    6264:	d1fc      	bne.n	6260 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    6266:	6028      	str	r0, [r5, #0]
    6268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    626a:	1c03      	adds	r3, r0, #0
    626c:	bf18      	it	ne
    626e:	2301      	movne	r3, #1
    6270:	e78f      	b.n	6192 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    6272:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    6276:	2a00      	cmp	r2, #0
    6278:	d03a      	beq.n	62f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    627a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    627e:	b933      	cbnz	r3, 628e <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    6280:	b938      	cbnz	r0, 6292 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    6282:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    6286:	2204      	movs	r2, #4
    6288:	f362 258c 	bfi	r5, r2, #10, #3
    628c:	e79a      	b.n	61c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    628e:	2800      	cmp	r0, #0
    6290:	d063      	beq.n	635a <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    6292:	f015 0302 	ands.w	r3, r5, #2
    6296:	d1f6      	bne.n	6286 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    6298:	2203      	movs	r2, #3
    629a:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    629e:	f363 1504 	bfi	r5, r3, #4, #1
    62a2:	f005 0302 	and.w	r3, r5, #2
    62a6:	e78d      	b.n	61c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    62a8:	f362 0500 	bfi	r5, r2, #0, #1
    62ac:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    62b0:	4613      	mov	r3, r2
    62b2:	e76e      	b.n	6192 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    62b4:	4618      	mov	r0, r3
    62b6:	e755      	b.n	6164 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    62b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    62bc:	bb93      	cbnz	r3, 6324 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    62be:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    62c2:	461f      	mov	r7, r3
    62c4:	e6dd      	b.n	6082 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    62c6:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    62ca:	b381      	cbz	r1, 632e <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    62cc:	682b      	ldr	r3, [r5, #0]
    62ce:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    62d2:	695b      	ldr	r3, [r3, #20]
    62d4:	b109      	cbz	r1, 62da <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    62d6:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    62da:	4628      	mov	r0, r5
    62dc:	4798      	blx	r3
    62de:	e67c      	b.n	5fda <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    62e0:	b307      	cbz	r7, 6324 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    62e2:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    62e6:	2900      	cmp	r1, #0
    62e8:	f000 80ab 	beq.w	6442 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    62ec:	460f      	mov	r7, r1
    62ee:	e6c8      	b.n	6082 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    62f0:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    62f4:	07aa      	lsls	r2, r5, #30
    62f6:	f57f af6a 	bpl.w	61ce <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    62fa:	f046 0610 	orr.w	r6, r6, #16
    62fe:	e762      	b.n	61c6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    6300:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    6304:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    6308:	4073      	eors	r3, r6
    630a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    630c:	4291      	cmp	r1, r2
    630e:	f000 80a4 	beq.w	645a <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    6312:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    6316:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    631a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    631e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    6322:	e5ed      	b.n	5f00 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    6324:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    6328:	e6ab      	b.n	6082 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    632a:	2300      	movs	r3, #0
    632c:	e731      	b.n	6192 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    632e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    6332:	682b      	ldr	r3, [r5, #0]
    6334:	2a01      	cmp	r2, #1
    6336:	695b      	ldr	r3, [r3, #20]
    6338:	d1cf      	bne.n	62da <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    633a:	e7cc      	b.n	62d6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    633c:	2801      	cmp	r0, #1
    633e:	f47f af1e 	bne.w	617e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    6342:	f045 0501 	orr.w	r5, r5, #1
    6346:	e71c      	b.n	6182 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    6348:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    634a:	bf48      	it	mi
    634c:	f046 0602 	orrmi.w	r6, r6, #2
    6350:	e6f4      	b.n	613c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    6352:	619a      	str	r2, [r3, #24]
    6354:	e606      	b.n	5f64 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    6356:	619a      	str	r2, [r3, #24]
    6358:	e62a      	b.n	5fb0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    635a:	2302      	movs	r3, #2
    635c:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    6360:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    6364:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6368:	f006 fb6e 	bl	ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    636c:	f046 0620 	orr.w	r6, r6, #32
    6370:	f005 0302 	and.w	r3, r5, #2
    6374:	e726      	b.n	61c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    6376:	f004 fc8d 	bl	ac94 <Milliseconds>
    637a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    637e:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    6380:	2803      	cmp	r0, #3
    6382:	f63f ae97 	bhi.w	60b4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    6386:	e6a4      	b.n	60d2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    6388:	f004 fc84 	bl	ac94 <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    638c:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    6390:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    6394:	2b00      	cmp	r3, #0
    6396:	d03a      	beq.n	640e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    6398:	2330      	movs	r3, #48	; 0x30
    639a:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    639c:	2200      	movs	r2, #0
    639e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    63a2:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    63a6:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    63aa:	e697      	b.n	60dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    63ac:	4b54      	ldr	r3, [pc, #336]	; (6500 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    63ae:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    63b2:	6818      	ldr	r0, [r3, #0]
    63b4:	f009 fbf4 	bl	fba0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    63b8:	4601      	mov	r1, r0
    63ba:	4620      	mov	r0, r4
    63bc:	f7ff fbf4 	bl	5ba8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    63c0:	e5b5      	b.n	5f2e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    63c2:	682b      	ldr	r3, [r5, #0]
    63c4:	4628      	mov	r0, r5
    63c6:	691b      	ldr	r3, [r3, #16]
    63c8:	4798      	blx	r3
    63ca:	e617      	b.n	5ffc <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    63cc:	682b      	ldr	r3, [r5, #0]
    63ce:	4628      	mov	r0, r5
    63d0:	691b      	ldr	r3, [r3, #16]
    63d2:	4798      	blx	r3
    63d4:	e62c      	b.n	6030 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    63d6:	2201      	movs	r2, #1
            m_isEnabling = false;
    63d8:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    63da:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    63de:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    63e2:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    63e6:	e748      	b.n	627a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    63e8:	683b      	ldr	r3, [r7, #0]
    63ea:	4638      	mov	r0, r7
    63ec:	691b      	ldr	r3, [r3, #16]
    63ee:	4798      	blx	r3
    63f0:	fab0 f780 	clz	r7, r0
    63f4:	097f      	lsrs	r7, r7, #5
    63f6:	e63d      	b.n	6074 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    63f8:	4b41      	ldr	r3, [pc, #260]	; (6500 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    63fa:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    63fe:	6818      	ldr	r0, [r3, #0]
    6400:	f009 fbce 	bl	fba0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    6404:	79a3      	ldrb	r3, [r4, #6]
    6406:	2b09      	cmp	r3, #9
    6408:	f43f adc3 	beq.w	5f92 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    640c:	e5d0      	b.n	5fb0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    640e:	06ad      	lsls	r5, r5, #26
    6410:	f57f ae62 	bpl.w	60d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    6414:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    6418:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    641c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    6420:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    6424:	8bf8      	ldrh	r0, [r7, #30]
    6426:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    642a:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    642e:	8bbd      	ldrh	r5, [r7, #28]
    6430:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    6434:	b9d0      	cbnz	r0, 646c <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    6436:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    643a:	2201      	movs	r2, #1
    643c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    6440:	e64c      	b.n	60dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    6442:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6446:	f006 fb1b 	bl	ca80 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    644a:	2301      	movs	r3, #1
    644c:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    6450:	f046 0608 	orr.w	r6, r6, #8
    6454:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    6458:	e613      	b.n	6082 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    645a:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    645e:	2a00      	cmp	r2, #0
    6460:	f43f ad49 	beq.w	5ef6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    6464:	3a01      	subs	r2, #1
    6466:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    646a:	e549      	b.n	5f00 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    646c:	ee07 1a90 	vmov	s15, r1
    6470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    6474:	ee07 2a90 	vmov	s15, r2
    6478:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    647c:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    6480:	eec7 6a27 	vdiv.f32	s13, s14, s15
    6484:	ee16 0a90 	vmov	r0, s13
    6488:	f015 faa0 	bl	1b9cc <__aeabi_f2d>
    648c:	a318      	add	r3, pc, #96	; (adr r3, 64f0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    648e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6492:	f015 f93b 	bl	1b70c <__aeabi_dsub>
    6496:	a318      	add	r3, pc, #96	; (adr r3, 64f8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    6498:	e9d3 2300 	ldrd	r2, r3, [r3]
    649c:	f015 faea 	bl	1ba74 <__aeabi_dmul>
    64a0:	f015 fdca 	bl	1c038 <__aeabi_d2f>
    64a4:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    64a8:	b11e      	cbz	r6, 64b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    64aa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 6504 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    64ae:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    64b2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    64b6:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    64ba:	2b02      	cmp	r3, #2
    64bc:	d004      	beq.n	64c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    64be:	2302      	movs	r3, #2
    64c0:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    64c4:	2300      	movs	r3, #0
    64c6:	e7b8      	b.n	643a <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    64c8:	ee17 0a90 	vmov	r0, s15
    64cc:	f015 fa7e 	bl	1b9cc <__aeabi_f2d>
    64d0:	2200      	movs	r2, #0
    64d2:	4b0d      	ldr	r3, [pc, #52]	; (6508 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    64d4:	f015 f91a 	bl	1b70c <__aeabi_dsub>
    64d8:	4602      	mov	r2, r0
    64da:	460b      	mov	r3, r1
    64dc:	f015 f918 	bl	1b710 <__adddf3>
    64e0:	f015 fdaa 	bl	1c038 <__aeabi_d2f>
    64e4:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    64e8:	e7e9      	b.n	64be <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    64ea:	bf00      	nop
    64ec:	f3af 8000 	nop.w
    64f0:	9999999a 	.word	0x9999999a
    64f4:	3fa99999 	.word	0x3fa99999
    64f8:	71c71c72 	.word	0x71c71c72
    64fc:	405bc71c 	.word	0x405bc71c
    6500:	20001f38 	.word	0x20001f38
    6504:	42c80000 	.word	0x42c80000
    6508:	40490000 	.word	0x40490000

0000650c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    650c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6510:	4604      	mov	r4, r0
    6512:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    6514:	4690      	mov	r8, r2
    6516:	2a00      	cmp	r2, #0
    6518:	d154      	bne.n	65c4 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    651a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    651c:	1b4d      	subs	r5, r1, r5
    651e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    6520:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    6524:	2b00      	cmp	r3, #0
    6526:	d04b      	beq.n	65c0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    6528:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    652c:	f043 0301 	orr.w	r3, r3, #1
    6530:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    6534:	2600      	movs	r6, #0
    6536:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    653a:	b933      	cbnz	r3, 654a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    653c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    6540:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    6544:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    6546:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    654a:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    654e:	1c48      	adds	r0, r1, #1
    6550:	d016      	beq.n	6580 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    6552:	4829      	ldr	r0, [pc, #164]	; (65f8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    6554:	f003 fd22 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    6558:	6803      	ldr	r3, [r0, #0]
    655a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    655c:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    655e:	4798      	blx	r3
    6560:	2809      	cmp	r0, #9
    6562:	d040      	beq.n	65e6 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    6564:	4648      	mov	r0, r9
    6566:	f7fe fd8f 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    656a:	fab0 f080 	clz	r0, r0
    656e:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    6570:	b130      	cbz	r0, 6580 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    6572:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    6576:	f043 0308 	orr.w	r3, r3, #8
    657a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    657e:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    6580:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6584:	b16d      	cbz	r5, 65a2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    6586:	06d9      	lsls	r1, r3, #27
    6588:	d426      	bmi.n	65d8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    658a:	b196      	cbz	r6, 65b2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    658c:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    658e:	4642      	mov	r2, r8
    6590:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    6592:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    6596:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    659a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    659e:	f005 bf27 	b.w	c3f0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    65a2:	071a      	lsls	r2, r3, #28
    65a4:	d5f1      	bpl.n	658a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    65a6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    65aa:	f043 0302 	orr.w	r3, r3, #2
    65ae:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    65b2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    65b6:	079b      	lsls	r3, r3, #30
    65b8:	d406      	bmi.n	65c8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    65ba:	2000      	movs	r0, #0
    65bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    65c0:	2601      	movs	r6, #1
    65c2:	e7b8      	b.n	6536 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    65c4:	0fcd      	lsrs	r5, r1, #31
    65c6:	e7ab      	b.n	6520 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    65c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    65cc:	2100      	movs	r1, #0
    65ce:	f006 fa57 	bl	ca80 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    65d2:	2000      	movs	r0, #0
    65d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    65d8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    65dc:	f043 0304 	orr.w	r3, r3, #4
    65e0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    65e4:	e7e5      	b.n	65b2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    65e6:	f8d9 3000 	ldr.w	r3, [r9]
    65ea:	4648      	mov	r0, r9
    65ec:	691b      	ldr	r3, [r3, #16]
    65ee:	4798      	blx	r3
    65f0:	fab0 f080 	clz	r0, r0
    65f4:	0940      	lsrs	r0, r0, #5
    65f6:	e7bb      	b.n	6570 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    65f8:	20001b0c 	.word	0x20001b0c

000065fc <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    65fc:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    6600:	f7ff bf84 	b.w	650c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00006604 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    6604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    6606:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    660a:	4604      	mov	r4, r0
    660c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    660e:	2b00      	cmp	r3, #0
    6610:	d04a      	beq.n	66a8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    6612:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    6616:	f043 0301 	orr.w	r3, r3, #1
    661a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    661e:	2500      	movs	r5, #0
    6620:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    6624:	b933      	cbnz	r3, 6634 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    6626:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    662a:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    662e:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    6630:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    6634:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    6638:	1c48      	adds	r0, r1, #1
    663a:	d016      	beq.n	666a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    663c:	4826      	ldr	r0, [pc, #152]	; (66d8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    663e:	f003 fcad 	bl	9f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    6642:	6803      	ldr	r3, [r0, #0]
    6644:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    6646:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    6648:	4798      	blx	r3
    664a:	2809      	cmp	r0, #9
    664c:	d03c      	beq.n	66c8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    664e:	4638      	mov	r0, r7
    6650:	f7fe fd1a 	bl	5088 <_ZN9ClearCore9DigitalIn5StateEv>
    6654:	fab0 f080 	clz	r0, r0
    6658:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    665a:	b130      	cbz	r0, 666a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    665c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    6660:	f043 0308 	orr.w	r3, r3, #8
    6664:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    6668:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    666a:	2e00      	cmp	r6, #0
    666c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6670:	da0c      	bge.n	668c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    6672:	06d9      	lsls	r1, r3, #27
    6674:	d421      	bmi.n	66ba <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    6676:	b18d      	cbz	r5, 669c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    6678:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    667a:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    667c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    6680:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    6684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    6688:	f005 beec 	b.w	c464 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    668c:	071a      	lsls	r2, r3, #28
    668e:	d5f2      	bpl.n	6676 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    6690:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    6694:	f043 0302 	orr.w	r3, r3, #2
    6698:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    669c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    66a0:	079b      	lsls	r3, r3, #30
    66a2:	d403      	bmi.n	66ac <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    66a4:	2000      	movs	r0, #0
    66a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    66a8:	2501      	movs	r5, #1
    66aa:	e7b9      	b.n	6620 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    66ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
    66b0:	2100      	movs	r1, #0
    66b2:	f006 f9e5 	bl	ca80 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    66b6:	2000      	movs	r0, #0
    66b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    66ba:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    66be:	f043 0304 	orr.w	r3, r3, #4
    66c2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    66c6:	e7e9      	b.n	669c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    66c8:	683b      	ldr	r3, [r7, #0]
    66ca:	4638      	mov	r0, r7
    66cc:	691b      	ldr	r3, [r3, #16]
    66ce:	4798      	blx	r3
    66d0:	fab0 f080 	clz	r0, r0
    66d4:	0940      	lsrs	r0, r0, #5
    66d6:	e7c0      	b.n	665a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    66d8:	20001b0c 	.word	0x20001b0c

000066dc <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    66dc:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    66e0:	f7ff bf90 	b.w	6604 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

000066e4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    66e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    66e6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    66ea:	4dbc      	ldr	r5, [pc, #752]	; (69dc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    66ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
    66f0:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    66f4:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    66f8:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    66fa:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    66fc:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    6700:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    6704:	f993 3001 	ldrsb.w	r3, [r3, #1]
    6708:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    670c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    670e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    6710:	2100      	movs	r1, #0
    6712:	f7ff fa49 	bl	5ba8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    6716:	4631      	mov	r1, r6
    6718:	4620      	mov	r0, r4
    671a:	f7fe fcc9 	bl	50b0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    671e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    6722:	f993 2001 	ldrsb.w	r2, [r3, #1]
    6726:	7898      	ldrb	r0, [r3, #2]
    6728:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    672c:	1813      	adds	r3, r2, r0
    672e:	2700      	movs	r7, #0
    6730:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    6734:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    6738:	f991 3001 	ldrsb.w	r3, [r1, #1]
    673c:	788e      	ldrb	r6, [r1, #2]
    673e:	01db      	lsls	r3, r3, #7
    6740:	18e9      	adds	r1, r5, r3
    6742:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    6744:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    6748:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    674c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    6750:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    6752:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    6756:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    6758:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    675c:	f010 0f01 	tst.w	r0, #1
    6760:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    6764:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    6768:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    676c:	bf14      	ite	ne
    676e:	f360 1107 	bfine	r1, r0, #4, #4
    6772:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    6776:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    677a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    677e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    6782:	07f0      	lsls	r0, r6, #31
    6784:	f04f 0105 	mov.w	r1, #5
    6788:	bf4c      	ite	mi
    678a:	f361 1207 	bfimi	r2, r1, #4, #4
    678e:	f361 0203 	bfipl	r2, r1, #0, #4
    6792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    6796:	6823      	ldr	r3, [r4, #0]
    6798:	4a91      	ldr	r2, [pc, #580]	; (69e0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    679a:	685b      	ldr	r3, [r3, #4]
    679c:	4293      	cmp	r3, r2
    679e:	f040 8119 	bne.w	69d4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    67a2:	79a3      	ldrb	r3, [r4, #6]
    67a4:	2b09      	cmp	r3, #9
    67a6:	d022      	beq.n	67ee <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    67a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    67ac:	f006 f94c 	bl	ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    67b0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    67b4:	4b89      	ldr	r3, [pc, #548]	; (69dc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    67b6:	f991 2001 	ldrsb.w	r2, [r1, #1]
    67ba:	7889      	ldrb	r1, [r1, #2]
    67bc:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    67c0:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    67c2:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    67c4:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    67c8:	f36f 0100 	bfc	r1, #0, #1
    67cc:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    67d0:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    67d4:	f992 1001 	ldrsb.w	r1, [r2, #1]
    67d8:	7892      	ldrb	r2, [r2, #2]
    67da:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    67de:	4413      	add	r3, r2
    67e0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    67e4:	f36f 0200 	bfc	r2, #0, #1
    67e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    67ec:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    67ee:	68e3      	ldr	r3, [r4, #12]
    67f0:	6922      	ldr	r2, [r4, #16]
    67f2:	01db      	lsls	r3, r3, #7
    67f4:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    67f8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    67fc:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    6800:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    6804:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    6808:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    680c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6810:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    6812:	bf14      	ite	ne
    6814:	f36f 1007 	bfcne	r0, #4, #4
    6818:	f365 0003 	bfieq	r0, r5, #0, #4
    681c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    6820:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    6824:	496f      	ldr	r1, [pc, #444]	; (69e4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    6826:	f042 0201 	orr.w	r2, r2, #1
    682a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    682e:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    6832:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    6836:	681a      	ldr	r2, [r3, #0]
    6838:	f36f 0241 	bfc	r2, #1, #1
    683c:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    683e:	691a      	ldr	r2, [r3, #16]
    6840:	0792      	lsls	r2, r2, #30
    6842:	d4fc      	bmi.n	683e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    6844:	681a      	ldr	r2, [r3, #0]
    6846:	f042 0201 	orr.w	r2, r2, #1
    684a:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    684c:	691a      	ldr	r2, [r3, #16]
    684e:	f012 0201 	ands.w	r2, r2, #1
    6852:	d1fb      	bne.n	684c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    6854:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    6856:	4964      	ldr	r1, [pc, #400]	; (69e8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    6858:	f362 1505 	bfi	r5, r2, #4, #2
    685c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    685e:	681d      	ldr	r5, [r3, #0]
    6860:	f362 5514 	bfi	r5, r2, #20, #1
    6864:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    6866:	681d      	ldr	r5, [r3, #0]
    6868:	f362 5555 	bfi	r5, r2, #21, #1
    686c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    686e:	681d      	ldr	r5, [r3, #0]
    6870:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    6874:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    6876:	681d      	ldr	r5, [r3, #0]
    6878:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    687c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    687e:	681d      	ldr	r5, [r3, #0]
    6880:	f362 25cb 	bfi	r5, r2, #11, #1
    6884:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    6886:	681d      	ldr	r5, [r3, #0]
    6888:	f362 250a 	bfi	r5, r2, #8, #3
    688c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    688e:	681d      	ldr	r5, [r3, #0]
    6890:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    6894:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    6896:	681d      	ldr	r5, [r3, #0]
    6898:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    689c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    689e:	681d      	ldr	r5, [r3, #0]
    68a0:	f362 0583 	bfi	r5, r2, #2, #2
    68a4:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    68a6:	88dd      	ldrh	r5, [r3, #6]
    68a8:	2605      	movs	r6, #5
    68aa:	f366 0502 	bfi	r5, r6, #0, #3
    68ae:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    68b0:	88dd      	ldrh	r5, [r3, #6]
    68b2:	f045 0520 	orr.w	r5, r5, #32
    68b6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    68b8:	88dd      	ldrh	r5, [r3, #6]
    68ba:	f362 350c 	bfi	r5, r2, #12, #1
    68be:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    68c0:	88dd      	ldrh	r5, [r3, #6]
    68c2:	f362 354d 	bfi	r5, r2, #13, #1
    68c6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    68c8:	88dd      	ldrh	r5, [r3, #6]
    68ca:	f362 2508 	bfi	r5, r2, #8, #1
    68ce:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    68d0:	88dd      	ldrh	r5, [r3, #6]
    68d2:	f045 0510 	orr.w	r5, r5, #16
    68d6:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    68d8:	780d      	ldrb	r5, [r1, #0]
    68da:	f362 0541 	bfi	r5, r2, #1, #1
    68de:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    68e0:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    68e4:	688e      	ldr	r6, [r1, #8]
    68e6:	78d5      	ldrb	r5, [r2, #3]
    68e8:	2201      	movs	r2, #1
    68ea:	40aa      	lsls	r2, r5
    68ec:	4316      	orrs	r6, r2
    68ee:	608e      	str	r6, [r1, #8]
    68f0:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    68f2:	698e      	ldr	r6, [r1, #24]
    68f4:	00bf      	lsls	r7, r7, #2
    68f6:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    68fa:	4316      	orrs	r6, r2
    68fc:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    6900:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    6902:	f005 0607 	and.w	r6, r5, #7
    6906:	f8de c01c 	ldr.w	ip, [lr, #28]
    690a:	00b7      	lsls	r7, r6, #2
    690c:	2604      	movs	r6, #4
    690e:	40be      	lsls	r6, r7
    6910:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    6914:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    6918:	68ce      	ldr	r6, [r1, #12]
    691a:	b292      	uxth	r2, r2
    691c:	f362 060f 	bfi	r6, r2, #0, #16
    6920:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    6922:	780a      	ldrb	r2, [r1, #0]
    6924:	f042 0202 	orr.w	r2, r2, #2
    6928:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    692a:	684a      	ldr	r2, [r1, #4]
    692c:	f012 0202 	ands.w	r2, r2, #2
    6930:	d1fb      	bne.n	692a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    6932:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    6936:	492d      	ldr	r1, [pc, #180]	; (69ec <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    6938:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    693c:	463e      	mov	r6, r7
    693e:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    6942:	f362 1c86 	bfi	ip, r2, #6, #1
    6946:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    694a:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    694e:	0657      	lsls	r7, r2, #25
    6950:	d4fb      	bmi.n	694a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    6952:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    6956:	4f25      	ldr	r7, [pc, #148]	; (69ec <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    6958:	f04f 0c06 	mov.w	ip, #6
    695c:	f36c 0203 	bfi	r2, ip, #0, #4
    6960:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    6964:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    6968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    696c:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    6970:	687a      	ldr	r2, [r7, #4]
    6972:	f012 0f18 	tst.w	r2, #24
    6976:	d1fb      	bne.n	6970 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    6978:	4a1d      	ldr	r2, [pc, #116]	; (69f0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    697a:	4e1e      	ldr	r6, [pc, #120]	; (69f4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    697c:	3074      	adds	r0, #116	; 0x74
    697e:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    6982:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    6986:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    698a:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    698e:	7991      	ldrb	r1, [r2, #6]
    6990:	f041 0102 	orr.w	r1, r1, #2
    6994:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    6996:	79d1      	ldrb	r1, [r2, #7]
    6998:	07c8      	lsls	r0, r1, #31
    699a:	d4fc      	bmi.n	6996 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    699c:	3512      	adds	r5, #18
    699e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    69a2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    69a6:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    69aa:	79d1      	ldrb	r1, [r2, #7]
    69ac:	0789      	lsls	r1, r1, #30
    69ae:	d4fc      	bmi.n	69aa <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    69b0:	681a      	ldr	r2, [r3, #0]
    69b2:	f042 0202 	orr.w	r2, r2, #2
    69b6:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    69b8:	691a      	ldr	r2, [r3, #16]
    69ba:	f012 0202 	ands.w	r2, r2, #2
    69be:	d1fb      	bne.n	69b8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    69c0:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    69c2:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    69c6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    69ca:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    69ce:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    69d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    69d4:	2109      	movs	r1, #9
    69d6:	4620      	mov	r0, r4
    69d8:	4798      	blx	r3
    69da:	e708      	b.n	67ee <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    69dc:	41008000 	.word	0x41008000
    69e0:	000057c1 	.word	0x000057c1
    69e4:	00022c2c 	.word	0x00022c2c
    69e8:	40002800 	.word	0x40002800
    69ec:	40001c00 	.word	0x40001c00
    69f0:	4100e000 	.word	0x4100e000
    69f4:	4100e020 	.word	0x4100e020

000069f8 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    69f8:	f1a1 0002 	sub.w	r0, r1, #2
    69fc:	fab0 f080 	clz	r0, r0
    6a00:	0940      	lsrs	r0, r0, #5
    6a02:	4770      	bx	lr

00006a04 <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    6a04:	2002      	movs	r0, #2
    6a06:	4770      	bx	lr

00006a08 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    6a08:	f1a1 0001 	sub.w	r0, r1, #1
    6a0c:	fab0 f080 	clz	r0, r0
    6a10:	0940      	lsrs	r0, r0, #5
    6a12:	4770      	bx	lr

00006a14 <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    6a14:	f1a1 0008 	sub.w	r0, r1, #8
    6a18:	fab0 f080 	clz	r0, r0
    6a1c:	0940      	lsrs	r0, r0, #5
    6a1e:	4770      	bx	lr

00006a20 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    6a20:	7a80      	ldrb	r0, [r0, #10]
    6a22:	4770      	bx	lr

00006a24 <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    6a24:	f1a0 0004 	sub.w	r0, r0, #4
    6a28:	e7fa      	b.n	6a20 <_ZN9ClearCore9SerialUsb4ModeEv>
    6a2a:	bf00      	nop

00006a2c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    6a2c:	7a80      	ldrb	r0, [r0, #10]
    }
    6a2e:	1a40      	subs	r0, r0, r1
    6a30:	fab0 f080 	clz	r0, r0
    6a34:	0940      	lsrs	r0, r0, #5
    6a36:	4770      	bx	lr

00006a38 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    6a38:	f1a0 0004 	sub.w	r0, r0, #4
    6a3c:	e7f6      	b.n	6a2c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    6a3e:	bf00      	nop

00006a40 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    6a40:	2008      	movs	r0, #8
    6a42:	4770      	bx	lr

00006a44 <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    6a44:	f1a0 0004 	sub.w	r0, r0, #4
    6a48:	e7fa      	b.n	6a40 <_ZN9ClearCore9SerialUsb4TypeEv>
    6a4a:	bf00      	nop

00006a4c <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    6a4c:	2000      	movs	r0, #0
    6a4e:	4770      	bx	lr

00006a50 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    6a50:	f1a0 0004 	sub.w	r0, r0, #4
    6a54:	e7fa      	b.n	6a4c <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    6a56:	bf00      	nop

00006a58 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    6a58:	2311      	movs	r3, #17
        m_index = clearCorePin;
    6a5a:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    6a5c:	7283      	strb	r3, [r0, #10]
    6a5e:	4770      	bx	lr

00006a60 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    6a60:	f1a0 0004 	sub.w	r0, r0, #4
    6a64:	e7f8      	b.n	6a58 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    6a66:	bf00      	nop

00006a68 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    6a68:	4770      	bx	lr
    6a6a:	bf00      	nop

00006a6c <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    6a6c:	f1a0 0004 	sub.w	r0, r0, #4
    6a70:	e7fa      	b.n	6a68 <_ZN9ClearCore9SerialUsb7RefreshEv>
    6a72:	bf00      	nop

00006a74 <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    6a74:	4b01      	ldr	r3, [pc, #4]	; (6a7c <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    6a76:	6818      	ldr	r0, [r3, #0]
    6a78:	f001 b8ae 	b.w	7bd8 <_ZN9ClearCore10UsbManager10FlushInputEv>
    6a7c:	20000c14 	.word	0x20000c14

00006a80 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    6a80:	4b01      	ldr	r3, [pc, #4]	; (6a88 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    6a82:	6818      	ldr	r0, [r3, #0]
    6a84:	f001 b8b6 	b.w	7bf4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    6a88:	20000c14 	.word	0x20000c14

00006a8c <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    6a8c:	4b01      	ldr	r3, [pc, #4]	; (6a94 <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    6a8e:	6818      	ldr	r0, [r3, #0]
    6a90:	f001 b8ca 	b.w	7c28 <_ZN9ClearCore10UsbManagercvbEv>
    6a94:	20000c14 	.word	0x20000c14

00006a98 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    6a98:	4b01      	ldr	r3, [pc, #4]	; (6aa0 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    6a9a:	6818      	ldr	r0, [r3, #0]
    6a9c:	f001 b880 	b.w	7ba0 <_ZN9ClearCore10UsbManager8PortOpenEv>
    6aa0:	20000c14 	.word	0x20000c14

00006aa4 <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    6aa4:	4b01      	ldr	r3, [pc, #4]	; (6aac <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    6aa6:	6818      	ldr	r0, [r3, #0]
    6aa8:	f001 bc54 	b.w	8354 <_ZN9ClearCore10UsbManager9PortCloseEv>
    6aac:	20000c14 	.word	0x20000c14

00006ab0 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    6ab0:	4b01      	ldr	r3, [pc, #4]	; (6ab8 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    6ab2:	6818      	ldr	r0, [r3, #0]
    6ab4:	f001 b86c 	b.w	7b90 <_ZN9ClearCore10UsbManager5SpeedEm>
    6ab8:	20000c14 	.word	0x20000c14

00006abc <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    6abc:	4b01      	ldr	r3, [pc, #4]	; (6ac4 <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    6abe:	6818      	ldr	r0, [r3, #0]
    6ac0:	f001 b868 	b.w	7b94 <_ZN9ClearCore10UsbManager5SpeedEv>
    6ac4:	20000c14 	.word	0x20000c14

00006ac8 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    6ac8:	4b01      	ldr	r3, [pc, #4]	; (6ad0 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    6aca:	6818      	ldr	r0, [r3, #0]
    6acc:	f001 b8ca 	b.w	7c64 <_ZN9ClearCore10UsbManager7CharGetEv>
    6ad0:	20000c14 	.word	0x20000c14

00006ad4 <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    6ad4:	4b01      	ldr	r3, [pc, #4]	; (6adc <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    6ad6:	6818      	ldr	r0, [r3, #0]
    6ad8:	f001 b9f0 	b.w	7ebc <_ZN9ClearCore10UsbManager8CharPeekEv>
    6adc:	20000c14 	.word	0x20000c14

00006ae0 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    6ae0:	4b01      	ldr	r3, [pc, #4]	; (6ae8 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    6ae2:	6818      	ldr	r0, [r3, #0]
    6ae4:	f001 b9f6 	b.w	7ed4 <_ZN9ClearCore10UsbManager8SendCharEh>
    6ae8:	20000c14 	.word	0x20000c14

00006aec <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    6aec:	4b01      	ldr	r3, [pc, #4]	; (6af4 <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    6aee:	6818      	ldr	r0, [r3, #0]
    6af0:	f001 ba24 	b.w	7f3c <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    6af4:	20000c14 	.word	0x20000c14

00006af8 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    6af8:	4b01      	ldr	r3, [pc, #4]	; (6b00 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    6afa:	6818      	ldr	r0, [r3, #0]
    6afc:	f001 ba26 	b.w	7f4c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    6b00:	20000c14 	.word	0x20000c14

00006b04 <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    6b04:	6803      	ldr	r3, [r0, #0]
    6b06:	4a04      	ldr	r2, [pc, #16]	; (6b18 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    6b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6b0a:	4293      	cmp	r3, r2
    6b0c:	d103      	bne.n	6b16 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    6b0e:	4b03      	ldr	r3, [pc, #12]	; (6b1c <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    6b10:	6818      	ldr	r0, [r3, #0]
    6b12:	f001 b889 	b.w	7c28 <_ZN9ClearCore10UsbManagercvbEv>
    6b16:	4718      	bx	r3
    6b18:	00006a8d 	.word	0x00006a8d
    6b1c:	20000c14 	.word	0x20000c14

00006b20 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    6b20:	f1a0 0004 	sub.w	r0, r0, #4
    6b24:	e7ee      	b.n	6b04 <_ZN9ClearCore9SerialUsb10IsWritableEv>
    6b26:	bf00      	nop

00006b28 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    6b28:	b508      	push	{r3, lr}
        return PortIsOpen();
    6b2a:	6803      	ldr	r3, [r0, #0]
    6b2c:	4a06      	ldr	r2, [pc, #24]	; (6b48 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    6b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6b30:	4293      	cmp	r3, r2
    6b32:	d105      	bne.n	6b40 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    6b34:	4b05      	ldr	r3, [pc, #20]	; (6b4c <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    6b36:	6818      	ldr	r0, [r3, #0]
    6b38:	f001 f876 	bl	7c28 <_ZN9ClearCore10UsbManagercvbEv>
    }
    6b3c:	b200      	sxth	r0, r0
    6b3e:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    6b40:	4798      	blx	r3
    }
    6b42:	b200      	sxth	r0, r0
    6b44:	bd08      	pop	{r3, pc}
    6b46:	bf00      	nop
    6b48:	00006a8d 	.word	0x00006a8d
    6b4c:	20000c14 	.word	0x20000c14

00006b50 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    6b50:	f1a0 0004 	sub.w	r0, r0, #4
    6b54:	e7e8      	b.n	6b28 <_ZN9ClearCore9SerialUsb5StateEv>
    6b56:	bf00      	nop

00006b58 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6b58:	b508      	push	{r3, lr}
            PortOpen();
    6b5a:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    6b5c:	b961      	cbnz	r1, 6b78 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    6b5e:	4a0b      	ldr	r2, [pc, #44]	; (6b8c <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    6b60:	68db      	ldr	r3, [r3, #12]
    6b62:	4293      	cmp	r3, r2
    6b64:	d105      	bne.n	6b72 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    6b66:	4b0a      	ldr	r3, [pc, #40]	; (6b90 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    6b68:	6818      	ldr	r0, [r3, #0]
    6b6a:	f001 fbf3 	bl	8354 <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    6b6e:	2001      	movs	r0, #1
    6b70:	bd08      	pop	{r3, pc}
            PortClose();
    6b72:	4798      	blx	r3
    }
    6b74:	2001      	movs	r0, #1
    6b76:	bd08      	pop	{r3, pc}
    6b78:	4a06      	ldr	r2, [pc, #24]	; (6b94 <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    6b7a:	689b      	ldr	r3, [r3, #8]
    6b7c:	4293      	cmp	r3, r2
    6b7e:	d1f8      	bne.n	6b72 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    6b80:	4b03      	ldr	r3, [pc, #12]	; (6b90 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    6b82:	6818      	ldr	r0, [r3, #0]
    6b84:	f001 f80c 	bl	7ba0 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    6b88:	2001      	movs	r0, #1
    6b8a:	bd08      	pop	{r3, pc}
    6b8c:	00006aa5 	.word	0x00006aa5
    6b90:	20000c14 	.word	0x20000c14
    6b94:	00006a99 	.word	0x00006a99

00006b98 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6b98:	f1a0 0004 	sub.w	r0, r0, #4
    6b9c:	e7dc      	b.n	6b58 <_ZN9ClearCore9SerialUsb5StateEs>
    6b9e:	bf00      	nop

00006ba0 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    6ba0:	7980      	ldrb	r0, [r0, #6]
    6ba2:	4770      	bx	lr

00006ba4 <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
    6ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
    6ba6:	4d19      	ldr	r5, [pc, #100]	; (6c0c <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
    6ba8:	682c      	ldr	r4, [r5, #0]
    6baa:	f014 0401 	ands.w	r4, r4, #1
    6bae:	d002      	beq.n	6bb6 <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
    6bb0:	4b17      	ldr	r3, [pc, #92]	; (6c10 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
    6bb2:	6818      	ldr	r0, [r3, #0]
    6bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bb6:	2044      	movs	r0, #68	; 0x44
    6bb8:	f00c fb36 	bl	13228 <_Znwj>
    6bbc:	4a14      	ldr	r2, [pc, #80]	; (6c10 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
    6bbe:	4f15      	ldr	r7, [pc, #84]	; (6c14 <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
    6bc0:	4e15      	ldr	r6, [pc, #84]	; (6c18 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
    6bc2:	4916      	ldr	r1, [pc, #88]	; (6c1c <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
    6bc4:	6004      	str	r4, [r0, #0]
    6bc6:	2301      	movs	r3, #1
    6bc8:	6044      	str	r4, [r0, #4]
    6bca:	6084      	str	r4, [r0, #8]
    6bcc:	60c4      	str	r4, [r0, #12]
    6bce:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
    6bd0:	6144      	str	r4, [r0, #20]
    6bd2:	6184      	str	r4, [r0, #24]
    6bd4:	61c4      	str	r4, [r0, #28]
    6bd6:	6244      	str	r4, [r0, #36]	; 0x24
    6bd8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    6bdc:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
    6be0:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
    6be4:	6204      	str	r4, [r0, #32]
    6be6:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
    6bea:	8584      	strh	r4, [r0, #44]	; 0x2c
    6bec:	85c4      	strh	r4, [r0, #46]	; 0x2e
    6bee:	8604      	strh	r4, [r0, #48]	; 0x30
    6bf0:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
    6bf4:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
    6bf8:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    6bfc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    6c00:	6347      	str	r7, [r0, #52]	; 0x34
    6c02:	6386      	str	r6, [r0, #56]	; 0x38
    6c04:	63c1      	str	r1, [r0, #60]	; 0x3c
    6c06:	6010      	str	r0, [r2, #0]
    6c08:	602b      	str	r3, [r5, #0]
    return *instance;
}
    6c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c0c:	20000c04 	.word	0x20000c04
    6c10:	20000c0c 	.word	0x20000c0c
    6c14:	09c400fa 	.word	0x09c400fa
    6c18:	2cec1388 	.word	0x2cec1388
    6c1c:	09c41388 	.word	0x09c41388

00006c20 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
    6c20:	6840      	ldr	r0, [r0, #4]
    6c22:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
    6c26:	4008      	ands	r0, r1
    6c28:	4770      	bx	lr
    6c2a:	bf00      	nop

00006c2c <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
    6c2c:	6840      	ldr	r0, [r0, #4]
    6c2e:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
    6c32:	f3c0 2000 	ubfx	r0, r0, #8, #1
    6c36:	4770      	bx	lr

00006c38 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
    6c38:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
    6c3a:	2300      	movs	r3, #0
    m_faultLed = faultLed;
    6c3c:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
    6c3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
    6c42:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
    6c44:	4802      	ldr	r0, [pc, #8]	; (6c50 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
    6c46:	f005 f979 	bl	bf3c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
    6c4a:	2001      	movs	r0, #1
    6c4c:	bd08      	pop	{r3, pc}
    6c4e:	bf00      	nop
    6c50:	20001b10 	.word	0x20001b10

00006c54 <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
    6c54:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
    6c58:	b951      	cbnz	r1, 6c70 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
    6c5a:	4b17      	ldr	r3, [pc, #92]	; (6cb8 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
    6c5c:	2204      	movs	r2, #4
    6c5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
    6c62:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
    6c66:	f042 0201 	orr.w	r2, r2, #1
    6c6a:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    6c6e:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
    6c70:	1d03      	adds	r3, r0, #4
    6c72:	f3bf 8f5b 	dmb	ish
    6c76:	e853 2f00 	ldrex	r2, [r3]
    6c7a:	f042 0208 	orr.w	r2, r2, #8
    6c7e:	e843 2100 	strex	r1, r2, [r3]
    6c82:	2900      	cmp	r1, #0
    6c84:	d1f7      	bne.n	6c76 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
    6c86:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
    6c8a:	f3bf 8f5b 	dmb	ish
    6c8e:	300c      	adds	r0, #12
    6c90:	e850 3f00 	ldrex	r3, [r0]
    6c94:	f043 0308 	orr.w	r3, r3, #8
    6c98:	e840 3200 	strex	r2, r3, [r0]
    6c9c:	2a00      	cmp	r2, #0
    6c9e:	d1f7      	bne.n	6c90 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
    6ca0:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
    6ca4:	4b04      	ldr	r3, [pc, #16]	; (6cb8 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
    6ca6:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
    6ca8:	2102      	movs	r1, #2
    6caa:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
    6cae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    6cb2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    6cb6:	4770      	bx	lr
    6cb8:	41008000 	.word	0x41008000

00006cbc <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
    6cbc:	4401      	add	r1, r0
    6cbe:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    6cc2:	431a      	orrs	r2, r3
    6cc4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    6cc8:	4770      	bx	lr
    6cca:	bf00      	nop

00006ccc <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
    6ccc:	b2cb      	uxtb	r3, r1
    6cce:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    6cd0:	b510      	push	{r4, lr}
    6cd2:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
    6cd4:	d505      	bpl.n	6ce2 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
    6cd6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
    6cda:	f042 0202 	orr.w	r2, r2, #2
    6cde:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
    6ce2:	0798      	lsls	r0, r3, #30
    6ce4:	d505      	bpl.n	6cf2 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
    6ce6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    6cea:	f042 0201 	orr.w	r2, r2, #1
    6cee:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
    6cf2:	075a      	lsls	r2, r3, #29
    6cf4:	d505      	bpl.n	6d02 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
    6cf6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    6cfa:	f042 0201 	orr.w	r2, r2, #1
    6cfe:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
    6d02:	06d8      	lsls	r0, r3, #27
    6d04:	d505      	bpl.n	6d12 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
    6d06:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    6d0a:	f042 0204 	orr.w	r2, r2, #4
    6d0e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
    6d12:	f3c1 2107 	ubfx	r1, r1, #8, #8
    6d16:	06ca      	lsls	r2, r1, #27
    6d18:	d505      	bpl.n	6d26 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
    6d1a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    6d1e:	f042 0202 	orr.w	r2, r2, #2
    6d22:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
    6d26:	4a14      	ldr	r2, [pc, #80]	; (6d78 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
    6d28:	6812      	ldr	r2, [r2, #0]
    6d2a:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
    6d2e:	b112      	cbz	r2, 6d36 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
    6d30:	f011 0f0c 	tst.w	r1, #12
    6d34:	d118      	bne.n	6d68 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
    6d36:	061b      	lsls	r3, r3, #24
    6d38:	d505      	bpl.n	6d46 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
    6d3a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    6d3e:	f043 0308 	orr.w	r3, r3, #8
    6d42:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
    6d46:	f104 0024 	add.w	r0, r4, #36	; 0x24
    6d4a:	f007 fc77 	bl	e63c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
    6d4e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
    6d52:	4a0a      	ldr	r2, [pc, #40]	; (6d7c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
    6d54:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
    6d58:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
    6d5c:	3300      	adds	r3, #0
    6d5e:	bf18      	it	ne
    6d60:	2301      	movne	r3, #1
    6d62:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
    6d66:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
    6d68:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    6d6c:	f042 0204 	orr.w	r2, r2, #4
    6d70:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
    6d74:	e7df      	b.n	6d36 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
    6d76:	bf00      	nop
    6d78:	20001d3c 	.word	0x20001d3c
    6d7c:	20001b10 	.word	0x20001b10

00006d80 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
    6d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d84:	b082      	sub	sp, #8
            reg = 0;
    6d86:	2300      	movs	r3, #0
    6d88:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6d8a:	4b98      	ldr	r3, [pc, #608]	; (6fec <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
    6d8c:	6844      	ldr	r4, [r0, #4]
    6d8e:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6d92:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
    6d94:	4f96      	ldr	r7, [pc, #600]	; (6ff0 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6d96:	8a13      	ldrh	r3, [r2, #16]
    6d98:	f8df 8274 	ldr.w	r8, [pc, #628]	; 7010 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
    6d9c:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6d9e:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
    6da0:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6da2:	b29b      	uxth	r3, r3
    return (currentStatus &&
    6da4:	bf4c      	ite	mi
    6da6:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6daa:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
    6dae:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
    6db0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6db4:	4e8f      	ldr	r6, [pc, #572]	; (6ff4 <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6db6:	bfd4      	ite	le
    6db8:	2300      	movle	r3, #0
    6dba:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
    6dbc:	f363 0000 	bfi	r0, r3, #0, #1
    6dc0:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
    6dc4:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6dc6:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6dc8:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
    6dca:	b29b      	uxth	r3, r3
    return (currentStatus &&
    6dcc:	bf4c      	ite	mi
    6dce:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6dd2:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
    6dd6:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
    6dd8:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6ddc:	bfcc      	ite	gt
    6dde:	2300      	movgt	r3, #0
    6de0:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
    6de2:	f363 0041 	bfi	r0, r3, #1, #1
    6de6:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
    6dea:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
    6dec:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
    6df0:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
    6df2:	b29b      	uxth	r3, r3
    return (currentStatus &&
    6df4:	bf4c      	ite	mi
    6df6:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
    6dfa:	f644 5192 	movwpl	r1, #19858	; 0x4d92
    6dfe:	428b      	cmp	r3, r1
    6e00:	bfcc      	ite	gt
    6e02:	2300      	movgt	r3, #0
    6e04:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
    6e06:	f363 1004 	bfi	r0, r3, #4, #1
    6e0a:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
    6e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6e12:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
    6e16:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
    6e1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6e1e:	4976      	ldr	r1, [pc, #472]	; (6ff8 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
    6e20:	4f76      	ldr	r7, [pc, #472]	; (6ffc <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6e22:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
    6e24:	43db      	mvns	r3, r3
    6e26:	b2c0      	uxtb	r0, r0
    6e28:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
    6e2c:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6e30:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
    6e32:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6e36:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
    6e3a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
    6e3e:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6e42:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6e46:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
    6e4a:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6e4c:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
    6e50:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6e54:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
    6e58:	bf18      	it	ne
    6e5a:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
    6e5c:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6e60:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
    6e64:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6e68:	f083 0301 	eor.w	r3, r3, #1
    6e6c:	f363 0241 	bfi	r2, r3, #1, #1
    6e70:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6e74:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
    6e76:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
    6e7a:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
    6e7e:	b2d2      	uxtb	r2, r2
    6e80:	f361 0282 	bfi	r2, r1, #2, #1
    6e84:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6e88:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
    6e8c:	4a5c      	ldr	r2, [pc, #368]	; (7000 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
    6e8e:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6e92:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6e96:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
    6e9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e9e:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6ea0:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
    6ea4:	4857      	ldr	r0, [pc, #348]	; (7004 <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6ea6:	f88d 1004 	strb.w	r1, [sp, #4]
    6eaa:	bf18      	it	ne
    6eac:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
    6eae:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
    6eb2:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
    6eb6:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
    6eb8:	4e53      	ldr	r6, [pc, #332]	; (7008 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
    6eba:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
    6ebe:	f362 1345 	bfi	r3, r2, #5, #1
    6ec2:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
    6ec6:	4628      	mov	r0, r5
    6ec8:	9901      	ldr	r1, [sp, #4]
    6eca:	f7ff feff 	bl	6ccc <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
    6ece:	6830      	ldr	r0, [r6, #0]
    6ed0:	6803      	ldr	r3, [r0, #0]
    6ed2:	681b      	ldr	r3, [r3, #0]
    6ed4:	4543      	cmp	r3, r8
    6ed6:	f040 8084 	bne.w	6fe2 <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
        return m_mode;
    6eda:	7980      	ldrb	r0, [r0, #6]
    6edc:	2804      	cmp	r0, #4
    6ede:	d00c      	beq.n	6efa <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
    6ee0:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
    6ee4:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    6ee8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    6eec:	bf14      	ite	ne
    6eee:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    6ef2:	f023 0308 	biceq.w	r3, r3, #8
    6ef6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
    6efa:	6870      	ldr	r0, [r6, #4]
    6efc:	6803      	ldr	r3, [r0, #0]
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	4543      	cmp	r3, r8
    6f02:	d170      	bne.n	6fe6 <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
    6f04:	7980      	ldrb	r0, [r0, #6]
    6f06:	2804      	cmp	r0, #4
    6f08:	d00c      	beq.n	6f24 <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
    6f0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
    6f0e:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    6f12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    6f16:	bf14      	ite	ne
    6f18:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    6f1c:	f023 0304 	biceq.w	r3, r3, #4
    6f20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
    6f24:	9a01      	ldr	r2, [sp, #4]
    6f26:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
    6f2a:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
    6f2c:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
    6f2e:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
    6f32:	f105 0210 	add.w	r2, r5, #16
    6f36:	f3bf 8f5b 	dmb	ish
    6f3a:	e852 1f00 	ldrex	r1, [r2]
    6f3e:	4319      	orrs	r1, r3
    6f40:	e842 1000 	strex	r0, r1, [r2]
    6f44:	2800      	cmp	r0, #0
    6f46:	d1f8      	bne.n	6f3a <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
    6f48:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
    6f4c:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
    6f4e:	f3bf 8f5b 	dmb	ish
    6f52:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
    6f56:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
    6f5a:	e853 2f00 	ldrex	r2, [r3]
    6f5e:	4322      	orrs	r2, r4
    6f60:	e843 2100 	strex	r1, r2, [r3]
    6f64:	2900      	cmp	r1, #0
    6f66:	d1f8      	bne.n	6f5a <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
    6f68:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
    6f6c:	f105 0308 	add.w	r3, r5, #8
    6f70:	9a01      	ldr	r2, [sp, #4]
    6f72:	f3bf 8f5b 	dmb	ish
    6f76:	e853 1f00 	ldrex	r1, [r3]
    6f7a:	4311      	orrs	r1, r2
    6f7c:	e843 1000 	strex	r0, r1, [r3]
    6f80:	2800      	cmp	r0, #0
    6f82:	d1f8      	bne.n	6f76 <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
    6f84:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
    6f88:	9b01      	ldr	r3, [sp, #4]
    6f8a:	f3bf 8f5b 	dmb	ish
    6f8e:	e855 2f00 	ldrex	r2, [r5]
    6f92:	431a      	orrs	r2, r3
    6f94:	e845 2100 	strex	r1, r2, [r5]
    6f98:	2900      	cmp	r1, #0
    6f9a:	d1f8      	bne.n	6f8e <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
    6f9c:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
    6fa0:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
    6fa2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
    6fa6:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
    6faa:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
    6fae:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
    6fb0:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
    6fb4:	d012      	beq.n	6fdc <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
    6fb6:	4c15      	ldr	r4, [pc, #84]	; (700c <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
    6fb8:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
    6fbc:	f854 0b04 	ldr.w	r0, [r4], #4
    6fc0:	f7fe fef8 	bl	5db4 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
    6fc4:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
    6fc6:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
    6fca:	d1f7      	bne.n	6fbc <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
    6fcc:	6830      	ldr	r0, [r6, #0]
    6fce:	f007 ffd9 	bl	ef84 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
    6fd2:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    6fd6:	6870      	ldr	r0, [r6, #4]
    6fd8:	f007 ffd4 	bl	ef84 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
    6fdc:	b002      	add	sp, #8
    6fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
    6fe2:	4798      	blx	r3
    6fe4:	e77a      	b.n	6edc <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
    6fe6:	4798      	blx	r3
    6fe8:	e78d      	b.n	6f06 <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
    6fea:	bf00      	nop
    6fec:	20000afc 	.word	0x20000afc
    6ff0:	41008000 	.word	0x41008000
    6ff4:	20001d3c 	.word	0x20001d3c
    6ff8:	20001f38 	.word	0x20001f38
    6ffc:	20001b10 	.word	0x20001b10
    7000:	200019c4 	.word	0x200019c4
    7004:	20001d20 	.word	0x20001d20
    7008:	00022dfc 	.word	0x00022dfc
    700c:	00022e04 	.word	0x00022e04
    7010:	00006ba1 	.word	0x00006ba1

00007014 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
    7014:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
    7016:	b94a      	cbnz	r2, 702c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
    7018:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
    701c:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
    701e:	6983      	ldr	r3, [r0, #24]
    7020:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
    7022:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
    7024:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
    7026:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
    7028:	6181      	str	r1, [r0, #24]
    702a:	4770      	bx	lr
        m_overloadRT.reg |= mask;
    702c:	4319      	orrs	r1, r3
    702e:	e7f5      	b.n	701c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00007030 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

    7030:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
    7032:	f7ff fdb7 	bl	6ba4 <_ZN9ClearCore13StatusManager8InstanceEv>
    7036:	4b01      	ldr	r3, [pc, #4]	; (703c <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
    7038:	6018      	str	r0, [r3, #0]
    703a:	bd08      	pop	{r3, pc}
    703c:	20000c08 	.word	0x20000c08

00007040 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    7040:	b530      	push	{r4, r5, lr}
    7042:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    7044:	4d1a      	ldr	r5, [pc, #104]	; (70b0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    7046:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    704a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    704e:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    7050:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    7054:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    7058:	d112      	bne.n	7080 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    705a:	4621      	mov	r1, r4
    705c:	4620      	mov	r0, r4
    705e:	f006 f939 	bl	d2d4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    7062:	4621      	mov	r1, r4
    7064:	2001      	movs	r0, #1
    7066:	f006 f935 	bl	d2d4 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    706a:	f006 f927 	bl	d2bc <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    706e:	f006 f95f 	bl	d330 <cdcdf_acm_get_line_coding>
    7072:	6803      	ldr	r3, [r0, #0]
    7074:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    7078:	d012      	beq.n	70a0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    707a:	2000      	movs	r0, #0
    707c:	b003      	add	sp, #12
    707e:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    7080:	490c      	ldr	r1, [pc, #48]	; (70b4 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    7082:	2000      	movs	r0, #0
    7084:	f006 f926 	bl	d2d4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    7088:	490b      	ldr	r1, [pc, #44]	; (70b8 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    708a:	2001      	movs	r0, #1
    708c:	f006 f922 	bl	d2d4 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    7090:	6828      	ldr	r0, [r5, #0]
    7092:	2140      	movs	r1, #64	; 0x40
    7094:	3080      	adds	r0, #128	; 0x80
    7096:	f006 f8e9 	bl	d26c <cdcdf_acm_read>
}
    709a:	2000      	movs	r0, #0
    709c:	b003      	add	sp, #12
    709e:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    70a0:	2101      	movs	r1, #1
    70a2:	4806      	ldr	r0, [pc, #24]	; (70bc <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    70a4:	f003 fa36 	bl	a514 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    70a8:	2000      	movs	r0, #0
    70aa:	b003      	add	sp, #12
    70ac:	bd30      	pop	{r4, r5, pc}
    70ae:	bf00      	nop
    70b0:	20000c14 	.word	0x20000c14
    70b4:	000070c1 	.word	0x000070c1
    70b8:	000072f9 	.word	0x000072f9
    70bc:	20001b0c 	.word	0x20001b0c

000070c0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    70c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c4:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    70c6:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    70c8:	498a      	ldr	r1, [pc, #552]	; (72f4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    70ca:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    70cc:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    70d0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    70d4:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    70d8:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    70da:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    70dc:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    70de:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    70e2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    70e6:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    70ea:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    70ec:	bf48      	it	mi
    70ee:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    70f0:	2c00      	cmp	r4, #0
    70f2:	f000 80d6 	beq.w	72a2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    70f6:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    70fa:	f000 80d2 	beq.w	72a2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    70fe:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    7102:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    7106:	42a3      	cmp	r3, r4
    7108:	bf28      	it	cs
    710a:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    710c:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    7110:	4299      	cmp	r1, r3
    7112:	bf28      	it	cs
    7114:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    7116:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7118:	2900      	cmp	r1, #0
    711a:	f000 80e8 	beq.w	72ee <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    711e:	1d2c      	adds	r4, r5, #4
    7120:	4404      	add	r4, r0
    7122:	1d17      	adds	r7, r2, #4
    7124:	42be      	cmp	r6, r7
    7126:	bf38      	it	cc
    7128:	42a2      	cmpcc	r2, r4
    712a:	f0c0 80ce 	bcc.w	72ca <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    712e:	290b      	cmp	r1, #11
    7130:	f240 80cb 	bls.w	72ca <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    7134:	4254      	negs	r4, r2
    7136:	f014 0403 	ands.w	r4, r4, #3
    713a:	f000 80b7 	beq.w	72ac <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    713e:	7817      	ldrb	r7, [r2, #0]
    7140:	5547      	strb	r7, [r0, r5]
    7142:	2c01      	cmp	r4, #1
    7144:	f106 0c01 	add.w	ip, r6, #1
    7148:	f102 0801 	add.w	r8, r2, #1
    714c:	f000 80b0 	beq.w	72b0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    7150:	7857      	ldrb	r7, [r2, #1]
    7152:	7077      	strb	r7, [r6, #1]
    7154:	2c02      	cmp	r4, #2
    7156:	f106 0c02 	add.w	ip, r6, #2
    715a:	f102 0802 	add.w	r8, r2, #2
    715e:	f000 80a7 	beq.w	72b0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    7162:	7897      	ldrb	r7, [r2, #2]
    7164:	70b7      	strb	r7, [r6, #2]
    7166:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    716a:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    716c:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7170:	9601      	str	r6, [sp, #4]
    7172:	eba1 0b04 	sub.w	fp, r1, r4
    7176:	f1ab 0604 	sub.w	r6, fp, #4
    717a:	08b6      	lsrs	r6, r6, #2
    717c:	192f      	adds	r7, r5, r4
    717e:	3601      	adds	r6, #1
    7180:	ea4f 0986 	mov.w	r9, r6, lsl #2
    7184:	4407      	add	r7, r0
    7186:	4414      	add	r4, r2
    7188:	f04f 0e00 	mov.w	lr, #0
    718c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7190:	f854 ab04 	ldr.w	sl, [r4], #4
    7194:	f847 ab04 	str.w	sl, [r7], #4
    7198:	4576      	cmp	r6, lr
    719a:	d8f7      	bhi.n	718c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    719c:	9c01      	ldr	r4, [sp, #4]
    719e:	45cb      	cmp	fp, r9
    71a0:	444c      	add	r4, r9
    71a2:	eb0c 0709 	add.w	r7, ip, r9
    71a6:	eb08 0e09 	add.w	lr, r8, r9
    71aa:	f000 8089 	beq.w	72c0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    71ae:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    71b2:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    71b6:	1c66      	adds	r6, r4, #1
    71b8:	42b1      	cmp	r1, r6
    71ba:	f240 8081 	bls.w	72c0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    71be:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    71c0:	f89e 6001 	ldrb.w	r6, [lr, #1]
    71c4:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    71c6:	42a1      	cmp	r1, r4
    71c8:	d97a      	bls.n	72c0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    71ca:	f89e 4002 	ldrb.w	r4, [lr, #2]
    71ce:	70bc      	strb	r4, [r7, #2]
    71d0:	1856      	adds	r6, r2, r1
    71d2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    71d6:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    71da:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    71dc:	1a64      	subs	r4, r4, r1
        if (count) {
    71de:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    71e0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    71e4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    71e8:	d064      	beq.n	72b4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    71ea:	1d31      	adds	r1, r6, #4
    71ec:	1d02      	adds	r2, r0, #4
    71ee:	4296      	cmp	r6, r2
    71f0:	bf38      	it	cc
    71f2:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    71f4:	4604      	mov	r4, r0
    71f6:	d371      	bcc.n	72dc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    71f8:	2b0b      	cmp	r3, #11
    71fa:	d96f      	bls.n	72dc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    71fc:	4272      	negs	r2, r6
    71fe:	f012 0203 	ands.w	r2, r2, #3
    7202:	d05f      	beq.n	72c4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    7204:	7831      	ldrb	r1, [r6, #0]
    7206:	7001      	strb	r1, [r0, #0]
    7208:	2a01      	cmp	r2, #1
    720a:	f100 0401 	add.w	r4, r0, #1
    720e:	f106 0e01 	add.w	lr, r6, #1
    7212:	d058      	beq.n	72c6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    7214:	7871      	ldrb	r1, [r6, #1]
    7216:	7041      	strb	r1, [r0, #1]
    7218:	2a02      	cmp	r2, #2
    721a:	f100 0402 	add.w	r4, r0, #2
    721e:	f106 0e02 	add.w	lr, r6, #2
    7222:	d050      	beq.n	72c6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    7224:	78b1      	ldrb	r1, [r6, #2]
    7226:	7081      	strb	r1, [r0, #2]
    7228:	1cc4      	adds	r4, r0, #3
    722a:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    722e:	2703      	movs	r7, #3
    7230:	eba3 0c02 	sub.w	ip, r3, r2
    7234:	f1ac 0104 	sub.w	r1, ip, #4
    7238:	0889      	lsrs	r1, r1, #2
    723a:	1c4d      	adds	r5, r1, #1
    723c:	4416      	add	r6, r2
    723e:	ea4f 0885 	mov.w	r8, r5, lsl #2
    7242:	4402      	add	r2, r0
    7244:	2100      	movs	r1, #0
    7246:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    7248:	f856 9b04 	ldr.w	r9, [r6], #4
    724c:	f842 9b04 	str.w	r9, [r2], #4
    7250:	428d      	cmp	r5, r1
    7252:	d8f8      	bhi.n	7246 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    7254:	45c4      	cmp	ip, r8
    7256:	eb07 0208 	add.w	r2, r7, r8
    725a:	eb04 0108 	add.w	r1, r4, r8
    725e:	eb0e 0608 	add.w	r6, lr, r8
    7262:	d00d      	beq.n	7280 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    7264:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    7268:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    726c:	1c54      	adds	r4, r2, #1
    726e:	42a3      	cmp	r3, r4
    7270:	d906      	bls.n	7280 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    7272:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    7274:	7874      	ldrb	r4, [r6, #1]
    7276:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    7278:	4293      	cmp	r3, r2
    727a:	d901      	bls.n	7280 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    727c:	78b2      	ldrb	r2, [r6, #2]
    727e:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    7280:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7284:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    7288:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    728c:	441a      	add	r2, r3
            m_readBufAvail -= count;
    728e:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    7290:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7294:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    7298:	b91c      	cbnz	r4, 72a2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    729a:	3080      	adds	r0, #128	; 0x80
    729c:	2140      	movs	r1, #64	; 0x40
    729e:	f005 ffe5 	bl	d26c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    72a2:	b662      	cpsie	i
}
    72a4:	2001      	movs	r0, #1
    72a6:	b003      	add	sp, #12
    72a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    72ac:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    72ae:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    72b0:	9401      	str	r4, [sp, #4]
    72b2:	e75e      	b.n	7172 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    72b4:	4429      	add	r1, r5
    72b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    72ba:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    72be:	e7eb      	b.n	7298 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    72c0:	1856      	adds	r6, r2, r1
    72c2:	e786      	b.n	71d2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    72c4:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    72c6:	4617      	mov	r7, r2
    72c8:	e7b2      	b.n	7230 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    72ca:	1e74      	subs	r4, r6, #1
    72cc:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    72ce:	f812 7b01 	ldrb.w	r7, [r2], #1
    72d2:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    72d6:	42b2      	cmp	r2, r6
    72d8:	d1f9      	bne.n	72ce <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    72da:	e77a      	b.n	71d2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    72dc:	1e42      	subs	r2, r0, #1
    72de:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    72e0:	f816 1b01 	ldrb.w	r1, [r6], #1
    72e4:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    72e8:	42b4      	cmp	r4, r6
    72ea:	d1f9      	bne.n	72e0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    72ec:	e7c8      	b.n	7280 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    72ee:	4616      	mov	r6, r2
    72f0:	e773      	b.n	71da <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    72f2:	bf00      	nop
    72f4:	20000c14 	.word	0x20000c14

000072f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    72f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    72fc:	48d8      	ldr	r0, [pc, #864]	; (7660 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    72fe:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    7300:	2900      	cmp	r1, #0
    7302:	f040 81ab 	bne.w	765c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    7306:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    7308:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    730c:	441a      	add	r2, r3
    730e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    7312:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    7316:	2300      	movs	r3, #0
    7318:	f3bf 8f5b 	dmb	ish
    731c:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    7320:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    7324:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7326:	f3bf 8f5b 	dmb	ish
    732a:	f04f 0101 	mov.w	r1, #1
    732e:	f504 7388 	add.w	r3, r4, #272	; 0x110
    7332:	e8d3 2f4f 	ldrexb	r2, [r3]
    7336:	e8c3 1f40 	strexb	r0, r1, [r3]
    733a:	2800      	cmp	r0, #0
    733c:	d1f9      	bne.n	7332 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    733e:	f3bf 8f5b 	dmb	ish
    7342:	f012 0fff 	tst.w	r2, #255	; 0xff
    7346:	f040 80dc 	bne.w	7502 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    734a:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    734e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    7352:	428e      	cmp	r6, r1
    7354:	f000 8191 	beq.w	767a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7358:	f104 0240 	add.w	r2, r4, #64	; 0x40
    735c:	eb02 0706 	add.w	r7, r2, r6
    7360:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    7364:	f0c0 80d1 	bcc.w	750a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7368:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    736c:	4419      	add	r1, r3
    736e:	2940      	cmp	r1, #64	; 0x40
    7370:	bf28      	it	cs
    7372:	2140      	movcs	r1, #64	; 0x40
    7374:	428b      	cmp	r3, r1
    7376:	bf28      	it	cs
    7378:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    737a:	2b00      	cmp	r3, #0
    737c:	f000 81a1 	beq.w	76c2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    7380:	f106 0540 	add.w	r5, r6, #64	; 0x40
    7384:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    7388:	1960      	adds	r0, r4, r5
    738a:	44a4      	add	ip, r4
    738c:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    7390:	4540      	cmp	r0, r8
    7392:	bf38      	it	cc
    7394:	45e6      	cmpcc	lr, ip
    7396:	f0c0 818a 	bcc.w	76ae <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    739a:	2b0b      	cmp	r3, #11
    739c:	f240 8187 	bls.w	76ae <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    73a0:	4240      	negs	r0, r0
    73a2:	f010 0003 	ands.w	r0, r0, #3
    73a6:	f000 8161 	beq.w	766c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    73aa:	5d96      	ldrb	r6, [r2, r6]
    73ac:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    73b0:	2801      	cmp	r0, #1
    73b2:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    73b6:	f107 0801 	add.w	r8, r7, #1
    73ba:	f000 8159 	beq.w	7670 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    73be:	787e      	ldrb	r6, [r7, #1]
    73c0:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    73c4:	2802      	cmp	r0, #2
    73c6:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    73ca:	f107 0802 	add.w	r8, r7, #2
    73ce:	f000 814f 	beq.w	7670 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    73d2:	78be      	ldrb	r6, [r7, #2]
    73d4:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    73d8:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    73da:	f107 0803 	add.w	r8, r7, #3
    73de:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    73e2:	9601      	str	r6, [sp, #4]
    73e4:	eba3 0b00 	sub.w	fp, r3, r0
    73e8:	f1ab 0604 	sub.w	r6, fp, #4
    73ec:	08b6      	lsrs	r6, r6, #2
    73ee:	4405      	add	r5, r0
    73f0:	3601      	adds	r6, #1
    73f2:	30c0      	adds	r0, #192	; 0xc0
    73f4:	4425      	add	r5, r4
    73f6:	4420      	add	r0, r4
    73f8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    73fc:	2700      	movs	r7, #0
    73fe:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7400:	f855 ab04 	ldr.w	sl, [r5], #4
    7404:	f840 ab04 	str.w	sl, [r0], #4
    7408:	42b7      	cmp	r7, r6
    740a:	d3f8      	bcc.n	73fe <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    740c:	9801      	ldr	r0, [sp, #4]
    740e:	45cb      	cmp	fp, r9
    7410:	4448      	add	r0, r9
    7412:	eb0c 0509 	add.w	r5, ip, r9
    7416:	eb08 0709 	add.w	r7, r8, r9
    741a:	d00d      	beq.n	7438 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    741c:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    7420:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7424:	1c46      	adds	r6, r0, #1
    7426:	42b3      	cmp	r3, r6
    7428:	d906      	bls.n	7438 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    742a:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    742c:	787e      	ldrb	r6, [r7, #1]
    742e:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7430:	4283      	cmp	r3, r0
    7432:	d901      	bls.n	7438 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    7434:	78b8      	ldrb	r0, [r7, #2]
    7436:	70a8      	strb	r0, [r5, #2]
    7438:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    743c:	1acb      	subs	r3, r1, r3
    743e:	f000 80fc 	beq.w	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    7442:	f104 0544 	add.w	r5, r4, #68	; 0x44
    7446:	1d06      	adds	r6, r0, #4
    7448:	42b2      	cmp	r2, r6
    744a:	bf38      	it	cc
    744c:	42a8      	cmpcc	r0, r5
    744e:	f0c0 8125 	bcc.w	769c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    7452:	2b0b      	cmp	r3, #11
    7454:	f240 8122 	bls.w	769c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    7458:	4255      	negs	r5, r2
    745a:	f015 0503 	ands.w	r5, r5, #3
    745e:	f000 8109 	beq.w	7674 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    7462:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    7466:	7002      	strb	r2, [r0, #0]
    7468:	2d01      	cmp	r5, #1
    746a:	f100 0801 	add.w	r8, r0, #1
    746e:	f104 0241 	add.w	r2, r4, #65	; 0x41
    7472:	f000 8100 	beq.w	7676 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    7476:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    747a:	7042      	strb	r2, [r0, #1]
    747c:	2d02      	cmp	r5, #2
    747e:	f100 0802 	add.w	r8, r0, #2
    7482:	f104 0242 	add.w	r2, r4, #66	; 0x42
    7486:	f000 80f6 	beq.w	7676 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    748a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    748e:	7082      	strb	r2, [r0, #2]
    7490:	f100 0803 	add.w	r8, r0, #3
    7494:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7498:	2703      	movs	r7, #3
    749a:	eba3 0905 	sub.w	r9, r3, r5
    749e:	f1a9 0604 	sub.w	r6, r9, #4
    74a2:	08b6      	lsrs	r6, r6, #2
    74a4:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    74a8:	3601      	adds	r6, #1
    74aa:	4428      	add	r0, r5
    74ac:	44a4      	add	ip, r4
    74ae:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    74b2:	f04f 0a00 	mov.w	sl, #0
    74b6:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    74ba:	f85c 5b04 	ldr.w	r5, [ip], #4
    74be:	f840 5b04 	str.w	r5, [r0], #4
    74c2:	4556      	cmp	r6, sl
    74c4:	d8f7      	bhi.n	74b6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    74c6:	45d9      	cmp	r9, fp
    74c8:	445f      	add	r7, fp
    74ca:	eb08 000b 	add.w	r0, r8, fp
    74ce:	eb02 050b 	add.w	r5, r2, fp
    74d2:	f000 80b2 	beq.w	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    74d6:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    74da:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74de:	1c7a      	adds	r2, r7, #1
    74e0:	4293      	cmp	r3, r2
    74e2:	f240 80aa 	bls.w	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    74e6:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    74e8:	786a      	ldrb	r2, [r5, #1]
    74ea:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74ec:	42bb      	cmp	r3, r7
    74ee:	f240 80a4 	bls.w	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    74f2:	78ab      	ldrb	r3, [r5, #2]
    74f4:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    74f6:	4670      	mov	r0, lr
    74f8:	f005 fecc 	bl	d294 <cdcdf_acm_write>
    74fc:	2800      	cmp	r0, #0
    74fe:	f040 80a2 	bne.w	7646 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    7502:	2001      	movs	r0, #1
    7504:	b003      	add	sp, #12
    7506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    750a:	1b89      	subs	r1, r1, r6
    750c:	f106 0340 	add.w	r3, r6, #64	; 0x40
    7510:	f106 0044 	add.w	r0, r6, #68	; 0x44
    7514:	2940      	cmp	r1, #64	; 0x40
    7516:	eb04 0803 	add.w	r8, r4, r3
    751a:	4420      	add	r0, r4
    751c:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    7520:	bf28      	it	cs
    7522:	2140      	movcs	r1, #64	; 0x40
    7524:	45a8      	cmp	r8, r5
    7526:	bf38      	it	cc
    7528:	4586      	cmpcc	lr, r0
    752a:	f0c0 80ad 	bcc.w	7688 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    752e:	290b      	cmp	r1, #11
    7530:	f240 80aa 	bls.w	7688 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    7534:	f1c8 0800 	rsb	r8, r8, #0
    7538:	f018 0803 	ands.w	r8, r8, #3
    753c:	f000 8092 	beq.w	7664 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    7540:	5d92      	ldrb	r2, [r2, r6]
    7542:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    7546:	f1b8 0f01 	cmp.w	r8, #1
    754a:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    754e:	f107 0601 	add.w	r6, r7, #1
    7552:	f000 8089 	beq.w	7668 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    7556:	787a      	ldrb	r2, [r7, #1]
    7558:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    755c:	f1b8 0f02 	cmp.w	r8, #2
    7560:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    7564:	f107 0602 	add.w	r6, r7, #2
    7568:	d07e      	beq.n	7668 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    756a:	78ba      	ldrb	r2, [r7, #2]
    756c:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    7570:	1cfe      	adds	r6, r7, #3
    7572:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7576:	f04f 0903 	mov.w	r9, #3
    757a:	4443      	add	r3, r8
    757c:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    7580:	58e2      	ldr	r2, [r4, r3]
    7582:	5022      	str	r2, [r4, r0]
    7584:	eba1 0808 	sub.w	r8, r1, r8
    7588:	f1a8 0204 	sub.w	r2, r8, #4
    758c:	4423      	add	r3, r4
    758e:	0892      	lsrs	r2, r2, #2
    7590:	3201      	adds	r2, #1
    7592:	4420      	add	r0, r4
    7594:	685f      	ldr	r7, [r3, #4]
    7596:	6047      	str	r7, [r0, #4]
    7598:	2a02      	cmp	r2, #2
    759a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    759e:	d035      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75a0:	689f      	ldr	r7, [r3, #8]
    75a2:	6087      	str	r7, [r0, #8]
    75a4:	2a03      	cmp	r2, #3
    75a6:	d031      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75a8:	68df      	ldr	r7, [r3, #12]
    75aa:	60c7      	str	r7, [r0, #12]
    75ac:	2a04      	cmp	r2, #4
    75ae:	d02d      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75b0:	691f      	ldr	r7, [r3, #16]
    75b2:	6107      	str	r7, [r0, #16]
    75b4:	2a05      	cmp	r2, #5
    75b6:	d029      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75b8:	695f      	ldr	r7, [r3, #20]
    75ba:	6147      	str	r7, [r0, #20]
    75bc:	2a06      	cmp	r2, #6
    75be:	d025      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75c0:	699f      	ldr	r7, [r3, #24]
    75c2:	6187      	str	r7, [r0, #24]
    75c4:	2a07      	cmp	r2, #7
    75c6:	d021      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75c8:	69df      	ldr	r7, [r3, #28]
    75ca:	61c7      	str	r7, [r0, #28]
    75cc:	2a08      	cmp	r2, #8
    75ce:	d01d      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75d0:	6a1f      	ldr	r7, [r3, #32]
    75d2:	6207      	str	r7, [r0, #32]
    75d4:	2a09      	cmp	r2, #9
    75d6:	d019      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75d8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    75da:	6247      	str	r7, [r0, #36]	; 0x24
    75dc:	2a0a      	cmp	r2, #10
    75de:	d015      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75e0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    75e2:	6287      	str	r7, [r0, #40]	; 0x28
    75e4:	2a0b      	cmp	r2, #11
    75e6:	d011      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75e8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    75ea:	62c7      	str	r7, [r0, #44]	; 0x2c
    75ec:	2a0c      	cmp	r2, #12
    75ee:	d00d      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75f0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    75f2:	6307      	str	r7, [r0, #48]	; 0x30
    75f4:	2a0d      	cmp	r2, #13
    75f6:	d009      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    75f8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    75fa:	6347      	str	r7, [r0, #52]	; 0x34
    75fc:	2a0e      	cmp	r2, #14
    75fe:	d005      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7600:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    7602:	6387      	str	r7, [r0, #56]	; 0x38
    7604:	2a0f      	cmp	r2, #15
    7606:	d001      	beq.n	760c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    760a:	63c3      	str	r3, [r0, #60]	; 0x3c
    760c:	45e0      	cmp	r8, ip
    760e:	44e1      	add	r9, ip
    7610:	eb05 030c 	add.w	r3, r5, ip
    7614:	eb06 000c 	add.w	r0, r6, ip
    7618:	d00f      	beq.n	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    761a:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    761e:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7622:	f109 0201 	add.w	r2, r9, #1
    7626:	4291      	cmp	r1, r2
    7628:	d907      	bls.n	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    762a:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    762e:	7842      	ldrb	r2, [r0, #1]
    7630:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7632:	4549      	cmp	r1, r9
    7634:	d901      	bls.n	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    7636:	7882      	ldrb	r2, [r0, #2]
    7638:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    763a:	4670      	mov	r0, lr
    763c:	f005 fe2a 	bl	d294 <cdcdf_acm_write>
    7640:	2800      	cmp	r0, #0
    7642:	f43f af5e 	beq.w	7502 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7646:	f3bf 8f5b 	dmb	ish
    764a:	2300      	movs	r3, #0
    764c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    7650:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    7652:	f3bf 8f5b 	dmb	ish
}
    7656:	b003      	add	sp, #12
    7658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    765c:	6801      	ldr	r1, [r0, #0]
    765e:	e65a      	b.n	7316 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    7660:	20000c14 	.word	0x20000c14
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7664:	463e      	mov	r6, r7
    7666:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7668:	46c1      	mov	r9, r8
    766a:	e786      	b.n	757a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    766c:	46b8      	mov	r8, r7
    766e:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7670:	9001      	str	r0, [sp, #4]
    7672:	e6b7      	b.n	73e4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7674:	4680      	mov	r8, r0
    7676:	462f      	mov	r7, r5
    7678:	e70f      	b.n	749a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    767a:	f3bf 8f5b 	dmb	ish
    767e:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    7682:	f3bf 8f5b 	dmb	ish
    7686:	e73c      	b.n	7502 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    7688:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    768c:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    768e:	f817 2b01 	ldrb.w	r2, [r7], #1
    7692:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7696:	4287      	cmp	r7, r0
    7698:	d1f9      	bne.n	768e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    769a:	e7ce      	b.n	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    769c:	3801      	subs	r0, #1
    769e:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    76a0:	f812 5b01 	ldrb.w	r5, [r2], #1
    76a4:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    76a8:	429a      	cmp	r2, r3
    76aa:	d1f9      	bne.n	76a0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    76ac:	e7c5      	b.n	763a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    76ae:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    76b2:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    76b4:	f817 5b01 	ldrb.w	r5, [r7], #1
    76b8:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    76bc:	42be      	cmp	r6, r7
    76be:	d1f9      	bne.n	76b4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    76c0:	e6ba      	b.n	7438 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    76c2:	4670      	mov	r0, lr
    76c4:	e6ba      	b.n	743c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    76c6:	bf00      	nop

000076c8 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    76c8:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    76ca:	4e16      	ldr	r6, [pc, #88]	; (7724 <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    76cc:	6834      	ldr	r4, [r6, #0]
    76ce:	f014 0401 	ands.w	r4, r4, #1
    76d2:	d002      	beq.n	76da <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    76d4:	4b14      	ldr	r3, [pc, #80]	; (7728 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    76d6:	6818      	ldr	r0, [r3, #0]
    76d8:	bd70      	pop	{r4, r5, r6, pc}
    76da:	f44f 7090 	mov.w	r0, #288	; 0x120
    76de:	f00b fda3 	bl	13228 <_Znwj>
    76e2:	4605      	mov	r5, r0
    m_portOpen(false) {
    76e4:	f100 0380 	add.w	r3, r0, #128	; 0x80
    76e8:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    76ec:	490f      	ldr	r1, [pc, #60]	; (772c <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    76ee:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    76f2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    76f6:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    76fa:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    76fe:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    7702:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    7706:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    770a:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    770e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    7712:	2003      	movs	r0, #3
    7714:	f005 fdde 	bl	d2d4 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    7718:	4a03      	ldr	r2, [pc, #12]	; (7728 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    771a:	2301      	movs	r3, #1
    771c:	6015      	str	r5, [r2, #0]
    771e:	4628      	mov	r0, r5
    7720:	6033      	str	r3, [r6, #0]
}
    7722:	bd70      	pop	{r4, r5, r6, pc}
    7724:	20000c10 	.word	0x20000c10
    7728:	20000c58 	.word	0x20000c58
    772c:	00007041 	.word	0x00007041

00007730 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    7730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    7734:	4ac7      	ldr	r2, [pc, #796]	; (7a54 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    7736:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    773a:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    773e:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    7740:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    7744:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    7748:	0659      	lsls	r1, r3, #25
    774a:	d4fb      	bmi.n	7744 <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    774c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    7750:	49c0      	ldr	r1, [pc, #768]	; (7a54 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    7752:	2004      	movs	r0, #4
    7754:	f360 0303 	bfi	r3, r0, #0, #4
    7758:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    775c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    7760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7764:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    7768:	684b      	ldr	r3, [r1, #4]
    776a:	06db      	lsls	r3, r3, #27
    776c:	d4fc      	bmi.n	7768 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    776e:	4bba      	ldr	r3, [pc, #744]	; (7a58 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    7770:	49ba      	ldr	r1, [pc, #744]	; (7a5c <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    7772:	691a      	ldr	r2, [r3, #16]
    7774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7778:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    777a:	699a      	ldr	r2, [r3, #24]
    777c:	f042 0201 	orr.w	r2, r2, #1
    7780:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    7782:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    7786:	2203      	movs	r2, #3
    7788:	f006 f950 	bl	da2c <usb_find_str_desc>
    if (!serNumDescPtr) {
    778c:	4604      	mov	r4, r0
    778e:	2800      	cmp	r0, #0
    7790:	f000 819c 	beq.w	7acc <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    7794:	4bb2      	ldr	r3, [pc, #712]	; (7a60 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    7796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7798:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    779c:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    779e:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77a0:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    77a2:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77a6:	f100 0730 	add.w	r7, r0, #48	; 0x30
    77aa:	3037      	adds	r0, #55	; 0x37
    77ac:	2d09      	cmp	r5, #9
    77ae:	bf88      	it	hi
    77b0:	4607      	movhi	r7, r0
    77b2:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    77b6:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77ba:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    77be:	3037      	adds	r0, #55	; 0x37
    77c0:	f1b8 0f09 	cmp.w	r8, #9
    77c4:	bfc8      	it	gt
    77c6:	4684      	movgt	ip, r0
    77c8:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    77ca:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77ce:	f88d c011 	strb.w	ip, [sp, #17]
    77d2:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    77d6:	3037      	adds	r0, #55	; 0x37
    77d8:	2e09      	cmp	r6, #9
    77da:	bfc8      	it	gt
    77dc:	4684      	movgt	ip, r0
    77de:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    77e0:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77e4:	f88d c012 	strb.w	ip, [sp, #18]
    77e8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    77ec:	3037      	adds	r0, #55	; 0x37
    77ee:	2d09      	cmp	r5, #9
    77f0:	bfc8      	it	gt
    77f2:	4684      	movgt	ip, r0
    77f4:	fa5f f08e 	uxtb.w	r0, lr
    77f8:	f88d 7010 	strb.w	r7, [sp, #16]
    77fc:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    7800:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7804:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    7808:	3037      	adds	r0, #55	; 0x37
    780a:	f1be 0f09 	cmp.w	lr, #9
    780e:	bfd4      	ite	le
    7810:	46e6      	movle	lr, ip
    7812:	4686      	movgt	lr, r0
    7814:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    7816:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    781a:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    781c:	f88d e014 	strb.w	lr, [sp, #20]
    7820:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    7824:	3030      	adds	r0, #48	; 0x30
    7826:	2f09      	cmp	r7, #9
    7828:	bfcc      	ite	gt
    782a:	4677      	movgt	r7, lr
    782c:	4607      	movle	r7, r0
    782e:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    7830:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7832:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    7836:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    783a:	f100 0737 	add.w	r7, r0, #55	; 0x37
    783e:	3030      	adds	r0, #48	; 0x30
    7840:	2e09      	cmp	r6, #9
    7842:	bfcc      	ite	gt
    7844:	463e      	movgt	r6, r7
    7846:	4606      	movle	r6, r0
    7848:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    784a:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    784c:	f88d 6016 	strb.w	r6, [sp, #22]
    7850:	f100 0637 	add.w	r6, r0, #55	; 0x37
    7854:	3030      	adds	r0, #48	; 0x30
    7856:	2b09      	cmp	r3, #9
    7858:	bfcc      	ite	gt
    785a:	4633      	movgt	r3, r6
    785c:	4603      	movle	r3, r0
    785e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    7860:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7864:	f88d 3017 	strb.w	r3, [sp, #23]
    7868:	f100 0337 	add.w	r3, r0, #55	; 0x37
    786c:	3030      	adds	r0, #48	; 0x30
    786e:	2d09      	cmp	r5, #9
    7870:	bf88      	it	hi
    7872:	4618      	movhi	r0, r3
    7874:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    7878:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    787c:	f88d 0018 	strb.w	r0, [sp, #24]
    7880:	f103 0037 	add.w	r0, r3, #55	; 0x37
    7884:	3330      	adds	r3, #48	; 0x30
    7886:	f1bc 0f09 	cmp.w	ip, #9
    788a:	bfcc      	ite	gt
    788c:	4684      	movgt	ip, r0
    788e:	469c      	movle	ip, r3
    7890:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    7894:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7898:	f88d c019 	strb.w	ip, [sp, #25]
    789c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    78a0:	3330      	adds	r3, #48	; 0x30
    78a2:	f1be 0f09 	cmp.w	lr, #9
    78a6:	bfd8      	it	le
    78a8:	469c      	movle	ip, r3
    78aa:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    78ac:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    78b0:	f88d c01a 	strb.w	ip, [sp, #26]
    78b4:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    78b8:	3330      	adds	r3, #48	; 0x30
    78ba:	2f09      	cmp	r7, #9
    78bc:	bfd8      	it	le
    78be:	469c      	movle	ip, r3
    78c0:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    78c2:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    78c6:	f88d c01b 	strb.w	ip, [sp, #27]
    78ca:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    78ce:	3330      	adds	r3, #48	; 0x30
    78d0:	2e09      	cmp	r6, #9
    78d2:	bfd8      	it	le
    78d4:	469c      	movle	ip, r3
    78d6:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    78d8:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    78dc:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    78de:	f88d c01c 	strb.w	ip, [sp, #28]
    78e2:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    78e6:	3330      	adds	r3, #48	; 0x30
    78e8:	2d09      	cmp	r5, #9
    78ea:	bfcc      	ite	gt
    78ec:	4665      	movgt	r5, ip
    78ee:	461d      	movle	r5, r3
    78f0:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    78f2:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    78f4:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    78f8:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    78fc:	f103 0537 	add.w	r5, r3, #55	; 0x37
    7900:	3330      	adds	r3, #48	; 0x30
    7902:	2809      	cmp	r0, #9
    7904:	bfcc      	ite	gt
    7906:	4628      	movgt	r0, r5
    7908:	4618      	movle	r0, r3
    790a:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    790c:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7910:	f88d 001e 	strb.w	r0, [sp, #30]
    7914:	f103 0037 	add.w	r0, r3, #55	; 0x37
    7918:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    791a:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    791e:	2a09      	cmp	r2, #9
    7920:	bfcc      	ite	gt
    7922:	4602      	movgt	r2, r0
    7924:	461a      	movle	r2, r3
    7926:	fa5f f58e 	uxtb.w	r5, lr
    792a:	b2f8      	uxtb	r0, r7
    792c:	f88d 201f 	strb.w	r2, [sp, #31]
    7930:	f105 0237 	add.w	r2, r5, #55	; 0x37
    7934:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    7936:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    793a:	f1be 0f09 	cmp.w	lr, #9
    793e:	bf88      	it	hi
    7940:	4615      	movhi	r5, r2
    7942:	f100 0237 	add.w	r2, r0, #55	; 0x37
    7946:	3030      	adds	r0, #48	; 0x30
    7948:	2f09      	cmp	r7, #9
    794a:	bfc8      	it	gt
    794c:	4610      	movgt	r0, r2
    794e:	b2f3      	uxtb	r3, r6
    7950:	f103 0237 	add.w	r2, r3, #55	; 0x37
    7954:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    7958:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    795a:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    795e:	2e09      	cmp	r6, #9
    7960:	bfc8      	it	gt
    7962:	4613      	movgt	r3, r2
    7964:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    7966:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    796a:	f102 0837 	add.w	r8, r2, #55	; 0x37
    796e:	3230      	adds	r2, #48	; 0x30
    7970:	2809      	cmp	r0, #9
    7972:	bfd8      	it	le
    7974:	4690      	movle	r8, r2
    7976:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    797a:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    797e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    7982:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    7984:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7986:	f88d 5020 	strb.w	r5, [sp, #32]
    798a:	f102 0437 	add.w	r4, r2, #55	; 0x37
    798e:	3230      	adds	r2, #48	; 0x30
    7990:	f1be 0f09 	cmp.w	lr, #9
    7994:	bfd8      	it	le
    7996:	4614      	movle	r4, r2
    7998:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    799a:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    799c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    79a0:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    79a4:	f102 0437 	add.w	r4, r2, #55	; 0x37
    79a8:	3230      	adds	r2, #48	; 0x30
    79aa:	2f09      	cmp	r7, #9
    79ac:	bfcc      	ite	gt
    79ae:	4627      	movgt	r7, r4
    79b0:	4617      	movle	r7, r2
    79b2:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    79b4:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    79b8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    79bc:	f102 0737 	add.w	r7, r2, #55	; 0x37
    79c0:	3230      	adds	r2, #48	; 0x30
    79c2:	2e09      	cmp	r6, #9
    79c4:	bfcc      	ite	gt
    79c6:	463e      	movgt	r6, r7
    79c8:	4616      	movle	r6, r2
    79ca:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    79cc:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    79ce:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    79d2:	f102 0637 	add.w	r6, r2, #55	; 0x37
    79d6:	3230      	adds	r2, #48	; 0x30
    79d8:	2909      	cmp	r1, #9
    79da:	bfcc      	ite	gt
    79dc:	4631      	movgt	r1, r6
    79de:	4611      	movle	r1, r2
    79e0:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    79e2:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    79e6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    79ea:	f102 0130 	add.w	r1, r2, #48	; 0x30
    79ee:	3237      	adds	r2, #55	; 0x37
    79f0:	2d09      	cmp	r5, #9
    79f2:	bf88      	it	hi
    79f4:	4611      	movhi	r1, r2
    79f6:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    79fa:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    79fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    7a02:	f102 0130 	add.w	r1, r2, #48	; 0x30
    7a06:	3237      	adds	r2, #55	; 0x37
    7a08:	f1bc 0f09 	cmp.w	ip, #9
    7a0c:	bfd4      	ite	le
    7a0e:	468c      	movle	ip, r1
    7a10:	4694      	movgt	ip, r2
    7a12:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    7a16:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7a1a:	f102 0137 	add.w	r1, r2, #55	; 0x37
    7a1e:	3230      	adds	r2, #48	; 0x30
    7a20:	f1be 0f09 	cmp.w	lr, #9
    7a24:	bfcc      	ite	gt
    7a26:	468e      	movgt	lr, r1
    7a28:	4696      	movle	lr, r2
    7a2a:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    7a2c:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7a30:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    7a34:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    7a38:	3130      	adds	r1, #48	; 0x30
    7a3a:	2c09      	cmp	r4, #9
    7a3c:	bfd8      	it	le
    7a3e:	468e      	movle	lr, r1
    7a40:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    7a42:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7a46:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    7a4a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    7a4e:	3237      	adds	r2, #55	; 0x37
    7a50:	e008      	b.n	7a64 <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    7a52:	bf00      	nop
    7a54:	40001c00 	.word	0x40001c00
    7a58:	40000800 	.word	0x40000800
    7a5c:	200000e7 	.word	0x200000e7
    7a60:	00022d40 	.word	0x00022d40
    7a64:	2f09      	cmp	r7, #9
    7a66:	bfd4      	ite	le
    7a68:	4677      	movle	r7, lr
    7a6a:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    7a6c:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7a70:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    7a72:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7a76:	b2da      	uxtb	r2, r3
    7a78:	b2e9      	uxtb	r1, r5
    7a7a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    7a7e:	f104 0730 	add.w	r7, r4, #48	; 0x30
    7a82:	3437      	adds	r4, #55	; 0x37
    7a84:	2e09      	cmp	r6, #9
    7a86:	bfd8      	it	le
    7a88:	463c      	movle	r4, r7
    7a8a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    7a8e:	f102 0730 	add.w	r7, r2, #48	; 0x30
    7a92:	3137      	adds	r1, #55	; 0x37
    7a94:	3237      	adds	r2, #55	; 0x37
    7a96:	2d09      	cmp	r5, #9
    7a98:	bfd8      	it	le
    7a9a:	4671      	movle	r1, lr
    7a9c:	2b09      	cmp	r3, #9
    7a9e:	bfd4      	ite	le
    7aa0:	463b      	movle	r3, r7
    7aa2:	4613      	movgt	r3, r2
    7aa4:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    7aa8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    7aac:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    7ab0:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    7ab4:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    7ab8:	f10d 030f 	add.w	r3, sp, #15
    7abc:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    7ac0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7ac4:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    7ac8:	428b      	cmp	r3, r1
    7aca:	d1f9      	bne.n	7ac0 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7acc:	4b2a      	ldr	r3, [pc, #168]	; (7b78 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7ace:	4a2b      	ldr	r2, [pc, #172]	; (7b7c <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7ad0:	4f2b      	ldr	r7, [pc, #172]	; (7b80 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    7ad2:	4d2c      	ldr	r5, [pc, #176]	; (7b84 <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    7ad4:	482c      	ldr	r0, [pc, #176]	; (7b88 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    7ad6:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7ad8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7adc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7ae0:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    7ae4:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    7ae8:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    7aec:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7af0:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7af2:	629c      	str	r4, [r3, #40]	; 0x28
    7af4:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7af6:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    7af8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    7afc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    7b00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    7b04:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    7b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    7b0c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    7b10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    7b14:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    7b18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7b1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    7b20:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    7b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7b28:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7b2a:	629c      	str	r4, [r3, #40]	; 0x28
    7b2c:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b2e:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    7b30:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    7b34:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    7b38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    7b3c:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    7b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    7b44:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    7b48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    7b4c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    7b50:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    7b54:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    7b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    7b5c:	f005 feae 	bl	d8bc <usbdc_init>
    cdcdf_acm_init();
    7b60:	f005 fb66 	bl	d230 <cdcdf_acm_init>
    usbdc_start(single_desc);
    7b64:	4809      	ldr	r0, [pc, #36]	; (7b8c <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    7b66:	f005 fed7 	bl	d918 <usbdc_start>
    usbdc_attach();
    7b6a:	f005 feed 	bl	d948 <usbdc_attach>
}
    7b6e:	2001      	movs	r0, #1
    7b70:	b00c      	add	sp, #48	; 0x30
    7b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b76:	bf00      	nop
    7b78:	41008000 	.word	0x41008000
    7b7c:	e000e100 	.word	0xe000e100
    7b80:	c0000100 	.word	0xc0000100
    7b84:	c0000200 	.word	0xc0000200
    7b88:	20000c18 	.word	0x20000c18
    7b8c:	20000008 	.word	0x20000008

00007b90 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    7b90:	2001      	movs	r0, #1
    7b92:	4770      	bx	lr

00007b94 <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    7b94:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    7b96:	f005 fbcb 	bl	d330 <cdcdf_acm_get_line_coding>
}
    7b9a:	6800      	ldr	r0, [r0, #0]
    7b9c:	bd08      	pop	{r3, pc}
    7b9e:	bf00      	nop

00007ba0 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    7ba0:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    7ba2:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    7ba6:	b103      	cbz	r3, 7baa <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    7ba8:	bd38      	pop	{r3, r4, r5, pc}
    7baa:	4604      	mov	r4, r0
    m_portOpen = true;
    7bac:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    7bae:	4618      	mov	r0, r3
    m_portOpen = true;
    7bb0:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    7bb4:	4906      	ldr	r1, [pc, #24]	; (7bd0 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    7bb6:	f005 fb8d 	bl	d2d4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    7bba:	4628      	mov	r0, r5
    7bbc:	4905      	ldr	r1, [pc, #20]	; (7bd4 <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    7bbe:	f005 fb89 	bl	d2d4 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7bc2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7bc6:	2140      	movs	r1, #64	; 0x40
}
    7bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7bcc:	f005 bb4e 	b.w	d26c <cdcdf_acm_read>
    7bd0:	000070c1 	.word	0x000070c1
    7bd4:	000072f9 	.word	0x000072f9

00007bd8 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    7bd8:	4603      	mov	r3, r0
    m_inHead = 0;
    7bda:	2200      	movs	r2, #0
    7bdc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    7be0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    7be4:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7be8:	2140      	movs	r1, #64	; 0x40
    7bea:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    7bec:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7bf0:	f005 bb3c 	b.w	d26c <cdcdf_acm_read>

00007bf4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    7bf4:	b538      	push	{r3, r4, r5, lr}
    7bf6:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7bf8:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    7bfc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    7c00:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    7c04:	429a      	cmp	r2, r3
    7c06:	d100      	bne.n	7c0a <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    7c08:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7c0a:	f005 fb8b 	bl	d324 <cdcdf_acm_is_enabled>
    7c0e:	2800      	cmp	r0, #0
    7c10:	d0fa      	beq.n	7c08 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    7c12:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    7c16:	07db      	lsls	r3, r3, #31
    7c18:	d5f6      	bpl.n	7c08 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7c1a:	7b6b      	ldrb	r3, [r5, #13]
    7c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7c20:	2b02      	cmp	r3, #2
    7c22:	d0eb      	beq.n	7bfc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    7c24:	bd38      	pop	{r3, r4, r5, pc}
    7c26:	bf00      	nop

00007c28 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    7c28:	b538      	push	{r3, r4, r5, lr}
    7c2a:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7c2c:	f005 fb7a 	bl	d324 <cdcdf_acm_is_enabled>
    7c30:	4604      	mov	r4, r0
    7c32:	b170      	cbz	r0, 7c52 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    7c34:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    7c38:	f014 0401 	ands.w	r4, r4, #1
    7c3c:	d009      	beq.n	7c52 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7c3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7c42:	7b5c      	ldrb	r4, [r3, #13]
    7c44:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7c48:	f1a4 0402 	sub.w	r4, r4, #2
    7c4c:	fab4 f484 	clz	r4, r4
    7c50:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    7c52:	4803      	ldr	r0, [pc, #12]	; (7c60 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    7c54:	2100      	movs	r1, #0
    7c56:	f003 f847 	bl	ace8 <Delay_cycles>
}
    7c5a:	4620      	mov	r0, r4
    7c5c:	bd38      	pop	{r3, r4, r5, pc}
    7c5e:	bf00      	nop
    7c60:	00124f80 	.word	0x00124f80

00007c64 <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    7c64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    7c68:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7c6c:	4293      	cmp	r3, r2
    7c6e:	f000 8116 	beq.w	7e9e <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    7c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    7c76:	1c5a      	adds	r2, r3, #1
    7c78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    7c7c:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    7c7e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    7c82:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    7c84:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    7c86:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    7c8a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    7c8e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    7c92:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    7c94:	bf48      	it	mi
    7c96:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    7c98:	2d00      	cmp	r5, #0
    7c9a:	f000 80e3 	beq.w	7e64 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    7c9e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    7ca2:	f000 80df 	beq.w	7e64 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    7ca6:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    7caa:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    7cae:	42ab      	cmp	r3, r5
    7cb0:	bf28      	it	cs
    7cb2:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    7cb4:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    7cb8:	4299      	cmp	r1, r3
    7cba:	bf28      	it	cs
    7cbc:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    7cbe:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7cc0:	2900      	cmp	r1, #0
    7cc2:	f000 80f8 	beq.w	7eb6 <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    7cc6:	1d35      	adds	r5, r6, #4
    7cc8:	4405      	add	r5, r0
    7cca:	f102 0e04 	add.w	lr, r2, #4
    7cce:	4577      	cmp	r7, lr
    7cd0:	bf38      	it	cc
    7cd2:	42aa      	cmpcc	r2, r5
    7cd4:	f0c0 80da 	bcc.w	7e8c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    7cd8:	290b      	cmp	r1, #11
    7cda:	f240 80d7 	bls.w	7e8c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    7cde:	4255      	negs	r5, r2
    7ce0:	f015 0503 	ands.w	r5, r5, #3
    7ce4:	f000 80c3 	beq.w	7e6e <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    7ce8:	f892 e000 	ldrb.w	lr, [r2]
    7cec:	f800 e006 	strb.w	lr, [r0, r6]
    7cf0:	2d01      	cmp	r5, #1
    7cf2:	f107 0801 	add.w	r8, r7, #1
    7cf6:	f102 0901 	add.w	r9, r2, #1
    7cfa:	f000 80ba 	beq.w	7e72 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    7cfe:	f892 e001 	ldrb.w	lr, [r2, #1]
    7d02:	f887 e001 	strb.w	lr, [r7, #1]
    7d06:	2d02      	cmp	r5, #2
    7d08:	f107 0802 	add.w	r8, r7, #2
    7d0c:	f102 0902 	add.w	r9, r2, #2
    7d10:	f000 80af 	beq.w	7e72 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    7d14:	f892 e002 	ldrb.w	lr, [r2, #2]
    7d18:	f887 e002 	strb.w	lr, [r7, #2]
    7d1c:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7d20:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    7d22:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7d26:	9700      	str	r7, [sp, #0]
    7d28:	eba1 0b05 	sub.w	fp, r1, r5
    7d2c:	f1ab 0704 	sub.w	r7, fp, #4
    7d30:	08bf      	lsrs	r7, r7, #2
    7d32:	eb06 0e05 	add.w	lr, r6, r5
    7d36:	3701      	adds	r7, #1
    7d38:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    7d3c:	4486      	add	lr, r0
    7d3e:	4415      	add	r5, r2
    7d40:	f04f 0c00 	mov.w	ip, #0
    7d44:	9401      	str	r4, [sp, #4]
    7d46:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    7d4a:	f855 4b04 	ldr.w	r4, [r5], #4
    7d4e:	f84e 4b04 	str.w	r4, [lr], #4
    7d52:	4567      	cmp	r7, ip
    7d54:	d8f7      	bhi.n	7d46 <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    7d56:	9d00      	ldr	r5, [sp, #0]
    7d58:	9c01      	ldr	r4, [sp, #4]
    7d5a:	45d3      	cmp	fp, sl
    7d5c:	4455      	add	r5, sl
    7d5e:	eb08 0e0a 	add.w	lr, r8, sl
    7d62:	eb09 0c0a 	add.w	ip, r9, sl
    7d66:	f000 808c 	beq.w	7e82 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    7d6a:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    7d6e:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7d72:	1c6f      	adds	r7, r5, #1
    7d74:	42b9      	cmp	r1, r7
    7d76:	f240 8084 	bls.w	7e82 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    7d7a:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    7d7c:	f89c 7001 	ldrb.w	r7, [ip, #1]
    7d80:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7d84:	42a9      	cmp	r1, r5
    7d86:	d97c      	bls.n	7e82 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    7d88:	f89c 5002 	ldrb.w	r5, [ip, #2]
    7d8c:	f88e 5002 	strb.w	r5, [lr, #2]
    7d90:	1857      	adds	r7, r2, r1
    7d92:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    7d96:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    7d9a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    7d9c:	1a6d      	subs	r5, r5, r1
        if (count) {
    7d9e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    7da0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    7da4:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    7da8:	d065      	beq.n	7e76 <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    7daa:	1d01      	adds	r1, r0, #4
    7dac:	1d3a      	adds	r2, r7, #4
    7dae:	4290      	cmp	r0, r2
    7db0:	bf38      	it	cc
    7db2:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    7db4:	4605      	mov	r5, r0
    7db6:	d375      	bcc.n	7ea4 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    7db8:	2b0b      	cmp	r3, #11
    7dba:	d973      	bls.n	7ea4 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    7dbc:	4242      	negs	r2, r0
    7dbe:	f012 0203 	ands.w	r2, r2, #3
    7dc2:	d060      	beq.n	7e86 <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    7dc4:	7839      	ldrb	r1, [r7, #0]
    7dc6:	7001      	strb	r1, [r0, #0]
    7dc8:	2a01      	cmp	r2, #1
    7dca:	f100 0501 	add.w	r5, r0, #1
    7dce:	f107 0e01 	add.w	lr, r7, #1
    7dd2:	d059      	beq.n	7e88 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    7dd4:	7879      	ldrb	r1, [r7, #1]
    7dd6:	7041      	strb	r1, [r0, #1]
    7dd8:	2a02      	cmp	r2, #2
    7dda:	f100 0502 	add.w	r5, r0, #2
    7dde:	f107 0e02 	add.w	lr, r7, #2
    7de2:	d051      	beq.n	7e88 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    7de4:	78b9      	ldrb	r1, [r7, #2]
    7de6:	7081      	strb	r1, [r0, #2]
    7de8:	1cc5      	adds	r5, r0, #3
    7dea:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    7dee:	f04f 0803 	mov.w	r8, #3
    7df2:	eba3 0c02 	sub.w	ip, r3, r2
    7df6:	f1ac 0104 	sub.w	r1, ip, #4
    7dfa:	0889      	lsrs	r1, r1, #2
    7dfc:	1c4e      	adds	r6, r1, #1
    7dfe:	4417      	add	r7, r2
    7e00:	ea4f 0986 	mov.w	r9, r6, lsl #2
    7e04:	4402      	add	r2, r0
    7e06:	2100      	movs	r1, #0
    7e08:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    7e0a:	f857 ab04 	ldr.w	sl, [r7], #4
    7e0e:	f842 ab04 	str.w	sl, [r2], #4
    7e12:	428e      	cmp	r6, r1
    7e14:	d8f8      	bhi.n	7e08 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    7e16:	45cc      	cmp	ip, r9
    7e18:	eb08 0209 	add.w	r2, r8, r9
    7e1c:	eb05 0109 	add.w	r1, r5, r9
    7e20:	eb0e 0709 	add.w	r7, lr, r9
    7e24:	d00d      	beq.n	7e42 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    7e26:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    7e2a:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    7e2e:	1c55      	adds	r5, r2, #1
    7e30:	42ab      	cmp	r3, r5
    7e32:	d906      	bls.n	7e42 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    7e34:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    7e36:	787d      	ldrb	r5, [r7, #1]
    7e38:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    7e3a:	4293      	cmp	r3, r2
    7e3c:	d901      	bls.n	7e42 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    7e3e:	78ba      	ldrb	r2, [r7, #2]
    7e40:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    7e42:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7e46:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    7e4a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    7e4e:	441a      	add	r2, r3
            m_readBufAvail -= count;
    7e50:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    7e52:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7e56:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    7e5a:	b91d      	cbnz	r5, 7e64 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7e5c:	3080      	adds	r0, #128	; 0x80
    7e5e:	2140      	movs	r1, #64	; 0x40
    7e60:	f005 fa04 	bl	d26c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    7e64:	b662      	cpsie	i
    return retVal;
    7e66:	b220      	sxth	r0, r4
}
    7e68:	b003      	add	sp, #12
    7e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    7e6e:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    7e70:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7e72:	9500      	str	r5, [sp, #0]
    7e74:	e758      	b.n	7d28 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    7e76:	4431      	add	r1, r6
    7e78:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    7e7c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7e80:	e7eb      	b.n	7e5a <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    7e82:	1857      	adds	r7, r2, r1
    7e84:	e785      	b.n	7d92 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    7e86:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    7e88:	4690      	mov	r8, r2
    7e8a:	e7b2      	b.n	7df2 <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    7e8c:	1e7d      	subs	r5, r7, #1
    7e8e:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    7e90:	f812 eb01 	ldrb.w	lr, [r2], #1
    7e94:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7e98:	42ba      	cmp	r2, r7
    7e9a:	d1f9      	bne.n	7e90 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    7e9c:	e779      	b.n	7d92 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    7e9e:	f04f 30ff 	mov.w	r0, #4294967295
    7ea2:	4770      	bx	lr
    7ea4:	1e42      	subs	r2, r0, #1
    7ea6:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    7ea8:	f817 1b01 	ldrb.w	r1, [r7], #1
    7eac:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    7eb0:	42bd      	cmp	r5, r7
    7eb2:	d1f9      	bne.n	7ea8 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    7eb4:	e7c5      	b.n	7e42 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    7eb6:	4617      	mov	r7, r2
    7eb8:	e76f      	b.n	7d9a <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    7eba:	bf00      	nop

00007ebc <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    7ebc:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7ec0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    7ec4:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    7ec6:	bf1a      	itte	ne
    7ec8:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    7ecc:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    7ece:	f04f 30ff 	moveq.w	r0, #4294967295
}
    7ed2:	4770      	bx	lr

00007ed4 <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    7ed4:	b570      	push	{r4, r5, r6, lr}
    7ed6:	4604      	mov	r4, r0
    7ed8:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7eda:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7ede:	f005 fa21 	bl	d324 <cdcdf_acm_is_enabled>
    7ee2:	b350      	cbz	r0, 7f3a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    7ee4:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    7ee8:	f010 0001 	ands.w	r0, r0, #1
    7eec:	d025      	beq.n	7f3a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7eee:	7b6b      	ldrb	r3, [r5, #13]
    7ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7ef4:	2b02      	cmp	r3, #2
    7ef6:	d001      	beq.n	7efc <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    7ef8:	2000      	movs	r0, #0
    7efa:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    7efc:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    7f00:	b900      	cbnz	r0, 7f04 <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    7f02:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    7f04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7f08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7f0c:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    7f0e:	1e5a      	subs	r2, r3, #1
    7f10:	d40e      	bmi.n	7f30 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    7f12:	2a00      	cmp	r2, #0
    7f14:	d0e3      	beq.n	7ede <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    7f16:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    7f1a:	4423      	add	r3, r4
    7f1c:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    7f20:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    7f24:	3301      	adds	r3, #1
    7f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7f2a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    7f2e:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    7f30:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    7f34:	2a00      	cmp	r2, #0
    7f36:	d0d2      	beq.n	7ede <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    7f38:	e7ed      	b.n	7f16 <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    7f3a:	bd70      	pop	{r4, r5, r6, pc}

00007f3c <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    7f3c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    7f40:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    7f44:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    7f46:	bf48      	it	mi
    7f48:	3040      	addmi	r0, #64	; 0x40
}
    7f4a:	4770      	bx	lr

00007f4c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    7f4c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    7f50:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    7f54:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    7f56:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    7f58:	bf48      	it	mi
    7f5a:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    7f5e:	4770      	bx	lr

00007f60 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    7f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7f64:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    7f68:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7f6a:	f04f 0101 	mov.w	r1, #1
    7f6e:	f3bf 8f5b 	dmb	ish
    7f72:	e8d3 2f4f 	ldrexb	r2, [r3]
    7f76:	e8c3 1f44 	strexb	r4, r1, [r3]
    7f7a:	2c00      	cmp	r4, #0
    7f7c:	d1f9      	bne.n	7f72 <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    7f7e:	f3bf 8f5b 	dmb	ish
    7f82:	f012 0fff 	tst.w	r2, #255	; 0xff
    7f86:	f040 80e4 	bne.w	8152 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    7f8a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7f8e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    7f92:	428e      	cmp	r6, r1
    7f94:	f000 81b6 	beq.w	8304 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7f98:	f100 0340 	add.w	r3, r0, #64	; 0x40
    7f9c:	eb03 0706 	add.w	r7, r3, r6
    7fa0:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    7fa4:	f0c0 80d8 	bcc.w	8158 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7fa8:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    7fac:	4411      	add	r1, r2
    7fae:	2940      	cmp	r1, #64	; 0x40
    7fb0:	bf28      	it	cs
    7fb2:	2140      	movcs	r1, #64	; 0x40
    7fb4:	428a      	cmp	r2, r1
    7fb6:	bf28      	it	cs
    7fb8:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7fba:	2a00      	cmp	r2, #0
    7fbc:	f000 81c7 	beq.w	834e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    7fc0:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    7fc4:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7fc8:	eb00 080e 	add.w	r8, r0, lr
    7fcc:	4404      	add	r4, r0
    7fce:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    7fd2:	45e0      	cmp	r8, ip
    7fd4:	bf38      	it	cc
    7fd6:	42a5      	cmpcc	r5, r4
    7fd8:	f0c0 81ae 	bcc.w	8338 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    7fdc:	2a0b      	cmp	r2, #11
    7fde:	f240 81ab 	bls.w	8338 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    7fe2:	426c      	negs	r4, r5
    7fe4:	f014 0403 	ands.w	r4, r4, #3
    7fe8:	f000 817f 	beq.w	82ea <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    7fec:	5d9e      	ldrb	r6, [r3, r6]
    7fee:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    7ff2:	2c01      	cmp	r4, #1
    7ff4:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7ff8:	f107 0801 	add.w	r8, r7, #1
    7ffc:	f000 817b 	beq.w	82f6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    8000:	787e      	ldrb	r6, [r7, #1]
    8002:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    8006:	2c02      	cmp	r4, #2
    8008:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    800c:	f107 0802 	add.w	r8, r7, #2
    8010:	f000 8171 	beq.w	82f6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    8014:	78be      	ldrb	r6, [r7, #2]
    8016:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    801a:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    801c:	f107 0803 	add.w	r8, r7, #3
    8020:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8024:	9601      	str	r6, [sp, #4]
    8026:	eba2 0b04 	sub.w	fp, r2, r4
    802a:	f1ab 0704 	sub.w	r7, fp, #4
    802e:	08bf      	lsrs	r7, r7, #2
    8030:	eb0e 0604 	add.w	r6, lr, r4
    8034:	3701      	adds	r7, #1
    8036:	34c0      	adds	r4, #192	; 0xc0
    8038:	4406      	add	r6, r0
    803a:	4404      	add	r4, r0
    803c:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8040:	f04f 0e00 	mov.w	lr, #0
    8044:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    8048:	f856 ab04 	ldr.w	sl, [r6], #4
    804c:	f844 ab04 	str.w	sl, [r4], #4
    8050:	45be      	cmp	lr, r7
    8052:	d3f7      	bcc.n	8044 <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    8054:	9c01      	ldr	r4, [sp, #4]
    8056:	45cb      	cmp	fp, r9
    8058:	444c      	add	r4, r9
    805a:	eb08 0e09 	add.w	lr, r8, r9
    805e:	eb0c 0609 	add.w	r6, ip, r9
    8062:	d00f      	beq.n	8084 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    8064:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    8068:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    806c:	1c67      	adds	r7, r4, #1
    806e:	42ba      	cmp	r2, r7
    8070:	d908      	bls.n	8084 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    8072:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    8074:	f89e 7001 	ldrb.w	r7, [lr, #1]
    8078:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    807a:	42a2      	cmp	r2, r4
    807c:	d902      	bls.n	8084 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    807e:	f89e 4002 	ldrb.w	r4, [lr, #2]
    8082:	70b4      	strb	r4, [r6, #2]
    8084:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8086:	1a8a      	subs	r2, r1, r2
    8088:	f000 811a 	beq.w	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    808c:	1d26      	adds	r6, r4, #4
    808e:	f100 0744 	add.w	r7, r0, #68	; 0x44
    8092:	42bc      	cmp	r4, r7
    8094:	bf38      	it	cc
    8096:	42b3      	cmpcc	r3, r6
    8098:	f0c0 8145 	bcc.w	8326 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    809c:	2a0b      	cmp	r2, #11
    809e:	f240 8142 	bls.w	8326 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    80a2:	425f      	negs	r7, r3
    80a4:	f017 0703 	ands.w	r7, r7, #3
    80a8:	f000 8129 	beq.w	82fe <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    80ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    80b0:	7023      	strb	r3, [r4, #0]
    80b2:	2f01      	cmp	r7, #1
    80b4:	f104 0c01 	add.w	ip, r4, #1
    80b8:	f100 0341 	add.w	r3, r0, #65	; 0x41
    80bc:	f000 811d 	beq.w	82fa <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    80c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    80c4:	7063      	strb	r3, [r4, #1]
    80c6:	2f02      	cmp	r7, #2
    80c8:	f104 0c02 	add.w	ip, r4, #2
    80cc:	f100 0342 	add.w	r3, r0, #66	; 0x42
    80d0:	f000 8113 	beq.w	82fa <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    80d4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    80d8:	70a3      	strb	r3, [r4, #2]
    80da:	f104 0c03 	add.w	ip, r4, #3
    80de:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    80e2:	f04f 0903 	mov.w	r9, #3
    80e6:	eba2 0807 	sub.w	r8, r2, r7
    80ea:	f1a8 0e04 	sub.w	lr, r8, #4
    80ee:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    80f2:	f107 0640 	add.w	r6, r7, #64	; 0x40
    80f6:	f10e 0e01 	add.w	lr, lr, #1
    80fa:	443c      	add	r4, r7
    80fc:	4406      	add	r6, r0
    80fe:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8102:	2700      	movs	r7, #0
    8104:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    8106:	f856 bb04 	ldr.w	fp, [r6], #4
    810a:	f844 bb04 	str.w	fp, [r4], #4
    810e:	45be      	cmp	lr, r7
    8110:	d8f8      	bhi.n	8104 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    8112:	45d0      	cmp	r8, sl
    8114:	eb09 040a 	add.w	r4, r9, sl
    8118:	eb03 070a 	add.w	r7, r3, sl
    811c:	eb0c 060a 	add.w	r6, ip, sl
    8120:	f000 80ce 	beq.w	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    8124:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    8128:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    812c:	1c63      	adds	r3, r4, #1
    812e:	429a      	cmp	r2, r3
    8130:	f240 80c6 	bls.w	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    8134:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    8136:	787b      	ldrb	r3, [r7, #1]
    8138:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    813a:	42a2      	cmp	r2, r4
    813c:	f240 80c0 	bls.w	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    8140:	78bb      	ldrb	r3, [r7, #2]
    8142:	70b3      	strb	r3, [r6, #2]
    8144:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    8146:	4628      	mov	r0, r5
    8148:	f005 f8a4 	bl	d294 <cdcdf_acm_write>
    814c:	2800      	cmp	r0, #0
    814e:	f040 80be 	bne.w	82ce <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    8152:	b003      	add	sp, #12
    8154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    8158:	1b89      	subs	r1, r1, r6
    815a:	f106 0240 	add.w	r2, r6, #64	; 0x40
    815e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    8162:	2940      	cmp	r1, #64	; 0x40
    8164:	eb00 0c02 	add.w	ip, r0, r2
    8168:	4404      	add	r4, r0
    816a:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    816e:	bf28      	it	cs
    8170:	2140      	movcs	r1, #64	; 0x40
    8172:	45f4      	cmp	ip, lr
    8174:	bf38      	it	cc
    8176:	42a5      	cmpcc	r5, r4
    8178:	f0c0 80cb 	bcc.w	8312 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    817c:	290b      	cmp	r1, #11
    817e:	f240 80c8 	bls.w	8312 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    8182:	426c      	negs	r4, r5
    8184:	f014 0403 	ands.w	r4, r4, #3
    8188:	f000 80ab 	beq.w	82e2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    818c:	5d9b      	ldrb	r3, [r3, r6]
    818e:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    8192:	2c01      	cmp	r4, #1
    8194:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    8198:	f107 0e01 	add.w	lr, r7, #1
    819c:	f000 80a9 	beq.w	82f2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    81a0:	787b      	ldrb	r3, [r7, #1]
    81a2:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    81a6:	2c02      	cmp	r4, #2
    81a8:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    81ac:	f107 0e02 	add.w	lr, r7, #2
    81b0:	f000 809f 	beq.w	82f2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    81b4:	78bb      	ldrb	r3, [r7, #2]
    81b6:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    81ba:	f107 0e03 	add.w	lr, r7, #3
    81be:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    81c2:	f04f 0c03 	mov.w	ip, #3
    81c6:	1913      	adds	r3, r2, r4
    81c8:	4403      	add	r3, r0
    81ca:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    81ce:	681a      	ldr	r2, [r3, #0]
    81d0:	f840 2008 	str.w	r2, [r0, r8]
    81d4:	1b0f      	subs	r7, r1, r4
    81d6:	1f3a      	subs	r2, r7, #4
    81d8:	0892      	lsrs	r2, r2, #2
    81da:	eb00 0408 	add.w	r4, r0, r8
    81de:	3201      	adds	r2, #1
    81e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
    81e4:	f8c4 8004 	str.w	r8, [r4, #4]
    81e8:	2a02      	cmp	r2, #2
    81ea:	ea4f 0882 	mov.w	r8, r2, lsl #2
    81ee:	d04f      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    81f0:	f8d3 9008 	ldr.w	r9, [r3, #8]
    81f4:	f8c4 9008 	str.w	r9, [r4, #8]
    81f8:	2a03      	cmp	r2, #3
    81fa:	d049      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    81fc:	f8d3 900c 	ldr.w	r9, [r3, #12]
    8200:	f8c4 900c 	str.w	r9, [r4, #12]
    8204:	2a04      	cmp	r2, #4
    8206:	d043      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8208:	f8d3 9010 	ldr.w	r9, [r3, #16]
    820c:	f8c4 9010 	str.w	r9, [r4, #16]
    8210:	2a05      	cmp	r2, #5
    8212:	d03d      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8214:	f8d3 9014 	ldr.w	r9, [r3, #20]
    8218:	f8c4 9014 	str.w	r9, [r4, #20]
    821c:	2a06      	cmp	r2, #6
    821e:	d037      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8220:	f8d3 9018 	ldr.w	r9, [r3, #24]
    8224:	f8c4 9018 	str.w	r9, [r4, #24]
    8228:	2a07      	cmp	r2, #7
    822a:	d031      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    822c:	f8d3 901c 	ldr.w	r9, [r3, #28]
    8230:	f8c4 901c 	str.w	r9, [r4, #28]
    8234:	2a08      	cmp	r2, #8
    8236:	d02b      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8238:	f8d3 9020 	ldr.w	r9, [r3, #32]
    823c:	f8c4 9020 	str.w	r9, [r4, #32]
    8240:	2a09      	cmp	r2, #9
    8242:	d025      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8244:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    8248:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    824c:	2a0a      	cmp	r2, #10
    824e:	d01f      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8250:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    8254:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    8258:	2a0b      	cmp	r2, #11
    825a:	d019      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    825c:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    8260:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    8264:	2a0c      	cmp	r2, #12
    8266:	d013      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8268:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    826c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    8270:	2a0d      	cmp	r2, #13
    8272:	d00d      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8274:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    8278:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    827c:	2a0e      	cmp	r2, #14
    827e:	d007      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8280:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    8284:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    8288:	2a0f      	cmp	r2, #15
    828a:	d001      	beq.n	8290 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    828e:	63e3      	str	r3, [r4, #60]	; 0x3c
    8290:	4547      	cmp	r7, r8
    8292:	eb0c 0308 	add.w	r3, ip, r8
    8296:	eb06 0408 	add.w	r4, r6, r8
    829a:	eb0e 0c08 	add.w	ip, lr, r8
    829e:	d00f      	beq.n	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    82a0:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    82a4:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    82a8:	1c5a      	adds	r2, r3, #1
    82aa:	4291      	cmp	r1, r2
    82ac:	d908      	bls.n	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    82ae:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    82b0:	f89c 2001 	ldrb.w	r2, [ip, #1]
    82b4:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    82b6:	4299      	cmp	r1, r3
    82b8:	d902      	bls.n	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    82ba:	f89c 3002 	ldrb.w	r3, [ip, #2]
    82be:	70a3      	strb	r3, [r4, #2]
    82c0:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    82c2:	4628      	mov	r0, r5
    82c4:	f004 ffe6 	bl	d294 <cdcdf_acm_write>
    82c8:	2800      	cmp	r0, #0
    82ca:	f43f af42 	beq.w	8152 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    82ce:	f3bf 8f5b 	dmb	ish
    82d2:	2300      	movs	r3, #0
    82d4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    82d8:	f3bf 8f5b 	dmb	ish
}
    82dc:	b003      	add	sp, #12
    82de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    82e2:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    82e4:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    82e6:	462e      	mov	r6, r5
    82e8:	e76d      	b.n	81c6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    82ea:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    82ec:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    82ee:	46ac      	mov	ip, r5
    82f0:	e699      	b.n	8026 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    82f2:	46a4      	mov	ip, r4
    82f4:	e767      	b.n	81c6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    82f6:	9401      	str	r4, [sp, #4]
    82f8:	e695      	b.n	8026 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    82fa:	46b9      	mov	r9, r7
    82fc:	e6f3      	b.n	80e6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    82fe:	46b9      	mov	r9, r7
    8300:	46a4      	mov	ip, r4
    8302:	e6f0      	b.n	80e6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    8304:	f3bf 8f5b 	dmb	ish
    8308:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    830c:	f3bf 8f5b 	dmb	ish
        return;
    8310:	e71f      	b.n	8152 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    8312:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    8316:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    8318:	f817 2b01 	ldrb.w	r2, [r7], #1
    831c:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8320:	42a7      	cmp	r7, r4
    8322:	d1f9      	bne.n	8318 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    8324:	e7cc      	b.n	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    8326:	3c01      	subs	r4, #1
    8328:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    832a:	f813 6b01 	ldrb.w	r6, [r3], #1
    832e:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8332:	4293      	cmp	r3, r2
    8334:	d1f9      	bne.n	832a <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    8336:	e7c3      	b.n	82c0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    8338:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    833c:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    8340:	f817 6b01 	ldrb.w	r6, [r7], #1
    8344:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8348:	45be      	cmp	lr, r7
    834a:	d1f9      	bne.n	8340 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    834c:	e69a      	b.n	8084 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    834e:	462c      	mov	r4, r5
    8350:	e699      	b.n	8086 <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    8352:	bf00      	nop

00008354 <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    8354:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    8356:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    835a:	b903      	cbnz	r3, 835e <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    835c:	bd38      	pop	{r3, r4, r5, pc}
    835e:	4605      	mov	r5, r0
    TxPump();
    8360:	f7ff fdfe 	bl	7f60 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    8364:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    8368:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    836c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8370:	429a      	cmp	r2, r3
    8372:	d00b      	beq.n	838c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    8374:	f004 ffd6 	bl	d324 <cdcdf_acm_is_enabled>
    8378:	b140      	cbz	r0, 838c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    837a:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    837e:	07db      	lsls	r3, r3, #31
    8380:	d504      	bpl.n	838c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    8382:	7b63      	ldrb	r3, [r4, #13]
    8384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    8388:	2b02      	cmp	r3, #2
    838a:	d0ed      	beq.n	8368 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    838c:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    838e:	4621      	mov	r1, r4
    m_portOpen = false;
    8390:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    8394:	4620      	mov	r0, r4
    8396:	f004 ff9d 	bl	d2d4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    839a:	4621      	mov	r1, r4
    839c:	2001      	movs	r0, #1
    839e:	f004 ff99 	bl	d2d4 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    83a2:	f004 ff8b 	bl	d2bc <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    83a6:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    83aa:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    83ae:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    83b2:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    83b6:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    83ba:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    83be:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    83c2:	bd38      	pop	{r3, r4, r5, pc}

000083c4 <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    83c4:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    83c8:	b103      	cbz	r3, 83cc <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    83ca:	4770      	bx	lr
    83cc:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    83d0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    83d4:	429a      	cmp	r2, r3
    83d6:	f000 80fd 	beq.w	85d4 <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    83da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    83de:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    83e2:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    83e4:	f04f 0101 	mov.w	r1, #1
    83e8:	f3bf 8f5b 	dmb	ish
    83ec:	e8d3 2f4f 	ldrexb	r2, [r3]
    83f0:	e8c3 1f44 	strexb	r4, r1, [r3]
    83f4:	2c00      	cmp	r4, #0
    83f6:	d1f9      	bne.n	83ec <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    83f8:	f3bf 8f5b 	dmb	ish
    83fc:	f012 0fff 	tst.w	r2, #255	; 0xff
    8400:	f040 80e5 	bne.w	85ce <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    8404:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    8408:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    840c:	428e      	cmp	r6, r1
    840e:	f000 81ab 	beq.w	8768 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8412:	f100 0340 	add.w	r3, r0, #64	; 0x40
    8416:	eb03 0706 	add.w	r7, r3, r6
    841a:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    841e:	f0c0 80da 	bcc.w	85d6 <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    8422:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    8426:	4411      	add	r1, r2
    8428:	2940      	cmp	r1, #64	; 0x40
    842a:	bf28      	it	cs
    842c:	2140      	movcs	r1, #64	; 0x40
    842e:	428a      	cmp	r2, r1
    8430:	bf28      	it	cs
    8432:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8434:	2a00      	cmp	r2, #0
    8436:	f000 81bc 	beq.w	87b2 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    843a:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    843e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    8442:	eb00 080e 	add.w	r8, r0, lr
    8446:	4404      	add	r4, r0
    8448:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    844c:	45e0      	cmp	r8, ip
    844e:	bf38      	it	cc
    8450:	42a5      	cmpcc	r5, r4
    8452:	f0c0 81a3 	bcc.w	879c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    8456:	2a0b      	cmp	r2, #11
    8458:	f240 81a0 	bls.w	879c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    845c:	426c      	negs	r4, r5
    845e:	f014 0403 	ands.w	r4, r4, #3
    8462:	f000 8177 	beq.w	8754 <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    8466:	5d9e      	ldrb	r6, [r3, r6]
    8468:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    846c:	2c01      	cmp	r4, #1
    846e:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    8472:	f107 0801 	add.w	r8, r7, #1
    8476:	f000 8171 	beq.w	875c <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    847a:	787e      	ldrb	r6, [r7, #1]
    847c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    8480:	2c02      	cmp	r4, #2
    8482:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    8486:	f107 0802 	add.w	r8, r7, #2
    848a:	f000 8165 	beq.w	8758 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    848e:	78be      	ldrb	r6, [r7, #2]
    8490:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8494:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    8496:	f107 0803 	add.w	r8, r7, #3
    849a:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    849e:	9601      	str	r6, [sp, #4]
    84a0:	eba2 0b04 	sub.w	fp, r2, r4
    84a4:	f1ab 0704 	sub.w	r7, fp, #4
    84a8:	08bf      	lsrs	r7, r7, #2
    84aa:	eb0e 0604 	add.w	r6, lr, r4
    84ae:	3701      	adds	r7, #1
    84b0:	34c0      	adds	r4, #192	; 0xc0
    84b2:	4406      	add	r6, r0
    84b4:	4404      	add	r4, r0
    84b6:	ea4f 0987 	mov.w	r9, r7, lsl #2
    84ba:	f04f 0e00 	mov.w	lr, #0
    84be:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    84c2:	f856 ab04 	ldr.w	sl, [r6], #4
    84c6:	f844 ab04 	str.w	sl, [r4], #4
    84ca:	45be      	cmp	lr, r7
    84cc:	d3f7      	bcc.n	84be <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    84ce:	9c01      	ldr	r4, [sp, #4]
    84d0:	45cb      	cmp	fp, r9
    84d2:	444c      	add	r4, r9
    84d4:	eb0c 0609 	add.w	r6, ip, r9
    84d8:	eb08 0e09 	add.w	lr, r8, r9
    84dc:	d00f      	beq.n	84fe <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    84de:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    84e2:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    84e6:	1c67      	adds	r7, r4, #1
    84e8:	42ba      	cmp	r2, r7
    84ea:	d908      	bls.n	84fe <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    84ec:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    84ee:	f89e 7001 	ldrb.w	r7, [lr, #1]
    84f2:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    84f4:	42a2      	cmp	r2, r4
    84f6:	d902      	bls.n	84fe <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    84f8:	f89e 4002 	ldrb.w	r4, [lr, #2]
    84fc:	70b4      	strb	r4, [r6, #2]
    84fe:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8500:	1a8a      	subs	r2, r1, r2
    8502:	d058      	beq.n	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    8504:	1d26      	adds	r6, r4, #4
    8506:	f100 0744 	add.w	r7, r0, #68	; 0x44
    850a:	42bc      	cmp	r4, r7
    850c:	bf38      	it	cc
    850e:	42b3      	cmpcc	r3, r6
    8510:	f0c0 813b 	bcc.w	878a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    8514:	2a0b      	cmp	r2, #11
    8516:	f240 8138 	bls.w	878a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    851a:	425f      	negs	r7, r3
    851c:	f017 0703 	ands.w	r7, r7, #3
    8520:	f000 811f 	beq.w	8762 <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    8524:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    8528:	7023      	strb	r3, [r4, #0]
    852a:	2f01      	cmp	r7, #1
    852c:	f104 0c01 	add.w	ip, r4, #1
    8530:	f100 0341 	add.w	r3, r0, #65	; 0x41
    8534:	f000 8116 	beq.w	8764 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    8538:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    853c:	7063      	strb	r3, [r4, #1]
    853e:	2f02      	cmp	r7, #2
    8540:	f104 0c02 	add.w	ip, r4, #2
    8544:	f100 0342 	add.w	r3, r0, #66	; 0x42
    8548:	f000 810c 	beq.w	8764 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    854c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    8550:	70a3      	strb	r3, [r4, #2]
    8552:	f104 0c03 	add.w	ip, r4, #3
    8556:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    855a:	f04f 0903 	mov.w	r9, #3
    855e:	eba2 0807 	sub.w	r8, r2, r7
    8562:	f1a8 0e04 	sub.w	lr, r8, #4
    8566:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    856a:	f107 0640 	add.w	r6, r7, #64	; 0x40
    856e:	f10e 0e01 	add.w	lr, lr, #1
    8572:	443c      	add	r4, r7
    8574:	4406      	add	r6, r0
    8576:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    857a:	2700      	movs	r7, #0
    857c:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    857e:	f856 bb04 	ldr.w	fp, [r6], #4
    8582:	f844 bb04 	str.w	fp, [r4], #4
    8586:	45be      	cmp	lr, r7
    8588:	d8f8      	bhi.n	857c <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    858a:	45d0      	cmp	r8, sl
    858c:	eb09 040a 	add.w	r4, r9, sl
    8590:	eb0c 060a 	add.w	r6, ip, sl
    8594:	eb03 070a 	add.w	r7, r3, sl
    8598:	d00d      	beq.n	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    859a:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    859e:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    85a2:	1c63      	adds	r3, r4, #1
    85a4:	429a      	cmp	r2, r3
    85a6:	d906      	bls.n	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    85a8:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    85aa:	787b      	ldrb	r3, [r7, #1]
    85ac:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    85ae:	42a2      	cmp	r2, r4
    85b0:	d901      	bls.n	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    85b2:	78bb      	ldrb	r3, [r7, #2]
    85b4:	70b3      	strb	r3, [r6, #2]
    85b6:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    85b8:	4628      	mov	r0, r5
    85ba:	f004 fe6b 	bl	d294 <cdcdf_acm_write>
    85be:	b130      	cbz	r0, 85ce <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    85c0:	f3bf 8f5b 	dmb	ish
    85c4:	2300      	movs	r3, #0
    85c6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    85ca:	f3bf 8f5b 	dmb	ish
}
    85ce:	b003      	add	sp, #12
    85d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85d4:	4770      	bx	lr
        count = min(count, tail - head);
    85d6:	1b89      	subs	r1, r1, r6
    85d8:	f106 0240 	add.w	r2, r6, #64	; 0x40
    85dc:	f106 0444 	add.w	r4, r6, #68	; 0x44
    85e0:	2940      	cmp	r1, #64	; 0x40
    85e2:	eb00 0c02 	add.w	ip, r0, r2
    85e6:	4404      	add	r4, r0
    85e8:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    85ec:	bf28      	it	cs
    85ee:	2140      	movcs	r1, #64	; 0x40
    85f0:	45f4      	cmp	ip, lr
    85f2:	bf38      	it	cc
    85f4:	42a5      	cmpcc	r5, r4
    85f6:	f0c0 80be 	bcc.w	8776 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    85fa:	290b      	cmp	r1, #11
    85fc:	f240 80bb 	bls.w	8776 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    8600:	426c      	negs	r4, r5
    8602:	f014 0403 	ands.w	r4, r4, #3
    8606:	f000 809e 	beq.w	8746 <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    860a:	5d9b      	ldrb	r3, [r3, r6]
    860c:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    8610:	2c01      	cmp	r4, #1
    8612:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    8616:	f107 0e01 	add.w	lr, r7, #1
    861a:	f000 8096 	beq.w	874a <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    861e:	787b      	ldrb	r3, [r7, #1]
    8620:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    8624:	2c02      	cmp	r4, #2
    8626:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    862a:	f107 0e02 	add.w	lr, r7, #2
    862e:	f000 808e 	beq.w	874e <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    8632:	78bb      	ldrb	r3, [r7, #2]
    8634:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    8638:	f107 0e03 	add.w	lr, r7, #3
    863c:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8640:	f04f 0c03 	mov.w	ip, #3
    8644:	1913      	adds	r3, r2, r4
    8646:	4403      	add	r3, r0
    8648:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    864c:	681a      	ldr	r2, [r3, #0]
    864e:	f840 2008 	str.w	r2, [r0, r8]
    8652:	1b0f      	subs	r7, r1, r4
    8654:	1f3a      	subs	r2, r7, #4
    8656:	0892      	lsrs	r2, r2, #2
    8658:	eb00 0408 	add.w	r4, r0, r8
    865c:	3201      	adds	r2, #1
    865e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    8662:	f8c4 8004 	str.w	r8, [r4, #4]
    8666:	2a02      	cmp	r2, #2
    8668:	ea4f 0882 	mov.w	r8, r2, lsl #2
    866c:	d04f      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    866e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    8672:	f8c4 9008 	str.w	r9, [r4, #8]
    8676:	2a03      	cmp	r2, #3
    8678:	d049      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    867a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    867e:	f8c4 900c 	str.w	r9, [r4, #12]
    8682:	2a04      	cmp	r2, #4
    8684:	d043      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8686:	f8d3 9010 	ldr.w	r9, [r3, #16]
    868a:	f8c4 9010 	str.w	r9, [r4, #16]
    868e:	2a05      	cmp	r2, #5
    8690:	d03d      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8692:	f8d3 9014 	ldr.w	r9, [r3, #20]
    8696:	f8c4 9014 	str.w	r9, [r4, #20]
    869a:	2a06      	cmp	r2, #6
    869c:	d037      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    869e:	f8d3 9018 	ldr.w	r9, [r3, #24]
    86a2:	f8c4 9018 	str.w	r9, [r4, #24]
    86a6:	2a07      	cmp	r2, #7
    86a8:	d031      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86aa:	f8d3 901c 	ldr.w	r9, [r3, #28]
    86ae:	f8c4 901c 	str.w	r9, [r4, #28]
    86b2:	2a08      	cmp	r2, #8
    86b4:	d02b      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86b6:	f8d3 9020 	ldr.w	r9, [r3, #32]
    86ba:	f8c4 9020 	str.w	r9, [r4, #32]
    86be:	2a09      	cmp	r2, #9
    86c0:	d025      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86c2:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    86c6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    86ca:	2a0a      	cmp	r2, #10
    86cc:	d01f      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86ce:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    86d2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    86d6:	2a0b      	cmp	r2, #11
    86d8:	d019      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86da:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    86de:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    86e2:	2a0c      	cmp	r2, #12
    86e4:	d013      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86e6:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    86ea:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    86ee:	2a0d      	cmp	r2, #13
    86f0:	d00d      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86f2:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    86f6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    86fa:	2a0e      	cmp	r2, #14
    86fc:	d007      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    86fe:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    8702:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    8706:	2a0f      	cmp	r2, #15
    8708:	d001      	beq.n	870e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    870a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    870c:	63e3      	str	r3, [r4, #60]	; 0x3c
    870e:	4547      	cmp	r7, r8
    8710:	eb0c 0308 	add.w	r3, ip, r8
    8714:	eb06 0408 	add.w	r4, r6, r8
    8718:	eb0e 0c08 	add.w	ip, lr, r8
    871c:	f43f af4b 	beq.w	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    8720:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    8724:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8728:	1c5a      	adds	r2, r3, #1
    872a:	4291      	cmp	r1, r2
    872c:	f67f af43 	bls.w	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    8730:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    8732:	f89c 2001 	ldrb.w	r2, [ip, #1]
    8736:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8738:	4299      	cmp	r1, r3
    873a:	f67f af3c 	bls.w	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    873e:	f89c 3002 	ldrb.w	r3, [ip, #2]
    8742:	70a3      	strb	r3, [r4, #2]
    8744:	e737      	b.n	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8746:	46be      	mov	lr, r7
    8748:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    874a:	46a4      	mov	ip, r4
    874c:	e77a      	b.n	8644 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    874e:	f04f 0c02 	mov.w	ip, #2
    8752:	e777      	b.n	8644 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8754:	46b8      	mov	r8, r7
    8756:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8758:	9401      	str	r4, [sp, #4]
    875a:	e6a1      	b.n	84a0 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    875c:	2601      	movs	r6, #1
    875e:	9601      	str	r6, [sp, #4]
    8760:	e69e      	b.n	84a0 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8762:	46a4      	mov	ip, r4
    8764:	46b9      	mov	r9, r7
    8766:	e6fa      	b.n	855e <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    8768:	f3bf 8f5b 	dmb	ish
    876c:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    8770:	f3bf 8f5b 	dmb	ish
    8774:	e72b      	b.n	85ce <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    8776:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    877a:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    877c:	f817 2b01 	ldrb.w	r2, [r7], #1
    8780:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8784:	42a7      	cmp	r7, r4
    8786:	d1f9      	bne.n	877c <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    8788:	e715      	b.n	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    878a:	3c01      	subs	r4, #1
    878c:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    878e:	f813 6b01 	ldrb.w	r6, [r3], #1
    8792:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8796:	4293      	cmp	r3, r2
    8798:	d1f9      	bne.n	878e <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    879a:	e70c      	b.n	85b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    879c:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    87a0:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    87a4:	f817 6b01 	ldrb.w	r6, [r7], #1
    87a8:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    87ac:	45be      	cmp	lr, r7
    87ae:	d1f9      	bne.n	87a4 <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    87b0:	e6a5      	b.n	84fe <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    87b2:	462c      	mov	r4, r5
    87b4:	e6a4      	b.n	8500 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    87b6:	bf00      	nop

000087b8 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    87b8:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    87ba:	f7fe ff85 	bl	76c8 <_ZN9ClearCore10UsbManager8InstanceEv>
    87be:	4b01      	ldr	r3, [pc, #4]	; (87c4 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    87c0:	6018      	str	r0, [r3, #0]
    87c2:	bd08      	pop	{r3, pc}
    87c4:	20000c14 	.word	0x20000c14

000087c8 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    87c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
    87ca:	4770      	bx	lr

000087cc <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    87cc:	7900      	ldrb	r0, [r0, #4]
    87ce:	4770      	bx	lr

000087d0 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    87d0:	2001      	movs	r0, #1
    87d2:	4770      	bx	lr

000087d4 <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    87d4:	b510      	push	{r4, lr}
    87d6:	4604      	mov	r4, r0
    DigitalIn() {};
    87d8:	f7fc fd76 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    87dc:	4620      	mov	r0, r4
    87de:	4b0c      	ldr	r3, [pc, #48]	; (8810 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    87e0:	f840 3b30 	str.w	r3, [r0], #48
    87e4:	f004 f8fe 	bl	c9e4 <_ZN9ClearCore13StepGeneratorC1Ev>
    87e8:	4a0a      	ldr	r2, [pc, #40]	; (8814 <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    87ea:	6022      	str	r2, [r4, #0]
            reg = 0;
    87ec:	2300      	movs	r3, #0
    MotorDriver() {};
    87ee:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    87f0:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    87f4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    87f8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    87fc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8800:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    8804:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    8808:	6322      	str	r2, [r4, #48]	; 0x30
    880a:	4620      	mov	r0, r4
    880c:	bd10      	pop	{r4, pc}
    880e:	bf00      	nop
    8810:	00022b84 	.word	0x00022b84
    8814:	00022be4 	.word	0x00022be4

00008818 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    8818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    881c:	4bbf      	ldr	r3, [pc, #764]	; (8b1c <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    881e:	f8df a340 	ldr.w	sl, [pc, #832]	; 8b60 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    8822:	4abf      	ldr	r2, [pc, #764]	; (8b20 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    8824:	49bf      	ldr	r1, [pc, #764]	; (8b24 <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    8826:	4dc0      	ldr	r5, [pc, #768]	; (8b28 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    8828:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    882a:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    882c:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    882e:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    8832:	7007      	strb	r7, [r0, #0]
    8834:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    8836:	e88d 0108 	stmia.w	sp, {r3, r8}
    883a:	4620      	mov	r0, r4
    883c:	4bbb      	ldr	r3, [pc, #748]	; (8b2c <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    883e:	f009 fa83 	bl	11d48 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    8842:	68a1      	ldr	r1, [r4, #8]
    8844:	6862      	ldr	r2, [r4, #4]
    8846:	7b23      	ldrb	r3, [r4, #12]
    8848:	f8ca 1008 	str.w	r1, [sl, #8]
    884c:	f8ca 2004 	str.w	r2, [sl, #4]
    8850:	6921      	ldr	r1, [r4, #16]
    8852:	6962      	ldr	r2, [r4, #20]
    8854:	f88a 300c 	strb.w	r3, [sl, #12]
    8858:	69a3      	ldr	r3, [r4, #24]
    885a:	f8ca 1010 	str.w	r1, [sl, #16]
    885e:	f8ca 2014 	str.w	r2, [sl, #20]
    8862:	69e1      	ldr	r1, [r4, #28]
    8864:	6a22      	ldr	r2, [r4, #32]
    8866:	f8ca 3018 	str.w	r3, [sl, #24]
    886a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    886c:	f8ca 101c 	str.w	r1, [sl, #28]
    8870:	f8ca 2020 	str.w	r2, [sl, #32]
    8874:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    8878:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    887c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    8880:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    8884:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    8888:	2680      	movs	r6, #128	; 0x80
    888a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    888c:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    8890:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    8894:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    8898:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    889c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    88a0:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    88a4:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    88a8:	a914      	add	r1, sp, #80	; 0x50
    88aa:	4632      	mov	r2, r6
    88ac:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    88b0:	f015 fc9e 	bl	1e1f0 <memcpy>
    88b4:	4632      	mov	r2, r6
    88b6:	a934      	add	r1, sp, #208	; 0xd0
    88b8:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    88bc:	f015 fc98 	bl	1e1f0 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    88c0:	f8cd 8004 	str.w	r8, [sp, #4]
    88c4:	499a      	ldr	r1, [pc, #616]	; (8b30 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    88c6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    88ca:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    88ce:	9100      	str	r1, [sp, #0]
    88d0:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    88d4:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    88d8:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    88dc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    88e0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    88e4:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    88e8:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    88ec:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    88f0:	4620      	mov	r0, r4
    88f2:	4b90      	ldr	r3, [pc, #576]	; (8b34 <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    88f4:	4a90      	ldr	r2, [pc, #576]	; (8b38 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    88f6:	4991      	ldr	r1, [pc, #580]	; (8b3c <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    88f8:	f007 fd8c 	bl	10414 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    88fc:	6863      	ldr	r3, [r4, #4]
    88fe:	606b      	str	r3, [r5, #4]
    8900:	69a3      	ldr	r3, [r4, #24]
    8902:	68a2      	ldr	r2, [r4, #8]
    8904:	f894 e00c 	ldrb.w	lr, [r4, #12]
    8908:	6920      	ldr	r0, [r4, #16]
    890a:	61ab      	str	r3, [r5, #24]
    890c:	69e3      	ldr	r3, [r4, #28]
    890e:	60aa      	str	r2, [r5, #8]
    8910:	f885 e00c 	strb.w	lr, [r5, #12]
    8914:	6962      	ldr	r2, [r4, #20]
    8916:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    891a:	6128      	str	r0, [r5, #16]
    891c:	61eb      	str	r3, [r5, #28]
    891e:	6a20      	ldr	r0, [r4, #32]
    8920:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    8924:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    8928:	616a      	str	r2, [r5, #20]
    892a:	6228      	str	r0, [r5, #32]
    892c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    892e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    8930:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    8934:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    8938:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    893c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    8940:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    8944:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    8948:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    894c:	a914      	add	r1, sp, #80	; 0x50
    894e:	626a      	str	r2, [r5, #36]	; 0x24
    8950:	85a8      	strh	r0, [r5, #44]	; 0x2c
    8952:	4632      	mov	r2, r6
    8954:	f105 0030 	add.w	r0, r5, #48	; 0x30
    8958:	f015 fc4a 	bl	1e1f0 <memcpy>
    895c:	4632      	mov	r2, r6
    895e:	a934      	add	r1, sp, #208	; 0xd0
    8960:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8964:	f015 fc44 	bl	1e1f0 <memcpy>
    8968:	f504 7098 	add.w	r0, r4, #304	; 0x130
    896c:	c807      	ldmia	r0, {r0, r1, r2}
    896e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8972:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    8976:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    897a:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
class SdCardDriver : public SerialBase {
    897e:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    8982:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    8986:	4620      	mov	r0, r4
    8988:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    898c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8990:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    8994:	f04f 0a01 	mov.w	sl, #1
    8998:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    899c:	f009 f9c8 	bl	11d30 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    89a0:	4b67      	ldr	r3, [pc, #412]	; (8b40 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    89a2:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    89a4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    89a8:	4d66      	ldr	r5, [pc, #408]	; (8b44 <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    89aa:	f8cd a004 	str.w	sl, [sp, #4]
    89ae:	9300      	str	r3, [sp, #0]
    89b0:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    89b2:	68a6      	ldr	r6, [r4, #8]
    89b4:	71aa      	strb	r2, [r5, #6]
    89b6:	f8a5 c004 	strh.w	ip, [r5, #4]
    89ba:	60ae      	str	r6, [r5, #8]
    89bc:	4620      	mov	r0, r4
    89be:	4b62      	ldr	r3, [pc, #392]	; (8b48 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    89c0:	4a62      	ldr	r2, [pc, #392]	; (8b4c <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    89c2:	4d63      	ldr	r5, [pc, #396]	; (8b50 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    89c4:	f005 fc08 	bl	e1d8 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    89c8:	f104 000c 	add.w	r0, r4, #12
    89cc:	c807      	ldmia	r0, {r0, r1, r2}
    89ce:	f894 e006 	ldrb.w	lr, [r4, #6]
    89d2:	68a3      	ldr	r3, [r4, #8]
    89d4:	88a6      	ldrh	r6, [r4, #4]
    89d6:	f885 e006 	strb.w	lr, [r5, #6]
    89da:	60ab      	str	r3, [r5, #8]
    89dc:	f894 e018 	ldrb.w	lr, [r4, #24]
    89e0:	69e3      	ldr	r3, [r4, #28]
    89e2:	60e8      	str	r0, [r5, #12]
    89e4:	6a20      	ldr	r0, [r4, #32]
    89e6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    89ea:	80ae      	strh	r6, [r5, #4]
    89ec:	6129      	str	r1, [r5, #16]
    89ee:	7e66      	ldrb	r6, [r4, #25]
    89f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    89f2:	616a      	str	r2, [r5, #20]
    89f4:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    89f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    89fa:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    89fe:	61eb      	str	r3, [r5, #28]
    8a00:	6228      	str	r0, [r5, #32]
    8a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8a04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    8a06:	766e      	strb	r6, [r5, #25]
    8a08:	6269      	str	r1, [r5, #36]	; 0x24
    8a0a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8a0e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8a12:	632a      	str	r2, [r5, #48]	; 0x30
    8a14:	63a8      	str	r0, [r5, #56]	; 0x38
    8a16:	636b      	str	r3, [r5, #52]	; 0x34
    8a18:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    8a1c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    8a20:	6c21      	ldr	r1, [r4, #64]	; 0x40
    8a22:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    8a26:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    8a2a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8a2c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    8a30:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    8a34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8a36:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8a38:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    8a3c:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    8a40:	6429      	str	r1, [r5, #64]	; 0x40
    8a42:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    8a46:	6d61      	ldr	r1, [r4, #84]	; 0x54
    8a48:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    8a4c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8a50:	64aa      	str	r2, [r5, #72]	; 0x48
    8a52:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    8a56:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8a58:	64eb      	str	r3, [r5, #76]	; 0x4c
    8a5a:	6528      	str	r0, [r5, #80]	; 0x50
    8a5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8a5e:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    8a62:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    8a66:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    8a6a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    8a6e:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    8a72:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    8a76:	662a      	str	r2, [r5, #96]	; 0x60
    8a78:	666b      	str	r3, [r5, #100]	; 0x64
    8a7a:	6569      	str	r1, [r5, #84]	; 0x54
    8a7c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    8a7e:	4b35      	ldr	r3, [pc, #212]	; (8b54 <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    8a80:	f8cd a000 	str.w	sl, [sp]
    8a84:	4620      	mov	r0, r4
    8a86:	66a9      	str	r1, [r5, #104]	; 0x68
    8a88:	4a33      	ldr	r2, [pc, #204]	; (8b58 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    8a8a:	4d34      	ldr	r5, [pc, #208]	; (8b5c <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    8a8c:	2140      	movs	r1, #64	; 0x40
    8a8e:	f006 f8a9 	bl	ebe4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    8a92:	f894 e006 	ldrb.w	lr, [r4, #6]
    8a96:	68a2      	ldr	r2, [r4, #8]
    8a98:	68e3      	ldr	r3, [r4, #12]
    8a9a:	88a6      	ldrh	r6, [r4, #4]
    8a9c:	6920      	ldr	r0, [r4, #16]
    8a9e:	6961      	ldr	r1, [r4, #20]
    8aa0:	f885 e006 	strb.w	lr, [r5, #6]
    8aa4:	60aa      	str	r2, [r5, #8]
    8aa6:	f894 e018 	ldrb.w	lr, [r4, #24]
    8aaa:	69e2      	ldr	r2, [r4, #28]
    8aac:	60eb      	str	r3, [r5, #12]
    8aae:	6a23      	ldr	r3, [r4, #32]
    8ab0:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8ab4:	80ae      	strh	r6, [r5, #4]
    8ab6:	6128      	str	r0, [r5, #16]
    8ab8:	7e66      	ldrb	r6, [r4, #25]
    8aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8abc:	6169      	str	r1, [r5, #20]
    8abe:	f885 e018 	strb.w	lr, [r5, #24]
    8ac2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8ac4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8ac8:	61ea      	str	r2, [r5, #28]
    8aca:	622b      	str	r3, [r5, #32]
    8acc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8ad0:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8ad4:	766e      	strb	r6, [r5, #25]
    8ad6:	6268      	str	r0, [r5, #36]	; 0x24
    8ad8:	6329      	str	r1, [r5, #48]	; 0x30
    8ada:	636a      	str	r2, [r5, #52]	; 0x34
    8adc:	63ab      	str	r3, [r5, #56]	; 0x38
    8ade:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8ae2:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    8ae6:	f8cd a000 	str.w	sl, [sp]
    8aea:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    8aee:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    8af2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    8af4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    8af8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    8afc:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    8b00:	6d26      	ldr	r6, [r4, #80]	; 0x50
    8b02:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    8b06:	642a      	str	r2, [r5, #64]	; 0x40
    8b08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    8b0a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    8b0c:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    8b10:	652e      	str	r6, [r5, #80]	; 0x50
    8b12:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    8b16:	6d66      	ldr	r6, [r4, #84]	; 0x54
    8b18:	64a9      	str	r1, [r5, #72]	; 0x48
    8b1a:	e023      	b.n	8b64 <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    8b1c:	00022f58 	.word	0x00022f58
    8b20:	00022fb8 	.word	0x00022fb8
    8b24:	00022f48 	.word	0x00022f48
    8b28:	200019c4 	.word	0x200019c4
    8b2c:	00022e78 	.word	0x00022e78
    8b30:	00022f98 	.word	0x00022f98
    8b34:	00022f38 	.word	0x00022f38
    8b38:	00022e68 	.word	0x00022e68
    8b3c:	00022f88 	.word	0x00022f88
    8b40:	00023158 	.word	0x00023158
    8b44:	200015b4 	.word	0x200015b4
    8b48:	00023118 	.word	0x00023118
    8b4c:	00022fe8 	.word	0x00022fe8
    8b50:	20001320 	.word	0x20001320
    8b54:	00023128 	.word	0x00023128
    8b58:	000230c8 	.word	0x000230c8
    8b5c:	2000138c 	.word	0x2000138c
    8b60:	20001880 	.word	0x20001880
    8b64:	64ea      	str	r2, [r5, #76]	; 0x4c
    8b66:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    8b6a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    8b6e:	656e      	str	r6, [r5, #84]	; 0x54
    8b70:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    8b74:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    8b78:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    8b7c:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    8b80:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    8b84:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    8b88:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    8b8c:	4620      	mov	r0, r4
    8b8e:	4db9      	ldr	r5, [pc, #740]	; (8e74 <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    8b90:	4bb9      	ldr	r3, [pc, #740]	; (8e78 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    8b92:	4aba      	ldr	r2, [pc, #744]	; (8e7c <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    8b94:	2120      	movs	r1, #32
    8b96:	f006 f825 	bl	ebe4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    8b9a:	f894 e006 	ldrb.w	lr, [r4, #6]
    8b9e:	68a2      	ldr	r2, [r4, #8]
    8ba0:	68e3      	ldr	r3, [r4, #12]
    8ba2:	88a6      	ldrh	r6, [r4, #4]
    8ba4:	6920      	ldr	r0, [r4, #16]
    8ba6:	6961      	ldr	r1, [r4, #20]
    8ba8:	f885 e006 	strb.w	lr, [r5, #6]
    8bac:	60aa      	str	r2, [r5, #8]
    8bae:	f894 e018 	ldrb.w	lr, [r4, #24]
    8bb2:	69e2      	ldr	r2, [r4, #28]
    8bb4:	60eb      	str	r3, [r5, #12]
    8bb6:	6a23      	ldr	r3, [r4, #32]
    8bb8:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8bbc:	80ae      	strh	r6, [r5, #4]
    8bbe:	6128      	str	r0, [r5, #16]
    8bc0:	7e66      	ldrb	r6, [r4, #25]
    8bc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8bc4:	6169      	str	r1, [r5, #20]
    8bc6:	f885 e018 	strb.w	lr, [r5, #24]
    8bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8bcc:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8bd0:	61ea      	str	r2, [r5, #28]
    8bd2:	622b      	str	r3, [r5, #32]
    8bd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8bd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8bd8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8bdc:	766e      	strb	r6, [r5, #25]
    8bde:	6268      	str	r0, [r5, #36]	; 0x24
    8be0:	6329      	str	r1, [r5, #48]	; 0x30
    8be2:	636a      	str	r2, [r5, #52]	; 0x34
    8be4:	63ab      	str	r3, [r5, #56]	; 0x38
    8be6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8bea:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    8bee:	f8cd a000 	str.w	sl, [sp]
    8bf2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    8bf6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    8bfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
    8bfc:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    8c00:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    8c04:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    8c08:	6d26      	ldr	r6, [r4, #80]	; 0x50
    8c0a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    8c0e:	642a      	str	r2, [r5, #64]	; 0x40
    8c10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    8c12:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    8c14:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    8c18:	652e      	str	r6, [r5, #80]	; 0x50
    8c1a:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    8c1e:	6d66      	ldr	r6, [r4, #84]	; 0x54
    8c20:	64a9      	str	r1, [r5, #72]	; 0x48
    8c22:	64ea      	str	r2, [r5, #76]	; 0x4c
    8c24:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    8c28:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    8c2c:	656e      	str	r6, [r5, #84]	; 0x54
    8c2e:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    8c32:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    8c36:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    8c3a:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    8c3e:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    8c42:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    8c46:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    8c4a:	4620      	mov	r0, r4
    8c4c:	4d8c      	ldr	r5, [pc, #560]	; (8e80 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    8c4e:	4b8d      	ldr	r3, [pc, #564]	; (8e84 <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    8c50:	4a8d      	ldr	r2, [pc, #564]	; (8e88 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    8c52:	2110      	movs	r1, #16
    8c54:	f005 ffc6 	bl	ebe4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    8c58:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8c5c:	68a2      	ldr	r2, [r4, #8]
    8c5e:	68e3      	ldr	r3, [r4, #12]
    8c60:	79a6      	ldrb	r6, [r4, #6]
    8c62:	6920      	ldr	r0, [r4, #16]
    8c64:	6961      	ldr	r1, [r4, #20]
    8c66:	f8a5 e004 	strh.w	lr, [r5, #4]
    8c6a:	60aa      	str	r2, [r5, #8]
    8c6c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8c70:	69e2      	ldr	r2, [r4, #28]
    8c72:	60eb      	str	r3, [r5, #12]
    8c74:	6a23      	ldr	r3, [r4, #32]
    8c76:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8c7a:	71ae      	strb	r6, [r5, #6]
    8c7c:	6128      	str	r0, [r5, #16]
    8c7e:	7e66      	ldrb	r6, [r4, #25]
    8c80:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8c82:	6169      	str	r1, [r5, #20]
    8c84:	f885 e018 	strb.w	lr, [r5, #24]
    8c88:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8c8a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8c8e:	61ea      	str	r2, [r5, #28]
    8c90:	622b      	str	r3, [r5, #32]
    8c92:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8c94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8c96:	766e      	strb	r6, [r5, #25]
    8c98:	6268      	str	r0, [r5, #36]	; 0x24
    8c9a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8c9e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8ca2:	636a      	str	r2, [r5, #52]	; 0x34
    8ca4:	63ab      	str	r3, [r5, #56]	; 0x38
    8ca6:	6329      	str	r1, [r5, #48]	; 0x30
    8ca8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8cac:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    8cb0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    8cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8cb6:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    8cba:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    8cbe:	9703      	str	r7, [sp, #12]
    8cc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    8cc2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    8cc6:	642b      	str	r3, [r5, #64]	; 0x40
    8cc8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    8cca:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8ccc:	64a9      	str	r1, [r5, #72]	; 0x48
    8cce:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    8cd2:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    8cd6:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    8cda:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    8cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8ce0:	64ea      	str	r2, [r5, #76]	; 0x4c
    8ce2:	652b      	str	r3, [r5, #80]	; 0x50
    8ce4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    8ce8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    8cec:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    8cf0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    8cf4:	6568      	str	r0, [r5, #84]	; 0x54
    8cf6:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    8cfa:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    8cfe:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    8d02:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    8d06:	f04f 0e68 	mov.w	lr, #104	; 0x68
    8d0a:	4d60      	ldr	r5, [pc, #384]	; (8e8c <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    8d0c:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8eac <_ZN9ClearCore10SysManagerC1Ev+0x694>
    8d10:	4e5f      	ldr	r6, [pc, #380]	; (8e90 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    8d12:	4b60      	ldr	r3, [pc, #384]	; (8e94 <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    8d14:	4a60      	ldr	r2, [pc, #384]	; (8e98 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    8d16:	f8cd e008 	str.w	lr, [sp, #8]
    8d1a:	4620      	mov	r0, r4
    8d1c:	2108      	movs	r1, #8
    8d1e:	9601      	str	r6, [sp, #4]
    8d20:	f8cd c000 	str.w	ip, [sp]
    8d24:	f006 f8fe 	bl	ef24 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    8d28:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8d2c:	68a2      	ldr	r2, [r4, #8]
    8d2e:	68e3      	ldr	r3, [r4, #12]
    8d30:	79a6      	ldrb	r6, [r4, #6]
    8d32:	6920      	ldr	r0, [r4, #16]
    8d34:	6961      	ldr	r1, [r4, #20]
    8d36:	f8a5 e004 	strh.w	lr, [r5, #4]
    8d3a:	60aa      	str	r2, [r5, #8]
    8d3c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8d40:	69e2      	ldr	r2, [r4, #28]
    8d42:	60eb      	str	r3, [r5, #12]
    8d44:	6a23      	ldr	r3, [r4, #32]
    8d46:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8d4a:	71ae      	strb	r6, [r5, #6]
    8d4c:	6128      	str	r0, [r5, #16]
    8d4e:	7e66      	ldrb	r6, [r4, #25]
    8d50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8d52:	6169      	str	r1, [r5, #20]
    8d54:	f885 e018 	strb.w	lr, [r5, #24]
    8d58:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8d5a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8d5e:	61ea      	str	r2, [r5, #28]
    8d60:	622b      	str	r3, [r5, #32]
    8d62:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8d64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8d66:	766e      	strb	r6, [r5, #25]
    8d68:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8d6c:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8d70:	6329      	str	r1, [r5, #48]	; 0x30
    8d72:	636a      	str	r2, [r5, #52]	; 0x34
    8d74:	63ab      	str	r3, [r5, #56]	; 0x38
    8d76:	6268      	str	r0, [r5, #36]	; 0x24
    8d78:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    8d7c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    8d80:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    8d84:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8d86:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    8d8a:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    8d8e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8d90:	6d22      	ldr	r2, [r4, #80]	; 0x50
    8d92:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    8d96:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    8d9a:	642b      	str	r3, [r5, #64]	; 0x40
    8d9c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    8d9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8da0:	64a8      	str	r0, [r5, #72]	; 0x48
    8da2:	652a      	str	r2, [r5, #80]	; 0x50
    8da4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    8da8:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    8dac:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8db0:	64e9      	str	r1, [r5, #76]	; 0x4c
    8db2:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    8db6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    8dba:	656b      	str	r3, [r5, #84]	; 0x54
    8dbc:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    8dc0:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
class DigitalInOutHBridge : public DigitalInOut {
    8dc4:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    8dc8:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    8dcc:	f04f 0c65 	mov.w	ip, #101	; 0x65
    8dd0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    8dd4:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    8dd8:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    8ddc:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    8de0:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    8de4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8eb0 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    8de8:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    8dec:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    8df0:	9703      	str	r7, [sp, #12]
    8df2:	f8cd c008 	str.w	ip, [sp, #8]
    8df6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    8df8:	4b28      	ldr	r3, [pc, #160]	; (8e9c <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    8dfa:	f8cd e004 	str.w	lr, [sp, #4]
    8dfe:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    8e00:	9300      	str	r3, [sp, #0]
    8e02:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    8e06:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    8e0a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8e0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8e0e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    8e12:	6669      	str	r1, [r5, #100]	; 0x64
    8e14:	66aa      	str	r2, [r5, #104]	; 0x68
    8e16:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    8e18:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    8e1a:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    8e1e:	676e      	str	r6, [r5, #116]	; 0x74
    8e20:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    8e24:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    8e28:	66eb      	str	r3, [r5, #108]	; 0x6c
    8e2a:	67a9      	str	r1, [r5, #120]	; 0x78
    8e2c:	67ea      	str	r2, [r5, #124]	; 0x7c
    8e2e:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    8e32:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    8e36:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    8e3a:	4620      	mov	r0, r4
    8e3c:	4b18      	ldr	r3, [pc, #96]	; (8ea0 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    8e3e:	4a19      	ldr	r2, [pc, #100]	; (8ea4 <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    8e40:	4d19      	ldr	r5, [pc, #100]	; (8ea8 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    8e42:	2104      	movs	r1, #4
    8e44:	f006 f86e 	bl	ef24 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    8e48:	f104 000c 	add.w	r0, r4, #12
    8e4c:	c807      	ldmia	r0, {r0, r1, r2}
    8e4e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8e52:	68a3      	ldr	r3, [r4, #8]
    8e54:	79a6      	ldrb	r6, [r4, #6]
    8e56:	f8a5 e004 	strh.w	lr, [r5, #4]
    8e5a:	60ab      	str	r3, [r5, #8]
    8e5c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8e60:	69e3      	ldr	r3, [r4, #28]
    8e62:	60e8      	str	r0, [r5, #12]
    8e64:	6a20      	ldr	r0, [r4, #32]
    8e66:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8e6a:	71ae      	strb	r6, [r5, #6]
    8e6c:	6129      	str	r1, [r5, #16]
    8e6e:	7e66      	ldrb	r6, [r4, #25]
    8e70:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e72:	e01f      	b.n	8eb4 <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    8e74:	200013ec 	.word	0x200013ec
    8e78:	00023138 	.word	0x00023138
    8e7c:	000230d8 	.word	0x000230d8
    8e80:	2000144c 	.word	0x2000144c
    8e84:	00023148 	.word	0x00023148
    8e88:	000230e8 	.word	0x000230e8
    8e8c:	200014ac 	.word	0x200014ac
    8e90:	00023068 	.word	0x00023068
    8e94:	00023008 	.word	0x00023008
    8e98:	000230f8 	.word	0x000230f8
    8e9c:	00023038 	.word	0x00023038
    8ea0:	00023018 	.word	0x00023018
    8ea4:	00023108 	.word	0x00023108
    8ea8:	20001530 	.word	0x20001530
    8eac:	00023028 	.word	0x00023028
    8eb0:	00023078 	.word	0x00023078
    8eb4:	616a      	str	r2, [r5, #20]
    8eb6:	f885 e018 	strb.w	lr, [r5, #24]
    8eba:	6b22      	ldr	r2, [r4, #48]	; 0x30
    8ebc:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8ec0:	61eb      	str	r3, [r5, #28]
    8ec2:	6228      	str	r0, [r5, #32]
    8ec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8ec6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    8ec8:	766e      	strb	r6, [r5, #25]
    8eca:	6269      	str	r1, [r5, #36]	; 0x24
    8ecc:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8ed0:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8ed4:	632a      	str	r2, [r5, #48]	; 0x30
    8ed6:	63a8      	str	r0, [r5, #56]	; 0x38
    8ed8:	636b      	str	r3, [r5, #52]	; 0x34
    8eda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    8ede:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    8ee2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    8ee4:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    8ee8:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    8eec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8eee:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    8ef2:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    8ef6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8ef8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8efa:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    8efe:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    8f02:	6429      	str	r1, [r5, #64]	; 0x40
    8f04:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    8f08:	6d61      	ldr	r1, [r4, #84]	; 0x54
    8f0a:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    8f0e:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8f12:	64aa      	str	r2, [r5, #72]	; 0x48
    8f14:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    8f18:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    8f1c:	64eb      	str	r3, [r5, #76]	; 0x4c
    8f1e:	6528      	str	r0, [r5, #80]	; 0x50
    8f20:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    8f24:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    8f28:	6569      	str	r1, [r5, #84]	; 0x54
    8f2a:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    8f2e:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    8f32:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    8f36:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    8f3a:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    8f3e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    8f42:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    8f46:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    8f4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    8f4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8f4e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    8f50:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    8f54:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    8f58:	6669      	str	r1, [r5, #100]	; 0x64
    8f5a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8f5c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    8f5e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    8f62:	66ab      	str	r3, [r5, #104]	; 0x68
    8f64:	66e8      	str	r0, [r5, #108]	; 0x6c
    8f66:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    8f68:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    8f6c:	676e      	str	r6, [r5, #116]	; 0x74
    8f6e:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    8f72:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    8f76:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    8f78:	4abe      	ldr	r2, [pc, #760]	; (9274 <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    8f7a:	67eb      	str	r3, [r5, #124]	; 0x7c
    8f7c:	4620      	mov	r0, r4
    8f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    8f82:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    8f86:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    8f8a:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    8f8e:	f7fc f9a5 	bl	52dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8f92:	f104 000c 	add.w	r0, r4, #12
    8f96:	c807      	ldmia	r0, {r0, r1, r2}
    8f98:	4db7      	ldr	r5, [pc, #732]	; (9278 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    8f9a:	68a3      	ldr	r3, [r4, #8]
    8f9c:	f894 c018 	ldrb.w	ip, [r4, #24]
    8fa0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8fa4:	79a6      	ldrb	r6, [r4, #6]
    8fa6:	60ab      	str	r3, [r5, #8]
    8fa8:	f885 c018 	strb.w	ip, [r5, #24]
    8fac:	69e3      	ldr	r3, [r4, #28]
    8fae:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8fb2:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    8fb6:	f8a5 e004 	strh.w	lr, [r5, #4]
    8fba:	71ae      	strb	r6, [r5, #6]
    8fbc:	f894 e019 	ldrb.w	lr, [r4, #25]
    8fc0:	6a26      	ldr	r6, [r4, #32]
    8fc2:	60e8      	str	r0, [r5, #12]
    8fc4:	6129      	str	r1, [r5, #16]
    8fc6:	616a      	str	r2, [r5, #20]
    8fc8:	61eb      	str	r3, [r5, #28]
    8fca:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    8fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    8fd0:	4aaa      	ldr	r2, [pc, #680]	; (927c <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    8fd2:	f885 e019 	strb.w	lr, [r5, #25]
    8fd6:	4620      	mov	r0, r4
    8fd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8fdc:	622e      	str	r6, [r5, #32]
    8fde:	626b      	str	r3, [r5, #36]	; 0x24
    8fe0:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    8fe4:	f7fc f97a 	bl	52dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8fe8:	f104 000c 	add.w	r0, r4, #12
    8fec:	c807      	ldmia	r0, {r0, r1, r2}
    8fee:	4da4      	ldr	r5, [pc, #656]	; (9280 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    8ff0:	68a3      	ldr	r3, [r4, #8]
    8ff2:	f894 c018 	ldrb.w	ip, [r4, #24]
    8ff6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8ffa:	79a6      	ldrb	r6, [r4, #6]
    8ffc:	60ab      	str	r3, [r5, #8]
    8ffe:	f885 c018 	strb.w	ip, [r5, #24]
    9002:	69e3      	ldr	r3, [r4, #28]
    9004:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    9008:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    900c:	f8a5 e004 	strh.w	lr, [r5, #4]
    9010:	71ae      	strb	r6, [r5, #6]
    9012:	f894 e019 	ldrb.w	lr, [r4, #25]
    9016:	6a26      	ldr	r6, [r4, #32]
    9018:	60e8      	str	r0, [r5, #12]
    901a:	6129      	str	r1, [r5, #16]
    901c:	616a      	str	r2, [r5, #20]
    901e:	61eb      	str	r3, [r5, #28]
    9020:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    9024:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    9026:	4a97      	ldr	r2, [pc, #604]	; (9284 <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    9028:	f885 e019 	strb.w	lr, [r5, #25]
    902c:	4620      	mov	r0, r4
    902e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    9032:	622e      	str	r6, [r5, #32]
    9034:	626b      	str	r3, [r5, #36]	; 0x24
    9036:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    903a:	f7fc f94f 	bl	52dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    903e:	4d92      	ldr	r5, [pc, #584]	; (9288 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    9040:	88a6      	ldrh	r6, [r4, #4]
    9042:	80ae      	strh	r6, [r5, #4]
    9044:	f104 000c 	add.w	r0, r4, #12
    9048:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    904a:	2605      	movs	r6, #5
    904c:	f894 e006 	ldrb.w	lr, [r4, #6]
    9050:	68a3      	ldr	r3, [r4, #8]
    9052:	9600      	str	r6, [sp, #0]
    9054:	7e26      	ldrb	r6, [r4, #24]
    9056:	f894 c019 	ldrb.w	ip, [r4, #25]
    905a:	f885 e006 	strb.w	lr, [r5, #6]
    905e:	60ab      	str	r3, [r5, #8]
    9060:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    9064:	69e3      	ldr	r3, [r4, #28]
    9066:	6129      	str	r1, [r5, #16]
    9068:	616a      	str	r2, [r5, #20]
    906a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    906c:	6a22      	ldr	r2, [r4, #32]
    906e:	762e      	strb	r6, [r5, #24]
    9070:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    9074:	60e8      	str	r0, [r5, #12]
    9076:	f885 c019 	strb.w	ip, [r5, #25]
    907a:	61eb      	str	r3, [r5, #28]
    907c:	622a      	str	r2, [r5, #32]
    907e:	6269      	str	r1, [r5, #36]	; 0x24
    9080:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    9084:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    9088:	4620      	mov	r0, r4
    908a:	4d80      	ldr	r5, [pc, #512]	; (928c <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    908c:	4b80      	ldr	r3, [pc, #512]	; (9290 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    908e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9092:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    9096:	f7fb ff13 	bl	4ec0 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    909a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    909e:	68a2      	ldr	r2, [r4, #8]
    90a0:	68e3      	ldr	r3, [r4, #12]
    90a2:	79a6      	ldrb	r6, [r4, #6]
    90a4:	6920      	ldr	r0, [r4, #16]
    90a6:	6961      	ldr	r1, [r4, #20]
    90a8:	f8a5 e004 	strh.w	lr, [r5, #4]
    90ac:	60aa      	str	r2, [r5, #8]
    90ae:	f894 e018 	ldrb.w	lr, [r4, #24]
    90b2:	69e2      	ldr	r2, [r4, #28]
    90b4:	60eb      	str	r3, [r5, #12]
    90b6:	6a23      	ldr	r3, [r4, #32]
    90b8:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    90bc:	71ae      	strb	r6, [r5, #6]
    90be:	6128      	str	r0, [r5, #16]
    90c0:	7e66      	ldrb	r6, [r4, #25]
    90c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    90c4:	6169      	str	r1, [r5, #20]
    90c6:	f885 e018 	strb.w	lr, [r5, #24]
class DigitalInAnalogIn : public DigitalIn {
    90ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
    90cc:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    90d0:	61ea      	str	r2, [r5, #28]
    90d2:	622b      	str	r3, [r5, #32]
    90d4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    90d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    90da:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    90de:	766e      	strb	r6, [r5, #25]
    90e0:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    90e2:	2604      	movs	r6, #4
    90e4:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    90e8:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    90ec:	63ab      	str	r3, [r5, #56]	; 0x38
    90ee:	6329      	str	r1, [r5, #48]	; 0x30
    90f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    90f2:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    90f6:	4b67      	ldr	r3, [pc, #412]	; (9294 <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    90f8:	9600      	str	r6, [sp, #0]
    90fa:	4620      	mov	r0, r4
    90fc:	63e9      	str	r1, [r5, #60]	; 0x3c
    90fe:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    9102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9106:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    910a:	f7fb fed9 	bl	4ec0 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    910e:	f104 0008 	add.w	r0, r4, #8
    9112:	c80d      	ldmia	r0, {r0, r2, r3}
    9114:	4d60      	ldr	r5, [pc, #384]	; (9298 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    9116:	88a1      	ldrh	r1, [r4, #4]
    9118:	f894 e006 	ldrb.w	lr, [r4, #6]
    911c:	80a9      	strh	r1, [r5, #4]
    911e:	f885 e006 	strb.w	lr, [r5, #6]
    9122:	6961      	ldr	r1, [r4, #20]
    9124:	f894 e018 	ldrb.w	lr, [r4, #24]
    9128:	60a8      	str	r0, [r5, #8]
    912a:	60ea      	str	r2, [r5, #12]
    912c:	7e60      	ldrb	r0, [r4, #25]
    912e:	69e2      	ldr	r2, [r4, #28]
    9130:	612b      	str	r3, [r5, #16]
    9132:	6a23      	ldr	r3, [r4, #32]
    9134:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    9138:	6169      	str	r1, [r5, #20]
    913a:	f885 e018 	strb.w	lr, [r5, #24]
    913e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9140:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    9144:	7668      	strb	r0, [r5, #25]
    9146:	61ea      	str	r2, [r5, #28]
    9148:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    914c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    914e:	622b      	str	r3, [r5, #32]
    9150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9152:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    9156:	6269      	str	r1, [r5, #36]	; 0x24
    9158:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    915c:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    9160:	63ab      	str	r3, [r5, #56]	; 0x38
    9162:	632a      	str	r2, [r5, #48]	; 0x30
    9164:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    9166:	f8cd 8000 	str.w	r8, [sp]
    916a:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    916e:	63ea      	str	r2, [r5, #60]	; 0x3c
    9170:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    9174:	4620      	mov	r0, r4
    9176:	4d49      	ldr	r5, [pc, #292]	; (929c <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    9178:	4b49      	ldr	r3, [pc, #292]	; (92a0 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    917a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    917e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    9182:	f7fb fe9d 	bl	4ec0 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    9186:	f894 c006 	ldrb.w	ip, [r4, #6]
    918a:	68a2      	ldr	r2, [r4, #8]
    918c:	68e3      	ldr	r3, [r4, #12]
    918e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    9192:	6920      	ldr	r0, [r4, #16]
    9194:	6961      	ldr	r1, [r4, #20]
    9196:	f885 c006 	strb.w	ip, [r5, #6]
    919a:	60aa      	str	r2, [r5, #8]
    919c:	f894 c018 	ldrb.w	ip, [r4, #24]
    91a0:	69e2      	ldr	r2, [r4, #28]
    91a2:	60eb      	str	r3, [r5, #12]
    91a4:	6a23      	ldr	r3, [r4, #32]
    91a6:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    91aa:	f8a5 e004 	strh.w	lr, [r5, #4]
    91ae:	6128      	str	r0, [r5, #16]
    91b0:	f894 e019 	ldrb.w	lr, [r4, #25]
    91b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    91b6:	6169      	str	r1, [r5, #20]
    91b8:	f885 c018 	strb.w	ip, [r5, #24]
    91bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    91be:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    91c2:	61ea      	str	r2, [r5, #28]
    91c4:	622b      	str	r3, [r5, #32]
    91c6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    91ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    91cc:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    91d0:	f885 e019 	strb.w	lr, [r5, #25]
    91d4:	6268      	str	r0, [r5, #36]	; 0x24
    91d6:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    91da:	6329      	str	r1, [r5, #48]	; 0x30
    91dc:	63ab      	str	r3, [r5, #56]	; 0x38
    91de:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    91e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    91e4:	f8cd a000 	str.w	sl, [sp]
    91e8:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    91ec:	63ea      	str	r2, [r5, #60]	; 0x3c
    91ee:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    91f2:	4620      	mov	r0, r4
    91f4:	4b2b      	ldr	r3, [pc, #172]	; (92a4 <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    91f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    91fa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    91fe:	f7fb fe5f 	bl	4ec0 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    9202:	f104 0008 	add.w	r0, r4, #8
    9206:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    9208:	f8df e09c 	ldr.w	lr, [pc, #156]	; 92a8 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    920c:	f894 c006 	ldrb.w	ip, [r4, #6]
    9210:	88a5      	ldrh	r5, [r4, #4]
    9212:	f88e c006 	strb.w	ip, [lr, #6]
    9216:	f894 c019 	ldrb.w	ip, [r4, #25]
    921a:	f894 8018 	ldrb.w	r8, [r4, #24]
    921e:	f8ae 5004 	strh.w	r5, [lr, #4]
    9222:	f8ce 0008 	str.w	r0, [lr, #8]
    9226:	69e5      	ldr	r5, [r4, #28]
    9228:	6a20      	ldr	r0, [r4, #32]
    922a:	f8ce 100c 	str.w	r1, [lr, #12]
    922e:	f8ce 2010 	str.w	r2, [lr, #16]
    9232:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    9236:	f8ce 3014 	str.w	r3, [lr, #20]
    923a:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    923e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9240:	f88e c019 	strb.w	ip, [lr, #25]
    9244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9246:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    924a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    924c:	f88e 8018 	strb.w	r8, [lr, #24]
    9250:	f8ce 501c 	str.w	r5, [lr, #28]
    9254:	f8ce 0020 	str.w	r0, [lr, #32]
    9258:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    925c:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    9260:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    9264:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    9268:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    926c:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    9270:	e01c      	b.n	92ac <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    9272:	bf00      	nop
    9274:	00022ec8 	.word	0x00022ec8
    9278:	20001290 	.word	0x20001290
    927c:	00022ed8 	.word	0x00022ed8
    9280:	200012c0 	.word	0x200012c0
    9284:	00022ee8 	.word	0x00022ee8
    9288:	200012f0 	.word	0x200012f0
    928c:	20000c5c 	.word	0x20000c5c
    9290:	00022ef8 	.word	0x00022ef8
    9294:	00022f08 	.word	0x00022f08
    9298:	200011c4 	.word	0x200011c4
    929c:	20001208 	.word	0x20001208
    92a0:	00022f18 	.word	0x00022f18
    92a4:	00022f28 	.word	0x00022f28
    92a8:	2000124c 	.word	0x2000124c
    92ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    92ae:	9702      	str	r7, [sp, #8]
    92b0:	9601      	str	r6, [sp, #4]
    92b2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    92b6:	4dcc      	ldr	r5, [pc, #816]	; (95e8 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    92b8:	9500      	str	r5, [sp, #0]
    92ba:	4620      	mov	r0, r4
    92bc:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    92c0:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    92c4:	4bc9      	ldr	r3, [pc, #804]	; (95ec <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    92c6:	4aca      	ldr	r2, [pc, #808]	; (95f0 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    92c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    92cc:	f7fc fb56 	bl	597c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    92d0:	4bc8      	ldr	r3, [pc, #800]	; (95f4 <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    92d2:	79a7      	ldrb	r7, [r4, #6]
    92d4:	68a6      	ldr	r6, [r4, #8]
    92d6:	68e5      	ldr	r5, [r4, #12]
    92d8:	6920      	ldr	r0, [r4, #16]
    92da:	6961      	ldr	r1, [r4, #20]
    92dc:	f894 8018 	ldrb.w	r8, [r4, #24]
    92e0:	69e2      	ldr	r2, [r4, #28]
    92e2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    92e6:	f894 c019 	ldrb.w	ip, [r4, #25]
    92ea:	719f      	strb	r7, [r3, #6]
    92ec:	609e      	str	r6, [r3, #8]
    92ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
    92f0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    92f4:	60dd      	str	r5, [r3, #12]
    92f6:	6118      	str	r0, [r3, #16]
    92f8:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    92fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    92fe:	6159      	str	r1, [r3, #20]
    9300:	f883 8018 	strb.w	r8, [r3, #24]
    9304:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9306:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    930a:	61da      	str	r2, [r3, #28]
    930c:	6a22      	ldr	r2, [r4, #32]
    930e:	f8a3 e004 	strh.w	lr, [r3, #4]
    9312:	f883 c019 	strb.w	ip, [r3, #25]
    9316:	621a      	str	r2, [r3, #32]
    9318:	625f      	str	r7, [r3, #36]	; 0x24
    931a:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    931e:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    9322:	6358      	str	r0, [r3, #52]	; 0x34
    9324:	6399      	str	r1, [r3, #56]	; 0x38
    9326:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    932a:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    932e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9330:	649a      	str	r2, [r3, #72]	; 0x48
    9332:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    9334:	9207      	str	r2, [sp, #28]
    9336:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    933a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    933c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    9340:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9342:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    9346:	64da      	str	r2, [r3, #76]	; 0x4c
    9348:	9a07      	ldr	r2, [sp, #28]
    934a:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    934e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    9352:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    9356:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    935a:	6459      	str	r1, [r3, #68]	; 0x44
    935c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    935e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9360:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    9364:	65da      	str	r2, [r3, #92]	; 0x5c
    9366:	6f27      	ldr	r7, [r4, #112]	; 0x70
    9368:	6e22      	ldr	r2, [r4, #96]	; 0x60
    936a:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    936e:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    9372:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    9376:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    937a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    937c:	6558      	str	r0, [r3, #84]	; 0x54
    937e:	6599      	str	r1, [r3, #88]	; 0x58
    9380:	661a      	str	r2, [r3, #96]	; 0x60
    9382:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    9386:	671f      	str	r7, [r3, #112]	; 0x70
    9388:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    938c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    9390:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    9394:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    9398:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    939c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    93a0:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    93a4:	675e      	str	r6, [r3, #116]	; 0x74
    93a6:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    93aa:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    93ae:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    93b2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    93b6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    93ba:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    93be:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    93c2:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    93c6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    93ca:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    93ce:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    93d2:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    93d6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    93da:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    93de:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    93e2:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    93e6:	4619      	mov	r1, r3
    93e8:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    93ec:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    93f0:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    93f4:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    93f6:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    93fa:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    93fe:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    9402:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    9406:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    940a:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    940c:	983a      	ldr	r0, [sp, #232]	; 0xe8
    940e:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    9410:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    9414:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    9418:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    941c:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    9420:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    9424:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    9428:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    942c:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    9430:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    9434:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    9438:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    943c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    9440:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    9444:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    9448:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    944c:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    9450:	9b42      	ldr	r3, [sp, #264]	; 0x108
    9452:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    9456:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    945a:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    945e:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    9462:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    9466:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    946a:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    946e:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    9472:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    9476:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    947a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    947e:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    9482:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    9484:	9d44      	ldr	r5, [sp, #272]	; 0x110
    9486:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    948a:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    948e:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    9492:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    9494:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    9498:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    949c:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    94a0:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    94a4:	9e49      	ldr	r6, [sp, #292]	; 0x124
    94a6:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    94a8:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    94ac:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    94b0:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    94b2:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    94b6:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    94ba:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    94be:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    94c2:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    94c6:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    94ca:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    94cc:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    94d0:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    94d4:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    94d8:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    94dc:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    94e0:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    94e4:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    94e8:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    94ec:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    94f0:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    94f4:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    94f6:	9b50      	ldr	r3, [sp, #320]	; 0x140
    94f8:	9d51      	ldr	r5, [sp, #324]	; 0x144
    94fa:	9852      	ldr	r0, [sp, #328]	; 0x148
    94fc:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    9500:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    9504:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    9508:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    950c:	9b54      	ldr	r3, [sp, #336]	; 0x150
    950e:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    9512:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    9516:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    951a:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    951e:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    9522:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    9526:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    952a:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    952e:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    9532:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    9536:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    953a:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    953e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    9542:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    9546:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    954a:	4a2b      	ldr	r2, [pc, #172]	; (95f8 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    954c:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    9550:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    9554:	2401      	movs	r4, #1
    9556:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    955a:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    955e:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    9562:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    9566:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    956a:	2605      	movs	r6, #5
    956c:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    9570:	9d58      	ldr	r5, [sp, #352]	; 0x160
    9572:	4f22      	ldr	r7, [pc, #136]	; (95fc <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    9574:	9402      	str	r4, [sp, #8]
    9576:	e88d 0044 	stmia.w	sp, {r2, r6}
    957a:	a808      	add	r0, sp, #32
    957c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    9580:	4b1f      	ldr	r3, [pc, #124]	; (9600 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    9582:	4a20      	ldr	r2, [pc, #128]	; (9604 <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    9584:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9588:	f7fc f9f8 	bl	597c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    958c:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    9590:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9596:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9598:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    959a:	980d      	ldr	r0, [sp, #52]	; 0x34
    959c:	71b9      	strb	r1, [r7, #6]
    959e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    95a0:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    95a4:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    95a8:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    95ac:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    95b0:	80ba      	strh	r2, [r7, #4]
    95b2:	60bb      	str	r3, [r7, #8]
    95b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    95b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    95b8:	60fe      	str	r6, [r7, #12]
    95ba:	613d      	str	r5, [r7, #16]
    95bc:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    95c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    95c2:	6178      	str	r0, [r7, #20]
    95c4:	61f9      	str	r1, [r7, #28]
    95c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    95c8:	f887 8018 	strb.w	r8, [r7, #24]
    95cc:	a919      	add	r1, sp, #100	; 0x64
    95ce:	623a      	str	r2, [r7, #32]
    95d0:	627b      	str	r3, [r7, #36]	; 0x24
    95d2:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    95d6:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    95da:	637d      	str	r5, [r7, #52]	; 0x34
    95dc:	63b8      	str	r0, [r7, #56]	; 0x38
    95de:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    95e2:	f887 c019 	strb.w	ip, [r7, #25]
    95e6:	e00f      	b.n	9608 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    95e8:	00022ff8 	.word	0x00022ff8
    95ec:	00023168 	.word	0x00023168
    95f0:	00022fa8 	.word	0x00022fa8
    95f4:	20000ca0 	.word	0x20000ca0
    95f8:	00023198 	.word	0x00023198
    95fc:	20000de8 	.word	0x20000de8
    9600:	00023178 	.word	0x00023178
    9604:	00023188 	.word	0x00023188
    9608:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    960c:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    9610:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9614:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    9618:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    961c:	c90e      	ldmia	r1, {r1, r2, r3}
    961e:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    9622:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    9626:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    962a:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    962e:	6479      	str	r1, [r7, #68]	; 0x44
    9630:	981d      	ldr	r0, [sp, #116]	; 0x74
    9632:	991e      	ldr	r1, [sp, #120]	; 0x78
    9634:	64ba      	str	r2, [r7, #72]	; 0x48
    9636:	64fb      	str	r3, [r7, #76]	; 0x4c
    9638:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    963a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    963c:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    9640:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    9644:	9d24      	ldr	r5, [sp, #144]	; 0x90
    9646:	9e25      	ldr	r6, [sp, #148]	; 0x94
    9648:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    964c:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    9650:	6578      	str	r0, [r7, #84]	; 0x54
    9652:	65b9      	str	r1, [r7, #88]	; 0x58
    9654:	65fa      	str	r2, [r7, #92]	; 0x5c
    9656:	663b      	str	r3, [r7, #96]	; 0x60
    9658:	673d      	str	r5, [r7, #112]	; 0x70
    965a:	677e      	str	r6, [r7, #116]	; 0x74
    965c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    9660:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    9664:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    9668:	9928      	ldr	r1, [sp, #160]	; 0xa0
    966a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    966c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    9670:	4615      	mov	r5, r2
    9672:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    9674:	992f      	ldr	r1, [sp, #188]	; 0xbc
    9676:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    967a:	461e      	mov	r6, r3
    967c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    967e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    9680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    9684:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    9688:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    968a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    968c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    9690:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    9694:	9933      	ldr	r1, [sp, #204]	; 0xcc
    9696:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    9698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    969c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    96a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    96a2:	9836      	ldr	r0, [sp, #216]	; 0xd8
    96a4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    96a8:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    96ac:	9937      	ldr	r1, [sp, #220]	; 0xdc
    96ae:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    96b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    96b4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    96b8:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    96bc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    96c0:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    96c4:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    96c8:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    96ca:	983a      	ldr	r0, [sp, #232]	; 0xe8
    96cc:	993b      	ldr	r1, [sp, #236]	; 0xec
    96ce:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    96d2:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    96d6:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    96da:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    96de:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    96e2:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    96e6:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    96ea:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    96ee:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    96f2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    96f6:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    96fa:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    96fe:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    9702:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    9706:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    970a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    970e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    9712:	9b42      	ldr	r3, [sp, #264]	; 0x108
    9714:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    9718:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    971c:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    9720:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    9724:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    9728:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    972c:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    9730:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    9734:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    9738:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    973c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    9740:	9943      	ldr	r1, [sp, #268]	; 0x10c
    9742:	9d44      	ldr	r5, [sp, #272]	; 0x110
    9744:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    9748:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    974c:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    9750:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    9754:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    9756:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    975a:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    975e:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    9762:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    9766:	994b      	ldr	r1, [sp, #300]	; 0x12c
    9768:	9d49      	ldr	r5, [sp, #292]	; 0x124
    976a:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    976e:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    9772:	984a      	ldr	r0, [sp, #296]	; 0x128
    9774:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    9778:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    977c:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    9780:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    9784:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    9788:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    978c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    978e:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    9792:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    9796:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    979a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    979e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    97a2:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    97a6:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    97aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    97ae:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    97b2:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    97b4:	9b50      	ldr	r3, [sp, #320]	; 0x140
    97b6:	9851      	ldr	r0, [sp, #324]	; 0x144
    97b8:	9952      	ldr	r1, [sp, #328]	; 0x148
    97ba:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    97be:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    97c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    97c6:	9b54      	ldr	r3, [sp, #336]	; 0x150
    97c8:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    97cc:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    97d0:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    97d4:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    97d8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    97dc:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    97e0:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    97e4:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    97e8:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    97ec:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    97f0:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    97f4:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    97f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    97fc:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    9800:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    9804:	4aca      	ldr	r2, [pc, #808]	; (9b30 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    9806:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    980a:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    980e:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    9812:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    9816:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    981a:	2503      	movs	r5, #3
    981c:	2602      	movs	r6, #2
    981e:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    9822:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    9826:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    982a:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    982e:	9958      	ldr	r1, [sp, #352]	; 0x160
    9830:	4bc0      	ldr	r3, [pc, #768]	; (9b34 <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    9832:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    9836:	a808      	add	r0, sp, #32
    9838:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    983c:	4abe      	ldr	r2, [pc, #760]	; (9b38 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    983e:	4fbf      	ldr	r7, [pc, #764]	; (9b3c <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    9840:	f44f 7100 	mov.w	r1, #512	; 0x200
    9844:	f7fc f89a 	bl	597c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    9848:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    984c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    984e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9850:	990d      	ldr	r1, [sp, #52]	; 0x34
    9852:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    9856:	980c      	ldr	r0, [sp, #48]	; 0x30
    9858:	f8a7 c004 	strh.w	ip, [r7, #4]
    985c:	60ba      	str	r2, [r7, #8]
    985e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    9862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9864:	60fb      	str	r3, [r7, #12]
    9866:	6179      	str	r1, [r7, #20]
    9868:	9b10      	ldr	r3, [sp, #64]	; 0x40
    986a:	9915      	ldr	r1, [sp, #84]	; 0x54
    986c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    9870:	f887 e006 	strb.w	lr, [r7, #6]
    9874:	6138      	str	r0, [r7, #16]
    9876:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    987a:	9811      	ldr	r0, [sp, #68]	; 0x44
    987c:	f887 c018 	strb.w	ip, [r7, #24]
    9880:	61fa      	str	r2, [r7, #28]
    9882:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    9886:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9888:	623b      	str	r3, [r7, #32]
    988a:	6379      	str	r1, [r7, #52]	; 0x34
    988c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9890:	f887 e019 	strb.w	lr, [r7, #25]
    9894:	a919      	add	r1, sp, #100	; 0x64
    9896:	6278      	str	r0, [r7, #36]	; 0x24
    9898:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    989c:	63ba      	str	r2, [r7, #56]	; 0x38
    989e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    98a2:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    98a6:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    98aa:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    98ae:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    98b2:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    98b6:	c90e      	ldmia	r1, {r1, r2, r3}
    98b8:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    98bc:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    98c0:	6479      	str	r1, [r7, #68]	; 0x44
    98c2:	64ba      	str	r2, [r7, #72]	; 0x48
    98c4:	991d      	ldr	r1, [sp, #116]	; 0x74
    98c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    98c8:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    98cc:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    98d0:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    98d4:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    98d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    98da:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    98de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    98e0:	9820      	ldr	r0, [sp, #128]	; 0x80
    98e2:	6579      	str	r1, [r7, #84]	; 0x54
    98e4:	65ba      	str	r2, [r7, #88]	; 0x58
    98e6:	9924      	ldr	r1, [sp, #144]	; 0x90
    98e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    98ea:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    98ee:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    98f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    98f4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    98f8:	677a      	str	r2, [r7, #116]	; 0x74
    98fa:	6638      	str	r0, [r7, #96]	; 0x60
    98fc:	6739      	str	r1, [r7, #112]	; 0x70
    98fe:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    9902:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    9904:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    9906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    990a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    990e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    9910:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    9912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    9916:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    991a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    991c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    991e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    9922:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    9926:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    9928:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    992a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    992e:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    9932:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    9934:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    9938:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    993a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    993e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    9942:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    9944:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    9946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    994a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    994e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    9950:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    9954:	a939      	add	r1, sp, #228	; 0xe4
    9956:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    9958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    995c:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    9960:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    9964:	c90e      	ldmia	r1, {r1, r2, r3}
    9966:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    996a:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    996e:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    9972:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    9976:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    997a:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    997e:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    9982:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    9986:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    998a:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    998e:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    9992:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    9996:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    999a:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    999e:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    99a2:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    99a6:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    99aa:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    99ae:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    99b2:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    99b6:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    99ba:	9b42      	ldr	r3, [sp, #264]	; 0x108
    99bc:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    99c0:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    99c4:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    99c8:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    99cc:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    99d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    99d4:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    99d8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    99da:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    99de:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    99e2:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    99e6:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    99ea:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    99ee:	9947      	ldr	r1, [sp, #284]	; 0x11c
    99f0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    99f4:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    99f8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    99fa:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    99fe:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    9a02:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    9a06:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    9a0a:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    9a0e:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    9a12:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    9a16:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    9a18:	984b      	ldr	r0, [sp, #300]	; 0x12c
    9a1a:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    9a1e:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    9a22:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    9a26:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    9a2a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    9a2e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    9a30:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    9a34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    9a38:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    9a3c:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    9a40:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    9a44:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    9a48:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    9a4c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    9a4e:	9b51      	ldr	r3, [sp, #324]	; 0x144
    9a50:	9a50      	ldr	r2, [sp, #320]	; 0x140
    9a52:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    9a56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    9a5a:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    9a5e:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    9a62:	9852      	ldr	r0, [sp, #328]	; 0x148
    9a64:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    9a68:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    9a6c:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    9a70:	9a54      	ldr	r2, [sp, #336]	; 0x150
    9a72:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    9a76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    9a7a:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    9a7e:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    9a82:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    9a86:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    9a8a:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    9a8e:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    9a92:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    9a96:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    9a9a:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    9a9e:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    9aa2:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    9aa6:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    9aaa:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    9aae:	f04f 0800 	mov.w	r8, #0
    9ab2:	f8df e098 	ldr.w	lr, [pc, #152]	; 9b4c <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    9ab6:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    9aba:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    9abe:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    9ac2:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    9ac6:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    9aca:	9958      	ldr	r1, [sp, #352]	; 0x160
    9acc:	4b1c      	ldr	r3, [pc, #112]	; (9b40 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    9ace:	9502      	str	r5, [sp, #8]
    9ad0:	f8cd 8004 	str.w	r8, [sp, #4]
    9ad4:	f8cd e000 	str.w	lr, [sp]
    9ad8:	a808      	add	r0, sp, #32
    9ada:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    9ade:	4a19      	ldr	r2, [pc, #100]	; (9b44 <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    9ae0:	4f19      	ldr	r7, [pc, #100]	; (9b48 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    9ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
    9ae6:	f7fb ff49 	bl	597c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    9aea:	a80a      	add	r0, sp, #40	; 0x28
    9aec:	c807      	ldmia	r0, {r0, r1, r2}
    9aee:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9af2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    9af6:	80bb      	strh	r3, [r7, #4]
    9af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9afa:	f887 e006 	strb.w	lr, [r7, #6]
    9afe:	60b8      	str	r0, [r7, #8]
    9b00:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    9b04:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9b08:	60f9      	str	r1, [r7, #12]
    9b0a:	613a      	str	r2, [r7, #16]
    9b0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9b0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9b10:	617b      	str	r3, [r7, #20]
    9b12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9b14:	f887 e018 	strb.w	lr, [r7, #24]
    9b18:	7678      	strb	r0, [r7, #25]
    9b1a:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    9b1e:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    9b22:	61f9      	str	r1, [r7, #28]
    9b24:	623a      	str	r2, [r7, #32]
    9b26:	9915      	ldr	r1, [sp, #84]	; 0x54
    9b28:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9b2a:	627b      	str	r3, [r7, #36]	; 0x24
    9b2c:	e010      	b.n	9b50 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    9b2e:	bf00      	nop
    9b30:	000230a8 	.word	0x000230a8
    9b34:	00023048 	.word	0x00023048
    9b38:	00023088 	.word	0x00023088
    9b3c:	20000f30 	.word	0x20000f30
    9b40:	00023058 	.word	0x00023058
    9b44:	00023098 	.word	0x00023098
    9b48:	20001078 	.word	0x20001078
    9b4c:	000230b8 	.word	0x000230b8
    9b50:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9b54:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    9b58:	6379      	str	r1, [r7, #52]	; 0x34
    9b5a:	63ba      	str	r2, [r7, #56]	; 0x38
    9b5c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    9b60:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    9b64:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    9b68:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    9b6c:	9919      	ldr	r1, [sp, #100]	; 0x64
    9b6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9b70:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    9b74:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    9b78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b7a:	6479      	str	r1, [r7, #68]	; 0x44
    9b7c:	64ba      	str	r2, [r7, #72]	; 0x48
    9b7e:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    9b82:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    9b86:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    9b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    9b8c:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    9b90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9b92:	991e      	ldr	r1, [sp, #120]	; 0x78
    9b94:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    9b98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9b9a:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    9b9e:	657b      	str	r3, [r7, #84]	; 0x54
    9ba0:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    9ba4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9ba6:	65b9      	str	r1, [r7, #88]	; 0x58
    9ba8:	65fa      	str	r2, [r7, #92]	; 0x5c
    9baa:	9924      	ldr	r1, [sp, #144]	; 0x90
    9bac:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9bae:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    9bb2:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    9bb6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    9bba:	6739      	str	r1, [r7, #112]	; 0x70
    9bbc:	663b      	str	r3, [r7, #96]	; 0x60
    9bbe:	677a      	str	r2, [r7, #116]	; 0x74
    9bc0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    9bc4:	9928      	ldr	r1, [sp, #160]	; 0xa0
    9bc6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    9bca:	992c      	ldr	r1, [sp, #176]	; 0xb0
    9bcc:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    9bd0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    9bd2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    9bd6:	992e      	ldr	r1, [sp, #184]	; 0xb8
    9bd8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    9bdc:	992f      	ldr	r1, [sp, #188]	; 0xbc
    9bde:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    9be2:	9930      	ldr	r1, [sp, #192]	; 0xc0
    9be4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    9be8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    9bea:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    9bee:	9932      	ldr	r1, [sp, #200]	; 0xc8
    9bf0:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    9bf4:	9933      	ldr	r1, [sp, #204]	; 0xcc
    9bf6:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    9bfa:	9934      	ldr	r1, [sp, #208]	; 0xd0
    9bfc:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    9c00:	9935      	ldr	r1, [sp, #212]	; 0xd4
    9c02:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    9c06:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    9c0a:	9936      	ldr	r1, [sp, #216]	; 0xd8
    9c0c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    9c10:	9937      	ldr	r1, [sp, #220]	; 0xdc
    9c12:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    9c16:	9938      	ldr	r1, [sp, #224]	; 0xe0
    9c18:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    9c1c:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    9c20:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    9c24:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    9c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    9c2a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    9c2c:	993b      	ldr	r1, [sp, #236]	; 0xec
    9c2e:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    9c32:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    9c36:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    9c3a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    9c3e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    9c42:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    9c46:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    9c4a:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    9c4e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    9c52:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    9c56:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    9c5a:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    9c5e:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    9c62:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    9c66:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    9c6a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    9c6e:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    9c72:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    9c76:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    9c7a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    9c7e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    9c82:	9b42      	ldr	r3, [sp, #264]	; 0x108
    9c84:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    9c88:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    9c8c:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    9c90:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    9c94:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    9c98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    9c9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    9c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    9ca2:	9844      	ldr	r0, [sp, #272]	; 0x110
    9ca4:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    9ca8:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    9cac:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    9cb0:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    9cb4:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    9cb8:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    9cbc:	9847      	ldr	r0, [sp, #284]	; 0x11c
    9cbe:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    9cc2:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    9cc6:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    9cca:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    9cce:	9a49      	ldr	r2, [sp, #292]	; 0x124
    9cd0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    9cd4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    9cd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    9cda:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    9cde:	984b      	ldr	r0, [sp, #300]	; 0x12c
    9ce0:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    9ce4:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    9ce8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    9cec:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    9cf0:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    9cf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    9cf8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    9cfa:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    9cfe:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    9d02:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    9d06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    9d0a:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    9d0e:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    9d10:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    9d14:	9850      	ldr	r0, [sp, #320]	; 0x140
    9d16:	9951      	ldr	r1, [sp, #324]	; 0x144
    9d18:	9a52      	ldr	r2, [sp, #328]	; 0x148
    9d1a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    9d1e:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    9d22:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    9d26:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    9d2a:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    9d2e:	9a54      	ldr	r2, [sp, #336]	; 0x150
    9d30:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    9d34:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    9d38:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    9d3c:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    9d40:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    9d44:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    9d48:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    9d4c:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    9d50:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    9d54:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    9d58:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    9d5c:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    9d60:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    9d64:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    9d68:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    9d6c:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    9d70:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    9d74:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    9d78:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    9d7c:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    9d80:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    9d84:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    9d86:	f8df c208 	ldr.w	ip, [pc, #520]	; 9f90 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    9d8a:	9207      	str	r2, [sp, #28]
    9d8c:	f8df e204 	ldr.w	lr, [pc, #516]	; 9f94 <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    9d90:	9505      	str	r5, [sp, #20]
    9d92:	4b78      	ldr	r3, [pc, #480]	; (9f74 <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    9d94:	9d07      	ldr	r5, [sp, #28]
    9d96:	4878      	ldr	r0, [pc, #480]	; (9f78 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    9d98:	f8cd e010 	str.w	lr, [sp, #16]
    9d9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9da0:	e88d 1004 	stmia.w	sp, {r2, ip}
    9da4:	9303      	str	r3, [sp, #12]
    9da6:	9002      	str	r0, [sp, #8]
    9da8:	4641      	mov	r1, r8
    9daa:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    9dae:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 9f98 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    9db2:	4d72      	ldr	r5, [pc, #456]	; (9f7c <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    9db4:	a808      	add	r0, sp, #32
    9db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9dba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9dbe:	f007 fd69 	bl	11894 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    9dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
    9dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9dc6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    9dca:	980c      	ldr	r0, [sp, #48]	; 0x30
    9dcc:	f8c8 1008 	str.w	r1, [r8, #8]
    9dd0:	f8c8 2004 	str.w	r2, [r8, #4]
    9dd4:	990d      	ldr	r1, [sp, #52]	; 0x34
    9dd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9dd8:	f888 300c 	strb.w	r3, [r8, #12]
    9ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9dde:	f8c8 0010 	str.w	r0, [r8, #16]
    9de2:	f8c8 1014 	str.w	r1, [r8, #20]
    9de6:	9810      	ldr	r0, [sp, #64]	; 0x40
    9de8:	9911      	ldr	r1, [sp, #68]	; 0x44
    9dea:	f8c8 2018 	str.w	r2, [r8, #24]
    9dee:	f8c8 301c 	str.w	r3, [r8, #28]
    9df2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9df6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9dfa:	f8c8 0020 	str.w	r0, [r8, #32]
    9dfe:	2780      	movs	r7, #128	; 0x80
    9e00:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    9e04:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    9e08:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    9e0c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    9e10:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    9e14:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    9e18:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    9e1c:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    9e20:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    9e24:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    9e28:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    9e2c:	a914      	add	r1, sp, #80	; 0x50
    9e2e:	463a      	mov	r2, r7
    9e30:	f108 0030 	add.w	r0, r8, #48	; 0x30
    9e34:	f014 f9dc 	bl	1e1f0 <memcpy>
    9e38:	463a      	mov	r2, r7
    9e3a:	a934      	add	r1, sp, #208	; 0xd0
    9e3c:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    9e40:	f014 f9d6 	bl	1e1f0 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    9e44:	4b4e      	ldr	r3, [pc, #312]	; (9f80 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    9e46:	9303      	str	r3, [sp, #12]
    9e48:	484e      	ldr	r0, [pc, #312]	; (9f84 <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    9e4a:	4a4f      	ldr	r2, [pc, #316]	; (9f88 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    9e4c:	9002      	str	r0, [sp, #8]
    9e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    9e52:	9201      	str	r2, [sp, #4]
    9e54:	9300      	str	r3, [sp, #0]
    9e56:	9854      	ldr	r0, [sp, #336]	; 0x150
    9e58:	9a55      	ldr	r2, [sp, #340]	; 0x154
    9e5a:	9b56      	ldr	r3, [sp, #344]	; 0x158
    9e5c:	9605      	str	r6, [sp, #20]
    9e5e:	4621      	mov	r1, r4
    9e60:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    9e62:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    9e66:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    9e6a:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    9e6e:	9858      	ldr	r0, [sp, #352]	; 0x160
    9e70:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    9e74:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    9e78:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    9e7c:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    9e80:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    9e82:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    9e84:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    9e86:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    9e8a:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    9e8e:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    9e92:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    9e96:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    9e9a:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    9e9e:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    9ea2:	a808      	add	r0, sp, #32
    9ea4:	4e39      	ldr	r6, [pc, #228]	; (9f8c <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    9ea6:	9604      	str	r6, [sp, #16]
    9ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9eac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    9eb0:	f007 fcf0 	bl	11894 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    9eb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
    9eb8:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    9ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9ebe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9ec2:	60ac      	str	r4, [r5, #8]
    9ec4:	6068      	str	r0, [r5, #4]
    9ec6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9ec8:	980d      	ldr	r0, [sp, #52]	; 0x34
    9eca:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    9ece:	f885 e00c 	strb.w	lr, [r5, #12]
    9ed2:	612a      	str	r2, [r5, #16]
    9ed4:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    9ed8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9edc:	6168      	str	r0, [r5, #20]
    9ede:	61ae      	str	r6, [r5, #24]
    9ee0:	9810      	ldr	r0, [sp, #64]	; 0x40
    9ee2:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    9ee6:	61ec      	str	r4, [r5, #28]
    9ee8:	626b      	str	r3, [r5, #36]	; 0x24
    9eea:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    9eee:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    9ef2:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    9ef6:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    9efa:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    9efe:	a914      	add	r1, sp, #80	; 0x50
    9f00:	6228      	str	r0, [r5, #32]
    9f02:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    9f06:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    9f0a:	463a      	mov	r2, r7
    9f0c:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    9f10:	f105 0030 	add.w	r0, r5, #48	; 0x30
    9f14:	f014 f96c 	bl	1e1f0 <memcpy>
    9f18:	463a      	mov	r2, r7
    9f1a:	a934      	add	r1, sp, #208	; 0xd0
    9f1c:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    9f20:	f014 f966 	bl	1e1f0 <memcpy>
    9f24:	a855      	add	r0, sp, #340	; 0x154
    9f26:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    9f2a:	9b54      	ldr	r3, [sp, #336]	; 0x150
    9f2c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    9f30:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    9f32:	9e58      	ldr	r6, [sp, #352]	; 0x160
    9f34:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    9f38:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    9f3c:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    9f40:	995b      	ldr	r1, [sp, #364]	; 0x16c
    9f42:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    9f46:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    9f48:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    9f4c:	4648      	mov	r0, r9
    9f4e:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    9f52:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    9f56:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    9f5a:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    9f5e:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    9f62:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    9f66:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    9f6a:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    9f6e:	b05f      	add	sp, #380	; 0x17c
    9f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f74:	00022e98 	.word	0x00022e98
    9f78:	00022e88 	.word	0x00022e88
    9f7c:	20001728 	.word	0x20001728
    9f80:	00022eb8 	.word	0x00022eb8
    9f84:	00022ea8 	.word	0x00022ea8
    9f88:	00022fd8 	.word	0x00022fd8
    9f8c:	00022f78 	.word	0x00022f78
    9f90:	00022fc8 	.word	0x00022fc8
    9f94:	00022f68 	.word	0x00022f68
    9f98:	200015d0 	.word	0x200015d0

00009f9c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    9f9c:	2914      	cmp	r1, #20
    9f9e:	dc03      	bgt.n	9fa8 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    9fa0:	4a03      	ldr	r2, [pc, #12]	; (9fb0 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    9fa2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    9fa6:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    9fa8:	4b02      	ldr	r3, [pc, #8]	; (9fb4 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    9faa:	6818      	ldr	r0, [r3, #0]
    9fac:	f006 b94c 	b.w	10248 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    9fb0:	00022e14 	.word	0x00022e14
    9fb4:	20001f38 	.word	0x20001f38

00009fb8 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    9fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9fba:	4ab1      	ldr	r2, [pc, #708]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9fbc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9fc0:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    9fc4:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9fc6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9fca:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9fce:	065e      	lsls	r6, r3, #25
    9fd0:	d4fb      	bmi.n	9fca <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    9fd2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9fd6:	49aa      	ldr	r1, [pc, #680]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9fd8:	2001      	movs	r0, #1
    9fda:	f360 0303 	bfi	r3, r0, #0, #4
    9fde:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9fe2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9fea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9fee:	684b      	ldr	r3, [r1, #4]
    9ff0:	f013 0304 	ands.w	r3, r3, #4
    9ff4:	d1fb      	bne.n	9fee <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    9ff6:	48a3      	ldr	r0, [pc, #652]	; (a284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    9ff8:	4aa3      	ldr	r2, [pc, #652]	; (a288 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    9ffa:	6981      	ldr	r1, [r0, #24]
    9ffc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    a000:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    a002:	6811      	ldr	r1, [r2, #0]
    a004:	f363 0141 	bfi	r1, r3, #1, #1
    a008:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    a00a:	6893      	ldr	r3, [r2, #8]
    a00c:	f013 0302 	ands.w	r3, r3, #2
    a010:	d1fb      	bne.n	a00a <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    a012:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    a014:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    a016:	499a      	ldr	r1, [pc, #616]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    a018:	f040 0002 	orr.w	r0, r0, #2
    a01c:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    a01e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    a020:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    a024:	f040 0002 	orr.w	r0, r0, #2
    a028:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    a02a:	6453      	str	r3, [r2, #68]	; 0x44
    a02c:	6493      	str	r3, [r2, #72]	; 0x48
    a02e:	64d3      	str	r3, [r2, #76]	; 0x4c
    a030:	6513      	str	r3, [r2, #80]	; 0x50
    a032:	6553      	str	r3, [r2, #84]	; 0x54
    a034:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    a036:	6a90      	ldr	r0, [r2, #40]	; 0x28
    a038:	f040 0001 	orr.w	r0, r0, #1
    a03c:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    a03e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    a042:	f363 1286 	bfi	r2, r3, #6, #1
    a046:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    a04a:	460a      	mov	r2, r1
    a04c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    a050:	065d      	lsls	r5, r3, #25
    a052:	d4fb      	bmi.n	a04c <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    a054:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    a058:	4989      	ldr	r1, [pc, #548]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    a05a:	2001      	movs	r0, #1
    a05c:	f360 0303 	bfi	r3, r0, #0, #4
    a060:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    a064:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    a068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a06c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    a070:	684b      	ldr	r3, [r1, #4]
    a072:	f013 0304 	ands.w	r3, r3, #4
    a076:	d1fb      	bne.n	a070 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    a078:	4882      	ldr	r0, [pc, #520]	; (a284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    a07a:	4a84      	ldr	r2, [pc, #528]	; (a28c <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    a07c:	6981      	ldr	r1, [r0, #24]
    a07e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    a082:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    a084:	6811      	ldr	r1, [r2, #0]
    a086:	f363 0141 	bfi	r1, r3, #1, #1
    a08a:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    a08c:	6893      	ldr	r3, [r2, #8]
    a08e:	f013 0302 	ands.w	r3, r3, #2
    a092:	d1fb      	bne.n	a08c <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    a094:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    a096:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    a098:	4979      	ldr	r1, [pc, #484]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    a09a:	f040 0002 	orr.w	r0, r0, #2
    a09e:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    a0a0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    a0a2:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    a0a6:	f040 0002 	orr.w	r0, r0, #2
    a0aa:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    a0ac:	6453      	str	r3, [r2, #68]	; 0x44
    a0ae:	6493      	str	r3, [r2, #72]	; 0x48
    a0b0:	64d3      	str	r3, [r2, #76]	; 0x4c
    a0b2:	6513      	str	r3, [r2, #80]	; 0x50
    a0b4:	6553      	str	r3, [r2, #84]	; 0x54
    a0b6:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    a0b8:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    a0bc:	f363 1286 	bfi	r2, r3, #6, #1
    a0c0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    a0c4:	460a      	mov	r2, r1
    a0c6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    a0ca:	065c      	lsls	r4, r3, #25
    a0cc:	d4fb      	bmi.n	a0c6 <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    a0ce:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    a0d2:	496b      	ldr	r1, [pc, #428]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    a0d4:	2006      	movs	r0, #6
    a0d6:	f360 0303 	bfi	r3, r0, #0, #4
    a0da:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    a0de:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    a0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a0e6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    a0ea:	684b      	ldr	r3, [r1, #4]
    a0ec:	f013 0318 	ands.w	r3, r3, #24
    a0f0:	d1fb      	bne.n	a0ea <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    a0f2:	4c64      	ldr	r4, [pc, #400]	; (a284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    a0f4:	4a62      	ldr	r2, [pc, #392]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    a0f6:	6960      	ldr	r0, [r4, #20]
    a0f8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    a0fc:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    a0fe:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    a102:	f363 1086 	bfi	r0, r3, #6, #1
    a106:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    a10a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    a10e:	0658      	lsls	r0, r3, #25
    a110:	d4fb      	bmi.n	a10a <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    a112:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    a116:	495a      	ldr	r1, [pc, #360]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    a118:	2006      	movs	r0, #6
    a11a:	f360 0303 	bfi	r3, r0, #0, #4
    a11e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    a122:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    a126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a12a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    a12e:	684b      	ldr	r3, [r1, #4]
    a130:	f013 0318 	ands.w	r3, r3, #24
    a134:	d1fb      	bne.n	a12e <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    a136:	4c53      	ldr	r4, [pc, #332]	; (a284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    a138:	4a51      	ldr	r2, [pc, #324]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    a13a:	69a0      	ldr	r0, [r4, #24]
    a13c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    a140:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    a142:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    a146:	f363 1086 	bfi	r0, r3, #6, #1
    a14a:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    a14e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    a152:	0659      	lsls	r1, r3, #25
    a154:	d4fb      	bmi.n	a14e <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    a156:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    a15a:	4949      	ldr	r1, [pc, #292]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    a15c:	2006      	movs	r0, #6
    a15e:	f360 0303 	bfi	r3, r0, #0, #4
    a162:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    a166:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    a16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a16e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    a172:	684b      	ldr	r3, [r1, #4]
    a174:	f013 0318 	ands.w	r3, r3, #24
    a178:	d1fb      	bne.n	a172 <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    a17a:	4842      	ldr	r0, [pc, #264]	; (a284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    a17c:	4a40      	ldr	r2, [pc, #256]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    a17e:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    a180:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    a182:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    a186:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    a188:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    a18c:	6a04      	ldr	r4, [r0, #32]
    a18e:	f044 0420 	orr.w	r4, r4, #32
    a192:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    a194:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    a198:	f363 1086 	bfi	r0, r3, #6, #1
    a19c:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    a1a0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    a1a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d1f9      	bne.n	a1a0 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    a1ac:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    a1b0:	4834      	ldr	r0, [pc, #208]	; (a284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    a1b2:	4c33      	ldr	r4, [pc, #204]	; (a280 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    a1b4:	f363 0103 	bfi	r1, r3, #0, #4
    a1b8:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    a1bc:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    a1c0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a1c4:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    a1c8:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    a1ca:	69c1      	ldr	r1, [r0, #28]
    a1cc:	f041 0110 	orr.w	r1, r1, #16
    a1d0:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    a1d2:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    a1d6:	f363 1186 	bfi	r1, r3, #6, #1
    a1da:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    a1de:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    a1e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d1f9      	bne.n	a1de <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    a1ea:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    a1ee:	4a28      	ldr	r2, [pc, #160]	; (a290 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    a1f0:	4d24      	ldr	r5, [pc, #144]	; (a284 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    a1f2:	f363 0103 	bfi	r1, r3, #0, #4
    a1f6:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    a1fa:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    a1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a202:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    a206:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    a208:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    a20a:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    a20c:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    a20e:	f044 0410 	orr.w	r4, r4, #16
    a212:	622c      	str	r4, [r5, #32]
    a214:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    a218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    a21c:	f04f 0e01 	mov.w	lr, #1
    a220:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    a222:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    a224:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    a226:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    a228:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    a22a:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    a22e:	6813      	ldr	r3, [r2, #0]
    a230:	f36f 0341 	bfc	r3, #1, #1
    a234:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    a236:	6913      	ldr	r3, [r2, #16]
    a238:	f013 0302 	ands.w	r3, r3, #2
    a23c:	d1fb      	bne.n	a236 <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    a23e:	7910      	ldrb	r0, [r2, #4]
    a240:	f040 0002 	orr.w	r0, r0, #2
    a244:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    a246:	6810      	ldr	r0, [r2, #0]
    a248:	f36e 0083 	bfi	r0, lr, #2, #2
    a24c:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    a24e:	6810      	ldr	r0, [r2, #0]
    a250:	f367 200a 	bfi	r0, r7, #8, #3
    a254:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    a256:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    a258:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    a25a:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    a25e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    a262:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    a266:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    a268:	6813      	ldr	r3, [r2, #0]
    a26a:	f043 0302 	orr.w	r3, r3, #2
    a26e:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    a270:	6913      	ldr	r3, [r2, #16]
    a272:	079b      	lsls	r3, r3, #30
    a274:	d4fc      	bmi.n	a270 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    a276:	4561      	cmp	r1, ip
    a278:	d1d7      	bne.n	a22a <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    a27a:	b005      	add	sp, #20
    a27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a27e:	bf00      	nop
    a280:	40001c00 	.word	0x40001c00
    a284:	40000800 	.word	0x40000800
    a288:	41016000 	.word	0x41016000
    a28c:	41018000 	.word	0x41018000
    a290:	00022df0 	.word	0x00022df0

0000a294 <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a294:	498b      	ldr	r1, [pc, #556]	; (a4c4 <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    a296:	4a8c      	ldr	r2, [pc, #560]	; (a4c8 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a298:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    a29a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a29e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    a2a2:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    a2a6:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a2a8:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    a2aa:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    a2ac:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    a2b0:	4606      	mov	r6, r0
    InitClocks();
    a2b2:	f7ff fe81 	bl	9fb8 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    a2b6:	4b85      	ldr	r3, [pc, #532]	; (a4cc <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    a2b8:	4985      	ldr	r1, [pc, #532]	; (a4d0 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    a2ba:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    a2bc:	680d      	ldr	r5, [r1, #0]
    a2be:	4f85      	ldr	r7, [pc, #532]	; (a4d4 <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    a2c0:	f364 0241 	bfi	r2, r4, #1, #1
    a2c4:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    a2c6:	691a      	ldr	r2, [r3, #16]
    a2c8:	21a7      	movs	r1, #167	; 0xa7
    a2ca:	f361 4217 	bfi	r2, r1, #16, #8
    a2ce:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    a2d0:	691a      	ldr	r2, [r3, #16]
    a2d2:	f368 0283 	bfi	r2, r8, #2, #2
    a2d6:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    a2d8:	691a      	ldr	r2, [r3, #16]
    a2da:	2107      	movs	r1, #7
    a2dc:	f361 220b 	bfi	r2, r1, #8, #4
    a2e0:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    a2e2:	691a      	ldr	r2, [r3, #16]
    a2e4:	f042 0202 	orr.w	r2, r2, #2
    a2e8:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    a2ea:	4628      	mov	r0, r5
    a2ec:	4641      	mov	r1, r8
    a2ee:	f7fc fcb1 	bl	6c54 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    a2f2:	4879      	ldr	r0, [pc, #484]	; (a4d8 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    a2f4:	2100      	movs	r1, #0
    a2f6:	f000 fcf7 	bl	ace8 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    a2fa:	4621      	mov	r1, r4
    a2fc:	4628      	mov	r0, r5
    a2fe:	f7fc fca9 	bl	6c54 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    a302:	4b76      	ldr	r3, [pc, #472]	; (a4dc <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    a304:	4a76      	ldr	r2, [pc, #472]	; (a4e0 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    a306:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    a30a:	2102      	movs	r1, #2
    a30c:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    a310:	6810      	ldr	r0, [r2, #0]
    a312:	f7fb f909 	bl	5528 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    a316:	f857 0f04 	ldr.w	r0, [r7, #4]!
    a31a:	6803      	ldr	r3, [r0, #0]
    a31c:	b221      	sxth	r1, r4
    a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    a320:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    a322:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    a324:	2c15      	cmp	r4, #21
    a326:	d1f6      	bne.n	a316 <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    a328:	f7fb f882 	bl	5430 <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    a32c:	4b6d      	ldr	r3, [pc, #436]	; (a4e4 <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    a32e:	6818      	ldr	r0, [r3, #0]
    a330:	f001 ffd0 	bl	c2d4 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    a334:	486c      	ldr	r0, [pc, #432]	; (a4e8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    a336:	f001 fb25 	bl	b984 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    a33a:	4b6c      	ldr	r3, [pc, #432]	; (a4ec <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    a33c:	6818      	ldr	r0, [r3, #0]
    a33e:	f7fa f9e3 	bl	4708 <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    a342:	4b6b      	ldr	r3, [pc, #428]	; (a4f0 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    a344:	6818      	ldr	r0, [r3, #0]
    a346:	f005 fbcf 	bl	fae8 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    a34a:	4b6a      	ldr	r3, [pc, #424]	; (a4f4 <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    a34c:	6818      	ldr	r0, [r3, #0]
    a34e:	f7fd f9ef 	bl	7730 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    a352:	4869      	ldr	r0, [pc, #420]	; (a4f8 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    a354:	f002 fdd8 	bl	cf08 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    a358:	4a68      	ldr	r2, [pc, #416]	; (a4fc <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    a35a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    a35e:	f36f 1386 	bfc	r3, #6, #1
    a362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    a366:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a36a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    a36e:	2900      	cmp	r1, #0
    a370:	d1f9      	bne.n	a366 <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    a372:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    a376:	4c62      	ldr	r4, [pc, #392]	; (a500 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    a378:	4f5b      	ldr	r7, [pc, #364]	; (a4e8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a37a:	4b62      	ldr	r3, [pc, #392]	; (a504 <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    a37c:	f8df c190 	ldr.w	ip, [pc, #400]	; a510 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    a380:	f361 0003 	bfi	r0, r1, #0, #4
    a384:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    a388:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a38c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a390:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    a394:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    a396:	6961      	ldr	r1, [r4, #20]
    a398:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    a39c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    a3a0:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    a3a4:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3a6:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a3a8:	f8c3 e000 	str.w	lr, [r3]
    a3ac:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    a3b0:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    a3b4:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    a3b8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    a3bc:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    a3c0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    a3c4:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3c8:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    a3cc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a3d0:	f8c3 9000 	str.w	r9, [r3]
    a3d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3d8:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a3dc:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    a3e0:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3e2:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a3e6:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3ea:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a3ee:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3f2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a3f6:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a3fa:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a3fe:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    a402:	6019      	str	r1, [r3, #0]
    a404:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a408:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a40c:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a40e:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a412:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a416:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a418:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a41c:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a420:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a424:	6019      	str	r1, [r3, #0]
    a426:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a42a:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a42e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    a432:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a434:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a438:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    a43a:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a43e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a442:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    a446:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    a44a:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a44e:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a452:	f44f 7880 	mov.w	r8, #256	; 0x100
    a456:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a458:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    a45c:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a45e:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a462:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a466:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a46a:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a46c:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a470:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a474:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a476:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a47a:	f8c3 800c 	str.w	r8, [r3, #12]
    a47e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a482:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a486:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    a48a:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    a48e:	f000 fbdb 	bl	ac48 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    a492:	b100      	cbz	r0, a496 <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    a494:	e7fe      	b.n	a494 <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a496:	4b1c      	ldr	r3, [pc, #112]	; (a508 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    a498:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    a49a:	4621      	mov	r1, r4
    a49c:	4628      	mov	r0, r5
    a49e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    a4a2:	f7fc fbc9 	bl	6c38 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    a4a6:	f642 043b 	movw	r4, #10299	; 0x283b
    a4aa:	f000 fbf9 	bl	aca0 <Microseconds>
    a4ae:	42a0      	cmp	r0, r4
    a4b0:	d9fb      	bls.n	a4aa <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    a4b2:	4b16      	ldr	r3, [pc, #88]	; (a50c <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    a4b4:	6818      	ldr	r0, [r3, #0]
    a4b6:	f000 fd39 	bl	af2c <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    a4ba:	2301      	movs	r3, #1
    a4bc:	7033      	strb	r3, [r6, #0]
    a4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4c2:	bf00      	nop
    a4c4:	e000edf0 	.word	0xe000edf0
    a4c8:	e0001000 	.word	0xe0001000
    a4cc:	40001800 	.word	0x40001800
    a4d0:	20000c08 	.word	0x20000c08
    a4d4:	00022e10 	.word	0x00022e10
    a4d8:	0001d4c0 	.word	0x0001d4c0
    a4dc:	41008000 	.word	0x41008000
    a4e0:	20000bfc 	.word	0x20000bfc
    a4e4:	20001d48 	.word	0x20001d48
    a4e8:	20001b10 	.word	0x20001b10
    a4ec:	20000afc 	.word	0x20000afc
    a4f0:	20001f38 	.word	0x20001f38
    a4f4:	20000c14 	.word	0x20000c14
    a4f8:	20001c28 	.word	0x20001c28
    a4fc:	40001c00 	.word	0x40001c00
    a500:	40000800 	.word	0x40000800
    a504:	e000e100 	.word	0xe000e100
    a508:	e000ed00 	.word	0xe000ed00
    a50c:	20001d3c 	.word	0x20001d3c
    a510:	20001d30 	.word	0x20001d30

0000a514 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    a514:	b672      	cpsid	i
    a516:	4a09      	ldr	r2, [pc, #36]	; (a53c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    a518:	4b09      	ldr	r3, [pc, #36]	; (a540 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    a51a:	2901      	cmp	r1, #1
    a51c:	bf18      	it	ne
    a51e:	2300      	movne	r3, #0
    a520:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    a522:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    a526:	4907      	ldr	r1, [pc, #28]	; (a544 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    a528:	4b07      	ldr	r3, [pc, #28]	; (a548 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    a52a:	68ca      	ldr	r2, [r1, #12]
    a52c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a530:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    a532:	60cb      	str	r3, [r1, #12]
    a534:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    a538:	bf00      	nop
    a53a:	e7fd      	b.n	a538 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    a53c:	2002fffc 	.word	0x2002fffc
    a540:	f01669ef 	.word	0xf01669ef
    a544:	e000ed00 	.word	0xe000ed00
    a548:	05fa0004 	.word	0x05fa0004

0000a54c <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    a54c:	4b01      	ldr	r3, [pc, #4]	; (a554 <GMAC_Handler+0x8>)
    a54e:	6818      	ldr	r0, [r3, #0]
    a550:	f001 b964 	b.w	b81c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    a554:	20001d3c 	.word	0x20001d3c

0000a558 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    a558:	4801      	ldr	r0, [pc, #4]	; (a560 <SERCOM0_0_Handler+0x8>)
    a55a:	f007 b8d5 	b.w	11708 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    a55e:	bf00      	nop
    a560:	20001728 	.word	0x20001728

0000a564 <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    a564:	4801      	ldr	r0, [pc, #4]	; (a56c <SERCOM0_2_Handler+0x8>)
    a566:	f007 b8f7 	b.w	11758 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    a56a:	bf00      	nop
    a56c:	20001728 	.word	0x20001728

0000a570 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    a570:	4801      	ldr	r0, [pc, #4]	; (a578 <SERCOM0_3_Handler+0x8>)
    a572:	f007 b92d 	b.w	117d0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    a576:	bf00      	nop
    a578:	20001728 	.word	0x20001728

0000a57c <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    a57c:	4801      	ldr	r0, [pc, #4]	; (a584 <SERCOM2_0_Handler+0x8>)
    a57e:	f007 b8c3 	b.w	11708 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    a582:	bf00      	nop
    a584:	20001880 	.word	0x20001880

0000a588 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    a588:	4801      	ldr	r0, [pc, #4]	; (a590 <SERCOM2_2_Handler+0x8>)
    a58a:	f007 b8e5 	b.w	11758 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    a58e:	bf00      	nop
    a590:	20001880 	.word	0x20001880

0000a594 <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    a594:	4801      	ldr	r0, [pc, #4]	; (a59c <SERCOM2_3_Handler+0x8>)
    a596:	f007 b91b 	b.w	117d0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    a59a:	bf00      	nop
    a59c:	20001880 	.word	0x20001880

0000a5a0 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    a5a0:	4801      	ldr	r0, [pc, #4]	; (a5a8 <SERCOM7_0_Handler+0x8>)
    a5a2:	f007 b8b1 	b.w	11708 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    a5a6:	bf00      	nop
    a5a8:	200015d0 	.word	0x200015d0

0000a5ac <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    a5ac:	4801      	ldr	r0, [pc, #4]	; (a5b4 <SERCOM7_2_Handler+0x8>)
    a5ae:	f007 b8d3 	b.w	11758 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    a5b2:	bf00      	nop
    a5b4:	200015d0 	.word	0x200015d0

0000a5b8 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    a5b8:	4801      	ldr	r0, [pc, #4]	; (a5c0 <SERCOM7_3_Handler+0x8>)
    a5ba:	f007 b909 	b.w	117d0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    a5be:	bf00      	nop
    a5c0:	200015d0 	.word	0x200015d0

0000a5c4 <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    a5c4:	4b02      	ldr	r3, [pc, #8]	; (a5d0 <EIC_0_Handler+0xc>)
    a5c6:	2100      	movs	r1, #0
    a5c8:	6818      	ldr	r0, [r3, #0]
    a5ca:	f7fb b87b 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a5ce:	bf00      	nop
    a5d0:	20000bfc 	.word	0x20000bfc

0000a5d4 <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    a5d4:	4b02      	ldr	r3, [pc, #8]	; (a5e0 <EIC_1_Handler+0xc>)
    a5d6:	2101      	movs	r1, #1
    a5d8:	6818      	ldr	r0, [r3, #0]
    a5da:	f7fb b873 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a5de:	bf00      	nop
    a5e0:	20000bfc 	.word	0x20000bfc

0000a5e4 <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    a5e4:	4b02      	ldr	r3, [pc, #8]	; (a5f0 <EIC_2_Handler+0xc>)
    a5e6:	2102      	movs	r1, #2
    a5e8:	6818      	ldr	r0, [r3, #0]
    a5ea:	f7fb b86b 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a5ee:	bf00      	nop
    a5f0:	20000bfc 	.word	0x20000bfc

0000a5f4 <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    a5f4:	4b02      	ldr	r3, [pc, #8]	; (a600 <EIC_3_Handler+0xc>)
    a5f6:	2103      	movs	r1, #3
    a5f8:	6818      	ldr	r0, [r3, #0]
    a5fa:	f7fb b863 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a5fe:	bf00      	nop
    a600:	20000bfc 	.word	0x20000bfc

0000a604 <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    a604:	4b02      	ldr	r3, [pc, #8]	; (a610 <EIC_4_Handler+0xc>)
    a606:	2104      	movs	r1, #4
    a608:	6818      	ldr	r0, [r3, #0]
    a60a:	f7fb b85b 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a60e:	bf00      	nop
    a610:	20000bfc 	.word	0x20000bfc

0000a614 <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    a614:	4b02      	ldr	r3, [pc, #8]	; (a620 <EIC_5_Handler+0xc>)
    a616:	2105      	movs	r1, #5
    a618:	6818      	ldr	r0, [r3, #0]
    a61a:	f7fb b853 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a61e:	bf00      	nop
    a620:	20000bfc 	.word	0x20000bfc

0000a624 <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    a624:	4b02      	ldr	r3, [pc, #8]	; (a630 <EIC_6_Handler+0xc>)
    a626:	2106      	movs	r1, #6
    a628:	6818      	ldr	r0, [r3, #0]
    a62a:	f7fb b84b 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a62e:	bf00      	nop
    a630:	20000bfc 	.word	0x20000bfc

0000a634 <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    a634:	4b02      	ldr	r3, [pc, #8]	; (a640 <EIC_7_Handler+0xc>)
    a636:	2107      	movs	r1, #7
    a638:	6818      	ldr	r0, [r3, #0]
    a63a:	f7fb b843 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a63e:	bf00      	nop
    a640:	20000bfc 	.word	0x20000bfc

0000a644 <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    a644:	4b02      	ldr	r3, [pc, #8]	; (a650 <EIC_8_Handler+0xc>)
    a646:	2108      	movs	r1, #8
    a648:	6818      	ldr	r0, [r3, #0]
    a64a:	f7fb b83b 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a64e:	bf00      	nop
    a650:	20000bfc 	.word	0x20000bfc

0000a654 <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    a654:	4b02      	ldr	r3, [pc, #8]	; (a660 <EIC_9_Handler+0xc>)
    a656:	2109      	movs	r1, #9
    a658:	6818      	ldr	r0, [r3, #0]
    a65a:	f7fb b833 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a65e:	bf00      	nop
    a660:	20000bfc 	.word	0x20000bfc

0000a664 <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    a664:	4b02      	ldr	r3, [pc, #8]	; (a670 <EIC_10_Handler+0xc>)
    a666:	210a      	movs	r1, #10
    a668:	6818      	ldr	r0, [r3, #0]
    a66a:	f7fb b82b 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a66e:	bf00      	nop
    a670:	20000bfc 	.word	0x20000bfc

0000a674 <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    a674:	4b02      	ldr	r3, [pc, #8]	; (a680 <EIC_11_Handler+0xc>)
    a676:	210b      	movs	r1, #11
    a678:	6818      	ldr	r0, [r3, #0]
    a67a:	f7fb b823 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a67e:	bf00      	nop
    a680:	20000bfc 	.word	0x20000bfc

0000a684 <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    a684:	4b01      	ldr	r3, [pc, #4]	; (a68c <EIC_12_Handler+0x8>)
    a686:	6818      	ldr	r0, [r3, #0]
    a688:	f000 bf0c 	b.w	b4a4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    a68c:	20001d3c 	.word	0x20001d3c

0000a690 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    a690:	4b02      	ldr	r3, [pc, #8]	; (a69c <EIC_13_Handler+0xc>)
    a692:	210d      	movs	r1, #13
    a694:	6818      	ldr	r0, [r3, #0]
    a696:	f7fb b815 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a69a:	bf00      	nop
    a69c:	20000bfc 	.word	0x20000bfc

0000a6a0 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    a6a0:	4b02      	ldr	r3, [pc, #8]	; (a6ac <EIC_14_Handler+0xc>)
    a6a2:	210e      	movs	r1, #14
    a6a4:	6818      	ldr	r0, [r3, #0]
    a6a6:	f7fb b80d 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a6aa:	bf00      	nop
    a6ac:	20000bfc 	.word	0x20000bfc

0000a6b0 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    a6b0:	4b02      	ldr	r3, [pc, #8]	; (a6bc <EIC_15_Handler+0xc>)
    a6b2:	210f      	movs	r1, #15
    a6b4:	6818      	ldr	r0, [r3, #0]
    a6b6:	f7fb b805 	b.w	56c4 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a6ba:	bf00      	nop
    a6bc:	20000bfc 	.word	0x20000bfc

0000a6c0 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    a6c0:	4b02      	ldr	r3, [pc, #8]	; (a6cc <TCC3_0_Handler+0xc>)
    a6c2:	4a03      	ldr	r2, [pc, #12]	; (a6d0 <TCC3_0_Handler+0x10>)
    a6c4:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    a6c6:	4803      	ldr	r0, [pc, #12]	; (a6d4 <TCC3_0_Handler+0x14>)
    a6c8:	f004 bcdc 	b.w	f084 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    a6cc:	42001000 	.word	0x42001000
    a6d0:	003ffc0f 	.word	0x003ffc0f
    a6d4:	20001530 	.word	0x20001530

0000a6d8 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    a6d8:	4b02      	ldr	r3, [pc, #8]	; (a6e4 <TCC4_0_Handler+0xc>)
    a6da:	4a03      	ldr	r2, [pc, #12]	; (a6e8 <TCC4_0_Handler+0x10>)
    a6dc:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    a6de:	4803      	ldr	r0, [pc, #12]	; (a6ec <TCC4_0_Handler+0x14>)
    a6e0:	f004 bcd0 	b.w	f084 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    a6e4:	43001000 	.word	0x43001000
    a6e8:	003ffc0f 	.word	0x003ffc0f
    a6ec:	200014ac 	.word	0x200014ac

0000a6f0 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    a6f0:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    a6f2:	4b0d      	ldr	r3, [pc, #52]	; (a728 <SysTick_Handler+0x38>)
    a6f4:	781b      	ldrb	r3, [r3, #0]
    a6f6:	b103      	cbz	r3, a6fa <SysTick_Handler+0xa>
    a6f8:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    a6fa:	4b0c      	ldr	r3, [pc, #48]	; (a72c <SysTick_Handler+0x3c>)
    a6fc:	781b      	ldrb	r3, [r3, #0]
    a6fe:	2b00      	cmp	r3, #0
    a700:	d0fa      	beq.n	a6f8 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    a702:	4b0b      	ldr	r3, [pc, #44]	; (a730 <SysTick_Handler+0x40>)
    a704:	6818      	ldr	r0, [r3, #0]
    a706:	f005 fd45 	bl	10194 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    a70a:	480a      	ldr	r0, [pc, #40]	; (a734 <SysTick_Handler+0x44>)
    a70c:	f7fb fade 	bl	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a710:	4809      	ldr	r0, [pc, #36]	; (a738 <SysTick_Handler+0x48>)
    a712:	f7fb fadb 	bl	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a716:	4809      	ldr	r0, [pc, #36]	; (a73c <SysTick_Handler+0x4c>)
    a718:	f7fb fad8 	bl	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a71c:	4808      	ldr	r0, [pc, #32]	; (a740 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    a71e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    a722:	f7fb bad3 	b.w	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a726:	bf00      	nop
    a728:	200011c0 	.word	0x200011c0
    a72c:	20001b0c 	.word	0x20001b0c
    a730:	20001f38 	.word	0x20001f38
    a734:	20000ca0 	.word	0x20000ca0
    a738:	20000de8 	.word	0x20000de8
    a73c:	20000f30 	.word	0x20000f30
    a740:	20001078 	.word	0x20001078

0000a744 <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    a744:	4a30      	ldr	r2, [pc, #192]	; (a808 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    a746:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    a74a:	4b30      	ldr	r3, [pc, #192]	; (a80c <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    a74c:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    a74e:	4a30      	ldr	r2, [pc, #192]	; (a810 <TCC0_0_Handler+0xcc>)
    a750:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    a752:	4630      	mov	r0, r6
    a754:	f000 fa26 	bl	aba4 <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    a758:	4b2e      	ldr	r3, [pc, #184]	; (a814 <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    a75a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; a850 <TCC0_0_Handler+0x10c>
    a75e:	f8d3 9000 	ldr.w	r9, [r3]
    a762:	4648      	mov	r0, r9
    a764:	f005 fa34 	bl	fbd0 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    a768:	4b2b      	ldr	r3, [pc, #172]	; (a818 <TCC0_0_Handler+0xd4>)
    a76a:	6818      	ldr	r0, [r3, #0]
    a76c:	f7fa f986 	bl	4a7c <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    a770:	4b2a      	ldr	r3, [pc, #168]	; (a81c <TCC0_0_Handler+0xd8>)
    a772:	6818      	ldr	r0, [r3, #0]
    a774:	f7fc fb04 	bl	6d80 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    a778:	4b29      	ldr	r3, [pc, #164]	; (a820 <TCC0_0_Handler+0xdc>)
    a77a:	6818      	ldr	r0, [r3, #0]
    a77c:	f7fd fe22 	bl	83c4 <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    a780:	4b28      	ldr	r3, [pc, #160]	; (a824 <TCC0_0_Handler+0xe0>)
    a782:	681f      	ldr	r7, [r3, #0]
    a784:	4638      	mov	r0, r7
    a786:	f7fa ffcb 	bl	5720 <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    a78a:	f898 3000 	ldrb.w	r3, [r8]
    a78e:	b15b      	cbz	r3, a7a8 <TCC0_0_Handler+0x64>
    a790:	4c25      	ldr	r4, [pc, #148]	; (a828 <TCC0_0_Handler+0xe4>)
    a792:	4826      	ldr	r0, [pc, #152]	; (a82c <TCC0_0_Handler+0xe8>)
    a794:	f104 0550 	add.w	r5, r4, #80	; 0x50
    a798:	e001      	b.n	a79e <TCC0_0_Handler+0x5a>
    a79a:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    a79e:	6803      	ldr	r3, [r0, #0]
    a7a0:	6a1b      	ldr	r3, [r3, #32]
    a7a2:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    a7a4:	42ac      	cmp	r4, r5
    a7a6:	d1f8      	bne.n	a79a <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    a7a8:	4638      	mov	r0, r7
    a7aa:	f7fa ffcd 	bl	5748 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    a7ae:	4820      	ldr	r0, [pc, #128]	; (a830 <TCC0_0_Handler+0xec>)
    a7b0:	f002 fbd8 	bl	cf64 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    a7b4:	481f      	ldr	r0, [pc, #124]	; (a834 <TCC0_0_Handler+0xf0>)
    a7b6:	f001 f9b7 	bl	bb28 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    a7ba:	4630      	mov	r0, r6
    a7bc:	f000 fa08 	bl	abd0 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    a7c0:	4a1d      	ldr	r2, [pc, #116]	; (a838 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    a7c2:	491e      	ldr	r1, [pc, #120]	; (a83c <TCC0_0_Handler+0xf8>)
    tickCnt++;
    a7c4:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    a7c6:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    a7c8:	3301      	adds	r3, #1
    a7ca:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    a7cc:	b111      	cbz	r1, a7d4 <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    a7ce:	f898 3000 	ldrb.w	r3, [r8]
    a7d2:	b923      	cbnz	r3, a7de <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    a7d4:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    a7d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    a7da:	f000 b9e9 	b.w	abb0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    a7de:	4648      	mov	r0, r9
    a7e0:	f005 fcd8 	bl	10194 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    a7e4:	4816      	ldr	r0, [pc, #88]	; (a840 <TCC0_0_Handler+0xfc>)
    a7e6:	f7fb fa71 	bl	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a7ea:	4816      	ldr	r0, [pc, #88]	; (a844 <TCC0_0_Handler+0x100>)
    a7ec:	f7fb fa6e 	bl	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a7f0:	4815      	ldr	r0, [pc, #84]	; (a848 <TCC0_0_Handler+0x104>)
    a7f2:	f7fb fa6b 	bl	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a7f6:	4815      	ldr	r0, [pc, #84]	; (a84c <TCC0_0_Handler+0x108>)
    a7f8:	f7fb fa68 	bl	5ccc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    a7fc:	4630      	mov	r0, r6
}
    a7fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    a802:	f000 b9d5 	b.w	abb0 <_ZN9ClearCore9SysTiming6IsrEndEv>
    a806:	bf00      	nop
    a808:	20001d30 	.word	0x20001d30
    a80c:	41016000 	.word	0x41016000
    a810:	003ffc0f 	.word	0x003ffc0f
    a814:	20001f38 	.word	0x20001f38
    a818:	20000afc 	.word	0x20000afc
    a81c:	20000c08 	.word	0x20000c08
    a820:	20000c14 	.word	0x20000c14
    a824:	20000bfc 	.word	0x20000bfc
    a828:	00022e14 	.word	0x00022e14
    a82c:	20001320 	.word	0x20001320
    a830:	20001c28 	.word	0x20001c28
    a834:	20001b10 	.word	0x20001b10
    a838:	20001d2c 	.word	0x20001d2c
    a83c:	200011c0 	.word	0x200011c0
    a840:	20000ca0 	.word	0x20000ca0
    a844:	20000de8 	.word	0x20000de8
    a848:	20000f30 	.word	0x20000f30
    a84c:	20001078 	.word	0x20001078
    a850:	20001b0c 	.word	0x20001b0c

0000a854 <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    a854:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    a856:	4813      	ldr	r0, [pc, #76]	; (a8a4 <Reset_Handler+0x50>)
    a858:	4b13      	ldr	r3, [pc, #76]	; (a8a8 <Reset_Handler+0x54>)
    a85a:	4298      	cmp	r0, r3
    a85c:	d00b      	beq.n	a876 <Reset_Handler+0x22>
    a85e:	4913      	ldr	r1, [pc, #76]	; (a8ac <Reset_Handler+0x58>)
    a860:	4281      	cmp	r1, r0
    a862:	d008      	beq.n	a876 <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    a864:	4298      	cmp	r0, r3
    a866:	d206      	bcs.n	a876 <Reset_Handler+0x22>
            *pDest = *pSrc;
    a868:	43c2      	mvns	r2, r0
    a86a:	441a      	add	r2, r3
    a86c:	f022 0203 	bic.w	r2, r2, #3
    a870:	3204      	adds	r2, #4
    a872:	f013 fcbd 	bl	1e1f0 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    a876:	480e      	ldr	r0, [pc, #56]	; (a8b0 <Reset_Handler+0x5c>)
    a878:	4b0e      	ldr	r3, [pc, #56]	; (a8b4 <Reset_Handler+0x60>)
    a87a:	4298      	cmp	r0, r3
    a87c:	d008      	beq.n	a890 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    a87e:	d207      	bcs.n	a890 <Reset_Handler+0x3c>
            *pDest = 0ul;
    a880:	43c2      	mvns	r2, r0
    a882:	441a      	add	r2, r3
    a884:	f022 0203 	bic.w	r2, r2, #3
    a888:	3204      	adds	r2, #4
    a88a:	2100      	movs	r1, #0
    a88c:	f013 fdae 	bl	1e3ec <memset>
        }
    }

    SystemInit();
    a890:	f002 f996 	bl	cbc0 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    a894:	f013 f91e 	bl	1dad4 <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    a898:	4807      	ldr	r0, [pc, #28]	; (a8b8 <Reset_Handler+0x64>)
    a89a:	f7ff fcfb 	bl	a294 <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    a89e:	f7f9 fe11 	bl	44c4 <main>
    a8a2:	e7fe      	b.n	a8a2 <Reset_Handler+0x4e>
    a8a4:	20000000 	.word	0x20000000
    a8a8:	20000ac0 	.word	0x20000ac0
    a8ac:	0002507c 	.word	0x0002507c
    a8b0:	20000ac0 	.word	0x20000ac0
    a8b4:	200023b8 	.word	0x200023b8
    a8b8:	20001b0c 	.word	0x20001b0c

0000a8bc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    a8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    a8c0:	4852      	ldr	r0, [pc, #328]	; (aa0c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    a8c2:	4d53      	ldr	r5, [pc, #332]	; (aa10 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    a8c4:	4c53      	ldr	r4, [pc, #332]	; (aa14 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    a8c6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; aa84 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    a8ca:	f8df 81bc 	ldr.w	r8, [pc, #444]	; aa88 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    a8ce:	4f52      	ldr	r7, [pc, #328]	; (aa18 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    a8d0:	f002 faf0 	bl	ceb4 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    a8d4:	4b51      	ldr	r3, [pc, #324]	; (aa1c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
    SdCardDriver() {};
    a8d6:	4a52      	ldr	r2, [pc, #328]	; (aa20 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    a8d8:	4852      	ldr	r0, [pc, #328]	; (aa24 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    a8da:	601a      	str	r2, [r3, #0]
    a8dc:	2600      	movs	r6, #0
    a8de:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    a8e2:	f000 ffbd 	bl	b860 <_ZN9ClearCore13ShiftRegisterC1Ev>
    a8e6:	4b50      	ldr	r3, [pc, #320]	; (aa28 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    a8e8:	4a50      	ldr	r2, [pc, #320]	; (aa2c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    a8ea:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    a8ee:	4628      	mov	r0, r5
    a8f0:	601a      	str	r2, [r3, #0]
    a8f2:	f7fa fce9 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a8f6:	4b4e      	ldr	r3, [pc, #312]	; (aa30 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    a8f8:	602b      	str	r3, [r5, #0]
    a8fa:	4620      	mov	r0, r4
    a8fc:	f7fa fce4 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    a900:	4b4c      	ldr	r3, [pc, #304]	; (aa34 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    a902:	6023      	str	r3, [r4, #0]
    a904:	4648      	mov	r0, r9
    a906:	f7fa fcdf 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    a90a:	4c4b      	ldr	r4, [pc, #300]	; (aa38 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    a90c:	4d4b      	ldr	r5, [pc, #300]	; (aa3c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    a90e:	f8c9 4000 	str.w	r4, [r9]
    a912:	4640      	mov	r0, r8
    a914:	f7fa fcd8 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a918:	f8df 9170 	ldr.w	r9, [pc, #368]	; aa8c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    a91c:	f8c8 4000 	str.w	r4, [r8]
    a920:	4638      	mov	r0, r7
    a922:	f7fa fcd1 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a926:	f8df 8168 	ldr.w	r8, [pc, #360]	; aa90 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    a92a:	603c      	str	r4, [r7, #0]
    a92c:	4628      	mov	r0, r5
    a92e:	f7fa fccb 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    DigitalInOutHBridge() {};
    a932:	4c43      	ldr	r4, [pc, #268]	; (aa40 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    a934:	4f43      	ldr	r7, [pc, #268]	; (aa44 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    a936:	602c      	str	r4, [r5, #0]
    a938:	4648      	mov	r0, r9
    a93a:	f7fa fcc5 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a93e:	4d42      	ldr	r5, [pc, #264]	; (aa48 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    a940:	f8c9 4000 	str.w	r4, [r9]
    a944:	4640      	mov	r0, r8
    a946:	f7fa fcbf 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a94a:	4c40      	ldr	r4, [pc, #256]	; (aa4c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    a94c:	f8df 9144 	ldr.w	r9, [pc, #324]	; aa94 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    a950:	f8c8 4000 	str.w	r4, [r8]
    a954:	4638      	mov	r0, r7
    a956:	f7fa fcb7 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a95a:	f8df 813c 	ldr.w	r8, [pc, #316]	; aa98 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    a95e:	603c      	str	r4, [r7, #0]
    a960:	4628      	mov	r0, r5
    a962:	f7fa fcb1 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a966:	4f3a      	ldr	r7, [pc, #232]	; (aa50 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    a968:	602c      	str	r4, [r5, #0]
    a96a:	4648      	mov	r0, r9
    a96c:	f7fa fcac 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    DigitalInAnalogIn() {};
    a970:	4c38      	ldr	r4, [pc, #224]	; (aa54 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    a972:	4d39      	ldr	r5, [pc, #228]	; (aa58 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    a974:	f8c9 4000 	str.w	r4, [r9]
    a978:	4640      	mov	r0, r8
    a97a:	f7fa fca5 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a97e:	4638      	mov	r0, r7
    a980:	f8c8 4000 	str.w	r4, [r8]
    a984:	f7fa fca0 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a988:	4628      	mov	r0, r5
    a98a:	603c      	str	r4, [r7, #0]
    a98c:	f7fa fc9c 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    a990:	4832      	ldr	r0, [pc, #200]	; (aa5c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    a992:	602c      	str	r4, [r5, #0]
    a994:	f7fd ff1e 	bl	87d4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    a998:	4831      	ldr	r0, [pc, #196]	; (aa60 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    a99a:	f8df 8100 	ldr.w	r8, [pc, #256]	; aa9c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    a99e:	4d31      	ldr	r5, [pc, #196]	; (aa64 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    a9a0:	4c31      	ldr	r4, [pc, #196]	; (aa68 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    a9a2:	4f32      	ldr	r7, [pc, #200]	; (aa6c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    a9a4:	f8df 90f8 	ldr.w	r9, [pc, #248]	; aaa0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    a9a8:	f7fd ff14 	bl	87d4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    a9ac:	4830      	ldr	r0, [pc, #192]	; (aa70 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    a9ae:	f7fd ff11 	bl	87d4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    a9b2:	4830      	ldr	r0, [pc, #192]	; (aa74 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    a9b4:	f7fd ff0e 	bl	87d4 <_ZN9ClearCore11MotorDriverC1Ev>
    a9b8:	4640      	mov	r0, r8
    a9ba:	4b2f      	ldr	r3, [pc, #188]	; (aa78 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    a9bc:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    a9c0:	f7fa fc82 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a9c4:	4b2d      	ldr	r3, [pc, #180]	; (aa7c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    a9c6:	f8c8 3000 	str.w	r3, [r8]
    a9ca:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    a9ce:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    a9d0:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    a9d4:	f8c5 9000 	str.w	r9, [r5]
    a9d8:	f8c8 3004 	str.w	r3, [r8, #4]
    a9dc:	f7fa fc74 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a9e0:	f107 0874 	add.w	r8, r7, #116	; 0x74
    a9e4:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    a9e8:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    a9ec:	f8c4 9000 	str.w	r9, [r4]
    a9f0:	602f      	str	r7, [r5, #0]
    a9f2:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    a9f6:	f7fa fc67 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
    a9fa:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    a9fe:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    aa00:	481f      	ldr	r0, [pc, #124]	; (aa80 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    aa02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    aa06:	f7fd bf07 	b.w	8818 <_ZN9ClearCore10SysManagerC1Ev>
    aa0a:	bf00      	nop
    aa0c:	20001c28 	.word	0x20001c28
    aa10:	200015b4 	.word	0x200015b4
    aa14:	20001320 	.word	0x20001320
    aa18:	2000144c 	.word	0x2000144c
    aa1c:	200019c4 	.word	0x200019c4
    aa20:	00022d58 	.word	0x00022d58
    aa24:	20001b10 	.word	0x20001b10
    aa28:	20001880 	.word	0x20001880
    aa2c:	00022da8 	.word	0x00022da8
    aa30:	00023478 	.word	0x00023478
    aa34:	00023270 	.word	0x00023270
    aa38:	000232a0 	.word	0x000232a0
    aa3c:	200014ac 	.word	0x200014ac
    aa40:	000232f0 	.word	0x000232f0
    aa44:	200012c0 	.word	0x200012c0
    aa48:	200012f0 	.word	0x200012f0
    aa4c:	00022b84 	.word	0x00022b84
    aa50:	20001208 	.word	0x20001208
    aa54:	00022b24 	.word	0x00022b24
    aa58:	2000124c 	.word	0x2000124c
    aa5c:	20000ca0 	.word	0x20000ca0
    aa60:	20000de8 	.word	0x20000de8
    aa64:	200015d0 	.word	0x200015d0
    aa68:	20001728 	.word	0x20001728
    aa6c:	000233d4 	.word	0x000233d4
    aa70:	20000f30 	.word	0x20000f30
    aa74:	20001078 	.word	0x20001078
    aa78:	00022c54 	.word	0x00022c54
    aa7c:	00022ca4 	.word	0x00022ca4
    aa80:	20001b0c 	.word	0x20001b0c
    aa84:	2000138c 	.word	0x2000138c
    aa88:	200013ec 	.word	0x200013ec
    aa8c:	20001530 	.word	0x20001530
    aa90:	20001290 	.word	0x20001290
    aa94:	20000c5c 	.word	0x20000c5c
    aa98:	200011c4 	.word	0x200011c4
    aa9c:	200015c0 	.word	0x200015c0
    aaa0:	00023364 	.word	0x00023364

0000aaa4 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
    aaa4:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
    aaa6:	4d0f      	ldr	r5, [pc, #60]	; (aae4 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
    aaa8:	682b      	ldr	r3, [r5, #0]
    aaaa:	f013 0401 	ands.w	r4, r3, #1
    aaae:	d002      	beq.n	aab6 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
    aab0:	4b0d      	ldr	r3, [pc, #52]	; (aae8 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
    aab2:	6818      	ldr	r0, [r3, #0]
    aab4:	bd38      	pop	{r3, r4, r5, pc}
    aab6:	f44f 7002 	mov.w	r0, #520	; 0x208
    aaba:	f008 fbb5 	bl	13228 <_Znwj>
    aabe:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
    aac0:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
    aac4:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
    aac8:	4908      	ldr	r1, [pc, #32]	; (aaec <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
    aaca:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
    aace:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
    aad2:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
    aad6:	f013 fb8b 	bl	1e1f0 <memcpy>
    static NvmManager *instance = new NvmManager();
    aada:	4903      	ldr	r1, [pc, #12]	; (aae8 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
    aadc:	2201      	movs	r2, #1
    aade:	6008      	str	r0, [r1, #0]
    aae0:	602a      	str	r2, [r5, #0]
}
    aae2:	bd38      	pop	{r3, r4, r5, pc}
    aae4:	20001d1c 	.word	0x20001d1c
    aae8:	20001d24 	.word	0x20001d24
    aaec:	00804000 	.word	0x00804000

0000aaf0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
    aaf0:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
    aaf4:	bf9a      	itte	ls
    aaf6:	1840      	addls	r0, r0, r1
    aaf8:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
    aafc:	f04f 30ff 	movhi.w	r0, #4294967295
}
    ab00:	4770      	bx	lr
    ab02:	bf00      	nop

0000ab04 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
    ab04:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
    ab06:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
    ab0a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    ab0e:	2400      	movs	r4, #0
    ab10:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
    ab14:	1c6b      	adds	r3, r5, #1
    ab16:	bf08      	it	eq
    ab18:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    ab1c:	d005      	beq.n	ab2a <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
    ab1e:	0c2e      	lsrs	r6, r5, #16
    ab20:	4627      	mov	r7, r4
    ab22:	ea56 0007 	orrs.w	r0, r6, r7
    ab26:	462b      	mov	r3, r5
    ab28:	d002      	beq.n	ab30 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
    ab2a:	4a07      	ldr	r2, [pc, #28]	; (ab48 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
    ab2c:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
    ab30:	0a1e      	lsrs	r6, r3, #8
    ab32:	0e15      	lsrs	r5, r2, #24
    ab34:	0c14      	lsrs	r4, r2, #16
    ab36:	0a10      	lsrs	r0, r2, #8
    ab38:	700e      	strb	r6, [r1, #0]
    ab3a:	708d      	strb	r5, [r1, #2]
    ab3c:	70cc      	strb	r4, [r1, #3]
    ab3e:	704b      	strb	r3, [r1, #1]
    ab40:	714a      	strb	r2, [r1, #5]
    ab42:	7108      	strb	r0, [r1, #4]
    }
}
    ab44:	bcf0      	pop	{r4, r5, r6, r7}
    ab46:	4770      	bx	lr
    ab48:	10b00000 	.word	0x10b00000

0000ab4c <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
    ab4c:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
    ab4e:	f7ff ffa9 	bl	aaa4 <_ZN9ClearCore10NvmManager8InstanceEv>
    ab52:	4b01      	ldr	r3, [pc, #4]	; (ab58 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
    ab54:	6018      	str	r0, [r3, #0]
    ab56:	bd08      	pop	{r3, pc}
    ab58:	20001d20 	.word	0x20001d20

0000ab5c <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    ab5c:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    ab5e:	4d0f      	ldr	r5, [pc, #60]	; (ab9c <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    ab60:	682c      	ldr	r4, [r5, #0]
    ab62:	f014 0401 	ands.w	r4, r4, #1
    ab66:	d002      	beq.n	ab6e <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    ab68:	4b0d      	ldr	r3, [pc, #52]	; (aba0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    ab6a:	6818      	ldr	r0, [r3, #0]
    ab6c:	bd70      	pop	{r4, r5, r6, pc}
    ab6e:	2030      	movs	r0, #48	; 0x30
    ab70:	f008 fb5a 	bl	13228 <_Znwj>
    ab74:	4a0a      	ldr	r2, [pc, #40]	; (aba0 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    ab76:	6004      	str	r4, [r0, #0]
    ab78:	2105      	movs	r1, #5
    ab7a:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    ab7e:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    ab80:	7501      	strb	r1, [r0, #20]
    ab82:	6084      	str	r4, [r0, #8]
    ab84:	60c4      	str	r4, [r0, #12]
    ab86:	6104      	str	r4, [r0, #16]
    ab88:	6184      	str	r4, [r0, #24]
    ab8a:	61c4      	str	r4, [r0, #28]
    ab8c:	6204      	str	r4, [r0, #32]
    ab8e:	6244      	str	r4, [r0, #36]	; 0x24
    ab90:	6284      	str	r4, [r0, #40]	; 0x28
    ab92:	62c4      	str	r4, [r0, #44]	; 0x2c
    ab94:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    ab96:	6010      	str	r0, [r2, #0]
    ab98:	602b      	str	r3, [r5, #0]
    return *instance;
}
    ab9a:	bd70      	pop	{r4, r5, r6, pc}
    ab9c:	20001d28 	.word	0x20001d28
    aba0:	20001d34 	.word	0x20001d34

0000aba4 <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    aba4:	4b01      	ldr	r3, [pc, #4]	; (abac <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    aba6:	685b      	ldr	r3, [r3, #4]
    aba8:	6003      	str	r3, [r0, #0]
    abaa:	4770      	bx	lr
    abac:	e0001000 	.word	0xe0001000

0000abb0 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    abb0:	4b06      	ldr	r3, [pc, #24]	; (abcc <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    abb2:	6801      	ldr	r1, [r0, #0]
    abb4:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    abb6:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    abb8:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    abba:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    abbc:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    abbe:	bf38      	it	cc
    abc0:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    abc2:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    abc4:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    abc6:	bf88      	it	hi
    abc8:	6083      	strhi	r3, [r0, #8]
    abca:	4770      	bx	lr
    abcc:	e0001000 	.word	0xe0001000

0000abd0 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    abd0:	4a1c      	ldr	r2, [pc, #112]	; (ac44 <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    abd2:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    abd4:	68d3      	ldr	r3, [r2, #12]
    abd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    abda:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    abdc:	7d03      	ldrb	r3, [r0, #20]
    abde:	3b01      	subs	r3, #1
    abe0:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    abe2:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    abe4:	7503      	strb	r3, [r0, #20]
    abe6:	b923      	cbnz	r3, abf2 <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    abe8:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    abea:	2205      	movs	r2, #5
        m_msTickCnt++;
    abec:	3301      	adds	r3, #1
    abee:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    abf0:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    abf2:	6825      	ldr	r5, [r4, #0]
    abf4:	69a3      	ldr	r3, [r4, #24]
    abf6:	406b      	eors	r3, r5
    abf8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    abfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    ac00:	d001      	beq.n	ac06 <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    ac02:	61a5      	str	r5, [r4, #24]
    ac04:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    ac06:	2d00      	cmp	r5, #0
    ac08:	db08      	blt.n	ac1c <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    ac0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    ac0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    ac0e:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    ac10:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    ac12:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    ac16:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    ac18:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    ac1a:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    ac1c:	69e1      	ldr	r1, [r4, #28]
    ac1e:	3101      	adds	r1, #1
    ac20:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    ac22:	2278      	movs	r2, #120	; 0x78
    ac24:	2300      	movs	r3, #0
    ac26:	2000      	movs	r0, #0
    ac28:	f011 fbb4 	bl	1c394 <__aeabi_uldivmod>
    ac2c:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    ac2e:	b128      	cbz	r0, ac3c <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    ac30:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    ac34:	00c3      	lsls	r3, r0, #3
    ac36:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    ac38:	62e3      	str	r3, [r4, #44]	; 0x2c
    ac3a:	e7e2      	b.n	ac02 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    ac3c:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    ac3e:	62e0      	str	r0, [r4, #44]	; 0x2c
    ac40:	e7df      	b.n	ac02 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    ac42:	bf00      	nop
    ac44:	e000edf0 	.word	0xe000edf0

0000ac48 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    ac48:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    ac4c:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    ac4e:	29c7      	cmp	r1, #199	; 0xc7
    ac50:	4a0d      	ldr	r2, [pc, #52]	; (ac88 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    ac52:	f103 33ff 	add.w	r3, r3, #4294967295
    ac56:	bf8c      	ite	hi
    ac58:	2100      	movhi	r1, #0
    ac5a:	2101      	movls	r1, #1
    ac5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    ac60:	7011      	strb	r1, [r2, #0]
    ac62:	d20e      	bcs.n	ac82 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    ac64:	4a09      	ldr	r2, [pc, #36]	; (ac8c <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ac66:	480a      	ldr	r0, [pc, #40]	; (ac90 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    ac68:	b410      	push	{r4}
    ac6a:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    ac6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    ac6e:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ac70:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    ac74:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    ac76:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    ac78:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    ac7a:	6011      	str	r1, [r2, #0]
}
    ac7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ac80:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    ac82:	2001      	movs	r0, #1
    ac84:	4770      	bx	lr
    ac86:	bf00      	nop
    ac88:	200011c0 	.word	0x200011c0
    ac8c:	e000e010 	.word	0xe000e010
    ac90:	e000ed00 	.word	0xe000ed00

0000ac94 <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    ac94:	4b01      	ldr	r3, [pc, #4]	; (ac9c <Milliseconds+0x8>)
    ac96:	681b      	ldr	r3, [r3, #0]
    ac98:	6918      	ldr	r0, [r3, #16]
}
    ac9a:	4770      	bx	lr
    ac9c:	20001d30 	.word	0x20001d30

0000aca0 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    aca0:	4b0e      	ldr	r3, [pc, #56]	; (acdc <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    aca2:	4a0f      	ldr	r2, [pc, #60]	; (ace0 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    aca4:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    aca6:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    aca8:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    acaa:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    acac:	db0a      	blt.n	acc4 <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    acae:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    acb0:	490c      	ldr	r1, [pc, #48]	; (ace4 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    acb2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    acb4:	4423      	add	r3, r4
    acb6:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    acba:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    acbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    acc2:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    acc4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    acc6:	4907      	ldr	r1, [pc, #28]	; (ace4 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    acc8:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    acca:	1b1b      	subs	r3, r3, r4
    accc:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    acd0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    acd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    acd8:	4770      	bx	lr
    acda:	bf00      	nop
    acdc:	e0001000 	.word	0xe0001000
    ace0:	20001d30 	.word	0x20001d30
    ace4:	88888889 	.word	0x88888889

0000ace8 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    ace8:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    acea:	4e0d      	ldr	r6, [pc, #52]	; (ad20 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    acec:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    acf0:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    acf2:	d013      	beq.n	ad1c <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    acf4:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    acf6:	2500      	movs	r5, #0
    acf8:	1b1c      	subs	r4, r3, r4
    acfa:	428d      	cmp	r5, r1
    acfc:	bf08      	it	eq
    acfe:	4284      	cmpeq	r4, r0
    ad00:	d20c      	bcs.n	ad1c <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    ad02:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    ad04:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    ad06:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    ad0a:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    ad0e:	2500      	movs	r5, #0
    ad10:	461c      	mov	r4, r3
    ad12:	428d      	cmp	r5, r1
    ad14:	bf08      	it	eq
    ad16:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    ad18:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    ad1a:	d3f2      	bcc.n	ad02 <Delay_cycles+0x1a>
    }
}
    ad1c:	bc70      	pop	{r4, r5, r6}
    ad1e:	4770      	bx	lr
    ad20:	e0001000 	.word	0xe0001000

0000ad24 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    ad24:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    ad26:	f7ff ff19 	bl	ab5c <_ZN9ClearCore9SysTiming8InstanceEv>
    ad2a:	4b01      	ldr	r3, [pc, #4]	; (ad30 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    ad2c:	6018      	str	r0, [r3, #0]
    ad2e:	bd08      	pop	{r3, pc}
    ad30:	20001d30 	.word	0x20001d30

0000ad34 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    ad36:	4e37      	ldr	r6, [pc, #220]	; (ae14 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    ad38:	6835      	ldr	r5, [r6, #0]
    ad3a:	f015 0501 	ands.w	r5, r5, #1
    ad3e:	d002      	beq.n	ad46 <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    ad40:	4b35      	ldr	r3, [pc, #212]	; (ae18 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    ad42:	6818      	ldr	r0, [r3, #0]
    ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad46:	f641 10c4 	movw	r0, #6596	; 0x19c4
    ad4a:	f008 fa6d 	bl	13228 <_Znwj>
    ad4e:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    ad50:	2711      	movs	r7, #17
    ad52:	2312      	movs	r3, #18
    ad54:	6067      	str	r7, [r4, #4]
    ad56:	60e3      	str	r3, [r4, #12]
    ad58:	2213      	movs	r2, #19
    ad5a:	210d      	movs	r1, #13
    ad5c:	2714      	movs	r7, #20
    ad5e:	230b      	movs	r3, #11
    ad60:	6162      	str	r2, [r4, #20]
    ad62:	61e1      	str	r1, [r4, #28]
    ad64:	6367      	str	r7, [r4, #52]	; 0x34
    ad66:	6463      	str	r3, [r4, #68]	; 0x44
    ad68:	270c      	movs	r7, #12
    ad6a:	2302      	movs	r3, #2
    ad6c:	200f      	movs	r0, #15
    ad6e:	220e      	movs	r2, #14
    ad70:	211c      	movs	r1, #28
    ad72:	6323      	str	r3, [r4, #48]	; 0x30
    ad74:	63a3      	str	r3, [r4, #56]	; 0x38
    ad76:	6423      	str	r3, [r4, #64]	; 0x40
    ad78:	6523      	str	r3, [r4, #80]	; 0x50
    ad7a:	62e0      	str	r0, [r4, #44]	; 0x2c
    ad7c:	64e2      	str	r2, [r4, #76]	; 0x4c
    ad7e:	6561      	str	r1, [r4, #84]	; 0x54
    ad80:	6267      	str	r7, [r4, #36]	; 0x24
    ad82:	4629      	mov	r1, r5
    ad84:	63e7      	str	r7, [r4, #60]	; 0x3c
    ad86:	65a7      	str	r7, [r4, #88]	; 0x58
    ad88:	6025      	str	r5, [r4, #0]
    ad8a:	60a5      	str	r5, [r4, #8]
    ad8c:	6125      	str	r5, [r4, #16]
    ad8e:	61a5      	str	r5, [r4, #24]
    ad90:	6225      	str	r5, [r4, #32]
    ad92:	62a5      	str	r5, [r4, #40]	; 0x28
    ad94:	64a5      	str	r5, [r4, #72]	; 0x48
    ad96:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    ad9a:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    ad9e:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    ada2:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    ada6:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    adaa:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    adae:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    adb2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    adb6:	f504 7094 	add.w	r0, r4, #296	; 0x128
    adba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    adbe:	f013 fb15 	bl	1e3ec <memset>
    adc2:	4629      	mov	r1, r5
    adc4:	f604 1028 	addw	r0, r4, #2344	; 0x928
    adc8:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    adcc:	f013 fb0e 	bl	1e3ec <memset>
    add0:	f641 176c 	movw	r7, #6508	; 0x196c
    add4:	f641 1168 	movw	r1, #6504	; 0x1968
    add8:	19e3      	adds	r3, r4, r7
    adda:	f641 126a 	movw	r2, #6506	; 0x196a
    adde:	20c8      	movs	r0, #200	; 0xc8
    ade0:	5260      	strh	r0, [r4, r1]
    ade2:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    ade6:	2108      	movs	r1, #8
    ade8:	54a1      	strb	r1, [r4, r2]
    adea:	3004      	adds	r0, #4
    adec:	51e5      	str	r5, [r4, r7]
    adee:	4629      	mov	r1, r5
    adf0:	605d      	str	r5, [r3, #4]
    adf2:	609d      	str	r5, [r3, #8]
    adf4:	60dd      	str	r5, [r3, #12]
    adf6:	611d      	str	r5, [r3, #16]
    adf8:	615d      	str	r5, [r3, #20]
    adfa:	223c      	movs	r2, #60	; 0x3c
    adfc:	f013 faf6 	bl	1e3ec <memset>
    static EthernetManager *instance = new EthernetManager();
    ae00:	4905      	ldr	r1, [pc, #20]	; (ae18 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    ae02:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    ae06:	2301      	movs	r3, #1
    ae08:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    ae0a:	6015      	str	r5, [r2, #0]
    ae0c:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    ae0e:	6033      	str	r3, [r6, #0]
}
    ae10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae12:	bf00      	nop
    ae14:	20001d38 	.word	0x20001d38
    ae18:	20001d40 	.word	0x20001d40

0000ae1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    ae1c:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    ae1e:	4b3e      	ldr	r3, [pc, #248]	; (af18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    ae20:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    ae24:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    ae28:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    ae2c:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae2e:	493b      	ldr	r1, [pc, #236]	; (af1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    ae30:	f042 0210 	orr.w	r2, r2, #16
    ae34:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ae36:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae38:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ae3a:	6893      	ldr	r3, [r2, #8]
    ae3c:	0759      	lsls	r1, r3, #29
    ae3e:	d5fc      	bpl.n	ae3a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    ae40:	6813      	ldr	r3, [r2, #0]
    ae42:	f36f 1304 	bfc	r3, #4, #1
    ae46:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ae48:	6b53      	ldr	r3, [r2, #52]	; 0x34
    ae4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae4e:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    ae50:	428b      	cmp	r3, r1
    ae52:	d05d      	beq.n	af10 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    ae54:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    ae56:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae58:	4c31      	ldr	r4, [pc, #196]	; (af20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ae5a:	492f      	ldr	r1, [pc, #188]	; (af18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    ae5c:	f043 0310 	orr.w	r3, r3, #16
    ae60:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae62:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ae64:	688b      	ldr	r3, [r1, #8]
    ae66:	075a      	lsls	r2, r3, #29
    ae68:	d5fc      	bpl.n	ae64 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    ae6a:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae6c:	4c2b      	ldr	r4, [pc, #172]	; (af1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ae6e:	4a2a      	ldr	r2, [pc, #168]	; (af18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    ae70:	f36f 1304 	bfc	r3, #4, #1
    ae74:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ae76:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    ae78:	680b      	ldr	r3, [r1, #0]
    ae7a:	f043 0310 	orr.w	r3, r3, #16
    ae7e:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae80:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ae82:	6893      	ldr	r3, [r2, #8]
    ae84:	075b      	lsls	r3, r3, #29
    ae86:	d5fc      	bpl.n	ae82 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    ae88:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae8a:	4c26      	ldr	r4, [pc, #152]	; (af24 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ae8c:	4922      	ldr	r1, [pc, #136]	; (af18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    ae8e:	f36f 1304 	bfc	r3, #4, #1
    ae92:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ae94:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    ae96:	6813      	ldr	r3, [r2, #0]
    ae98:	f043 0310 	orr.w	r3, r3, #16
    ae9c:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ae9e:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    aea0:	688b      	ldr	r3, [r1, #8]
    aea2:	075c      	lsls	r4, r3, #29
    aea4:	d5fc      	bpl.n	aea0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    aea6:	680b      	ldr	r3, [r1, #0]
    aea8:	f36f 1304 	bfc	r3, #4, #1
    aeac:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    aeae:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    aeb0:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    aeb2:	b12b      	cbz	r3, aec0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    aeb4:	2301      	movs	r3, #1
    aeb6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    aeba:	f85d 4b04 	ldr.w	r4, [sp], #4
    aebe:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    aec0:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    aec2:	4c19      	ldr	r4, [pc, #100]	; (af28 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    aec4:	4a14      	ldr	r2, [pc, #80]	; (af18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    aec6:	f043 0310 	orr.w	r3, r3, #16
    aeca:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    aecc:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    aece:	6893      	ldr	r3, [r2, #8]
    aed0:	0759      	lsls	r1, r3, #29
    aed2:	d5fc      	bpl.n	aece <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    aed4:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    aed6:	4c13      	ldr	r4, [pc, #76]	; (af24 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    aed8:	490f      	ldr	r1, [pc, #60]	; (af18 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    aeda:	f36f 1304 	bfc	r3, #4, #1
    aede:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    aee0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    aee2:	6813      	ldr	r3, [r2, #0]
    aee4:	f043 0310 	orr.w	r3, r3, #16
    aee8:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    aeea:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    aeec:	688b      	ldr	r3, [r1, #8]
    aeee:	075b      	lsls	r3, r3, #29
    aef0:	d5fc      	bpl.n	aeec <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    aef2:	680b      	ldr	r3, [r1, #0]
    aef4:	f36f 1304 	bfc	r3, #4, #1
    aef8:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    aefa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    aefc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    af00:	2b07      	cmp	r3, #7
    af02:	d1d7      	bne.n	aeb4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    af04:	2300      	movs	r3, #0
    af06:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    af0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    af0e:	4770      	bx	lr
        m_phyInitFailed = true;
    af10:	2301      	movs	r3, #1
    af12:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    af16:	4770      	bx	lr
    af18:	42000800 	.word	0x42000800
    af1c:	60020000 	.word	0x60020000
    af20:	50028000 	.word	0x50028000
    af24:	606e0000 	.word	0x606e0000
    af28:	506e0700 	.word	0x506e0700

0000af2c <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    af2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    af30:	4be2      	ldr	r3, [pc, #904]	; (b2bc <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    af32:	681a      	ldr	r2, [r3, #0]
    af34:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    af36:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    af38:	d503      	bpl.n	af42 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    af3a:	681a      	ldr	r2, [r3, #0]
    af3c:	0750      	lsls	r0, r2, #29
    af3e:	f100 82a2 	bmi.w	b486 <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    af42:	4ade      	ldr	r2, [pc, #888]	; (b2bc <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    af44:	48de      	ldr	r0, [pc, #888]	; (b2c0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    af46:	6813      	ldr	r3, [r2, #0]
    af48:	f043 0310 	orr.w	r3, r3, #16
    af4c:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    af4e:	6853      	ldr	r3, [r2, #4]
    af50:	f043 0301 	orr.w	r3, r3, #1
    af54:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    af56:	6853      	ldr	r3, [r2, #4]
    af58:	f043 0302 	orr.w	r3, r3, #2
    af5c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    af5e:	6853      	ldr	r3, [r2, #4]
    af60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    af64:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    af66:	6853      	ldr	r3, [r2, #4]
    af68:	2104      	movs	r1, #4
    af6a:	f361 4394 	bfi	r3, r1, #18, #3
    af6e:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    af70:	68d3      	ldr	r3, [r2, #12]
    af72:	f36f 0300 	bfc	r3, #0, #1
    af76:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    af78:	6913      	ldr	r3, [r2, #16]
    af7a:	f361 0304 	bfi	r3, r1, #0, #5
    af7e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    af80:	6913      	ldr	r3, [r2, #16]
    af82:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    af86:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    af88:	6913      	ldr	r3, [r2, #16]
    af8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    af8e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    af90:	6915      	ldr	r5, [r2, #16]
    af92:	2302      	movs	r3, #2
    af94:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    af98:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    af9c:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    af9e:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    afa0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    afa4:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    afa8:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    afac:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    afb0:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    afb4:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    afb8:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    afbc:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    afc0:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    afc4:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    afc8:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    afcc:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    afd0:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    afd4:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    afd8:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    afdc:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    afe0:	66e3      	str	r3, [r4, #108]	; 0x6c
    afe2:	6763      	str	r3, [r4, #116]	; 0x74
    afe4:	67e3      	str	r3, [r4, #124]	; 0x7c
    afe6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    afea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    afee:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    aff2:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    aff6:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    affa:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    affe:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    b002:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    b006:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    b00a:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    b00e:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    b012:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    b016:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    b01a:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    b01e:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    b022:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    b026:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    b02a:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    b02e:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    b032:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    b036:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b03a:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    b03e:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    b042:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b046:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    b04a:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    b04e:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b050:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    b054:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    b058:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    b05c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b060:	3610      	adds	r6, #16
    b062:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    b064:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b068:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    b06c:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    b070:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b072:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    b076:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    b07a:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    b07e:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b080:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    b082:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    b086:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    b08a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    b08e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    b092:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    b096:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    b09a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    b09e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    b0a2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    b0a6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b0aa:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    b0ae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    b0b2:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b0b6:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    b0ba:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    b0be:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    b0c0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b0c4:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    b0c8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    b0cc:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    b0d0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    b0d4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    b0d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    b0dc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b0e0:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    b0e4:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    b0e8:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    b0ec:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    b0f0:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    b0f4:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    b0f8:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    b0fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b100:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    b104:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    b108:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b10c:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    b110:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b114:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    b118:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    b11c:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    b120:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    b124:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    b128:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    b12c:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    b130:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    b134:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    b136:	6196      	str	r6, [r2, #24]
    b138:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    b13c:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    b140:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    b142:	6823      	ldr	r3, [r4, #0]
    b144:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    b146:	01db      	lsls	r3, r3, #7
    b148:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b14c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b150:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    b152:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    b156:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    b15a:	f042 0201 	orr.w	r2, r2, #1
    b15e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b162:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b166:	f011 0f01 	tst.w	r1, #1
    b16a:	f04f 010b 	mov.w	r1, #11
    b16e:	bf14      	ite	ne
    b170:	f361 1207 	bfine	r2, r1, #4, #4
    b174:	f361 0203 	bfieq	r2, r1, #0, #4
    b178:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    b17c:	68a3      	ldr	r3, [r4, #8]
    b17e:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    b180:	01db      	lsls	r3, r3, #7
    b182:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b186:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b18a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b18c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b190:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b194:	f041 0101 	orr.w	r1, r1, #1
    b198:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b19c:	f012 0f01 	tst.w	r2, #1
    b1a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b1a4:	f04f 010b 	mov.w	r1, #11
    b1a8:	bf14      	ite	ne
    b1aa:	f361 1207 	bfine	r2, r1, #4, #4
    b1ae:	f361 0203 	bfieq	r2, r1, #0, #4
    b1b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    b1b6:	6923      	ldr	r3, [r4, #16]
    b1b8:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    b1ba:	01db      	lsls	r3, r3, #7
    b1bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b1c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b1c4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b1c6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b1ca:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b1ce:	f041 0101 	orr.w	r1, r1, #1
    b1d2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b1d6:	f012 0f01 	tst.w	r2, #1
    b1da:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b1de:	f04f 010b 	mov.w	r1, #11
    b1e2:	bf14      	ite	ne
    b1e4:	f361 1207 	bfine	r2, r1, #4, #4
    b1e8:	f361 0203 	bfieq	r2, r1, #0, #4
    b1ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    b1f0:	69a3      	ldr	r3, [r4, #24]
    b1f2:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    b1f4:	01db      	lsls	r3, r3, #7
    b1f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b1fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b1fe:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b200:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b204:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b208:	f041 0101 	orr.w	r1, r1, #1
    b20c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b210:	f012 0f01 	tst.w	r2, #1
    b214:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b218:	f04f 010b 	mov.w	r1, #11
    b21c:	bf14      	ite	ne
    b21e:	f361 1207 	bfine	r2, r1, #4, #4
    b222:	f361 0203 	bfieq	r2, r1, #0, #4
    b226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    b22a:	6a23      	ldr	r3, [r4, #32]
    b22c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    b22e:	01db      	lsls	r3, r3, #7
    b230:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b234:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b238:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b23a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b23e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b242:	f041 0101 	orr.w	r1, r1, #1
    b246:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b24a:	f012 0f01 	tst.w	r2, #1
    b24e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b252:	f04f 010b 	mov.w	r1, #11
    b256:	bf14      	ite	ne
    b258:	f361 1207 	bfine	r2, r1, #4, #4
    b25c:	f361 0203 	bfieq	r2, r1, #0, #4
    b260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    b264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    b268:	01db      	lsls	r3, r3, #7
    b26a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b26e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b272:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b274:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b278:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b27c:	f041 0101 	orr.w	r1, r1, #1
    b280:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b284:	f012 0f01 	tst.w	r2, #1
    b288:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b28c:	f04f 010b 	mov.w	r1, #11
    b290:	bf14      	ite	ne
    b292:	f361 1207 	bfine	r2, r1, #4, #4
    b296:	f361 0203 	bfieq	r2, r1, #0, #4
    b29a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    b29e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b2a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    b2a2:	01db      	lsls	r3, r3, #7
    b2a4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b2a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b2ac:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b2ae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b2b2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b2b6:	f041 0101 	orr.w	r1, r1, #1
    b2ba:	e003      	b.n	b2c4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    b2bc:	42000800 	.word	0x42000800
    b2c0:	e000e100 	.word	0xe000e100
    b2c4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b2c8:	f012 0f01 	tst.w	r2, #1
    b2cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b2d0:	f04f 010b 	mov.w	r1, #11
    b2d4:	bf14      	ite	ne
    b2d6:	f361 1207 	bfine	r2, r1, #4, #4
    b2da:	f361 0203 	bfieq	r2, r1, #0, #4
    b2de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    b2e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b2e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    b2e6:	01db      	lsls	r3, r3, #7
    b2e8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b2ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b2f0:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b2f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b2f6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b2fa:	f041 0101 	orr.w	r1, r1, #1
    b2fe:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b302:	f012 0f01 	tst.w	r2, #1
    b306:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b30a:	f04f 010b 	mov.w	r1, #11
    b30e:	bf14      	ite	ne
    b310:	f361 1207 	bfine	r2, r1, #4, #4
    b314:	f361 0203 	bfieq	r2, r1, #0, #4
    b318:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    b31c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b31e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    b320:	01db      	lsls	r3, r3, #7
    b322:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b326:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b32a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b32c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b330:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b334:	f041 0101 	orr.w	r1, r1, #1
    b338:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b33c:	f012 0f01 	tst.w	r2, #1
    b340:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b344:	f04f 010b 	mov.w	r1, #11
    b348:	bf14      	ite	ne
    b34a:	f361 1207 	bfine	r2, r1, #4, #4
    b34e:	f361 0203 	bfieq	r2, r1, #0, #4
    b352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    b356:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b358:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    b35a:	01db      	lsls	r3, r3, #7
    b35c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b360:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b364:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b366:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b36a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b36e:	f041 0101 	orr.w	r1, r1, #1
    b372:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b376:	f012 0f01 	tst.w	r2, #1
    b37a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b37e:	f04f 010b 	mov.w	r1, #11
    b382:	bf14      	ite	ne
    b384:	f361 1207 	bfine	r2, r1, #4, #4
    b388:	f361 0203 	bfieq	r2, r1, #0, #4
    b38c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    b390:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b392:	6d61      	ldr	r1, [r4, #84]	; 0x54
    b394:	01db      	lsls	r3, r3, #7
    b396:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    b39a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    b39e:	1850      	adds	r0, r2, r1
    b3a0:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b3a2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    b3a6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b3aa:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b3ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b3b2:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b3b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b3ba:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b3bc:	bf14      	ite	ne
    b3be:	f36f 1007 	bfcne	r0, #4, #4
    b3c2:	f367 0003 	bfieq	r0, r7, #0, #4
    b3c6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b3ca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    b3ce:	4932      	ldr	r1, [pc, #200]	; (b498 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    b3d0:	4a32      	ldr	r2, [pc, #200]	; (b49c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b3d2:	f040 0001 	orr.w	r0, r0, #1
    b3d6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    b3da:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    b3de:	f040 0002 	orr.w	r0, r0, #2
    b3e2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    b3e6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3ec:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    b3ee:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b3f0:	f043 0302 	orr.w	r3, r3, #2
    b3f4:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    b3f6:	7813      	ldrb	r3, [r2, #0]
    b3f8:	f36f 0341 	bfc	r3, #1, #1
    b3fc:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    b3fe:	6853      	ldr	r3, [r2, #4]
    b400:	0799      	lsls	r1, r3, #30
    b402:	d4fc      	bmi.n	b3fe <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    b404:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    b406:	4925      	ldr	r1, [pc, #148]	; (b49c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    b408:	08c3      	lsrs	r3, r0, #3
    b40a:	009b      	lsls	r3, r3, #2
    b40c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    b410:	2701      	movs	r7, #1
    b412:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    b416:	4087      	lsls	r7, r0
    b418:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    b41a:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    b41e:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    b420:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    b422:	f04f 0e0f 	mov.w	lr, #15
    b426:	fa0e fe00 	lsl.w	lr, lr, r0
    b42a:	ea27 070e 	bic.w	r7, r7, lr
    b42e:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    b430:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    b434:	2705      	movs	r7, #5
    b436:	fa07 f000 	lsl.w	r0, r7, r0
    b43a:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    b43e:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    b440:	7813      	ldrb	r3, [r2, #0]
    b442:	f043 0302 	orr.w	r3, r3, #2
    b446:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    b448:	684b      	ldr	r3, [r1, #4]
    b44a:	079b      	lsls	r3, r3, #30
    b44c:	d4fc      	bmi.n	b448 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    b44e:	4620      	mov	r0, r4
    b450:	f7ff fce4 	bl	ae1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    b454:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    b458:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    b45c:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b460:	4b0f      	ldr	r3, [pc, #60]	; (b4a0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    b462:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    b464:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    b468:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    b46a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    b46e:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b472:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    b476:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b478:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    b47a:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b47c:	6818      	ldr	r0, [r3, #0]
}
    b47e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b482:	f7ff bb3f 	b.w	ab04 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b486:	681a      	ldr	r2, [r3, #0]
    b488:	f36f 02c3 	bfc	r2, #3, #1
    b48c:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b48e:	681a      	ldr	r2, [r3, #0]
    b490:	f36f 0282 	bfc	r2, #2, #1
    b494:	601a      	str	r2, [r3, #0]
    b496:	e554      	b.n	af42 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    b498:	42000800 	.word	0x42000800
    b49c:	40002800 	.word	0x40002800
    b4a0:	20001d20 	.word	0x20001d20

0000b4a4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    b4a8:	6d85      	ldr	r5, [r0, #88]	; 0x58
    b4aa:	4ca1      	ldr	r4, [pc, #644]	; (b730 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    b4ac:	4ba1      	ldr	r3, [pc, #644]	; (b734 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b4ae:	49a2      	ldr	r1, [pc, #648]	; (b738 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    b4b0:	2201      	movs	r2, #1
    b4b2:	40aa      	lsls	r2, r5
    b4b4:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    b4b6:	681a      	ldr	r2, [r3, #0]
    b4b8:	f042 0210 	orr.w	r2, r2, #16
    b4bc:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b4be:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b4c0:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b4c2:	6893      	ldr	r3, [r2, #8]
    b4c4:	075d      	lsls	r5, r3, #29
    b4c6:	d5fc      	bpl.n	b4c2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    b4c8:	6813      	ldr	r3, [r2, #0]
    b4ca:	f36f 1304 	bfc	r3, #4, #1
    b4ce:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    b4d0:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    b4d2:	07cc      	lsls	r4, r1, #31
    b4d4:	d415      	bmi.n	b502 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    b4d6:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    b4d8:	bf44      	itt	mi
    b4da:	2300      	movmi	r3, #0
    b4dc:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    b4e0:	078c      	lsls	r4, r1, #30
    b4e2:	d401      	bmi.n	b4e8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    b4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b4e8:	4b92      	ldr	r3, [pc, #584]	; (b734 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    b4ea:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    b4ec:	2101      	movs	r1, #1
    b4ee:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b4f2:	0711      	lsls	r1, r2, #28
    b4f4:	d5f6      	bpl.n	b4e4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    b4f6:	681a      	ldr	r2, [r3, #0]
    b4f8:	0752      	lsls	r2, r2, #29
    b4fa:	f100 8121 	bmi.w	b740 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    b4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    b502:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b504:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    b506:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b508:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    b50a:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    b50e:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b512:	d56d      	bpl.n	b5f0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    b514:	6813      	ldr	r3, [r2, #0]
    b516:	075f      	lsls	r7, r3, #29
    b518:	d56a      	bpl.n	b5f0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b51a:	6813      	ldr	r3, [r2, #0]
    b51c:	f36f 03c3 	bfc	r3, #3, #1
    b520:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b522:	6813      	ldr	r3, [r2, #0]
    b524:	f36f 0382 	bfc	r3, #2, #1
    b528:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    b52a:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b52e:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b532:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b536:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b53a:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b53e:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b542:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b546:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b54a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b54e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b552:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b556:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b55a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b562:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b566:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b56a:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b56e:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b572:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b576:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b57a:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b57e:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b582:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b586:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b58a:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    b58e:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    b592:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b59a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b59e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b5a2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b5a6:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b5aa:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b5ae:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b5b2:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    b5b6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b5ba:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b5be:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b5c2:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b5c6:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b5ca:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    b5ce:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    b5d2:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b5d6:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    b5da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    b5e2:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    b5e4:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b5e8:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    b5ec:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    b5f0:	4b50      	ldr	r3, [pc, #320]	; (b734 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b5f2:	4d52      	ldr	r5, [pc, #328]	; (b73c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    b5f4:	681a      	ldr	r2, [r3, #0]
    b5f6:	f042 0210 	orr.w	r2, r2, #16
    b5fa:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b5fc:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b5fe:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b600:	6893      	ldr	r3, [r2, #8]
    b602:	075e      	lsls	r6, r3, #29
    b604:	d5fc      	bpl.n	b600 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    b606:	6813      	ldr	r3, [r2, #0]
    b608:	f36f 1304 	bfc	r3, #4, #1
    b60c:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    b60e:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    b610:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    b612:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    b614:	f3c3 0640 	ubfx	r6, r3, #1, #1
    b618:	f366 0500 	bfi	r5, r6, #0, #1
    b61c:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    b61e:	6855      	ldr	r5, [r2, #4]
    b620:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b624:	f363 0541 	bfi	r5, r3, #1, #1
    b628:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b62a:	6813      	ldr	r3, [r2, #0]
    b62c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    b630:	b96b      	cbnz	r3, b64e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    b632:	429c      	cmp	r4, r3
    b634:	f43f af4f 	beq.w	b4d6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b638:	b16c      	cbz	r4, b656 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    b63a:	4b3e      	ldr	r3, [pc, #248]	; (b734 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    b63c:	681a      	ldr	r2, [r3, #0]
    b63e:	f042 0208 	orr.w	r2, r2, #8
    b642:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b644:	681a      	ldr	r2, [r3, #0]
    b646:	f042 0204 	orr.w	r2, r2, #4
    b64a:	601a      	str	r2, [r3, #0]
    b64c:	e743      	b.n	b4d6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b64e:	6813      	ldr	r3, [r2, #0]
    b650:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b654:	e7ed      	b.n	b632 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b656:	4b37      	ldr	r3, [pc, #220]	; (b734 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    b658:	681a      	ldr	r2, [r3, #0]
    b65a:	f364 02c3 	bfi	r2, r4, #3, #1
    b65e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b660:	681a      	ldr	r2, [r3, #0]
    b662:	f364 0282 	bfi	r2, r4, #2, #1
    b666:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    b668:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b66c:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b670:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b674:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b678:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b67c:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b680:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b684:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b688:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b68c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b690:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b694:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b69c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b6a0:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b6a4:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b6a8:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b6ac:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b6b0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b6b4:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b6b8:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b6bc:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b6c0:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b6c4:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b6c8:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    b6cc:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b6d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b6d8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b6dc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b6e0:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b6e4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b6e8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b6ec:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    b6f0:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b6f4:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b6f8:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b6fc:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b700:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b704:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b708:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b70c:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    b710:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b714:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    b718:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    b71c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b724:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b728:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    b72c:	e6d3      	b.n	b4d6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    b72e:	bf00      	nop
    b730:	40002800 	.word	0x40002800
    b734:	42000800 	.word	0x42000800
    b738:	606e0000 	.word	0x606e0000
    b73c:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b740:	681a      	ldr	r2, [r3, #0]
    b742:	f36f 02c3 	bfc	r2, #3, #1
    b746:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b748:	681a      	ldr	r2, [r3, #0]
    b74a:	f36f 0282 	bfc	r2, #2, #1
    b74e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    b750:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b754:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b758:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b75c:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b760:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b764:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b768:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b76c:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b770:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b774:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b778:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b77c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b788:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b78c:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b790:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b794:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b798:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b79c:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b7a0:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    b7a4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    b7a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b7ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b7b4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b7b8:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b7bc:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b7c0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b7c4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b7c8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b7cc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b7d0:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    b7d4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b7d8:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b7dc:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b7e0:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b7e4:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b7e8:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b7ec:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b7f0:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    b7f4:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    b7f8:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b7fc:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    b800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    b808:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    b80a:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b80e:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    b812:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    b816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b81a:	bf00      	nop

0000b81c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    b81c:	4b0b      	ldr	r3, [pc, #44]	; (b84c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    b81e:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    b820:	695a      	ldr	r2, [r3, #20]
    b822:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    b824:	6a1a      	ldr	r2, [r3, #32]
    b826:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    b828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    b82a:	9a00      	ldr	r2, [sp, #0]
    b82c:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    b82e:	bf44      	itt	mi
    b830:	9a00      	ldrmi	r2, [sp, #0]
    b832:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    b834:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    b836:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    b838:	079b      	lsls	r3, r3, #30
        m_recv = true;
    b83a:	bf44      	itt	mi
    b83c:	2301      	movmi	r3, #1
    b83e:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    b842:	4b02      	ldr	r3, [pc, #8]	; (b84c <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    b844:	621a      	str	r2, [r3, #32]
}
    b846:	b002      	add	sp, #8
    b848:	4770      	bx	lr
    b84a:	bf00      	nop
    b84c:	42000800 	.word	0x42000800

0000b850 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    b850:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    b852:	f7ff fa6f 	bl	ad34 <_ZN9ClearCore15EthernetManager8InstanceEv>
    b856:	4b01      	ldr	r3, [pc, #4]	; (b85c <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    b858:	6018      	str	r0, [r3, #0]
    b85a:	bd08      	pop	{r3, pc}
    b85c:	20001d3c 	.word	0x20001d3c

0000b860 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    b862:	4f46      	ldr	r7, [pc, #280]	; (b97c <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    b864:	f8df e118 	ldr.w	lr, [pc, #280]	; b980 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    b868:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    b86a:	4604      	mov	r4, r0
    m_lastOutput(0) {
    b86c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b86e:	4625      	mov	r5, r4
    b870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b872:	e896 0003 	ldmia.w	r6, {r0, r1}
    b876:	f107 0618 	add.w	r6, r7, #24
    b87a:	e885 0003 	stmia.w	r5, {r0, r1}
    b87e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b880:	f104 0518 	add.w	r5, r4, #24
    b884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b886:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    b88a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    b88e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    b892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    b894:	f104 0534 	add.w	r5, r4, #52	; 0x34
    b898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    b89c:	2608      	movs	r6, #8
    b89e:	257f      	movs	r5, #127	; 0x7f
    b8a0:	23c8      	movs	r3, #200	; 0xc8
    b8a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    b8a6:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    b8aa:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    b8ae:	2500      	movs	r5, #0
    b8b0:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    b8b4:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b8b6:	21fe      	movs	r1, #254	; 0xfe
    b8b8:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    b8bc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b8c0:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    b8c4:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    b8c6:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b8c8:	4629      	mov	r1, r5
    b8ca:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    b8cc:	6563      	str	r3, [r4, #84]	; 0x54
    b8ce:	65a5      	str	r5, [r4, #88]	; 0x58
    b8d0:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    b8d2:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    b8d6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    b8da:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b8dc:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    b8e0:	67a5      	str	r5, [r4, #120]	; 0x78
    b8e2:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    b8e6:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    b8e8:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b8ea:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    b8ee:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    b8f2:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    b8f6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    b8fa:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    b8fe:	2240      	movs	r2, #64	; 0x40
    b900:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    b904:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    b908:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    b90c:	f012 fd6e 	bl	1e3ec <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    b910:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    b914:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b918:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    b91c:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    b920:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b924:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    b928:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    b92c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    b930:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    b934:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b938:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    b93c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b940:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    b944:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    b948:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    b94c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    b950:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    b954:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    b958:	4620      	mov	r0, r4
    m_lastOutput(0) {
    b95a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    b95e:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    b962:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    b966:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    b96a:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    b96e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    b972:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b976:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    b97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b97c:	000231a8 	.word	0x000231a8
    b980:	0fe080fc 	.word	0x0fe080fc

0000b984 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    b984:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    b986:	4a64      	ldr	r2, [pc, #400]	; (bb18 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    b988:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b98c:	f36f 1386 	bfc	r3, #6, #1
    b990:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b994:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b998:	065d      	lsls	r5, r3, #25
    b99a:	d4fb      	bmi.n	b994 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    b99c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b9a0:	495d      	ldr	r1, [pc, #372]	; (bb18 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    b9a2:	2405      	movs	r4, #5
    b9a4:	f364 0303 	bfi	r3, r4, #0, #4
    b9a8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b9ac:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9b4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b9b8:	684b      	ldr	r3, [r1, #4]
    b9ba:	f013 0314 	ands.w	r3, r3, #20
    b9be:	d1fb      	bne.n	b9b8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b9c0:	4d56      	ldr	r5, [pc, #344]	; (bb1c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    b9c2:	4957      	ldr	r1, [pc, #348]	; (bb20 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b9c4:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    b9c6:	4a57      	ldr	r2, [pc, #348]	; (bb24 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b9c8:	f044 0404 	orr.w	r4, r4, #4
    b9cc:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    b9ce:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    b9d2:	2402      	movs	r4, #2
    b9d4:	f364 1507 	bfi	r5, r4, #4, #4
    b9d8:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    b9dc:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    b9e0:	f045 0501 	orr.w	r5, r5, #1
    b9e4:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    b9e8:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    b9ec:	f364 1507 	bfi	r5, r4, #4, #4
    b9f0:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    b9f4:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    b9f8:	f045 0501 	orr.w	r5, r5, #1
    b9fc:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    ba00:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    ba04:	f364 0503 	bfi	r5, r4, #0, #4
    ba08:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    ba0c:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ba10:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    ba12:	f045 0501 	orr.w	r5, r5, #1
    ba16:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    ba1a:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ba1e:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    ba22:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    ba26:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    ba2a:	6811      	ldr	r1, [r2, #0]
    ba2c:	f363 0141 	bfi	r1, r3, #1, #1
    ba30:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ba32:	69d3      	ldr	r3, [r2, #28]
    ba34:	f013 0302 	ands.w	r3, r3, #2
    ba38:	d1fb      	bne.n	ba32 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ba3a:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ba3c:	4939      	ldr	r1, [pc, #228]	; (bb24 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ba3e:	f044 040c 	orr.w	r4, r4, #12
    ba42:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    ba44:	6814      	ldr	r4, [r2, #0]
    ba46:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    ba4a:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    ba4e:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    ba50:	6854      	ldr	r4, [r2, #4]
    ba52:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    ba56:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    ba58:	6894      	ldr	r4, [r2, #8]
    ba5a:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    ba5e:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    ba60:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    ba62:	6813      	ldr	r3, [r2, #0]
    ba64:	f043 0302 	orr.w	r3, r3, #2
    ba68:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ba6a:	69cb      	ldr	r3, [r1, #28]
    ba6c:	079c      	lsls	r4, r3, #30
    ba6e:	d4fc      	bmi.n	ba6a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    ba70:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    ba74:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    ba78:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ba7c:	4a29      	ldr	r2, [pc, #164]	; (bb24 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    ba7e:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    ba80:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ba82:	7e13      	ldrb	r3, [r2, #24]
    ba84:	0799      	lsls	r1, r3, #30
    ba86:	d5fc      	bpl.n	ba82 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ba88:	4b25      	ldr	r3, [pc, #148]	; (bb20 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ba8a:	4a26      	ldr	r2, [pc, #152]	; (bb24 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ba8c:	2104      	movs	r1, #4
    ba8e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ba92:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ba96:	7e13      	ldrb	r3, [r2, #24]
    ba98:	075b      	lsls	r3, r3, #29
    ba9a:	d5fc      	bpl.n	ba96 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    ba9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    ba9e:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    baa2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    baa6:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    baaa:	4063      	eors	r3, r4
    baac:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    bab0:	bb7a      	cbnz	r2, bb12 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    bab2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    bab6:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    baba:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    babe:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    bac2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    bac6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    baca:	4059      	eors	r1, r3
    bacc:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    bace:	404b      	eors	r3, r1
    bad0:	ea83 0105 	eor.w	r1, r3, r5
    bad4:	4031      	ands	r1, r6
    bad6:	4059      	eors	r1, r3
    bad8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    badc:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    bae0:	404a      	eors	r2, r1
    bae2:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    bae4:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    bae6:	b135      	cbz	r5, baf6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    bae8:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    baec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    baf0:	b10a      	cbz	r2, baf6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    baf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    baf6:	4d0b      	ldr	r5, [pc, #44]	; (bb24 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    baf8:	4909      	ldr	r1, [pc, #36]	; (bb20 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    bafa:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    bafe:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    bb00:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    bb02:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    bb04:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    bb06:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    bb0a:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    bb0c:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    bb10:	4770      	bx	lr
        output = m_altOutput;
    bb12:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    bb16:	e7ee      	b.n	baf6 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    bb18:	40001c00 	.word	0x40001c00
    bb1c:	40000800 	.word	0x40000800
    bb20:	41008000 	.word	0x41008000
    bb24:	43000800 	.word	0x43000800

0000bb28 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    bb28:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d078      	beq.n	bc22 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    bb30:	6d83      	ldr	r3, [r0, #88]	; 0x58
    bb32:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    bb34:	b4f0      	push	{r4, r5, r6, r7}
    bb36:	6582      	str	r2, [r0, #88]	; 0x58
    bb38:	b90b      	cbnz	r3, bb3e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    bb3a:	6d02      	ldr	r2, [r0, #80]	; 0x50
    bb3c:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    bb3e:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    bb40:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    bb44:	428a      	cmp	r2, r1
    bb46:	bf34      	ite	cc
    bb48:	220c      	movcc	r2, #12
    bb4a:	2208      	movcs	r2, #8
    bb4c:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    bb4e:	3301      	adds	r3, #1
    bb50:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    bb52:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    bb54:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    bb58:	2b3e      	cmp	r3, #62	; 0x3e
    bb5a:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    bb5e:	d961      	bls.n	bc24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    bb60:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    bb64:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    bb68:	2400      	movs	r4, #0
    bb6a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    bb6e:	2b00      	cmp	r3, #0
    bb70:	f000 817a 	beq.w	be68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    bb74:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    bb78:	3101      	adds	r1, #1
    bb7a:	b2c9      	uxtb	r1, r1
    bb7c:	4299      	cmp	r1, r3
    bb7e:	460a      	mov	r2, r1
    bb80:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    bb84:	f2c0 817e 	blt.w	be84 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    bb88:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    bb8c:	4623      	mov	r3, r4
    bb8e:	e04c      	b.n	bc2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    bb90:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    bb92:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    bb94:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    bb98:	49b1      	ldr	r1, [pc, #708]	; (be60 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    bb9a:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    bb9e:	7e0b      	ldrb	r3, [r1, #24]
    bba0:	079c      	lsls	r4, r3, #30
    bba2:	d5fc      	bpl.n	bb9e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    bba4:	4baf      	ldr	r3, [pc, #700]	; (be64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    bba6:	49ae      	ldr	r1, [pc, #696]	; (be60 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    bba8:	2404      	movs	r4, #4
    bbaa:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    bbae:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    bbb2:	7e0b      	ldrb	r3, [r1, #24]
    bbb4:	075b      	lsls	r3, r3, #29
    bbb6:	d5fc      	bpl.n	bbb2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    bbb8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    bbba:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    bbbe:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    bbc2:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    bbc6:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    bbca:	4073      	eors	r3, r6
    bbcc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    bbd0:	2900      	cmp	r1, #0
    bbd2:	f040 80d4 	bne.w	bd7e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    bbd6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    bbda:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    bbde:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    bbe2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    bbe6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    bbea:	405a      	eors	r2, r3
    bbec:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    bbee:	4053      	eors	r3, r2
    bbf0:	ea83 0204 	eor.w	r2, r3, r4
    bbf4:	402a      	ands	r2, r5
    bbf6:	405a      	eors	r2, r3
    bbf8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    bbfc:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    bc00:	4051      	eors	r1, r2
    bc02:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    bc04:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    bc06:	b134      	cbz	r4, bc16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    bc08:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    bc0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    bc10:	b10a      	cbz	r2, bc16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    bc12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    bc16:	4a92      	ldr	r2, [pc, #584]	; (be60 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    bc18:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    bc1c:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    bc1e:	6293      	str	r3, [r2, #40]	; 0x28
}
    bc20:	bcf0      	pop	{r4, r5, r6, r7}
    bc22:	4770      	bx	lr
    bc24:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    bc28:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    bc2a:	4293      	cmp	r3, r2
    bc2c:	bfb4      	ite	lt
    bc2e:	230c      	movlt	r3, #12
    bc30:	2308      	movge	r3, #8
    bc32:	4403      	add	r3, r0
            if (!m_activeMask) {
    bc34:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    bc38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    bc3a:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    bc3e:	2900      	cmp	r1, #0
    bc40:	d0a6      	beq.n	bb90 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    bc42:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    bc46:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    bc48:	3301      	adds	r3, #1
    bc4a:	b2db      	uxtb	r3, r3
    bc4c:	2b3f      	cmp	r3, #63	; 0x3f
    bc4e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    bc52:	f200 8097 	bhi.w	bd84 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    bc56:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    bc5a:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    bc5c:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    bc5e:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    bc60:	d004      	beq.n	bc6c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    bc62:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    bc66:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bc68:	bfb8      	it	lt
    bc6a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bc6c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    bc70:	420a      	tst	r2, r1
    bc72:	d004      	beq.n	bc7e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    bc74:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    bc78:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bc7a:	bfb8      	it	lt
    bc7c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bc7e:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    bc82:	420a      	tst	r2, r1
    bc84:	d004      	beq.n	bc90 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    bc86:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    bc8a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bc8c:	bfb8      	it	lt
    bc8e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bc90:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    bc94:	420a      	tst	r2, r1
    bc96:	d004      	beq.n	bca2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    bc98:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    bc9c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bc9e:	bfb8      	it	lt
    bca0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bca2:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    bca6:	420a      	tst	r2, r1
    bca8:	d004      	beq.n	bcb4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    bcaa:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    bcae:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bcb0:	bfb8      	it	lt
    bcb2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bcb4:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    bcb8:	420a      	tst	r2, r1
    bcba:	d004      	beq.n	bcc6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    bcbc:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    bcc0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bcc2:	bfb8      	it	lt
    bcc4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bcc6:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    bcca:	420a      	tst	r2, r1
    bccc:	d004      	beq.n	bcd8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    bcce:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    bcd2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bcd4:	bfb8      	it	lt
    bcd6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bcd8:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    bcdc:	420a      	tst	r2, r1
    bcde:	d004      	beq.n	bcea <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    bce0:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    bce4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bce6:	bfb8      	it	lt
    bce8:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bcea:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    bcee:	420a      	tst	r2, r1
    bcf0:	d004      	beq.n	bcfc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    bcf2:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    bcf6:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bcf8:	bfb8      	it	lt
    bcfa:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bcfc:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    bd00:	420a      	tst	r2, r1
    bd02:	d004      	beq.n	bd0e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    bd04:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    bd08:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bd0a:	bfb8      	it	lt
    bd0c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bd0e:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    bd12:	420a      	tst	r2, r1
    bd14:	d004      	beq.n	bd20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    bd16:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    bd1a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bd1c:	bfb8      	it	lt
    bd1e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bd20:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    bd24:	420a      	tst	r2, r1
    bd26:	d004      	beq.n	bd32 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    bd28:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    bd2c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bd2e:	bfb8      	it	lt
    bd30:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bd32:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    bd36:	420a      	tst	r2, r1
    bd38:	d004      	beq.n	bd44 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    bd3a:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    bd3e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bd40:	bfb8      	it	lt
    bd42:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bd44:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    bd48:	420a      	tst	r2, r1
    bd4a:	d004      	beq.n	bd56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    bd4c:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    bd50:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bd52:	bfb8      	it	lt
    bd54:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bd56:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    bd5a:	420a      	tst	r2, r1
    bd5c:	d004      	beq.n	bd68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    bd5e:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    bd62:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bd64:	bfb8      	it	lt
    bd66:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bd68:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    bd6c:	4211      	tst	r1, r2
    bd6e:	d004      	beq.n	bd7a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    bd70:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    bd74:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bd76:	bfb8      	it	lt
    bd78:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    bd7a:	6782      	str	r2, [r0, #120]	; 0x78
    bd7c:	e70c      	b.n	bb98 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    bd7e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    bd82:	e748      	b.n	bc16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    bd84:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    bd86:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    bd8a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    bd8e:	d004      	beq.n	bd9a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    bd90:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    bd94:	2a00      	cmp	r2, #0
    bd96:	f040 80cb 	bne.w	bf30 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    bd9a:	078b      	lsls	r3, r1, #30
    bd9c:	d504      	bpl.n	bda8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    bd9e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    bda2:	2b00      	cmp	r3, #0
    bda4:	f040 80be 	bne.w	bf24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    bda8:	074f      	lsls	r7, r1, #29
    bdaa:	d504      	bpl.n	bdb6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    bdac:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	f040 80b1 	bne.w	bf18 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    bdb6:	070e      	lsls	r6, r1, #28
    bdb8:	d504      	bpl.n	bdc4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    bdba:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	f040 80a4 	bne.w	bf0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    bdc4:	06cd      	lsls	r5, r1, #27
    bdc6:	d504      	bpl.n	bdd2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    bdc8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    bdcc:	2b00      	cmp	r3, #0
    bdce:	f040 8097 	bne.w	bf00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    bdd2:	068c      	lsls	r4, r1, #26
    bdd4:	d504      	bpl.n	bde0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    bdd6:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    bdda:	2b00      	cmp	r3, #0
    bddc:	f040 808a 	bne.w	bef4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    bde0:	064b      	lsls	r3, r1, #25
    bde2:	d503      	bpl.n	bdec <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    bde4:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    bde8:	2b00      	cmp	r3, #0
    bdea:	d17d      	bne.n	bee8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    bdec:	060f      	lsls	r7, r1, #24
    bdee:	d503      	bpl.n	bdf8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    bdf0:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d171      	bne.n	bedc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    bdf8:	05ce      	lsls	r6, r1, #23
    bdfa:	d503      	bpl.n	be04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    bdfc:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    be00:	2b00      	cmp	r3, #0
    be02:	d165      	bne.n	bed0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    be04:	058d      	lsls	r5, r1, #22
    be06:	d503      	bpl.n	be10 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    be08:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    be0c:	2b00      	cmp	r3, #0
    be0e:	d159      	bne.n	bec4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    be10:	054c      	lsls	r4, r1, #21
    be12:	d503      	bpl.n	be1c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    be14:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    be18:	2b00      	cmp	r3, #0
    be1a:	d14d      	bne.n	beb8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    be1c:	050b      	lsls	r3, r1, #20
    be1e:	d503      	bpl.n	be28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    be20:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    be24:	2b00      	cmp	r3, #0
    be26:	d141      	bne.n	beac <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    be28:	04cf      	lsls	r7, r1, #19
    be2a:	d503      	bpl.n	be34 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    be2c:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    be30:	2b00      	cmp	r3, #0
    be32:	d135      	bne.n	bea0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    be34:	048e      	lsls	r6, r1, #18
    be36:	d502      	bpl.n	be3e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    be38:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    be3c:	bb53      	cbnz	r3, be94 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    be3e:	044d      	lsls	r5, r1, #17
    be40:	d502      	bpl.n	be48 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    be42:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    be46:	b9fb      	cbnz	r3, be88 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    be48:	0bcb      	lsrs	r3, r1, #15
    be4a:	d096      	beq.n	bd7a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    be4c:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    be50:	2b00      	cmp	r3, #0
    be52:	d092      	beq.n	bd7a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    be54:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    be58:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    be5c:	430a      	orrs	r2, r1
    be5e:	e78c      	b.n	bd7a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    be60:	43000800 	.word	0x43000800
    be64:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    be68:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    be6c:	3901      	subs	r1, #1
    be6e:	b2c9      	uxtb	r1, r1
    be70:	42a1      	cmp	r1, r4
    be72:	460a      	mov	r2, r1
    be74:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    be78:	f73f aed7 	bgt.w	bc2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    be7c:	2101      	movs	r1, #1
    be7e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    be82:	e6d2      	b.n	bc2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    be84:	4623      	mov	r3, r4
    be86:	e6d0      	b.n	bc2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    be88:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    be8c:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    be90:	4322      	orrs	r2, r4
    be92:	e7d9      	b.n	be48 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    be94:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    be98:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    be9c:	4322      	orrs	r2, r4
    be9e:	e7ce      	b.n	be3e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    bea0:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    bea4:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    bea8:	4322      	orrs	r2, r4
    beaa:	e7c3      	b.n	be34 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    beac:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    beb0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    beb4:	4322      	orrs	r2, r4
    beb6:	e7b7      	b.n	be28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    beb8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    bebc:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    bec0:	4322      	orrs	r2, r4
    bec2:	e7ab      	b.n	be1c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    bec4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    bec8:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    becc:	4322      	orrs	r2, r4
    bece:	e79f      	b.n	be10 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    bed0:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    bed4:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    bed8:	4322      	orrs	r2, r4
    beda:	e793      	b.n	be04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    bedc:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    bee0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    bee4:	4322      	orrs	r2, r4
    bee6:	e787      	b.n	bdf8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    bee8:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    beec:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    bef0:	4322      	orrs	r2, r4
    bef2:	e77b      	b.n	bdec <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    bef4:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    bef8:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    befc:	4322      	orrs	r2, r4
    befe:	e76f      	b.n	bde0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    bf00:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    bf04:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    bf08:	4322      	orrs	r2, r4
    bf0a:	e762      	b.n	bdd2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    bf0c:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    bf10:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    bf14:	4322      	orrs	r2, r4
    bf16:	e755      	b.n	bdc4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    bf18:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    bf1c:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    bf20:	4322      	orrs	r2, r4
    bf22:	e748      	b.n	bdb6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    bf24:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    bf28:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    bf2c:	4322      	orrs	r2, r4
    bf2e:	e73b      	b.n	bda8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    bf30:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    bf34:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    bf38:	e72f      	b.n	bd9a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    bf3a:	bf00      	nop

0000bf3c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    bf40:	2301      	movs	r3, #1
    bf42:	f100 0834 	add.w	r8, r0, #52	; 0x34
    bf46:	4e4d      	ldr	r6, [pc, #308]	; (c07c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bf48:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    bf4c:	b083      	sub	sp, #12
    bf4e:	4681      	mov	r9, r0
    m_useAltOutput = true;
    bf50:	4645      	mov	r5, r8
    bf52:	f100 0444 	add.w	r4, r0, #68	; 0x44
    bf56:	2200      	movs	r2, #0
    bf58:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    bf5a:	f855 3b04 	ldr.w	r3, [r5], #4
    bf5e:	4313      	orrs	r3, r2
    bf60:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bf64:	4630      	mov	r0, r6
    bf66:	4639      	mov	r1, r7
    bf68:	f7fe febe 	bl	ace8 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    bf6c:	42a5      	cmp	r5, r4
    bf6e:	d002      	beq.n	bf76 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    bf70:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    bf74:	e7f1      	b.n	bf5a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    bf76:	f109 0318 	add.w	r3, r9, #24
    bf7a:	4e40      	ldr	r6, [pc, #256]	; (c07c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bf7c:	9301      	str	r3, [sp, #4]
    bf7e:	469b      	mov	fp, r3
    bf80:	f04f 0a00 	mov.w	sl, #0
    bf84:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    bf86:	f1ba 0f06 	cmp.w	sl, #6
    bf8a:	4630      	mov	r0, r6
    bf8c:	4639      	mov	r1, r7
    bf8e:	f10a 0a01 	add.w	sl, sl, #1
    bf92:	d148      	bne.n	c026 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    bf94:	f8db 2000 	ldr.w	r2, [fp]
    bf98:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    bf9c:	4837      	ldr	r0, [pc, #220]	; (c07c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bf9e:	4313      	orrs	r3, r2
    bfa0:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bfa4:	2100      	movs	r1, #0
    bfa6:	f7fe fe9f 	bl	ace8 <Delay_cycles>
    bfaa:	4835      	ldr	r0, [pc, #212]	; (c080 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    bfac:	4e33      	ldr	r6, [pc, #204]	; (c07c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bfae:	2100      	movs	r1, #0
    bfb0:	f7fe fe9a 	bl	ace8 <Delay_cycles>
    bfb4:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    bfb6:	f858 2b04 	ldr.w	r2, [r8], #4
    bfba:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    bfbe:	ea23 0302 	bic.w	r3, r3, r2
    bfc2:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bfc6:	4630      	mov	r0, r6
    bfc8:	4639      	mov	r1, r7
    bfca:	f7fe fe8d 	bl	ace8 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    bfce:	4545      	cmp	r5, r8
    bfd0:	d1f1      	bne.n	bfb6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    bfd2:	f3bf 8f5b 	dmb	ish
    bfd6:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    bfda:	e853 2f00 	ldrex	r2, [r3]
    bfde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    bfe2:	e843 2100 	strex	r1, r2, [r3]
    bfe6:	2900      	cmp	r1, #0
    bfe8:	d1f7      	bne.n	bfda <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    bfea:	f3bf 8f5b 	dmb	ish
    bfee:	4e23      	ldr	r6, [pc, #140]	; (c07c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bff0:	2500      	movs	r5, #0
    bff2:	2700      	movs	r7, #0
    bff4:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    bff6:	2d06      	cmp	r5, #6
    bff8:	461a      	mov	r2, r3
    bffa:	4630      	mov	r0, r6
    bffc:	4639      	mov	r1, r7
    bffe:	f105 0501 	add.w	r5, r5, #1
    c002:	d122      	bne.n	c04a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    c004:	681a      	ldr	r2, [r3, #0]
    c006:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    c00a:	481c      	ldr	r0, [pc, #112]	; (c07c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    c00c:	ea23 0302 	bic.w	r3, r3, r2
    c010:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    c014:	2100      	movs	r1, #0
    c016:	f7fe fe67 	bl	ace8 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    c01a:	2300      	movs	r3, #0
    c01c:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    c020:	b003      	add	sp, #12
    c022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    c026:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    c02a:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    c02e:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    c032:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    c034:	4313      	orrs	r3, r2
    c036:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    c03a:	f7fe fe55 	bl	ace8 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    c03e:	f1ba 0f07 	cmp.w	sl, #7
    c042:	f10b 0b04 	add.w	fp, fp, #4
    c046:	d19e      	bne.n	bf86 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    c048:	e7af      	b.n	bfaa <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    c04a:	f853 3c18 	ldr.w	r3, [r3, #-24]
    c04e:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    c052:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    c054:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    c058:	ea23 0302 	bic.w	r3, r3, r2
    c05c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	3304      	adds	r3, #4
    c064:	9301      	str	r3, [sp, #4]
    c066:	f7fe fe3f 	bl	ace8 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    c06a:	2d07      	cmp	r5, #7
    c06c:	d1c2      	bne.n	bff4 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    c06e:	2300      	movs	r3, #0
    c070:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    c074:	b003      	add	sp, #12
    c076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c07a:	bf00      	nop
    c07c:	002dc6c0 	.word	0x002dc6c0
    c080:	005b8d80 	.word	0x005b8d80

0000c084 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    c086:	4d0e      	ldr	r5, [pc, #56]	; (c0c0 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    c088:	682b      	ldr	r3, [r5, #0]
    c08a:	f013 0401 	ands.w	r4, r3, #1
    c08e:	d002      	beq.n	c096 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    c090:	4b0c      	ldr	r3, [pc, #48]	; (c0c4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    c092:	6818      	ldr	r0, [r3, #0]
    c094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c096:	2010      	movs	r0, #16
    c098:	f007 f8c6 	bl	13228 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    c09c:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    c09e:	4909      	ldr	r1, [pc, #36]	; (c0c4 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    c0a0:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c0a2:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    c0a4:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    c0a6:	2617      	movs	r6, #23
      m_initialized(false) {
    c0a8:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    c0aa:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    c0ac:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    c0ae:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    c0b0:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    c0b2:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    c0b4:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    c0b6:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c0b8:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c0ba:	7342      	strb	r2, [r0, #13]
}
    c0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0be:	bf00      	nop
    c0c0:	20001d44 	.word	0x20001d44
    c0c4:	20001d4c 	.word	0x20001d4c

0000c0c8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    c0c8:	7843      	ldrb	r3, [r0, #1]
    c0ca:	428b      	cmp	r3, r1
    c0cc:	d06d      	beq.n	c1aa <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    c0ce:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    c0d4:	d071      	beq.n	c1ba <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    c0d6:	d363      	bcc.n	c1a0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    c0d8:	2902      	cmp	r1, #2
    c0da:	d16b      	bne.n	c1b4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    c0dc:	4e39      	ldr	r6, [pc, #228]	; (c1c4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    c0de:	f240 188f 	movw	r8, #399	; 0x18f
    c0e2:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    c0e6:	4a38      	ldr	r2, [pc, #224]	; (c1c8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    c0e8:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    c0ea:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    c0ec:	4b37      	ldr	r3, [pc, #220]	; (c1cc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    c0ee:	f36f 0441 	bfc	r4, #1, #1
    c0f2:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    c0f4:	681c      	ldr	r4, [r3, #0]
    c0f6:	f36f 0441 	bfc	r4, #1, #1
    c0fa:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    c0fc:	6893      	ldr	r3, [r2, #8]
    c0fe:	079c      	lsls	r4, r3, #30
    c100:	d4fc      	bmi.n	c0fc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    c102:	4d32      	ldr	r5, [pc, #200]	; (c1cc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    c104:	68ac      	ldr	r4, [r5, #8]
    c106:	f014 0402 	ands.w	r4, r4, #2
    c10a:	d1fb      	bne.n	c104 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    c10c:	4631      	mov	r1, r6
    c10e:	7800      	ldrb	r0, [r0, #0]
    c110:	4e2f      	ldr	r6, [pc, #188]	; (c1d0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    c112:	f000 fead 	bl	ce70 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    c116:	492f      	ldr	r1, [pc, #188]	; (c1d4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    c118:	4a2f      	ldr	r2, [pc, #188]	; (c1d8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    c11a:	4b2b      	ldr	r3, [pc, #172]	; (c1c8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    c11c:	482f      	ldr	r0, [pc, #188]	; (c1dc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    c11e:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    c120:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    c122:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    c124:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    c126:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    c128:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    c12a:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    c12c:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    c12e:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    c130:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    c132:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    c134:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    c138:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    c13a:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    c13c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    c140:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    c142:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    c146:	3018      	adds	r0, #24
    c148:	3104      	adds	r1, #4
    c14a:	3204      	adds	r2, #4
    c14c:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    c14e:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    c150:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    c152:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    c154:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    c156:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    c158:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    c15a:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    c15c:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    c160:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    c164:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    c168:	f856 0b04 	ldr.w	r0, [r6], #4
    c16c:	4639      	mov	r1, r7
    c16e:	3030      	adds	r0, #48	; 0x30
    c170:	f000 fcb2 	bl	cad8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    c174:	42b4      	cmp	r4, r6
    c176:	d1f7      	bne.n	c168 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    c178:	4a13      	ldr	r2, [pc, #76]	; (c1c8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    c17a:	4914      	ldr	r1, [pc, #80]	; (c1cc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    c17c:	6813      	ldr	r3, [r2, #0]
    c17e:	f043 0302 	orr.w	r3, r3, #2
    c182:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    c184:	680b      	ldr	r3, [r1, #0]
    c186:	f043 0302 	orr.w	r3, r3, #2
    c18a:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    c18c:	6893      	ldr	r3, [r2, #8]
    c18e:	0799      	lsls	r1, r3, #30
    c190:	d4fc      	bmi.n	c18c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    c192:	4a0e      	ldr	r2, [pc, #56]	; (c1cc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    c194:	6893      	ldr	r3, [r2, #8]
    c196:	079b      	lsls	r3, r3, #30
    c198:	d4fc      	bmi.n	c194 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    c19a:	2001      	movs	r0, #1
    c19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    c1a0:	f04f 0813 	mov.w	r8, #19
    c1a4:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    c1a6:	4e0e      	ldr	r6, [pc, #56]	; (c1e0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    c1a8:	e79d      	b.n	c0e6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    c1aa:	7b83      	ldrb	r3, [r0, #14]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d08e      	beq.n	c0ce <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    c1b0:	2000      	movs	r0, #0
    c1b2:	4770      	bx	lr
        return false;
    c1b4:	2000      	movs	r0, #0
    c1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    c1ba:	f04f 0863 	mov.w	r8, #99	; 0x63
    c1be:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    c1c0:	4e08      	ldr	r6, [pc, #32]	; (c1e4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    c1c2:	e790      	b.n	c0e6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    c1c4:	001e8480 	.word	0x001e8480
    c1c8:	41016000 	.word	0x41016000
    c1cc:	41018000 	.word	0x41018000
    c1d0:	00022e04 	.word	0x00022e04
    c1d4:	41016004 	.word	0x41016004
    c1d8:	41016008 	.word	0x41016008
    c1dc:	4101600c 	.word	0x4101600c
    c1e0:	000186a0 	.word	0x000186a0
    c1e4:	0007a120 	.word	0x0007a120

0000c1e8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    c1e8:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    c1ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c1ee:	4606      	mov	r6, r0
    c1f0:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    c1f2:	d036      	beq.n	c262 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    c1f4:	460c      	mov	r4, r1
    c1f6:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    c1fa:	2f03      	cmp	r7, #3
    c1fc:	d907      	bls.n	c20e <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    c1fe:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    c200:	7b38      	ldrb	r0, [r7, #12]
    c202:	1b40      	subs	r0, r0, r5
    c204:	fab0 f080 	clz	r0, r0
    c208:	0940      	lsrs	r0, r0, #5
    c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c20e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; c2d0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c212:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    c216:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c218:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    c21c:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c21e:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    c220:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c224:	685b      	ldr	r3, [r3, #4]
    c226:	4629      	mov	r1, r5
    c228:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    c22a:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    c22e:	6803      	ldr	r3, [r0, #0]
    c230:	4629      	mov	r1, r5
    c232:	685b      	ldr	r3, [r3, #4]
    c234:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    c236:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    c23a:	f997 2002 	ldrsb.w	r2, [r7, #2]
    c23e:	684b      	ldr	r3, [r1, #4]
    c240:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c244:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c248:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    c24c:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    c24e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    c252:	bf0c      	ite	eq
    c254:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    c258:	f36f 0200 	bfcne	r2, #0, #1
    c25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    c260:	e7ce      	b.n	c200 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    c262:	f1a2 0709 	sub.w	r7, r2, #9
    c266:	2f03      	cmp	r7, #3
    c268:	d907      	bls.n	c27a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    c26a:	7b33      	ldrb	r3, [r6, #12]
    c26c:	42ab      	cmp	r3, r5
    c26e:	d002      	beq.n	c276 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    c270:	2000      	movs	r0, #0
}
    c272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c276:	2401      	movs	r4, #1
    c278:	e7bf      	b.n	c1fa <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c27a:	f8df 9054 	ldr.w	r9, [pc, #84]	; c2d0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    c27e:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c280:	f8d9 0000 	ldr.w	r0, [r9]
    c284:	6803      	ldr	r3, [r0, #0]
    c286:	4611      	mov	r1, r2
    c288:	685b      	ldr	r3, [r3, #4]
    c28a:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    c28c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    c290:	6803      	ldr	r3, [r0, #0]
    c292:	4629      	mov	r1, r5
    c294:	685b      	ldr	r3, [r3, #4]
    c296:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    c298:	f996 2002 	ldrsb.w	r2, [r6, #2]
    c29c:	6873      	ldr	r3, [r6, #4]
    c29e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c2a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c2a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    c2aa:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    c2ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    c2b0:	d004      	beq.n	c2bc <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    c2b2:	f36f 0200 	bfc	r2, #0, #1
    c2b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    c2ba:	e7d6      	b.n	c26a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    c2bc:	f042 0201 	orr.w	r2, r2, #1
    c2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    c2c4:	7b33      	ldrb	r3, [r6, #12]
    c2c6:	2b0a      	cmp	r3, #10
    c2c8:	d1d2      	bne.n	c270 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    c2ca:	2401      	movs	r4, #1
    c2cc:	e7a1      	b.n	c212 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    c2ce:	bf00      	nop
    c2d0:	00022e04 	.word	0x00022e04

0000c2d4 <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    c2d4:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c2d6:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    c2d8:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c2da:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c2dc:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    c2de:	2101      	movs	r1, #1
    c2e0:	f7ff fef2 	bl	c0c8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c2e4:	f995 2002 	ldrsb.w	r2, [r5, #2]
    c2e8:	6868      	ldr	r0, [r5, #4]
    c2ea:	01d2      	lsls	r2, r2, #7
    c2ec:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    c2f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c2f4:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c2f6:	2101      	movs	r1, #1
    c2f8:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c2fa:	2600      	movs	r6, #0
    c2fc:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c300:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    c302:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    c306:	f010 0f01 	tst.w	r0, #1
    c30a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    c30e:	f04f 040c 	mov.w	r4, #12
    c312:	bf0c      	ite	eq
    c314:	f364 0003 	bfieq	r0, r4, #0, #4
    c318:	f364 1007 	bfine	r0, r4, #4, #4
    c31c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    c320:	4b2d      	ldr	r3, [pc, #180]	; (c3d8 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    c322:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c324:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    c326:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c328:	f995 2003 	ldrsb.w	r2, [r5, #3]
    c32c:	68a9      	ldr	r1, [r5, #8]
    c32e:	01d2      	lsls	r2, r2, #7
    c330:	4413      	add	r3, r2
    c332:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c334:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c336:	2600      	movs	r6, #0
    c338:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c33c:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    c33e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    c342:	f011 0f01 	tst.w	r1, #1
    c346:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    c34a:	4e24      	ldr	r6, [pc, #144]	; (c3dc <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    c34c:	f04f 040c 	mov.w	r4, #12
    c350:	bf14      	ite	ne
    c352:	f364 1107 	bfine	r1, r4, #4, #4
    c356:	f364 0103 	bfieq	r1, r4, #0, #4
    c35a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    c35e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    c362:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c366:	2400      	movs	r4, #0
    c368:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    c36a:	f856 0b04 	ldr.w	r0, [r6], #4
    c36e:	f3c4 0346 	ubfx	r3, r4, #1, #7
    c372:	6802      	ldr	r2, [r0, #0]
    c374:	442b      	add	r3, r5
    c376:	6852      	ldr	r2, [r2, #4]
    c378:	7b19      	ldrb	r1, [r3, #12]
    c37a:	3401      	adds	r4, #1
    c37c:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    c37e:	2c04      	cmp	r4, #4
    c380:	d1f3      	bne.n	c36a <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c382:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c384:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c388:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c38a:	686b      	ldr	r3, [r5, #4]
    c38c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c390:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c394:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c398:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c39c:	bf14      	ite	ne
    c39e:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c3a2:	f042 0201 	orreq.w	r2, r2, #1
    c3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c3aa:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c3ac:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c3b0:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c3b2:	68ab      	ldr	r3, [r5, #8]
    c3b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c3b8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c3bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c3c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    c3c4:	bf0c      	ite	eq
    c3c6:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c3ca:	f36f 0200 	bfcne	r2, #0, #1
    c3ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    c3d2:	2301      	movs	r3, #1
    c3d4:	73ab      	strb	r3, [r5, #14]
    c3d6:	bd70      	pop	{r4, r5, r6, pc}
    c3d8:	41008000 	.word	0x41008000
    c3dc:	00022e04 	.word	0x00022e04

0000c3e0 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    c3e0:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    c3e2:	f7ff fe4f 	bl	c084 <_ZN9ClearCore12MotorManager8InstanceEv>
    c3e6:	4b01      	ldr	r3, [pc, #4]	; (c3ec <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    c3e8:	6018      	str	r0, [r3, #0]
    c3ea:	bd08      	pop	{r3, pc}
    c3ec:	20001d48 	.word	0x20001d48

0000c3f0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3f2:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    c3f4:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    c3f6:	f890 3020 	ldrb.w	r3, [r0, #32]
    c3fa:	b113      	cbz	r3, c402 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    c3fc:	2300      	movs	r3, #0
    c3fe:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    c400:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    c402:	b362      	cbz	r2, c45e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    c404:	69a0      	ldr	r0, [r4, #24]
    c406:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    c408:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    c40a:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    c40c:	bb2b      	cbnz	r3, c45a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    c40e:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    c410:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    c414:	f647 76ff 	movw	r6, #32767	; 0x7fff
    c418:	2700      	movs	r7, #0
    c41a:	4032      	ands	r2, r6
    c41c:	403b      	ands	r3, r7
    m_stepsSent = 0;
    c41e:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    c420:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    c422:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    c426:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    c428:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    c42c:	f00f fabc 	bl	1b9a8 <__aeabi_i2d>
    c430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    c434:	4619      	mov	r1, r3
    c436:	f00f fdb7 	bl	1bfa8 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    c43a:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c43c:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    c43e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c440:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    c442:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    c446:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    c448:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    c44a:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c44c:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    c44e:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c450:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    c452:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c454:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    c456:	4618      	mov	r0, r3
    c458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    c45a:	4240      	negs	r0, r0
    c45c:	e7d7      	b.n	c40e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    c45e:	6960      	ldr	r0, [r4, #20]
    c460:	1a08      	subs	r0, r1, r0
            break;
    c462:	e7d5      	b.n	c410 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000c464 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c466:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    c468:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    c46a:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    c46c:	0fca      	lsrs	r2, r1, #31
    c46e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    c472:	f884 3020 	strb.w	r3, [r4, #32]
    c476:	4608      	mov	r0, r1
    c478:	f00f fa96 	bl	1b9a8 <__aeabi_i2d>
    c47c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    c480:	4619      	mov	r1, r3
    c482:	f00f fd91 	bl	1bfa8 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    c486:	17c3      	asrs	r3, r0, #31
    c488:	03d9      	lsls	r1, r3, #15
    c48a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    c48e:	f241 3288 	movw	r2, #5000	; 0x1388
    c492:	2300      	movs	r3, #0
    c494:	03c0      	lsls	r0, r0, #15
    c496:	f00f ff2d 	bl	1c2f4 <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    c49a:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c49c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    c4a0:	03de      	lsls	r6, r3, #15
    c4a2:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c4a4:	42b2      	cmp	r2, r6
    c4a6:	f04f 0300 	mov.w	r3, #0
    c4aa:	eb73 0507 	sbcs.w	r5, r3, r7
    c4ae:	bfbc      	itt	lt
    c4b0:	4616      	movlt	r6, r2
    c4b2:	461f      	movlt	r7, r3
    c4b4:	4286      	cmp	r6, r0
    c4b6:	460b      	mov	r3, r1
    c4b8:	4602      	mov	r2, r0
    c4ba:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    c4be:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c4c2:	bfb8      	it	lt
    c4c4:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    c4c6:	2700      	movs	r7, #0
    c4c8:	f647 76ff 	movw	r6, #32767	; 0x7fff
    c4cc:	4030      	ands	r0, r6
    c4ce:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    c4d0:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    c4d2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c4d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c4d6:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c4d8:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    c4da:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    c4de:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    c4e0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    c4e4:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    c4e6:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    c4e8:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c4ea:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    c4ec:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    c4ee:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    c4f0:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c4f2:	b662      	cpsie	i
}
    c4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4f6:	bf00      	nop

0000c4f8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    c4fc:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    c4fe:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    c502:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    c504:	b085      	sub	sp, #20
    c506:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    c508:	d038      	beq.n	c57c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    c50a:	2b07      	cmp	r3, #7
    c50c:	f200 80da 	bhi.w	c6c4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    c510:	e8df f013 	tbh	[pc, r3, lsl #1]
    c514:	00d8002f 	.word	0x00d8002f
    c518:	00be01d7 	.word	0x00be01d7
    c51c:	025f0086 	.word	0x025f0086
    c520:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    c524:	7b41      	ldrb	r1, [r0, #13]
    c526:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    c52a:	428b      	cmp	r3, r1
    c52c:	f000 822d 	beq.w	c98a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    c530:	6980      	ldr	r0, [r0, #24]
    c532:	69e3      	ldr	r3, [r4, #28]
    c534:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    c536:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c53a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    c53e:	2300      	movs	r3, #0
    c540:	4016      	ands	r6, r2
    c542:	401f      	ands	r7, r3
    c544:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    c548:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    c54c:	2501      	movs	r5, #1
            m_moveDirChange = false;
    c54e:	2300      	movs	r3, #0
    c550:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    c552:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    c556:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    c558:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    c55c:	0bf2      	lsrs	r2, r6, #15
    c55e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    c562:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    c564:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    c566:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    c568:	6962      	ldr	r2, [r4, #20]
    c56a:	b101      	cbz	r1, c56e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    c56c:	425b      	negs	r3, r3
    c56e:	4413      	add	r3, r2
    c570:	6163      	str	r3, [r4, #20]
}
    c572:	b005      	add	sp, #20
    c574:	ecbd 8b02 	vpop	{d8}
    c578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    c57c:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    c57e:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    c582:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    c586:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    c58a:	1457      	asrs	r7, r2, #17
    c58c:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    c58e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    c592:	2900      	cmp	r1, #0
    c594:	d163      	bne.n	c65e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    c596:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c598:	2d00      	cmp	r5, #0
    c59a:	f000 8117 	beq.w	c7cc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    c59e:	7b41      	ldrb	r1, [r0, #13]
    c5a0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    c5a4:	9100      	str	r1, [sp, #0]
    c5a6:	4291      	cmp	r1, r2
    c5a8:	f000 81f8 	beq.w	c99c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    c5ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    c5b0:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    c5b2:	2305      	movs	r3, #5
    c5b4:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    c5b6:	6520      	str	r0, [r4, #80]	; 0x50
    c5b8:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c5ba:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c5be:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    c5c2:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    c5c4:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c5c8:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    c5cc:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c5ce:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    c5d2:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    c5d4:	f300 80ab 	bgt.w	c72e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    c5d8:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    c5da:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c5de:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    c5e2:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    c5e4:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c5e8:	4629      	mov	r1, r5
    c5ea:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    c5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c5f0:	f00f fed0 	bl	1c394 <__aeabi_uldivmod>
    c5f4:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    c5f6:	fba0 bc05 	umull	fp, ip, r0, r5
    c5fa:	fb00 cc03 	mla	ip, r0, r3, ip
    c5fe:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    c602:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    c604:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    c608:	eb47 0709 	adc.w	r7, r7, r9
    c60c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    c610:	2900      	cmp	r1, #0
    c612:	f000 816e 	beq.w	c8f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    c616:	2307      	movs	r3, #7
    c618:	7323      	strb	r3, [r4, #12]
    c61a:	9900      	ldr	r1, [sp, #0]
    c61c:	69e3      	ldr	r3, [r4, #28]
    c61e:	e79d      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c620:	6c01      	ldr	r1, [r0, #64]	; 0x40
    c622:	6c40      	ldr	r0, [r0, #68]	; 0x44
    c624:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c628:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c62c:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    c630:	1952      	adds	r2, r2, r5
    c632:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c636:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    c638:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c63c:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    c640:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c642:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c646:	da54      	bge.n	c6f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    c648:	2900      	cmp	r1, #0
    c64a:	dd52      	ble.n	c6f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    c64c:	2a01      	cmp	r2, #1
    c64e:	f173 0100 	sbcs.w	r1, r3, #0
    c652:	db4e      	blt.n	c6f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    c654:	461f      	mov	r7, r3
    c656:	4616      	mov	r6, r2
    c658:	69e3      	ldr	r3, [r4, #28]
    c65a:	7b61      	ldrb	r1, [r4, #13]
    c65c:	e77e      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    c65e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    c660:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c662:	2b00      	cmp	r3, #0
    c664:	f000 80a1 	beq.w	c7aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    c668:	2d00      	cmp	r5, #0
    c66a:	f040 8130 	bne.w	c8ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    c66e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    c672:	6820      	ldr	r0, [r4, #0]
    c674:	6523      	str	r3, [r4, #80]	; 0x50
    c676:	2100      	movs	r1, #0
    c678:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    c67a:	7362      	strb	r2, [r4, #13]
    c67c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    c680:	4620      	mov	r0, r4
    c682:	4798      	blx	r3
    c684:	7b63      	ldrb	r3, [r4, #13]
    c686:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    c68a:	6c25      	ldr	r5, [r4, #64]	; 0x40
    c68c:	9300      	str	r3, [sp, #0]
    c68e:	e094      	b.n	c7ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    c690:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    c694:	7b43      	ldrb	r3, [r0, #13]
    c696:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    c69a:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    c69c:	4652      	mov	r2, sl
    c69e:	eb16 060a 	adds.w	r6, r6, sl
    c6a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    c6a6:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    c6aa:	415f      	adcs	r7, r3
    c6ac:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    c6b0:	2900      	cmp	r1, #0
    c6b2:	d03f      	beq.n	c734 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    c6b4:	f1ba 0f00 	cmp.w	sl, #0
    c6b8:	d139      	bne.n	c72e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    c6ba:	2306      	movs	r3, #6
    c6bc:	7323      	strb	r3, [r4, #12]
    c6be:	9900      	ldr	r1, [sp, #0]
    c6c0:	69e3      	ldr	r3, [r4, #28]
    c6c2:	e74b      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    c6c4:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    c6c6:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    c6c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    c6cc:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    c6d0:	2000      	movs	r0, #0
    c6d2:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    c6d4:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    c6d6:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    c6d8:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    c6da:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    c6dc:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    c6de:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    c6e0:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    c6e4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    c6e8:	b005      	add	sp, #20
    c6ea:	ecbd 8b02 	vpop	{d8}
    c6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    c6f2:	2300      	movs	r3, #0
                m_moveState = MS_END;
    c6f4:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    c6f6:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    c6f8:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    c6fa:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    c6fe:	7322      	strb	r2, [r4, #12]
    c700:	69e3      	ldr	r3, [r4, #28]
    c702:	7b61      	ldrb	r1, [r4, #13]
    c704:	e72a      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    c706:	2302      	movs	r3, #2
    c708:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    c70a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c70e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c710:	eb05 0263 	add.w	r2, r5, r3, asr #1
    c714:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    c716:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    c718:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    c71c:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    c71e:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    c720:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    c724:	f280 80a2 	bge.w	c86c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    c728:	2d00      	cmp	r5, #0
    c72a:	f340 809f 	ble.w	c86c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    c72e:	9900      	ldr	r1, [sp, #0]
    c730:	69e3      	ldr	r3, [r4, #28]
    c732:	e713      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    c734:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    c738:	4286      	cmp	r6, r0
    c73a:	eb77 0501 	sbcs.w	r5, r7, r1
    c73e:	da03      	bge.n	c748 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    c740:	2e01      	cmp	r6, #1
    c742:	f177 0500 	sbcs.w	r5, r7, #0
    c746:	daf2      	bge.n	c72e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    c748:	2500      	movs	r5, #0
    c74a:	1a31      	subs	r1, r6, r0
    c74c:	4628      	mov	r0, r5
    c74e:	f00f fe21 	bl	1c394 <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    c752:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    c754:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    c758:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    c75a:	fb00 9e03 	mla	lr, r0, r3, r9
    c75e:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    c760:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    c764:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    c768:	fb0e 330c 	mla	r3, lr, ip, r3
    c76c:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    c76e:	1a32      	subs	r2, r6, r0
    c770:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    c774:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    c778:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    c77a:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    c77e:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    c782:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    c784:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    c788:	f280 80a9 	bge.w	c8de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    c78c:	42a8      	cmp	r0, r5
    c78e:	f340 80a6 	ble.w	c8de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    c792:	2a01      	cmp	r2, #1
    c794:	f173 0100 	sbcs.w	r1, r3, #0
    c798:	f2c0 80a1 	blt.w	c8de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    c79c:	2004      	movs	r0, #4
    c79e:	461f      	mov	r7, r3
    c7a0:	9900      	ldr	r1, [sp, #0]
    c7a2:	7320      	strb	r0, [r4, #12]
    c7a4:	4616      	mov	r6, r2
    c7a6:	69e3      	ldr	r3, [r4, #28]
    c7a8:	e6d8      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    c7aa:	7b42      	ldrb	r2, [r0, #13]
    c7ac:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    c7ae:	4619      	mov	r1, r3
    c7b0:	2000      	movs	r0, #0
    c7b2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    c7b6:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    c7b8:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    c7ba:	4555      	cmp	r5, sl
    c7bc:	f000 80db 	beq.w	c976 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    c7c0:	dda1      	ble.n	c706 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    c7c2:	2305      	movs	r3, #5
    c7c4:	7323      	strb	r3, [r4, #12]
    c7c6:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    c7ca:	e6f6      	b.n	c5ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    c7cc:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    c7d0:	4611      	mov	r1, r2
    c7d2:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    c7d4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    c7d8:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    c7da:	4613      	mov	r3, r2
    c7dc:	429f      	cmp	r7, r3
    c7de:	bf08      	it	eq
    c7e0:	428e      	cmpeq	r6, r1
    c7e2:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    c7e6:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    c7ea:	d00e      	beq.n	c80a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    c7ec:	6803      	ldr	r3, [r0, #0]
    c7ee:	689b      	ldr	r3, [r3, #8]
    c7f0:	4798      	blx	r3
    c7f2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    c7f6:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	f040 80ca 	bne.w	c992 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    c7fe:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    c802:	e9cd 2300 	strd	r2, r3, [sp]
    c806:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    c80a:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    c80e:	0fcb      	lsrs	r3, r1, #31
    c810:	18c0      	adds	r0, r0, r3
    c812:	464e      	mov	r6, r9
    c814:	f141 0100 	adc.w	r1, r1, #0
    c818:	17f7      	asrs	r7, r6, #31
    c81a:	1049      	asrs	r1, r1, #1
    c81c:	ea4f 0030 	mov.w	r0, r0, rrx
    c820:	464a      	mov	r2, r9
    c822:	463b      	mov	r3, r7
    c824:	f00f fd66 	bl	1c2f4 <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    c828:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    c82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    c830:	464a      	mov	r2, r9
    c832:	463b      	mov	r3, r7
    c834:	fb8a 010a 	smull	r0, r1, sl, sl
    c838:	f00f fd5c 	bl	1c2f4 <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    c83c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c840:	1a82      	subs	r2, r0, r2
    c842:	eb61 0303 	sbc.w	r3, r1, r3
    c846:	4610      	mov	r0, r2
    c848:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    c84a:	e9dd 2300 	ldrd	r2, r3, [sp]
    c84e:	4282      	cmp	r2, r0
    c850:	418b      	sbcs	r3, r1
    c852:	db63      	blt.n	c91c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    c854:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    c858:	4555      	cmp	r5, sl
    c85a:	f340 8091 	ble.w	c980 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    c85e:	2305      	movs	r3, #5
    c860:	7323      	strb	r3, [r4, #12]
    c862:	7b63      	ldrb	r3, [r4, #13]
    c864:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    c868:	9300      	str	r3, [sp, #0]
    c86a:	e6a6      	b.n	c5ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    c86c:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    c86e:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    c872:	4691      	mov	r9, r2
    c874:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c876:	461a      	mov	r2, r3
    c878:	4629      	mov	r1, r5
    c87a:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    c87c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c880:	2000      	movs	r0, #0
    c882:	f00f fd87 	bl	1c394 <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    c886:	4602      	mov	r2, r0
    c888:	fba2 0105 	umull	r0, r1, r2, r5
    c88c:	2300      	movs	r3, #0
    c88e:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    c892:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    c896:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    c898:	4642      	mov	r2, r8
    c89a:	464b      	mov	r3, r9
    c89c:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    c8a0:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    c8a4:	f00f fd76 	bl	1c394 <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c8a8:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    c8ac:	0849      	lsrs	r1, r1, #1
    c8ae:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c8b2:	1a12      	subs	r2, r2, r0
    c8b4:	eb63 0301 	sbc.w	r3, r3, r1
    c8b8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    c8bc:	2303      	movs	r3, #3
    c8be:	7323      	strb	r3, [r4, #12]
    c8c0:	e6ec      	b.n	c69c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    c8c2:	7b43      	ldrb	r3, [r0, #13]
    c8c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c8c6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    c8ca:	9300      	str	r3, [sp, #0]
    c8cc:	e71d      	b.n	c70a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    c8ce:	7b40      	ldrb	r0, [r0, #13]
    c8d0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    c8d4:	9000      	str	r0, [sp, #0]
    c8d6:	4290      	cmp	r0, r2
    c8d8:	f47f af6a 	bne.w	c7b0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    c8dc:	e6c9      	b.n	c672 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    c8de:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    c8e0:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    c8e2:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    c8e4:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    c8e6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c8ea:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    c8ec:	7322      	strb	r2, [r4, #12]
    c8ee:	69e3      	ldr	r3, [r4, #28]
    c8f0:	e634      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    c8f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8f6:	fb8a 010a 	smull	r0, r1, sl, sl
    c8fa:	f00f fd4b 	bl	1c394 <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c8fe:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    c902:	0849      	lsrs	r1, r1, #1
    c904:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c908:	1a12      	subs	r2, r2, r0
    c90a:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    c90e:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c910:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    c914:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    c916:	7320      	strb	r0, [r4, #12]
    c918:	69e3      	ldr	r3, [r4, #28]
    c91a:	e61f      	b.n	c55c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c91c:	69a6      	ldr	r6, [r4, #24]
    c91e:	17f1      	asrs	r1, r6, #31
    c920:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    c922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c926:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    c928:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c92a:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    c92e:	4159      	adcs	r1, r3
    c930:	460b      	mov	r3, r1
    c932:	fb00 f107 	mul.w	r1, r0, r7
    c936:	fb09 1303 	mla	r3, r9, r3, r1
    c93a:	fba0 0109 	umull	r0, r1, r0, r9
    c93e:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    c940:	f00f fc9a 	bl	1c278 <__aeabi_l2f>
    c944:	ee00 0a10 	vmov	s0, r0
    c948:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c950:	eeb1 8ac0 	vsqrt.f32	s16, s0
    c954:	d439      	bmi.n	c9ca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    c956:	ee18 0a10 	vmov	r0, s16
    c95a:	f00f fd33 	bl	1c3c4 <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    c95e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    c962:	4282      	cmp	r2, r0
    c964:	f04f 0300 	mov.w	r3, #0
    c968:	eb73 0601 	sbcs.w	r6, r3, r1
    c96c:	bfb8      	it	lt
    c96e:	4610      	movlt	r0, r2
    c970:	6520      	str	r0, [r4, #80]	; 0x50
    c972:	4682      	mov	sl, r0
    c974:	e770      	b.n	c858 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    c976:	2303      	movs	r3, #3
    c978:	7323      	strb	r3, [r4, #12]
    c97a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c97e:	e68d      	b.n	c69c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    c980:	2302      	movs	r3, #2
    c982:	7323      	strb	r3, [r4, #12]
    c984:	7b63      	ldrb	r3, [r4, #13]
    c986:	9300      	str	r3, [sp, #0]
    c988:	e6bf      	b.n	c70a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    c98a:	69c0      	ldr	r0, [r0, #28]
    c98c:	69a3      	ldr	r3, [r4, #24]
    c98e:	1ac0      	subs	r0, r0, r3
    c990:	e5d1      	b.n	c536 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    c992:	7b63      	ldrb	r3, [r4, #13]
    c994:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    c998:	9300      	str	r3, [sp, #0]
    c99a:	e609      	b.n	c5b0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    c99c:	464a      	mov	r2, r9
    c99e:	17d3      	asrs	r3, r2, #31
    c9a0:	fb85 0105 	smull	r0, r1, r5, r5
    c9a4:	f00f fca6 	bl	1c2f4 <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    c9a8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    c9ac:	1049      	asrs	r1, r1, #1
    c9ae:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    c9b2:	1ab6      	subs	r6, r6, r2
    c9b4:	eb67 0703 	sbc.w	r7, r7, r3
    c9b8:	4286      	cmp	r6, r0
    c9ba:	eb77 0301 	sbcs.w	r3, r7, r1
    c9be:	bfb4      	ite	lt
    c9c0:	2301      	movlt	r3, #1
    c9c2:	2300      	movge	r3, #0
    c9c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    c9c8:	e716      	b.n	c7f8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    c9ca:	f00e fa29 	bl	1ae20 <sqrtf>
    c9ce:	6c25      	ldr	r5, [r4, #64]	; 0x40
    c9d0:	e7c1      	b.n	c956 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    c9d2:	7b43      	ldrb	r3, [r0, #13]
    c9d4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c9d6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    c9da:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    c9de:	9300      	str	r3, [sp, #0]
    c9e0:	e5eb      	b.n	c5ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    c9e2:	bf00      	nop

0000c9e4 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    c9e4:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    c9e6:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    c9e8:	4916      	ldr	r1, [pc, #88]	; (ca44 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    c9ea:	6001      	str	r1, [r0, #0]
    c9ec:	2200      	movs	r2, #0
    c9ee:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    c9f2:	2501      	movs	r5, #1
    c9f4:	2102      	movs	r1, #2
    c9f6:	2600      	movs	r6, #0
    c9f8:	2700      	movs	r7, #0
    c9fa:	f362 1486 	bfi	r4, r2, #6, #1
    c9fe:	7404      	strb	r4, [r0, #16]
    ca00:	6042      	str	r2, [r0, #4]
    ca02:	6082      	str	r2, [r0, #8]
    ca04:	7302      	strb	r2, [r0, #12]
    ca06:	7342      	strb	r2, [r0, #13]
    ca08:	6142      	str	r2, [r0, #20]
    ca0a:	6182      	str	r2, [r0, #24]
    ca0c:	61c2      	str	r2, [r0, #28]
    ca0e:	f880 2020 	strb.w	r2, [r0, #32]
    ca12:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    ca16:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    ca1a:	6282      	str	r2, [r0, #40]	; 0x28
    ca1c:	6402      	str	r2, [r0, #64]	; 0x40
    ca1e:	6442      	str	r2, [r0, #68]	; 0x44
    ca20:	6502      	str	r2, [r0, #80]	; 0x50
    ca22:	6642      	str	r2, [r0, #100]	; 0x64
    ca24:	7385      	strb	r5, [r0, #14]
    ca26:	6245      	str	r5, [r0, #36]	; 0x24
    ca28:	6605      	str	r5, [r0, #96]	; 0x60
    ca2a:	62c1      	str	r1, [r0, #44]	; 0x2c
    ca2c:	6301      	str	r1, [r0, #48]	; 0x30
    ca2e:	6681      	str	r1, [r0, #104]	; 0x68
    ca30:	66c1      	str	r1, [r0, #108]	; 0x6c
    ca32:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    ca36:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    ca3a:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    ca3e:	bcf0      	pop	{r4, r5, r6, r7}
    ca40:	4770      	bx	lr
    ca42:	bf00      	nop
    ca44:	000231f4 	.word	0x000231f4

0000ca48 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    ca48:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    ca4a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    ca4c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ca4e:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    ca50:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ca52:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    ca54:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    ca56:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    ca58:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    ca5a:	2700      	movs	r7, #0
    ca5c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    ca60:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    ca62:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    ca64:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    ca66:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    ca68:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    ca6a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    ca6c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    ca70:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    ca72:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    ca74:	b662      	cpsie	i
}
    ca76:	bcd0      	pop	{r4, r6, r7}
    ca78:	4770      	bx	lr
    ca7a:	bf00      	nop
    ca7c:	0000      	movs	r0, r0
	...

0000ca80 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    ca80:	b510      	push	{r4, lr}
    ca82:	4604      	mov	r4, r0
    if (decelMax != 0) {
    ca84:	b191      	cbz	r1, caac <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    ca86:	a312      	add	r3, pc, #72	; (adr r3, cad0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca8c:	03c8      	lsls	r0, r1, #15
    ca8e:	0c49      	lsrs	r1, r1, #17
    ca90:	f00f fc30 	bl	1c2f4 <__aeabi_ldivmod>
    ca94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ca96:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    ca98:	f020 0201 	bic.w	r2, r0, #1
    ca9c:	bfb8      	it	lt
    ca9e:	2302      	movlt	r3, #2
    caa0:	4293      	cmp	r3, r2
    caa2:	4618      	mov	r0, r3
    caa4:	bfb8      	it	lt
    caa6:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    caa8:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    caaa:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    caac:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    caae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    cab0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    cab2:	4293      	cmp	r3, r2
    cab4:	bfb8      	it	lt
    cab6:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    cab8:	2100      	movs	r1, #0
    m_velocityMove = true;
    caba:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    cabc:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    cabe:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    cac0:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    cac4:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    cac6:	b662      	cpsie	i
    cac8:	bd10      	pop	{r4, pc}
    caca:	bf00      	nop
    cacc:	f3af 8000 	nop.w
    cad0:	017d7840 	.word	0x017d7840
    cad4:	00000000 	.word	0x00000000

0000cad8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    cad8:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    cada:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    cadc:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    cade:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    cae0:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    cae2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    cae4:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    cae6:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    cae8:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    caea:	2700      	movs	r7, #0
    caec:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    caf0:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    caf2:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    caf4:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    caf6:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    caf8:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    cafa:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    cafc:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    cb00:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    cb02:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    cb04:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    cb06:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    cb0a:	03ca      	lsls	r2, r1, #15
    cb0c:	0c4b      	lsrs	r3, r1, #17
    cb0e:	4294      	cmp	r4, r2
    cb10:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    cb14:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    cb16:	eb75 0103 	sbcs.w	r1, r5, r3
    cb1a:	bfbc      	itt	lt
    cb1c:	4622      	movlt	r2, r4
    cb1e:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    cb20:	2a01      	cmp	r2, #1
    cb22:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    cb26:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    cb28:	bfbc      	itt	lt
    cb2a:	2201      	movlt	r2, #1
    cb2c:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    cb2e:	17e5      	asrs	r5, r4, #31
    cb30:	4294      	cmp	r4, r2
    cb32:	eb75 0103 	sbcs.w	r1, r5, r3
    cb36:	bfb8      	it	lt
    cb38:	4622      	movlt	r2, r4
    cb3a:	6602      	str	r2, [r0, #96]	; 0x60
}
    cb3c:	bcf0      	pop	{r4, r5, r6, r7}
    cb3e:	4770      	bx	lr

0000cb40 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    cb40:	6843      	ldr	r3, [r0, #4]
    cb42:	b363      	cbz	r3, cb9e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    cb44:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    cb46:	f013 0218 	ands.w	r2, r3, #24
    cb4a:	d12a      	bne.n	cba2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    cb4c:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    cb4e:	7c02      	ldrb	r2, [r0, #16]
    cb50:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    cb54:	b2d2      	uxtb	r2, r2
    cb56:	4613      	mov	r3, r2
    cb58:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    cb5c:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    cb60:	b2db      	uxtb	r3, r3
    cb62:	461a      	mov	r2, r3
    cb64:	f3c3 1300 	ubfx	r3, r3, #4, #1
    cb68:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    cb6c:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    cb6e:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    cb70:	075a      	lsls	r2, r3, #29
    cb72:	d514      	bpl.n	cb9e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    cb74:	7b42      	ldrb	r2, [r0, #13]
    cb76:	b9e2      	cbnz	r2, cbb2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    cb78:	0719      	lsls	r1, r3, #28
    cb7a:	d510      	bpl.n	cb9e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    cb7c:	f043 0301 	orr.w	r3, r3, #1
    cb80:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    cb82:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    cb84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    cb86:	6b02      	ldr	r2, [r0, #48]	; 0x30
    cb88:	4293      	cmp	r3, r2
    cb8a:	bfb8      	it	lt
    cb8c:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    cb8e:	2100      	movs	r1, #0
    m_velocityMove = true;
    cb90:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    cb92:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    cb94:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    cb96:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    cb9a:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    cb9c:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    cb9e:	2000      	movs	r0, #0
    cba0:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    cba2:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    cba6:	f3c3 1341 	ubfx	r3, r3, #5, #2
    cbaa:	1ad3      	subs	r3, r2, r3
    cbac:	bf18      	it	ne
    cbae:	2301      	movne	r3, #1
    cbb0:	e7cd      	b.n	cb4e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    cbb2:	06da      	lsls	r2, r3, #27
    cbb4:	d5f3      	bpl.n	cb9e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    cbb6:	f043 0302 	orr.w	r3, r3, #2
    cbba:	7403      	strb	r3, [r0, #16]
    cbbc:	e7e1      	b.n	cb82 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    cbbe:	bf00      	nop

0000cbc0 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    cbc0:	4ba1      	ldr	r3, [pc, #644]	; (ce48 <SystemInit+0x288>)
    cbc2:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    cbc6:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    cbc8:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    cbca:	691a      	ldr	r2, [r3, #16]
    cbcc:	0792      	lsls	r2, r2, #30
    cbce:	d5fc      	bpl.n	cbca <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    cbd0:	4a9e      	ldr	r2, [pc, #632]	; (ce4c <SystemInit+0x28c>)
    cbd2:	4b9f      	ldr	r3, [pc, #636]	; (ce50 <SystemInit+0x290>)
    cbd4:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    cbd6:	6853      	ldr	r3, [r2, #4]
    cbd8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    cbdc:	d1fb      	bne.n	cbd6 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    cbde:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    cbe2:	499a      	ldr	r1, [pc, #616]	; (ce4c <SystemInit+0x28c>)
    cbe4:	f363 1086 	bfi	r0, r3, #6, #1
    cbe8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    cbec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    cbf0:	065b      	lsls	r3, r3, #25
    cbf2:	d4fb      	bmi.n	cbec <SystemInit+0x2c>
    cbf4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    cbf8:	4a94      	ldr	r2, [pc, #592]	; (ce4c <SystemInit+0x28c>)
    cbfa:	2005      	movs	r0, #5
    cbfc:	f360 0303 	bfi	r3, r0, #0, #4
    cc00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    cc04:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    cc08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cc0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    cc10:	6853      	ldr	r3, [r2, #4]
    cc12:	f013 0f14 	tst.w	r3, #20
    cc16:	d1fb      	bne.n	cc10 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    cc18:	4b8b      	ldr	r3, [pc, #556]	; (ce48 <SystemInit+0x288>)
    cc1a:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    cc1c:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    cc1e:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    cc20:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    cc22:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    cc24:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    cc26:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    cc2a:	6913      	ldr	r3, [r2, #16]
    cc2c:	01df      	lsls	r7, r3, #7
    cc2e:	d4fc      	bmi.n	cc2a <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    cc30:	4a86      	ldr	r2, [pc, #536]	; (ce4c <SystemInit+0x28c>)
    cc32:	f44f 7384 	mov.w	r3, #264	; 0x108
    cc36:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    cc38:	6853      	ldr	r3, [r2, #4]
    cc3a:	f013 0304 	ands.w	r3, r3, #4
    cc3e:	d1fb      	bne.n	cc38 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    cc40:	4884      	ldr	r0, [pc, #528]	; (ce54 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    cc42:	4982      	ldr	r1, [pc, #520]	; (ce4c <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    cc44:	2401      	movs	r4, #1
    cc46:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    cc48:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    cc4c:	f363 1086 	bfi	r0, r3, #6, #1
    cc50:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    cc54:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    cc58:	065e      	lsls	r6, r3, #25
    cc5a:	d4fb      	bmi.n	cc54 <SystemInit+0x94>
    cc5c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    cc60:	4a7a      	ldr	r2, [pc, #488]	; (ce4c <SystemInit+0x28c>)
    cc62:	2005      	movs	r0, #5
    cc64:	f360 0303 	bfi	r3, r0, #0, #4
    cc68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    cc6c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    cc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cc74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    cc78:	6853      	ldr	r3, [r2, #4]
    cc7a:	f013 0314 	ands.w	r3, r3, #20
    cc7e:	d1fb      	bne.n	cc78 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    cc80:	4871      	ldr	r0, [pc, #452]	; (ce48 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    cc82:	4972      	ldr	r1, [pc, #456]	; (ce4c <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    cc84:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    cc86:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    cc88:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    cc8a:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    cc8c:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    cc8e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    cc92:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    cc96:	f363 1086 	bfi	r0, r3, #6, #1
    cc9a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    cc9e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    cca2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cca6:	2b00      	cmp	r3, #0
    cca8:	d1f9      	bne.n	cc9e <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    ccaa:	4c67      	ldr	r4, [pc, #412]	; (ce48 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    ccac:	486a      	ldr	r0, [pc, #424]	; (ce58 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    ccae:	4a67      	ldr	r2, [pc, #412]	; (ce4c <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    ccb0:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    ccb2:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    ccb4:	6853      	ldr	r3, [r2, #4]
    ccb6:	065d      	lsls	r5, r3, #25
    ccb8:	d4fc      	bmi.n	ccb4 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ccba:	4b66      	ldr	r3, [pc, #408]	; (ce54 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    ccbc:	4967      	ldr	r1, [pc, #412]	; (ce5c <SystemInit+0x29c>)
    ccbe:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ccc0:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    ccc2:	4e67      	ldr	r6, [pc, #412]	; (ce60 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    ccc4:	4d67      	ldr	r5, [pc, #412]	; (ce64 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    ccc6:	4c68      	ldr	r4, [pc, #416]	; (ce68 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    ccc8:	4960      	ldr	r1, [pc, #384]	; (ce4c <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ccca:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    ccce:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    ccd0:	6998      	ldr	r0, [r3, #24]
    ccd2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    ccd6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    ccd8:	6958      	ldr	r0, [r3, #20]
    ccda:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ccde:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    cce0:	6998      	ldr	r0, [r3, #24]
    cce2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    cce6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    cce8:	6998      	ldr	r0, [r3, #24]
    ccea:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    ccee:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    ccf0:	69d8      	ldr	r0, [r3, #28]
    ccf2:	f040 0020 	orr.w	r0, r0, #32
    ccf6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    ccf8:	6918      	ldr	r0, [r3, #16]
    ccfa:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    ccfe:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    cd00:	69d8      	ldr	r0, [r3, #28]
    cd02:	f040 0004 	orr.w	r0, r0, #4
    cd06:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    cd08:	6a18      	ldr	r0, [r3, #32]
    cd0a:	f040 0001 	orr.w	r0, r0, #1
    cd0e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    cd10:	6a18      	ldr	r0, [r3, #32]
    cd12:	f040 0008 	orr.w	r0, r0, #8
    cd16:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    cd18:	6a18      	ldr	r0, [r3, #32]
    cd1a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    cd1e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    cd20:	69d8      	ldr	r0, [r3, #28]
    cd22:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    cd26:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    cd28:	6958      	ldr	r0, [r3, #20]
    cd2a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    cd2e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    cd30:	6a18      	ldr	r0, [r3, #32]
    cd32:	f040 0020 	orr.w	r0, r0, #32
    cd36:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    cd38:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    cd3a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    cd3e:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    cd40:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    cd44:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    cd46:	684b      	ldr	r3, [r1, #4]
    cd48:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    cd4c:	d1fb      	bne.n	cd46 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    cd4e:	4a47      	ldr	r2, [pc, #284]	; (ce6c <SystemInit+0x2ac>)
    cd50:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    cd52:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    cd56:	4a3d      	ldr	r2, [pc, #244]	; (ce4c <SystemInit+0x28c>)
    cd58:	f363 1086 	bfi	r0, r3, #6, #1
    cd5c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    cd60:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    cd64:	065c      	lsls	r4, r3, #25
    cd66:	d4fb      	bmi.n	cd60 <SystemInit+0x1a0>
    cd68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    cd6c:	4937      	ldr	r1, [pc, #220]	; (ce4c <SystemInit+0x28c>)
    cd6e:	2006      	movs	r0, #6
    cd70:	f360 0303 	bfi	r3, r0, #0, #4
    cd74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    cd78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    cd7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cd80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    cd84:	684b      	ldr	r3, [r1, #4]
    cd86:	f013 0318 	ands.w	r3, r3, #24
    cd8a:	d1fb      	bne.n	cd84 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    cd8c:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    cd90:	4a2e      	ldr	r2, [pc, #184]	; (ce4c <SystemInit+0x28c>)
    cd92:	f363 1086 	bfi	r0, r3, #6, #1
    cd96:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    cd9a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    cd9e:	0658      	lsls	r0, r3, #25
    cda0:	d4fb      	bmi.n	cd9a <SystemInit+0x1da>
    cda2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    cda6:	4929      	ldr	r1, [pc, #164]	; (ce4c <SystemInit+0x28c>)
    cda8:	2006      	movs	r0, #6
    cdaa:	f360 0303 	bfi	r3, r0, #0, #4
    cdae:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    cdb2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    cdb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cdba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    cdbe:	684b      	ldr	r3, [r1, #4]
    cdc0:	f013 0318 	ands.w	r3, r3, #24
    cdc4:	d1fb      	bne.n	cdbe <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    cdc6:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    cdca:	4a20      	ldr	r2, [pc, #128]	; (ce4c <SystemInit+0x28c>)
    cdcc:	f363 1086 	bfi	r0, r3, #6, #1
    cdd0:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    cdd4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    cdd8:	0659      	lsls	r1, r3, #25
    cdda:	d4fb      	bmi.n	cdd4 <SystemInit+0x214>
    cddc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    cde0:	491a      	ldr	r1, [pc, #104]	; (ce4c <SystemInit+0x28c>)
    cde2:	2006      	movs	r0, #6
    cde4:	f360 0303 	bfi	r3, r0, #0, #4
    cde8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    cdec:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    cdf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cdf4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    cdf8:	684b      	ldr	r3, [r1, #4]
    cdfa:	f013 0318 	ands.w	r3, r3, #24
    cdfe:	d1fb      	bne.n	cdf8 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    ce00:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    ce04:	4a11      	ldr	r2, [pc, #68]	; (ce4c <SystemInit+0x28c>)
    ce06:	f363 1086 	bfi	r0, r3, #6, #1
    ce0a:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    ce0e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ce12:	065b      	lsls	r3, r3, #25
    ce14:	d4fb      	bmi.n	ce0e <SystemInit+0x24e>
    ce16:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ce1a:	490c      	ldr	r1, [pc, #48]	; (ce4c <SystemInit+0x28c>)
    ce1c:	2006      	movs	r0, #6
    ce1e:	f360 0303 	bfi	r3, r0, #0, #4
    ce22:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    ce26:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ce2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ce2e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    ce32:	684b      	ldr	r3, [r1, #4]
    ce34:	f013 0f18 	tst.w	r3, #24
    ce38:	d1fb      	bne.n	ce32 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    ce3a:	4a04      	ldr	r2, [pc, #16]	; (ce4c <SystemInit+0x28c>)
    ce3c:	6853      	ldr	r3, [r2, #4]
    ce3e:	2b00      	cmp	r3, #0
    ce40:	d1fc      	bne.n	ce3c <SystemInit+0x27c>
        continue;
    }
    return;
}
    ce42:	bcf0      	pop	{r4, r5, r6, r7}
    ce44:	4770      	bx	lr
    ce46:	bf00      	nop
    ce48:	40001000 	.word	0x40001000
    ce4c:	40001c00 	.word	0x40001c00
    ce50:	00190301 	.word	0x00190301
    ce54:	40000800 	.word	0x40000800
    ce58:	00020107 	.word	0x00020107
    ce5c:	00320b01 	.word	0x00320b01
    ce60:	41006000 	.word	0x41006000
    ce64:	e000ed00 	.word	0xe000ed00
    ce68:	003a0108 	.word	0x003a0108
    ce6c:	000c0108 	.word	0x000c0108

0000ce70 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    ce70:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    ce72:	4a0e      	ldr	r2, [pc, #56]	; (ceac <GClkFreqUpdate+0x3c>)
    ce74:	f100 0408 	add.w	r4, r0, #8
    ce78:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    ce7c:	f003 030f 	and.w	r3, r3, #15
    ce80:	2b01      	cmp	r3, #1
    ce82:	d001      	beq.n	ce88 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    ce84:	bc70      	pop	{r4, r5, r6}
    ce86:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    ce88:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    ce8c:	4d08      	ldr	r5, [pc, #32]	; (ceb0 <GClkFreqUpdate+0x40>)
    ce8e:	fbb5 f1f1 	udiv	r1, r5, r1
    ce92:	b289      	uxth	r1, r1
    ce94:	f361 461f 	bfi	r6, r1, #16, #16
    ce98:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    ce9c:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    ce9e:	6851      	ldr	r1, [r2, #4]
    cea0:	f3c1 018b 	ubfx	r1, r1, #2, #12
    cea4:	4219      	tst	r1, r3
    cea6:	d1fa      	bne.n	ce9e <GClkFreqUpdate+0x2e>
}
    cea8:	bc70      	pop	{r4, r5, r6}
    ceaa:	4770      	bx	lr
    ceac:	40001c00 	.word	0x40001c00
    ceb0:	017d7840 	.word	0x017d7840

0000ceb4 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    ceb4:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    ceb6:	4911      	ldr	r1, [pc, #68]	; (cefc <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    ceb8:	4b11      	ldr	r3, [pc, #68]	; (cf00 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    ceba:	4a12      	ldr	r2, [pc, #72]	; (cf04 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    cebc:	6001      	str	r1, [r0, #0]
    cebe:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    cec0:	4604      	mov	r4, r0
      m_stepsLast(0) {
    cec2:	6042      	str	r2, [r0, #4]
    cec4:	6083      	str	r3, [r0, #8]
    cec6:	60c5      	str	r5, [r0, #12]
    cec8:	6105      	str	r5, [r0, #16]
    ceca:	6145      	str	r5, [r0, #20]
    cecc:	8305      	strh	r5, [r0, #24]
    cece:	4629      	mov	r1, r5
    ced0:	22c8      	movs	r2, #200	; 0xc8
    ced2:	301c      	adds	r0, #28
    ced4:	f011 fa8a 	bl	1e3ec <memset>
    ced8:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    cedc:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    cee0:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    cee4:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    cee8:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    ceec:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    cef0:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    cef4:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    cef8:	4620      	mov	r0, r4
    cefa:	bd38      	pop	{r3, r4, r5, pc}
    cefc:	00023200 	.word	0x00023200
    cf00:	00023220 	.word	0x00023220
    cf04:	00023210 	.word	0x00023210

0000cf08 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    cf08:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    cf0a:	4a12      	ldr	r2, [pc, #72]	; (cf54 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    cf0c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    cf10:	f36f 1386 	bfc	r3, #6, #1
    cf14:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    cf18:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    cf1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cf20:	2b00      	cmp	r3, #0
    cf22:	d1f9      	bne.n	cf18 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    cf24:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    cf28:	490b      	ldr	r1, [pc, #44]	; (cf58 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    cf2a:	4c0c      	ldr	r4, [pc, #48]	; (cf5c <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    cf2c:	4d0c      	ldr	r5, [pc, #48]	; (cf60 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    cf2e:	f363 0003 	bfi	r0, r3, #0, #4
    cf32:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    cf36:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    cf3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf3e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    cf42:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    cf44:	69cb      	ldr	r3, [r1, #28]
    cf46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cf4a:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    cf4c:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    cf4e:	bc30      	pop	{r4, r5}
    cf50:	4770      	bx	lr
    cf52:	bf00      	nop
    cf54:	40001c00 	.word	0x40001c00
    cf58:	40000800 	.word	0x40000800
    cf5c:	42001c00 	.word	0x42001c00
    cf60:	07030000 	.word	0x07030000

0000cf64 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    cf66:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d038      	beq.n	cfe0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    cf6e:	4a29      	ldr	r2, [pc, #164]	; (d014 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    cf70:	2360      	movs	r3, #96	; 0x60
    cf72:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    cf74:	6913      	ldr	r3, [r2, #16]
    cf76:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    cf7a:	d1fb      	bne.n	cf74 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    cf7c:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    cf7e:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    cf80:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    cf84:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    cf88:	1aaa      	subs	r2, r5, r2
    cf8a:	b212      	sxth	r2, r2
    cf8c:	4604      	mov	r4, r0
    cf8e:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    cf92:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    cf94:	bb29      	cbnz	r1, cfe2 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    cf96:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cf98:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    cf9c:	f3bf 8f5b 	dmb	ish
    cfa0:	e853 6f00 	ldrex	r6, [r3]
    cfa4:	4416      	add	r6, r2
    cfa6:	e843 6100 	strex	r1, r6, [r3]
    cfaa:	2900      	cmp	r1, #0
    cfac:	d1f8      	bne.n	cfa0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    cfae:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    cfb2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cfb6:	4d18      	ldr	r5, [pc, #96]	; (d018 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    cfb8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    cfbc:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    cfbe:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cfc0:	fb85 2503 	smull	r2, r5, r5, r3
    cfc4:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    cfc6:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cfc8:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    cfcc:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cfce:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    cfd0:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cfd4:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    cfd8:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    cfda:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cfdc:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    cfe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cfe2:	68c6      	ldr	r6, [r0, #12]
    cfe4:	f3bf 8f5b 	dmb	ish
    cfe8:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    cfec:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    cff0:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    cff2:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cff6:	4432      	add	r2, r6
    cff8:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    cffa:	4808      	ldr	r0, [pc, #32]	; (d01c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cffc:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    d000:	f991 1003 	ldrsb.w	r1, [r1, #3]
    d004:	6800      	ldr	r0, [r0, #0]
    d006:	2201      	movs	r2, #1
    d008:	f7f8 fb20 	bl	564c <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    d00c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    d010:	e7c1      	b.n	cf96 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    d012:	bf00      	nop
    d014:	42001c00 	.word	0x42001c00
    d018:	51eb851f 	.word	0x51eb851f
    d01c:	20000bfc 	.word	0x20000bfc

0000d020 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d020:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d022:	780d      	ldrb	r5, [r1, #0]
    d024:	f3c5 1441 	ubfx	r4, r5, #5, #2
    d028:	2c01      	cmp	r4, #1
{
    d02a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d02c:	d152      	bne.n	d0d4 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    d02e:	4e30      	ldr	r6, [pc, #192]	; (d0f0 <cdcdf_acm_req+0xd0>)
    d030:	888c      	ldrh	r4, [r1, #4]
    d032:	7833      	ldrb	r3, [r6, #0]
    d034:	42a3      	cmp	r3, r4
    d036:	d002      	beq.n	d03e <cdcdf_acm_req+0x1e>
    d038:	7873      	ldrb	r3, [r6, #1]
    d03a:	42a3      	cmp	r3, r4
    d03c:	d14a      	bne.n	d0d4 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    d03e:	062b      	lsls	r3, r5, #24
    d040:	4617      	mov	r7, r2
    d042:	4606      	mov	r6, r0
    d044:	460c      	mov	r4, r1
    d046:	d438      	bmi.n	d0ba <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    d048:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    d04a:	f000 fc7f 	bl	d94c <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    d04e:	7863      	ldrb	r3, [r4, #1]
    d050:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    d052:	4601      	mov	r1, r0
	switch (req->bRequest) {
    d054:	d00f      	beq.n	d076 <cdcdf_acm_req+0x56>
    d056:	2b22      	cmp	r3, #34	; 0x22
    d058:	d128      	bne.n	d0ac <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    d05a:	2300      	movs	r3, #0
    d05c:	461a      	mov	r2, r3
    d05e:	4619      	mov	r1, r3
    d060:	4618      	mov	r0, r3
    d062:	f000 fc07 	bl	d874 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    d066:	4b23      	ldr	r3, [pc, #140]	; (d0f4 <cdcdf_acm_req+0xd4>)
    d068:	681b      	ldr	r3, [r3, #0]
    d06a:	b31b      	cbz	r3, d0b4 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    d06c:	8860      	ldrh	r0, [r4, #2]
    d06e:	4798      	blx	r3
		return ERR_NONE;
    d070:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    d072:	b003      	add	sp, #12
    d074:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d076:	2d07      	cmp	r5, #7
    d078:	d136      	bne.n	d0e8 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    d07a:	b37f      	cbz	r7, d0dc <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    d07c:	4b1e      	ldr	r3, [pc, #120]	; (d0f8 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    d07e:	6800      	ldr	r0, [r0, #0]
    d080:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    d082:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    d084:	888a      	ldrh	r2, [r1, #4]
    d086:	7989      	ldrb	r1, [r1, #6]
    d088:	f88d 1006 	strb.w	r1, [sp, #6]
    d08c:	466c      	mov	r4, sp
    d08e:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    d092:	b113      	cbz	r3, d09a <cdcdf_acm_req+0x7a>
    d094:	4668      	mov	r0, sp
    d096:	4798      	blx	r3
    d098:	b160      	cbz	r0, d0b4 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    d09a:	e894 0003 	ldmia.w	r4, {r0, r1}
    d09e:	4b17      	ldr	r3, [pc, #92]	; (d0fc <cdcdf_acm_req+0xdc>)
    d0a0:	0c0a      	lsrs	r2, r1, #16
    d0a2:	6018      	str	r0, [r3, #0]
    d0a4:	8099      	strh	r1, [r3, #4]
    d0a6:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    d0a8:	2000      	movs	r0, #0
    d0aa:	e001      	b.n	d0b0 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    d0ac:	f06f 000c 	mvn.w	r0, #12
}
    d0b0:	b003      	add	sp, #12
    d0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    d0b4:	2000      	movs	r0, #0
}
    d0b6:	b003      	add	sp, #12
    d0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    d0ba:	2a01      	cmp	r2, #1
    d0bc:	d0fa      	beq.n	d0b4 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    d0be:	784b      	ldrb	r3, [r1, #1]
    d0c0:	2b21      	cmp	r3, #33	; 0x21
    d0c2:	d1f3      	bne.n	d0ac <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    d0c4:	88ca      	ldrh	r2, [r1, #6]
    d0c6:	2a07      	cmp	r2, #7
    d0c8:	d10e      	bne.n	d0e8 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    d0ca:	2300      	movs	r3, #0
    d0cc:	490b      	ldr	r1, [pc, #44]	; (d0fc <cdcdf_acm_req+0xdc>)
    d0ce:	f000 fbd1 	bl	d874 <usbdc_xfer>
    d0d2:	e7ed      	b.n	d0b0 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    d0d4:	f06f 0009 	mvn.w	r0, #9
}
    d0d8:	b003      	add	sp, #12
    d0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    d0dc:	463b      	mov	r3, r7
    d0de:	462a      	mov	r2, r5
    d0e0:	4630      	mov	r0, r6
    d0e2:	f000 fbc7 	bl	d874 <usbdc_xfer>
    d0e6:	e7e3      	b.n	d0b0 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    d0e8:	f04f 30ff 	mov.w	r0, #4294967295
    d0ec:	e7e0      	b.n	d0b0 <cdcdf_acm_req+0x90>
    d0ee:	bf00      	nop
    d0f0:	20001d5c 	.word	0x20001d5c
    d0f4:	20001d64 	.word	0x20001d64
    d0f8:	20001d68 	.word	0x20001d68
    d0fc:	20001d6c 	.word	0x20001d6c

0000d100 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    d100:	2901      	cmp	r1, #1
{
    d102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d106:	4616      	mov	r6, r2
	switch (ctrl) {
    d108:	d008      	beq.n	d11c <cdcdf_acm_ctrl+0x1c>
    d10a:	d314      	bcc.n	d136 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    d10c:	2902      	cmp	r1, #2
    d10e:	bf0c      	ite	eq
    d110:	f06f 001a 	mvneq.w	r0, #26
    d114:	f06f 000c 	mvnne.w	r0, #12
    d118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d11c:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    d11e:	2a00      	cmp	r2, #0
    d120:	d047      	beq.n	d1b2 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d122:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    d124:	795b      	ldrb	r3, [r3, #5]
    d126:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d12a:	2b02      	cmp	r3, #2
    d12c:	d041      	beq.n	d1b2 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    d12e:	f06f 0009 	mvn.w	r0, #9
    d132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    d136:	6813      	ldr	r3, [r2, #0]
    d138:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    d13a:	2b00      	cmp	r3, #0
    d13c:	d0f7      	beq.n	d12e <cdcdf_acm_ctrl+0x2e>
    d13e:	f107 38ff 	add.w	r8, r7, #4294967295
    d142:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d146:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    d148:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d14a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    d14e:	2a02      	cmp	r2, #2
    d150:	d1ed      	bne.n	d12e <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d152:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    d156:	4291      	cmp	r1, r2
    d158:	d061      	beq.n	d21e <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    d15a:	2aff      	cmp	r2, #255	; 0xff
    d15c:	d15b      	bne.n	d216 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    d15e:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    d162:	4618      	mov	r0, r3
    d164:	6871      	ldr	r1, [r6, #4]
    d166:	2205      	movs	r2, #5
    d168:	f000 fc00 	bl	d96c <usb_find_desc>
		while (NULL != ep) {
    d16c:	4604      	mov	r4, r0
    d16e:	b980      	cbnz	r0, d192 <cdcdf_acm_ctrl+0x92>
    d170:	e041      	b.n	d1f6 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d172:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    d174:	bf4c      	ite	mi
    d176:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    d17a:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    d17c:	4628      	mov	r0, r5
    d17e:	f000 feaf 	bl	dee0 <usb_d_ep_enable>
			desc->sod = ep;
    d182:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    d184:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d186:	6871      	ldr	r1, [r6, #4]
    d188:	4420      	add	r0, r4
    d18a:	f000 fc09 	bl	d9a0 <usb_find_ep_desc>
		while (NULL != ep) {
    d18e:	4604      	mov	r4, r0
    d190:	b388      	cbz	r0, d1f6 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    d192:	7963      	ldrb	r3, [r4, #5]
    d194:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    d196:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d198:	78e1      	ldrb	r1, [r4, #3]
    d19a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    d19e:	b292      	uxth	r2, r2
    d1a0:	4628      	mov	r0, r5
    d1a2:	f000 fe4b 	bl	de3c <usb_d_ep_init>
    d1a6:	2800      	cmp	r0, #0
    d1a8:	d0e3      	beq.n	d172 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    d1aa:	f06f 0013 	mvn.w	r0, #19
}
    d1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    d1b2:	7823      	ldrb	r3, [r4, #0]
    d1b4:	2bff      	cmp	r3, #255	; 0xff
    d1b6:	d007      	beq.n	d1c8 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    d1b8:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    d1ba:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    d1bc:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    d1be:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    d1c0:	d002      	beq.n	d1c8 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d1c2:	f000 fe71 	bl	dea8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    d1c6:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    d1c8:	7863      	ldrb	r3, [r4, #1]
    d1ca:	2bff      	cmp	r3, #255	; 0xff
    d1cc:	d007      	beq.n	d1de <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    d1ce:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    d1d0:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    d1d2:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    d1d4:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    d1d6:	d002      	beq.n	d1de <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d1d8:	f000 fe66 	bl	dea8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    d1dc:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    d1de:	7920      	ldrb	r0, [r4, #4]
    d1e0:	28ff      	cmp	r0, #255	; 0xff
    d1e2:	d003      	beq.n	d1ec <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    d1e4:	f000 fe60 	bl	dea8 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    d1e8:	23ff      	movs	r3, #255	; 0xff
    d1ea:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    d1ec:	4b0f      	ldr	r3, [pc, #60]	; (d22c <cdcdf_acm_ctrl+0x12c>)
    d1ee:	2000      	movs	r0, #0
    d1f0:	7158      	strb	r0, [r3, #5]
    d1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    d1f6:	6833      	ldr	r3, [r6, #0]
    d1f8:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    d1fa:	7818      	ldrb	r0, [r3, #0]
    d1fc:	2204      	movs	r2, #4
    d1fe:	4418      	add	r0, r3
    d200:	f000 fbb4 	bl	d96c <usb_find_desc>
	for (i = 0; i < 2; i++) {
    d204:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    d206:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    d208:	d10d      	bne.n	d226 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    d20a:	4b08      	ldr	r3, [pc, #32]	; (d22c <cdcdf_acm_ctrl+0x12c>)
    d20c:	2201      	movs	r2, #1
    d20e:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d210:	2000      	movs	r0, #0
    d212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    d216:	f06f 001b 	mvn.w	r0, #27
    d21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    d21e:	f06f 0011 	mvn.w	r0, #17
    d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    d226:	2b00      	cmp	r3, #0
    d228:	d18d      	bne.n	d146 <cdcdf_acm_ctrl+0x46>
    d22a:	e780      	b.n	d12e <cdcdf_acm_ctrl+0x2e>
    d22c:	20001d5c 	.word	0x20001d5c

0000d230 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    d230:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    d232:	f000 fb91 	bl	d958 <usbdc_get_state>
    d236:	2801      	cmp	r0, #1
    d238:	d80d      	bhi.n	d256 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    d23a:	4b08      	ldr	r3, [pc, #32]	; (d25c <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    d23c:	4a08      	ldr	r2, [pc, #32]	; (d260 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    d23e:	4909      	ldr	r1, [pc, #36]	; (d264 <cdcdf_acm_init+0x34>)
    d240:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    d242:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    d244:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    d246:	f000 fb61 	bl	d90c <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    d24a:	4907      	ldr	r1, [pc, #28]	; (d268 <cdcdf_acm_init+0x38>)
    d24c:	2001      	movs	r0, #1
    d24e:	f000 fb1f 	bl	d890 <usbdc_register_handler>
	return ERR_NONE;
    d252:	2000      	movs	r0, #0
    d254:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    d256:	f06f 0010 	mvn.w	r0, #16
}
    d25a:	bd08      	pop	{r3, pc}
    d25c:	20001d50 	.word	0x20001d50
    d260:	20001d5c 	.word	0x20001d5c
    d264:	0000d101 	.word	0x0000d101
    d268:	200000ec 	.word	0x200000ec

0000d26c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    d26c:	4b08      	ldr	r3, [pc, #32]	; (d290 <cdcdf_acm_read+0x24>)
{
    d26e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    d270:	795c      	ldrb	r4, [r3, #5]
    d272:	b13c      	cbz	r4, d284 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    d274:	460a      	mov	r2, r1
}
    d276:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    d27a:	4601      	mov	r1, r0
    d27c:	7918      	ldrb	r0, [r3, #4]
    d27e:	2300      	movs	r3, #0
    d280:	f000 baf8 	b.w	d874 <usbdc_xfer>
}
    d284:	f06f 0010 	mvn.w	r0, #16
    d288:	f85d 4b04 	ldr.w	r4, [sp], #4
    d28c:	4770      	bx	lr
    d28e:	bf00      	nop
    d290:	20001d5c 	.word	0x20001d5c

0000d294 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    d294:	4b08      	ldr	r3, [pc, #32]	; (d2b8 <cdcdf_acm_write+0x24>)
{
    d296:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    d298:	795c      	ldrb	r4, [r3, #5]
    d29a:	b13c      	cbz	r4, d2ac <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    d29c:	460a      	mov	r2, r1
}
    d29e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    d2a2:	4601      	mov	r1, r0
    d2a4:	78d8      	ldrb	r0, [r3, #3]
    d2a6:	2301      	movs	r3, #1
    d2a8:	f000 bae4 	b.w	d874 <usbdc_xfer>
}
    d2ac:	f06f 0010 	mvn.w	r0, #16
    d2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    d2b4:	4770      	bx	lr
    d2b6:	bf00      	nop
    d2b8:	20001d5c 	.word	0x20001d5c

0000d2bc <cdcdf_acm_stop_xfer>:
{
    d2bc:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    d2be:	4c04      	ldr	r4, [pc, #16]	; (d2d0 <cdcdf_acm_stop_xfer+0x14>)
    d2c0:	78e0      	ldrb	r0, [r4, #3]
    d2c2:	f000 fecb 	bl	e05c <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    d2c6:	7920      	ldrb	r0, [r4, #4]
}
    d2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    d2cc:	f000 bec6 	b.w	e05c <usb_d_ep_abort>
    d2d0:	20001d5c 	.word	0x20001d5c

0000d2d4 <cdcdf_acm_register_callback>:
{
    d2d4:	b508      	push	{r3, lr}
	switch (cb_type) {
    d2d6:	2803      	cmp	r0, #3
    d2d8:	d81b      	bhi.n	d312 <cdcdf_acm_register_callback+0x3e>
    d2da:	e8df f000 	tbb	[pc, r0]
    d2de:	0a12      	.short	0x0a12
    d2e0:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    d2e2:	4b0d      	ldr	r3, [pc, #52]	; (d318 <cdcdf_acm_register_callback+0x44>)
    d2e4:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    d2e6:	2000      	movs	r0, #0
		break;
    d2e8:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    d2ea:	4b0c      	ldr	r3, [pc, #48]	; (d31c <cdcdf_acm_register_callback+0x48>)
    d2ec:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    d2ee:	2000      	movs	r0, #0
		break;
    d2f0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    d2f2:	4b0b      	ldr	r3, [pc, #44]	; (d320 <cdcdf_acm_register_callback+0x4c>)
    d2f4:	460a      	mov	r2, r1
    d2f6:	78d8      	ldrb	r0, [r3, #3]
    d2f8:	2102      	movs	r1, #2
    d2fa:	f000 ff05 	bl	e108 <usb_d_ep_register_callback>
	return ERR_NONE;
    d2fe:	2000      	movs	r0, #0
		break;
    d300:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    d302:	4b07      	ldr	r3, [pc, #28]	; (d320 <cdcdf_acm_register_callback+0x4c>)
    d304:	460a      	mov	r2, r1
    d306:	7918      	ldrb	r0, [r3, #4]
    d308:	2102      	movs	r1, #2
    d30a:	f000 fefd 	bl	e108 <usb_d_ep_register_callback>
	return ERR_NONE;
    d30e:	2000      	movs	r0, #0
		break;
    d310:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    d312:	f06f 000c 	mvn.w	r0, #12
}
    d316:	bd08      	pop	{r3, pc}
    d318:	20001d64 	.word	0x20001d64
    d31c:	20001d68 	.word	0x20001d68
    d320:	20001d5c 	.word	0x20001d5c

0000d324 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    d324:	4b01      	ldr	r3, [pc, #4]	; (d32c <cdcdf_acm_is_enabled+0x8>)
}
    d326:	7958      	ldrb	r0, [r3, #5]
    d328:	4770      	bx	lr
    d32a:	bf00      	nop
    d32c:	20001d5c 	.word	0x20001d5c

0000d330 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    d330:	4800      	ldr	r0, [pc, #0]	; (d334 <cdcdf_acm_get_line_coding+0x4>)
    d332:	4770      	bx	lr
    d334:	20001d6c 	.word	0x20001d6c

0000d338 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d338:	4b05      	ldr	r3, [pc, #20]	; (d350 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d33a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d33c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    d33e:	b12c      	cbz	r4, d34c <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    d340:	6863      	ldr	r3, [r4, #4]
    d342:	b103      	cbz	r3, d346 <usbd_sof_cb+0xe>
			sof->cb();
    d344:	4798      	blx	r3
		sof = sof->next;
    d346:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    d348:	2c00      	cmp	r4, #0
    d34a:	d1f9      	bne.n	d340 <usbd_sof_cb+0x8>
    d34c:	bd10      	pop	{r4, pc}
    d34e:	bf00      	nop
    d350:	20001d74 	.word	0x20001d74

0000d354 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d354:	b538      	push	{r3, r4, r5, lr}
    d356:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    d358:	b189      	cbz	r1, d37e <usbdc_cb_ctl_done+0x2a>
    d35a:	2901      	cmp	r1, #1
    d35c:	d10d      	bne.n	d37a <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d35e:	4b23      	ldr	r3, [pc, #140]	; (d3ec <usbdc_cb_ctl_done+0x98>)
    d360:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    d362:	b154      	cbz	r4, d37a <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    d364:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    d366:	2201      	movs	r2, #1
    d368:	4629      	mov	r1, r5
    d36a:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    d36c:	b113      	cbz	r3, d374 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    d36e:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    d370:	300a      	adds	r0, #10
    d372:	d102      	bne.n	d37a <usbdc_cb_ctl_done+0x26>
		h = h->next;
    d374:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    d376:	2c00      	cmp	r4, #0
    d378:	d1f4      	bne.n	d364 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    d37a:	2000      	movs	r0, #0
    d37c:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d37e:	7813      	ldrb	r3, [r2, #0]
    d380:	2b00      	cmp	r3, #0
    d382:	d1fa      	bne.n	d37a <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    d384:	7853      	ldrb	r3, [r2, #1]
    d386:	2b05      	cmp	r3, #5
    d388:	d014      	beq.n	d3b4 <usbdc_cb_ctl_done+0x60>
    d38a:	2b09      	cmp	r3, #9
    d38c:	d1f5      	bne.n	d37a <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    d38e:	8852      	ldrh	r2, [r2, #2]
    d390:	4b16      	ldr	r3, [pc, #88]	; (d3ec <usbdc_cb_ctl_done+0x98>)
    d392:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d394:	bb3a      	cbnz	r2, d3e6 <usbdc_cb_ctl_done+0x92>
    d396:	2503      	movs	r5, #3
    d398:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d39a:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d39c:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    d39e:	2c00      	cmp	r4, #0
    d3a0:	d0eb      	beq.n	d37a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    d3a2:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    d3a4:	4629      	mov	r1, r5
    d3a6:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    d3a8:	b103      	cbz	r3, d3ac <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    d3aa:	4798      	blx	r3
		cg = cg->next;
    d3ac:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d3ae:	2c00      	cmp	r4, #0
    d3b0:	d1f7      	bne.n	d3a2 <usbdc_cb_ctl_done+0x4e>
    d3b2:	e7e2      	b.n	d37a <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    d3b4:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    d3b6:	b2c0      	uxtb	r0, r0
    d3b8:	f000 fcf0 	bl	dd9c <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d3bc:	886b      	ldrh	r3, [r5, #2]
    d3be:	b97b      	cbnz	r3, d3e0 <usbdc_cb_ctl_done+0x8c>
    d3c0:	2502      	movs	r5, #2
    d3c2:	462a      	mov	r2, r5
    d3c4:	4b09      	ldr	r3, [pc, #36]	; (d3ec <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d3c6:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d3c8:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    d3ca:	2c00      	cmp	r4, #0
    d3cc:	d0d5      	beq.n	d37a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    d3ce:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    d3d0:	4629      	mov	r1, r5
    d3d2:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    d3d4:	b103      	cbz	r3, d3d8 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    d3d6:	4798      	blx	r3
		cg = cg->next;
    d3d8:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d3da:	2c00      	cmp	r4, #0
    d3dc:	d1f7      	bne.n	d3ce <usbdc_cb_ctl_done+0x7a>
    d3de:	e7cc      	b.n	d37a <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d3e0:	2503      	movs	r5, #3
    d3e2:	462a      	mov	r2, r5
    d3e4:	e7ee      	b.n	d3c4 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d3e6:	2504      	movs	r5, #4
    d3e8:	462a      	mov	r2, r5
    d3ea:	e7d6      	b.n	d39a <usbdc_cb_ctl_done+0x46>
    d3ec:	20001d74 	.word	0x20001d74

0000d3f0 <usbdc_cb_ctl_req>:
{
    d3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d3f4:	4fb6      	ldr	r7, [pc, #728]	; (d6d0 <usbdc_cb_ctl_req+0x2e0>)
    d3f6:	68bc      	ldr	r4, [r7, #8]
{
    d3f8:	b086      	sub	sp, #24
    d3fa:	4606      	mov	r6, r0
    d3fc:	460d      	mov	r5, r1
	while (h != NULL) {
    d3fe:	b15c      	cbz	r4, d418 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    d400:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    d402:	2200      	movs	r2, #0
    d404:	4629      	mov	r1, r5
    d406:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    d408:	b11b      	cbz	r3, d412 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    d40a:	4798      	blx	r3
			if (0 == rc) {
    d40c:	b170      	cbz	r0, d42c <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    d40e:	300a      	adds	r0, #10
    d410:	d108      	bne.n	d424 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    d412:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    d414:	2c00      	cmp	r4, #0
    d416:	d1f3      	bne.n	d400 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d418:	782b      	ldrb	r3, [r5, #0]
    d41a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    d41e:	d025      	beq.n	d46c <usbdc_cb_ctl_req+0x7c>
    d420:	2a80      	cmp	r2, #128	; 0x80
    d422:	d007      	beq.n	d434 <usbdc_cb_ctl_req+0x44>
		return false;
    d424:	2000      	movs	r0, #0
}
    d426:	b006      	add	sp, #24
    d428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    d42c:	2001      	movs	r0, #1
}
    d42e:	b006      	add	sp, #24
    d430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    d434:	786a      	ldrb	r2, [r5, #1]
    d436:	2a0a      	cmp	r2, #10
    d438:	d8f4      	bhi.n	d424 <usbdc_cb_ctl_req+0x34>
    d43a:	a101      	add	r1, pc, #4	; (adr r1, d440 <usbdc_cb_ctl_req+0x50>)
    d43c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    d440:	0000d55f 	.word	0x0000d55f
    d444:	0000d425 	.word	0x0000d425
    d448:	0000d425 	.word	0x0000d425
    d44c:	0000d425 	.word	0x0000d425
    d450:	0000d425 	.word	0x0000d425
    d454:	0000d425 	.word	0x0000d425
    d458:	0000d513 	.word	0x0000d513
    d45c:	0000d425 	.word	0x0000d425
    d460:	0000d4f1 	.word	0x0000d4f1
    d464:	0000d425 	.word	0x0000d425
    d468:	0000d4a9 	.word	0x0000d4a9
	switch (req->bRequest) {
    d46c:	786a      	ldrb	r2, [r5, #1]
    d46e:	3a01      	subs	r2, #1
    d470:	2a0a      	cmp	r2, #10
    d472:	d8d7      	bhi.n	d424 <usbdc_cb_ctl_req+0x34>
    d474:	a101      	add	r1, pc, #4	; (adr r1, d47c <usbdc_cb_ctl_req+0x8c>)
    d476:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    d47a:	bf00      	nop
    d47c:	0000d677 	.word	0x0000d677
    d480:	0000d425 	.word	0x0000d425
    d484:	0000d647 	.word	0x0000d647
    d488:	0000d425 	.word	0x0000d425
    d48c:	0000d629 	.word	0x0000d629
    d490:	0000d425 	.word	0x0000d425
    d494:	0000d425 	.word	0x0000d425
    d498:	0000d425 	.word	0x0000d425
    d49c:	0000d603 	.word	0x0000d603
    d4a0:	0000d425 	.word	0x0000d425
    d4a4:	0000d5a7 	.word	0x0000d5a7
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d4a8:	7f7b      	ldrb	r3, [r7, #29]
    d4aa:	88aa      	ldrh	r2, [r5, #4]
    d4ac:	4113      	asrs	r3, r2
    d4ae:	f013 0301 	ands.w	r3, r3, #1
    d4b2:	f000 818e 	beq.w	d7d2 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d4b6:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    d4b8:	b91c      	cbnz	r4, d4c2 <usbdc_cb_ctl_req+0xd2>
    d4ba:	e7b3      	b.n	d424 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    d4bc:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d4be:	2c00      	cmp	r4, #0
    d4c0:	d0b0      	beq.n	d424 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d4c2:	6863      	ldr	r3, [r4, #4]
    d4c4:	462a      	mov	r2, r5
    d4c6:	2102      	movs	r1, #2
    d4c8:	4620      	mov	r0, r4
    d4ca:	4798      	blx	r3
    d4cc:	2800      	cmp	r0, #0
    d4ce:	dbf5      	blt.n	d4bc <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d4d0:	697b      	ldr	r3, [r7, #20]
    d4d2:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d4d4:	697b      	ldr	r3, [r7, #20]
    d4d6:	9303      	str	r3, [sp, #12]
    d4d8:	2401      	movs	r4, #1
    d4da:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d4dc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d4de:	9404      	str	r4, [sp, #16]
    d4e0:	f88d 3014 	strb.w	r3, [sp, #20]
    d4e4:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d4e8:	f000 fd24 	bl	df34 <usb_d_ep_transfer>
			return true;
    d4ec:	4620      	mov	r0, r4
    d4ee:	e79a      	b.n	d426 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d4f0:	697b      	ldr	r3, [r7, #20]
    d4f2:	7efa      	ldrb	r2, [r7, #27]
    d4f4:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d4f6:	697b      	ldr	r3, [r7, #20]
    d4f8:	9303      	str	r3, [sp, #12]
    d4fa:	2401      	movs	r4, #1
    d4fc:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d4fe:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d500:	f88d 6014 	strb.w	r6, [sp, #20]
    d504:	9404      	str	r4, [sp, #16]
    d506:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d50a:	f000 fd13 	bl	df34 <usb_d_ep_transfer>
		return true;
    d50e:	4620      	mov	r0, r4
    d510:	e789      	b.n	d426 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d512:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    d514:	0a1a      	lsrs	r2, r3, #8
    d516:	2a02      	cmp	r2, #2
    d518:	f000 810a 	beq.w	d730 <usbdc_cb_ctl_req+0x340>
    d51c:	2a03      	cmp	r2, #3
    d51e:	f000 80f0 	beq.w	d702 <usbdc_cb_ctl_req+0x312>
    d522:	2a01      	cmp	r2, #1
    d524:	f47f af7e 	bne.w	d424 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d528:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    d52a:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d52c:	e893 0003 	ldmia.w	r3, {r0, r1}
    d530:	2c12      	cmp	r4, #18
    d532:	bf28      	it	cs
    d534:	2412      	movcs	r4, #18
    d536:	f000 fa19 	bl	d96c <usb_find_desc>
	if (!dev_desc) {
    d53a:	4603      	mov	r3, r0
    d53c:	2800      	cmp	r0, #0
    d53e:	f43f af71 	beq.w	d424 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    d542:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    d544:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d546:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d548:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d54a:	f88d 6014 	strb.w	r6, [sp, #20]
    d54e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d552:	f000 fcef 	bl	df34 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d556:	fab0 f080 	clz	r0, r0
    d55a:	0940      	lsrs	r0, r0, #5
    d55c:	e763      	b.n	d426 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d55e:	f003 011f 	and.w	r1, r3, #31
    d562:	2901      	cmp	r1, #1
    d564:	f240 8091 	bls.w	d68a <usbdc_cb_ctl_req+0x29a>
    d568:	2902      	cmp	r1, #2
    d56a:	f47f af5b 	bne.w	d424 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d56e:	88a8      	ldrh	r0, [r5, #4]
    d570:	b2c0      	uxtb	r0, r0
    d572:	f000 fd91 	bl	e098 <usb_d_ep_halt>
		if (st < 0) {
    d576:	1e03      	subs	r3, r0, #0
    d578:	f6ff af54 	blt.w	d424 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    d57c:	f003 0301 	and.w	r3, r3, #1
    d580:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    d582:	697b      	ldr	r3, [r7, #20]
    d584:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d588:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d58a:	697b      	ldr	r3, [r7, #20]
    d58c:	9303      	str	r3, [sp, #12]
    d58e:	2202      	movs	r2, #2
    d590:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d592:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d594:	f88d 6014 	strb.w	r6, [sp, #20]
    d598:	9204      	str	r2, [sp, #16]
    d59a:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d59e:	f000 fcc9 	bl	df34 <usb_d_ep_transfer>
	return true;
    d5a2:	2001      	movs	r0, #1
    d5a4:	e73f      	b.n	d426 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d5a6:	683b      	ldr	r3, [r7, #0]
    d5a8:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    d5aa:	886c      	ldrh	r4, [r5, #2]
    d5ac:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d5ae:	e893 0003 	ldmia.w	r3, {r0, r1}
    d5b2:	f000 fa0f 	bl	d9d4 <usb_find_cfg_desc>
	if (NULL == ifc) {
    d5b6:	2800      	cmp	r0, #0
    d5b8:	f43f af34 	beq.w	d424 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    d5bc:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    d5be:	78c1      	ldrb	r1, [r0, #3]
    d5c0:	7883      	ldrb	r3, [r0, #2]
    d5c2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d5c6:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d5ca:	4619      	mov	r1, r3
    d5cc:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d5ce:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d5d0:	f000 f9cc 	bl	d96c <usb_find_desc>
    d5d4:	2800      	cmp	r0, #0
    d5d6:	f43f af25 	beq.w	d424 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d5da:	7883      	ldrb	r3, [r0, #2]
    d5dc:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d5de:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d5e2:	d103      	bne.n	d5ec <usbdc_cb_ctl_req+0x1fc>
    d5e4:	78c3      	ldrb	r3, [r0, #3]
    d5e6:	42a3      	cmp	r3, r4
    d5e8:	f000 80c9 	beq.w	d77e <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    d5ec:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d5ee:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    d5f0:	7818      	ldrb	r0, [r3, #0]
    d5f2:	4403      	add	r3, r0
    d5f4:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    d5f6:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d5f8:	f000 f9b8 	bl	d96c <usb_find_desc>
		if (NULL == ifc) {
    d5fc:	2800      	cmp	r0, #0
    d5fe:	d1ec      	bne.n	d5da <usbdc_cb_ctl_req+0x1ea>
    d600:	e710      	b.n	d424 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    d602:	886a      	ldrh	r2, [r5, #2]
    d604:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    d606:	2a00      	cmp	r2, #0
    d608:	d142      	bne.n	d690 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d60a:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    d60c:	b13c      	cbz	r4, d61e <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d60e:	6863      	ldr	r3, [r4, #4]
    d610:	4620      	mov	r0, r4
    d612:	2200      	movs	r2, #0
    d614:	2101      	movs	r1, #1
    d616:	4798      	blx	r3
		func = func->next;
    d618:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d61a:	2c00      	cmp	r4, #0
    d61c:	d1f7      	bne.n	d60e <usbdc_cb_ctl_req+0x21e>
    d61e:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    d620:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d622:	2300      	movs	r3, #0
    d624:	2201      	movs	r2, #1
    d626:	e002      	b.n	d62e <usbdc_cb_ctl_req+0x23e>
    d628:	2300      	movs	r3, #0
    d62a:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    d62c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d62e:	f88d 6014 	strb.w	r6, [sp, #20]
    d632:	9303      	str	r3, [sp, #12]
    d634:	9304      	str	r3, [sp, #16]
    d636:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d63a:	f000 fc7b 	bl	df34 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d63e:	fab0 f080 	clz	r0, r0
    d642:	0940      	lsrs	r0, r0, #5
    d644:	e6ef      	b.n	d426 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d646:	2b02      	cmp	r3, #2
    d648:	f47f aeec 	bne.w	d424 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    d64c:	88ef      	ldrh	r7, [r5, #6]
    d64e:	2f00      	cmp	r7, #0
    d650:	f47f aee8 	bne.w	d424 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d654:	88a8      	ldrh	r0, [r5, #4]
    d656:	2101      	movs	r1, #1
    d658:	b2c0      	uxtb	r0, r0
    d65a:	f000 fd1d 	bl	e098 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d65e:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    d660:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d662:	9703      	str	r7, [sp, #12]
    d664:	9704      	str	r7, [sp, #16]
    d666:	f88d 6014 	strb.w	r6, [sp, #20]
    d66a:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d66e:	f000 fc61 	bl	df34 <usb_d_ep_transfer>
		return true;
    d672:	4620      	mov	r0, r4
    d674:	e6d7      	b.n	d426 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d676:	2b02      	cmp	r3, #2
    d678:	f47f aed4 	bne.w	d424 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    d67c:	88ef      	ldrh	r7, [r5, #6]
    d67e:	2f00      	cmp	r7, #0
    d680:	f47f aed0 	bne.w	d424 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d684:	88a8      	ldrh	r0, [r5, #4]
    d686:	4639      	mov	r1, r7
    d688:	e7e6      	b.n	d658 <usbdc_cb_ctl_req+0x268>
		st = 0;
    d68a:	2300      	movs	r3, #0
    d68c:	9301      	str	r3, [sp, #4]
    d68e:	e778      	b.n	d582 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d690:	683b      	ldr	r3, [r7, #0]
    d692:	e893 0003 	ldmia.w	r3, {r0, r1}
    d696:	f000 f99d 	bl	d9d4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    d69a:	2800      	cmp	r0, #0
    d69c:	f43f aec2 	beq.w	d424 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    d6a0:	78c1      	ldrb	r1, [r0, #3]
    d6a2:	7882      	ldrb	r2, [r0, #2]
    d6a4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    d6a8:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d6ac:	4619      	mov	r1, r3
    d6ae:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    d6b0:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d6b2:	f000 f95b 	bl	d96c <usb_find_desc>
    d6b6:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    d6b8:	2800      	cmp	r0, #0
    d6ba:	d0b0      	beq.n	d61e <usbdc_cb_ctl_req+0x22e>
    d6bc:	24ff      	movs	r4, #255	; 0xff
    d6be:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d6c0:	f890 8002 	ldrb.w	r8, [r0, #2]
    d6c4:	45a0      	cmp	r8, r4
    d6c6:	d010      	beq.n	d6ea <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d6c8:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    d6ca:	b92c      	cbnz	r4, d6d8 <usbdc_cb_ctl_req+0x2e8>
    d6cc:	e092      	b.n	d7f4 <usbdc_cb_ctl_req+0x404>
    d6ce:	bf00      	nop
    d6d0:	20001d74 	.word	0x20001d74
					func = func->next;
    d6d4:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    d6d6:	b134      	cbz	r4, d6e6 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d6d8:	6863      	ldr	r3, [r4, #4]
    d6da:	462a      	mov	r2, r5
    d6dc:	2100      	movs	r1, #0
    d6de:	4620      	mov	r0, r4
    d6e0:	4798      	blx	r3
    d6e2:	2800      	cmp	r0, #0
    d6e4:	d1f6      	bne.n	d6d4 <usbdc_cb_ctl_req+0x2e4>
    d6e6:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    d6e8:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    d6ea:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d6ec:	9904      	ldr	r1, [sp, #16]
    d6ee:	4403      	add	r3, r0
    d6f0:	4618      	mov	r0, r3
    d6f2:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    d6f4:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d6f6:	f000 f939 	bl	d96c <usb_find_desc>
    d6fa:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    d6fc:	2800      	cmp	r0, #0
    d6fe:	d1df      	bne.n	d6c0 <usbdc_cb_ctl_req+0x2d0>
    d700:	e78e      	b.n	d620 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d702:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    d704:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d706:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d708:	e892 0003 	ldmia.w	r2, {r0, r1}
    d70c:	b2da      	uxtb	r2, r3
    d70e:	f000 f98d 	bl	da2c <usb_find_str_desc>
	if (NULL == str_desc) {
    d712:	4603      	mov	r3, r0
    d714:	2800      	cmp	r0, #0
    d716:	f43f ae85 	beq.w	d424 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    d71a:	7801      	ldrb	r1, [r0, #0]
    d71c:	428c      	cmp	r4, r1
    d71e:	f67f af10 	bls.w	d542 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d722:	3d01      	subs	r5, #1
    d724:	4225      	tst	r5, r4
    d726:	bf0c      	ite	eq
    d728:	2201      	moveq	r2, #1
    d72a:	2200      	movne	r2, #0
    d72c:	460c      	mov	r4, r1
    d72e:	e709      	b.n	d544 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d730:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    d732:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d734:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d736:	3301      	adds	r3, #1
    d738:	e892 0003 	ldmia.w	r2, {r0, r1}
    d73c:	b2da      	uxtb	r2, r3
    d73e:	f000 f949 	bl	d9d4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    d742:	4602      	mov	r2, r0
    d744:	2800      	cmp	r0, #0
    d746:	f43f ae6d 	beq.w	d424 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    d74a:	78c1      	ldrb	r1, [r0, #3]
    d74c:	7883      	ldrb	r3, [r0, #2]
    d74e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    d752:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    d754:	429c      	cmp	r4, r3
    d756:	d94b      	bls.n	d7f0 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d758:	3d01      	subs	r5, #1
    d75a:	4225      	tst	r5, r4
    d75c:	bf0c      	ite	eq
    d75e:	2101      	moveq	r1, #1
    d760:	2100      	movne	r1, #0
    d762:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    d764:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d766:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d768:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d76a:	f88d 6014 	strb.w	r6, [sp, #20]
    d76e:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d772:	f000 fbdf 	bl	df34 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d776:	fab0 f080 	clz	r0, r0
    d77a:	0940      	lsrs	r0, r0, #5
    d77c:	e653      	b.n	d426 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d77e:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    d780:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    d782:	b926      	cbnz	r6, d78e <usbdc_cb_ctl_req+0x39e>
    d784:	e64e      	b.n	d424 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    d786:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    d788:	2e00      	cmp	r6, #0
    d78a:	f43f ae4b 	beq.w	d424 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d78e:	6873      	ldr	r3, [r6, #4]
    d790:	aa01      	add	r2, sp, #4
    d792:	2101      	movs	r1, #1
    d794:	4630      	mov	r0, r6
    d796:	4798      	blx	r3
    d798:	2800      	cmp	r0, #0
    d79a:	d1f4      	bne.n	d786 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d79c:	4601      	mov	r1, r0
    d79e:	aa01      	add	r2, sp, #4
    d7a0:	6873      	ldr	r3, [r6, #4]
    d7a2:	4630      	mov	r0, r6
    d7a4:	4798      	blx	r3
    d7a6:	2800      	cmp	r0, #0
    d7a8:	f47f ae3c 	bne.w	d424 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    d7ac:	b12c      	cbz	r4, d7ba <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d7ae:	7f7b      	ldrb	r3, [r7, #29]
    d7b0:	2201      	movs	r2, #1
    d7b2:	fa02 f505 	lsl.w	r5, r2, r5
    d7b6:	432b      	orrs	r3, r5
    d7b8:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d7ba:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d7bc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d7be:	9303      	str	r3, [sp, #12]
    d7c0:	9304      	str	r3, [sp, #16]
    d7c2:	f88d 3014 	strb.w	r3, [sp, #20]
    d7c6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d7ca:	f000 fbb3 	bl	df34 <usb_d_ep_transfer>
			return true;
    d7ce:	2001      	movs	r0, #1
    d7d0:	e629      	b.n	d426 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    d7d2:	697a      	ldr	r2, [r7, #20]
    d7d4:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d7d6:	697a      	ldr	r2, [r7, #20]
    d7d8:	9203      	str	r2, [sp, #12]
    d7da:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    d7dc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d7de:	f88d 3014 	strb.w	r3, [sp, #20]
    d7e2:	f88d 3015 	strb.w	r3, [sp, #21]
    d7e6:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    d7e8:	f000 fba4 	bl	df34 <usb_d_ep_transfer>
		return true;
    d7ec:	4620      	mov	r0, r4
    d7ee:	e61a      	b.n	d426 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    d7f0:	2100      	movs	r1, #0
    d7f2:	e7b7      	b.n	d764 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    d7f4:	4644      	mov	r4, r8
    d7f6:	e778      	b.n	d6ea <usbdc_cb_ctl_req+0x2fa>

0000d7f8 <usbd_event_cb>:
{
    d7f8:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    d7fa:	b338      	cbz	r0, d84c <usbd_event_cb+0x54>
    d7fc:	2801      	cmp	r0, #1
    d7fe:	d124      	bne.n	d84a <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d800:	4d19      	ldr	r5, [pc, #100]	; (d868 <usbd_event_cb+0x70>)
    d802:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    d804:	b13c      	cbz	r4, d816 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d806:	6863      	ldr	r3, [r4, #4]
    d808:	4620      	mov	r0, r4
    d80a:	2200      	movs	r2, #0
    d80c:	2101      	movs	r1, #1
    d80e:	4798      	blx	r3
		func = func->next;
    d810:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d812:	2c00      	cmp	r4, #0
    d814:	d1f7      	bne.n	d806 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    d816:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    d818:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    d81a:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    d81c:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    d81e:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    d820:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    d822:	f000 fb41 	bl	dea8 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    d826:	7f28      	ldrb	r0, [r5, #28]
    d828:	f000 faba 	bl	dda0 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d82c:	4621      	mov	r1, r4
    d82e:	4620      	mov	r0, r4
    d830:	4a0e      	ldr	r2, [pc, #56]	; (d86c <usbd_event_cb+0x74>)
    d832:	f000 fc69 	bl	e108 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d836:	4620      	mov	r0, r4
    d838:	4631      	mov	r1, r6
    d83a:	4a0d      	ldr	r2, [pc, #52]	; (d870 <usbd_event_cb+0x78>)
    d83c:	f000 fc64 	bl	e108 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    d840:	4620      	mov	r0, r4
}
    d842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    d846:	f000 bb4b 	b.w	dee0 <usb_d_ep_enable>
    d84a:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d84c:	4b06      	ldr	r3, [pc, #24]	; (d868 <usbd_event_cb+0x70>)
    d84e:	68dc      	ldr	r4, [r3, #12]
    d850:	460d      	mov	r5, r1
	while (cg != NULL) {
    d852:	b144      	cbz	r4, d866 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    d854:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    d856:	4629      	mov	r1, r5
    d858:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    d85a:	b103      	cbz	r3, d85e <usbd_event_cb+0x66>
			cg->cb(change, value);
    d85c:	4798      	blx	r3
		cg = cg->next;
    d85e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d860:	2c00      	cmp	r4, #0
    d862:	d1f7      	bne.n	d854 <usbd_event_cb+0x5c>
    d864:	bd70      	pop	{r4, r5, r6, pc}
    d866:	bd70      	pop	{r4, r5, r6, pc}
    d868:	20001d74 	.word	0x20001d74
    d86c:	0000d3f1 	.word	0x0000d3f1
    d870:	0000d355 	.word	0x0000d355

0000d874 <usbdc_xfer>:
{
    d874:	b500      	push	{lr}
    d876:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d878:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    d87c:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d87e:	9101      	str	r1, [sp, #4]
    d880:	9202      	str	r2, [sp, #8]
    d882:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    d886:	f000 fb55 	bl	df34 <usb_d_ep_transfer>
}
    d88a:	b005      	add	sp, #20
    d88c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d890 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    d890:	2801      	cmp	r0, #1
    d892:	d009      	beq.n	d8a8 <usbdc_register_handler+0x18>
    d894:	d305      	bcc.n	d8a2 <usbdc_register_handler+0x12>
    d896:	2802      	cmp	r0, #2
    d898:	d102      	bne.n	d8a0 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d89a:	4805      	ldr	r0, [pc, #20]	; (d8b0 <usbdc_register_handler+0x20>)
    d89c:	f000 bc66 	b.w	e16c <list_insert_at_end>
    d8a0:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d8a2:	4804      	ldr	r0, [pc, #16]	; (d8b4 <usbdc_register_handler+0x24>)
    d8a4:	f000 bc62 	b.w	e16c <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d8a8:	4803      	ldr	r0, [pc, #12]	; (d8b8 <usbdc_register_handler+0x28>)
    d8aa:	f000 bc5f 	b.w	e16c <list_insert_at_end>
    d8ae:	bf00      	nop
    d8b0:	20001d80 	.word	0x20001d80
    d8b4:	20001d78 	.word	0x20001d78
    d8b8:	20001d7c 	.word	0x20001d7c

0000d8bc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d8bc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    d8be:	4605      	mov	r5, r0
    d8c0:	3000      	adds	r0, #0
    d8c2:	bf18      	it	ne
    d8c4:	2001      	movne	r0, #1
    d8c6:	f240 3255 	movw	r2, #853	; 0x355
    d8ca:	490c      	ldr	r1, [pc, #48]	; (d8fc <usbdc_init+0x40>)
    d8cc:	f000 fc4a 	bl	e164 <assert>

	int32_t rc;

	rc = usb_d_init();
    d8d0:	f000 f9dc 	bl	dc8c <usb_d_init>
	if (rc < 0) {
    d8d4:	2800      	cmp	r0, #0
    d8d6:	db0f      	blt.n	d8f8 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d8d8:	4c09      	ldr	r4, [pc, #36]	; (d900 <usbdc_init+0x44>)
    d8da:	2220      	movs	r2, #32
    d8dc:	2100      	movs	r1, #0
    d8de:	4620      	mov	r0, r4
    d8e0:	f010 fd84 	bl	1e3ec <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d8e4:	4907      	ldr	r1, [pc, #28]	; (d904 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    d8e6:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d8e8:	2000      	movs	r0, #0
    d8ea:	f000 fa51 	bl	dd90 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d8ee:	2001      	movs	r0, #1
    d8f0:	4905      	ldr	r1, [pc, #20]	; (d908 <usbdc_init+0x4c>)
    d8f2:	f000 fa4d 	bl	dd90 <usb_d_register_callback>

	return 0;
    d8f6:	2000      	movs	r0, #0
}
    d8f8:	bd38      	pop	{r3, r4, r5, pc}
    d8fa:	bf00      	nop
    d8fc:	00023230 	.word	0x00023230
    d900:	20001d74 	.word	0x20001d74
    d904:	0000d339 	.word	0x0000d339
    d908:	0000d7f9 	.word	0x0000d7f9

0000d90c <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    d90c:	4601      	mov	r1, r0
    d90e:	4801      	ldr	r0, [pc, #4]	; (d914 <usbdc_register_function+0x8>)
    d910:	f000 bc2c 	b.w	e16c <list_insert_at_end>
    d914:	20001d84 	.word	0x20001d84

0000d918 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d918:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    d91a:	4b0a      	ldr	r3, [pc, #40]	; (d944 <usbdc_start+0x2c>)
    d91c:	7e9c      	ldrb	r4, [r3, #26]
    d91e:	b954      	cbnz	r4, d936 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    d920:	b160      	cbz	r0, d93c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d922:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    d924:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    d926:	79d2      	ldrb	r2, [r2, #7]
    d928:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d92a:	2201      	movs	r2, #1
    d92c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d92e:	f000 fa31 	bl	dd94 <usb_d_enable>
	return ERR_NONE;
    d932:	4620      	mov	r0, r4
    d934:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    d936:	f06f 0003 	mvn.w	r0, #3
    d93a:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    d93c:	f06f 0008 	mvn.w	r0, #8
}
    d940:	bd10      	pop	{r4, pc}
    d942:	bf00      	nop
    d944:	20001d74 	.word	0x20001d74

0000d948 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    d948:	f000 ba26 	b.w	dd98 <usb_d_attach>

0000d94c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    d94c:	4b01      	ldr	r3, [pc, #4]	; (d954 <usbdc_get_ctrl_buffer+0x8>)
}
    d94e:	6958      	ldr	r0, [r3, #20]
    d950:	4770      	bx	lr
    d952:	bf00      	nop
    d954:	20001d74 	.word	0x20001d74

0000d958 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    d958:	4b03      	ldr	r3, [pc, #12]	; (d968 <usbdc_get_state+0x10>)
    d95a:	7e98      	ldrb	r0, [r3, #26]
    d95c:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    d960:	bf18      	it	ne
    d962:	2010      	movne	r0, #16
    d964:	4770      	bx	lr
    d966:	bf00      	nop
    d968:	20001d74 	.word	0x20001d74

0000d96c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d96c:	4288      	cmp	r0, r1
    d96e:	d214      	bcs.n	d99a <usb_find_desc+0x2e>
    d970:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d972:	2b01      	cmp	r3, #1
    d974:	d911      	bls.n	d99a <usb_find_desc+0x2e>
{
    d976:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d978:	7844      	ldrb	r4, [r0, #1]
    d97a:	4294      	cmp	r4, r2
    d97c:	d106      	bne.n	d98c <usb_find_desc+0x20>
    d97e:	e009      	b.n	d994 <usb_find_desc+0x28>
    d980:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d982:	2b01      	cmp	r3, #1
    d984:	d905      	bls.n	d992 <usb_find_desc+0x26>
	return desc[1];
    d986:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d988:	4294      	cmp	r4, r2
    d98a:	d003      	beq.n	d994 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    d98c:	4418      	add	r0, r3
	while (desc < eof) {
    d98e:	4281      	cmp	r1, r0
    d990:	d8f6      	bhi.n	d980 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d992:	2000      	movs	r0, #0
}
    d994:	f85d 4b04 	ldr.w	r4, [sp], #4
    d998:	4770      	bx	lr
	return NULL;
    d99a:	2000      	movs	r0, #0
    d99c:	4770      	bx	lr
    d99e:	bf00      	nop

0000d9a0 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d9a0:	4288      	cmp	r0, r1
    d9a2:	d213      	bcs.n	d9cc <usb_find_ep_desc+0x2c>
    d9a4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d9a6:	2b01      	cmp	r3, #1
    d9a8:	d910      	bls.n	d9cc <usb_find_ep_desc+0x2c>
	return desc[1];
    d9aa:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d9ac:	2a04      	cmp	r2, #4
    d9ae:	d00d      	beq.n	d9cc <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d9b0:	2a05      	cmp	r2, #5
    d9b2:	d108      	bne.n	d9c6 <usb_find_ep_desc+0x26>
    d9b4:	e00c      	b.n	d9d0 <usb_find_ep_desc+0x30>
    d9b6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d9b8:	2b01      	cmp	r3, #1
    d9ba:	d907      	bls.n	d9cc <usb_find_ep_desc+0x2c>
    d9bc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d9be:	2a04      	cmp	r2, #4
    d9c0:	d004      	beq.n	d9cc <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d9c2:	2a05      	cmp	r2, #5
    d9c4:	d003      	beq.n	d9ce <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    d9c6:	4418      	add	r0, r3
	while (desc < eof) {
    d9c8:	4281      	cmp	r1, r0
    d9ca:	d8f4      	bhi.n	d9b6 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d9cc:	2000      	movs	r0, #0
}
    d9ce:	4770      	bx	lr
    d9d0:	4770      	bx	lr
    d9d2:	bf00      	nop

0000d9d4 <usb_find_cfg_desc>:
	while (desc < eof) {
    d9d4:	4288      	cmp	r0, r1
    d9d6:	d226      	bcs.n	da26 <usb_find_cfg_desc+0x52>
    d9d8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d9da:	2b01      	cmp	r3, #1
    d9dc:	d923      	bls.n	da26 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d9de:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d9e0:	7844      	ldrb	r4, [r0, #1]
    d9e2:	2c02      	cmp	r4, #2
    d9e4:	d106      	bne.n	d9f4 <usb_find_cfg_desc+0x20>
    d9e6:	e012      	b.n	da0e <usb_find_cfg_desc+0x3a>
    d9e8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d9ea:	2b01      	cmp	r3, #1
    d9ec:	d905      	bls.n	d9fa <usb_find_cfg_desc+0x26>
	return desc[1];
    d9ee:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d9f0:	2c02      	cmp	r4, #2
    d9f2:	d00c      	beq.n	da0e <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    d9f4:	4418      	add	r0, r3
	while (desc < eof) {
    d9f6:	4281      	cmp	r1, r0
    d9f8:	d8f6      	bhi.n	d9e8 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    d9fa:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    d9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    da00:	4770      	bx	lr
		_desc_len_check();
    da02:	7803      	ldrb	r3, [r0, #0]
    da04:	2b01      	cmp	r3, #1
    da06:	d9f8      	bls.n	d9fa <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    da08:	7843      	ldrb	r3, [r0, #1]
    da0a:	2b02      	cmp	r3, #2
    da0c:	d1f5      	bne.n	d9fa <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    da0e:	7943      	ldrb	r3, [r0, #5]
    da10:	4293      	cmp	r3, r2
    da12:	d0f3      	beq.n	d9fc <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    da14:	78c4      	ldrb	r4, [r0, #3]
    da16:	7883      	ldrb	r3, [r0, #2]
    da18:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    da1c:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    da20:	4281      	cmp	r1, r0
    da22:	d8ee      	bhi.n	da02 <usb_find_cfg_desc+0x2e>
    da24:	e7e9      	b.n	d9fa <usb_find_cfg_desc+0x26>
		return NULL;
    da26:	2000      	movs	r0, #0
    da28:	4770      	bx	lr
    da2a:	bf00      	nop

0000da2c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    da2c:	4288      	cmp	r0, r1
    da2e:	d216      	bcs.n	da5e <usb_find_str_desc+0x32>
{
    da30:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    da32:	2500      	movs	r5, #0
    da34:	e005      	b.n	da42 <usb_find_str_desc+0x16>
	return desc[1];
    da36:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    da38:	2c03      	cmp	r4, #3
    da3a:	d008      	beq.n	da4e <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    da3c:	4418      	add	r0, r3
	while (desc < eof) {
    da3e:	4281      	cmp	r1, r0
    da40:	d902      	bls.n	da48 <usb_find_str_desc+0x1c>
    da42:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    da44:	2b01      	cmp	r3, #1
    da46:	d8f6      	bhi.n	da36 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    da48:	2000      	movs	r0, #0
}
    da4a:	bc30      	pop	{r4, r5}
    da4c:	4770      	bx	lr
			if (i == str_index) {
    da4e:	4295      	cmp	r5, r2
    da50:	d0fb      	beq.n	da4a <usb_find_str_desc+0x1e>
    da52:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    da54:	4281      	cmp	r1, r0
    da56:	f105 0501 	add.w	r5, r5, #1
    da5a:	d8f2      	bhi.n	da42 <usb_find_str_desc+0x16>
    da5c:	e7f4      	b.n	da48 <usb_find_str_desc+0x1c>
	return NULL;
    da5e:	2000      	movs	r0, #0
    da60:	4770      	bx	lr
    da62:	bf00      	nop

0000da64 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    da64:	2000      	movs	r0, #0
    da66:	4770      	bx	lr

0000da68 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    da68:	b5f0      	push	{r4, r5, r6, r7, lr}
    da6a:	4f0f      	ldr	r7, [pc, #60]	; (daa8 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    da6c:	f000 0e0f 	and.w	lr, r0, #15
    da70:	463a      	mov	r2, r7
{
    da72:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    da74:	7854      	ldrb	r4, [r2, #1]
    da76:	42a0      	cmp	r0, r4
    da78:	461e      	mov	r6, r3
    da7a:	f103 0301 	add.w	r3, r3, #1
    da7e:	d008      	beq.n	da92 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    da80:	7815      	ldrb	r5, [r2, #0]
    da82:	3220      	adds	r2, #32
    da84:	b90d      	cbnz	r5, da8a <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    da86:	4574      	cmp	r4, lr
    da88:	d003      	beq.n	da92 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    da8a:	2b0d      	cmp	r3, #13
    da8c:	d1f2      	bne.n	da74 <usb_d_cb_trans_more+0xc>
    da8e:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    da92:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    da96:	78b3      	ldrb	r3, [r6, #2]
    da98:	2b03      	cmp	r3, #3
    da9a:	d001      	beq.n	daa0 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    da9c:	2000      	movs	r0, #0
    da9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    daa0:	69b3      	ldr	r3, [r6, #24]
}
    daa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    daa6:	4718      	bx	r3
    daa8:	20001d94 	.word	0x20001d94

0000daac <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    daac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dab0:	f8df 9130 	ldr.w	r9, [pc, #304]	; dbe4 <_usb_d_cb_trans_done+0x138>
    dab4:	4607      	mov	r7, r0
    dab6:	4688      	mov	r8, r1
    dab8:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    daba:	f000 010f 	and.w	r1, r0, #15
{
    dabe:	2300      	movs	r3, #0
    dac0:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dac2:	7844      	ldrb	r4, [r0, #1]
    dac4:	42a7      	cmp	r7, r4
    dac6:	461e      	mov	r6, r3
    dac8:	f103 0301 	add.w	r3, r3, #1
    dacc:	d008      	beq.n	dae0 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dace:	7805      	ldrb	r5, [r0, #0]
    dad0:	3020      	adds	r0, #32
    dad2:	b90d      	cbnz	r5, dad8 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dad4:	428c      	cmp	r4, r1
    dad6:	d003      	beq.n	dae0 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dad8:	2b0d      	cmp	r3, #13
    dada:	d1f2      	bne.n	dac2 <_usb_d_cb_trans_done+0x16>
    dadc:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    dae0:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    dae2:	f1b8 0f00 	cmp.w	r8, #0
    dae6:	d110      	bne.n	db0a <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    dae8:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    daec:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    daf0:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    daf4:	b32b      	cbz	r3, db42 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    daf6:	2301      	movs	r3, #1
    daf8:	4641      	mov	r1, r8
    dafa:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    dafc:	444e      	add	r6, r9
    dafe:	4638      	mov	r0, r7
    db00:	69f3      	ldr	r3, [r6, #28]
    db02:	4798      	blx	r3
}
    db04:	b007      	add	sp, #28
    db06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    db0a:	f1b8 0f01 	cmp.w	r8, #1
    db0e:	d00b      	beq.n	db28 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    db10:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    db14:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    db18:	d025      	beq.n	db66 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    db1a:	f1b8 0f03 	cmp.w	r8, #3
    db1e:	d01d      	beq.n	db5c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    db20:	2106      	movs	r1, #6
    db22:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    db24:	70d9      	strb	r1, [r3, #3]
    db26:	e7e9      	b.n	dafc <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    db28:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    db2c:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    db30:	f04f 0802 	mov.w	r8, #2
    db34:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    db38:	b1e9      	cbz	r1, db76 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    db3a:	2305      	movs	r3, #5
    db3c:	4641      	mov	r1, r8
    db3e:	70a3      	strb	r3, [r4, #2]
    db40:	e7dc      	b.n	dafc <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    db42:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    db44:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    db46:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    db48:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    db4c:	d01f      	beq.n	db8e <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    db4e:	69e3      	ldr	r3, [r4, #28]
    db50:	7860      	ldrb	r0, [r4, #1]
    db52:	4641      	mov	r1, r8
    db54:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    db56:	2302      	movs	r3, #2
    db58:	70a3      	strb	r3, [r4, #2]
    db5a:	e7d3      	b.n	db04 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    db5c:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    db5e:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    db60:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    db62:	70d9      	strb	r1, [r3, #3]
    db64:	e7ca      	b.n	dafc <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    db66:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    db6a:	2104      	movs	r1, #4
    db6c:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    db6e:	b158      	cbz	r0, db88 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    db70:	2001      	movs	r0, #1
    db72:	7098      	strb	r0, [r3, #2]
    db74:	e7c2      	b.n	dafc <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    db76:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    db78:	f884 8002 	strb.w	r8, [r4, #2]
    db7c:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    db7e:	f005 f917 	bl	12db0 <_usb_d_dev_ep_stall>
    db82:	78e1      	ldrb	r1, [r4, #3]
    db84:	9a01      	ldr	r2, [sp, #4]
    db86:	e7b9      	b.n	dafc <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    db88:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    db8c:	e7ba      	b.n	db04 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    db8e:	69e3      	ldr	r3, [r4, #28]
    db90:	7860      	ldrb	r0, [r4, #1]
    db92:	f994 500c 	ldrsb.w	r5, [r4, #12]
    db96:	2101      	movs	r1, #1
    db98:	4798      	blx	r3
		if (err) {
    db9a:	b160      	cbz	r0, dbb6 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    db9c:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    db9e:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    dba0:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    dba2:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    dba4:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    dba6:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    dba8:	bfa8      	it	ge
    dbaa:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    dbae:	2101      	movs	r1, #1
    dbb0:	f005 f8fe 	bl	12db0 <_usb_d_dev_ep_stall>
    dbb4:	e7a6      	b.n	db04 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    dbb6:	2304      	movs	r3, #4
    dbb8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    dbba:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    dbbc:	f8cd 800c 	str.w	r8, [sp, #12]
    dbc0:	2d00      	cmp	r5, #0
    dbc2:	bfac      	ite	ge
    dbc4:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    dbc8:	f003 030f 	andlt.w	r3, r3, #15
    dbcc:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    dbce:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    dbd0:	f8cd 8010 	str.w	r8, [sp, #16]
    dbd4:	f88d 3014 	strb.w	r3, [sp, #20]
    dbd8:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    dbdc:	f005 f9a4 	bl	12f28 <_usb_d_dev_ep_trans>
    dbe0:	e790      	b.n	db04 <_usb_d_cb_trans_done+0x58>
    dbe2:	bf00      	nop
    dbe4:	20001d94 	.word	0x20001d94

0000dbe8 <usb_d_cb_trans_setup>:
{
    dbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbec:	4f26      	ldr	r7, [pc, #152]	; (dc88 <usb_d_cb_trans_setup+0xa0>)
    dbee:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dbf0:	f000 060f 	and.w	r6, r0, #15
    dbf4:	463a      	mov	r2, r7
{
    dbf6:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dbf8:	7851      	ldrb	r1, [r2, #1]
    dbfa:	428c      	cmp	r4, r1
    dbfc:	461d      	mov	r5, r3
    dbfe:	f103 0301 	add.w	r3, r3, #1
    dc02:	d032      	beq.n	dc6a <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dc04:	7810      	ldrb	r0, [r2, #0]
    dc06:	3220      	adds	r2, #32
    dc08:	b908      	cbnz	r0, dc0e <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dc0a:	42b1      	cmp	r1, r6
    dc0c:	d02d      	beq.n	dc6a <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dc0e:	2b0d      	cmp	r3, #13
    dc10:	d1f2      	bne.n	dbf8 <usb_d_cb_trans_setup+0x10>
    dc12:	f06f 0613 	mvn.w	r6, #19
    dc16:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    dc1a:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    dc1c:	4631      	mov	r1, r6
    dc1e:	4620      	mov	r0, r4
    dc20:	f005 f958 	bl	12ed4 <_usb_d_dev_ep_read_req>
	if (n != 8) {
    dc24:	b2c0      	uxtb	r0, r0
    dc26:	2808      	cmp	r0, #8
    dc28:	d00a      	beq.n	dc40 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    dc2a:	2101      	movs	r1, #1
    dc2c:	4620      	mov	r0, r4
    dc2e:	f005 f8bf 	bl	12db0 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    dc32:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    dc36:	2101      	movs	r1, #1
}
    dc38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    dc3c:	f005 b8b8 	b.w	12db0 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    dc40:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    dc44:	2100      	movs	r1, #0
    dc46:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    dc48:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    dc4c:	f005 f8b0 	bl	12db0 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    dc50:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    dc52:	2100      	movs	r1, #0
    dc54:	4640      	mov	r0, r8
    dc56:	f005 f8ab 	bl	12db0 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    dc5a:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    dc5c:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    dc5e:	696b      	ldr	r3, [r5, #20]
    dc60:	4620      	mov	r0, r4
    dc62:	4798      	blx	r3
    dc64:	b120      	cbz	r0, dc70 <usb_d_cb_trans_setup+0x88>
    dc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc6a:	016e      	lsls	r6, r5, #5
    dc6c:	360c      	adds	r6, #12
    dc6e:	e7d4      	b.n	dc1a <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    dc70:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    dc72:	4639      	mov	r1, r7
    dc74:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    dc76:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    dc78:	f005 f89a 	bl	12db0 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    dc7c:	4639      	mov	r1, r7
    dc7e:	4640      	mov	r0, r8
}
    dc80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    dc84:	f005 b894 	b.w	12db0 <_usb_d_dev_ep_stall>
    dc88:	20001d94 	.word	0x20001d94

0000dc8c <usb_d_init>:

int32_t usb_d_init(void)
{
    dc8c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    dc8e:	f004 fd8b 	bl	127a8 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    dc92:	2800      	cmp	r0, #0
    dc94:	db70      	blt.n	dd78 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    dc96:	4c39      	ldr	r4, [pc, #228]	; (dd7c <usb_d_init+0xf0>)
    dc98:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    dc9c:	2100      	movs	r1, #0
    dc9e:	4620      	mov	r0, r4
    dca0:	f010 fba4 	bl	1e3ec <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dca4:	4b36      	ldr	r3, [pc, #216]	; (dd80 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    dca6:	4937      	ldr	r1, [pc, #220]	; (dd84 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dca8:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    dcaa:	22ff      	movs	r2, #255	; 0xff
    dcac:	7062      	strb	r2, [r4, #1]
    dcae:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    dcb2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    dcb6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    dcba:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    dcbe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    dcc2:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    dcc6:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    dcca:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dccc:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dcce:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dcd0:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dcd2:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dcd4:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dcd6:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dcd8:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dcda:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dcdc:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dcde:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dce0:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dce2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dce6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dcea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dcee:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dcf2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dcf6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dcfa:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dcfe:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dd02:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dd06:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dd0a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dd0e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    dd12:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    dd16:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    dd1a:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    dd1e:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    dd22:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dd26:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dd2a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dd2e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dd32:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dd36:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dd3a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dd3e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dd42:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dd46:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dd4a:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dd4e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dd52:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dd56:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dd5a:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dd5e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    dd62:	f005 fa19 	bl	13198 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    dd66:	4908      	ldr	r1, [pc, #32]	; (dd88 <usb_d_init+0xfc>)
    dd68:	2001      	movs	r0, #1
    dd6a:	f005 fa15 	bl	13198 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    dd6e:	2002      	movs	r0, #2
    dd70:	4906      	ldr	r1, [pc, #24]	; (dd8c <usb_d_init+0x100>)
    dd72:	f005 fa11 	bl	13198 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    dd76:	2000      	movs	r0, #0
}
    dd78:	bd10      	pop	{r4, pc}
    dd7a:	bf00      	nop
    dd7c:	20001d94 	.word	0x20001d94
    dd80:	0000da65 	.word	0x0000da65
    dd84:	0000dbe9 	.word	0x0000dbe9
    dd88:	0000da69 	.word	0x0000da69
    dd8c:	0000daad 	.word	0x0000daad

0000dd90 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    dd90:	f005 b9f0 	b.w	13174 <_usb_d_dev_register_callback>

0000dd94 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    dd94:	f004 bda8 	b.w	128e8 <_usb_d_dev_enable>

0000dd98 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    dd98:	f004 bdd6 	b.w	12948 <_usb_d_dev_attach>

0000dd9c <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    dd9c:	f004 bdde 	b.w	1295c <_usb_d_dev_set_address>

0000dda0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    dda0:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dda2:	4e25      	ldr	r6, [pc, #148]	; (de38 <usb_d_ep0_init+0x98>)
    dda4:	7873      	ldrb	r3, [r6, #1]
    dda6:	2b00      	cmp	r3, #0
    dda8:	d043      	beq.n	de32 <usb_d_ep0_init+0x92>
    ddaa:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    ddae:	2b00      	cmp	r3, #0
    ddb0:	d03f      	beq.n	de32 <usb_d_ep0_init+0x92>
    ddb2:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	d03b      	beq.n	de32 <usb_d_ep0_init+0x92>
    ddba:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    ddbe:	b3c3      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddc0:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    ddc4:	b3ab      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddc6:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    ddca:	b393      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddcc:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    ddd0:	b37b      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddd2:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    ddd6:	b363      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddd8:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    dddc:	b34b      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddde:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    dde2:	b333      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    dde4:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    dde8:	b31b      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddea:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    ddee:	b303      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddf0:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    ddf4:	b1eb      	cbz	r3, de32 <usb_d_ep0_init+0x92>
    ddf6:	4633      	mov	r3, r6
    ddf8:	2400      	movs	r4, #0
    ddfa:	7859      	ldrb	r1, [r3, #1]
    ddfc:	29ff      	cmp	r1, #255	; 0xff
    ddfe:	d00a      	beq.n	de16 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    de00:	781d      	ldrb	r5, [r3, #0]
    de02:	3320      	adds	r3, #32
    de04:	b90d      	cbnz	r5, de0a <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de06:	290f      	cmp	r1, #15
    de08:	d005      	beq.n	de16 <usb_d_ep0_init+0x76>
    de0a:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    de0c:	2c0d      	cmp	r4, #13
    de0e:	d1f4      	bne.n	ddfa <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    de10:	f06f 0014 	mvn.w	r0, #20
    de14:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    de16:	2100      	movs	r1, #0
    de18:	4602      	mov	r2, r0
    de1a:	4608      	mov	r0, r1
    de1c:	f004 fda4 	bl	12968 <_usb_d_dev_ep_init>
	if (rc < 0) {
    de20:	2800      	cmp	r0, #0
    de22:	db05      	blt.n	de30 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    de24:	0164      	lsls	r4, r4, #5
    de26:	1933      	adds	r3, r6, r4
    de28:	2000      	movs	r0, #0
    de2a:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    de2c:	5530      	strb	r0, [r6, r4]
    de2e:	bd70      	pop	{r4, r5, r6, pc}
}
    de30:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    de32:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    de36:	bd70      	pop	{r4, r5, r6, pc}
    de38:	20001d94 	.word	0x20001d94

0000de3c <usb_d_ep_init>:
{
    de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de3e:	4c19      	ldr	r4, [pc, #100]	; (dea4 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de40:	f000 0c0f 	and.w	ip, r0, #15
    de44:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    de48:	4627      	mov	r7, r4
    de4a:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    de4c:	785d      	ldrb	r5, [r3, #1]
    de4e:	42a8      	cmp	r0, r5
    de50:	d024      	beq.n	de9c <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    de52:	781e      	ldrb	r6, [r3, #0]
    de54:	3320      	adds	r3, #32
    de56:	b90e      	cbnz	r6, de5c <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de58:	4565      	cmp	r5, ip
    de5a:	d01f      	beq.n	de9c <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    de5c:	459e      	cmp	lr, r3
    de5e:	d1f5      	bne.n	de4c <usb_d_ep_init+0x10>
    de60:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    de62:	7863      	ldrb	r3, [r4, #1]
    de64:	2bff      	cmp	r3, #255	; 0xff
    de66:	d00a      	beq.n	de7e <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    de68:	7826      	ldrb	r6, [r4, #0]
    de6a:	3420      	adds	r4, #32
    de6c:	b90e      	cbnz	r6, de72 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de6e:	2b0f      	cmp	r3, #15
    de70:	d005      	beq.n	de7e <usb_d_ep_init+0x42>
    de72:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    de74:	2d0d      	cmp	r5, #13
    de76:	d1f4      	bne.n	de62 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    de78:	f06f 0014 	mvn.w	r0, #20
    de7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de7e:	460e      	mov	r6, r1
    de80:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    de82:	f004 fd71 	bl	12968 <_usb_d_dev_ep_init>
	if (rc < 0) {
    de86:	2800      	cmp	r0, #0
    de88:	db07      	blt.n	de9a <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    de8a:	016d      	lsls	r5, r5, #5
    de8c:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    de8e:	f006 0603 	and.w	r6, r6, #3
    de92:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    de94:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    de96:	2000      	movs	r0, #0
    de98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    de9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    de9c:	f06f 0013 	mvn.w	r0, #19
    dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dea2:	bf00      	nop
    dea4:	20001d94 	.word	0x20001d94

0000dea8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    dea8:	b570      	push	{r4, r5, r6, lr}
    deaa:	4e0c      	ldr	r6, [pc, #48]	; (dedc <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    deac:	f000 050f 	and.w	r5, r0, #15
    deb0:	4633      	mov	r3, r6
{
    deb2:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    deb4:	785a      	ldrb	r2, [r3, #1]
    deb6:	4290      	cmp	r0, r2
    deb8:	d008      	beq.n	decc <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    deba:	7819      	ldrb	r1, [r3, #0]
    debc:	3320      	adds	r3, #32
    debe:	b909      	cbnz	r1, dec4 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dec0:	42aa      	cmp	r2, r5
    dec2:	d003      	beq.n	decc <usb_d_ep_deinit+0x24>
    dec4:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dec6:	2c0d      	cmp	r4, #13
    dec8:	d1f4      	bne.n	deb4 <usb_d_ep_deinit+0xc>
    deca:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    decc:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    ded0:	f004 fdbc 	bl	12a4c <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    ded4:	23ff      	movs	r3, #255	; 0xff
    ded6:	7063      	strb	r3, [r4, #1]
    ded8:	bd70      	pop	{r4, r5, r6, pc}
    deda:	bf00      	nop
    dedc:	20001d94 	.word	0x20001d94

0000dee0 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    dee0:	b570      	push	{r4, r5, r6, lr}
    dee2:	4d13      	ldr	r5, [pc, #76]	; (df30 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dee4:	f000 060f 	and.w	r6, r0, #15
    dee8:	462b      	mov	r3, r5
{
    deea:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    deec:	7859      	ldrb	r1, [r3, #1]
    deee:	4288      	cmp	r0, r1
    def0:	d00a      	beq.n	df08 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    def2:	781c      	ldrb	r4, [r3, #0]
    def4:	3320      	adds	r3, #32
    def6:	b90c      	cbnz	r4, defc <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    def8:	42b1      	cmp	r1, r6
    defa:	d015      	beq.n	df28 <usb_d_ep_enable+0x48>
    defc:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    defe:	2a0d      	cmp	r2, #13
    df00:	d1f4      	bne.n	deec <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    df02:	f06f 0011 	mvn.w	r0, #17
    df06:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    df08:	0152      	lsls	r2, r2, #5
    df0a:	5cab      	ldrb	r3, [r5, r2]
    df0c:	2b00      	cmp	r3, #0
    df0e:	bf14      	ite	ne
    df10:	2301      	movne	r3, #1
    df12:	2302      	moveq	r3, #2
    df14:	4415      	add	r5, r2
    df16:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    df18:	f004 fe2a 	bl	12b70 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    df1c:	2800      	cmp	r0, #0
    df1e:	db00      	blt.n	df22 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    df20:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    df22:	2300      	movs	r3, #0
    df24:	70ab      	strb	r3, [r5, #2]
    df26:	bd70      	pop	{r4, r5, r6, pc}
    df28:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    df2a:	2302      	movs	r3, #2
    df2c:	e7f2      	b.n	df14 <usb_d_ep_enable+0x34>
    df2e:	bf00      	nop
    df30:	20001d94 	.word	0x20001d94

0000df34 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    df34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df38:	f8df 811c 	ldr.w	r8, [pc, #284]	; e058 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    df3c:	7a05      	ldrb	r5, [r0, #8]
{
    df3e:	b087      	sub	sp, #28
    df40:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    df42:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    df46:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    df48:	7859      	ldrb	r1, [r3, #1]
    df4a:	428d      	cmp	r5, r1
    df4c:	d00c      	beq.n	df68 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    df4e:	781c      	ldrb	r4, [r3, #0]
    df50:	3320      	adds	r3, #32
    df52:	b90c      	cbnz	r4, df58 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    df54:	42b9      	cmp	r1, r7
    df56:	d007      	beq.n	df68 <usb_d_ep_transfer+0x34>
    df58:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    df5a:	2a0d      	cmp	r2, #13
    df5c:	d1f4      	bne.n	df48 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    df5e:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    df62:	b007      	add	sp, #28
    df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    df68:	0154      	lsls	r4, r2, #5
    df6a:	4606      	mov	r6, r0
    df6c:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    df70:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    df72:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    df76:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    df7a:	f005 f92b 	bl	131d4 <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    df7e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    df82:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    df86:	f89d 7007 	ldrb.w	r7, [sp, #7]
    df8a:	b2ff      	uxtb	r7, r7
    df8c:	2f01      	cmp	r7, #1
    df8e:	d011      	beq.n	dfb4 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    df90:	a802      	add	r0, sp, #8
    df92:	f005 f927 	bl	131e4 <atomic_leave_critical>
		switch (state) {
    df96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df9a:	b2db      	uxtb	r3, r3
    df9c:	2b05      	cmp	r3, #5
    df9e:	d040      	beq.n	e022 <usb_d_ep_transfer+0xee>
    dfa0:	2b06      	cmp	r3, #6
    dfa2:	d022      	beq.n	dfea <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	bf0c      	ite	eq
    dfa8:	f06f 0012 	mvneq.w	r0, #18
    dfac:	2001      	movne	r0, #1
}
    dfae:	b007      	add	sp, #28
    dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    dfb4:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    dfb6:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    dfb8:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    dfbc:	f005 f912 	bl	131e4 <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    dfc0:	f818 2004 	ldrb.w	r2, [r8, r4]
    dfc4:	b9b2      	cbnz	r2, dff4 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    dfc6:	f89b 1013 	ldrb.w	r1, [fp, #19]
    dfca:	f89b 3012 	ldrb.w	r3, [fp, #18]
    dfce:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    dfd2:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    dfd4:	bb4b      	cbnz	r3, e02a <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    dfd6:	2204      	movs	r2, #4
    dfd8:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    dfdc:	9304      	str	r3, [sp, #16]
    dfde:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dfe0:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    dfe2:	9203      	str	r2, [sp, #12]
    dfe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dfe8:	e011      	b.n	e00e <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    dfea:	f06f 000f 	mvn.w	r0, #15
}
    dfee:	b007      	add	sp, #28
    dff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dff4:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    dff8:	6833      	ldr	r3, [r6, #0]
    dffa:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dffc:	bf18      	it	ne
    dffe:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    e000:	062a      	lsls	r2, r5, #24
    e002:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    e006:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    e008:	d4ec      	bmi.n	dfe4 <usb_d_ep_transfer+0xb0>
    e00a:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    e00e:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    e010:	f88d 3014 	strb.w	r3, [sp, #20]
    e014:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    e018:	f004 ff86 	bl	12f28 <_usb_d_dev_ep_trans>
}
    e01c:	b007      	add	sp, #28
    e01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    e022:	2002      	movs	r0, #2
}
    e024:	b007      	add	sp, #28
    e026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    e02a:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    e02e:	4599      	cmp	r9, r3
    e030:	464f      	mov	r7, r9
    e032:	bf28      	it	cs
    e034:	461f      	movcs	r7, r3
    e036:	2900      	cmp	r1, #0
    e038:	db05      	blt.n	e046 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    e03a:	6833      	ldr	r3, [r6, #0]
    e03c:	9704      	str	r7, [sp, #16]
    e03e:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    e040:	4617      	mov	r7, r2
    e042:	7a33      	ldrb	r3, [r6, #8]
    e044:	e7e1      	b.n	e00a <usb_d_ep_transfer+0xd6>
    e046:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    e048:	6832      	ldr	r2, [r6, #0]
    e04a:	9704      	str	r7, [sp, #16]
    e04c:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    e04e:	bf94      	ite	ls
    e050:	2700      	movls	r7, #0
    e052:	2701      	movhi	r7, #1
    e054:	7a33      	ldrb	r3, [r6, #8]
    e056:	e7c5      	b.n	dfe4 <usb_d_ep_transfer+0xb0>
    e058:	20001d94 	.word	0x20001d94

0000e05c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    e05c:	b570      	push	{r4, r5, r6, lr}
    e05e:	4e0d      	ldr	r6, [pc, #52]	; (e094 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e060:	f000 050f 	and.w	r5, r0, #15
    e064:	4633      	mov	r3, r6
{
    e066:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    e068:	785a      	ldrb	r2, [r3, #1]
    e06a:	4290      	cmp	r0, r2
    e06c:	d008      	beq.n	e080 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    e06e:	7819      	ldrb	r1, [r3, #0]
    e070:	3320      	adds	r3, #32
    e072:	b909      	cbnz	r1, e078 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e074:	42aa      	cmp	r2, r5
    e076:	d003      	beq.n	e080 <usb_d_ep_abort+0x24>
    e078:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e07a:	2c0d      	cmp	r4, #13
    e07c:	d1f4      	bne.n	e068 <usb_d_ep_abort+0xc>
    e07e:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    e080:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    e084:	f005 f81e 	bl	130c4 <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    e088:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    e08a:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    e08c:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    e08e:	70e3      	strb	r3, [r4, #3]
    e090:	bd70      	pop	{r4, r5, r6, pc}
    e092:	bf00      	nop
    e094:	20001d94 	.word	0x20001d94

0000e098 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    e098:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    e09a:	460c      	mov	r4, r1
    e09c:	b131      	cbz	r1, e0ac <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    e09e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    e0a0:	bf18      	it	ne
    e0a2:	2102      	movne	r1, #2
	}
}
    e0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    e0a8:	f004 be82 	b.w	12db0 <_usb_d_dev_ep_stall>
    e0ac:	4e15      	ldr	r6, [pc, #84]	; (e104 <usb_d_ep_halt+0x6c>)
    e0ae:	4605      	mov	r5, r0
    e0b0:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e0b2:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    e0b6:	785a      	ldrb	r2, [r3, #1]
    e0b8:	4295      	cmp	r5, r2
    e0ba:	d00a      	beq.n	e0d2 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    e0bc:	7819      	ldrb	r1, [r3, #0]
    e0be:	3320      	adds	r3, #32
    e0c0:	b909      	cbnz	r1, e0c6 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e0c2:	4282      	cmp	r2, r0
    e0c4:	d005      	beq.n	e0d2 <usb_d_ep_halt+0x3a>
    e0c6:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e0c8:	2c0d      	cmp	r4, #13
    e0ca:	d1f4      	bne.n	e0b6 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    e0cc:	f06f 0011 	mvn.w	r0, #17
    e0d0:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    e0d2:	2102      	movs	r1, #2
    e0d4:	4628      	mov	r0, r5
    e0d6:	f004 fe6b 	bl	12db0 <_usb_d_dev_ep_stall>
    e0da:	b900      	cbnz	r0, e0de <usb_d_ep_halt+0x46>
}
    e0dc:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    e0de:	2100      	movs	r1, #0
    e0e0:	4628      	mov	r0, r5
    e0e2:	f004 fe65 	bl	12db0 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    e0e6:	2800      	cmp	r0, #0
    e0e8:	dbf8      	blt.n	e0dc <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    e0ea:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    e0ee:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    e0f0:	2301      	movs	r3, #1
    e0f2:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    e0f4:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    e0f6:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    e0f8:	69e3      	ldr	r3, [r4, #28]
    e0fa:	2200      	movs	r2, #0
    e0fc:	4798      	blx	r3
	return ERR_NONE;
    e0fe:	2000      	movs	r0, #0
    e100:	bd70      	pop	{r4, r5, r6, pc}
    e102:	bf00      	nop
    e104:	20001d94 	.word	0x20001d94

0000e108 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    e108:	b5f0      	push	{r4, r5, r6, r7, lr}
    e10a:	f8df e054 	ldr.w	lr, [pc, #84]	; e160 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e10e:	f000 070f 	and.w	r7, r0, #15
    e112:	4673      	mov	r3, lr
{
    e114:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    e116:	785d      	ldrb	r5, [r3, #1]
    e118:	42a8      	cmp	r0, r5
    e11a:	d008      	beq.n	e12e <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    e11c:	781e      	ldrb	r6, [r3, #0]
    e11e:	3320      	adds	r3, #32
    e120:	b90e      	cbnz	r6, e126 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e122:	42bd      	cmp	r5, r7
    e124:	d003      	beq.n	e12e <usb_d_ep_register_callback+0x26>
    e126:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e128:	2c0d      	cmp	r4, #13
    e12a:	d1f4      	bne.n	e116 <usb_d_ep_register_callback+0xe>
    e12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    e12e:	4b0b      	ldr	r3, [pc, #44]	; (e15c <usb_d_ep_register_callback+0x54>)
    e130:	2a00      	cmp	r2, #0
    e132:	bf08      	it	eq
    e134:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    e136:	2901      	cmp	r1, #1
    e138:	d003      	beq.n	e142 <usb_d_ep_register_callback+0x3a>
    e13a:	d30a      	bcc.n	e152 <usb_d_ep_register_callback+0x4a>
    e13c:	2902      	cmp	r1, #2
    e13e:	d004      	beq.n	e14a <usb_d_ep_register_callback+0x42>
    e140:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    e142:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    e146:	61a2      	str	r2, [r4, #24]
		break;
    e148:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    e14a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    e14e:	61e2      	str	r2, [r4, #28]
    e150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    e152:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    e156:	6162      	str	r2, [r4, #20]
		break;
    e158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e15a:	bf00      	nop
    e15c:	0000da65 	.word	0x0000da65
    e160:	20001d94 	.word	0x20001d94

0000e164 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    e164:	b900      	cbnz	r0, e168 <assert+0x4>
		__asm("BKPT #0");
    e166:	be00      	bkpt	0x0000
    e168:	4770      	bx	lr
    e16a:	bf00      	nop

0000e16c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    e16c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    e16e:	6804      	ldr	r4, [r0, #0]
{
    e170:	4606      	mov	r6, r0
    e172:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    e174:	b144      	cbz	r4, e188 <list_insert_at_end+0x1c>
		if (it == element) {
    e176:	428c      	cmp	r4, r1
    e178:	d015      	beq.n	e1a6 <list_insert_at_end+0x3a>
    e17a:	4623      	mov	r3, r4
    e17c:	e001      	b.n	e182 <list_insert_at_end+0x16>
    e17e:	429d      	cmp	r5, r3
    e180:	d011      	beq.n	e1a6 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    e182:	681b      	ldr	r3, [r3, #0]
    e184:	2b00      	cmp	r3, #0
    e186:	d1fa      	bne.n	e17e <list_insert_at_end+0x12>
    e188:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    e18a:	224f      	movs	r2, #79	; 0x4f
    e18c:	4908      	ldr	r1, [pc, #32]	; (e1b0 <list_insert_at_end+0x44>)
    e18e:	f7ff ffe9 	bl	e164 <assert>

	if (!list->head) {
    e192:	6833      	ldr	r3, [r6, #0]
    e194:	b90b      	cbnz	r3, e19a <list_insert_at_end+0x2e>
    e196:	e008      	b.n	e1aa <list_insert_at_end+0x3e>
    e198:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    e19a:	6823      	ldr	r3, [r4, #0]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d1fb      	bne.n	e198 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    e1a0:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    e1a2:	602b      	str	r3, [r5, #0]
    e1a4:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    e1a6:	2000      	movs	r0, #0
    e1a8:	e7ef      	b.n	e18a <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    e1aa:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    e1ac:	602b      	str	r3, [r5, #0]
		return;
    e1ae:	bd70      	pop	{r4, r5, r6, pc}
    e1b0:	00023248 	.word	0x00023248

0000e1b4 <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    e1b4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    e1b8:	4770      	bx	lr
    e1ba:	bf00      	nop

0000e1bc <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e1bc:	7980      	ldrb	r0, [r0, #6]
    e1be:	4770      	bx	lr

0000e1c0 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    e1c0:	2004      	movs	r0, #4
    e1c2:	4770      	bx	lr

0000e1c4 <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    e1c4:	7980      	ldrb	r0, [r0, #6]
    e1c6:	1ec3      	subs	r3, r0, #3
    e1c8:	2b01      	cmp	r3, #1
    e1ca:	bf83      	ittte	hi
    e1cc:	3806      	subhi	r0, #6
    e1ce:	fab0 f080 	clzhi	r0, r0
    e1d2:	0940      	lsrhi	r0, r0, #5
    e1d4:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    e1d6:	4770      	bx	lr

0000e1d8 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    e1d8:	b530      	push	{r4, r5, lr}
    e1da:	b083      	sub	sp, #12
    e1dc:	f89d 401c 	ldrb.w	r4, [sp, #28]
    e1e0:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e1e2:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    e1e4:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e1e6:	f000 fcfd 	bl	ebe4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    e1ea:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e1ee:	4a05      	ldr	r2, [pc, #20]	; (e204 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    e1f0:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e1f2:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    e1f4:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e1f6:	4b04      	ldr	r3, [pc, #16]	; (e208 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    e1f8:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    e1fa:	4620      	mov	r0, r4
    e1fc:	66a3      	str	r3, [r4, #104]	; 0x68
    e1fe:	b003      	add	sp, #12
    e200:	bd30      	pop	{r4, r5, pc}
    e202:	bf00      	nop
    e204:	00023270 	.word	0x00023270
    e208:	06a40000 	.word	0x06a40000

0000e20c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    e20c:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    e20e:	4a3a      	ldr	r2, [pc, #232]	; (e2f8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    e210:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e214:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    e218:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    e21a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    e21e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e222:	065d      	lsls	r5, r3, #25
    e224:	d4fb      	bmi.n	e21e <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    e226:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e22a:	4933      	ldr	r1, [pc, #204]	; (e2f8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    e22c:	2004      	movs	r0, #4
    e22e:	f360 0303 	bfi	r3, r0, #0, #4
    e232:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    e236:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    e23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e23e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    e242:	684b      	ldr	r3, [r1, #4]
    e244:	06d8      	lsls	r0, r3, #27
    e246:	d4fc      	bmi.n	e242 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    e248:	4a2c      	ldr	r2, [pc, #176]	; (e2fc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    e24a:	492d      	ldr	r1, [pc, #180]	; (e300 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    e24c:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    e24e:	4b2d      	ldr	r3, [pc, #180]	; (e304 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    e250:	2507      	movs	r5, #7
    e252:	f365 4013 	bfi	r0, r5, #16, #4
    e256:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    e258:	6a0a      	ldr	r2, [r1, #32]
    e25a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    e25e:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    e260:	781a      	ldrb	r2, [r3, #0]
    e262:	f042 0201 	orr.w	r2, r2, #1
    e266:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    e268:	689a      	ldr	r2, [r3, #8]
    e26a:	07d2      	lsls	r2, r2, #31
    e26c:	d4fc      	bmi.n	e268 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    e26e:	785a      	ldrb	r2, [r3, #1]
    e270:	f042 0201 	orr.w	r2, r2, #1
    e274:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    e276:	785a      	ldrb	r2, [r3, #1]
    e278:	f042 0206 	orr.w	r2, r2, #6
    e27c:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    e27e:	899a      	ldrh	r2, [r3, #12]
    e280:	f042 0202 	orr.w	r2, r2, #2
    e284:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    e286:	899a      	ldrh	r2, [r3, #12]
    e288:	2105      	movs	r1, #5
    e28a:	f361 220b 	bfi	r2, r1, #8, #4
    e28e:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    e290:	899a      	ldrh	r2, [r3, #12]
    e292:	2102      	movs	r1, #2
    e294:	f361 0283 	bfi	r2, r1, #2, #2
    e298:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    e29a:	8a1b      	ldrh	r3, [r3, #16]
    e29c:	b29b      	uxth	r3, r3
    e29e:	bb23      	cbnz	r3, e2ea <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    e2a0:	4b19      	ldr	r3, [pc, #100]	; (e308 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    e2a2:	681d      	ldr	r5, [r3, #0]
    e2a4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    e2a8:	4628      	mov	r0, r5
    e2aa:	f7fc fc21 	bl	aaf0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e2ae:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    e2b2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e2b6:	4628      	mov	r0, r5
    e2b8:	f7fc fc1a 	bl	aaf0 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    e2bc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e2c0:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    e2c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e2c6:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    e2ca:	461a      	mov	r2, r3
    e2cc:	db03      	blt.n	e2d6 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    e2ce:	2300      	movs	r3, #0
    e2d0:	461a      	mov	r2, r3
    e2d2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    e2d6:	4410      	add	r0, r2
    e2d8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    e2dc:	db04      	blt.n	e2e8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    e2de:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    e2e2:	3304      	adds	r3, #4
    e2e4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    e2e8:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e2ea:	4a06      	ldr	r2, [pc, #24]	; (e304 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    e2ec:	6893      	ldr	r3, [r2, #8]
    e2ee:	f013 0304 	ands.w	r3, r3, #4
    e2f2:	d1fb      	bne.n	e2ec <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    e2f4:	8213      	strh	r3, [r2, #16]
    e2f6:	e7d3      	b.n	e2a0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    e2f8:	40001c00 	.word	0x40001c00
    e2fc:	40001800 	.word	0x40001800
    e300:	40000800 	.word	0x40000800
    e304:	43002400 	.word	0x43002400
    e308:	20001d20 	.word	0x20001d20

0000e30c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    e30c:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    e30e:	4a2e      	ldr	r2, [pc, #184]	; (e3c8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    e310:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    e314:	8a13      	ldrh	r3, [r2, #16]
    e316:	b29b      	uxth	r3, r3
    e318:	4299      	cmp	r1, r3
    e31a:	d003      	beq.n	e324 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e31c:	6893      	ldr	r3, [r2, #8]
    e31e:	075d      	lsls	r5, r3, #29
    e320:	d4fc      	bmi.n	e31c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    e322:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e324:	68c3      	ldr	r3, [r0, #12]
    e326:	4929      	ldr	r1, [pc, #164]	; (e3cc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    e328:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e32a:	4a27      	ldr	r2, [pc, #156]	; (e3c8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e32c:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e330:	4423      	add	r3, r4
    e332:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    e336:	f044 0401 	orr.w	r4, r4, #1
    e33a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    e33e:	6e03      	ldr	r3, [r0, #96]	; 0x60
    e340:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e342:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e346:	4423      	add	r3, r4
    e348:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    e34c:	f041 0101 	orr.w	r1, r1, #1
    e350:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e354:	6893      	ldr	r3, [r2, #8]
    e356:	079c      	lsls	r4, r3, #30
    e358:	d4fc      	bmi.n	e354 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    e35a:	7813      	ldrb	r3, [r2, #0]
    e35c:	0799      	lsls	r1, r3, #30
    e35e:	d407      	bmi.n	e370 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    e360:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e362:	4919      	ldr	r1, [pc, #100]	; (e3c8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    e364:	f043 0302 	orr.w	r3, r3, #2
    e368:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e36a:	688b      	ldr	r3, [r1, #8]
    e36c:	079a      	lsls	r2, r3, #30
    e36e:	d4fc      	bmi.n	e36a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    e370:	4a15      	ldr	r2, [pc, #84]	; (e3c8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    e372:	79d3      	ldrb	r3, [r2, #7]
    e374:	079b      	lsls	r3, r3, #30
    e376:	d0fc      	beq.n	e372 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    e378:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e37a:	4b15      	ldr	r3, [pc, #84]	; (e3d0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    e37c:	f002 010f 	and.w	r1, r2, #15
    e380:	185a      	adds	r2, r3, r1
    e382:	2400      	movs	r4, #0
    e384:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e388:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e38a:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e38e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e392:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e394:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e398:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    e39a:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e39c:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    e39e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e3a2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e3a6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e3aa:	33f4      	adds	r3, #244	; 0xf4
    e3ac:	f3bf 8f5b 	dmb	ish
    e3b0:	e853 2f00 	ldrex	r2, [r3]
    e3b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    e3b8:	e843 2100 	strex	r1, r2, [r3]
    e3bc:	2900      	cmp	r1, #0
    e3be:	d1f7      	bne.n	e3b0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    e3c0:	f3bf 8f5b 	dmb	ish
}
    e3c4:	bc70      	pop	{r4, r5, r6}
    e3c6:	4770      	bx	lr
    e3c8:	43002400 	.word	0x43002400
    e3cc:	41008000 	.word	0x41008000
    e3d0:	20001b10 	.word	0x20001b10

0000e3d4 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    e3d4:	7983      	ldrb	r3, [r0, #6]
    e3d6:	2b06      	cmp	r3, #6
    e3d8:	d805      	bhi.n	e3e6 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    e3da:	2201      	movs	r2, #1
    e3dc:	fa02 f303 	lsl.w	r3, r2, r3
    e3e0:	f013 0f54 	tst.w	r3, #84	; 0x54
    e3e4:	d100      	bne.n	e3e8 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    e3e6:	4770      	bx	lr
            DigitalInOut::Refresh();
    e3e8:	f000 bc32 	b.w	ec50 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000e3ec <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    e3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    e3ee:	7983      	ldrb	r3, [r0, #6]
    e3f0:	428b      	cmp	r3, r1
    e3f2:	d06e      	beq.n	e4d2 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    e3f4:	1e8a      	subs	r2, r1, #2
    e3f6:	460c      	mov	r4, r1
    e3f8:	4605      	mov	r5, r0
    e3fa:	2a04      	cmp	r2, #4
    e3fc:	d80d      	bhi.n	e41a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e3fe:	e8df f002 	tbb	[pc, r2]
    e402:	0311      	.short	0x0311
    e404:	0c11      	.short	0x0c11
    e406:	11          	.byte	0x11
    e407:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    e408:	2102      	movs	r1, #2
    e40a:	f000 fad9 	bl	e9c0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    e40e:	4628      	mov	r0, r5
    e410:	f7ff ff7c 	bl	e30c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    e414:	2303      	movs	r3, #3
    e416:	71ab      	strb	r3, [r5, #6]
            break;
    e418:	4623      	mov	r3, r4
    return (m_mode == newMode);
    e41a:	1ae0      	subs	r0, r4, r3
    e41c:	fab0 f080 	clz	r0, r0
    e420:	0940      	lsrs	r0, r0, #5
    e422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e424:	4b2c      	ldr	r3, [pc, #176]	; (e4d8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    e426:	f3bf 8f5b 	dmb	ish
    e42a:	e853 2f00 	ldrex	r2, [r3]
    e42e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    e432:	e843 2100 	strex	r1, r2, [r3]
    e436:	2900      	cmp	r1, #0
    e438:	d1f7      	bne.n	e42a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    e43a:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    e43e:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e440:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e444:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e446:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e448:	4924      	ldr	r1, [pc, #144]	; (e4dc <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e44a:	3bf4      	subs	r3, #244	; 0xf4
    e44c:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e450:	f04f 0e01 	mov.w	lr, #1
    e454:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e458:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e45c:	ea27 070e 	bic.w	r7, r7, lr
    e460:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    e464:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e466:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e46a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    e46e:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    e472:	4438      	add	r0, r7
    e474:	ea22 0606 	bic.w	r6, r2, r6
    e478:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    e47c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e480:	4a17      	ldr	r2, [pc, #92]	; (e4e0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e482:	f36f 0300 	bfc	r3, #0, #1
    e486:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    e48a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    e48c:	6e68      	ldr	r0, [r5, #100]	; 0x64
    e48e:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e492:	4403      	add	r3, r0
    e494:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    e498:	f36f 0100 	bfc	r1, #0, #1
    e49c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e4a0:	6893      	ldr	r3, [r2, #8]
    e4a2:	f013 0302 	ands.w	r3, r3, #2
    e4a6:	d1fb      	bne.n	e4a0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    e4a8:	7811      	ldrb	r1, [r2, #0]
    e4aa:	0789      	lsls	r1, r1, #30
    e4ac:	d507      	bpl.n	e4be <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    e4ae:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e4b0:	490b      	ldr	r1, [pc, #44]	; (e4e0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    e4b2:	f363 0041 	bfi	r0, r3, #1, #1
    e4b6:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e4b8:	688b      	ldr	r3, [r1, #8]
    e4ba:	079b      	lsls	r3, r3, #30
    e4bc:	d4fc      	bmi.n	e4b8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    e4be:	4621      	mov	r1, r4
    e4c0:	4628      	mov	r0, r5
    e4c2:	f000 fa7d 	bl	e9c0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    e4c6:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    e4c8:	1ae0      	subs	r0, r4, r3
    e4ca:	fab0 f080 	clz	r0, r0
    e4ce:	0940      	lsrs	r0, r0, #5
    e4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    e4d2:	2001      	movs	r0, #1
}
    e4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4d6:	bf00      	nop
    e4d8:	20001c04 	.word	0x20001c04
    e4dc:	41008000 	.word	0x41008000
    e4e0:	43002400 	.word	0x43002400

0000e4e4 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    e4e4:	7983      	ldrb	r3, [r0, #6]
    e4e6:	2b06      	cmp	r3, #6
    e4e8:	d805      	bhi.n	e4f6 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    e4ea:	2201      	movs	r2, #1
    e4ec:	fa02 f303 	lsl.w	r3, r2, r3
    e4f0:	f013 0f54 	tst.w	r3, #84	; 0x54
    e4f4:	d101      	bne.n	e4fa <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    e4f6:	2000      	movs	r0, #0
    e4f8:	4770      	bx	lr
            state = DigitalInOut::State();
    e4fa:	f000 bcaf 	b.w	ee5c <_ZN9ClearCore12DigitalInOut5StateEv>
    e4fe:	bf00      	nop

0000e500 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    e500:	7983      	ldrb	r3, [r0, #6]
    e502:	3b02      	subs	r3, #2
    e504:	2b04      	cmp	r3, #4
    e506:	d83c      	bhi.n	e582 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    e508:	e8df f003 	tbb	[pc, r3]
    e50c:	3b390339 	.word	0x3b390339
    e510:	39          	.byte	0x39
    e511:	00          	.byte	0x00
            newState = max(newState, 0);
    e512:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    e516:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    e518:	b289      	uxth	r1, r1
    e51a:	f240 74ff 	movw	r4, #2047	; 0x7ff
    e51e:	42a1      	cmp	r1, r4
    e520:	bf28      	it	cs
    e522:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    e524:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    e526:	4d19      	ldr	r5, [pc, #100]	; (e58c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    e528:	4e19      	ldr	r6, [pc, #100]	; (e590 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    e52a:	4a1a      	ldr	r2, [pc, #104]	; (e594 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    e52c:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    e530:	fb85 e503 	smull	lr, r5, r5, r3
    e534:	f007 070f 	and.w	r7, r7, #15
    e538:	441d      	add	r5, r3
    e53a:	443e      	add	r6, r7
    e53c:	17db      	asrs	r3, r3, #31
    e53e:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    e542:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    e546:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    e54a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    e54e:	4812      	ldr	r0, [pc, #72]	; (e598 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    e550:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    e554:	fba2 5201 	umull	r5, r2, r2, r1
    e558:	1a89      	subs	r1, r1, r2
    e55a:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    e55e:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    e562:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    e564:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    e566:	42a1      	cmp	r1, r4
    e568:	bf28      	it	cs
    e56a:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    e56c:	b29b      	uxth	r3, r3
    e56e:	4299      	cmp	r1, r3
    e570:	d009      	beq.n	e586 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e572:	6883      	ldr	r3, [r0, #8]
    e574:	075b      	lsls	r3, r3, #29
    e576:	d4fc      	bmi.n	e572 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    e578:	8201      	strh	r1, [r0, #16]
            success = true;
    e57a:	2001      	movs	r0, #1
    e57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    e57e:	f000 b9c3 	b.w	e908 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e582:	2000      	movs	r0, #0
    e584:	4770      	bx	lr
            success = true;
    e586:	2001      	movs	r0, #1
}
    e588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e58a:	bf00      	nop
    e58c:	80100201 	.word	0x80100201
    e590:	20001b10 	.word	0x20001b10
    e594:	00200401 	.word	0x00200401
    e598:	43002400 	.word	0x43002400

0000e59c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    e59c:	b538      	push	{r3, r4, r5, lr}
    e59e:	4604      	mov	r4, r0
    e5a0:	460d      	mov	r5, r1
    DacInitialize();
    e5a2:	f7ff fe33 	bl	e20c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    e5a6:	4620      	mov	r0, r4
    e5a8:	4629      	mov	r1, r5
    e5aa:	f000 fc77 	bl	ee9c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    e5ae:	6920      	ldr	r0, [r4, #16]
    e5b0:	07c2      	lsls	r2, r0, #31
    e5b2:	d521      	bpl.n	e5f8 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    e5b4:	68e1      	ldr	r1, [r4, #12]
    e5b6:	01c9      	lsls	r1, r1, #7
    e5b8:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    e5bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e5c0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    e5c4:	2101      	movs	r1, #1
    e5c6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e5ca:	f361 1307 	bfi	r3, r1, #4, #4
    e5ce:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    e5d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
    e5d4:	07cb      	lsls	r3, r1, #31
    e5d6:	d421      	bmi.n	e61c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    e5d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e5da:	01db      	lsls	r3, r3, #7
    e5dc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e5e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e5e4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    e5e8:	2101      	movs	r1, #1
    e5ea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e5ee:	f361 0203 	bfi	r2, r1, #0, #4
    e5f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    e5f6:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    e5f8:	68e2      	ldr	r2, [r4, #12]
    e5fa:	01d2      	lsls	r2, r2, #7
    e5fc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e600:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e604:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    e608:	2101      	movs	r1, #1
    e60a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e60e:	f361 0203 	bfi	r2, r1, #0, #4
    e612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    e616:	6e61      	ldr	r1, [r4, #100]	; 0x64
    e618:	07cb      	lsls	r3, r1, #31
    e61a:	d5dd      	bpl.n	e5d8 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    e61c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    e61e:	01d2      	lsls	r2, r2, #7
    e620:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    e624:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e628:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    e62c:	2101      	movs	r1, #1
    e62e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e632:	f361 1307 	bfi	r3, r1, #4, #4
    e636:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e63a:	bd38      	pop	{r3, r4, r5, pc}

0000e63c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
    e63c:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
    e63e:	b430      	push	{r4, r5}
    switch (m_blinkState) {
    e640:	2b08      	cmp	r3, #8
    e642:	d810      	bhi.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    e644:	e8df f003 	tbb	[pc, r3]
    e648:	604d3b25 	.word	0x604d3b25
    e64c:	05a18a74 	.word	0x05a18a74
    e650:	11          	.byte	0x11
    e651:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
    e652:	8903      	ldrh	r3, [r0, #8]
    e654:	3b01      	subs	r3, #1
    e656:	b29b      	uxth	r3, r3
    e658:	8103      	strh	r3, [r0, #8]
    e65a:	b923      	cbnz	r3, e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
    e65c:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
    e65e:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
    e660:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
    e662:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
    e664:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
    e666:	bc30      	pop	{r4, r5}
    e668:	4770      	bx	lr
            if (--m_timer) {
    e66a:	8903      	ldrh	r3, [r0, #8]
    e66c:	3b01      	subs	r3, #1
    e66e:	b29b      	uxth	r3, r3
    e670:	8103      	strh	r3, [r0, #8]
    e672:	2b00      	cmp	r3, #0
    e674:	d1f7      	bne.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
    e676:	8981      	ldrh	r1, [r0, #12]
    e678:	3901      	subs	r1, #1
    e67a:	b289      	uxth	r1, r1
    e67c:	8181      	strh	r1, [r0, #12]
    e67e:	2900      	cmp	r1, #0
    e680:	f000 80b3 	beq.w	e7ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
    e684:	8a43      	ldrh	r3, [r0, #18]
    e686:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
    e688:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
    e68a:	2307      	movs	r3, #7
                m_ledOn = true;
    e68c:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
    e68e:	7143      	strb	r3, [r0, #5]
                break;
    e690:	e7e9      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
    e692:	7801      	ldrb	r1, [r0, #0]
    e694:	2900      	cmp	r1, #0
    e696:	f040 8089 	bne.w	e7ac <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
    e69a:	7841      	ldrb	r1, [r0, #1]
    e69c:	2900      	cmp	r1, #0
    e69e:	f040 80cb 	bne.w	e838 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
    e6a2:	7883      	ldrb	r3, [r0, #2]
    e6a4:	2b00      	cmp	r3, #0
    e6a6:	f040 811a 	bne.w	e8de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
    e6aa:	78c3      	ldrb	r3, [r0, #3]
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	f040 8118 	bne.w	e8e2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
    e6b2:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e6b4:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
    e6b6:	2b00      	cmp	r3, #0
    e6b8:	d0d5      	beq.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    e6ba:	5d41      	ldrb	r1, [r0, r5]
    e6bc:	e077      	b.n	e7ae <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
    e6be:	8903      	ldrh	r3, [r0, #8]
    e6c0:	3b01      	subs	r3, #1
    e6c2:	b29b      	uxth	r3, r3
    e6c4:	8103      	strh	r3, [r0, #8]
    e6c6:	2b00      	cmp	r3, #0
    e6c8:	d1cd      	bne.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e6ca:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
    e6cc:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
    e6ce:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
    e6d0:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e6d2:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
    e6d4:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e6d6:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
    e6da:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
    e6dc:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e6de:	8143      	strh	r3, [r0, #10]
            break;
    e6e0:	e7c1      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e6e2:	8903      	ldrh	r3, [r0, #8]
    e6e4:	3b01      	subs	r3, #1
    e6e6:	b29b      	uxth	r3, r3
    e6e8:	8103      	strh	r3, [r0, #8]
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	d1bb      	bne.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
    e6ee:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e6f0:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e6f2:	3b01      	subs	r3, #1
    e6f4:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
    e6f6:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
    e6fa:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e6fc:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e6fe:	2b00      	cmp	r3, #0
    e700:	d06d      	beq.n	e7de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
    e702:	8a03      	ldrh	r3, [r0, #16]
    e704:	8103      	strh	r3, [r0, #8]
                break;
    e706:	e7ae      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e708:	8903      	ldrh	r3, [r0, #8]
    e70a:	3b01      	subs	r3, #1
    e70c:	b29b      	uxth	r3, r3
    e70e:	8103      	strh	r3, [r0, #8]
    e710:	2b00      	cmp	r3, #0
    e712:	d1a8      	bne.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
    e714:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e716:	8a01      	ldrh	r1, [r0, #16]
    e718:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
    e71a:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
    e71c:	3201      	adds	r2, #1
            m_ledOn = true;
    e71e:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
    e720:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e722:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
    e726:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
    e728:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
    e72a:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e72c:	8143      	strh	r3, [r0, #10]
            break;
    e72e:	e79a      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e730:	8903      	ldrh	r3, [r0, #8]
    e732:	3b01      	subs	r3, #1
    e734:	b29b      	uxth	r3, r3
    e736:	8103      	strh	r3, [r0, #8]
    e738:	2b00      	cmp	r3, #0
    e73a:	d194      	bne.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
    e73c:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e73e:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e740:	3b01      	subs	r3, #1
    e742:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
    e744:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
    e748:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e74a:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e74c:	2b00      	cmp	r3, #0
    e74e:	d1d8      	bne.n	e702 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
    e750:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
    e752:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
    e754:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
    e756:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
    e758:	7143      	strb	r3, [r0, #5]
            break;
    e75a:	e784      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e75c:	8903      	ldrh	r3, [r0, #8]
    e75e:	3b01      	subs	r3, #1
    e760:	b29b      	uxth	r3, r3
    e762:	8103      	strh	r3, [r0, #8]
    e764:	2b00      	cmp	r3, #0
    e766:	f47f af7e 	bne.w	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
    e76a:	8983      	ldrh	r3, [r0, #12]
    e76c:	3b01      	subs	r3, #1
    e76e:	b29b      	uxth	r3, r3
    e770:	8183      	strh	r3, [r0, #12]
    e772:	b373      	cbz	r3, e7d2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e774:	8a02      	ldrh	r2, [r0, #16]
    e776:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
    e778:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
    e77a:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
    e77c:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e77e:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
    e782:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
    e784:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e786:	8143      	strh	r3, [r0, #10]
                break;
    e788:	e76d      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e78a:	8903      	ldrh	r3, [r0, #8]
    e78c:	3b01      	subs	r3, #1
    e78e:	b29b      	uxth	r3, r3
    e790:	8103      	strh	r3, [r0, #8]
    e792:	2b00      	cmp	r3, #0
    e794:	f47f af67 	bne.w	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
    e798:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
    e79a:	8a42      	ldrh	r2, [r0, #18]
    e79c:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
    e79e:	3301      	adds	r3, #1
            m_ledOn = true;
    e7a0:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
    e7a2:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
    e7a4:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
    e7a6:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
    e7a8:	7142      	strb	r2, [r0, #5]
            break;
    e7aa:	e75c      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
    e7ac:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
    e7ae:	f011 0301 	ands.w	r3, r1, #1
    e7b2:	d149      	bne.n	e848 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
    e7b4:	3301      	adds	r3, #1
    e7b6:	b2db      	uxtb	r3, r3
    e7b8:	fa41 f203 	asr.w	r2, r1, r3
    e7bc:	07d4      	lsls	r4, r2, #31
    e7be:	d5f9      	bpl.n	e7b4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
    e7c0:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
    e7c2:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
    e7c4:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
    e7c6:	2201      	movs	r2, #1
    m_currentCode = code;
    e7c8:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
    e7ca:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
    e7cc:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
    e7ce:	7142      	strb	r2, [r0, #5]
            break;
    e7d0:	e749      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
    e7d2:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
    e7d4:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
    e7d6:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
    e7d8:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
    e7da:	7143      	strb	r3, [r0, #5]
            break;
    e7dc:	e743      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
    e7de:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
    e7e0:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
    e7e2:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
    e7e4:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
    e7e6:	7143      	strb	r3, [r0, #5]
            break;
    e7e8:	e73d      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
    e7ea:	7983      	ldrb	r3, [r0, #6]
    e7ec:	79c2      	ldrb	r2, [r0, #7]
    e7ee:	3301      	adds	r3, #1
    e7f0:	b2db      	uxtb	r3, r3
    if (code > 7) {
    e7f2:	2b07      	cmp	r3, #7
        group++;
    e7f4:	bf85      	ittet	hi
    e7f6:	3201      	addhi	r2, #1
    e7f8:	b2d2      	uxtbhi	r2, r2
    e7fa:	4619      	movls	r1, r3
        code = 0;
    e7fc:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
    e7fe:	2a04      	cmp	r2, #4
    e800:	4615      	mov	r5, r2
    e802:	dd1b      	ble.n	e83c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
    e804:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
    e806:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
    e808:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
    e80c:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
    e80e:	d01d      	beq.n	e84c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
    e810:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
    e812:	07e9      	lsls	r1, r5, #31
    e814:	d452      	bmi.n	e8bc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
    e816:	2501      	movs	r5, #1
    e818:	3301      	adds	r3, #1
    e81a:	b2db      	uxtb	r3, r3
    e81c:	fa44 f103 	asr.w	r1, r4, r3
    e820:	07c9      	lsls	r1, r1, #31
    e822:	d5f9      	bpl.n	e818 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
    e824:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
    e826:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
    e828:	2d00      	cmp	r5, #0
    e82a:	d149      	bne.n	e8c0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
    e82c:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
    e82e:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
    e830:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
    e832:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
    e834:	7143      	strb	r3, [r0, #5]
}
    e836:	e716      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
    e838:	2501      	movs	r5, #1
    e83a:	e7b8      	b.n	e7ae <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
    e83c:	5c84      	ldrb	r4, [r0, r2]
    e83e:	fa54 f101 	asrs.w	r1, r4, r1
    e842:	d029      	beq.n	e898 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
    e844:	7bc5      	ldrb	r5, [r0, #15]
    e846:	e7eb      	b.n	e820 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
    e848:	2300      	movs	r3, #0
    e84a:	e7b9      	b.n	e7c0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
    e84c:	7843      	ldrb	r3, [r0, #1]
    e84e:	bb83      	cbnz	r3, e8b2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e850:	2102      	movs	r1, #2
    e852:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
    e854:	5cc3      	ldrb	r3, [r0, r3]
    e856:	2b00      	cmp	r3, #0
    e858:	d145      	bne.n	e8e6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e85a:	1c4a      	adds	r2, r1, #1
    e85c:	b2d2      	uxtb	r2, r2
    e85e:	2a05      	cmp	r2, #5
    e860:	d00d      	beq.n	e87e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e862:	5c83      	ldrb	r3, [r0, r2]
    e864:	bb2b      	cbnz	r3, e8b2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e866:	1c8a      	adds	r2, r1, #2
    e868:	b2d2      	uxtb	r2, r2
    e86a:	2a05      	cmp	r2, #5
    e86c:	d007      	beq.n	e87e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e86e:	5c83      	ldrb	r3, [r0, r2]
    e870:	b9fb      	cbnz	r3, e8b2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e872:	1ccb      	adds	r3, r1, #3
    e874:	b2db      	uxtb	r3, r3
    e876:	2b05      	cmp	r3, #5
    e878:	d001      	beq.n	e87e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e87a:	5cc3      	ldrb	r3, [r0, r3]
    e87c:	b9c3      	cbnz	r3, e8b0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
    e87e:	7802      	ldrb	r2, [r0, #0]
    e880:	b112      	cbz	r2, e888 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
    e882:	e024      	b.n	e8ce <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
    e884:	5c83      	ldrb	r3, [r0, r2]
    e886:	bb23      	cbnz	r3, e8d2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
    e888:	3201      	adds	r2, #1
    e88a:	b2d2      	uxtb	r2, r2
    e88c:	42aa      	cmp	r2, r5
    e88e:	ddf9      	ble.n	e884 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
    e890:	2300      	movs	r3, #0
    e892:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
    e894:	7143      	strb	r3, [r0, #5]
    e896:	e6e6      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e898:	3201      	adds	r2, #1
    e89a:	b2d2      	uxtb	r2, r2
    e89c:	2a04      	cmp	r2, #4
    e89e:	d8ee      	bhi.n	e87e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e8a0:	5c83      	ldrb	r3, [r0, r2]
    e8a2:	b933      	cbnz	r3, e8b2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e8a4:	1ca9      	adds	r1, r5, #2
    e8a6:	b2c9      	uxtb	r1, r1
    e8a8:	2905      	cmp	r1, #5
    e8aa:	460b      	mov	r3, r1
    e8ac:	d1d2      	bne.n	e854 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
    e8ae:	e7e6      	b.n	e87e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e8b0:	2204      	movs	r2, #4
    e8b2:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e8b4:	461c      	mov	r4, r3
    e8b6:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
    e8b8:	2300      	movs	r3, #0
    e8ba:	e7b1      	b.n	e820 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
    e8bc:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
    e8be:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
    e8c0:	8a83      	ldrh	r3, [r0, #20]
    e8c2:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
    e8c4:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
    e8c6:	2301      	movs	r3, #1
                m_ledOn = false;
    e8c8:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
    e8ca:	7143      	strb	r3, [r0, #5]
    e8cc:	e6cb      	b.n	e666 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
    e8ce:	4613      	mov	r3, r2
    e8d0:	2200      	movs	r2, #0
    e8d2:	461d      	mov	r5, r3
            m_patternWrap = true;
    e8d4:	2301      	movs	r3, #1
    e8d6:	73c3      	strb	r3, [r0, #15]
    e8d8:	462c      	mov	r4, r5
        code = 0;
    e8da:	2300      	movs	r3, #0
    e8dc:	e799      	b.n	e812 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
    e8de:	2502      	movs	r5, #2
    e8e0:	e6eb      	b.n	e6ba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e8e2:	2503      	movs	r5, #3
    e8e4:	e6e9      	b.n	e6ba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
    e8e6:	460a      	mov	r2, r1
    e8e8:	e7e3      	b.n	e8b2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
    e8ea:	bf00      	nop

0000e8ec <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    e8ec:	7980      	ldrb	r0, [r0, #6]
    e8ee:	4770      	bx	lr

0000e8f0 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    e8f0:	2001      	movs	r0, #1
    e8f2:	4770      	bx	lr

0000e8f4 <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    e8f4:	7980      	ldrb	r0, [r0, #6]
    e8f6:	2804      	cmp	r0, #4
    e8f8:	bf1d      	ittte	ne
    e8fa:	3806      	subne	r0, #6
    e8fc:	fab0 f080 	clzne	r0, r0
    e900:	0940      	lsrne	r0, r0, #5
    e902:	2001      	moveq	r0, #1
    }
    e904:	4770      	bx	lr
    e906:	bf00      	nop

0000e908 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    e908:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    e90a:	2300      	movs	r3, #0
    switch (m_mode) {
    e90c:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    e90e:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e912:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    e916:	d02a      	beq.n	e96e <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    e918:	2a06      	cmp	r2, #6
    e91a:	d126      	bne.n	e96a <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e91c:	b28b      	uxth	r3, r1
    e91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e922:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e926:	bf28      	it	cs
    e928:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    e92a:	b470      	push	{r4, r5, r6}
    e92c:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e92e:	2b00      	cmp	r3, #0
    e930:	d040      	beq.n	e9b4 <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    e932:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e934:	6c02      	ldr	r2, [r0, #64]	; 0x40
    e936:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    e93a:	18d6      	adds	r6, r2, r3
    e93c:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    e940:	42ac      	cmp	r4, r5
    e942:	d008      	beq.n	e956 <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e944:	2b00      	cmp	r3, #0
    e946:	bf0c      	ite	eq
    e948:	2440      	moveq	r4, #64	; 0x40
    e94a:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e94c:	6913      	ldr	r3, [r2, #16]
    e94e:	4223      	tst	r3, r4
    e950:	d1fc      	bne.n	e94c <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e952:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    e956:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e958:	4b18      	ldr	r3, [pc, #96]	; (e9bc <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    e95a:	f002 020f 	and.w	r2, r2, #15
    e95e:	4413      	add	r3, r2
    e960:	2001      	movs	r0, #1
    e962:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    e966:	bc70      	pop	{r4, r5, r6}
    e968:	4770      	bx	lr
    bool success = false;
    e96a:	4618      	mov	r0, r3
    e96c:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    e96e:	1c0b      	adds	r3, r1, #0
    e970:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    e974:	bf18      	it	ne
    e976:	2301      	movne	r3, #1
    e978:	429a      	cmp	r2, r3
    e97a:	d004      	beq.n	e986 <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e97c:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    e97e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e982:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    e986:	b121      	cbz	r1, e992 <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    e988:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    e98c:	fab1 f181 	clz	r1, r1
    e990:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    e992:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    e996:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e998:	428b      	cmp	r3, r1
    e99a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e99c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e9a0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e9a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e9a8:	f04f 0001 	mov.w	r0, #1
    e9ac:	bf14      	ite	ne
    e9ae:	619a      	strne	r2, [r3, #24]
    e9b0:	615a      	streq	r2, [r3, #20]
    e9b2:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e9b4:	43cd      	mvns	r5, r1
    e9b6:	b2ed      	uxtb	r5, r5
    e9b8:	e7bc      	b.n	e934 <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    e9ba:	bf00      	nop
    e9bc:	20001b10 	.word	0x20001b10

0000e9c0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    e9c0:	7983      	ldrb	r3, [r0, #6]
    e9c2:	428b      	cmp	r3, r1
    e9c4:	f000 80cb 	beq.w	eb5e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    e9cc:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e9ce:	b082      	sub	sp, #8
    e9d0:	4604      	mov	r4, r0
    e9d2:	460d      	mov	r5, r1
    switch (newMode) {
    e9d4:	f000 8087 	beq.w	eae6 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    e9d8:	2906      	cmp	r1, #6
    e9da:	d008      	beq.n	e9ee <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e9dc:	2902      	cmp	r1, #2
    e9de:	d033      	beq.n	ea48 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    e9e0:	1ae8      	subs	r0, r5, r3
    e9e2:	fab0 f080 	clz	r0, r0
    e9e6:	0940      	lsrs	r0, r0, #5
}
    e9e8:	b002      	add	sp, #8
    e9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    e9ee:	6803      	ldr	r3, [r0, #0]
    e9f0:	4a79      	ldr	r2, [pc, #484]	; (ebd8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    e9f2:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    e9f4:	71a1      	strb	r1, [r4, #6]
    e9f6:	4293      	cmp	r3, r2
    e9f8:	f040 80b3 	bne.w	eb62 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e9fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e9fe:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ea02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    ea06:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ea08:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ea0a:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    ea0e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    ea12:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ea16:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ea18:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ea1c:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ea1e:	429a      	cmp	r2, r3
    ea20:	d008      	beq.n	ea34 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    ea22:	2e00      	cmp	r6, #0
    ea24:	bf0c      	ite	eq
    ea26:	2640      	moveq	r6, #64	; 0x40
    ea28:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    ea2a:	690a      	ldr	r2, [r1, #16]
    ea2c:	4232      	tst	r2, r6
    ea2e:	d1fc      	bne.n	ea2a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    ea30:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    ea34:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    ea38:	4e68      	ldr	r6, [pc, #416]	; (ebdc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    ea3a:	f001 020f 	and.w	r2, r1, #15
    ea3e:	18b3      	adds	r3, r6, r2
    ea40:	2000      	movs	r0, #0
    ea42:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    ea46:	e093      	b.n	eb70 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    ea48:	2300      	movs	r3, #0
    ea4a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    ea4e:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    ea50:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    ea54:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    ea58:	6b03      	ldr	r3, [r0, #48]	; 0x30
    ea5a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    ea5c:	01db      	lsls	r3, r3, #7
    ea5e:	2a00      	cmp	r2, #0
    ea60:	d177      	bne.n	eb52 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    ea62:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    ea66:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    ea6a:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ea6c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea70:	4e5a      	ldr	r6, [pc, #360]	; (ebdc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    ea72:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea74:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ea78:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    ea7c:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    ea80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea84:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea88:	f04f 0e01 	mov.w	lr, #1
    ea8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ea90:	443b      	add	r3, r7
    ea92:	fa0e f702 	lsl.w	r7, lr, r2
    ea96:	ea28 0707 	bic.w	r7, r8, r7
    ea9a:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea9e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    eaa2:	ea6f 070c 	mvn.w	r7, ip
    eaa6:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eaa8:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eaac:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    eab0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    eab4:	f36f 0200 	bfc	r2, #0, #1
    eab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    eabc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    eac0:	2b00      	cmp	r3, #0
    eac2:	f000 8086 	beq.w	ebd2 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eac6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    eaca:	4845      	ldr	r0, [pc, #276]	; (ebe0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    eacc:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    ead0:	2200      	movs	r2, #0
    ead2:	401f      	ands	r7, r3
    ead4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ead8:	6800      	ldr	r0, [r0, #0]
    eada:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    eade:	f7f8 fa99 	bl	7014 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    eae2:	79a3      	ldrb	r3, [r4, #6]
    eae4:	e77c      	b.n	e9e0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    eae6:	220c      	movs	r2, #12
            State(m_outState);
    eae8:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    eaea:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    eaee:	2600      	movs	r6, #0
            m_mode = newMode;
    eaf0:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    eaf2:	695b      	ldr	r3, [r3, #20]
    eaf4:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    eaf8:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    eafc:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    eafe:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb00:	4936      	ldr	r1, [pc, #216]	; (ebdc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    eb02:	6b20      	ldr	r0, [r4, #48]	; 0x30
    eb04:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb06:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb0a:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb0e:	f04f 0e01 	mov.w	lr, #1
    eb12:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    eb16:	fa0e f002 	lsl.w	r0, lr, r2
    eb1a:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    eb1e:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb22:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eb26:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb2a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    eb2e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    eb32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb36:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb3a:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb3e:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    eb42:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    eb46:	f366 0200 	bfi	r2, r6, #0, #1
    eb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    eb4e:	79a3      	ldrb	r3, [r4, #6]
            break;
    eb50:	e746      	b.n	e9e0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    eb52:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    eb56:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    eb5a:	6191      	str	r1, [r2, #24]
    eb5c:	e786      	b.n	ea6c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    eb5e:	2001      	movs	r0, #1
    eb60:	4770      	bx	lr
            State(0);
    eb62:	2100      	movs	r1, #0
    eb64:	4798      	blx	r3
    eb66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    eb6a:	4e1c      	ldr	r6, [pc, #112]	; (ebdc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    eb6c:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    eb70:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    eb74:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb76:	9301      	str	r3, [sp, #4]
    eb78:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    eb7a:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eb7c:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    eb80:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    eb84:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    eb88:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eb8a:	fa0c fe02 	lsl.w	lr, ip, r2
    eb8e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eb92:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    eb96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eb9a:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    eb9e:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    eba0:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eba4:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    eba8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    ebac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ebb0:	ea42 020c 	orr.w	r2, r2, ip
    ebb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    ebb8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	d090      	beq.n	eae2 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ebc0:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ebc4:	4806      	ldr	r0, [pc, #24]	; (ebe0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    ebc6:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    ebca:	2200      	movs	r2, #0
    ebcc:	ea23 0707 	bic.w	r7, r3, r7
    ebd0:	e780      	b.n	ead4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    ebd2:	2302      	movs	r3, #2
    ebd4:	e704      	b.n	e9e0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    ebd6:	bf00      	nop
    ebd8:	0000e909 	.word	0x0000e909
    ebdc:	20001b10 	.word	0x20001b10
    ebe0:	20000c08 	.word	0x20000c08

0000ebe4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    ebe4:	b570      	push	{r4, r5, r6, lr}
    ebe6:	461d      	mov	r5, r3
    ebe8:	4604      	mov	r4, r0
    ebea:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    ebee:	f7f6 fb75 	bl	52dc <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    ebf2:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    ebf6:	4a14      	ldr	r2, [pc, #80]	; (ec48 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    ebf8:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    ebfa:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    ebfc:	78aa      	ldrb	r2, [r5, #2]
    ebfe:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    ec00:	2301      	movs	r3, #1
    ec02:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    ec04:	2200      	movs	r2, #0
    ec06:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    ec0a:	63a3      	str	r3, [r4, #56]	; 0x38
    ec0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    ec10:	7aeb      	ldrb	r3, [r5, #11]
    ec12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    ec16:	230c      	movs	r3, #12
    ec18:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    ec1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    ec20:	64a2      	str	r2, [r4, #72]	; 0x48
    ec22:	64e2      	str	r2, [r4, #76]	; 0x4c
    ec24:	6522      	str	r2, [r4, #80]	; 0x50
    ec26:	6562      	str	r2, [r4, #84]	; 0x54
    ec28:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    ec2c:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    ec30:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    ec34:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    ec38:	7aaa      	ldrb	r2, [r5, #10]
    ec3a:	4b04      	ldr	r3, [pc, #16]	; (ec4c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    ec3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ec40:	6423      	str	r3, [r4, #64]	; 0x40
}
    ec42:	4620      	mov	r0, r4
    ec44:	bd70      	pop	{r4, r5, r6, pc}
    ec46:	bf00      	nop
    ec48:	000232a0 	.word	0x000232a0
    ec4c:	000232c8 	.word	0x000232c8

0000ec50 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec52:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    ec54:	f7f6 fa92 	bl	517c <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    ec58:	79a3      	ldrb	r3, [r4, #6]
    ec5a:	2b04      	cmp	r3, #4
    ec5c:	d12d      	bne.n	ecba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    ec5e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    ec62:	bb5b      	cbnz	r3, ecbc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    ec64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    ec68:	2b00      	cmp	r3, #0
    ec6a:	f040 809d 	bne.w	eda8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    ec6e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ec72:	220c      	movs	r2, #12
    ec74:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    ec78:	b19b      	cbz	r3, eca2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ec7a:	4d75      	ldr	r5, [pc, #468]	; (ee50 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    ec7c:	68a7      	ldr	r7, [r4, #8]
    ec7e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ec82:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    ec86:	4873      	ldr	r0, [pc, #460]	; (ee54 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    ec88:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ec8a:	2601      	movs	r6, #1
    ec8c:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    ec90:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ec94:	fa06 f101 	lsl.w	r1, r6, r1
    ec98:	6800      	ldr	r0, [r0, #0]
    ec9a:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    ec9e:	f7f8 f9b9 	bl	7014 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    eca2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    eca6:	b143      	cbz	r3, ecba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    eca8:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    ecac:	b303      	cbz	r3, ecf0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    ecae:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    ecb2:	429a      	cmp	r2, r3
    ecb4:	db1c      	blt.n	ecf0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    ecb6:	4293      	cmp	r3, r2
    ecb8:	d070      	beq.n	ed9c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    ecba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    ecbc:	3b01      	subs	r3, #1
    ecbe:	b29b      	uxth	r3, r3
    ecc0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	d1ec      	bne.n	eca2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ecc8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    eccc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ecd0:	429a      	cmp	r2, r3
    ecd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ecd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ecd6:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    ecda:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ecde:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ece2:	bf14      	ite	ne
    ece4:	619a      	strne	r2, [r3, #24]
    ece6:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ece8:	230c      	movs	r3, #12
    ecea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    ecee:	e7d8      	b.n	eca2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    ecf0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    ecf4:	bb5b      	cbnz	r3, ed4e <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    ecf6:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    ecfa:	2b00      	cmp	r3, #0
    ecfc:	d14e      	bne.n	ed9c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    ecfe:	4a56      	ldr	r2, [pc, #344]	; (ee58 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    ed00:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ed02:	6813      	ldr	r3, [r2, #0]
    ed04:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ed06:	1a1b      	subs	r3, r3, r0
    ed08:	428b      	cmp	r3, r1
    ed0a:	d3d6      	bcc.n	ecba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    ed0c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    ed10:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    ed14:	6812      	ldr	r2, [r2, #0]
    ed16:	6522      	str	r2, [r4, #80]	; 0x50
    ed18:	fab3 f383 	clz	r3, r3
    ed1c:	095b      	lsrs	r3, r3, #5
    ed1e:	428b      	cmp	r3, r1
    ed20:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed22:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    ed26:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ed2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ed2e:	f04f 020c 	mov.w	r2, #12
    ed32:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    ed36:	f04f 0001 	mov.w	r0, #1
    ed3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ed3c:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    ed40:	bf14      	ite	ne
    ed42:	619a      	strne	r2, [r3, #24]
    ed44:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    ed46:	2301      	movs	r3, #1
    ed48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    ed4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    ed4e:	4a42      	ldr	r2, [pc, #264]	; (ee58 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    ed50:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ed52:	6813      	ldr	r3, [r2, #0]
    ed54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    ed56:	1a1b      	subs	r3, r3, r0
    ed58:	428b      	cmp	r3, r1
    ed5a:	d3ae      	bcc.n	ecba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    ed5c:	6812      	ldr	r2, [r2, #0]
    ed5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ed62:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    ed64:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ed66:	220c      	movs	r2, #12
                        m_pulseValue = false;
    ed68:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ed6c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    ed70:	2b00      	cmp	r3, #0
    ed72:	d15b      	bne.n	ee2c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    ed74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ed78:	01db      	lsls	r3, r3, #7
    ed7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ed7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ed82:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    ed84:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    ed88:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    ed8c:	3301      	adds	r3, #1
                        m_outState = false;
    ed8e:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    ed90:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    ed94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    ed98:	2a00      	cmp	r2, #0
    ed9a:	d08e      	beq.n	ecba <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    ed9c:	2300      	movs	r3, #0
    ed9e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    eda2:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    eda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    eda8:	4620      	mov	r0, r4
    edaa:	f7f6 fabb 	bl	5324 <_ZN9ClearCore9DigitalIn7StateRTEv>
    edae:	2800      	cmp	r0, #0
    edb0:	f47f af5d 	bne.w	ec6e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    edb4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    edb8:	2b00      	cmp	r3, #0
    edba:	f43f af72 	beq.w	eca2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    edbe:	3b01      	subs	r3, #1
    edc0:	b2db      	uxtb	r3, r3
    edc2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    edc6:	2b00      	cmp	r3, #0
    edc8:	f47f af6b 	bne.w	eca2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    edcc:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    edd0:	b9e6      	cbnz	r6, ee0c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    edd2:	4a1f      	ldr	r2, [pc, #124]	; (ee50 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    edd4:	491f      	ldr	r1, [pc, #124]	; (ee54 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    edd6:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    edda:	68a3      	ldr	r3, [r4, #8]
    eddc:	680f      	ldr	r7, [r1, #0]
    edde:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    ede2:	2501      	movs	r5, #1
    ede4:	4303      	orrs	r3, r0
    ede6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    edea:	fa05 f101 	lsl.w	r1, r5, r1
    edee:	4638      	mov	r0, r7
    edf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    edf4:	462a      	mov	r2, r5
    edf6:	f7f8 f90d 	bl	7014 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    edfa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    edfe:	fa05 f202 	lsl.w	r2, r5, r2
    ee02:	4638      	mov	r0, r7
    ee04:	4631      	mov	r1, r6
    ee06:	b2d2      	uxtb	r2, r2
    ee08:	f7f7 ff58 	bl	6cbc <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    ee0c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ee10:	b9ab      	cbnz	r3, ee3e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    ee12:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ee16:	01db      	lsls	r3, r3, #7
    ee18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ee1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ee20:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    ee22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    ee26:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    ee2a:	e73a      	b.n	eca2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ee2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ee30:	01db      	lsls	r3, r3, #7
    ee32:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ee36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ee3a:	619a      	str	r2, [r3, #24]
    ee3c:	e7a2      	b.n	ed84 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    ee3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ee42:	01db      	lsls	r3, r3, #7
    ee44:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ee48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ee4c:	619a      	str	r2, [r3, #24]
    ee4e:	e7e8      	b.n	ee22 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    ee50:	20001b10 	.word	0x20001b10
    ee54:	20000c08 	.word	0x20000c08
    ee58:	20001d2c 	.word	0x20001d2c

0000ee5c <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    ee5c:	7983      	ldrb	r3, [r0, #6]
    ee5e:	2b04      	cmp	r3, #4
    ee60:	d014      	beq.n	ee8c <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    ee62:	2b06      	cmp	r3, #6
    ee64:	d005      	beq.n	ee72 <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    ee66:	2b02      	cmp	r3, #2
    ee68:	d001      	beq.n	ee6e <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    ee6a:	2000      	movs	r0, #0
    ee6c:	4770      	bx	lr
            state = DigitalIn::State();
    ee6e:	f7f6 b90b 	b.w	5088 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    ee72:	6c03      	ldr	r3, [r0, #64]	; 0x40
    ee74:	b173      	cbz	r3, ee94 <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ee76:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    ee7a:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ee7e:	4413      	add	r3, r2
    ee80:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    ee84:	b929      	cbnz	r1, ee92 <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ee86:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    ee8a:	4770      	bx	lr
            state = m_outState;
    ee8c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    ee90:	4770      	bx	lr
    ee92:	4770      	bx	lr
    int16_t state = -1;
    ee94:	f04f 30ff 	mov.w	r0, #4294967295
}
    ee98:	4770      	bx	lr
    ee9a:	bf00      	nop

0000ee9c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    ee9c:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ee9e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    eea0:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    eea2:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    eea4:	4604      	mov	r4, r0
    m_outState = false;
    eea6:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    eeaa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    eeae:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    eeb2:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    eeb6:	d41a      	bmi.n	eeee <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    eeb8:	6b02      	ldr	r2, [r0, #48]	; 0x30
    eeba:	01d2      	lsls	r2, r2, #7
    eebc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    eec0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    eec4:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    eec8:	2004      	movs	r0, #4
    eeca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    eece:	f360 0203 	bfi	r2, r0, #0, #4
    eed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    eed6:	4620      	mov	r0, r4
    eed8:	f7f6 f8ea 	bl	50b0 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    eedc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    eee0:	01db      	lsls	r3, r3, #7
    eee2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    eee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    eeea:	609a      	str	r2, [r3, #8]
    eeec:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    eeee:	6b00      	ldr	r0, [r0, #48]	; 0x30
    eef0:	01c0      	lsls	r0, r0, #7
    eef2:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    eef6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    eefa:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    eefe:	2004      	movs	r0, #4
    ef00:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    ef04:	f360 1307 	bfi	r3, r0, #4, #4
    ef08:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    ef0c:	e7e3      	b.n	eed6 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    ef0e:	bf00      	nop

0000ef10 <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    ef10:	2005      	movs	r0, #5
    ef12:	4770      	bx	lr

0000ef14 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    ef14:	7980      	ldrb	r0, [r0, #6]
    ef16:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    ef18:	2804      	cmp	r0, #4
    ef1a:	bf8c      	ite	hi
    ef1c:	2000      	movhi	r0, #0
    ef1e:	2001      	movls	r0, #1
    ef20:	4770      	bx	lr
    ef22:	bf00      	nop

0000ef24 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef26:	b083      	sub	sp, #12
    ef28:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    ef2c:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    ef2e:	4604      	mov	r4, r0
    ef30:	9d08      	ldr	r5, [sp, #32]
    ef32:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ef34:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    ef38:	f7ff fe54 	bl	ebe4 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    ef3c:	2300      	movs	r3, #0
    ef3e:	490f      	ldr	r1, [pc, #60]	; (ef7c <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    ef40:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    ef44:	f640 42cc 	movw	r2, #3276	; 0xccc
    ef48:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    ef4c:	6663      	str	r3, [r4, #100]	; 0x64
    ef4e:	66a3      	str	r3, [r4, #104]	; 0x68
    ef50:	66e3      	str	r3, [r4, #108]	; 0x6c
    ef52:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    ef56:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    ef5a:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    ef5e:	6765      	str	r5, [r4, #116]	; 0x74
    ef60:	67a6      	str	r6, [r4, #120]	; 0x78
    ef62:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    ef66:	6021      	str	r1, [r4, #0]
    ef68:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    ef6c:	7b2a      	ldrb	r2, [r5, #12]
    ef6e:	4b04      	ldr	r3, [pc, #16]	; (ef80 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    ef70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ef74:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    ef76:	4620      	mov	r0, r4
    ef78:	b003      	add	sp, #12
    ef7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef7c:	000232f0 	.word	0x000232f0
    ef80:	00023318 	.word	0x00023318

0000ef84 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    ef84:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    ef86:	6803      	ldr	r3, [r0, #0]
    ef88:	4a12      	ldr	r2, [pc, #72]	; (efd4 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    ef8a:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    ef8c:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    ef90:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    ef92:	b082      	sub	sp, #8
    ef94:	4604      	mov	r4, r0
    ef96:	d115      	bne.n	efc4 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    ef98:	7980      	ldrb	r0, [r0, #6]
    ef9a:	2808      	cmp	r0, #8
    ef9c:	d805      	bhi.n	efaa <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    ef9e:	2301      	movs	r3, #1
    efa0:	fa03 f000 	lsl.w	r0, r3, r0
    efa4:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    efa8:	d101      	bne.n	efae <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    efaa:	b002      	add	sp, #8
    efac:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    efae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    efb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    efb2:	01db      	lsls	r3, r3, #7
    efb4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    efb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    efbc:	b131      	cbz	r1, efcc <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    efbe:	615a      	str	r2, [r3, #20]
}
    efc0:	b002      	add	sp, #8
    efc2:	bd10      	pop	{r4, pc}
    efc4:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    efc6:	4798      	blx	r3
    efc8:	9901      	ldr	r1, [sp, #4]
    efca:	e7e6      	b.n	ef9a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    efcc:	619a      	str	r2, [r3, #24]
}
    efce:	b002      	add	sp, #8
    efd0:	bd10      	pop	{r4, pc}
    efd2:	bf00      	nop
    efd4:	00006ba1 	.word	0x00006ba1

0000efd8 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    efd8:	7982      	ldrb	r2, [r0, #6]
    efda:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    efdc:	4601      	mov	r1, r0
    efde:	d808      	bhi.n	eff2 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    efe0:	2301      	movs	r3, #1
    efe2:	4093      	lsls	r3, r2
    efe4:	f013 0f54 	tst.w	r3, #84	; 0x54
    efe8:	d112      	bne.n	f010 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    efea:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    efee:	d102      	bne.n	eff6 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    eff0:	4770      	bx	lr
            state = 0;
    eff2:	2000      	movs	r0, #0
}
    eff4:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    eff6:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    eff8:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    effa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    effc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    effe:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    f002:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    f006:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    f00a:	f340 004f 	sbfx	r0, r0, #1, #16
    f00e:	4770      	bx	lr
            state = DigitalInOut::State();
    f010:	f7ff bf24 	b.w	ee5c <_ZN9ClearCore12DigitalInOut5StateEv>

0000f014 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    f014:	b510      	push	{r4, lr}
    switch (m_mode) {
    f016:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f018:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    f01a:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f01c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    f01e:	2b05      	cmp	r3, #5
    f020:	d82a      	bhi.n	f078 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    f022:	e8df f003 	tbb	[pc, r3]
    f026:	2925      	.short	0x2925
    f028:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    f02c:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f02e:	4b13      	ldr	r3, [pc, #76]	; (f07c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    f030:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    f034:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    f038:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    f03a:	bf1b      	ittet	ne
    f03c:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    f040:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    f044:	20ff      	moveq	r0, #255	; 0xff
    f046:	11c0      	asrne	r0, r0, #7
    f048:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f04c:	f3c2 024f 	ubfx	r2, r2, #1, #16
    f050:	4b0b      	ldr	r3, [pc, #44]	; (f080 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    f052:	fb01 f102 	mul.w	r1, r1, r2
    f056:	fb83 0301 	smull	r0, r3, r3, r1
    f05a:	440b      	add	r3, r1
    f05c:	139b      	asrs	r3, r3, #14
    f05e:	17c9      	asrs	r1, r1, #31
    f060:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f062:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f064:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f066:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f068:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f06a:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    f06c:	2001      	movs	r0, #1
            break;
    f06e:	bd10      	pop	{r4, pc}
}
    f070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    f074:	f7ff bc48 	b.w	e908 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    f078:	2000      	movs	r0, #0
}
    f07a:	bd10      	pop	{r4, pc}
    f07c:	20001b10 	.word	0x20001b10
    f080:	80010003 	.word	0x80010003

0000f084 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    f084:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    f088:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    f08c:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    f090:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    f092:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    f094:	b302      	cbz	r2, f0d8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    f096:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    f09a:	2a04      	cmp	r2, #4
    f09c:	d01c      	beq.n	f0d8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    f09e:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    f0a0:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    f0a4:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    f0a6:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    f0aa:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    f0ac:	f004 f8a0 	bl	131f0 <arm_sin_q15>
    f0b0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    f0b4:	4b41      	ldr	r3, [pc, #260]	; (f1bc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    f0b6:	fb11 f100 	smulbb	r1, r1, r0
    f0ba:	429d      	cmp	r5, r3
    f0bc:	f341 31cf 	sbfx	r1, r1, #15, #16
    f0c0:	d177      	bne.n	f1b2 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    f0c2:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f0c4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    f0c6:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f0c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    f0ca:	2b05      	cmp	r3, #5
    f0cc:	d81e      	bhi.n	f10c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    f0ce:	e8df f003 	tbb	[pc, r3]
    f0d2:	1d6b      	.short	0x1d6b
    f0d4:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    f0d8:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    f0da:	2a07      	cmp	r2, #7
    f0dc:	d017      	beq.n	f10e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    f0de:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    f0e0:	4c36      	ldr	r4, [pc, #216]	; (f1bc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    f0e2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    f0e4:	f043 0301 	orr.w	r3, r3, #1
    f0e8:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    f0ea:	6803      	ldr	r3, [r0, #0]
    f0ec:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    f0ee:	2500      	movs	r5, #0
    f0f0:	42a3      	cmp	r3, r4
    f0f2:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    f0f6:	d132      	bne.n	f15e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f0f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    f0fa:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f0fc:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    f0fe:	2a04      	cmp	r2, #4
    f100:	d804      	bhi.n	f10c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    f102:	e8df f002 	tbb	[pc, r2]
    f106:	0327      	.short	0x0327
    f108:	1b27      	.short	0x1b27
    f10a:	27          	.byte	0x27
    f10b:	00          	.byte	0x00
    f10c:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    f10e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    f112:	4293      	cmp	r3, r2
    f114:	ddc3      	ble.n	f09e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    f116:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    f118:	4a28      	ldr	r2, [pc, #160]	; (f1bc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    f11a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    f11c:	f043 0301 	orr.w	r3, r3, #1
    f120:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    f122:	6803      	ldr	r3, [r0, #0]
    f124:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    f126:	2400      	movs	r4, #0
    f128:	4293      	cmp	r3, r2
    f12a:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    f12e:	d116      	bne.n	f15e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    f130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    f132:	085b      	lsrs	r3, r3, #1
    f134:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f136:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f138:	674b      	str	r3, [r1, #116]	; 0x74
    f13a:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    f13c:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f13e:	4a20      	ldr	r2, [pc, #128]	; (f1c0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    f140:	f000 000f 	and.w	r0, r0, #15
    f144:	4402      	add	r2, r0
    f146:	b29b      	uxth	r3, r3
    f148:	2000      	movs	r0, #0
    f14a:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f14e:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f150:	674b      	str	r3, [r1, #116]	; 0x74
    f152:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    f154:	2100      	movs	r1, #0
}
    f156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    f15a:	f7ff bbd5 	b.w	e908 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    f15e:	2100      	movs	r1, #0
}
    f160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    f164:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    f166:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f168:	4b15      	ldr	r3, [pc, #84]	; (f1c0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    f16a:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    f16e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    f172:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    f174:	bf1b      	ittet	ne
    f176:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    f17a:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    f17e:	24ff      	moveq	r4, #255	; 0xff
    f180:	11e4      	asrne	r4, r4, #7
    f182:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f186:	f3c2 024f 	ubfx	r2, r2, #1, #16
    f18a:	4b0e      	ldr	r3, [pc, #56]	; (f1c4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    f18c:	fb01 f102 	mul.w	r1, r1, r2
    f190:	fb83 4301 	smull	r4, r3, r3, r1
    f194:	440b      	add	r3, r1
    f196:	139b      	asrs	r3, r3, #14
    f198:	17c9      	asrs	r1, r1, #31
    f19a:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f19c:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f19e:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f1a0:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    f1a2:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    f1a4:	6741      	str	r1, [r0, #116]	; 0x74
    f1a6:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    f1a8:	4620      	mov	r0, r4
}
    f1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    f1ae:	f7ff bbab 	b.w	e908 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    f1b2:	4620      	mov	r0, r4
    f1b4:	462b      	mov	r3, r5
}
    f1b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    f1ba:	4718      	bx	r3
    f1bc:	0000f015 	.word	0x0000f015
    f1c0:	20001b10 	.word	0x20001b10
    f1c4:	80010003 	.word	0x80010003

0000f1c8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    f1c8:	7983      	ldrb	r3, [r0, #6]
    f1ca:	3b02      	subs	r3, #2
    f1cc:	2b05      	cmp	r3, #5
    f1ce:	d804      	bhi.n	f1da <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    f1d0:	e8df f003 	tbb	[pc, r3]
    f1d4:	03040304 	.word	0x03040304
    f1d8:	0604      	.short	0x0604
    f1da:	4770      	bx	lr
            DigitalInOut::Refresh();
    f1dc:	f7ff bd38 	b.w	ec50 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    f1e0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    f1e4:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    f1e6:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    f1e8:	d02c      	beq.n	f244 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    f1ea:	2b04      	cmp	r3, #4
    f1ec:	d003      	beq.n	f1f6 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    f1ee:	2b02      	cmp	r3, #2
    f1f0:	d04c      	beq.n	f28c <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    f1f2:	bcf0      	pop	{r4, r5, r6, r7}
    f1f4:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    f1f6:	4937      	ldr	r1, [pc, #220]	; (f2d4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    f1f8:	6e44      	ldr	r4, [r0, #100]	; 0x64
    f1fa:	680b      	ldr	r3, [r1, #0]
    f1fc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    f1fe:	1b1b      	subs	r3, r3, r4
    f200:	4293      	cmp	r3, r2
    f202:	d9f6      	bls.n	f1f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    f204:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    f206:	2303      	movs	r3, #3
    f208:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    f20c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f20e:	4b32      	ldr	r3, [pc, #200]	; (f2d8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    f210:	f042 0201 	orr.w	r2, r2, #1
    f214:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    f216:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    f218:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    f21a:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f21c:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f220:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    f224:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f226:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f22a:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f22c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f230:	408a      	lsls	r2, r1
    f232:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    f234:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f236:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f23a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f23e:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    f242:	e7d6      	b.n	f1f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    f244:	4923      	ldr	r1, [pc, #140]	; (f2d4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    f246:	6e44      	ldr	r4, [r0, #100]	; 0x64
    f248:	680b      	ldr	r3, [r1, #0]
    f24a:	6e82      	ldr	r2, [r0, #104]	; 0x68
    f24c:	1b1b      	subs	r3, r3, r4
    f24e:	4293      	cmp	r3, r2
    f250:	d9cf      	bls.n	f1f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f252:	4a21      	ldr	r2, [pc, #132]	; (f2d8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    f254:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    f256:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f258:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f25a:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f25e:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    f262:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f264:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f268:	2101      	movs	r1, #1
    f26a:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f26c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f270:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    f274:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    f276:	ea24 0406 	bic.w	r4, r4, r6
    f27a:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f27e:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f282:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f286:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    f28a:	e7b2      	b.n	f1f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    f28c:	4b11      	ldr	r3, [pc, #68]	; (f2d4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    f28e:	6e41      	ldr	r1, [r0, #100]	; 0x64
    f290:	681b      	ldr	r3, [r3, #0]
    f292:	6e82      	ldr	r2, [r0, #104]	; 0x68
    f294:	1a5b      	subs	r3, r3, r1
    f296:	4293      	cmp	r3, r2
    f298:	d9ab      	bls.n	f1f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f29a:	4a0f      	ldr	r2, [pc, #60]	; (f2d8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    f29c:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f29e:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    f2a0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f2a4:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f2a8:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f2ac:	2501      	movs	r5, #1
    f2ae:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f2b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f2b4:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    f2b8:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    f2bc:	2500      	movs	r5, #0
    f2be:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    f2c2:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f2c6:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f2ca:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f2ce:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    f2d2:	e78e      	b.n	f1f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    f2d4:	20001d2c 	.word	0x20001d2c
    f2d8:	20001b10 	.word	0x20001b10

0000f2dc <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    f2dc:	b570      	push	{r4, r5, r6, lr}
    f2de:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    f2e0:	f7ff fddc 	bl	ee9c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    f2e4:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    f2e6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    f2e8:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    f2ec:	6813      	ldr	r3, [r2, #0]
    f2ee:	f043 0301 	orr.w	r3, r3, #1
    f2f2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    f2f4:	6893      	ldr	r3, [r2, #8]
    f2f6:	f013 0301 	ands.w	r3, r3, #1
    f2fa:	d1fb      	bne.n	f2f4 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    f2fc:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    f2fe:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    f300:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    f302:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    f304:	4b24      	ldr	r3, [pc, #144]	; (f398 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    f306:	4e25      	ldr	r6, [pc, #148]	; (f39c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    f308:	4825      	ldr	r0, [pc, #148]	; (f3a0 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    f30a:	f045 0502 	orr.w	r5, r5, #2
    f30e:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    f310:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    f312:	f045 0505 	orr.w	r5, r5, #5
    f316:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    f318:	6a55      	ldr	r5, [r2, #36]	; 0x24
    f31a:	430d      	orrs	r5, r1
    f31c:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    f31e:	681b      	ldr	r3, [r3, #0]
    f320:	fba6 5303 	umull	r5, r3, r6, r3
    f324:	0bdb      	lsrs	r3, r3, #15
    f326:	3b01      	subs	r3, #1
    f328:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    f32a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f32c:	6453      	str	r3, [r2, #68]	; 0x44
    f32e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f330:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    f332:	6f63      	ldr	r3, [r4, #116]	; 0x74
    f334:	f993 2001 	ldrsb.w	r2, [r3, #1]
    f338:	789d      	ldrb	r5, [r3, #2]
    f33a:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    f33e:	fa01 f605 	lsl.w	r6, r1, r5
    f342:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    f344:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    f346:	f994 3001 	ldrsb.w	r3, [r4, #1]
    f34a:	78a4      	ldrb	r4, [r4, #2]
    f34c:	01db      	lsls	r3, r3, #7
    f34e:	4418      	add	r0, r3
    f350:	40a1      	lsls	r1, r4
    f352:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    f354:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f356:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    f35a:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f35c:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f360:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f364:	2005      	movs	r0, #5
    f366:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f368:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f36c:	bf4c      	ite	mi
    f36e:	f360 1107 	bfimi	r1, r0, #4, #4
    f372:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f376:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f37a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f37e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    f382:	2105      	movs	r1, #5
    f384:	07e0      	lsls	r0, r4, #31
    f386:	bf4c      	ite	mi
    f388:	f361 1207 	bfimi	r2, r1, #4, #4
    f38c:	f361 0203 	bfipl	r2, r1, #0, #4
    f390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    f394:	bd70      	pop	{r4, r5, r6, pc}
    f396:	bf00      	nop
    f398:	200000e8 	.word	0x200000e8
    f39c:	be37c63b 	.word	0xbe37c63b
    f3a0:	41008000 	.word	0x41008000

0000f3a4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    f3a4:	7982      	ldrb	r2, [r0, #6]
    f3a6:	428a      	cmp	r2, r1
    f3a8:	d07a      	beq.n	f4a0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    f3aa:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    f3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3ae:	460d      	mov	r5, r1
    f3b0:	d867      	bhi.n	f482 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    f3b2:	2201      	movs	r2, #1
    f3b4:	fa02 f301 	lsl.w	r3, r2, r1
    f3b8:	f013 0f54 	tst.w	r3, #84	; 0x54
    f3bc:	4604      	mov	r4, r0
    f3be:	d171      	bne.n	f4a4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    f3c0:	f413 7f90 	tst.w	r3, #288	; 0x120
    f3c4:	d05f      	beq.n	f486 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    f3c6:	7901      	ldrb	r1, [r0, #4]
    f3c8:	4a5d      	ldr	r2, [pc, #372]	; (f540 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    f3ca:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    f3ce:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    f3d2:	2b00      	cmp	r3, #0
    f3d4:	f040 809e 	bne.w	f514 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    f3d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f3da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    f3dc:	01db      	lsls	r3, r3, #7
    f3de:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    f3e2:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    f3e6:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    f3e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f3ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f3ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f3f2:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f3f4:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    f3f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    f3fc:	f36f 0000 	bfc	r0, #0, #1
    f400:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    f404:	68a3      	ldr	r3, [r4, #8]
    f406:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f40a:	2d05      	cmp	r5, #5
    f40c:	f000 808b 	beq.w	f526 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    f410:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f414:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f418:	2701      	movs	r7, #1
    f41a:	fa07 f101 	lsl.w	r1, r7, r1
    f41e:	ea20 0101 	bic.w	r1, r0, r1
    f422:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f426:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f42a:	6f61      	ldr	r1, [r4, #116]	; 0x74
    f42c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    f430:	f991 3001 	ldrsb.w	r3, [r1, #1]
    f434:	4a43      	ldr	r2, [pc, #268]	; (f544 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    f436:	7889      	ldrb	r1, [r1, #2]
    f438:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f43c:	440b      	add	r3, r1
    f43e:	2101      	movs	r1, #1
    f440:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    f444:	4308      	orrs	r0, r1
    f446:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f44a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    f44c:	f990 3001 	ldrsb.w	r3, [r0, #1]
    f450:	7880      	ldrb	r0, [r0, #2]
    f452:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f456:	4403      	add	r3, r0
    f458:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f45c:	430a      	orrs	r2, r1
    f45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    f462:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    f464:	6813      	ldr	r3, [r2, #0]
    f466:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f46a:	428b      	cmp	r3, r1
    f46c:	d006      	beq.n	f47c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    f46e:	6813      	ldr	r3, [r2, #0]
    f470:	f361 0341 	bfi	r3, r1, #1, #1
    f474:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    f476:	6893      	ldr	r3, [r2, #8]
    f478:	079b      	lsls	r3, r3, #30
    f47a:	d4fc      	bmi.n	f476 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    f47c:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    f47e:	2001      	movs	r0, #1
    f480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    f482:	2000      	movs	r0, #0
    f484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f486:	061a      	lsls	r2, r3, #24
    f488:	d5fb      	bpl.n	f482 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    f48a:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f48c:	4a2c      	ldr	r2, [pc, #176]	; (f540 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    f48e:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    f492:	f001 010f 	and.w	r1, r1, #15
    f496:	1850      	adds	r0, r2, r1
    f498:	11db      	asrs	r3, r3, #7
    f49a:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    f49e:	e796      	b.n	f3ce <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    f4a0:	2001      	movs	r0, #1
    f4a2:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4a4:	4f26      	ldr	r7, [pc, #152]	; (f540 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    f4a6:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f4a8:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4ac:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f4b0:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4b4:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4b8:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4be:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    f4c2:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f4c6:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f4ca:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f4ce:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    f4d2:	f7ff fa75 	bl	e9c0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    f4d6:	2800      	cmp	r0, #0
    f4d8:	d0d3      	beq.n	f482 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f4da:	6f61      	ldr	r1, [r4, #116]	; 0x74
    f4dc:	4b19      	ldr	r3, [pc, #100]	; (f544 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    f4de:	f991 2001 	ldrsb.w	r2, [r1, #1]
    f4e2:	7889      	ldrb	r1, [r1, #2]
    f4e4:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    f4e8:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f4ea:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f4ec:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    f4f0:	f36f 0000 	bfc	r0, #0, #1
    f4f4:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f4f8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    f4fa:	f992 0001 	ldrsb.w	r0, [r2, #1]
    f4fe:	7892      	ldrb	r2, [r2, #2]
    f500:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    f504:	4413      	add	r3, r2
    f506:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f50a:	f36f 0200 	bfc	r2, #0, #1
    f50e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    f512:	e7a6      	b.n	f462 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    f514:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f516:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    f518:	01db      	lsls	r3, r3, #7
    f51a:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    f51e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    f522:	6146      	str	r6, [r0, #20]
    f524:	e760      	b.n	f3e8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f526:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f52a:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f52e:	2601      	movs	r6, #1
    f530:	fa06 f101 	lsl.w	r1, r6, r1
    f534:	4339      	orrs	r1, r7
    f536:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f53a:	4303      	orrs	r3, r0
    f53c:	e775      	b.n	f42a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    f53e:	bf00      	nop
    f540:	20001b10 	.word	0x20001b10
    f544:	41008000 	.word	0x41008000

0000f548 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    f548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f54c:	4604      	mov	r4, r0
    f54e:	4267      	negs	r7, r4
    f550:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    f554:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    f558:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    f55c:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f560:	4608      	mov	r0, r1
    f562:	ea4f 0999 	mov.w	r9, r9, lsr #2
    f566:	2101      	movs	r1, #1
    f568:	f001 ff84 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    f56c:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    f570:	2600      	movs	r6, #0
    bool sendData = true;
    f572:	2201      	movs	r2, #1
    f574:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f578:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    f57c:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    f580:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    f582:	4690      	mov	r8, r2
    f584:	2b02      	cmp	r3, #2
    f586:	f000 821b 	beq.w	f9c0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    f58a:	2d03      	cmp	r5, #3
    f58c:	f300 8159 	bgt.w	f842 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    f590:	b1a3      	cbz	r3, f5bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    f592:	2b01      	cmp	r3, #1
    f594:	d1fc      	bne.n	f590 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    f596:	b1da      	cbz	r2, f5d0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    f598:	2e00      	cmp	r6, #0
    f59a:	f040 808d 	bne.w	f6b8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    f59e:	6026      	str	r6, [r4, #0]
    f5a0:	6066      	str	r6, [r4, #4]
    f5a2:	60a6      	str	r6, [r4, #8]
    f5a4:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    f5a6:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    f5a8:	f104 0212 	add.w	r2, r4, #18
    f5ac:	4621      	mov	r1, r4
    f5ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f5b0:	f002 f80a 	bl	115c8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    f5b4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f5b8:	2200      	movs	r2, #0
    f5ba:	e7e3      	b.n	f584 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    f5bc:	2a00      	cmp	r2, #0
    f5be:	d053      	beq.n	f668 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    f5c0:	f04f 33ff 	mov.w	r3, #4294967295
    f5c4:	6023      	str	r3, [r4, #0]
    f5c6:	6063      	str	r3, [r4, #4]
    f5c8:	60a3      	str	r3, [r4, #8]
    f5ca:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    f5cc:	2310      	movs	r3, #16
    f5ce:	e7eb      	b.n	f5a8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    f5d0:	2e00      	cmp	r6, #0
    f5d2:	f040 80a2 	bne.w	f71a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    f5d6:	7ca2      	ldrb	r2, [r4, #18]
    f5d8:	2aff      	cmp	r2, #255	; 0xff
    f5da:	f040 8128 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f5de:	7ce2      	ldrb	r2, [r4, #19]
    f5e0:	2aff      	cmp	r2, #255	; 0xff
    f5e2:	f040 8124 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f5e6:	7d22      	ldrb	r2, [r4, #20]
    f5e8:	2aff      	cmp	r2, #255	; 0xff
    f5ea:	f040 8120 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f5ee:	7d62      	ldrb	r2, [r4, #21]
    f5f0:	2aff      	cmp	r2, #255	; 0xff
    f5f2:	f040 811c 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f5f6:	7da2      	ldrb	r2, [r4, #22]
    f5f8:	2aff      	cmp	r2, #255	; 0xff
    f5fa:	f040 8118 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f5fe:	7de2      	ldrb	r2, [r4, #23]
    f600:	2aff      	cmp	r2, #255	; 0xff
    f602:	f040 8114 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f606:	7e22      	ldrb	r2, [r4, #24]
    f608:	2aff      	cmp	r2, #255	; 0xff
    f60a:	f040 8110 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f60e:	7e62      	ldrb	r2, [r4, #25]
    f610:	2aff      	cmp	r2, #255	; 0xff
    f612:	f040 810c 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f616:	7ea2      	ldrb	r2, [r4, #26]
    f618:	2aff      	cmp	r2, #255	; 0xff
    f61a:	f040 8108 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f61e:	7ee2      	ldrb	r2, [r4, #27]
    f620:	2aff      	cmp	r2, #255	; 0xff
    f622:	f040 8104 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f626:	7f22      	ldrb	r2, [r4, #28]
    f628:	2aff      	cmp	r2, #255	; 0xff
    f62a:	f040 8100 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f62e:	7f62      	ldrb	r2, [r4, #29]
    f630:	2aff      	cmp	r2, #255	; 0xff
    f632:	f040 80fc 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f636:	7fa2      	ldrb	r2, [r4, #30]
    f638:	2aff      	cmp	r2, #255	; 0xff
    f63a:	f040 80f8 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f63e:	7fe2      	ldrb	r2, [r4, #31]
    f640:	2aff      	cmp	r2, #255	; 0xff
    f642:	f040 80f4 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f646:	f894 2020 	ldrb.w	r2, [r4, #32]
    f64a:	2aff      	cmp	r2, #255	; 0xff
    f64c:	f040 80ef 	bne.w	f82e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f650:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    f654:	3eff      	subs	r6, #255	; 0xff
    f656:	bf18      	it	ne
    f658:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    f65a:	3501      	adds	r5, #1
    f65c:	b2ed      	uxtb	r5, r5
    f65e:	2d03      	cmp	r5, #3
    f660:	f04f 0201 	mov.w	r2, #1
    f664:	dd94      	ble.n	f590 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    f666:	e0ec      	b.n	f842 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    f668:	7ca2      	ldrb	r2, [r4, #18]
    f66a:	bb02      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f66c:	7ce2      	ldrb	r2, [r4, #19]
    f66e:	b9f2      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f670:	7d22      	ldrb	r2, [r4, #20]
    f672:	b9e2      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f674:	7d62      	ldrb	r2, [r4, #21]
    f676:	b9d2      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f678:	7da2      	ldrb	r2, [r4, #22]
    f67a:	b9c2      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f67c:	7de2      	ldrb	r2, [r4, #23]
    f67e:	b9b2      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f680:	7e22      	ldrb	r2, [r4, #24]
    f682:	b9a2      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f684:	7e62      	ldrb	r2, [r4, #25]
    f686:	b992      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f688:	7ea2      	ldrb	r2, [r4, #26]
    f68a:	b982      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f68c:	7ee2      	ldrb	r2, [r4, #27]
    f68e:	b972      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f690:	7f22      	ldrb	r2, [r4, #28]
    f692:	b962      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f694:	7f62      	ldrb	r2, [r4, #29]
    f696:	b952      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f698:	7fa2      	ldrb	r2, [r4, #30]
    f69a:	b942      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f69c:	7fe2      	ldrb	r2, [r4, #31]
    f69e:	b932      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f6a0:	f894 2020 	ldrb.w	r2, [r4, #32]
    f6a4:	b91a      	cbnz	r2, f6ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f6a6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    f6aa:	2a00      	cmp	r2, #0
    f6ac:	d0d5      	beq.n	f65a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    f6ae:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    f6b2:	2501      	movs	r5, #1
                        flush0Success = false;
    f6b4:	2600      	movs	r6, #0
    f6b6:	e772      	b.n	f59e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    f6b8:	2f00      	cmp	r7, #0
    f6ba:	f000 80ba 	beq.w	f832 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    f6be:	23aa      	movs	r3, #170	; 0xaa
    f6c0:	2f01      	cmp	r7, #1
    f6c2:	7023      	strb	r3, [r4, #0]
    f6c4:	f104 0101 	add.w	r1, r4, #1
    f6c8:	f000 80db 	beq.w	f882 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    f6cc:	2f02      	cmp	r7, #2
    f6ce:	7063      	strb	r3, [r4, #1]
    f6d0:	f104 0102 	add.w	r1, r4, #2
    f6d4:	f000 80d3 	beq.w	f87e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    f6d8:	70a3      	strb	r3, [r4, #2]
    f6da:	1ce1      	adds	r1, r4, #3
    f6dc:	220e      	movs	r2, #14
    f6de:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    f6e2:	51e3      	str	r3, [r4, r7]
    f6e4:	19e3      	adds	r3, r4, r7
    f6e6:	3304      	adds	r3, #4
    f6e8:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    f6ec:	f1b9 0f03 	cmp.w	r9, #3
    f6f0:	6018      	str	r0, [r3, #0]
    f6f2:	6058      	str	r0, [r3, #4]
    f6f4:	d000      	beq.n	f6f8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    f6f6:	6098      	str	r0, [r3, #8]
    f6f8:	45d3      	cmp	fp, sl
    f6fa:	eba2 020a 	sub.w	r2, r2, sl
    f6fe:	eb01 000a 	add.w	r0, r1, sl
    f702:	d008      	beq.n	f716 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f704:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    f706:	2a01      	cmp	r2, #1
            *buf++ = val;
    f708:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    f70c:	d003      	beq.n	f716 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f70e:	2a02      	cmp	r2, #2
            *buf++ = val;
    f710:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    f712:	d000      	beq.n	f716 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    f714:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    f716:	2311      	movs	r3, #17
    f718:	e746      	b.n	f5a8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    f71a:	7ca1      	ldrb	r1, [r4, #18]
    f71c:	29aa      	cmp	r1, #170	; 0xaa
    f71e:	f000 80aa 	beq.w	f876 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    f722:	7ce2      	ldrb	r2, [r4, #19]
    f724:	2aaa      	cmp	r2, #170	; 0xaa
    f726:	d040      	beq.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f728:	7d23      	ldrb	r3, [r4, #20]
    f72a:	2baa      	cmp	r3, #170	; 0xaa
    f72c:	f000 80a5 	beq.w	f87a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    f730:	7d63      	ldrb	r3, [r4, #21]
    f732:	2baa      	cmp	r3, #170	; 0xaa
    f734:	f000 80a7 	beq.w	f886 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    f738:	7da3      	ldrb	r3, [r4, #22]
    f73a:	2baa      	cmp	r3, #170	; 0xaa
    f73c:	f000 8118 	beq.w	f970 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    f740:	7de3      	ldrb	r3, [r4, #23]
    f742:	2baa      	cmp	r3, #170	; 0xaa
    f744:	f000 80a1 	beq.w	f88a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    f748:	7e23      	ldrb	r3, [r4, #24]
    f74a:	2baa      	cmp	r3, #170	; 0xaa
    f74c:	f000 8112 	beq.w	f974 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    f750:	7e63      	ldrb	r3, [r4, #25]
    f752:	2baa      	cmp	r3, #170	; 0xaa
    f754:	f000 8110 	beq.w	f978 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    f758:	7ea3      	ldrb	r3, [r4, #26]
    f75a:	2baa      	cmp	r3, #170	; 0xaa
    f75c:	f000 810e 	beq.w	f97c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    f760:	7ee3      	ldrb	r3, [r4, #27]
    f762:	2baa      	cmp	r3, #170	; 0xaa
    f764:	f000 8102 	beq.w	f96c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    f768:	7f23      	ldrb	r3, [r4, #28]
    f76a:	2baa      	cmp	r3, #170	; 0xaa
    f76c:	f000 8108 	beq.w	f980 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    f770:	7f63      	ldrb	r3, [r4, #29]
    f772:	2baa      	cmp	r3, #170	; 0xaa
    f774:	f000 811c 	beq.w	f9b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    f778:	7fa3      	ldrb	r3, [r4, #30]
    f77a:	2baa      	cmp	r3, #170	; 0xaa
    f77c:	f000 811a 	beq.w	f9b4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    f780:	7fe3      	ldrb	r3, [r4, #31]
    f782:	2baa      	cmp	r3, #170	; 0xaa
    f784:	f000 8118 	beq.w	f9b8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    f788:	f894 3020 	ldrb.w	r3, [r4, #32]
    f78c:	2baa      	cmp	r3, #170	; 0xaa
    f78e:	f000 8115 	beq.w	f9bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    f792:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f796:	2baa      	cmp	r3, #170	; 0xaa
    f798:	f000 8108 	beq.w	f9ac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    f79c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f7a0:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    f7a2:	bf08      	it	eq
    f7a4:	2310      	moveq	r3, #16
                        if (!foundAA &&
    f7a6:	f040 80ed 	bne.w	f984 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    f7aa:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    f7ac:	2502      	movs	r5, #2
    f7ae:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    f7b2:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    f7b4:	74e2      	strb	r2, [r4, #19]
    f7b6:	7522      	strb	r2, [r4, #20]
    f7b8:	7562      	strb	r2, [r4, #21]
    f7ba:	75a2      	strb	r2, [r4, #22]
    f7bc:	75e2      	strb	r2, [r4, #23]
    f7be:	7622      	strb	r2, [r4, #24]
    f7c0:	7662      	strb	r2, [r4, #25]
    f7c2:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    f7c4:	76e2      	strb	r2, [r4, #27]
    f7c6:	7722      	strb	r2, [r4, #28]
    f7c8:	7762      	strb	r2, [r4, #29]
    f7ca:	77a2      	strb	r2, [r4, #30]
    f7cc:	77e2      	strb	r2, [r4, #31]
    f7ce:	f884 2020 	strb.w	r2, [r4, #32]
    f7d2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    f7d6:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    f7da:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    f7de:	105b      	asrs	r3, r3, #1
    f7e0:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f7e2:	2701      	movs	r7, #1
    f7e4:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    f7e6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f7ea:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    f7ee:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    f7f2:	3a01      	subs	r2, #1
    f7f4:	4610      	mov	r0, r2
    f7f6:	17d1      	asrs	r1, r2, #31
    f7f8:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    f7fa:	42ba      	cmp	r2, r7
    f7fc:	bfc8      	it	gt
    f7fe:	fa42 f707 	asrgt.w	r7, r2, r7
    f802:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    f806:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    f80a:	2b00      	cmp	r3, #0
    f80c:	d13f      	bne.n	f88e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    f80e:	4b6d      	ldr	r3, [pc, #436]	; (f9c4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    f810:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f814:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f818:	43c9      	mvns	r1, r1
    f81a:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f81c:	4a6a      	ldr	r2, [pc, #424]	; (f9c8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f81e:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f822:	6813      	ldr	r3, [r2, #0]
    f824:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f828:	4628      	mov	r0, r5
    f82a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f82e:	2601      	movs	r6, #1
    f830:	e713      	b.n	f65a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f832:	4623      	mov	r3, r4
    f834:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f838:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f83c:	4621      	mov	r1, r4
    f83e:	2211      	movs	r2, #17
    f840:	e752      	b.n	f6e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f842:	4a62      	ldr	r2, [pc, #392]	; (f9cc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f844:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f846:	2301      	movs	r3, #1
    f848:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f84c:	2208      	movs	r2, #8
    f84e:	2102      	movs	r1, #2
    f850:	f7f7 fa34 	bl	6cbc <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f854:	4a5b      	ldr	r2, [pc, #364]	; (f9c4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f856:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f85a:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f85e:	495a      	ldr	r1, [pc, #360]	; (f9c8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f860:	ea23 0300 	bic.w	r3, r3, r0
    f864:	6809      	ldr	r1, [r1, #0]
    f866:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f86a:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f86c:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f870:	4628      	mov	r0, r5
    f872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f876:	4613      	mov	r3, r2
    f878:	e797      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f87a:	2302      	movs	r3, #2
    f87c:	e795      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f87e:	220f      	movs	r2, #15
    f880:	e72d      	b.n	f6de <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f882:	2210      	movs	r2, #16
    f884:	e72b      	b.n	f6de <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f886:	2303      	movs	r3, #3
    f888:	e78f      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f88a:	2305      	movs	r3, #5
    f88c:	e78d      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f88e:	f1c3 0108 	rsb	r1, r3, #8
    f892:	00ce      	lsls	r6, r1, #3
    f894:	f04f 30ff 	mov.w	r0, #4294967295
    f898:	f1c6 0220 	rsb	r2, r6, #32
    f89c:	fa00 f202 	lsl.w	r2, r0, r2
    f8a0:	fa20 fe06 	lsr.w	lr, r0, r6
    f8a4:	f1a6 0720 	sub.w	r7, r6, #32
    f8a8:	fa20 f707 	lsr.w	r7, r0, r7
    f8ac:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f8b0:	4622      	mov	r2, r4
    f8b2:	ea4e 0e07 	orr.w	lr, lr, r7
    f8b6:	40f0      	lsrs	r0, r6
    f8b8:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f8ba:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f8be:	65e0      	str	r0, [r4, #92]	; 0x5c
    f8c0:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f8c4:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f8c6:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f8c8:	f104 0812 	add.w	r8, r4, #18
    f8cc:	7056      	strb	r6, [r2, #1]
    f8ce:	7096      	strb	r6, [r2, #2]
    f8d0:	70d6      	strb	r6, [r2, #3]
    f8d2:	7116      	strb	r6, [r2, #4]
    f8d4:	7156      	strb	r6, [r2, #5]
    f8d6:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f8d8:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f8dc:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f8de:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f8e2:	4442      	add	r2, r8
    f8e4:	3301      	adds	r3, #1
    f8e6:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f8e8:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f8ec:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f8ee:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f8f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8f2:	f001 fe69 	bl	115c8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f8f6:	4631      	mov	r1, r6
    f8f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8fa:	f001 fdbb 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f8fe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f902:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f906:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f908:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f90a:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f90c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f90e:	f001 fdb1 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f912:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f916:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f918:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f91c:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f920:	2701      	movs	r7, #1
    f922:	4442      	add	r2, r8
    f924:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f928:	4421      	add	r1, r4
    f92a:	f001 fe4d 	bl	115c8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f92e:	4631      	mov	r1, r6
    f930:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f932:	f001 fd9f 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f936:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f93a:	4b22      	ldr	r3, [pc, #136]	; (f9c4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f93c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f940:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f944:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f948:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f94c:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f950:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f954:	f04f 0800 	mov.w	r8, #0
    f958:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f95c:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f960:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f964:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f966:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f96a:	e757      	b.n	f81c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f96c:	2309      	movs	r3, #9
    f96e:	e71c      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f970:	2304      	movs	r3, #4
    f972:	e71a      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f974:	2306      	movs	r3, #6
    f976:	e718      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f978:	2307      	movs	r3, #7
    f97a:	e716      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f97c:	2308      	movs	r3, #8
    f97e:	e714      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f980:	230a      	movs	r3, #10
    f982:	e712      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f984:	2300      	movs	r3, #0
    f986:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f98a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f98e:	4a0f      	ldr	r2, [pc, #60]	; (f9cc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f990:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f992:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f994:	f04f 0000 	mov.w	r0, #0
    f998:	f04f 0100 	mov.w	r1, #0
    f99c:	bfcc      	ite	gt
    f99e:	105b      	asrgt	r3, r3, #1
    f9a0:	2301      	movle	r3, #1
    f9a2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f9a6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f9aa:	e74b      	b.n	f844 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f9ac:	230f      	movs	r3, #15
    f9ae:	e6fc      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f9b0:	230b      	movs	r3, #11
    f9b2:	e6fa      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f9b4:	230c      	movs	r3, #12
    f9b6:	e6f8      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f9b8:	230d      	movs	r3, #13
    f9ba:	e6f6      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f9bc:	230e      	movs	r3, #14
    f9be:	e6f4      	b.n	f7aa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f9c0:	2300      	movs	r3, #0
    f9c2:	e70c      	b.n	f7de <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f9c4:	20001b10 	.word	0x20001b10
    f9c8:	20001d2c 	.word	0x20001d2c
    f9cc:	20000c08 	.word	0x20000c08

0000f9d0 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f9d4:	4f42      	ldr	r7, [pc, #264]	; (fae0 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f9d6:	683c      	ldr	r4, [r7, #0]
    f9d8:	f014 0401 	ands.w	r4, r4, #1
    f9dc:	d003      	beq.n	f9e6 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f9de:	4b41      	ldr	r3, [pc, #260]	; (fae4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f9e0:	6818      	ldr	r0, [r3, #0]
    f9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f9e6:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f9ea:	f003 fc1d 	bl	13228 <_Znwj>
            buf64.writeMarker = 0;
    f9ee:	4603      	mov	r3, r0
    f9f0:	4606      	mov	r6, r0
    f9f2:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f9f6:	f04f 38ff 	mov.w	r8, #4294967295
    f9fa:	f04f 39ff 	mov.w	r9, #4294967295
    f9fe:	2200      	movs	r2, #0
            buf64.inputs = 0;
    fa00:	7074      	strb	r4, [r6, #1]
    fa02:	705c      	strb	r4, [r3, #1]
    fa04:	709c      	strb	r4, [r3, #2]
    fa06:	70dc      	strb	r4, [r3, #3]
    fa08:	711c      	strb	r4, [r3, #4]
    fa0a:	715c      	strb	r4, [r3, #5]
    fa0c:	719c      	strb	r4, [r3, #6]
    fa0e:	71dc      	strb	r4, [r3, #7]
    fa10:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    fa12:	7274      	strb	r4, [r6, #9]
    fa14:	72b4      	strb	r4, [r6, #10]
    fa16:	72f4      	strb	r4, [r6, #11]
    fa18:	7334      	strb	r4, [r6, #12]
    fa1a:	7374      	strb	r4, [r6, #13]
    fa1c:	73b4      	strb	r4, [r6, #14]
    fa1e:	73f4      	strb	r4, [r6, #15]
    fa20:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    fa22:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    fa24:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    fa26:	74f4      	strb	r4, [r6, #19]
    fa28:	7534      	strb	r4, [r6, #20]
    fa2a:	7574      	strb	r4, [r6, #21]
    fa2c:	75b4      	strb	r4, [r6, #22]
    fa2e:	75f4      	strb	r4, [r6, #23]
    fa30:	7634      	strb	r4, [r6, #24]
    fa32:	7674      	strb	r4, [r6, #25]
    fa34:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    fa36:	76f4      	strb	r4, [r6, #27]
    fa38:	7734      	strb	r4, [r6, #28]
    fa3a:	7774      	strb	r4, [r6, #29]
    fa3c:	77b4      	strb	r4, [r6, #30]
    fa3e:	77f4      	strb	r4, [r6, #31]
    fa40:	f886 4020 	strb.w	r4, [r6, #32]
    fa44:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    fa48:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    fa4c:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    fa50:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    fa54:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    fa58:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    fa5c:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    fa60:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    fa64:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    fa68:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    fa6c:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    fa70:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    fa74:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    fa78:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    fa7c:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    fa80:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    fa84:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    fa88:	2301      	movs	r3, #1
    fa8a:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    fa8e:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    fa92:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    fa96:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    fa9a:	62b4      	str	r4, [r6, #40]	; 0x28
    fa9c:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    faa0:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    faa4:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    faa8:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    faac:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    fab0:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    fab4:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    fab8:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    fabc:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    fac0:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    fac4:	4620      	mov	r0, r4
    fac6:	3428      	adds	r4, #40	; 0x28
    fac8:	f000 fc8a 	bl	103e0 <_ZN9ClearCore7CcioPinC1Ev>
    facc:	42ac      	cmp	r4, r5
    face:	d1f9      	bne.n	fac4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    fad0:	4a04      	ldr	r2, [pc, #16]	; (fae4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    fad2:	2301      	movs	r3, #1
    fad4:	6016      	str	r6, [r2, #0]
    fad6:	4630      	mov	r0, r6
    fad8:	603b      	str	r3, [r7, #0]
}
    fada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fade:	bf00      	nop
    fae0:	20001f34 	.word	0x20001f34
    fae4:	20001f3c 	.word	0x20001f3c

0000fae8 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    fae8:	b570      	push	{r4, r5, r6, lr}
    faea:	4606      	mov	r6, r0
    faec:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    faf0:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    faf2:	682b      	ldr	r3, [r5, #0]
    faf4:	b221      	sxth	r1, r4
    faf6:	3401      	adds	r4, #1
    faf8:	4628      	mov	r0, r5
    fafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fafc:	b2a4      	uxth	r4, r4
    fafe:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    fb00:	2c80      	cmp	r4, #128	; 0x80
    fb02:	f105 0528 	add.w	r5, r5, #40	; 0x28
    fb06:	d1f4      	bne.n	faf2 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fb08:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    fb0c:	2b02      	cmp	r3, #2
    fb0e:	d00b      	beq.n	fb28 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    fb10:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    fb14:	2b00      	cmp	r3, #0
    fb16:	d13c      	bne.n	fb92 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    fb18:	4a20      	ldr	r2, [pc, #128]	; (fb9c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    fb1a:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    fb1c:	6812      	ldr	r2, [r2, #0]
    fb1e:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    fb22:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    fb24:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    fb28:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    fb2a:	2001      	movs	r0, #1
    m_ccioMask = 0;
    fb2c:	2200      	movs	r2, #0
    fb2e:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    fb30:	f04f 34ff 	mov.w	r4, #4294967295
    fb34:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    fb38:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    fb3c:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    fb40:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    fb44:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    fb48:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    fb4c:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    fb50:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    fb54:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    fb58:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    fb5c:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    fb60:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    fb64:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    fb68:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    fb6c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    fb70:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    fb74:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    fb78:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    fb7c:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    fb80:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    fb84:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    fb88:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    fb8c:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    fb90:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fb92:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    fb96:	2b00      	cmp	r3, #0
    fb98:	d1be      	bne.n	fb18 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    fb9a:	e7c5      	b.n	fb28 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    fb9c:	20001d2c 	.word	0x20001d2c

0000fba0 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    fba0:	3940      	subs	r1, #64	; 0x40
    fba2:	b28b      	uxth	r3, r1
    fba4:	2b3f      	cmp	r3, #63	; 0x3f
    fba6:	d80f      	bhi.n	fbc8 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    fba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    fbaa:	6c00      	ldr	r0, [r0, #64]	; 0x40
    fbac:	b2c9      	uxtb	r1, r1
    fbae:	f1c1 0320 	rsb	r3, r1, #32
    fbb2:	fa02 f303 	lsl.w	r3, r2, r3
    fbb6:	40c8      	lsrs	r0, r1
    fbb8:	3920      	subs	r1, #32
    fbba:	4318      	orrs	r0, r3
    fbbc:	fa22 f101 	lsr.w	r1, r2, r1
    fbc0:	4308      	orrs	r0, r1
}
    fbc2:	f000 0001 	and.w	r0, r0, #1
    fbc6:	4770      	bx	lr
    fbc8:	2000      	movs	r0, #0
    fbca:	f000 0001 	and.w	r0, r0, #1
    fbce:	4770      	bx	lr

0000fbd0 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    fbd0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fbd2:	2900      	cmp	r1, #0
    fbd4:	f000 8084 	beq.w	fce0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    fbd8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    fbdc:	2b00      	cmp	r3, #0
    fbde:	d07f      	beq.n	fce0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    fbe0:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    fbe4:	2a00      	cmp	r2, #0
    fbe6:	d17b      	bne.n	fce0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    fbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    fbec:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    fbf0:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    fbf4:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    fbf6:	f000 80a3 	beq.w	fd40 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    fbfa:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    fbfe:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fc02:	2400      	movs	r4, #0
    fc04:	2500      	movs	r5, #0
    fc06:	4690      	mov	r8, r2
    fc08:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    fc0c:	4696      	mov	lr, r2
    fc0e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    fc12:	e9cd 4500 	strd	r4, r5, [sp]
    fc16:	2201      	movs	r2, #1
    fc18:	2300      	movs	r3, #0
    fc1a:	4626      	mov	r6, r4
    fc1c:	462f      	mov	r7, r5
    fc1e:	9106      	str	r1, [sp, #24]
    fc20:	e037      	b.n	fc92 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    fc22:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    fc26:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    fc2a:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    fc2e:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    fc32:	f108 0501 	add.w	r5, r8, #1
    fc36:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    fc38:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    fc3a:	ea46 0602 	orr.w	r6, r6, r2
    fc3e:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    fc42:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    fc46:	db06      	blt.n	fc56 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    fc48:	b12c      	cbz	r4, fc56 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    fc4a:	e9dd 4500 	ldrd	r4, r5, [sp]
    fc4e:	4314      	orrs	r4, r2
    fc50:	431d      	orrs	r5, r3
    fc52:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    fc56:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    fc5a:	ea04 0802 	and.w	r8, r4, r2
    fc5e:	ea05 0903 	and.w	r9, r5, r3
    fc62:	ea58 0109 	orrs.w	r1, r8, r9
    fc66:	d00b      	beq.n	fc80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    fc68:	ea24 0402 	bic.w	r4, r4, r2
    fc6c:	ea25 0503 	bic.w	r5, r5, r3
    fc70:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    fc74:	e9dd 4500 	ldrd	r4, r5, [sp]
    fc78:	4314      	orrs	r4, r2
    fc7a:	431d      	orrs	r5, r3
    fc7c:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fc80:	f10e 0e01 	add.w	lr, lr, #1
    fc84:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    fc88:	1892      	adds	r2, r2, r2
    fc8a:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fc8c:	45e6      	cmp	lr, ip
    fc8e:	46f0      	mov	r8, lr
    fc90:	da27      	bge.n	fce2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    fc92:	ea0a 0402 	and.w	r4, sl, r2
    fc96:	ea0b 0503 	and.w	r5, fp, r3
    fc9a:	ea54 0105 	orrs.w	r1, r4, r5
    fc9e:	d0ef      	beq.n	fc80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    fca0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    fca4:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    fca8:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    fcac:	3c01      	subs	r4, #1
    fcae:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    fcb2:	2c00      	cmp	r4, #0
    fcb4:	d1e4      	bne.n	fc80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    fcb6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    fcba:	4014      	ands	r4, r2
    fcbc:	401d      	ands	r5, r3
    fcbe:	432c      	orrs	r4, r5
    fcc0:	d1af      	bne.n	fc22 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    fcc2:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    fcc6:	ea04 0802 	and.w	r8, r4, r2
    fcca:	ea05 0903 	and.w	r9, r5, r3
    fcce:	e9cd 4508 	strd	r4, r5, [sp, #32]
    fcd2:	ea58 0409 	orrs.w	r4, r8, r9
    fcd6:	f000 8115 	beq.w	ff04 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    fcda:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    fcde:	e7c3      	b.n	fc68 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    fce0:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    fce2:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    fce6:	9906      	ldr	r1, [sp, #24]
    fce8:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    fcec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    fcf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    fcf4:	4642      	mov	r2, r8
    fcf6:	464b      	mov	r3, r9
    fcf8:	4322      	orrs	r2, r4
    fcfa:	432b      	orrs	r3, r5
    fcfc:	4614      	mov	r4, r2
    fcfe:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    fd00:	4642      	mov	r2, r8
    fd02:	464b      	mov	r3, r9
    fd04:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    fd08:	43f6      	mvns	r6, r6
    fd0a:	43ff      	mvns	r7, r7
    fd0c:	ea48 0802 	orr.w	r8, r8, r2
    fd10:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    fd14:	ea04 0206 	and.w	r2, r4, r6
    fd18:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    fd1c:	e9dd 4500 	ldrd	r4, r5, [sp]
    fd20:	ea2a 0404 	bic.w	r4, sl, r4
    fd24:	ea2b 0505 	bic.w	r5, fp, r5
    fd28:	46a2      	mov	sl, r4
    fd2a:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    fd2c:	ea08 0406 	and.w	r4, r8, r6
    fd30:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    fd34:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    fd38:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    fd3c:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    fd40:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    fd44:	3d01      	subs	r5, #1
    fd46:	b2ed      	uxtb	r5, r5
    fd48:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    fd4c:	b115      	cbz	r5, fd54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    fd4e:	b011      	add	sp, #68	; 0x44
    fd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd54:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    fd56:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    fd5a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    fd5e:	4608      	mov	r0, r1
    fd60:	f001 fcb4 	bl	116cc <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    fd64:	4629      	mov	r1, r5
    fd66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fd68:	f001 fb84 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    fd6c:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    fd70:	f10c 0309 	add.w	r3, ip, #9
    fd74:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    fd76:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    fd7a:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    fd7c:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    fd7e:	2acc      	cmp	r2, #204	; 0xcc
    fd80:	f000 814e 	beq.w	10020 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    fd84:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    fd88:	1c5a      	adds	r2, r3, #1
    fd8a:	b292      	uxth	r2, r2
    fd8c:	3b04      	subs	r3, #4
    fd8e:	4616      	mov	r6, r2
    fd90:	920b      	str	r2, [sp, #44]	; 0x2c
    fd92:	b29b      	uxth	r3, r3
    fd94:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    fd98:	4293      	cmp	r3, r2
    fd9a:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    fd9e:	f240 81c6 	bls.w	1012e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    fda2:	2200      	movs	r2, #0
    fda4:	2300      	movs	r3, #0
    fda6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    fdaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    fdae:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    fdb2:	ea22 0000 	bic.w	r0, r2, r0
    fdb6:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fdba:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    fdbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fdc2:	4610      	mov	r0, r2
    fdc4:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fdc6:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fdca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fdce:	f1bc 0f00 	cmp.w	ip, #0
    fdd2:	f000 81d3 	beq.w	1017c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    fdd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fdda:	2200      	movs	r2, #0
    fddc:	2000      	movs	r0, #0
    fdde:	2100      	movs	r1, #0
    fde0:	4613      	mov	r3, r2
    fde2:	e9cd 0100 	strd	r0, r1, [sp]
    fde6:	f04f 0801 	mov.w	r8, #1
    fdea:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    fdee:	f04f 0a0c 	mov.w	sl, #12
    fdf2:	e038      	b.n	fe66 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    fdf4:	0099      	lsls	r1, r3, #2
    fdf6:	18c8      	adds	r0, r1, r3
    fdf8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    fdfc:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    fe00:	f10b 3bff 	add.w	fp, fp, #4294967295
    fe04:	fa1f fb8b 	uxth.w	fp, fp
    fe08:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    fe0c:	f1bb 0f00 	cmp.w	fp, #0
    fe10:	d107      	bne.n	fe22 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    fe12:	ea26 0608 	bic.w	r6, r6, r8
    fe16:	ea27 0709 	bic.w	r7, r7, r9
    fe1a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    fe1e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    fe22:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    fe26:	ea06 0608 	and.w	r6, r6, r8
    fe2a:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    fe2e:	4419      	add	r1, r3
        if (changedInputs & mask) {
    fe30:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    fe34:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    fe38:	d04e      	beq.n	fed8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    fe3a:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    fe3e:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    fe42:	b93b      	cbnz	r3, fe54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    fe44:	e9dd 0100 	ldrd	r0, r1, [sp]
    fe48:	ea40 0008 	orr.w	r0, r0, r8
    fe4c:	ea41 0109 	orr.w	r1, r1, r9
    fe50:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fe54:	3201      	adds	r2, #1
    fe56:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    fe58:	eb18 0808 	adds.w	r8, r8, r8
    fe5c:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fe60:	4596      	cmp	lr, r2
    fe62:	4613      	mov	r3, r2
    fe64:	dd59      	ble.n	ff1a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    fe66:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    fe6a:	4606      	mov	r6, r0
    fe6c:	460f      	mov	r7, r1
    fe6e:	ea00 0008 	and.w	r0, r0, r8
    fe72:	ea01 0109 	and.w	r1, r1, r9
    fe76:	4301      	orrs	r1, r0
    fe78:	d1bc      	bne.n	fdf4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    fe7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    fe7e:	ea00 0008 	and.w	r0, r0, r8
    fe82:	ea01 0109 	and.w	r1, r1, r9
    fe86:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    fe88:	ea4f 0183 	mov.w	r1, r3, lsl #2
    fe8c:	eb01 0003 	add.w	r0, r1, r3
    fe90:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    fe94:	d02b      	beq.n	feee <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    fe96:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    fe9a:	f1bb 0f00 	cmp.w	fp, #0
    fe9e:	d0c0      	beq.n	fe22 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    fea0:	f10b 3bff 	add.w	fp, fp, #4294967295
    fea4:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    fea8:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    feac:	f1bb 0f00 	cmp.w	fp, #0
    feb0:	d1b7      	bne.n	fe22 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    feb2:	ea46 0608 	orr.w	r6, r6, r8
    feb6:	ea47 0709 	orr.w	r7, r7, r9
    feba:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    febe:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fec2:	ea46 0608 	orr.w	r6, r6, r8
    fec6:	ea47 0709 	orr.w	r7, r7, r9
    feca:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    fece:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    fed2:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    fed6:	e7a4      	b.n	fe22 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    fed8:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    fedc:	2800      	cmp	r0, #0
    fede:	d0b9      	beq.n	fe54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    fee0:	3801      	subs	r0, #1
    fee2:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    fee4:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    fee8:	2800      	cmp	r0, #0
    feea:	d0ab      	beq.n	fe44 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    feec:	e7b2      	b.n	fe54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    feee:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fef2:	ea26 0608 	bic.w	r6, r6, r8
    fef6:	ea27 0709 	bic.w	r7, r7, r9
    fefa:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    fefe:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    ff02:	e78e      	b.n	fe22 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    ff04:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    ff08:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    ff0c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ff10:	4314      	orrs	r4, r2
    ff12:	431d      	orrs	r5, r3
    ff14:	e9cd 4504 	strd	r4, r5, [sp, #16]
    ff18:	e6b2      	b.n	fc80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    ff1a:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    ff1e:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    ff22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    ff26:	ea80 000a 	eor.w	r0, r0, sl
    ff2a:	ea81 010b 	eor.w	r1, r1, fp
    ff2e:	4002      	ands	r2, r0
    ff30:	400b      	ands	r3, r1
    ff32:	ea82 080a 	eor.w	r8, r2, sl
    ff36:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    ff3a:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    ff3e:	ea28 000a 	bic.w	r0, r8, sl
    ff42:	ea29 010b 	bic.w	r1, r9, fp
    ff46:	ea40 0602 	orr.w	r6, r0, r2
    ff4a:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    ff4e:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    ff52:	e9cd 8900 	strd	r8, r9, [sp]
    ff56:	ea2a 0808 	bic.w	r8, sl, r8
    ff5a:	ea2b 0909 	bic.w	r9, fp, r9
    ff5e:	ea43 0109 	orr.w	r1, r3, r9
    ff62:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    ff66:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    ff6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    ff6c:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    ff70:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    ff74:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    ff78:	2b00      	cmp	r3, #0
    ff7a:	f000 8083 	beq.w	10084 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    ff7e:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    ff82:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    ff86:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    ff8a:	ea03 0907 	and.w	r9, r3, r7
    ff8e:	ea29 0101 	bic.w	r1, r9, r1
    ff92:	ea02 0806 	and.w	r8, r2, r6
    ff96:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    ff98:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    ff9c:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    ff9e:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    ffa2:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    ffa4:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    ffa6:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    ffaa:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    ffae:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    ffb2:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    ffb4:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    ffb6:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    ffba:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    ffbe:	fa01 f505 	lsl.w	r5, r1, r5
    ffc2:	fa20 f203 	lsr.w	r2, r0, r3
    ffc6:	432a      	orrs	r2, r5
    ffc8:	f1a3 0520 	sub.w	r5, r3, #32
    ffcc:	fa21 f505 	lsr.w	r5, r1, r5
    ffd0:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    ffd2:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    ffd6:	f8d4 500d 	ldr.w	r5, [r4, #13]
    ffda:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    ffde:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    ffe2:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    ffe6:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    ffe8:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    ffec:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    ffee:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fff2:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fff4:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fff8:	2101      	movs	r1, #1
    fffa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fffc:	f001 fa3a 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
   10000:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
   10004:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10006:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
   10008:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
   1000c:	2501      	movs	r5, #1
   1000e:	321b      	adds	r2, #27
   10010:	4421      	add	r1, r4
   10012:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
   10016:	b011      	add	sp, #68	; 0x44
   10018:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
   1001c:	f001 bb04 	b.w	11628 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
   10020:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   10024:	f8d4 701f 	ldr.w	r7, [r4, #31]
   10028:	f8d4 601b 	ldr.w	r6, [r4, #27]
   1002c:	42bb      	cmp	r3, r7
   1002e:	bf08      	it	eq
   10030:	42b2      	cmpeq	r2, r6
   10032:	f47f aea7 	bne.w	fd84 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
   10036:	f8d4 2013 	ldr.w	r2, [r4, #19]
   1003a:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
   1003e:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
   10042:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
   10046:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
   10048:	ea6f 0903 	mvn.w	r9, r3
   1004c:	ea6f 0802 	mvn.w	r8, r2
   10050:	f1c6 0720 	rsb	r7, r6, #32
   10054:	fa28 f306 	lsr.w	r3, r8, r6
   10058:	fa09 f707 	lsl.w	r7, r9, r7
   1005c:	f1a6 0220 	sub.w	r2, r6, #32
   10060:	fa29 f202 	lsr.w	r2, r9, r2
   10064:	433b      	orrs	r3, r7
   10066:	4313      	orrs	r3, r2
   10068:	9308      	str	r3, [sp, #32]
   1006a:	fa29 f306 	lsr.w	r3, r9, r6
   1006e:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
   10070:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10074:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   10078:	4042      	eors	r2, r0
   1007a:	404b      	eors	r3, r1
   1007c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10080:	950b      	str	r5, [sp, #44]	; 0x2c
   10082:	e694      	b.n	fdae <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
   10084:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
   10088:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
   1008c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
   10090:	4016      	ands	r6, r2
   10092:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
   10094:	ea40 0206 	orr.w	r2, r0, r6
   10098:	ea41 0307 	orr.w	r3, r1, r7
   1009c:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
   100a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   100a4:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
   100a6:	46b0      	mov	r8, r6
   100a8:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
   100aa:	bf08      	it	eq
   100ac:	42b2      	cmpeq	r2, r6
   100ae:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   100b2:	f43f af64 	beq.w	ff7e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
   100b6:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
   100ba:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
   100be:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
   100c2:	d053      	beq.n	1016c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
   100c4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 10190 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
   100c8:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   100cc:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
   100d0:	433e      	orrs	r6, r7
   100d2:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
   100d6:	ea29 0701 	bic.w	r7, r9, r1
   100da:	ea28 0600 	bic.w	r6, r8, r0
   100de:	ea56 0307 	orrs.w	r3, r6, r7
   100e2:	f43f af4c 	beq.w	ff7e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
   100e6:	ea48 0200 	orr.w	r2, r8, r0
   100ea:	ea49 0301 	orr.w	r3, r9, r1
   100ee:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
   100f2:	f1bc 0f00 	cmp.w	ip, #0
   100f6:	f43f af42 	beq.w	ff7e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
   100fa:	4e24      	ldr	r6, [pc, #144]	; (1018c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
   100fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
   100fe:	2701      	movs	r7, #1
   10100:	e005      	b.n	1010e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
   10102:	3501      	adds	r5, #1
   10104:	b2ed      	uxtb	r5, r5
   10106:	4565      	cmp	r5, ip
   10108:	462a      	mov	r2, r5
   1010a:	f6bf af38 	bge.w	ff7e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
   1010e:	ab10      	add	r3, sp, #64	; 0x40
   10110:	442b      	add	r3, r5
   10112:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   10116:	2b00      	cmp	r3, #0
   10118:	d0f3      	beq.n	10102 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
   1011a:	fa07 f202 	lsl.w	r2, r7, r2
   1011e:	b2d2      	uxtb	r2, r2
   10120:	2103      	movs	r1, #3
   10122:	6830      	ldr	r0, [r6, #0]
   10124:	f7f6 fdca 	bl	6cbc <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
   10128:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
   1012c:	e7e9      	b.n	10102 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
   1012e:	2101      	movs	r1, #1
   10130:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   10134:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10136:	f001 f99d 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
   1013a:	4914      	ldr	r1, [pc, #80]	; (1018c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
   1013c:	2300      	movs	r3, #0
   1013e:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
   10140:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
   10142:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
   10146:	2102      	movs	r1, #2
   10148:	2208      	movs	r2, #8
   1014a:	f7f6 fdb7 	bl	6cbc <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1014e:	4b10      	ldr	r3, [pc, #64]	; (10190 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
   10150:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   10154:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
   10158:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1015c:	43d2      	mvns	r2, r2
   1015e:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
   10160:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   10162:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
   10166:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
   1016a:	e5f0      	b.n	fd4e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
   1016c:	4a08      	ldr	r2, [pc, #32]	; (10190 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1016e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
   10172:	ea23 0307 	bic.w	r3, r3, r7
   10176:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   1017a:	e700      	b.n	ff7e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
   1017c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
   10180:	2200      	movs	r2, #0
   10182:	2300      	movs	r3, #0
   10184:	e9cd 2300 	strd	r2, r3, [sp]
   10188:	e6c9      	b.n	ff1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
   1018a:	bf00      	nop
   1018c:	20000c08 	.word	0x20000c08
   10190:	20001b10 	.word	0x20001b10

00010194 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
   10194:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10196:	b1c1      	cbz	r1, 101ca <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
   10198:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
   1019c:	b1aa      	cbz	r2, 101ca <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
   1019e:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
   101a2:	b192      	cbz	r2, 101ca <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
   101a4:	4a09      	ldr	r2, [pc, #36]	; (101cc <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
   101a6:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
   101a8:	6812      	ldr	r2, [r2, #0]
   101aa:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
   101ae:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
   101b2:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
   101b4:	42a2      	cmp	r2, r4
   101b6:	d907      	bls.n	101c8 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
   101b8:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
   101ba:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
   101be:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
   101c2:	bc30      	pop	{r4, r5}
   101c4:	f7ff b9c0 	b.w	f548 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
   101c8:	bc30      	pop	{r4, r5}
   101ca:	4770      	bx	lr
   101cc:	20001d2c 	.word	0x20001d2c

000101d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
   101d0:	4a0e      	ldr	r2, [pc, #56]	; (1020c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
   101d2:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
   101d4:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
   101d8:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
   101dc:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
   101e0:	43f3      	mvns	r3, r6
   101e2:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
   101e4:	2700      	movs	r7, #0
   101e6:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
   101ea:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
   101ee:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   101f2:	bf15      	itete	ne
   101f4:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   101f8:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   101fc:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   101fe:	400b      	andeq	r3, r1
   10200:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
   10204:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
   10206:	f7ff bc6f 	b.w	fae8 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
   1020a:	bf00      	nop
   1020c:	20001b10 	.word	0x20001b10

00010210 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
   10210:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   10214:	2b02      	cmp	r3, #2
   10216:	d005      	beq.n	10224 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
   10218:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
   1021c:	b12b      	cbz	r3, 1022a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
   1021e:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
   10222:	b913      	cbnz	r3, 1022a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
   10224:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
   10228:	4770      	bx	lr
    m_serPort = comInstance;
   1022a:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
   1022c:	b109      	cbz	r1, 10232 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
   1022e:	f7ff b98b 	b.w	f548 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
   10232:	4b04      	ldr	r3, [pc, #16]	; (10244 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
   10234:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
   10238:	681b      	ldr	r3, [r3, #0]
   1023a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
   1023e:	4608      	mov	r0, r1
   10240:	4770      	bx	lr
   10242:	bf00      	nop
   10244:	20001d2c 	.word	0x20001d2c

00010248 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
   10248:	3940      	subs	r1, #64	; 0x40
   1024a:	b28b      	uxth	r3, r1
   1024c:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
   1024e:	bf9d      	ittte	ls
   10250:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
   10254:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
   10258:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
   1025a:	2000      	movhi	r0, #0
    }
}
   1025c:	4770      	bx	lr
   1025e:	bf00      	nop

00010260 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
   10260:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
   10262:	f7ff fbb5 	bl	f9d0 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
   10266:	4b01      	ldr	r3, [pc, #4]	; (1026c <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
   10268:	6018      	str	r0, [r3, #0]
   1026a:	bd08      	pop	{r3, pc}
   1026c:	20001f38 	.word	0x20001f38

00010270 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   10270:	7980      	ldrb	r0, [r0, #6]
   10272:	4770      	bx	lr

00010274 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
   10274:	2009      	movs	r0, #9
   10276:	4770      	bx	lr

00010278 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
   10278:	7980      	ldrb	r0, [r0, #6]
    }
   1027a:	f1a0 0004 	sub.w	r0, r0, #4
   1027e:	fab0 f080 	clz	r0, r0
   10282:	0940      	lsrs	r0, r0, #5
   10284:	4770      	bx	lr
   10286:	bf00      	nop

00010288 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   10288:	4770      	bx	lr
   1028a:	bf00      	nop

0001028c <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
   1028c:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   1028e:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
   10292:	2201      	movs	r2, #1
   10294:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
   10298:	f1c5 0420 	rsb	r4, r5, #32
   1029c:	fa22 f404 	lsr.w	r4, r2, r4
   102a0:	fa02 f303 	lsl.w	r3, r2, r3
   102a4:	4323      	orrs	r3, r4
   102a6:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
   102a8:	2602      	movs	r6, #2
    m_filterLength = 3;
   102aa:	4d07      	ldr	r5, [pc, #28]	; (102c8 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
   102ac:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
   102ae:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   102b0:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
   102b2:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
   102b4:	6105      	str	r5, [r0, #16]
   102b6:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   102b8:	6082      	str	r2, [r0, #8]
   102ba:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
   102bc:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
   102be:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
   102c0:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
   102c2:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
   102c4:	bc70      	pop	{r4, r5, r6}
   102c6:	4770      	bx	lr
   102c8:	00010003 	.word	0x00010003

000102cc <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
   102cc:	7983      	ldrb	r3, [r0, #6]
   102ce:	428b      	cmp	r3, r1
   102d0:	d02f      	beq.n	10332 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
   102d2:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
   102d4:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
   102d8:	d014      	beq.n	10304 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
   102da:	2904      	cmp	r1, #4
   102dc:	d10b      	bne.n	102f6 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
   102de:	4b16      	ldr	r3, [pc, #88]	; (10338 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
   102e0:	681e      	ldr	r6, [r3, #0]
   102e2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
   102e6:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
   102ea:	432b      	orrs	r3, r5
   102ec:	4322      	orrs	r2, r4
   102ee:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
   102f2:	460b      	mov	r3, r1
            m_mode = newMode;
   102f4:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
   102f6:	1ac8      	subs	r0, r1, r3
   102f8:	fab0 f080 	clz	r0, r0
   102fc:	0940      	lsrs	r0, r0, #5
}
   102fe:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
   10302:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
   10304:	4b0c      	ldr	r3, [pc, #48]	; (10338 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
   10306:	681e      	ldr	r6, [r3, #0]
   10308:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1030c:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
   10310:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
   10314:	43d2      	mvns	r2, r2
   10316:	43db      	mvns	r3, r3
   10318:	4014      	ands	r4, r2
   1031a:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
   1031c:	ea02 0208 	and.w	r2, r2, r8
   10320:	ea03 0309 	and.w	r3, r3, r9
   10324:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
   10328:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
   1032c:	460b      	mov	r3, r1
            m_mode = newMode;
   1032e:	7181      	strb	r1, [r0, #6]
            break;
   10330:	e7e1      	b.n	102f6 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
   10332:	2001      	movs	r0, #1
   10334:	4770      	bx	lr
   10336:	bf00      	nop
   10338:	20001f38 	.word	0x20001f38

0001033c <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
   1033c:	7983      	ldrb	r3, [r0, #6]
   1033e:	2b02      	cmp	r3, #2
   10340:	d010      	beq.n	10364 <_ZN9ClearCore7CcioPin5StateEv+0x28>
   10342:	2b04      	cmp	r3, #4
   10344:	d10c      	bne.n	10360 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
   10346:	4b0b      	ldr	r3, [pc, #44]	; (10374 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
   10348:	681b      	ldr	r3, [r3, #0]
   1034a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1034e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
   10352:	4002      	ands	r2, r0
   10354:	400b      	ands	r3, r1
   10356:	4313      	orrs	r3, r2
   10358:	bf14      	ite	ne
   1035a:	2001      	movne	r0, #1
   1035c:	2000      	moveq	r0, #0
            break;
   1035e:	4770      	bx	lr
    switch (m_mode) {
   10360:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
   10362:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
   10364:	4b03      	ldr	r3, [pc, #12]	; (10374 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
   10366:	681b      	ldr	r3, [r3, #0]
   10368:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1036c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
   10370:	e7ef      	b.n	10352 <_ZN9ClearCore7CcioPin5StateEv+0x16>
   10372:	bf00      	nop
   10374:	20001f38 	.word	0x20001f38

00010378 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
   10378:	4b06      	ldr	r3, [pc, #24]	; (10394 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
   1037a:	681b      	ldr	r3, [r3, #0]
   1037c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   10380:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
   10384:	4002      	ands	r2, r0
   10386:	400b      	ands	r3, r1
   10388:	4313      	orrs	r3, r2
}
   1038a:	bf14      	ite	ne
   1038c:	2001      	movne	r0, #1
   1038e:	2000      	moveq	r0, #0
   10390:	4770      	bx	lr
   10392:	bf00      	nop
   10394:	20001f38 	.word	0x20001f38

00010398 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
   10398:	7983      	ldrb	r3, [r0, #6]
   1039a:	2b04      	cmp	r3, #4
   1039c:	d11c      	bne.n	103d8 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
   1039e:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
   103a0:	4b0e      	ldr	r3, [pc, #56]	; (103dc <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
   103a2:	b969      	cbnz	r1, 103c0 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
   103a4:	6819      	ldr	r1, [r3, #0]
   103a6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   103aa:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
   103ae:	ea24 0202 	bic.w	r2, r4, r2
   103b2:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
   103b6:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
   103b8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
   103bc:	bc30      	pop	{r4, r5}
   103be:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
   103c0:	6819      	ldr	r1, [r3, #0]
   103c2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
   103c6:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
   103ca:	4322      	orrs	r2, r4
   103cc:	432b      	orrs	r3, r5
   103ce:	2001      	movs	r0, #1
   103d0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
   103d4:	bc30      	pop	{r4, r5}
   103d6:	4770      	bx	lr
    bool success = false;
   103d8:	2000      	movs	r0, #0
   103da:	4770      	bx	lr
   103dc:	20001f38 	.word	0x20001f38

000103e0 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
   103e0:	b5d0      	push	{r4, r6, r7, lr}
   103e2:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
   103e4:	f7f4 ff70 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
   103e8:	4b08      	ldr	r3, [pc, #32]	; (1040c <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
   103ea:	4909      	ldr	r1, [pc, #36]	; (10410 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
   103ec:	6023      	str	r3, [r4, #0]
   103ee:	2600      	movs	r6, #0
   103f0:	2300      	movs	r3, #0
   103f2:	2700      	movs	r7, #0
   103f4:	220c      	movs	r2, #12
   103f6:	e9c4 6702 	strd	r6, r7, [r4, #8]
   103fa:	6121      	str	r1, [r4, #16]
   103fc:	6162      	str	r2, [r4, #20]
   103fe:	61a3      	str	r3, [r4, #24]
   10400:	61e3      	str	r3, [r4, #28]
   10402:	6223      	str	r3, [r4, #32]
   10404:	6263      	str	r3, [r4, #36]	; 0x24
   10406:	4620      	mov	r0, r4
   10408:	bdd0      	pop	{r4, r6, r7, pc}
   1040a:	bf00      	nop
   1040c:	00023334 	.word	0x00023334
   10410:	00010003 	.word	0x00010003

00010414 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10414:	b530      	push	{r4, r5, lr}
   10416:	b083      	sub	sp, #12
   10418:	9d06      	ldr	r5, [sp, #24]
   1041a:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
   1041e:	9500      	str	r5, [sp, #0]
   10420:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10422:	4604      	mov	r4, r0
      m_errorCode(0) {
   10424:	2500      	movs	r5, #0
   10426:	f000 ffbb 	bl	113a0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1042a:	4b09      	ldr	r3, [pc, #36]	; (10450 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
   1042c:	6023      	str	r3, [r4, #0]
   1042e:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
   10432:	4620      	mov	r0, r4
   10434:	2101      	movs	r1, #1
   10436:	f001 f811 	bl	1145c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
   1043a:	462a      	mov	r2, r5
   1043c:	4629      	mov	r1, r5
   1043e:	4620      	mov	r0, r4
   10440:	f001 f852 	bl	114e8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
   10444:	4620      	mov	r0, r4
   10446:	f000 ff9f 	bl	11388 <_ZN9ClearCore10SerialBase8PortOpenEv>
}
   1044a:	4620      	mov	r0, r4
   1044c:	b003      	add	sp, #12
   1044e:	bd30      	pop	{r4, r5, pc}
   10450:	00022d58 	.word	0x00022d58

00010454 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
   10454:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10458:	4770      	bx	lr
   1045a:	bf00      	nop

0001045c <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
   1045c:	2300      	movs	r3, #0
    m_outTail = 0;
   1045e:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10462:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10466:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
   1046a:	4770      	bx	lr

0001046c <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1046c:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
   1046e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10470:	2104      	movs	r1, #4
    m_inTail = 0;
   10472:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
   10476:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
   10478:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1047c:	7591      	strb	r1, [r2, #22]
   1047e:	4770      	bx	lr

00010480 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
   10480:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
   10484:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   10488:	4291      	cmp	r1, r2
   1048a:	d012      	beq.n	104b2 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
   1048c:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
   1048e:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
   10492:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10496:	6904      	ldr	r4, [r0, #16]
   10498:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   1049a:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
   1049c:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1049e:	2504      	movs	r5, #4
   104a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
   104a4:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
   104a8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   104ac:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
   104ae:	bc30      	pop	{r4, r5}
   104b0:	4770      	bx	lr
        return SerialBase::EOB;
   104b2:	f04f 30ff 	mov.w	r0, #4294967295
   104b6:	4770      	bx	lr

000104b8 <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
   104b8:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   104bc:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   104c0:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
   104c2:	bf1d      	ittte	ne
   104c4:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
   104c8:	3318      	addne	r3, #24
   104ca:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
   104ce:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
   104d2:	4770      	bx	lr

000104d4 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
   104d4:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   104d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
   104dc:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
   104de:	bf48      	it	mi
   104e0:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
   104e2:	4770      	bx	lr

000104e4 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
   104e4:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   104e8:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
   104ec:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
   104ee:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
   104f0:	bf48      	it	mi
   104f2:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
   104f4:	4770      	bx	lr
   104f6:	bf00      	nop

000104f8 <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
   104f8:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
   104fa:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   104fe:	b1b8      	cbz	r0, 10530 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
   10500:	79d3      	ldrb	r3, [r2, #7]
   10502:	2b01      	cmp	r3, #1
   10504:	d015      	beq.n	10532 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
   10506:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
   10508:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
   1050c:	3401      	adds	r4, #1
   1050e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
   10512:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   10516:	429c      	cmp	r4, r3
   10518:	d0fb      	beq.n	10512 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
   1051a:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   1051e:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
   10520:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10522:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
   10524:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
   10528:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   1052c:	75ae      	strb	r6, [r5, #22]
}
   1052e:	bc70      	pop	{r4, r5, r6}
   10530:	4770      	bx	lr
        return false;
   10532:	2000      	movs	r0, #0
   10534:	4770      	bx	lr
   10536:	bf00      	nop

00010538 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
   10538:	79c3      	ldrb	r3, [r0, #7]
   1053a:	b113      	cbz	r3, 10542 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
   1053c:	2b01      	cmp	r3, #1
   1053e:	d00e      	beq.n	1055e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
   10540:	4770      	bx	lr
        while (m_outHead != m_outTail) {
   10542:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10546:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1054a:	429a      	cmp	r2, r3
   1054c:	d1f9      	bne.n	10542 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   1054e:	6902      	ldr	r2, [r0, #16]
   10550:	7e13      	ldrb	r3, [r2, #24]
   10552:	07d8      	lsls	r0, r3, #31
   10554:	d4f4      	bmi.n	10540 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10556:	7e13      	ldrb	r3, [r2, #24]
   10558:	0799      	lsls	r1, r3, #30
   1055a:	d5fc      	bpl.n	10556 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
   1055c:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1055e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10562:	2b07      	cmp	r3, #7
   10564:	d0ec      	beq.n	10540 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
   10566:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1056a:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
   1056c:	b510      	push	{r4, lr}
   1056e:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10570:	d005      	beq.n	1057e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
   10572:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10576:	b113      	cbz	r3, 1057e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
   10578:	79e3      	ldrb	r3, [r4, #7]
   1057a:	2b01      	cmp	r3, #1
   1057c:	d000      	beq.n	10580 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
   1057e:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10580:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10584:	f7f4 ff86 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10588:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1058a:	079b      	lsls	r3, r3, #30
   1058c:	d4f1      	bmi.n	10572 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
   1058e:	e7f6      	b.n	1057e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

00010590 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10594:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
   10596:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10598:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   1059a:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1059c:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   105a0:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105a2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   105a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   105aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   105ae:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105b0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   105b4:	f36f 0100 	bfc	r1, #0, #1
   105b8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   105bc:	6813      	ldr	r3, [r2, #0]
   105be:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   105c0:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   105c2:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   105c6:	d503      	bpl.n	105d0 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   105c8:	6813      	ldr	r3, [r2, #0]
   105ca:	f36f 0341 	bfc	r3, #1, #1
   105ce:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   105d0:	69d3      	ldr	r3, [r2, #28]
   105d2:	f013 0302 	ands.w	r3, r3, #2
   105d6:	d1fb      	bne.n	105d0 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
   105d8:	6822      	ldr	r2, [r4, #0]
   105da:	483a      	ldr	r0, [pc, #232]	; (106c4 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
   105dc:	6811      	ldr	r1, [r2, #0]
   105de:	4281      	cmp	r1, r0
   105e0:	d165      	bne.n	106ae <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
   105e2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   105e6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   105ea:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   105ee:	6853      	ldr	r3, [r2, #4]
   105f0:	4a35      	ldr	r2, [pc, #212]	; (106c8 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   105f2:	4293      	cmp	r3, r2
   105f4:	d162      	bne.n	106bc <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105f6:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   105f8:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   105fa:	2204      	movs	r2, #4
    m_inTail = 0;
   105fc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10600:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10602:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10606:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   10608:	79e0      	ldrb	r0, [r4, #7]
   1060a:	2801      	cmp	r0, #1
   1060c:	d124      	bne.n	10658 <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   1060e:	4b2f      	ldr	r3, [pc, #188]	; (106cc <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   10610:	443b      	add	r3, r7
   10612:	fbb3 f3f7 	udiv	r3, r3, r7
   10616:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   10618:	2bff      	cmp	r3, #255	; 0xff
   1061a:	bf92      	itee	ls
   1061c:	b2db      	uxtbls	r3, r3
   1061e:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   10620:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10622:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10624:	b1b6      	cbz	r6, 10654 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10626:	682b      	ldr	r3, [r5, #0]
   10628:	f043 0302 	orr.w	r3, r3, #2
   1062c:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1062e:	69eb      	ldr	r3, [r5, #28]
   10630:	079b      	lsls	r3, r3, #30
   10632:	d4fc      	bmi.n	1062e <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10634:	6a22      	ldr	r2, [r4, #32]
   10636:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1063a:	7893      	ldrb	r3, [r2, #2]
   1063c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10640:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10644:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10648:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1064c:	f042 0201 	orr.w	r2, r2, #1
   10650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   10654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10658:	4638      	mov	r0, r7
   1065a:	f00b f995 	bl	1b988 <__aeabi_ui2d>
   1065e:	2200      	movs	r2, #0
   10660:	4b1b      	ldr	r3, [pc, #108]	; (106d0 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   10662:	f00b fa07 	bl	1ba74 <__aeabi_dmul>
   10666:	4b1b      	ldr	r3, [pc, #108]	; (106d4 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   10668:	4680      	mov	r8, r0
   1066a:	6818      	ldr	r0, [r3, #0]
   1066c:	4689      	mov	r9, r1
   1066e:	f00b f98b 	bl	1b988 <__aeabi_ui2d>
   10672:	4602      	mov	r2, r0
   10674:	460b      	mov	r3, r1
   10676:	4640      	mov	r0, r8
   10678:	4649      	mov	r1, r9
   1067a:	f00b fb25 	bl	1bcc8 <__aeabi_ddiv>
   1067e:	4602      	mov	r2, r0
   10680:	460b      	mov	r3, r1
   10682:	2000      	movs	r0, #0
   10684:	4914      	ldr	r1, [pc, #80]	; (106d8 <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   10686:	f00b f841 	bl	1b70c <__aeabi_dsub>
   1068a:	2200      	movs	r2, #0
   1068c:	4b13      	ldr	r3, [pc, #76]	; (106dc <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   1068e:	f00b f9f1 	bl	1ba74 <__aeabi_dmul>
   10692:	f00b fcd1 	bl	1c038 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10696:	f00b f999 	bl	1b9cc <__aeabi_f2d>
   1069a:	2200      	movs	r2, #0
   1069c:	4b10      	ldr	r3, [pc, #64]	; (106e0 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   1069e:	f00b f837 	bl	1b710 <__adddf3>
   106a2:	f00b fca9 	bl	1bff8 <__aeabi_d2uiz>
   106a6:	b280      	uxth	r0, r0
   106a8:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   106aa:	2001      	movs	r0, #1
            break;
   106ac:	e7ba      	b.n	10624 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   106ae:	4620      	mov	r0, r4
   106b0:	4788      	blx	r1
   106b2:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   106b4:	6853      	ldr	r3, [r2, #4]
   106b6:	4a04      	ldr	r2, [pc, #16]	; (106c8 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   106b8:	4293      	cmp	r3, r2
   106ba:	d09c      	beq.n	105f6 <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   106bc:	4620      	mov	r0, r4
   106be:	4798      	blx	r3
   106c0:	6925      	ldr	r5, [r4, #16]
   106c2:	e7a1      	b.n	10608 <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   106c4:	0001045d 	.word	0x0001045d
   106c8:	0001046d 	.word	0x0001046d
   106cc:	004c4b3f 	.word	0x004c4b3f
   106d0:	40300000 	.word	0x40300000
   106d4:	200000e8 	.word	0x200000e8
   106d8:	3ff00000 	.word	0x3ff00000
   106dc:	40f00000 	.word	0x40f00000
   106e0:	3fe00000 	.word	0x3fe00000

000106e4 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   106e4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   106e8:	b903      	cbnz	r3, 106ec <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   106ea:	4770      	bx	lr
void SerialBase::PortClose() {
   106ec:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   106ee:	6805      	ldr	r5, [r0, #0]
   106f0:	4a3e      	ldr	r2, [pc, #248]	; (107ec <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   106f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   106f4:	4293      	cmp	r3, r2
   106f6:	4604      	mov	r4, r0
   106f8:	d157      	bne.n	107aa <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   106fa:	79c3      	ldrb	r3, [r0, #7]
   106fc:	2b00      	cmp	r3, #0
   106fe:	d03f      	beq.n	10780 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   10700:	2b01      	cmp	r3, #1
   10702:	d056      	beq.n	107b2 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   10704:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10706:	69a0      	ldr	r0, [r4, #24]
   10708:	4939      	ldr	r1, [pc, #228]	; (107f0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   1070a:	f990 3001 	ldrsb.w	r3, [r0, #1]
   1070e:	7886      	ldrb	r6, [r0, #2]
   10710:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10714:	2001      	movs	r0, #1
   10716:	40b0      	lsls	r0, r6
   10718:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1071a:	6a20      	ldr	r0, [r4, #32]
   1071c:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10720:	7880      	ldrb	r0, [r0, #2]
   10722:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10726:	4403      	add	r3, r0
   10728:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1072c:	f36f 0100 	bfc	r1, #0, #1
   10730:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10734:	6813      	ldr	r3, [r2, #0]
   10736:	079b      	lsls	r3, r3, #30
   10738:	d503      	bpl.n	10742 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1073a:	6813      	ldr	r3, [r2, #0]
   1073c:	f36f 0341 	bfc	r3, #1, #1
   10740:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10742:	69d3      	ldr	r3, [r2, #28]
   10744:	f013 0302 	ands.w	r3, r3, #2
   10748:	d1fb      	bne.n	10742 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   1074a:	682a      	ldr	r2, [r5, #0]
   1074c:	4929      	ldr	r1, [pc, #164]	; (107f4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   1074e:	428a      	cmp	r2, r1
   10750:	d124      	bne.n	1079c <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   10752:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10756:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1075a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1075e:	686b      	ldr	r3, [r5, #4]
   10760:	4a25      	ldr	r2, [pc, #148]	; (107f8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10762:	4293      	cmp	r3, r2
   10764:	d11e      	bne.n	107a4 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10766:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10768:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1076a:	2104      	movs	r1, #4
    m_inTail = 0;
   1076c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10770:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10772:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10776:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   10778:	2300      	movs	r3, #0
   1077a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1077e:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   10780:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10784:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10788:	429a      	cmp	r2, r3
   1078a:	d1f9      	bne.n	10780 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   1078c:	6922      	ldr	r2, [r4, #16]
   1078e:	7e13      	ldrb	r3, [r2, #24]
   10790:	07d8      	lsls	r0, r3, #31
   10792:	d4b8      	bmi.n	10706 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10794:	7e13      	ldrb	r3, [r2, #24]
   10796:	0799      	lsls	r1, r3, #30
   10798:	d5fc      	bpl.n	10794 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   1079a:	e7b4      	b.n	10706 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   1079c:	4620      	mov	r0, r4
   1079e:	4790      	blx	r2
   107a0:	6825      	ldr	r5, [r4, #0]
   107a2:	e7dc      	b.n	1075e <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   107a4:	4620      	mov	r0, r4
   107a6:	4798      	blx	r3
   107a8:	e7e6      	b.n	10778 <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   107aa:	4798      	blx	r3
   107ac:	6922      	ldr	r2, [r4, #16]
   107ae:	6825      	ldr	r5, [r4, #0]
   107b0:	e7a9      	b.n	10706 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   107b2:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   107b6:	2807      	cmp	r0, #7
   107b8:	d0a4      	beq.n	10704 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   107ba:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   107be:	2b07      	cmp	r3, #7
   107c0:	d0a0      	beq.n	10704 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   107c2:	f7f4 fe67 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   107c6:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   107c8:	079a      	lsls	r2, r3, #30
   107ca:	d5ef      	bpl.n	107ac <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   107cc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   107d0:	2b00      	cmp	r3, #0
   107d2:	d0eb      	beq.n	107ac <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   107d4:	79e3      	ldrb	r3, [r4, #7]
   107d6:	2b01      	cmp	r3, #1
   107d8:	d1e8      	bne.n	107ac <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   107da:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   107de:	f7f4 fe59 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   107e2:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   107e4:	079a      	lsls	r2, r3, #30
   107e6:	d4f1      	bmi.n	107cc <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   107e8:	e7e0      	b.n	107ac <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   107ea:	bf00      	nop
   107ec:	00010539 	.word	0x00010539
   107f0:	41008000 	.word	0x41008000
   107f4:	0001045d 	.word	0x0001045d
   107f8:	0001046d 	.word	0x0001046d

000107fc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   107fc:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   107fe:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   10800:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   10802:	2b01      	cmp	r3, #1
   10804:	d101      	bne.n	1080a <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   10806:	2000      	movs	r0, #0
   10808:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1080a:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1080c:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1080e:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10812:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10814:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10816:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1081a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1081e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10822:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10826:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1082a:	f36f 0100 	bfc	r1, #0, #1
   1082e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10832:	6813      	ldr	r3, [r2, #0]
   10834:	0799      	lsls	r1, r3, #30
   10836:	d503      	bpl.n	10840 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10838:	6813      	ldr	r3, [r2, #0]
   1083a:	f36f 0341 	bfc	r3, #1, #1
   1083e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10840:	69d3      	ldr	r3, [r2, #28]
   10842:	f013 0302 	ands.w	r3, r3, #2
   10846:	d1fb      	bne.n	10840 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   10848:	6802      	ldr	r2, [r0, #0]
   1084a:	4604      	mov	r4, r0
   1084c:	6811      	ldr	r1, [r2, #0]
   1084e:	4825      	ldr	r0, [pc, #148]	; (108e4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   10850:	4281      	cmp	r1, r0
   10852:	d142      	bne.n	108da <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10854:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10858:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1085c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10860:	6853      	ldr	r3, [r2, #4]
   10862:	4a21      	ldr	r2, [pc, #132]	; (108e8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10864:	4293      	cmp	r3, r2
   10866:	d134      	bne.n	108d2 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10868:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1086a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1086c:	2104      	movs	r1, #4
    m_inTail = 0;
   1086e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10872:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10874:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10878:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   1087a:	7923      	ldrb	r3, [r4, #4]
   1087c:	2b02      	cmp	r3, #2
   1087e:	d023      	beq.n	108c8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   10880:	6811      	ldr	r1, [r2, #0]
   10882:	2001      	movs	r0, #1
   10884:	f360 611b 	bfi	r1, r0, #24, #4
   10888:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   1088a:	6851      	ldr	r1, [r2, #4]
   1088c:	f363 314d 	bfi	r1, r3, #13, #1
   10890:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   10892:	b1bd      	cbz	r5, 108c4 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10894:	6813      	ldr	r3, [r2, #0]
   10896:	f043 0302 	orr.w	r3, r3, #2
   1089a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1089c:	69d3      	ldr	r3, [r2, #28]
   1089e:	079b      	lsls	r3, r3, #30
   108a0:	d4fc      	bmi.n	1089c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   108a2:	6a22      	ldr	r2, [r4, #32]
   108a4:	f992 1001 	ldrsb.w	r1, [r2, #1]
   108a8:	7893      	ldrb	r3, [r2, #2]
   108aa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   108ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   108b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   108b6:	2001      	movs	r0, #1
   108b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   108bc:	4302      	orrs	r2, r0
   108be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   108c2:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   108c4:	2001      	movs	r0, #1
}
   108c6:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   108c8:	6813      	ldr	r3, [r2, #0]
   108ca:	f36f 631b 	bfc	r3, #24, #4
   108ce:	6013      	str	r3, [r2, #0]
   108d0:	e7df      	b.n	10892 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   108d2:	4620      	mov	r0, r4
   108d4:	4798      	blx	r3
   108d6:	6922      	ldr	r2, [r4, #16]
   108d8:	e7cf      	b.n	1087a <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   108da:	4620      	mov	r0, r4
   108dc:	4788      	blx	r1
   108de:	6822      	ldr	r2, [r4, #0]
   108e0:	e7be      	b.n	10860 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   108e2:	bf00      	nop
   108e4:	0001045d 	.word	0x0001045d
   108e8:	0001046d 	.word	0x0001046d

000108ec <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   108ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   108ee:	1f4b      	subs	r3, r1, #5
   108f0:	2b04      	cmp	r3, #4
   108f2:	d85d      	bhi.n	109b0 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   108f4:	79c3      	ldrb	r3, [r0, #7]
   108f6:	2b01      	cmp	r3, #1
   108f8:	d056      	beq.n	109a8 <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   108fa:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   108fc:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   108fe:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10902:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10904:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10906:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1090a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1090e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10912:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10914:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   10918:	f36f 0400 	bfc	r4, #0, #1
   1091c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10920:	6813      	ldr	r3, [r2, #0]
   10922:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10924:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10928:	d503      	bpl.n	10932 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1092a:	6813      	ldr	r3, [r2, #0]
   1092c:	f36f 0341 	bfc	r3, #1, #1
   10930:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10932:	69d3      	ldr	r3, [r2, #28]
   10934:	f013 0302 	ands.w	r3, r3, #2
   10938:	d1fb      	bne.n	10932 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   1093a:	6802      	ldr	r2, [r0, #0]
   1093c:	460f      	mov	r7, r1
   1093e:	6816      	ldr	r6, [r2, #0]
   10940:	4921      	ldr	r1, [pc, #132]	; (109c8 <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   10942:	428e      	cmp	r6, r1
   10944:	4604      	mov	r4, r0
   10946:	d13b      	bne.n	109c0 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   10948:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1094c:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10950:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10954:	6853      	ldr	r3, [r2, #4]
   10956:	4a1d      	ldr	r2, [pc, #116]	; (109cc <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   10958:	4293      	cmp	r3, r2
   1095a:	d12d      	bne.n	109b8 <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1095c:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1095e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10960:	2104      	movs	r1, #4
    m_inTail = 0;
   10962:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10966:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10968:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1096c:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   1096e:	6853      	ldr	r3, [r2, #4]
   10970:	f367 0302 	bfi	r3, r7, #0, #3
   10974:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10976:	b1ed      	cbz	r5, 109b4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10978:	6813      	ldr	r3, [r2, #0]
   1097a:	f043 0302 	orr.w	r3, r3, #2
   1097e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10980:	69d3      	ldr	r3, [r2, #28]
   10982:	079b      	lsls	r3, r3, #30
   10984:	d4fc      	bmi.n	10980 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10986:	6a22      	ldr	r2, [r4, #32]
   10988:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1098c:	7893      	ldrb	r3, [r2, #2]
   1098e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10992:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10996:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1099a:	2001      	movs	r0, #1
   1099c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   109a0:	4302      	orrs	r2, r0
   109a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   109a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   109a8:	f1a1 0308 	sub.w	r3, r1, #8
   109ac:	2b01      	cmp	r3, #1
   109ae:	d9a4      	bls.n	108fa <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   109b0:	2000      	movs	r0, #0
   109b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   109b4:	2001      	movs	r0, #1
}
   109b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   109b8:	4620      	mov	r0, r4
   109ba:	4798      	blx	r3
   109bc:	6922      	ldr	r2, [r4, #16]
   109be:	e7d6      	b.n	1096e <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   109c0:	47b0      	blx	r6
   109c2:	6822      	ldr	r2, [r4, #0]
   109c4:	e7c6      	b.n	10954 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   109c6:	bf00      	nop
   109c8:	0001045d 	.word	0x0001045d
   109cc:	0001046d 	.word	0x0001046d

000109d0 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   109d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   109d2:	1e4c      	subs	r4, r1, #1
   109d4:	b2e4      	uxtb	r4, r4
   109d6:	2c01      	cmp	r4, #1
   109d8:	d901      	bls.n	109de <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   109da:	2000      	movs	r0, #0
}
   109dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   109de:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   109e0:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   109e2:	b10d      	cbz	r5, 109e8 <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   109e4:	2001      	movs	r0, #1
   109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   109e8:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   109ea:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   109ec:	f991 7001 	ldrsb.w	r7, [r1, #1]
   109f0:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   109f2:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   109f4:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   109f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   109fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a00:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a04:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10a08:	f365 0100 	bfi	r1, r5, #0, #1
   10a0c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10a10:	6813      	ldr	r3, [r2, #0]
   10a12:	0799      	lsls	r1, r3, #30
   10a14:	d503      	bpl.n	10a1e <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10a16:	6813      	ldr	r3, [r2, #0]
   10a18:	f365 0341 	bfi	r3, r5, #1, #1
   10a1c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10a1e:	69d3      	ldr	r3, [r2, #28]
   10a20:	f013 0302 	ands.w	r3, r3, #2
   10a24:	d1fb      	bne.n	10a1e <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   10a26:	6802      	ldr	r2, [r0, #0]
   10a28:	4605      	mov	r5, r0
   10a2a:	6811      	ldr	r1, [r2, #0]
   10a2c:	481d      	ldr	r0, [pc, #116]	; (10aa4 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   10a2e:	4281      	cmp	r1, r0
   10a30:	d130      	bne.n	10a94 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   10a32:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10a36:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   10a3a:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   10a3e:	6853      	ldr	r3, [r2, #4]
   10a40:	4a19      	ldr	r2, [pc, #100]	; (10aa8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   10a42:	4293      	cmp	r3, r2
   10a44:	d12a      	bne.n	10a9c <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a46:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   10a48:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a4a:	2104      	movs	r1, #4
    m_inTail = 0;
   10a4c:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   10a50:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   10a52:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10a56:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   10a58:	6853      	ldr	r3, [r2, #4]
   10a5a:	f364 1386 	bfi	r3, r4, #6, #1
   10a5e:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10a60:	2e00      	cmp	r6, #0
   10a62:	d0bf      	beq.n	109e4 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10a64:	6813      	ldr	r3, [r2, #0]
   10a66:	f043 0302 	orr.w	r3, r3, #2
   10a6a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10a6c:	69d3      	ldr	r3, [r2, #28]
   10a6e:	079b      	lsls	r3, r3, #30
   10a70:	d4fc      	bmi.n	10a6c <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a72:	6a2a      	ldr	r2, [r5, #32]
   10a74:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10a78:	7893      	ldrb	r3, [r2, #2]
   10a7a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10a7e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   10a86:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a88:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10a8c:	4302      	orrs	r2, r0
   10a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10a94:	4628      	mov	r0, r5
   10a96:	4788      	blx	r1
   10a98:	682a      	ldr	r2, [r5, #0]
   10a9a:	e7d0      	b.n	10a3e <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   10a9c:	4628      	mov	r0, r5
   10a9e:	4798      	blx	r3
   10aa0:	692a      	ldr	r2, [r5, #16]
   10aa2:	e7d9      	b.n	10a58 <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10aa4:	0001045d 	.word	0x0001045d
   10aa8:	0001046d 	.word	0x0001046d

00010aac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   10aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   10ab0:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   10ab2:	682b      	ldr	r3, [r5, #0]
   10ab4:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   10ab8:	b089      	sub	sp, #36	; 0x24
   10aba:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   10abc:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   10abe:	69eb      	ldr	r3, [r5, #28]
   10ac0:	f013 0301 	ands.w	r3, r3, #1
   10ac4:	d1fb      	bne.n	10abe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   10ac6:	6822      	ldr	r2, [r4, #0]
   10ac8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10ba0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   10acc:	6811      	ldr	r1, [r2, #0]
   10ace:	4541      	cmp	r1, r8
   10ad0:	d153      	bne.n	10b7a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   10ad2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10ad6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10ada:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10ade:	6853      	ldr	r3, [r2, #4]
   10ae0:	4a28      	ldr	r2, [pc, #160]	; (10b84 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   10ae2:	4293      	cmp	r3, r2
   10ae4:	d122      	bne.n	10b2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   10ae6:	2200      	movs	r2, #0
    m_inTail = 0;
   10ae8:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10aec:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10aee:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10af0:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   10af4:	4a24      	ldr	r2, [pc, #144]	; (10b88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10af6:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   10af8:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10afa:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10afc:	d01c      	beq.n	10b38 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10afe:	4a23      	ldr	r2, [pc, #140]	; (10b8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10b00:	4293      	cmp	r3, r2
   10b02:	f000 8310 	beq.w	11126 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   10b06:	4a22      	ldr	r2, [pc, #136]	; (10b90 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   10b08:	4293      	cmp	r3, r2
   10b0a:	f000 8341 	beq.w	11190 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10b0e:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10b12:	f000 839a 	beq.w	1124a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   10b16:	4a1f      	ldr	r2, [pc, #124]	; (10b94 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   10b18:	4293      	cmp	r3, r2
   10b1a:	d043      	beq.n	10ba4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10b1c:	4a1e      	ldr	r2, [pc, #120]	; (10b98 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10b1e:	4293      	cmp	r3, r2
   10b20:	f000 8372 	beq.w	11208 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10b24:	2000      	movs	r0, #0
}
   10b26:	b009      	add	sp, #36	; 0x24
   10b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   10b2c:	4620      	mov	r0, r4
   10b2e:	4798      	blx	r3
   10b30:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   10b32:	4a15      	ldr	r2, [pc, #84]	; (10b88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   10b34:	4293      	cmp	r3, r2
   10b36:	d1e2      	bne.n	10afe <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10b38:	2203      	movs	r2, #3
   10b3a:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10b3e:	4a17      	ldr	r2, [pc, #92]	; (10b9c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   10b40:	9207      	str	r2, [sp, #28]
   10b42:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   10b46:	9206      	str	r2, [sp, #24]
   10b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10b4c:	9202      	str	r2, [sp, #8]
   10b4e:	2231      	movs	r2, #49	; 0x31
   10b50:	9205      	str	r2, [sp, #20]
   10b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10b56:	9201      	str	r2, [sp, #4]
   10b58:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   10b5a:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10b5c:	2601      	movs	r6, #1
   10b5e:	f04f 092e 	mov.w	r9, #46	; 0x2e
   10b62:	9204      	str	r2, [sp, #16]
   10b64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   10b68:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10b6c:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   10b6e:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10b72:	f04f 0a07 	mov.w	sl, #7
   10b76:	9200      	str	r2, [sp, #0]
   10b78:	e02f      	b.n	10bda <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   10b7a:	4620      	mov	r0, r4
   10b7c:	4788      	blx	r1
   10b7e:	6822      	ldr	r2, [r4, #0]
   10b80:	e7ad      	b.n	10ade <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   10b82:	bf00      	nop
   10b84:	0001046d 	.word	0x0001046d
   10b88:	40003000 	.word	0x40003000
   10b8c:	41012000 	.word	0x41012000
   10b90:	41014000 	.word	0x41014000
   10b94:	43000400 	.word	0x43000400
   10b98:	43000c00 	.word	0x43000c00
   10b9c:	00200500 	.word	0x00200500
   10ba0:	0001045d 	.word	0x0001045d
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ba4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10ba8:	9207      	str	r2, [sp, #28]
   10baa:	9206      	str	r2, [sp, #24]
   10bac:	2220      	movs	r2, #32
   10bae:	9202      	str	r2, [sp, #8]
   10bb0:	2245      	movs	r2, #69	; 0x45
   10bb2:	9205      	str	r2, [sp, #20]
   10bb4:	2210      	movs	r2, #16
   10bb6:	9201      	str	r2, [sp, #4]
   10bb8:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10bba:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10bbc:	2602      	movs	r6, #2
   10bbe:	f04f 0942 	mov.w	r9, #66	; 0x42
   10bc2:	9204      	str	r2, [sp, #16]
   10bc4:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10bc6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10bca:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10bce:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   10bd0:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10bd4:	f04f 0a23 	mov.w	sl, #35	; 0x23
   10bd8:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   10bda:	6a21      	ldr	r1, [r4, #32]
   10bdc:	f991 2001 	ldrsb.w	r2, [r1, #1]
   10be0:	f891 b002 	ldrb.w	fp, [r1, #2]
   10be4:	01d2      	lsls	r2, r2, #7
   10be6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   10bea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10bee:	f04f 0e01 	mov.w	lr, #1
   10bf2:	fa0e fc0b 	lsl.w	ip, lr, fp
   10bf6:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   10bfa:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   10bfe:	f894 c007 	ldrb.w	ip, [r4, #7]
   10c02:	45f4      	cmp	ip, lr
   10c04:	f040 819d 	bne.w	10f42 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10c08:	4dc4      	ldr	r5, [pc, #784]	; (10f1c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   10c0a:	4ac5      	ldr	r2, [pc, #788]	; (10f20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10c0c:	f107 0e20 	add.w	lr, r7, #32
   10c10:	3620      	adds	r6, #32
   10c12:	9f00      	ldr	r7, [sp, #0]
   10c14:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   10c18:	9f01      	ldr	r7, [sp, #4]
   10c1a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10c1e:	9f02      	ldr	r7, [sp, #8]
   10c20:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10c24:	f10a 0e20 	add.w	lr, sl, #32
   10c28:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10c2c:	f36f 1586 	bfc	r5, #6, #1
   10c30:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10c34:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10c38:	066d      	lsls	r5, r5, #25
   10c3a:	d4fb      	bmi.n	10c34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   10c3c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10c40:	4eb7      	ldr	r6, [pc, #732]	; (10f20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10c42:	f04f 0c07 	mov.w	ip, #7
   10c46:	f36c 0503 	bfi	r5, ip, #0, #4
   10c4a:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10c4e:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10c52:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   10c56:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10c5a:	6875      	ldr	r5, [r6, #4]
   10c5c:	f015 051c 	ands.w	r5, r5, #28
   10c60:	d1fb      	bne.n	10c5a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   10c62:	681a      	ldr	r2, [r3, #0]
   10c64:	2603      	movs	r6, #3
   10c66:	f366 0284 	bfi	r2, r6, #2, #3
   10c6a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10c6c:	681a      	ldr	r2, [r3, #0]
   10c6e:	7a26      	ldrb	r6, [r4, #8]
   10c70:	f366 725d 	bfi	r2, r6, #29, #1
   10c74:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10c76:	681a      	ldr	r2, [r3, #0]
   10c78:	7a66      	ldrb	r6, [r4, #9]
   10c7a:	f366 721c 	bfi	r2, r6, #28, #1
   10c7e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   10c80:	681a      	ldr	r2, [r3, #0]
   10c82:	f365 621b 	bfi	r2, r5, #24, #4
   10c86:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   10c88:	6962      	ldr	r2, [r4, #20]
   10c8a:	681e      	ldr	r6, [r3, #0]
   10c8c:	7a52      	ldrb	r2, [r2, #9]
   10c8e:	f362 5615 	bfi	r6, r2, #20, #2
   10c92:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10c94:	7a49      	ldrb	r1, [r1, #9]
   10c96:	681a      	ldr	r2, [r3, #0]
   10c98:	2900      	cmp	r1, #0
   10c9a:	bf0c      	ite	eq
   10c9c:	2100      	moveq	r1, #0
   10c9e:	2102      	movne	r1, #2
   10ca0:	f361 4211 	bfi	r2, r1, #16, #2
   10ca4:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   10ca6:	685a      	ldr	r2, [r3, #4]
   10ca8:	79a1      	ldrb	r1, [r4, #6]
   10caa:	f361 0202 	bfi	r2, r1, #0, #3
   10cae:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   10cb0:	681a      	ldr	r2, [r3, #0]
   10cb2:	f365 729e 	bfi	r2, r5, #30, #1
   10cb6:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   10cb8:	681a      	ldr	r2, [r3, #0]
   10cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   10cbe:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   10cc0:	685a      	ldr	r2, [r3, #4]
   10cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10cc6:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   10cc8:	685a      	ldr	r2, [r3, #4]
   10cca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   10cce:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10cd0:	69a3      	ldr	r3, [r4, #24]
   10cd2:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10cd6:	789a      	ldrb	r2, [r3, #2]
   10cd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10cdc:	01db      	lsls	r3, r3, #7
   10cde:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10ce2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10ce6:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10cea:	07d7      	lsls	r7, r2, #31
   10cec:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   10cf0:	bf4c      	ite	mi
   10cf2:	f366 1507 	bfimi	r5, r6, #4, #4
   10cf6:	f366 0503 	bfipl	r5, r6, #0, #4
   10cfa:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10cfe:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10d00:	2901      	cmp	r1, #1
   10d02:	f240 822f 	bls.w	11164 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   10d06:	2902      	cmp	r1, #2
   10d08:	d10a      	bne.n	10d20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10d0a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d12:	4413      	add	r3, r2
   10d14:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d18:	f042 0201 	orr.w	r2, r2, #1
   10d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10d20:	2807      	cmp	r0, #7
   10d22:	d031      	beq.n	10d88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10d24:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10d28:	2b07      	cmp	r3, #7
   10d2a:	d02d      	beq.n	10d88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   10d2c:	f7f4 fbb2 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10d30:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10d32:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10d34:	f023 0302 	bic.w	r3, r3, #2
   10d38:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10d3a:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10d3c:	6803      	ldr	r3, [r0, #0]
   10d3e:	2b01      	cmp	r3, #1
   10d40:	d0fc      	beq.n	10d3c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   10d42:	9b06      	ldr	r3, [sp, #24]
   10d44:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10d46:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10d4a:	f7f4 fbad 	bl	54a8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10d4e:	2300      	movs	r3, #0
   10d50:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10d52:	6923      	ldr	r3, [r4, #16]
   10d54:	3328      	adds	r3, #40	; 0x28
   10d56:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   10d58:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10d5c:	f7f4 fb9a 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10d60:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10d62:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10d64:	f023 0302 	bic.w	r3, r3, #2
   10d68:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10d6a:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10d6c:	6803      	ldr	r3, [r0, #0]
   10d6e:	2b01      	cmp	r3, #1
   10d70:	d0fc      	beq.n	10d6c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   10d72:	9b07      	ldr	r3, [sp, #28]
   10d74:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10d76:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10d7a:	f7f4 fb95 	bl	54a8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10d7e:	2300      	movs	r3, #0
   10d80:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10d82:	6923      	ldr	r3, [r4, #16]
   10d84:	3328      	adds	r3, #40	; 0x28
   10d86:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   10d88:	6820      	ldr	r0, [r4, #0]
   10d8a:	4a66      	ldr	r2, [pc, #408]	; (10f24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10d8c:	6903      	ldr	r3, [r0, #16]
   10d8e:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   10d92:	4293      	cmp	r3, r2
   10d94:	f040 81bd 	bne.w	11112 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10d98:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10d9a:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10d9c:	f991 5001 	ldrsb.w	r5, [r1, #1]
   10da0:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10da2:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10da4:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   10da8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10dac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10db0:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10db4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10db8:	f36f 0100 	bfc	r1, #0, #1
   10dbc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10dc0:	6813      	ldr	r3, [r2, #0]
   10dc2:	0799      	lsls	r1, r3, #30
   10dc4:	d503      	bpl.n	10dce <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10dc6:	6813      	ldr	r3, [r2, #0]
   10dc8:	f36f 0341 	bfc	r3, #1, #1
   10dcc:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10dce:	69d3      	ldr	r3, [r2, #28]
   10dd0:	f013 0302 	ands.w	r3, r3, #2
   10dd4:	d1fb      	bne.n	10dce <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   10dd6:	6802      	ldr	r2, [r0, #0]
   10dd8:	4542      	cmp	r2, r8
   10dda:	f040 8211 	bne.w	11200 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   10dde:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10de2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10de6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10dea:	6843      	ldr	r3, [r0, #4]
   10dec:	4a4e      	ldr	r2, [pc, #312]	; (10f28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   10dee:	4293      	cmp	r3, r2
   10df0:	f040 8202 	bne.w	111f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10df4:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   10df6:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10df8:	2204      	movs	r2, #4
    m_inTail = 0;
   10dfa:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10dfe:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10e00:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e04:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   10e06:	79e3      	ldrb	r3, [r4, #7]
   10e08:	2b01      	cmp	r3, #1
   10e0a:	f040 8150 	bne.w	110ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10e0e:	4b47      	ldr	r3, [pc, #284]	; (10f2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10e10:	444b      	add	r3, r9
   10e12:	fbb3 f3f9 	udiv	r3, r3, r9
   10e16:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10e18:	2bff      	cmp	r3, #255	; 0xff
   10e1a:	bf28      	it	cs
   10e1c:	23ff      	movcs	r3, #255	; 0xff
   10e1e:	b2db      	uxtb	r3, r3
   10e20:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10e22:	2e00      	cmp	r6, #0
   10e24:	f000 816f 	beq.w	11106 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10e28:	682b      	ldr	r3, [r5, #0]
   10e2a:	f043 0302 	orr.w	r3, r3, #2
   10e2e:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10e30:	69eb      	ldr	r3, [r5, #28]
   10e32:	079b      	lsls	r3, r3, #30
   10e34:	d4fc      	bmi.n	10e30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e36:	6a22      	ldr	r2, [r4, #32]
   10e38:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10e3c:	7890      	ldrb	r0, [r2, #2]
   10e3e:	01db      	lsls	r3, r3, #7
   10e40:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10e44:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10e48:	4402      	add	r2, r0
   10e4a:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10e4e:	f041 0101 	orr.w	r1, r1, #1
   10e52:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10e56:	69a6      	ldr	r6, [r4, #24]
   10e58:	4a35      	ldr	r2, [pc, #212]	; (10f30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10e5a:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10e5e:	78b7      	ldrb	r7, [r6, #2]
   10e60:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10e64:	2601      	movs	r6, #1
   10e66:	40be      	lsls	r6, r7
   10e68:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10e6a:	6961      	ldr	r1, [r4, #20]
   10e6c:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10e70:	f891 c002 	ldrb.w	ip, [r1, #2]
   10e74:	f991 e001 	ldrsb.w	lr, [r1, #1]
   10e78:	f01c 0f01 	tst.w	ip, #1
   10e7c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   10e80:	f000 8108 	beq.w	11094 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10e84:	4472      	add	r2, lr
   10e86:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   10e8a:	f006 060f 	and.w	r6, r6, #15
   10e8e:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   10e92:	f366 1107 	bfi	r1, r6, #4, #4
   10e96:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10e9a:	4925      	ldr	r1, [pc, #148]	; (10f30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10e9c:	eb01 020e 	add.w	r2, r1, lr
   10ea0:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10ea4:	2701      	movs	r7, #1
   10ea6:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10eaa:	f04f 0803 	mov.w	r8, #3
   10eae:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10eb2:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10eb4:	69e2      	ldr	r2, [r4, #28]
   10eb6:	7894      	ldrb	r4, [r2, #2]
   10eb8:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10ebc:	01d2      	lsls	r2, r2, #7
   10ebe:	4411      	add	r1, r2
   10ec0:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10ec4:	f014 0f01 	tst.w	r4, #1
   10ec8:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10ecc:	bf14      	ite	ne
   10ece:	f366 1707 	bfine	r7, r6, #4, #4
   10ed2:	f366 0703 	bfieq	r7, r6, #0, #4
   10ed6:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10eda:	4915      	ldr	r1, [pc, #84]	; (10f30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10edc:	440a      	add	r2, r1
   10ede:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10ee0:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10ee2:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10ee4:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10ee8:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10eec:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10ef0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10ef4:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10ef6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10efa:	bf4c      	ite	mi
   10efc:	f366 1207 	bfimi	r2, r6, #4, #4
   10f00:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10f04:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10f06:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10f0a:	2201      	movs	r2, #1
   10f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10f10:	682b      	ldr	r3, [r5, #0]
   10f12:	f043 0302 	orr.w	r3, r3, #2
   10f16:	602b      	str	r3, [r5, #0]
   10f18:	e00c      	b.n	10f34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   10f1a:	bf00      	nop
   10f1c:	e000e100 	.word	0xe000e100
   10f20:	40001c00 	.word	0x40001c00
   10f24:	00010591 	.word	0x00010591
   10f28:	0001046d 	.word	0x0001046d
   10f2c:	004c4b3f 	.word	0x004c4b3f
   10f30:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10f34:	69eb      	ldr	r3, [r5, #28]
   10f36:	079b      	lsls	r3, r3, #30
   10f38:	d4fc      	bmi.n	10f34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   10f3a:	2001      	movs	r0, #1
}
   10f3c:	b009      	add	sp, #36	; 0x24
   10f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10f42:	6829      	ldr	r1, [r5, #0]
   10f44:	f36e 0184 	bfi	r1, lr, #2, #3
   10f48:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   10f4a:	6829      	ldr	r1, [r5, #0]
   10f4c:	f36f 314f 	bfc	r1, #13, #3
   10f50:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10f52:	6829      	ldr	r1, [r5, #0]
   10f54:	f36f 711c 	bfc	r1, #28, #1
   10f58:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   10f5a:	6829      	ldr	r1, [r5, #0]
   10f5c:	f36e 5115 	bfi	r1, lr, #20, #2
   10f60:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10f62:	f1bc 0f00 	cmp.w	ip, #0
   10f66:	d104      	bne.n	10f72 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   10f68:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10f6c:	2900      	cmp	r1, #0
   10f6e:	f040 81af 	bne.w	112d0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10f72:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10f74:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   10f76:	f362 0302 	bfi	r3, r2, #0, #3
   10f7a:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10f7c:	682b      	ldr	r3, [r5, #0]
   10f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10f82:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10f84:	7923      	ldrb	r3, [r4, #4]
   10f86:	2b02      	cmp	r3, #2
   10f88:	f000 817c 	beq.w	11284 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10f8c:	682a      	ldr	r2, [r5, #0]
   10f8e:	2101      	movs	r1, #1
   10f90:	f361 621b 	bfi	r2, r1, #24, #4
   10f94:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   10f96:	686a      	ldr	r2, [r5, #4]
   10f98:	f363 324d 	bfi	r2, r3, #13, #1
   10f9c:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10f9e:	7963      	ldrb	r3, [r4, #5]
   10fa0:	686a      	ldr	r2, [r5, #4]
   10fa2:	3b01      	subs	r3, #1
   10fa4:	f363 1286 	bfi	r2, r3, #6, #1
   10fa8:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   10faa:	686b      	ldr	r3, [r5, #4]
   10fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10fb0:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10fb2:	686b      	ldr	r3, [r5, #4]
   10fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10fb8:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   10fba:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10fbc:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10fbe:	f36f 2349 	bfc	r3, #9, #1
   10fc2:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10fc4:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   10fc6:	69eb      	ldr	r3, [r5, #28]
   10fc8:	075b      	lsls	r3, r3, #29
   10fca:	d4fc      	bmi.n	10fc6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10fcc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10fd0:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10fd2:	4bb7      	ldr	r3, [pc, #732]	; (112b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10fd4:	9a04      	ldr	r2, [sp, #16]
   10fd6:	441a      	add	r2, r3
   10fd8:	4610      	mov	r0, r2
   10fda:	9a05      	ldr	r2, [sp, #20]
   10fdc:	eb03 0109 	add.w	r1, r3, r9
   10fe0:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10fe2:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10fe4:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10fe6:	9f00      	ldr	r7, [sp, #0]
   10fe8:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10fec:	2220      	movs	r2, #32
   10fee:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10ff2:	9901      	ldr	r1, [sp, #4]
   10ff4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ff8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10ffc:	9a02      	ldr	r2, [sp, #8]
   10ffe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11002:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   11006:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   1100a:	69a3      	ldr	r3, [r4, #24]
   1100c:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   11010:	789a      	ldrb	r2, [r3, #2]
   11012:	f993 3001 	ldrsb.w	r3, [r3, #1]
   11016:	01db      	lsls	r3, r3, #7
   11018:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   1101c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11020:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   11024:	07d6      	lsls	r6, r2, #31
   11026:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   1102a:	bf4c      	ite	mi
   1102c:	f365 1007 	bfimi	r0, r5, #4, #4
   11030:	f365 0003 	bfipl	r0, r5, #0, #4
   11034:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   11038:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   1103a:	2901      	cmp	r1, #1
   1103c:	f240 80c7 	bls.w	111ce <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   11040:	2902      	cmp	r1, #2
   11042:	d10a      	bne.n	1105a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11044:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11048:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1104c:	4413      	add	r3, r2
   1104e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11052:	f042 0201 	orr.w	r2, r2, #1
   11056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   1105a:	f10a 0e20 	add.w	lr, sl, #32
   1105e:	4a95      	ldr	r2, [pc, #596]	; (112b4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   11060:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   11064:	f36f 1386 	bfc	r3, #6, #1
   11068:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   1106c:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   11070:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11074:	2b00      	cmp	r3, #0
   11076:	d1f9      	bne.n	1106c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   11078:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   1107c:	f363 0103 	bfi	r1, r3, #0, #4
   11080:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   11084:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   11088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1108c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   11090:	6853      	ldr	r3, [r2, #4]
   11092:	e679      	b.n	10d88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   11094:	eb02 010e 	add.w	r1, r2, lr
   11098:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   1109c:	f006 060f 	and.w	r6, r6, #15
   110a0:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   110a4:	f366 0203 	bfi	r2, r6, #0, #4
   110a8:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   110ac:	e6f5      	b.n	10e9a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   110ae:	4648      	mov	r0, r9
   110b0:	f00a fc6a 	bl	1b988 <__aeabi_ui2d>
   110b4:	2200      	movs	r2, #0
   110b6:	4b80      	ldr	r3, [pc, #512]	; (112b8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   110b8:	f00a fcdc 	bl	1ba74 <__aeabi_dmul>
   110bc:	4b7f      	ldr	r3, [pc, #508]	; (112bc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   110be:	4680      	mov	r8, r0
   110c0:	6818      	ldr	r0, [r3, #0]
   110c2:	4689      	mov	r9, r1
   110c4:	f00a fc60 	bl	1b988 <__aeabi_ui2d>
   110c8:	4602      	mov	r2, r0
   110ca:	460b      	mov	r3, r1
   110cc:	4640      	mov	r0, r8
   110ce:	4649      	mov	r1, r9
   110d0:	f00a fdfa 	bl	1bcc8 <__aeabi_ddiv>
   110d4:	4602      	mov	r2, r0
   110d6:	460b      	mov	r3, r1
   110d8:	2000      	movs	r0, #0
   110da:	4979      	ldr	r1, [pc, #484]	; (112c0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   110dc:	f00a fb16 	bl	1b70c <__aeabi_dsub>
   110e0:	2200      	movs	r2, #0
   110e2:	4b78      	ldr	r3, [pc, #480]	; (112c4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   110e4:	f00a fcc6 	bl	1ba74 <__aeabi_dmul>
   110e8:	f00a ffa6 	bl	1c038 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   110ec:	f00a fc6e 	bl	1b9cc <__aeabi_f2d>
   110f0:	2200      	movs	r2, #0
   110f2:	4b75      	ldr	r3, [pc, #468]	; (112c8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   110f4:	f00a fb0c 	bl	1b710 <__adddf3>
   110f8:	f00a ff7e 	bl	1bff8 <__aeabi_d2uiz>
   110fc:	b280      	uxth	r0, r0
   110fe:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   11100:	2e00      	cmp	r6, #0
   11102:	f47f ae91 	bne.w	10e28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   11106:	6a22      	ldr	r2, [r4, #32]
   11108:	f992 3001 	ldrsb.w	r3, [r2, #1]
   1110c:	7890      	ldrb	r0, [r2, #2]
   1110e:	01db      	lsls	r3, r3, #7
   11110:	e6a1      	b.n	10e56 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   11112:	4649      	mov	r1, r9
   11114:	4620      	mov	r0, r4
   11116:	4798      	blx	r3
   11118:	6a22      	ldr	r2, [r4, #32]
   1111a:	6925      	ldr	r5, [r4, #16]
   1111c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   11120:	7890      	ldrb	r0, [r2, #2]
   11122:	01db      	lsls	r3, r3, #7
   11124:	e697      	b.n	10e56 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11126:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1112a:	9207      	str	r2, [sp, #28]
   1112c:	9206      	str	r2, [sp, #24]
   1112e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   11132:	9202      	str	r2, [sp, #8]
   11134:	2239      	movs	r2, #57	; 0x39
   11136:	9205      	str	r2, [sp, #20]
   11138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1113c:	9201      	str	r2, [sp, #4]
   1113e:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   11140:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11142:	2601      	movs	r6, #1
   11144:	f04f 0936 	mov.w	r9, #54	; 0x36
   11148:	9204      	str	r2, [sp, #16]
   1114a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1114e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11152:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   11156:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   11158:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1115c:	f04f 0a17 	mov.w	sl, #23
   11160:	9200      	str	r2, [sp, #0]
   11162:	e53a      	b.n	10bda <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   11164:	2900      	cmp	r1, #0
   11166:	f040 8092 	bne.w	1128e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   1116a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   1116e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11172:	2501      	movs	r5, #1
   11174:	4095      	lsls	r5, r2
   11176:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11178:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1117c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11180:	4413      	add	r3, r2
   11182:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11186:	f36f 0200 	bfc	r2, #0, #1
   1118a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1118e:	e5c7      	b.n	10d20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11190:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   11194:	9207      	str	r2, [sp, #28]
   11196:	9206      	str	r2, [sp, #24]
   11198:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1119c:	9202      	str	r2, [sp, #8]
   1119e:	223d      	movs	r2, #61	; 0x3d
   111a0:	9205      	str	r2, [sp, #20]
   111a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   111a6:	9201      	str	r2, [sp, #4]
   111a8:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   111aa:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   111ac:	2601      	movs	r6, #1
   111ae:	f04f 093a 	mov.w	r9, #58	; 0x3a
   111b2:	9204      	str	r2, [sp, #16]
   111b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   111b8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   111bc:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   111c0:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   111c2:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   111c6:	f04f 0a18 	mov.w	sl, #24
   111ca:	9200      	str	r2, [sp, #0]
   111cc:	e505      	b.n	10bda <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   111ce:	2900      	cmp	r1, #0
   111d0:	d165      	bne.n	1129e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   111d2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   111d6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   111da:	2001      	movs	r0, #1
   111dc:	4090      	lsls	r0, r2
   111de:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   111e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   111e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   111e8:	4413      	add	r3, r2
   111ea:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   111ee:	f36f 0200 	bfc	r2, #0, #1
   111f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   111f6:	e730      	b.n	1105a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   111f8:	4620      	mov	r0, r4
   111fa:	4798      	blx	r3
   111fc:	6925      	ldr	r5, [r4, #16]
   111fe:	e602      	b.n	10e06 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   11200:	4620      	mov	r0, r4
   11202:	4790      	blx	r2
   11204:	6820      	ldr	r0, [r4, #0]
   11206:	e5f0      	b.n	10dea <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   11208:	2205      	movs	r2, #5
   1120a:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   1120e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11212:	9202      	str	r2, [sp, #8]
   11214:	224d      	movs	r2, #77	; 0x4d
   11216:	492d      	ldr	r1, [pc, #180]	; (112cc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   11218:	9205      	str	r2, [sp, #20]
   1121a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1121e:	9201      	str	r2, [sp, #4]
   11220:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   11222:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   11224:	2602      	movs	r6, #2
   11226:	f04f 094a 	mov.w	r9, #74	; 0x4a
   1122a:	9107      	str	r1, [sp, #28]
   1122c:	9204      	str	r2, [sp, #16]
   1122e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   11232:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11236:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   11238:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   1123c:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   1123e:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   11242:	f04f 0a25 	mov.w	sl, #37	; 0x25
   11246:	9200      	str	r2, [sp, #0]
   11248:	e4c7      	b.n	10bda <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1124a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1124e:	9207      	str	r2, [sp, #28]
   11250:	9206      	str	r2, [sp, #24]
   11252:	2241      	movs	r2, #65	; 0x41
   11254:	9205      	str	r2, [sp, #20]
   11256:	2240      	movs	r2, #64	; 0x40
   11258:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1125a:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1125c:	2102      	movs	r1, #2
   1125e:	f04f 093e 	mov.w	r9, #62	; 0x3e
   11262:	9204      	str	r2, [sp, #16]
   11264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11268:	4637      	mov	r7, r6
   1126a:	9601      	str	r6, [sp, #4]
   1126c:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1126e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11272:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   11276:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   11278:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1127c:	f04f 0a22 	mov.w	sl, #34	; 0x22
   11280:	9200      	str	r2, [sp, #0]
   11282:	e4aa      	b.n	10bda <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   11284:	682b      	ldr	r3, [r5, #0]
   11286:	f36f 631b 	bfc	r3, #24, #4
   1128a:	602b      	str	r3, [r5, #0]
   1128c:	e687      	b.n	10f9e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   1128e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11292:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11296:	2501      	movs	r5, #1
   11298:	4095      	lsls	r5, r2
   1129a:	614d      	str	r5, [r1, #20]
   1129c:	e76c      	b.n	11178 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   1129e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   112a2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   112a6:	2001      	movs	r0, #1
   112a8:	4090      	lsls	r0, r2
   112aa:	6148      	str	r0, [r1, #20]
   112ac:	e798      	b.n	111e0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   112ae:	bf00      	nop
   112b0:	e000e100 	.word	0xe000e100
   112b4:	40001c00 	.word	0x40001c00
   112b8:	40300000 	.word	0x40300000
   112bc:	200000e8 	.word	0x200000e8
   112c0:	3ff00000 	.word	0x3ff00000
   112c4:	40f00000 	.word	0x40f00000
   112c8:	3fe00000 	.word	0x3fe00000
   112cc:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   112d0:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   112d2:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   112d4:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   112d8:	f36c 0100 	bfi	r1, ip, #0, #1
   112dc:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   112e0:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   112e2:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   112e6:	0790      	lsls	r0, r2, #30
   112e8:	d503      	bpl.n	112f2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   112ea:	681a      	ldr	r2, [r3, #0]
   112ec:	f36c 0241 	bfi	r2, ip, #1, #1
   112f0:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   112f2:	69da      	ldr	r2, [r3, #28]
   112f4:	f012 0202 	ands.w	r2, r2, #2
   112f8:	d1fb      	bne.n	112f2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   112fa:	6821      	ldr	r1, [r4, #0]
   112fc:	680b      	ldr	r3, [r1, #0]
   112fe:	4543      	cmp	r3, r8
   11300:	d13b      	bne.n	1137a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   11302:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   11306:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   1130a:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   1130e:	684b      	ldr	r3, [r1, #4]
   11310:	4a1c      	ldr	r2, [pc, #112]	; (11384 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   11312:	4293      	cmp	r3, r2
   11314:	d12d      	bne.n	11372 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11316:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   11318:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1131a:	2104      	movs	r1, #4
    m_inTail = 0;
   1131c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   11320:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   11322:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11326:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   11328:	7b21      	ldrb	r1, [r4, #12]
   1132a:	6813      	ldr	r3, [r2, #0]
   1132c:	2900      	cmp	r1, #0
   1132e:	bf0c      	ite	eq
   11330:	2100      	moveq	r1, #0
   11332:	2102      	movne	r1, #2
   11334:	f361 4311 	bfi	r3, r1, #16, #2
   11338:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   1133a:	f1bb 0f00 	cmp.w	fp, #0
   1133e:	f43f ae18 	beq.w	10f72 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   11342:	6813      	ldr	r3, [r2, #0]
   11344:	f043 0302 	orr.w	r3, r3, #2
   11348:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1134a:	69d3      	ldr	r3, [r2, #28]
   1134c:	0799      	lsls	r1, r3, #30
   1134e:	d4fc      	bmi.n	1134a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11350:	6a23      	ldr	r3, [r4, #32]
   11352:	f993 2001 	ldrsb.w	r2, [r3, #1]
   11356:	789b      	ldrb	r3, [r3, #2]
   11358:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   1135c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11360:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11364:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11368:	f042 0201 	orr.w	r2, r2, #1
   1136c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11370:	e5ff      	b.n	10f72 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   11372:	4620      	mov	r0, r4
   11374:	4798      	blx	r3
   11376:	6922      	ldr	r2, [r4, #16]
   11378:	e7d6      	b.n	11328 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   1137a:	4620      	mov	r0, r4
   1137c:	4798      	blx	r3
   1137e:	6821      	ldr	r1, [r4, #0]
   11380:	e7c5      	b.n	1130e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   11382:	bf00      	nop
   11384:	0001046d 	.word	0x0001046d

00011388 <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   11388:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   1138c:	b92a      	cbnz	r2, 1139a <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   1138e:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   11390:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   11392:	428a      	cmp	r2, r1
        m_portOpen = true;
   11394:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   11398:	d900      	bls.n	1139c <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   1139a:	4770      	bx	lr
   1139c:	f7ff bb86 	b.w	10aac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

000113a0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   113a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113a2:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   113a4:	4f20      	ldr	r7, [pc, #128]	; (11428 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   113a6:	6182      	str	r2, [r0, #24]
   113a8:	61c3      	str	r3, [r0, #28]
   113aa:	4d20      	ldr	r5, [pc, #128]	; (1142c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   113ac:	60a7      	str	r7, [r4, #8]
   113ae:	9f06      	ldr	r7, [sp, #24]
   113b0:	f8df c080 	ldr.w	ip, [pc, #128]	; 11434 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   113b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   113b8:	6065      	str	r5, [r4, #4]
   113ba:	2307      	movs	r3, #7
   113bc:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   113be:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   113c0:	6227      	str	r7, [r4, #32]
   113c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   113c6:	2780      	movs	r7, #128	; 0x80
   113c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   113cc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   113d0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   113d4:	f8c4 c000 	str.w	ip, [r4]
   113d8:	6261      	str	r1, [r4, #36]	; 0x24
   113da:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   113de:	85a2      	strh	r2, [r4, #44]	; 0x2c
   113e0:	4629      	mov	r1, r5
   113e2:	463a      	mov	r2, r7
   113e4:	6166      	str	r6, [r4, #20]
   113e6:	7325      	strb	r5, [r4, #12]
   113e8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   113ec:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   113f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   113f4:	f00c fffa 	bl	1e3ec <memset>
   113f8:	463a      	mov	r2, r7
   113fa:	4629      	mov	r1, r5
   113fc:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11400:	f00c fff4 	bl	1e3ec <memset>
   11404:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   11408:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1140c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11410:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   11414:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   11418:	7a32      	ldrb	r2, [r6, #8]
   1141a:	4b05      	ldr	r3, [pc, #20]	; (11430 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   1141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11420:	6123      	str	r3, [r4, #16]
}
   11422:	4620      	mov	r0, r4
   11424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11426:	bf00      	nop
   11428:	02000100 	.word	0x02000100
   1142c:	00080102 	.word	0x00080102
   11430:	000233ac 	.word	0x000233ac
   11434:	00023364 	.word	0x00023364

00011438 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11438:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   1143a:	4907      	ldr	r1, [pc, #28]	; (11458 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   1143c:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   11440:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   11442:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11444:	fbb2 f2f3 	udiv	r2, r2, r3
   11448:	2a02      	cmp	r2, #2
   1144a:	bf38      	it	cc
   1144c:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   1144e:	680b      	ldr	r3, [r1, #0]
   11450:	1a1b      	subs	r3, r3, r0
   11452:	429a      	cmp	r2, r3
   11454:	d8fb      	bhi.n	1144e <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   11456:	4770      	bx	lr
   11458:	20001d2c 	.word	0x20001d2c

0001145c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   1145c:	2901      	cmp	r1, #1
   1145e:	d901      	bls.n	11464 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   11460:	2000      	movs	r0, #0
   11462:	4770      	bx	lr
    if (!m_portOpen) {
   11464:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   11468:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   1146a:	b10a      	cbz	r2, 11470 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   1146c:	f7ff bb1e 	b.w	10aac <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   11470:	2001      	movs	r0, #1
}
   11472:	4770      	bx	lr

00011474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   11474:	2901      	cmp	r1, #1
    m_ssMode = mode;
   11476:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   11478:	d914      	bls.n	114a4 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   1147a:	2902      	cmp	r1, #2
   1147c:	d110      	bne.n	114a0 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1147e:	6982      	ldr	r2, [r0, #24]
   11480:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11484:	7893      	ldrb	r3, [r2, #2]
   11486:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1148a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1148e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   11492:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11494:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11498:	4302      	orrs	r2, r0
   1149a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1149e:	4770      	bx	lr
            success = false;
   114a0:	2000      	movs	r0, #0
}
   114a2:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   114a4:	6982      	ldr	r2, [r0, #24]
   114a6:	f992 3001 	ldrsb.w	r3, [r2, #1]
   114aa:	7892      	ldrb	r2, [r2, #2]
   114ac:	01db      	lsls	r3, r3, #7
   114ae:	b199      	cbz	r1, 114d8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   114b0:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   114b4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   114b8:	2001      	movs	r0, #1
   114ba:	4090      	lsls	r0, r2
   114bc:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   114be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   114c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   114c6:	4413      	add	r3, r2
   114c8:	2001      	movs	r0, #1
   114ca:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   114ce:	f36f 0200 	bfc	r2, #0, #1
   114d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   114d6:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   114d8:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   114dc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   114e0:	2001      	movs	r0, #1
   114e2:	4090      	lsls	r0, r2
   114e4:	6188      	str	r0, [r1, #24]
   114e6:	e7ea      	b.n	114be <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

000114e8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   114e8:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   114ea:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   114ec:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   114ee:	2b01      	cmp	r3, #1
    m_phase = phase;
   114f0:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   114f2:	d000      	beq.n	114f6 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   114f4:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   114f6:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   114f8:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   114fa:	f991 4001 	ldrsb.w	r4, [r1, #1]
   114fe:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11500:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11502:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   11506:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1150a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1150e:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11512:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   11516:	f36f 0100 	bfc	r1, #0, #1
   1151a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1151e:	6813      	ldr	r3, [r2, #0]
   11520:	0799      	lsls	r1, r3, #30
   11522:	d503      	bpl.n	1152c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   11524:	6813      	ldr	r3, [r2, #0]
   11526:	f36f 0341 	bfc	r3, #1, #1
   1152a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1152c:	69d3      	ldr	r3, [r2, #28]
   1152e:	f013 0302 	ands.w	r3, r3, #2
   11532:	d1fb      	bne.n	1152c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   11534:	6802      	ldr	r2, [r0, #0]
   11536:	4604      	mov	r4, r0
   11538:	6811      	ldr	r1, [r2, #0]
   1153a:	4821      	ldr	r0, [pc, #132]	; (115c0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   1153c:	4281      	cmp	r1, r0
   1153e:	d136      	bne.n	115ae <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   11540:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   11544:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   11548:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1154c:	6853      	ldr	r3, [r2, #4]
   1154e:	4a1d      	ldr	r2, [pc, #116]	; (115c4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   11550:	4293      	cmp	r3, r2
   11552:	d130      	bne.n	115b6 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11554:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   11556:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11558:	2104      	movs	r1, #4
    m_inTail = 0;
   1155a:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1155e:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   11560:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11564:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   11566:	7a21      	ldrb	r1, [r4, #8]
   11568:	681a      	ldr	r2, [r3, #0]
   1156a:	f361 725d 	bfi	r2, r1, #29, #1
   1156e:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   11570:	7a61      	ldrb	r1, [r4, #9]
   11572:	681a      	ldr	r2, [r3, #0]
   11574:	f361 721c 	bfi	r2, r1, #28, #1
   11578:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   1157a:	2d00      	cmp	r5, #0
   1157c:	d0ba      	beq.n	114f4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1157e:	681a      	ldr	r2, [r3, #0]
   11580:	f042 0202 	orr.w	r2, r2, #2
   11584:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11586:	69da      	ldr	r2, [r3, #28]
   11588:	0792      	lsls	r2, r2, #30
   1158a:	d4fc      	bmi.n	11586 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1158c:	6a22      	ldr	r2, [r4, #32]
   1158e:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11592:	7893      	ldrb	r3, [r2, #2]
   11594:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   11598:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1159c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   115a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   115a4:	f042 0201 	orr.w	r2, r2, #1
   115a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   115ac:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   115ae:	4620      	mov	r0, r4
   115b0:	4788      	blx	r1
   115b2:	6822      	ldr	r2, [r4, #0]
   115b4:	e7ca      	b.n	1154c <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   115b6:	4620      	mov	r0, r4
   115b8:	4798      	blx	r3
   115ba:	6923      	ldr	r3, [r4, #16]
   115bc:	e7d3      	b.n	11566 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   115be:	bf00      	nop
   115c0:	0001045d 	.word	0x0001045d
   115c4:	0001046d 	.word	0x0001046d

000115c8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   115c8:	b470      	push	{r4, r5, r6}
   115ca:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   115cc:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   115d0:	b120      	cbz	r0, 115dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   115d2:	79e0      	ldrb	r0, [r4, #7]
   115d4:	2801      	cmp	r0, #1
        return 0;
   115d6:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   115da:	d001      	beq.n	115e0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   115dc:	bc70      	pop	{r4, r5, r6}
   115de:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   115e0:	2b00      	cmp	r3, #0
   115e2:	ddfb      	ble.n	115dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   115e4:	6925      	ldr	r5, [r4, #16]
   115e6:	b1b9      	cbz	r1, 11618 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   115e8:	1c4e      	adds	r6, r1, #1
   115ea:	7809      	ldrb	r1, [r1, #0]
   115ec:	62a9      	str	r1, [r5, #40]	; 0x28
   115ee:	e003      	b.n	115f8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   115f0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   115f4:	2900      	cmp	r1, #0
   115f6:	d0f1      	beq.n	115dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   115f8:	7e29      	ldrb	r1, [r5, #24]
   115fa:	0749      	lsls	r1, r1, #29
   115fc:	d5f8      	bpl.n	115f0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   115fe:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11600:	0789      	lsls	r1, r1, #30
   11602:	d5f5      	bpl.n	115f0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   11604:	b152      	cbz	r2, 1161c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   11606:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   11608:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1160a:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   1160c:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   1160e:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   11612:	d007      	beq.n	11624 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   11614:	4631      	mov	r1, r6
   11616:	e7e5      	b.n	115e4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   11618:	460e      	mov	r6, r1
   1161a:	e7e7      	b.n	115ec <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   1161c:	3001      	adds	r0, #1
   1161e:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   11620:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   11622:	d1f7      	bne.n	11614 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   11624:	4618      	mov	r0, r3
   11626:	e7d9      	b.n	115dc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

00011628 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   11628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   1162c:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   11630:	b12d      	cbz	r5, 1163e <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   11632:	f890 8007 	ldrb.w	r8, [r0, #7]
   11636:	f1b8 0f01 	cmp.w	r8, #1
   1163a:	d003      	beq.n	11644 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   1163c:	2500      	movs	r5, #0
}
   1163e:	4628      	mov	r0, r5
   11640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11644:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   11648:	f1be 0f07 	cmp.w	lr, #7
   1164c:	d0f6      	beq.n	1163c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   1164e:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   11652:	2c07      	cmp	r4, #7
   11654:	d0f2      	beq.n	1163c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11656:	4616      	mov	r6, r2
   11658:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1165a:	4670      	mov	r0, lr
   1165c:	461f      	mov	r7, r3
   1165e:	4689      	mov	r9, r1
   11660:	f7f3 ff22 	bl	54a8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11664:	b336      	cbz	r6, 116b4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11666:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   11668:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   1166c:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   1166e:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11670:	b2be      	uxth	r6, r7
   11672:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11674:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11678:	f7f3 ff0c 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1167c:	6803      	ldr	r3, [r0, #0]
   1167e:	f043 0302 	orr.w	r3, r3, #2
   11682:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11684:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11688:	f7f3 ff0e 	bl	54a8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   1168c:	f1b9 0f00 	cmp.w	r9, #0
   11690:	d015      	beq.n	116be <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11692:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11694:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11698:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   1169a:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   1169c:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   1169e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   116a2:	f7f3 fef7 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   116a6:	6803      	ldr	r3, [r0, #0]
   116a8:	f043 0302 	orr.w	r3, r3, #2
   116ac:	6003      	str	r3, [r0, #0]
}
   116ae:	4628      	mov	r0, r5
   116b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   116b4:	4b04      	ldr	r3, [pc, #16]	; (116c8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   116b6:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   116b8:	f8a0 8000 	strh.w	r8, [r0]
   116bc:	e7d8      	b.n	11670 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   116be:	4b02      	ldr	r3, [pc, #8]	; (116c8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   116c0:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   116c2:	2301      	movs	r3, #1
   116c4:	8003      	strh	r3, [r0, #0]
   116c6:	e7e9      	b.n	1169c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   116c8:	20001f40 	.word	0x20001f40

000116cc <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   116cc:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   116d0:	2b07      	cmp	r3, #7
   116d2:	d016      	beq.n	11702 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   116d4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   116d8:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   116da:	b510      	push	{r4, lr}
   116dc:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   116de:	d005      	beq.n	116ec <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   116e0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   116e4:	b113      	cbz	r3, 116ec <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   116e6:	79e3      	ldrb	r3, [r4, #7]
   116e8:	2b01      	cmp	r3, #1
   116ea:	d001      	beq.n	116f0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   116ec:	2001      	movs	r0, #1
   116ee:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   116f0:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   116f4:	f7f3 fece 	bl	5494 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   116f8:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   116fa:	079b      	lsls	r3, r3, #30
   116fc:	d4f0      	bmi.n	116e0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   116fe:	2001      	movs	r0, #1
   11700:	bd10      	pop	{r4, pc}
   11702:	2001      	movs	r0, #1
   11704:	4770      	bx	lr
   11706:	bf00      	nop

00011708 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   11708:	79c3      	ldrb	r3, [r0, #7]
   1170a:	2b01      	cmp	r3, #1
   1170c:	d022      	beq.n	11754 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   1170e:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11712:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11716:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   11718:	429a      	cmp	r2, r3
   1171a:	d019      	beq.n	11750 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   1171c:	7e0b      	ldrb	r3, [r1, #24]
   1171e:	07da      	lsls	r2, r3, #31
   11720:	d403      	bmi.n	1172a <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   11722:	e018      	b.n	11756 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   11724:	7e0b      	ldrb	r3, [r1, #24]
   11726:	07db      	lsls	r3, r3, #31
   11728:	d514      	bpl.n	11754 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   1172a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   1172e:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11732:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   11734:	3301      	adds	r3, #1
   11736:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   1173a:	628a      	str	r2, [r1, #40]	; 0x28
   1173c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   11740:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11744:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11748:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1174c:	429a      	cmp	r2, r3
   1174e:	d1e9      	bne.n	11724 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   11750:	2301      	movs	r3, #1
   11752:	750b      	strb	r3, [r1, #20]
   11754:	4770      	bx	lr
   11756:	4770      	bx	lr

00011758 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   11758:	79c3      	ldrb	r3, [r0, #7]
   1175a:	2b01      	cmp	r3, #1
   1175c:	d100      	bne.n	11760 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   1175e:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11760:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11762:	6901      	ldr	r1, [r0, #16]
   11764:	f891 3020 	ldrb.w	r3, [r1, #32]
   11768:	b303      	cbz	r3, 117ac <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   1176a:	2300      	movs	r3, #0
   1176c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11770:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11774:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   11778:	f103 0218 	add.w	r2, r3, #24
   1177c:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   11780:	3301      	adds	r3, #1
   11782:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   11786:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   1178a:	7e0b      	ldrb	r3, [r1, #24]
   1178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11790:	760b      	strb	r3, [r1, #24]
   11792:	e00b      	b.n	117ac <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11794:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11798:	429a      	cmp	r2, r3
   1179a:	d00f      	beq.n	117bc <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   1179c:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   117a0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   117a2:	3218      	adds	r2, #24
   117a4:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   117a8:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   117ac:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   117b0:	7e0a      	ldrb	r2, [r1, #24]
   117b2:	3301      	adds	r3, #1
   117b4:	0752      	lsls	r2, r2, #29
   117b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   117ba:	d4eb      	bmi.n	11794 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   117bc:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   117c0:	429a      	cmp	r2, r3
   117c2:	d002      	beq.n	117ca <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   117c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   117c8:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   117ca:	2304      	movs	r3, #4
   117cc:	750b      	strb	r3, [r1, #20]
}
   117ce:	e7f9      	b.n	117c4 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

000117d0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   117d0:	79c3      	ldrb	r3, [r0, #7]
   117d2:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   117d4:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   117d6:	d022      	beq.n	1181e <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   117d8:	7e1a      	ldrb	r2, [r3, #24]
   117da:	09d2      	lsrs	r2, r2, #7
   117dc:	d01e      	beq.n	1181c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   117de:	2280      	movs	r2, #128	; 0x80
   117e0:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   117e2:	8b5a      	ldrh	r2, [r3, #26]
   117e4:	0792      	lsls	r2, r2, #30
   117e6:	d509      	bpl.n	117fc <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   117e8:	8b5a      	ldrh	r2, [r3, #26]
   117ea:	f042 0202 	orr.w	r2, r2, #2
   117ee:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   117f0:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   117f4:	f042 0201 	orr.w	r2, r2, #1
   117f8:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   117fc:	8b5a      	ldrh	r2, [r3, #26]
   117fe:	07d1      	lsls	r1, r2, #31
   11800:	d410      	bmi.n	11824 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   11802:	8b5a      	ldrh	r2, [r3, #26]
   11804:	0752      	lsls	r2, r2, #29
   11806:	d509      	bpl.n	1181c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   11808:	8b5a      	ldrh	r2, [r3, #26]
   1180a:	f042 0204 	orr.w	r2, r2, #4
   1180e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   11810:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11814:	f043 0304 	orr.w	r3, r3, #4
   11818:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   1181c:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   1181e:	2280      	movs	r2, #128	; 0x80
   11820:	761a      	strb	r2, [r3, #24]
            break;
   11822:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   11824:	8b5a      	ldrh	r2, [r3, #26]
   11826:	f042 0201 	orr.w	r2, r2, #1
   1182a:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   1182c:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11830:	f042 0202 	orr.w	r2, r2, #2
   11834:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   11838:	e7e3      	b.n	11802 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   1183a:	bf00      	nop

0001183c <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   1183c:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   11840:	4770      	bx	lr
   11842:	bf00      	nop

00011844 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11844:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11848:	e7f8      	b.n	1183c <_ZN9ClearCore12SerialDriver4ModeEv>
   1184a:	bf00      	nop

0001184c <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   1184c:	2007      	movs	r0, #7
   1184e:	4770      	bx	lr

00011850 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   11850:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11854:	e7fa      	b.n	1184c <_ZN9ClearCore12SerialDriver4TypeEv>
   11856:	bf00      	nop

00011858 <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   11858:	6803      	ldr	r3, [r0, #0]
   1185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1185c:	4718      	bx	r3
   1185e:	bf00      	nop

00011860 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11860:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11864:	e7f8      	b.n	11858 <_ZN9ClearCore12SerialDriver10IsWritableEv>
   11866:	bf00      	nop

00011868 <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   11868:	b508      	push	{r3, lr}
        return PortIsOpen();
   1186a:	6803      	ldr	r3, [r0, #0]
   1186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1186e:	4798      	blx	r3
    }
   11870:	b200      	sxth	r0, r0
   11872:	bd08      	pop	{r3, pc}

00011874 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11874:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11878:	e7f6      	b.n	11868 <_ZN9ClearCore12SerialDriver5StateEv>
   1187a:	bf00      	nop

0001187c <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   1187c:	2000      	movs	r0, #0
   1187e:	4770      	bx	lr

00011880 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   11880:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11884:	e7fa      	b.n	1187c <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   11886:	bf00      	nop

00011888 <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   11888:	4770      	bx	lr
   1188a:	bf00      	nop

0001188c <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   1188c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11890:	e7fa      	b.n	11888 <_ZN9ClearCore12SerialDriver7RefreshEv>
   11892:	bf00      	nop

00011894 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11898:	b082      	sub	sp, #8
   1189a:	4688      	mov	r8, r1
   1189c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1189e:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   118a2:	9500      	str	r5, [sp, #0]
   118a4:	9401      	str	r4, [sp, #4]
   118a6:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   118a8:	4604      	mov	r4, r0
   118aa:	4617      	mov	r7, r2
   118ac:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   118ae:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   118b0:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   118b2:	f7ff fd75 	bl	113a0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   118b6:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   118ba:	f7f3 fd05 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
   118be:	4b09      	ldr	r3, [pc, #36]	; (118e4 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   118c0:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   118c4:	f103 0208 	add.w	r2, r3, #8
   118c8:	4620      	mov	r0, r4
   118ca:	337c      	adds	r3, #124	; 0x7c
   118cc:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   118d0:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   118d4:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   118d8:	6022      	str	r2, [r4, #0]
   118da:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   118de:	b002      	add	sp, #8
   118e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118e4:	000233cc 	.word	0x000233cc

000118e8 <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   118e8:	b538      	push	{r3, r4, r5, lr}
   118ea:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   118ec:	f7fe fe50 	bl	10590 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   118f0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   118f4:	4605      	mov	r5, r0
        if (m_portOpen) {
   118f6:	b113      	cbz	r3, 118fe <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   118f8:	4620      	mov	r0, r4
   118fa:	f7ff fd9d 	bl	11438 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   118fe:	4628      	mov	r0, r5
   11900:	bd38      	pop	{r3, r4, r5, pc}
   11902:	bf00      	nop

00011904 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11904:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   11906:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   1190a:	428b      	cmp	r3, r1
   1190c:	d00d      	beq.n	1192a <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   1190e:	2b10      	cmp	r3, #16
   11910:	460d      	mov	r5, r1
   11912:	4604      	mov	r4, r0
   11914:	f000 808c 	beq.w	11a30 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   11918:	f1a5 030d 	sub.w	r3, r5, #13
   1191c:	2b03      	cmp	r3, #3
   1191e:	f200 808c 	bhi.w	11a3a <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11922:	e8df f003 	tbb	[pc, r3]
   11926:	3169      	.short	0x3169
   11928:	4f06      	.short	0x4f06
        return true;
   1192a:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   1192c:	4628      	mov	r0, r5
   1192e:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11930:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11932:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11936:	4b42      	ldr	r3, [pc, #264]	; (11a40 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11938:	f3bf 8f5b 	dmb	ish
   1193c:	43d2      	mvns	r2, r2
   1193e:	e853 1f00 	ldrex	r1, [r3]
   11942:	4011      	ands	r1, r2
   11944:	e843 1000 	strex	r0, r1, [r3]
   11948:	2800      	cmp	r0, #0
   1194a:	d1f8      	bne.n	1193e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   1194c:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11950:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11954:	f3bf 8f5b 	dmb	ish
   11958:	e853 1f00 	ldrex	r1, [r3]
   1195c:	4311      	orrs	r1, r2
   1195e:	e843 1000 	strex	r0, r1, [r3]
   11962:	2800      	cmp	r0, #0
   11964:	d1f8      	bne.n	11958 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   11966:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   1196a:	2101      	movs	r1, #1
    m_mode = newMode;
   1196c:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11970:	4620      	mov	r0, r4
   11972:	f7ff fd73 	bl	1145c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11976:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1197a:	2d00      	cmp	r5, #0
   1197c:	d0d5      	beq.n	1192a <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   1197e:	4620      	mov	r0, r4
   11980:	f7ff fd5a 	bl	11438 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11984:	4628      	mov	r0, r5
   11986:	bd38      	pop	{r3, r4, r5, pc}
   11988:	4b2d      	ldr	r3, [pc, #180]	; (11a40 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1198a:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1198e:	f3bf 8f5b 	dmb	ish
   11992:	e853 1f00 	ldrex	r1, [r3]
   11996:	4311      	orrs	r1, r2
   11998:	e843 1000 	strex	r0, r1, [r3]
   1199c:	2800      	cmp	r0, #0
   1199e:	d1f8      	bne.n	11992 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   119a0:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   119a4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   119a8:	f3bf 8f5b 	dmb	ish
   119ac:	43d2      	mvns	r2, r2
   119ae:	e853 1f00 	ldrex	r1, [r3]
   119b2:	4011      	ands	r1, r2
   119b4:	e843 1000 	strex	r0, r1, [r3]
   119b8:	2800      	cmp	r0, #0
   119ba:	d1f8      	bne.n	119ae <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   119bc:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   119c0:	2100      	movs	r1, #0
   119c2:	e7d3      	b.n	1196c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   119c4:	2201      	movs	r2, #1
   119c6:	2100      	movs	r1, #0
   119c8:	4620      	mov	r0, r4
   119ca:	f7ff fd8d 	bl	114e8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   119ce:	2101      	movs	r1, #1
   119d0:	4620      	mov	r0, r4
   119d2:	f7ff fd4f 	bl	11474 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   119d6:	6823      	ldr	r3, [r4, #0]
   119d8:	4a1a      	ldr	r2, [pc, #104]	; (11a44 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   119da:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   119dc:	491a      	ldr	r1, [pc, #104]	; (11a48 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   119de:	4293      	cmp	r3, r2
   119e0:	4620      	mov	r0, r4
   119e2:	d1a5      	bne.n	11930 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   119e4:	f7fe fdd4 	bl	10590 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   119e8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   119ec:	2b00      	cmp	r3, #0
   119ee:	d0a0      	beq.n	11932 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   119f0:	4620      	mov	r0, r4
   119f2:	f7ff fd21 	bl	11438 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   119f6:	e79c      	b.n	11932 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   119f8:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   119fc:	4b10      	ldr	r3, [pc, #64]	; (11a40 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   119fe:	f3bf 8f5b 	dmb	ish
   11a02:	43d2      	mvns	r2, r2
   11a04:	e853 1f00 	ldrex	r1, [r3]
   11a08:	4011      	ands	r1, r2
   11a0a:	e843 1000 	strex	r0, r1, [r3]
   11a0e:	2800      	cmp	r0, #0
   11a10:	d1f8      	bne.n	11a04 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11a12:	f3bf 8f5b 	dmb	ish
   11a16:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11a1a:	f3bf 8f5b 	dmb	ish
   11a1e:	43d2      	mvns	r2, r2
   11a20:	e853 1f00 	ldrex	r1, [r3]
   11a24:	4011      	ands	r1, r2
   11a26:	e843 1000 	strex	r0, r1, [r3]
   11a2a:	2800      	cmp	r0, #0
   11a2c:	d0c6      	beq.n	119bc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   11a2e:	e7f7      	b.n	11a20 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   11a30:	4b06      	ldr	r3, [pc, #24]	; (11a4c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   11a32:	6818      	ldr	r0, [r3, #0]
   11a34:	f7fe fbcc 	bl	101d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11a38:	e76e      	b.n	11918 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   11a3a:	2500      	movs	r5, #0
   11a3c:	e776      	b.n	1192c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   11a3e:	bf00      	nop
   11a40:	20001c04 	.word	0x20001c04
   11a44:	000118e9 	.word	0x000118e9
   11a48:	0007a120 	.word	0x0007a120
   11a4c:	20001f38 	.word	0x20001f38

00011a50 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   11a50:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11a54:	f7ff bf56 	b.w	11904 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

00011a58 <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   11a58:	b510      	push	{r4, lr}
   11a5a:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11a5c:	f7fe fcfa 	bl	10454 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11a60:	b100      	cbz	r0, 11a64 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11a62:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11a64:	4620      	mov	r0, r4
   11a66:	f7ff fc8f 	bl	11388 <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   11a6a:	4620      	mov	r0, r4
   11a6c:	f7ff fce4 	bl	11438 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11a70:	4b0c      	ldr	r3, [pc, #48]	; (11aa4 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11a72:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11a76:	f3bf 8f5b 	dmb	ish
   11a7a:	e853 1f00 	ldrex	r1, [r3]
   11a7e:	4311      	orrs	r1, r2
   11a80:	e843 1000 	strex	r0, r1, [r3]
   11a84:	2800      	cmp	r0, #0
   11a86:	d1f8      	bne.n	11a7a <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   11a88:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11a8c:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11a90:	2b10      	cmp	r3, #16
   11a92:	d1e6      	bne.n	11a62 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11a94:	4b04      	ldr	r3, [pc, #16]	; (11aa8 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   11a96:	4621      	mov	r1, r4
   11a98:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   11a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   11a9e:	f7fe bbb7 	b.w	10210 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11aa2:	bf00      	nop
   11aa4:	20001c04 	.word	0x20001c04
   11aa8:	20001f38 	.word	0x20001f38

00011aac <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   11aac:	b510      	push	{r4, lr}
   11aae:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   11ab0:	f7fe fcd0 	bl	10454 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11ab4:	b1a8      	cbz	r0, 11ae2 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   11ab6:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11aba:	2b10      	cmp	r3, #16
   11abc:	d012      	beq.n	11ae4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   11abe:	4620      	mov	r0, r4
   11ac0:	f7fe fe10 	bl	106e4 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11ac4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11ac8:	4a09      	ldr	r2, [pc, #36]	; (11af0 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   11aca:	f3bf 8f5b 	dmb	ish
   11ace:	43db      	mvns	r3, r3
   11ad0:	e852 1f00 	ldrex	r1, [r2]
   11ad4:	4019      	ands	r1, r3
   11ad6:	e842 1000 	strex	r0, r1, [r2]
   11ada:	2800      	cmp	r0, #0
   11adc:	d1f8      	bne.n	11ad0 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   11ade:	f3bf 8f5b 	dmb	ish
   11ae2:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   11ae4:	4b03      	ldr	r3, [pc, #12]	; (11af4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   11ae6:	6818      	ldr	r0, [r3, #0]
   11ae8:	f7fe fb72 	bl	101d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11aec:	e7e7      	b.n	11abe <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   11aee:	bf00      	nop
   11af0:	20001c04 	.word	0x20001c04
   11af4:	20001f38 	.word	0x20001f38

00011af8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   11af8:	6803      	ldr	r3, [r0, #0]
   11afa:	4a37      	ldr	r2, [pc, #220]	; (11bd8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11afc:	68db      	ldr	r3, [r3, #12]
   11afe:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11b00:	b510      	push	{r4, lr}
   11b02:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11b04:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   11b08:	d150      	bne.n	11bac <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   11b0a:	f7fe fca3 	bl	10454 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11b0e:	b1a8      	cbz	r0, 11b3c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11b10:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11b14:	2b10      	cmp	r3, #16
   11b16:	d059      	beq.n	11bcc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   11b18:	4620      	mov	r0, r4
   11b1a:	f7fe fde3 	bl	106e4 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11b1e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11b22:	4a2e      	ldr	r2, [pc, #184]	; (11bdc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11b24:	f3bf 8f5b 	dmb	ish
   11b28:	43db      	mvns	r3, r3
   11b2a:	e852 1f00 	ldrex	r1, [r2]
   11b2e:	4019      	ands	r1, r3
   11b30:	e842 1000 	strex	r0, r1, [r2]
   11b34:	2800      	cmp	r0, #0
   11b36:	d1f8      	bne.n	11b2a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   11b38:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   11b3c:	6823      	ldr	r3, [r4, #0]
   11b3e:	4a28      	ldr	r2, [pc, #160]	; (11be0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11b42:	4293      	cmp	r3, r2
   11b44:	d138      	bne.n	11bb8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   11b46:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11b4a:	2b0d      	cmp	r3, #13
   11b4c:	d028      	beq.n	11ba0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   11b4e:	2b10      	cmp	r3, #16
   11b50:	d037      	beq.n	11bc2 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   11b52:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11b56:	4b21      	ldr	r3, [pc, #132]	; (11bdc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11b58:	f3bf 8f5b 	dmb	ish
   11b5c:	43d2      	mvns	r2, r2
   11b5e:	e853 1f00 	ldrex	r1, [r3]
   11b62:	4011      	ands	r1, r2
   11b64:	e843 1000 	strex	r0, r1, [r3]
   11b68:	2800      	cmp	r0, #0
   11b6a:	d1f8      	bne.n	11b5e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11b6c:	f3bf 8f5b 	dmb	ish
   11b70:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11b74:	f3bf 8f5b 	dmb	ish
   11b78:	43d2      	mvns	r2, r2
   11b7a:	e853 1f00 	ldrex	r1, [r3]
   11b7e:	4011      	ands	r1, r2
   11b80:	e843 1000 	strex	r0, r1, [r3]
   11b84:	2800      	cmp	r0, #0
   11b86:	d1f8      	bne.n	11b7a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   11b88:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   11b8c:	230d      	movs	r3, #13
   11b8e:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   11b92:	4620      	mov	r0, r4
   11b94:	2100      	movs	r1, #0
   11b96:	f7ff fc61 	bl	1145c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11b9a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11b9e:	b903      	cbnz	r3, 11ba2 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   11ba0:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   11ba2:	4620      	mov	r0, r4
}
   11ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   11ba8:	f7ff bc46 	b.w	11438 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   11bac:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   11bae:	6823      	ldr	r3, [r4, #0]
   11bb0:	4a0b      	ldr	r2, [pc, #44]	; (11be0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11bb4:	4293      	cmp	r3, r2
   11bb6:	d0c6      	beq.n	11b46 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   11bb8:	4620      	mov	r0, r4
   11bba:	210d      	movs	r1, #13
}
   11bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   11bc0:	4718      	bx	r3
        CcioMgr.LinkClose();
   11bc2:	4b08      	ldr	r3, [pc, #32]	; (11be4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11bc4:	6818      	ldr	r0, [r3, #0]
   11bc6:	f7fe fb03 	bl	101d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11bca:	e7c2      	b.n	11b52 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   11bcc:	4b05      	ldr	r3, [pc, #20]	; (11be4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11bce:	6818      	ldr	r0, [r3, #0]
   11bd0:	f7fe fafe 	bl	101d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11bd4:	e7a0      	b.n	11b18 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   11bd6:	bf00      	nop
   11bd8:	00011aad 	.word	0x00011aad
   11bdc:	20001c04 	.word	0x20001c04
   11be0:	00011905 	.word	0x00011905
   11be4:	20001f38 	.word	0x20001f38

00011be8 <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   11be8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11bec:	f7ff bf84 	b.w	11af8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

00011bf0 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11bf0:	b510      	push	{r4, lr}
            PortOpen();
   11bf2:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   11bf4:	4604      	mov	r4, r0
        if (newState) {
   11bf6:	bb09      	cbnz	r1, 11c3c <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   11bf8:	4a26      	ldr	r2, [pc, #152]	; (11c94 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   11bfa:	68db      	ldr	r3, [r3, #12]
   11bfc:	4293      	cmp	r3, r2
   11bfe:	d11a      	bne.n	11c36 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   11c00:	f7fe fc28 	bl	10454 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11c04:	b1a8      	cbz	r0, 11c32 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   11c06:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11c0a:	2b10      	cmp	r3, #16
   11c0c:	d03c      	beq.n	11c88 <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   11c0e:	4620      	mov	r0, r4
   11c10:	f7fe fd68 	bl	106e4 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11c14:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11c18:	4a1f      	ldr	r2, [pc, #124]	; (11c98 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   11c1a:	f3bf 8f5b 	dmb	ish
   11c1e:	43db      	mvns	r3, r3
   11c20:	e852 1f00 	ldrex	r1, [r2]
   11c24:	4019      	ands	r1, r3
   11c26:	e842 1000 	strex	r0, r1, [r2]
   11c2a:	2800      	cmp	r0, #0
   11c2c:	d1f8      	bne.n	11c20 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   11c2e:	f3bf 8f5b 	dmb	ish
    }
   11c32:	2001      	movs	r0, #1
   11c34:	bd10      	pop	{r4, pc}
            PortClose();
   11c36:	4798      	blx	r3
    }
   11c38:	2001      	movs	r0, #1
   11c3a:	bd10      	pop	{r4, pc}
   11c3c:	4a17      	ldr	r2, [pc, #92]	; (11c9c <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   11c3e:	689b      	ldr	r3, [r3, #8]
   11c40:	4293      	cmp	r3, r2
   11c42:	d1f8      	bne.n	11c36 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11c44:	f7fe fc06 	bl	10454 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11c48:	2800      	cmp	r0, #0
   11c4a:	d1f2      	bne.n	11c32 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11c4c:	4620      	mov	r0, r4
   11c4e:	f7ff fb9b 	bl	11388 <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   11c52:	4620      	mov	r0, r4
   11c54:	f7ff fbf0 	bl	11438 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11c58:	4b0f      	ldr	r3, [pc, #60]	; (11c98 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   11c5a:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11c5e:	f3bf 8f5b 	dmb	ish
   11c62:	e853 1f00 	ldrex	r1, [r3]
   11c66:	4311      	orrs	r1, r2
   11c68:	e843 1000 	strex	r0, r1, [r3]
   11c6c:	2800      	cmp	r0, #0
   11c6e:	d1f8      	bne.n	11c62 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   11c70:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11c74:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11c78:	2b10      	cmp	r3, #16
   11c7a:	d1da      	bne.n	11c32 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11c7c:	4b08      	ldr	r3, [pc, #32]	; (11ca0 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11c7e:	4621      	mov	r1, r4
   11c80:	6818      	ldr	r0, [r3, #0]
   11c82:	f7fe fac5 	bl	10210 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11c86:	e7d4      	b.n	11c32 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   11c88:	4b05      	ldr	r3, [pc, #20]	; (11ca0 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11c8a:	6818      	ldr	r0, [r3, #0]
   11c8c:	f7fe faa0 	bl	101d0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11c90:	e7bd      	b.n	11c0e <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   11c92:	bf00      	nop
   11c94:	00011aad 	.word	0x00011aad
   11c98:	20001c04 	.word	0x20001c04
   11c9c:	00011a59 	.word	0x00011a59
   11ca0:	20001f38 	.word	0x20001f38

00011ca4 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11ca4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11ca8:	e7a2      	b.n	11bf0 <_ZN9ClearCore12SerialDriver5StateEs>
   11caa:	bf00      	nop

00011cac <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11cac:	7980      	ldrb	r0, [r0, #6]
   11cae:	4770      	bx	lr

00011cb0 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   11cb0:	f1a1 0004 	sub.w	r0, r1, #4
   11cb4:	fab0 f080 	clz	r0, r0
   11cb8:	0940      	lsrs	r0, r0, #5
   11cba:	4770      	bx	lr

00011cbc <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   11cbc:	2002      	movs	r0, #2
   11cbe:	4770      	bx	lr

00011cc0 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   11cc0:	2001      	movs	r0, #1
   11cc2:	4770      	bx	lr

00011cc4 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   11cc4:	2000      	movs	r0, #0
   11cc6:	4770      	bx	lr

00011cc8 <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   11cc8:	4770      	bx	lr
   11cca:	bf00      	nop

00011ccc <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   11ccc:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   11cce:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   11cd0:	7183      	strb	r3, [r0, #6]
   11cd2:	4770      	bx	lr

00011cd4 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   11cd4:	4b04      	ldr	r3, [pc, #16]	; (11ce8 <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   11cd6:	681a      	ldr	r2, [r3, #0]
   11cd8:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   11cdc:	6883      	ldr	r3, [r0, #8]
   11cde:	421a      	tst	r2, r3
}
   11ce0:	bf14      	ite	ne
   11ce2:	2001      	movne	r0, #1
   11ce4:	2000      	moveq	r0, #0
   11ce6:	4770      	bx	lr
   11ce8:	20001c04 	.word	0x20001c04

00011cec <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   11cec:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   11cee:	b971      	cbnz	r1, 11d0e <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11cf0:	f3bf 8f5b 	dmb	ish
   11cf4:	4a0d      	ldr	r2, [pc, #52]	; (11d2c <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11cf6:	43db      	mvns	r3, r3
   11cf8:	e852 1f00 	ldrex	r1, [r2]
   11cfc:	4019      	ands	r1, r3
   11cfe:	e842 1000 	strex	r0, r1, [r2]
   11d02:	2800      	cmp	r0, #0
   11d04:	d1f8      	bne.n	11cf8 <_ZN9ClearCore9LedDriver5StateEs+0xc>
   11d06:	f3bf 8f5b 	dmb	ish
    return true;
}
   11d0a:	2001      	movs	r0, #1
   11d0c:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11d0e:	4a07      	ldr	r2, [pc, #28]	; (11d2c <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11d10:	f3bf 8f5b 	dmb	ish
   11d14:	e852 1f00 	ldrex	r1, [r2]
   11d18:	4319      	orrs	r1, r3
   11d1a:	e842 1000 	strex	r0, r1, [r2]
   11d1e:	2800      	cmp	r0, #0
   11d20:	d1f8      	bne.n	11d14 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11d22:	f3bf 8f5b 	dmb	ish
   11d26:	2001      	movs	r0, #1
   11d28:	4770      	bx	lr
   11d2a:	bf00      	nop
   11d2c:	20001c04 	.word	0x20001c04

00011d30 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   11d30:	b538      	push	{r3, r4, r5, lr}
   11d32:	4604      	mov	r4, r0
   11d34:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   11d36:	f7f3 fac7 	bl	52c8 <_ZN9ClearCore9ConnectorC1Ev>
   11d3a:	4b02      	ldr	r3, [pc, #8]	; (11d44 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   11d3c:	60a5      	str	r5, [r4, #8]
   11d3e:	6023      	str	r3, [r4, #0]
   11d40:	4620      	mov	r0, r4
   11d42:	bd38      	pop	{r3, r4, r5, pc}
   11d44:	00023478 	.word	0x00023478

00011d48 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11d48:	b530      	push	{r4, r5, lr}
   11d4a:	b083      	sub	sp, #12
   11d4c:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11d50:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11d52:	9401      	str	r4, [sp, #4]
   11d54:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11d56:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11d58:	f7ff fb22 	bl	113a0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11d5c:	4b04      	ldr	r3, [pc, #16]	; (11d70 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11d5e:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11d60:	4620      	mov	r0, r4
   11d62:	2100      	movs	r1, #0
   11d64:	f7ff fb7a 	bl	1145c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11d68:	4620      	mov	r0, r4
   11d6a:	b003      	add	sp, #12
   11d6c:	bd30      	pop	{r4, r5, pc}
   11d6e:	bf00      	nop
   11d70:	00022da8 	.word	0x00022da8

00011d74 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11d74:	2000      	movs	r0, #0
   11d76:	4770      	bx	lr

00011d78 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d7c:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11d7e:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11d80:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11d82:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11d86:	2900      	cmp	r1, #0
   11d88:	d04f      	beq.n	11e2a <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11d8a:	4b55      	ldr	r3, [pc, #340]	; (11ee0 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11d8c:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11d90:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11d94:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11d98:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11d9a:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11d9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11da0:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11da2:	f000 8095 	beq.w	11ed0 <_usb_d_dev_in_next+0x158>
   11da6:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11daa:	f895 c013 	ldrb.w	ip, [r5, #19]
   11dae:	401a      	ands	r2, r3
   11db0:	b292      	uxth	r2, r2
   11db2:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11db6:	0163      	lsls	r3, r4, #5
   11db8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11dbc:	2602      	movs	r6, #2
   11dbe:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11dc2:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11dc4:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11dc6:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11dc8:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11dca:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11dcc:	d235      	bcs.n	11e3a <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11dce:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11dd0:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11dd4:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11dd6:	d05e      	beq.n	11e96 <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11dd8:	682b      	ldr	r3, [r5, #0]
   11dda:	68e8      	ldr	r0, [r5, #12]
   11ddc:	4576      	cmp	r6, lr
   11dde:	bf28      	it	cs
   11de0:	4676      	movcs	r6, lr
   11de2:	4419      	add	r1, r3
   11de4:	4632      	mov	r2, r6
   11de6:	f00c fa03 	bl	1e1f0 <memcpy>
	bank->ADDR.reg          = addr;
   11dea:	4b3d      	ldr	r3, [pc, #244]	; (11ee0 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11dec:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11dee:	0162      	lsls	r2, r4, #5
   11df0:	1899      	adds	r1, r3, r2
   11df2:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11df4:	4413      	add	r3, r2
   11df6:	6959      	ldr	r1, [r3, #20]
   11df8:	f366 010d 	bfi	r1, r6, #0, #14
   11dfc:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11dfe:	6959      	ldr	r1, [r3, #20]
   11e00:	f36f 319b 	bfc	r1, #14, #14
   11e04:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11e06:	b947      	cbnz	r7, 11e1a <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11e08:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11e0c:	f1b8 0f01 	cmp.w	r8, #1
   11e10:	bf14      	ite	ne
   11e12:	224a      	movne	r2, #74	; 0x4a
   11e14:	224e      	moveq	r2, #78	; 0x4e
   11e16:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11e1a:	0164      	lsls	r4, r4, #5
   11e1c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11e20:	2380      	movs	r3, #128	; 0x80
   11e22:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11e2a:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11e2e:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11e32:	f00c 0807 	and.w	r8, ip, #7
   11e36:	460a      	mov	r2, r1
   11e38:	e7c3      	b.n	11dc2 <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11e3a:	f01c 0f10 	tst.w	ip, #16
   11e3e:	d11a      	bne.n	11e76 <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11e40:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11e42:	f1b8 0f01 	cmp.w	r8, #1
   11e46:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11e4a:	bf0c      	ite	eq
   11e4c:	234b      	moveq	r3, #75	; 0x4b
   11e4e:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11e50:	4596      	cmp	lr, r2
   11e52:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11e56:	d02c      	beq.n	11eb2 <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11e58:	28ff      	cmp	r0, #255	; 0xff
   11e5a:	d028      	beq.n	11eae <_usb_d_dev_in_next+0x136>
   11e5c:	7ceb      	ldrb	r3, [r5, #19]
   11e5e:	065a      	lsls	r2, r3, #25
   11e60:	d525      	bpl.n	11eae <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11e62:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e66:	491f      	ldr	r1, [pc, #124]	; (11ee4 <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11e68:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e6a:	68aa      	ldr	r2, [r5, #8]
   11e6c:	690b      	ldr	r3, [r1, #16]
}
   11e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e72:	2100      	movs	r1, #0
   11e74:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11e76:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11e78:	4b1b      	ldr	r3, [pc, #108]	; (11ee8 <_usb_d_dev_in_next+0x170>)
   11e7a:	0162      	lsls	r2, r4, #5
   11e7c:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11e7e:	f36f 1104 	bfc	r1, #4, #1
   11e82:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11e84:	6859      	ldr	r1, [r3, #4]
   11e86:	f36f 010d 	bfc	r1, #0, #14
   11e8a:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11e8c:	6859      	ldr	r1, [r3, #4]
   11e8e:	f36f 319b 	bfc	r1, #14, #14
   11e92:	6059      	str	r1, [r3, #4]
   11e94:	e7b7      	b.n	11e06 <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11e96:	4b12      	ldr	r3, [pc, #72]	; (11ee0 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11e98:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11e9a:	0162      	lsls	r2, r4, #5
   11e9c:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11e9e:	4401      	add	r1, r0
   11ea0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11ea4:	bf28      	it	cs
   11ea6:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11eaa:	6129      	str	r1, [r5, #16]
   11eac:	e7a2      	b.n	11df4 <_usb_d_dev_in_next+0x7c>
   11eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11eb2:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11eb4:	4a0b      	ldr	r2, [pc, #44]	; (11ee4 <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11eb6:	f36f 1386 	bfc	r3, #6, #1
   11eba:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11ebc:	68d3      	ldr	r3, [r2, #12]
   11ebe:	4798      	blx	r3
   11ec0:	2800      	cmp	r0, #0
   11ec2:	d1f4      	bne.n	11eae <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11ec4:	7ceb      	ldrb	r3, [r5, #19]
   11ec6:	7ca8      	ldrb	r0, [r5, #18]
   11ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ecc:	74eb      	strb	r3, [r5, #19]
   11ece:	e7c3      	b.n	11e58 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ed0:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ed4:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ed8:	f00c 0807 	and.w	r8, ip, #7
   11edc:	e76b      	b.n	11db6 <_usb_d_dev_in_next+0x3e>
   11ede:	bf00      	nop
   11ee0:	20002234 	.word	0x20002234
   11ee4:	20002004 	.word	0x20002004
   11ee8:	20002244 	.word	0x20002244

00011eec <_usb_d_dev_out_next>:
{
   11eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11ef0:	7c85      	ldrb	r5, [r0, #18]
{
   11ef2:	b083      	sub	sp, #12
   11ef4:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11ef6:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11ef8:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11efc:	2900      	cmp	r1, #0
   11efe:	f000 8085 	beq.w	1200c <_usb_d_dev_out_next+0x120>
   11f02:	4b76      	ldr	r3, [pc, #472]	; (120dc <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f04:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f06:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11f0a:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f0c:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f10:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11f12:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f14:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11f16:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11f1a:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11f1e:	f000 80d7 	beq.w	120d0 <_usb_d_dev_out_next+0x1e4>
   11f22:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11f24:	7cc2      	ldrb	r2, [r0, #19]
   11f26:	b2b6      	uxth	r6, r6
   11f28:	ea09 0306 	and.w	r3, r9, r6
   11f2c:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11f30:	0169      	lsls	r1, r5, #5
   11f32:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11f36:	2001      	movs	r0, #1
   11f38:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11f3c:	0691      	lsls	r1, r2, #26
   11f3e:	d512      	bpl.n	11f66 <_usb_d_dev_out_next+0x7a>
   11f40:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11f44:	f1be 0f00 	cmp.w	lr, #0
   11f48:	d048      	beq.n	11fdc <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11f4a:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11f4c:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11f4e:	ebae 0200 	sub.w	r2, lr, r0
   11f52:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11f54:	429a      	cmp	r2, r3
   11f56:	bf28      	it	cs
   11f58:	461a      	movcs	r2, r3
   11f5a:	6823      	ldr	r3, [r4, #0]
   11f5c:	68e1      	ldr	r1, [r4, #12]
   11f5e:	4418      	add	r0, r3
   11f60:	f00c f946 	bl	1e1f0 <memcpy>
   11f64:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11f66:	6862      	ldr	r2, [r4, #4]
   11f68:	2a00      	cmp	r2, #0
   11f6a:	d036      	beq.n	11fda <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11f6c:	2f00      	cmp	r7, #0
   11f6e:	d15b      	bne.n	12028 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11f70:	68a3      	ldr	r3, [r4, #8]
   11f72:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11f74:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11f76:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11f78:	d960      	bls.n	1203c <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11f7a:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11f7c:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11f7e:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11f80:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11f82:	f140 808b 	bpl.w	1209c <_usb_d_dev_out_next+0x1b0>
   11f86:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11f88:	4954      	ldr	r1, [pc, #336]	; (120dc <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11f8a:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11f8c:	f841 3008 	str.w	r3, [r1, r8]
   11f90:	42b2      	cmp	r2, r6
   11f92:	bf28      	it	cs
   11f94:	4632      	movcs	r2, r6
   11f96:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11f9a:	eb01 0308 	add.w	r3, r1, r8
   11f9e:	6858      	ldr	r0, [r3, #4]
   11fa0:	f362 309b 	bfi	r0, r2, #14, #14
   11fa4:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11fa6:	685a      	ldr	r2, [r3, #4]
   11fa8:	f36f 020d 	bfc	r2, #0, #14
   11fac:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11fae:	b95f      	cbnz	r7, 11fc8 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11fb0:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11fb4:	bf08      	it	eq
   11fb6:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11fb8:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11fbc:	bf0a      	itet	eq
   11fbe:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11fc0:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11fc2:	768f      	strbeq	r7, [r1, #26]
   11fc4:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11fc8:	016d      	lsls	r5, r5, #5
   11fca:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11fce:	2340      	movs	r3, #64	; 0x40
   11fd0:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11fd4:	b003      	add	sp, #12
   11fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fda:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11fdc:	06d6      	lsls	r6, r2, #27
   11fde:	d54b      	bpl.n	12078 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11fe0:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11fe2:	493e      	ldr	r1, [pc, #248]	; (120dc <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11fe4:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11fe6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11fea:	f043 0320 	orr.w	r3, r3, #32
   11fee:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11ff0:	f841 2008 	str.w	r2, [r1, r8]
   11ff4:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11ff8:	8a20      	ldrh	r0, [r4, #16]
   11ffa:	685a      	ldr	r2, [r3, #4]
   11ffc:	f360 329b 	bfi	r2, r0, #14, #14
   12000:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12002:	685a      	ldr	r2, [r3, #4]
   12004:	f36f 020d 	bfc	r2, #0, #14
   12008:	605a      	str	r2, [r3, #4]
   1200a:	e7d0      	b.n	11fae <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1200c:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1200e:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12010:	f240 33ff 	movw	r3, #1023	; 0x3ff
   12014:	429e      	cmp	r6, r3
   12016:	d137      	bne.n	12088 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12018:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1201a:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   1201e:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12020:	46b9      	mov	r9, r7
   12022:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12026:	e789      	b.n	11f3c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   12028:	8a21      	ldrh	r1, [r4, #16]
   1202a:	4299      	cmp	r1, r3
   1202c:	d9a0      	bls.n	11f70 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   1202e:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12030:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   12032:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   12036:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   12038:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   1203a:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   1203c:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12040:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   12044:	bf0c      	ite	eq
   12046:	232d      	moveq	r3, #45	; 0x2d
   12048:	2325      	movne	r3, #37	; 0x25
   1204a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   1204e:	b915      	cbnz	r5, 12056 <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   12050:	4b22      	ldr	r3, [pc, #136]	; (120dc <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12052:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   12054:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12056:	7ca0      	ldrb	r0, [r4, #18]
   12058:	28ff      	cmp	r0, #255	; 0xff
   1205a:	d0bb      	beq.n	11fd4 <_usb_d_dev_out_next+0xe8>
   1205c:	7ce3      	ldrb	r3, [r4, #19]
   1205e:	065a      	lsls	r2, r3, #25
   12060:	d5b8      	bpl.n	11fd4 <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   12062:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12066:	491e      	ldr	r1, [pc, #120]	; (120e0 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   12068:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1206a:	690b      	ldr	r3, [r1, #16]
   1206c:	68a2      	ldr	r2, [r4, #8]
   1206e:	2100      	movs	r1, #0
}
   12070:	b003      	add	sp, #12
   12072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12076:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   12078:	b117      	cbz	r7, 12080 <_usb_d_dev_out_next+0x194>
   1207a:	8a22      	ldrh	r2, [r4, #16]
   1207c:	429a      	cmp	r2, r3
   1207e:	d8d6      	bhi.n	1202e <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   12080:	68a3      	ldr	r3, [r4, #8]
   12082:	4453      	add	r3, sl
   12084:	60a3      	str	r3, [r4, #8]
   12086:	e7d9      	b.n	1203c <_usb_d_dev_out_next+0x150>
   12088:	3e01      	subs	r6, #1
   1208a:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1208c:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12090:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12092:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12094:	4689      	mov	r9, r1
   12096:	ea4f 1845 	mov.w	r8, r5, lsl #5
   1209a:	e74f      	b.n	11f3c <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   1209c:	8a20      	ldrh	r0, [r4, #16]
   1209e:	4282      	cmp	r2, r0
   120a0:	d905      	bls.n	120ae <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   120a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   120a6:	d90e      	bls.n	120c6 <_usb_d_dev_out_next+0x1da>
   120a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   120ac:	e005      	b.n	120ba <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   120ae:	bf3c      	itt	cc
   120b0:	f041 0120 	orrcc.w	r1, r1, #32
   120b4:	74e1      	strbcc	r1, [r4, #19]
   120b6:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   120ba:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   120bc:	4907      	ldr	r1, [pc, #28]	; (120dc <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   120be:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   120c0:	f841 3008 	str.w	r3, [r1, r8]
   120c4:	e769      	b.n	11f9a <_usb_d_dev_out_next+0xae>
   120c6:	ea22 0206 	bic.w	r2, r2, r6
   120ca:	f3c2 020d 	ubfx	r2, r2, #0, #14
   120ce:	e7f4      	b.n	120ba <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   120d0:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   120d2:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   120d6:	f002 0b07 	and.w	fp, r2, #7
   120da:	e729      	b.n	11f30 <_usb_d_dev_out_next+0x44>
   120dc:	20002234 	.word	0x20002234
   120e0:	20002004 	.word	0x20002004

000120e4 <_usb_d_dev_handler>:
{
   120e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   120e8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   120ec:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   120ee:	8c16      	ldrh	r6, [r2, #32]
   120f0:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   120f2:	2e00      	cmp	r6, #0
   120f4:	f000 812c 	beq.w	12350 <_usb_d_dev_handler+0x26c>
   120f8:	4dc4      	ldr	r5, [pc, #784]	; (1240c <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   120fa:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   120fc:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   120fe:	7ca8      	ldrb	r0, [r5, #18]
   12100:	28ff      	cmp	r0, #255	; 0xff
   12102:	d030      	beq.n	12166 <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12104:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   12108:	fa07 f203 	lsl.w	r2, r7, r3
   1210c:	4232      	tst	r2, r6
   1210e:	d02a      	beq.n	12166 <_usb_d_dev_handler+0x82>
   12110:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   12114:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12118:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   1211a:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   1211e:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   12122:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12124:	46c1      	mov	r9, r8
	if (flags) {
   12126:	d01e      	beq.n	12166 <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   12128:	49b9      	ldr	r1, [pc, #740]	; (12410 <_usb_d_dev_handler+0x32c>)
   1212a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1212e:	eb0a 0c04 	add.w	ip, sl, r4
   12132:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   12136:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   1213a:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   1213e:	2901      	cmp	r1, #1
   12140:	f000 80f4 	beq.w	1232c <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   12144:	f01b 0f80 	tst.w	fp, #128	; 0x80
   12148:	d115      	bne.n	12176 <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   1214a:	f013 0120 	ands.w	r1, r3, #32
   1214e:	d15a      	bne.n	12206 <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   12150:	f013 0f04 	tst.w	r3, #4
   12154:	f040 8098 	bne.w	12288 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   12158:	07d9      	lsls	r1, r3, #31
   1215a:	f100 80e2 	bmi.w	12322 <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   1215e:	f00b 0107 	and.w	r1, fp, #7
   12162:	2901      	cmp	r1, #1
   12164:	d058      	beq.n	12218 <_usb_d_dev_handler+0x134>
   12166:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   12168:	2c1b      	cmp	r4, #27
   1216a:	f105 0514 	add.w	r5, r5, #20
   1216e:	d1c6      	bne.n	120fe <_usb_d_dev_handler+0x1a>
}
   12170:	b001      	add	sp, #4
   12172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12176:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   1217a:	f040 8143 	bne.w	12404 <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   1217e:	f013 0f08 	tst.w	r3, #8
   12182:	f040 8189 	bne.w	12498 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   12186:	0799      	lsls	r1, r3, #30
   12188:	f100 8137 	bmi.w	123fa <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   1218c:	f00b 0107 	and.w	r1, fp, #7
   12190:	2901      	cmp	r1, #1
   12192:	d1e8      	bne.n	12166 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   12194:	0759      	lsls	r1, r3, #29
   12196:	f100 8241 	bmi.w	1261c <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1219a:	06db      	lsls	r3, r3, #27
   1219c:	d5e3      	bpl.n	12166 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1219e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   121a2:	d011      	beq.n	121c8 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   121a4:	499a      	ldr	r1, [pc, #616]	; (12410 <_usb_d_dev_handler+0x32c>)
   121a6:	eb0a 0304 	add.w	r3, sl, r4
   121aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   121ae:	f04f 0e80 	mov.w	lr, #128	; 0x80
   121b2:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   121b6:	f36f 1186 	bfc	r1, #6, #1
   121ba:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   121be:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   121c0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   121c4:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   121c8:	4b91      	ldr	r3, [pc, #580]	; (12410 <_usb_d_dev_handler+0x32c>)
   121ca:	eb0a 0104 	add.w	r1, sl, r4
   121ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   121d2:	4b90      	ldr	r3, [pc, #576]	; (12414 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   121d4:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   121d8:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   121dc:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121e0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   121e4:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   121e8:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121ec:	216f      	movs	r1, #111	; 0x6f
   121ee:	f88e c00a 	strb.w	ip, [lr, #10]
   121f2:	f88e c01a 	strb.w	ip, [lr, #26]
   121f6:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121fa:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   121fe:	4b84      	ldr	r3, [pc, #528]	; (12410 <_usb_d_dev_handler+0x32c>)
   12200:	689b      	ldr	r3, [r3, #8]
   12202:	4798      	blx	r3
   12204:	e7af      	b.n	12166 <_usb_d_dev_handler+0x82>
   12206:	68aa      	ldr	r2, [r5, #8]
   12208:	2320      	movs	r3, #32
   1220a:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   1220e:	4b80      	ldr	r3, [pc, #512]	; (12410 <_usb_d_dev_handler+0x32c>)
   12210:	2101      	movs	r1, #1
   12212:	691b      	ldr	r3, [r3, #16]
   12214:	4798      	blx	r3
   12216:	e7a6      	b.n	12166 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12218:	0719      	lsls	r1, r3, #28
   1221a:	f100 80fd 	bmi.w	12418 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1221e:	06db      	lsls	r3, r3, #27
   12220:	d5a1      	bpl.n	12166 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12222:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12226:	d011      	beq.n	1224c <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12228:	4979      	ldr	r1, [pc, #484]	; (12410 <_usb_d_dev_handler+0x32c>)
   1222a:	eb0a 0304 	add.w	r3, sl, r4
   1222e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12232:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12236:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1223a:	f36f 1186 	bfc	r1, #6, #1
   1223e:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12242:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12244:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12248:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   1224c:	4b70      	ldr	r3, [pc, #448]	; (12410 <_usb_d_dev_handler+0x32c>)
   1224e:	eb0a 0104 	add.w	r1, sl, r4
   12252:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   12256:	4b6f      	ldr	r3, [pc, #444]	; (12414 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   12258:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   1225c:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12260:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12264:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12268:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1226c:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   1226e:	2100      	movs	r1, #0
   12270:	f88e 100a 	strb.w	r1, [lr, #10]
   12274:	f88e 101a 	strb.w	r1, [lr, #26]
   12278:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1227c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12280:	4b63      	ldr	r3, [pc, #396]	; (12410 <_usb_d_dev_handler+0x32c>)
   12282:	689b      	ldr	r3, [r3, #8]
   12284:	4798      	blx	r3
   12286:	e76e      	b.n	12166 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12288:	4b62      	ldr	r3, [pc, #392]	; (12414 <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1228a:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   1228e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12290:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12294:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12298:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1229c:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1229e:	d07c      	beq.n	1239a <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   122a0:	f013 0302 	ands.w	r3, r3, #2
   122a4:	d032      	beq.n	1230c <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   122a6:	f89e 100a 	ldrb.w	r1, [lr, #10]
   122aa:	f36f 0141 	bfc	r1, #1, #1
   122ae:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122b2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   122b6:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122ba:	2204      	movs	r2, #4
   122bc:	2901      	cmp	r1, #1
   122be:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122c2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   122c6:	f47f af4e 	bne.w	12166 <_usb_d_dev_handler+0x82>
   122ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
   122ce:	f43f af4a 	beq.w	12166 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   122d2:	494f      	ldr	r1, [pc, #316]	; (12410 <_usb_d_dev_handler+0x32c>)
   122d4:	eb0a 0204 	add.w	r2, sl, r4
   122d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   122dc:	3220      	adds	r2, #32
   122de:	79d1      	ldrb	r1, [r2, #7]
   122e0:	09c9      	lsrs	r1, r1, #7
   122e2:	f43f af40 	beq.w	12166 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122e6:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   122e8:	f04f 0e80 	mov.w	lr, #128	; 0x80
   122ec:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122f0:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122f4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   122f8:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122fa:	4b45      	ldr	r3, [pc, #276]	; (12410 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   122fc:	f36f 1186 	bfc	r1, #6, #1
   12300:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12302:	691b      	ldr	r3, [r3, #16]
   12304:	68aa      	ldr	r2, [r5, #8]
   12306:	2100      	movs	r1, #0
   12308:	4798      	blx	r3
   1230a:	e72c      	b.n	12166 <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   1230c:	4941      	ldr	r1, [pc, #260]	; (12414 <_usb_d_dev_handler+0x330>)
   1230e:	1888      	adds	r0, r1, r2
   12310:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12314:	2104      	movs	r1, #4
   12316:	7283      	strb	r3, [r0, #10]
   12318:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1231c:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12320:	e721      	b.n	12166 <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   12322:	2101      	movs	r1, #1
   12324:	4628      	mov	r0, r5
   12326:	f7ff fde1 	bl	11eec <_usb_d_dev_out_next>
   1232a:	e71c      	b.n	12166 <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   1232c:	f013 0f10 	tst.w	r3, #16
   12330:	f040 80e0 	bne.w	124f4 <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   12334:	065a      	lsls	r2, r3, #25
   12336:	f100 80e7 	bmi.w	12508 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   1233a:	069b      	lsls	r3, r3, #26
   1233c:	f57f af13 	bpl.w	12166 <_usb_d_dev_handler+0x82>
   12340:	2320      	movs	r3, #32
   12342:	68aa      	ldr	r2, [r5, #8]
   12344:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12348:	4b31      	ldr	r3, [pc, #196]	; (12410 <_usb_d_dev_handler+0x32c>)
   1234a:	691b      	ldr	r3, [r3, #16]
   1234c:	4798      	blx	r3
   1234e:	e70a      	b.n	12166 <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   12350:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   12352:	8b13      	ldrh	r3, [r2, #24]
   12354:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   12356:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   12358:	f013 0004 	ands.w	r0, r3, #4
   1235c:	f040 80dc 	bne.w	12518 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12360:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   12364:	f040 80e0 	bne.w	12528 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12368:	0618      	lsls	r0, r3, #24
   1236a:	f100 8140 	bmi.w	125ee <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   1236e:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   12372:	f040 8191 	bne.w	12698 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   12376:	f013 0108 	ands.w	r1, r3, #8
   1237a:	f040 819e 	bne.w	126ba <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   1237e:	07db      	lsls	r3, r3, #31
   12380:	f57f aeba 	bpl.w	120f8 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12384:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12388:	4821      	ldr	r0, [pc, #132]	; (12410 <_usb_d_dev_handler+0x32c>)
   1238a:	8393      	strh	r3, [r2, #28]
   1238c:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1238e:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12390:	2570      	movs	r5, #112	; 0x70
   12392:	2004      	movs	r0, #4
   12394:	8315      	strh	r5, [r2, #24]
   12396:	4623      	mov	r3, r4
   12398:	e0de      	b.n	12558 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1239a:	f013 0f01 	tst.w	r3, #1
   1239e:	f43f af7f 	beq.w	122a0 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123a2:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123aa:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123ae:	f04f 0104 	mov.w	r1, #4
   123b2:	f88e 300a 	strb.w	r3, [lr, #10]
   123b6:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123ba:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123be:	f43f aed2 	beq.w	12166 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   123c2:	4b13      	ldr	r3, [pc, #76]	; (12410 <_usb_d_dev_handler+0x32c>)
   123c4:	eb0a 0104 	add.w	r1, sl, r4
   123c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   123cc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123d0:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   123d4:	2240      	movs	r2, #64	; 0x40
   123d6:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123da:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123de:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   123e2:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   123e6:	4b0a      	ldr	r3, [pc, #40]	; (12410 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   123e8:	f36f 1286 	bfc	r2, #6, #1
   123ec:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   123f0:	691b      	ldr	r3, [r3, #16]
   123f2:	68aa      	ldr	r2, [r5, #8]
   123f4:	2104      	movs	r1, #4
   123f6:	4798      	blx	r3
   123f8:	e6b5      	b.n	12166 <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   123fa:	2101      	movs	r1, #1
   123fc:	4628      	mov	r0, r5
   123fe:	f7ff fcbb 	bl	11d78 <_usb_d_dev_in_next>
   12402:	e6b0      	b.n	12166 <_usb_d_dev_handler+0x82>
   12404:	68aa      	ldr	r2, [r5, #8]
   12406:	2340      	movs	r3, #64	; 0x40
   12408:	e6ff      	b.n	1220a <_usb_d_dev_handler+0x126>
   1240a:	bf00      	nop
   1240c:	20002018 	.word	0x20002018
   12410:	20002004 	.word	0x20002004
   12414:	20002234 	.word	0x20002234
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12418:	4bc3      	ldr	r3, [pc, #780]	; (12728 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1241a:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1241e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12420:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   12424:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12428:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1242a:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1242c:	f000 8098 	beq.w	12560 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12430:	f013 0302 	ands.w	r3, r3, #2
   12434:	d053      	beq.n	124de <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12436:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1243a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1243e:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12442:	2208      	movs	r2, #8
   12444:	f88e 101a 	strb.w	r1, [lr, #26]
   12448:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1244c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12450:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12454:	f43f ae87 	beq.w	12166 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12458:	4ab4      	ldr	r2, [pc, #720]	; (1272c <_usb_d_dev_handler+0x648>)
   1245a:	eb0a 0e04 	add.w	lr, sl, r4
   1245e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   12462:	f10e 0e20 	add.w	lr, lr, #32
   12466:	f89e 1007 	ldrb.w	r1, [lr, #7]
   1246a:	09c9      	lsrs	r1, r1, #7
   1246c:	f47f ae7b 	bne.w	12166 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12470:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12472:	f04f 0c40 	mov.w	ip, #64	; 0x40
   12476:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1247a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1247e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12482:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12486:	4ba9      	ldr	r3, [pc, #676]	; (1272c <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12488:	f361 1286 	bfi	r2, r1, #6, #1
   1248c:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12490:	691b      	ldr	r3, [r3, #16]
   12492:	68aa      	ldr	r2, [r5, #8]
   12494:	4798      	blx	r3
   12496:	e666      	b.n	12166 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12498:	4ba3      	ldr	r3, [pc, #652]	; (12728 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1249a:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   1249e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124a0:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   124a4:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124a8:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   124ac:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124ae:	d07a      	beq.n	125a6 <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   124b0:	f013 0302 	ands.w	r3, r3, #2
   124b4:	d013      	beq.n	124de <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124b6:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124ba:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124be:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124c2:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124c6:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124ca:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124cc:	f88e 101a 	strb.w	r1, [lr, #26]
   124d0:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124d4:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   124d8:	f47f ae45 	bne.w	12166 <_usb_d_dev_handler+0x82>
   124dc:	e7b8      	b.n	12450 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   124de:	4992      	ldr	r1, [pc, #584]	; (12728 <_usb_d_dev_handler+0x644>)
   124e0:	1888      	adds	r0, r1, r2
   124e2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124e6:	2108      	movs	r1, #8
   124e8:	7683      	strb	r3, [r0, #26]
   124ea:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124ee:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   124f2:	e638      	b.n	12166 <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   124f4:	f00b 0307 	and.w	r3, fp, #7
   124f8:	2b01      	cmp	r3, #1
   124fa:	d07e      	beq.n	125fa <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124fc:	2310      	movs	r3, #16
   124fe:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   12502:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   12506:	e62e      	b.n	12166 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12508:	2340      	movs	r3, #64	; 0x40
   1250a:	68aa      	ldr	r2, [r5, #8]
   1250c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12510:	4b86      	ldr	r3, [pc, #536]	; (1272c <_usb_d_dev_handler+0x648>)
   12512:	691b      	ldr	r3, [r3, #16]
   12514:	4798      	blx	r3
   12516:	e626      	b.n	12166 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12518:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   1251a:	4b84      	ldr	r3, [pc, #528]	; (1272c <_usb_d_dev_handler+0x648>)
   1251c:	8391      	strh	r1, [r2, #28]
   1251e:	681b      	ldr	r3, [r3, #0]
}
   12520:	b001      	add	sp, #4
   12522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   12526:	4718      	bx	r3
   12528:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1252c:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   1252e:	4b7e      	ldr	r3, [pc, #504]	; (12728 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12530:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12532:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12534:	8314      	strh	r4, [r2, #24]
   12536:	891a      	ldrh	r2, [r3, #8]
   12538:	f002 020f 	and.w	r2, r2, #15
   1253c:	2a03      	cmp	r2, #3
   1253e:	f000 8128 	beq.w	12792 <_usb_d_dev_handler+0x6ae>
   12542:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   12544:	f002 020f 	and.w	r2, r2, #15
   12548:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   1254a:	bf18      	it	ne
   1254c:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   1254e:	f000 811f 	beq.w	12790 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   12552:	4b76      	ldr	r3, [pc, #472]	; (1272c <_usb_d_dev_handler+0x648>)
   12554:	685b      	ldr	r3, [r3, #4]
   12556:	2003      	movs	r0, #3
}
   12558:	b001      	add	sp, #4
   1255a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   1255e:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12560:	07d9      	lsls	r1, r3, #31
   12562:	f57f af65 	bpl.w	12430 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12566:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1256a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1256e:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12572:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12574:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12578:	f88e 101a 	strb.w	r1, [lr, #26]
   1257c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12580:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12584:	f43f adef 	beq.w	12166 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12588:	4a68      	ldr	r2, [pc, #416]	; (1272c <_usb_d_dev_handler+0x648>)
   1258a:	eb0a 0104 	add.w	r1, sl, r4
   1258e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12592:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12596:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12598:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1259c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125a0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   125a4:	e71d      	b.n	123e2 <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   125a6:	f013 0f01 	tst.w	r3, #1
   125aa:	d081      	beq.n	124b0 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   125ac:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   125b4:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125b8:	f04f 0108 	mov.w	r1, #8
   125bc:	f88e 301a 	strb.w	r3, [lr, #26]
   125c0:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125c4:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125c8:	f43f adcd 	beq.w	12166 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   125cc:	4b57      	ldr	r3, [pc, #348]	; (1272c <_usb_d_dev_handler+0x648>)
   125ce:	eb0a 0104 	add.w	r1, sl, r4
   125d2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   125d6:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125da:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   125de:	2280      	movs	r2, #128	; 0x80
   125e0:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   125e4:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   125e8:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   125ec:	e6f9      	b.n	123e2 <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   125ee:	4b4f      	ldr	r3, [pc, #316]	; (1272c <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125f0:	2080      	movs	r0, #128	; 0x80
   125f2:	685b      	ldr	r3, [r3, #4]
   125f4:	8390      	strh	r0, [r2, #28]
   125f6:	2005      	movs	r0, #5
   125f8:	e7ae      	b.n	12558 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   125fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
   125fe:	f43f ade3 	beq.w	121c8 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   12602:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   12606:	f36f 1386 	bfc	r3, #6, #1
   1260a:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1260e:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12610:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12612:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12616:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   1261a:	e5d5      	b.n	121c8 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   1261c:	4b42      	ldr	r3, [pc, #264]	; (12728 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1261e:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12622:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12624:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12628:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1262c:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1262e:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12630:	f000 8080 	beq.w	12734 <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   12634:	f013 0302 	ands.w	r3, r3, #2
   12638:	f43f ae68 	beq.w	1230c <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1263c:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12640:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12644:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12648:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1264a:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1264e:	f88e 100a 	strb.w	r1, [lr, #10]
   12652:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12656:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1265a:	f43f ad84 	beq.w	12166 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1265e:	4a33      	ldr	r2, [pc, #204]	; (1272c <_usb_d_dev_handler+0x648>)
   12660:	eb0a 0104 	add.w	r1, sl, r4
   12664:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12668:	3120      	adds	r1, #32
   1266a:	79ca      	ldrb	r2, [r1, #7]
   1266c:	09d2      	lsrs	r2, r2, #7
   1266e:	f43f ad7a 	beq.w	12166 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12672:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12674:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12678:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1267c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12680:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12684:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12686:	4b29      	ldr	r3, [pc, #164]	; (1272c <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12688:	f36f 1286 	bfc	r2, #6, #1
   1268c:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1268e:	691b      	ldr	r3, [r3, #16]
   12690:	68aa      	ldr	r2, [r5, #8]
   12692:	2100      	movs	r1, #0
   12694:	4798      	blx	r3
   12696:	e566      	b.n	12166 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12698:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1269a:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   1269e:	4924      	ldr	r1, [pc, #144]	; (12730 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126a0:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   126a2:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126a4:	8310      	strh	r0, [r2, #24]
   126a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   126a8:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   126ac:	2b03      	cmp	r3, #3
   126ae:	d1fa      	bne.n	126a6 <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   126b0:	4b1e      	ldr	r3, [pc, #120]	; (1272c <_usb_d_dev_handler+0x648>)
   126b2:	2100      	movs	r1, #0
   126b4:	685b      	ldr	r3, [r3, #4]
   126b6:	2002      	movs	r0, #2
   126b8:	e74e      	b.n	12558 <_usb_d_dev_handler+0x474>
   126ba:	4e1c      	ldr	r6, [pc, #112]	; (1272c <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   126bc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126c0:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   126c2:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126c4:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   126c8:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   126ca:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   126cc:	8291      	strh	r1, [r2, #20]
   126ce:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126d0:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   126d2:	f04f 08ff 	mov.w	r8, #255	; 0xff
   126d6:	e007      	b.n	126e8 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   126d8:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   126da:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   126de:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   126e2:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   126e6:	d016      	beq.n	12716 <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   126e8:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   126ec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   126f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   126f4:	28ff      	cmp	r0, #255	; 0xff
   126f6:	f103 0320 	add.w	r3, r3, #32
   126fa:	f104 0401 	add.w	r4, r4, #1
   126fe:	d0eb      	beq.n	126d8 <_usb_d_dev_handler+0x5f4>
   12700:	79da      	ldrb	r2, [r3, #7]
   12702:	0651      	lsls	r1, r2, #25
   12704:	d5e8      	bpl.n	126d8 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   12706:	f36f 1286 	bfc	r2, #6, #1
   1270a:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1270c:	69ea      	ldr	r2, [r5, #28]
   1270e:	6933      	ldr	r3, [r6, #16]
   12710:	2103      	movs	r1, #3
   12712:	4798      	blx	r3
   12714:	e7e0      	b.n	126d8 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12716:	2100      	movs	r1, #0
   12718:	2260      	movs	r2, #96	; 0x60
   1271a:	4803      	ldr	r0, [pc, #12]	; (12728 <_usb_d_dev_handler+0x644>)
   1271c:	f00b fe66 	bl	1e3ec <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12720:	6873      	ldr	r3, [r6, #4]
   12722:	2100      	movs	r1, #0
   12724:	2001      	movs	r0, #1
   12726:	e717      	b.n	12558 <_usb_d_dev_handler+0x474>
   12728:	20002234 	.word	0x20002234
   1272c:	20002004 	.word	0x20002004
   12730:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12734:	07d9      	lsls	r1, r3, #31
   12736:	f57f af7d 	bpl.w	12634 <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1273a:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1273e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12742:	460a      	mov	r2, r1
   12744:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12748:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1274a:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1274e:	f88e 200a 	strb.w	r2, [lr, #10]
   12752:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12756:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1275a:	f43f ad04 	beq.w	12166 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1275e:	4a11      	ldr	r2, [pc, #68]	; (127a4 <_usb_d_dev_handler+0x6c0>)
   12760:	eb0a 0e04 	add.w	lr, sl, r4
   12764:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12768:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1276c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1276e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12772:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12776:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1277a:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1277e:	4b09      	ldr	r3, [pc, #36]	; (127a4 <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   12780:	f36f 1286 	bfc	r2, #6, #1
   12784:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12788:	691b      	ldr	r3, [r3, #16]
   1278a:	68aa      	ldr	r2, [r5, #8]
   1278c:	4798      	blx	r3
   1278e:	e4ea      	b.n	12166 <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   12790:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12792:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   12796:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12798:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   1279a:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   1279c:	f3c1 110a 	ubfx	r1, r1, #4, #11
   127a0:	e6d7      	b.n	12552 <_usb_d_dev_handler+0x46e>
   127a2:	bf00      	nop
   127a4:	20002004 	.word	0x20002004

000127a8 <_usb_d_dev_init>:
{
   127a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   127ac:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   127b0:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   127b2:	07db      	lsls	r3, r3, #31
   127b4:	d551      	bpl.n	1285a <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   127b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   127ba:	789c      	ldrb	r4, [r3, #2]
   127bc:	f014 0401 	ands.w	r4, r4, #1
   127c0:	d1fb      	bne.n	127ba <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   127c2:	4b45      	ldr	r3, [pc, #276]	; (128d8 <_usb_d_dev_init+0x130>)
   127c4:	4a45      	ldr	r2, [pc, #276]	; (128dc <_usb_d_dev_init+0x134>)
   127c6:	601a      	str	r2, [r3, #0]
   127c8:	461e      	mov	r6, r3
   127ca:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   127cc:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   127ce:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   127d0:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   127d2:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   127d4:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   127d6:	27ff      	movs	r7, #255	; 0xff
   127d8:	e007      	b.n	127ea <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   127da:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   127dc:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   127e0:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   127e4:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   127e8:	d01d      	beq.n	12826 <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   127ea:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   127ee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   127f2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   127f6:	28ff      	cmp	r0, #255	; 0xff
   127f8:	f103 0320 	add.w	r3, r3, #32
   127fc:	f104 0401 	add.w	r4, r4, #1
   12800:	d0eb      	beq.n	127da <_usb_d_dev_init+0x32>
   12802:	79da      	ldrb	r2, [r3, #7]
   12804:	0651      	lsls	r1, r2, #25
   12806:	d5e8      	bpl.n	127da <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12808:	f36f 1286 	bfc	r2, #6, #1
   1280c:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1280e:	69ea      	ldr	r2, [r5, #28]
   12810:	6933      	ldr	r3, [r6, #16]
   12812:	2103      	movs	r1, #3
   12814:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   12816:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12818:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   1281c:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12820:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12824:	d1e1      	bne.n	127ea <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12826:	2260      	movs	r2, #96	; 0x60
   12828:	2100      	movs	r1, #0
   1282a:	482d      	ldr	r0, [pc, #180]	; (128e0 <_usb_d_dev_init+0x138>)
   1282c:	f00b fdde 	bl	1e3ec <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   12830:	4b2c      	ldr	r3, [pc, #176]	; (128e4 <_usb_d_dev_init+0x13c>)
   12832:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   12834:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12838:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   1283c:	f013 031f 	ands.w	r3, r3, #31
   12840:	d027      	beq.n	12892 <_usb_d_dev_init+0xea>
   12842:	2b1f      	cmp	r3, #31
   12844:	d025      	beq.n	12892 <_usb_d_dev_init+0xea>
   12846:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12848:	b338      	cbz	r0, 1289a <_usb_d_dev_init+0xf2>
   1284a:	281f      	cmp	r0, #31
   1284c:	d025      	beq.n	1289a <_usb_d_dev_init+0xf2>
   1284e:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12850:	b332      	cbz	r2, 128a0 <_usb_d_dev_init+0xf8>
   12852:	2a07      	cmp	r2, #7
   12854:	d024      	beq.n	128a0 <_usb_d_dev_init+0xf8>
   12856:	0311      	lsls	r1, r2, #12
   12858:	e024      	b.n	128a4 <_usb_d_dev_init+0xfc>
   1285a:	7893      	ldrb	r3, [r2, #2]
   1285c:	079f      	lsls	r7, r3, #30
   1285e:	d1fc      	bne.n	1285a <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12860:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   12862:	079e      	lsls	r6, r3, #30
   12864:	d50d      	bpl.n	12882 <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   12866:	7813      	ldrb	r3, [r2, #0]
   12868:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1286c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1286e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12872:	7893      	ldrb	r3, [r2, #2]
   12874:	079d      	lsls	r5, r3, #30
   12876:	d1fc      	bne.n	12872 <_usb_d_dev_init+0xca>
   12878:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1287c:	7893      	ldrb	r3, [r2, #2]
   1287e:	079c      	lsls	r4, r3, #30
   12880:	d4fc      	bmi.n	1287c <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12882:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12886:	2301      	movs	r3, #1
   12888:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1288a:	7893      	ldrb	r3, [r2, #2]
   1288c:	0798      	lsls	r0, r3, #30
   1288e:	d1fc      	bne.n	1288a <_usb_d_dev_init+0xe2>
   12890:	e791      	b.n	127b6 <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12892:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12896:	2800      	cmp	r0, #0
   12898:	d1d7      	bne.n	1284a <_usb_d_dev_init+0xa2>
   1289a:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   1289c:	2a00      	cmp	r2, #0
   1289e:	d1d8      	bne.n	12852 <_usb_d_dev_init+0xaa>
   128a0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   128a4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   128a8:	4303      	orrs	r3, r0
   128aa:	430b      	orrs	r3, r1
   128ac:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   128ae:	78d3      	ldrb	r3, [r2, #3]
   128b0:	f043 0303 	orr.w	r3, r3, #3
   128b4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   128b6:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   128b8:	2104      	movs	r1, #4
   128ba:	f043 030c 	orr.w	r3, r3, #12
   128be:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   128c0:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   128c2:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   128c4:	7898      	ldrb	r0, [r3, #2]
   128c6:	f010 0003 	ands.w	r0, r0, #3
   128ca:	d1fb      	bne.n	128c4 <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   128cc:	4a04      	ldr	r2, [pc, #16]	; (128e0 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   128ce:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   128d0:	2201      	movs	r2, #1
   128d2:	811a      	strh	r2, [r3, #8]
}
   128d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128d8:	20002004 	.word	0x20002004
   128dc:	00011d75 	.word	0x00011d75
   128e0:	20002234 	.word	0x20002234
   128e4:	00800084 	.word	0x00800084

000128e8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   128e8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   128ec:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   128ee:	079b      	lsls	r3, r3, #30
   128f0:	d124      	bne.n	1293c <_usb_d_dev_enable+0x54>
{
   128f2:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   128f4:	7893      	ldrb	r3, [r2, #2]
   128f6:	0798      	lsls	r0, r3, #30
   128f8:	d1fc      	bne.n	128f4 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   128fa:	7813      	ldrb	r3, [r2, #0]
   128fc:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   128fe:	0799      	lsls	r1, r3, #30
   12900:	d407      	bmi.n	12912 <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   12902:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12906:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12908:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1290c:	7893      	ldrb	r3, [r2, #2]
   1290e:	079b      	lsls	r3, r3, #30
   12910:	d1fc      	bne.n	1290c <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12912:	4b0c      	ldr	r3, [pc, #48]	; (12944 <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12914:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12918:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1291c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12920:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   12924:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12928:	f240 218d 	movw	r1, #653	; 0x28d
   1292c:	6098      	str	r0, [r3, #8]
   1292e:	609e      	str	r6, [r3, #8]
   12930:	609d      	str	r5, [r3, #8]
   12932:	609c      	str	r4, [r3, #8]
   12934:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   12936:	2000      	movs	r0, #0
}
   12938:	bc70      	pop	{r4, r5, r6}
   1293a:	4770      	bx	lr
		return -USB_ERR_DENIED;
   1293c:	f06f 0010 	mvn.w	r0, #16
   12940:	4770      	bx	lr
   12942:	bf00      	nop
   12944:	e000e100 	.word	0xe000e100

00012948 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12948:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1294c:	8913      	ldrh	r3, [r2, #8]
   1294e:	f023 0301 	bic.w	r3, r3, #1
   12952:	041b      	lsls	r3, r3, #16
   12954:	0c1b      	lsrs	r3, r3, #16
   12956:	8113      	strh	r3, [r2, #8]
   12958:	4770      	bx	lr
   1295a:	bf00      	nop

0001295c <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   1295c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12960:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   12964:	7298      	strb	r0, [r3, #10]
   12966:	4770      	bx	lr

00012968 <_usb_d_dev_ep_init>:
{
   12968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1296c:	f010 050f 	ands.w	r5, r0, #15
   12970:	fa4f fc80 	sxtb.w	ip, r0
   12974:	d02a      	beq.n	129cc <_usb_d_dev_ep_init+0x64>
   12976:	f1bc 0f00 	cmp.w	ip, #0
   1297a:	bfb4      	ite	lt
   1297c:	1cab      	addlt	r3, r5, #2
   1297e:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12980:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12982:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   12986:	d859      	bhi.n	12a3c <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12988:	009c      	lsls	r4, r3, #2
   1298a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 12a44 <_usb_d_dev_ep_init+0xdc>
   1298e:	18e6      	adds	r6, r4, r3
   12990:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12994:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12998:	2eff      	cmp	r6, #255	; 0xff
   1299a:	d14b      	bne.n	12a34 <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   1299c:	b1d1      	cbz	r1, 129d4 <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   1299e:	f1bc 0f00 	cmp.w	ip, #0
   129a2:	db3a      	blt.n	12a1a <_usb_d_dev_ep_init+0xb2>
   129a4:	006f      	lsls	r7, r5, #1
   129a6:	197e      	adds	r6, r7, r5
   129a8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12a48 <_usb_d_dev_ep_init+0xe0>
   129ac:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   129b0:	bb4e      	cbnz	r6, 12a06 <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   129b2:	4423      	add	r3, r4
   129b4:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   129b8:	3101      	adds	r1, #1
   129ba:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   129be:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   129c2:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   129c4:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   129c6:	2000      	movs	r0, #0
   129c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   129cc:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   129d0:	462b      	mov	r3, r5
   129d2:	e7d9      	b.n	12988 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   129d4:	b125      	cbz	r5, 129e0 <_usb_d_dev_ep_init+0x78>
   129d6:	f1bc 0f00 	cmp.w	ip, #0
   129da:	db01      	blt.n	129e0 <_usb_d_dev_ep_init+0x78>
   129dc:	1cae      	adds	r6, r5, #2
   129de:	e000      	b.n	129e2 <_usb_d_dev_ep_init+0x7a>
   129e0:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   129e2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   129e6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   129ea:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   129ee:	2eff      	cmp	r6, #255	; 0xff
   129f0:	d120      	bne.n	12a34 <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   129f2:	006f      	lsls	r7, r5, #1
   129f4:	197e      	adds	r6, r7, r5
   129f6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12a48 <_usb_d_dev_ep_init+0xe0>
   129fa:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   129fe:	b146      	cbz	r6, 12a12 <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12a00:	f1bc 0f00 	cmp.w	ip, #0
   12a04:	db0c      	blt.n	12a20 <_usb_d_dev_ep_init+0xb8>
   12a06:	443d      	add	r5, r7
   12a08:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12a0c:	892d      	ldrh	r5, [r5, #8]
   12a0e:	4295      	cmp	r5, r2
   12a10:	dacf      	bge.n	129b2 <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   12a12:	f06f 0012 	mvn.w	r0, #18
   12a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a1a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12a48 <_usb_d_dev_ep_init+0xe0>
   12a1e:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12a20:	442f      	add	r7, r5
   12a22:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   12a26:	687d      	ldr	r5, [r7, #4]
   12a28:	b115      	cbz	r5, 12a30 <_usb_d_dev_ep_init+0xc8>
   12a2a:	897e      	ldrh	r6, [r7, #10]
   12a2c:	4296      	cmp	r6, r2
   12a2e:	dbf0      	blt.n	12a12 <_usb_d_dev_ep_init+0xaa>
   12a30:	462e      	mov	r6, r5
   12a32:	e7be      	b.n	129b2 <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   12a34:	f06f 0013 	mvn.w	r0, #19
   12a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   12a3c:	f06f 0011 	mvn.w	r0, #17
   12a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a44:	20002004 	.word	0x20002004
   12a48:	000234a0 	.word	0x000234a0

00012a4c <_usb_d_dev_ep_deinit>:
{
   12a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12a50:	f010 070f 	ands.w	r7, r0, #15
{
   12a54:	b082      	sub	sp, #8
   12a56:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12a5a:	d009      	beq.n	12a70 <_usb_d_dev_ep_deinit+0x24>
   12a5c:	f1b9 0f00 	cmp.w	r9, #0
   12a60:	bfb4      	ite	lt
   12a62:	1cbe      	addlt	r6, r7, #2
   12a64:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12a66:	2f02      	cmp	r7, #2
   12a68:	d903      	bls.n	12a72 <_usb_d_dev_ep_deinit+0x26>
}
   12a6a:	b002      	add	sp, #8
   12a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12a70:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12a72:	ea4f 0886 	mov.w	r8, r6, lsl #2
   12a76:	4d3d      	ldr	r5, [pc, #244]	; (12b6c <_usb_d_dev_ep_deinit+0x120>)
   12a78:	eb08 0306 	add.w	r3, r8, r6
   12a7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12a80:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   12a84:	29ff      	cmp	r1, #255	; 0xff
   12a86:	d0f0      	beq.n	12a6a <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12a88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12a8c:	224a      	movs	r2, #74	; 0x4a
   12a8e:	4604      	mov	r4, r0
   12a90:	f88d 2005 	strb.w	r2, [sp, #5]
   12a94:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12a96:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12a98:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12a9c:	d41b      	bmi.n	12ad6 <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12a9e:	f003 0307 	and.w	r3, r3, #7
   12aa2:	2b01      	cmp	r3, #1
   12aa4:	d050      	beq.n	12b48 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   12aa6:	f1b9 0f00 	cmp.w	r9, #0
   12aaa:	db54      	blt.n	12b56 <_usb_d_dev_ep_deinit+0x10a>
   12aac:	0160      	lsls	r0, r4, #5
   12aae:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   12ab2:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   12ab6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12aba:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12abe:	4446      	add	r6, r8
   12ac0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   12ac4:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   12ac6:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12ac8:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12acc:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12ad0:	b002      	add	sp, #8
   12ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ad6:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ada:	f103 0208 	add.w	r2, r3, #8
   12ade:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12ae0:	f1b9 0f00 	cmp.w	r9, #0
   12ae4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12ae8:	bfb5      	itete	lt
   12aea:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12aee:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12af2:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12af6:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12afa:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12afe:	0150      	lsls	r0, r2, #5
   12b00:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b04:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12b06:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b0a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12b0e:	eb08 0306 	add.w	r3, r8, r6
   12b12:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12b16:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12b1a:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12b1e:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12b22:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12b26:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12b28:	f103 0a20 	add.w	sl, r3, #32
   12b2c:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12b30:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   12b32:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12b36:	4608      	mov	r0, r1
   12b38:	2103      	movs	r1, #3
   12b3a:	4798      	blx	r3
   12b3c:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12b40:	f003 0307 	and.w	r3, r3, #7
   12b44:	2b01      	cmp	r3, #1
   12b46:	d1ae      	bne.n	12aa6 <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12b48:	0160      	lsls	r0, r4, #5
   12b4a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12b4e:	2300      	movs	r3, #0
   12b50:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   12b54:	e7b3      	b.n	12abe <_usb_d_dev_ep_deinit+0x72>
   12b56:	017f      	lsls	r7, r7, #5
   12b58:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12b5c:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12b60:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12b64:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12b68:	e7a9      	b.n	12abe <_usb_d_dev_ep_deinit+0x72>
   12b6a:	bf00      	nop
   12b6c:	20002004 	.word	0x20002004

00012b70 <_usb_d_dev_ep_enable>:
{
   12b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b72:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12b74:	f010 000f 	ands.w	r0, r0, #15
   12b78:	d045      	beq.n	12c06 <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12b7a:	0142      	lsls	r2, r0, #5
   12b7c:	2e00      	cmp	r6, #0
   12b7e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12b82:	bfb4      	ite	lt
   12b84:	1c83      	addlt	r3, r0, #2
   12b86:	4603      	movge	r3, r0
   12b88:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12b8c:	4a84      	ldr	r2, [pc, #528]	; (12da0 <_usb_d_dev_ep_enable+0x230>)
   12b8e:	1c59      	adds	r1, r3, #1
   12b90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12b94:	2802      	cmp	r0, #2
   12b96:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12b98:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12b9c:	f200 809f 	bhi.w	12cde <_usb_d_dev_ep_enable+0x16e>
   12ba0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12ba4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12ba8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12bac:	2aff      	cmp	r2, #255	; 0xff
   12bae:	f000 8096 	beq.w	12cde <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12bb2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12bb6:	4d7b      	ldr	r5, [pc, #492]	; (12da4 <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12bb8:	f002 0e07 	and.w	lr, r2, #7
   12bbc:	0140      	lsls	r0, r0, #5
   12bbe:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12bc2:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12bc6:	d028      	beq.n	12c1a <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12bc8:	2e00      	cmp	r6, #0
   12bca:	db65      	blt.n	12c98 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12bcc:	0761      	lsls	r1, r4, #29
   12bce:	f040 80a4 	bne.w	12d1a <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12bd2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12bd4:	4b74      	ldr	r3, [pc, #464]	; (12da8 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12bd6:	f002 0207 	and.w	r2, r2, #7
   12bda:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12bde:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12be0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12be4:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12be8:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12bec:	d97a      	bls.n	12ce4 <_usb_d_dev_ep_enable+0x174>
   12bee:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12bf2:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12bf4:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12bf6:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12bf8:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12bfa:	607a      	str	r2, [r7, #4]
   12bfc:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12c00:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12c02:	4608      	mov	r0, r1
   12c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12c06:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12c0a:	4968      	ldr	r1, [pc, #416]	; (12dac <_usb_d_dev_ep_enable+0x23c>)
   12c0c:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12c10:	f1a1 0214 	sub.w	r2, r1, #20
   12c14:	b2e4      	uxtb	r4, r4
   12c16:	4603      	mov	r3, r0
   12c18:	e7c2      	b.n	12ba0 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12c1a:	f014 0f77 	tst.w	r4, #119	; 0x77
   12c1e:	d17c      	bne.n	12d1a <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12c20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12c22:	4a61      	ldr	r2, [pc, #388]	; (12da8 <_usb_d_dev_ep_enable+0x238>)
   12c24:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12c28:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12c2e:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12c32:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12c36:	d94c      	bls.n	12cd2 <_usb_d_dev_ep_enable+0x162>
   12c38:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12c40:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c42:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c44:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c48:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12c4a:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c4c:	617b      	str	r3, [r7, #20]
   12c4e:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c52:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c56:	7c8a      	ldrb	r2, [r1, #18]
   12c58:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12c5a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c5e:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12c62:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12c64:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12c66:	2000      	movs	r0, #0
   12c68:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12c6a:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12c6c:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12c6e:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12c72:	6873      	ldr	r3, [r6, #4]
   12c74:	f367 339b 	bfi	r3, r7, #14, #14
   12c78:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12c7a:	6872      	ldr	r2, [r6, #4]
   12c7c:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12c80:	f360 020d 	bfi	r2, r0, #0, #14
   12c84:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12c86:	2510      	movs	r5, #16
   12c88:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c8a:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c8e:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12c92:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12c98:	f014 0f70 	tst.w	r4, #112	; 0x70
   12c9c:	d13d      	bne.n	12d1a <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12c9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12ca0:	0112      	lsls	r2, r2, #4
   12ca2:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12ca6:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12caa:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12cb0:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12cb4:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12cb8:	d91a      	bls.n	12cf0 <_usb_d_dev_ep_enable+0x180>
   12cba:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12cbe:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12cc0:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12cc2:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12cc4:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12cc6:	617a      	str	r2, [r7, #20]
   12cc8:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12ccc:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12cce:	4608      	mov	r0, r1
   12cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12cd6:	d923      	bls.n	12d20 <_usb_d_dev_ep_enable+0x1b0>
   12cd8:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12cdc:	e7ae      	b.n	12c3c <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12cde:	f06f 0011 	mvn.w	r0, #17
   12ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12ce4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12ce8:	d908      	bls.n	12cfc <_usb_d_dev_ep_enable+0x18c>
   12cea:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12cee:	e780      	b.n	12bf2 <_usb_d_dev_ep_enable+0x82>
   12cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12cf4:	d907      	bls.n	12d06 <_usb_d_dev_ep_enable+0x196>
   12cf6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12cfa:	e7e0      	b.n	12cbe <_usb_d_dev_ep_enable+0x14e>
   12cfc:	2980      	cmp	r1, #128	; 0x80
   12cfe:	d907      	bls.n	12d10 <_usb_d_dev_ep_enable+0x1a0>
   12d00:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12d04:	e775      	b.n	12bf2 <_usb_d_dev_ep_enable+0x82>
   12d06:	2b80      	cmp	r3, #128	; 0x80
   12d08:	d914      	bls.n	12d34 <_usb_d_dev_ep_enable+0x1c4>
   12d0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12d0e:	e7d6      	b.n	12cbe <_usb_d_dev_ep_enable+0x14e>
   12d10:	2940      	cmp	r1, #64	; 0x40
   12d12:	d914      	bls.n	12d3e <_usb_d_dev_ep_enable+0x1ce>
   12d14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12d18:	e76b      	b.n	12bf2 <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12d1a:	f06f 0013 	mvn.w	r0, #19
   12d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12d20:	2b80      	cmp	r3, #128	; 0x80
   12d22:	d902      	bls.n	12d2a <_usb_d_dev_ep_enable+0x1ba>
   12d24:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12d28:	e788      	b.n	12c3c <_usb_d_dev_ep_enable+0xcc>
   12d2a:	2b40      	cmp	r3, #64	; 0x40
   12d2c:	d90c      	bls.n	12d48 <_usb_d_dev_ep_enable+0x1d8>
   12d2e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12d32:	e783      	b.n	12c3c <_usb_d_dev_ep_enable+0xcc>
   12d34:	2b40      	cmp	r3, #64	; 0x40
   12d36:	d90c      	bls.n	12d52 <_usb_d_dev_ep_enable+0x1e2>
   12d38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12d3c:	e7bf      	b.n	12cbe <_usb_d_dev_ep_enable+0x14e>
   12d3e:	2920      	cmp	r1, #32
   12d40:	d90c      	bls.n	12d5c <_usb_d_dev_ep_enable+0x1ec>
   12d42:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12d46:	e754      	b.n	12bf2 <_usb_d_dev_ep_enable+0x82>
   12d48:	2b20      	cmp	r3, #32
   12d4a:	d90c      	bls.n	12d66 <_usb_d_dev_ep_enable+0x1f6>
   12d4c:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12d50:	e774      	b.n	12c3c <_usb_d_dev_ep_enable+0xcc>
   12d52:	2b20      	cmp	r3, #32
   12d54:	d90c      	bls.n	12d70 <_usb_d_dev_ep_enable+0x200>
   12d56:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12d5a:	e7b0      	b.n	12cbe <_usb_d_dev_ep_enable+0x14e>
   12d5c:	2910      	cmp	r1, #16
   12d5e:	d90c      	bls.n	12d7a <_usb_d_dev_ep_enable+0x20a>
   12d60:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12d64:	e745      	b.n	12bf2 <_usb_d_dev_ep_enable+0x82>
   12d66:	2b10      	cmp	r3, #16
   12d68:	d90d      	bls.n	12d86 <_usb_d_dev_ep_enable+0x216>
   12d6a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12d6e:	e765      	b.n	12c3c <_usb_d_dev_ep_enable+0xcc>
   12d70:	2b10      	cmp	r3, #16
   12d72:	d90e      	bls.n	12d92 <_usb_d_dev_ep_enable+0x222>
   12d74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12d78:	e7a1      	b.n	12cbe <_usb_d_dev_ep_enable+0x14e>
   12d7a:	2908      	cmp	r1, #8
   12d7c:	bf94      	ite	ls
   12d7e:	2100      	movls	r1, #0
   12d80:	2101      	movhi	r1, #1
   12d82:	0709      	lsls	r1, r1, #28
   12d84:	e735      	b.n	12bf2 <_usb_d_dev_ep_enable+0x82>
   12d86:	2b08      	cmp	r3, #8
   12d88:	bf94      	ite	ls
   12d8a:	2400      	movls	r4, #0
   12d8c:	2401      	movhi	r4, #1
   12d8e:	0724      	lsls	r4, r4, #28
   12d90:	e754      	b.n	12c3c <_usb_d_dev_ep_enable+0xcc>
   12d92:	2b08      	cmp	r3, #8
   12d94:	bf94      	ite	ls
   12d96:	2300      	movls	r3, #0
   12d98:	2301      	movhi	r3, #1
   12d9a:	071a      	lsls	r2, r3, #28
   12d9c:	e78f      	b.n	12cbe <_usb_d_dev_ep_enable+0x14e>
   12d9e:	bf00      	nop
   12da0:	20002004 	.word	0x20002004
   12da4:	20002234 	.word	0x20002234
   12da8:	0fffc000 	.word	0x0fffc000
   12dac:	20002018 	.word	0x20002018

00012db0 <_usb_d_dev_ep_stall>:
{
   12db0:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12db2:	f010 000f 	ands.w	r0, r0, #15
{
   12db6:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12db8:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12dbc:	d01e      	beq.n	12dfc <_usb_d_dev_ep_stall+0x4c>
   12dbe:	2b00      	cmp	r3, #0
   12dc0:	bfb4      	ite	lt
   12dc2:	1c83      	addlt	r3, r0, #2
   12dc4:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12dc6:	1c5c      	adds	r4, r3, #1
   12dc8:	4a40      	ldr	r2, [pc, #256]	; (12ecc <_usb_d_dev_ep_stall+0x11c>)
   12dca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12dce:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12dd0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12dd4:	d86d      	bhi.n	12eb2 <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12dd6:	2901      	cmp	r1, #1
   12dd8:	d014      	beq.n	12e04 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12dda:	b389      	cbz	r1, 12e40 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ddc:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12dde:	f003 030f 	and.w	r3, r3, #15
   12de2:	015b      	lsls	r3, r3, #5
   12de4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12de8:	2210      	movs	r2, #16
   12dea:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12dee:	fa02 f305 	lsl.w	r3, r2, r5
   12df2:	420b      	tst	r3, r1
   12df4:	bf14      	ite	ne
   12df6:	2001      	movne	r0, #1
   12df8:	2000      	moveq	r0, #0
   12dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12dfc:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12dfe:	4a34      	ldr	r2, [pc, #208]	; (12ed0 <_usb_d_dev_ep_stall+0x120>)
   12e00:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12e02:	d1ea      	bne.n	12dda <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e04:	4931      	ldr	r1, [pc, #196]	; (12ecc <_usb_d_dev_ep_stall+0x11c>)
   12e06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12e0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e0e:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e10:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12e14:	f002 020f 	and.w	r2, r2, #15
   12e18:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12e1a:	2320      	movs	r3, #32
   12e1c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e20:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12e22:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e24:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12e26:	b2db      	uxtb	r3, r3
   12e28:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12e2c:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12e30:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12e34:	f043 0308 	orr.w	r3, r3, #8
   12e38:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12e3c:	2000      	movs	r0, #0
   12e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12e40:	009e      	lsls	r6, r3, #2
   12e42:	4c22      	ldr	r4, [pc, #136]	; (12ecc <_usb_d_dev_ep_stall+0x11c>)
   12e44:	18f2      	adds	r2, r6, r3
   12e46:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e4a:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12e4c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12e50:	f002 020f 	and.w	r2, r2, #15
   12e54:	0151      	lsls	r1, r2, #5
   12e56:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e5a:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12e5c:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12e60:	4207      	tst	r7, r0
   12e62:	d01b      	beq.n	12e9c <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e64:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12e66:	2720      	movs	r7, #32
   12e68:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12e6c:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12e6e:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12e70:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e74:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12e78:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12e7c:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12e80:	423a      	tst	r2, r7
   12e82:	d10d      	bne.n	12ea0 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12e84:	4433      	add	r3, r6
   12e86:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12e8a:	3420      	adds	r4, #32
   12e8c:	79e3      	ldrb	r3, [r4, #7]
   12e8e:	f003 0207 	and.w	r2, r3, #7
   12e92:	2a01      	cmp	r2, #1
   12e94:	d010      	beq.n	12eb8 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12e96:	f36f 03c3 	bfc	r3, #3, #1
   12e9a:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12e9c:	2000      	movs	r0, #0
   12e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12ea0:	2201      	movs	r2, #1
   12ea2:	fa02 f505 	lsl.w	r5, r2, r5
   12ea6:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12ea8:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12eac:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12eb0:	e7e8      	b.n	12e84 <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12eb2:	f06f 0011 	mvn.w	r0, #17
}
   12eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12eb8:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12ebc:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12ec0:	d1ec      	bne.n	12e9c <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12ec2:	f360 03c3 	bfi	r3, r0, #3, #1
   12ec6:	71e3      	strb	r3, [r4, #7]
   12ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12eca:	bf00      	nop
   12ecc:	20002004 	.word	0x20002004
   12ed0:	20002018 	.word	0x20002018

00012ed4 <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12ed4:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12ed6:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12eda:	4a12      	ldr	r2, [pc, #72]	; (12f24 <_usb_d_dev_ep_read_req+0x50>)
   12edc:	0143      	lsls	r3, r0, #5
   12ede:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12ee0:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12ee2:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12ee4:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12ee6:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12eea:	d818      	bhi.n	12f1e <_usb_d_dev_ep_read_req+0x4a>
   12eec:	b1b9      	cbz	r1, 12f1e <_usb_d_dev_ep_read_req+0x4a>
   12eee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12ef2:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12ef6:	2a11      	cmp	r2, #17
   12ef8:	d10e      	bne.n	12f18 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12efa:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12efe:	f012 0010 	ands.w	r0, r2, #16
   12f02:	d007      	beq.n	12f14 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12f04:	686a      	ldr	r2, [r5, #4]
   12f06:	682e      	ldr	r6, [r5, #0]
   12f08:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f0a:	2210      	movs	r2, #16
   12f0c:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12f0e:	4620      	mov	r0, r4
   12f10:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12f14:	bc70      	pop	{r4, r5, r6}
   12f16:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12f18:	f06f 0012 	mvn.w	r0, #18
   12f1c:	e7fa      	b.n	12f14 <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12f1e:	f06f 0011 	mvn.w	r0, #17
   12f22:	e7f7      	b.n	12f14 <_usb_d_dev_ep_read_req+0x40>
   12f24:	20002234 	.word	0x20002234

00012f28 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12f2c:	7a03      	ldrb	r3, [r0, #8]
   12f2e:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f32:	f013 030f 	ands.w	r3, r3, #15
{
   12f36:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f38:	d03a      	beq.n	12fb0 <_usb_d_dev_ep_trans+0x88>
   12f3a:	f1b9 0f00 	cmp.w	r9, #0
   12f3e:	bfb4      	ite	lt
   12f40:	1c9d      	addlt	r5, r3, #2
   12f42:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12f44:	4e5d      	ldr	r6, [pc, #372]	; (130bc <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f46:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12f4a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12f4e:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f52:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12f54:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12f58:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f5c:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12f5e:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12f62:	d050      	beq.n	13006 <_usb_d_dev_ep_trans+0xde>
   12f64:	1e57      	subs	r7, r2, #1
   12f66:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12f68:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12f6a:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12f6c:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12f70:	f200 8091 	bhi.w	13096 <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12f74:	6803      	ldr	r3, [r0, #0]
   12f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12f7a:	d223      	bcs.n	12fc4 <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12f7c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12f80:	eb0b 0305 	add.w	r3, fp, r5
   12f84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12f88:	6a1b      	ldr	r3, [r3, #32]
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	f000 8092 	beq.w	130b4 <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12f90:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12f94:	eb0b 0405 	add.w	r4, fp, r5
   12f98:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12f9c:	f104 0220 	add.w	r2, r4, #32
   12fa0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12fa4:	071b      	lsls	r3, r3, #28
   12fa6:	d530      	bpl.n	1300a <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12fa8:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12faa:	b007      	add	sp, #28
   12fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12fb0:	4e42      	ldr	r6, [pc, #264]	; (130bc <_usb_d_dev_ep_trans+0x194>)
   12fb2:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12fb4:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12fb8:	428a      	cmp	r2, r1
   12fba:	d01d      	beq.n	12ff8 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12fbc:	f106 0814 	add.w	r8, r6, #20
   12fc0:	461d      	mov	r5, r3
   12fc2:	e7cf      	b.n	12f64 <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12fc4:	4c3e      	ldr	r4, [pc, #248]	; (130c0 <_usb_d_dev_ep_trans+0x198>)
   12fc6:	eb03 0e01 	add.w	lr, r3, r1
   12fca:	45a6      	cmp	lr, r4
   12fcc:	d8d6      	bhi.n	12f7c <_usb_d_dev_ep_trans+0x54>
   12fce:	f013 0303 	ands.w	r3, r3, #3
   12fd2:	d1d3      	bne.n	12f7c <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12fd4:	f1b9 0f00 	cmp.w	r9, #0
   12fd8:	db60      	blt.n	1309c <_usb_d_dev_ep_trans+0x174>
   12fda:	428a      	cmp	r2, r1
   12fdc:	d8ce      	bhi.n	12f7c <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12fde:	2f00      	cmp	r7, #0
   12fe0:	d060      	beq.n	130a4 <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12fe2:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12fe6:	eb0b 0205 	add.w	r2, fp, r5
   12fea:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12fee:	6a12      	ldr	r2, [r2, #32]
   12ff0:	2a00      	cmp	r2, #0
   12ff2:	d050      	beq.n	13096 <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   12ff4:	469a      	mov	sl, r3
   12ff6:	e7cd      	b.n	12f94 <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   12ff8:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   12ffa:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   12ffc:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   13000:	f106 0814 	add.w	r8, r6, #20
   13004:	e7b6      	b.n	12f74 <_usb_d_dev_ep_trans+0x4c>
   13006:	4617      	mov	r7, r2
   13008:	e7ae      	b.n	12f68 <_usb_d_dev_ep_trans+0x40>
   1300a:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   1300c:	a805      	add	r0, sp, #20
   1300e:	9202      	str	r2, [sp, #8]
   13010:	f000 f8e0 	bl	131d4 <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   13014:	9a02      	ldr	r2, [sp, #8]
   13016:	9b01      	ldr	r3, [sp, #4]
   13018:	79d0      	ldrb	r0, [r2, #7]
   1301a:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   1301e:	d131      	bne.n	13084 <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   13020:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   13024:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   13028:	a805      	add	r0, sp, #20
   1302a:	9303      	str	r3, [sp, #12]
   1302c:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   1302e:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   13030:	f000 f8d8 	bl	131e4 <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   13034:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   13036:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   13038:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   1303a:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   1303e:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   13040:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   13044:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   13048:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   1304c:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   1304e:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   13050:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   13052:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   13056:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13058:	7a5b      	ldrb	r3, [r3, #9]
   1305a:	b9c3      	cbnz	r3, 1308e <_usb_d_dev_ep_trans+0x166>
   1305c:	461f      	mov	r7, r3
   1305e:	445d      	add	r5, fp
   13060:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   13064:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   13068:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   1306c:	f367 1304 	bfi	r3, r7, #4, #1
   13070:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   13074:	4640      	mov	r0, r8
   13076:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   1307a:	db17      	blt.n	130ac <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   1307c:	f7fe ff36 	bl	11eec <_usb_d_dev_out_next>
	return ERR_NONE;
   13080:	2000      	movs	r0, #0
   13082:	e792      	b.n	12faa <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   13084:	a805      	add	r0, sp, #20
   13086:	f000 f8ad 	bl	131e4 <atomic_leave_critical>
		return USB_BUSY;
   1308a:	2001      	movs	r0, #1
   1308c:	e78d      	b.n	12faa <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   1308e:	fab7 f787 	clz	r7, r7
   13092:	097f      	lsrs	r7, r7, #5
   13094:	e7e3      	b.n	1305e <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   13096:	f06f 0011 	mvn.w	r0, #17
   1309a:	e786      	b.n	12faa <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   1309c:	469a      	mov	sl, r3
   1309e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   130a2:	e777      	b.n	12f94 <_usb_d_dev_ep_trans+0x6c>
   130a4:	46ba      	mov	sl, r7
   130a6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   130aa:	e773      	b.n	12f94 <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   130ac:	f7fe fe64 	bl	11d78 <_usb_d_dev_in_next>
	return ERR_NONE;
   130b0:	2000      	movs	r0, #0
   130b2:	e77a      	b.n	12faa <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   130b4:	f06f 0012 	mvn.w	r0, #18
   130b8:	e777      	b.n	12faa <_usb_d_dev_ep_trans+0x82>
   130ba:	bf00      	nop
   130bc:	20002004 	.word	0x20002004
   130c0:	20031fff 	.word	0x20031fff

000130c4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   130c4:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   130c6:	f010 000f 	ands.w	r0, r0, #15
   130ca:	d117      	bne.n	130fc <_usb_d_dev_ep_abort+0x38>
{
   130cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   130ce:	0081      	lsls	r1, r0, #2
   130d0:	4d27      	ldr	r5, [pc, #156]	; (13170 <_usb_d_dev_ep_abort+0xac>)
   130d2:	180a      	adds	r2, r1, r0
   130d4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   130d8:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   130da:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   130de:	2625      	movs	r6, #37	; 0x25
   130e0:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   130e4:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   130e6:	f04f 064a 	mov.w	r6, #74	; 0x4a
   130ea:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   130ee:	d003      	beq.n	130f8 <_usb_d_dev_ep_abort+0x34>
   130f0:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   130f4:	0652      	lsls	r2, r2, #25
   130f6:	d408      	bmi.n	1310a <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   130f8:	b003      	add	sp, #12
   130fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   130fc:	2b00      	cmp	r3, #0
   130fe:	bfb4      	ite	lt
   13100:	1c82      	addlt	r2, r0, #2
   13102:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   13104:	2802      	cmp	r0, #2
   13106:	d931      	bls.n	1316c <_usb_d_dev_ep_abort+0xa8>
   13108:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1310a:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1310e:	f102 0608 	add.w	r6, r2, #8
   13112:	0177      	lsls	r7, r6, #5
	if (dir) {
   13114:	2b00      	cmp	r3, #0
   13116:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   1311a:	bfb5      	itete	lt
   1311c:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13120:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13124:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13128:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   1312c:	af02      	add	r7, sp, #8
   1312e:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13132:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13134:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   13136:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13138:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1313c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13140:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   13144:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13148:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1314a:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1314e:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   13152:	692d      	ldr	r5, [r5, #16]
   13154:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   13156:	f36f 1686 	bfc	r6, #6, #1
   1315a:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1315e:	4620      	mov	r0, r4
   13160:	2102      	movs	r1, #2
   13162:	462b      	mov	r3, r5
}
   13164:	b003      	add	sp, #12
   13166:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1316a:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   1316c:	4610      	mov	r0, r2
   1316e:	e7ad      	b.n	130cc <_usb_d_dev_ep_abort+0x8>
   13170:	20002004 	.word	0x20002004

00013174 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13174:	4b06      	ldr	r3, [pc, #24]	; (13190 <_usb_d_dev_register_callback+0x1c>)
   13176:	2900      	cmp	r1, #0
   13178:	bf08      	it	eq
   1317a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   1317c:	2801      	cmp	r0, #1
   1317e:	d003      	beq.n	13188 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   13180:	b908      	cbnz	r0, 13186 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   13182:	4b04      	ldr	r3, [pc, #16]	; (13194 <_usb_d_dev_register_callback+0x20>)
   13184:	6019      	str	r1, [r3, #0]
   13186:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   13188:	4b02      	ldr	r3, [pc, #8]	; (13194 <_usb_d_dev_register_callback+0x20>)
   1318a:	6059      	str	r1, [r3, #4]
   1318c:	4770      	bx	lr
   1318e:	bf00      	nop
   13190:	00011d75 	.word	0x00011d75
   13194:	20002004 	.word	0x20002004

00013198 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   13198:	4b08      	ldr	r3, [pc, #32]	; (131bc <_usb_d_dev_register_ep_callback+0x24>)
   1319a:	2900      	cmp	r1, #0
   1319c:	bf08      	it	eq
   1319e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   131a0:	b130      	cbz	r0, 131b0 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   131a2:	2801      	cmp	r0, #1
   131a4:	d007      	beq.n	131b6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   131a6:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   131a8:	bf04      	itt	eq
   131aa:	4b05      	ldreq	r3, [pc, #20]	; (131c0 <_usb_d_dev_register_ep_callback+0x28>)
   131ac:	6119      	streq	r1, [r3, #16]
   131ae:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   131b0:	4b03      	ldr	r3, [pc, #12]	; (131c0 <_usb_d_dev_register_ep_callback+0x28>)
   131b2:	6099      	str	r1, [r3, #8]
   131b4:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   131b6:	4b02      	ldr	r3, [pc, #8]	; (131c0 <_usb_d_dev_register_ep_callback+0x28>)
   131b8:	60d9      	str	r1, [r3, #12]
   131ba:	4770      	bx	lr
   131bc:	00011d75 	.word	0x00011d75
   131c0:	20002004 	.word	0x20002004

000131c4 <USB_0_Handler>:
   131c4:	f7fe bf8e 	b.w	120e4 <_usb_d_dev_handler>

000131c8 <USB_1_Handler>:
   131c8:	f7fe bf8c 	b.w	120e4 <_usb_d_dev_handler>

000131cc <USB_2_Handler>:
   131cc:	f7fe bf8a 	b.w	120e4 <_usb_d_dev_handler>

000131d0 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   131d0:	f7fe bf88 	b.w	120e4 <_usb_d_dev_handler>

000131d4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   131d4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   131d8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   131da:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   131dc:	f3bf 8f5f 	dmb	sy
   131e0:	4770      	bx	lr
   131e2:	bf00      	nop

000131e4 <atomic_leave_critical>:
   131e4:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   131e8:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   131ea:	f383 8810 	msr	PRIMASK, r3
   131ee:	4770      	bx	lr

000131f0 <arm_sin_q15>:
   131f0:	0982      	lsrs	r2, r0, #6
   131f2:	490c      	ldr	r1, [pc, #48]	; (13224 <arm_sin_q15+0x34>)
   131f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   131f8:	0240      	lsls	r0, r0, #9
   131fa:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   131fe:	b410      	push	{r4}
   13200:	3201      	adds	r2, #1
   13202:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   13206:	fb03 f304 	mul.w	r3, r3, r4
   1320a:	0c1b      	lsrs	r3, r3, #16
   1320c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   13210:	f85d 4b04 	ldr.w	r4, [sp], #4
   13214:	041b      	lsls	r3, r3, #16
   13216:	fb10 3002 	smlabb	r0, r0, r2, r3
   1321a:	f340 30cf 	sbfx	r0, r0, #15, #16
   1321e:	f020 0001 	bic.w	r0, r0, #1
   13222:	4770      	bx	lr
   13224:	000234c4 	.word	0x000234c4

00013228 <_Znwj>:
   13228:	b510      	push	{r4, lr}
   1322a:	2800      	cmp	r0, #0
   1322c:	bf14      	ite	ne
   1322e:	4604      	movne	r4, r0
   13230:	2401      	moveq	r4, #1
   13232:	4620      	mov	r0, r4
   13234:	f00a fc98 	bl	1db68 <malloc>
   13238:	b100      	cbz	r0, 1323c <_Znwj+0x14>
   1323a:	bd10      	pop	{r4, pc}
   1323c:	f000 f9c8 	bl	135d0 <_ZSt15get_new_handlerv>
   13240:	b108      	cbz	r0, 13246 <_Znwj+0x1e>
   13242:	4780      	blx	r0
   13244:	e7f5      	b.n	13232 <_Znwj+0xa>
   13246:	2004      	movs	r0, #4
   13248:	f000 f8a2 	bl	13390 <__cxa_allocate_exception>
   1324c:	4b02      	ldr	r3, [pc, #8]	; (13258 <_Znwj+0x30>)
   1324e:	6003      	str	r3, [r0, #0]
   13250:	4a02      	ldr	r2, [pc, #8]	; (1325c <_Znwj+0x34>)
   13252:	4903      	ldr	r1, [pc, #12]	; (13260 <_Znwj+0x38>)
   13254:	f000 f946 	bl	134e4 <__cxa_throw>
   13258:	00023918 	.word	0x00023918
   1325c:	00013281 	.word	0x00013281
   13260:	000238f4 	.word	0x000238f4

00013264 <__cxa_pure_virtual>:
   13264:	b508      	push	{r3, lr}
   13266:	221b      	movs	r2, #27
   13268:	4902      	ldr	r1, [pc, #8]	; (13274 <__cxa_pure_virtual+0x10>)
   1326a:	2002      	movs	r0, #2
   1326c:	f00d f812 	bl	20294 <write>
   13270:	f000 f8ee 	bl	13450 <_ZSt9terminatev>
   13274:	000238c8 	.word	0x000238c8

00013278 <_ZNKSt9bad_alloc4whatEv>:
   13278:	4800      	ldr	r0, [pc, #0]	; (1327c <_ZNKSt9bad_alloc4whatEv+0x4>)
   1327a:	4770      	bx	lr
   1327c:	000238e4 	.word	0x000238e4

00013280 <_ZNSt9bad_allocD1Ev>:
   13280:	b510      	push	{r4, lr}
   13282:	4b03      	ldr	r3, [pc, #12]	; (13290 <_ZNSt9bad_allocD1Ev+0x10>)
   13284:	6003      	str	r3, [r0, #0]
   13286:	4604      	mov	r4, r0
   13288:	f000 f8be 	bl	13408 <_ZNSt9exceptionD1Ev>
   1328c:	4620      	mov	r0, r4
   1328e:	bd10      	pop	{r4, pc}
   13290:	00023918 	.word	0x00023918

00013294 <_ZNSt9bad_allocD0Ev>:
   13294:	b510      	push	{r4, lr}
   13296:	4b05      	ldr	r3, [pc, #20]	; (132ac <_ZNSt9bad_allocD0Ev+0x18>)
   13298:	6003      	str	r3, [r0, #0]
   1329a:	4604      	mov	r4, r0
   1329c:	f000 f8b4 	bl	13408 <_ZNSt9exceptionD1Ev>
   132a0:	4620      	mov	r0, r4
   132a2:	2104      	movs	r1, #4
   132a4:	f000 f804 	bl	132b0 <_ZdlPvj>
   132a8:	4620      	mov	r0, r4
   132aa:	bd10      	pop	{r4, pc}
   132ac:	00023918 	.word	0x00023918

000132b0 <_ZdlPvj>:
   132b0:	f000 bac0 	b.w	13834 <_ZdlPv>

000132b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   132b4:	b4f0      	push	{r4, r5, r6, r7}
   132b6:	4c1b      	ldr	r4, [pc, #108]	; (13324 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   132b8:	f850 7c08 	ldr.w	r7, [r0, #-8]
   132bc:	6861      	ldr	r1, [r4, #4]
   132be:	f1a0 0608 	sub.w	r6, r0, #8
   132c2:	b1c9      	cbz	r1, 132f8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   132c4:	19f5      	adds	r5, r6, r7
   132c6:	42a9      	cmp	r1, r5
   132c8:	d01b      	beq.n	13302 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   132ca:	684a      	ldr	r2, [r1, #4]
   132cc:	b32a      	cbz	r2, 1331a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   132ce:	4295      	cmp	r5, r2
   132d0:	d303      	bcc.n	132da <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   132d2:	e022      	b.n	1331a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   132d4:	429d      	cmp	r5, r3
   132d6:	d205      	bcs.n	132e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   132d8:	461a      	mov	r2, r3
   132da:	6853      	ldr	r3, [r2, #4]
   132dc:	1d0c      	adds	r4, r1, #4
   132de:	4611      	mov	r1, r2
   132e0:	2b00      	cmp	r3, #0
   132e2:	d1f7      	bne.n	132d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   132e4:	6811      	ldr	r1, [r2, #0]
   132e6:	1855      	adds	r5, r2, r1
   132e8:	42ae      	cmp	r6, r5
   132ea:	d013      	beq.n	13314 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   132ec:	f840 3c04 	str.w	r3, [r0, #-4]
   132f0:	6823      	ldr	r3, [r4, #0]
   132f2:	605e      	str	r6, [r3, #4]
   132f4:	bcf0      	pop	{r4, r5, r6, r7}
   132f6:	4770      	bx	lr
   132f8:	f840 1c04 	str.w	r1, [r0, #-4]
   132fc:	6066      	str	r6, [r4, #4]
   132fe:	bcf0      	pop	{r4, r5, r6, r7}
   13300:	4770      	bx	lr
   13302:	680b      	ldr	r3, [r1, #0]
   13304:	684a      	ldr	r2, [r1, #4]
   13306:	f840 2c04 	str.w	r2, [r0, #-4]
   1330a:	441f      	add	r7, r3
   1330c:	f840 7c08 	str.w	r7, [r0, #-8]
   13310:	6066      	str	r6, [r4, #4]
   13312:	e7ef      	b.n	132f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   13314:	440f      	add	r7, r1
   13316:	6017      	str	r7, [r2, #0]
   13318:	e7ec      	b.n	132f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1331a:	4613      	mov	r3, r2
   1331c:	3404      	adds	r4, #4
   1331e:	460a      	mov	r2, r1
   13320:	e7e0      	b.n	132e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13322:	bf00      	nop
   13324:	20002294 	.word	0x20002294

00013328 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   13328:	b430      	push	{r4, r5}
   1332a:	4c18      	ldr	r4, [pc, #96]	; (1338c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   1332c:	f100 0108 	add.w	r1, r0, #8
   13330:	6863      	ldr	r3, [r4, #4]
   13332:	2908      	cmp	r1, #8
   13334:	bf38      	it	cc
   13336:	2108      	movcc	r1, #8
   13338:	b313      	cbz	r3, 13380 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   1333a:	3107      	adds	r1, #7
   1333c:	681a      	ldr	r2, [r3, #0]
   1333e:	f021 0107 	bic.w	r1, r1, #7
   13342:	4291      	cmp	r1, r2
   13344:	d804      	bhi.n	13350 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   13346:	e01d      	b.n	13384 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   13348:	6802      	ldr	r2, [r0, #0]
   1334a:	4291      	cmp	r1, r2
   1334c:	d905      	bls.n	1335a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   1334e:	4603      	mov	r3, r0
   13350:	6858      	ldr	r0, [r3, #4]
   13352:	2800      	cmp	r0, #0
   13354:	d1f8      	bne.n	13348 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   13356:	bc30      	pop	{r4, r5}
   13358:	4770      	bx	lr
   1335a:	3304      	adds	r3, #4
   1335c:	1a52      	subs	r2, r2, r1
   1335e:	2a07      	cmp	r2, #7
   13360:	d90a      	bls.n	13378 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   13362:	1845      	adds	r5, r0, r1
   13364:	6844      	ldr	r4, [r0, #4]
   13366:	606c      	str	r4, [r5, #4]
   13368:	681c      	ldr	r4, [r3, #0]
   1336a:	5042      	str	r2, [r0, r1]
   1336c:	6021      	str	r1, [r4, #0]
   1336e:	601d      	str	r5, [r3, #0]
   13370:	f104 0008 	add.w	r0, r4, #8
   13374:	bc30      	pop	{r4, r5}
   13376:	4770      	bx	lr
   13378:	6842      	ldr	r2, [r0, #4]
   1337a:	601a      	str	r2, [r3, #0]
   1337c:	4604      	mov	r4, r0
   1337e:	e7f7      	b.n	13370 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   13380:	4618      	mov	r0, r3
   13382:	e7e8      	b.n	13356 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   13384:	4618      	mov	r0, r3
   13386:	1d23      	adds	r3, r4, #4
   13388:	e7e8      	b.n	1335c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   1338a:	bf00      	nop
   1338c:	20002294 	.word	0x20002294

00013390 <__cxa_allocate_exception>:
   13390:	b538      	push	{r3, r4, r5, lr}
   13392:	f100 0580 	add.w	r5, r0, #128	; 0x80
   13396:	4628      	mov	r0, r5
   13398:	f00a fbe6 	bl	1db68 <malloc>
   1339c:	4604      	mov	r4, r0
   1339e:	b138      	cbz	r0, 133b0 <__cxa_allocate_exception+0x20>
   133a0:	2280      	movs	r2, #128	; 0x80
   133a2:	2100      	movs	r1, #0
   133a4:	4620      	mov	r0, r4
   133a6:	f00b f821 	bl	1e3ec <memset>
   133aa:	f104 0080 	add.w	r0, r4, #128	; 0x80
   133ae:	bd38      	pop	{r3, r4, r5, pc}
   133b0:	4628      	mov	r0, r5
   133b2:	f7ff ffb9 	bl	13328 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   133b6:	4604      	mov	r4, r0
   133b8:	2800      	cmp	r0, #0
   133ba:	d1f1      	bne.n	133a0 <__cxa_allocate_exception+0x10>
   133bc:	f000 f848 	bl	13450 <_ZSt9terminatev>

000133c0 <__cxa_free_exception>:
   133c0:	4a06      	ldr	r2, [pc, #24]	; (133dc <__cxa_free_exception+0x1c>)
   133c2:	6893      	ldr	r3, [r2, #8]
   133c4:	3880      	subs	r0, #128	; 0x80
   133c6:	4298      	cmp	r0, r3
   133c8:	d905      	bls.n	133d6 <__cxa_free_exception+0x16>
   133ca:	68d2      	ldr	r2, [r2, #12]
   133cc:	4413      	add	r3, r2
   133ce:	4298      	cmp	r0, r3
   133d0:	d201      	bcs.n	133d6 <__cxa_free_exception+0x16>
   133d2:	f7ff bf6f 	b.w	132b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   133d6:	f00a bbcf 	b.w	1db78 <free>
   133da:	bf00      	nop
   133dc:	20002294 	.word	0x20002294

000133e0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   133e0:	b538      	push	{r3, r4, r5, lr}
   133e2:	4c08      	ldr	r4, [pc, #32]	; (13404 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   133e4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   133e8:	4628      	mov	r0, r5
   133ea:	60e5      	str	r5, [r4, #12]
   133ec:	f00a fbbc 	bl	1db68 <malloc>
   133f0:	60a0      	str	r0, [r4, #8]
   133f2:	b120      	cbz	r0, 133fe <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   133f4:	2300      	movs	r3, #0
   133f6:	6060      	str	r0, [r4, #4]
   133f8:	6005      	str	r5, [r0, #0]
   133fa:	6043      	str	r3, [r0, #4]
   133fc:	bd38      	pop	{r3, r4, r5, pc}
   133fe:	60e0      	str	r0, [r4, #12]
   13400:	6060      	str	r0, [r4, #4]
   13402:	bd38      	pop	{r3, r4, r5, pc}
   13404:	20002294 	.word	0x20002294

00013408 <_ZNSt9exceptionD1Ev>:
   13408:	4770      	bx	lr
   1340a:	bf00      	nop

0001340c <_ZNSt13bad_exceptionD1Ev>:
   1340c:	4770      	bx	lr
   1340e:	bf00      	nop

00013410 <_ZGTtNKSt13bad_exception4whatEv>:
   13410:	4800      	ldr	r0, [pc, #0]	; (13414 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   13412:	4770      	bx	lr
   13414:	00023924 	.word	0x00023924

00013418 <_ZNSt13bad_exceptionD0Ev>:
   13418:	b510      	push	{r4, lr}
   1341a:	2104      	movs	r1, #4
   1341c:	4604      	mov	r4, r0
   1341e:	f7ff ff47 	bl	132b0 <_ZdlPvj>
   13422:	4620      	mov	r0, r4
   13424:	bd10      	pop	{r4, pc}
   13426:	bf00      	nop

00013428 <_ZN10__cxxabiv111__terminateEPFvvE>:
   13428:	b508      	push	{r3, lr}
   1342a:	4780      	blx	r0
   1342c:	f00a f8ee 	bl	1d60c <abort>
   13430:	f000 fb6c 	bl	13b0c <__cxa_begin_catch>
   13434:	f00a f8ea 	bl	1d60c <abort>
   13438:	460d      	mov	r5, r1
   1343a:	4604      	mov	r4, r0
   1343c:	f000 fba4 	bl	13b88 <__cxa_end_catch>
   13440:	3501      	adds	r5, #1
   13442:	d001      	beq.n	13448 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   13444:	f000 f9f8 	bl	13838 <__cxa_end_cleanup>
   13448:	4620      	mov	r0, r4
   1344a:	f000 faef 	bl	13a2c <__cxa_call_unexpected>
   1344e:	bf00      	nop

00013450 <_ZSt9terminatev>:
   13450:	b508      	push	{r3, lr}
   13452:	4b03      	ldr	r3, [pc, #12]	; (13460 <_ZSt9terminatev+0x10>)
   13454:	6818      	ldr	r0, [r3, #0]
   13456:	f3bf 8f5b 	dmb	ish
   1345a:	f7ff ffe5 	bl	13428 <_ZN10__cxxabiv111__terminateEPFvvE>
   1345e:	bf00      	nop
   13460:	200000f8 	.word	0x200000f8

00013464 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   13464:	b508      	push	{r3, lr}
   13466:	4780      	blx	r0
   13468:	f7ff fff2 	bl	13450 <_ZSt9terminatev>

0001346c <_ZSt10unexpectedv>:
   1346c:	b508      	push	{r3, lr}
   1346e:	4b03      	ldr	r3, [pc, #12]	; (1347c <_ZSt10unexpectedv+0x10>)
   13470:	6818      	ldr	r0, [r3, #0]
   13472:	f3bf 8f5b 	dmb	ish
   13476:	f7ff fff5 	bl	13464 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1347a:	bf00      	nop
   1347c:	200000f4 	.word	0x200000f4

00013480 <_ZSt13get_terminatev>:
   13480:	4b02      	ldr	r3, [pc, #8]	; (1348c <_ZSt13get_terminatev+0xc>)
   13482:	6818      	ldr	r0, [r3, #0]
   13484:	f3bf 8f5b 	dmb	ish
   13488:	4770      	bx	lr
   1348a:	bf00      	nop
   1348c:	200000f8 	.word	0x200000f8

00013490 <_ZSt14get_unexpectedv>:
   13490:	4b02      	ldr	r3, [pc, #8]	; (1349c <_ZSt14get_unexpectedv+0xc>)
   13492:	6818      	ldr	r0, [r3, #0]
   13494:	f3bf 8f5b 	dmb	ish
   13498:	4770      	bx	lr
   1349a:	bf00      	nop
   1349c:	200000f4 	.word	0x200000f4

000134a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   134a0:	2801      	cmp	r0, #1
   134a2:	b510      	push	{r4, lr}
   134a4:	d81a      	bhi.n	134dc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   134a6:	f3bf 8f5b 	dmb	ish
   134aa:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   134ae:	e853 2f00 	ldrex	r2, [r3]
   134b2:	3a01      	subs	r2, #1
   134b4:	e843 2000 	strex	r0, r2, [r3]
   134b8:	2800      	cmp	r0, #0
   134ba:	d1f8      	bne.n	134ae <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   134bc:	f3bf 8f5b 	dmb	ish
   134c0:	b95a      	cbnz	r2, 134da <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   134c2:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   134c6:	f101 0458 	add.w	r4, r1, #88	; 0x58
   134ca:	b10b      	cbz	r3, 134d0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   134cc:	4620      	mov	r0, r4
   134ce:	4798      	blx	r3
   134d0:	4620      	mov	r0, r4
   134d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   134d6:	f7ff bf73 	b.w	133c0 <__cxa_free_exception>
   134da:	bd10      	pop	{r4, pc}
   134dc:	f851 0c14 	ldr.w	r0, [r1, #-20]
   134e0:	f7ff ffa2 	bl	13428 <_ZN10__cxxabiv111__terminateEPFvvE>

000134e4 <__cxa_throw>:
   134e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   134e6:	4604      	mov	r4, r0
   134e8:	460f      	mov	r7, r1
   134ea:	4616      	mov	r6, r2
   134ec:	f000 fb96 	bl	13c1c <__cxa_get_globals>
   134f0:	6843      	ldr	r3, [r0, #4]
   134f2:	2501      	movs	r5, #1
   134f4:	442b      	add	r3, r5
   134f6:	6043      	str	r3, [r0, #4]
   134f8:	f844 7c78 	str.w	r7, [r4, #-120]
   134fc:	f844 6c74 	str.w	r6, [r4, #-116]
   13500:	f844 5c80 	str.w	r5, [r4, #-128]
   13504:	f7ff ffc4 	bl	13490 <_ZSt14get_unexpectedv>
   13508:	f844 0c70 	str.w	r0, [r4, #-112]
   1350c:	f7ff ffb8 	bl	13480 <_ZSt13get_terminatev>
   13510:	2347      	movs	r3, #71	; 0x47
   13512:	2243      	movs	r2, #67	; 0x43
   13514:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   13518:	4910      	ldr	r1, [pc, #64]	; (1355c <__cxa_throw+0x78>)
   1351a:	f804 3c58 	strb.w	r3, [r4, #-88]
   1351e:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   13522:	232b      	movs	r3, #43	; 0x2b
   13524:	2755      	movs	r7, #85	; 0x55
   13526:	2600      	movs	r6, #0
   13528:	f844 0c6c 	str.w	r0, [r4, #-108]
   1352c:	f804 ec57 	strb.w	lr, [r4, #-87]
   13530:	f844 1c50 	str.w	r1, [r4, #-80]
   13534:	f804 2c55 	strb.w	r2, [r4, #-85]
   13538:	f804 2c54 	strb.w	r2, [r4, #-84]
   1353c:	f804 3c53 	strb.w	r3, [r4, #-83]
   13540:	f804 3c52 	strb.w	r3, [r4, #-82]
   13544:	f804 7c56 	strb.w	r7, [r4, #-86]
   13548:	f804 6c51 	strb.w	r6, [r4, #-81]
   1354c:	4628      	mov	r0, r5
   1354e:	f009 fe41 	bl	1d1d4 <_Unwind_RaiseException>
   13552:	4628      	mov	r0, r5
   13554:	f000 fada 	bl	13b0c <__cxa_begin_catch>
   13558:	f7ff ff7a 	bl	13450 <_ZSt9terminatev>
   1355c:	000134a1 	.word	0x000134a1

00013560 <__cxa_rethrow>:
   13560:	b510      	push	{r4, lr}
   13562:	f000 fb5b 	bl	13c1c <__cxa_get_globals>
   13566:	6842      	ldr	r2, [r0, #4]
   13568:	6804      	ldr	r4, [r0, #0]
   1356a:	3201      	adds	r2, #1
   1356c:	6042      	str	r2, [r0, #4]
   1356e:	b164      	cbz	r4, 1358a <__cxa_rethrow+0x2a>
   13570:	f894 2020 	ldrb.w	r2, [r4, #32]
   13574:	2a47      	cmp	r2, #71	; 0x47
   13576:	d00a      	beq.n	1358e <__cxa_rethrow+0x2e>
   13578:	2200      	movs	r2, #0
   1357a:	6002      	str	r2, [r0, #0]
   1357c:	3420      	adds	r4, #32
   1357e:	4620      	mov	r0, r4
   13580:	f009 fe4c 	bl	1d21c <_Unwind_Resume_or_Rethrow>
   13584:	4620      	mov	r0, r4
   13586:	f000 fac1 	bl	13b0c <__cxa_begin_catch>
   1358a:	f7ff ff61 	bl	13450 <_ZSt9terminatev>
   1358e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   13592:	2a4e      	cmp	r2, #78	; 0x4e
   13594:	d1f0      	bne.n	13578 <__cxa_rethrow+0x18>
   13596:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1359a:	2a55      	cmp	r2, #85	; 0x55
   1359c:	d1ec      	bne.n	13578 <__cxa_rethrow+0x18>
   1359e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   135a2:	2a43      	cmp	r2, #67	; 0x43
   135a4:	d1e8      	bne.n	13578 <__cxa_rethrow+0x18>
   135a6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   135aa:	2a43      	cmp	r2, #67	; 0x43
   135ac:	d1e4      	bne.n	13578 <__cxa_rethrow+0x18>
   135ae:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   135b2:	2a2b      	cmp	r2, #43	; 0x2b
   135b4:	d1e0      	bne.n	13578 <__cxa_rethrow+0x18>
   135b6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   135ba:	2a2b      	cmp	r2, #43	; 0x2b
   135bc:	d1dc      	bne.n	13578 <__cxa_rethrow+0x18>
   135be:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   135c2:	2a01      	cmp	r2, #1
   135c4:	d8d8      	bhi.n	13578 <__cxa_rethrow+0x18>
   135c6:	6962      	ldr	r2, [r4, #20]
   135c8:	4252      	negs	r2, r2
   135ca:	6162      	str	r2, [r4, #20]
   135cc:	e7d6      	b.n	1357c <__cxa_rethrow+0x1c>
   135ce:	bf00      	nop

000135d0 <_ZSt15get_new_handlerv>:
   135d0:	4b02      	ldr	r3, [pc, #8]	; (135dc <_ZSt15get_new_handlerv+0xc>)
   135d2:	6818      	ldr	r0, [r3, #0]
   135d4:	f3bf 8f5b 	dmb	ish
   135d8:	4770      	bx	lr
   135da:	bf00      	nop
   135dc:	200022a4 	.word	0x200022a4

000135e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   135e0:	b510      	push	{r4, lr}
   135e2:	4b03      	ldr	r3, [pc, #12]	; (135f0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   135e4:	6003      	str	r3, [r0, #0]
   135e6:	4604      	mov	r4, r0
   135e8:	f000 f8ca 	bl	13780 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   135ec:	4620      	mov	r0, r4
   135ee:	bd10      	pop	{r4, pc}
   135f0:	00023a14 	.word	0x00023a14

000135f4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   135f4:	b510      	push	{r4, lr}
   135f6:	4b05      	ldr	r3, [pc, #20]	; (1360c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   135f8:	6003      	str	r3, [r0, #0]
   135fa:	4604      	mov	r4, r0
   135fc:	f000 f8c0 	bl	13780 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   13600:	4620      	mov	r0, r4
   13602:	210c      	movs	r1, #12
   13604:	f7ff fe54 	bl	132b0 <_ZdlPvj>
   13608:	4620      	mov	r0, r4
   1360a:	bd10      	pop	{r4, pc}
   1360c:	00023a14 	.word	0x00023a14

00013610 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13610:	b570      	push	{r4, r5, r6, lr}
   13612:	b082      	sub	sp, #8
   13614:	460d      	mov	r5, r1
   13616:	9c06      	ldr	r4, [sp, #24]
   13618:	4294      	cmp	r4, r2
   1361a:	4606      	mov	r6, r0
   1361c:	d009      	beq.n	13632 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   1361e:	68b0      	ldr	r0, [r6, #8]
   13620:	6806      	ldr	r6, [r0, #0]
   13622:	9406      	str	r4, [sp, #24]
   13624:	6a34      	ldr	r4, [r6, #32]
   13626:	4629      	mov	r1, r5
   13628:	46a4      	mov	ip, r4
   1362a:	b002      	add	sp, #8
   1362c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13630:	4760      	bx	ip
   13632:	4619      	mov	r1, r3
   13634:	9201      	str	r2, [sp, #4]
   13636:	9300      	str	r3, [sp, #0]
   13638:	f000 f86a 	bl	13710 <_ZNKSt9type_infoeqERKS_>
   1363c:	9b00      	ldr	r3, [sp, #0]
   1363e:	9a01      	ldr	r2, [sp, #4]
   13640:	2800      	cmp	r0, #0
   13642:	d0ec      	beq.n	1361e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   13644:	2006      	movs	r0, #6
   13646:	b002      	add	sp, #8
   13648:	bd70      	pop	{r4, r5, r6, pc}
   1364a:	bf00      	nop

0001364c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13650:	b081      	sub	sp, #4
   13652:	460e      	mov	r6, r1
   13654:	4619      	mov	r1, r3
   13656:	461f      	mov	r7, r3
   13658:	4691      	mov	r9, r2
   1365a:	4683      	mov	fp, r0
   1365c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1365e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   13662:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   13666:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13668:	f000 f852 	bl	13710 <_ZNKSt9type_infoeqERKS_>
   1366c:	b170      	cbz	r0, 1368c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   1366e:	2e00      	cmp	r6, #0
   13670:	602c      	str	r4, [r5, #0]
   13672:	f885 9004 	strb.w	r9, [r5, #4]
   13676:	db1f      	blt.n	136b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13678:	4434      	add	r4, r6
   1367a:	45a0      	cmp	r8, r4
   1367c:	bf0c      	ite	eq
   1367e:	2406      	moveq	r4, #6
   13680:	2401      	movne	r4, #1
   13682:	71ac      	strb	r4, [r5, #6]
   13684:	2000      	movs	r0, #0
   13686:	b001      	add	sp, #4
   13688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1368c:	4544      	cmp	r4, r8
   1368e:	d018      	beq.n	136c2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13690:	f8db 0008 	ldr.w	r0, [fp, #8]
   13694:	f8d0 e000 	ldr.w	lr, [r0]
   13698:	950d      	str	r5, [sp, #52]	; 0x34
   1369a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1369e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   136a2:	940a      	str	r4, [sp, #40]	; 0x28
   136a4:	f8de 401c 	ldr.w	r4, [lr, #28]
   136a8:	463b      	mov	r3, r7
   136aa:	464a      	mov	r2, r9
   136ac:	4631      	mov	r1, r6
   136ae:	46a4      	mov	ip, r4
   136b0:	b001      	add	sp, #4
   136b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136b6:	4760      	bx	ip
   136b8:	3602      	adds	r6, #2
   136ba:	d1e3      	bne.n	13684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   136bc:	2301      	movs	r3, #1
   136be:	71ab      	strb	r3, [r5, #6]
   136c0:	e7e0      	b.n	13684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   136c2:	4651      	mov	r1, sl
   136c4:	4658      	mov	r0, fp
   136c6:	f000 f823 	bl	13710 <_ZNKSt9type_infoeqERKS_>
   136ca:	2800      	cmp	r0, #0
   136cc:	d0e0      	beq.n	13690 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   136ce:	2000      	movs	r0, #0
   136d0:	f885 9005 	strb.w	r9, [r5, #5]
   136d4:	b001      	add	sp, #4
   136d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136da:	bf00      	nop

000136dc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   136dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136e0:	4607      	mov	r7, r0
   136e2:	460c      	mov	r4, r1
   136e4:	4615      	mov	r5, r2
   136e6:	461e      	mov	r6, r3
   136e8:	f000 f862 	bl	137b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   136ec:	b108      	cbz	r0, 136f2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   136ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136f2:	68b8      	ldr	r0, [r7, #8]
   136f4:	6807      	ldr	r7, [r0, #0]
   136f6:	4621      	mov	r1, r4
   136f8:	69bc      	ldr	r4, [r7, #24]
   136fa:	4633      	mov	r3, r6
   136fc:	462a      	mov	r2, r5
   136fe:	46a4      	mov	ip, r4
   13700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13704:	4760      	bx	ip
   13706:	bf00      	nop

00013708 <_ZNSt9type_infoD1Ev>:
   13708:	4770      	bx	lr
   1370a:	bf00      	nop

0001370c <_ZNKSt9type_info14__is_pointer_pEv>:
   1370c:	2000      	movs	r0, #0
   1370e:	4770      	bx	lr

00013710 <_ZNKSt9type_infoeqERKS_>:
   13710:	4281      	cmp	r1, r0
   13712:	d011      	beq.n	13738 <_ZNKSt9type_infoeqERKS_+0x28>
   13714:	b508      	push	{r3, lr}
   13716:	6840      	ldr	r0, [r0, #4]
   13718:	7803      	ldrb	r3, [r0, #0]
   1371a:	2b2a      	cmp	r3, #42	; 0x2a
   1371c:	d00a      	beq.n	13734 <_ZNKSt9type_infoeqERKS_+0x24>
   1371e:	6849      	ldr	r1, [r1, #4]
   13720:	780b      	ldrb	r3, [r1, #0]
   13722:	2b2a      	cmp	r3, #42	; 0x2a
   13724:	bf08      	it	eq
   13726:	3101      	addeq	r1, #1
   13728:	f00b f92e 	bl	1e988 <strcmp>
   1372c:	fab0 f080 	clz	r0, r0
   13730:	0940      	lsrs	r0, r0, #5
   13732:	bd08      	pop	{r3, pc}
   13734:	2000      	movs	r0, #0
   13736:	bd08      	pop	{r3, pc}
   13738:	2001      	movs	r0, #1
   1373a:	4770      	bx	lr

0001373c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1373c:	b570      	push	{r4, r5, r6, lr}
   1373e:	6803      	ldr	r3, [r0, #0]
   13740:	b084      	sub	sp, #16
   13742:	2400      	movs	r4, #0
   13744:	699e      	ldr	r6, [r3, #24]
   13746:	9400      	str	r4, [sp, #0]
   13748:	2310      	movs	r3, #16
   1374a:	4615      	mov	r5, r2
   1374c:	9302      	str	r3, [sp, #8]
   1374e:	6812      	ldr	r2, [r2, #0]
   13750:	f88d 4004 	strb.w	r4, [sp, #4]
   13754:	466b      	mov	r3, sp
   13756:	9403      	str	r4, [sp, #12]
   13758:	47b0      	blx	r6
   1375a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1375e:	f003 0306 	and.w	r3, r3, #6
   13762:	2b06      	cmp	r3, #6
   13764:	bf03      	ittte	eq
   13766:	9b00      	ldreq	r3, [sp, #0]
   13768:	602b      	streq	r3, [r5, #0]
   1376a:	2001      	moveq	r0, #1
   1376c:	4620      	movne	r0, r4
   1376e:	b004      	add	sp, #16
   13770:	bd70      	pop	{r4, r5, r6, pc}
   13772:	bf00      	nop

00013774 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   13774:	9800      	ldr	r0, [sp, #0]
   13776:	4290      	cmp	r0, r2
   13778:	bf0c      	ite	eq
   1377a:	2006      	moveq	r0, #6
   1377c:	2001      	movne	r0, #1
   1377e:	4770      	bx	lr

00013780 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13780:	b510      	push	{r4, lr}
   13782:	4b03      	ldr	r3, [pc, #12]	; (13790 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   13784:	6003      	str	r3, [r0, #0]
   13786:	4604      	mov	r4, r0
   13788:	f7ff ffbe 	bl	13708 <_ZNSt9type_infoD1Ev>
   1378c:	4620      	mov	r0, r4
   1378e:	bd10      	pop	{r4, pc}
   13790:	00023a88 	.word	0x00023a88

00013794 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   13794:	b510      	push	{r4, lr}
   13796:	4b05      	ldr	r3, [pc, #20]	; (137ac <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13798:	6003      	str	r3, [r0, #0]
   1379a:	4604      	mov	r4, r0
   1379c:	f7ff ffb4 	bl	13708 <_ZNSt9type_infoD1Ev>
   137a0:	4620      	mov	r0, r4
   137a2:	2108      	movs	r1, #8
   137a4:	f7ff fd84 	bl	132b0 <_ZdlPvj>
   137a8:	4620      	mov	r0, r4
   137aa:	bd10      	pop	{r4, pc}
   137ac:	00023a88 	.word	0x00023a88

000137b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   137b0:	b538      	push	{r3, r4, r5, lr}
   137b2:	4615      	mov	r5, r2
   137b4:	461c      	mov	r4, r3
   137b6:	f7ff ffab 	bl	13710 <_ZNKSt9type_infoeqERKS_>
   137ba:	b120      	cbz	r0, 137c6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   137bc:	2208      	movs	r2, #8
   137be:	2306      	movs	r3, #6
   137c0:	6025      	str	r5, [r4, #0]
   137c2:	60e2      	str	r2, [r4, #12]
   137c4:	7123      	strb	r3, [r4, #4]
   137c6:	bd38      	pop	{r3, r4, r5, pc}

000137c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   137c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137cc:	4617      	mov	r7, r2
   137ce:	461c      	mov	r4, r3
   137d0:	4606      	mov	r6, r0
   137d2:	460d      	mov	r5, r1
   137d4:	f7ff ff9c 	bl	13710 <_ZNKSt9type_infoeqERKS_>
   137d8:	b908      	cbnz	r0, 137de <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   137da:	2c03      	cmp	r4, #3
   137dc:	d901      	bls.n	137e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   137de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137e2:	682b      	ldr	r3, [r5, #0]
   137e4:	463a      	mov	r2, r7
   137e6:	4631      	mov	r1, r6
   137e8:	4628      	mov	r0, r5
   137ea:	695b      	ldr	r3, [r3, #20]
   137ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   137f0:	4718      	bx	r3
   137f2:	bf00      	nop

000137f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   137f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   137f6:	b083      	sub	sp, #12
   137f8:	4617      	mov	r7, r2
   137fa:	9d08      	ldr	r5, [sp, #32]
   137fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   137fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13800:	428d      	cmp	r5, r1
   13802:	4606      	mov	r6, r0
   13804:	d00b      	beq.n	1381e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   13806:	4619      	mov	r1, r3
   13808:	4630      	mov	r0, r6
   1380a:	f7ff ff81 	bl	13710 <_ZNKSt9type_infoeqERKS_>
   1380e:	b118      	cbz	r0, 13818 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   13810:	2301      	movs	r3, #1
   13812:	6025      	str	r5, [r4, #0]
   13814:	7127      	strb	r7, [r4, #4]
   13816:	71a3      	strb	r3, [r4, #6]
   13818:	2000      	movs	r0, #0
   1381a:	b003      	add	sp, #12
   1381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1381e:	9909      	ldr	r1, [sp, #36]	; 0x24
   13820:	9301      	str	r3, [sp, #4]
   13822:	f7ff ff75 	bl	13710 <_ZNKSt9type_infoeqERKS_>
   13826:	b118      	cbz	r0, 13830 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   13828:	2000      	movs	r0, #0
   1382a:	7167      	strb	r7, [r4, #5]
   1382c:	b003      	add	sp, #12
   1382e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13830:	9b01      	ldr	r3, [sp, #4]
   13832:	e7e8      	b.n	13806 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

00013834 <_ZdlPv>:
   13834:	f00a b9a0 	b.w	1db78 <free>

00013838 <__cxa_end_cleanup>:
   13838:	b41e      	push	{r1, r2, r3, r4}
   1383a:	f000 f891 	bl	13960 <__gnu_end_cleanup>
   1383e:	bc1e      	pop	{r1, r2, r3, r4}
   13840:	f009 fcda 	bl	1d1f8 <_Unwind_Resume>

00013844 <__cxa_type_match>:
   13844:	b5f0      	push	{r4, r5, r6, r7, lr}
   13846:	7802      	ldrb	r2, [r0, #0]
   13848:	2a47      	cmp	r2, #71	; 0x47
   1384a:	b083      	sub	sp, #12
   1384c:	460d      	mov	r5, r1
   1384e:	461f      	mov	r7, r3
   13850:	d01e      	beq.n	13890 <__cxa_type_match+0x4c>
   13852:	2300      	movs	r3, #0
   13854:	4c27      	ldr	r4, [pc, #156]	; (138f4 <__cxa_type_match+0xb0>)
   13856:	9301      	str	r3, [sp, #4]
   13858:	6823      	ldr	r3, [r4, #0]
   1385a:	4620      	mov	r0, r4
   1385c:	689b      	ldr	r3, [r3, #8]
   1385e:	4798      	blx	r3
   13860:	b180      	cbz	r0, 13884 <__cxa_type_match+0x40>
   13862:	9b01      	ldr	r3, [sp, #4]
   13864:	681b      	ldr	r3, [r3, #0]
   13866:	9301      	str	r3, [sp, #4]
   13868:	2602      	movs	r6, #2
   1386a:	682b      	ldr	r3, [r5, #0]
   1386c:	4621      	mov	r1, r4
   1386e:	4628      	mov	r0, r5
   13870:	691c      	ldr	r4, [r3, #16]
   13872:	aa01      	add	r2, sp, #4
   13874:	2301      	movs	r3, #1
   13876:	47a0      	blx	r4
   13878:	b130      	cbz	r0, 13888 <__cxa_type_match+0x44>
   1387a:	9b01      	ldr	r3, [sp, #4]
   1387c:	603b      	str	r3, [r7, #0]
   1387e:	4630      	mov	r0, r6
   13880:	b003      	add	sp, #12
   13882:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13884:	2601      	movs	r6, #1
   13886:	e7f0      	b.n	1386a <__cxa_type_match+0x26>
   13888:	4606      	mov	r6, r0
   1388a:	4630      	mov	r0, r6
   1388c:	b003      	add	sp, #12
   1388e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13890:	7843      	ldrb	r3, [r0, #1]
   13892:	2b4e      	cmp	r3, #78	; 0x4e
   13894:	d1dd      	bne.n	13852 <__cxa_type_match+0xe>
   13896:	7883      	ldrb	r3, [r0, #2]
   13898:	2b55      	cmp	r3, #85	; 0x55
   1389a:	d1da      	bne.n	13852 <__cxa_type_match+0xe>
   1389c:	78c3      	ldrb	r3, [r0, #3]
   1389e:	2b43      	cmp	r3, #67	; 0x43
   138a0:	d019      	beq.n	138d6 <__cxa_type_match+0x92>
   138a2:	78c3      	ldrb	r3, [r0, #3]
   138a4:	2b43      	cmp	r3, #67	; 0x43
   138a6:	d1d4      	bne.n	13852 <__cxa_type_match+0xe>
   138a8:	7903      	ldrb	r3, [r0, #4]
   138aa:	2b43      	cmp	r3, #67	; 0x43
   138ac:	d1d1      	bne.n	13852 <__cxa_type_match+0xe>
   138ae:	7943      	ldrb	r3, [r0, #5]
   138b0:	2b2b      	cmp	r3, #43	; 0x2b
   138b2:	d1ce      	bne.n	13852 <__cxa_type_match+0xe>
   138b4:	7983      	ldrb	r3, [r0, #6]
   138b6:	2b2b      	cmp	r3, #43	; 0x2b
   138b8:	d1cb      	bne.n	13852 <__cxa_type_match+0xe>
   138ba:	79c3      	ldrb	r3, [r0, #7]
   138bc:	2b01      	cmp	r3, #1
   138be:	d8c8      	bhi.n	13852 <__cxa_type_match+0xe>
   138c0:	d004      	beq.n	138cc <__cxa_type_match+0x88>
   138c2:	f850 4c20 	ldr.w	r4, [r0, #-32]
   138c6:	3058      	adds	r0, #88	; 0x58
   138c8:	9001      	str	r0, [sp, #4]
   138ca:	e7c5      	b.n	13858 <__cxa_type_match+0x14>
   138cc:	f850 0c20 	ldr.w	r0, [r0, #-32]
   138d0:	f850 4c78 	ldr.w	r4, [r0, #-120]
   138d4:	e7f8      	b.n	138c8 <__cxa_type_match+0x84>
   138d6:	7903      	ldrb	r3, [r0, #4]
   138d8:	2b46      	cmp	r3, #70	; 0x46
   138da:	d1e2      	bne.n	138a2 <__cxa_type_match+0x5e>
   138dc:	7943      	ldrb	r3, [r0, #5]
   138de:	2b4f      	cmp	r3, #79	; 0x4f
   138e0:	d1df      	bne.n	138a2 <__cxa_type_match+0x5e>
   138e2:	7983      	ldrb	r3, [r0, #6]
   138e4:	2b52      	cmp	r3, #82	; 0x52
   138e6:	d1dc      	bne.n	138a2 <__cxa_type_match+0x5e>
   138e8:	79c3      	ldrb	r3, [r0, #7]
   138ea:	2b00      	cmp	r3, #0
   138ec:	d1d9      	bne.n	138a2 <__cxa_type_match+0x5e>
   138ee:	9301      	str	r3, [sp, #4]
   138f0:	4c01      	ldr	r4, [pc, #4]	; (138f8 <__cxa_type_match+0xb4>)
   138f2:	e7b1      	b.n	13858 <__cxa_type_match+0x14>
   138f4:	00023940 	.word	0x00023940
   138f8:	00023938 	.word	0x00023938

000138fc <__cxa_begin_cleanup>:
   138fc:	b510      	push	{r4, lr}
   138fe:	4604      	mov	r4, r0
   13900:	f000 f98c 	bl	13c1c <__cxa_get_globals>
   13904:	7823      	ldrb	r3, [r4, #0]
   13906:	2b47      	cmp	r3, #71	; 0x47
   13908:	f1a4 0220 	sub.w	r2, r4, #32
   1390c:	d004      	beq.n	13918 <__cxa_begin_cleanup+0x1c>
   1390e:	6883      	ldr	r3, [r0, #8]
   13910:	bb23      	cbnz	r3, 1395c <__cxa_begin_cleanup+0x60>
   13912:	6082      	str	r2, [r0, #8]
   13914:	2001      	movs	r0, #1
   13916:	bd10      	pop	{r4, pc}
   13918:	7863      	ldrb	r3, [r4, #1]
   1391a:	2b4e      	cmp	r3, #78	; 0x4e
   1391c:	d1f7      	bne.n	1390e <__cxa_begin_cleanup+0x12>
   1391e:	78a3      	ldrb	r3, [r4, #2]
   13920:	2b55      	cmp	r3, #85	; 0x55
   13922:	d1f4      	bne.n	1390e <__cxa_begin_cleanup+0x12>
   13924:	78e3      	ldrb	r3, [r4, #3]
   13926:	2b43      	cmp	r3, #67	; 0x43
   13928:	d1f1      	bne.n	1390e <__cxa_begin_cleanup+0x12>
   1392a:	7923      	ldrb	r3, [r4, #4]
   1392c:	2b43      	cmp	r3, #67	; 0x43
   1392e:	d1ee      	bne.n	1390e <__cxa_begin_cleanup+0x12>
   13930:	7963      	ldrb	r3, [r4, #5]
   13932:	2b2b      	cmp	r3, #43	; 0x2b
   13934:	d1eb      	bne.n	1390e <__cxa_begin_cleanup+0x12>
   13936:	79a3      	ldrb	r3, [r4, #6]
   13938:	2b2b      	cmp	r3, #43	; 0x2b
   1393a:	d1e8      	bne.n	1390e <__cxa_begin_cleanup+0x12>
   1393c:	79e3      	ldrb	r3, [r4, #7]
   1393e:	2b01      	cmp	r3, #1
   13940:	d8e5      	bhi.n	1390e <__cxa_begin_cleanup+0x12>
   13942:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13946:	3301      	adds	r3, #1
   13948:	2b01      	cmp	r3, #1
   1394a:	f844 3c04 	str.w	r3, [r4, #-4]
   1394e:	d1e1      	bne.n	13914 <__cxa_begin_cleanup+0x18>
   13950:	6883      	ldr	r3, [r0, #8]
   13952:	f844 3c08 	str.w	r3, [r4, #-8]
   13956:	6082      	str	r2, [r0, #8]
   13958:	2001      	movs	r0, #1
   1395a:	bd10      	pop	{r4, pc}
   1395c:	f7ff fd78 	bl	13450 <_ZSt9terminatev>

00013960 <__gnu_end_cleanup>:
   13960:	b508      	push	{r3, lr}
   13962:	f000 f95b 	bl	13c1c <__cxa_get_globals>
   13966:	6883      	ldr	r3, [r0, #8]
   13968:	b383      	cbz	r3, 139cc <__gnu_end_cleanup+0x6c>
   1396a:	f893 2020 	ldrb.w	r2, [r3, #32]
   1396e:	2a47      	cmp	r2, #71	; 0x47
   13970:	d004      	beq.n	1397c <__gnu_end_cleanup+0x1c>
   13972:	2200      	movs	r2, #0
   13974:	6082      	str	r2, [r0, #8]
   13976:	f103 0020 	add.w	r0, r3, #32
   1397a:	bd08      	pop	{r3, pc}
   1397c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13980:	2a4e      	cmp	r2, #78	; 0x4e
   13982:	d1f6      	bne.n	13972 <__gnu_end_cleanup+0x12>
   13984:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13988:	2a55      	cmp	r2, #85	; 0x55
   1398a:	d1f2      	bne.n	13972 <__gnu_end_cleanup+0x12>
   1398c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13990:	2a43      	cmp	r2, #67	; 0x43
   13992:	d1ee      	bne.n	13972 <__gnu_end_cleanup+0x12>
   13994:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13998:	2a43      	cmp	r2, #67	; 0x43
   1399a:	d1ea      	bne.n	13972 <__gnu_end_cleanup+0x12>
   1399c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   139a0:	2a2b      	cmp	r2, #43	; 0x2b
   139a2:	d1e6      	bne.n	13972 <__gnu_end_cleanup+0x12>
   139a4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   139a8:	2a2b      	cmp	r2, #43	; 0x2b
   139aa:	d1e2      	bne.n	13972 <__gnu_end_cleanup+0x12>
   139ac:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   139b0:	2a01      	cmp	r2, #1
   139b2:	d8de      	bhi.n	13972 <__gnu_end_cleanup+0x12>
   139b4:	69da      	ldr	r2, [r3, #28]
   139b6:	3a01      	subs	r2, #1
   139b8:	61da      	str	r2, [r3, #28]
   139ba:	2a00      	cmp	r2, #0
   139bc:	d1db      	bne.n	13976 <__gnu_end_cleanup+0x16>
   139be:	699a      	ldr	r2, [r3, #24]
   139c0:	6082      	str	r2, [r0, #8]
   139c2:	2200      	movs	r2, #0
   139c4:	619a      	str	r2, [r3, #24]
   139c6:	f103 0020 	add.w	r0, r3, #32
   139ca:	bd08      	pop	{r3, pc}
   139cc:	f7ff fd40 	bl	13450 <_ZSt9terminatev>

000139d0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   139d0:	7803      	ldrb	r3, [r0, #0]
   139d2:	2b47      	cmp	r3, #71	; 0x47
   139d4:	d001      	beq.n	139da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   139d6:	2000      	movs	r0, #0
   139d8:	4770      	bx	lr
   139da:	7843      	ldrb	r3, [r0, #1]
   139dc:	2b4e      	cmp	r3, #78	; 0x4e
   139de:	d1fa      	bne.n	139d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   139e0:	7883      	ldrb	r3, [r0, #2]
   139e2:	2b55      	cmp	r3, #85	; 0x55
   139e4:	d1f7      	bne.n	139d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   139e6:	78c3      	ldrb	r3, [r0, #3]
   139e8:	2b43      	cmp	r3, #67	; 0x43
   139ea:	d1f4      	bne.n	139d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   139ec:	7903      	ldrb	r3, [r0, #4]
   139ee:	2b43      	cmp	r3, #67	; 0x43
   139f0:	d1f1      	bne.n	139d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   139f2:	7943      	ldrb	r3, [r0, #5]
   139f4:	2b2b      	cmp	r3, #43	; 0x2b
   139f6:	d1ee      	bne.n	139d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   139f8:	7983      	ldrb	r3, [r0, #6]
   139fa:	2b2b      	cmp	r3, #43	; 0x2b
   139fc:	d1eb      	bne.n	139d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   139fe:	79c0      	ldrb	r0, [r0, #7]
   13a00:	2801      	cmp	r0, #1
   13a02:	bf8c      	ite	hi
   13a04:	2000      	movhi	r0, #0
   13a06:	2001      	movls	r0, #1
   13a08:	4770      	bx	lr
   13a0a:	bf00      	nop

00013a0c <__cxa_call_terminate>:
   13a0c:	b510      	push	{r4, lr}
   13a0e:	b130      	cbz	r0, 13a1e <__cxa_call_terminate+0x12>
   13a10:	4604      	mov	r4, r0
   13a12:	f000 f87b 	bl	13b0c <__cxa_begin_catch>
   13a16:	4620      	mov	r0, r4
   13a18:	f7ff ffda 	bl	139d0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13a1c:	b908      	cbnz	r0, 13a22 <__cxa_call_terminate+0x16>
   13a1e:	f7ff fd17 	bl	13450 <_ZSt9terminatev>
   13a22:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13a26:	f7ff fcff 	bl	13428 <_ZN10__cxxabiv111__terminateEPFvvE>
   13a2a:	bf00      	nop

00013a2c <__cxa_call_unexpected>:
   13a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a30:	b085      	sub	sp, #20
   13a32:	4602      	mov	r2, r0
   13a34:	f7ff ffcc 	bl	139d0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13a38:	b160      	cbz	r0, 13a54 <__cxa_call_unexpected+0x28>
   13a3a:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13a3e:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13a42:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13a44:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13a46:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13a48:	4610      	mov	r0, r2
   13a4a:	f000 f85f 	bl	13b0c <__cxa_begin_catch>
   13a4e:	4640      	mov	r0, r8
   13a50:	f7ff fd08 	bl	13464 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13a54:	4610      	mov	r0, r2
   13a56:	f000 f859 	bl	13b0c <__cxa_begin_catch>
   13a5a:	f7ff fd07 	bl	1346c <_ZSt10unexpectedv>
   13a5e:	f000 f855 	bl	13b0c <__cxa_begin_catch>
   13a62:	f7ff fcf5 	bl	13450 <_ZSt9terminatev>
   13a66:	f000 f851 	bl	13b0c <__cxa_begin_catch>
   13a6a:	f000 f8d3 	bl	13c14 <__cxa_get_globals_fast>
   13a6e:	6803      	ldr	r3, [r0, #0]
   13a70:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13a74:	2a01      	cmp	r2, #1
   13a76:	d036      	beq.n	13ae6 <__cxa_call_unexpected+0xba>
   13a78:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13a7c:	f10d 0a10 	add.w	sl, sp, #16
   13a80:	f04f 0800 	mov.w	r8, #0
   13a84:	3320      	adds	r3, #32
   13a86:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13a8a:	f027 0b03 	bic.w	fp, r7, #3
   13a8e:	9301      	str	r3, [sp, #4]
   13a90:	46c1      	mov	r9, r8
   13a92:	45b1      	cmp	r9, r6
   13a94:	da1b      	bge.n	13ace <__cxa_call_unexpected+0xa2>
   13a96:	6827      	ldr	r7, [r4, #0]
   13a98:	b107      	cbz	r7, 13a9c <__cxa_call_unexpected+0x70>
   13a9a:	4427      	add	r7, r4
   13a9c:	4653      	mov	r3, sl
   13a9e:	2200      	movs	r2, #0
   13aa0:	4639      	mov	r1, r7
   13aa2:	9801      	ldr	r0, [sp, #4]
   13aa4:	f7ff fece 	bl	13844 <__cxa_type_match>
   13aa8:	bb10      	cbnz	r0, 13af0 <__cxa_call_unexpected+0xc4>
   13aaa:	683b      	ldr	r3, [r7, #0]
   13aac:	4914      	ldr	r1, [pc, #80]	; (13b00 <__cxa_call_unexpected+0xd4>)
   13aae:	691b      	ldr	r3, [r3, #16]
   13ab0:	9300      	str	r3, [sp, #0]
   13ab2:	aa04      	add	r2, sp, #16
   13ab4:	2301      	movs	r3, #1
   13ab6:	f842 0d04 	str.w	r0, [r2, #-4]!
   13aba:	4638      	mov	r0, r7
   13abc:	9f00      	ldr	r7, [sp, #0]
   13abe:	47b8      	blx	r7
   13ac0:	2800      	cmp	r0, #0
   13ac2:	bf18      	it	ne
   13ac4:	4680      	movne	r8, r0
   13ac6:	f109 0901 	add.w	r9, r9, #1
   13aca:	445c      	add	r4, fp
   13acc:	e7e1      	b.n	13a92 <__cxa_call_unexpected+0x66>
   13ace:	f1b8 0f00 	cmp.w	r8, #0
   13ad2:	d00a      	beq.n	13aea <__cxa_call_unexpected+0xbe>
   13ad4:	2004      	movs	r0, #4
   13ad6:	f7ff fc5b 	bl	13390 <__cxa_allocate_exception>
   13ada:	4b0a      	ldr	r3, [pc, #40]	; (13b04 <__cxa_call_unexpected+0xd8>)
   13adc:	6003      	str	r3, [r0, #0]
   13ade:	4a0a      	ldr	r2, [pc, #40]	; (13b08 <__cxa_call_unexpected+0xdc>)
   13ae0:	4907      	ldr	r1, [pc, #28]	; (13b00 <__cxa_call_unexpected+0xd4>)
   13ae2:	f7ff fcff 	bl	134e4 <__cxa_throw>
   13ae6:	681a      	ldr	r2, [r3, #0]
   13ae8:	e7c8      	b.n	13a7c <__cxa_call_unexpected+0x50>
   13aea:	4628      	mov	r0, r5
   13aec:	f7ff fc9c 	bl	13428 <_ZN10__cxxabiv111__terminateEPFvvE>
   13af0:	f7ff fd36 	bl	13560 <__cxa_rethrow>
   13af4:	f000 f848 	bl	13b88 <__cxa_end_catch>
   13af8:	f000 f846 	bl	13b88 <__cxa_end_catch>
   13afc:	f7ff fe9c 	bl	13838 <__cxa_end_cleanup>
   13b00:	00023948 	.word	0x00023948
   13b04:	000239cc 	.word	0x000239cc
   13b08:	0001340d 	.word	0x0001340d

00013b0c <__cxa_begin_catch>:
   13b0c:	b538      	push	{r3, r4, r5, lr}
   13b0e:	4604      	mov	r4, r0
   13b10:	f000 f884 	bl	13c1c <__cxa_get_globals>
   13b14:	7822      	ldrb	r2, [r4, #0]
   13b16:	6803      	ldr	r3, [r0, #0]
   13b18:	2a47      	cmp	r2, #71	; 0x47
   13b1a:	f1a4 0120 	sub.w	r1, r4, #32
   13b1e:	d004      	beq.n	13b2a <__cxa_begin_catch+0x1e>
   13b20:	bb83      	cbnz	r3, 13b84 <__cxa_begin_catch+0x78>
   13b22:	461c      	mov	r4, r3
   13b24:	6001      	str	r1, [r0, #0]
   13b26:	4620      	mov	r0, r4
   13b28:	bd38      	pop	{r3, r4, r5, pc}
   13b2a:	7862      	ldrb	r2, [r4, #1]
   13b2c:	2a4e      	cmp	r2, #78	; 0x4e
   13b2e:	d1f7      	bne.n	13b20 <__cxa_begin_catch+0x14>
   13b30:	78a2      	ldrb	r2, [r4, #2]
   13b32:	2a55      	cmp	r2, #85	; 0x55
   13b34:	d1f4      	bne.n	13b20 <__cxa_begin_catch+0x14>
   13b36:	78e2      	ldrb	r2, [r4, #3]
   13b38:	2a43      	cmp	r2, #67	; 0x43
   13b3a:	d1f1      	bne.n	13b20 <__cxa_begin_catch+0x14>
   13b3c:	7922      	ldrb	r2, [r4, #4]
   13b3e:	2a43      	cmp	r2, #67	; 0x43
   13b40:	d1ee      	bne.n	13b20 <__cxa_begin_catch+0x14>
   13b42:	7962      	ldrb	r2, [r4, #5]
   13b44:	2a2b      	cmp	r2, #43	; 0x2b
   13b46:	d1eb      	bne.n	13b20 <__cxa_begin_catch+0x14>
   13b48:	79a2      	ldrb	r2, [r4, #6]
   13b4a:	2a2b      	cmp	r2, #43	; 0x2b
   13b4c:	d1e8      	bne.n	13b20 <__cxa_begin_catch+0x14>
   13b4e:	79e2      	ldrb	r2, [r4, #7]
   13b50:	2a01      	cmp	r2, #1
   13b52:	d8e5      	bhi.n	13b20 <__cxa_begin_catch+0x14>
   13b54:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13b58:	2a00      	cmp	r2, #0
   13b5a:	db10      	blt.n	13b7e <__cxa_begin_catch+0x72>
   13b5c:	3201      	adds	r2, #1
   13b5e:	6845      	ldr	r5, [r0, #4]
   13b60:	f844 2c0c 	str.w	r2, [r4, #-12]
   13b64:	3d01      	subs	r5, #1
   13b66:	6045      	str	r5, [r0, #4]
   13b68:	428b      	cmp	r3, r1
   13b6a:	bf1c      	itt	ne
   13b6c:	f844 3c10 	strne.w	r3, [r4, #-16]
   13b70:	6001      	strne	r1, [r0, #0]
   13b72:	4620      	mov	r0, r4
   13b74:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13b76:	f008 ff91 	bl	1ca9c <_Unwind_Complete>
   13b7a:	4620      	mov	r0, r4
   13b7c:	bd38      	pop	{r3, r4, r5, pc}
   13b7e:	f1c2 0201 	rsb	r2, r2, #1
   13b82:	e7ec      	b.n	13b5e <__cxa_begin_catch+0x52>
   13b84:	f7ff fc64 	bl	13450 <_ZSt9terminatev>

00013b88 <__cxa_end_catch>:
   13b88:	b508      	push	{r3, lr}
   13b8a:	f000 f843 	bl	13c14 <__cxa_get_globals_fast>
   13b8e:	4602      	mov	r2, r0
   13b90:	6800      	ldr	r0, [r0, #0]
   13b92:	2800      	cmp	r0, #0
   13b94:	d03d      	beq.n	13c12 <__cxa_end_catch+0x8a>
   13b96:	f890 3020 	ldrb.w	r3, [r0, #32]
   13b9a:	2b47      	cmp	r3, #71	; 0x47
   13b9c:	d006      	beq.n	13bac <__cxa_end_catch+0x24>
   13b9e:	2300      	movs	r3, #0
   13ba0:	6013      	str	r3, [r2, #0]
   13ba2:	3020      	adds	r0, #32
   13ba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13ba8:	f008 bf7a 	b.w	1caa0 <_Unwind_DeleteException>
   13bac:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13bb0:	2b4e      	cmp	r3, #78	; 0x4e
   13bb2:	d1f4      	bne.n	13b9e <__cxa_end_catch+0x16>
   13bb4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13bb8:	2b55      	cmp	r3, #85	; 0x55
   13bba:	d1f0      	bne.n	13b9e <__cxa_end_catch+0x16>
   13bbc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13bc0:	2b43      	cmp	r3, #67	; 0x43
   13bc2:	d1ec      	bne.n	13b9e <__cxa_end_catch+0x16>
   13bc4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13bc8:	2b43      	cmp	r3, #67	; 0x43
   13bca:	d1e8      	bne.n	13b9e <__cxa_end_catch+0x16>
   13bcc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13bd0:	2b2b      	cmp	r3, #43	; 0x2b
   13bd2:	d1e4      	bne.n	13b9e <__cxa_end_catch+0x16>
   13bd4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13bd8:	2b2b      	cmp	r3, #43	; 0x2b
   13bda:	d1e0      	bne.n	13b9e <__cxa_end_catch+0x16>
   13bdc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13be0:	2b01      	cmp	r3, #1
   13be2:	d8dc      	bhi.n	13b9e <__cxa_end_catch+0x16>
   13be4:	6943      	ldr	r3, [r0, #20]
   13be6:	2b00      	cmp	r3, #0
   13be8:	db05      	blt.n	13bf6 <__cxa_end_catch+0x6e>
   13bea:	3b01      	subs	r3, #1
   13bec:	d008      	beq.n	13c00 <__cxa_end_catch+0x78>
   13bee:	1c5a      	adds	r2, r3, #1
   13bf0:	d00d      	beq.n	13c0e <__cxa_end_catch+0x86>
   13bf2:	6143      	str	r3, [r0, #20]
   13bf4:	bd08      	pop	{r3, pc}
   13bf6:	3301      	adds	r3, #1
   13bf8:	d1fb      	bne.n	13bf2 <__cxa_end_catch+0x6a>
   13bfa:	6901      	ldr	r1, [r0, #16]
   13bfc:	6011      	str	r1, [r2, #0]
   13bfe:	e7f8      	b.n	13bf2 <__cxa_end_catch+0x6a>
   13c00:	6903      	ldr	r3, [r0, #16]
   13c02:	6013      	str	r3, [r2, #0]
   13c04:	3020      	adds	r0, #32
   13c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13c0a:	f008 bf49 	b.w	1caa0 <_Unwind_DeleteException>
   13c0e:	f7ff fc1f 	bl	13450 <_ZSt9terminatev>
   13c12:	bd08      	pop	{r3, pc}

00013c14 <__cxa_get_globals_fast>:
   13c14:	4800      	ldr	r0, [pc, #0]	; (13c18 <__cxa_get_globals_fast+0x4>)
   13c16:	4770      	bx	lr
   13c18:	200022a8 	.word	0x200022a8

00013c1c <__cxa_get_globals>:
   13c1c:	4800      	ldr	r0, [pc, #0]	; (13c20 <__cxa_get_globals+0x4>)
   13c1e:	4770      	bx	lr
   13c20:	200022a8 	.word	0x200022a8

00013c24 <_ZL28read_encoded_value_with_basehjPKhPj>:
   13c24:	2850      	cmp	r0, #80	; 0x50
   13c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c28:	d054      	beq.n	13cd4 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   13c2a:	f000 040f 	and.w	r4, r0, #15
   13c2e:	2c0c      	cmp	r4, #12
   13c30:	d84e      	bhi.n	13cd0 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   13c32:	e8df f004 	tbb	[pc, r4]
   13c36:	3907      	.short	0x3907
   13c38:	4d170749 	.word	0x4d170749
   13c3c:	1f4d4d4d 	.word	0x1f4d4d4d
   13c40:	071b      	.short	0x071b
   13c42:	17          	.byte	0x17
   13c43:	00          	.byte	0x00
   13c44:	4615      	mov	r5, r2
   13c46:	f855 4b04 	ldr.w	r4, [r5], #4
   13c4a:	b144      	cbz	r4, 13c5e <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   13c4c:	f000 0670 	and.w	r6, r0, #112	; 0x70
   13c50:	2e10      	cmp	r6, #16
   13c52:	bf08      	it	eq
   13c54:	4611      	moveq	r1, r2
   13c56:	440c      	add	r4, r1
   13c58:	0602      	lsls	r2, r0, #24
   13c5a:	bf48      	it	mi
   13c5c:	6824      	ldrmi	r4, [r4, #0]
   13c5e:	601c      	str	r4, [r3, #0]
   13c60:	4628      	mov	r0, r5
   13c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c64:	4615      	mov	r5, r2
   13c66:	f855 4b08 	ldr.w	r4, [r5], #8
   13c6a:	e7ee      	b.n	13c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13c6c:	4615      	mov	r5, r2
   13c6e:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13c72:	e7ea      	b.n	13c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13c74:	2400      	movs	r4, #0
   13c76:	4627      	mov	r7, r4
   13c78:	4615      	mov	r5, r2
   13c7a:	f815 eb01 	ldrb.w	lr, [r5], #1
   13c7e:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13c82:	40be      	lsls	r6, r7
   13c84:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13c88:	ea44 0406 	orr.w	r4, r4, r6
   13c8c:	f107 0707 	add.w	r7, r7, #7
   13c90:	d1f3      	bne.n	13c7a <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13c92:	2f1f      	cmp	r7, #31
   13c94:	d8d9      	bhi.n	13c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13c96:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13c9a:	d0d6      	beq.n	13c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13c9c:	f04f 36ff 	mov.w	r6, #4294967295
   13ca0:	fa06 f707 	lsl.w	r7, r6, r7
   13ca4:	433c      	orrs	r4, r7
   13ca6:	e7d1      	b.n	13c4c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13ca8:	2400      	movs	r4, #0
   13caa:	4627      	mov	r7, r4
   13cac:	4615      	mov	r5, r2
   13cae:	f815 eb01 	ldrb.w	lr, [r5], #1
   13cb2:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13cb6:	40be      	lsls	r6, r7
   13cb8:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13cbc:	ea44 0406 	orr.w	r4, r4, r6
   13cc0:	f107 0707 	add.w	r7, r7, #7
   13cc4:	d1f3      	bne.n	13cae <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13cc6:	e7c0      	b.n	13c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13cc8:	4615      	mov	r5, r2
   13cca:	f835 4b02 	ldrh.w	r4, [r5], #2
   13cce:	e7bc      	b.n	13c4a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13cd0:	f009 fc9c 	bl	1d60c <abort>
   13cd4:	3203      	adds	r2, #3
   13cd6:	f022 0503 	bic.w	r5, r2, #3
   13cda:	f855 4b04 	ldr.w	r4, [r5], #4
   13cde:	601c      	str	r4, [r3, #0]
   13ce0:	4628      	mov	r0, r5
   13ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13ce4:	28ff      	cmp	r0, #255	; 0xff
   13ce6:	d00d      	beq.n	13d04 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13ce8:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13cec:	2820      	cmp	r0, #32
   13cee:	d015      	beq.n	13d1c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13cf0:	d90a      	bls.n	13d08 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13cf2:	2840      	cmp	r0, #64	; 0x40
   13cf4:	d00f      	beq.n	13d16 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13cf6:	2850      	cmp	r0, #80	; 0x50
   13cf8:	d004      	beq.n	13d04 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13cfa:	2830      	cmp	r0, #48	; 0x30
   13cfc:	d108      	bne.n	13d10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13cfe:	4608      	mov	r0, r1
   13d00:	f009 bc7e 	b.w	1d600 <_Unwind_GetDataRelBase>
   13d04:	2000      	movs	r0, #0
   13d06:	4770      	bx	lr
   13d08:	2800      	cmp	r0, #0
   13d0a:	d0fb      	beq.n	13d04 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13d0c:	2810      	cmp	r0, #16
   13d0e:	d0f9      	beq.n	13d04 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13d10:	b508      	push	{r3, lr}
   13d12:	f009 fc7b 	bl	1d60c <abort>
   13d16:	4608      	mov	r0, r1
   13d18:	f009 bc5e 	b.w	1d5d8 <_Unwind_GetRegionStart>
   13d1c:	4608      	mov	r0, r1
   13d1e:	f009 bc6b 	b.w	1d5f8 <_Unwind_GetTextRelBase>
   13d22:	bf00      	nop

00013d24 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d26:	460c      	mov	r4, r1
   13d28:	4615      	mov	r5, r2
   13d2a:	4607      	mov	r7, r0
   13d2c:	2800      	cmp	r0, #0
   13d2e:	d044      	beq.n	13dba <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13d30:	f009 fc52 	bl	1d5d8 <_Unwind_GetRegionStart>
   13d34:	6028      	str	r0, [r5, #0]
   13d36:	7826      	ldrb	r6, [r4, #0]
   13d38:	2eff      	cmp	r6, #255	; 0xff
   13d3a:	f104 0401 	add.w	r4, r4, #1
   13d3e:	d032      	beq.n	13da6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   13d40:	4639      	mov	r1, r7
   13d42:	4630      	mov	r0, r6
   13d44:	f7ff ffce 	bl	13ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13d48:	4622      	mov	r2, r4
   13d4a:	4601      	mov	r1, r0
   13d4c:	1d2b      	adds	r3, r5, #4
   13d4e:	4630      	mov	r0, r6
   13d50:	f7ff ff68 	bl	13c24 <_ZL28read_encoded_value_with_basehjPKhPj>
   13d54:	4604      	mov	r4, r0
   13d56:	1c60      	adds	r0, r4, #1
   13d58:	7823      	ldrb	r3, [r4, #0]
   13d5a:	752b      	strb	r3, [r5, #20]
   13d5c:	2bff      	cmp	r3, #255	; 0xff
   13d5e:	d029      	beq.n	13db4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   13d60:	2310      	movs	r3, #16
   13d62:	2400      	movs	r4, #0
   13d64:	752b      	strb	r3, [r5, #20]
   13d66:	4622      	mov	r2, r4
   13d68:	f810 1b01 	ldrb.w	r1, [r0], #1
   13d6c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13d70:	4093      	lsls	r3, r2
   13d72:	0609      	lsls	r1, r1, #24
   13d74:	ea44 0403 	orr.w	r4, r4, r3
   13d78:	f102 0207 	add.w	r2, r2, #7
   13d7c:	d4f4      	bmi.n	13d68 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   13d7e:	4404      	add	r4, r0
   13d80:	60ec      	str	r4, [r5, #12]
   13d82:	7803      	ldrb	r3, [r0, #0]
   13d84:	756b      	strb	r3, [r5, #21]
   13d86:	2400      	movs	r4, #0
   13d88:	3001      	adds	r0, #1
   13d8a:	4622      	mov	r2, r4
   13d8c:	f810 1b01 	ldrb.w	r1, [r0], #1
   13d90:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13d94:	4093      	lsls	r3, r2
   13d96:	431c      	orrs	r4, r3
   13d98:	060b      	lsls	r3, r1, #24
   13d9a:	f102 0207 	add.w	r2, r2, #7
   13d9e:	d4f5      	bmi.n	13d8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   13da0:	4404      	add	r4, r0
   13da2:	612c      	str	r4, [r5, #16]
   13da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13da6:	6068      	str	r0, [r5, #4]
   13da8:	7823      	ldrb	r3, [r4, #0]
   13daa:	752b      	strb	r3, [r5, #20]
   13dac:	2bff      	cmp	r3, #255	; 0xff
   13dae:	f104 0001 	add.w	r0, r4, #1
   13db2:	d1d5      	bne.n	13d60 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   13db4:	2300      	movs	r3, #0
   13db6:	60eb      	str	r3, [r5, #12]
   13db8:	e7e3      	b.n	13d82 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   13dba:	e7bb      	b.n	13d34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00013dbc <__gxx_personality_v0>:
   13dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dc0:	f000 0403 	and.w	r4, r0, #3
   13dc4:	b097      	sub	sp, #92	; 0x5c
   13dc6:	2300      	movs	r3, #0
   13dc8:	2c01      	cmp	r4, #1
   13dca:	4689      	mov	r9, r1
   13dcc:	4617      	mov	r7, r2
   13dce:	930a      	str	r3, [sp, #40]	; 0x28
   13dd0:	d01e      	beq.n	13e10 <__gxx_personality_v0+0x54>
   13dd2:	d30e      	bcc.n	13df2 <__gxx_personality_v0+0x36>
   13dd4:	2c02      	cmp	r4, #2
   13dd6:	d10a      	bne.n	13dee <__gxx_personality_v0+0x32>
   13dd8:	4639      	mov	r1, r7
   13dda:	4648      	mov	r0, r9
   13ddc:	f009 fbe8 	bl	1d5b0 <__gnu_unwind_frame>
   13de0:	2800      	cmp	r0, #0
   13de2:	f000 80a5 	beq.w	13f30 <__gxx_personality_v0+0x174>
   13de6:	2009      	movs	r0, #9
   13de8:	b017      	add	sp, #92	; 0x5c
   13dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dee:	f009 fc0d 	bl	1d60c <abort>
   13df2:	0700      	lsls	r0, r0, #28
   13df4:	d4f0      	bmi.n	13dd8 <__gxx_personality_v0+0x1c>
   13df6:	2301      	movs	r3, #1
   13df8:	9303      	str	r3, [sp, #12]
   13dfa:	aa16      	add	r2, sp, #88	; 0x58
   13dfc:	2300      	movs	r3, #0
   13dfe:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13e02:	4619      	mov	r1, r3
   13e04:	9200      	str	r2, [sp, #0]
   13e06:	4638      	mov	r0, r7
   13e08:	220c      	movs	r2, #12
   13e0a:	f008 fe75 	bl	1caf8 <_Unwind_VRS_Set>
   13e0e:	e00f      	b.n	13e30 <__gxx_personality_v0+0x74>
   13e10:	f010 0408 	ands.w	r4, r0, #8
   13e14:	f000 8090 	beq.w	13f38 <__gxx_personality_v0+0x17c>
   13e18:	aa16      	add	r2, sp, #88	; 0x58
   13e1a:	f044 0402 	orr.w	r4, r4, #2
   13e1e:	f842 1d2c 	str.w	r1, [r2, #-44]!
   13e22:	4638      	mov	r0, r7
   13e24:	9200      	str	r2, [sp, #0]
   13e26:	4619      	mov	r1, r3
   13e28:	220c      	movs	r2, #12
   13e2a:	9403      	str	r4, [sp, #12]
   13e2c:	f008 fe64 	bl	1caf8 <_Unwind_VRS_Set>
   13e30:	4638      	mov	r0, r7
   13e32:	f009 fbd7 	bl	1d5e4 <_Unwind_GetLanguageSpecificData>
   13e36:	9005      	str	r0, [sp, #20]
   13e38:	2800      	cmp	r0, #0
   13e3a:	d0cd      	beq.n	13dd8 <__gxx_personality_v0+0x1c>
   13e3c:	ab10      	add	r3, sp, #64	; 0x40
   13e3e:	461a      	mov	r2, r3
   13e40:	9905      	ldr	r1, [sp, #20]
   13e42:	9306      	str	r3, [sp, #24]
   13e44:	4638      	mov	r0, r7
   13e46:	f7ff ff6d 	bl	13d24 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   13e4a:	4639      	mov	r1, r7
   13e4c:	4604      	mov	r4, r0
   13e4e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   13e52:	f7ff ff47 	bl	13ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13e56:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   13e5a:	2300      	movs	r3, #0
   13e5c:	9012      	str	r0, [sp, #72]	; 0x48
   13e5e:	4619      	mov	r1, r3
   13e60:	220f      	movs	r2, #15
   13e62:	f8cd b000 	str.w	fp, [sp]
   13e66:	4638      	mov	r0, r7
   13e68:	f008 fe20 	bl	1caac <_Unwind_VRS_Get>
   13e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13e6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13e70:	f023 0301 	bic.w	r3, r3, #1
   13e74:	42a2      	cmp	r2, r4
   13e76:	f103 36ff 	add.w	r6, r3, #4294967295
   13e7a:	d975      	bls.n	13f68 <__gxx_personality_v0+0x1ac>
   13e7c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13e80:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13e84:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   13e88:	2100      	movs	r1, #0
   13e8a:	4628      	mov	r0, r5
   13e8c:	f7ff ff2a 	bl	13ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13e90:	4622      	mov	r2, r4
   13e92:	4653      	mov	r3, sl
   13e94:	4601      	mov	r1, r0
   13e96:	4628      	mov	r0, r5
   13e98:	f7ff fec4 	bl	13c24 <_ZL28read_encoded_value_with_basehjPKhPj>
   13e9c:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13ea0:	4605      	mov	r5, r0
   13ea2:	2100      	movs	r1, #0
   13ea4:	4620      	mov	r0, r4
   13ea6:	f7ff ff1d 	bl	13ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13eaa:	462a      	mov	r2, r5
   13eac:	4643      	mov	r3, r8
   13eae:	4601      	mov	r1, r0
   13eb0:	4620      	mov	r0, r4
   13eb2:	f7ff feb7 	bl	13c24 <_ZL28read_encoded_value_with_basehjPKhPj>
   13eb6:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13eba:	4605      	mov	r5, r0
   13ebc:	2100      	movs	r1, #0
   13ebe:	4620      	mov	r0, r4
   13ec0:	f7ff ff10 	bl	13ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13ec4:	462a      	mov	r2, r5
   13ec6:	4601      	mov	r1, r0
   13ec8:	465b      	mov	r3, fp
   13eca:	4620      	mov	r0, r4
   13ecc:	f7ff feaa 	bl	13c24 <_ZL28read_encoded_value_with_basehjPKhPj>
   13ed0:	4604      	mov	r4, r0
   13ed2:	2000      	movs	r0, #0
   13ed4:	4602      	mov	r2, r0
   13ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
   13eda:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13ede:	4093      	lsls	r3, r2
   13ee0:	0609      	lsls	r1, r1, #24
   13ee2:	ea40 0003 	orr.w	r0, r0, r3
   13ee6:	f102 0207 	add.w	r2, r2, #7
   13eea:	d4f4      	bmi.n	13ed6 <__gxx_personality_v0+0x11a>
   13eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13eee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13ef0:	4413      	add	r3, r2
   13ef2:	429e      	cmp	r6, r3
   13ef4:	d231      	bcs.n	13f5a <__gxx_personality_v0+0x19e>
   13ef6:	9b03      	ldr	r3, [sp, #12]
   13ef8:	07db      	lsls	r3, r3, #31
   13efa:	d539      	bpl.n	13f70 <__gxx_personality_v0+0x1b4>
   13efc:	2500      	movs	r5, #0
   13efe:	9504      	str	r5, [sp, #16]
   13f00:	2300      	movs	r3, #0
   13f02:	4619      	mov	r1, r3
   13f04:	220d      	movs	r2, #13
   13f06:	f8cd 8000 	str.w	r8, [sp]
   13f0a:	4638      	mov	r0, r7
   13f0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13f0e:	f008 fdcd 	bl	1caac <_Unwind_VRS_Get>
   13f12:	9a05      	ldr	r2, [sp, #20]
   13f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f16:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   13f1a:	9a04      	ldr	r2, [sp, #16]
   13f1c:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   13f20:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   13f24:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   13f28:	f8c9 3020 	str.w	r3, [r9, #32]
   13f2c:	2006      	movs	r0, #6
   13f2e:	e75b      	b.n	13de8 <__gxx_personality_v0+0x2c>
   13f30:	2008      	movs	r0, #8
   13f32:	b017      	add	sp, #92	; 0x5c
   13f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f38:	ab10      	add	r3, sp, #64	; 0x40
   13f3a:	9300      	str	r3, [sp, #0]
   13f3c:	9306      	str	r3, [sp, #24]
   13f3e:	220d      	movs	r2, #13
   13f40:	4623      	mov	r3, r4
   13f42:	4621      	mov	r1, r4
   13f44:	4638      	mov	r0, r7
   13f46:	f8d9 5020 	ldr.w	r5, [r9, #32]
   13f4a:	f008 fdaf 	bl	1caac <_Unwind_VRS_Get>
   13f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13f50:	429d      	cmp	r5, r3
   13f52:	d012      	beq.n	13f7a <__gxx_personality_v0+0x1be>
   13f54:	2302      	movs	r3, #2
   13f56:	9303      	str	r3, [sp, #12]
   13f58:	e74f      	b.n	13dfa <__gxx_personality_v0+0x3e>
   13f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13f5c:	4413      	add	r3, r2
   13f5e:	429e      	cmp	r6, r3
   13f60:	d359      	bcc.n	14016 <__gxx_personality_v0+0x25a>
   13f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13f64:	42a3      	cmp	r3, r4
   13f66:	d88d      	bhi.n	13e84 <__gxx_personality_v0+0xc8>
   13f68:	2500      	movs	r5, #0
   13f6a:	9504      	str	r5, [sp, #16]
   13f6c:	2401      	movs	r4, #1
   13f6e:	e105      	b.n	1417c <__gxx_personality_v0+0x3c0>
   13f70:	9b03      	ldr	r3, [sp, #12]
   13f72:	071b      	lsls	r3, r3, #28
   13f74:	d54c      	bpl.n	14010 <__gxx_personality_v0+0x254>
   13f76:	f7ff fa6b 	bl	13450 <_ZSt9terminatev>
   13f7a:	aa16      	add	r2, sp, #88	; 0x58
   13f7c:	4623      	mov	r3, r4
   13f7e:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13f82:	4621      	mov	r1, r4
   13f84:	9200      	str	r2, [sp, #0]
   13f86:	4638      	mov	r0, r7
   13f88:	220c      	movs	r2, #12
   13f8a:	f008 fdb5 	bl	1caf8 <_Unwind_VRS_Set>
   13f8e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   13f92:	9304      	str	r3, [sp, #16]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d03b      	beq.n	14010 <__gxx_personality_v0+0x254>
   13f98:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   13f9c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   13fa0:	2403      	movs	r4, #3
   13fa2:	2d00      	cmp	r5, #0
   13fa4:	f2c0 8106 	blt.w	141b4 <__gxx_personality_v0+0x3f8>
   13fa8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13fac:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13fb0:	a916      	add	r1, sp, #88	; 0x58
   13fb2:	2300      	movs	r3, #0
   13fb4:	f841 9d28 	str.w	r9, [r1, #-40]!
   13fb8:	461a      	mov	r2, r3
   13fba:	9100      	str	r1, [sp, #0]
   13fbc:	4638      	mov	r0, r7
   13fbe:	4619      	mov	r1, r3
   13fc0:	f008 fd9a 	bl	1caf8 <_Unwind_VRS_Set>
   13fc4:	2300      	movs	r3, #0
   13fc6:	4619      	mov	r1, r3
   13fc8:	2201      	movs	r2, #1
   13fca:	f8cd a000 	str.w	sl, [sp]
   13fce:	4638      	mov	r0, r7
   13fd0:	950d      	str	r5, [sp, #52]	; 0x34
   13fd2:	f008 fd91 	bl	1caf8 <_Unwind_VRS_Set>
   13fd6:	2300      	movs	r3, #0
   13fd8:	4619      	mov	r1, r3
   13fda:	220f      	movs	r2, #15
   13fdc:	f8cd 8000 	str.w	r8, [sp]
   13fe0:	4638      	mov	r0, r7
   13fe2:	f008 fd63 	bl	1caac <_Unwind_VRS_Get>
   13fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13fe8:	9a04      	ldr	r2, [sp, #16]
   13fea:	f8cd 8000 	str.w	r8, [sp]
   13fee:	f003 0501 	and.w	r5, r3, #1
   13ff2:	2300      	movs	r3, #0
   13ff4:	4315      	orrs	r5, r2
   13ff6:	4638      	mov	r0, r7
   13ff8:	4619      	mov	r1, r3
   13ffa:	220f      	movs	r2, #15
   13ffc:	950e      	str	r5, [sp, #56]	; 0x38
   13ffe:	f008 fd7b 	bl	1caf8 <_Unwind_VRS_Set>
   14002:	2c02      	cmp	r4, #2
   14004:	f000 8080 	beq.w	14108 <__gxx_personality_v0+0x34c>
   14008:	2007      	movs	r0, #7
   1400a:	b017      	add	sp, #92	; 0x5c
   1400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14010:	4648      	mov	r0, r9
   14012:	f7ff fcfb 	bl	13a0c <__cxa_call_terminate>
   14016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14018:	9304      	str	r3, [sp, #16]
   1401a:	461a      	mov	r2, r3
   1401c:	2b00      	cmp	r3, #0
   1401e:	d178      	bne.n	14112 <__gxx_personality_v0+0x356>
   14020:	2800      	cmp	r0, #0
   14022:	f43f aed9 	beq.w	13dd8 <__gxx_personality_v0+0x1c>
   14026:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14028:	9a04      	ldr	r2, [sp, #16]
   1402a:	3801      	subs	r0, #1
   1402c:	4403      	add	r3, r0
   1402e:	2a00      	cmp	r2, #0
   14030:	f43f aed2 	beq.w	13dd8 <__gxx_personality_v0+0x1c>
   14034:	2b00      	cmp	r3, #0
   14036:	d075      	beq.n	14124 <__gxx_personality_v0+0x368>
   14038:	9a03      	ldr	r2, [sp, #12]
   1403a:	f012 0208 	ands.w	r2, r2, #8
   1403e:	9209      	str	r2, [sp, #36]	; 0x24
   14040:	f000 80f6 	beq.w	14230 <__gxx_personality_v0+0x474>
   14044:	2147      	movs	r1, #71	; 0x47
   14046:	224e      	movs	r2, #78	; 0x4e
   14048:	f889 1000 	strb.w	r1, [r9]
   1404c:	f889 2001 	strb.w	r2, [r9, #1]
   14050:	2155      	movs	r1, #85	; 0x55
   14052:	2243      	movs	r2, #67	; 0x43
   14054:	f889 1002 	strb.w	r1, [r9, #2]
   14058:	f889 2003 	strb.w	r2, [r9, #3]
   1405c:	2146      	movs	r1, #70	; 0x46
   1405e:	224f      	movs	r2, #79	; 0x4f
   14060:	f889 1004 	strb.w	r1, [r9, #4]
   14064:	f889 2005 	strb.w	r2, [r9, #5]
   14068:	2152      	movs	r1, #82	; 0x52
   1406a:	2200      	movs	r2, #0
   1406c:	f889 1006 	strb.w	r1, [r9, #6]
   14070:	f889 2007 	strb.w	r2, [r9, #7]
   14074:	2200      	movs	r2, #0
   14076:	9208      	str	r2, [sp, #32]
   14078:	9707      	str	r7, [sp, #28]
   1407a:	2500      	movs	r5, #0
   1407c:	4629      	mov	r1, r5
   1407e:	e000      	b.n	14082 <__gxx_personality_v0+0x2c6>
   14080:	4623      	mov	r3, r4
   14082:	461c      	mov	r4, r3
   14084:	f814 0b01 	ldrb.w	r0, [r4], #1
   14088:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1408c:	408a      	lsls	r2, r1
   1408e:	0606      	lsls	r6, r0, #24
   14090:	ea45 0502 	orr.w	r5, r5, r2
   14094:	f101 0107 	add.w	r1, r1, #7
   14098:	d4f2      	bmi.n	14080 <__gxx_personality_v0+0x2c4>
   1409a:	291f      	cmp	r1, #31
   1409c:	d805      	bhi.n	140aa <__gxx_personality_v0+0x2ee>
   1409e:	0642      	lsls	r2, r0, #25
   140a0:	d503      	bpl.n	140aa <__gxx_personality_v0+0x2ee>
   140a2:	2201      	movs	r2, #1
   140a4:	408a      	lsls	r2, r1
   140a6:	4252      	negs	r2, r2
   140a8:	4315      	orrs	r5, r2
   140aa:	2600      	movs	r6, #0
   140ac:	4631      	mov	r1, r6
   140ae:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   140b2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   140b6:	408a      	lsls	r2, r1
   140b8:	0607      	lsls	r7, r0, #24
   140ba:	ea46 0602 	orr.w	r6, r6, r2
   140be:	f101 0107 	add.w	r1, r1, #7
   140c2:	d4f4      	bmi.n	140ae <__gxx_personality_v0+0x2f2>
   140c4:	291f      	cmp	r1, #31
   140c6:	d805      	bhi.n	140d4 <__gxx_personality_v0+0x318>
   140c8:	0640      	lsls	r0, r0, #25
   140ca:	d503      	bpl.n	140d4 <__gxx_personality_v0+0x318>
   140cc:	2301      	movs	r3, #1
   140ce:	408b      	lsls	r3, r1
   140d0:	425b      	negs	r3, r3
   140d2:	431e      	orrs	r6, r3
   140d4:	2d00      	cmp	r5, #0
   140d6:	d05c      	beq.n	14192 <__gxx_personality_v0+0x3d6>
   140d8:	dd5e      	ble.n	14198 <__gxx_personality_v0+0x3dc>
   140da:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   140de:	28ff      	cmp	r0, #255	; 0xff
   140e0:	f000 80a4 	beq.w	1422c <__gxx_personality_v0+0x470>
   140e4:	f000 0307 	and.w	r3, r0, #7
   140e8:	2b04      	cmp	r3, #4
   140ea:	f63f ae80 	bhi.w	13dee <__gxx_personality_v0+0x32>
   140ee:	a201      	add	r2, pc, #4	; (adr r2, 140f4 <__gxx_personality_v0+0x338>)
   140f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   140f4:	0001415f 	.word	0x0001415f
   140f8:	00013def 	.word	0x00013def
   140fc:	00014165 	.word	0x00014165
   14100:	0001415f 	.word	0x0001415f
   14104:	0001413d 	.word	0x0001413d
   14108:	4648      	mov	r0, r9
   1410a:	f7ff fbf7 	bl	138fc <__cxa_begin_cleanup>
   1410e:	2007      	movs	r0, #7
   14110:	e66a      	b.n	13de8 <__gxx_personality_v0+0x2c>
   14112:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14114:	441a      	add	r2, r3
   14116:	9204      	str	r2, [sp, #16]
   14118:	2800      	cmp	r0, #0
   1411a:	d184      	bne.n	14026 <__gxx_personality_v0+0x26a>
   1411c:	9b04      	ldr	r3, [sp, #16]
   1411e:	2b00      	cmp	r3, #0
   14120:	f43f ae5a 	beq.w	13dd8 <__gxx_personality_v0+0x1c>
   14124:	9b03      	ldr	r3, [sp, #12]
   14126:	f013 0301 	ands.w	r3, r3, #1
   1412a:	f47f ae55 	bne.w	13dd8 <__gxx_personality_v0+0x1c>
   1412e:	9a03      	ldr	r2, [sp, #12]
   14130:	f012 0508 	ands.w	r5, r2, #8
   14134:	f040 8097 	bne.w	14266 <__gxx_personality_v0+0x4aa>
   14138:	2402      	movs	r4, #2
   1413a:	e739      	b.n	13fb0 <__gxx_personality_v0+0x1f4>
   1413c:	00eb      	lsls	r3, r5, #3
   1413e:	425b      	negs	r3, r3
   14140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14142:	9912      	ldr	r1, [sp, #72]	; 0x48
   14144:	441a      	add	r2, r3
   14146:	4643      	mov	r3, r8
   14148:	f7ff fd6c 	bl	13c24 <_ZL28read_encoded_value_with_basehjPKhPj>
   1414c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1414e:	b199      	cbz	r1, 14178 <__gxx_personality_v0+0x3bc>
   14150:	f1b9 0f00 	cmp.w	r9, #0
   14154:	d109      	bne.n	1416a <__gxx_personality_v0+0x3ae>
   14156:	2e00      	cmp	r6, #0
   14158:	d077      	beq.n	1424a <__gxx_personality_v0+0x48e>
   1415a:	19a3      	adds	r3, r4, r6
   1415c:	e78d      	b.n	1407a <__gxx_personality_v0+0x2be>
   1415e:	00ab      	lsls	r3, r5, #2
   14160:	425b      	negs	r3, r3
   14162:	e7ed      	b.n	14140 <__gxx_personality_v0+0x384>
   14164:	006b      	lsls	r3, r5, #1
   14166:	425b      	negs	r3, r3
   14168:	e7ea      	b.n	14140 <__gxx_personality_v0+0x384>
   1416a:	ab0a      	add	r3, sp, #40	; 0x28
   1416c:	2200      	movs	r2, #0
   1416e:	4648      	mov	r0, r9
   14170:	f7ff fb68 	bl	13844 <__cxa_type_match>
   14174:	2800      	cmp	r0, #0
   14176:	d0ee      	beq.n	14156 <__gxx_personality_v0+0x39a>
   14178:	9f07      	ldr	r7, [sp, #28]
   1417a:	2403      	movs	r4, #3
   1417c:	9b03      	ldr	r3, [sp, #12]
   1417e:	07da      	lsls	r2, r3, #31
   14180:	d460      	bmi.n	14244 <__gxx_personality_v0+0x488>
   14182:	9b03      	ldr	r3, [sp, #12]
   14184:	0719      	lsls	r1, r3, #28
   14186:	d466      	bmi.n	14256 <__gxx_personality_v0+0x49a>
   14188:	2c01      	cmp	r4, #1
   1418a:	f43f af41 	beq.w	14010 <__gxx_personality_v0+0x254>
   1418e:	9905      	ldr	r1, [sp, #20]
   14190:	e707      	b.n	13fa2 <__gxx_personality_v0+0x1e6>
   14192:	2301      	movs	r3, #1
   14194:	9308      	str	r3, [sp, #32]
   14196:	e7de      	b.n	14156 <__gxx_personality_v0+0x39a>
   14198:	f1b9 0f00 	cmp.w	r9, #0
   1419c:	d001      	beq.n	141a2 <__gxx_personality_v0+0x3e6>
   1419e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   141a0:	b35b      	cbz	r3, 141fa <__gxx_personality_v0+0x43e>
   141a2:	1c6b      	adds	r3, r5, #1
   141a4:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   141a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   141aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ae:	2b00      	cmp	r3, #0
   141b0:	d1d1      	bne.n	14156 <__gxx_personality_v0+0x39a>
   141b2:	e7e1      	b.n	14178 <__gxx_personality_v0+0x3bc>
   141b4:	9a06      	ldr	r2, [sp, #24]
   141b6:	4638      	mov	r0, r7
   141b8:	f7ff fdb4 	bl	13d24 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   141bc:	4639      	mov	r1, r7
   141be:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   141c2:	f7ff fd8f 	bl	13ce4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   141c6:	00aa      	lsls	r2, r5, #2
   141c8:	f082 0203 	eor.w	r2, r2, #3
   141cc:	43d2      	mvns	r2, r2
   141ce:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   141d0:	9012      	str	r0, [sp, #72]	; 0x48
   141d2:	58b3      	ldr	r3, [r6, r2]
   141d4:	4416      	add	r6, r2
   141d6:	b133      	cbz	r3, 141e6 <__gxx_personality_v0+0x42a>
   141d8:	4632      	mov	r2, r6
   141da:	2300      	movs	r3, #0
   141dc:	f852 1f04 	ldr.w	r1, [r2, #4]!
   141e0:	3301      	adds	r3, #1
   141e2:	2900      	cmp	r1, #0
   141e4:	d1fa      	bne.n	141dc <__gxx_personality_v0+0x420>
   141e6:	2204      	movs	r2, #4
   141e8:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   141ec:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   141f0:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   141f4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   141f8:	e6d6      	b.n	13fa8 <__gxx_personality_v0+0x1ec>
   141fa:	1c6f      	adds	r7, r5, #1
   141fc:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   14200:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   14202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14204:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   14208:	920f      	str	r2, [sp, #60]	; 0x3c
   1420a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   1420e:	b921      	cbnz	r1, 1421a <__gxx_personality_v0+0x45e>
   14210:	e7b2      	b.n	14178 <__gxx_personality_v0+0x3bc>
   14212:	f857 1f04 	ldr.w	r1, [r7, #4]!
   14216:	2900      	cmp	r1, #0
   14218:	d0ae      	beq.n	14178 <__gxx_personality_v0+0x3bc>
   1421a:	4439      	add	r1, r7
   1421c:	465b      	mov	r3, fp
   1421e:	2200      	movs	r2, #0
   14220:	4648      	mov	r0, r9
   14222:	f7ff fb0f 	bl	13844 <__cxa_type_match>
   14226:	2800      	cmp	r0, #0
   14228:	d0f3      	beq.n	14212 <__gxx_personality_v0+0x456>
   1422a:	e794      	b.n	14156 <__gxx_personality_v0+0x39a>
   1422c:	2300      	movs	r3, #0
   1422e:	e787      	b.n	14140 <__gxx_personality_v0+0x384>
   14230:	f899 2007 	ldrb.w	r2, [r9, #7]
   14234:	2a01      	cmp	r2, #1
   14236:	bf0c      	ite	eq
   14238:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   1423c:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14240:	920a      	str	r2, [sp, #40]	; 0x28
   14242:	e717      	b.n	14074 <__gxx_personality_v0+0x2b8>
   14244:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14248:	e65a      	b.n	13f00 <__gxx_personality_v0+0x144>
   1424a:	9b08      	ldr	r3, [sp, #32]
   1424c:	9f07      	ldr	r7, [sp, #28]
   1424e:	2b00      	cmp	r3, #0
   14250:	f47f af68 	bne.w	14124 <__gxx_personality_v0+0x368>
   14254:	e5c0      	b.n	13dd8 <__gxx_personality_v0+0x1c>
   14256:	2c01      	cmp	r4, #1
   14258:	f43f ae8d 	beq.w	13f76 <__gxx_personality_v0+0x1ba>
   1425c:	2d00      	cmp	r5, #0
   1425e:	f6bf aea3 	bge.w	13fa8 <__gxx_personality_v0+0x1ec>
   14262:	f7ff f903 	bl	1346c <_ZSt10unexpectedv>
   14266:	461d      	mov	r5, r3
   14268:	2402      	movs	r4, #2
   1426a:	e6a1      	b.n	13fb0 <__gxx_personality_v0+0x1f4>
   1426c:	f7ff fc4e 	bl	13b0c <__cxa_begin_catch>
   14270:	e681      	b.n	13f76 <__gxx_personality_v0+0x1ba>
   14272:	bf00      	nop

00014274 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   14274:	b570      	push	{r4, r5, r6, lr}
   14276:	4b3c      	ldr	r3, [pc, #240]	; (14368 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14278:	781a      	ldrb	r2, [r3, #0]
   1427a:	b082      	sub	sp, #8
   1427c:	2a00      	cmp	r2, #0
   1427e:	d135      	bne.n	142ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14280:	2401      	movs	r4, #1
   14282:	701c      	strb	r4, [r3, #0]
   14284:	f006 fbd2 	bl	1aa2c <__cxa_current_exception_type>
   14288:	2800      	cmp	r0, #0
   1428a:	d05b      	beq.n	14344 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   1428c:	6844      	ldr	r4, [r0, #4]
   1428e:	4d37      	ldr	r5, [pc, #220]	; (1436c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14290:	7823      	ldrb	r3, [r4, #0]
   14292:	2b2a      	cmp	r3, #42	; 0x2a
   14294:	ab02      	add	r3, sp, #8
   14296:	f04f 32ff 	mov.w	r2, #4294967295
   1429a:	bf08      	it	eq
   1429c:	3401      	addeq	r4, #1
   1429e:	f843 2d04 	str.w	r2, [r3, #-4]!
   142a2:	2200      	movs	r2, #0
   142a4:	4611      	mov	r1, r2
   142a6:	4620      	mov	r0, r4
   142a8:	f006 fb52 	bl	1a950 <__cxa_demangle>
   142ac:	682b      	ldr	r3, [r5, #0]
   142ae:	4606      	mov	r6, r0
   142b0:	68db      	ldr	r3, [r3, #12]
   142b2:	482f      	ldr	r0, [pc, #188]	; (14370 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   142b4:	2230      	movs	r2, #48	; 0x30
   142b6:	2101      	movs	r1, #1
   142b8:	f009 fbfc 	bl	1dab4 <fwrite>
   142bc:	9b01      	ldr	r3, [sp, #4]
   142be:	b17b      	cbz	r3, 142e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   142c0:	682b      	ldr	r3, [r5, #0]
   142c2:	4620      	mov	r0, r4
   142c4:	68d9      	ldr	r1, [r3, #12]
   142c6:	f009 fa1f 	bl	1d708 <fputs>
   142ca:	682b      	ldr	r3, [r5, #0]
   142cc:	4829      	ldr	r0, [pc, #164]	; (14374 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   142ce:	68db      	ldr	r3, [r3, #12]
   142d0:	2202      	movs	r2, #2
   142d2:	2101      	movs	r1, #1
   142d4:	f009 fbee 	bl	1dab4 <fwrite>
   142d8:	9b01      	ldr	r3, [sp, #4]
   142da:	b18b      	cbz	r3, 14300 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   142dc:	f7ff f940 	bl	13560 <__cxa_rethrow>
   142e0:	682b      	ldr	r3, [r5, #0]
   142e2:	4630      	mov	r0, r6
   142e4:	68d9      	ldr	r1, [r3, #12]
   142e6:	f009 fa0f 	bl	1d708 <fputs>
   142ea:	e7ee      	b.n	142ca <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   142ec:	4b1f      	ldr	r3, [pc, #124]	; (1436c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   142ee:	4822      	ldr	r0, [pc, #136]	; (14378 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   142f0:	681b      	ldr	r3, [r3, #0]
   142f2:	221d      	movs	r2, #29
   142f4:	68db      	ldr	r3, [r3, #12]
   142f6:	2101      	movs	r1, #1
   142f8:	f009 fbdc 	bl	1dab4 <fwrite>
   142fc:	f009 f986 	bl	1d60c <abort>
   14300:	4630      	mov	r0, r6
   14302:	f009 fc39 	bl	1db78 <free>
   14306:	e7e9      	b.n	142dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   14308:	2901      	cmp	r1, #1
   1430a:	460c      	mov	r4, r1
   1430c:	d127      	bne.n	1435e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   1430e:	f7ff fbfd 	bl	13b0c <__cxa_begin_catch>
   14312:	6803      	ldr	r3, [r0, #0]
   14314:	689b      	ldr	r3, [r3, #8]
   14316:	4798      	blx	r3
   14318:	682b      	ldr	r3, [r5, #0]
   1431a:	4606      	mov	r6, r0
   1431c:	68db      	ldr	r3, [r3, #12]
   1431e:	4817      	ldr	r0, [pc, #92]	; (1437c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   14320:	4621      	mov	r1, r4
   14322:	220b      	movs	r2, #11
   14324:	f009 fbc6 	bl	1dab4 <fwrite>
   14328:	682b      	ldr	r3, [r5, #0]
   1432a:	4630      	mov	r0, r6
   1432c:	68d9      	ldr	r1, [r3, #12]
   1432e:	f009 f9eb 	bl	1d708 <fputs>
   14332:	682b      	ldr	r3, [r5, #0]
   14334:	200a      	movs	r0, #10
   14336:	68d9      	ldr	r1, [r3, #12]
   14338:	f009 f976 	bl	1d628 <fputc>
   1433c:	f7ff fc24 	bl	13b88 <__cxa_end_catch>
   14340:	f009 f964 	bl	1d60c <abort>
   14344:	4b09      	ldr	r3, [pc, #36]	; (1436c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14346:	480e      	ldr	r0, [pc, #56]	; (14380 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   14348:	681b      	ldr	r3, [r3, #0]
   1434a:	4621      	mov	r1, r4
   1434c:	68db      	ldr	r3, [r3, #12]
   1434e:	222d      	movs	r2, #45	; 0x2d
   14350:	f009 fbb0 	bl	1dab4 <fwrite>
   14354:	e7f4      	b.n	14340 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14356:	f7ff fc17 	bl	13b88 <__cxa_end_catch>
   1435a:	f7ff fa6d 	bl	13838 <__cxa_end_cleanup>
   1435e:	f7ff fbd5 	bl	13b0c <__cxa_begin_catch>
   14362:	f7ff fc11 	bl	13b88 <__cxa_end_catch>
   14366:	e7eb      	b.n	14340 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14368:	200022b4 	.word	0x200022b4
   1436c:	20000100 	.word	0x20000100
   14370:	00023acc 	.word	0x00023acc
   14374:	00023b00 	.word	0x00023b00
   14378:	00023aac 	.word	0x00023aac
   1437c:	00023b34 	.word	0x00023b34
   14380:	00023b04 	.word	0x00023b04

00014384 <d_make_comp>:
   14384:	b470      	push	{r4, r5, r6}
   14386:	1e4c      	subs	r4, r1, #1
   14388:	2c4c      	cmp	r4, #76	; 0x4c
   1438a:	d82d      	bhi.n	143e8 <d_make_comp+0x64>
   1438c:	e8df f004 	tbb	[pc, r4]
   14390:	3c3c3c3c 	.word	0x3c3c3c3c
   14394:	2c2c2c2c 	.word	0x2c2c2c2c
   14398:	273c2727 	.word	0x273c2727
   1439c:	27272727 	.word	0x27272727
   143a0:	27272727 	.word	0x27272727
   143a4:	2c272727 	.word	0x2c272727
   143a8:	28282828 	.word	0x28282828
   143ac:	28282828 	.word	0x28282828
   143b0:	2727273c 	.word	0x2727273c
   143b4:	272c2727 	.word	0x272c2727
   143b8:	2c3c3e28 	.word	0x2c3c3e28
   143bc:	3e28283c 	.word	0x3e28283c
   143c0:	27272c2c 	.word	0x27272c2c
   143c4:	3c3c3c27 	.word	0x3c3c3c27
   143c8:	3c273c3c 	.word	0x3c273c3c
   143cc:	2c3c273c 	.word	0x2c3c273c
   143d0:	2727272c 	.word	0x2727272c
   143d4:	272c2c2c 	.word	0x272c2c2c
   143d8:	283c2727 	.word	0x283c2727
   143dc:	3c          	.byte	0x3c
   143dd:	00          	.byte	0x00
   143de:	b11a      	cbz	r2, 143e8 <d_make_comp+0x64>
   143e0:	6944      	ldr	r4, [r0, #20]
   143e2:	6985      	ldr	r5, [r0, #24]
   143e4:	42ac      	cmp	r4, r5
   143e6:	db02      	blt.n	143ee <d_make_comp+0x6a>
   143e8:	2000      	movs	r0, #0
   143ea:	bc70      	pop	{r4, r5, r6}
   143ec:	4770      	bx	lr
   143ee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   143f2:	6906      	ldr	r6, [r0, #16]
   143f4:	00ad      	lsls	r5, r5, #2
   143f6:	3401      	adds	r4, #1
   143f8:	6144      	str	r4, [r0, #20]
   143fa:	1970      	adds	r0, r6, r5
   143fc:	d0f5      	beq.n	143ea <d_make_comp+0x66>
   143fe:	5571      	strb	r1, [r6, r5]
   14400:	6042      	str	r2, [r0, #4]
   14402:	6083      	str	r3, [r0, #8]
   14404:	bc70      	pop	{r4, r5, r6}
   14406:	4770      	bx	lr
   14408:	2a00      	cmp	r2, #0
   1440a:	d0ed      	beq.n	143e8 <d_make_comp+0x64>
   1440c:	2b00      	cmp	r3, #0
   1440e:	d0eb      	beq.n	143e8 <d_make_comp+0x64>
   14410:	6944      	ldr	r4, [r0, #20]
   14412:	6985      	ldr	r5, [r0, #24]
   14414:	42ac      	cmp	r4, r5
   14416:	dae7      	bge.n	143e8 <d_make_comp+0x64>
   14418:	e7e9      	b.n	143ee <d_make_comp+0x6a>
   1441a:	bf00      	nop

0001441c <d_cv_qualifiers>:
   1441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14420:	68c3      	ldr	r3, [r0, #12]
   14422:	f1b2 0a00 	subs.w	sl, r2, #0
   14426:	4604      	mov	r4, r0
   14428:	460e      	mov	r6, r1
   1442a:	781a      	ldrb	r2, [r3, #0]
   1442c:	bf15      	itete	ne
   1442e:	f04f 091e 	movne.w	r9, #30
   14432:	f04f 091b 	moveq.w	r9, #27
   14436:	f04f 081d 	movne.w	r8, #29
   1443a:	f04f 081a 	moveq.w	r8, #26
   1443e:	bf14      	ite	ne
   14440:	271c      	movne	r7, #28
   14442:	2719      	moveq	r7, #25
   14444:	460d      	mov	r5, r1
   14446:	e018      	b.n	1447a <d_cv_qualifiers+0x5e>
   14448:	2a56      	cmp	r2, #86	; 0x56
   1444a:	d01f      	beq.n	1448c <d_cv_qualifiers+0x70>
   1444c:	2a4b      	cmp	r2, #75	; 0x4b
   1444e:	d024      	beq.n	1449a <d_cv_qualifiers+0x7e>
   14450:	2a44      	cmp	r2, #68	; 0x44
   14452:	d12d      	bne.n	144b0 <d_cv_qualifiers+0x94>
   14454:	785a      	ldrb	r2, [r3, #1]
   14456:	2a78      	cmp	r2, #120	; 0x78
   14458:	d127      	bne.n	144aa <d_cv_qualifiers+0x8e>
   1445a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1445c:	3302      	adds	r3, #2
   1445e:	3211      	adds	r2, #17
   14460:	60e3      	str	r3, [r4, #12]
   14462:	6322      	str	r2, [r4, #48]	; 0x30
   14464:	214c      	movs	r1, #76	; 0x4c
   14466:	2300      	movs	r3, #0
   14468:	461a      	mov	r2, r3
   1446a:	4620      	mov	r0, r4
   1446c:	f7ff ff8a 	bl	14384 <d_make_comp>
   14470:	6028      	str	r0, [r5, #0]
   14472:	b1c8      	cbz	r0, 144a8 <d_cv_qualifiers+0x8c>
   14474:	68e3      	ldr	r3, [r4, #12]
   14476:	781a      	ldrb	r2, [r3, #0]
   14478:	1d05      	adds	r5, r0, #4
   1447a:	2a72      	cmp	r2, #114	; 0x72
   1447c:	d1e4      	bne.n	14448 <d_cv_qualifiers+0x2c>
   1447e:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14480:	3301      	adds	r3, #1
   14482:	3209      	adds	r2, #9
   14484:	60e3      	str	r3, [r4, #12]
   14486:	6322      	str	r2, [r4, #48]	; 0x30
   14488:	4639      	mov	r1, r7
   1448a:	e7ec      	b.n	14466 <d_cv_qualifiers+0x4a>
   1448c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1448e:	3301      	adds	r3, #1
   14490:	3209      	adds	r2, #9
   14492:	60e3      	str	r3, [r4, #12]
   14494:	6322      	str	r2, [r4, #48]	; 0x30
   14496:	4641      	mov	r1, r8
   14498:	e7e5      	b.n	14466 <d_cv_qualifiers+0x4a>
   1449a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1449c:	3301      	adds	r3, #1
   1449e:	3206      	adds	r2, #6
   144a0:	60e3      	str	r3, [r4, #12]
   144a2:	6322      	str	r2, [r4, #48]	; 0x30
   144a4:	4649      	mov	r1, r9
   144a6:	e7de      	b.n	14466 <d_cv_qualifiers+0x4a>
   144a8:	4605      	mov	r5, r0
   144aa:	4628      	mov	r0, r5
   144ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   144b0:	f1ba 0f00 	cmp.w	sl, #0
   144b4:	d1f9      	bne.n	144aa <d_cv_qualifiers+0x8e>
   144b6:	2a46      	cmp	r2, #70	; 0x46
   144b8:	d1f7      	bne.n	144aa <d_cv_qualifiers+0x8e>
   144ba:	42b5      	cmp	r5, r6
   144bc:	d0f5      	beq.n	144aa <d_cv_qualifiers+0x8e>
   144be:	201d      	movs	r0, #29
   144c0:	211e      	movs	r1, #30
   144c2:	221c      	movs	r2, #28
   144c4:	e007      	b.n	144d6 <d_cv_qualifiers+0xba>
   144c6:	2b1b      	cmp	r3, #27
   144c8:	d00b      	beq.n	144e2 <d_cv_qualifiers+0xc6>
   144ca:	2b19      	cmp	r3, #25
   144cc:	d100      	bne.n	144d0 <d_cv_qualifiers+0xb4>
   144ce:	7032      	strb	r2, [r6, #0]
   144d0:	3604      	adds	r6, #4
   144d2:	42b5      	cmp	r5, r6
   144d4:	d0e9      	beq.n	144aa <d_cv_qualifiers+0x8e>
   144d6:	6836      	ldr	r6, [r6, #0]
   144d8:	7833      	ldrb	r3, [r6, #0]
   144da:	2b1a      	cmp	r3, #26
   144dc:	d1f3      	bne.n	144c6 <d_cv_qualifiers+0xaa>
   144de:	7030      	strb	r0, [r6, #0]
   144e0:	e7f6      	b.n	144d0 <d_cv_qualifiers+0xb4>
   144e2:	7031      	strb	r1, [r6, #0]
   144e4:	e7f4      	b.n	144d0 <d_cv_qualifiers+0xb4>
   144e6:	bf00      	nop

000144e8 <d_ref_qualifier>:
   144e8:	b410      	push	{r4}
   144ea:	68c3      	ldr	r3, [r0, #12]
   144ec:	781c      	ldrb	r4, [r3, #0]
   144ee:	2c52      	cmp	r4, #82	; 0x52
   144f0:	460a      	mov	r2, r1
   144f2:	d00f      	beq.n	14514 <d_ref_qualifier+0x2c>
   144f4:	2c4f      	cmp	r4, #79	; 0x4f
   144f6:	d003      	beq.n	14500 <d_ref_qualifier+0x18>
   144f8:	4608      	mov	r0, r1
   144fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   144fe:	4770      	bx	lr
   14500:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14502:	3103      	adds	r1, #3
   14504:	6301      	str	r1, [r0, #48]	; 0x30
   14506:	2120      	movs	r1, #32
   14508:	3301      	adds	r3, #1
   1450a:	60c3      	str	r3, [r0, #12]
   1450c:	f85d 4b04 	ldr.w	r4, [sp], #4
   14510:	2300      	movs	r3, #0
   14512:	e737      	b.n	14384 <d_make_comp>
   14514:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14516:	3102      	adds	r1, #2
   14518:	6301      	str	r1, [r0, #48]	; 0x30
   1451a:	211f      	movs	r1, #31
   1451c:	e7f4      	b.n	14508 <d_ref_qualifier+0x20>
   1451e:	bf00      	nop

00014520 <d_count_templates_scopes>:
   14520:	2a00      	cmp	r2, #0
   14522:	d04d      	beq.n	145c0 <d_count_templates_scopes+0xa0>
   14524:	b570      	push	{r4, r5, r6, lr}
   14526:	4605      	mov	r5, r0
   14528:	460e      	mov	r6, r1
   1452a:	4614      	mov	r4, r2
   1452c:	7823      	ldrb	r3, [r4, #0]
   1452e:	3b01      	subs	r3, #1
   14530:	2b4c      	cmp	r3, #76	; 0x4c
   14532:	d82b      	bhi.n	1458c <d_count_templates_scopes+0x6c>
   14534:	e8df f003 	tbb	[pc, r3]
   14538:	3f363636 	.word	0x3f363636
   1453c:	27272a2a 	.word	0x27272a2a
   14540:	36363636 	.word	0x36363636
   14544:	36363636 	.word	0x36363636
   14548:	36363636 	.word	0x36363636
   1454c:	2a363636 	.word	0x2a363636
   14550:	36363636 	.word	0x36363636
   14554:	36363636 	.word	0x36363636
   14558:	2f2f3636 	.word	0x2f2f3636
   1455c:	362a3636 	.word	0x362a3636
   14560:	2b363636 	.word	0x2b363636
   14564:	36363636 	.word	0x36363636
   14568:	3636272a 	.word	0x3636272a
   1456c:	36363636 	.word	0x36363636
   14570:	36363636 	.word	0x36363636
   14574:	2a363636 	.word	0x2a363636
   14578:	2b2b362a 	.word	0x2b2b362a
   1457c:	362a2b2b 	.word	0x362a2b2b
   14580:	36363636 	.word	0x36363636
   14584:	36          	.byte	0x36
   14585:	00          	.byte	0x00
   14586:	68a4      	ldr	r4, [r4, #8]
   14588:	2c00      	cmp	r4, #0
   1458a:	d1cf      	bne.n	1452c <d_count_templates_scopes+0xc>
   1458c:	bd70      	pop	{r4, r5, r6, pc}
   1458e:	6864      	ldr	r4, [r4, #4]
   14590:	2c00      	cmp	r4, #0
   14592:	d1cb      	bne.n	1452c <d_count_templates_scopes+0xc>
   14594:	e7fa      	b.n	1458c <d_count_templates_scopes+0x6c>
   14596:	6862      	ldr	r2, [r4, #4]
   14598:	7813      	ldrb	r3, [r2, #0]
   1459a:	2b05      	cmp	r3, #5
   1459c:	d103      	bne.n	145a6 <d_count_templates_scopes+0x86>
   1459e:	6833      	ldr	r3, [r6, #0]
   145a0:	3301      	adds	r3, #1
   145a2:	6033      	str	r3, [r6, #0]
   145a4:	6862      	ldr	r2, [r4, #4]
   145a6:	4631      	mov	r1, r6
   145a8:	4628      	mov	r0, r5
   145aa:	f7ff ffb9 	bl	14520 <d_count_templates_scopes>
   145ae:	68a4      	ldr	r4, [r4, #8]
   145b0:	2c00      	cmp	r4, #0
   145b2:	d1bb      	bne.n	1452c <d_count_templates_scopes+0xc>
   145b4:	e7ea      	b.n	1458c <d_count_templates_scopes+0x6c>
   145b6:	682b      	ldr	r3, [r5, #0]
   145b8:	3301      	adds	r3, #1
   145ba:	602b      	str	r3, [r5, #0]
   145bc:	6862      	ldr	r2, [r4, #4]
   145be:	e7f2      	b.n	145a6 <d_count_templates_scopes+0x86>
   145c0:	4770      	bx	lr
   145c2:	bf00      	nop

000145c4 <d_append_buffer>:
   145c4:	b37a      	cbz	r2, 14626 <d_append_buffer+0x62>
   145c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145ca:	460d      	mov	r5, r1
   145cc:	4604      	mov	r4, r0
   145ce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   145d2:	18af      	adds	r7, r5, r2
   145d4:	f04f 0800 	mov.w	r8, #0
   145d8:	e009      	b.n	145ee <d_append_buffer+0x2a>
   145da:	460b      	mov	r3, r1
   145dc:	42bd      	cmp	r5, r7
   145de:	f101 0101 	add.w	r1, r1, #1
   145e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   145e6:	54e6      	strb	r6, [r4, r3]
   145e8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   145ec:	d019      	beq.n	14622 <d_append_buffer+0x5e>
   145ee:	29ff      	cmp	r1, #255	; 0xff
   145f0:	f815 6b01 	ldrb.w	r6, [r5], #1
   145f4:	d1f1      	bne.n	145da <d_append_buffer+0x16>
   145f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   145fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   145fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14602:	4620      	mov	r0, r4
   14604:	4798      	blx	r3
   14606:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1460a:	3301      	adds	r3, #1
   1460c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14610:	2300      	movs	r3, #0
   14612:	2101      	movs	r1, #1
   14614:	42bd      	cmp	r5, r7
   14616:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1461a:	54e6      	strb	r6, [r4, r3]
   1461c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14620:	d1e5      	bne.n	145ee <d_append_buffer+0x2a>
   14622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14626:	4770      	bx	lr

00014628 <d_number.isra.0>:
   14628:	b470      	push	{r4, r5, r6}
   1462a:	6802      	ldr	r2, [r0, #0]
   1462c:	7811      	ldrb	r1, [r2, #0]
   1462e:	296e      	cmp	r1, #110	; 0x6e
   14630:	d018      	beq.n	14664 <d_number.isra.0+0x3c>
   14632:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   14636:	2b09      	cmp	r3, #9
   14638:	d81e      	bhi.n	14678 <d_number.isra.0+0x50>
   1463a:	2600      	movs	r6, #0
   1463c:	2300      	movs	r3, #0
   1463e:	3201      	adds	r2, #1
   14640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14644:	6002      	str	r2, [r0, #0]
   14646:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   1464a:	7811      	ldrb	r1, [r2, #0]
   1464c:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14650:	2d09      	cmp	r5, #9
   14652:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   14656:	d9f2      	bls.n	1463e <d_number.isra.0+0x16>
   14658:	b10e      	cbz	r6, 1465e <d_number.isra.0+0x36>
   1465a:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   1465e:	4618      	mov	r0, r3
   14660:	bc70      	pop	{r4, r5, r6}
   14662:	4770      	bx	lr
   14664:	1c53      	adds	r3, r2, #1
   14666:	6003      	str	r3, [r0, #0]
   14668:	7851      	ldrb	r1, [r2, #1]
   1466a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1466e:	2a09      	cmp	r2, #9
   14670:	d802      	bhi.n	14678 <d_number.isra.0+0x50>
   14672:	461a      	mov	r2, r3
   14674:	2601      	movs	r6, #1
   14676:	e7e1      	b.n	1463c <d_number.isra.0+0x14>
   14678:	2300      	movs	r3, #0
   1467a:	e7f0      	b.n	1465e <d_number.isra.0+0x36>

0001467c <d_number_component>:
   1467c:	6943      	ldr	r3, [r0, #20]
   1467e:	6982      	ldr	r2, [r0, #24]
   14680:	4293      	cmp	r3, r2
   14682:	b510      	push	{r4, lr}
   14684:	da0f      	bge.n	146a6 <d_number_component+0x2a>
   14686:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1468a:	6901      	ldr	r1, [r0, #16]
   1468c:	0092      	lsls	r2, r2, #2
   1468e:	3301      	adds	r3, #1
   14690:	188c      	adds	r4, r1, r2
   14692:	6143      	str	r3, [r0, #20]
   14694:	d005      	beq.n	146a2 <d_number_component+0x26>
   14696:	2341      	movs	r3, #65	; 0x41
   14698:	300c      	adds	r0, #12
   1469a:	548b      	strb	r3, [r1, r2]
   1469c:	f7ff ffc4 	bl	14628 <d_number.isra.0>
   146a0:	6060      	str	r0, [r4, #4]
   146a2:	4620      	mov	r0, r4
   146a4:	bd10      	pop	{r4, pc}
   146a6:	2400      	movs	r4, #0
   146a8:	4620      	mov	r0, r4
   146aa:	bd10      	pop	{r4, pc}

000146ac <d_compact_number>:
   146ac:	b510      	push	{r4, lr}
   146ae:	68c3      	ldr	r3, [r0, #12]
   146b0:	781a      	ldrb	r2, [r3, #0]
   146b2:	2a5f      	cmp	r2, #95	; 0x5f
   146b4:	4604      	mov	r4, r0
   146b6:	d00d      	beq.n	146d4 <d_compact_number+0x28>
   146b8:	2a6e      	cmp	r2, #110	; 0x6e
   146ba:	d00f      	beq.n	146dc <d_compact_number+0x30>
   146bc:	300c      	adds	r0, #12
   146be:	f7ff ffb3 	bl	14628 <d_number.isra.0>
   146c2:	3001      	adds	r0, #1
   146c4:	d40a      	bmi.n	146dc <d_compact_number+0x30>
   146c6:	68e3      	ldr	r3, [r4, #12]
   146c8:	781a      	ldrb	r2, [r3, #0]
   146ca:	2a5f      	cmp	r2, #95	; 0x5f
   146cc:	d106      	bne.n	146dc <d_compact_number+0x30>
   146ce:	3301      	adds	r3, #1
   146d0:	60e3      	str	r3, [r4, #12]
   146d2:	bd10      	pop	{r4, pc}
   146d4:	3301      	adds	r3, #1
   146d6:	2000      	movs	r0, #0
   146d8:	60e3      	str	r3, [r4, #12]
   146da:	bd10      	pop	{r4, pc}
   146dc:	f04f 30ff 	mov.w	r0, #4294967295
   146e0:	bd10      	pop	{r4, pc}
   146e2:	bf00      	nop

000146e4 <d_template_param>:
   146e4:	b538      	push	{r3, r4, r5, lr}
   146e6:	68c3      	ldr	r3, [r0, #12]
   146e8:	781a      	ldrb	r2, [r3, #0]
   146ea:	2a54      	cmp	r2, #84	; 0x54
   146ec:	d001      	beq.n	146f2 <d_template_param+0xe>
   146ee:	2000      	movs	r0, #0
   146f0:	bd38      	pop	{r3, r4, r5, pc}
   146f2:	3301      	adds	r3, #1
   146f4:	60c3      	str	r3, [r0, #12]
   146f6:	4604      	mov	r4, r0
   146f8:	f7ff ffd8 	bl	146ac <d_compact_number>
   146fc:	1e05      	subs	r5, r0, #0
   146fe:	dbf6      	blt.n	146ee <d_template_param+0xa>
   14700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14702:	6963      	ldr	r3, [r4, #20]
   14704:	69a1      	ldr	r1, [r4, #24]
   14706:	3201      	adds	r2, #1
   14708:	428b      	cmp	r3, r1
   1470a:	62a2      	str	r2, [r4, #40]	; 0x28
   1470c:	daef      	bge.n	146ee <d_template_param+0xa>
   1470e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14712:	6921      	ldr	r1, [r4, #16]
   14714:	0092      	lsls	r2, r2, #2
   14716:	3301      	adds	r3, #1
   14718:	1888      	adds	r0, r1, r2
   1471a:	6163      	str	r3, [r4, #20]
   1471c:	d002      	beq.n	14724 <d_template_param+0x40>
   1471e:	2305      	movs	r3, #5
   14720:	548b      	strb	r3, [r1, r2]
   14722:	6045      	str	r5, [r0, #4]
   14724:	bd38      	pop	{r3, r4, r5, pc}
   14726:	bf00      	nop

00014728 <d_source_name>:
   14728:	b570      	push	{r4, r5, r6, lr}
   1472a:	4604      	mov	r4, r0
   1472c:	300c      	adds	r0, #12
   1472e:	f7ff ff7b 	bl	14628 <d_number.isra.0>
   14732:	1e06      	subs	r6, r0, #0
   14734:	dd4d      	ble.n	147d2 <d_source_name+0xaa>
   14736:	68e5      	ldr	r5, [r4, #12]
   14738:	6863      	ldr	r3, [r4, #4]
   1473a:	1b5b      	subs	r3, r3, r5
   1473c:	429e      	cmp	r6, r3
   1473e:	dc2b      	bgt.n	14798 <d_source_name+0x70>
   14740:	68a2      	ldr	r2, [r4, #8]
   14742:	19ab      	adds	r3, r5, r6
   14744:	0752      	lsls	r2, r2, #29
   14746:	60e3      	str	r3, [r4, #12]
   14748:	d504      	bpl.n	14754 <d_source_name+0x2c>
   1474a:	5daa      	ldrb	r2, [r5, r6]
   1474c:	2a24      	cmp	r2, #36	; 0x24
   1474e:	bf04      	itt	eq
   14750:	3301      	addeq	r3, #1
   14752:	60e3      	streq	r3, [r4, #12]
   14754:	2e09      	cmp	r6, #9
   14756:	dd0c      	ble.n	14772 <d_source_name+0x4a>
   14758:	2208      	movs	r2, #8
   1475a:	491f      	ldr	r1, [pc, #124]	; (147d8 <d_source_name+0xb0>)
   1475c:	4628      	mov	r0, r5
   1475e:	f009 fd17 	bl	1e190 <memcmp>
   14762:	b930      	cbnz	r0, 14772 <d_source_name+0x4a>
   14764:	7a2b      	ldrb	r3, [r5, #8]
   14766:	2b2e      	cmp	r3, #46	; 0x2e
   14768:	d019      	beq.n	1479e <d_source_name+0x76>
   1476a:	2b5f      	cmp	r3, #95	; 0x5f
   1476c:	d017      	beq.n	1479e <d_source_name+0x76>
   1476e:	2b24      	cmp	r3, #36	; 0x24
   14770:	d015      	beq.n	1479e <d_source_name+0x76>
   14772:	6963      	ldr	r3, [r4, #20]
   14774:	69a2      	ldr	r2, [r4, #24]
   14776:	4293      	cmp	r3, r2
   14778:	da0e      	bge.n	14798 <d_source_name+0x70>
   1477a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1477e:	6921      	ldr	r1, [r4, #16]
   14780:	0092      	lsls	r2, r2, #2
   14782:	3301      	adds	r3, #1
   14784:	1888      	adds	r0, r1, r2
   14786:	6163      	str	r3, [r4, #20]
   14788:	d006      	beq.n	14798 <d_source_name+0x70>
   1478a:	b12d      	cbz	r5, 14798 <d_source_name+0x70>
   1478c:	2300      	movs	r3, #0
   1478e:	548b      	strb	r3, [r1, r2]
   14790:	6045      	str	r5, [r0, #4]
   14792:	6086      	str	r6, [r0, #8]
   14794:	62e0      	str	r0, [r4, #44]	; 0x2c
   14796:	bd70      	pop	{r4, r5, r6, pc}
   14798:	2000      	movs	r0, #0
   1479a:	62e0      	str	r0, [r4, #44]	; 0x2c
   1479c:	bd70      	pop	{r4, r5, r6, pc}
   1479e:	7a6b      	ldrb	r3, [r5, #9]
   147a0:	2b4e      	cmp	r3, #78	; 0x4e
   147a2:	d1e6      	bne.n	14772 <d_source_name+0x4a>
   147a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   147a6:	6962      	ldr	r2, [r4, #20]
   147a8:	69a1      	ldr	r1, [r4, #24]
   147aa:	3316      	adds	r3, #22
   147ac:	1b9e      	subs	r6, r3, r6
   147ae:	428a      	cmp	r2, r1
   147b0:	6326      	str	r6, [r4, #48]	; 0x30
   147b2:	daf1      	bge.n	14798 <d_source_name+0x70>
   147b4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   147b8:	6921      	ldr	r1, [r4, #16]
   147ba:	009b      	lsls	r3, r3, #2
   147bc:	3201      	adds	r2, #1
   147be:	18c8      	adds	r0, r1, r3
   147c0:	6162      	str	r2, [r4, #20]
   147c2:	d0ea      	beq.n	1479a <d_source_name+0x72>
   147c4:	2500      	movs	r5, #0
   147c6:	54cd      	strb	r5, [r1, r3]
   147c8:	4a04      	ldr	r2, [pc, #16]	; (147dc <d_source_name+0xb4>)
   147ca:	6042      	str	r2, [r0, #4]
   147cc:	2315      	movs	r3, #21
   147ce:	6083      	str	r3, [r0, #8]
   147d0:	e7e3      	b.n	1479a <d_source_name+0x72>
   147d2:	2000      	movs	r0, #0
   147d4:	bd70      	pop	{r4, r5, r6, pc}
   147d6:	bf00      	nop
   147d8:	000242d8 	.word	0x000242d8
   147dc:	000242e4 	.word	0x000242e4

000147e0 <d_abi_tags>:
   147e0:	b570      	push	{r4, r5, r6, lr}
   147e2:	68c3      	ldr	r3, [r0, #12]
   147e4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   147e6:	781a      	ldrb	r2, [r3, #0]
   147e8:	2a42      	cmp	r2, #66	; 0x42
   147ea:	4604      	mov	r4, r0
   147ec:	460d      	mov	r5, r1
   147ee:	d10f      	bne.n	14810 <d_abi_tags+0x30>
   147f0:	3301      	adds	r3, #1
   147f2:	60e3      	str	r3, [r4, #12]
   147f4:	4620      	mov	r0, r4
   147f6:	f7ff ff97 	bl	14728 <d_source_name>
   147fa:	462a      	mov	r2, r5
   147fc:	4603      	mov	r3, r0
   147fe:	214b      	movs	r1, #75	; 0x4b
   14800:	4620      	mov	r0, r4
   14802:	f7ff fdbf 	bl	14384 <d_make_comp>
   14806:	68e3      	ldr	r3, [r4, #12]
   14808:	781a      	ldrb	r2, [r3, #0]
   1480a:	2a42      	cmp	r2, #66	; 0x42
   1480c:	4605      	mov	r5, r0
   1480e:	d0ef      	beq.n	147f0 <d_abi_tags+0x10>
   14810:	62e6      	str	r6, [r4, #44]	; 0x2c
   14812:	4628      	mov	r0, r5
   14814:	bd70      	pop	{r4, r5, r6, pc}
   14816:	bf00      	nop

00014818 <d_substitution>:
   14818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1481c:	4605      	mov	r5, r0
   1481e:	68c0      	ldr	r0, [r0, #12]
   14820:	7803      	ldrb	r3, [r0, #0]
   14822:	2b53      	cmp	r3, #83	; 0x53
   14824:	d002      	beq.n	1482c <d_substitution+0x14>
   14826:	2000      	movs	r0, #0
   14828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1482c:	1c43      	adds	r3, r0, #1
   1482e:	60eb      	str	r3, [r5, #12]
   14830:	7842      	ldrb	r2, [r0, #1]
   14832:	b1a2      	cbz	r2, 1485e <d_substitution+0x46>
   14834:	1c83      	adds	r3, r0, #2
   14836:	60eb      	str	r3, [r5, #12]
   14838:	7842      	ldrb	r2, [r0, #1]
   1483a:	2a5f      	cmp	r2, #95	; 0x5f
   1483c:	d15a      	bne.n	148f4 <d_substitution+0xdc>
   1483e:	2300      	movs	r3, #0
   14840:	6a2a      	ldr	r2, [r5, #32]
   14842:	4293      	cmp	r3, r2
   14844:	d2ef      	bcs.n	14826 <d_substitution+0xe>
   14846:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14848:	69e9      	ldr	r1, [r5, #28]
   1484a:	3201      	adds	r2, #1
   1484c:	62aa      	str	r2, [r5, #40]	; 0x28
   1484e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   14852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14856:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   1485a:	2b19      	cmp	r3, #25
   1485c:	d94f      	bls.n	148fe <d_substitution+0xe6>
   1485e:	68ab      	ldr	r3, [r5, #8]
   14860:	f003 0308 	and.w	r3, r3, #8
   14864:	2b00      	cmp	r3, #0
   14866:	bf14      	ite	ne
   14868:	2401      	movne	r4, #1
   1486a:	2400      	moveq	r4, #0
   1486c:	d101      	bne.n	14872 <d_substitution+0x5a>
   1486e:	2900      	cmp	r1, #0
   14870:	d169      	bne.n	14946 <d_substitution+0x12e>
   14872:	4b46      	ldr	r3, [pc, #280]	; (1498c <d_substitution+0x174>)
   14874:	2174      	movs	r1, #116	; 0x74
   14876:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   1487a:	e003      	b.n	14884 <d_substitution+0x6c>
   1487c:	331c      	adds	r3, #28
   1487e:	4283      	cmp	r3, r0
   14880:	d2d1      	bcs.n	14826 <d_substitution+0xe>
   14882:	7819      	ldrb	r1, [r3, #0]
   14884:	428a      	cmp	r2, r1
   14886:	d1f9      	bne.n	1487c <d_substitution+0x64>
   14888:	695e      	ldr	r6, [r3, #20]
   1488a:	2e00      	cmp	r6, #0
   1488c:	d07b      	beq.n	14986 <d_substitution+0x16e>
   1488e:	696a      	ldr	r2, [r5, #20]
   14890:	69a9      	ldr	r1, [r5, #24]
   14892:	428a      	cmp	r2, r1
   14894:	da63      	bge.n	1495e <d_substitution+0x146>
   14896:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   1489a:	f8d5 e010 	ldr.w	lr, [r5, #16]
   1489e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   148a2:	00bf      	lsls	r7, r7, #2
   148a4:	3201      	adds	r2, #1
   148a6:	eb1e 0007 	adds.w	r0, lr, r7
   148aa:	616a      	str	r2, [r5, #20]
   148ac:	d006      	beq.n	148bc <d_substitution+0xa4>
   148ae:	f04f 0c18 	mov.w	ip, #24
   148b2:	f80e c007 	strb.w	ip, [lr, r7]
   148b6:	6046      	str	r6, [r0, #4]
   148b8:	f8c0 8008 	str.w	r8, [r0, #8]
   148bc:	62e8      	str	r0, [r5, #44]	; 0x2c
   148be:	2c00      	cmp	r4, #0
   148c0:	d04a      	beq.n	14958 <d_substitution+0x140>
   148c2:	68de      	ldr	r6, [r3, #12]
   148c4:	691c      	ldr	r4, [r3, #16]
   148c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   148c8:	4291      	cmp	r1, r2
   148ca:	4423      	add	r3, r4
   148cc:	632b      	str	r3, [r5, #48]	; 0x30
   148ce:	dd41      	ble.n	14954 <d_substitution+0x13c>
   148d0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   148d4:	6929      	ldr	r1, [r5, #16]
   148d6:	009b      	lsls	r3, r3, #2
   148d8:	3201      	adds	r2, #1
   148da:	18c8      	adds	r0, r1, r3
   148dc:	616a      	str	r2, [r5, #20]
   148de:	d003      	beq.n	148e8 <d_substitution+0xd0>
   148e0:	2218      	movs	r2, #24
   148e2:	54ca      	strb	r2, [r1, r3]
   148e4:	6046      	str	r6, [r0, #4]
   148e6:	6084      	str	r4, [r0, #8]
   148e8:	68eb      	ldr	r3, [r5, #12]
   148ea:	781b      	ldrb	r3, [r3, #0]
   148ec:	2b42      	cmp	r3, #66	; 0x42
   148ee:	d038      	beq.n	14962 <d_substitution+0x14a>
   148f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148f4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   148f8:	b2e3      	uxtb	r3, r4
   148fa:	2b09      	cmp	r3, #9
   148fc:	d8ab      	bhi.n	14856 <d_substitution+0x3e>
   148fe:	2100      	movs	r1, #0
   14900:	e00d      	b.n	1491e <d_substitution+0x106>
   14902:	3b30      	subs	r3, #48	; 0x30
   14904:	4299      	cmp	r1, r3
   14906:	d88e      	bhi.n	14826 <d_substitution+0xe>
   14908:	68e9      	ldr	r1, [r5, #12]
   1490a:	780a      	ldrb	r2, [r1, #0]
   1490c:	1c48      	adds	r0, r1, #1
   1490e:	b11a      	cbz	r2, 14918 <d_substitution+0x100>
   14910:	60e8      	str	r0, [r5, #12]
   14912:	780a      	ldrb	r2, [r1, #0]
   14914:	2a5f      	cmp	r2, #95	; 0x5f
   14916:	d014      	beq.n	14942 <d_substitution+0x12a>
   14918:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1491c:	4619      	mov	r1, r3
   1491e:	b2e4      	uxtb	r4, r4
   14920:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14924:	2c09      	cmp	r4, #9
   14926:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   1492a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1492e:	d9e8      	bls.n	14902 <d_substitution+0xea>
   14930:	2819      	cmp	r0, #25
   14932:	f63f af78 	bhi.w	14826 <d_substitution+0xe>
   14936:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1493a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1493e:	3b37      	subs	r3, #55	; 0x37
   14940:	e7e0      	b.n	14904 <d_substitution+0xec>
   14942:	3301      	adds	r3, #1
   14944:	e77c      	b.n	14840 <d_substitution+0x28>
   14946:	68eb      	ldr	r3, [r5, #12]
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	3b43      	subs	r3, #67	; 0x43
   1494c:	2b01      	cmp	r3, #1
   1494e:	bf98      	it	ls
   14950:	2401      	movls	r4, #1
   14952:	e78e      	b.n	14872 <d_substitution+0x5a>
   14954:	2000      	movs	r0, #0
   14956:	e7c7      	b.n	148e8 <d_substitution+0xd0>
   14958:	685e      	ldr	r6, [r3, #4]
   1495a:	689c      	ldr	r4, [r3, #8]
   1495c:	e7b3      	b.n	148c6 <d_substitution+0xae>
   1495e:	2000      	movs	r0, #0
   14960:	e7ac      	b.n	148bc <d_substitution+0xa4>
   14962:	4601      	mov	r1, r0
   14964:	4628      	mov	r0, r5
   14966:	f7ff ff3b 	bl	147e0 <d_abi_tags>
   1496a:	2800      	cmp	r0, #0
   1496c:	f43f af5b 	beq.w	14826 <d_substitution+0xe>
   14970:	6a2b      	ldr	r3, [r5, #32]
   14972:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14974:	4293      	cmp	r3, r2
   14976:	dabb      	bge.n	148f0 <d_substitution+0xd8>
   14978:	69e9      	ldr	r1, [r5, #28]
   1497a:	1c5a      	adds	r2, r3, #1
   1497c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14980:	622a      	str	r2, [r5, #32]
   14982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14986:	69a9      	ldr	r1, [r5, #24]
   14988:	696a      	ldr	r2, [r5, #20]
   1498a:	e798      	b.n	148be <d_substitution+0xa6>
   1498c:	00023b40 	.word	0x00023b40

00014990 <d_call_offset>:
   14990:	b538      	push	{r3, r4, r5, lr}
   14992:	4604      	mov	r4, r0
   14994:	b929      	cbnz	r1, 149a2 <d_call_offset+0x12>
   14996:	68c3      	ldr	r3, [r0, #12]
   14998:	781a      	ldrb	r2, [r3, #0]
   1499a:	b132      	cbz	r2, 149aa <d_call_offset+0x1a>
   1499c:	1c5a      	adds	r2, r3, #1
   1499e:	60c2      	str	r2, [r0, #12]
   149a0:	7819      	ldrb	r1, [r3, #0]
   149a2:	2968      	cmp	r1, #104	; 0x68
   149a4:	d019      	beq.n	149da <d_call_offset+0x4a>
   149a6:	2976      	cmp	r1, #118	; 0x76
   149a8:	d001      	beq.n	149ae <d_call_offset+0x1e>
   149aa:	2000      	movs	r0, #0
   149ac:	bd38      	pop	{r3, r4, r5, pc}
   149ae:	f104 050c 	add.w	r5, r4, #12
   149b2:	4628      	mov	r0, r5
   149b4:	f7ff fe38 	bl	14628 <d_number.isra.0>
   149b8:	68e3      	ldr	r3, [r4, #12]
   149ba:	781a      	ldrb	r2, [r3, #0]
   149bc:	2a5f      	cmp	r2, #95	; 0x5f
   149be:	d1f4      	bne.n	149aa <d_call_offset+0x1a>
   149c0:	3301      	adds	r3, #1
   149c2:	60e3      	str	r3, [r4, #12]
   149c4:	4628      	mov	r0, r5
   149c6:	f7ff fe2f 	bl	14628 <d_number.isra.0>
   149ca:	68e3      	ldr	r3, [r4, #12]
   149cc:	781a      	ldrb	r2, [r3, #0]
   149ce:	2a5f      	cmp	r2, #95	; 0x5f
   149d0:	d1eb      	bne.n	149aa <d_call_offset+0x1a>
   149d2:	3301      	adds	r3, #1
   149d4:	60e3      	str	r3, [r4, #12]
   149d6:	2001      	movs	r0, #1
   149d8:	bd38      	pop	{r3, r4, r5, pc}
   149da:	f104 000c 	add.w	r0, r4, #12
   149de:	f7ff fe23 	bl	14628 <d_number.isra.0>
   149e2:	e7f2      	b.n	149ca <d_call_offset+0x3a>

000149e4 <d_lookup_template_argument.isra.6>:
   149e4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   149e8:	b19b      	cbz	r3, 14a12 <d_lookup_template_argument.isra.6+0x2e>
   149ea:	680a      	ldr	r2, [r1, #0]
   149ec:	685b      	ldr	r3, [r3, #4]
   149ee:	2a00      	cmp	r2, #0
   149f0:	689b      	ldr	r3, [r3, #8]
   149f2:	db09      	blt.n	14a08 <d_lookup_template_argument.isra.6+0x24>
   149f4:	b923      	cbnz	r3, 14a00 <d_lookup_template_argument.isra.6+0x1c>
   149f6:	e007      	b.n	14a08 <d_lookup_template_argument.isra.6+0x24>
   149f8:	b142      	cbz	r2, 14a0c <d_lookup_template_argument.isra.6+0x28>
   149fa:	689b      	ldr	r3, [r3, #8]
   149fc:	3a01      	subs	r2, #1
   149fe:	b11b      	cbz	r3, 14a08 <d_lookup_template_argument.isra.6+0x24>
   14a00:	7819      	ldrb	r1, [r3, #0]
   14a02:	292f      	cmp	r1, #47	; 0x2f
   14a04:	d0f8      	beq.n	149f8 <d_lookup_template_argument.isra.6+0x14>
   14a06:	2300      	movs	r3, #0
   14a08:	4618      	mov	r0, r3
   14a0a:	4770      	bx	lr
   14a0c:	685b      	ldr	r3, [r3, #4]
   14a0e:	4618      	mov	r0, r3
   14a10:	4770      	bx	lr
   14a12:	2201      	movs	r2, #1
   14a14:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14a18:	e7f6      	b.n	14a08 <d_lookup_template_argument.isra.6+0x24>
   14a1a:	bf00      	nop

00014a1c <d_find_pack>:
   14a1c:	2900      	cmp	r1, #0
   14a1e:	d041      	beq.n	14aa4 <d_find_pack+0x88>
   14a20:	b538      	push	{r3, r4, r5, lr}
   14a22:	4605      	mov	r5, r0
   14a24:	460c      	mov	r4, r1
   14a26:	7823      	ldrb	r3, [r4, #0]
   14a28:	2b4b      	cmp	r3, #75	; 0x4b
   14a2a:	d827      	bhi.n	14a7c <d_find_pack+0x60>
   14a2c:	e8df f003 	tbb	[pc, r3]
   14a30:	2626262e 	.word	0x2626262e
   14a34:	2b2e3026 	.word	0x2b2e3026
   14a38:	2626262b 	.word	0x2626262b
   14a3c:	26262626 	.word	0x26262626
   14a40:	26262626 	.word	0x26262626
   14a44:	26262626 	.word	0x26262626
   14a48:	2626262e 	.word	0x2626262e
   14a4c:	26262626 	.word	0x26262626
   14a50:	26262626 	.word	0x26262626
   14a54:	2e262626 	.word	0x2e262626
   14a58:	26262626 	.word	0x26262626
   14a5c:	2626262e 	.word	0x2626262e
   14a60:	262b2e26 	.word	0x262b2e26
   14a64:	26262626 	.word	0x26262626
   14a68:	26262626 	.word	0x26262626
   14a6c:	26262626 	.word	0x26262626
   14a70:	26262e2e 	.word	0x26262e2e
   14a74:	2e2e2e26 	.word	0x2e2e2e26
   14a78:	2e2e2626 	.word	0x2e2e2626
   14a7c:	6861      	ldr	r1, [r4, #4]
   14a7e:	4628      	mov	r0, r5
   14a80:	f7ff ffcc 	bl	14a1c <d_find_pack>
   14a84:	b918      	cbnz	r0, 14a8e <d_find_pack+0x72>
   14a86:	68a4      	ldr	r4, [r4, #8]
   14a88:	2c00      	cmp	r4, #0
   14a8a:	d1cc      	bne.n	14a26 <d_find_pack+0xa>
   14a8c:	2000      	movs	r0, #0
   14a8e:	bd38      	pop	{r3, r4, r5, pc}
   14a90:	1d21      	adds	r1, r4, #4
   14a92:	4628      	mov	r0, r5
   14a94:	f7ff ffa6 	bl	149e4 <d_lookup_template_argument.isra.6>
   14a98:	2800      	cmp	r0, #0
   14a9a:	d0f7      	beq.n	14a8c <d_find_pack+0x70>
   14a9c:	7803      	ldrb	r3, [r0, #0]
   14a9e:	2b2f      	cmp	r3, #47	; 0x2f
   14aa0:	d1f4      	bne.n	14a8c <d_find_pack+0x70>
   14aa2:	bd38      	pop	{r3, r4, r5, pc}
   14aa4:	2000      	movs	r0, #0
   14aa6:	4770      	bx	lr

00014aa8 <d_growable_string_callback_adapter>:
   14aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14aaa:	4615      	mov	r5, r2
   14aac:	6852      	ldr	r2, [r2, #4]
   14aae:	68ac      	ldr	r4, [r5, #8]
   14ab0:	1c4b      	adds	r3, r1, #1
   14ab2:	4413      	add	r3, r2
   14ab4:	42a3      	cmp	r3, r4
   14ab6:	b083      	sub	sp, #12
   14ab8:	460e      	mov	r6, r1
   14aba:	4607      	mov	r7, r0
   14abc:	d813      	bhi.n	14ae6 <d_growable_string_callback_adapter+0x3e>
   14abe:	68ec      	ldr	r4, [r5, #12]
   14ac0:	b10c      	cbz	r4, 14ac6 <d_growable_string_callback_adapter+0x1e>
   14ac2:	b003      	add	sp, #12
   14ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ac6:	e895 0009 	ldmia.w	r5, {r0, r3}
   14aca:	4632      	mov	r2, r6
   14acc:	4639      	mov	r1, r7
   14ace:	4418      	add	r0, r3
   14ad0:	f009 fb8e 	bl	1e1f0 <memcpy>
   14ad4:	682b      	ldr	r3, [r5, #0]
   14ad6:	686a      	ldr	r2, [r5, #4]
   14ad8:	4433      	add	r3, r6
   14ada:	549c      	strb	r4, [r3, r2]
   14adc:	686b      	ldr	r3, [r5, #4]
   14ade:	441e      	add	r6, r3
   14ae0:	606e      	str	r6, [r5, #4]
   14ae2:	b003      	add	sp, #12
   14ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ae6:	68ea      	ldr	r2, [r5, #12]
   14ae8:	2a00      	cmp	r2, #0
   14aea:	d1ea      	bne.n	14ac2 <d_growable_string_callback_adapter+0x1a>
   14aec:	b91c      	cbnz	r4, 14af6 <d_growable_string_callback_adapter+0x4e>
   14aee:	2b02      	cmp	r3, #2
   14af0:	f04f 0402 	mov.w	r4, #2
   14af4:	d902      	bls.n	14afc <d_growable_string_callback_adapter+0x54>
   14af6:	0064      	lsls	r4, r4, #1
   14af8:	42a3      	cmp	r3, r4
   14afa:	d8fc      	bhi.n	14af6 <d_growable_string_callback_adapter+0x4e>
   14afc:	4621      	mov	r1, r4
   14afe:	6828      	ldr	r0, [r5, #0]
   14b00:	f009 fd06 	bl	1e510 <realloc>
   14b04:	b110      	cbz	r0, 14b0c <d_growable_string_callback_adapter+0x64>
   14b06:	6028      	str	r0, [r5, #0]
   14b08:	60ac      	str	r4, [r5, #8]
   14b0a:	e7d8      	b.n	14abe <d_growable_string_callback_adapter+0x16>
   14b0c:	9001      	str	r0, [sp, #4]
   14b0e:	6828      	ldr	r0, [r5, #0]
   14b10:	f009 f832 	bl	1db78 <free>
   14b14:	9b01      	ldr	r3, [sp, #4]
   14b16:	602b      	str	r3, [r5, #0]
   14b18:	2201      	movs	r2, #1
   14b1a:	606b      	str	r3, [r5, #4]
   14b1c:	60ab      	str	r3, [r5, #8]
   14b1e:	60ea      	str	r2, [r5, #12]
   14b20:	e7cf      	b.n	14ac2 <d_growable_string_callback_adapter+0x1a>
   14b22:	bf00      	nop

00014b24 <d_append_num>:
   14b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b28:	b088      	sub	sp, #32
   14b2a:	460a      	mov	r2, r1
   14b2c:	4604      	mov	r4, r0
   14b2e:	491b      	ldr	r1, [pc, #108]	; (14b9c <d_append_num+0x78>)
   14b30:	a801      	add	r0, sp, #4
   14b32:	f009 fefb 	bl	1e92c <sprintf>
   14b36:	a801      	add	r0, sp, #4
   14b38:	f00a f8a2 	bl	1ec80 <strlen>
   14b3c:	b350      	cbz	r0, 14b94 <d_append_num+0x70>
   14b3e:	ad01      	add	r5, sp, #4
   14b40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14b44:	182f      	adds	r7, r5, r0
   14b46:	f04f 0800 	mov.w	r8, #0
   14b4a:	e009      	b.n	14b60 <d_append_num+0x3c>
   14b4c:	460b      	mov	r3, r1
   14b4e:	42bd      	cmp	r5, r7
   14b50:	f101 0101 	add.w	r1, r1, #1
   14b54:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14b58:	54e6      	strb	r6, [r4, r3]
   14b5a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14b5e:	d019      	beq.n	14b94 <d_append_num+0x70>
   14b60:	29ff      	cmp	r1, #255	; 0xff
   14b62:	f815 6b01 	ldrb.w	r6, [r5], #1
   14b66:	d1f1      	bne.n	14b4c <d_append_num+0x28>
   14b68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14b6c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14b70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14b74:	4620      	mov	r0, r4
   14b76:	4798      	blx	r3
   14b78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14b7c:	3301      	adds	r3, #1
   14b7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14b82:	2300      	movs	r3, #0
   14b84:	2101      	movs	r1, #1
   14b86:	42bd      	cmp	r5, r7
   14b88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14b8c:	54e6      	strb	r6, [r4, r3]
   14b8e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14b92:	d1e5      	bne.n	14b60 <d_append_num+0x3c>
   14b94:	b008      	add	sp, #32
   14b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b9a:	bf00      	nop
   14b9c:	000242fc 	.word	0x000242fc

00014ba0 <d_exprlist>:
   14ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ba4:	68c3      	ldr	r3, [r0, #12]
   14ba6:	781d      	ldrb	r5, [r3, #0]
   14ba8:	b083      	sub	sp, #12
   14baa:	2200      	movs	r2, #0
   14bac:	428d      	cmp	r5, r1
   14bae:	4604      	mov	r4, r0
   14bb0:	9201      	str	r2, [sp, #4]
   14bb2:	f000 81c6 	beq.w	14f42 <d_exprlist+0x3a2>
   14bb6:	4688      	mov	r8, r1
   14bb8:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15058 <d_exprlist+0x4b8>
   14bbc:	ae01      	add	r6, sp, #4
   14bbe:	e023      	b.n	14c08 <d_exprlist+0x68>
   14bc0:	2a66      	cmp	r2, #102	; 0x66
   14bc2:	d04c      	beq.n	14c5e <d_exprlist+0xbe>
   14bc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14bc8:	2909      	cmp	r1, #9
   14bca:	f200 8217 	bhi.w	14ffc <d_exprlist+0x45c>
   14bce:	4620      	mov	r0, r4
   14bd0:	f001 fb10 	bl	161f4 <d_unqualified_name>
   14bd4:	4605      	mov	r5, r0
   14bd6:	2800      	cmp	r0, #0
   14bd8:	f000 8170 	beq.w	14ebc <d_exprlist+0x31c>
   14bdc:	68e3      	ldr	r3, [r4, #12]
   14bde:	781b      	ldrb	r3, [r3, #0]
   14be0:	2b49      	cmp	r3, #73	; 0x49
   14be2:	f000 8092 	beq.w	14d0a <d_exprlist+0x16a>
   14be6:	6367      	str	r7, [r4, #52]	; 0x34
   14be8:	462a      	mov	r2, r5
   14bea:	2300      	movs	r3, #0
   14bec:	212e      	movs	r1, #46	; 0x2e
   14bee:	4620      	mov	r0, r4
   14bf0:	f7ff fbc8 	bl	14384 <d_make_comp>
   14bf4:	6030      	str	r0, [r6, #0]
   14bf6:	2800      	cmp	r0, #0
   14bf8:	d05b      	beq.n	14cb2 <d_exprlist+0x112>
   14bfa:	68e3      	ldr	r3, [r4, #12]
   14bfc:	781a      	ldrb	r2, [r3, #0]
   14bfe:	4542      	cmp	r2, r8
   14c00:	f100 0608 	add.w	r6, r0, #8
   14c04:	f000 8107 	beq.w	14e16 <d_exprlist+0x276>
   14c08:	2501      	movs	r5, #1
   14c0a:	6b67      	ldr	r7, [r4, #52]	; 0x34
   14c0c:	6365      	str	r5, [r4, #52]	; 0x34
   14c0e:	781a      	ldrb	r2, [r3, #0]
   14c10:	2a4c      	cmp	r2, #76	; 0x4c
   14c12:	d047      	beq.n	14ca4 <d_exprlist+0x104>
   14c14:	2a54      	cmp	r2, #84	; 0x54
   14c16:	d051      	beq.n	14cbc <d_exprlist+0x11c>
   14c18:	2a73      	cmp	r2, #115	; 0x73
   14c1a:	d1d1      	bne.n	14bc0 <d_exprlist+0x20>
   14c1c:	785a      	ldrb	r2, [r3, #1]
   14c1e:	2a72      	cmp	r2, #114	; 0x72
   14c20:	f000 80e2 	beq.w	14de8 <d_exprlist+0x248>
   14c24:	2a70      	cmp	r2, #112	; 0x70
   14c26:	f000 80fd 	beq.w	14e24 <d_exprlist+0x284>
   14c2a:	4620      	mov	r0, r4
   14c2c:	f001 fa22 	bl	16074 <d_operator_name>
   14c30:	4605      	mov	r5, r0
   14c32:	2800      	cmp	r0, #0
   14c34:	f000 8142 	beq.w	14ebc <d_exprlist+0x31c>
   14c38:	782b      	ldrb	r3, [r5, #0]
   14c3a:	2b31      	cmp	r3, #49	; 0x31
   14c3c:	d043      	beq.n	14cc6 <d_exprlist+0x126>
   14c3e:	2b32      	cmp	r3, #50	; 0x32
   14c40:	d05c      	beq.n	14cfc <d_exprlist+0x15c>
   14c42:	2b33      	cmp	r3, #51	; 0x33
   14c44:	d17b      	bne.n	14d3e <d_exprlist+0x19e>
   14c46:	68e3      	ldr	r3, [r4, #12]
   14c48:	781a      	ldrb	r2, [r3, #0]
   14c4a:	2a5f      	cmp	r2, #95	; 0x5f
   14c4c:	f040 80c1 	bne.w	14dd2 <d_exprlist+0x232>
   14c50:	3301      	adds	r3, #1
   14c52:	60e3      	str	r3, [r4, #12]
   14c54:	2145      	movs	r1, #69	; 0x45
   14c56:	4620      	mov	r0, r4
   14c58:	f7ff ffa2 	bl	14ba0 <d_exprlist>
   14c5c:	e0bc      	b.n	14dd8 <d_exprlist+0x238>
   14c5e:	785a      	ldrb	r2, [r3, #1]
   14c60:	2a70      	cmp	r2, #112	; 0x70
   14c62:	d1e2      	bne.n	14c2a <d_exprlist+0x8a>
   14c64:	1c9a      	adds	r2, r3, #2
   14c66:	60e2      	str	r2, [r4, #12]
   14c68:	789a      	ldrb	r2, [r3, #2]
   14c6a:	2a54      	cmp	r2, #84	; 0x54
   14c6c:	d069      	beq.n	14d42 <d_exprlist+0x1a2>
   14c6e:	4620      	mov	r0, r4
   14c70:	f7ff fd1c 	bl	146ac <d_compact_number>
   14c74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14c78:	4298      	cmp	r0, r3
   14c7a:	d060      	beq.n	14d3e <d_exprlist+0x19e>
   14c7c:	1c43      	adds	r3, r0, #1
   14c7e:	d05e      	beq.n	14d3e <d_exprlist+0x19e>
   14c80:	3001      	adds	r0, #1
   14c82:	6963      	ldr	r3, [r4, #20]
   14c84:	69a2      	ldr	r2, [r4, #24]
   14c86:	4293      	cmp	r3, r2
   14c88:	da59      	bge.n	14d3e <d_exprlist+0x19e>
   14c8a:	6922      	ldr	r2, [r4, #16]
   14c8c:	1c59      	adds	r1, r3, #1
   14c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14c92:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14c96:	6161      	str	r1, [r4, #20]
   14c98:	d051      	beq.n	14d3e <d_exprlist+0x19e>
   14c9a:	2106      	movs	r1, #6
   14c9c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14ca0:	6068      	str	r0, [r5, #4]
   14ca2:	e7a0      	b.n	14be6 <d_exprlist+0x46>
   14ca4:	4620      	mov	r0, r4
   14ca6:	f001 fef3 	bl	16a90 <d_expr_primary>
   14caa:	4605      	mov	r5, r0
   14cac:	6367      	str	r7, [r4, #52]	; 0x34
   14cae:	2d00      	cmp	r5, #0
   14cb0:	d19a      	bne.n	14be8 <d_exprlist+0x48>
   14cb2:	2500      	movs	r5, #0
   14cb4:	4628      	mov	r0, r5
   14cb6:	b003      	add	sp, #12
   14cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cbc:	4620      	mov	r0, r4
   14cbe:	f7ff fd11 	bl	146e4 <d_template_param>
   14cc2:	4605      	mov	r5, r0
   14cc4:	e7f2      	b.n	14cac <d_exprlist+0x10c>
   14cc6:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14cca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14ccc:	f8db 2008 	ldr.w	r2, [fp, #8]
   14cd0:	f8db a000 	ldr.w	sl, [fp]
   14cd4:	3a02      	subs	r2, #2
   14cd6:	4413      	add	r3, r2
   14cd8:	6323      	str	r3, [r4, #48]	; 0x30
   14cda:	4650      	mov	r0, sl
   14cdc:	4649      	mov	r1, r9
   14cde:	f009 fe53 	bl	1e988 <strcmp>
   14ce2:	2800      	cmp	r0, #0
   14ce4:	f000 80e6 	beq.w	14eb4 <d_exprlist+0x314>
   14ce8:	f8db 300c 	ldr.w	r3, [fp, #12]
   14cec:	2b03      	cmp	r3, #3
   14cee:	d826      	bhi.n	14d3e <d_exprlist+0x19e>
   14cf0:	e8df f013 	tbh	[pc, r3, lsl #1]
   14cf4:	0135002b 	.word	0x0135002b
   14cf8:	00a50033 	.word	0x00a50033
   14cfc:	686b      	ldr	r3, [r5, #4]
   14cfe:	2b03      	cmp	r3, #3
   14d00:	d81d      	bhi.n	14d3e <d_exprlist+0x19e>
   14d02:	e8df f003 	tbb	[pc, r3]
   14d06:	6622      	.short	0x6622
   14d08:	1c1c      	.short	0x1c1c
   14d0a:	4620      	mov	r0, r4
   14d0c:	f000 fc04 	bl	15518 <d_template_args>
   14d10:	462a      	mov	r2, r5
   14d12:	4603      	mov	r3, r0
   14d14:	2104      	movs	r1, #4
   14d16:	4620      	mov	r0, r4
   14d18:	f7ff fb34 	bl	14384 <d_make_comp>
   14d1c:	4605      	mov	r5, r0
   14d1e:	e7c5      	b.n	14cac <d_exprlist+0x10c>
   14d20:	2a74      	cmp	r2, #116	; 0x74
   14d22:	d182      	bne.n	14c2a <d_exprlist+0x8a>
   14d24:	785b      	ldrb	r3, [r3, #1]
   14d26:	2b6c      	cmp	r3, #108	; 0x6c
   14d28:	f47f af7f 	bne.w	14c2a <d_exprlist+0x8a>
   14d2c:	4620      	mov	r0, r4
   14d2e:	f000 fdb9 	bl	158a4 <d_type>
   14d32:	68e3      	ldr	r3, [r4, #12]
   14d34:	785a      	ldrb	r2, [r3, #1]
   14d36:	4605      	mov	r5, r0
   14d38:	2a00      	cmp	r2, #0
   14d3a:	f040 8169 	bne.w	15010 <d_exprlist+0x470>
   14d3e:	6367      	str	r7, [r4, #52]	; 0x34
   14d40:	e7b7      	b.n	14cb2 <d_exprlist+0x112>
   14d42:	3303      	adds	r3, #3
   14d44:	60e3      	str	r3, [r4, #12]
   14d46:	2000      	movs	r0, #0
   14d48:	e79b      	b.n	14c82 <d_exprlist+0xe2>
   14d4a:	462a      	mov	r2, r5
   14d4c:	2300      	movs	r3, #0
   14d4e:	2135      	movs	r1, #53	; 0x35
   14d50:	4620      	mov	r0, r4
   14d52:	f7ff fb17 	bl	14384 <d_make_comp>
   14d56:	4605      	mov	r5, r0
   14d58:	e7a8      	b.n	14cac <d_exprlist+0x10c>
   14d5a:	f1ba 0f00 	cmp.w	sl, #0
   14d5e:	d0ee      	beq.n	14d3e <d_exprlist+0x19e>
   14d60:	686b      	ldr	r3, [r5, #4]
   14d62:	681b      	ldr	r3, [r3, #0]
   14d64:	785a      	ldrb	r2, [r3, #1]
   14d66:	2a63      	cmp	r2, #99	; 0x63
   14d68:	f000 80d2 	beq.w	14f10 <d_exprlist+0x370>
   14d6c:	f89a 3000 	ldrb.w	r3, [sl]
   14d70:	2b66      	cmp	r3, #102	; 0x66
   14d72:	f000 80ef 	beq.w	14f54 <d_exprlist+0x3b4>
   14d76:	4620      	mov	r0, r4
   14d78:	f000 f970 	bl	1505c <d_expression_1>
   14d7c:	4683      	mov	fp, r0
   14d7e:	49b1      	ldr	r1, [pc, #708]	; (15044 <d_exprlist+0x4a4>)
   14d80:	4650      	mov	r0, sl
   14d82:	f009 fe01 	bl	1e988 <strcmp>
   14d86:	2800      	cmp	r0, #0
   14d88:	f000 809d 	beq.w	14ec6 <d_exprlist+0x326>
   14d8c:	49ae      	ldr	r1, [pc, #696]	; (15048 <d_exprlist+0x4a8>)
   14d8e:	4650      	mov	r0, sl
   14d90:	f009 fdfa 	bl	1e988 <strcmp>
   14d94:	b130      	cbz	r0, 14da4 <d_exprlist+0x204>
   14d96:	4650      	mov	r0, sl
   14d98:	49ac      	ldr	r1, [pc, #688]	; (1504c <d_exprlist+0x4ac>)
   14d9a:	f009 fdf5 	bl	1e988 <strcmp>
   14d9e:	2800      	cmp	r0, #0
   14da0:	f040 8083 	bne.w	14eaa <d_exprlist+0x30a>
   14da4:	4620      	mov	r0, r4
   14da6:	f001 fa25 	bl	161f4 <d_unqualified_name>
   14daa:	68e3      	ldr	r3, [r4, #12]
   14dac:	781b      	ldrb	r3, [r3, #0]
   14dae:	2b49      	cmp	r3, #73	; 0x49
   14db0:	4682      	mov	sl, r0
   14db2:	f000 80e9 	beq.w	14f88 <d_exprlist+0x3e8>
   14db6:	4653      	mov	r3, sl
   14db8:	465a      	mov	r2, fp
   14dba:	2138      	movs	r1, #56	; 0x38
   14dbc:	4620      	mov	r0, r4
   14dbe:	f7ff fae1 	bl	14384 <d_make_comp>
   14dc2:	462a      	mov	r2, r5
   14dc4:	4603      	mov	r3, r0
   14dc6:	2137      	movs	r1, #55	; 0x37
   14dc8:	4620      	mov	r0, r4
   14dca:	f7ff fadb 	bl	14384 <d_make_comp>
   14dce:	4605      	mov	r5, r0
   14dd0:	e76c      	b.n	14cac <d_exprlist+0x10c>
   14dd2:	4620      	mov	r0, r4
   14dd4:	f000 f942 	bl	1505c <d_expression_1>
   14dd8:	4603      	mov	r3, r0
   14dda:	462a      	mov	r2, r5
   14ddc:	2136      	movs	r1, #54	; 0x36
   14dde:	4620      	mov	r0, r4
   14de0:	f7ff fad0 	bl	14384 <d_make_comp>
   14de4:	4605      	mov	r5, r0
   14de6:	e761      	b.n	14cac <d_exprlist+0x10c>
   14de8:	3302      	adds	r3, #2
   14dea:	60e3      	str	r3, [r4, #12]
   14dec:	4620      	mov	r0, r4
   14dee:	f000 fd59 	bl	158a4 <d_type>
   14df2:	4682      	mov	sl, r0
   14df4:	4620      	mov	r0, r4
   14df6:	f001 f9fd 	bl	161f4 <d_unqualified_name>
   14dfa:	68e3      	ldr	r3, [r4, #12]
   14dfc:	781b      	ldrb	r3, [r3, #0]
   14dfe:	2b49      	cmp	r3, #73	; 0x49
   14e00:	4683      	mov	fp, r0
   14e02:	f000 8093 	beq.w	14f2c <d_exprlist+0x38c>
   14e06:	4603      	mov	r3, r0
   14e08:	4629      	mov	r1, r5
   14e0a:	4652      	mov	r2, sl
   14e0c:	4620      	mov	r0, r4
   14e0e:	f7ff fab9 	bl	14384 <d_make_comp>
   14e12:	4605      	mov	r5, r0
   14e14:	e74a      	b.n	14cac <d_exprlist+0x10c>
   14e16:	9d01      	ldr	r5, [sp, #4]
   14e18:	3301      	adds	r3, #1
   14e1a:	4628      	mov	r0, r5
   14e1c:	60e3      	str	r3, [r4, #12]
   14e1e:	b003      	add	sp, #12
   14e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e24:	3302      	adds	r3, #2
   14e26:	60e3      	str	r3, [r4, #12]
   14e28:	4620      	mov	r0, r4
   14e2a:	f000 f917 	bl	1505c <d_expression_1>
   14e2e:	2300      	movs	r3, #0
   14e30:	4602      	mov	r2, r0
   14e32:	214a      	movs	r1, #74	; 0x4a
   14e34:	4620      	mov	r0, r4
   14e36:	f7ff faa5 	bl	14384 <d_make_comp>
   14e3a:	4605      	mov	r5, r0
   14e3c:	e736      	b.n	14cac <d_exprlist+0x10c>
   14e3e:	f1ba 0f00 	cmp.w	sl, #0
   14e42:	f43f af7c 	beq.w	14d3e <d_exprlist+0x19e>
   14e46:	4982      	ldr	r1, [pc, #520]	; (15050 <d_exprlist+0x4b0>)
   14e48:	4650      	mov	r0, sl
   14e4a:	f009 fd9d 	bl	1e988 <strcmp>
   14e4e:	2800      	cmp	r0, #0
   14e50:	d03f      	beq.n	14ed2 <d_exprlist+0x332>
   14e52:	f89a 3000 	ldrb.w	r3, [sl]
   14e56:	2b66      	cmp	r3, #102	; 0x66
   14e58:	f000 80bd 	beq.w	14fd6 <d_exprlist+0x436>
   14e5c:	2b6e      	cmp	r3, #110	; 0x6e
   14e5e:	f47f af6e 	bne.w	14d3e <d_exprlist+0x19e>
   14e62:	f89a 3001 	ldrb.w	r3, [sl, #1]
   14e66:	2b77      	cmp	r3, #119	; 0x77
   14e68:	d002      	beq.n	14e70 <d_exprlist+0x2d0>
   14e6a:	2b61      	cmp	r3, #97	; 0x61
   14e6c:	f47f af67 	bne.w	14d3e <d_exprlist+0x19e>
   14e70:	215f      	movs	r1, #95	; 0x5f
   14e72:	4620      	mov	r0, r4
   14e74:	f7ff fe94 	bl	14ba0 <d_exprlist>
   14e78:	4682      	mov	sl, r0
   14e7a:	4620      	mov	r0, r4
   14e7c:	f000 fd12 	bl	158a4 <d_type>
   14e80:	68e3      	ldr	r3, [r4, #12]
   14e82:	781a      	ldrb	r2, [r3, #0]
   14e84:	2a45      	cmp	r2, #69	; 0x45
   14e86:	4683      	mov	fp, r0
   14e88:	f000 80a1 	beq.w	14fce <d_exprlist+0x42e>
   14e8c:	2a70      	cmp	r2, #112	; 0x70
   14e8e:	f000 80a6 	beq.w	14fde <d_exprlist+0x43e>
   14e92:	2a69      	cmp	r2, #105	; 0x69
   14e94:	f47f af53 	bne.w	14d3e <d_exprlist+0x19e>
   14e98:	785b      	ldrb	r3, [r3, #1]
   14e9a:	2b6c      	cmp	r3, #108	; 0x6c
   14e9c:	f47f af4f 	bne.w	14d3e <d_exprlist+0x19e>
   14ea0:	4620      	mov	r0, r4
   14ea2:	f000 f8db 	bl	1505c <d_expression_1>
   14ea6:	4603      	mov	r3, r0
   14ea8:	e01f      	b.n	14eea <d_exprlist+0x34a>
   14eaa:	4620      	mov	r0, r4
   14eac:	f000 f8d6 	bl	1505c <d_expression_1>
   14eb0:	4682      	mov	sl, r0
   14eb2:	e780      	b.n	14db6 <d_exprlist+0x216>
   14eb4:	4620      	mov	r0, r4
   14eb6:	f000 fcf5 	bl	158a4 <d_type>
   14eba:	e78d      	b.n	14dd8 <d_exprlist+0x238>
   14ebc:	4628      	mov	r0, r5
   14ebe:	6367      	str	r7, [r4, #52]	; 0x34
   14ec0:	b003      	add	sp, #12
   14ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec6:	2145      	movs	r1, #69	; 0x45
   14ec8:	4620      	mov	r0, r4
   14eca:	f7ff fe69 	bl	14ba0 <d_exprlist>
   14ece:	4682      	mov	sl, r0
   14ed0:	e771      	b.n	14db6 <d_exprlist+0x216>
   14ed2:	4620      	mov	r0, r4
   14ed4:	f000 f8c2 	bl	1505c <d_expression_1>
   14ed8:	4682      	mov	sl, r0
   14eda:	4620      	mov	r0, r4
   14edc:	f000 f8be 	bl	1505c <d_expression_1>
   14ee0:	4683      	mov	fp, r0
   14ee2:	4620      	mov	r0, r4
   14ee4:	f000 f8ba 	bl	1505c <d_expression_1>
   14ee8:	4603      	mov	r3, r0
   14eea:	465a      	mov	r2, fp
   14eec:	213b      	movs	r1, #59	; 0x3b
   14eee:	4620      	mov	r0, r4
   14ef0:	f7ff fa48 	bl	14384 <d_make_comp>
   14ef4:	4652      	mov	r2, sl
   14ef6:	4603      	mov	r3, r0
   14ef8:	213a      	movs	r1, #58	; 0x3a
   14efa:	4620      	mov	r0, r4
   14efc:	f7ff fa42 	bl	14384 <d_make_comp>
   14f00:	462a      	mov	r2, r5
   14f02:	4603      	mov	r3, r0
   14f04:	2139      	movs	r1, #57	; 0x39
   14f06:	4620      	mov	r0, r4
   14f08:	f7ff fa3c 	bl	14384 <d_make_comp>
   14f0c:	4605      	mov	r5, r0
   14f0e:	e6cd      	b.n	14cac <d_exprlist+0x10c>
   14f10:	781b      	ldrb	r3, [r3, #0]
   14f12:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   14f16:	2a01      	cmp	r2, #1
   14f18:	d903      	bls.n	14f22 <d_exprlist+0x382>
   14f1a:	3b72      	subs	r3, #114	; 0x72
   14f1c:	2b01      	cmp	r3, #1
   14f1e:	f63f af25 	bhi.w	14d6c <d_exprlist+0x1cc>
   14f22:	4620      	mov	r0, r4
   14f24:	f000 fcbe 	bl	158a4 <d_type>
   14f28:	4683      	mov	fp, r0
   14f2a:	e728      	b.n	14d7e <d_exprlist+0x1de>
   14f2c:	4620      	mov	r0, r4
   14f2e:	f000 faf3 	bl	15518 <d_template_args>
   14f32:	465a      	mov	r2, fp
   14f34:	4603      	mov	r3, r0
   14f36:	2104      	movs	r1, #4
   14f38:	4620      	mov	r0, r4
   14f3a:	f7ff fa23 	bl	14384 <d_make_comp>
   14f3e:	4603      	mov	r3, r0
   14f40:	e762      	b.n	14e08 <d_exprlist+0x268>
   14f42:	3301      	adds	r3, #1
   14f44:	60c3      	str	r3, [r0, #12]
   14f46:	212e      	movs	r1, #46	; 0x2e
   14f48:	4613      	mov	r3, r2
   14f4a:	b003      	add	sp, #12
   14f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f50:	f7ff ba18 	b.w	14384 <d_make_comp>
   14f54:	4620      	mov	r0, r4
   14f56:	f001 f88d 	bl	16074 <d_operator_name>
   14f5a:	4683      	mov	fp, r0
   14f5c:	e70f      	b.n	14d7e <d_exprlist+0x1de>
   14f5e:	f1ba 0f00 	cmp.w	sl, #0
   14f62:	f43f af36 	beq.w	14dd2 <d_exprlist+0x232>
   14f66:	f89a 3000 	ldrb.w	r3, [sl]
   14f6a:	2b70      	cmp	r3, #112	; 0x70
   14f6c:	d017      	beq.n	14f9e <d_exprlist+0x3fe>
   14f6e:	2b6d      	cmp	r3, #109	; 0x6d
   14f70:	d015      	beq.n	14f9e <d_exprlist+0x3fe>
   14f72:	4650      	mov	r0, sl
   14f74:	4937      	ldr	r1, [pc, #220]	; (15054 <d_exprlist+0x4b4>)
   14f76:	f009 fd07 	bl	1e988 <strcmp>
   14f7a:	2800      	cmp	r0, #0
   14f7c:	f47f af29 	bne.w	14dd2 <d_exprlist+0x232>
   14f80:	4620      	mov	r0, r4
   14f82:	f000 fa65 	bl	15450 <d_template_args_1>
   14f86:	e727      	b.n	14dd8 <d_exprlist+0x238>
   14f88:	4620      	mov	r0, r4
   14f8a:	f000 fac5 	bl	15518 <d_template_args>
   14f8e:	4652      	mov	r2, sl
   14f90:	4603      	mov	r3, r0
   14f92:	2104      	movs	r1, #4
   14f94:	4620      	mov	r0, r4
   14f96:	f7ff f9f5 	bl	14384 <d_make_comp>
   14f9a:	4682      	mov	sl, r0
   14f9c:	e70b      	b.n	14db6 <d_exprlist+0x216>
   14f9e:	f89a 2001 	ldrb.w	r2, [sl, #1]
   14fa2:	429a      	cmp	r2, r3
   14fa4:	d1e5      	bne.n	14f72 <d_exprlist+0x3d2>
   14fa6:	68e3      	ldr	r3, [r4, #12]
   14fa8:	781a      	ldrb	r2, [r3, #0]
   14faa:	2a5f      	cmp	r2, #95	; 0x5f
   14fac:	d023      	beq.n	14ff6 <d_exprlist+0x456>
   14fae:	4650      	mov	r0, sl
   14fb0:	4928      	ldr	r1, [pc, #160]	; (15054 <d_exprlist+0x4b4>)
   14fb2:	f009 fce9 	bl	1e988 <strcmp>
   14fb6:	2800      	cmp	r0, #0
   14fb8:	d03f      	beq.n	1503a <d_exprlist+0x49a>
   14fba:	4620      	mov	r0, r4
   14fbc:	f000 f84e 	bl	1505c <d_expression_1>
   14fc0:	4603      	mov	r3, r0
   14fc2:	461a      	mov	r2, r3
   14fc4:	2138      	movs	r1, #56	; 0x38
   14fc6:	4620      	mov	r0, r4
   14fc8:	f7ff f9dc 	bl	14384 <d_make_comp>
   14fcc:	e704      	b.n	14dd8 <d_exprlist+0x238>
   14fce:	3301      	adds	r3, #1
   14fd0:	60e3      	str	r3, [r4, #12]
   14fd2:	2300      	movs	r3, #0
   14fd4:	e789      	b.n	14eea <d_exprlist+0x34a>
   14fd6:	4620      	mov	r0, r4
   14fd8:	f001 f84c 	bl	16074 <d_operator_name>
   14fdc:	e77c      	b.n	14ed8 <d_exprlist+0x338>
   14fde:	785a      	ldrb	r2, [r3, #1]
   14fe0:	2a69      	cmp	r2, #105	; 0x69
   14fe2:	f47f aeac 	bne.w	14d3e <d_exprlist+0x19e>
   14fe6:	3302      	adds	r3, #2
   14fe8:	60e3      	str	r3, [r4, #12]
   14fea:	2145      	movs	r1, #69	; 0x45
   14fec:	4620      	mov	r0, r4
   14fee:	f7ff fdd7 	bl	14ba0 <d_exprlist>
   14ff2:	4603      	mov	r3, r0
   14ff4:	e779      	b.n	14eea <d_exprlist+0x34a>
   14ff6:	3301      	adds	r3, #1
   14ff8:	60e3      	str	r3, [r4, #12]
   14ffa:	e7ba      	b.n	14f72 <d_exprlist+0x3d2>
   14ffc:	2a6f      	cmp	r2, #111	; 0x6f
   14ffe:	d015      	beq.n	1502c <d_exprlist+0x48c>
   15000:	2a69      	cmp	r2, #105	; 0x69
   15002:	f47f ae8d 	bne.w	14d20 <d_exprlist+0x180>
   15006:	785a      	ldrb	r2, [r3, #1]
   15008:	2a6c      	cmp	r2, #108	; 0x6c
   1500a:	f47f ae0e 	bne.w	14c2a <d_exprlist+0x8a>
   1500e:	2500      	movs	r5, #0
   15010:	3302      	adds	r3, #2
   15012:	60e3      	str	r3, [r4, #12]
   15014:	2145      	movs	r1, #69	; 0x45
   15016:	4620      	mov	r0, r4
   15018:	f7ff fdc2 	bl	14ba0 <d_exprlist>
   1501c:	462a      	mov	r2, r5
   1501e:	4603      	mov	r3, r0
   15020:	2130      	movs	r1, #48	; 0x30
   15022:	4620      	mov	r0, r4
   15024:	f7ff f9ae 	bl	14384 <d_make_comp>
   15028:	4605      	mov	r5, r0
   1502a:	e63f      	b.n	14cac <d_exprlist+0x10c>
   1502c:	785a      	ldrb	r2, [r3, #1]
   1502e:	2a6e      	cmp	r2, #110	; 0x6e
   15030:	f47f adfb 	bne.w	14c2a <d_exprlist+0x8a>
   15034:	3302      	adds	r3, #2
   15036:	60e3      	str	r3, [r4, #12]
   15038:	e5c9      	b.n	14bce <d_exprlist+0x2e>
   1503a:	4620      	mov	r0, r4
   1503c:	f000 fa08 	bl	15450 <d_template_args_1>
   15040:	4603      	mov	r3, r0
   15042:	e7be      	b.n	14fc2 <d_exprlist+0x422>
   15044:	00024304 	.word	0x00024304
   15048:	00024308 	.word	0x00024308
   1504c:	0002430c 	.word	0x0002430c
   15050:	00024310 	.word	0x00024310
   15054:	00024300 	.word	0x00024300
   15058:	00024804 	.word	0x00024804

0001505c <d_expression_1>:
   1505c:	68c1      	ldr	r1, [r0, #12]
   1505e:	780b      	ldrb	r3, [r1, #0]
   15060:	2b4c      	cmp	r3, #76	; 0x4c
   15062:	f000 8087 	beq.w	15174 <d_expression_1+0x118>
   15066:	2b54      	cmp	r3, #84	; 0x54
   15068:	f000 8086 	beq.w	15178 <d_expression_1+0x11c>
   1506c:	2b73      	cmp	r3, #115	; 0x73
   1506e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15072:	4604      	mov	r4, r0
   15074:	d037      	beq.n	150e6 <d_expression_1+0x8a>
   15076:	2b66      	cmp	r3, #102	; 0x66
   15078:	d012      	beq.n	150a0 <d_expression_1+0x44>
   1507a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1507e:	2a09      	cmp	r2, #9
   15080:	f200 81b8 	bhi.w	153f4 <d_expression_1+0x398>
   15084:	4620      	mov	r0, r4
   15086:	f001 f8b5 	bl	161f4 <d_unqualified_name>
   1508a:	4605      	mov	r5, r0
   1508c:	2800      	cmp	r0, #0
   1508e:	d06d      	beq.n	1516c <d_expression_1+0x110>
   15090:	68e3      	ldr	r3, [r4, #12]
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	2b49      	cmp	r3, #73	; 0x49
   15096:	f000 8088 	beq.w	151aa <d_expression_1+0x14e>
   1509a:	4628      	mov	r0, r5
   1509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150a0:	784b      	ldrb	r3, [r1, #1]
   150a2:	2b70      	cmp	r3, #112	; 0x70
   150a4:	d039      	beq.n	1511a <d_expression_1+0xbe>
   150a6:	4620      	mov	r0, r4
   150a8:	f000 ffe4 	bl	16074 <d_operator_name>
   150ac:	4605      	mov	r5, r0
   150ae:	2800      	cmp	r0, #0
   150b0:	d05c      	beq.n	1516c <d_expression_1+0x110>
   150b2:	7803      	ldrb	r3, [r0, #0]
   150b4:	2b31      	cmp	r3, #49	; 0x31
   150b6:	d061      	beq.n	1517c <d_expression_1+0x120>
   150b8:	2b32      	cmp	r3, #50	; 0x32
   150ba:	d025      	beq.n	15108 <d_expression_1+0xac>
   150bc:	2b33      	cmp	r3, #51	; 0x33
   150be:	d155      	bne.n	1516c <d_expression_1+0x110>
   150c0:	68e3      	ldr	r3, [r4, #12]
   150c2:	781a      	ldrb	r2, [r3, #0]
   150c4:	2a5f      	cmp	r2, #95	; 0x5f
   150c6:	f040 81b4 	bne.w	15432 <d_expression_1+0x3d6>
   150ca:	3301      	adds	r3, #1
   150cc:	60e3      	str	r3, [r4, #12]
   150ce:	2145      	movs	r1, #69	; 0x45
   150d0:	4620      	mov	r0, r4
   150d2:	f7ff fd65 	bl	14ba0 <d_exprlist>
   150d6:	4603      	mov	r3, r0
   150d8:	462a      	mov	r2, r5
   150da:	4620      	mov	r0, r4
   150dc:	2136      	movs	r1, #54	; 0x36
   150de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   150e2:	f7ff b94f 	b.w	14384 <d_make_comp>
   150e6:	784b      	ldrb	r3, [r1, #1]
   150e8:	2b72      	cmp	r3, #114	; 0x72
   150ea:	d069      	beq.n	151c0 <d_expression_1+0x164>
   150ec:	2b70      	cmp	r3, #112	; 0x70
   150ee:	d1da      	bne.n	150a6 <d_expression_1+0x4a>
   150f0:	3102      	adds	r1, #2
   150f2:	60c1      	str	r1, [r0, #12]
   150f4:	f7ff ffb2 	bl	1505c <d_expression_1>
   150f8:	2300      	movs	r3, #0
   150fa:	4602      	mov	r2, r0
   150fc:	214a      	movs	r1, #74	; 0x4a
   150fe:	4620      	mov	r0, r4
   15100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15104:	f7ff b93e 	b.w	14384 <d_make_comp>
   15108:	6843      	ldr	r3, [r0, #4]
   1510a:	2b03      	cmp	r3, #3
   1510c:	d82e      	bhi.n	1516c <d_expression_1+0x110>
   1510e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15112:	0071      	.short	0x0071
   15114:	002d0190 	.word	0x002d0190
   15118:	002d      	.short	0x002d
   1511a:	1c8b      	adds	r3, r1, #2
   1511c:	60c3      	str	r3, [r0, #12]
   1511e:	788b      	ldrb	r3, [r1, #2]
   15120:	2b54      	cmp	r3, #84	; 0x54
   15122:	d063      	beq.n	151ec <d_expression_1+0x190>
   15124:	f7ff fac2 	bl	146ac <d_compact_number>
   15128:	43c3      	mvns	r3, r0
   1512a:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   1512e:	d01d      	beq.n	1516c <d_expression_1+0x110>
   15130:	3001      	adds	r0, #1
   15132:	6963      	ldr	r3, [r4, #20]
   15134:	69a2      	ldr	r2, [r4, #24]
   15136:	4293      	cmp	r3, r2
   15138:	da18      	bge.n	1516c <d_expression_1+0x110>
   1513a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1513e:	6921      	ldr	r1, [r4, #16]
   15140:	0092      	lsls	r2, r2, #2
   15142:	3301      	adds	r3, #1
   15144:	188d      	adds	r5, r1, r2
   15146:	6163      	str	r3, [r4, #20]
   15148:	d0a7      	beq.n	1509a <d_expression_1+0x3e>
   1514a:	2306      	movs	r3, #6
   1514c:	548b      	strb	r3, [r1, r2]
   1514e:	6068      	str	r0, [r5, #4]
   15150:	e7a3      	b.n	1509a <d_expression_1+0x3e>
   15152:	2b74      	cmp	r3, #116	; 0x74
   15154:	d1a7      	bne.n	150a6 <d_expression_1+0x4a>
   15156:	784b      	ldrb	r3, [r1, #1]
   15158:	2b6c      	cmp	r3, #108	; 0x6c
   1515a:	d1a4      	bne.n	150a6 <d_expression_1+0x4a>
   1515c:	f000 fba2 	bl	158a4 <d_type>
   15160:	68e1      	ldr	r1, [r4, #12]
   15162:	784b      	ldrb	r3, [r1, #1]
   15164:	4605      	mov	r5, r0
   15166:	2b00      	cmp	r3, #0
   15168:	f040 814e 	bne.w	15408 <d_expression_1+0x3ac>
   1516c:	2500      	movs	r5, #0
   1516e:	4628      	mov	r0, r5
   15170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15174:	f001 bc8c 	b.w	16a90 <d_expr_primary>
   15178:	f7ff bab4 	b.w	146e4 <d_template_param>
   1517c:	6847      	ldr	r7, [r0, #4]
   1517e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15180:	68ba      	ldr	r2, [r7, #8]
   15182:	683e      	ldr	r6, [r7, #0]
   15184:	49ac      	ldr	r1, [pc, #688]	; (15438 <d_expression_1+0x3dc>)
   15186:	3a02      	subs	r2, #2
   15188:	4413      	add	r3, r2
   1518a:	6323      	str	r3, [r4, #48]	; 0x30
   1518c:	4630      	mov	r0, r6
   1518e:	f009 fbfb 	bl	1e988 <strcmp>
   15192:	2800      	cmp	r0, #0
   15194:	f000 80ab 	beq.w	152ee <d_expression_1+0x292>
   15198:	68ff      	ldr	r7, [r7, #12]
   1519a:	2f03      	cmp	r7, #3
   1519c:	d8e6      	bhi.n	1516c <d_expression_1+0x110>
   1519e:	e8df f017 	tbh	[pc, r7, lsl #1]
   151a2:	0029      	.short	0x0029
   151a4:	007100ff 	.word	0x007100ff
   151a8:	0031      	.short	0x0031
   151aa:	4620      	mov	r0, r4
   151ac:	f000 f9b4 	bl	15518 <d_template_args>
   151b0:	462a      	mov	r2, r5
   151b2:	4603      	mov	r3, r0
   151b4:	2104      	movs	r1, #4
   151b6:	4620      	mov	r0, r4
   151b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   151bc:	f7ff b8e2 	b.w	14384 <d_make_comp>
   151c0:	3102      	adds	r1, #2
   151c2:	60c1      	str	r1, [r0, #12]
   151c4:	f000 fb6e 	bl	158a4 <d_type>
   151c8:	4605      	mov	r5, r0
   151ca:	4620      	mov	r0, r4
   151cc:	f001 f812 	bl	161f4 <d_unqualified_name>
   151d0:	68e3      	ldr	r3, [r4, #12]
   151d2:	781b      	ldrb	r3, [r3, #0]
   151d4:	2b49      	cmp	r3, #73	; 0x49
   151d6:	4606      	mov	r6, r0
   151d8:	f000 80ae 	beq.w	15338 <d_expression_1+0x2dc>
   151dc:	4603      	mov	r3, r0
   151de:	462a      	mov	r2, r5
   151e0:	4620      	mov	r0, r4
   151e2:	2101      	movs	r1, #1
   151e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   151e8:	f7ff b8cc 	b.w	14384 <d_make_comp>
   151ec:	3103      	adds	r1, #3
   151ee:	60c1      	str	r1, [r0, #12]
   151f0:	2000      	movs	r0, #0
   151f2:	e79e      	b.n	15132 <d_expression_1+0xd6>
   151f4:	462a      	mov	r2, r5
   151f6:	4620      	mov	r0, r4
   151f8:	2300      	movs	r3, #0
   151fa:	2135      	movs	r1, #53	; 0x35
   151fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15200:	f7ff b8c0 	b.w	14384 <d_make_comp>
   15204:	2e00      	cmp	r6, #0
   15206:	d0b1      	beq.n	1516c <d_expression_1+0x110>
   15208:	498c      	ldr	r1, [pc, #560]	; (1543c <d_expression_1+0x3e0>)
   1520a:	4630      	mov	r0, r6
   1520c:	f009 fbbc 	bl	1e988 <strcmp>
   15210:	2800      	cmp	r0, #0
   15212:	d071      	beq.n	152f8 <d_expression_1+0x29c>
   15214:	7833      	ldrb	r3, [r6, #0]
   15216:	2b66      	cmp	r3, #102	; 0x66
   15218:	f000 80b2 	beq.w	15380 <d_expression_1+0x324>
   1521c:	2b6e      	cmp	r3, #110	; 0x6e
   1521e:	d1a5      	bne.n	1516c <d_expression_1+0x110>
   15220:	7873      	ldrb	r3, [r6, #1]
   15222:	2b77      	cmp	r3, #119	; 0x77
   15224:	d001      	beq.n	1522a <d_expression_1+0x1ce>
   15226:	2b61      	cmp	r3, #97	; 0x61
   15228:	d1a0      	bne.n	1516c <d_expression_1+0x110>
   1522a:	215f      	movs	r1, #95	; 0x5f
   1522c:	4620      	mov	r0, r4
   1522e:	f7ff fcb7 	bl	14ba0 <d_exprlist>
   15232:	4606      	mov	r6, r0
   15234:	4620      	mov	r0, r4
   15236:	f000 fb35 	bl	158a4 <d_type>
   1523a:	68e3      	ldr	r3, [r4, #12]
   1523c:	781a      	ldrb	r2, [r3, #0]
   1523e:	2a45      	cmp	r2, #69	; 0x45
   15240:	4607      	mov	r7, r0
   15242:	f000 8099 	beq.w	15378 <d_expression_1+0x31c>
   15246:	2a70      	cmp	r2, #112	; 0x70
   15248:	f000 809e 	beq.w	15388 <d_expression_1+0x32c>
   1524c:	2a69      	cmp	r2, #105	; 0x69
   1524e:	d18d      	bne.n	1516c <d_expression_1+0x110>
   15250:	785b      	ldrb	r3, [r3, #1]
   15252:	2b6c      	cmp	r3, #108	; 0x6c
   15254:	d18a      	bne.n	1516c <d_expression_1+0x110>
   15256:	4620      	mov	r0, r4
   15258:	f7ff ff00 	bl	1505c <d_expression_1>
   1525c:	4603      	mov	r3, r0
   1525e:	463a      	mov	r2, r7
   15260:	213b      	movs	r1, #59	; 0x3b
   15262:	4620      	mov	r0, r4
   15264:	f7ff f88e 	bl	14384 <d_make_comp>
   15268:	4632      	mov	r2, r6
   1526a:	4603      	mov	r3, r0
   1526c:	213a      	movs	r1, #58	; 0x3a
   1526e:	4620      	mov	r0, r4
   15270:	f7ff f888 	bl	14384 <d_make_comp>
   15274:	462a      	mov	r2, r5
   15276:	4603      	mov	r3, r0
   15278:	2139      	movs	r1, #57	; 0x39
   1527a:	4620      	mov	r0, r4
   1527c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15280:	f7ff b880 	b.w	14384 <d_make_comp>
   15284:	2e00      	cmp	r6, #0
   15286:	f43f af71 	beq.w	1516c <d_expression_1+0x110>
   1528a:	686b      	ldr	r3, [r5, #4]
   1528c:	681b      	ldr	r3, [r3, #0]
   1528e:	785a      	ldrb	r2, [r3, #1]
   15290:	2a63      	cmp	r2, #99	; 0x63
   15292:	d044      	beq.n	1531e <d_expression_1+0x2c2>
   15294:	7833      	ldrb	r3, [r6, #0]
   15296:	2b66      	cmp	r3, #102	; 0x66
   15298:	d059      	beq.n	1534e <d_expression_1+0x2f2>
   1529a:	4620      	mov	r0, r4
   1529c:	f7ff fede 	bl	1505c <d_expression_1>
   152a0:	4607      	mov	r7, r0
   152a2:	4967      	ldr	r1, [pc, #412]	; (15440 <d_expression_1+0x3e4>)
   152a4:	4630      	mov	r0, r6
   152a6:	f009 fb6f 	bl	1e988 <strcmp>
   152aa:	b390      	cbz	r0, 15312 <d_expression_1+0x2b6>
   152ac:	4965      	ldr	r1, [pc, #404]	; (15444 <d_expression_1+0x3e8>)
   152ae:	4630      	mov	r0, r6
   152b0:	f009 fb6a 	bl	1e988 <strcmp>
   152b4:	b128      	cbz	r0, 152c2 <d_expression_1+0x266>
   152b6:	4630      	mov	r0, r6
   152b8:	4963      	ldr	r1, [pc, #396]	; (15448 <d_expression_1+0x3ec>)
   152ba:	f009 fb65 	bl	1e988 <strcmp>
   152be:	2800      	cmp	r0, #0
   152c0:	d14a      	bne.n	15358 <d_expression_1+0x2fc>
   152c2:	4620      	mov	r0, r4
   152c4:	f000 ff96 	bl	161f4 <d_unqualified_name>
   152c8:	68e3      	ldr	r3, [r4, #12]
   152ca:	781b      	ldrb	r3, [r3, #0]
   152cc:	2b49      	cmp	r3, #73	; 0x49
   152ce:	4606      	mov	r6, r0
   152d0:	d047      	beq.n	15362 <d_expression_1+0x306>
   152d2:	4633      	mov	r3, r6
   152d4:	463a      	mov	r2, r7
   152d6:	2138      	movs	r1, #56	; 0x38
   152d8:	4620      	mov	r0, r4
   152da:	f7ff f853 	bl	14384 <d_make_comp>
   152de:	462a      	mov	r2, r5
   152e0:	4603      	mov	r3, r0
   152e2:	2137      	movs	r1, #55	; 0x37
   152e4:	4620      	mov	r0, r4
   152e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152ea:	f7ff b84b 	b.w	14384 <d_make_comp>
   152ee:	4620      	mov	r0, r4
   152f0:	f000 fad8 	bl	158a4 <d_type>
   152f4:	4603      	mov	r3, r0
   152f6:	e6ef      	b.n	150d8 <d_expression_1+0x7c>
   152f8:	4620      	mov	r0, r4
   152fa:	f7ff feaf 	bl	1505c <d_expression_1>
   152fe:	4606      	mov	r6, r0
   15300:	4620      	mov	r0, r4
   15302:	f7ff feab 	bl	1505c <d_expression_1>
   15306:	4607      	mov	r7, r0
   15308:	4620      	mov	r0, r4
   1530a:	f7ff fea7 	bl	1505c <d_expression_1>
   1530e:	4603      	mov	r3, r0
   15310:	e7a5      	b.n	1525e <d_expression_1+0x202>
   15312:	2145      	movs	r1, #69	; 0x45
   15314:	4620      	mov	r0, r4
   15316:	f7ff fc43 	bl	14ba0 <d_exprlist>
   1531a:	4606      	mov	r6, r0
   1531c:	e7d9      	b.n	152d2 <d_expression_1+0x276>
   1531e:	781b      	ldrb	r3, [r3, #0]
   15320:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   15324:	2a01      	cmp	r2, #1
   15326:	d902      	bls.n	1532e <d_expression_1+0x2d2>
   15328:	3b72      	subs	r3, #114	; 0x72
   1532a:	2b01      	cmp	r3, #1
   1532c:	d8b2      	bhi.n	15294 <d_expression_1+0x238>
   1532e:	4620      	mov	r0, r4
   15330:	f000 fab8 	bl	158a4 <d_type>
   15334:	4607      	mov	r7, r0
   15336:	e7b4      	b.n	152a2 <d_expression_1+0x246>
   15338:	4620      	mov	r0, r4
   1533a:	f000 f8ed 	bl	15518 <d_template_args>
   1533e:	4632      	mov	r2, r6
   15340:	4603      	mov	r3, r0
   15342:	2104      	movs	r1, #4
   15344:	4620      	mov	r0, r4
   15346:	f7ff f81d 	bl	14384 <d_make_comp>
   1534a:	4603      	mov	r3, r0
   1534c:	e747      	b.n	151de <d_expression_1+0x182>
   1534e:	4620      	mov	r0, r4
   15350:	f000 fe90 	bl	16074 <d_operator_name>
   15354:	4607      	mov	r7, r0
   15356:	e7a4      	b.n	152a2 <d_expression_1+0x246>
   15358:	4620      	mov	r0, r4
   1535a:	f7ff fe7f 	bl	1505c <d_expression_1>
   1535e:	4606      	mov	r6, r0
   15360:	e7b7      	b.n	152d2 <d_expression_1+0x276>
   15362:	4620      	mov	r0, r4
   15364:	f000 f8d8 	bl	15518 <d_template_args>
   15368:	4632      	mov	r2, r6
   1536a:	4603      	mov	r3, r0
   1536c:	2104      	movs	r1, #4
   1536e:	4620      	mov	r0, r4
   15370:	f7ff f808 	bl	14384 <d_make_comp>
   15374:	4606      	mov	r6, r0
   15376:	e7ac      	b.n	152d2 <d_expression_1+0x276>
   15378:	3301      	adds	r3, #1
   1537a:	60e3      	str	r3, [r4, #12]
   1537c:	2300      	movs	r3, #0
   1537e:	e76e      	b.n	1525e <d_expression_1+0x202>
   15380:	4620      	mov	r0, r4
   15382:	f000 fe77 	bl	16074 <d_operator_name>
   15386:	e7ba      	b.n	152fe <d_expression_1+0x2a2>
   15388:	785a      	ldrb	r2, [r3, #1]
   1538a:	2a69      	cmp	r2, #105	; 0x69
   1538c:	f47f aeee 	bne.w	1516c <d_expression_1+0x110>
   15390:	3302      	adds	r3, #2
   15392:	60e3      	str	r3, [r4, #12]
   15394:	2145      	movs	r1, #69	; 0x45
   15396:	4620      	mov	r0, r4
   15398:	f7ff fc02 	bl	14ba0 <d_exprlist>
   1539c:	4603      	mov	r3, r0
   1539e:	e75e      	b.n	1525e <d_expression_1+0x202>
   153a0:	2e00      	cmp	r6, #0
   153a2:	d046      	beq.n	15432 <d_expression_1+0x3d6>
   153a4:	7833      	ldrb	r3, [r6, #0]
   153a6:	2b70      	cmp	r3, #112	; 0x70
   153a8:	d015      	beq.n	153d6 <d_expression_1+0x37a>
   153aa:	2b6d      	cmp	r3, #109	; 0x6d
   153ac:	d013      	beq.n	153d6 <d_expression_1+0x37a>
   153ae:	2700      	movs	r7, #0
   153b0:	4630      	mov	r0, r6
   153b2:	4926      	ldr	r1, [pc, #152]	; (1544c <d_expression_1+0x3f0>)
   153b4:	f009 fae8 	bl	1e988 <strcmp>
   153b8:	b1b8      	cbz	r0, 153ea <d_expression_1+0x38e>
   153ba:	4620      	mov	r0, r4
   153bc:	f7ff fe4e 	bl	1505c <d_expression_1>
   153c0:	4603      	mov	r3, r0
   153c2:	2f00      	cmp	r7, #0
   153c4:	f43f ae88 	beq.w	150d8 <d_expression_1+0x7c>
   153c8:	461a      	mov	r2, r3
   153ca:	2138      	movs	r1, #56	; 0x38
   153cc:	4620      	mov	r0, r4
   153ce:	f7fe ffd9 	bl	14384 <d_make_comp>
   153d2:	4603      	mov	r3, r0
   153d4:	e680      	b.n	150d8 <d_expression_1+0x7c>
   153d6:	7872      	ldrb	r2, [r6, #1]
   153d8:	429a      	cmp	r2, r3
   153da:	d1e8      	bne.n	153ae <d_expression_1+0x352>
   153dc:	68e3      	ldr	r3, [r4, #12]
   153de:	781a      	ldrb	r2, [r3, #0]
   153e0:	2a5f      	cmp	r2, #95	; 0x5f
   153e2:	d1e5      	bne.n	153b0 <d_expression_1+0x354>
   153e4:	3301      	adds	r3, #1
   153e6:	60e3      	str	r3, [r4, #12]
   153e8:	e7e1      	b.n	153ae <d_expression_1+0x352>
   153ea:	4620      	mov	r0, r4
   153ec:	f000 f830 	bl	15450 <d_template_args_1>
   153f0:	4603      	mov	r3, r0
   153f2:	e7e6      	b.n	153c2 <d_expression_1+0x366>
   153f4:	2b6f      	cmp	r3, #111	; 0x6f
   153f6:	d015      	beq.n	15424 <d_expression_1+0x3c8>
   153f8:	2b69      	cmp	r3, #105	; 0x69
   153fa:	f47f aeaa 	bne.w	15152 <d_expression_1+0xf6>
   153fe:	784b      	ldrb	r3, [r1, #1]
   15400:	2b6c      	cmp	r3, #108	; 0x6c
   15402:	f47f ae50 	bne.w	150a6 <d_expression_1+0x4a>
   15406:	2500      	movs	r5, #0
   15408:	3102      	adds	r1, #2
   1540a:	60e1      	str	r1, [r4, #12]
   1540c:	4620      	mov	r0, r4
   1540e:	2145      	movs	r1, #69	; 0x45
   15410:	f7ff fbc6 	bl	14ba0 <d_exprlist>
   15414:	462a      	mov	r2, r5
   15416:	4603      	mov	r3, r0
   15418:	2130      	movs	r1, #48	; 0x30
   1541a:	4620      	mov	r0, r4
   1541c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15420:	f7fe bfb0 	b.w	14384 <d_make_comp>
   15424:	784b      	ldrb	r3, [r1, #1]
   15426:	2b6e      	cmp	r3, #110	; 0x6e
   15428:	f47f ae3d 	bne.w	150a6 <d_expression_1+0x4a>
   1542c:	3102      	adds	r1, #2
   1542e:	60c1      	str	r1, [r0, #12]
   15430:	e628      	b.n	15084 <d_expression_1+0x28>
   15432:	2700      	movs	r7, #0
   15434:	e7c1      	b.n	153ba <d_expression_1+0x35e>
   15436:	bf00      	nop
   15438:	00024804 	.word	0x00024804
   1543c:	00024310 	.word	0x00024310
   15440:	00024304 	.word	0x00024304
   15444:	00024308 	.word	0x00024308
   15448:	0002430c 	.word	0x0002430c
   1544c:	00024300 	.word	0x00024300

00015450 <d_template_args_1>:
   15450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15454:	68c2      	ldr	r2, [r0, #12]
   15456:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   1545a:	7813      	ldrb	r3, [r2, #0]
   1545c:	2b45      	cmp	r3, #69	; 0x45
   1545e:	b083      	sub	sp, #12
   15460:	4604      	mov	r4, r0
   15462:	d04e      	beq.n	15502 <d_template_args_1+0xb2>
   15464:	ae02      	add	r6, sp, #8
   15466:	2100      	movs	r1, #0
   15468:	f846 1d04 	str.w	r1, [r6, #-4]!
   1546c:	2701      	movs	r7, #1
   1546e:	3b49      	subs	r3, #73	; 0x49
   15470:	2b0f      	cmp	r3, #15
   15472:	d83e      	bhi.n	154f2 <d_template_args_1+0xa2>
   15474:	e8df f003 	tbb	[pc, r3]
   15478:	1b3d3838 	.word	0x1b3d3838
   1547c:	3d3d3d3d 	.word	0x3d3d3d3d
   15480:	3d3d3d3d 	.word	0x3d3d3d3d
   15484:	083d3d3d 	.word	0x083d3d3d
   15488:	3201      	adds	r2, #1
   1548a:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1548e:	60e2      	str	r2, [r4, #12]
   15490:	6367      	str	r7, [r4, #52]	; 0x34
   15492:	4620      	mov	r0, r4
   15494:	f7ff fde2 	bl	1505c <d_expression_1>
   15498:	68e3      	ldr	r3, [r4, #12]
   1549a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   1549e:	781a      	ldrb	r2, [r3, #0]
   154a0:	2a45      	cmp	r2, #69	; 0x45
   154a2:	4605      	mov	r5, r0
   154a4:	d02a      	beq.n	154fc <d_template_args_1+0xac>
   154a6:	2000      	movs	r0, #0
   154a8:	b003      	add	sp, #12
   154aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   154ae:	4620      	mov	r0, r4
   154b0:	f001 faee 	bl	16a90 <d_expr_primary>
   154b4:	4605      	mov	r5, r0
   154b6:	2300      	movs	r3, #0
   154b8:	212f      	movs	r1, #47	; 0x2f
   154ba:	462a      	mov	r2, r5
   154bc:	4620      	mov	r0, r4
   154be:	2d00      	cmp	r5, #0
   154c0:	d0f1      	beq.n	154a6 <d_template_args_1+0x56>
   154c2:	f7fe ff5f 	bl	14384 <d_make_comp>
   154c6:	6030      	str	r0, [r6, #0]
   154c8:	f100 0608 	add.w	r6, r0, #8
   154cc:	2800      	cmp	r0, #0
   154ce:	d0ea      	beq.n	154a6 <d_template_args_1+0x56>
   154d0:	68e2      	ldr	r2, [r4, #12]
   154d2:	7813      	ldrb	r3, [r2, #0]
   154d4:	2b45      	cmp	r3, #69	; 0x45
   154d6:	d1ca      	bne.n	1546e <d_template_args_1+0x1e>
   154d8:	9801      	ldr	r0, [sp, #4]
   154da:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   154de:	3201      	adds	r2, #1
   154e0:	60e2      	str	r2, [r4, #12]
   154e2:	b003      	add	sp, #12
   154e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   154e8:	4620      	mov	r0, r4
   154ea:	f000 f815 	bl	15518 <d_template_args>
   154ee:	4605      	mov	r5, r0
   154f0:	e7e1      	b.n	154b6 <d_template_args_1+0x66>
   154f2:	4620      	mov	r0, r4
   154f4:	f000 f9d6 	bl	158a4 <d_type>
   154f8:	4605      	mov	r5, r0
   154fa:	e7dc      	b.n	154b6 <d_template_args_1+0x66>
   154fc:	3301      	adds	r3, #1
   154fe:	60e3      	str	r3, [r4, #12]
   15500:	e7d9      	b.n	154b6 <d_template_args_1+0x66>
   15502:	3201      	adds	r2, #1
   15504:	2300      	movs	r3, #0
   15506:	60c2      	str	r2, [r0, #12]
   15508:	212f      	movs	r1, #47	; 0x2f
   1550a:	461a      	mov	r2, r3
   1550c:	b003      	add	sp, #12
   1550e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15512:	f7fe bf37 	b.w	14384 <d_make_comp>
   15516:	bf00      	nop

00015518 <d_template_args>:
   15518:	68c2      	ldr	r2, [r0, #12]
   1551a:	7813      	ldrb	r3, [r2, #0]
   1551c:	3b49      	subs	r3, #73	; 0x49
   1551e:	2b01      	cmp	r3, #1
   15520:	d802      	bhi.n	15528 <d_template_args+0x10>
   15522:	3201      	adds	r2, #1
   15524:	60c2      	str	r2, [r0, #12]
   15526:	e793      	b.n	15450 <d_template_args_1>
   15528:	2000      	movs	r0, #0
   1552a:	4770      	bx	lr

0001552c <d_name>:
   1552c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15530:	68c2      	ldr	r2, [r0, #12]
   15532:	7813      	ldrb	r3, [r2, #0]
   15534:	3b4e      	subs	r3, #78	; 0x4e
   15536:	b085      	sub	sp, #20
   15538:	4605      	mov	r5, r0
   1553a:	2b0c      	cmp	r3, #12
   1553c:	d870      	bhi.n	15620 <d_name+0xf4>
   1553e:	e8df f003 	tbb	[pc, r3]
   15542:	6f1e      	.short	0x6f1e
   15544:	5b6f6f6f 	.word	0x5b6f6f6f
   15548:	6f6f176f 	.word	0x6f6f176f
   1554c:	6f6f      	.short	0x6f6f
   1554e:	07          	.byte	0x07
   1554f:	00          	.byte	0x00
   15550:	3201      	adds	r2, #1
   15552:	2100      	movs	r1, #0
   15554:	60c2      	str	r2, [r0, #12]
   15556:	f000 ffbd 	bl	164d4 <d_encoding>
   1555a:	68eb      	ldr	r3, [r5, #12]
   1555c:	7819      	ldrb	r1, [r3, #0]
   1555e:	2945      	cmp	r1, #69	; 0x45
   15560:	4606      	mov	r6, r0
   15562:	f000 8099 	beq.w	15698 <d_name+0x16c>
   15566:	2200      	movs	r2, #0
   15568:	4610      	mov	r0, r2
   1556a:	b005      	add	sp, #20
   1556c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15570:	f000 fe40 	bl	161f4 <d_unqualified_name>
   15574:	4602      	mov	r2, r0
   15576:	4610      	mov	r0, r2
   15578:	b005      	add	sp, #20
   1557a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1557e:	3201      	adds	r2, #1
   15580:	60c2      	str	r2, [r0, #12]
   15582:	a903      	add	r1, sp, #12
   15584:	2201      	movs	r2, #1
   15586:	f7fe ff49 	bl	1441c <d_cv_qualifiers>
   1558a:	4681      	mov	r9, r0
   1558c:	2800      	cmp	r0, #0
   1558e:	d0ea      	beq.n	15566 <d_name+0x3a>
   15590:	2100      	movs	r1, #0
   15592:	4628      	mov	r0, r5
   15594:	f7fe ffa8 	bl	144e8 <d_ref_qualifier>
   15598:	68ea      	ldr	r2, [r5, #12]
   1559a:	4eb4      	ldr	r6, [pc, #720]	; (1586c <d_name+0x340>)
   1559c:	7814      	ldrb	r4, [r2, #0]
   1559e:	4680      	mov	r8, r0
   155a0:	2700      	movs	r7, #0
   155a2:	2c00      	cmp	r4, #0
   155a4:	f000 80e8 	beq.w	15778 <d_name+0x24c>
   155a8:	2c44      	cmp	r4, #68	; 0x44
   155aa:	f000 80d1 	beq.w	15750 <d_name+0x224>
   155ae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   155b2:	b2db      	uxtb	r3, r3
   155b4:	2b1c      	cmp	r3, #28
   155b6:	f240 80a8 	bls.w	1570a <d_name+0x1de>
   155ba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   155be:	2b19      	cmp	r3, #25
   155c0:	f240 80a8 	bls.w	15714 <d_name+0x1e8>
   155c4:	2c55      	cmp	r4, #85	; 0x55
   155c6:	f000 80de 	beq.w	15786 <d_name+0x25a>
   155ca:	2c53      	cmp	r4, #83	; 0x53
   155cc:	f000 80f1 	beq.w	157b2 <d_name+0x286>
   155d0:	2c49      	cmp	r4, #73	; 0x49
   155d2:	f000 80da 	beq.w	1578a <d_name+0x25e>
   155d6:	2c54      	cmp	r4, #84	; 0x54
   155d8:	f000 811f 	beq.w	1581a <d_name+0x2ee>
   155dc:	2c45      	cmp	r4, #69	; 0x45
   155de:	f000 814b 	beq.w	15878 <d_name+0x34c>
   155e2:	2c4d      	cmp	r4, #77	; 0x4d
   155e4:	f040 80c8 	bne.w	15778 <d_name+0x24c>
   155e8:	2f00      	cmp	r7, #0
   155ea:	f000 80c5 	beq.w	15778 <d_name+0x24c>
   155ee:	1c53      	adds	r3, r2, #1
   155f0:	60eb      	str	r3, [r5, #12]
   155f2:	7854      	ldrb	r4, [r2, #1]
   155f4:	461a      	mov	r2, r3
   155f6:	e7d4      	b.n	155a2 <d_name+0x76>
   155f8:	7853      	ldrb	r3, [r2, #1]
   155fa:	2b74      	cmp	r3, #116	; 0x74
   155fc:	d031      	beq.n	15662 <d_name+0x136>
   155fe:	2100      	movs	r1, #0
   15600:	f7ff f90a 	bl	14818 <d_substitution>
   15604:	68eb      	ldr	r3, [r5, #12]
   15606:	7819      	ldrb	r1, [r3, #0]
   15608:	2949      	cmp	r1, #73	; 0x49
   1560a:	4602      	mov	r2, r0
   1560c:	d1b3      	bne.n	15576 <d_name+0x4a>
   1560e:	3301      	adds	r3, #1
   15610:	60eb      	str	r3, [r5, #12]
   15612:	4628      	mov	r0, r5
   15614:	9201      	str	r2, [sp, #4]
   15616:	f7ff ff1b 	bl	15450 <d_template_args_1>
   1561a:	9a01      	ldr	r2, [sp, #4]
   1561c:	4603      	mov	r3, r0
   1561e:	e017      	b.n	15650 <d_name+0x124>
   15620:	f000 fde8 	bl	161f4 <d_unqualified_name>
   15624:	68eb      	ldr	r3, [r5, #12]
   15626:	7819      	ldrb	r1, [r3, #0]
   15628:	2949      	cmp	r1, #73	; 0x49
   1562a:	4602      	mov	r2, r0
   1562c:	d1a3      	bne.n	15576 <d_name+0x4a>
   1562e:	2a00      	cmp	r2, #0
   15630:	d099      	beq.n	15566 <d_name+0x3a>
   15632:	6a29      	ldr	r1, [r5, #32]
   15634:	6a68      	ldr	r0, [r5, #36]	; 0x24
   15636:	4281      	cmp	r1, r0
   15638:	da95      	bge.n	15566 <d_name+0x3a>
   1563a:	69ec      	ldr	r4, [r5, #28]
   1563c:	1c48      	adds	r0, r1, #1
   1563e:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   15642:	6228      	str	r0, [r5, #32]
   15644:	7819      	ldrb	r1, [r3, #0]
   15646:	3949      	subs	r1, #73	; 0x49
   15648:	2901      	cmp	r1, #1
   1564a:	bf88      	it	hi
   1564c:	2300      	movhi	r3, #0
   1564e:	d9de      	bls.n	1560e <d_name+0xe2>
   15650:	4628      	mov	r0, r5
   15652:	2104      	movs	r1, #4
   15654:	f7fe fe96 	bl	14384 <d_make_comp>
   15658:	4602      	mov	r2, r0
   1565a:	4610      	mov	r0, r2
   1565c:	b005      	add	sp, #20
   1565e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15662:	6943      	ldr	r3, [r0, #20]
   15664:	6981      	ldr	r1, [r0, #24]
   15666:	3202      	adds	r2, #2
   15668:	428b      	cmp	r3, r1
   1566a:	60c2      	str	r2, [r0, #12]
   1566c:	f2c0 80ab 	blt.w	157c6 <d_name+0x29a>
   15670:	2400      	movs	r4, #0
   15672:	4628      	mov	r0, r5
   15674:	f000 fdbe 	bl	161f4 <d_unqualified_name>
   15678:	4622      	mov	r2, r4
   1567a:	4603      	mov	r3, r0
   1567c:	2101      	movs	r1, #1
   1567e:	4628      	mov	r0, r5
   15680:	f7fe fe80 	bl	14384 <d_make_comp>
   15684:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15686:	68eb      	ldr	r3, [r5, #12]
   15688:	3103      	adds	r1, #3
   1568a:	6329      	str	r1, [r5, #48]	; 0x30
   1568c:	7819      	ldrb	r1, [r3, #0]
   1568e:	2949      	cmp	r1, #73	; 0x49
   15690:	4602      	mov	r2, r0
   15692:	f47f af70 	bne.w	15576 <d_name+0x4a>
   15696:	e7ca      	b.n	1562e <d_name+0x102>
   15698:	1c5a      	adds	r2, r3, #1
   1569a:	60ea      	str	r2, [r5, #12]
   1569c:	7859      	ldrb	r1, [r3, #1]
   1569e:	2973      	cmp	r1, #115	; 0x73
   156a0:	f000 80a3 	beq.w	157ea <d_name+0x2be>
   156a4:	2964      	cmp	r1, #100	; 0x64
   156a6:	f000 80bc 	beq.w	15822 <d_name+0x2f6>
   156aa:	4628      	mov	r0, r5
   156ac:	f7ff ff3e 	bl	1552c <d_name>
   156b0:	4604      	mov	r4, r0
   156b2:	2800      	cmp	r0, #0
   156b4:	d072      	beq.n	1579c <d_name+0x270>
   156b6:	7803      	ldrb	r3, [r0, #0]
   156b8:	2b45      	cmp	r3, #69	; 0x45
   156ba:	f000 8094 	beq.w	157e6 <d_name+0x2ba>
   156be:	2b47      	cmp	r3, #71	; 0x47
   156c0:	f000 8091 	beq.w	157e6 <d_name+0x2ba>
   156c4:	68eb      	ldr	r3, [r5, #12]
   156c6:	781a      	ldrb	r2, [r3, #0]
   156c8:	2a5f      	cmp	r2, #95	; 0x5f
   156ca:	f040 808c 	bne.w	157e6 <d_name+0x2ba>
   156ce:	f04f 37ff 	mov.w	r7, #4294967295
   156d2:	4628      	mov	r0, r5
   156d4:	3301      	adds	r3, #1
   156d6:	f840 3f0c 	str.w	r3, [r0, #12]!
   156da:	f7fe ffa5 	bl	14628 <d_number.isra.0>
   156de:	2800      	cmp	r0, #0
   156e0:	f6ff af41 	blt.w	15566 <d_name+0x3a>
   156e4:	1c7b      	adds	r3, r7, #1
   156e6:	d07e      	beq.n	157e6 <d_name+0x2ba>
   156e8:	696b      	ldr	r3, [r5, #20]
   156ea:	69aa      	ldr	r2, [r5, #24]
   156ec:	4293      	cmp	r3, r2
   156ee:	da55      	bge.n	1579c <d_name+0x270>
   156f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   156f4:	6929      	ldr	r1, [r5, #16]
   156f6:	3301      	adds	r3, #1
   156f8:	0092      	lsls	r2, r2, #2
   156fa:	616b      	str	r3, [r5, #20]
   156fc:	188b      	adds	r3, r1, r2
   156fe:	d04e      	beq.n	1579e <d_name+0x272>
   15700:	2046      	movs	r0, #70	; 0x46
   15702:	5488      	strb	r0, [r1, r2]
   15704:	609f      	str	r7, [r3, #8]
   15706:	605c      	str	r4, [r3, #4]
   15708:	e049      	b.n	1579e <d_name+0x272>
   1570a:	fa26 f303 	lsr.w	r3, r6, r3
   1570e:	07d9      	lsls	r1, r3, #31
   15710:	f57f af53 	bpl.w	155ba <d_name+0x8e>
   15714:	4628      	mov	r0, r5
   15716:	f000 fd6d 	bl	161f4 <d_unqualified_name>
   1571a:	b347      	cbz	r7, 1576e <d_name+0x242>
   1571c:	2101      	movs	r1, #1
   1571e:	4603      	mov	r3, r0
   15720:	463a      	mov	r2, r7
   15722:	4628      	mov	r0, r5
   15724:	f7fe fe2e 	bl	14384 <d_make_comp>
   15728:	4607      	mov	r7, r0
   1572a:	2c53      	cmp	r4, #83	; 0x53
   1572c:	d01c      	beq.n	15768 <d_name+0x23c>
   1572e:	68ea      	ldr	r2, [r5, #12]
   15730:	7814      	ldrb	r4, [r2, #0]
   15732:	2c45      	cmp	r4, #69	; 0x45
   15734:	f43f af3b 	beq.w	155ae <d_name+0x82>
   15738:	b1f7      	cbz	r7, 15778 <d_name+0x24c>
   1573a:	6a2b      	ldr	r3, [r5, #32]
   1573c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1573e:	428b      	cmp	r3, r1
   15740:	da1a      	bge.n	15778 <d_name+0x24c>
   15742:	69e9      	ldr	r1, [r5, #28]
   15744:	1c58      	adds	r0, r3, #1
   15746:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   1574a:	6228      	str	r0, [r5, #32]
   1574c:	7814      	ldrb	r4, [r2, #0]
   1574e:	e728      	b.n	155a2 <d_name+0x76>
   15750:	7853      	ldrb	r3, [r2, #1]
   15752:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   15756:	2b54      	cmp	r3, #84	; 0x54
   15758:	4628      	mov	r0, r5
   1575a:	d00a      	beq.n	15772 <d_name+0x246>
   1575c:	f000 fd4a 	bl	161f4 <d_unqualified_name>
   15760:	2f00      	cmp	r7, #0
   15762:	d1db      	bne.n	1571c <d_name+0x1f0>
   15764:	4607      	mov	r7, r0
   15766:	e7e2      	b.n	1572e <d_name+0x202>
   15768:	68ea      	ldr	r2, [r5, #12]
   1576a:	7814      	ldrb	r4, [r2, #0]
   1576c:	e719      	b.n	155a2 <d_name+0x76>
   1576e:	4607      	mov	r7, r0
   15770:	e7db      	b.n	1572a <d_name+0x1fe>
   15772:	f000 f897 	bl	158a4 <d_type>
   15776:	e7f3      	b.n	15760 <d_name+0x234>
   15778:	2200      	movs	r2, #0
   1577a:	4610      	mov	r0, r2
   1577c:	f8c9 2000 	str.w	r2, [r9]
   15780:	b005      	add	sp, #20
   15782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15786:	4628      	mov	r0, r5
   15788:	e7e8      	b.n	1575c <d_name+0x230>
   1578a:	2f00      	cmp	r7, #0
   1578c:	d0f4      	beq.n	15778 <d_name+0x24c>
   1578e:	3201      	adds	r2, #1
   15790:	60ea      	str	r2, [r5, #12]
   15792:	4628      	mov	r0, r5
   15794:	f7ff fe5c 	bl	15450 <d_template_args_1>
   15798:	2104      	movs	r1, #4
   1579a:	e7c0      	b.n	1571e <d_name+0x1f2>
   1579c:	2300      	movs	r3, #0
   1579e:	4632      	mov	r2, r6
   157a0:	4628      	mov	r0, r5
   157a2:	2102      	movs	r1, #2
   157a4:	f7fe fdee 	bl	14384 <d_make_comp>
   157a8:	4602      	mov	r2, r0
   157aa:	4610      	mov	r0, r2
   157ac:	b005      	add	sp, #20
   157ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   157b2:	2101      	movs	r1, #1
   157b4:	4628      	mov	r0, r5
   157b6:	f7ff f82f 	bl	14818 <d_substitution>
   157ba:	2f00      	cmp	r7, #0
   157bc:	d1ae      	bne.n	1571c <d_name+0x1f0>
   157be:	68ea      	ldr	r2, [r5, #12]
   157c0:	4607      	mov	r7, r0
   157c2:	7814      	ldrb	r4, [r2, #0]
   157c4:	e6ed      	b.n	155a2 <d_name+0x76>
   157c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   157ca:	6901      	ldr	r1, [r0, #16]
   157cc:	0092      	lsls	r2, r2, #2
   157ce:	3301      	adds	r3, #1
   157d0:	188c      	adds	r4, r1, r2
   157d2:	6143      	str	r3, [r0, #20]
   157d4:	f43f af4d 	beq.w	15672 <d_name+0x146>
   157d8:	2300      	movs	r3, #0
   157da:	548b      	strb	r3, [r1, r2]
   157dc:	4824      	ldr	r0, [pc, #144]	; (15870 <d_name+0x344>)
   157de:	6060      	str	r0, [r4, #4]
   157e0:	2303      	movs	r3, #3
   157e2:	60a3      	str	r3, [r4, #8]
   157e4:	e745      	b.n	15672 <d_name+0x146>
   157e6:	4623      	mov	r3, r4
   157e8:	e7d9      	b.n	1579e <d_name+0x272>
   157ea:	1c9a      	adds	r2, r3, #2
   157ec:	60ea      	str	r2, [r5, #12]
   157ee:	789a      	ldrb	r2, [r3, #2]
   157f0:	2a5f      	cmp	r2, #95	; 0x5f
   157f2:	d032      	beq.n	1585a <d_name+0x32e>
   157f4:	696b      	ldr	r3, [r5, #20]
   157f6:	69aa      	ldr	r2, [r5, #24]
   157f8:	4293      	cmp	r3, r2
   157fa:	dacf      	bge.n	1579c <d_name+0x270>
   157fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15800:	6929      	ldr	r1, [r5, #16]
   15802:	3301      	adds	r3, #1
   15804:	0092      	lsls	r2, r2, #2
   15806:	616b      	str	r3, [r5, #20]
   15808:	188b      	adds	r3, r1, r2
   1580a:	d0c8      	beq.n	1579e <d_name+0x272>
   1580c:	2400      	movs	r4, #0
   1580e:	548c      	strb	r4, [r1, r2]
   15810:	4818      	ldr	r0, [pc, #96]	; (15874 <d_name+0x348>)
   15812:	6058      	str	r0, [r3, #4]
   15814:	220e      	movs	r2, #14
   15816:	609a      	str	r2, [r3, #8]
   15818:	e7c1      	b.n	1579e <d_name+0x272>
   1581a:	4628      	mov	r0, r5
   1581c:	f7fe ff62 	bl	146e4 <d_template_param>
   15820:	e79e      	b.n	15760 <d_name+0x234>
   15822:	3302      	adds	r3, #2
   15824:	60eb      	str	r3, [r5, #12]
   15826:	4628      	mov	r0, r5
   15828:	f7fe ff40 	bl	146ac <d_compact_number>
   1582c:	1e07      	subs	r7, r0, #0
   1582e:	f6ff ae9a 	blt.w	15566 <d_name+0x3a>
   15832:	4628      	mov	r0, r5
   15834:	f7ff fe7a 	bl	1552c <d_name>
   15838:	4604      	mov	r4, r0
   1583a:	2800      	cmp	r0, #0
   1583c:	f43f af54 	beq.w	156e8 <d_name+0x1bc>
   15840:	7803      	ldrb	r3, [r0, #0]
   15842:	2b45      	cmp	r3, #69	; 0x45
   15844:	f43f af50 	beq.w	156e8 <d_name+0x1bc>
   15848:	2b47      	cmp	r3, #71	; 0x47
   1584a:	f43f af4d 	beq.w	156e8 <d_name+0x1bc>
   1584e:	68eb      	ldr	r3, [r5, #12]
   15850:	781a      	ldrb	r2, [r3, #0]
   15852:	2a5f      	cmp	r2, #95	; 0x5f
   15854:	f47f af48 	bne.w	156e8 <d_name+0x1bc>
   15858:	e73b      	b.n	156d2 <d_name+0x1a6>
   1585a:	4628      	mov	r0, r5
   1585c:	3303      	adds	r3, #3
   1585e:	f840 3f0c 	str.w	r3, [r0, #12]!
   15862:	f7fe fee1 	bl	14628 <d_number.isra.0>
   15866:	2800      	cmp	r0, #0
   15868:	dac4      	bge.n	157f4 <d_name+0x2c8>
   1586a:	e67c      	b.n	15566 <d_name+0x3a>
   1586c:	100803ff 	.word	0x100803ff
   15870:	00024324 	.word	0x00024324
   15874:	00024314 	.word	0x00024314
   15878:	f8c9 7000 	str.w	r7, [r9]
   1587c:	2f00      	cmp	r7, #0
   1587e:	f43f ae72 	beq.w	15566 <d_name+0x3a>
   15882:	f1b8 0f00 	cmp.w	r8, #0
   15886:	d004      	beq.n	15892 <d_name+0x366>
   15888:	9b03      	ldr	r3, [sp, #12]
   1588a:	f8c8 3004 	str.w	r3, [r8, #4]
   1588e:	f8cd 800c 	str.w	r8, [sp, #12]
   15892:	7813      	ldrb	r3, [r2, #0]
   15894:	2b45      	cmp	r3, #69	; 0x45
   15896:	f47f ae66 	bne.w	15566 <d_name+0x3a>
   1589a:	3201      	adds	r2, #1
   1589c:	60ea      	str	r2, [r5, #12]
   1589e:	9a03      	ldr	r2, [sp, #12]
   158a0:	e669      	b.n	15576 <d_name+0x4a>
   158a2:	bf00      	nop

000158a4 <d_type>:
   158a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   158a8:	68c2      	ldr	r2, [r0, #12]
   158aa:	7813      	ldrb	r3, [r2, #0]
   158ac:	2b72      	cmp	r3, #114	; 0x72
   158ae:	b083      	sub	sp, #12
   158b0:	4604      	mov	r4, r0
   158b2:	d058      	beq.n	15966 <d_type+0xc2>
   158b4:	2b56      	cmp	r3, #86	; 0x56
   158b6:	d056      	beq.n	15966 <d_type+0xc2>
   158b8:	2b4b      	cmp	r3, #75	; 0x4b
   158ba:	d054      	beq.n	15966 <d_type+0xc2>
   158bc:	2b44      	cmp	r3, #68	; 0x44
   158be:	f000 809f 	beq.w	15a00 <d_type+0x15c>
   158c2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   158c6:	294a      	cmp	r1, #74	; 0x4a
   158c8:	f200 808a 	bhi.w	159e0 <d_type+0x13c>
   158cc:	e8df f011 	tbh	[pc, r1, lsl #1]
   158d0:	012a012a 	.word	0x012a012a
   158d4:	012a012a 	.word	0x012a012a
   158d8:	012a012a 	.word	0x012a012a
   158dc:	012a012a 	.word	0x012a012a
   158e0:	012a012a 	.word	0x012a012a
   158e4:	00880088 	.word	0x00880088
   158e8:	00880088 	.word	0x00880088
   158ec:	00880088 	.word	0x00880088
   158f0:	020b0088 	.word	0x020b0088
   158f4:	01520088 	.word	0x01520088
   158f8:	00880088 	.word	0x00880088
   158fc:	0160014c 	.word	0x0160014c
   15900:	00880088 	.word	0x00880088
   15904:	00880088 	.word	0x00880088
   15908:	016e0088 	.word	0x016e0088
   1590c:	0186012a 	.word	0x0186012a
   15910:	008801c3 	.word	0x008801c3
   15914:	01a20194 	.word	0x01a20194
   15918:	01f301d1 	.word	0x01f301d1
   1591c:	00880088 	.word	0x00880088
   15920:	00880088 	.word	0x00880088
   15924:	0088012a 	.word	0x0088012a
   15928:	00880088 	.word	0x00880088
   1592c:	00880088 	.word	0x00880088
   15930:	010c0088 	.word	0x010c0088
   15934:	010c010c 	.word	0x010c010c
   15938:	010c010c 	.word	0x010c010c
   1593c:	010c010c 	.word	0x010c010c
   15940:	010c010c 	.word	0x010c010c
   15944:	0088010c 	.word	0x0088010c
   15948:	010c010c 	.word	0x010c010c
   1594c:	010c010c 	.word	0x010c010c
   15950:	00880088 	.word	0x00880088
   15954:	010c0088 	.word	0x010c0088
   15958:	013e010c 	.word	0x013e010c
   1595c:	010c010c 	.word	0x010c010c
   15960:	010c010c 	.word	0x010c010c
   15964:	010c      	.short	0x010c
   15966:	2200      	movs	r2, #0
   15968:	a901      	add	r1, sp, #4
   1596a:	4620      	mov	r0, r4
   1596c:	f7fe fd56 	bl	1441c <d_cv_qualifiers>
   15970:	4605      	mov	r5, r0
   15972:	2800      	cmp	r0, #0
   15974:	d034      	beq.n	159e0 <d_type+0x13c>
   15976:	68e3      	ldr	r3, [r4, #12]
   15978:	781b      	ldrb	r3, [r3, #0]
   1597a:	2b46      	cmp	r3, #70	; 0x46
   1597c:	4620      	mov	r0, r4
   1597e:	d034      	beq.n	159ea <d_type+0x146>
   15980:	f7ff ff90 	bl	158a4 <d_type>
   15984:	6028      	str	r0, [r5, #0]
   15986:	b358      	cbz	r0, 159e0 <d_type+0x13c>
   15988:	7803      	ldrb	r3, [r0, #0]
   1598a:	3b1f      	subs	r3, #31
   1598c:	2b01      	cmp	r3, #1
   1598e:	d930      	bls.n	159f2 <d_type+0x14e>
   15990:	9a01      	ldr	r2, [sp, #4]
   15992:	b32a      	cbz	r2, 159e0 <d_type+0x13c>
   15994:	6a23      	ldr	r3, [r4, #32]
   15996:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15998:	428b      	cmp	r3, r1
   1599a:	da21      	bge.n	159e0 <d_type+0x13c>
   1599c:	69e0      	ldr	r0, [r4, #28]
   1599e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   159a2:	9d01      	ldr	r5, [sp, #4]
   159a4:	1c59      	adds	r1, r3, #1
   159a6:	4628      	mov	r0, r5
   159a8:	6221      	str	r1, [r4, #32]
   159aa:	b003      	add	sp, #12
   159ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   159b0:	2301      	movs	r3, #1
   159b2:	6b45      	ldr	r5, [r0, #52]	; 0x34
   159b4:	6343      	str	r3, [r0, #52]	; 0x34
   159b6:	f7ff fb51 	bl	1505c <d_expression_1>
   159ba:	6365      	str	r5, [r4, #52]	; 0x34
   159bc:	4602      	mov	r2, r0
   159be:	2300      	movs	r3, #0
   159c0:	2142      	movs	r1, #66	; 0x42
   159c2:	4620      	mov	r0, r4
   159c4:	f7fe fcde 	bl	14384 <d_make_comp>
   159c8:	4605      	mov	r5, r0
   159ca:	9001      	str	r0, [sp, #4]
   159cc:	b140      	cbz	r0, 159e0 <d_type+0x13c>
   159ce:	68e3      	ldr	r3, [r4, #12]
   159d0:	781a      	ldrb	r2, [r3, #0]
   159d2:	b12a      	cbz	r2, 159e0 <d_type+0x13c>
   159d4:	1c5a      	adds	r2, r3, #1
   159d6:	60e2      	str	r2, [r4, #12]
   159d8:	781b      	ldrb	r3, [r3, #0]
   159da:	2b45      	cmp	r3, #69	; 0x45
   159dc:	f000 80aa 	beq.w	15b34 <d_type+0x290>
   159e0:	2500      	movs	r5, #0
   159e2:	4628      	mov	r0, r5
   159e4:	b003      	add	sp, #12
   159e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   159ea:	f000 fd53 	bl	16494 <d_function_type>
   159ee:	6028      	str	r0, [r5, #0]
   159f0:	e7c9      	b.n	15986 <d_type+0xe2>
   159f2:	9a01      	ldr	r2, [sp, #4]
   159f4:	6843      	ldr	r3, [r0, #4]
   159f6:	6042      	str	r2, [r0, #4]
   159f8:	682a      	ldr	r2, [r5, #0]
   159fa:	9201      	str	r2, [sp, #4]
   159fc:	602b      	str	r3, [r5, #0]
   159fe:	e7c7      	b.n	15990 <d_type+0xec>
   15a00:	7853      	ldrb	r3, [r2, #1]
   15a02:	2b78      	cmp	r3, #120	; 0x78
   15a04:	d0af      	beq.n	15966 <d_type+0xc2>
   15a06:	1c53      	adds	r3, r2, #1
   15a08:	60c3      	str	r3, [r0, #12]
   15a0a:	7853      	ldrb	r3, [r2, #1]
   15a0c:	2b00      	cmp	r3, #0
   15a0e:	d0e7      	beq.n	159e0 <d_type+0x13c>
   15a10:	1c93      	adds	r3, r2, #2
   15a12:	60c3      	str	r3, [r0, #12]
   15a14:	7853      	ldrb	r3, [r2, #1]
   15a16:	3b46      	subs	r3, #70	; 0x46
   15a18:	2b30      	cmp	r3, #48	; 0x30
   15a1a:	d8e1      	bhi.n	159e0 <d_type+0x13c>
   15a1c:	a101      	add	r1, pc, #4	; (adr r1, 15a24 <d_type+0x180>)
   15a1e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15a22:	bf00      	nop
   15a24:	00015f0f 	.word	0x00015f0f
   15a28:	000159e1 	.word	0x000159e1
   15a2c:	000159e1 	.word	0x000159e1
   15a30:	000159e1 	.word	0x000159e1
   15a34:	000159e1 	.word	0x000159e1
   15a38:	000159e1 	.word	0x000159e1
   15a3c:	000159e1 	.word	0x000159e1
   15a40:	000159e1 	.word	0x000159e1
   15a44:	000159e1 	.word	0x000159e1
   15a48:	000159e1 	.word	0x000159e1
   15a4c:	000159e1 	.word	0x000159e1
   15a50:	000159e1 	.word	0x000159e1
   15a54:	000159e1 	.word	0x000159e1
   15a58:	000159e1 	.word	0x000159e1
   15a5c:	000159b1 	.word	0x000159b1
   15a60:	000159e1 	.word	0x000159e1
   15a64:	000159e1 	.word	0x000159e1
   15a68:	000159e1 	.word	0x000159e1
   15a6c:	000159e1 	.word	0x000159e1
   15a70:	000159e1 	.word	0x000159e1
   15a74:	000159e1 	.word	0x000159e1
   15a78:	000159e1 	.word	0x000159e1
   15a7c:	000159e1 	.word	0x000159e1
   15a80:	000159e1 	.word	0x000159e1
   15a84:	000159e1 	.word	0x000159e1
   15a88:	000159e1 	.word	0x000159e1
   15a8c:	000159e1 	.word	0x000159e1
   15a90:	00015ee3 	.word	0x00015ee3
   15a94:	000159e1 	.word	0x000159e1
   15a98:	00015eb7 	.word	0x00015eb7
   15a9c:	00015e97 	.word	0x00015e97
   15aa0:	00015e6d 	.word	0x00015e6d
   15aa4:	00015e3f 	.word	0x00015e3f
   15aa8:	000159e1 	.word	0x000159e1
   15aac:	00015e11 	.word	0x00015e11
   15ab0:	00015ded 	.word	0x00015ded
   15ab4:	000159e1 	.word	0x000159e1
   15ab8:	000159e1 	.word	0x000159e1
   15abc:	000159e1 	.word	0x000159e1
   15ac0:	000159e1 	.word	0x000159e1
   15ac4:	00015db3 	.word	0x00015db3
   15ac8:	000159e1 	.word	0x000159e1
   15acc:	00015d9d 	.word	0x00015d9d
   15ad0:	000159e1 	.word	0x000159e1
   15ad4:	000159e1 	.word	0x000159e1
   15ad8:	00015d6f 	.word	0x00015d6f
   15adc:	000159b1 	.word	0x000159b1
   15ae0:	000159e1 	.word	0x000159e1
   15ae4:	00015d39 	.word	0x00015d39
   15ae8:	6960      	ldr	r0, [r4, #20]
   15aea:	69a5      	ldr	r5, [r4, #24]
   15aec:	49bc      	ldr	r1, [pc, #752]	; (15de0 <d_type+0x53c>)
   15aee:	3b61      	subs	r3, #97	; 0x61
   15af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15af4:	42a8      	cmp	r0, r5
   15af6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15afa:	f280 823a 	bge.w	15f72 <d_type+0x6ce>
   15afe:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15b02:	6926      	ldr	r6, [r4, #16]
   15b04:	0089      	lsls	r1, r1, #2
   15b06:	3001      	adds	r0, #1
   15b08:	1875      	adds	r5, r6, r1
   15b0a:	6160      	str	r0, [r4, #20]
   15b0c:	f000 8231 	beq.w	15f72 <d_type+0x6ce>
   15b10:	2027      	movs	r0, #39	; 0x27
   15b12:	5470      	strb	r0, [r6, r1]
   15b14:	606b      	str	r3, [r5, #4]
   15b16:	6859      	ldr	r1, [r3, #4]
   15b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15b1a:	3201      	adds	r2, #1
   15b1c:	440b      	add	r3, r1
   15b1e:	60e2      	str	r2, [r4, #12]
   15b20:	6323      	str	r3, [r4, #48]	; 0x30
   15b22:	e75e      	b.n	159e2 <d_type+0x13e>
   15b24:	4620      	mov	r0, r4
   15b26:	f7ff fd01 	bl	1552c <d_name>
   15b2a:	4605      	mov	r5, r0
   15b2c:	9001      	str	r0, [sp, #4]
   15b2e:	2d00      	cmp	r5, #0
   15b30:	f43f af56 	beq.w	159e0 <d_type+0x13c>
   15b34:	6a23      	ldr	r3, [r4, #32]
   15b36:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15b38:	4293      	cmp	r3, r2
   15b3a:	f6bf af51 	bge.w	159e0 <d_type+0x13c>
   15b3e:	69e1      	ldr	r1, [r4, #28]
   15b40:	1c5a      	adds	r2, r3, #1
   15b42:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15b46:	9d01      	ldr	r5, [sp, #4]
   15b48:	6222      	str	r2, [r4, #32]
   15b4a:	e74a      	b.n	159e2 <d_type+0x13e>
   15b4c:	3201      	adds	r2, #1
   15b4e:	60e2      	str	r2, [r4, #12]
   15b50:	4620      	mov	r0, r4
   15b52:	f7fe fde9 	bl	14728 <d_source_name>
   15b56:	2300      	movs	r3, #0
   15b58:	4602      	mov	r2, r0
   15b5a:	2128      	movs	r1, #40	; 0x28
   15b5c:	4620      	mov	r0, r4
   15b5e:	f7fe fc11 	bl	14384 <d_make_comp>
   15b62:	4605      	mov	r5, r0
   15b64:	9001      	str	r0, [sp, #4]
   15b66:	e7e2      	b.n	15b2e <d_type+0x28a>
   15b68:	4620      	mov	r0, r4
   15b6a:	f000 fc93 	bl	16494 <d_function_type>
   15b6e:	4605      	mov	r5, r0
   15b70:	9001      	str	r0, [sp, #4]
   15b72:	e7dc      	b.n	15b2e <d_type+0x28a>
   15b74:	3201      	adds	r2, #1
   15b76:	60e2      	str	r2, [r4, #12]
   15b78:	4620      	mov	r0, r4
   15b7a:	f7ff fe93 	bl	158a4 <d_type>
   15b7e:	2300      	movs	r3, #0
   15b80:	4602      	mov	r2, r0
   15b82:	2125      	movs	r1, #37	; 0x25
   15b84:	4620      	mov	r0, r4
   15b86:	f7fe fbfd 	bl	14384 <d_make_comp>
   15b8a:	4605      	mov	r5, r0
   15b8c:	9001      	str	r0, [sp, #4]
   15b8e:	e7ce      	b.n	15b2e <d_type+0x28a>
   15b90:	3201      	adds	r2, #1
   15b92:	60e2      	str	r2, [r4, #12]
   15b94:	4620      	mov	r0, r4
   15b96:	f7ff fe85 	bl	158a4 <d_type>
   15b9a:	2300      	movs	r3, #0
   15b9c:	4602      	mov	r2, r0
   15b9e:	2126      	movs	r1, #38	; 0x26
   15ba0:	4620      	mov	r0, r4
   15ba2:	f7fe fbef 	bl	14384 <d_make_comp>
   15ba6:	4605      	mov	r5, r0
   15ba8:	9001      	str	r0, [sp, #4]
   15baa:	e7c0      	b.n	15b2e <d_type+0x28a>
   15bac:	3201      	adds	r2, #1
   15bae:	60e2      	str	r2, [r4, #12]
   15bb0:	4620      	mov	r0, r4
   15bb2:	f7ff fe77 	bl	158a4 <d_type>
   15bb6:	4605      	mov	r5, r0
   15bb8:	2800      	cmp	r0, #0
   15bba:	f000 80bb 	beq.w	15d34 <d_type+0x490>
   15bbe:	4620      	mov	r0, r4
   15bc0:	f7ff fe70 	bl	158a4 <d_type>
   15bc4:	2800      	cmp	r0, #0
   15bc6:	f000 80b5 	beq.w	15d34 <d_type+0x490>
   15bca:	4603      	mov	r3, r0
   15bcc:	462a      	mov	r2, r5
   15bce:	212b      	movs	r1, #43	; 0x2b
   15bd0:	4620      	mov	r0, r4
   15bd2:	f7fe fbd7 	bl	14384 <d_make_comp>
   15bd6:	4605      	mov	r5, r0
   15bd8:	9501      	str	r5, [sp, #4]
   15bda:	e7a8      	b.n	15b2e <d_type+0x28a>
   15bdc:	3201      	adds	r2, #1
   15bde:	60e2      	str	r2, [r4, #12]
   15be0:	4620      	mov	r0, r4
   15be2:	f7ff fe5f 	bl	158a4 <d_type>
   15be6:	2300      	movs	r3, #0
   15be8:	4602      	mov	r2, r0
   15bea:	2124      	movs	r1, #36	; 0x24
   15bec:	4620      	mov	r0, r4
   15bee:	f7fe fbc9 	bl	14384 <d_make_comp>
   15bf2:	4605      	mov	r5, r0
   15bf4:	9001      	str	r0, [sp, #4]
   15bf6:	e79a      	b.n	15b2e <d_type+0x28a>
   15bf8:	3201      	adds	r2, #1
   15bfa:	60e2      	str	r2, [r4, #12]
   15bfc:	4620      	mov	r0, r4
   15bfe:	f7ff fe51 	bl	158a4 <d_type>
   15c02:	2300      	movs	r3, #0
   15c04:	4602      	mov	r2, r0
   15c06:	2123      	movs	r1, #35	; 0x23
   15c08:	4620      	mov	r0, r4
   15c0a:	f7fe fbbb 	bl	14384 <d_make_comp>
   15c0e:	4605      	mov	r5, r0
   15c10:	9001      	str	r0, [sp, #4]
   15c12:	e78c      	b.n	15b2e <d_type+0x28a>
   15c14:	7853      	ldrb	r3, [r2, #1]
   15c16:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15c1a:	2a09      	cmp	r2, #9
   15c1c:	d905      	bls.n	15c2a <d_type+0x386>
   15c1e:	2b5f      	cmp	r3, #95	; 0x5f
   15c20:	d003      	beq.n	15c2a <d_type+0x386>
   15c22:	3b41      	subs	r3, #65	; 0x41
   15c24:	2b19      	cmp	r3, #25
   15c26:	f200 81c3 	bhi.w	15fb0 <d_type+0x70c>
   15c2a:	2100      	movs	r1, #0
   15c2c:	4620      	mov	r0, r4
   15c2e:	f7fe fdf3 	bl	14818 <d_substitution>
   15c32:	68e3      	ldr	r3, [r4, #12]
   15c34:	9001      	str	r0, [sp, #4]
   15c36:	781b      	ldrb	r3, [r3, #0]
   15c38:	2b49      	cmp	r3, #73	; 0x49
   15c3a:	4605      	mov	r5, r0
   15c3c:	f47f aed1 	bne.w	159e2 <d_type+0x13e>
   15c40:	4620      	mov	r0, r4
   15c42:	f7ff fc69 	bl	15518 <d_template_args>
   15c46:	462a      	mov	r2, r5
   15c48:	4603      	mov	r3, r0
   15c4a:	2104      	movs	r1, #4
   15c4c:	4620      	mov	r0, r4
   15c4e:	f7fe fb99 	bl	14384 <d_make_comp>
   15c52:	4605      	mov	r5, r0
   15c54:	e7c0      	b.n	15bd8 <d_type+0x334>
   15c56:	3201      	adds	r2, #1
   15c58:	60e2      	str	r2, [r4, #12]
   15c5a:	4620      	mov	r0, r4
   15c5c:	f7ff fe22 	bl	158a4 <d_type>
   15c60:	2300      	movs	r3, #0
   15c62:	4602      	mov	r2, r0
   15c64:	2122      	movs	r1, #34	; 0x22
   15c66:	4620      	mov	r0, r4
   15c68:	f7fe fb8c 	bl	14384 <d_make_comp>
   15c6c:	4605      	mov	r5, r0
   15c6e:	9001      	str	r0, [sp, #4]
   15c70:	e75d      	b.n	15b2e <d_type+0x28a>
   15c72:	4620      	mov	r0, r4
   15c74:	f7fe fd36 	bl	146e4 <d_template_param>
   15c78:	68e6      	ldr	r6, [r4, #12]
   15c7a:	9001      	str	r0, [sp, #4]
   15c7c:	7833      	ldrb	r3, [r6, #0]
   15c7e:	2b49      	cmp	r3, #73	; 0x49
   15c80:	4605      	mov	r5, r0
   15c82:	f47f af54 	bne.w	15b2e <d_type+0x28a>
   15c86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15c88:	2b00      	cmp	r3, #0
   15c8a:	f040 81a9 	bne.w	15fe0 <d_type+0x73c>
   15c8e:	2800      	cmp	r0, #0
   15c90:	f43f aea6 	beq.w	159e0 <d_type+0x13c>
   15c94:	6a23      	ldr	r3, [r4, #32]
   15c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15c98:	4293      	cmp	r3, r2
   15c9a:	f6bf aea1 	bge.w	159e0 <d_type+0x13c>
   15c9e:	69e1      	ldr	r1, [r4, #28]
   15ca0:	1c5a      	adds	r2, r3, #1
   15ca2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15ca6:	6222      	str	r2, [r4, #32]
   15ca8:	4620      	mov	r0, r4
   15caa:	9d01      	ldr	r5, [sp, #4]
   15cac:	f7ff fc34 	bl	15518 <d_template_args>
   15cb0:	462a      	mov	r2, r5
   15cb2:	4603      	mov	r3, r0
   15cb4:	e7c9      	b.n	15c4a <d_type+0x3a6>
   15cb6:	3201      	adds	r2, #1
   15cb8:	60e2      	str	r2, [r4, #12]
   15cba:	4620      	mov	r0, r4
   15cbc:	f7fe fd34 	bl	14728 <d_source_name>
   15cc0:	68e3      	ldr	r3, [r4, #12]
   15cc2:	9001      	str	r0, [sp, #4]
   15cc4:	781b      	ldrb	r3, [r3, #0]
   15cc6:	2b49      	cmp	r3, #73	; 0x49
   15cc8:	4605      	mov	r5, r0
   15cca:	f000 817e 	beq.w	15fca <d_type+0x726>
   15cce:	4620      	mov	r0, r4
   15cd0:	f7ff fde8 	bl	158a4 <d_type>
   15cd4:	9b01      	ldr	r3, [sp, #4]
   15cd6:	4602      	mov	r2, r0
   15cd8:	2121      	movs	r1, #33	; 0x21
   15cda:	4620      	mov	r0, r4
   15cdc:	f7fe fb52 	bl	14384 <d_make_comp>
   15ce0:	4605      	mov	r5, r0
   15ce2:	9001      	str	r0, [sp, #4]
   15ce4:	e723      	b.n	15b2e <d_type+0x28a>
   15ce6:	1c51      	adds	r1, r2, #1
   15ce8:	60e1      	str	r1, [r4, #12]
   15cea:	7853      	ldrb	r3, [r2, #1]
   15cec:	2b5f      	cmp	r3, #95	; 0x5f
   15cee:	f000 8144 	beq.w	15f7a <d_type+0x6d6>
   15cf2:	3b30      	subs	r3, #48	; 0x30
   15cf4:	2b09      	cmp	r3, #9
   15cf6:	f200 814e 	bhi.w	15f96 <d_type+0x6f2>
   15cfa:	460b      	mov	r3, r1
   15cfc:	3301      	adds	r3, #1
   15cfe:	60e3      	str	r3, [r4, #12]
   15d00:	781a      	ldrb	r2, [r3, #0]
   15d02:	3a30      	subs	r2, #48	; 0x30
   15d04:	2a09      	cmp	r2, #9
   15d06:	d9f9      	bls.n	15cfc <d_type+0x458>
   15d08:	6962      	ldr	r2, [r4, #20]
   15d0a:	69a0      	ldr	r0, [r4, #24]
   15d0c:	4282      	cmp	r2, r0
   15d0e:	da11      	bge.n	15d34 <d_type+0x490>
   15d10:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15d14:	6926      	ldr	r6, [r4, #16]
   15d16:	0080      	lsls	r0, r0, #2
   15d18:	3201      	adds	r2, #1
   15d1a:	1835      	adds	r5, r6, r0
   15d1c:	6162      	str	r2, [r4, #20]
   15d1e:	d009      	beq.n	15d34 <d_type+0x490>
   15d20:	1a5a      	subs	r2, r3, r1
   15d22:	d007      	beq.n	15d34 <d_type+0x490>
   15d24:	2700      	movs	r7, #0
   15d26:	5437      	strb	r7, [r6, r0]
   15d28:	6069      	str	r1, [r5, #4]
   15d2a:	60aa      	str	r2, [r5, #8]
   15d2c:	781a      	ldrb	r2, [r3, #0]
   15d2e:	2a5f      	cmp	r2, #95	; 0x5f
   15d30:	f000 8190 	beq.w	16054 <d_type+0x7b0>
   15d34:	2500      	movs	r5, #0
   15d36:	e74f      	b.n	15bd8 <d_type+0x334>
   15d38:	7893      	ldrb	r3, [r2, #2]
   15d3a:	2b5f      	cmp	r3, #95	; 0x5f
   15d3c:	f000 8180 	beq.w	16040 <d_type+0x79c>
   15d40:	f7fe fc9c 	bl	1467c <d_number_component>
   15d44:	4605      	mov	r5, r0
   15d46:	2d00      	cmp	r5, #0
   15d48:	f43f af46 	beq.w	15bd8 <d_type+0x334>
   15d4c:	68e3      	ldr	r3, [r4, #12]
   15d4e:	781a      	ldrb	r2, [r3, #0]
   15d50:	2a5f      	cmp	r2, #95	; 0x5f
   15d52:	d1ef      	bne.n	15d34 <d_type+0x490>
   15d54:	3301      	adds	r3, #1
   15d56:	60e3      	str	r3, [r4, #12]
   15d58:	4620      	mov	r0, r4
   15d5a:	f7ff fda3 	bl	158a4 <d_type>
   15d5e:	462a      	mov	r2, r5
   15d60:	4603      	mov	r3, r0
   15d62:	212d      	movs	r1, #45	; 0x2d
   15d64:	4620      	mov	r0, r4
   15d66:	f7fe fb0d 	bl	14384 <d_make_comp>
   15d6a:	4605      	mov	r5, r0
   15d6c:	e734      	b.n	15bd8 <d_type+0x334>
   15d6e:	6942      	ldr	r2, [r0, #20]
   15d70:	6983      	ldr	r3, [r0, #24]
   15d72:	429a      	cmp	r2, r3
   15d74:	f280 80fd 	bge.w	15f72 <d_type+0x6ce>
   15d78:	230c      	movs	r3, #12
   15d7a:	6901      	ldr	r1, [r0, #16]
   15d7c:	fb03 f302 	mul.w	r3, r3, r2
   15d80:	18cd      	adds	r5, r1, r3
   15d82:	f102 0201 	add.w	r2, r2, #1
   15d86:	6142      	str	r2, [r0, #20]
   15d88:	f000 80f3 	beq.w	15f72 <d_type+0x6ce>
   15d8c:	4a15      	ldr	r2, [pc, #84]	; (15de4 <d_type+0x540>)
   15d8e:	2027      	movs	r0, #39	; 0x27
   15d90:	54c8      	strb	r0, [r1, r3]
   15d92:	606a      	str	r2, [r5, #4]
   15d94:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15d96:	3308      	adds	r3, #8
   15d98:	6323      	str	r3, [r4, #48]	; 0x30
   15d9a:	e622      	b.n	159e2 <d_type+0x13e>
   15d9c:	f7ff fd82 	bl	158a4 <d_type>
   15da0:	2300      	movs	r3, #0
   15da2:	4602      	mov	r2, r0
   15da4:	214a      	movs	r1, #74	; 0x4a
   15da6:	4620      	mov	r0, r4
   15da8:	f7fe faec 	bl	14384 <d_make_comp>
   15dac:	4605      	mov	r5, r0
   15dae:	9001      	str	r0, [sp, #4]
   15db0:	e6bd      	b.n	15b2e <d_type+0x28a>
   15db2:	6942      	ldr	r2, [r0, #20]
   15db4:	6983      	ldr	r3, [r0, #24]
   15db6:	429a      	cmp	r2, r3
   15db8:	f280 80db 	bge.w	15f72 <d_type+0x6ce>
   15dbc:	230c      	movs	r3, #12
   15dbe:	6901      	ldr	r1, [r0, #16]
   15dc0:	fb03 f302 	mul.w	r3, r3, r2
   15dc4:	18cd      	adds	r5, r1, r3
   15dc6:	f102 0201 	add.w	r2, r2, #1
   15dca:	6142      	str	r2, [r0, #20]
   15dcc:	f000 80d1 	beq.w	15f72 <d_type+0x6ce>
   15dd0:	2027      	movs	r0, #39	; 0x27
   15dd2:	4a05      	ldr	r2, [pc, #20]	; (15de8 <d_type+0x544>)
   15dd4:	54c8      	strb	r0, [r1, r3]
   15dd6:	606a      	str	r2, [r5, #4]
   15dd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15dda:	3311      	adds	r3, #17
   15ddc:	6323      	str	r3, [r4, #48]	; 0x30
   15dde:	e600      	b.n	159e2 <d_type+0x13e>
   15de0:	00023c04 	.word	0x00023c04
   15de4:	00023e5c 	.word	0x00023e5c
   15de8:	00023e84 	.word	0x00023e84
   15dec:	6942      	ldr	r2, [r0, #20]
   15dee:	6983      	ldr	r3, [r0, #24]
   15df0:	429a      	cmp	r2, r3
   15df2:	f280 80be 	bge.w	15f72 <d_type+0x6ce>
   15df6:	230c      	movs	r3, #12
   15df8:	6901      	ldr	r1, [r0, #16]
   15dfa:	fb03 f302 	mul.w	r3, r3, r2
   15dfe:	18cd      	adds	r5, r1, r3
   15e00:	f102 0201 	add.w	r2, r2, #1
   15e04:	6142      	str	r2, [r0, #20]
   15e06:	f000 80b4 	beq.w	15f72 <d_type+0x6ce>
   15e0a:	2027      	movs	r0, #39	; 0x27
   15e0c:	4a92      	ldr	r2, [pc, #584]	; (16058 <d_type+0x7b4>)
   15e0e:	e7bf      	b.n	15d90 <d_type+0x4ec>
   15e10:	6942      	ldr	r2, [r0, #20]
   15e12:	6983      	ldr	r3, [r0, #24]
   15e14:	429a      	cmp	r2, r3
   15e16:	f280 80ac 	bge.w	15f72 <d_type+0x6ce>
   15e1a:	230c      	movs	r3, #12
   15e1c:	6901      	ldr	r1, [r0, #16]
   15e1e:	fb03 f302 	mul.w	r3, r3, r2
   15e22:	18cd      	adds	r5, r1, r3
   15e24:	f102 0201 	add.w	r2, r2, #1
   15e28:	6142      	str	r2, [r0, #20]
   15e2a:	f000 80a2 	beq.w	15f72 <d_type+0x6ce>
   15e2e:	2027      	movs	r0, #39	; 0x27
   15e30:	4a8a      	ldr	r2, [pc, #552]	; (1605c <d_type+0x7b8>)
   15e32:	54c8      	strb	r0, [r1, r3]
   15e34:	606a      	str	r2, [r5, #4]
   15e36:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15e38:	3304      	adds	r3, #4
   15e3a:	6323      	str	r3, [r4, #48]	; 0x30
   15e3c:	e5d1      	b.n	159e2 <d_type+0x13e>
   15e3e:	6942      	ldr	r2, [r0, #20]
   15e40:	6983      	ldr	r3, [r0, #24]
   15e42:	429a      	cmp	r2, r3
   15e44:	f280 8095 	bge.w	15f72 <d_type+0x6ce>
   15e48:	230c      	movs	r3, #12
   15e4a:	6901      	ldr	r1, [r0, #16]
   15e4c:	fb03 f302 	mul.w	r3, r3, r2
   15e50:	18cd      	adds	r5, r1, r3
   15e52:	f102 0201 	add.w	r2, r2, #1
   15e56:	6142      	str	r2, [r0, #20]
   15e58:	f000 808b 	beq.w	15f72 <d_type+0x6ce>
   15e5c:	4a80      	ldr	r2, [pc, #512]	; (16060 <d_type+0x7bc>)
   15e5e:	2027      	movs	r0, #39	; 0x27
   15e60:	54c8      	strb	r0, [r1, r3]
   15e62:	606a      	str	r2, [r5, #4]
   15e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15e66:	3309      	adds	r3, #9
   15e68:	6323      	str	r3, [r4, #48]	; 0x30
   15e6a:	e5ba      	b.n	159e2 <d_type+0x13e>
   15e6c:	6942      	ldr	r2, [r0, #20]
   15e6e:	6983      	ldr	r3, [r0, #24]
   15e70:	429a      	cmp	r2, r3
   15e72:	da7e      	bge.n	15f72 <d_type+0x6ce>
   15e74:	230c      	movs	r3, #12
   15e76:	6901      	ldr	r1, [r0, #16]
   15e78:	fb03 f302 	mul.w	r3, r3, r2
   15e7c:	18cd      	adds	r5, r1, r3
   15e7e:	f102 0201 	add.w	r2, r2, #1
   15e82:	6142      	str	r2, [r0, #20]
   15e84:	d075      	beq.n	15f72 <d_type+0x6ce>
   15e86:	2027      	movs	r0, #39	; 0x27
   15e88:	4a76      	ldr	r2, [pc, #472]	; (16064 <d_type+0x7c0>)
   15e8a:	54c8      	strb	r0, [r1, r3]
   15e8c:	606a      	str	r2, [r5, #4]
   15e8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15e90:	330a      	adds	r3, #10
   15e92:	6323      	str	r3, [r4, #48]	; 0x30
   15e94:	e5a5      	b.n	159e2 <d_type+0x13e>
   15e96:	6942      	ldr	r2, [r0, #20]
   15e98:	6983      	ldr	r3, [r0, #24]
   15e9a:	429a      	cmp	r2, r3
   15e9c:	da69      	bge.n	15f72 <d_type+0x6ce>
   15e9e:	230c      	movs	r3, #12
   15ea0:	6901      	ldr	r1, [r0, #16]
   15ea2:	fb03 f302 	mul.w	r3, r3, r2
   15ea6:	18cd      	adds	r5, r1, r3
   15ea8:	f102 0201 	add.w	r2, r2, #1
   15eac:	6142      	str	r2, [r0, #20]
   15eae:	d060      	beq.n	15f72 <d_type+0x6ce>
   15eb0:	2027      	movs	r0, #39	; 0x27
   15eb2:	4a6d      	ldr	r2, [pc, #436]	; (16068 <d_type+0x7c4>)
   15eb4:	e7d4      	b.n	15e60 <d_type+0x5bc>
   15eb6:	6942      	ldr	r2, [r0, #20]
   15eb8:	6983      	ldr	r3, [r0, #24]
   15eba:	429a      	cmp	r2, r3
   15ebc:	f6bf ad90 	bge.w	159e0 <d_type+0x13c>
   15ec0:	230c      	movs	r3, #12
   15ec2:	6901      	ldr	r1, [r0, #16]
   15ec4:	fb03 f302 	mul.w	r3, r3, r2
   15ec8:	18cd      	adds	r5, r1, r3
   15eca:	f102 0201 	add.w	r2, r2, #1
   15ece:	6142      	str	r2, [r0, #20]
   15ed0:	f43f ad87 	beq.w	159e2 <d_type+0x13e>
   15ed4:	2000      	movs	r0, #0
   15ed6:	54c8      	strb	r0, [r1, r3]
   15ed8:	4a64      	ldr	r2, [pc, #400]	; (1606c <d_type+0x7c8>)
   15eda:	606a      	str	r2, [r5, #4]
   15edc:	230e      	movs	r3, #14
   15ede:	60ab      	str	r3, [r5, #8]
   15ee0:	e57f      	b.n	159e2 <d_type+0x13e>
   15ee2:	6942      	ldr	r2, [r0, #20]
   15ee4:	6983      	ldr	r3, [r0, #24]
   15ee6:	429a      	cmp	r2, r3
   15ee8:	f6bf ad7a 	bge.w	159e0 <d_type+0x13c>
   15eec:	230c      	movs	r3, #12
   15eee:	6901      	ldr	r1, [r0, #16]
   15ef0:	fb03 f302 	mul.w	r3, r3, r2
   15ef4:	18cd      	adds	r5, r1, r3
   15ef6:	f102 0201 	add.w	r2, r2, #1
   15efa:	6142      	str	r2, [r0, #20]
   15efc:	f43f ad71 	beq.w	159e2 <d_type+0x13e>
   15f00:	2000      	movs	r0, #0
   15f02:	54c8      	strb	r0, [r1, r3]
   15f04:	4a5a      	ldr	r2, [pc, #360]	; (16070 <d_type+0x7cc>)
   15f06:	606a      	str	r2, [r5, #4]
   15f08:	2304      	movs	r3, #4
   15f0a:	60ab      	str	r3, [r5, #8]
   15f0c:	e569      	b.n	159e2 <d_type+0x13e>
   15f0e:	6943      	ldr	r3, [r0, #20]
   15f10:	6981      	ldr	r1, [r0, #24]
   15f12:	428b      	cmp	r3, r1
   15f14:	da7a      	bge.n	1600c <d_type+0x768>
   15f16:	6900      	ldr	r0, [r0, #16]
   15f18:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15f1c:	0089      	lsls	r1, r1, #2
   15f1e:	3301      	adds	r3, #1
   15f20:	1845      	adds	r5, r0, r1
   15f22:	262c      	movs	r6, #44	; 0x2c
   15f24:	6163      	str	r3, [r4, #20]
   15f26:	9501      	str	r5, [sp, #4]
   15f28:	5446      	strb	r6, [r0, r1]
   15f2a:	7893      	ldrb	r3, [r2, #2]
   15f2c:	3b30      	subs	r3, #48	; 0x30
   15f2e:	b2db      	uxtb	r3, r3
   15f30:	2b09      	cmp	r3, #9
   15f32:	bf94      	ite	ls
   15f34:	2301      	movls	r3, #1
   15f36:	2300      	movhi	r3, #0
   15f38:	812b      	strh	r3, [r5, #8]
   15f3a:	d97b      	bls.n	16034 <d_type+0x790>
   15f3c:	4620      	mov	r0, r4
   15f3e:	f7ff fcb1 	bl	158a4 <d_type>
   15f42:	9b01      	ldr	r3, [sp, #4]
   15f44:	6068      	str	r0, [r5, #4]
   15f46:	685b      	ldr	r3, [r3, #4]
   15f48:	2b00      	cmp	r3, #0
   15f4a:	f43f ad49 	beq.w	159e0 <d_type+0x13c>
   15f4e:	f104 000c 	add.w	r0, r4, #12
   15f52:	f7fe fb69 	bl	14628 <d_number.isra.0>
   15f56:	68e2      	ldr	r2, [r4, #12]
   15f58:	7813      	ldrb	r3, [r2, #0]
   15f5a:	b113      	cbz	r3, 15f62 <d_type+0x6be>
   15f5c:	1c53      	adds	r3, r2, #1
   15f5e:	60e3      	str	r3, [r4, #12]
   15f60:	7813      	ldrb	r3, [r2, #0]
   15f62:	9d01      	ldr	r5, [sp, #4]
   15f64:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   15f68:	fab3 f383 	clz	r3, r3
   15f6c:	095b      	lsrs	r3, r3, #5
   15f6e:	816b      	strh	r3, [r5, #10]
   15f70:	e537      	b.n	159e2 <d_type+0x13e>
   15f72:	2300      	movs	r3, #0
   15f74:	9301      	str	r3, [sp, #4]
   15f76:	685b      	ldr	r3, [r3, #4]
   15f78:	deff      	udf	#255	; 0xff
   15f7a:	2500      	movs	r5, #0
   15f7c:	3101      	adds	r1, #1
   15f7e:	60e1      	str	r1, [r4, #12]
   15f80:	4620      	mov	r0, r4
   15f82:	f7ff fc8f 	bl	158a4 <d_type>
   15f86:	462a      	mov	r2, r5
   15f88:	4603      	mov	r3, r0
   15f8a:	212a      	movs	r1, #42	; 0x2a
   15f8c:	4620      	mov	r0, r4
   15f8e:	f7fe f9f9 	bl	14384 <d_make_comp>
   15f92:	4605      	mov	r5, r0
   15f94:	e620      	b.n	15bd8 <d_type+0x334>
   15f96:	2301      	movs	r3, #1
   15f98:	6b65      	ldr	r5, [r4, #52]	; 0x34
   15f9a:	6363      	str	r3, [r4, #52]	; 0x34
   15f9c:	4620      	mov	r0, r4
   15f9e:	f7ff f85d 	bl	1505c <d_expression_1>
   15fa2:	6365      	str	r5, [r4, #52]	; 0x34
   15fa4:	4605      	mov	r5, r0
   15fa6:	2800      	cmp	r0, #0
   15fa8:	f43f aec4 	beq.w	15d34 <d_type+0x490>
   15fac:	68e3      	ldr	r3, [r4, #12]
   15fae:	e6bd      	b.n	15d2c <d_type+0x488>
   15fb0:	4620      	mov	r0, r4
   15fb2:	f7ff fabb 	bl	1552c <d_name>
   15fb6:	4605      	mov	r5, r0
   15fb8:	9001      	str	r0, [sp, #4]
   15fba:	2800      	cmp	r0, #0
   15fbc:	f43f ad10 	beq.w	159e0 <d_type+0x13c>
   15fc0:	7803      	ldrb	r3, [r0, #0]
   15fc2:	2b18      	cmp	r3, #24
   15fc4:	f47f adb6 	bne.w	15b34 <d_type+0x290>
   15fc8:	e50b      	b.n	159e2 <d_type+0x13e>
   15fca:	4620      	mov	r0, r4
   15fcc:	f7ff faa4 	bl	15518 <d_template_args>
   15fd0:	462a      	mov	r2, r5
   15fd2:	4603      	mov	r3, r0
   15fd4:	2104      	movs	r1, #4
   15fd6:	4620      	mov	r0, r4
   15fd8:	f7fe f9d4 	bl	14384 <d_make_comp>
   15fdc:	9001      	str	r0, [sp, #4]
   15fde:	e676      	b.n	15cce <d_type+0x42a>
   15fe0:	4620      	mov	r0, r4
   15fe2:	f8d4 9014 	ldr.w	r9, [r4, #20]
   15fe6:	f8d4 8020 	ldr.w	r8, [r4, #32]
   15fea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   15fec:	6b25      	ldr	r5, [r4, #48]	; 0x30
   15fee:	f7ff fa93 	bl	15518 <d_template_args>
   15ff2:	68e2      	ldr	r2, [r4, #12]
   15ff4:	7812      	ldrb	r2, [r2, #0]
   15ff6:	2a49      	cmp	r2, #73	; 0x49
   15ff8:	d00b      	beq.n	16012 <d_type+0x76e>
   15ffa:	6325      	str	r5, [r4, #48]	; 0x30
   15ffc:	60e6      	str	r6, [r4, #12]
   15ffe:	f8c4 9014 	str.w	r9, [r4, #20]
   16002:	f8c4 8020 	str.w	r8, [r4, #32]
   16006:	62a7      	str	r7, [r4, #40]	; 0x28
   16008:	9d01      	ldr	r5, [sp, #4]
   1600a:	e590      	b.n	15b2e <d_type+0x28a>
   1600c:	2300      	movs	r3, #0
   1600e:	701b      	strb	r3, [r3, #0]
   16010:	deff      	udf	#255	; 0xff
   16012:	9b01      	ldr	r3, [sp, #4]
   16014:	2b00      	cmp	r3, #0
   16016:	f43f ace3 	beq.w	159e0 <d_type+0x13c>
   1601a:	6a22      	ldr	r2, [r4, #32]
   1601c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1601e:	428a      	cmp	r2, r1
   16020:	f6bf acde 	bge.w	159e0 <d_type+0x13c>
   16024:	69e5      	ldr	r5, [r4, #28]
   16026:	1c51      	adds	r1, r2, #1
   16028:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   1602c:	9a01      	ldr	r2, [sp, #4]
   1602e:	6221      	str	r1, [r4, #32]
   16030:	4603      	mov	r3, r0
   16032:	e60a      	b.n	15c4a <d_type+0x3a6>
   16034:	f104 000c 	add.w	r0, r4, #12
   16038:	f7fe faf6 	bl	14628 <d_number.isra.0>
   1603c:	9d01      	ldr	r5, [sp, #4]
   1603e:	e77d      	b.n	15f3c <d_type+0x698>
   16040:	3203      	adds	r2, #3
   16042:	2301      	movs	r3, #1
   16044:	6b46      	ldr	r6, [r0, #52]	; 0x34
   16046:	60c2      	str	r2, [r0, #12]
   16048:	6343      	str	r3, [r0, #52]	; 0x34
   1604a:	f7ff f807 	bl	1505c <d_expression_1>
   1604e:	6366      	str	r6, [r4, #52]	; 0x34
   16050:	4605      	mov	r5, r0
   16052:	e678      	b.n	15d46 <d_type+0x4a2>
   16054:	4619      	mov	r1, r3
   16056:	e791      	b.n	15f7c <d_type+0x6d8>
   16058:	00023e70 	.word	0x00023e70
   1605c:	00023e48 	.word	0x00023e48
   16060:	00023e0c 	.word	0x00023e0c
   16064:	00023e34 	.word	0x00023e34
   16068:	00023e20 	.word	0x00023e20
   1606c:	00024330 	.word	0x00024330
   16070:	00024328 	.word	0x00024328

00016074 <d_operator_name>:
   16074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16076:	68c3      	ldr	r3, [r0, #12]
   16078:	781e      	ldrb	r6, [r3, #0]
   1607a:	4684      	mov	ip, r0
   1607c:	b326      	cbz	r6, 160c8 <d_operator_name+0x54>
   1607e:	1c5a      	adds	r2, r3, #1
   16080:	60c2      	str	r2, [r0, #12]
   16082:	785a      	ldrb	r2, [r3, #1]
   16084:	781e      	ldrb	r6, [r3, #0]
   16086:	2a00      	cmp	r2, #0
   16088:	d058      	beq.n	1613c <d_operator_name+0xc8>
   1608a:	1c9a      	adds	r2, r3, #2
   1608c:	60c2      	str	r2, [r0, #12]
   1608e:	2e76      	cmp	r6, #118	; 0x76
   16090:	4604      	mov	r4, r0
   16092:	f893 e001 	ldrb.w	lr, [r3, #1]
   16096:	d043      	beq.n	16120 <d_operator_name+0xac>
   16098:	2e63      	cmp	r6, #99	; 0x63
   1609a:	d116      	bne.n	160ca <d_operator_name+0x56>
   1609c:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   160a0:	d113      	bne.n	160ca <d_operator_name+0x56>
   160a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   160a4:	6b85      	ldr	r5, [r0, #56]	; 0x38
   160a6:	fab3 f383 	clz	r3, r3
   160aa:	095b      	lsrs	r3, r3, #5
   160ac:	6383      	str	r3, [r0, #56]	; 0x38
   160ae:	f7ff fbf9 	bl	158a4 <d_type>
   160b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   160b4:	4602      	mov	r2, r0
   160b6:	2b00      	cmp	r3, #0
   160b8:	d052      	beq.n	16160 <d_operator_name+0xec>
   160ba:	2300      	movs	r3, #0
   160bc:	2134      	movs	r1, #52	; 0x34
   160be:	4620      	mov	r0, r4
   160c0:	f7fe f960 	bl	14384 <d_make_comp>
   160c4:	63a5      	str	r5, [r4, #56]	; 0x38
   160c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160c8:	46b6      	mov	lr, r6
   160ca:	4c28      	ldr	r4, [pc, #160]	; (1616c <d_operator_name+0xf8>)
   160cc:	2043      	movs	r0, #67	; 0x43
   160ce:	2200      	movs	r2, #0
   160d0:	e004      	b.n	160dc <d_operator_name+0x68>
   160d2:	bf94      	ite	ls
   160d4:	1c5a      	addls	r2, r3, #1
   160d6:	4618      	movhi	r0, r3
   160d8:	4282      	cmp	r2, r0
   160da:	d02d      	beq.n	16138 <d_operator_name+0xc4>
   160dc:	1a83      	subs	r3, r0, r2
   160de:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   160e2:	eb02 0363 	add.w	r3, r2, r3, asr #1
   160e6:	0119      	lsls	r1, r3, #4
   160e8:	1867      	adds	r7, r4, r1
   160ea:	5861      	ldr	r1, [r4, r1]
   160ec:	780d      	ldrb	r5, [r1, #0]
   160ee:	42b5      	cmp	r5, r6
   160f0:	d1ef      	bne.n	160d2 <d_operator_name+0x5e>
   160f2:	7849      	ldrb	r1, [r1, #1]
   160f4:	4571      	cmp	r1, lr
   160f6:	d1ec      	bne.n	160d2 <d_operator_name+0x5e>
   160f8:	f8dc 3014 	ldr.w	r3, [ip, #20]
   160fc:	f8dc 2018 	ldr.w	r2, [ip, #24]
   16100:	4293      	cmp	r3, r2
   16102:	da19      	bge.n	16138 <d_operator_name+0xc4>
   16104:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16108:	f8dc 1010 	ldr.w	r1, [ip, #16]
   1610c:	0092      	lsls	r2, r2, #2
   1610e:	3301      	adds	r3, #1
   16110:	1888      	adds	r0, r1, r2
   16112:	f8cc 3014 	str.w	r3, [ip, #20]
   16116:	d013      	beq.n	16140 <d_operator_name+0xcc>
   16118:	2331      	movs	r3, #49	; 0x31
   1611a:	548b      	strb	r3, [r1, r2]
   1611c:	6047      	str	r7, [r0, #4]
   1611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16120:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   16124:	b2eb      	uxtb	r3, r5
   16126:	2b09      	cmp	r3, #9
   16128:	d8cf      	bhi.n	160ca <d_operator_name+0x56>
   1612a:	f7fe fafd 	bl	14728 <d_source_name>
   1612e:	6963      	ldr	r3, [r4, #20]
   16130:	69a2      	ldr	r2, [r4, #24]
   16132:	4293      	cmp	r3, r2
   16134:	4601      	mov	r1, r0
   16136:	db04      	blt.n	16142 <d_operator_name+0xce>
   16138:	2000      	movs	r0, #0
   1613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1613c:	4696      	mov	lr, r2
   1613e:	e7c4      	b.n	160ca <d_operator_name+0x56>
   16140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16142:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16146:	6926      	ldr	r6, [r4, #16]
   16148:	0092      	lsls	r2, r2, #2
   1614a:	3301      	adds	r3, #1
   1614c:	18b0      	adds	r0, r6, r2
   1614e:	6163      	str	r3, [r4, #20]
   16150:	d0f2      	beq.n	16138 <d_operator_name+0xc4>
   16152:	2900      	cmp	r1, #0
   16154:	d0f0      	beq.n	16138 <d_operator_name+0xc4>
   16156:	2332      	movs	r3, #50	; 0x32
   16158:	54b3      	strb	r3, [r6, r2]
   1615a:	6045      	str	r5, [r0, #4]
   1615c:	6081      	str	r1, [r0, #8]
   1615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16160:	2133      	movs	r1, #51	; 0x33
   16162:	4620      	mov	r0, r4
   16164:	f7fe f90e 	bl	14384 <d_make_comp>
   16168:	e7ac      	b.n	160c4 <d_operator_name+0x50>
   1616a:	bf00      	nop
   1616c:	00023e98 	.word	0x00023e98

00016170 <d_parmlist>:
   16170:	b530      	push	{r4, r5, lr}
   16172:	68c2      	ldr	r2, [r0, #12]
   16174:	b083      	sub	sp, #12
   16176:	2300      	movs	r3, #0
   16178:	9301      	str	r3, [sp, #4]
   1617a:	7813      	ldrb	r3, [r2, #0]
   1617c:	b343      	cbz	r3, 161d0 <d_parmlist+0x60>
   1617e:	2b45      	cmp	r3, #69	; 0x45
   16180:	d026      	beq.n	161d0 <d_parmlist+0x60>
   16182:	2b2e      	cmp	r3, #46	; 0x2e
   16184:	d024      	beq.n	161d0 <d_parmlist+0x60>
   16186:	4604      	mov	r4, r0
   16188:	ad01      	add	r5, sp, #4
   1618a:	e015      	b.n	161b8 <d_parmlist+0x48>
   1618c:	2b4f      	cmp	r3, #79	; 0x4f
   1618e:	d016      	beq.n	161be <d_parmlist+0x4e>
   16190:	f7ff fb88 	bl	158a4 <d_type>
   16194:	2300      	movs	r3, #0
   16196:	4602      	mov	r2, r0
   16198:	212e      	movs	r1, #46	; 0x2e
   1619a:	b1c8      	cbz	r0, 161d0 <d_parmlist+0x60>
   1619c:	4620      	mov	r0, r4
   1619e:	f7fe f8f1 	bl	14384 <d_make_comp>
   161a2:	6028      	str	r0, [r5, #0]
   161a4:	b1a0      	cbz	r0, 161d0 <d_parmlist+0x60>
   161a6:	68e2      	ldr	r2, [r4, #12]
   161a8:	7813      	ldrb	r3, [r2, #0]
   161aa:	f100 0508 	add.w	r5, r0, #8
   161ae:	b14b      	cbz	r3, 161c4 <d_parmlist+0x54>
   161b0:	2b45      	cmp	r3, #69	; 0x45
   161b2:	d007      	beq.n	161c4 <d_parmlist+0x54>
   161b4:	2b2e      	cmp	r3, #46	; 0x2e
   161b6:	d005      	beq.n	161c4 <d_parmlist+0x54>
   161b8:	2b52      	cmp	r3, #82	; 0x52
   161ba:	4620      	mov	r0, r4
   161bc:	d1e6      	bne.n	1618c <d_parmlist+0x1c>
   161be:	7853      	ldrb	r3, [r2, #1]
   161c0:	2b45      	cmp	r3, #69	; 0x45
   161c2:	d1e5      	bne.n	16190 <d_parmlist+0x20>
   161c4:	9801      	ldr	r0, [sp, #4]
   161c6:	b118      	cbz	r0, 161d0 <d_parmlist+0x60>
   161c8:	6883      	ldr	r3, [r0, #8]
   161ca:	b123      	cbz	r3, 161d6 <d_parmlist+0x66>
   161cc:	b003      	add	sp, #12
   161ce:	bd30      	pop	{r4, r5, pc}
   161d0:	2000      	movs	r0, #0
   161d2:	b003      	add	sp, #12
   161d4:	bd30      	pop	{r4, r5, pc}
   161d6:	6842      	ldr	r2, [r0, #4]
   161d8:	7811      	ldrb	r1, [r2, #0]
   161da:	2927      	cmp	r1, #39	; 0x27
   161dc:	d1f6      	bne.n	161cc <d_parmlist+0x5c>
   161de:	6852      	ldr	r2, [r2, #4]
   161e0:	7c11      	ldrb	r1, [r2, #16]
   161e2:	2909      	cmp	r1, #9
   161e4:	d1f2      	bne.n	161cc <d_parmlist+0x5c>
   161e6:	6851      	ldr	r1, [r2, #4]
   161e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   161ea:	1a52      	subs	r2, r2, r1
   161ec:	6322      	str	r2, [r4, #48]	; 0x30
   161ee:	6043      	str	r3, [r0, #4]
   161f0:	e7ec      	b.n	161cc <d_parmlist+0x5c>
   161f2:	bf00      	nop

000161f4 <d_unqualified_name>:
   161f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   161f6:	68c1      	ldr	r1, [r0, #12]
   161f8:	780b      	ldrb	r3, [r1, #0]
   161fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   161fe:	2a09      	cmp	r2, #9
   16200:	4604      	mov	r4, r0
   16202:	d920      	bls.n	16246 <d_unqualified_name+0x52>
   16204:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16208:	2a19      	cmp	r2, #25
   1620a:	d925      	bls.n	16258 <d_unqualified_name+0x64>
   1620c:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   16210:	2a01      	cmp	r2, #1
   16212:	d92c      	bls.n	1626e <d_unqualified_name+0x7a>
   16214:	2b4c      	cmp	r3, #76	; 0x4c
   16216:	f000 8088 	beq.w	1632a <d_unqualified_name+0x136>
   1621a:	2b55      	cmp	r3, #85	; 0x55
   1621c:	d133      	bne.n	16286 <d_unqualified_name+0x92>
   1621e:	784b      	ldrb	r3, [r1, #1]
   16220:	2b6c      	cmp	r3, #108	; 0x6c
   16222:	d033      	beq.n	1628c <d_unqualified_name+0x98>
   16224:	2b74      	cmp	r3, #116	; 0x74
   16226:	d12e      	bne.n	16286 <d_unqualified_name+0x92>
   16228:	1c4b      	adds	r3, r1, #1
   1622a:	60c3      	str	r3, [r0, #12]
   1622c:	784b      	ldrb	r3, [r1, #1]
   1622e:	2b74      	cmp	r3, #116	; 0x74
   16230:	d05a      	beq.n	162e8 <d_unqualified_name+0xf4>
   16232:	2b42      	cmp	r3, #66	; 0x42
   16234:	f04f 0500 	mov.w	r5, #0
   16238:	d10c      	bne.n	16254 <d_unqualified_name+0x60>
   1623a:	4629      	mov	r1, r5
   1623c:	4620      	mov	r0, r4
   1623e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16242:	f7fe bacd 	b.w	147e0 <d_abi_tags>
   16246:	f7fe fa6f 	bl	14728 <d_source_name>
   1624a:	68e3      	ldr	r3, [r4, #12]
   1624c:	781b      	ldrb	r3, [r3, #0]
   1624e:	4605      	mov	r5, r0
   16250:	2b42      	cmp	r3, #66	; 0x42
   16252:	d0f2      	beq.n	1623a <d_unqualified_name+0x46>
   16254:	4628      	mov	r0, r5
   16256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16258:	f7ff ff0c 	bl	16074 <d_operator_name>
   1625c:	4605      	mov	r5, r0
   1625e:	b118      	cbz	r0, 16268 <d_unqualified_name+0x74>
   16260:	7803      	ldrb	r3, [r0, #0]
   16262:	2b31      	cmp	r3, #49	; 0x31
   16264:	f000 80b2 	beq.w	163cc <d_unqualified_name+0x1d8>
   16268:	68e3      	ldr	r3, [r4, #12]
   1626a:	781b      	ldrb	r3, [r3, #0]
   1626c:	e7f0      	b.n	16250 <d_unqualified_name+0x5c>
   1626e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16270:	b125      	cbz	r5, 1627c <d_unqualified_name+0x88>
   16272:	782a      	ldrb	r2, [r5, #0]
   16274:	2a00      	cmp	r2, #0
   16276:	d06c      	beq.n	16352 <d_unqualified_name+0x15e>
   16278:	2a18      	cmp	r2, #24
   1627a:	d06a      	beq.n	16352 <d_unqualified_name+0x15e>
   1627c:	2b43      	cmp	r3, #67	; 0x43
   1627e:	f000 80bf 	beq.w	16400 <d_unqualified_name+0x20c>
   16282:	2b44      	cmp	r3, #68	; 0x44
   16284:	d06f      	beq.n	16366 <d_unqualified_name+0x172>
   16286:	2500      	movs	r5, #0
   16288:	4628      	mov	r0, r5
   1628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1628c:	1c4b      	adds	r3, r1, #1
   1628e:	60c3      	str	r3, [r0, #12]
   16290:	784b      	ldrb	r3, [r1, #1]
   16292:	2b6c      	cmp	r3, #108	; 0x6c
   16294:	d1cd      	bne.n	16232 <d_unqualified_name+0x3e>
   16296:	3102      	adds	r1, #2
   16298:	60c1      	str	r1, [r0, #12]
   1629a:	f7ff ff69 	bl	16170 <d_parmlist>
   1629e:	4606      	mov	r6, r0
   162a0:	b1f0      	cbz	r0, 162e0 <d_unqualified_name+0xec>
   162a2:	68e2      	ldr	r2, [r4, #12]
   162a4:	7813      	ldrb	r3, [r2, #0]
   162a6:	2b45      	cmp	r3, #69	; 0x45
   162a8:	d1c3      	bne.n	16232 <d_unqualified_name+0x3e>
   162aa:	3201      	adds	r2, #1
   162ac:	60e2      	str	r2, [r4, #12]
   162ae:	4620      	mov	r0, r4
   162b0:	f7fe f9fc 	bl	146ac <d_compact_number>
   162b4:	2800      	cmp	r0, #0
   162b6:	db13      	blt.n	162e0 <d_unqualified_name+0xec>
   162b8:	6963      	ldr	r3, [r4, #20]
   162ba:	69a2      	ldr	r2, [r4, #24]
   162bc:	4293      	cmp	r3, r2
   162be:	da0f      	bge.n	162e0 <d_unqualified_name+0xec>
   162c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   162c4:	6921      	ldr	r1, [r4, #16]
   162c6:	0092      	lsls	r2, r2, #2
   162c8:	3301      	adds	r3, #1
   162ca:	188d      	adds	r5, r1, r2
   162cc:	6163      	str	r3, [r4, #20]
   162ce:	d0cb      	beq.n	16268 <d_unqualified_name+0x74>
   162d0:	2345      	movs	r3, #69	; 0x45
   162d2:	548b      	strb	r3, [r1, r2]
   162d4:	606e      	str	r6, [r5, #4]
   162d6:	60a8      	str	r0, [r5, #8]
   162d8:	6a23      	ldr	r3, [r4, #32]
   162da:	6a62      	ldr	r2, [r4, #36]	; 0x24
   162dc:	4293      	cmp	r3, r2
   162de:	db1c      	blt.n	1631a <d_unqualified_name+0x126>
   162e0:	68e3      	ldr	r3, [r4, #12]
   162e2:	2500      	movs	r5, #0
   162e4:	781b      	ldrb	r3, [r3, #0]
   162e6:	e7b3      	b.n	16250 <d_unqualified_name+0x5c>
   162e8:	3102      	adds	r1, #2
   162ea:	60c1      	str	r1, [r0, #12]
   162ec:	f7fe f9de 	bl	146ac <d_compact_number>
   162f0:	2800      	cmp	r0, #0
   162f2:	dbf5      	blt.n	162e0 <d_unqualified_name+0xec>
   162f4:	6963      	ldr	r3, [r4, #20]
   162f6:	69a2      	ldr	r2, [r4, #24]
   162f8:	4293      	cmp	r3, r2
   162fa:	daf1      	bge.n	162e0 <d_unqualified_name+0xec>
   162fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16300:	6921      	ldr	r1, [r4, #16]
   16302:	0092      	lsls	r2, r2, #2
   16304:	3301      	adds	r3, #1
   16306:	188d      	adds	r5, r1, r2
   16308:	6163      	str	r3, [r4, #20]
   1630a:	d0ad      	beq.n	16268 <d_unqualified_name+0x74>
   1630c:	2347      	movs	r3, #71	; 0x47
   1630e:	548b      	strb	r3, [r1, r2]
   16310:	6068      	str	r0, [r5, #4]
   16312:	6a23      	ldr	r3, [r4, #32]
   16314:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16316:	4293      	cmp	r3, r2
   16318:	dae2      	bge.n	162e0 <d_unqualified_name+0xec>
   1631a:	69e1      	ldr	r1, [r4, #28]
   1631c:	68e2      	ldr	r2, [r4, #12]
   1631e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   16322:	3301      	adds	r3, #1
   16324:	6223      	str	r3, [r4, #32]
   16326:	7813      	ldrb	r3, [r2, #0]
   16328:	e792      	b.n	16250 <d_unqualified_name+0x5c>
   1632a:	3101      	adds	r1, #1
   1632c:	60c1      	str	r1, [r0, #12]
   1632e:	f7fe f9fb 	bl	14728 <d_source_name>
   16332:	4605      	mov	r5, r0
   16334:	2800      	cmp	r0, #0
   16336:	d0a6      	beq.n	16286 <d_unqualified_name+0x92>
   16338:	68e2      	ldr	r2, [r4, #12]
   1633a:	7813      	ldrb	r3, [r2, #0]
   1633c:	2b5f      	cmp	r3, #95	; 0x5f
   1633e:	d187      	bne.n	16250 <d_unqualified_name+0x5c>
   16340:	4620      	mov	r0, r4
   16342:	3201      	adds	r2, #1
   16344:	f840 2f0c 	str.w	r2, [r0, #12]!
   16348:	f7fe f96e 	bl	14628 <d_number.isra.0>
   1634c:	2800      	cmp	r0, #0
   1634e:	da8b      	bge.n	16268 <d_unqualified_name+0x74>
   16350:	e799      	b.n	16286 <d_unqualified_name+0x92>
   16352:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16354:	68aa      	ldr	r2, [r5, #8]
   16356:	4413      	add	r3, r2
   16358:	6323      	str	r3, [r4, #48]	; 0x30
   1635a:	780b      	ldrb	r3, [r1, #0]
   1635c:	2b43      	cmp	r3, #67	; 0x43
   1635e:	d04f      	beq.n	16400 <d_unqualified_name+0x20c>
   16360:	2b44      	cmp	r3, #68	; 0x44
   16362:	f47f af66 	bne.w	16232 <d_unqualified_name+0x3e>
   16366:	784b      	ldrb	r3, [r1, #1]
   16368:	3b30      	subs	r3, #48	; 0x30
   1636a:	2b05      	cmp	r3, #5
   1636c:	d88b      	bhi.n	16286 <d_unqualified_name+0x92>
   1636e:	a201      	add	r2, pc, #4	; (adr r2, 16374 <d_unqualified_name+0x180>)
   16370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16374:	000163c9 	.word	0x000163c9
   16378:	0001638d 	.word	0x0001638d
   1637c:	000163c5 	.word	0x000163c5
   16380:	00016287 	.word	0x00016287
   16384:	000163c1 	.word	0x000163c1
   16388:	000163bd 	.word	0x000163bd
   1638c:	2702      	movs	r7, #2
   1638e:	6963      	ldr	r3, [r4, #20]
   16390:	69a2      	ldr	r2, [r4, #24]
   16392:	1c88      	adds	r0, r1, #2
   16394:	4293      	cmp	r3, r2
   16396:	60e0      	str	r0, [r4, #12]
   16398:	da56      	bge.n	16448 <d_unqualified_name+0x254>
   1639a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1639e:	6920      	ldr	r0, [r4, #16]
   163a0:	0092      	lsls	r2, r2, #2
   163a2:	3301      	adds	r3, #1
   163a4:	1886      	adds	r6, r0, r2
   163a6:	6163      	str	r3, [r4, #20]
   163a8:	d005      	beq.n	163b6 <d_unqualified_name+0x1c2>
   163aa:	2d00      	cmp	r5, #0
   163ac:	d04f      	beq.n	1644e <d_unqualified_name+0x25a>
   163ae:	2308      	movs	r3, #8
   163b0:	5483      	strb	r3, [r0, r2]
   163b2:	7137      	strb	r7, [r6, #4]
   163b4:	60b5      	str	r5, [r6, #8]
   163b6:	788b      	ldrb	r3, [r1, #2]
   163b8:	4635      	mov	r5, r6
   163ba:	e749      	b.n	16250 <d_unqualified_name+0x5c>
   163bc:	2705      	movs	r7, #5
   163be:	e7e6      	b.n	1638e <d_unqualified_name+0x19a>
   163c0:	2704      	movs	r7, #4
   163c2:	e7e4      	b.n	1638e <d_unqualified_name+0x19a>
   163c4:	2703      	movs	r7, #3
   163c6:	e7e2      	b.n	1638e <d_unqualified_name+0x19a>
   163c8:	2701      	movs	r7, #1
   163ca:	e7e0      	b.n	1638e <d_unqualified_name+0x19a>
   163cc:	6842      	ldr	r2, [r0, #4]
   163ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
   163d0:	6896      	ldr	r6, [r2, #8]
   163d2:	6810      	ldr	r0, [r2, #0]
   163d4:	491f      	ldr	r1, [pc, #124]	; (16454 <d_unqualified_name+0x260>)
   163d6:	3307      	adds	r3, #7
   163d8:	4433      	add	r3, r6
   163da:	6323      	str	r3, [r4, #48]	; 0x30
   163dc:	f008 fad4 	bl	1e988 <strcmp>
   163e0:	2800      	cmp	r0, #0
   163e2:	f47f af41 	bne.w	16268 <d_unqualified_name+0x74>
   163e6:	4620      	mov	r0, r4
   163e8:	f7fe f99e 	bl	14728 <d_source_name>
   163ec:	462a      	mov	r2, r5
   163ee:	4603      	mov	r3, r0
   163f0:	2136      	movs	r1, #54	; 0x36
   163f2:	4620      	mov	r0, r4
   163f4:	f7fd ffc6 	bl	14384 <d_make_comp>
   163f8:	68e3      	ldr	r3, [r4, #12]
   163fa:	4605      	mov	r5, r0
   163fc:	781b      	ldrb	r3, [r3, #0]
   163fe:	e727      	b.n	16250 <d_unqualified_name+0x5c>
   16400:	784b      	ldrb	r3, [r1, #1]
   16402:	3b31      	subs	r3, #49	; 0x31
   16404:	2b04      	cmp	r3, #4
   16406:	f63f af3e 	bhi.w	16286 <d_unqualified_name+0x92>
   1640a:	e8df f003 	tbb	[pc, r3]
   1640e:	0315      	.short	0x0315
   16410:	191b      	.short	0x191b
   16412:	17          	.byte	0x17
   16413:	00          	.byte	0x00
   16414:	2702      	movs	r7, #2
   16416:	6963      	ldr	r3, [r4, #20]
   16418:	69a2      	ldr	r2, [r4, #24]
   1641a:	1c88      	adds	r0, r1, #2
   1641c:	4293      	cmp	r3, r2
   1641e:	60e0      	str	r0, [r4, #12]
   16420:	da12      	bge.n	16448 <d_unqualified_name+0x254>
   16422:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16426:	6920      	ldr	r0, [r4, #16]
   16428:	0092      	lsls	r2, r2, #2
   1642a:	3301      	adds	r3, #1
   1642c:	1886      	adds	r6, r0, r2
   1642e:	6163      	str	r3, [r4, #20]
   16430:	d0c1      	beq.n	163b6 <d_unqualified_name+0x1c2>
   16432:	b165      	cbz	r5, 1644e <d_unqualified_name+0x25a>
   16434:	2307      	movs	r3, #7
   16436:	e7bb      	b.n	163b0 <d_unqualified_name+0x1bc>
   16438:	2701      	movs	r7, #1
   1643a:	e7ec      	b.n	16416 <d_unqualified_name+0x222>
   1643c:	2705      	movs	r7, #5
   1643e:	e7ea      	b.n	16416 <d_unqualified_name+0x222>
   16440:	2704      	movs	r7, #4
   16442:	e7e8      	b.n	16416 <d_unqualified_name+0x222>
   16444:	2703      	movs	r7, #3
   16446:	e7e6      	b.n	16416 <d_unqualified_name+0x222>
   16448:	788b      	ldrb	r3, [r1, #2]
   1644a:	2500      	movs	r5, #0
   1644c:	e700      	b.n	16250 <d_unqualified_name+0x5c>
   1644e:	788b      	ldrb	r3, [r1, #2]
   16450:	e6fe      	b.n	16250 <d_unqualified_name+0x5c>
   16452:	bf00      	nop
   16454:	00024340 	.word	0x00024340

00016458 <d_bare_function_type>:
   16458:	b570      	push	{r4, r5, r6, lr}
   1645a:	68c3      	ldr	r3, [r0, #12]
   1645c:	781a      	ldrb	r2, [r3, #0]
   1645e:	2a4a      	cmp	r2, #74	; 0x4a
   16460:	4604      	mov	r4, r0
   16462:	d00d      	beq.n	16480 <d_bare_function_type+0x28>
   16464:	b971      	cbnz	r1, 16484 <d_bare_function_type+0x2c>
   16466:	460d      	mov	r5, r1
   16468:	4620      	mov	r0, r4
   1646a:	f7ff fe81 	bl	16170 <d_parmlist>
   1646e:	b178      	cbz	r0, 16490 <d_bare_function_type+0x38>
   16470:	4603      	mov	r3, r0
   16472:	462a      	mov	r2, r5
   16474:	4620      	mov	r0, r4
   16476:	2129      	movs	r1, #41	; 0x29
   16478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1647c:	f7fd bf82 	b.w	14384 <d_make_comp>
   16480:	3301      	adds	r3, #1
   16482:	60c3      	str	r3, [r0, #12]
   16484:	4620      	mov	r0, r4
   16486:	f7ff fa0d 	bl	158a4 <d_type>
   1648a:	4605      	mov	r5, r0
   1648c:	2800      	cmp	r0, #0
   1648e:	d1eb      	bne.n	16468 <d_bare_function_type+0x10>
   16490:	2000      	movs	r0, #0
   16492:	bd70      	pop	{r4, r5, r6, pc}

00016494 <d_function_type>:
   16494:	68c3      	ldr	r3, [r0, #12]
   16496:	781a      	ldrb	r2, [r3, #0]
   16498:	2a46      	cmp	r2, #70	; 0x46
   1649a:	d001      	beq.n	164a0 <d_function_type+0xc>
   1649c:	2000      	movs	r0, #0
   1649e:	4770      	bx	lr
   164a0:	b510      	push	{r4, lr}
   164a2:	1c5a      	adds	r2, r3, #1
   164a4:	60c2      	str	r2, [r0, #12]
   164a6:	785a      	ldrb	r2, [r3, #1]
   164a8:	2a59      	cmp	r2, #89	; 0x59
   164aa:	bf04      	itt	eq
   164ac:	3302      	addeq	r3, #2
   164ae:	60c3      	streq	r3, [r0, #12]
   164b0:	2101      	movs	r1, #1
   164b2:	4604      	mov	r4, r0
   164b4:	f7ff ffd0 	bl	16458 <d_bare_function_type>
   164b8:	4601      	mov	r1, r0
   164ba:	4620      	mov	r0, r4
   164bc:	f7fe f814 	bl	144e8 <d_ref_qualifier>
   164c0:	68e3      	ldr	r3, [r4, #12]
   164c2:	781a      	ldrb	r2, [r3, #0]
   164c4:	2a45      	cmp	r2, #69	; 0x45
   164c6:	d001      	beq.n	164cc <d_function_type+0x38>
   164c8:	2000      	movs	r0, #0
   164ca:	bd10      	pop	{r4, pc}
   164cc:	3301      	adds	r3, #1
   164ce:	60e3      	str	r3, [r4, #12]
   164d0:	bd10      	pop	{r4, pc}
   164d2:	bf00      	nop

000164d4 <d_encoding>:
   164d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   164d8:	68c3      	ldr	r3, [r0, #12]
   164da:	781a      	ldrb	r2, [r3, #0]
   164dc:	2a47      	cmp	r2, #71	; 0x47
   164de:	4605      	mov	r5, r0
   164e0:	d01f      	beq.n	16522 <d_encoding+0x4e>
   164e2:	2a54      	cmp	r2, #84	; 0x54
   164e4:	d01d      	beq.n	16522 <d_encoding+0x4e>
   164e6:	460e      	mov	r6, r1
   164e8:	f7ff f820 	bl	1552c <d_name>
   164ec:	4604      	mov	r4, r0
   164ee:	b310      	cbz	r0, 16536 <d_encoding+0x62>
   164f0:	b32e      	cbz	r6, 1653e <d_encoding+0x6a>
   164f2:	68ab      	ldr	r3, [r5, #8]
   164f4:	07db      	lsls	r3, r3, #31
   164f6:	d422      	bmi.n	1653e <d_encoding+0x6a>
   164f8:	7823      	ldrb	r3, [r4, #0]
   164fa:	f1a3 021c 	sub.w	r2, r3, #28
   164fe:	2a04      	cmp	r2, #4
   16500:	d940      	bls.n	16584 <d_encoding+0xb0>
   16502:	2b4c      	cmp	r3, #76	; 0x4c
   16504:	d03e      	beq.n	16584 <d_encoding+0xb0>
   16506:	2b02      	cmp	r3, #2
   16508:	d116      	bne.n	16538 <d_encoding+0x64>
   1650a:	68a3      	ldr	r3, [r4, #8]
   1650c:	781a      	ldrb	r2, [r3, #0]
   1650e:	f1a2 011c 	sub.w	r1, r2, #28
   16512:	2904      	cmp	r1, #4
   16514:	f240 8283 	bls.w	16a1e <d_encoding+0x54a>
   16518:	2a4c      	cmp	r2, #76	; 0x4c
   1651a:	f000 8280 	beq.w	16a1e <d_encoding+0x54a>
   1651e:	60a3      	str	r3, [r4, #8]
   16520:	e00a      	b.n	16538 <d_encoding+0x64>
   16522:	6b29      	ldr	r1, [r5, #48]	; 0x30
   16524:	f101 0214 	add.w	r2, r1, #20
   16528:	632a      	str	r2, [r5, #48]	; 0x30
   1652a:	781a      	ldrb	r2, [r3, #0]
   1652c:	2a54      	cmp	r2, #84	; 0x54
   1652e:	d02b      	beq.n	16588 <d_encoding+0xb4>
   16530:	2a47      	cmp	r2, #71	; 0x47
   16532:	f000 809f 	beq.w	16674 <d_encoding+0x1a0>
   16536:	2400      	movs	r4, #0
   16538:	4620      	mov	r0, r4
   1653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1653e:	68eb      	ldr	r3, [r5, #12]
   16540:	781b      	ldrb	r3, [r3, #0]
   16542:	2b00      	cmp	r3, #0
   16544:	d0f8      	beq.n	16538 <d_encoding+0x64>
   16546:	2b45      	cmp	r3, #69	; 0x45
   16548:	d0f6      	beq.n	16538 <d_encoding+0x64>
   1654a:	4621      	mov	r1, r4
   1654c:	780a      	ldrb	r2, [r1, #0]
   1654e:	2a20      	cmp	r2, #32
   16550:	f200 8113 	bhi.w	1677a <d_encoding+0x2a6>
   16554:	2a1c      	cmp	r2, #28
   16556:	f080 8112 	bcs.w	1677e <d_encoding+0x2aa>
   1655a:	2a04      	cmp	r2, #4
   1655c:	f040 8101 	bne.w	16762 <d_encoding+0x28e>
   16560:	684a      	ldr	r2, [r1, #4]
   16562:	b16a      	cbz	r2, 16580 <d_encoding+0xac>
   16564:	7813      	ldrb	r3, [r2, #0]
   16566:	2b08      	cmp	r3, #8
   16568:	f103 31ff 	add.w	r1, r3, #4294967295
   1656c:	f200 80f6 	bhi.w	1675c <d_encoding+0x288>
   16570:	2b07      	cmp	r3, #7
   16572:	f080 80f6 	bcs.w	16762 <d_encoding+0x28e>
   16576:	2901      	cmp	r1, #1
   16578:	d802      	bhi.n	16580 <d_encoding+0xac>
   1657a:	6892      	ldr	r2, [r2, #8]
   1657c:	2a00      	cmp	r2, #0
   1657e:	d1f1      	bne.n	16564 <d_encoding+0x90>
   16580:	2101      	movs	r1, #1
   16582:	e0ef      	b.n	16764 <d_encoding+0x290>
   16584:	6864      	ldr	r4, [r4, #4]
   16586:	e7b7      	b.n	164f8 <d_encoding+0x24>
   16588:	1c5a      	adds	r2, r3, #1
   1658a:	60ea      	str	r2, [r5, #12]
   1658c:	785a      	ldrb	r2, [r3, #1]
   1658e:	2a00      	cmp	r2, #0
   16590:	d0d1      	beq.n	16536 <d_encoding+0x62>
   16592:	1c9a      	adds	r2, r3, #2
   16594:	60ea      	str	r2, [r5, #12]
   16596:	785b      	ldrb	r3, [r3, #1]
   16598:	3b43      	subs	r3, #67	; 0x43
   1659a:	2b33      	cmp	r3, #51	; 0x33
   1659c:	d8cb      	bhi.n	16536 <d_encoding+0x62>
   1659e:	a201      	add	r2, pc, #4	; (adr r2, 165a4 <d_encoding+0xd0>)
   165a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   165a4:	000169df 	.word	0x000169df
   165a8:	00016537 	.word	0x00016537
   165ac:	00016537 	.word	0x00016537
   165b0:	000169c9 	.word	0x000169c9
   165b4:	00016537 	.word	0x00016537
   165b8:	000169b3 	.word	0x000169b3
   165bc:	0001699d 	.word	0x0001699d
   165c0:	00016987 	.word	0x00016987
   165c4:	00016537 	.word	0x00016537
   165c8:	00016537 	.word	0x00016537
   165cc:	00016537 	.word	0x00016537
   165d0:	00016537 	.word	0x00016537
   165d4:	00016537 	.word	0x00016537
   165d8:	00016537 	.word	0x00016537
   165dc:	00016537 	.word	0x00016537
   165e0:	00016537 	.word	0x00016537
   165e4:	00016971 	.word	0x00016971
   165e8:	00016957 	.word	0x00016957
   165ec:	00016537 	.word	0x00016537
   165f0:	0001693d 	.word	0x0001693d
   165f4:	00016927 	.word	0x00016927
   165f8:	00016537 	.word	0x00016537
   165fc:	00016537 	.word	0x00016537
   16600:	00016537 	.word	0x00016537
   16604:	00016537 	.word	0x00016537
   16608:	00016537 	.word	0x00016537
   1660c:	00016537 	.word	0x00016537
   16610:	00016537 	.word	0x00016537
   16614:	00016537 	.word	0x00016537
   16618:	00016537 	.word	0x00016537
   1661c:	00016537 	.word	0x00016537
   16620:	00016537 	.word	0x00016537
   16624:	000168f3 	.word	0x000168f3
   16628:	00016537 	.word	0x00016537
   1662c:	00016537 	.word	0x00016537
   16630:	00016537 	.word	0x00016537
   16634:	00016537 	.word	0x00016537
   16638:	000168cd 	.word	0x000168cd
   1663c:	00016537 	.word	0x00016537
   16640:	00016537 	.word	0x00016537
   16644:	00016537 	.word	0x00016537
   16648:	00016537 	.word	0x00016537
   1664c:	00016537 	.word	0x00016537
   16650:	00016537 	.word	0x00016537
   16654:	00016537 	.word	0x00016537
   16658:	00016537 	.word	0x00016537
   1665c:	00016537 	.word	0x00016537
   16660:	00016537 	.word	0x00016537
   16664:	00016537 	.word	0x00016537
   16668:	00016537 	.word	0x00016537
   1666c:	00016537 	.word	0x00016537
   16670:	000168a7 	.word	0x000168a7
   16674:	1c5a      	adds	r2, r3, #1
   16676:	60ea      	str	r2, [r5, #12]
   16678:	785a      	ldrb	r2, [r3, #1]
   1667a:	2a00      	cmp	r2, #0
   1667c:	f43f af5b 	beq.w	16536 <d_encoding+0x62>
   16680:	1c9a      	adds	r2, r3, #2
   16682:	60ea      	str	r2, [r5, #12]
   16684:	785a      	ldrb	r2, [r3, #1]
   16686:	3a41      	subs	r2, #65	; 0x41
   16688:	2a31      	cmp	r2, #49	; 0x31
   1668a:	f63f af54 	bhi.w	16536 <d_encoding+0x62>
   1668e:	a101      	add	r1, pc, #4	; (adr r1, 16694 <d_encoding+0x1c0>)
   16690:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   16694:	00016789 	.word	0x00016789
   16698:	00016537 	.word	0x00016537
   1669c:	00016537 	.word	0x00016537
   166a0:	00016537 	.word	0x00016537
   166a4:	00016537 	.word	0x00016537
   166a8:	00016537 	.word	0x00016537
   166ac:	00016537 	.word	0x00016537
   166b0:	00016537 	.word	0x00016537
   166b4:	00016537 	.word	0x00016537
   166b8:	00016537 	.word	0x00016537
   166bc:	00016537 	.word	0x00016537
   166c0:	00016537 	.word	0x00016537
   166c4:	00016537 	.word	0x00016537
   166c8:	00016537 	.word	0x00016537
   166cc:	00016537 	.word	0x00016537
   166d0:	00016537 	.word	0x00016537
   166d4:	00016537 	.word	0x00016537
   166d8:	00016889 	.word	0x00016889
   166dc:	00016537 	.word	0x00016537
   166e0:	0001685d 	.word	0x0001685d
   166e4:	00016537 	.word	0x00016537
   166e8:	00016847 	.word	0x00016847
   166ec:	00016537 	.word	0x00016537
   166f0:	00016537 	.word	0x00016537
   166f4:	00016537 	.word	0x00016537
   166f8:	00016537 	.word	0x00016537
   166fc:	00016537 	.word	0x00016537
   16700:	00016537 	.word	0x00016537
   16704:	00016537 	.word	0x00016537
   16708:	00016537 	.word	0x00016537
   1670c:	00016537 	.word	0x00016537
   16710:	00016537 	.word	0x00016537
   16714:	00016537 	.word	0x00016537
   16718:	00016537 	.word	0x00016537
   1671c:	00016537 	.word	0x00016537
   16720:	00016537 	.word	0x00016537
   16724:	00016537 	.word	0x00016537
   16728:	00016537 	.word	0x00016537
   1672c:	00016537 	.word	0x00016537
   16730:	00016537 	.word	0x00016537
   16734:	00016537 	.word	0x00016537
   16738:	00016537 	.word	0x00016537
   1673c:	00016537 	.word	0x00016537
   16740:	00016537 	.word	0x00016537
   16744:	00016537 	.word	0x00016537
   16748:	00016537 	.word	0x00016537
   1674c:	00016537 	.word	0x00016537
   16750:	00016537 	.word	0x00016537
   16754:	00016537 	.word	0x00016537
   16758:	000167a1 	.word	0x000167a1
   1675c:	2b34      	cmp	r3, #52	; 0x34
   1675e:	f47f af0f 	bne.w	16580 <d_encoding+0xac>
   16762:	2100      	movs	r1, #0
   16764:	4628      	mov	r0, r5
   16766:	f7ff fe77 	bl	16458 <d_bare_function_type>
   1676a:	4622      	mov	r2, r4
   1676c:	4603      	mov	r3, r0
   1676e:	2103      	movs	r1, #3
   16770:	4628      	mov	r0, r5
   16772:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16776:	f7fd be05 	b.w	14384 <d_make_comp>
   1677a:	2a4c      	cmp	r2, #76	; 0x4c
   1677c:	d1f1      	bne.n	16762 <d_encoding+0x28e>
   1677e:	6849      	ldr	r1, [r1, #4]
   16780:	2900      	cmp	r1, #0
   16782:	f47f aee3 	bne.w	1654c <d_encoding+0x78>
   16786:	e7ed      	b.n	16764 <d_encoding+0x290>
   16788:	2100      	movs	r1, #0
   1678a:	4628      	mov	r0, r5
   1678c:	f7ff fea2 	bl	164d4 <d_encoding>
   16790:	2300      	movs	r3, #0
   16792:	4602      	mov	r2, r0
   16794:	2117      	movs	r1, #23
   16796:	4628      	mov	r0, r5
   16798:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1679c:	f7fd bdf2 	b.w	14384 <d_make_comp>
   167a0:	f105 000c 	add.w	r0, r5, #12
   167a4:	f7fd ff40 	bl	14628 <d_number.isra.0>
   167a8:	2801      	cmp	r0, #1
   167aa:	f77f aec4 	ble.w	16536 <d_encoding+0x62>
   167ae:	68eb      	ldr	r3, [r5, #12]
   167b0:	781a      	ldrb	r2, [r3, #0]
   167b2:	2a00      	cmp	r2, #0
   167b4:	f43f aebf 	beq.w	16536 <d_encoding+0x62>
   167b8:	1c5f      	adds	r7, r3, #1
   167ba:	60ef      	str	r7, [r5, #12]
   167bc:	781b      	ldrb	r3, [r3, #0]
   167be:	2b5f      	cmp	r3, #95	; 0x5f
   167c0:	f47f aeb9 	bne.w	16536 <d_encoding+0x62>
   167c4:	2200      	movs	r2, #0
   167c6:	1e46      	subs	r6, r0, #1
   167c8:	4690      	mov	r8, r2
   167ca:	f04f 0940 	mov.w	r9, #64	; 0x40
   167ce:	783b      	ldrb	r3, [r7, #0]
   167d0:	2b00      	cmp	r3, #0
   167d2:	f43f aeb0 	beq.w	16536 <d_encoding+0x62>
   167d6:	2b24      	cmp	r3, #36	; 0x24
   167d8:	f000 8128 	beq.w	16a2c <d_encoding+0x558>
   167dc:	463c      	mov	r4, r7
   167de:	2100      	movs	r1, #0
   167e0:	e004      	b.n	167ec <d_encoding+0x318>
   167e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   167e6:	b123      	cbz	r3, 167f2 <d_encoding+0x31e>
   167e8:	2b24      	cmp	r3, #36	; 0x24
   167ea:	d002      	beq.n	167f2 <d_encoding+0x31e>
   167ec:	3101      	adds	r1, #1
   167ee:	42b1      	cmp	r1, r6
   167f0:	dbf7      	blt.n	167e2 <d_encoding+0x30e>
   167f2:	696c      	ldr	r4, [r5, #20]
   167f4:	69a8      	ldr	r0, [r5, #24]
   167f6:	4284      	cmp	r4, r0
   167f8:	f280 8113 	bge.w	16a22 <d_encoding+0x54e>
   167fc:	6928      	ldr	r0, [r5, #16]
   167fe:	1c63      	adds	r3, r4, #1
   16800:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16804:	616b      	str	r3, [r5, #20]
   16806:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   1680a:	f000 810a 	beq.w	16a22 <d_encoding+0x54e>
   1680e:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   16812:	605f      	str	r7, [r3, #4]
   16814:	6099      	str	r1, [r3, #8]
   16816:	68ef      	ldr	r7, [r5, #12]
   16818:	440f      	add	r7, r1
   1681a:	1a76      	subs	r6, r6, r1
   1681c:	60ef      	str	r7, [r5, #12]
   1681e:	2a00      	cmp	r2, #0
   16820:	f000 8121 	beq.w	16a66 <d_encoding+0x592>
   16824:	213f      	movs	r1, #63	; 0x3f
   16826:	4628      	mov	r0, r5
   16828:	f7fd fdac 	bl	14384 <d_make_comp>
   1682c:	4602      	mov	r2, r0
   1682e:	2800      	cmp	r0, #0
   16830:	f43f ae81 	beq.w	16536 <d_encoding+0x62>
   16834:	2e00      	cmp	r6, #0
   16836:	dcca      	bgt.n	167ce <d_encoding+0x2fa>
   16838:	4628      	mov	r0, r5
   1683a:	2300      	movs	r3, #0
   1683c:	213e      	movs	r1, #62	; 0x3e
   1683e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16842:	f7fd bd9f 	b.w	14384 <d_make_comp>
   16846:	4628      	mov	r0, r5
   16848:	f7fe fe70 	bl	1552c <d_name>
   1684c:	2300      	movs	r3, #0
   1684e:	4602      	mov	r2, r0
   16850:	2113      	movs	r1, #19
   16852:	4628      	mov	r0, r5
   16854:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16858:	f7fd bd94 	b.w	14384 <d_make_comp>
   1685c:	789a      	ldrb	r2, [r3, #2]
   1685e:	2100      	movs	r1, #0
   16860:	4628      	mov	r0, r5
   16862:	2a00      	cmp	r2, #0
   16864:	f000 8101 	beq.w	16a6a <d_encoding+0x596>
   16868:	1cda      	adds	r2, r3, #3
   1686a:	60ea      	str	r2, [r5, #12]
   1686c:	789b      	ldrb	r3, [r3, #2]
   1686e:	2b6e      	cmp	r3, #110	; 0x6e
   16870:	f040 80fb 	bne.w	16a6a <d_encoding+0x596>
   16874:	f7ff fe2e 	bl	164d4 <d_encoding>
   16878:	2300      	movs	r3, #0
   1687a:	4602      	mov	r2, r0
   1687c:	2149      	movs	r1, #73	; 0x49
   1687e:	4628      	mov	r0, r5
   16880:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16884:	f7fd bd7e 	b.w	14384 <d_make_comp>
   16888:	4628      	mov	r0, r5
   1688a:	f7fe fe4f 	bl	1552c <d_name>
   1688e:	4604      	mov	r4, r0
   16890:	4628      	mov	r0, r5
   16892:	f7fd fef3 	bl	1467c <d_number_component>
   16896:	4622      	mov	r2, r4
   16898:	4603      	mov	r3, r0
   1689a:	2116      	movs	r1, #22
   1689c:	4628      	mov	r0, r5
   1689e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168a2:	f7fd bd6f 	b.w	14384 <d_make_comp>
   168a6:	2176      	movs	r1, #118	; 0x76
   168a8:	4628      	mov	r0, r5
   168aa:	f7fe f871 	bl	14990 <d_call_offset>
   168ae:	2800      	cmp	r0, #0
   168b0:	f43f ae41 	beq.w	16536 <d_encoding+0x62>
   168b4:	2100      	movs	r1, #0
   168b6:	4628      	mov	r0, r5
   168b8:	f7ff fe0c 	bl	164d4 <d_encoding>
   168bc:	2300      	movs	r3, #0
   168be:	4602      	mov	r2, r0
   168c0:	2110      	movs	r1, #16
   168c2:	4628      	mov	r0, r5
   168c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168c8:	f7fd bd5c 	b.w	14384 <d_make_comp>
   168cc:	2168      	movs	r1, #104	; 0x68
   168ce:	4628      	mov	r0, r5
   168d0:	f7fe f85e 	bl	14990 <d_call_offset>
   168d4:	2800      	cmp	r0, #0
   168d6:	f43f ae2e 	beq.w	16536 <d_encoding+0x62>
   168da:	2100      	movs	r1, #0
   168dc:	4628      	mov	r0, r5
   168de:	f7ff fdf9 	bl	164d4 <d_encoding>
   168e2:	2300      	movs	r3, #0
   168e4:	4602      	mov	r2, r0
   168e6:	210f      	movs	r1, #15
   168e8:	4628      	mov	r0, r5
   168ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168ee:	f7fd bd49 	b.w	14384 <d_make_comp>
   168f2:	2100      	movs	r1, #0
   168f4:	4628      	mov	r0, r5
   168f6:	f7fe f84b 	bl	14990 <d_call_offset>
   168fa:	2800      	cmp	r0, #0
   168fc:	f43f ae1b 	beq.w	16536 <d_encoding+0x62>
   16900:	2100      	movs	r1, #0
   16902:	4628      	mov	r0, r5
   16904:	f7fe f844 	bl	14990 <d_call_offset>
   16908:	2800      	cmp	r0, #0
   1690a:	f43f ae14 	beq.w	16536 <d_encoding+0x62>
   1690e:	2100      	movs	r1, #0
   16910:	4628      	mov	r0, r5
   16912:	f7ff fddf 	bl	164d4 <d_encoding>
   16916:	2300      	movs	r3, #0
   16918:	4602      	mov	r2, r0
   1691a:	2111      	movs	r1, #17
   1691c:	4628      	mov	r0, r5
   1691e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16922:	f7fd bd2f 	b.w	14384 <d_make_comp>
   16926:	4628      	mov	r0, r5
   16928:	f7fe fe00 	bl	1552c <d_name>
   1692c:	2300      	movs	r3, #0
   1692e:	4602      	mov	r2, r0
   16930:	2115      	movs	r1, #21
   16932:	4628      	mov	r0, r5
   16934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16938:	f7fd bd24 	b.w	14384 <d_make_comp>
   1693c:	310f      	adds	r1, #15
   1693e:	6329      	str	r1, [r5, #48]	; 0x30
   16940:	4628      	mov	r0, r5
   16942:	f7fe ffaf 	bl	158a4 <d_type>
   16946:	2300      	movs	r3, #0
   16948:	4602      	mov	r2, r0
   1694a:	2109      	movs	r1, #9
   1694c:	4628      	mov	r0, r5
   1694e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16952:	f7fd bd17 	b.w	14384 <d_make_comp>
   16956:	310a      	adds	r1, #10
   16958:	6329      	str	r1, [r5, #48]	; 0x30
   1695a:	4628      	mov	r0, r5
   1695c:	f7fe ffa2 	bl	158a4 <d_type>
   16960:	2300      	movs	r3, #0
   16962:	4602      	mov	r2, r0
   16964:	210a      	movs	r1, #10
   16966:	4628      	mov	r0, r5
   16968:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1696c:	f7fd bd0a 	b.w	14384 <d_make_comp>
   16970:	4628      	mov	r0, r5
   16972:	f7fe ff97 	bl	158a4 <d_type>
   16976:	2300      	movs	r3, #0
   16978:	4602      	mov	r2, r0
   1697a:	210d      	movs	r1, #13
   1697c:	4628      	mov	r0, r5
   1697e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16982:	f7fd bcff 	b.w	14384 <d_make_comp>
   16986:	4628      	mov	r0, r5
   16988:	f7fe ff8c 	bl	158a4 <d_type>
   1698c:	2300      	movs	r3, #0
   1698e:	4602      	mov	r2, r0
   16990:	2112      	movs	r1, #18
   16992:	4628      	mov	r0, r5
   16994:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16998:	f7fd bcf4 	b.w	14384 <d_make_comp>
   1699c:	4628      	mov	r0, r5
   1699e:	f7fe ff81 	bl	158a4 <d_type>
   169a2:	2300      	movs	r3, #0
   169a4:	4602      	mov	r2, r0
   169a6:	210c      	movs	r1, #12
   169a8:	4628      	mov	r0, r5
   169aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169ae:	f7fd bce9 	b.w	14384 <d_make_comp>
   169b2:	4628      	mov	r0, r5
   169b4:	f7fe fdba 	bl	1552c <d_name>
   169b8:	2300      	movs	r3, #0
   169ba:	4602      	mov	r2, r0
   169bc:	2114      	movs	r1, #20
   169be:	4628      	mov	r0, r5
   169c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169c4:	f7fd bcde 	b.w	14384 <d_make_comp>
   169c8:	4628      	mov	r0, r5
   169ca:	f7fe ff6b 	bl	158a4 <d_type>
   169ce:	2300      	movs	r3, #0
   169d0:	4602      	mov	r2, r0
   169d2:	210e      	movs	r1, #14
   169d4:	4628      	mov	r0, r5
   169d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169da:	f7fd bcd3 	b.w	14384 <d_make_comp>
   169de:	4628      	mov	r0, r5
   169e0:	f7fe ff60 	bl	158a4 <d_type>
   169e4:	4604      	mov	r4, r0
   169e6:	f105 000c 	add.w	r0, r5, #12
   169ea:	f7fd fe1d 	bl	14628 <d_number.isra.0>
   169ee:	2800      	cmp	r0, #0
   169f0:	f6ff ada1 	blt.w	16536 <d_encoding+0x62>
   169f4:	68eb      	ldr	r3, [r5, #12]
   169f6:	781a      	ldrb	r2, [r3, #0]
   169f8:	2a5f      	cmp	r2, #95	; 0x5f
   169fa:	f47f ad9c 	bne.w	16536 <d_encoding+0x62>
   169fe:	3301      	adds	r3, #1
   16a00:	60eb      	str	r3, [r5, #12]
   16a02:	4628      	mov	r0, r5
   16a04:	f7fe ff4e 	bl	158a4 <d_type>
   16a08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16a0a:	1d59      	adds	r1, r3, #5
   16a0c:	6329      	str	r1, [r5, #48]	; 0x30
   16a0e:	4602      	mov	r2, r0
   16a10:	4623      	mov	r3, r4
   16a12:	4628      	mov	r0, r5
   16a14:	210b      	movs	r1, #11
   16a16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a1a:	f7fd bcb3 	b.w	14384 <d_make_comp>
   16a1e:	685b      	ldr	r3, [r3, #4]
   16a20:	e574      	b.n	1650c <d_encoding+0x38>
   16a22:	68eb      	ldr	r3, [r5, #12]
   16a24:	440b      	add	r3, r1
   16a26:	60eb      	str	r3, [r5, #12]
   16a28:	2400      	movs	r4, #0
   16a2a:	e585      	b.n	16538 <d_encoding+0x64>
   16a2c:	787b      	ldrb	r3, [r7, #1]
   16a2e:	2b53      	cmp	r3, #83	; 0x53
   16a30:	d027      	beq.n	16a82 <d_encoding+0x5ae>
   16a32:	2b5f      	cmp	r3, #95	; 0x5f
   16a34:	d023      	beq.n	16a7e <d_encoding+0x5aa>
   16a36:	2b24      	cmp	r3, #36	; 0x24
   16a38:	f47f ad7d 	bne.w	16536 <d_encoding+0x62>
   16a3c:	4618      	mov	r0, r3
   16a3e:	6969      	ldr	r1, [r5, #20]
   16a40:	69ab      	ldr	r3, [r5, #24]
   16a42:	4299      	cmp	r1, r3
   16a44:	da1f      	bge.n	16a86 <d_encoding+0x5b2>
   16a46:	692c      	ldr	r4, [r5, #16]
   16a48:	1c4f      	adds	r7, r1, #1
   16a4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16a4e:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16a52:	616f      	str	r7, [r5, #20]
   16a54:	d017      	beq.n	16a86 <d_encoding+0x5b2>
   16a56:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16a5a:	6058      	str	r0, [r3, #4]
   16a5c:	68ef      	ldr	r7, [r5, #12]
   16a5e:	3702      	adds	r7, #2
   16a60:	3e02      	subs	r6, #2
   16a62:	60ef      	str	r7, [r5, #12]
   16a64:	e6db      	b.n	1681e <d_encoding+0x34a>
   16a66:	461a      	mov	r2, r3
   16a68:	e6e4      	b.n	16834 <d_encoding+0x360>
   16a6a:	f7ff fd33 	bl	164d4 <d_encoding>
   16a6e:	2300      	movs	r3, #0
   16a70:	4602      	mov	r2, r0
   16a72:	2148      	movs	r1, #72	; 0x48
   16a74:	4628      	mov	r0, r5
   16a76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a7a:	f7fd bc83 	b.w	14384 <d_make_comp>
   16a7e:	202e      	movs	r0, #46	; 0x2e
   16a80:	e7dd      	b.n	16a3e <d_encoding+0x56a>
   16a82:	202f      	movs	r0, #47	; 0x2f
   16a84:	e7db      	b.n	16a3e <d_encoding+0x56a>
   16a86:	68eb      	ldr	r3, [r5, #12]
   16a88:	3302      	adds	r3, #2
   16a8a:	60eb      	str	r3, [r5, #12]
   16a8c:	2400      	movs	r4, #0
   16a8e:	e553      	b.n	16538 <d_encoding+0x64>

00016a90 <d_expr_primary>:
   16a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a92:	68c2      	ldr	r2, [r0, #12]
   16a94:	7813      	ldrb	r3, [r2, #0]
   16a96:	2b4c      	cmp	r3, #76	; 0x4c
   16a98:	d001      	beq.n	16a9e <d_expr_primary+0xe>
   16a9a:	2000      	movs	r0, #0
   16a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a9e:	1c53      	adds	r3, r2, #1
   16aa0:	60c3      	str	r3, [r0, #12]
   16aa2:	7851      	ldrb	r1, [r2, #1]
   16aa4:	295f      	cmp	r1, #95	; 0x5f
   16aa6:	4605      	mov	r5, r0
   16aa8:	d03a      	beq.n	16b20 <d_expr_primary+0x90>
   16aaa:	295a      	cmp	r1, #90	; 0x5a
   16aac:	d03f      	beq.n	16b2e <d_expr_primary+0x9e>
   16aae:	f7fe fef9 	bl	158a4 <d_type>
   16ab2:	2800      	cmp	r0, #0
   16ab4:	d0f1      	beq.n	16a9a <d_expr_primary+0xa>
   16ab6:	7803      	ldrb	r3, [r0, #0]
   16ab8:	2b27      	cmp	r3, #39	; 0x27
   16aba:	d046      	beq.n	16b4a <d_expr_primary+0xba>
   16abc:	68ee      	ldr	r6, [r5, #12]
   16abe:	7833      	ldrb	r3, [r6, #0]
   16ac0:	2b6e      	cmp	r3, #110	; 0x6e
   16ac2:	d04b      	beq.n	16b5c <d_expr_primary+0xcc>
   16ac4:	213c      	movs	r1, #60	; 0x3c
   16ac6:	2b45      	cmp	r3, #69	; 0x45
   16ac8:	d04e      	beq.n	16b68 <d_expr_primary+0xd8>
   16aca:	2b00      	cmp	r3, #0
   16acc:	d0e5      	beq.n	16a9a <d_expr_primary+0xa>
   16ace:	4633      	mov	r3, r6
   16ad0:	e001      	b.n	16ad6 <d_expr_primary+0x46>
   16ad2:	2c00      	cmp	r4, #0
   16ad4:	d0e1      	beq.n	16a9a <d_expr_primary+0xa>
   16ad6:	3301      	adds	r3, #1
   16ad8:	60eb      	str	r3, [r5, #12]
   16ada:	781c      	ldrb	r4, [r3, #0]
   16adc:	2c45      	cmp	r4, #69	; 0x45
   16ade:	d1f8      	bne.n	16ad2 <d_expr_primary+0x42>
   16ae0:	1b9c      	subs	r4, r3, r6
   16ae2:	696b      	ldr	r3, [r5, #20]
   16ae4:	69aa      	ldr	r2, [r5, #24]
   16ae6:	4293      	cmp	r3, r2
   16ae8:	da2d      	bge.n	16b46 <d_expr_primary+0xb6>
   16aea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16aee:	692f      	ldr	r7, [r5, #16]
   16af0:	3301      	adds	r3, #1
   16af2:	0092      	lsls	r2, r2, #2
   16af4:	616b      	str	r3, [r5, #20]
   16af6:	18bb      	adds	r3, r7, r2
   16af8:	d025      	beq.n	16b46 <d_expr_primary+0xb6>
   16afa:	b326      	cbz	r6, 16b46 <d_expr_primary+0xb6>
   16afc:	b31c      	cbz	r4, 16b46 <d_expr_primary+0xb6>
   16afe:	f04f 0e00 	mov.w	lr, #0
   16b02:	f807 e002 	strb.w	lr, [r7, r2]
   16b06:	605e      	str	r6, [r3, #4]
   16b08:	609c      	str	r4, [r3, #8]
   16b0a:	4602      	mov	r2, r0
   16b0c:	4628      	mov	r0, r5
   16b0e:	f7fd fc39 	bl	14384 <d_make_comp>
   16b12:	68eb      	ldr	r3, [r5, #12]
   16b14:	781a      	ldrb	r2, [r3, #0]
   16b16:	2a45      	cmp	r2, #69	; 0x45
   16b18:	d1bf      	bne.n	16a9a <d_expr_primary+0xa>
   16b1a:	3301      	adds	r3, #1
   16b1c:	60eb      	str	r3, [r5, #12]
   16b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b20:	1c93      	adds	r3, r2, #2
   16b22:	60c3      	str	r3, [r0, #12]
   16b24:	7892      	ldrb	r2, [r2, #2]
   16b26:	2a5a      	cmp	r2, #90	; 0x5a
   16b28:	bf18      	it	ne
   16b2a:	2000      	movne	r0, #0
   16b2c:	d107      	bne.n	16b3e <d_expr_primary+0xae>
   16b2e:	3301      	adds	r3, #1
   16b30:	60eb      	str	r3, [r5, #12]
   16b32:	2100      	movs	r1, #0
   16b34:	4628      	mov	r0, r5
   16b36:	f7ff fccd 	bl	164d4 <d_encoding>
   16b3a:	68eb      	ldr	r3, [r5, #12]
   16b3c:	781a      	ldrb	r2, [r3, #0]
   16b3e:	2a45      	cmp	r2, #69	; 0x45
   16b40:	d0eb      	beq.n	16b1a <d_expr_primary+0x8a>
   16b42:	2000      	movs	r0, #0
   16b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b46:	2300      	movs	r3, #0
   16b48:	e7df      	b.n	16b0a <d_expr_primary+0x7a>
   16b4a:	6843      	ldr	r3, [r0, #4]
   16b4c:	7c1a      	ldrb	r2, [r3, #16]
   16b4e:	2a00      	cmp	r2, #0
   16b50:	d0b4      	beq.n	16abc <d_expr_primary+0x2c>
   16b52:	685a      	ldr	r2, [r3, #4]
   16b54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16b56:	1a9b      	subs	r3, r3, r2
   16b58:	632b      	str	r3, [r5, #48]	; 0x30
   16b5a:	e7af      	b.n	16abc <d_expr_primary+0x2c>
   16b5c:	1c72      	adds	r2, r6, #1
   16b5e:	60ea      	str	r2, [r5, #12]
   16b60:	7873      	ldrb	r3, [r6, #1]
   16b62:	213d      	movs	r1, #61	; 0x3d
   16b64:	4616      	mov	r6, r2
   16b66:	e7ae      	b.n	16ac6 <d_expr_primary+0x36>
   16b68:	2400      	movs	r4, #0
   16b6a:	e7ba      	b.n	16ae2 <d_expr_primary+0x52>

00016b6c <d_print_comp_inner>:
   16b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b70:	4604      	mov	r4, r0
   16b72:	b095      	sub	sp, #84	; 0x54
   16b74:	2a00      	cmp	r2, #0
   16b76:	f000 80db 	beq.w	16d30 <d_print_comp_inner+0x1c4>
   16b7a:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16b7e:	2f00      	cmp	r7, #0
   16b80:	f040 80c2 	bne.w	16d08 <d_print_comp_inner+0x19c>
   16b84:	7813      	ldrb	r3, [r2, #0]
   16b86:	4688      	mov	r8, r1
   16b88:	4615      	mov	r5, r2
   16b8a:	2b4d      	cmp	r3, #77	; 0x4d
   16b8c:	f201 81e6 	bhi.w	17f5c <d_print_comp_inner+0x13f0>
   16b90:	e8df f013 	tbh	[pc, r3, lsl #1]
   16b94:	043c045a 	.word	0x043c045a
   16b98:	03a4043c 	.word	0x03a4043c
   16b9c:	048904a5 	.word	0x048904a5
   16ba0:	038e04ea 	.word	0x038e04ea
   16ba4:	0330037c 	.word	0x0330037c
   16ba8:	030a0356 	.word	0x030a0356
   16bac:	029802e4 	.word	0x029802e4
   16bb0:	027202be 	.word	0x027202be
   16bb4:	01f0024c 	.word	0x01f0024c
   16bb8:	01ca0226 	.word	0x01ca0226
   16bbc:	015801a4 	.word	0x015801a4
   16bc0:	0132017e 	.word	0x0132017e
   16bc4:	00f2010b 	.word	0x00f2010b
   16bc8:	00f200f2 	.word	0x00f200f2
   16bcc:	00d400d4 	.word	0x00d400d4
   16bd0:	00d400d4 	.word	0x00d400d4
   16bd4:	00d400d4 	.word	0x00d400d4
   16bd8:	06d500d4 	.word	0x06d500d4
   16bdc:	00d406d5 	.word	0x00d406d5
   16be0:	06a900d4 	.word	0x06a900d4
   16be4:	069306fc 	.word	0x069306fc
   16be8:	0701071d 	.word	0x0701071d
   16bec:	07010788 	.word	0x07010788
   16bf0:	057b057b 	.word	0x057b057b
   16bf4:	06060630 	.word	0x06060630
   16bf8:	09e405e0 	.word	0x09e405e0
   16bfc:	068e05ad 	.word	0x068e05ad
   16c00:	004e0654 	.word	0x004e0654
   16c04:	094c0485 	.word	0x094c0485
   16c08:	08df08df 	.word	0x08df08df
   16c0c:	08ae08ae 	.word	0x08ae08ae
   16c10:	05480888 	.word	0x05480888
   16c14:	08e4053a 	.word	0x08e4053a
   16c18:	09be0514 	.word	0x09be0514
   16c1c:	09980914 	.word	0x09980914
   16c20:	07cb09e4 	.word	0x07cb09e4
   16c24:	07f10862 	.word	0x07f10862
   16c28:	04130817 	.word	0x04130817
   16c2c:	055200d4 	.word	0x055200d4
   16c30:	68ab      	ldr	r3, [r5, #8]
   16c32:	781b      	ldrb	r3, [r3, #0]
   16c34:	2b38      	cmp	r3, #56	; 0x38
   16c36:	d17b      	bne.n	16d30 <d_print_comp_inner+0x1c4>
   16c38:	686a      	ldr	r2, [r5, #4]
   16c3a:	6853      	ldr	r3, [r2, #4]
   16c3c:	681b      	ldr	r3, [r3, #0]
   16c3e:	7859      	ldrb	r1, [r3, #1]
   16c40:	2963      	cmp	r1, #99	; 0x63
   16c42:	f002 814a 	beq.w	18eda <d_print_comp_inner+0x236e>
   16c46:	f105 0308 	add.w	r3, r5, #8
   16c4a:	4641      	mov	r1, r8
   16c4c:	4620      	mov	r0, r4
   16c4e:	f003 fbbb 	bl	1a3c8 <d_maybe_print_fold_expression.isra.15>
   16c52:	4606      	mov	r6, r0
   16c54:	2800      	cmp	r0, #0
   16c56:	d157      	bne.n	16d08 <d_print_comp_inner+0x19c>
   16c58:	686b      	ldr	r3, [r5, #4]
   16c5a:	781a      	ldrb	r2, [r3, #0]
   16c5c:	2a31      	cmp	r2, #49	; 0x31
   16c5e:	f002 836b 	beq.w	19338 <d_print_comp_inner+0x27cc>
   16c62:	685b      	ldr	r3, [r3, #4]
   16c64:	49c7      	ldr	r1, [pc, #796]	; (16f84 <d_print_comp_inner+0x418>)
   16c66:	6818      	ldr	r0, [r3, #0]
   16c68:	f007 fe8e 	bl	1e988 <strcmp>
   16c6c:	68ab      	ldr	r3, [r5, #8]
   16c6e:	b920      	cbnz	r0, 16c7a <d_print_comp_inner+0x10e>
   16c70:	685a      	ldr	r2, [r3, #4]
   16c72:	7811      	ldrb	r1, [r2, #0]
   16c74:	2903      	cmp	r1, #3
   16c76:	f002 83a5 	beq.w	193c4 <d_print_comp_inner+0x2858>
   16c7a:	685a      	ldr	r2, [r3, #4]
   16c7c:	4641      	mov	r1, r8
   16c7e:	4620      	mov	r0, r4
   16c80:	f003 fb3e 	bl	1a300 <d_print_subexpr>
   16c84:	686f      	ldr	r7, [r5, #4]
   16c86:	49c0      	ldr	r1, [pc, #768]	; (16f88 <d_print_comp_inner+0x41c>)
   16c88:	687b      	ldr	r3, [r7, #4]
   16c8a:	f8d3 9000 	ldr.w	r9, [r3]
   16c8e:	4648      	mov	r0, r9
   16c90:	f007 fe7a 	bl	1e988 <strcmp>
   16c94:	4606      	mov	r6, r0
   16c96:	2800      	cmp	r0, #0
   16c98:	f042 826f 	bne.w	1917a <d_print_comp_inner+0x260e>
   16c9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16ca0:	29ff      	cmp	r1, #255	; 0xff
   16ca2:	f002 844a 	beq.w	1953a <d_print_comp_inner+0x29ce>
   16ca6:	1c4a      	adds	r2, r1, #1
   16ca8:	235b      	movs	r3, #91	; 0x5b
   16caa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16cae:	5463      	strb	r3, [r4, r1]
   16cb0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16cb4:	68ab      	ldr	r3, [r5, #8]
   16cb6:	4641      	mov	r1, r8
   16cb8:	689a      	ldr	r2, [r3, #8]
   16cba:	4620      	mov	r0, r4
   16cbc:	f002 fcfa 	bl	196b4 <d_print_comp>
   16cc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16cc4:	29ff      	cmp	r1, #255	; 0xff
   16cc6:	f002 8425 	beq.w	19514 <d_print_comp_inner+0x29a8>
   16cca:	235d      	movs	r3, #93	; 0x5d
   16ccc:	1c4a      	adds	r2, r1, #1
   16cce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16cd2:	5463      	strb	r3, [r4, r1]
   16cd4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16cd8:	686b      	ldr	r3, [r5, #4]
   16cda:	781a      	ldrb	r2, [r3, #0]
   16cdc:	2a31      	cmp	r2, #49	; 0x31
   16cde:	d113      	bne.n	16d08 <d_print_comp_inner+0x19c>
   16ce0:	685b      	ldr	r3, [r3, #4]
   16ce2:	689a      	ldr	r2, [r3, #8]
   16ce4:	2a01      	cmp	r2, #1
   16ce6:	d10f      	bne.n	16d08 <d_print_comp_inner+0x19c>
   16ce8:	685b      	ldr	r3, [r3, #4]
   16cea:	781b      	ldrb	r3, [r3, #0]
   16cec:	2b3e      	cmp	r3, #62	; 0x3e
   16cee:	d10b      	bne.n	16d08 <d_print_comp_inner+0x19c>
   16cf0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16cf4:	29ff      	cmp	r1, #255	; 0xff
   16cf6:	f002 8482 	beq.w	195fe <d_print_comp_inner+0x2a92>
   16cfa:	2329      	movs	r3, #41	; 0x29
   16cfc:	1c4a      	adds	r2, r1, #1
   16cfe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16d02:	5463      	strb	r3, [r4, r1]
   16d04:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16d08:	b015      	add	sp, #84	; 0x54
   16d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d0e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16d12:	2b00      	cmp	r3, #0
   16d14:	f2c1 84a4 	blt.w	18660 <d_print_comp_inner+0x1af4>
   16d18:	2b00      	cmp	r3, #0
   16d1a:	f002 8432 	beq.w	19582 <d_print_comp_inner+0x2a16>
   16d1e:	6880      	ldr	r0, [r0, #8]
   16d20:	3b01      	subs	r3, #1
   16d22:	b110      	cbz	r0, 16d2a <d_print_comp_inner+0x1be>
   16d24:	7802      	ldrb	r2, [r0, #0]
   16d26:	2a2f      	cmp	r2, #47	; 0x2f
   16d28:	d0f6      	beq.n	16d18 <d_print_comp_inner+0x1ac>
   16d2a:	b10f      	cbz	r7, 16d30 <d_print_comp_inner+0x1c4>
   16d2c:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16d30:	2301      	movs	r3, #1
   16d32:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16d36:	b015      	add	sp, #84	; 0x54
   16d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d3c:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16d40:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16d44:	9505      	str	r5, [sp, #20]
   16d46:	ab14      	add	r3, sp, #80	; 0x50
   16d48:	2100      	movs	r1, #0
   16d4a:	f843 cd40 	str.w	ip, [r3, #-64]!
   16d4e:	9106      	str	r1, [sp, #24]
   16d50:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16d54:	9207      	str	r2, [sp, #28]
   16d56:	686a      	ldr	r2, [r5, #4]
   16d58:	4641      	mov	r1, r8
   16d5a:	4620      	mov	r0, r4
   16d5c:	f002 fcaa 	bl	196b4 <d_print_comp>
   16d60:	9b06      	ldr	r3, [sp, #24]
   16d62:	2b00      	cmp	r3, #0
   16d64:	f001 8389 	beq.w	1847a <d_print_comp_inner+0x190e>
   16d68:	9b04      	ldr	r3, [sp, #16]
   16d6a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16d6e:	2f00      	cmp	r7, #0
   16d70:	d0ca      	beq.n	16d08 <d_print_comp_inner+0x19c>
   16d72:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16d76:	e7c7      	b.n	16d08 <d_print_comp_inner+0x19c>
   16d78:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   16d7c:	f1bc 0f00 	cmp.w	ip, #0
   16d80:	d0de      	beq.n	16d40 <d_print_comp_inner+0x1d4>
   16d82:	4662      	mov	r2, ip
   16d84:	e005      	b.n	16d92 <d_print_comp_inner+0x226>
   16d86:	428b      	cmp	r3, r1
   16d88:	f001 86b8 	beq.w	18afc <d_print_comp_inner+0x1f90>
   16d8c:	6812      	ldr	r2, [r2, #0]
   16d8e:	2a00      	cmp	r2, #0
   16d90:	d0d6      	beq.n	16d40 <d_print_comp_inner+0x1d4>
   16d92:	6890      	ldr	r0, [r2, #8]
   16d94:	2800      	cmp	r0, #0
   16d96:	d1f9      	bne.n	16d8c <d_print_comp_inner+0x220>
   16d98:	6851      	ldr	r1, [r2, #4]
   16d9a:	7809      	ldrb	r1, [r1, #0]
   16d9c:	f1a1 0e19 	sub.w	lr, r1, #25
   16da0:	f1be 0f02 	cmp.w	lr, #2
   16da4:	d9ef      	bls.n	16d86 <d_print_comp_inner+0x21a>
   16da6:	4607      	mov	r7, r0
   16da8:	e7ca      	b.n	16d40 <d_print_comp_inner+0x1d4>
   16daa:	68af      	ldr	r7, [r5, #8]
   16dac:	686d      	ldr	r5, [r5, #4]
   16dae:	2f00      	cmp	r7, #0
   16db0:	d0aa      	beq.n	16d08 <d_print_comp_inner+0x19c>
   16db2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16db6:	442f      	add	r7, r5
   16db8:	f04f 0800 	mov.w	r8, #0
   16dbc:	e008      	b.n	16dd0 <d_print_comp_inner+0x264>
   16dbe:	460b      	mov	r3, r1
   16dc0:	3101      	adds	r1, #1
   16dc2:	42bd      	cmp	r5, r7
   16dc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16dc8:	54e6      	strb	r6, [r4, r3]
   16dca:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   16dce:	d09b      	beq.n	16d08 <d_print_comp_inner+0x19c>
   16dd0:	29ff      	cmp	r1, #255	; 0xff
   16dd2:	f815 6b01 	ldrb.w	r6, [r5], #1
   16dd6:	d1f2      	bne.n	16dbe <d_print_comp_inner+0x252>
   16dd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16ddc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   16de0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16de4:	4620      	mov	r0, r4
   16de6:	4798      	blx	r3
   16de8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16dec:	3301      	adds	r3, #1
   16dee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16df2:	2101      	movs	r1, #1
   16df4:	2300      	movs	r3, #0
   16df6:	e7e4      	b.n	16dc2 <d_print_comp_inner+0x256>
   16df8:	4e64      	ldr	r6, [pc, #400]	; (16f8c <d_print_comp_inner+0x420>)
   16dfa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16dfe:	f106 0a11 	add.w	sl, r6, #17
   16e02:	f04f 0900 	mov.w	r9, #0
   16e06:	e009      	b.n	16e1c <d_print_comp_inner+0x2b0>
   16e08:	460b      	mov	r3, r1
   16e0a:	3101      	adds	r1, #1
   16e0c:	4556      	cmp	r6, sl
   16e0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16e12:	54e7      	strb	r7, [r4, r3]
   16e14:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16e18:	f001 8296 	beq.w	18348 <d_print_comp_inner+0x17dc>
   16e1c:	29ff      	cmp	r1, #255	; 0xff
   16e1e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16e22:	d1f1      	bne.n	16e08 <d_print_comp_inner+0x29c>
   16e24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16e28:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16e2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16e30:	4620      	mov	r0, r4
   16e32:	4798      	blx	r3
   16e34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16e38:	3301      	adds	r3, #1
   16e3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16e3e:	2101      	movs	r1, #1
   16e40:	2300      	movs	r3, #0
   16e42:	e7e3      	b.n	16e0c <d_print_comp_inner+0x2a0>
   16e44:	4e52      	ldr	r6, [pc, #328]	; (16f90 <d_print_comp_inner+0x424>)
   16e46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16e4a:	f106 0a19 	add.w	sl, r6, #25
   16e4e:	f04f 0900 	mov.w	r9, #0
   16e52:	e009      	b.n	16e68 <d_print_comp_inner+0x2fc>
   16e54:	460b      	mov	r3, r1
   16e56:	3101      	adds	r1, #1
   16e58:	4556      	cmp	r6, sl
   16e5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16e5e:	54e7      	strb	r7, [r4, r3]
   16e60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16e64:	f001 82a8 	beq.w	183b8 <d_print_comp_inner+0x184c>
   16e68:	29ff      	cmp	r1, #255	; 0xff
   16e6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16e6e:	d1f1      	bne.n	16e54 <d_print_comp_inner+0x2e8>
   16e70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16e74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16e78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16e7c:	4620      	mov	r0, r4
   16e7e:	4798      	blx	r3
   16e80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16e84:	3301      	adds	r3, #1
   16e86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16e8a:	2101      	movs	r1, #1
   16e8c:	2300      	movs	r3, #0
   16e8e:	e7e3      	b.n	16e58 <d_print_comp_inner+0x2ec>
   16e90:	4e40      	ldr	r6, [pc, #256]	; (16f94 <d_print_comp_inner+0x428>)
   16e92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16e96:	f106 0a15 	add.w	sl, r6, #21
   16e9a:	f04f 0900 	mov.w	r9, #0
   16e9e:	e009      	b.n	16eb4 <d_print_comp_inner+0x348>
   16ea0:	460b      	mov	r3, r1
   16ea2:	3101      	adds	r1, #1
   16ea4:	4556      	cmp	r6, sl
   16ea6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16eaa:	54e7      	strb	r7, [r4, r3]
   16eac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16eb0:	f001 8251 	beq.w	18356 <d_print_comp_inner+0x17ea>
   16eb4:	29ff      	cmp	r1, #255	; 0xff
   16eb6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16eba:	d1f1      	bne.n	16ea0 <d_print_comp_inner+0x334>
   16ebc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16ec0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16ec4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16ec8:	4620      	mov	r0, r4
   16eca:	4798      	blx	r3
   16ecc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16ed0:	3301      	adds	r3, #1
   16ed2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16ed6:	2101      	movs	r1, #1
   16ed8:	2300      	movs	r3, #0
   16eda:	e7e3      	b.n	16ea4 <d_print_comp_inner+0x338>
   16edc:	4e2e      	ldr	r6, [pc, #184]	; (16f98 <d_print_comp_inner+0x42c>)
   16ede:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16ee2:	f106 0a16 	add.w	sl, r6, #22
   16ee6:	f04f 0900 	mov.w	r9, #0
   16eea:	e009      	b.n	16f00 <d_print_comp_inner+0x394>
   16eec:	460b      	mov	r3, r1
   16eee:	3101      	adds	r1, #1
   16ef0:	4556      	cmp	r6, sl
   16ef2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16ef6:	54e7      	strb	r7, [r4, r3]
   16ef8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16efc:	f001 8263 	beq.w	183c6 <d_print_comp_inner+0x185a>
   16f00:	29ff      	cmp	r1, #255	; 0xff
   16f02:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f06:	d1f1      	bne.n	16eec <d_print_comp_inner+0x380>
   16f08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f14:	4620      	mov	r0, r4
   16f16:	4798      	blx	r3
   16f18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f1c:	3301      	adds	r3, #1
   16f1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f22:	2101      	movs	r1, #1
   16f24:	2300      	movs	r3, #0
   16f26:	e7e3      	b.n	16ef0 <d_print_comp_inner+0x384>
   16f28:	4e1c      	ldr	r6, [pc, #112]	; (16f9c <d_print_comp_inner+0x430>)
   16f2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f2e:	f106 0a13 	add.w	sl, r6, #19
   16f32:	f04f 0900 	mov.w	r9, #0
   16f36:	e009      	b.n	16f4c <d_print_comp_inner+0x3e0>
   16f38:	460b      	mov	r3, r1
   16f3a:	3101      	adds	r1, #1
   16f3c:	45b2      	cmp	sl, r6
   16f3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f42:	54e7      	strb	r7, [r4, r3]
   16f44:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f48:	f001 8077 	beq.w	1803a <d_print_comp_inner+0x14ce>
   16f4c:	29ff      	cmp	r1, #255	; 0xff
   16f4e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f52:	d1f1      	bne.n	16f38 <d_print_comp_inner+0x3cc>
   16f54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f60:	4620      	mov	r0, r4
   16f62:	4798      	blx	r3
   16f64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f68:	3301      	adds	r3, #1
   16f6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f6e:	2101      	movs	r1, #1
   16f70:	2300      	movs	r3, #0
   16f72:	e7e3      	b.n	16f3c <d_print_comp_inner+0x3d0>
   16f74:	4e0a      	ldr	r6, [pc, #40]	; (16fa0 <d_print_comp_inner+0x434>)
   16f76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f7a:	f106 0a1a 	add.w	sl, r6, #26
   16f7e:	f04f 0900 	mov.w	r9, #0
   16f82:	e019      	b.n	16fb8 <d_print_comp_inner+0x44c>
   16f84:	00024304 	.word	0x00024304
   16f88:	00024500 	.word	0x00024500
   16f8c:	0002448f 	.word	0x0002448f
   16f90:	0002445b 	.word	0x0002445b
   16f94:	00024477 	.word	0x00024477
   16f98:	00024443 	.word	0x00024443
   16f9c:	0002442f 	.word	0x0002442f
   16fa0:	00024403 	.word	0x00024403
   16fa4:	460b      	mov	r3, r1
   16fa6:	3101      	adds	r1, #1
   16fa8:	4556      	cmp	r6, sl
   16faa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16fae:	54e7      	strb	r7, [r4, r3]
   16fb0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16fb4:	f001 804f 	beq.w	18056 <d_print_comp_inner+0x14ea>
   16fb8:	29ff      	cmp	r1, #255	; 0xff
   16fba:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16fbe:	d1f1      	bne.n	16fa4 <d_print_comp_inner+0x438>
   16fc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16fc4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16fc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16fcc:	4620      	mov	r0, r4
   16fce:	4798      	blx	r3
   16fd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16fd4:	3301      	adds	r3, #1
   16fd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16fda:	2101      	movs	r1, #1
   16fdc:	2300      	movs	r3, #0
   16fde:	e7e3      	b.n	16fa8 <d_print_comp_inner+0x43c>
   16fe0:	4eb5      	ldr	r6, [pc, #724]	; (172b8 <d_print_comp_inner+0x74c>)
   16fe2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16fe6:	f106 0a0f 	add.w	sl, r6, #15
   16fea:	f04f 0900 	mov.w	r9, #0
   16fee:	e009      	b.n	17004 <d_print_comp_inner+0x498>
   16ff0:	460b      	mov	r3, r1
   16ff2:	3101      	adds	r1, #1
   16ff4:	4556      	cmp	r6, sl
   16ff6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16ffa:	54e7      	strb	r7, [r4, r3]
   16ffc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17000:	f001 8022 	beq.w	18048 <d_print_comp_inner+0x14dc>
   17004:	29ff      	cmp	r1, #255	; 0xff
   17006:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1700a:	d1f1      	bne.n	16ff0 <d_print_comp_inner+0x484>
   1700c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17010:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17014:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17018:	4620      	mov	r0, r4
   1701a:	4798      	blx	r3
   1701c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17020:	3301      	adds	r3, #1
   17022:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17026:	2101      	movs	r1, #1
   17028:	2300      	movs	r3, #0
   1702a:	e7e3      	b.n	16ff4 <d_print_comp_inner+0x488>
   1702c:	4ea3      	ldr	r6, [pc, #652]	; (172bc <d_print_comp_inner+0x750>)
   1702e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17032:	f106 0a11 	add.w	sl, r6, #17
   17036:	f04f 0900 	mov.w	r9, #0
   1703a:	e009      	b.n	17050 <d_print_comp_inner+0x4e4>
   1703c:	460b      	mov	r3, r1
   1703e:	3101      	adds	r1, #1
   17040:	4556      	cmp	r6, sl
   17042:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17046:	54e7      	strb	r7, [r4, r3]
   17048:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1704c:	f001 800a 	beq.w	18064 <d_print_comp_inner+0x14f8>
   17050:	29ff      	cmp	r1, #255	; 0xff
   17052:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17056:	d1f1      	bne.n	1703c <d_print_comp_inner+0x4d0>
   17058:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1705c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17060:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17064:	4620      	mov	r0, r4
   17066:	4798      	blx	r3
   17068:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1706c:	3301      	adds	r3, #1
   1706e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17072:	2101      	movs	r1, #1
   17074:	2300      	movs	r3, #0
   17076:	e7e3      	b.n	17040 <d_print_comp_inner+0x4d4>
   17078:	4e91      	ldr	r6, [pc, #580]	; (172c0 <d_print_comp_inner+0x754>)
   1707a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1707e:	f106 0a15 	add.w	sl, r6, #21
   17082:	f04f 0900 	mov.w	r9, #0
   17086:	e009      	b.n	1709c <d_print_comp_inner+0x530>
   17088:	460b      	mov	r3, r1
   1708a:	3101      	adds	r1, #1
   1708c:	4556      	cmp	r6, sl
   1708e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17092:	54e7      	strb	r7, [r4, r3]
   17094:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17098:	f000 87b3 	beq.w	18002 <d_print_comp_inner+0x1496>
   1709c:	29ff      	cmp	r1, #255	; 0xff
   1709e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170a2:	d1f1      	bne.n	17088 <d_print_comp_inner+0x51c>
   170a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170b0:	4620      	mov	r0, r4
   170b2:	4798      	blx	r3
   170b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170b8:	3301      	adds	r3, #1
   170ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170be:	2101      	movs	r1, #1
   170c0:	2300      	movs	r3, #0
   170c2:	e7e3      	b.n	1708c <d_print_comp_inner+0x520>
   170c4:	4e7f      	ldr	r6, [pc, #508]	; (172c4 <d_print_comp_inner+0x758>)
   170c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170ca:	f106 0a12 	add.w	sl, r6, #18
   170ce:	f04f 0900 	mov.w	r9, #0
   170d2:	e009      	b.n	170e8 <d_print_comp_inner+0x57c>
   170d4:	460b      	mov	r3, r1
   170d6:	3101      	adds	r1, #1
   170d8:	45b2      	cmp	sl, r6
   170da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170de:	54e7      	strb	r7, [r4, r3]
   170e0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   170e4:	f000 879b 	beq.w	1801e <d_print_comp_inner+0x14b2>
   170e8:	29ff      	cmp	r1, #255	; 0xff
   170ea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170ee:	d1f1      	bne.n	170d4 <d_print_comp_inner+0x568>
   170f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170f4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170fc:	4620      	mov	r0, r4
   170fe:	4798      	blx	r3
   17100:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17104:	3301      	adds	r3, #1
   17106:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1710a:	2101      	movs	r1, #1
   1710c:	2300      	movs	r3, #0
   1710e:	e7e3      	b.n	170d8 <d_print_comp_inner+0x56c>
   17110:	4e6d      	ldr	r6, [pc, #436]	; (172c8 <d_print_comp_inner+0x75c>)
   17112:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17116:	f106 0a10 	add.w	sl, r6, #16
   1711a:	f04f 0900 	mov.w	r9, #0
   1711e:	e009      	b.n	17134 <d_print_comp_inner+0x5c8>
   17120:	460b      	mov	r3, r1
   17122:	3101      	adds	r1, #1
   17124:	4556      	cmp	r6, sl
   17126:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1712a:	54e7      	strb	r7, [r4, r3]
   1712c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17130:	f000 876e 	beq.w	18010 <d_print_comp_inner+0x14a4>
   17134:	29ff      	cmp	r1, #255	; 0xff
   17136:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1713a:	d1f1      	bne.n	17120 <d_print_comp_inner+0x5b4>
   1713c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17140:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17148:	4620      	mov	r0, r4
   1714a:	4798      	blx	r3
   1714c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17150:	3301      	adds	r3, #1
   17152:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17156:	2101      	movs	r1, #1
   17158:	2300      	movs	r3, #0
   1715a:	e7e3      	b.n	17124 <d_print_comp_inner+0x5b8>
   1715c:	4e5b      	ldr	r6, [pc, #364]	; (172cc <d_print_comp_inner+0x760>)
   1715e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17162:	f106 0a0d 	add.w	sl, r6, #13
   17166:	f04f 0900 	mov.w	r9, #0
   1716a:	e009      	b.n	17180 <d_print_comp_inner+0x614>
   1716c:	460b      	mov	r3, r1
   1716e:	3101      	adds	r1, #1
   17170:	4556      	cmp	r6, sl
   17172:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17176:	54e7      	strb	r7, [r4, r3]
   17178:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1717c:	f000 8756 	beq.w	1802c <d_print_comp_inner+0x14c0>
   17180:	29ff      	cmp	r1, #255	; 0xff
   17182:	f816 7b01 	ldrb.w	r7, [r6], #1
   17186:	d1f1      	bne.n	1716c <d_print_comp_inner+0x600>
   17188:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1718c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17190:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17194:	4620      	mov	r0, r4
   17196:	4798      	blx	r3
   17198:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1719c:	3301      	adds	r3, #1
   1719e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171a2:	2101      	movs	r1, #1
   171a4:	2300      	movs	r3, #0
   171a6:	e7e3      	b.n	17170 <d_print_comp_inner+0x604>
   171a8:	4e49      	ldr	r6, [pc, #292]	; (172d0 <d_print_comp_inner+0x764>)
   171aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171ae:	f106 0a18 	add.w	sl, r6, #24
   171b2:	f04f 0900 	mov.w	r9, #0
   171b6:	e009      	b.n	171cc <d_print_comp_inner+0x660>
   171b8:	460b      	mov	r3, r1
   171ba:	3101      	adds	r1, #1
   171bc:	45b2      	cmp	sl, r6
   171be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171c2:	54e7      	strb	r7, [r4, r3]
   171c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171c8:	f000 86e3 	beq.w	17f92 <d_print_comp_inner+0x1426>
   171cc:	29ff      	cmp	r1, #255	; 0xff
   171ce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   171d2:	d1f1      	bne.n	171b8 <d_print_comp_inner+0x64c>
   171d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   171d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   171dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   171e0:	4620      	mov	r0, r4
   171e2:	4798      	blx	r3
   171e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171e8:	3301      	adds	r3, #1
   171ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171ee:	2101      	movs	r1, #1
   171f0:	2300      	movs	r3, #0
   171f2:	e7e3      	b.n	171bc <d_print_comp_inner+0x650>
   171f4:	4e37      	ldr	r6, [pc, #220]	; (172d4 <d_print_comp_inner+0x768>)
   171f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171fa:	f106 0a0b 	add.w	sl, r6, #11
   171fe:	f04f 0900 	mov.w	r9, #0
   17202:	e009      	b.n	17218 <d_print_comp_inner+0x6ac>
   17204:	460b      	mov	r3, r1
   17206:	3101      	adds	r1, #1
   17208:	45b2      	cmp	sl, r6
   1720a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1720e:	54e7      	strb	r7, [r4, r3]
   17210:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17214:	f000 87ca 	beq.w	181ac <d_print_comp_inner+0x1640>
   17218:	29ff      	cmp	r1, #255	; 0xff
   1721a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1721e:	d1f1      	bne.n	17204 <d_print_comp_inner+0x698>
   17220:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17224:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17228:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1722c:	4620      	mov	r0, r4
   1722e:	4798      	blx	r3
   17230:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17234:	3301      	adds	r3, #1
   17236:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1723a:	2101      	movs	r1, #1
   1723c:	2300      	movs	r3, #0
   1723e:	e7e3      	b.n	17208 <d_print_comp_inner+0x69c>
   17240:	4e25      	ldr	r6, [pc, #148]	; (172d8 <d_print_comp_inner+0x76c>)
   17242:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17246:	f106 0a08 	add.w	sl, r6, #8
   1724a:	f04f 0900 	mov.w	r9, #0
   1724e:	e009      	b.n	17264 <d_print_comp_inner+0x6f8>
   17250:	460b      	mov	r3, r1
   17252:	3101      	adds	r1, #1
   17254:	45b2      	cmp	sl, r6
   17256:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1725a:	54e7      	strb	r7, [r4, r3]
   1725c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17260:	f000 86c8 	beq.w	17ff4 <d_print_comp_inner+0x1488>
   17264:	29ff      	cmp	r1, #255	; 0xff
   17266:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1726a:	d1f1      	bne.n	17250 <d_print_comp_inner+0x6e4>
   1726c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17270:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17274:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17278:	4620      	mov	r0, r4
   1727a:	4798      	blx	r3
   1727c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17280:	3301      	adds	r3, #1
   17282:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17286:	2101      	movs	r1, #1
   17288:	2300      	movs	r3, #0
   1728a:	e7e3      	b.n	17254 <d_print_comp_inner+0x6e8>
   1728c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17290:	29ff      	cmp	r1, #255	; 0xff
   17292:	f001 847c 	beq.w	18b8e <d_print_comp_inner+0x2022>
   17296:	1c4a      	adds	r2, r1, #1
   17298:	237e      	movs	r3, #126	; 0x7e
   1729a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1729e:	5463      	strb	r3, [r4, r1]
   172a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   172a4:	4641      	mov	r1, r8
   172a6:	68aa      	ldr	r2, [r5, #8]
   172a8:	4620      	mov	r0, r4
   172aa:	f002 fa03 	bl	196b4 <d_print_comp>
   172ae:	e52b      	b.n	16d08 <d_print_comp_inner+0x19c>
   172b0:	68aa      	ldr	r2, [r5, #8]
   172b2:	f002 f9ff 	bl	196b4 <d_print_comp>
   172b6:	e527      	b.n	16d08 <d_print_comp_inner+0x19c>
   172b8:	0002441f 	.word	0x0002441f
   172bc:	000243ef 	.word	0x000243ef
   172c0:	000243eb 	.word	0x000243eb
   172c4:	000243c3 	.word	0x000243c3
   172c8:	000243d7 	.word	0x000243d7
   172cc:	000243b4 	.word	0x000243b4
   172d0:	0002438f 	.word	0x0002438f
   172d4:	00024378 	.word	0x00024378
   172d8:	00024383 	.word	0x00024383
   172dc:	2200      	movs	r2, #0
   172de:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   172e2:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   172e6:	686e      	ldr	r6, [r5, #4]
   172e8:	9300      	str	r3, [sp, #0]
   172ea:	2e00      	cmp	r6, #0
   172ec:	f000 864c 	beq.w	17f88 <d_print_comp_inner+0x141c>
   172f0:	f10d 0910 	add.w	r9, sp, #16
   172f4:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   172f8:	4617      	mov	r7, r2
   172fa:	4696      	mov	lr, r2
   172fc:	464b      	mov	r3, r9
   172fe:	7831      	ldrb	r1, [r6, #0]
   17300:	601a      	str	r2, [r3, #0]
   17302:	f1a1 021c 	sub.w	r2, r1, #28
   17306:	2a04      	cmp	r2, #4
   17308:	605e      	str	r6, [r3, #4]
   1730a:	f8c3 e008 	str.w	lr, [r3, #8]
   1730e:	f8c3 c00c 	str.w	ip, [r3, #12]
   17312:	f107 0701 	add.w	r7, r7, #1
   17316:	4618      	mov	r0, r3
   17318:	461a      	mov	r2, r3
   1731a:	f240 862a 	bls.w	17f72 <d_print_comp_inner+0x1406>
   1731e:	294c      	cmp	r1, #76	; 0x4c
   17320:	f000 8627 	beq.w	17f72 <d_print_comp_inner+0x1406>
   17324:	2904      	cmp	r1, #4
   17326:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1732a:	f001 87bb 	beq.w	192a4 <d_print_comp_inner+0x2738>
   1732e:	2902      	cmp	r1, #2
   17330:	d11a      	bne.n	17368 <d_print_comp_inner+0x7fc>
   17332:	f8d6 b008 	ldr.w	fp, [r6, #8]
   17336:	f89b 3000 	ldrb.w	r3, [fp]
   1733a:	2b46      	cmp	r3, #70	; 0x46
   1733c:	f002 8035 	beq.w	193aa <d_print_comp_inner+0x283e>
   17340:	462b      	mov	r3, r5
   17342:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   17346:	9601      	str	r6, [sp, #4]
   17348:	465d      	mov	r5, fp
   1734a:	4676      	mov	r6, lr
   1734c:	46a2      	mov	sl, r4
   1734e:	469b      	mov	fp, r3
   17350:	782b      	ldrb	r3, [r5, #0]
   17352:	f1a3 021c 	sub.w	r2, r3, #28
   17356:	2a04      	cmp	r2, #4
   17358:	f241 805d 	bls.w	18416 <d_print_comp_inner+0x18aa>
   1735c:	2b4c      	cmp	r3, #76	; 0x4c
   1735e:	f001 805a 	beq.w	18416 <d_print_comp_inner+0x18aa>
   17362:	9e01      	ldr	r6, [sp, #4]
   17364:	4654      	mov	r4, sl
   17366:	465d      	mov	r5, fp
   17368:	68aa      	ldr	r2, [r5, #8]
   1736a:	4641      	mov	r1, r8
   1736c:	4620      	mov	r0, r4
   1736e:	f002 f9a1 	bl	196b4 <d_print_comp>
   17372:	7833      	ldrb	r3, [r6, #0]
   17374:	2b04      	cmp	r3, #4
   17376:	f002 8020 	beq.w	193ba <d_print_comp_inner+0x284e>
   1737a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   1737e:	2620      	movs	r6, #32
   17380:	f859 5c08 	ldr.w	r5, [r9, #-8]
   17384:	3f01      	subs	r7, #1
   17386:	b985      	cbnz	r5, 173aa <d_print_comp_inner+0x83e>
   17388:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1738c:	29ff      	cmp	r1, #255	; 0xff
   1738e:	f002 8043 	beq.w	19418 <d_print_comp_inner+0x28ac>
   17392:	1c4b      	adds	r3, r1, #1
   17394:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17398:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   1739c:	5466      	strb	r6, [r4, r1]
   1739e:	4620      	mov	r0, r4
   173a0:	4641      	mov	r1, r8
   173a2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   173a6:	f002 f995 	bl	196d4 <d_print_mod>
   173aa:	f1a9 0910 	sub.w	r9, r9, #16
   173ae:	2f00      	cmp	r7, #0
   173b0:	d1e6      	bne.n	17380 <d_print_comp_inner+0x814>
   173b2:	9b00      	ldr	r3, [sp, #0]
   173b4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   173b8:	e4a6      	b.n	16d08 <d_print_comp_inner+0x19c>
   173ba:	4ed1      	ldr	r6, [pc, #836]	; (17700 <d_print_comp_inner+0xb94>)
   173bc:	686a      	ldr	r2, [r5, #4]
   173be:	f002 f979 	bl	196b4 <d_print_comp>
   173c2:	f106 0a05 	add.w	sl, r6, #5
   173c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   173ca:	f04f 0900 	mov.w	r9, #0
   173ce:	e009      	b.n	173e4 <d_print_comp_inner+0x878>
   173d0:	460b      	mov	r3, r1
   173d2:	3101      	adds	r1, #1
   173d4:	45b2      	cmp	sl, r6
   173d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173da:	54e7      	strb	r7, [r4, r3]
   173dc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173e0:	f000 86d1 	beq.w	18186 <d_print_comp_inner+0x161a>
   173e4:	29ff      	cmp	r1, #255	; 0xff
   173e6:	f816 7b01 	ldrb.w	r7, [r6], #1
   173ea:	d1f1      	bne.n	173d0 <d_print_comp_inner+0x864>
   173ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   173f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   173f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   173f8:	4620      	mov	r0, r4
   173fa:	4798      	blx	r3
   173fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17400:	3301      	adds	r3, #1
   17402:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17406:	2101      	movs	r1, #1
   17408:	2300      	movs	r3, #0
   1740a:	e7e3      	b.n	173d4 <d_print_comp_inner+0x868>
   1740c:	686a      	ldr	r2, [r5, #4]
   1740e:	f002 f951 	bl	196b4 <d_print_comp>
   17412:	f018 0904 	ands.w	r9, r8, #4
   17416:	f001 82aa 	beq.w	1896e <d_print_comp_inner+0x1e02>
   1741a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1741e:	29ff      	cmp	r1, #255	; 0xff
   17420:	f001 859a 	beq.w	18f58 <d_print_comp_inner+0x23ec>
   17424:	1c4a      	adds	r2, r1, #1
   17426:	232e      	movs	r3, #46	; 0x2e
   17428:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1742c:	5463      	strb	r3, [r4, r1]
   1742e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17432:	68ad      	ldr	r5, [r5, #8]
   17434:	782b      	ldrb	r3, [r5, #0]
   17436:	2b46      	cmp	r3, #70	; 0x46
   17438:	f001 83cc 	beq.w	18bd4 <d_print_comp_inner+0x2068>
   1743c:	462a      	mov	r2, r5
   1743e:	4641      	mov	r1, r8
   17440:	4620      	mov	r0, r4
   17442:	f002 f937 	bl	196b4 <d_print_comp>
   17446:	e45f      	b.n	16d08 <d_print_comp_inner+0x19c>
   17448:	f011 0804 	ands.w	r8, r1, #4
   1744c:	f041 808b 	bne.w	18566 <d_print_comp_inner+0x19fa>
   17450:	68af      	ldr	r7, [r5, #8]
   17452:	686d      	ldr	r5, [r5, #4]
   17454:	2f00      	cmp	r7, #0
   17456:	f43f ac57 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1745a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1745e:	442f      	add	r7, r5
   17460:	e009      	b.n	17476 <d_print_comp_inner+0x90a>
   17462:	460b      	mov	r3, r1
   17464:	3101      	adds	r1, #1
   17466:	42bd      	cmp	r5, r7
   17468:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1746c:	54e6      	strb	r6, [r4, r3]
   1746e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17472:	f43f ac49 	beq.w	16d08 <d_print_comp_inner+0x19c>
   17476:	29ff      	cmp	r1, #255	; 0xff
   17478:	f815 6b01 	ldrb.w	r6, [r5], #1
   1747c:	d1f1      	bne.n	17462 <d_print_comp_inner+0x8f6>
   1747e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17482:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17486:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1748a:	4620      	mov	r0, r4
   1748c:	4798      	blx	r3
   1748e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17492:	3301      	adds	r3, #1
   17494:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17498:	2101      	movs	r1, #1
   1749a:	2300      	movs	r3, #0
   1749c:	e7e3      	b.n	17466 <d_print_comp_inner+0x8fa>
   1749e:	2301      	movs	r3, #1
   174a0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   174a4:	e430      	b.n	16d08 <d_print_comp_inner+0x19c>
   174a6:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   174aa:	2b00      	cmp	r3, #0
   174ac:	f041 8106 	bne.w	186bc <d_print_comp_inner+0x1b50>
   174b0:	1d29      	adds	r1, r5, #4
   174b2:	f7fd fa97 	bl	149e4 <d_lookup_template_argument.isra.6>
   174b6:	2800      	cmp	r0, #0
   174b8:	f43f ac3a 	beq.w	16d30 <d_print_comp_inner+0x1c4>
   174bc:	7803      	ldrb	r3, [r0, #0]
   174be:	2b2f      	cmp	r3, #47	; 0x2f
   174c0:	f001 83fc 	beq.w	18cbc <d_print_comp_inner+0x2150>
   174c4:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   174c8:	682b      	ldr	r3, [r5, #0]
   174ca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   174ce:	4602      	mov	r2, r0
   174d0:	4641      	mov	r1, r8
   174d2:	4620      	mov	r0, r4
   174d4:	f002 f8ee 	bl	196b4 <d_print_comp>
   174d8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   174dc:	e414      	b.n	16d08 <d_print_comp_inner+0x19c>
   174de:	2300      	movs	r3, #0
   174e0:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   174e4:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   174e8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   174ec:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   174f0:	f011 0f04 	tst.w	r1, #4
   174f4:	686e      	ldr	r6, [r5, #4]
   174f6:	d005      	beq.n	17504 <d_print_comp_inner+0x998>
   174f8:	7833      	ldrb	r3, [r6, #0]
   174fa:	b91b      	cbnz	r3, 17504 <d_print_comp_inner+0x998>
   174fc:	68b2      	ldr	r2, [r6, #8]
   174fe:	2a06      	cmp	r2, #6
   17500:	f001 853c 	beq.w	18f7c <d_print_comp_inner+0x2410>
   17504:	4632      	mov	r2, r6
   17506:	4641      	mov	r1, r8
   17508:	4620      	mov	r0, r4
   1750a:	f002 f8d3 	bl	196b4 <d_print_comp>
   1750e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   17512:	2b3c      	cmp	r3, #60	; 0x3c
   17514:	f001 8274 	beq.w	18a00 <d_print_comp_inner+0x1e94>
   17518:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1751c:	2bff      	cmp	r3, #255	; 0xff
   1751e:	f001 8489 	beq.w	18e34 <d_print_comp_inner+0x22c8>
   17522:	1c59      	adds	r1, r3, #1
   17524:	223c      	movs	r2, #60	; 0x3c
   17526:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1752a:	54e2      	strb	r2, [r4, r3]
   1752c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17530:	4641      	mov	r1, r8
   17532:	68aa      	ldr	r2, [r5, #8]
   17534:	4620      	mov	r0, r4
   17536:	f002 f8bd 	bl	196b4 <d_print_comp>
   1753a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1753e:	2b3e      	cmp	r3, #62	; 0x3e
   17540:	f001 8239 	beq.w	189b6 <d_print_comp_inner+0x1e4a>
   17544:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17548:	2bff      	cmp	r3, #255	; 0xff
   1754a:	f001 8460 	beq.w	18e0e <d_print_comp_inner+0x22a2>
   1754e:	1c59      	adds	r1, r3, #1
   17550:	223e      	movs	r2, #62	; 0x3e
   17552:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17556:	54e2      	strb	r2, [r4, r3]
   17558:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1755c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17560:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   17564:	f7ff bbd0 	b.w	16d08 <d_print_comp_inner+0x19c>
   17568:	686f      	ldr	r7, [r5, #4]
   1756a:	2f00      	cmp	r7, #0
   1756c:	f001 8082 	beq.w	18674 <d_print_comp_inner+0x1b08>
   17570:	4d64      	ldr	r5, [pc, #400]	; (17704 <d_print_comp_inner+0xb98>)
   17572:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17576:	f105 0906 	add.w	r9, r5, #6
   1757a:	f04f 0800 	mov.w	r8, #0
   1757e:	e009      	b.n	17594 <d_print_comp_inner+0xa28>
   17580:	460b      	mov	r3, r1
   17582:	3101      	adds	r1, #1
   17584:	45a9      	cmp	r9, r5
   17586:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1758a:	54e6      	strb	r6, [r4, r3]
   1758c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17590:	f000 8782 	beq.w	18498 <d_print_comp_inner+0x192c>
   17594:	29ff      	cmp	r1, #255	; 0xff
   17596:	f815 6b01 	ldrb.w	r6, [r5], #1
   1759a:	d1f1      	bne.n	17580 <d_print_comp_inner+0xa14>
   1759c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   175a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   175a8:	4620      	mov	r0, r4
   175aa:	4798      	blx	r3
   175ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175b0:	3301      	adds	r3, #1
   175b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   175b6:	2101      	movs	r1, #1
   175b8:	2300      	movs	r3, #0
   175ba:	e7e3      	b.n	17584 <d_print_comp_inner+0xa18>
   175bc:	4e52      	ldr	r6, [pc, #328]	; (17708 <d_print_comp_inner+0xb9c>)
   175be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   175c2:	f106 0a0a 	add.w	sl, r6, #10
   175c6:	f04f 0900 	mov.w	r9, #0
   175ca:	e009      	b.n	175e0 <d_print_comp_inner+0xa74>
   175cc:	460b      	mov	r3, r1
   175ce:	3101      	adds	r1, #1
   175d0:	4556      	cmp	r6, sl
   175d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175d6:	54e7      	strb	r7, [r4, r3]
   175d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   175dc:	f000 8701 	beq.w	183e2 <d_print_comp_inner+0x1876>
   175e0:	29ff      	cmp	r1, #255	; 0xff
   175e2:	f816 7b01 	ldrb.w	r7, [r6], #1
   175e6:	d1f1      	bne.n	175cc <d_print_comp_inner+0xa60>
   175e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   175ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   175f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   175f4:	4620      	mov	r0, r4
   175f6:	4798      	blx	r3
   175f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175fc:	3301      	adds	r3, #1
   175fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17602:	2101      	movs	r1, #1
   17604:	2300      	movs	r3, #0
   17606:	e7e3      	b.n	175d0 <d_print_comp_inner+0xa64>
   17608:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1760c:	792d      	ldrb	r5, [r5, #4]
   1760e:	29ff      	cmp	r1, #255	; 0xff
   17610:	f001 82ab 	beq.w	18b6a <d_print_comp_inner+0x1ffe>
   17614:	1c4b      	adds	r3, r1, #1
   17616:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1761a:	5465      	strb	r5, [r4, r1]
   1761c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   17620:	f7ff bb72 	b.w	16d08 <d_print_comp_inner+0x19c>
   17624:	686a      	ldr	r2, [r5, #4]
   17626:	f002 f845 	bl	196b4 <d_print_comp>
   1762a:	68aa      	ldr	r2, [r5, #8]
   1762c:	4641      	mov	r1, r8
   1762e:	4620      	mov	r0, r4
   17630:	f002 f840 	bl	196b4 <d_print_comp>
   17634:	f7ff bb68 	b.w	16d08 <d_print_comp_inner+0x19c>
   17638:	4e34      	ldr	r6, [pc, #208]	; (1770c <d_print_comp_inner+0xba0>)
   1763a:	686a      	ldr	r2, [r5, #4]
   1763c:	f002 f83a 	bl	196b4 <d_print_comp>
   17640:	f106 0a08 	add.w	sl, r6, #8
   17644:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17648:	f04f 0900 	mov.w	r9, #0
   1764c:	e009      	b.n	17662 <d_print_comp_inner+0xaf6>
   1764e:	460b      	mov	r3, r1
   17650:	3101      	adds	r1, #1
   17652:	4556      	cmp	r6, sl
   17654:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17658:	54e7      	strb	r7, [r4, r3]
   1765a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1765e:	f000 8508 	beq.w	18072 <d_print_comp_inner+0x1506>
   17662:	29ff      	cmp	r1, #255	; 0xff
   17664:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17668:	d1f1      	bne.n	1764e <d_print_comp_inner+0xae2>
   1766a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1766e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17672:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17676:	4620      	mov	r0, r4
   17678:	4798      	blx	r3
   1767a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1767e:	3301      	adds	r3, #1
   17680:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17684:	2101      	movs	r1, #1
   17686:	2300      	movs	r3, #0
   17688:	e7e3      	b.n	17652 <d_print_comp_inner+0xae6>
   1768a:	686a      	ldr	r2, [r5, #4]
   1768c:	b10a      	cbz	r2, 17692 <d_print_comp_inner+0xb26>
   1768e:	f002 f811 	bl	196b4 <d_print_comp>
   17692:	68ab      	ldr	r3, [r5, #8]
   17694:	2b00      	cmp	r3, #0
   17696:	f43f ab37 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1769a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   1769e:	2efd      	cmp	r6, #253	; 0xfd
   176a0:	f201 81bc 	bhi.w	18a1c <d_print_comp_inner+0x1eb0>
   176a4:	4f1a      	ldr	r7, [pc, #104]	; (17710 <d_print_comp_inner+0xba4>)
   176a6:	f04f 0a00 	mov.w	sl, #0
   176aa:	f107 0b02 	add.w	fp, r7, #2
   176ae:	4631      	mov	r1, r6
   176b0:	e009      	b.n	176c6 <d_print_comp_inner+0xb5a>
   176b2:	460b      	mov	r3, r1
   176b4:	3101      	adds	r1, #1
   176b6:	455f      	cmp	r7, fp
   176b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176bc:	54e6      	strb	r6, [r4, r3]
   176be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   176c2:	f000 86c1 	beq.w	18448 <d_print_comp_inner+0x18dc>
   176c6:	29ff      	cmp	r1, #255	; 0xff
   176c8:	f817 6b01 	ldrb.w	r6, [r7], #1
   176cc:	d1f1      	bne.n	176b2 <d_print_comp_inner+0xb46>
   176ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176d2:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   176d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176da:	4620      	mov	r0, r4
   176dc:	4798      	blx	r3
   176de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176e2:	3301      	adds	r3, #1
   176e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176e8:	2101      	movs	r1, #1
   176ea:	2300      	movs	r3, #0
   176ec:	e7e3      	b.n	176b6 <d_print_comp_inner+0xb4a>
   176ee:	4e09      	ldr	r6, [pc, #36]	; (17714 <d_print_comp_inner+0xba8>)
   176f0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   176f4:	f106 0a09 	add.w	sl, r6, #9
   176f8:	f04f 0900 	mov.w	r9, #0
   176fc:	e016      	b.n	1772c <d_print_comp_inner+0xbc0>
   176fe:	bf00      	nop
   17700:	00024344 	.word	0x00024344
   17704:	00024550 	.word	0x00024550
   17708:	0002453c 	.word	0x0002453c
   1770c:	000245b7 	.word	0x000245b7
   17710:	000244d8 	.word	0x000244d8
   17714:	000244e7 	.word	0x000244e7
   17718:	460b      	mov	r3, r1
   1771a:	3101      	adds	r1, #1
   1771c:	4556      	cmp	r6, sl
   1771e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17722:	54e7      	strb	r7, [r4, r3]
   17724:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17728:	f000 8594 	beq.w	18254 <d_print_comp_inner+0x16e8>
   1772c:	29ff      	cmp	r1, #255	; 0xff
   1772e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17732:	d1f1      	bne.n	17718 <d_print_comp_inner+0xbac>
   17734:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17738:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1773c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17740:	4620      	mov	r0, r4
   17742:	4798      	blx	r3
   17744:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17748:	3301      	adds	r3, #1
   1774a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1774e:	2101      	movs	r1, #1
   17750:	2300      	movs	r3, #0
   17752:	e7e3      	b.n	1771c <d_print_comp_inner+0xbb0>
   17754:	4ed1      	ldr	r6, [pc, #836]	; (17a9c <d_print_comp_inner+0xf30>)
   17756:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1775a:	f106 0a09 	add.w	sl, r6, #9
   1775e:	f04f 0900 	mov.w	r9, #0
   17762:	e009      	b.n	17778 <d_print_comp_inner+0xc0c>
   17764:	460b      	mov	r3, r1
   17766:	3101      	adds	r1, #1
   17768:	4556      	cmp	r6, sl
   1776a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1776e:	54e7      	strb	r7, [r4, r3]
   17770:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17774:	f000 8597 	beq.w	182a6 <d_print_comp_inner+0x173a>
   17778:	29ff      	cmp	r1, #255	; 0xff
   1777a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1777e:	d1f1      	bne.n	17764 <d_print_comp_inner+0xbf8>
   17780:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17784:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17788:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1778c:	4620      	mov	r0, r4
   1778e:	4798      	blx	r3
   17790:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17794:	3301      	adds	r3, #1
   17796:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1779a:	2101      	movs	r1, #1
   1779c:	2300      	movs	r3, #0
   1779e:	e7e3      	b.n	17768 <d_print_comp_inner+0xbfc>
   177a0:	f8d5 a004 	ldr.w	sl, [r5, #4]
   177a4:	4dbe      	ldr	r5, [pc, #760]	; (17aa0 <d_print_comp_inner+0xf34>)
   177a6:	f8da 7008 	ldr.w	r7, [sl, #8]
   177aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   177ae:	f105 0808 	add.w	r8, r5, #8
   177b2:	f04f 0900 	mov.w	r9, #0
   177b6:	e009      	b.n	177cc <d_print_comp_inner+0xc60>
   177b8:	460b      	mov	r3, r1
   177ba:	3101      	adds	r1, #1
   177bc:	45a8      	cmp	r8, r5
   177be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   177c2:	54e6      	strb	r6, [r4, r3]
   177c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   177c8:	f000 8506 	beq.w	181d8 <d_print_comp_inner+0x166c>
   177cc:	29ff      	cmp	r1, #255	; 0xff
   177ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   177d2:	d1f1      	bne.n	177b8 <d_print_comp_inner+0xc4c>
   177d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   177d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   177dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   177e0:	4620      	mov	r0, r4
   177e2:	4798      	blx	r3
   177e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177e8:	3301      	adds	r3, #1
   177ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   177ee:	2101      	movs	r1, #1
   177f0:	2300      	movs	r3, #0
   177f2:	e7e3      	b.n	177bc <d_print_comp_inner+0xc50>
   177f4:	686a      	ldr	r2, [r5, #4]
   177f6:	68ae      	ldr	r6, [r5, #8]
   177f8:	b10a      	cbz	r2, 177fe <d_print_comp_inner+0xc92>
   177fa:	f001 ff5b 	bl	196b4 <d_print_comp>
   177fe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17802:	2bff      	cmp	r3, #255	; 0xff
   17804:	f001 82b1 	beq.w	18d6a <d_print_comp_inner+0x21fe>
   17808:	1c5a      	adds	r2, r3, #1
   1780a:	257b      	movs	r5, #123	; 0x7b
   1780c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17810:	4641      	mov	r1, r8
   17812:	54e5      	strb	r5, [r4, r3]
   17814:	4632      	mov	r2, r6
   17816:	4620      	mov	r0, r4
   17818:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1781c:	f001 ff4a 	bl	196b4 <d_print_comp>
   17820:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17824:	29ff      	cmp	r1, #255	; 0xff
   17826:	f001 81e7 	beq.w	18bf8 <d_print_comp_inner+0x208c>
   1782a:	1c4a      	adds	r2, r1, #1
   1782c:	237d      	movs	r3, #125	; 0x7d
   1782e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17832:	5463      	strb	r3, [r4, r1]
   17834:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17838:	f7ff ba66 	b.w	16d08 <d_print_comp_inner+0x19c>
   1783c:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17840:	68ae      	ldr	r6, [r5, #8]
   17842:	f899 3000 	ldrb.w	r3, [r9]
   17846:	2b31      	cmp	r3, #49	; 0x31
   17848:	f000 87cb 	beq.w	187e2 <d_print_comp_inner+0x1c76>
   1784c:	2b33      	cmp	r3, #51	; 0x33
   1784e:	f041 86d3 	bne.w	195f8 <d_print_comp_inner+0x2a8c>
   17852:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17856:	29ff      	cmp	r1, #255	; 0xff
   17858:	f001 84c3 	beq.w	191e2 <d_print_comp_inner+0x2676>
   1785c:	1c4a      	adds	r2, r1, #1
   1785e:	2328      	movs	r3, #40	; 0x28
   17860:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17864:	5463      	strb	r3, [r4, r1]
   17866:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1786a:	a904      	add	r1, sp, #16
   1786c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17870:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   17874:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17878:	4620      	mov	r0, r4
   1787a:	4641      	mov	r1, r8
   1787c:	9305      	str	r3, [sp, #20]
   1787e:	9204      	str	r2, [sp, #16]
   17880:	f7ff f974 	bl	16b6c <d_print_comp_inner>
   17884:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17888:	9b05      	ldr	r3, [sp, #20]
   1788a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1788e:	29ff      	cmp	r1, #255	; 0xff
   17890:	f001 8496 	beq.w	191c0 <d_print_comp_inner+0x2654>
   17894:	2329      	movs	r3, #41	; 0x29
   17896:	1c4a      	adds	r2, r1, #1
   17898:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1789c:	5463      	strb	r3, [r4, r1]
   1789e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   178a2:	4632      	mov	r2, r6
   178a4:	4641      	mov	r1, r8
   178a6:	4620      	mov	r0, r4
   178a8:	f002 fd2a 	bl	1a300 <d_print_subexpr>
   178ac:	f7ff ba2c 	b.w	16d08 <d_print_comp_inner+0x19c>
   178b0:	686a      	ldr	r2, [r5, #4]
   178b2:	f002 fce7 	bl	1a284 <d_print_expr_op>
   178b6:	f7ff ba27 	b.w	16d08 <d_print_comp_inner+0x19c>
   178ba:	f011 0f20 	tst.w	r1, #32
   178be:	f040 8753 	bne.w	18768 <d_print_comp_inner+0x1bfc>
   178c2:	686a      	ldr	r2, [r5, #4]
   178c4:	b11a      	cbz	r2, 178ce <d_print_comp_inner+0xd62>
   178c6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   178ca:	f001 81d0 	beq.w	18c6e <d_print_comp_inner+0x2102>
   178ce:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   178d2:	f105 0208 	add.w	r2, r5, #8
   178d6:	4641      	mov	r1, r8
   178d8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   178dc:	4620      	mov	r0, r4
   178de:	f002 fbdd 	bl	1a09c <d_print_function_type.isra.11>
   178e2:	f7ff ba11 	b.w	16d08 <d_print_comp_inner+0x19c>
   178e6:	f011 0804 	ands.w	r8, r1, #4
   178ea:	686b      	ldr	r3, [r5, #4]
   178ec:	f040 8612 	bne.w	18514 <d_print_comp_inner+0x19a8>
   178f0:	e893 00a0 	ldmia.w	r3, {r5, r7}
   178f4:	2f00      	cmp	r7, #0
   178f6:	f43f aa07 	beq.w	16d08 <d_print_comp_inner+0x19c>
   178fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178fe:	442f      	add	r7, r5
   17900:	e009      	b.n	17916 <d_print_comp_inner+0xdaa>
   17902:	460b      	mov	r3, r1
   17904:	3101      	adds	r1, #1
   17906:	42bd      	cmp	r5, r7
   17908:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1790c:	54e6      	strb	r6, [r4, r3]
   1790e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17912:	f43f a9f9 	beq.w	16d08 <d_print_comp_inner+0x19c>
   17916:	29ff      	cmp	r1, #255	; 0xff
   17918:	f815 6b01 	ldrb.w	r6, [r5], #1
   1791c:	d1f1      	bne.n	17902 <d_print_comp_inner+0xd96>
   1791e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17922:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17926:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1792a:	4620      	mov	r0, r4
   1792c:	4798      	blx	r3
   1792e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17932:	3301      	adds	r3, #1
   17934:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17938:	2101      	movs	r1, #1
   1793a:	2300      	movs	r3, #0
   1793c:	e7e3      	b.n	17906 <d_print_comp_inner+0xd9a>
   1793e:	6869      	ldr	r1, [r5, #4]
   17940:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17944:	780b      	ldrb	r3, [r1, #0]
   17946:	2f00      	cmp	r7, #0
   17948:	f040 85e1 	bne.w	1850e <d_print_comp_inner+0x19a2>
   1794c:	2b05      	cmp	r3, #5
   1794e:	f001 81c7 	beq.w	18ce0 <d_print_comp_inner+0x2174>
   17952:	2b23      	cmp	r3, #35	; 0x23
   17954:	f000 8689 	beq.w	1866a <d_print_comp_inner+0x1afe>
   17958:	782a      	ldrb	r2, [r5, #0]
   1795a:	429a      	cmp	r2, r3
   1795c:	f000 8685 	beq.w	1866a <d_print_comp_inner+0x1afe>
   17960:	2b24      	cmp	r3, #36	; 0x24
   17962:	f47f a9eb 	bne.w	16d3c <d_print_comp_inner+0x1d0>
   17966:	a814      	add	r0, sp, #80	; 0x50
   17968:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1796c:	684a      	ldr	r2, [r1, #4]
   1796e:	f840 3d40 	str.w	r3, [r0, #-64]!
   17972:	2100      	movs	r1, #0
   17974:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17978:	9505      	str	r5, [sp, #20]
   1797a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   1797e:	9106      	str	r1, [sp, #24]
   17980:	9307      	str	r3, [sp, #28]
   17982:	2a00      	cmp	r2, #0
   17984:	f47f a9e8 	bne.w	16d58 <d_print_comp_inner+0x1ec>
   17988:	f7ff b9e5 	b.w	16d56 <d_print_comp_inner+0x1ea>
   1798c:	686a      	ldr	r2, [r5, #4]
   1798e:	f001 fe91 	bl	196b4 <d_print_comp>
   17992:	f7ff b9b9 	b.w	16d08 <d_print_comp_inner+0x19c>
   17996:	ab14      	add	r3, sp, #80	; 0x50
   17998:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   1799c:	f843 2d40 	str.w	r2, [r3, #-64]!
   179a0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   179a4:	68aa      	ldr	r2, [r5, #8]
   179a6:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   179aa:	9307      	str	r3, [sp, #28]
   179ac:	2600      	movs	r6, #0
   179ae:	9505      	str	r5, [sp, #20]
   179b0:	9606      	str	r6, [sp, #24]
   179b2:	f001 fe7f 	bl	196b4 <d_print_comp>
   179b6:	9b06      	ldr	r3, [sp, #24]
   179b8:	b923      	cbnz	r3, 179c4 <d_print_comp_inner+0xe58>
   179ba:	462a      	mov	r2, r5
   179bc:	4641      	mov	r1, r8
   179be:	4620      	mov	r0, r4
   179c0:	f001 fe88 	bl	196d4 <d_print_mod>
   179c4:	9b04      	ldr	r3, [sp, #16]
   179c6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   179ca:	f7ff b99d 	b.w	16d08 <d_print_comp_inner+0x19c>
   179ce:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   179d2:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   179d6:	f849 bd40 	str.w	fp, [r9, #-64]!
   179da:	2200      	movs	r2, #0
   179dc:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   179e0:	f8cd b000 	str.w	fp, [sp]
   179e4:	4659      	mov	r1, fp
   179e6:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   179ea:	9505      	str	r5, [sp, #20]
   179ec:	9206      	str	r2, [sp, #24]
   179ee:	9307      	str	r3, [sp, #28]
   179f0:	2900      	cmp	r1, #0
   179f2:	f001 83a0 	beq.w	19136 <d_print_comp_inner+0x25ca>
   179f6:	684b      	ldr	r3, [r1, #4]
   179f8:	781b      	ldrb	r3, [r3, #0]
   179fa:	3b19      	subs	r3, #25
   179fc:	2b02      	cmp	r3, #2
   179fe:	f201 839a 	bhi.w	19136 <d_print_comp_inner+0x25ca>
   17a02:	46ac      	mov	ip, r5
   17a04:	2701      	movs	r7, #1
   17a06:	460e      	mov	r6, r1
   17a08:	464d      	mov	r5, r9
   17a0a:	e004      	b.n	17a16 <d_print_comp_inner+0xeaa>
   17a0c:	6873      	ldr	r3, [r6, #4]
   17a0e:	781b      	ldrb	r3, [r3, #0]
   17a10:	3b19      	subs	r3, #25
   17a12:	2b02      	cmp	r3, #2
   17a14:	d81b      	bhi.n	17a4e <d_print_comp_inner+0xee2>
   17a16:	68b3      	ldr	r3, [r6, #8]
   17a18:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17a1c:	aa14      	add	r2, sp, #80	; 0x50
   17a1e:	eb02 0b0e 	add.w	fp, r2, lr
   17a22:	b98b      	cbnz	r3, 17a48 <d_print_comp_inner+0xedc>
   17a24:	2f03      	cmp	r7, #3
   17a26:	f201 80f9 	bhi.w	18c1c <d_print_comp_inner+0x20b0>
   17a2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17a2e:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17a32:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17a36:	f84b 5c40 	str.w	r5, [fp, #-64]
   17a3a:	2301      	movs	r3, #1
   17a3c:	eb09 050e 	add.w	r5, r9, lr
   17a40:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17a44:	3701      	adds	r7, #1
   17a46:	60b3      	str	r3, [r6, #8]
   17a48:	6836      	ldr	r6, [r6, #0]
   17a4a:	2e00      	cmp	r6, #0
   17a4c:	d1de      	bne.n	17a0c <d_print_comp_inner+0xea0>
   17a4e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17a52:	4641      	mov	r1, r8
   17a54:	4620      	mov	r0, r4
   17a56:	4665      	mov	r5, ip
   17a58:	f001 fe2c 	bl	196b4 <d_print_comp>
   17a5c:	9b06      	ldr	r3, [sp, #24]
   17a5e:	9a00      	ldr	r2, [sp, #0]
   17a60:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17a64:	2b00      	cmp	r3, #0
   17a66:	f47f a94f 	bne.w	16d08 <d_print_comp_inner+0x19c>
   17a6a:	2f01      	cmp	r7, #1
   17a6c:	d00c      	beq.n	17a88 <d_print_comp_inner+0xf1c>
   17a6e:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17a72:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17a76:	3f01      	subs	r7, #1
   17a78:	4641      	mov	r1, r8
   17a7a:	4620      	mov	r0, r4
   17a7c:	f001 fe2a 	bl	196d4 <d_print_mod>
   17a80:	2f01      	cmp	r7, #1
   17a82:	f1a9 0910 	sub.w	r9, r9, #16
   17a86:	d1f4      	bne.n	17a72 <d_print_comp_inner+0xf06>
   17a88:	1d2a      	adds	r2, r5, #4
   17a8a:	4641      	mov	r1, r8
   17a8c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17a90:	4620      	mov	r0, r4
   17a92:	f002 fa27 	bl	19ee4 <d_print_array_type.isra.10>
   17a96:	f7ff b937 	b.w	16d08 <d_print_comp_inner+0x19c>
   17a9a:	bf00      	nop
   17a9c:	000244e7 	.word	0x000244e7
   17aa0:	000244db 	.word	0x000244db
   17aa4:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17aa8:	2b00      	cmp	r3, #0
   17aaa:	f040 8674 	bne.w	18796 <d_print_comp_inner+0x1c2a>
   17aae:	686a      	ldr	r2, [r5, #4]
   17ab0:	4bd5      	ldr	r3, [pc, #852]	; (17e08 <d_print_comp_inner+0x129c>)
   17ab2:	6851      	ldr	r1, [r2, #4]
   17ab4:	4299      	cmp	r1, r3
   17ab6:	f000 866a 	beq.w	1878e <d_print_comp_inner+0x1c22>
   17aba:	4641      	mov	r1, r8
   17abc:	4620      	mov	r0, r4
   17abe:	f001 fdf9 	bl	196b4 <d_print_comp>
   17ac2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17ac6:	2bff      	cmp	r3, #255	; 0xff
   17ac8:	f001 82b2 	beq.w	19030 <d_print_comp_inner+0x24c4>
   17acc:	1c59      	adds	r1, r3, #1
   17ace:	2220      	movs	r2, #32
   17ad0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ad4:	54e2      	strb	r2, [r4, r3]
   17ad6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17ada:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17ade:	2b00      	cmp	r3, #0
   17ae0:	f000 8595 	beq.w	1860e <d_print_comp_inner+0x1aa2>
   17ae4:	4dc9      	ldr	r5, [pc, #804]	; (17e0c <d_print_comp_inner+0x12a0>)
   17ae6:	f04f 0800 	mov.w	r8, #0
   17aea:	1daf      	adds	r7, r5, #6
   17aec:	e009      	b.n	17b02 <d_print_comp_inner+0xf96>
   17aee:	460b      	mov	r3, r1
   17af0:	3101      	adds	r1, #1
   17af2:	42bd      	cmp	r5, r7
   17af4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17af8:	54e6      	strb	r6, [r4, r3]
   17afa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17afe:	f43f a903 	beq.w	16d08 <d_print_comp_inner+0x19c>
   17b02:	29ff      	cmp	r1, #255	; 0xff
   17b04:	f815 6b01 	ldrb.w	r6, [r5], #1
   17b08:	d1f1      	bne.n	17aee <d_print_comp_inner+0xf82>
   17b0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b0e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17b12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b16:	4620      	mov	r0, r4
   17b18:	4798      	blx	r3
   17b1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b1e:	3301      	adds	r3, #1
   17b20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b24:	2101      	movs	r1, #1
   17b26:	2300      	movs	r3, #0
   17b28:	e7e3      	b.n	17af2 <d_print_comp_inner+0xf86>
   17b2a:	4eb9      	ldr	r6, [pc, #740]	; (17e10 <d_print_comp_inner+0x12a4>)
   17b2c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b30:	f106 090e 	add.w	r9, r6, #14
   17b34:	f04f 0800 	mov.w	r8, #0
   17b38:	e009      	b.n	17b4e <d_print_comp_inner+0xfe2>
   17b3a:	460b      	mov	r3, r1
   17b3c:	3101      	adds	r1, #1
   17b3e:	45b1      	cmp	r9, r6
   17b40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b44:	54e7      	strb	r7, [r4, r3]
   17b46:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17b4a:	f000 83b3 	beq.w	182b4 <d_print_comp_inner+0x1748>
   17b4e:	29ff      	cmp	r1, #255	; 0xff
   17b50:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17b54:	d1f1      	bne.n	17b3a <d_print_comp_inner+0xfce>
   17b56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b5a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17b5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b62:	4620      	mov	r0, r4
   17b64:	4798      	blx	r3
   17b66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b6a:	3301      	adds	r3, #1
   17b6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b70:	2101      	movs	r1, #1
   17b72:	2300      	movs	r3, #0
   17b74:	e7e3      	b.n	17b3e <d_print_comp_inner+0xfd2>
   17b76:	4ea7      	ldr	r6, [pc, #668]	; (17e14 <d_print_comp_inner+0x12a8>)
   17b78:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b7c:	f106 0a1a 	add.w	sl, r6, #26
   17b80:	f04f 0900 	mov.w	r9, #0
   17b84:	e009      	b.n	17b9a <d_print_comp_inner+0x102e>
   17b86:	460b      	mov	r3, r1
   17b88:	3101      	adds	r1, #1
   17b8a:	4556      	cmp	r6, sl
   17b8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b90:	54e7      	strb	r7, [r4, r3]
   17b92:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17b96:	f000 82ef 	beq.w	18178 <d_print_comp_inner+0x160c>
   17b9a:	29ff      	cmp	r1, #255	; 0xff
   17b9c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17ba0:	d1f1      	bne.n	17b86 <d_print_comp_inner+0x101a>
   17ba2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ba6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17baa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bae:	4620      	mov	r0, r4
   17bb0:	4798      	blx	r3
   17bb2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bb6:	3301      	adds	r3, #1
   17bb8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17bbc:	2101      	movs	r1, #1
   17bbe:	2300      	movs	r3, #0
   17bc0:	e7e3      	b.n	17b8a <d_print_comp_inner+0x101e>
   17bc2:	6869      	ldr	r1, [r5, #4]
   17bc4:	f7fc ff2a 	bl	14a1c <d_find_pack>
   17bc8:	f04f 0900 	mov.w	r9, #0
   17bcc:	2800      	cmp	r0, #0
   17bce:	f001 835d 	beq.w	1928c <d_print_comp_inner+0x2720>
   17bd2:	7803      	ldrb	r3, [r0, #0]
   17bd4:	2b2f      	cmp	r3, #47	; 0x2f
   17bd6:	f040 8457 	bne.w	18488 <d_print_comp_inner+0x191c>
   17bda:	6843      	ldr	r3, [r0, #4]
   17bdc:	2b00      	cmp	r3, #0
   17bde:	f000 8453 	beq.w	18488 <d_print_comp_inner+0x191c>
   17be2:	6880      	ldr	r0, [r0, #8]
   17be4:	f109 0901 	add.w	r9, r9, #1
   17be8:	2800      	cmp	r0, #0
   17bea:	d1f2      	bne.n	17bd2 <d_print_comp_inner+0x1066>
   17bec:	686b      	ldr	r3, [r5, #4]
   17bee:	9300      	str	r3, [sp, #0]
   17bf0:	f109 33ff 	add.w	r3, r9, #4294967295
   17bf4:	9301      	str	r3, [sp, #4]
   17bf6:	f04f 0a00 	mov.w	sl, #0
   17bfa:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   17bfe:	9a00      	ldr	r2, [sp, #0]
   17c00:	4641      	mov	r1, r8
   17c02:	4620      	mov	r0, r4
   17c04:	f001 fd56 	bl	196b4 <d_print_comp>
   17c08:	9b01      	ldr	r3, [sp, #4]
   17c0a:	42bb      	cmp	r3, r7
   17c0c:	f340 81ab 	ble.w	17f66 <d_print_comp_inner+0x13fa>
   17c10:	4d81      	ldr	r5, [pc, #516]	; (17e18 <d_print_comp_inner+0x12ac>)
   17c12:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17c16:	f105 0b02 	add.w	fp, r5, #2
   17c1a:	e009      	b.n	17c30 <d_print_comp_inner+0x10c4>
   17c1c:	460b      	mov	r3, r1
   17c1e:	3101      	adds	r1, #1
   17c20:	45ab      	cmp	fp, r5
   17c22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c26:	54e6      	strb	r6, [r4, r3]
   17c28:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17c2c:	f000 819b 	beq.w	17f66 <d_print_comp_inner+0x13fa>
   17c30:	29ff      	cmp	r1, #255	; 0xff
   17c32:	f815 6b01 	ldrb.w	r6, [r5], #1
   17c36:	d1f1      	bne.n	17c1c <d_print_comp_inner+0x10b0>
   17c38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c3c:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17c40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c44:	4620      	mov	r0, r4
   17c46:	4798      	blx	r3
   17c48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c4c:	3301      	adds	r3, #1
   17c4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c52:	2101      	movs	r1, #1
   17c54:	2300      	movs	r3, #0
   17c56:	e7e3      	b.n	17c20 <d_print_comp_inner+0x10b4>
   17c58:	4e70      	ldr	r6, [pc, #448]	; (17e1c <d_print_comp_inner+0x12b0>)
   17c5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c5e:	f106 0a16 	add.w	sl, r6, #22
   17c62:	f04f 0900 	mov.w	r9, #0
   17c66:	e009      	b.n	17c7c <d_print_comp_inner+0x1110>
   17c68:	460b      	mov	r3, r1
   17c6a:	3101      	adds	r1, #1
   17c6c:	45b2      	cmp	sl, r6
   17c6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c72:	54e7      	strb	r7, [r4, r3]
   17c74:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c78:	f000 835f 	beq.w	1833a <d_print_comp_inner+0x17ce>
   17c7c:	29ff      	cmp	r1, #255	; 0xff
   17c7e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c82:	d1f1      	bne.n	17c68 <d_print_comp_inner+0x10fc>
   17c84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c88:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c90:	4620      	mov	r0, r4
   17c92:	4798      	blx	r3
   17c94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c98:	3301      	adds	r3, #1
   17c9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c9e:	2101      	movs	r1, #1
   17ca0:	2300      	movs	r3, #0
   17ca2:	e7e3      	b.n	17c6c <d_print_comp_inner+0x1100>
   17ca4:	4e5e      	ldr	r6, [pc, #376]	; (17e20 <d_print_comp_inner+0x12b4>)
   17ca6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17caa:	f106 0a0e 	add.w	sl, r6, #14
   17cae:	f04f 0900 	mov.w	r9, #0
   17cb2:	e009      	b.n	17cc8 <d_print_comp_inner+0x115c>
   17cb4:	460b      	mov	r3, r1
   17cb6:	3101      	adds	r1, #1
   17cb8:	4556      	cmp	r6, sl
   17cba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cbe:	54e7      	strb	r7, [r4, r3]
   17cc0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17cc4:	f000 83a0 	beq.w	18408 <d_print_comp_inner+0x189c>
   17cc8:	29ff      	cmp	r1, #255	; 0xff
   17cca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17cce:	d1f1      	bne.n	17cb4 <d_print_comp_inner+0x1148>
   17cd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17cd4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17cd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17cdc:	4620      	mov	r0, r4
   17cde:	4798      	blx	r3
   17ce0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ce4:	3301      	adds	r3, #1
   17ce6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17cea:	2101      	movs	r1, #1
   17cec:	2300      	movs	r3, #0
   17cee:	e7e3      	b.n	17cb8 <d_print_comp_inner+0x114c>
   17cf0:	686a      	ldr	r2, [r5, #4]
   17cf2:	7811      	ldrb	r1, [r2, #0]
   17cf4:	2927      	cmp	r1, #39	; 0x27
   17cf6:	f000 8615 	beq.w	18924 <d_print_comp_inner+0x1db8>
   17cfa:	2600      	movs	r6, #0
   17cfc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17d00:	29ff      	cmp	r1, #255	; 0xff
   17d02:	f001 80c5 	beq.w	18e90 <d_print_comp_inner+0x2324>
   17d06:	2328      	movs	r3, #40	; 0x28
   17d08:	1c4a      	adds	r2, r1, #1
   17d0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17d0e:	5463      	strb	r3, [r4, r1]
   17d10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17d14:	686a      	ldr	r2, [r5, #4]
   17d16:	4641      	mov	r1, r8
   17d18:	4620      	mov	r0, r4
   17d1a:	f001 fccb 	bl	196b4 <d_print_comp>
   17d1e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17d22:	2bff      	cmp	r3, #255	; 0xff
   17d24:	f001 8099 	beq.w	18e5a <d_print_comp_inner+0x22ee>
   17d28:	1c59      	adds	r1, r3, #1
   17d2a:	2229      	movs	r2, #41	; 0x29
   17d2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d30:	54e2      	strb	r2, [r4, r3]
   17d32:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17d36:	782b      	ldrb	r3, [r5, #0]
   17d38:	2b3d      	cmp	r3, #61	; 0x3d
   17d3a:	f000 86e6 	beq.w	18b0a <d_print_comp_inner+0x1f9e>
   17d3e:	2e08      	cmp	r6, #8
   17d40:	f000 867f 	beq.w	18a42 <d_print_comp_inner+0x1ed6>
   17d44:	68aa      	ldr	r2, [r5, #8]
   17d46:	4641      	mov	r1, r8
   17d48:	4620      	mov	r0, r4
   17d4a:	f001 fcb3 	bl	196b4 <d_print_comp>
   17d4e:	f7fe bfdb 	b.w	16d08 <d_print_comp_inner+0x19c>
   17d52:	2301      	movs	r3, #1
   17d54:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17d58:	f7fe bfd6 	b.w	16d08 <d_print_comp_inner+0x19c>
   17d5c:	686a      	ldr	r2, [r5, #4]
   17d5e:	4931      	ldr	r1, [pc, #196]	; (17e24 <d_print_comp_inner+0x12b8>)
   17d60:	a804      	add	r0, sp, #16
   17d62:	f006 fde3 	bl	1e92c <sprintf>
   17d66:	a804      	add	r0, sp, #16
   17d68:	f006 ff8a 	bl	1ec80 <strlen>
   17d6c:	2800      	cmp	r0, #0
   17d6e:	f43e afcb 	beq.w	16d08 <d_print_comp_inner+0x19c>
   17d72:	ad04      	add	r5, sp, #16
   17d74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17d78:	182f      	adds	r7, r5, r0
   17d7a:	f04f 0800 	mov.w	r8, #0
   17d7e:	e009      	b.n	17d94 <d_print_comp_inner+0x1228>
   17d80:	460b      	mov	r3, r1
   17d82:	3101      	adds	r1, #1
   17d84:	42bd      	cmp	r5, r7
   17d86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d8a:	54e6      	strb	r6, [r4, r3]
   17d8c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17d90:	f43e afba 	beq.w	16d08 <d_print_comp_inner+0x19c>
   17d94:	29ff      	cmp	r1, #255	; 0xff
   17d96:	f815 6b01 	ldrb.w	r6, [r5], #1
   17d9a:	d1f1      	bne.n	17d80 <d_print_comp_inner+0x1214>
   17d9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17da0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17da4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17da8:	4620      	mov	r0, r4
   17daa:	4798      	blx	r3
   17dac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17db0:	3301      	adds	r3, #1
   17db2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17db6:	2101      	movs	r1, #1
   17db8:	2300      	movs	r3, #0
   17dba:	e7e3      	b.n	17d84 <d_print_comp_inner+0x1218>
   17dbc:	4e1a      	ldr	r6, [pc, #104]	; (17e28 <d_print_comp_inner+0x12bc>)
   17dbe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17dc2:	f106 0a1c 	add.w	sl, r6, #28
   17dc6:	f04f 0900 	mov.w	r9, #0
   17dca:	e009      	b.n	17de0 <d_print_comp_inner+0x1274>
   17dcc:	460b      	mov	r3, r1
   17dce:	3101      	adds	r1, #1
   17dd0:	4556      	cmp	r6, sl
   17dd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17dd6:	54e7      	strb	r7, [r4, r3]
   17dd8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ddc:	f000 82fa 	beq.w	183d4 <d_print_comp_inner+0x1868>
   17de0:	29ff      	cmp	r1, #255	; 0xff
   17de2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17de6:	d1f1      	bne.n	17dcc <d_print_comp_inner+0x1260>
   17de8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17dec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17df0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17df4:	4620      	mov	r0, r4
   17df6:	4798      	blx	r3
   17df8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17dfc:	3301      	adds	r3, #1
   17dfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e02:	2101      	movs	r1, #1
   17e04:	2300      	movs	r3, #0
   17e06:	e7e3      	b.n	17dd0 <d_print_comp_inner+0x1264>
   17e08:	00023ca4 	.word	0x00023ca4
   17e0c:	000244c8 	.word	0x000244c8
   17e10:	000245a7 	.word	0x000245a7
   17e14:	000244a3 	.word	0x000244a3
   17e18:	000244d8 	.word	0x000244d8
   17e1c:	000244a7 	.word	0x000244a7
   17e20:	0002452b 	.word	0x0002452b
   17e24:	000242fc 	.word	0x000242fc
   17e28:	00024577 	.word	0x00024577
   17e2c:	68ab      	ldr	r3, [r5, #8]
   17e2e:	781a      	ldrb	r2, [r3, #0]
   17e30:	2a3a      	cmp	r2, #58	; 0x3a
   17e32:	f47e af7d 	bne.w	16d30 <d_print_comp_inner+0x1c4>
   17e36:	689b      	ldr	r3, [r3, #8]
   17e38:	781b      	ldrb	r3, [r3, #0]
   17e3a:	2b3b      	cmp	r3, #59	; 0x3b
   17e3c:	f47e af78 	bne.w	16d30 <d_print_comp_inner+0x1c4>
   17e40:	f105 0308 	add.w	r3, r5, #8
   17e44:	686a      	ldr	r2, [r5, #4]
   17e46:	f002 fabf 	bl	1a3c8 <d_maybe_print_fold_expression.isra.15>
   17e4a:	4606      	mov	r6, r0
   17e4c:	2800      	cmp	r0, #0
   17e4e:	f47e af5b 	bne.w	16d08 <d_print_comp_inner+0x19c>
   17e52:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17e56:	68aa      	ldr	r2, [r5, #8]
   17e58:	f8da 1004 	ldr.w	r1, [sl, #4]
   17e5c:	6893      	ldr	r3, [r2, #8]
   17e5e:	6808      	ldr	r0, [r1, #0]
   17e60:	49d6      	ldr	r1, [pc, #856]	; (181bc <d_print_comp_inner+0x1650>)
   17e62:	f8d2 9004 	ldr.w	r9, [r2, #4]
   17e66:	685f      	ldr	r7, [r3, #4]
   17e68:	689d      	ldr	r5, [r3, #8]
   17e6a:	f006 fd8d 	bl	1e988 <strcmp>
   17e6e:	2800      	cmp	r0, #0
   17e70:	f001 82e2 	beq.w	19438 <d_print_comp_inner+0x28cc>
   17e74:	2204      	movs	r2, #4
   17e76:	49d2      	ldr	r1, [pc, #840]	; (181c0 <d_print_comp_inner+0x1654>)
   17e78:	4620      	mov	r0, r4
   17e7a:	f7fc fba3 	bl	145c4 <d_append_buffer>
   17e7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17e82:	b183      	cbz	r3, 17ea6 <d_print_comp_inner+0x133a>
   17e84:	4641      	mov	r1, r8
   17e86:	464a      	mov	r2, r9
   17e88:	4620      	mov	r0, r4
   17e8a:	f002 fa39 	bl	1a300 <d_print_subexpr>
   17e8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17e92:	29ff      	cmp	r1, #255	; 0xff
   17e94:	f001 83ec 	beq.w	19670 <d_print_comp_inner+0x2b04>
   17e98:	2320      	movs	r3, #32
   17e9a:	1c4a      	adds	r2, r1, #1
   17e9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17ea0:	5463      	strb	r3, [r4, r1]
   17ea2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17ea6:	463a      	mov	r2, r7
   17ea8:	4641      	mov	r1, r8
   17eaa:	4620      	mov	r0, r4
   17eac:	f001 fc02 	bl	196b4 <d_print_comp>
   17eb0:	2d00      	cmp	r5, #0
   17eb2:	f43e af29 	beq.w	16d08 <d_print_comp_inner+0x19c>
   17eb6:	462a      	mov	r2, r5
   17eb8:	4641      	mov	r1, r8
   17eba:	4620      	mov	r0, r4
   17ebc:	f002 fa20 	bl	1a300 <d_print_subexpr>
   17ec0:	f7fe bf22 	b.w	16d08 <d_print_comp_inner+0x19c>
   17ec4:	4ebf      	ldr	r6, [pc, #764]	; (181c4 <d_print_comp_inner+0x1658>)
   17ec6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17eca:	f106 0a08 	add.w	sl, r6, #8
   17ece:	f04f 0900 	mov.w	r9, #0
   17ed2:	e009      	b.n	17ee8 <d_print_comp_inner+0x137c>
   17ed4:	460b      	mov	r3, r1
   17ed6:	3101      	adds	r1, #1
   17ed8:	4556      	cmp	r6, sl
   17eda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ede:	54e7      	strb	r7, [r4, r3]
   17ee0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ee4:	f000 80d8 	beq.w	18098 <d_print_comp_inner+0x152c>
   17ee8:	29ff      	cmp	r1, #255	; 0xff
   17eea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17eee:	d1f1      	bne.n	17ed4 <d_print_comp_inner+0x1368>
   17ef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ef4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17ef8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17efc:	4620      	mov	r0, r4
   17efe:	4798      	blx	r3
   17f00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f04:	3301      	adds	r3, #1
   17f06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f0a:	2101      	movs	r1, #1
   17f0c:	2300      	movs	r3, #0
   17f0e:	e7e3      	b.n	17ed8 <d_print_comp_inner+0x136c>
   17f10:	4ead      	ldr	r6, [pc, #692]	; (181c8 <d_print_comp_inner+0x165c>)
   17f12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17f16:	f106 0a1d 	add.w	sl, r6, #29
   17f1a:	f04f 0900 	mov.w	r9, #0
   17f1e:	e009      	b.n	17f34 <d_print_comp_inner+0x13c8>
   17f20:	460b      	mov	r3, r1
   17f22:	3101      	adds	r1, #1
   17f24:	45b2      	cmp	sl, r6
   17f26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17f2a:	54e7      	strb	r7, [r4, r3]
   17f2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17f30:	f000 81fc 	beq.w	1832c <d_print_comp_inner+0x17c0>
   17f34:	29ff      	cmp	r1, #255	; 0xff
   17f36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17f3a:	d1f1      	bne.n	17f20 <d_print_comp_inner+0x13b4>
   17f3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17f44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17f48:	4620      	mov	r0, r4
   17f4a:	4798      	blx	r3
   17f4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17f50:	3301      	adds	r3, #1
   17f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17f56:	2101      	movs	r1, #1
   17f58:	2300      	movs	r3, #0
   17f5a:	e7e3      	b.n	17f24 <d_print_comp_inner+0x13b8>
   17f5c:	2301      	movs	r3, #1
   17f5e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17f62:	f7fe bed1 	b.w	16d08 <d_print_comp_inner+0x19c>
   17f66:	3701      	adds	r7, #1
   17f68:	454f      	cmp	r7, r9
   17f6a:	f47f ae46 	bne.w	17bfa <d_print_comp_inner+0x108e>
   17f6e:	f7fe becb 	b.w	16d08 <d_print_comp_inner+0x19c>
   17f72:	6876      	ldr	r6, [r6, #4]
   17f74:	2e00      	cmp	r6, #0
   17f76:	f001 806e 	beq.w	19056 <d_print_comp_inner+0x24ea>
   17f7a:	2f04      	cmp	r7, #4
   17f7c:	f103 0310 	add.w	r3, r3, #16
   17f80:	f47f a9bd 	bne.w	172fe <d_print_comp_inner+0x792>
   17f84:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17f88:	2301      	movs	r3, #1
   17f8a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   17f8e:	f7fe bebb 	b.w	16d08 <d_print_comp_inner+0x19c>
   17f92:	4e8e      	ldr	r6, [pc, #568]	; (181cc <d_print_comp_inner+0x1660>)
   17f94:	686a      	ldr	r2, [r5, #4]
   17f96:	4641      	mov	r1, r8
   17f98:	4620      	mov	r0, r4
   17f9a:	f001 fb8b 	bl	196b4 <d_print_comp>
   17f9e:	f106 0a04 	add.w	sl, r6, #4
   17fa2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17fa6:	f04f 0900 	mov.w	r9, #0
   17faa:	e008      	b.n	17fbe <d_print_comp_inner+0x1452>
   17fac:	460b      	mov	r3, r1
   17fae:	3101      	adds	r1, #1
   17fb0:	45b2      	cmp	sl, r6
   17fb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17fb6:	54e7      	strb	r7, [r4, r3]
   17fb8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17fbc:	d013      	beq.n	17fe6 <d_print_comp_inner+0x147a>
   17fbe:	29ff      	cmp	r1, #255	; 0xff
   17fc0:	f816 7b01 	ldrb.w	r7, [r6], #1
   17fc4:	d1f2      	bne.n	17fac <d_print_comp_inner+0x1440>
   17fc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fca:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17fce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17fd2:	4620      	mov	r0, r4
   17fd4:	4798      	blx	r3
   17fd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17fda:	3301      	adds	r3, #1
   17fdc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17fe0:	2101      	movs	r1, #1
   17fe2:	2300      	movs	r3, #0
   17fe4:	e7e4      	b.n	17fb0 <d_print_comp_inner+0x1444>
   17fe6:	68aa      	ldr	r2, [r5, #8]
   17fe8:	4641      	mov	r1, r8
   17fea:	4620      	mov	r0, r4
   17fec:	f001 fb62 	bl	196b4 <d_print_comp>
   17ff0:	f7fe be8a 	b.w	16d08 <d_print_comp_inner+0x19c>
   17ff4:	686a      	ldr	r2, [r5, #4]
   17ff6:	4641      	mov	r1, r8
   17ff8:	4620      	mov	r0, r4
   17ffa:	f001 fb5b 	bl	196b4 <d_print_comp>
   17ffe:	f7fe be83 	b.w	16d08 <d_print_comp_inner+0x19c>
   18002:	686a      	ldr	r2, [r5, #4]
   18004:	4641      	mov	r1, r8
   18006:	4620      	mov	r0, r4
   18008:	f001 fb54 	bl	196b4 <d_print_comp>
   1800c:	f7fe be7c 	b.w	16d08 <d_print_comp_inner+0x19c>
   18010:	686a      	ldr	r2, [r5, #4]
   18012:	4641      	mov	r1, r8
   18014:	4620      	mov	r0, r4
   18016:	f001 fb4d 	bl	196b4 <d_print_comp>
   1801a:	f7fe be75 	b.w	16d08 <d_print_comp_inner+0x19c>
   1801e:	686a      	ldr	r2, [r5, #4]
   18020:	4641      	mov	r1, r8
   18022:	4620      	mov	r0, r4
   18024:	f001 fb46 	bl	196b4 <d_print_comp>
   18028:	f7fe be6e 	b.w	16d08 <d_print_comp_inner+0x19c>
   1802c:	686a      	ldr	r2, [r5, #4]
   1802e:	4641      	mov	r1, r8
   18030:	4620      	mov	r0, r4
   18032:	f001 fb3f 	bl	196b4 <d_print_comp>
   18036:	f7fe be67 	b.w	16d08 <d_print_comp_inner+0x19c>
   1803a:	686a      	ldr	r2, [r5, #4]
   1803c:	4641      	mov	r1, r8
   1803e:	4620      	mov	r0, r4
   18040:	f001 fb38 	bl	196b4 <d_print_comp>
   18044:	f7fe be60 	b.w	16d08 <d_print_comp_inner+0x19c>
   18048:	686a      	ldr	r2, [r5, #4]
   1804a:	4641      	mov	r1, r8
   1804c:	4620      	mov	r0, r4
   1804e:	f001 fb31 	bl	196b4 <d_print_comp>
   18052:	f7fe be59 	b.w	16d08 <d_print_comp_inner+0x19c>
   18056:	686a      	ldr	r2, [r5, #4]
   18058:	4641      	mov	r1, r8
   1805a:	4620      	mov	r0, r4
   1805c:	f001 fb2a 	bl	196b4 <d_print_comp>
   18060:	f7fe be52 	b.w	16d08 <d_print_comp_inner+0x19c>
   18064:	686a      	ldr	r2, [r5, #4]
   18066:	4641      	mov	r1, r8
   18068:	4620      	mov	r0, r4
   1806a:	f001 fb23 	bl	196b4 <d_print_comp>
   1806e:	f7fe be4b 	b.w	16d08 <d_print_comp_inner+0x19c>
   18072:	4641      	mov	r1, r8
   18074:	68aa      	ldr	r2, [r5, #8]
   18076:	4620      	mov	r0, r4
   18078:	f001 fb1c 	bl	196b4 <d_print_comp>
   1807c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18080:	29ff      	cmp	r1, #255	; 0xff
   18082:	f000 8560 	beq.w	18b46 <d_print_comp_inner+0x1fda>
   18086:	1c4a      	adds	r2, r1, #1
   18088:	235d      	movs	r3, #93	; 0x5d
   1808a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1808e:	5463      	strb	r3, [r4, r1]
   18090:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18094:	f7fe be38 	b.w	16d08 <d_print_comp_inner+0x19c>
   18098:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1809c:	4e4c      	ldr	r6, [pc, #304]	; (181d0 <d_print_comp_inner+0x1664>)
   1809e:	3301      	adds	r3, #1
   180a0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   180a4:	4641      	mov	r1, r8
   180a6:	686a      	ldr	r2, [r5, #4]
   180a8:	4620      	mov	r0, r4
   180aa:	f001 fb03 	bl	196b4 <d_print_comp>
   180ae:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   180b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   180b6:	3b01      	subs	r3, #1
   180b8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   180bc:	f106 0902 	add.w	r9, r6, #2
   180c0:	f04f 0800 	mov.w	r8, #0
   180c4:	e008      	b.n	180d8 <d_print_comp_inner+0x156c>
   180c6:	460b      	mov	r3, r1
   180c8:	3101      	adds	r1, #1
   180ca:	454e      	cmp	r6, r9
   180cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   180d0:	54e7      	strb	r7, [r4, r3]
   180d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   180d6:	d013      	beq.n	18100 <d_print_comp_inner+0x1594>
   180d8:	29ff      	cmp	r1, #255	; 0xff
   180da:	f816 7b01 	ldrb.w	r7, [r6], #1
   180de:	d1f2      	bne.n	180c6 <d_print_comp_inner+0x155a>
   180e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   180e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   180e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   180ec:	4620      	mov	r0, r4
   180ee:	4798      	blx	r3
   180f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180f4:	3301      	adds	r3, #1
   180f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180fa:	2101      	movs	r1, #1
   180fc:	2300      	movs	r3, #0
   180fe:	e7e4      	b.n	180ca <d_print_comp_inner+0x155e>
   18100:	68aa      	ldr	r2, [r5, #8]
   18102:	4934      	ldr	r1, [pc, #208]	; (181d4 <d_print_comp_inner+0x1668>)
   18104:	3201      	adds	r2, #1
   18106:	a804      	add	r0, sp, #16
   18108:	f006 fc10 	bl	1e92c <sprintf>
   1810c:	a804      	add	r0, sp, #16
   1810e:	f006 fdb7 	bl	1ec80 <strlen>
   18112:	b318      	cbz	r0, 1815c <d_print_comp_inner+0x15f0>
   18114:	ad04      	add	r5, sp, #16
   18116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1811a:	182f      	adds	r7, r5, r0
   1811c:	f04f 0800 	mov.w	r8, #0
   18120:	e008      	b.n	18134 <d_print_comp_inner+0x15c8>
   18122:	460b      	mov	r3, r1
   18124:	3101      	adds	r1, #1
   18126:	42af      	cmp	r7, r5
   18128:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1812c:	54e6      	strb	r6, [r4, r3]
   1812e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18132:	d015      	beq.n	18160 <d_print_comp_inner+0x15f4>
   18134:	29ff      	cmp	r1, #255	; 0xff
   18136:	f815 6b01 	ldrb.w	r6, [r5], #1
   1813a:	d1f2      	bne.n	18122 <d_print_comp_inner+0x15b6>
   1813c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18140:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18148:	4620      	mov	r0, r4
   1814a:	4798      	blx	r3
   1814c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18150:	3301      	adds	r3, #1
   18152:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18156:	2101      	movs	r1, #1
   18158:	2300      	movs	r3, #0
   1815a:	e7e4      	b.n	18126 <d_print_comp_inner+0x15ba>
   1815c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18160:	29ff      	cmp	r1, #255	; 0xff
   18162:	f000 8560 	beq.w	18c26 <d_print_comp_inner+0x20ba>
   18166:	1c4a      	adds	r2, r1, #1
   18168:	237d      	movs	r3, #125	; 0x7d
   1816a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1816e:	5463      	strb	r3, [r4, r1]
   18170:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18174:	f7fe bdc8 	b.w	16d08 <d_print_comp_inner+0x19c>
   18178:	686a      	ldr	r2, [r5, #4]
   1817a:	4641      	mov	r1, r8
   1817c:	4620      	mov	r0, r4
   1817e:	f001 fa99 	bl	196b4 <d_print_comp>
   18182:	f7fe bdc1 	b.w	16d08 <d_print_comp_inner+0x19c>
   18186:	4641      	mov	r1, r8
   18188:	68aa      	ldr	r2, [r5, #8]
   1818a:	4620      	mov	r0, r4
   1818c:	f001 fa92 	bl	196b4 <d_print_comp>
   18190:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18194:	29ff      	cmp	r1, #255	; 0xff
   18196:	f000 850b 	beq.w	18bb0 <d_print_comp_inner+0x2044>
   1819a:	1c4a      	adds	r2, r1, #1
   1819c:	235d      	movs	r3, #93	; 0x5d
   1819e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   181a2:	5463      	strb	r3, [r4, r1]
   181a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   181a8:	f7fe bdae 	b.w	16d08 <d_print_comp_inner+0x19c>
   181ac:	686a      	ldr	r2, [r5, #4]
   181ae:	4641      	mov	r1, r8
   181b0:	4620      	mov	r0, r4
   181b2:	f001 fa7f 	bl	196b4 <d_print_comp>
   181b6:	f7fe bda7 	b.w	16d08 <d_print_comp_inner+0x19c>
   181ba:	bf00      	nop
   181bc:	00024310 	.word	0x00024310
   181c0:	00024508 	.word	0x00024508
   181c4:	00024597 	.word	0x00024597
   181c8:	00024557 	.word	0x00024557
   181cc:	000243ac 	.word	0x000243ac
   181d0:	000245a4 	.word	0x000245a4
   181d4:	000242fc 	.word	0x000242fc
   181d8:	f8da 5004 	ldr.w	r5, [sl, #4]
   181dc:	782b      	ldrb	r3, [r5, #0]
   181de:	3b61      	subs	r3, #97	; 0x61
   181e0:	2b19      	cmp	r3, #25
   181e2:	d809      	bhi.n	181f8 <d_print_comp_inner+0x168c>
   181e4:	29ff      	cmp	r1, #255	; 0xff
   181e6:	f000 8793 	beq.w	19110 <d_print_comp_inner+0x25a4>
   181ea:	2320      	movs	r3, #32
   181ec:	1c4a      	adds	r2, r1, #1
   181ee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   181f2:	5463      	strb	r3, [r4, r1]
   181f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   181f8:	19eb      	adds	r3, r5, r7
   181fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   181fe:	2b20      	cmp	r3, #32
   18200:	bf08      	it	eq
   18202:	f107 37ff 	addeq.w	r7, r7, #4294967295
   18206:	2f00      	cmp	r7, #0
   18208:	f43e ad7e 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1820c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18210:	442f      	add	r7, r5
   18212:	f04f 0800 	mov.w	r8, #0
   18216:	e009      	b.n	1822c <d_print_comp_inner+0x16c0>
   18218:	460b      	mov	r3, r1
   1821a:	3101      	adds	r1, #1
   1821c:	42af      	cmp	r7, r5
   1821e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18222:	54e6      	strb	r6, [r4, r3]
   18224:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18228:	f43e ad6e 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1822c:	29ff      	cmp	r1, #255	; 0xff
   1822e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18232:	d1f1      	bne.n	18218 <d_print_comp_inner+0x16ac>
   18234:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18238:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1823c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18240:	4620      	mov	r0, r4
   18242:	4798      	blx	r3
   18244:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18248:	3301      	adds	r3, #1
   1824a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1824e:	2101      	movs	r1, #1
   18250:	2300      	movs	r3, #0
   18252:	e7e3      	b.n	1821c <d_print_comp_inner+0x16b0>
   18254:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18258:	b13a      	cbz	r2, 1826a <d_print_comp_inner+0x16fe>
   1825a:	ab14      	add	r3, sp, #80	; 0x50
   1825c:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18260:	f843 1d48 	str.w	r1, [r3, #-72]!
   18264:	9203      	str	r2, [sp, #12]
   18266:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1826a:	686b      	ldr	r3, [r5, #4]
   1826c:	781a      	ldrb	r2, [r3, #0]
   1826e:	2a04      	cmp	r2, #4
   18270:	f000 830e 	beq.w	18890 <d_print_comp_inner+0x1d24>
   18274:	a804      	add	r0, sp, #16
   18276:	461a      	mov	r2, r3
   18278:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   1827c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18280:	4641      	mov	r1, r8
   18282:	4620      	mov	r0, r4
   18284:	9304      	str	r3, [sp, #16]
   18286:	9505      	str	r5, [sp, #20]
   18288:	f7fe fc70 	bl	16b6c <d_print_comp_inner>
   1828c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18290:	9a05      	ldr	r2, [sp, #20]
   18292:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18296:	2b00      	cmp	r3, #0
   18298:	f43e ad36 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1829c:	9b02      	ldr	r3, [sp, #8]
   1829e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   182a2:	f7fe bd31 	b.w	16d08 <d_print_comp_inner+0x19c>
   182a6:	68aa      	ldr	r2, [r5, #8]
   182a8:	4641      	mov	r1, r8
   182aa:	4620      	mov	r0, r4
   182ac:	f001 fa02 	bl	196b4 <d_print_comp>
   182b0:	f7fe bd2a 	b.w	16d08 <d_print_comp_inner+0x19c>
   182b4:	686a      	ldr	r2, [r5, #4]
   182b6:	49d8      	ldr	r1, [pc, #864]	; (18618 <d_print_comp_inner+0x1aac>)
   182b8:	3201      	adds	r2, #1
   182ba:	a804      	add	r0, sp, #16
   182bc:	f006 fb36 	bl	1e92c <sprintf>
   182c0:	a804      	add	r0, sp, #16
   182c2:	f006 fcdd 	bl	1ec80 <strlen>
   182c6:	b318      	cbz	r0, 18310 <d_print_comp_inner+0x17a4>
   182c8:	ad04      	add	r5, sp, #16
   182ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   182ce:	182f      	adds	r7, r5, r0
   182d0:	f04f 0800 	mov.w	r8, #0
   182d4:	e008      	b.n	182e8 <d_print_comp_inner+0x177c>
   182d6:	460b      	mov	r3, r1
   182d8:	3101      	adds	r1, #1
   182da:	42bd      	cmp	r5, r7
   182dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182e0:	54e6      	strb	r6, [r4, r3]
   182e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   182e6:	d015      	beq.n	18314 <d_print_comp_inner+0x17a8>
   182e8:	29ff      	cmp	r1, #255	; 0xff
   182ea:	f815 6b01 	ldrb.w	r6, [r5], #1
   182ee:	d1f2      	bne.n	182d6 <d_print_comp_inner+0x176a>
   182f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   182f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   182f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   182fc:	4620      	mov	r0, r4
   182fe:	4798      	blx	r3
   18300:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18304:	3301      	adds	r3, #1
   18306:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1830a:	2101      	movs	r1, #1
   1830c:	2300      	movs	r3, #0
   1830e:	e7e4      	b.n	182da <d_print_comp_inner+0x176e>
   18310:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18314:	29ff      	cmp	r1, #255	; 0xff
   18316:	f000 8404 	beq.w	18b22 <d_print_comp_inner+0x1fb6>
   1831a:	1c4a      	adds	r2, r1, #1
   1831c:	237d      	movs	r3, #125	; 0x7d
   1831e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18322:	5463      	strb	r3, [r4, r1]
   18324:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18328:	f7fe bcee 	b.w	16d08 <d_print_comp_inner+0x19c>
   1832c:	686a      	ldr	r2, [r5, #4]
   1832e:	4641      	mov	r1, r8
   18330:	4620      	mov	r0, r4
   18332:	f001 f9bf 	bl	196b4 <d_print_comp>
   18336:	f7fe bce7 	b.w	16d08 <d_print_comp_inner+0x19c>
   1833a:	686a      	ldr	r2, [r5, #4]
   1833c:	4641      	mov	r1, r8
   1833e:	4620      	mov	r0, r4
   18340:	f001 f9b8 	bl	196b4 <d_print_comp>
   18344:	f7fe bce0 	b.w	16d08 <d_print_comp_inner+0x19c>
   18348:	686a      	ldr	r2, [r5, #4]
   1834a:	4641      	mov	r1, r8
   1834c:	4620      	mov	r0, r4
   1834e:	f001 f9b1 	bl	196b4 <d_print_comp>
   18352:	f7fe bcd9 	b.w	16d08 <d_print_comp_inner+0x19c>
   18356:	4eb1      	ldr	r6, [pc, #708]	; (1861c <d_print_comp_inner+0x1ab0>)
   18358:	68aa      	ldr	r2, [r5, #8]
   1835a:	4641      	mov	r1, r8
   1835c:	4620      	mov	r0, r4
   1835e:	f001 f9a9 	bl	196b4 <d_print_comp>
   18362:	f106 0a05 	add.w	sl, r6, #5
   18366:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1836a:	f04f 0900 	mov.w	r9, #0
   1836e:	e008      	b.n	18382 <d_print_comp_inner+0x1816>
   18370:	460b      	mov	r3, r1
   18372:	3101      	adds	r1, #1
   18374:	4556      	cmp	r6, sl
   18376:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1837a:	54e7      	strb	r7, [r4, r3]
   1837c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18380:	d013      	beq.n	183aa <d_print_comp_inner+0x183e>
   18382:	29ff      	cmp	r1, #255	; 0xff
   18384:	f816 7b01 	ldrb.w	r7, [r6], #1
   18388:	d1f2      	bne.n	18370 <d_print_comp_inner+0x1804>
   1838a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1838e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18392:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18396:	4620      	mov	r0, r4
   18398:	4798      	blx	r3
   1839a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1839e:	3301      	adds	r3, #1
   183a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   183a4:	2101      	movs	r1, #1
   183a6:	2300      	movs	r3, #0
   183a8:	e7e4      	b.n	18374 <d_print_comp_inner+0x1808>
   183aa:	686a      	ldr	r2, [r5, #4]
   183ac:	4641      	mov	r1, r8
   183ae:	4620      	mov	r0, r4
   183b0:	f001 f980 	bl	196b4 <d_print_comp>
   183b4:	f7fe bca8 	b.w	16d08 <d_print_comp_inner+0x19c>
   183b8:	686a      	ldr	r2, [r5, #4]
   183ba:	4641      	mov	r1, r8
   183bc:	4620      	mov	r0, r4
   183be:	f001 f979 	bl	196b4 <d_print_comp>
   183c2:	f7fe bca1 	b.w	16d08 <d_print_comp_inner+0x19c>
   183c6:	686a      	ldr	r2, [r5, #4]
   183c8:	4641      	mov	r1, r8
   183ca:	4620      	mov	r0, r4
   183cc:	f001 f972 	bl	196b4 <d_print_comp>
   183d0:	f7fe bc9a 	b.w	16d08 <d_print_comp_inner+0x19c>
   183d4:	686a      	ldr	r2, [r5, #4]
   183d6:	4641      	mov	r1, r8
   183d8:	4620      	mov	r0, r4
   183da:	f001 f96b 	bl	196b4 <d_print_comp>
   183de:	f7fe bc93 	b.w	16d08 <d_print_comp_inner+0x19c>
   183e2:	4641      	mov	r1, r8
   183e4:	686a      	ldr	r2, [r5, #4]
   183e6:	4620      	mov	r0, r4
   183e8:	f001 f964 	bl	196b4 <d_print_comp>
   183ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   183f0:	29ff      	cmp	r1, #255	; 0xff
   183f2:	f000 842a 	beq.w	18c4a <d_print_comp_inner+0x20de>
   183f6:	1c4a      	adds	r2, r1, #1
   183f8:	2329      	movs	r3, #41	; 0x29
   183fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   183fe:	5463      	strb	r3, [r4, r1]
   18400:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18404:	f7fe bc80 	b.w	16d08 <d_print_comp_inner+0x19c>
   18408:	686a      	ldr	r2, [r5, #4]
   1840a:	4641      	mov	r1, r8
   1840c:	4620      	mov	r0, r4
   1840e:	f001 f951 	bl	196b4 <d_print_comp>
   18412:	f7fe bc79 	b.w	16d08 <d_print_comp_inner+0x19c>
   18416:	2f04      	cmp	r7, #4
   18418:	f1a6 0410 	sub.w	r4, r6, #16
   1841c:	f106 0e10 	add.w	lr, r6, #16
   18420:	f000 8722 	beq.w	19268 <d_print_comp_inner+0x26fc>
   18424:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   18428:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1842c:	2300      	movs	r3, #0
   1842e:	f84e 4c10 	str.w	r4, [lr, #-16]
   18432:	e906 1008 	stmdb	r6, {r3, ip}
   18436:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   1843a:	f846 5c0c 	str.w	r5, [r6, #-12]
   1843e:	686d      	ldr	r5, [r5, #4]
   18440:	3701      	adds	r7, #1
   18442:	4676      	mov	r6, lr
   18444:	f7fe bf84 	b.w	17350 <d_print_comp_inner+0x7e4>
   18448:	68aa      	ldr	r2, [r5, #8]
   1844a:	9300      	str	r3, [sp, #0]
   1844c:	460e      	mov	r6, r1
   1844e:	4620      	mov	r0, r4
   18450:	4641      	mov	r1, r8
   18452:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   18456:	f001 f92d 	bl	196b4 <d_print_comp>
   1845a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1845e:	9b00      	ldr	r3, [sp, #0]
   18460:	4295      	cmp	r5, r2
   18462:	f47e ac51 	bne.w	16d08 <d_print_comp_inner+0x19c>
   18466:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1846a:	42b2      	cmp	r2, r6
   1846c:	f47e ac4c 	bne.w	16d08 <d_print_comp_inner+0x19c>
   18470:	3b01      	subs	r3, #1
   18472:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18476:	f7fe bc47 	b.w	16d08 <d_print_comp_inner+0x19c>
   1847a:	462a      	mov	r2, r5
   1847c:	4641      	mov	r1, r8
   1847e:	4620      	mov	r0, r4
   18480:	f001 f928 	bl	196d4 <d_print_mod>
   18484:	f7fe bc70 	b.w	16d68 <d_print_comp_inner+0x1fc>
   18488:	686b      	ldr	r3, [r5, #4]
   1848a:	9300      	str	r3, [sp, #0]
   1848c:	f1b9 0f00 	cmp.w	r9, #0
   18490:	f47f abae 	bne.w	17bf0 <d_print_comp_inner+0x1084>
   18494:	f7fe bc38 	b.w	16d08 <d_print_comp_inner+0x19c>
   18498:	463a      	mov	r2, r7
   1849a:	a804      	add	r0, sp, #16
   1849c:	495e      	ldr	r1, [pc, #376]	; (18618 <d_print_comp_inner+0x1aac>)
   1849e:	f006 fa45 	bl	1e92c <sprintf>
   184a2:	a804      	add	r0, sp, #16
   184a4:	f006 fbec 	bl	1ec80 <strlen>
   184a8:	b318      	cbz	r0, 184f2 <d_print_comp_inner+0x1986>
   184aa:	ad04      	add	r5, sp, #16
   184ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184b0:	182f      	adds	r7, r5, r0
   184b2:	f04f 0800 	mov.w	r8, #0
   184b6:	e008      	b.n	184ca <d_print_comp_inner+0x195e>
   184b8:	460b      	mov	r3, r1
   184ba:	3101      	adds	r1, #1
   184bc:	42af      	cmp	r7, r5
   184be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   184c2:	54e6      	strb	r6, [r4, r3]
   184c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   184c8:	d015      	beq.n	184f6 <d_print_comp_inner+0x198a>
   184ca:	29ff      	cmp	r1, #255	; 0xff
   184cc:	f815 6b01 	ldrb.w	r6, [r5], #1
   184d0:	d1f2      	bne.n	184b8 <d_print_comp_inner+0x194c>
   184d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   184da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   184de:	4620      	mov	r0, r4
   184e0:	4798      	blx	r3
   184e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   184e6:	3301      	adds	r3, #1
   184e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   184ec:	2101      	movs	r1, #1
   184ee:	2300      	movs	r3, #0
   184f0:	e7e4      	b.n	184bc <d_print_comp_inner+0x1950>
   184f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184f6:	29ff      	cmp	r1, #255	; 0xff
   184f8:	f000 84dd 	beq.w	18eb6 <d_print_comp_inner+0x234a>
   184fc:	1c4a      	adds	r2, r1, #1
   184fe:	237d      	movs	r3, #125	; 0x7d
   18500:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18504:	5463      	strb	r3, [r4, r1]
   18506:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1850a:	f7fe bbfd 	b.w	16d08 <d_print_comp_inner+0x19c>
   1850e:	2700      	movs	r7, #0
   18510:	f7ff ba1f 	b.w	17952 <d_print_comp_inner+0xde6>
   18514:	68df      	ldr	r7, [r3, #12]
   18516:	689d      	ldr	r5, [r3, #8]
   18518:	2f00      	cmp	r7, #0
   1851a:	f43e abf5 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1851e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18522:	442f      	add	r7, r5
   18524:	f04f 0800 	mov.w	r8, #0
   18528:	e009      	b.n	1853e <d_print_comp_inner+0x19d2>
   1852a:	460b      	mov	r3, r1
   1852c:	3101      	adds	r1, #1
   1852e:	42bd      	cmp	r5, r7
   18530:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18534:	54e6      	strb	r6, [r4, r3]
   18536:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1853a:	f43e abe5 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1853e:	29ff      	cmp	r1, #255	; 0xff
   18540:	f815 6b01 	ldrb.w	r6, [r5], #1
   18544:	d1f1      	bne.n	1852a <d_print_comp_inner+0x19be>
   18546:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1854a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1854e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18552:	4620      	mov	r0, r4
   18554:	4798      	blx	r3
   18556:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1855a:	3301      	adds	r3, #1
   1855c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18560:	2101      	movs	r1, #1
   18562:	2300      	movs	r3, #0
   18564:	e7e3      	b.n	1852e <d_print_comp_inner+0x19c2>
   18566:	686e      	ldr	r6, [r5, #4]
   18568:	68af      	ldr	r7, [r5, #8]
   1856a:	4437      	add	r7, r6
   1856c:	42be      	cmp	r6, r7
   1856e:	f4be abcb 	bcs.w	16d08 <d_print_comp_inner+0x19c>
   18572:	f04f 0800 	mov.w	r8, #0
   18576:	e00d      	b.n	18594 <d_print_comp_inner+0x1a28>
   18578:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1857c:	29ff      	cmp	r1, #255	; 0xff
   1857e:	d036      	beq.n	185ee <d_print_comp_inner+0x1a82>
   18580:	1c4b      	adds	r3, r1, #1
   18582:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18586:	5465      	strb	r5, [r4, r1]
   18588:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1858c:	3601      	adds	r6, #1
   1858e:	42b7      	cmp	r7, r6
   18590:	f67e abba 	bls.w	16d08 <d_print_comp_inner+0x19c>
   18594:	1bbb      	subs	r3, r7, r6
   18596:	2b03      	cmp	r3, #3
   18598:	7835      	ldrb	r5, [r6, #0]
   1859a:	dded      	ble.n	18578 <d_print_comp_inner+0x1a0c>
   1859c:	2d5f      	cmp	r5, #95	; 0x5f
   1859e:	d1eb      	bne.n	18578 <d_print_comp_inner+0x1a0c>
   185a0:	7873      	ldrb	r3, [r6, #1]
   185a2:	2b5f      	cmp	r3, #95	; 0x5f
   185a4:	d1e8      	bne.n	18578 <d_print_comp_inner+0x1a0c>
   185a6:	78b3      	ldrb	r3, [r6, #2]
   185a8:	2b55      	cmp	r3, #85	; 0x55
   185aa:	d1e5      	bne.n	18578 <d_print_comp_inner+0x1a0c>
   185ac:	1cf3      	adds	r3, r6, #3
   185ae:	429f      	cmp	r7, r3
   185b0:	d9e2      	bls.n	18578 <d_print_comp_inner+0x1a0c>
   185b2:	2000      	movs	r0, #0
   185b4:	e006      	b.n	185c4 <d_print_comp_inner+0x1a58>
   185b6:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   185ba:	429f      	cmp	r7, r3
   185bc:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   185c0:	f000 85c7 	beq.w	19152 <d_print_comp_inner+0x25e6>
   185c4:	4699      	mov	r9, r3
   185c6:	f813 5b01 	ldrb.w	r5, [r3], #1
   185ca:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   185ce:	b2d1      	uxtb	r1, r2
   185d0:	2909      	cmp	r1, #9
   185d2:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   185d6:	d9f0      	bls.n	185ba <d_print_comp_inner+0x1a4e>
   185d8:	f1be 0f05 	cmp.w	lr, #5
   185dc:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   185e0:	d9e9      	bls.n	185b6 <d_print_comp_inner+0x1a4a>
   185e2:	2a05      	cmp	r2, #5
   185e4:	f200 8743 	bhi.w	1946e <d_print_comp_inner+0x2902>
   185e8:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   185ec:	e7e5      	b.n	185ba <d_print_comp_inner+0x1a4e>
   185ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   185f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   185fa:	4620      	mov	r0, r4
   185fc:	4798      	blx	r3
   185fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18602:	3301      	adds	r3, #1
   18604:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18608:	2100      	movs	r1, #0
   1860a:	2301      	movs	r3, #1
   1860c:	e7b9      	b.n	18582 <d_print_comp_inner+0x1a16>
   1860e:	4d04      	ldr	r5, [pc, #16]	; (18620 <d_print_comp_inner+0x1ab4>)
   18610:	4698      	mov	r8, r3
   18612:	1daf      	adds	r7, r5, #6
   18614:	e010      	b.n	18638 <d_print_comp_inner+0x1acc>
   18616:	bf00      	nop
   18618:	000242fc 	.word	0x000242fc
   1861c:	00024470 	.word	0x00024470
   18620:	000244d0 	.word	0x000244d0
   18624:	460b      	mov	r3, r1
   18626:	3101      	adds	r1, #1
   18628:	42bd      	cmp	r5, r7
   1862a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1862e:	54e6      	strb	r6, [r4, r3]
   18630:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18634:	f43e ab68 	beq.w	16d08 <d_print_comp_inner+0x19c>
   18638:	29ff      	cmp	r1, #255	; 0xff
   1863a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1863e:	d1f1      	bne.n	18624 <d_print_comp_inner+0x1ab8>
   18640:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18644:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18648:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1864c:	4620      	mov	r0, r4
   1864e:	4798      	blx	r3
   18650:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18654:	3301      	adds	r3, #1
   18656:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1865a:	2101      	movs	r1, #1
   1865c:	2300      	movs	r3, #0
   1865e:	e7e3      	b.n	18628 <d_print_comp_inner+0x1abc>
   18660:	782b      	ldrb	r3, [r5, #0]
   18662:	2b2f      	cmp	r3, #47	; 0x2f
   18664:	f47e ab6a 	bne.w	16d3c <d_print_comp_inner+0x1d0>
   18668:	4601      	mov	r1, r0
   1866a:	460d      	mov	r5, r1
   1866c:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18670:	f7fe bb66 	b.w	16d40 <d_print_comp_inner+0x1d4>
   18674:	4dd7      	ldr	r5, [pc, #860]	; (189d4 <d_print_comp_inner+0x1e68>)
   18676:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1867a:	f105 0804 	add.w	r8, r5, #4
   1867e:	e009      	b.n	18694 <d_print_comp_inner+0x1b28>
   18680:	460b      	mov	r3, r1
   18682:	3101      	adds	r1, #1
   18684:	45a8      	cmp	r8, r5
   18686:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1868a:	54e6      	strb	r6, [r4, r3]
   1868c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18690:	f43e ab3a 	beq.w	16d08 <d_print_comp_inner+0x19c>
   18694:	29ff      	cmp	r1, #255	; 0xff
   18696:	f815 6b01 	ldrb.w	r6, [r5], #1
   1869a:	d1f1      	bne.n	18680 <d_print_comp_inner+0x1b14>
   1869c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   186a0:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   186a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   186a8:	4620      	mov	r0, r4
   186aa:	4798      	blx	r3
   186ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   186b0:	3301      	adds	r3, #1
   186b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   186b6:	2101      	movs	r1, #1
   186b8:	2300      	movs	r3, #0
   186ba:	e7e3      	b.n	18684 <d_print_comp_inner+0x1b18>
   186bc:	4ec6      	ldr	r6, [pc, #792]	; (189d8 <d_print_comp_inner+0x1e6c>)
   186be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   186c2:	f106 0905 	add.w	r9, r6, #5
   186c6:	f04f 0800 	mov.w	r8, #0
   186ca:	e008      	b.n	186de <d_print_comp_inner+0x1b72>
   186cc:	460b      	mov	r3, r1
   186ce:	3101      	adds	r1, #1
   186d0:	45b1      	cmp	r9, r6
   186d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   186d6:	54e7      	strb	r7, [r4, r3]
   186d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   186dc:	d013      	beq.n	18706 <d_print_comp_inner+0x1b9a>
   186de:	29ff      	cmp	r1, #255	; 0xff
   186e0:	f816 7b01 	ldrb.w	r7, [r6], #1
   186e4:	d1f2      	bne.n	186cc <d_print_comp_inner+0x1b60>
   186e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   186ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   186ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   186f2:	4620      	mov	r0, r4
   186f4:	4798      	blx	r3
   186f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   186fa:	3301      	adds	r3, #1
   186fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18700:	2101      	movs	r1, #1
   18702:	2300      	movs	r3, #0
   18704:	e7e4      	b.n	186d0 <d_print_comp_inner+0x1b64>
   18706:	686a      	ldr	r2, [r5, #4]
   18708:	49b4      	ldr	r1, [pc, #720]	; (189dc <d_print_comp_inner+0x1e70>)
   1870a:	3201      	adds	r2, #1
   1870c:	a804      	add	r0, sp, #16
   1870e:	f006 f90d 	bl	1e92c <sprintf>
   18712:	a804      	add	r0, sp, #16
   18714:	f006 fab4 	bl	1ec80 <strlen>
   18718:	2800      	cmp	r0, #0
   1871a:	f43e aaf5 	beq.w	16d08 <d_print_comp_inner+0x19c>
   1871e:	ad04      	add	r5, sp, #16
   18720:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18724:	182f      	adds	r7, r5, r0
   18726:	f04f 0800 	mov.w	r8, #0
   1872a:	e009      	b.n	18740 <d_print_comp_inner+0x1bd4>
   1872c:	460b      	mov	r3, r1
   1872e:	3101      	adds	r1, #1
   18730:	42af      	cmp	r7, r5
   18732:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18736:	54e6      	strb	r6, [r4, r3]
   18738:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1873c:	f43e aae4 	beq.w	16d08 <d_print_comp_inner+0x19c>
   18740:	29ff      	cmp	r1, #255	; 0xff
   18742:	f815 6b01 	ldrb.w	r6, [r5], #1
   18746:	d1f1      	bne.n	1872c <d_print_comp_inner+0x1bc0>
   18748:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1874c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18750:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18754:	4620      	mov	r0, r4
   18756:	4798      	blx	r3
   18758:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1875c:	3301      	adds	r3, #1
   1875e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18762:	2101      	movs	r1, #1
   18764:	2300      	movs	r3, #0
   18766:	e7e3      	b.n	18730 <d_print_comp_inner+0x1bc4>
   18768:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   1876c:	f105 0208 	add.w	r2, r5, #8
   18770:	4641      	mov	r1, r8
   18772:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   18776:	f001 fc91 	bl	1a09c <d_print_function_type.isra.11>
   1877a:	686a      	ldr	r2, [r5, #4]
   1877c:	2a00      	cmp	r2, #0
   1877e:	f43e aac3 	beq.w	16d08 <d_print_comp_inner+0x19c>
   18782:	4641      	mov	r1, r8
   18784:	4620      	mov	r0, r4
   18786:	f000 ff95 	bl	196b4 <d_print_comp>
   1878a:	f7fe babd 	b.w	16d08 <d_print_comp_inner+0x19c>
   1878e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18792:	f7ff b9a2 	b.w	17ada <d_print_comp_inner+0xf6e>
   18796:	4e92      	ldr	r6, [pc, #584]	; (189e0 <d_print_comp_inner+0x1e74>)
   18798:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1879c:	f106 0a05 	add.w	sl, r6, #5
   187a0:	f04f 0900 	mov.w	r9, #0
   187a4:	e009      	b.n	187ba <d_print_comp_inner+0x1c4e>
   187a6:	460b      	mov	r3, r1
   187a8:	3101      	adds	r1, #1
   187aa:	45b2      	cmp	sl, r6
   187ac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187b0:	54e7      	strb	r7, [r4, r3]
   187b2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   187b6:	f43f a97a 	beq.w	17aae <d_print_comp_inner+0xf42>
   187ba:	29ff      	cmp	r1, #255	; 0xff
   187bc:	f816 7b01 	ldrb.w	r7, [r6], #1
   187c0:	d1f1      	bne.n	187a6 <d_print_comp_inner+0x1c3a>
   187c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   187c6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   187ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   187ce:	4620      	mov	r0, r4
   187d0:	4798      	blx	r3
   187d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   187d6:	3301      	adds	r3, #1
   187d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   187dc:	2101      	movs	r1, #1
   187de:	2300      	movs	r3, #0
   187e0:	e7e3      	b.n	187aa <d_print_comp_inner+0x1c3e>
   187e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   187e6:	497f      	ldr	r1, [pc, #508]	; (189e4 <d_print_comp_inner+0x1e78>)
   187e8:	681f      	ldr	r7, [r3, #0]
   187ea:	4638      	mov	r0, r7
   187ec:	f006 f8cc 	bl	1e988 <strcmp>
   187f0:	f896 a000 	ldrb.w	sl, [r6]
   187f4:	b918      	cbnz	r0, 187fe <d_print_comp_inner+0x1c92>
   187f6:	f1ba 0f03 	cmp.w	sl, #3
   187fa:	f000 851b 	beq.w	19234 <d_print_comp_inner+0x26c8>
   187fe:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   18802:	f000 85fd 	beq.w	19400 <d_print_comp_inner+0x2894>
   18806:	4978      	ldr	r1, [pc, #480]	; (189e8 <d_print_comp_inner+0x1e7c>)
   18808:	4638      	mov	r0, r7
   1880a:	f006 f8bd 	bl	1e988 <strcmp>
   1880e:	4605      	mov	r5, r0
   18810:	2800      	cmp	r0, #0
   18812:	f000 8135 	beq.w	18a80 <d_print_comp_inner+0x1f14>
   18816:	4975      	ldr	r1, [pc, #468]	; (189ec <d_print_comp_inner+0x1e80>)
   18818:	4638      	mov	r0, r7
   1881a:	f006 f8b5 	bl	1e988 <strcmp>
   1881e:	2800      	cmp	r0, #0
   18820:	f000 82b6 	beq.w	18d90 <d_print_comp_inner+0x2224>
   18824:	464a      	mov	r2, r9
   18826:	4641      	mov	r1, r8
   18828:	4620      	mov	r0, r4
   1882a:	f001 fd2b 	bl	1a284 <d_print_expr_op>
   1882e:	2f00      	cmp	r7, #0
   18830:	f43f a837 	beq.w	178a2 <d_print_comp_inner+0xd36>
   18834:	496e      	ldr	r1, [pc, #440]	; (189f0 <d_print_comp_inner+0x1e84>)
   18836:	4638      	mov	r0, r7
   18838:	f006 f8a6 	bl	1e988 <strcmp>
   1883c:	2800      	cmp	r0, #0
   1883e:	f000 8384 	beq.w	18f4a <d_print_comp_inner+0x23de>
   18842:	4638      	mov	r0, r7
   18844:	496b      	ldr	r1, [pc, #428]	; (189f4 <d_print_comp_inner+0x1e88>)
   18846:	f006 f89f 	bl	1e988 <strcmp>
   1884a:	4605      	mov	r5, r0
   1884c:	2800      	cmp	r0, #0
   1884e:	f47f a828 	bne.w	178a2 <d_print_comp_inner+0xd36>
   18852:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18856:	2bff      	cmp	r3, #255	; 0xff
   18858:	f000 84db 	beq.w	19212 <d_print_comp_inner+0x26a6>
   1885c:	1c58      	adds	r0, r3, #1
   1885e:	2528      	movs	r5, #40	; 0x28
   18860:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   18864:	4641      	mov	r1, r8
   18866:	54e5      	strb	r5, [r4, r3]
   18868:	4632      	mov	r2, r6
   1886a:	4620      	mov	r0, r4
   1886c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18870:	f000 ff20 	bl	196b4 <d_print_comp>
   18874:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18878:	29ff      	cmp	r1, #255	; 0xff
   1887a:	f000 846d 	beq.w	19158 <d_print_comp_inner+0x25ec>
   1887e:	2329      	movs	r3, #41	; 0x29
   18880:	1c4a      	adds	r2, r1, #1
   18882:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18886:	5463      	strb	r3, [r4, r1]
   18888:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1888c:	f7fe ba3c 	b.w	16d08 <d_print_comp_inner+0x19c>
   18890:	f10d 0910 	add.w	r9, sp, #16
   18894:	685a      	ldr	r2, [r3, #4]
   18896:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1889a:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1889e:	4641      	mov	r1, r8
   188a0:	4620      	mov	r0, r4
   188a2:	9204      	str	r2, [sp, #16]
   188a4:	9305      	str	r3, [sp, #20]
   188a6:	f7fe f961 	bl	16b6c <d_print_comp_inner>
   188aa:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   188ae:	9a05      	ldr	r2, [sp, #20]
   188b0:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   188b4:	b113      	cbz	r3, 188bc <d_print_comp_inner+0x1d50>
   188b6:	9b02      	ldr	r3, [sp, #8]
   188b8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   188bc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   188c0:	2b3c      	cmp	r3, #60	; 0x3c
   188c2:	f000 83d9 	beq.w	19078 <d_print_comp_inner+0x250c>
   188c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   188ca:	29ff      	cmp	r1, #255	; 0xff
   188cc:	f000 8467 	beq.w	1919e <d_print_comp_inner+0x2632>
   188d0:	1c4a      	adds	r2, r1, #1
   188d2:	233c      	movs	r3, #60	; 0x3c
   188d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   188d8:	5463      	strb	r3, [r4, r1]
   188da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   188de:	686b      	ldr	r3, [r5, #4]
   188e0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   188e4:	689b      	ldr	r3, [r3, #8]
   188e6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   188ea:	461a      	mov	r2, r3
   188ec:	4641      	mov	r1, r8
   188ee:	4620      	mov	r0, r4
   188f0:	9304      	str	r3, [sp, #16]
   188f2:	9505      	str	r5, [sp, #20]
   188f4:	f7fe f93a 	bl	16b6c <d_print_comp_inner>
   188f8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   188fc:	9a05      	ldr	r2, [sp, #20]
   188fe:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18902:	2b3e      	cmp	r3, #62	; 0x3e
   18904:	f000 83ab 	beq.w	1905e <d_print_comp_inner+0x24f2>
   18908:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1890c:	29ff      	cmp	r1, #255	; 0xff
   1890e:	f000 849a 	beq.w	19246 <d_print_comp_inner+0x26da>
   18912:	233e      	movs	r3, #62	; 0x3e
   18914:	1c4a      	adds	r2, r1, #1
   18916:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1891a:	5463      	strb	r3, [r4, r1]
   1891c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18920:	f7fe b9f2 	b.w	16d08 <d_print_comp_inner+0x19c>
   18924:	6852      	ldr	r2, [r2, #4]
   18926:	7c16      	ldrb	r6, [r2, #16]
   18928:	2e00      	cmp	r6, #0
   1892a:	f43f a9e7 	beq.w	17cfc <d_print_comp_inner+0x1190>
   1892e:	2e06      	cmp	r6, #6
   18930:	f240 8337 	bls.w	18fa2 <d_print_comp_inner+0x2436>
   18934:	2e07      	cmp	r6, #7
   18936:	f47f a9e1 	bne.w	17cfc <d_print_comp_inner+0x1190>
   1893a:	68aa      	ldr	r2, [r5, #8]
   1893c:	7811      	ldrb	r1, [r2, #0]
   1893e:	2900      	cmp	r1, #0
   18940:	f47f a9dc 	bne.w	17cfc <d_print_comp_inner+0x1190>
   18944:	6891      	ldr	r1, [r2, #8]
   18946:	2901      	cmp	r1, #1
   18948:	f47f a9d8 	bne.w	17cfc <d_print_comp_inner+0x1190>
   1894c:	2b3c      	cmp	r3, #60	; 0x3c
   1894e:	f47f a9d5 	bne.w	17cfc <d_print_comp_inner+0x1190>
   18952:	6853      	ldr	r3, [r2, #4]
   18954:	781b      	ldrb	r3, [r3, #0]
   18956:	2b30      	cmp	r3, #48	; 0x30
   18958:	f000 8626 	beq.w	195a8 <d_print_comp_inner+0x2a3c>
   1895c:	2b31      	cmp	r3, #49	; 0x31
   1895e:	f47f a9cd 	bne.w	17cfc <d_print_comp_inner+0x1190>
   18962:	2204      	movs	r2, #4
   18964:	4924      	ldr	r1, [pc, #144]	; (189f8 <d_print_comp_inner+0x1e8c>)
   18966:	f7fb fe2d 	bl	145c4 <d_append_buffer>
   1896a:	f7fe b9cd 	b.w	16d08 <d_print_comp_inner+0x19c>
   1896e:	4e23      	ldr	r6, [pc, #140]	; (189fc <d_print_comp_inner+0x1e90>)
   18970:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18974:	f106 0a02 	add.w	sl, r6, #2
   18978:	e009      	b.n	1898e <d_print_comp_inner+0x1e22>
   1897a:	460b      	mov	r3, r1
   1897c:	3101      	adds	r1, #1
   1897e:	45b2      	cmp	sl, r6
   18980:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18984:	54e7      	strb	r7, [r4, r3]
   18986:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1898a:	f43e ad52 	beq.w	17432 <d_print_comp_inner+0x8c6>
   1898e:	29ff      	cmp	r1, #255	; 0xff
   18990:	f816 7b01 	ldrb.w	r7, [r6], #1
   18994:	d1f1      	bne.n	1897a <d_print_comp_inner+0x1e0e>
   18996:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1899a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1899e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189a2:	4620      	mov	r0, r4
   189a4:	4798      	blx	r3
   189a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189aa:	3301      	adds	r3, #1
   189ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189b0:	2101      	movs	r1, #1
   189b2:	2300      	movs	r3, #0
   189b4:	e7e3      	b.n	1897e <d_print_comp_inner+0x1e12>
   189b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189ba:	29ff      	cmp	r1, #255	; 0xff
   189bc:	f000 84e4 	beq.w	19388 <d_print_comp_inner+0x281c>
   189c0:	2220      	movs	r2, #32
   189c2:	1c4b      	adds	r3, r1, #1
   189c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   189c8:	5462      	strb	r2, [r4, r1]
   189ca:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   189ce:	f7fe bdbb 	b.w	17548 <d_print_comp_inner+0x9dc>
   189d2:	bf00      	nop
   189d4:	00024548 	.word	0x00024548
   189d8:	00024370 	.word	0x00024370
   189dc:	000242fc 	.word	0x000242fc
   189e0:	000244c0 	.word	0x000244c0
   189e4:	000244f4 	.word	0x000244f4
   189e8:	000245c4 	.word	0x000245c4
   189ec:	00024300 	.word	0x00024300
   189f0:	000244f8 	.word	0x000244f8
   189f4:	00024804 	.word	0x00024804
   189f8:	00024524 	.word	0x00024524
   189fc:	0002434c 	.word	0x0002434c
   18a00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a04:	29ff      	cmp	r1, #255	; 0xff
   18a06:	f000 8465 	beq.w	192d4 <d_print_comp_inner+0x2768>
   18a0a:	2220      	movs	r2, #32
   18a0c:	1c4b      	adds	r3, r1, #1
   18a0e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18a12:	5462      	strb	r2, [r4, r1]
   18a14:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18a18:	f7fe bd80 	b.w	1751c <d_print_comp_inner+0x9b0>
   18a1c:	2700      	movs	r7, #0
   18a1e:	55a7      	strb	r7, [r4, r6]
   18a20:	4631      	mov	r1, r6
   18a22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a2a:	4620      	mov	r0, r4
   18a2c:	4798      	blx	r3
   18a2e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a32:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18a36:	3301      	adds	r3, #1
   18a38:	463e      	mov	r6, r7
   18a3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a3e:	f7fe be31 	b.w	176a4 <d_print_comp_inner+0xb38>
   18a42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a46:	29ff      	cmp	r1, #255	; 0xff
   18a48:	f000 8465 	beq.w	19316 <d_print_comp_inner+0x27aa>
   18a4c:	1c4a      	adds	r2, r1, #1
   18a4e:	235b      	movs	r3, #91	; 0x5b
   18a50:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a54:	5463      	strb	r3, [r4, r1]
   18a56:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a5a:	4641      	mov	r1, r8
   18a5c:	68aa      	ldr	r2, [r5, #8]
   18a5e:	4620      	mov	r0, r4
   18a60:	f000 fe28 	bl	196b4 <d_print_comp>
   18a64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a68:	29ff      	cmp	r1, #255	; 0xff
   18a6a:	f000 8312 	beq.w	19092 <d_print_comp_inner+0x2526>
   18a6e:	235d      	movs	r3, #93	; 0x5d
   18a70:	1c4a      	adds	r2, r1, #1
   18a72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a76:	5463      	strb	r3, [r4, r1]
   18a78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a7c:	f7fe b944 	b.w	16d08 <d_print_comp_inner+0x19c>
   18a80:	4631      	mov	r1, r6
   18a82:	4620      	mov	r0, r4
   18a84:	f7fb ffca 	bl	14a1c <d_find_pack>
   18a88:	b928      	cbnz	r0, 18a96 <d_print_comp_inner+0x1f2a>
   18a8a:	e007      	b.n	18a9c <d_print_comp_inner+0x1f30>
   18a8c:	6843      	ldr	r3, [r0, #4]
   18a8e:	b12b      	cbz	r3, 18a9c <d_print_comp_inner+0x1f30>
   18a90:	6880      	ldr	r0, [r0, #8]
   18a92:	3501      	adds	r5, #1
   18a94:	b110      	cbz	r0, 18a9c <d_print_comp_inner+0x1f30>
   18a96:	7803      	ldrb	r3, [r0, #0]
   18a98:	2b2f      	cmp	r3, #47	; 0x2f
   18a9a:	d0f7      	beq.n	18a8c <d_print_comp_inner+0x1f20>
   18a9c:	462a      	mov	r2, r5
   18a9e:	a804      	add	r0, sp, #16
   18aa0:	49d4      	ldr	r1, [pc, #848]	; (18df4 <d_print_comp_inner+0x2288>)
   18aa2:	f005 ff43 	bl	1e92c <sprintf>
   18aa6:	a804      	add	r0, sp, #16
   18aa8:	f006 f8ea 	bl	1ec80 <strlen>
   18aac:	2800      	cmp	r0, #0
   18aae:	f43e a92b 	beq.w	16d08 <d_print_comp_inner+0x19c>
   18ab2:	ad04      	add	r5, sp, #16
   18ab4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ab8:	182f      	adds	r7, r5, r0
   18aba:	f04f 0800 	mov.w	r8, #0
   18abe:	e009      	b.n	18ad4 <d_print_comp_inner+0x1f68>
   18ac0:	460b      	mov	r3, r1
   18ac2:	3101      	adds	r1, #1
   18ac4:	42bd      	cmp	r5, r7
   18ac6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18aca:	54e6      	strb	r6, [r4, r3]
   18acc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18ad0:	f43e a91a 	beq.w	16d08 <d_print_comp_inner+0x19c>
   18ad4:	29ff      	cmp	r1, #255	; 0xff
   18ad6:	f815 6b01 	ldrb.w	r6, [r5], #1
   18ada:	d1f1      	bne.n	18ac0 <d_print_comp_inner+0x1f54>
   18adc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ae0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18ae4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ae8:	4620      	mov	r0, r4
   18aea:	4798      	blx	r3
   18aec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18af0:	3301      	adds	r3, #1
   18af2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18af6:	2101      	movs	r1, #1
   18af8:	2300      	movs	r3, #0
   18afa:	e7e3      	b.n	18ac4 <d_print_comp_inner+0x1f58>
   18afc:	686a      	ldr	r2, [r5, #4]
   18afe:	4641      	mov	r1, r8
   18b00:	4620      	mov	r0, r4
   18b02:	f000 fdd7 	bl	196b4 <d_print_comp>
   18b06:	f7fe b8ff 	b.w	16d08 <d_print_comp_inner+0x19c>
   18b0a:	29ff      	cmp	r1, #255	; 0xff
   18b0c:	f000 83d2 	beq.w	192b4 <d_print_comp_inner+0x2748>
   18b10:	232d      	movs	r3, #45	; 0x2d
   18b12:	1c4a      	adds	r2, r1, #1
   18b14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b18:	5463      	strb	r3, [r4, r1]
   18b1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b1e:	f7ff b90e 	b.w	17d3e <d_print_comp_inner+0x11d2>
   18b22:	2500      	movs	r5, #0
   18b24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b2c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18b30:	4620      	mov	r0, r4
   18b32:	4798      	blx	r3
   18b34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b38:	3301      	adds	r3, #1
   18b3a:	4629      	mov	r1, r5
   18b3c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b40:	2201      	movs	r2, #1
   18b42:	f7ff bbeb 	b.w	1831c <d_print_comp_inner+0x17b0>
   18b46:	2500      	movs	r5, #0
   18b48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b50:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18b54:	4620      	mov	r0, r4
   18b56:	4798      	blx	r3
   18b58:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b5c:	3301      	adds	r3, #1
   18b5e:	4629      	mov	r1, r5
   18b60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b64:	2201      	movs	r2, #1
   18b66:	f7ff ba8f 	b.w	18088 <d_print_comp_inner+0x151c>
   18b6a:	2600      	movs	r6, #0
   18b6c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18b70:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18b74:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18b78:	4798      	blx	r3
   18b7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b7e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18b82:	3301      	adds	r3, #1
   18b84:	4631      	mov	r1, r6
   18b86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b8a:	f7fe bd43 	b.w	17614 <d_print_comp_inner+0xaa8>
   18b8e:	2600      	movs	r6, #0
   18b90:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18b94:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18b98:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18b9c:	4798      	blx	r3
   18b9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ba2:	3301      	adds	r3, #1
   18ba4:	4631      	mov	r1, r6
   18ba6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18baa:	2201      	movs	r2, #1
   18bac:	f7fe bb74 	b.w	17298 <d_print_comp_inner+0x72c>
   18bb0:	2500      	movs	r5, #0
   18bb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bb6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18bbe:	4620      	mov	r0, r4
   18bc0:	4798      	blx	r3
   18bc2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bc6:	3301      	adds	r3, #1
   18bc8:	4629      	mov	r1, r5
   18bca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bce:	2201      	movs	r2, #1
   18bd0:	f7ff bae4 	b.w	1819c <d_print_comp_inner+0x1630>
   18bd4:	220d      	movs	r2, #13
   18bd6:	4988      	ldr	r1, [pc, #544]	; (18df8 <d_print_comp_inner+0x228c>)
   18bd8:	4620      	mov	r0, r4
   18bda:	f7fb fcf3 	bl	145c4 <d_append_buffer>
   18bde:	68a9      	ldr	r1, [r5, #8]
   18be0:	4620      	mov	r0, r4
   18be2:	3101      	adds	r1, #1
   18be4:	f7fb ff9e 	bl	14b24 <d_append_num>
   18be8:	2203      	movs	r2, #3
   18bea:	4984      	ldr	r1, [pc, #528]	; (18dfc <d_print_comp_inner+0x2290>)
   18bec:	4620      	mov	r0, r4
   18bee:	f7fb fce9 	bl	145c4 <d_append_buffer>
   18bf2:	686d      	ldr	r5, [r5, #4]
   18bf4:	f7fe bc22 	b.w	1743c <d_print_comp_inner+0x8d0>
   18bf8:	2500      	movs	r5, #0
   18bfa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bfe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c02:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c06:	4620      	mov	r0, r4
   18c08:	4798      	blx	r3
   18c0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c0e:	3301      	adds	r3, #1
   18c10:	4629      	mov	r1, r5
   18c12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c16:	2201      	movs	r2, #1
   18c18:	f7fe be08 	b.w	1782c <d_print_comp_inner+0xcc0>
   18c1c:	2301      	movs	r3, #1
   18c1e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18c22:	f7fe b871 	b.w	16d08 <d_print_comp_inner+0x19c>
   18c26:	2500      	movs	r5, #0
   18c28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c30:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c34:	4620      	mov	r0, r4
   18c36:	4798      	blx	r3
   18c38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c3c:	3301      	adds	r3, #1
   18c3e:	4629      	mov	r1, r5
   18c40:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c44:	2201      	movs	r2, #1
   18c46:	f7ff ba8f 	b.w	18168 <d_print_comp_inner+0x15fc>
   18c4a:	2500      	movs	r5, #0
   18c4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c58:	4620      	mov	r0, r4
   18c5a:	4798      	blx	r3
   18c5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c60:	3301      	adds	r3, #1
   18c62:	4629      	mov	r1, r5
   18c64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c68:	2201      	movs	r2, #1
   18c6a:	f7ff bbc5 	b.w	183f8 <d_print_comp_inner+0x188c>
   18c6e:	a914      	add	r1, sp, #80	; 0x50
   18c70:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18c74:	f841 0d40 	str.w	r0, [r1, #-64]!
   18c78:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18c7c:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18c80:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18c84:	4620      	mov	r0, r4
   18c86:	4641      	mov	r1, r8
   18c88:	9306      	str	r3, [sp, #24]
   18c8a:	9607      	str	r6, [sp, #28]
   18c8c:	9505      	str	r5, [sp, #20]
   18c8e:	f000 fd11 	bl	196b4 <d_print_comp>
   18c92:	9e06      	ldr	r6, [sp, #24]
   18c94:	9b04      	ldr	r3, [sp, #16]
   18c96:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18c9a:	2e00      	cmp	r6, #0
   18c9c:	f47e a834 	bne.w	16d08 <d_print_comp_inner+0x19c>
   18ca0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ca4:	29ff      	cmp	r1, #255	; 0xff
   18ca6:	f000 8409 	beq.w	194bc <d_print_comp_inner+0x2950>
   18caa:	2320      	movs	r3, #32
   18cac:	1c4a      	adds	r2, r1, #1
   18cae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18cb2:	5463      	strb	r3, [r4, r1]
   18cb4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18cb8:	f7fe be0b 	b.w	178d2 <d_print_comp_inner+0xd66>
   18cbc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18cc0:	2b00      	cmp	r3, #0
   18cc2:	f6fe abff 	blt.w	174c4 <d_print_comp_inner+0x958>
   18cc6:	2b00      	cmp	r3, #0
   18cc8:	f000 829d 	beq.w	19206 <d_print_comp_inner+0x269a>
   18ccc:	6880      	ldr	r0, [r0, #8]
   18cce:	3b01      	subs	r3, #1
   18cd0:	2800      	cmp	r0, #0
   18cd2:	f43e a82d 	beq.w	16d30 <d_print_comp_inner+0x1c4>
   18cd6:	7802      	ldrb	r2, [r0, #0]
   18cd8:	2a2f      	cmp	r2, #47	; 0x2f
   18cda:	d0f4      	beq.n	18cc6 <d_print_comp_inner+0x215a>
   18cdc:	f7fe b828 	b.w	16d30 <d_print_comp_inner+0x1c4>
   18ce0:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18ce4:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18ce8:	f1be 0f00 	cmp.w	lr, #0
   18cec:	dd14      	ble.n	18d18 <d_print_comp_inner+0x21ac>
   18cee:	6813      	ldr	r3, [r2, #0]
   18cf0:	4299      	cmp	r1, r3
   18cf2:	f000 83f5 	beq.w	194e0 <d_print_comp_inner+0x2974>
   18cf6:	f102 0008 	add.w	r0, r2, #8
   18cfa:	463b      	mov	r3, r7
   18cfc:	46a4      	mov	ip, r4
   18cfe:	e004      	b.n	18d0a <d_print_comp_inner+0x219e>
   18d00:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18d04:	42a1      	cmp	r1, r4
   18d06:	f000 81d4 	beq.w	190b2 <d_print_comp_inner+0x2546>
   18d0a:	3301      	adds	r3, #1
   18d0c:	459e      	cmp	lr, r3
   18d0e:	4681      	mov	r9, r0
   18d10:	f100 0008 	add.w	r0, r0, #8
   18d14:	d1f4      	bne.n	18d00 <d_print_comp_inner+0x2194>
   18d16:	4664      	mov	r4, ip
   18d18:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18d1c:	459e      	cmp	lr, r3
   18d1e:	f280 84b9 	bge.w	19694 <d_print_comp_inner+0x2b28>
   18d22:	f10e 0301 	add.w	r3, lr, #1
   18d26:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18d2a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18d2e:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18d32:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18d36:	3004      	adds	r0, #4
   18d38:	468e      	mov	lr, r1
   18d3a:	2a00      	cmp	r2, #0
   18d3c:	f000 848d 	beq.w	1965a <d_print_comp_inner+0x2aee>
   18d40:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18d44:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   18d48:	428b      	cmp	r3, r1
   18d4a:	f103 0c01 	add.w	ip, r3, #1
   18d4e:	f280 84a1 	bge.w	19694 <d_print_comp_inner+0x2b28>
   18d52:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   18d56:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   18d5a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18d5e:	6851      	ldr	r1, [r2, #4]
   18d60:	6059      	str	r1, [r3, #4]
   18d62:	6003      	str	r3, [r0, #0]
   18d64:	6812      	ldr	r2, [r2, #0]
   18d66:	4618      	mov	r0, r3
   18d68:	e7e7      	b.n	18d3a <d_print_comp_inner+0x21ce>
   18d6a:	2500      	movs	r5, #0
   18d6c:	4619      	mov	r1, r3
   18d6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d76:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d7a:	4620      	mov	r0, r4
   18d7c:	4798      	blx	r3
   18d7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d82:	1c5a      	adds	r2, r3, #1
   18d84:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18d88:	462b      	mov	r3, r5
   18d8a:	2201      	movs	r2, #1
   18d8c:	f7fe bd3d 	b.w	1780a <d_print_comp_inner+0xc9e>
   18d90:	2e00      	cmp	r6, #0
   18d92:	f000 844d 	beq.w	19630 <d_print_comp_inner+0x2ac4>
   18d96:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   18d9a:	f040 8488 	bne.w	196ae <d_print_comp_inner+0x2b42>
   18d9e:	6873      	ldr	r3, [r6, #4]
   18da0:	b373      	cbz	r3, 18e00 <d_print_comp_inner+0x2294>
   18da2:	4607      	mov	r7, r0
   18da4:	e007      	b.n	18db6 <d_print_comp_inner+0x224a>
   18da6:	3701      	adds	r7, #1
   18da8:	68b6      	ldr	r6, [r6, #8]
   18daa:	b356      	cbz	r6, 18e02 <d_print_comp_inner+0x2296>
   18dac:	7833      	ldrb	r3, [r6, #0]
   18dae:	2b2f      	cmp	r3, #47	; 0x2f
   18db0:	d127      	bne.n	18e02 <d_print_comp_inner+0x2296>
   18db2:	6873      	ldr	r3, [r6, #4]
   18db4:	b32b      	cbz	r3, 18e02 <d_print_comp_inner+0x2296>
   18db6:	781a      	ldrb	r2, [r3, #0]
   18db8:	2a4a      	cmp	r2, #74	; 0x4a
   18dba:	d1f4      	bne.n	18da6 <d_print_comp_inner+0x223a>
   18dbc:	6859      	ldr	r1, [r3, #4]
   18dbe:	4620      	mov	r0, r4
   18dc0:	f7fb fe2c 	bl	14a1c <d_find_pack>
   18dc4:	b198      	cbz	r0, 18dee <d_print_comp_inner+0x2282>
   18dc6:	7803      	ldrb	r3, [r0, #0]
   18dc8:	2b2f      	cmp	r3, #47	; 0x2f
   18dca:	f040 846c 	bne.w	196a6 <d_print_comp_inner+0x2b3a>
   18dce:	6843      	ldr	r3, [r0, #4]
   18dd0:	2b00      	cmp	r3, #0
   18dd2:	f000 8464 	beq.w	1969e <d_print_comp_inner+0x2b32>
   18dd6:	4603      	mov	r3, r0
   18dd8:	2000      	movs	r0, #0
   18dda:	e004      	b.n	18de6 <d_print_comp_inner+0x227a>
   18ddc:	781a      	ldrb	r2, [r3, #0]
   18dde:	2a2f      	cmp	r2, #47	; 0x2f
   18de0:	d105      	bne.n	18dee <d_print_comp_inner+0x2282>
   18de2:	685a      	ldr	r2, [r3, #4]
   18de4:	b11a      	cbz	r2, 18dee <d_print_comp_inner+0x2282>
   18de6:	689b      	ldr	r3, [r3, #8]
   18de8:	3001      	adds	r0, #1
   18dea:	2b00      	cmp	r3, #0
   18dec:	d1f6      	bne.n	18ddc <d_print_comp_inner+0x2270>
   18dee:	4407      	add	r7, r0
   18df0:	e7da      	b.n	18da8 <d_print_comp_inner+0x223c>
   18df2:	bf00      	nop
   18df4:	000242fc 	.word	0x000242fc
   18df8:	00024350 	.word	0x00024350
   18dfc:	00024360 	.word	0x00024360
   18e00:	461f      	mov	r7, r3
   18e02:	4639      	mov	r1, r7
   18e04:	4620      	mov	r0, r4
   18e06:	f7fb fe8d 	bl	14b24 <d_append_num>
   18e0a:	f7fd bf7d 	b.w	16d08 <d_print_comp_inner+0x19c>
   18e0e:	2500      	movs	r5, #0
   18e10:	4619      	mov	r1, r3
   18e12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e1a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e1e:	4620      	mov	r0, r4
   18e20:	4798      	blx	r3
   18e22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e26:	1c5a      	adds	r2, r3, #1
   18e28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18e2c:	462b      	mov	r3, r5
   18e2e:	2101      	movs	r1, #1
   18e30:	f7fe bb8e 	b.w	17550 <d_print_comp_inner+0x9e4>
   18e34:	2600      	movs	r6, #0
   18e36:	4619      	mov	r1, r3
   18e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e40:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18e44:	4620      	mov	r0, r4
   18e46:	4798      	blx	r3
   18e48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e4c:	1c5a      	adds	r2, r3, #1
   18e4e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18e52:	4633      	mov	r3, r6
   18e54:	2101      	movs	r1, #1
   18e56:	f7fe bb65 	b.w	17524 <d_print_comp_inner+0x9b8>
   18e5a:	2200      	movs	r2, #0
   18e5c:	4619      	mov	r1, r3
   18e5e:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   18e62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e6a:	4620      	mov	r0, r4
   18e6c:	4798      	blx	r3
   18e6e:	2329      	movs	r3, #41	; 0x29
   18e70:	7023      	strb	r3, [r4, #0]
   18e72:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e76:	782a      	ldrb	r2, [r5, #0]
   18e78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e7c:	2101      	movs	r1, #1
   18e7e:	3301      	adds	r3, #1
   18e80:	2a3d      	cmp	r2, #61	; 0x3d
   18e82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18e8a:	f47e af58 	bne.w	17d3e <d_print_comp_inner+0x11d2>
   18e8e:	e63f      	b.n	18b10 <d_print_comp_inner+0x1fa4>
   18e90:	2700      	movs	r7, #0
   18e92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e96:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18e9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e9e:	4620      	mov	r0, r4
   18ea0:	4798      	blx	r3
   18ea2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ea6:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18eaa:	3301      	adds	r3, #1
   18eac:	4639      	mov	r1, r7
   18eae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18eb2:	f7fe bf28 	b.w	17d06 <d_print_comp_inner+0x119a>
   18eb6:	2500      	movs	r5, #0
   18eb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ebc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ec0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ec4:	4620      	mov	r0, r4
   18ec6:	4798      	blx	r3
   18ec8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ecc:	3301      	adds	r3, #1
   18ece:	4629      	mov	r1, r5
   18ed0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ed4:	2201      	movs	r2, #1
   18ed6:	f7ff bb12 	b.w	184fe <d_print_comp_inner+0x1992>
   18eda:	781b      	ldrb	r3, [r3, #0]
   18edc:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   18ee0:	2901      	cmp	r1, #1
   18ee2:	d903      	bls.n	18eec <d_print_comp_inner+0x2380>
   18ee4:	3b72      	subs	r3, #114	; 0x72
   18ee6:	2b01      	cmp	r3, #1
   18ee8:	f63d aead 	bhi.w	16c46 <d_print_comp_inner+0xda>
   18eec:	4641      	mov	r1, r8
   18eee:	4620      	mov	r0, r4
   18ef0:	f001 f9c8 	bl	1a284 <d_print_expr_op>
   18ef4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ef8:	29ff      	cmp	r1, #255	; 0xff
   18efa:	f000 8271 	beq.w	193e0 <d_print_comp_inner+0x2874>
   18efe:	1c4a      	adds	r2, r1, #1
   18f00:	233c      	movs	r3, #60	; 0x3c
   18f02:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f06:	5463      	strb	r3, [r4, r1]
   18f08:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f0c:	68ab      	ldr	r3, [r5, #8]
   18f0e:	4641      	mov	r1, r8
   18f10:	685a      	ldr	r2, [r3, #4]
   18f12:	4620      	mov	r0, r4
   18f14:	f000 fbce 	bl	196b4 <d_print_comp>
   18f18:	2202      	movs	r2, #2
   18f1a:	49d5      	ldr	r1, [pc, #852]	; (19270 <d_print_comp_inner+0x2704>)
   18f1c:	4620      	mov	r0, r4
   18f1e:	f7fb fb51 	bl	145c4 <d_append_buffer>
   18f22:	68ab      	ldr	r3, [r5, #8]
   18f24:	4641      	mov	r1, r8
   18f26:	689a      	ldr	r2, [r3, #8]
   18f28:	4620      	mov	r0, r4
   18f2a:	f000 fbc3 	bl	196b4 <d_print_comp>
   18f2e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18f32:	29ff      	cmp	r1, #255	; 0xff
   18f34:	f000 81df 	beq.w	192f6 <d_print_comp_inner+0x278a>
   18f38:	2329      	movs	r3, #41	; 0x29
   18f3a:	1c4a      	adds	r2, r1, #1
   18f3c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18f40:	5463      	strb	r3, [r4, r1]
   18f42:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f46:	f7fd bedf 	b.w	16d08 <d_print_comp_inner+0x19c>
   18f4a:	4632      	mov	r2, r6
   18f4c:	4641      	mov	r1, r8
   18f4e:	4620      	mov	r0, r4
   18f50:	f000 fbb0 	bl	196b4 <d_print_comp>
   18f54:	f7fd bed8 	b.w	16d08 <d_print_comp_inner+0x19c>
   18f58:	2600      	movs	r6, #0
   18f5a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f62:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18f66:	4620      	mov	r0, r4
   18f68:	4798      	blx	r3
   18f6a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f6e:	3301      	adds	r3, #1
   18f70:	4631      	mov	r1, r6
   18f72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f76:	2201      	movs	r2, #1
   18f78:	f7fe ba55 	b.w	17426 <d_print_comp_inner+0x8ba>
   18f7c:	49bd      	ldr	r1, [pc, #756]	; (19274 <d_print_comp_inner+0x2708>)
   18f7e:	6870      	ldr	r0, [r6, #4]
   18f80:	f005 feec 	bl	1ed5c <strncmp>
   18f84:	2800      	cmp	r0, #0
   18f86:	f47e aabd 	bne.w	17504 <d_print_comp_inner+0x998>
   18f8a:	68aa      	ldr	r2, [r5, #8]
   18f8c:	4641      	mov	r1, r8
   18f8e:	4620      	mov	r0, r4
   18f90:	f000 fb90 	bl	196b4 <d_print_comp>
   18f94:	2202      	movs	r2, #2
   18f96:	49b8      	ldr	r1, [pc, #736]	; (19278 <d_print_comp_inner+0x270c>)
   18f98:	4620      	mov	r0, r4
   18f9a:	f7fb fb13 	bl	145c4 <d_append_buffer>
   18f9e:	f7fe badd 	b.w	1755c <d_print_comp_inner+0x9f0>
   18fa2:	68aa      	ldr	r2, [r5, #8]
   18fa4:	7817      	ldrb	r7, [r2, #0]
   18fa6:	2f00      	cmp	r7, #0
   18fa8:	f47e aea8 	bne.w	17cfc <d_print_comp_inner+0x1190>
   18fac:	2b3d      	cmp	r3, #61	; 0x3d
   18fae:	f000 82ef 	beq.w	19590 <d_print_comp_inner+0x2a24>
   18fb2:	68aa      	ldr	r2, [r5, #8]
   18fb4:	4641      	mov	r1, r8
   18fb6:	4620      	mov	r0, r4
   18fb8:	3e02      	subs	r6, #2
   18fba:	f000 fb7b 	bl	196b4 <d_print_comp>
   18fbe:	2e04      	cmp	r6, #4
   18fc0:	f63d aea2 	bhi.w	16d08 <d_print_comp_inner+0x19c>
   18fc4:	e8df f006 	tbb	[pc, r6]
   18fc8:	0a111826 	.word	0x0a111826
   18fcc:	03          	.byte	0x03
   18fcd:	00          	.byte	0x00
   18fce:	4620      	mov	r0, r4
   18fd0:	2203      	movs	r2, #3
   18fd2:	49aa      	ldr	r1, [pc, #680]	; (1927c <d_print_comp_inner+0x2710>)
   18fd4:	f7fb faf6 	bl	145c4 <d_append_buffer>
   18fd8:	f7fd be96 	b.w	16d08 <d_print_comp_inner+0x19c>
   18fdc:	4620      	mov	r0, r4
   18fde:	2202      	movs	r2, #2
   18fe0:	49a7      	ldr	r1, [pc, #668]	; (19280 <d_print_comp_inner+0x2714>)
   18fe2:	f7fb faef 	bl	145c4 <d_append_buffer>
   18fe6:	f7fd be8f 	b.w	16d08 <d_print_comp_inner+0x19c>
   18fea:	4620      	mov	r0, r4
   18fec:	2202      	movs	r2, #2
   18fee:	49a5      	ldr	r1, [pc, #660]	; (19284 <d_print_comp_inner+0x2718>)
   18ff0:	f7fb fae8 	bl	145c4 <d_append_buffer>
   18ff4:	f7fd be88 	b.w	16d08 <d_print_comp_inner+0x19c>
   18ff8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ffc:	29ff      	cmp	r1, #255	; 0xff
   18ffe:	f000 831a 	beq.w	19636 <d_print_comp_inner+0x2aca>
   19002:	236c      	movs	r3, #108	; 0x6c
   19004:	1c4a      	adds	r2, r1, #1
   19006:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1900a:	5463      	strb	r3, [r4, r1]
   1900c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19010:	f7fd be7a 	b.w	16d08 <d_print_comp_inner+0x19c>
   19014:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19018:	29ff      	cmp	r1, #255	; 0xff
   1901a:	f000 82db 	beq.w	195d4 <d_print_comp_inner+0x2a68>
   1901e:	2375      	movs	r3, #117	; 0x75
   19020:	1c4a      	adds	r2, r1, #1
   19022:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19026:	5463      	strb	r3, [r4, r1]
   19028:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1902c:	f7fd be6c 	b.w	16d08 <d_print_comp_inner+0x19c>
   19030:	2600      	movs	r6, #0
   19032:	4619      	mov	r1, r3
   19034:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19038:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1903c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19040:	4620      	mov	r0, r4
   19042:	4798      	blx	r3
   19044:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19048:	1c5a      	adds	r2, r3, #1
   1904a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1904e:	4633      	mov	r3, r6
   19050:	2101      	movs	r1, #1
   19052:	f7fe bd3c 	b.w	17ace <d_print_comp_inner+0xf62>
   19056:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1905a:	f7fe bf95 	b.w	17f88 <d_print_comp_inner+0x141c>
   1905e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19062:	29ff      	cmp	r1, #255	; 0xff
   19064:	f000 8244 	beq.w	194f0 <d_print_comp_inner+0x2984>
   19068:	2320      	movs	r3, #32
   1906a:	1c4a      	adds	r2, r1, #1
   1906c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19070:	5463      	strb	r3, [r4, r1]
   19072:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19076:	e447      	b.n	18908 <d_print_comp_inner+0x1d9c>
   19078:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1907c:	29ff      	cmp	r1, #255	; 0xff
   1907e:	f000 826e 	beq.w	1955e <d_print_comp_inner+0x29f2>
   19082:	2320      	movs	r3, #32
   19084:	1c4a      	adds	r2, r1, #1
   19086:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1908a:	5463      	strb	r3, [r4, r1]
   1908c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19090:	e419      	b.n	188c6 <d_print_comp_inner+0x1d5a>
   19092:	2500      	movs	r5, #0
   19094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19098:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1909c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190a0:	4620      	mov	r0, r4
   190a2:	4798      	blx	r3
   190a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190a8:	3301      	adds	r3, #1
   190aa:	4629      	mov	r1, r5
   190ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190b0:	e4dd      	b.n	18a6e <d_print_comp_inner+0x1f02>
   190b2:	4664      	mov	r4, ip
   190b4:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   190b8:	b1d8      	cbz	r0, 190f2 <d_print_comp_inner+0x2586>
   190ba:	6802      	ldr	r2, [r0, #0]
   190bc:	4291      	cmp	r1, r2
   190be:	d00a      	beq.n	190d6 <d_print_comp_inner+0x256a>
   190c0:	4603      	mov	r3, r0
   190c2:	e004      	b.n	190ce <d_print_comp_inner+0x2562>
   190c4:	685b      	ldr	r3, [r3, #4]
   190c6:	b1a3      	cbz	r3, 190f2 <d_print_comp_inner+0x2586>
   190c8:	681a      	ldr	r2, [r3, #0]
   190ca:	4291      	cmp	r1, r2
   190cc:	d003      	beq.n	190d6 <d_print_comp_inner+0x256a>
   190ce:	4295      	cmp	r5, r2
   190d0:	d1f8      	bne.n	190c4 <d_print_comp_inner+0x2558>
   190d2:	4298      	cmp	r0, r3
   190d4:	d0f6      	beq.n	190c4 <d_print_comp_inner+0x2558>
   190d6:	3104      	adds	r1, #4
   190d8:	4620      	mov	r0, r4
   190da:	f7fb fc83 	bl	149e4 <d_lookup_template_argument.isra.6>
   190de:	2800      	cmp	r0, #0
   190e0:	f43d ae26 	beq.w	16d30 <d_print_comp_inner+0x1c4>
   190e4:	7803      	ldrb	r3, [r0, #0]
   190e6:	2b2f      	cmp	r3, #47	; 0x2f
   190e8:	f43d ae11 	beq.w	16d0e <d_print_comp_inner+0x1a2>
   190ec:	4601      	mov	r1, r0
   190ee:	f7fe bc30 	b.w	17952 <d_print_comp_inner+0xde6>
   190f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   190f6:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   190fa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   190fe:	3104      	adds	r1, #4
   19100:	4620      	mov	r0, r4
   19102:	f7fb fc6f 	bl	149e4 <d_lookup_template_argument.isra.6>
   19106:	2800      	cmp	r0, #0
   19108:	f43d ae10 	beq.w	16d2c <d_print_comp_inner+0x1c0>
   1910c:	2701      	movs	r7, #1
   1910e:	e7e9      	b.n	190e4 <d_print_comp_inner+0x2578>
   19110:	2600      	movs	r6, #0
   19112:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19116:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1911a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1911e:	4620      	mov	r0, r4
   19120:	4798      	blx	r3
   19122:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19126:	f8da 5004 	ldr.w	r5, [sl, #4]
   1912a:	3301      	adds	r3, #1
   1912c:	4631      	mov	r1, r6
   1912e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19132:	f7ff b85a 	b.w	181ea <d_print_comp_inner+0x167e>
   19136:	68aa      	ldr	r2, [r5, #8]
   19138:	4641      	mov	r1, r8
   1913a:	4620      	mov	r0, r4
   1913c:	f000 faba 	bl	196b4 <d_print_comp>
   19140:	9b06      	ldr	r3, [sp, #24]
   19142:	9a00      	ldr	r2, [sp, #0]
   19144:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19148:	2b00      	cmp	r3, #0
   1914a:	f43e ac9d 	beq.w	17a88 <d_print_comp_inner+0xf1c>
   1914e:	f7fd bddb 	b.w	16d08 <d_print_comp_inner+0x19c>
   19152:	255f      	movs	r5, #95	; 0x5f
   19154:	f7ff ba10 	b.w	18578 <d_print_comp_inner+0x1a0c>
   19158:	2500      	movs	r5, #0
   1915a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1915e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19162:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19166:	4620      	mov	r0, r4
   19168:	4798      	blx	r3
   1916a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1916e:	3301      	adds	r3, #1
   19170:	4629      	mov	r1, r5
   19172:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19176:	f7ff bb82 	b.w	1887e <d_print_comp_inner+0x1d12>
   1917a:	4648      	mov	r0, r9
   1917c:	4942      	ldr	r1, [pc, #264]	; (19288 <d_print_comp_inner+0x271c>)
   1917e:	f005 fc03 	bl	1e988 <strcmp>
   19182:	b120      	cbz	r0, 1918e <d_print_comp_inner+0x2622>
   19184:	463a      	mov	r2, r7
   19186:	4641      	mov	r1, r8
   19188:	4620      	mov	r0, r4
   1918a:	f001 f87b 	bl	1a284 <d_print_expr_op>
   1918e:	68ab      	ldr	r3, [r5, #8]
   19190:	4641      	mov	r1, r8
   19192:	689a      	ldr	r2, [r3, #8]
   19194:	4620      	mov	r0, r4
   19196:	f001 f8b3 	bl	1a300 <d_print_subexpr>
   1919a:	f7fd bd9d 	b.w	16cd8 <d_print_comp_inner+0x16c>
   1919e:	2600      	movs	r6, #0
   191a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191a4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   191a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191ac:	4620      	mov	r0, r4
   191ae:	4798      	blx	r3
   191b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191b4:	3301      	adds	r3, #1
   191b6:	4631      	mov	r1, r6
   191b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   191bc:	f7ff bb88 	b.w	188d0 <d_print_comp_inner+0x1d64>
   191c0:	2500      	movs	r5, #0
   191c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   191ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191ce:	4620      	mov	r0, r4
   191d0:	4798      	blx	r3
   191d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191d6:	3301      	adds	r3, #1
   191d8:	4629      	mov	r1, r5
   191da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   191de:	f7fe bb59 	b.w	17894 <d_print_comp_inner+0xd28>
   191e2:	2500      	movs	r5, #0
   191e4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   191e8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   191ec:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   191f0:	4798      	blx	r3
   191f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191f6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   191fa:	3301      	adds	r3, #1
   191fc:	4629      	mov	r1, r5
   191fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19202:	f7fe bb2b 	b.w	1785c <d_print_comp_inner+0xcf0>
   19206:	6840      	ldr	r0, [r0, #4]
   19208:	2800      	cmp	r0, #0
   1920a:	f43d ad91 	beq.w	16d30 <d_print_comp_inner+0x1c4>
   1920e:	f7fe b959 	b.w	174c4 <d_print_comp_inner+0x958>
   19212:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   19216:	4619      	mov	r1, r3
   19218:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1921c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19220:	4620      	mov	r0, r4
   19222:	4798      	blx	r3
   19224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19228:	1c5a      	adds	r2, r3, #1
   1922a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1922e:	462b      	mov	r3, r5
   19230:	f7ff bb14 	b.w	1885c <d_print_comp_inner+0x1cf0>
   19234:	6873      	ldr	r3, [r6, #4]
   19236:	781a      	ldrb	r2, [r3, #0]
   19238:	2a01      	cmp	r2, #1
   1923a:	f000 8153 	beq.w	194e4 <d_print_comp_inner+0x2978>
   1923e:	f896 a000 	ldrb.w	sl, [r6]
   19242:	f7ff bae0 	b.w	18806 <d_print_comp_inner+0x1c9a>
   19246:	2500      	movs	r5, #0
   19248:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1924c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19250:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19254:	4620      	mov	r0, r4
   19256:	4798      	blx	r3
   19258:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1925c:	3301      	adds	r3, #1
   1925e:	4629      	mov	r1, r5
   19260:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19264:	f7ff bb55 	b.w	18912 <d_print_comp_inner+0x1da6>
   19268:	4654      	mov	r4, sl
   1926a:	f7fe be8d 	b.w	17f88 <d_print_comp_inner+0x141c>
   1926e:	bf00      	nop
   19270:	000244fc 	.word	0x000244fc
   19274:	00024364 	.word	0x00024364
   19278:	0002436c 	.word	0x0002436c
   1927c:	00024518 	.word	0x00024518
   19280:	00024514 	.word	0x00024514
   19284:	00024510 	.word	0x00024510
   19288:	00024304 	.word	0x00024304
   1928c:	686a      	ldr	r2, [r5, #4]
   1928e:	4641      	mov	r1, r8
   19290:	4620      	mov	r0, r4
   19292:	f001 f835 	bl	1a300 <d_print_subexpr>
   19296:	4620      	mov	r0, r4
   19298:	2203      	movs	r2, #3
   1929a:	49e2      	ldr	r1, [pc, #904]	; (19624 <d_print_comp_inner+0x2ab8>)
   1929c:	f7fb f992 	bl	145c4 <d_append_buffer>
   192a0:	f7fd bd32 	b.w	16d08 <d_print_comp_inner+0x19c>
   192a4:	ab14      	add	r3, sp, #80	; 0x50
   192a6:	9603      	str	r6, [sp, #12]
   192a8:	f843 cd48 	str.w	ip, [r3, #-72]!
   192ac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   192b0:	f7fe b85a 	b.w	17368 <d_print_comp_inner+0x7fc>
   192b4:	2700      	movs	r7, #0
   192b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192ba:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   192be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192c2:	4620      	mov	r0, r4
   192c4:	4798      	blx	r3
   192c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192ca:	3301      	adds	r3, #1
   192cc:	4639      	mov	r1, r7
   192ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192d2:	e41d      	b.n	18b10 <d_print_comp_inner+0x1fa4>
   192d4:	2600      	movs	r6, #0
   192d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192da:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   192de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192e2:	4620      	mov	r0, r4
   192e4:	4798      	blx	r3
   192e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192ea:	3301      	adds	r3, #1
   192ec:	4631      	mov	r1, r6
   192ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192f2:	f7ff bb8a 	b.w	18a0a <d_print_comp_inner+0x1e9e>
   192f6:	2500      	movs	r5, #0
   192f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19300:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19304:	4620      	mov	r0, r4
   19306:	4798      	blx	r3
   19308:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1930c:	3301      	adds	r3, #1
   1930e:	4629      	mov	r1, r5
   19310:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19314:	e610      	b.n	18f38 <d_print_comp_inner+0x23cc>
   19316:	2600      	movs	r6, #0
   19318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1931c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19320:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19324:	4620      	mov	r0, r4
   19326:	4798      	blx	r3
   19328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1932c:	3301      	adds	r3, #1
   1932e:	4631      	mov	r1, r6
   19330:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19334:	f7ff bb8a 	b.w	18a4c <d_print_comp_inner+0x1ee0>
   19338:	685a      	ldr	r2, [r3, #4]
   1933a:	6891      	ldr	r1, [r2, #8]
   1933c:	2901      	cmp	r1, #1
   1933e:	f47d ac90 	bne.w	16c62 <d_print_comp_inner+0xf6>
   19342:	6852      	ldr	r2, [r2, #4]
   19344:	7812      	ldrb	r2, [r2, #0]
   19346:	2a3e      	cmp	r2, #62	; 0x3e
   19348:	f47d ac8b 	bne.w	16c62 <d_print_comp_inner+0xf6>
   1934c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19350:	29ff      	cmp	r1, #255	; 0xff
   19352:	d10f      	bne.n	19374 <d_print_comp_inner+0x2808>
   19354:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19358:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1935c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19360:	4620      	mov	r0, r4
   19362:	4798      	blx	r3
   19364:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19368:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1936c:	3301      	adds	r3, #1
   1936e:	4631      	mov	r1, r6
   19370:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19374:	2328      	movs	r3, #40	; 0x28
   19376:	1c4a      	adds	r2, r1, #1
   19378:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1937c:	5463      	strb	r3, [r4, r1]
   1937e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19382:	686b      	ldr	r3, [r5, #4]
   19384:	f7fd bc6d 	b.w	16c62 <d_print_comp_inner+0xf6>
   19388:	2500      	movs	r5, #0
   1938a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1938e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19392:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19396:	4620      	mov	r0, r4
   19398:	4798      	blx	r3
   1939a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1939e:	3301      	adds	r3, #1
   193a0:	4629      	mov	r1, r5
   193a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193a6:	f7ff bb0b 	b.w	189c0 <d_print_comp_inner+0x1e54>
   193aa:	f8db b004 	ldr.w	fp, [fp, #4]
   193ae:	f1bb 0f00 	cmp.w	fp, #0
   193b2:	f43e ade9 	beq.w	17f88 <d_print_comp_inner+0x141c>
   193b6:	f7fd bfc3 	b.w	17340 <d_print_comp_inner+0x7d4>
   193ba:	9b02      	ldr	r3, [sp, #8]
   193bc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   193c0:	f7fd bfdb 	b.w	1737a <d_print_comp_inner+0x80e>
   193c4:	6893      	ldr	r3, [r2, #8]
   193c6:	781b      	ldrb	r3, [r3, #0]
   193c8:	2b29      	cmp	r3, #41	; 0x29
   193ca:	bf1c      	itt	ne
   193cc:	2301      	movne	r3, #1
   193ce:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   193d2:	6852      	ldr	r2, [r2, #4]
   193d4:	4641      	mov	r1, r8
   193d6:	4620      	mov	r0, r4
   193d8:	f000 ff92 	bl	1a300 <d_print_subexpr>
   193dc:	f7fd bc52 	b.w	16c84 <d_print_comp_inner+0x118>
   193e0:	2600      	movs	r6, #0
   193e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193e6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   193ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193ee:	4620      	mov	r0, r4
   193f0:	4798      	blx	r3
   193f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193f6:	3301      	adds	r3, #1
   193f8:	4631      	mov	r1, r6
   193fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193fe:	e57e      	b.n	18efe <d_print_comp_inner+0x2392>
   19400:	6872      	ldr	r2, [r6, #4]
   19402:	4641      	mov	r1, r8
   19404:	4620      	mov	r0, r4
   19406:	f000 ff7b 	bl	1a300 <d_print_subexpr>
   1940a:	464a      	mov	r2, r9
   1940c:	4641      	mov	r1, r8
   1940e:	4620      	mov	r0, r4
   19410:	f000 ff38 	bl	1a284 <d_print_expr_op>
   19414:	f7fd bc78 	b.w	16d08 <d_print_comp_inner+0x19c>
   19418:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1941c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19420:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19424:	4620      	mov	r0, r4
   19426:	4798      	blx	r3
   19428:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1942c:	3301      	adds	r3, #1
   1942e:	4629      	mov	r1, r5
   19430:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19434:	f7fd bfad 	b.w	17392 <d_print_comp_inner+0x826>
   19438:	464a      	mov	r2, r9
   1943a:	4641      	mov	r1, r8
   1943c:	4620      	mov	r0, r4
   1943e:	f000 ff5f 	bl	1a300 <d_print_subexpr>
   19442:	4652      	mov	r2, sl
   19444:	4641      	mov	r1, r8
   19446:	4620      	mov	r0, r4
   19448:	f000 ff1c 	bl	1a284 <d_print_expr_op>
   1944c:	463a      	mov	r2, r7
   1944e:	4641      	mov	r1, r8
   19450:	4620      	mov	r0, r4
   19452:	f000 ff55 	bl	1a300 <d_print_subexpr>
   19456:	4620      	mov	r0, r4
   19458:	2203      	movs	r2, #3
   1945a:	4973      	ldr	r1, [pc, #460]	; (19628 <d_print_comp_inner+0x2abc>)
   1945c:	f7fb f8b2 	bl	145c4 <d_append_buffer>
   19460:	462a      	mov	r2, r5
   19462:	4641      	mov	r1, r8
   19464:	4620      	mov	r0, r4
   19466:	f000 ff4b 	bl	1a300 <d_print_subexpr>
   1946a:	f7fd bc4d 	b.w	16d08 <d_print_comp_inner+0x19c>
   1946e:	454f      	cmp	r7, r9
   19470:	f67f ae6f 	bls.w	19152 <d_print_comp_inner+0x25e6>
   19474:	2d5f      	cmp	r5, #95	; 0x5f
   19476:	f47f ae6c 	bne.w	19152 <d_print_comp_inner+0x25e6>
   1947a:	28ff      	cmp	r0, #255	; 0xff
   1947c:	f63f a87c 	bhi.w	18578 <d_print_comp_inner+0x1a0c>
   19480:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19484:	29ff      	cmp	r1, #255	; 0xff
   19486:	b2c5      	uxtb	r5, r0
   19488:	d10f      	bne.n	194aa <d_print_comp_inner+0x293e>
   1948a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1948e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19492:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19496:	4620      	mov	r0, r4
   19498:	4798      	blx	r3
   1949a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1949e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   194a2:	3301      	adds	r3, #1
   194a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194a8:	2100      	movs	r1, #0
   194aa:	1c4b      	adds	r3, r1, #1
   194ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   194b0:	464e      	mov	r6, r9
   194b2:	5465      	strb	r5, [r4, r1]
   194b4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   194b8:	f7ff b868 	b.w	1858c <d_print_comp_inner+0x1a20>
   194bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194c0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   194c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194c8:	4620      	mov	r0, r4
   194ca:	4798      	blx	r3
   194cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194d0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   194d4:	3301      	adds	r3, #1
   194d6:	4631      	mov	r1, r6
   194d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194dc:	f7ff bbe5 	b.w	18caa <d_print_comp_inner+0x213e>
   194e0:	4691      	mov	r9, r2
   194e2:	e5e7      	b.n	190b4 <d_print_comp_inner+0x2548>
   194e4:	68b2      	ldr	r2, [r6, #8]
   194e6:	7812      	ldrb	r2, [r2, #0]
   194e8:	2a29      	cmp	r2, #41	; 0x29
   194ea:	bf08      	it	eq
   194ec:	461e      	moveq	r6, r3
   194ee:	e6a6      	b.n	1923e <d_print_comp_inner+0x26d2>
   194f0:	2500      	movs	r5, #0
   194f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194f6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   194fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194fe:	4620      	mov	r0, r4
   19500:	4798      	blx	r3
   19502:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19506:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1950a:	3301      	adds	r3, #1
   1950c:	4629      	mov	r1, r5
   1950e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19512:	e5a9      	b.n	19068 <d_print_comp_inner+0x24fc>
   19514:	2600      	movs	r6, #0
   19516:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1951a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1951e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19522:	4620      	mov	r0, r4
   19524:	4798      	blx	r3
   19526:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1952a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1952e:	3301      	adds	r3, #1
   19530:	4631      	mov	r1, r6
   19532:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19536:	f7fd bbc8 	b.w	16cca <d_print_comp_inner+0x15e>
   1953a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   1953e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19542:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19546:	4620      	mov	r0, r4
   19548:	4798      	blx	r3
   1954a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1954e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19552:	3301      	adds	r3, #1
   19554:	4631      	mov	r1, r6
   19556:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1955a:	f7fd bba4 	b.w	16ca6 <d_print_comp_inner+0x13a>
   1955e:	2600      	movs	r6, #0
   19560:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19564:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19568:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1956c:	4620      	mov	r0, r4
   1956e:	4798      	blx	r3
   19570:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19574:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19578:	3301      	adds	r3, #1
   1957a:	4631      	mov	r1, r6
   1957c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19580:	e57f      	b.n	19082 <d_print_comp_inner+0x2516>
   19582:	6841      	ldr	r1, [r0, #4]
   19584:	2900      	cmp	r1, #0
   19586:	f43d abd0 	beq.w	16d2a <d_print_comp_inner+0x1be>
   1958a:	780b      	ldrb	r3, [r1, #0]
   1958c:	f7fe b9e1 	b.w	17952 <d_print_comp_inner+0xde6>
   19590:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19594:	29ff      	cmp	r1, #255	; 0xff
   19596:	d00d      	beq.n	195b4 <d_print_comp_inner+0x2a48>
   19598:	232d      	movs	r3, #45	; 0x2d
   1959a:	1c4a      	adds	r2, r1, #1
   1959c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   195a0:	5463      	strb	r3, [r4, r1]
   195a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   195a6:	e504      	b.n	18fb2 <d_print_comp_inner+0x2446>
   195a8:	2205      	movs	r2, #5
   195aa:	4920      	ldr	r1, [pc, #128]	; (1962c <d_print_comp_inner+0x2ac0>)
   195ac:	f7fb f80a 	bl	145c4 <d_append_buffer>
   195b0:	f7fd bbaa 	b.w	16d08 <d_print_comp_inner+0x19c>
   195b4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   195b8:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   195bc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   195c0:	4798      	blx	r3
   195c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195c6:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   195ca:	3301      	adds	r3, #1
   195cc:	4639      	mov	r1, r7
   195ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195d2:	e7e1      	b.n	19598 <d_print_comp_inner+0x2a2c>
   195d4:	2500      	movs	r5, #0
   195d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   195de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195e2:	4620      	mov	r0, r4
   195e4:	4798      	blx	r3
   195e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195ea:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   195ee:	3301      	adds	r3, #1
   195f0:	4629      	mov	r1, r5
   195f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195f6:	e512      	b.n	1901e <d_print_comp_inner+0x24b2>
   195f8:	2700      	movs	r7, #0
   195fa:	f7ff b913 	b.w	18824 <d_print_comp_inner+0x1cb8>
   195fe:	2500      	movs	r5, #0
   19600:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19604:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19608:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1960c:	4620      	mov	r0, r4
   1960e:	4798      	blx	r3
   19610:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19614:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19618:	3301      	adds	r3, #1
   1961a:	4629      	mov	r1, r5
   1961c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19620:	f7fd bb6b 	b.w	16cfa <d_print_comp_inner+0x18e>
   19624:	000229f8 	.word	0x000229f8
   19628:	00024504 	.word	0x00024504
   1962c:	0002451c 	.word	0x0002451c
   19630:	4637      	mov	r7, r6
   19632:	f7ff bbe6 	b.w	18e02 <d_print_comp_inner+0x2296>
   19636:	2500      	movs	r5, #0
   19638:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1963c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19640:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19644:	4620      	mov	r0, r4
   19646:	4798      	blx	r3
   19648:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1964c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19650:	3301      	adds	r3, #1
   19652:	4629      	mov	r1, r5
   19654:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19658:	e4d3      	b.n	19002 <d_print_comp_inner+0x2496>
   1965a:	4671      	mov	r1, lr
   1965c:	6002      	str	r2, [r0, #0]
   1965e:	3104      	adds	r1, #4
   19660:	4620      	mov	r0, r4
   19662:	f7fb f9bf 	bl	149e4 <d_lookup_template_argument.isra.6>
   19666:	2800      	cmp	r0, #0
   19668:	f47f ad3c 	bne.w	190e4 <d_print_comp_inner+0x2578>
   1966c:	f7fd bb60 	b.w	16d30 <d_print_comp_inner+0x1c4>
   19670:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19674:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19678:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1967c:	4620      	mov	r0, r4
   1967e:	4798      	blx	r3
   19680:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19684:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19688:	3301      	adds	r3, #1
   1968a:	4631      	mov	r1, r6
   1968c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19690:	f7fe bc02 	b.w	17e98 <d_print_comp_inner+0x132c>
   19694:	2301      	movs	r3, #1
   19696:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1969a:	f7fd bb35 	b.w	16d08 <d_print_comp_inner+0x19c>
   1969e:	4618      	mov	r0, r3
   196a0:	4407      	add	r7, r0
   196a2:	f7ff bb81 	b.w	18da8 <d_print_comp_inner+0x223c>
   196a6:	2000      	movs	r0, #0
   196a8:	4407      	add	r7, r0
   196aa:	f7ff bb7d 	b.w	18da8 <d_print_comp_inner+0x223c>
   196ae:	4607      	mov	r7, r0
   196b0:	f7ff bba7 	b.w	18e02 <d_print_comp_inner+0x2296>

000196b4 <d_print_comp>:
   196b4:	b510      	push	{r4, lr}
   196b6:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   196ba:	b082      	sub	sp, #8
   196bc:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   196c0:	4604      	mov	r4, r0
   196c2:	e88d 000c 	stmia.w	sp, {r2, r3}
   196c6:	f7fd fa51 	bl	16b6c <d_print_comp_inner>
   196ca:	9b01      	ldr	r3, [sp, #4]
   196cc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   196d0:	b002      	add	sp, #8
   196d2:	bd10      	pop	{r4, pc}

000196d4 <d_print_mod>:
   196d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   196d8:	7813      	ldrb	r3, [r2, #0]
   196da:	3b03      	subs	r3, #3
   196dc:	b082      	sub	sp, #8
   196de:	4615      	mov	r5, r2
   196e0:	4604      	mov	r4, r0
   196e2:	4688      	mov	r8, r1
   196e4:	2b49      	cmp	r3, #73	; 0x49
   196e6:	f200 8223 	bhi.w	19b30 <d_print_mod+0x45c>
   196ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   196ee:	01e7      	.short	0x01e7
   196f0:	02210221 	.word	0x02210221
   196f4:	02210221 	.word	0x02210221
   196f8:	02210221 	.word	0x02210221
   196fc:	02210221 	.word	0x02210221
   19700:	02210221 	.word	0x02210221
   19704:	02210221 	.word	0x02210221
   19708:	02210221 	.word	0x02210221
   1970c:	02210221 	.word	0x02210221
   19710:	02210221 	.word	0x02210221
   19714:	02210221 	.word	0x02210221
   19718:	01e90221 	.word	0x01e90221
   1971c:	01a80182 	.word	0x01a80182
   19720:	018201e9 	.word	0x018201e9
   19724:	01cd01a8 	.word	0x01cd01a8
   19728:	006f01da 	.word	0x006f01da
   1972c:	009c008c 	.word	0x009c008c
   19730:	00cf00ab 	.word	0x00cf00ab
   19734:	022100f4 	.word	0x022100f4
   19738:	02210221 	.word	0x02210221
   1973c:	01190221 	.word	0x01190221
   19740:	015c0221 	.word	0x015c0221
   19744:	02210221 	.word	0x02210221
   19748:	02210221 	.word	0x02210221
   1974c:	02210221 	.word	0x02210221
   19750:	02210221 	.word	0x02210221
   19754:	02210221 	.word	0x02210221
   19758:	02210221 	.word	0x02210221
   1975c:	02210221 	.word	0x02210221
   19760:	02210221 	.word	0x02210221
   19764:	02210221 	.word	0x02210221
   19768:	02210221 	.word	0x02210221
   1976c:	02210221 	.word	0x02210221
   19770:	02210221 	.word	0x02210221
   19774:	02210221 	.word	0x02210221
   19778:	02210221 	.word	0x02210221
   1977c:	02210221 	.word	0x02210221
   19780:	004a      	.short	0x004a
   19782:	4dd3      	ldr	r5, [pc, #844]	; (19ad0 <d_print_mod+0x3fc>)
   19784:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19788:	f105 0711 	add.w	r7, r5, #17
   1978c:	f04f 0800 	mov.w	r8, #0
   19790:	e008      	b.n	197a4 <d_print_mod+0xd0>
   19792:	460b      	mov	r3, r1
   19794:	3101      	adds	r1, #1
   19796:	42bd      	cmp	r5, r7
   19798:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1979c:	54e6      	strb	r6, [r4, r3]
   1979e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   197a2:	d02d      	beq.n	19800 <d_print_mod+0x12c>
   197a4:	29ff      	cmp	r1, #255	; 0xff
   197a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   197aa:	d1f2      	bne.n	19792 <d_print_mod+0xbe>
   197ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   197b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197b8:	4620      	mov	r0, r4
   197ba:	4798      	blx	r3
   197bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197c0:	3301      	adds	r3, #1
   197c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197c6:	2101      	movs	r1, #1
   197c8:	2300      	movs	r3, #0
   197ca:	e7e4      	b.n	19796 <d_print_mod+0xc2>
   197cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   197d0:	29ff      	cmp	r1, #255	; 0xff
   197d2:	f000 81f7 	beq.w	19bc4 <d_print_mod+0x4f0>
   197d6:	1c4a      	adds	r2, r1, #1
   197d8:	2320      	movs	r3, #32
   197da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   197de:	5463      	strb	r3, [r4, r1]
   197e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   197e4:	68aa      	ldr	r2, [r5, #8]
   197e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   197ea:	9200      	str	r2, [sp, #0]
   197ec:	4641      	mov	r1, r8
   197ee:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   197f2:	4620      	mov	r0, r4
   197f4:	9301      	str	r3, [sp, #4]
   197f6:	f7fd f9b9 	bl	16b6c <d_print_comp_inner>
   197fa:	9b01      	ldr	r3, [sp, #4]
   197fc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19800:	b002      	add	sp, #8
   19802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19806:	f011 0504 	ands.w	r5, r1, #4
   1980a:	d1f9      	bne.n	19800 <d_print_mod+0x12c>
   1980c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19810:	2bff      	cmp	r3, #255	; 0xff
   19812:	f000 821c 	beq.w	19c4e <d_print_mod+0x57a>
   19816:	222a      	movs	r2, #42	; 0x2a
   19818:	1c59      	adds	r1, r3, #1
   1981a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1981e:	54e2      	strb	r2, [r4, r3]
   19820:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19824:	e7ec      	b.n	19800 <d_print_mod+0x12c>
   19826:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1982a:	29ff      	cmp	r1, #255	; 0xff
   1982c:	f000 81b9 	beq.w	19ba2 <d_print_mod+0x4ce>
   19830:	1c4a      	adds	r2, r1, #1
   19832:	2326      	movs	r3, #38	; 0x26
   19834:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19838:	5463      	strb	r3, [r4, r1]
   1983a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1983e:	b002      	add	sp, #8
   19840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19844:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19848:	4da2      	ldr	r5, [pc, #648]	; (19ad4 <d_print_mod+0x400>)
   1984a:	f04f 0800 	mov.w	r8, #0
   1984e:	1caf      	adds	r7, r5, #2
   19850:	e008      	b.n	19864 <d_print_mod+0x190>
   19852:	460b      	mov	r3, r1
   19854:	3101      	adds	r1, #1
   19856:	42bd      	cmp	r5, r7
   19858:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1985c:	54e6      	strb	r6, [r4, r3]
   1985e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19862:	d0cd      	beq.n	19800 <d_print_mod+0x12c>
   19864:	29ff      	cmp	r1, #255	; 0xff
   19866:	f815 6b01 	ldrb.w	r6, [r5], #1
   1986a:	d1f2      	bne.n	19852 <d_print_mod+0x17e>
   1986c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19870:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19874:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19878:	4620      	mov	r0, r4
   1987a:	4798      	blx	r3
   1987c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19880:	3301      	adds	r3, #1
   19882:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19886:	2101      	movs	r1, #1
   19888:	2300      	movs	r3, #0
   1988a:	e7e4      	b.n	19856 <d_print_mod+0x182>
   1988c:	4d92      	ldr	r5, [pc, #584]	; (19ad8 <d_print_mod+0x404>)
   1988e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19892:	f105 0708 	add.w	r7, r5, #8
   19896:	f04f 0800 	mov.w	r8, #0
   1989a:	e008      	b.n	198ae <d_print_mod+0x1da>
   1989c:	460b      	mov	r3, r1
   1989e:	3101      	adds	r1, #1
   198a0:	42bd      	cmp	r5, r7
   198a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   198a6:	54e6      	strb	r6, [r4, r3]
   198a8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   198ac:	d0a8      	beq.n	19800 <d_print_mod+0x12c>
   198ae:	29ff      	cmp	r1, #255	; 0xff
   198b0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   198b4:	d1f2      	bne.n	1989c <d_print_mod+0x1c8>
   198b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   198be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198c2:	4620      	mov	r0, r4
   198c4:	4798      	blx	r3
   198c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198ca:	3301      	adds	r3, #1
   198cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198d0:	2101      	movs	r1, #1
   198d2:	2300      	movs	r3, #0
   198d4:	e7e4      	b.n	198a0 <d_print_mod+0x1cc>
   198d6:	4d81      	ldr	r5, [pc, #516]	; (19adc <d_print_mod+0x408>)
   198d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   198dc:	f105 070a 	add.w	r7, r5, #10
   198e0:	f04f 0800 	mov.w	r8, #0
   198e4:	e008      	b.n	198f8 <d_print_mod+0x224>
   198e6:	460b      	mov	r3, r1
   198e8:	3101      	adds	r1, #1
   198ea:	42bd      	cmp	r5, r7
   198ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   198f0:	54e6      	strb	r6, [r4, r3]
   198f2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   198f6:	d083      	beq.n	19800 <d_print_mod+0x12c>
   198f8:	29ff      	cmp	r1, #255	; 0xff
   198fa:	f815 6b01 	ldrb.w	r6, [r5], #1
   198fe:	d1f2      	bne.n	198e6 <d_print_mod+0x212>
   19900:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19904:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1990c:	4620      	mov	r0, r4
   1990e:	4798      	blx	r3
   19910:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19914:	3301      	adds	r3, #1
   19916:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1991a:	2101      	movs	r1, #1
   1991c:	2300      	movs	r3, #0
   1991e:	e7e4      	b.n	198ea <d_print_mod+0x216>
   19920:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   19924:	2b28      	cmp	r3, #40	; 0x28
   19926:	d00b      	beq.n	19940 <d_print_mod+0x26c>
   19928:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1992c:	2bff      	cmp	r3, #255	; 0xff
   1992e:	f000 8126 	beq.w	19b7e <d_print_mod+0x4aa>
   19932:	2220      	movs	r2, #32
   19934:	1c59      	adds	r1, r3, #1
   19936:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1993a:	54e2      	strb	r2, [r4, r3]
   1993c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19940:	686a      	ldr	r2, [r5, #4]
   19942:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19946:	4d66      	ldr	r5, [pc, #408]	; (19ae0 <d_print_mod+0x40c>)
   19948:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1994c:	4641      	mov	r1, r8
   1994e:	4620      	mov	r0, r4
   19950:	9301      	str	r3, [sp, #4]
   19952:	9200      	str	r2, [sp, #0]
   19954:	f7fd f90a 	bl	16b6c <d_print_comp_inner>
   19958:	9b01      	ldr	r3, [sp, #4]
   1995a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1995e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19962:	1cef      	adds	r7, r5, #3
   19964:	f04f 0800 	mov.w	r8, #0
   19968:	e009      	b.n	1997e <d_print_mod+0x2aa>
   1996a:	460b      	mov	r3, r1
   1996c:	3101      	adds	r1, #1
   1996e:	42bd      	cmp	r5, r7
   19970:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19974:	54e6      	strb	r6, [r4, r3]
   19976:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1997a:	f43f af41 	beq.w	19800 <d_print_mod+0x12c>
   1997e:	29ff      	cmp	r1, #255	; 0xff
   19980:	f815 6b01 	ldrb.w	r6, [r5], #1
   19984:	d1f1      	bne.n	1996a <d_print_mod+0x296>
   19986:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1998a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1998e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19992:	4620      	mov	r0, r4
   19994:	4798      	blx	r3
   19996:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1999a:	3301      	adds	r3, #1
   1999c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199a0:	2101      	movs	r1, #1
   199a2:	2300      	movs	r3, #0
   199a4:	e7e3      	b.n	1996e <d_print_mod+0x29a>
   199a6:	4e4f      	ldr	r6, [pc, #316]	; (19ae4 <d_print_mod+0x410>)
   199a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   199ac:	f106 0a0a 	add.w	sl, r6, #10
   199b0:	f04f 0900 	mov.w	r9, #0
   199b4:	e009      	b.n	199ca <d_print_mod+0x2f6>
   199b6:	460b      	mov	r3, r1
   199b8:	3101      	adds	r1, #1
   199ba:	4556      	cmp	r6, sl
   199bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199c0:	54e7      	strb	r7, [r4, r3]
   199c2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   199c6:	f000 80c0 	beq.w	19b4a <d_print_mod+0x476>
   199ca:	29ff      	cmp	r1, #255	; 0xff
   199cc:	f816 7b01 	ldrb.w	r7, [r6], #1
   199d0:	d1f1      	bne.n	199b6 <d_print_mod+0x2e2>
   199d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   199da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199de:	4620      	mov	r0, r4
   199e0:	4798      	blx	r3
   199e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199e6:	3301      	adds	r3, #1
   199e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199ec:	2101      	movs	r1, #1
   199ee:	2300      	movs	r3, #0
   199f0:	e7e3      	b.n	199ba <d_print_mod+0x2e6>
   199f2:	4d3d      	ldr	r5, [pc, #244]	; (19ae8 <d_print_mod+0x414>)
   199f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   199f8:	f105 0709 	add.w	r7, r5, #9
   199fc:	f04f 0800 	mov.w	r8, #0
   19a00:	e009      	b.n	19a16 <d_print_mod+0x342>
   19a02:	460b      	mov	r3, r1
   19a04:	3101      	adds	r1, #1
   19a06:	42bd      	cmp	r5, r7
   19a08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a0c:	54e6      	strb	r6, [r4, r3]
   19a0e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a12:	f43f aef5 	beq.w	19800 <d_print_mod+0x12c>
   19a16:	29ff      	cmp	r1, #255	; 0xff
   19a18:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19a1c:	d1f1      	bne.n	19a02 <d_print_mod+0x32e>
   19a1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a22:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a2a:	4620      	mov	r0, r4
   19a2c:	4798      	blx	r3
   19a2e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a32:	3301      	adds	r3, #1
   19a34:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a38:	2101      	movs	r1, #1
   19a3a:	2300      	movs	r3, #0
   19a3c:	e7e3      	b.n	19a06 <d_print_mod+0x332>
   19a3e:	4d2b      	ldr	r5, [pc, #172]	; (19aec <d_print_mod+0x418>)
   19a40:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a44:	1daf      	adds	r7, r5, #6
   19a46:	f04f 0800 	mov.w	r8, #0
   19a4a:	e009      	b.n	19a60 <d_print_mod+0x38c>
   19a4c:	460b      	mov	r3, r1
   19a4e:	3101      	adds	r1, #1
   19a50:	42bd      	cmp	r5, r7
   19a52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a56:	54e6      	strb	r6, [r4, r3]
   19a58:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a5c:	f43f aed0 	beq.w	19800 <d_print_mod+0x12c>
   19a60:	29ff      	cmp	r1, #255	; 0xff
   19a62:	f815 6b01 	ldrb.w	r6, [r5], #1
   19a66:	d1f1      	bne.n	19a4c <d_print_mod+0x378>
   19a68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a6c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a74:	4620      	mov	r0, r4
   19a76:	4798      	blx	r3
   19a78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a7c:	3301      	adds	r3, #1
   19a7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a82:	2101      	movs	r1, #1
   19a84:	2300      	movs	r3, #0
   19a86:	e7e3      	b.n	19a50 <d_print_mod+0x37c>
   19a88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19a8c:	2bff      	cmp	r3, #255	; 0xff
   19a8e:	f000 80cc 	beq.w	19c2a <d_print_mod+0x556>
   19a92:	2220      	movs	r2, #32
   19a94:	1c59      	adds	r1, r3, #1
   19a96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a9a:	54e2      	strb	r2, [r4, r3]
   19a9c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19aa0:	e6c3      	b.n	1982a <d_print_mod+0x156>
   19aa2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19aa6:	2bff      	cmp	r3, #255	; 0xff
   19aa8:	f000 80ad 	beq.w	19c06 <d_print_mod+0x532>
   19aac:	2220      	movs	r2, #32
   19aae:	1c59      	adds	r1, r3, #1
   19ab0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ab4:	54e2      	strb	r2, [r4, r3]
   19ab6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19aba:	e6c5      	b.n	19848 <d_print_mod+0x174>
   19abc:	686a      	ldr	r2, [r5, #4]
   19abe:	e692      	b.n	197e6 <d_print_mod+0x112>
   19ac0:	4d0b      	ldr	r5, [pc, #44]	; (19af0 <d_print_mod+0x41c>)
   19ac2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ac6:	f105 0709 	add.w	r7, r5, #9
   19aca:	f04f 0800 	mov.w	r8, #0
   19ace:	e01b      	b.n	19b08 <d_print_mod+0x434>
   19ad0:	000245e7 	.word	0x000245e7
   19ad4:	000245fc 	.word	0x000245fc
   19ad8:	000245ff 	.word	0x000245ff
   19adc:	0002460c 	.word	0x0002460c
   19ae0:	00024618 	.word	0x00024618
   19ae4:	0002461c 	.word	0x0002461c
   19ae8:	000245d3 	.word	0x000245d3
   19aec:	000245e0 	.word	0x000245e0
   19af0:	000245c7 	.word	0x000245c7
   19af4:	460b      	mov	r3, r1
   19af6:	3101      	adds	r1, #1
   19af8:	42af      	cmp	r7, r5
   19afa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19afe:	54e6      	strb	r6, [r4, r3]
   19b00:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b04:	f43f ae7c 	beq.w	19800 <d_print_mod+0x12c>
   19b08:	29ff      	cmp	r1, #255	; 0xff
   19b0a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19b0e:	d1f1      	bne.n	19af4 <d_print_mod+0x420>
   19b10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b14:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b1c:	4620      	mov	r0, r4
   19b1e:	4798      	blx	r3
   19b20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b24:	3301      	adds	r3, #1
   19b26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b2a:	2101      	movs	r1, #1
   19b2c:	2300      	movs	r3, #0
   19b2e:	e7e3      	b.n	19af8 <d_print_mod+0x424>
   19b30:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19b34:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19b38:	462a      	mov	r2, r5
   19b3a:	9301      	str	r3, [sp, #4]
   19b3c:	9500      	str	r5, [sp, #0]
   19b3e:	f7fd f815 	bl	16b6c <d_print_comp_inner>
   19b42:	9b01      	ldr	r3, [sp, #4]
   19b44:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19b48:	e65a      	b.n	19800 <d_print_mod+0x12c>
   19b4a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19b4e:	686a      	ldr	r2, [r5, #4]
   19b50:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19b54:	4641      	mov	r1, r8
   19b56:	4620      	mov	r0, r4
   19b58:	9301      	str	r3, [sp, #4]
   19b5a:	9200      	str	r2, [sp, #0]
   19b5c:	f7fd f806 	bl	16b6c <d_print_comp_inner>
   19b60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19b64:	9b01      	ldr	r3, [sp, #4]
   19b66:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19b6a:	29ff      	cmp	r1, #255	; 0xff
   19b6c:	d03a      	beq.n	19be4 <d_print_mod+0x510>
   19b6e:	1c4a      	adds	r2, r1, #1
   19b70:	2329      	movs	r3, #41	; 0x29
   19b72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19b76:	5463      	strb	r3, [r4, r1]
   19b78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19b7c:	e640      	b.n	19800 <d_print_mod+0x12c>
   19b7e:	2600      	movs	r6, #0
   19b80:	4619      	mov	r1, r3
   19b82:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19b86:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19b8a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19b8e:	4798      	blx	r3
   19b90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b94:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19b98:	1c5a      	adds	r2, r3, #1
   19b9a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19b9e:	4633      	mov	r3, r6
   19ba0:	e6c7      	b.n	19932 <d_print_mod+0x25e>
   19ba2:	2500      	movs	r5, #0
   19ba4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ba8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19bac:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19bb0:	4620      	mov	r0, r4
   19bb2:	4798      	blx	r3
   19bb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bb8:	3301      	adds	r3, #1
   19bba:	4629      	mov	r1, r5
   19bbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bc0:	2201      	movs	r2, #1
   19bc2:	e636      	b.n	19832 <d_print_mod+0x15e>
   19bc4:	2600      	movs	r6, #0
   19bc6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19bca:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19bce:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19bd2:	4798      	blx	r3
   19bd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bd8:	3301      	adds	r3, #1
   19bda:	4631      	mov	r1, r6
   19bdc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19be0:	2201      	movs	r2, #1
   19be2:	e5f9      	b.n	197d8 <d_print_mod+0x104>
   19be4:	2500      	movs	r5, #0
   19be6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19bea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19bee:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19bf2:	4620      	mov	r0, r4
   19bf4:	4798      	blx	r3
   19bf6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bfa:	3301      	adds	r3, #1
   19bfc:	4629      	mov	r1, r5
   19bfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c02:	2201      	movs	r2, #1
   19c04:	e7b4      	b.n	19b70 <d_print_mod+0x49c>
   19c06:	2500      	movs	r5, #0
   19c08:	4619      	mov	r1, r3
   19c0a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19c0e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19c12:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19c16:	4798      	blx	r3
   19c18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c1c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19c20:	1c5a      	adds	r2, r3, #1
   19c22:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19c26:	462b      	mov	r3, r5
   19c28:	e740      	b.n	19aac <d_print_mod+0x3d8>
   19c2a:	2500      	movs	r5, #0
   19c2c:	4619      	mov	r1, r3
   19c2e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19c32:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19c36:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19c3a:	4798      	blx	r3
   19c3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c40:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19c44:	1c5a      	adds	r2, r3, #1
   19c46:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19c4a:	462b      	mov	r3, r5
   19c4c:	e721      	b.n	19a92 <d_print_mod+0x3be>
   19c4e:	4619      	mov	r1, r3
   19c50:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19c54:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19c58:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19c5c:	4798      	blx	r3
   19c5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c62:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19c66:	1c5a      	adds	r2, r3, #1
   19c68:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19c6c:	462b      	mov	r3, r5
   19c6e:	e5d2      	b.n	19816 <d_print_mod+0x142>

00019c70 <d_print_mod_list>:
   19c70:	2a00      	cmp	r2, #0
   19c72:	f000 80a1 	beq.w	19db8 <d_print_mod_list+0x148>
   19c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c7a:	461e      	mov	r6, r3
   19c7c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19c80:	b089      	sub	sp, #36	; 0x24
   19c82:	4605      	mov	r5, r0
   19c84:	bb43      	cbnz	r3, 19cd8 <d_print_mod_list+0x68>
   19c86:	460f      	mov	r7, r1
   19c88:	4614      	mov	r4, r2
   19c8a:	f04f 0801 	mov.w	r8, #1
   19c8e:	e002      	b.n	19c96 <d_print_mod_list+0x26>
   19c90:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19c94:	bb03      	cbnz	r3, 19cd8 <d_print_mod_list+0x68>
   19c96:	68a3      	ldr	r3, [r4, #8]
   19c98:	b9db      	cbnz	r3, 19cd2 <d_print_mod_list+0x62>
   19c9a:	6862      	ldr	r2, [r4, #4]
   19c9c:	7813      	ldrb	r3, [r2, #0]
   19c9e:	b92e      	cbnz	r6, 19cac <d_print_mod_list+0x3c>
   19ca0:	f1a3 011c 	sub.w	r1, r3, #28
   19ca4:	2904      	cmp	r1, #4
   19ca6:	d914      	bls.n	19cd2 <d_print_mod_list+0x62>
   19ca8:	2b4c      	cmp	r3, #76	; 0x4c
   19caa:	d012      	beq.n	19cd2 <d_print_mod_list+0x62>
   19cac:	68e1      	ldr	r1, [r4, #12]
   19cae:	f8c4 8008 	str.w	r8, [r4, #8]
   19cb2:	2b29      	cmp	r3, #41	; 0x29
   19cb4:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19cb8:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19cbc:	d00f      	beq.n	19cde <d_print_mod_list+0x6e>
   19cbe:	2b2a      	cmp	r3, #42	; 0x2a
   19cc0:	d018      	beq.n	19cf4 <d_print_mod_list+0x84>
   19cc2:	2b02      	cmp	r3, #2
   19cc4:	d021      	beq.n	19d0a <d_print_mod_list+0x9a>
   19cc6:	4639      	mov	r1, r7
   19cc8:	4628      	mov	r0, r5
   19cca:	f7ff fd03 	bl	196d4 <d_print_mod>
   19cce:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19cd2:	6824      	ldr	r4, [r4, #0]
   19cd4:	2c00      	cmp	r4, #0
   19cd6:	d1db      	bne.n	19c90 <d_print_mod_list+0x20>
   19cd8:	b009      	add	sp, #36	; 0x24
   19cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cde:	6823      	ldr	r3, [r4, #0]
   19ce0:	3208      	adds	r2, #8
   19ce2:	4639      	mov	r1, r7
   19ce4:	4628      	mov	r0, r5
   19ce6:	f000 f9d9 	bl	1a09c <d_print_function_type.isra.11>
   19cea:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19cee:	b009      	add	sp, #36	; 0x24
   19cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cf4:	6823      	ldr	r3, [r4, #0]
   19cf6:	3204      	adds	r2, #4
   19cf8:	4639      	mov	r1, r7
   19cfa:	4628      	mov	r0, r5
   19cfc:	f000 f8f2 	bl	19ee4 <d_print_array_type.isra.10>
   19d00:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19d04:	b009      	add	sp, #36	; 0x24
   19d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d0a:	2600      	movs	r6, #0
   19d0c:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19d10:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19d14:	6852      	ldr	r2, [r2, #4]
   19d16:	4639      	mov	r1, r7
   19d18:	4628      	mov	r0, r5
   19d1a:	f7ff fccb 	bl	196b4 <d_print_comp>
   19d1e:	f017 0a04 	ands.w	sl, r7, #4
   19d22:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19d26:	d023      	beq.n	19d70 <d_print_mod_list+0x100>
   19d28:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19d2c:	29ff      	cmp	r1, #255	; 0xff
   19d2e:	f000 80c1 	beq.w	19eb4 <d_print_mod_list+0x244>
   19d32:	1c4a      	adds	r2, r1, #1
   19d34:	232e      	movs	r3, #46	; 0x2e
   19d36:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19d3a:	546b      	strb	r3, [r5, r1]
   19d3c:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   19d40:	6863      	ldr	r3, [r4, #4]
   19d42:	689c      	ldr	r4, [r3, #8]
   19d44:	7823      	ldrb	r3, [r4, #0]
   19d46:	2b46      	cmp	r3, #70	; 0x46
   19d48:	d037      	beq.n	19dba <d_print_mod_list+0x14a>
   19d4a:	f1a3 021c 	sub.w	r2, r3, #28
   19d4e:	2a04      	cmp	r2, #4
   19d50:	d90b      	bls.n	19d6a <d_print_mod_list+0xfa>
   19d52:	2b4c      	cmp	r3, #76	; 0x4c
   19d54:	d009      	beq.n	19d6a <d_print_mod_list+0xfa>
   19d56:	4622      	mov	r2, r4
   19d58:	4639      	mov	r1, r7
   19d5a:	4628      	mov	r0, r5
   19d5c:	f7ff fcaa 	bl	196b4 <d_print_comp>
   19d60:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19d64:	b009      	add	sp, #36	; 0x24
   19d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d6a:	6864      	ldr	r4, [r4, #4]
   19d6c:	7823      	ldrb	r3, [r4, #0]
   19d6e:	e7ec      	b.n	19d4a <d_print_mod_list+0xda>
   19d70:	4e58      	ldr	r6, [pc, #352]	; (19ed4 <d_print_mod_list+0x264>)
   19d72:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19d76:	f106 0b02 	add.w	fp, r6, #2
   19d7a:	e009      	b.n	19d90 <d_print_mod_list+0x120>
   19d7c:	460b      	mov	r3, r1
   19d7e:	3101      	adds	r1, #1
   19d80:	455e      	cmp	r6, fp
   19d82:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19d86:	f805 8003 	strb.w	r8, [r5, r3]
   19d8a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19d8e:	d0d7      	beq.n	19d40 <d_print_mod_list+0xd0>
   19d90:	29ff      	cmp	r1, #255	; 0xff
   19d92:	f816 8b01 	ldrb.w	r8, [r6], #1
   19d96:	d1f1      	bne.n	19d7c <d_print_mod_list+0x10c>
   19d98:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19d9c:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   19da0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19da4:	4628      	mov	r0, r5
   19da6:	4798      	blx	r3
   19da8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19dac:	3301      	adds	r3, #1
   19dae:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19db2:	2101      	movs	r1, #1
   19db4:	2300      	movs	r3, #0
   19db6:	e7e3      	b.n	19d80 <d_print_mod_list+0x110>
   19db8:	4770      	bx	lr
   19dba:	4e47      	ldr	r6, [pc, #284]	; (19ed8 <d_print_mod_list+0x268>)
   19dbc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19dc0:	f106 0a0d 	add.w	sl, r6, #13
   19dc4:	f04f 0b00 	mov.w	fp, #0
   19dc8:	e009      	b.n	19dde <d_print_mod_list+0x16e>
   19dca:	460b      	mov	r3, r1
   19dcc:	3101      	adds	r1, #1
   19dce:	45b2      	cmp	sl, r6
   19dd0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19dd4:	f805 8003 	strb.w	r8, [r5, r3]
   19dd8:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19ddc:	d013      	beq.n	19e06 <d_print_mod_list+0x196>
   19dde:	29ff      	cmp	r1, #255	; 0xff
   19de0:	f816 8b01 	ldrb.w	r8, [r6], #1
   19de4:	d1f1      	bne.n	19dca <d_print_mod_list+0x15a>
   19de6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19dea:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19dee:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19df2:	4628      	mov	r0, r5
   19df4:	4798      	blx	r3
   19df6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19dfa:	3301      	adds	r3, #1
   19dfc:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19e00:	2101      	movs	r1, #1
   19e02:	2300      	movs	r3, #0
   19e04:	e7e3      	b.n	19dce <d_print_mod_list+0x15e>
   19e06:	68a2      	ldr	r2, [r4, #8]
   19e08:	4934      	ldr	r1, [pc, #208]	; (19edc <d_print_mod_list+0x26c>)
   19e0a:	3201      	adds	r2, #1
   19e0c:	a801      	add	r0, sp, #4
   19e0e:	f004 fd8d 	bl	1e92c <sprintf>
   19e12:	a801      	add	r0, sp, #4
   19e14:	f004 ff34 	bl	1ec80 <strlen>
   19e18:	b328      	cbz	r0, 19e66 <d_print_mod_list+0x1f6>
   19e1a:	ae01      	add	r6, sp, #4
   19e1c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19e20:	eb06 0a00 	add.w	sl, r6, r0
   19e24:	f04f 0b00 	mov.w	fp, #0
   19e28:	e009      	b.n	19e3e <d_print_mod_list+0x1ce>
   19e2a:	460b      	mov	r3, r1
   19e2c:	3101      	adds	r1, #1
   19e2e:	45b2      	cmp	sl, r6
   19e30:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19e34:	f805 8003 	strb.w	r8, [r5, r3]
   19e38:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19e3c:	d015      	beq.n	19e6a <d_print_mod_list+0x1fa>
   19e3e:	29ff      	cmp	r1, #255	; 0xff
   19e40:	f816 8b01 	ldrb.w	r8, [r6], #1
   19e44:	d1f1      	bne.n	19e2a <d_print_mod_list+0x1ba>
   19e46:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19e4a:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19e4e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19e52:	4628      	mov	r0, r5
   19e54:	4798      	blx	r3
   19e56:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19e5a:	3301      	adds	r3, #1
   19e5c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19e60:	2101      	movs	r1, #1
   19e62:	2300      	movs	r3, #0
   19e64:	e7e3      	b.n	19e2e <d_print_mod_list+0x1be>
   19e66:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19e6a:	4e1d      	ldr	r6, [pc, #116]	; (19ee0 <d_print_mod_list+0x270>)
   19e6c:	f04f 0b00 	mov.w	fp, #0
   19e70:	f106 0a03 	add.w	sl, r6, #3
   19e74:	e00a      	b.n	19e8c <d_print_mod_list+0x21c>
   19e76:	460b      	mov	r3, r1
   19e78:	3101      	adds	r1, #1
   19e7a:	45b2      	cmp	sl, r6
   19e7c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19e80:	f805 8003 	strb.w	r8, [r5, r3]
   19e84:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19e88:	f43f af6f 	beq.w	19d6a <d_print_mod_list+0xfa>
   19e8c:	29ff      	cmp	r1, #255	; 0xff
   19e8e:	f816 8b01 	ldrb.w	r8, [r6], #1
   19e92:	d1f0      	bne.n	19e76 <d_print_mod_list+0x206>
   19e94:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19e98:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19e9c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19ea0:	4628      	mov	r0, r5
   19ea2:	4798      	blx	r3
   19ea4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19ea8:	3301      	adds	r3, #1
   19eaa:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19eae:	2101      	movs	r1, #1
   19eb0:	2300      	movs	r3, #0
   19eb2:	e7e2      	b.n	19e7a <d_print_mod_list+0x20a>
   19eb4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19eb8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19ebc:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   19ec0:	4628      	mov	r0, r5
   19ec2:	4798      	blx	r3
   19ec4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19ec8:	3301      	adds	r3, #1
   19eca:	4631      	mov	r1, r6
   19ecc:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19ed0:	2201      	movs	r2, #1
   19ed2:	e72f      	b.n	19d34 <d_print_mod_list+0xc4>
   19ed4:	0002434c 	.word	0x0002434c
   19ed8:	00024350 	.word	0x00024350
   19edc:	000242fc 	.word	0x000242fc
   19ee0:	00024360 	.word	0x00024360

00019ee4 <d_print_array_type.isra.10>:
   19ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ee8:	4604      	mov	r4, r0
   19eea:	460f      	mov	r7, r1
   19eec:	4690      	mov	r8, r2
   19eee:	b163      	cbz	r3, 19f0a <d_print_array_type.isra.10+0x26>
   19ef0:	461e      	mov	r6, r3
   19ef2:	461a      	mov	r2, r3
   19ef4:	6893      	ldr	r3, [r2, #8]
   19ef6:	b393      	cbz	r3, 19f5e <d_print_array_type.isra.10+0x7a>
   19ef8:	6812      	ldr	r2, [r2, #0]
   19efa:	2a00      	cmp	r2, #0
   19efc:	d1fa      	bne.n	19ef4 <d_print_array_type.isra.10+0x10>
   19efe:	4613      	mov	r3, r2
   19f00:	4639      	mov	r1, r7
   19f02:	4632      	mov	r2, r6
   19f04:	4620      	mov	r0, r4
   19f06:	f7ff feb3 	bl	19c70 <d_print_mod_list>
   19f0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19f0e:	29ff      	cmp	r1, #255	; 0xff
   19f10:	f000 808d 	beq.w	1a02e <d_print_array_type.isra.10+0x14a>
   19f14:	1c4b      	adds	r3, r1, #1
   19f16:	2220      	movs	r2, #32
   19f18:	2bff      	cmp	r3, #255	; 0xff
   19f1a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19f1e:	5462      	strb	r2, [r4, r1]
   19f20:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19f24:	d068      	beq.n	19ff8 <d_print_array_type.isra.10+0x114>
   19f26:	225b      	movs	r2, #91	; 0x5b
   19f28:	1c59      	adds	r1, r3, #1
   19f2a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f2e:	54e2      	strb	r2, [r4, r3]
   19f30:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19f34:	f8d8 2000 	ldr.w	r2, [r8]
   19f38:	b12a      	cbz	r2, 19f46 <d_print_array_type.isra.10+0x62>
   19f3a:	4639      	mov	r1, r7
   19f3c:	4620      	mov	r0, r4
   19f3e:	f7ff fbb9 	bl	196b4 <d_print_comp>
   19f42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19f46:	29ff      	cmp	r1, #255	; 0xff
   19f48:	f000 8082 	beq.w	1a050 <d_print_array_type.isra.10+0x16c>
   19f4c:	1c4a      	adds	r2, r1, #1
   19f4e:	235d      	movs	r3, #93	; 0x5d
   19f50:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19f54:	5463      	strb	r3, [r4, r1]
   19f56:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f5e:	6852      	ldr	r2, [r2, #4]
   19f60:	7812      	ldrb	r2, [r2, #0]
   19f62:	2a2a      	cmp	r2, #42	; 0x2a
   19f64:	d03f      	beq.n	19fe6 <d_print_array_type.isra.10+0x102>
   19f66:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a098 <d_print_array_type.isra.10+0x1b4>
   19f6a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19f6e:	461d      	mov	r5, r3
   19f70:	f109 0b02 	add.w	fp, r9, #2
   19f74:	e00a      	b.n	19f8c <d_print_array_type.isra.10+0xa8>
   19f76:	460b      	mov	r3, r1
   19f78:	45cb      	cmp	fp, r9
   19f7a:	f101 0101 	add.w	r1, r1, #1
   19f7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f82:	f804 a003 	strb.w	sl, [r4, r3]
   19f86:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   19f8a:	d01a      	beq.n	19fc2 <d_print_array_type.isra.10+0xde>
   19f8c:	29ff      	cmp	r1, #255	; 0xff
   19f8e:	f819 ab01 	ldrb.w	sl, [r9], #1
   19f92:	d1f0      	bne.n	19f76 <d_print_array_type.isra.10+0x92>
   19f94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f98:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fa0:	4620      	mov	r0, r4
   19fa2:	4798      	blx	r3
   19fa4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fa8:	3301      	adds	r3, #1
   19faa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19fae:	2300      	movs	r3, #0
   19fb0:	2101      	movs	r1, #1
   19fb2:	45cb      	cmp	fp, r9
   19fb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19fb8:	f804 a003 	strb.w	sl, [r4, r3]
   19fbc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   19fc0:	d1e4      	bne.n	19f8c <d_print_array_type.isra.10+0xa8>
   19fc2:	2300      	movs	r3, #0
   19fc4:	4632      	mov	r2, r6
   19fc6:	4639      	mov	r1, r7
   19fc8:	4620      	mov	r0, r4
   19fca:	f7ff fe51 	bl	19c70 <d_print_mod_list>
   19fce:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19fd2:	2bff      	cmp	r3, #255	; 0xff
   19fd4:	d04d      	beq.n	1a072 <d_print_array_type.isra.10+0x18e>
   19fd6:	1c59      	adds	r1, r3, #1
   19fd8:	2229      	movs	r2, #41	; 0x29
   19fda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19fde:	54e2      	strb	r2, [r4, r3]
   19fe0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19fe4:	e793      	b.n	19f0e <d_print_array_type.isra.10+0x2a>
   19fe6:	4632      	mov	r2, r6
   19fe8:	4639      	mov	r1, r7
   19fea:	4620      	mov	r0, r4
   19fec:	f7ff fe40 	bl	19c70 <d_print_mod_list>
   19ff0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19ff4:	2bff      	cmp	r3, #255	; 0xff
   19ff6:	d196      	bne.n	19f26 <d_print_array_type.isra.10+0x42>
   19ff8:	2200      	movs	r2, #0
   19ffa:	4619      	mov	r1, r3
   19ffc:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a000:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a004:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a008:	4620      	mov	r0, r4
   1a00a:	4798      	blx	r3
   1a00c:	235b      	movs	r3, #91	; 0x5b
   1a00e:	7023      	strb	r3, [r4, #0]
   1a010:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a014:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a018:	f8d8 2000 	ldr.w	r2, [r8]
   1a01c:	3301      	adds	r3, #1
   1a01e:	2101      	movs	r1, #1
   1a020:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a024:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a028:	2a00      	cmp	r2, #0
   1a02a:	d186      	bne.n	19f3a <d_print_array_type.isra.10+0x56>
   1a02c:	e78e      	b.n	19f4c <d_print_array_type.isra.10+0x68>
   1a02e:	2500      	movs	r5, #0
   1a030:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a034:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a038:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a03c:	4620      	mov	r0, r4
   1a03e:	4798      	blx	r3
   1a040:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a044:	3301      	adds	r3, #1
   1a046:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a04a:	4629      	mov	r1, r5
   1a04c:	2301      	movs	r3, #1
   1a04e:	e762      	b.n	19f16 <d_print_array_type.isra.10+0x32>
   1a050:	2500      	movs	r5, #0
   1a052:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a056:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a05a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a05e:	4620      	mov	r0, r4
   1a060:	4798      	blx	r3
   1a062:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a066:	3301      	adds	r3, #1
   1a068:	4629      	mov	r1, r5
   1a06a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a06e:	2201      	movs	r2, #1
   1a070:	e76d      	b.n	19f4e <d_print_array_type.isra.10+0x6a>
   1a072:	2500      	movs	r5, #0
   1a074:	4619      	mov	r1, r3
   1a076:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a07a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a07e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a082:	4620      	mov	r0, r4
   1a084:	4798      	blx	r3
   1a086:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a08a:	1c5a      	adds	r2, r3, #1
   1a08c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a090:	462b      	mov	r3, r5
   1a092:	2101      	movs	r1, #1
   1a094:	e7a0      	b.n	19fd8 <d_print_array_type.isra.10+0xf4>
   1a096:	bf00      	nop
   1a098:	00024544 	.word	0x00024544

0001a09c <d_print_function_type.isra.11>:
   1a09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a0a0:	4604      	mov	r4, r0
   1a0a2:	b083      	sub	sp, #12
   1a0a4:	460e      	mov	r6, r1
   1a0a6:	4617      	mov	r7, r2
   1a0a8:	461d      	mov	r5, r3
   1a0aa:	b34b      	cbz	r3, 1a100 <d_print_function_type.isra.11+0x64>
   1a0ac:	689b      	ldr	r3, [r3, #8]
   1a0ae:	bb3b      	cbnz	r3, 1a100 <d_print_function_type.isra.11+0x64>
   1a0b0:	462a      	mov	r2, r5
   1a0b2:	2001      	movs	r0, #1
   1a0b4:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a280 <d_print_function_type.isra.11+0x1e4>
   1a0b8:	e006      	b.n	1a0c8 <d_print_function_type.isra.11+0x2c>
   1a0ba:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a0be:	d15a      	bne.n	1a176 <d_print_function_type.isra.11+0xda>
   1a0c0:	6812      	ldr	r2, [r2, #0]
   1a0c2:	b1ea      	cbz	r2, 1a100 <d_print_function_type.isra.11+0x64>
   1a0c4:	6893      	ldr	r3, [r2, #8]
   1a0c6:	b9db      	cbnz	r3, 1a100 <d_print_function_type.isra.11+0x64>
   1a0c8:	6853      	ldr	r3, [r2, #4]
   1a0ca:	781b      	ldrb	r3, [r3, #0]
   1a0cc:	3b19      	subs	r3, #25
   1a0ce:	b2db      	uxtb	r3, r3
   1a0d0:	2b12      	cmp	r3, #18
   1a0d2:	fa00 f103 	lsl.w	r1, r0, r3
   1a0d6:	d8f3      	bhi.n	1a0c0 <d_print_function_type.isra.11+0x24>
   1a0d8:	ea11 0f0e 	tst.w	r1, lr
   1a0dc:	d0ed      	beq.n	1a0ba <d_print_function_type.isra.11+0x1e>
   1a0de:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a0e2:	2b20      	cmp	r3, #32
   1a0e4:	d04d      	beq.n	1a182 <d_print_function_type.isra.11+0xe6>
   1a0e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a0ea:	2bff      	cmp	r3, #255	; 0xff
   1a0ec:	f000 80b4 	beq.w	1a258 <d_print_function_type.isra.11+0x1bc>
   1a0f0:	1c59      	adds	r1, r3, #1
   1a0f2:	2220      	movs	r2, #32
   1a0f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a0f8:	54e2      	strb	r2, [r4, r3]
   1a0fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a0fe:	e042      	b.n	1a186 <d_print_function_type.isra.11+0xea>
   1a100:	2300      	movs	r3, #0
   1a102:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a106:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a10a:	4631      	mov	r1, r6
   1a10c:	462a      	mov	r2, r5
   1a10e:	4620      	mov	r0, r4
   1a110:	f7ff fdae 	bl	19c70 <d_print_mod_list>
   1a114:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a118:	29ff      	cmp	r1, #255	; 0xff
   1a11a:	d056      	beq.n	1a1ca <d_print_function_type.isra.11+0x12e>
   1a11c:	1c4b      	adds	r3, r1, #1
   1a11e:	2228      	movs	r2, #40	; 0x28
   1a120:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a124:	5462      	strb	r2, [r4, r1]
   1a126:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a12a:	6838      	ldr	r0, [r7, #0]
   1a12c:	b178      	cbz	r0, 1a14e <d_print_function_type.isra.11+0xb2>
   1a12e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a132:	9000      	str	r0, [sp, #0]
   1a134:	4602      	mov	r2, r0
   1a136:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a13a:	4631      	mov	r1, r6
   1a13c:	4620      	mov	r0, r4
   1a13e:	9301      	str	r3, [sp, #4]
   1a140:	f7fc fd14 	bl	16b6c <d_print_comp_inner>
   1a144:	9a01      	ldr	r2, [sp, #4]
   1a146:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a14a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a14e:	2bff      	cmp	r3, #255	; 0xff
   1a150:	d04d      	beq.n	1a1ee <d_print_function_type.isra.11+0x152>
   1a152:	1c5a      	adds	r2, r3, #1
   1a154:	2029      	movs	r0, #41	; 0x29
   1a156:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a15a:	4631      	mov	r1, r6
   1a15c:	54e0      	strb	r0, [r4, r3]
   1a15e:	462a      	mov	r2, r5
   1a160:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a164:	2301      	movs	r3, #1
   1a166:	4620      	mov	r0, r4
   1a168:	f7ff fd82 	bl	19c70 <d_print_mod_list>
   1a16c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a170:	b003      	add	sp, #12
   1a172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a176:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a17a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a17e:	2a28      	cmp	r2, #40	; 0x28
   1a180:	d1af      	bne.n	1a0e2 <d_print_function_type.isra.11+0x46>
   1a182:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a186:	29ff      	cmp	r1, #255	; 0xff
   1a188:	d054      	beq.n	1a234 <d_print_function_type.isra.11+0x198>
   1a18a:	1c4a      	adds	r2, r1, #1
   1a18c:	2328      	movs	r3, #40	; 0x28
   1a18e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a192:	5463      	strb	r3, [r4, r1]
   1a194:	f04f 0900 	mov.w	r9, #0
   1a198:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a19c:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a1a0:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a1a4:	464b      	mov	r3, r9
   1a1a6:	462a      	mov	r2, r5
   1a1a8:	4631      	mov	r1, r6
   1a1aa:	4620      	mov	r0, r4
   1a1ac:	f7ff fd60 	bl	19c70 <d_print_mod_list>
   1a1b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a1b4:	2bff      	cmp	r3, #255	; 0xff
   1a1b6:	d02c      	beq.n	1a212 <d_print_function_type.isra.11+0x176>
   1a1b8:	1c59      	adds	r1, r3, #1
   1a1ba:	2229      	movs	r2, #41	; 0x29
   1a1bc:	29ff      	cmp	r1, #255	; 0xff
   1a1be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a1c2:	54e2      	strb	r2, [r4, r3]
   1a1c4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a1c8:	d1a8      	bne.n	1a11c <d_print_function_type.isra.11+0x80>
   1a1ca:	f04f 0900 	mov.w	r9, #0
   1a1ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1d2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a1d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1da:	4620      	mov	r0, r4
   1a1dc:	4798      	blx	r3
   1a1de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1e2:	3301      	adds	r3, #1
   1a1e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1e8:	4649      	mov	r1, r9
   1a1ea:	2301      	movs	r3, #1
   1a1ec:	e797      	b.n	1a11e <d_print_function_type.isra.11+0x82>
   1a1ee:	2700      	movs	r7, #0
   1a1f0:	4619      	mov	r1, r3
   1a1f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a1f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1fa:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a1fe:	4620      	mov	r0, r4
   1a200:	4798      	blx	r3
   1a202:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a206:	1c5a      	adds	r2, r3, #1
   1a208:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a20c:	463b      	mov	r3, r7
   1a20e:	2201      	movs	r2, #1
   1a210:	e7a0      	b.n	1a154 <d_print_function_type.isra.11+0xb8>
   1a212:	4619      	mov	r1, r3
   1a214:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a218:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a21c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a220:	4620      	mov	r0, r4
   1a222:	4798      	blx	r3
   1a224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a228:	1c5a      	adds	r2, r3, #1
   1a22a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a22e:	464b      	mov	r3, r9
   1a230:	2101      	movs	r1, #1
   1a232:	e7c2      	b.n	1a1ba <d_print_function_type.isra.11+0x11e>
   1a234:	f04f 0800 	mov.w	r8, #0
   1a238:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a23c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a240:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a244:	4620      	mov	r0, r4
   1a246:	4798      	blx	r3
   1a248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a24c:	3301      	adds	r3, #1
   1a24e:	4641      	mov	r1, r8
   1a250:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a254:	2201      	movs	r2, #1
   1a256:	e799      	b.n	1a18c <d_print_function_type.isra.11+0xf0>
   1a258:	f04f 0800 	mov.w	r8, #0
   1a25c:	4619      	mov	r1, r3
   1a25e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a262:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a266:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a26a:	4620      	mov	r0, r4
   1a26c:	4798      	blx	r3
   1a26e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a272:	1c5a      	adds	r2, r3, #1
   1a274:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a278:	4643      	mov	r3, r8
   1a27a:	2101      	movs	r1, #1
   1a27c:	e739      	b.n	1a0f2 <d_print_function_type.isra.11+0x56>
   1a27e:	bf00      	nop
   1a280:	00043107 	.word	0x00043107

0001a284 <d_print_expr_op>:
   1a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a288:	7815      	ldrb	r5, [r2, #0]
   1a28a:	2d31      	cmp	r5, #49	; 0x31
   1a28c:	b082      	sub	sp, #8
   1a28e:	4613      	mov	r3, r2
   1a290:	4604      	mov	r4, r0
   1a292:	d00d      	beq.n	1a2b0 <d_print_expr_op+0x2c>
   1a294:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a298:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a29c:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a2a0:	f7fc fc64 	bl	16b6c <d_print_comp_inner>
   1a2a4:	9b01      	ldr	r3, [sp, #4]
   1a2a6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a2aa:	b002      	add	sp, #8
   1a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a2b0:	6853      	ldr	r3, [r2, #4]
   1a2b2:	689f      	ldr	r7, [r3, #8]
   1a2b4:	685d      	ldr	r5, [r3, #4]
   1a2b6:	2f00      	cmp	r7, #0
   1a2b8:	d0f7      	beq.n	1a2aa <d_print_expr_op+0x26>
   1a2ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a2be:	442f      	add	r7, r5
   1a2c0:	f04f 0800 	mov.w	r8, #0
   1a2c4:	e008      	b.n	1a2d8 <d_print_expr_op+0x54>
   1a2c6:	460b      	mov	r3, r1
   1a2c8:	3101      	adds	r1, #1
   1a2ca:	42bd      	cmp	r5, r7
   1a2cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2d0:	54e6      	strb	r6, [r4, r3]
   1a2d2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a2d6:	d0e8      	beq.n	1a2aa <d_print_expr_op+0x26>
   1a2d8:	29ff      	cmp	r1, #255	; 0xff
   1a2da:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a2de:	d1f2      	bne.n	1a2c6 <d_print_expr_op+0x42>
   1a2e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a2e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2ec:	4620      	mov	r0, r4
   1a2ee:	4798      	blx	r3
   1a2f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2f4:	3301      	adds	r3, #1
   1a2f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a2fa:	2101      	movs	r1, #1
   1a2fc:	2300      	movs	r3, #0
   1a2fe:	e7e4      	b.n	1a2ca <d_print_expr_op+0x46>

0001a300 <d_print_subexpr>:
   1a300:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a302:	7813      	ldrb	r3, [r2, #0]
   1a304:	2b01      	cmp	r3, #1
   1a306:	b083      	sub	sp, #12
   1a308:	4615      	mov	r5, r2
   1a30a:	460e      	mov	r6, r1
   1a30c:	4604      	mov	r4, r0
   1a30e:	d929      	bls.n	1a364 <d_print_subexpr+0x64>
   1a310:	2b30      	cmp	r3, #48	; 0x30
   1a312:	d027      	beq.n	1a364 <d_print_subexpr+0x64>
   1a314:	2b06      	cmp	r3, #6
   1a316:	d025      	beq.n	1a364 <d_print_subexpr+0x64>
   1a318:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a31c:	29ff      	cmp	r1, #255	; 0xff
   1a31e:	d031      	beq.n	1a384 <d_print_subexpr+0x84>
   1a320:	1c4a      	adds	r2, r1, #1
   1a322:	2328      	movs	r3, #40	; 0x28
   1a324:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a328:	5463      	strb	r3, [r4, r1]
   1a32a:	462a      	mov	r2, r5
   1a32c:	4631      	mov	r1, r6
   1a32e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a332:	4620      	mov	r0, r4
   1a334:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a338:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a33c:	9301      	str	r3, [sp, #4]
   1a33e:	9500      	str	r5, [sp, #0]
   1a340:	f7fc fc14 	bl	16b6c <d_print_comp_inner>
   1a344:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a348:	9b01      	ldr	r3, [sp, #4]
   1a34a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a34e:	29ff      	cmp	r1, #255	; 0xff
   1a350:	d028      	beq.n	1a3a4 <d_print_subexpr+0xa4>
   1a352:	1c4a      	adds	r2, r1, #1
   1a354:	2329      	movs	r3, #41	; 0x29
   1a356:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a35a:	5463      	strb	r3, [r4, r1]
   1a35c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a360:	b003      	add	sp, #12
   1a362:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a364:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a368:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a36c:	4631      	mov	r1, r6
   1a36e:	462a      	mov	r2, r5
   1a370:	4620      	mov	r0, r4
   1a372:	9301      	str	r3, [sp, #4]
   1a374:	9500      	str	r5, [sp, #0]
   1a376:	f7fc fbf9 	bl	16b6c <d_print_comp_inner>
   1a37a:	9b01      	ldr	r3, [sp, #4]
   1a37c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a380:	b003      	add	sp, #12
   1a382:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a384:	2700      	movs	r7, #0
   1a386:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a38a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a38e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a392:	4798      	blx	r3
   1a394:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a398:	3301      	adds	r3, #1
   1a39a:	4639      	mov	r1, r7
   1a39c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3a0:	2201      	movs	r2, #1
   1a3a2:	e7be      	b.n	1a322 <d_print_subexpr+0x22>
   1a3a4:	2500      	movs	r5, #0
   1a3a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a3aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a3ae:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a3b2:	4620      	mov	r0, r4
   1a3b4:	4798      	blx	r3
   1a3b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a3ba:	3301      	adds	r3, #1
   1a3bc:	4629      	mov	r1, r5
   1a3be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3c2:	2201      	movs	r2, #1
   1a3c4:	e7c6      	b.n	1a354 <d_print_subexpr+0x54>
   1a3c6:	bf00      	nop

0001a3c8 <d_maybe_print_fold_expression.isra.15>:
   1a3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3cc:	6852      	ldr	r2, [r2, #4]
   1a3ce:	6812      	ldr	r2, [r2, #0]
   1a3d0:	7815      	ldrb	r5, [r2, #0]
   1a3d2:	2d66      	cmp	r5, #102	; 0x66
   1a3d4:	d002      	beq.n	1a3dc <d_maybe_print_fold_expression.isra.15+0x14>
   1a3d6:	2000      	movs	r0, #0
   1a3d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3dc:	681b      	ldr	r3, [r3, #0]
   1a3de:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a3e2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a3e6:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a3ea:	f899 3000 	ldrb.w	r3, [r9]
   1a3ee:	2b3b      	cmp	r3, #59	; 0x3b
   1a3f0:	f04f 33ff 	mov.w	r3, #4294967295
   1a3f4:	bf04      	itt	eq
   1a3f6:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a3fa:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a3fe:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a402:	7853      	ldrb	r3, [r2, #1]
   1a404:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a408:	bf18      	it	ne
   1a40a:	2500      	movne	r5, #0
   1a40c:	460e      	mov	r6, r1
   1a40e:	4604      	mov	r4, r0
   1a410:	2b26      	cmp	r3, #38	; 0x26
   1a412:	d82b      	bhi.n	1a46c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a414:	e8df f003 	tbb	[pc, r3]
   1a418:	2a2a2a90 	.word	0x2a2a2a90
   1a41c:	2a902a2a 	.word	0x2a902a2a
   1a420:	2a2a2a2a 	.word	0x2a2a2a2a
   1a424:	2a2a2a2a 	.word	0x2a2a2a2a
   1a428:	2a2a2a2a 	.word	0x2a2a2a2a
   1a42c:	2a2a2a2a 	.word	0x2a2a2a2a
   1a430:	2a2a2a2a 	.word	0x2a2a2a2a
   1a434:	2a2a2a2a 	.word	0x2a2a2a2a
   1a438:	2a2a2a6a 	.word	0x2a2a2a6a
   1a43c:	2a2a      	.short	0x2a2a
   1a43e:	2f          	.byte	0x2f
   1a43f:	00          	.byte	0x00
   1a440:	4642      	mov	r2, r8
   1a442:	4631      	mov	r1, r6
   1a444:	4620      	mov	r0, r4
   1a446:	f7ff ff1d 	bl	1a284 <d_print_expr_op>
   1a44a:	464a      	mov	r2, r9
   1a44c:	4631      	mov	r1, r6
   1a44e:	4620      	mov	r0, r4
   1a450:	f7ff ff56 	bl	1a300 <d_print_subexpr>
   1a454:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a458:	29ff      	cmp	r1, #255	; 0xff
   1a45a:	f000 80b2 	beq.w	1a5c2 <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a45e:	1c4a      	adds	r2, r1, #1
   1a460:	2329      	movs	r3, #41	; 0x29
   1a462:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a466:	5463      	strb	r3, [r4, r1]
   1a468:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a46c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a470:	2001      	movs	r0, #1
   1a472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a476:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a47a:	29ff      	cmp	r1, #255	; 0xff
   1a47c:	f000 80c5 	beq.w	1a60a <d_maybe_print_fold_expression.isra.15+0x242>
   1a480:	1c4a      	adds	r2, r1, #1
   1a482:	2328      	movs	r3, #40	; 0x28
   1a484:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a488:	4620      	mov	r0, r4
   1a48a:	5463      	strb	r3, [r4, r1]
   1a48c:	464a      	mov	r2, r9
   1a48e:	4631      	mov	r1, r6
   1a490:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a494:	4d65      	ldr	r5, [pc, #404]	; (1a62c <d_maybe_print_fold_expression.isra.15+0x264>)
   1a496:	f7ff ff33 	bl	1a300 <d_print_subexpr>
   1a49a:	4642      	mov	r2, r8
   1a49c:	4631      	mov	r1, r6
   1a49e:	4620      	mov	r0, r4
   1a4a0:	f7ff fef0 	bl	1a284 <d_print_expr_op>
   1a4a4:	f105 0904 	add.w	r9, r5, #4
   1a4a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a4ac:	f04f 0800 	mov.w	r8, #0
   1a4b0:	e008      	b.n	1a4c4 <d_maybe_print_fold_expression.isra.15+0xfc>
   1a4b2:	460b      	mov	r3, r1
   1a4b4:	3101      	adds	r1, #1
   1a4b6:	45a9      	cmp	r9, r5
   1a4b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a4bc:	54e6      	strb	r6, [r4, r3]
   1a4be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a4c2:	d0d3      	beq.n	1a46c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a4c4:	29ff      	cmp	r1, #255	; 0xff
   1a4c6:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a4ca:	d1f2      	bne.n	1a4b2 <d_maybe_print_fold_expression.isra.15+0xea>
   1a4cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a4d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a4d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a4d8:	4620      	mov	r0, r4
   1a4da:	4798      	blx	r3
   1a4dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4e0:	3301      	adds	r3, #1
   1a4e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4e6:	2101      	movs	r1, #1
   1a4e8:	2300      	movs	r3, #0
   1a4ea:	e7e4      	b.n	1a4b6 <d_maybe_print_fold_expression.isra.15+0xee>
   1a4ec:	4d50      	ldr	r5, [pc, #320]	; (1a630 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a4ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a4f2:	f105 0b04 	add.w	fp, r5, #4
   1a4f6:	e009      	b.n	1a50c <d_maybe_print_fold_expression.isra.15+0x144>
   1a4f8:	460b      	mov	r3, r1
   1a4fa:	3101      	adds	r1, #1
   1a4fc:	455d      	cmp	r5, fp
   1a4fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a502:	f804 a003 	strb.w	sl, [r4, r3]
   1a506:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a50a:	d099      	beq.n	1a440 <d_maybe_print_fold_expression.isra.15+0x78>
   1a50c:	29ff      	cmp	r1, #255	; 0xff
   1a50e:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a512:	d1f1      	bne.n	1a4f8 <d_maybe_print_fold_expression.isra.15+0x130>
   1a514:	f04f 0300 	mov.w	r3, #0
   1a518:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a51c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a520:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a524:	4620      	mov	r0, r4
   1a526:	4798      	blx	r3
   1a528:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a52c:	3301      	adds	r3, #1
   1a52e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a532:	2101      	movs	r1, #1
   1a534:	2300      	movs	r3, #0
   1a536:	e7e1      	b.n	1a4fc <d_maybe_print_fold_expression.isra.15+0x134>
   1a538:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a53c:	2bff      	cmp	r3, #255	; 0xff
   1a53e:	d051      	beq.n	1a5e4 <d_maybe_print_fold_expression.isra.15+0x21c>
   1a540:	1c59      	adds	r1, r3, #1
   1a542:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a546:	464a      	mov	r2, r9
   1a548:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a54c:	4620      	mov	r0, r4
   1a54e:	f804 e003 	strb.w	lr, [r4, r3]
   1a552:	4631      	mov	r1, r6
   1a554:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a558:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a634 <d_maybe_print_fold_expression.isra.15+0x26c>
   1a55c:	f7ff fed0 	bl	1a300 <d_print_subexpr>
   1a560:	4631      	mov	r1, r6
   1a562:	4642      	mov	r2, r8
   1a564:	4620      	mov	r0, r4
   1a566:	f7ff fe8d 	bl	1a284 <d_print_expr_op>
   1a56a:	f109 0b03 	add.w	fp, r9, #3
   1a56e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a572:	e009      	b.n	1a588 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a574:	460b      	mov	r3, r1
   1a576:	3101      	adds	r1, #1
   1a578:	45cb      	cmp	fp, r9
   1a57a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a57e:	f804 a003 	strb.w	sl, [r4, r3]
   1a582:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a586:	d015      	beq.n	1a5b4 <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a588:	29ff      	cmp	r1, #255	; 0xff
   1a58a:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a58e:	d1f1      	bne.n	1a574 <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a590:	f04f 0300 	mov.w	r3, #0
   1a594:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a598:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a59c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5a0:	4620      	mov	r0, r4
   1a5a2:	4798      	blx	r3
   1a5a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5a8:	3301      	adds	r3, #1
   1a5aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5ae:	2101      	movs	r1, #1
   1a5b0:	2300      	movs	r3, #0
   1a5b2:	e7e1      	b.n	1a578 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a5b4:	4642      	mov	r2, r8
   1a5b6:	4631      	mov	r1, r6
   1a5b8:	4620      	mov	r0, r4
   1a5ba:	f7ff fe63 	bl	1a284 <d_print_expr_op>
   1a5be:	462a      	mov	r2, r5
   1a5c0:	e744      	b.n	1a44c <d_maybe_print_fold_expression.isra.15+0x84>
   1a5c2:	2500      	movs	r5, #0
   1a5c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a5cc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a5d0:	4620      	mov	r0, r4
   1a5d2:	4798      	blx	r3
   1a5d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5d8:	3301      	adds	r3, #1
   1a5da:	4629      	mov	r1, r5
   1a5dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5e0:	2201      	movs	r2, #1
   1a5e2:	e73d      	b.n	1a460 <d_maybe_print_fold_expression.isra.15+0x98>
   1a5e4:	f04f 0a00 	mov.w	sl, #0
   1a5e8:	4619      	mov	r1, r3
   1a5ea:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a5ee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a5f2:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a5f6:	4798      	blx	r3
   1a5f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5fc:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a600:	1c5a      	adds	r2, r3, #1
   1a602:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a606:	4653      	mov	r3, sl
   1a608:	e79a      	b.n	1a540 <d_maybe_print_fold_expression.isra.15+0x178>
   1a60a:	2500      	movs	r5, #0
   1a60c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a610:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a614:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a618:	4798      	blx	r3
   1a61a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a61e:	3301      	adds	r3, #1
   1a620:	4629      	mov	r1, r5
   1a622:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a626:	2201      	movs	r2, #1
   1a628:	e72b      	b.n	1a482 <d_maybe_print_fold_expression.isra.15+0xba>
   1a62a:	bf00      	nop
   1a62c:	00024630 	.word	0x00024630
   1a630:	00024628 	.word	0x00024628
   1a634:	000229f8 	.word	0x000229f8

0001a638 <d_demangle_callback.constprop.17>:
   1a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a63c:	b0e7      	sub	sp, #412	; 0x19c
   1a63e:	f890 9000 	ldrb.w	r9, [r0]
   1a642:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a646:	af00      	add	r7, sp, #0
   1a648:	4605      	mov	r5, r0
   1a64a:	4688      	mov	r8, r1
   1a64c:	4616      	mov	r6, r2
   1a64e:	f000 80f1 	beq.w	1a834 <d_demangle_callback.constprop.17+0x1fc>
   1a652:	2208      	movs	r2, #8
   1a654:	49bd      	ldr	r1, [pc, #756]	; (1a94c <d_demangle_callback.constprop.17+0x314>)
   1a656:	4628      	mov	r0, r5
   1a658:	f004 fb80 	bl	1ed5c <strncmp>
   1a65c:	b948      	cbnz	r0, 1a672 <d_demangle_callback.constprop.17+0x3a>
   1a65e:	7a2b      	ldrb	r3, [r5, #8]
   1a660:	2b2e      	cmp	r3, #46	; 0x2e
   1a662:	f000 80d6 	beq.w	1a812 <d_demangle_callback.constprop.17+0x1da>
   1a666:	2b5f      	cmp	r3, #95	; 0x5f
   1a668:	f000 80d3 	beq.w	1a812 <d_demangle_callback.constprop.17+0x1da>
   1a66c:	2b24      	cmp	r3, #36	; 0x24
   1a66e:	f000 80d0 	beq.w	1a812 <d_demangle_callback.constprop.17+0x1da>
   1a672:	f04f 0a00 	mov.w	sl, #0
   1a676:	4628      	mov	r0, r5
   1a678:	f004 fb02 	bl	1ec80 <strlen>
   1a67c:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a680:	0083      	lsls	r3, r0, #2
   1a682:	eb03 020b 	add.w	r2, r3, fp
   1a686:	0092      	lsls	r2, r2, #2
   1a688:	3208      	adds	r2, #8
   1a68a:	330a      	adds	r3, #10
   1a68c:	ebad 0d02 	sub.w	sp, sp, r2
   1a690:	f023 0307 	bic.w	r3, r3, #7
   1a694:	2400      	movs	r4, #0
   1a696:	466a      	mov	r2, sp
   1a698:	1829      	adds	r1, r5, r0
   1a69a:	ebad 0d03 	sub.w	sp, sp, r3
   1a69e:	f1ba 0f01 	cmp.w	sl, #1
   1a6a2:	f04f 0311 	mov.w	r3, #17
   1a6a6:	627a      	str	r2, [r7, #36]	; 0x24
   1a6a8:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a6ac:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a6b0:	617d      	str	r5, [r7, #20]
   1a6b2:	623d      	str	r5, [r7, #32]
   1a6b4:	63b8      	str	r0, [r7, #56]	; 0x38
   1a6b6:	61b9      	str	r1, [r7, #24]
   1a6b8:	61fb      	str	r3, [r7, #28]
   1a6ba:	62bc      	str	r4, [r7, #40]	; 0x28
   1a6bc:	637c      	str	r4, [r7, #52]	; 0x34
   1a6be:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a6c0:	643c      	str	r4, [r7, #64]	; 0x40
   1a6c2:	647c      	str	r4, [r7, #68]	; 0x44
   1a6c4:	64bc      	str	r4, [r7, #72]	; 0x48
   1a6c6:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a6c8:	f000 80bb 	beq.w	1a842 <d_demangle_callback.constprop.17+0x20a>
   1a6cc:	f0c0 80cf 	bcc.w	1a86e <d_demangle_callback.constprop.17+0x236>
   1a6d0:	7aeb      	ldrb	r3, [r5, #11]
   1a6d2:	f1ba 0f02 	cmp.w	sl, #2
   1a6d6:	bf18      	it	ne
   1a6d8:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a6dc:	f105 0a0b 	add.w	sl, r5, #11
   1a6e0:	bf08      	it	eq
   1a6e2:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a6e6:	2b5f      	cmp	r3, #95	; 0x5f
   1a6e8:	f8c7 a020 	str.w	sl, [r7, #32]
   1a6ec:	f000 80b2 	beq.w	1a854 <d_demangle_callback.constprop.17+0x21c>
   1a6f0:	4650      	mov	r0, sl
   1a6f2:	607a      	str	r2, [r7, #4]
   1a6f4:	f004 fac4 	bl	1ec80 <strlen>
   1a6f8:	f1bb 0f00 	cmp.w	fp, #0
   1a6fc:	687a      	ldr	r2, [r7, #4]
   1a6fe:	f340 80bf 	ble.w	1a880 <d_demangle_callback.constprop.17+0x248>
   1a702:	2301      	movs	r3, #1
   1a704:	62bb      	str	r3, [r7, #40]	; 0x28
   1a706:	2800      	cmp	r0, #0
   1a708:	f000 80ba 	beq.w	1a880 <d_demangle_callback.constprop.17+0x248>
   1a70c:	2300      	movs	r3, #0
   1a70e:	f8c2 a004 	str.w	sl, [r2, #4]
   1a712:	6090      	str	r0, [r2, #8]
   1a714:	7013      	strb	r3, [r2, #0]
   1a716:	4649      	mov	r1, r9
   1a718:	2300      	movs	r3, #0
   1a71a:	f107 0014 	add.w	r0, r7, #20
   1a71e:	f7f9 fe31 	bl	14384 <d_make_comp>
   1a722:	6a3c      	ldr	r4, [r7, #32]
   1a724:	4605      	mov	r5, r0
   1a726:	4620      	mov	r0, r4
   1a728:	f004 faaa 	bl	1ec80 <strlen>
   1a72c:	1823      	adds	r3, r4, r0
   1a72e:	623b      	str	r3, [r7, #32]
   1a730:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a734:	f1b9 0f00 	cmp.w	r9, #0
   1a738:	f040 8086 	bne.w	1a848 <d_demangle_callback.constprop.17+0x210>
   1a73c:	2d00      	cmp	r5, #0
   1a73e:	f000 8083 	beq.w	1a848 <d_demangle_callback.constprop.17+0x210>
   1a742:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1a746:	462a      	mov	r2, r5
   1a748:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1a74c:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1a750:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1a754:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1a758:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1a75c:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1a760:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1a764:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a768:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1a76c:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1a770:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1a774:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1a778:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1a77c:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1a780:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1a784:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1a788:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1a78c:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1a790:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1a794:	f7f9 fec4 	bl	14520 <d_count_templates_scopes>
   1a798:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1a79c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1a7a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a7a4:	613b      	str	r3, [r7, #16]
   1a7a6:	00d0      	lsls	r0, r2, #3
   1a7a8:	fb01 f102 	mul.w	r1, r1, r2
   1a7ac:	3008      	adds	r0, #8
   1a7ae:	46e8      	mov	r8, sp
   1a7b0:	00ca      	lsls	r2, r1, #3
   1a7b2:	ebad 0d00 	sub.w	sp, sp, r0
   1a7b6:	4668      	mov	r0, sp
   1a7b8:	3208      	adds	r2, #8
   1a7ba:	ebad 0d02 	sub.w	sp, sp, r2
   1a7be:	f107 060c 	add.w	r6, r7, #12
   1a7c2:	462a      	mov	r2, r5
   1a7c4:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1a7c8:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1a7cc:	4620      	mov	r0, r4
   1a7ce:	2111      	movs	r1, #17
   1a7d0:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1a7d4:	60fd      	str	r5, [r7, #12]
   1a7d6:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1a7da:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1a7de:	f7fc f9c5 	bl	16b6c <d_print_comp_inner>
   1a7e2:	693b      	ldr	r3, [r7, #16]
   1a7e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a7e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a7ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a7f0:	f804 9001 	strb.w	r9, [r4, r1]
   1a7f4:	4620      	mov	r0, r4
   1a7f6:	46c5      	mov	sp, r8
   1a7f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a7fc:	4798      	blx	r3
   1a7fe:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1a802:	fab0 f080 	clz	r0, r0
   1a806:	0940      	lsrs	r0, r0, #5
   1a808:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a80c:	46bd      	mov	sp, r7
   1a80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a812:	7a6b      	ldrb	r3, [r5, #9]
   1a814:	2b44      	cmp	r3, #68	; 0x44
   1a816:	d002      	beq.n	1a81e <d_demangle_callback.constprop.17+0x1e6>
   1a818:	2b49      	cmp	r3, #73	; 0x49
   1a81a:	f47f af2a 	bne.w	1a672 <d_demangle_callback.constprop.17+0x3a>
   1a81e:	7aaa      	ldrb	r2, [r5, #10]
   1a820:	2a5f      	cmp	r2, #95	; 0x5f
   1a822:	f47f af26 	bne.w	1a672 <d_demangle_callback.constprop.17+0x3a>
   1a826:	2b49      	cmp	r3, #73	; 0x49
   1a828:	bf14      	ite	ne
   1a82a:	f04f 0a03 	movne.w	sl, #3
   1a82e:	f04f 0a02 	moveq.w	sl, #2
   1a832:	e720      	b.n	1a676 <d_demangle_callback.constprop.17+0x3e>
   1a834:	7843      	ldrb	r3, [r0, #1]
   1a836:	2b5a      	cmp	r3, #90	; 0x5a
   1a838:	f47f af0b 	bne.w	1a652 <d_demangle_callback.constprop.17+0x1a>
   1a83c:	f04f 0a01 	mov.w	sl, #1
   1a840:	e719      	b.n	1a676 <d_demangle_callback.constprop.17+0x3e>
   1a842:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a846:	d01d      	beq.n	1a884 <d_demangle_callback.constprop.17+0x24c>
   1a848:	2000      	movs	r0, #0
   1a84a:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a84e:	46bd      	mov	sp, r7
   1a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a854:	7b2b      	ldrb	r3, [r5, #12]
   1a856:	2b5a      	cmp	r3, #90	; 0x5a
   1a858:	f47f af4a 	bne.w	1a6f0 <d_demangle_callback.constprop.17+0xb8>
   1a85c:	350d      	adds	r5, #13
   1a85e:	4621      	mov	r1, r4
   1a860:	f107 0014 	add.w	r0, r7, #20
   1a864:	623d      	str	r5, [r7, #32]
   1a866:	f7fb fe35 	bl	164d4 <d_encoding>
   1a86a:	4602      	mov	r2, r0
   1a86c:	e753      	b.n	1a716 <d_demangle_callback.constprop.17+0xde>
   1a86e:	f107 0014 	add.w	r0, r7, #20
   1a872:	f7fb f817 	bl	158a4 <d_type>
   1a876:	6a3b      	ldr	r3, [r7, #32]
   1a878:	4605      	mov	r5, r0
   1a87a:	f893 9000 	ldrb.w	r9, [r3]
   1a87e:	e759      	b.n	1a734 <d_demangle_callback.constprop.17+0xfc>
   1a880:	2200      	movs	r2, #0
   1a882:	e748      	b.n	1a716 <d_demangle_callback.constprop.17+0xde>
   1a884:	786b      	ldrb	r3, [r5, #1]
   1a886:	2b5a      	cmp	r3, #90	; 0x5a
   1a888:	d1de      	bne.n	1a848 <d_demangle_callback.constprop.17+0x210>
   1a88a:	3502      	adds	r5, #2
   1a88c:	4651      	mov	r1, sl
   1a88e:	f107 0014 	add.w	r0, r7, #20
   1a892:	623d      	str	r5, [r7, #32]
   1a894:	f7fb fe1e 	bl	164d4 <d_encoding>
   1a898:	69fb      	ldr	r3, [r7, #28]
   1a89a:	07db      	lsls	r3, r3, #31
   1a89c:	4605      	mov	r5, r0
   1a89e:	d551      	bpl.n	1a944 <d_demangle_callback.constprop.17+0x30c>
   1a8a0:	6a38      	ldr	r0, [r7, #32]
   1a8a2:	f890 9000 	ldrb.w	r9, [r0]
   1a8a6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1a8aa:	f47f af43 	bne.w	1a734 <d_demangle_callback.constprop.17+0xfc>
   1a8ae:	7843      	ldrb	r3, [r0, #1]
   1a8b0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1a8b4:	2a19      	cmp	r2, #25
   1a8b6:	d939      	bls.n	1a92c <d_demangle_callback.constprop.17+0x2f4>
   1a8b8:	2b5f      	cmp	r3, #95	; 0x5f
   1a8ba:	d037      	beq.n	1a92c <d_demangle_callback.constprop.17+0x2f4>
   1a8bc:	3b30      	subs	r3, #48	; 0x30
   1a8be:	2b09      	cmp	r3, #9
   1a8c0:	d840      	bhi.n	1a944 <d_demangle_callback.constprop.17+0x30c>
   1a8c2:	7803      	ldrb	r3, [r0, #0]
   1a8c4:	4602      	mov	r2, r0
   1a8c6:	2b2e      	cmp	r3, #46	; 0x2e
   1a8c8:	d112      	bne.n	1a8f0 <d_demangle_callback.constprop.17+0x2b8>
   1a8ca:	7853      	ldrb	r3, [r2, #1]
   1a8cc:	3b30      	subs	r3, #48	; 0x30
   1a8ce:	2b09      	cmp	r3, #9
   1a8d0:	d80e      	bhi.n	1a8f0 <d_demangle_callback.constprop.17+0x2b8>
   1a8d2:	7893      	ldrb	r3, [r2, #2]
   1a8d4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a8d8:	2909      	cmp	r1, #9
   1a8da:	f102 0202 	add.w	r2, r2, #2
   1a8de:	d8f2      	bhi.n	1a8c6 <d_demangle_callback.constprop.17+0x28e>
   1a8e0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1a8e4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a8e8:	2909      	cmp	r1, #9
   1a8ea:	d9f9      	bls.n	1a8e0 <d_demangle_callback.constprop.17+0x2a8>
   1a8ec:	2b2e      	cmp	r3, #46	; 0x2e
   1a8ee:	d0ec      	beq.n	1a8ca <d_demangle_callback.constprop.17+0x292>
   1a8f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a8f4:	623a      	str	r2, [r7, #32]
   1a8f6:	4299      	cmp	r1, r3
   1a8f8:	da16      	bge.n	1a928 <d_demangle_callback.constprop.17+0x2f0>
   1a8fa:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1a8fe:	1c4b      	adds	r3, r1, #1
   1a900:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1a904:	62bb      	str	r3, [r7, #40]	; 0x28
   1a906:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1a90a:	d00d      	beq.n	1a928 <d_demangle_callback.constprop.17+0x2f0>
   1a90c:	1a12      	subs	r2, r2, r0
   1a90e:	d00b      	beq.n	1a928 <d_demangle_callback.constprop.17+0x2f0>
   1a910:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1a914:	6058      	str	r0, [r3, #4]
   1a916:	609a      	str	r2, [r3, #8]
   1a918:	462a      	mov	r2, r5
   1a91a:	214d      	movs	r1, #77	; 0x4d
   1a91c:	f107 0014 	add.w	r0, r7, #20
   1a920:	f7f9 fd30 	bl	14384 <d_make_comp>
   1a924:	4605      	mov	r5, r0
   1a926:	e7bb      	b.n	1a8a0 <d_demangle_callback.constprop.17+0x268>
   1a928:	2300      	movs	r3, #0
   1a92a:	e7f5      	b.n	1a918 <d_demangle_callback.constprop.17+0x2e0>
   1a92c:	1c81      	adds	r1, r0, #2
   1a92e:	460a      	mov	r2, r1
   1a930:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a934:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1a938:	f1be 0f19 	cmp.w	lr, #25
   1a93c:	d9f7      	bls.n	1a92e <d_demangle_callback.constprop.17+0x2f6>
   1a93e:	2b5f      	cmp	r3, #95	; 0x5f
   1a940:	d0f5      	beq.n	1a92e <d_demangle_callback.constprop.17+0x2f6>
   1a942:	e7c0      	b.n	1a8c6 <d_demangle_callback.constprop.17+0x28e>
   1a944:	6a3b      	ldr	r3, [r7, #32]
   1a946:	f893 9000 	ldrb.w	r9, [r3]
   1a94a:	e6f3      	b.n	1a734 <d_demangle_callback.constprop.17+0xfc>
   1a94c:	000242d8 	.word	0x000242d8

0001a950 <__cxa_demangle>:
   1a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a954:	b084      	sub	sp, #16
   1a956:	b378      	cbz	r0, 1a9b8 <__cxa_demangle+0x68>
   1a958:	b101      	cbz	r1, 1a95c <__cxa_demangle+0xc>
   1a95a:	b36a      	cbz	r2, 1a9b8 <__cxa_demangle+0x68>
   1a95c:	2400      	movs	r4, #0
   1a95e:	4616      	mov	r6, r2
   1a960:	460d      	mov	r5, r1
   1a962:	466a      	mov	r2, sp
   1a964:	4927      	ldr	r1, [pc, #156]	; (1aa04 <__cxa_demangle+0xb4>)
   1a966:	9400      	str	r4, [sp, #0]
   1a968:	461f      	mov	r7, r3
   1a96a:	9401      	str	r4, [sp, #4]
   1a96c:	9402      	str	r4, [sp, #8]
   1a96e:	9403      	str	r4, [sp, #12]
   1a970:	f7ff fe62 	bl	1a638 <d_demangle_callback.constprop.17>
   1a974:	2800      	cmp	r0, #0
   1a976:	d03f      	beq.n	1a9f8 <__cxa_demangle+0xa8>
   1a978:	9b03      	ldr	r3, [sp, #12]
   1a97a:	b1d3      	cbz	r3, 1a9b2 <__cxa_demangle+0x62>
   1a97c:	f04f 0801 	mov.w	r8, #1
   1a980:	9c00      	ldr	r4, [sp, #0]
   1a982:	b35c      	cbz	r4, 1a9dc <__cxa_demangle+0x8c>
   1a984:	b33d      	cbz	r5, 1a9d6 <__cxa_demangle+0x86>
   1a986:	4620      	mov	r0, r4
   1a988:	f004 f97a 	bl	1ec80 <strlen>
   1a98c:	6833      	ldr	r3, [r6, #0]
   1a98e:	4298      	cmp	r0, r3
   1a990:	d21b      	bcs.n	1a9ca <__cxa_demangle+0x7a>
   1a992:	1c42      	adds	r2, r0, #1
   1a994:	4621      	mov	r1, r4
   1a996:	4628      	mov	r0, r5
   1a998:	f003 fc2a 	bl	1e1f0 <memcpy>
   1a99c:	4620      	mov	r0, r4
   1a99e:	f003 f8eb 	bl	1db78 <free>
   1a9a2:	462c      	mov	r4, r5
   1a9a4:	b10f      	cbz	r7, 1a9aa <__cxa_demangle+0x5a>
   1a9a6:	2300      	movs	r3, #0
   1a9a8:	603b      	str	r3, [r7, #0]
   1a9aa:	4620      	mov	r0, r4
   1a9ac:	b004      	add	sp, #16
   1a9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9b2:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1a9b6:	e7e3      	b.n	1a980 <__cxa_demangle+0x30>
   1a9b8:	b113      	cbz	r3, 1a9c0 <__cxa_demangle+0x70>
   1a9ba:	f06f 0202 	mvn.w	r2, #2
   1a9be:	601a      	str	r2, [r3, #0]
   1a9c0:	2400      	movs	r4, #0
   1a9c2:	4620      	mov	r0, r4
   1a9c4:	b004      	add	sp, #16
   1a9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9ca:	4628      	mov	r0, r5
   1a9cc:	f003 f8d4 	bl	1db78 <free>
   1a9d0:	f8c6 8000 	str.w	r8, [r6]
   1a9d4:	e7e6      	b.n	1a9a4 <__cxa_demangle+0x54>
   1a9d6:	2e00      	cmp	r6, #0
   1a9d8:	d1fa      	bne.n	1a9d0 <__cxa_demangle+0x80>
   1a9da:	e7e3      	b.n	1a9a4 <__cxa_demangle+0x54>
   1a9dc:	2f00      	cmp	r7, #0
   1a9de:	d0ef      	beq.n	1a9c0 <__cxa_demangle+0x70>
   1a9e0:	f1b8 0f01 	cmp.w	r8, #1
   1a9e4:	d004      	beq.n	1a9f0 <__cxa_demangle+0xa0>
   1a9e6:	f06f 0301 	mvn.w	r3, #1
   1a9ea:	603b      	str	r3, [r7, #0]
   1a9ec:	2400      	movs	r4, #0
   1a9ee:	e7dc      	b.n	1a9aa <__cxa_demangle+0x5a>
   1a9f0:	f04f 33ff 	mov.w	r3, #4294967295
   1a9f4:	603b      	str	r3, [r7, #0]
   1a9f6:	e7d8      	b.n	1a9aa <__cxa_demangle+0x5a>
   1a9f8:	9800      	ldr	r0, [sp, #0]
   1a9fa:	f003 f8bd 	bl	1db78 <free>
   1a9fe:	2f00      	cmp	r7, #0
   1aa00:	d1f1      	bne.n	1a9e6 <__cxa_demangle+0x96>
   1aa02:	e7dd      	b.n	1a9c0 <__cxa_demangle+0x70>
   1aa04:	00014aa9 	.word	0x00014aa9

0001aa08 <__gcclibcxx_demangle_callback>:
   1aa08:	b160      	cbz	r0, 1aa24 <__gcclibcxx_demangle_callback+0x1c>
   1aa0a:	b508      	push	{r3, lr}
   1aa0c:	b139      	cbz	r1, 1aa1e <__gcclibcxx_demangle_callback+0x16>
   1aa0e:	f7ff fe13 	bl	1a638 <d_demangle_callback.constprop.17>
   1aa12:	2800      	cmp	r0, #0
   1aa14:	bf0c      	ite	eq
   1aa16:	f06f 0001 	mvneq.w	r0, #1
   1aa1a:	2000      	movne	r0, #0
   1aa1c:	bd08      	pop	{r3, pc}
   1aa1e:	f06f 0002 	mvn.w	r0, #2
   1aa22:	bd08      	pop	{r3, pc}
   1aa24:	f06f 0002 	mvn.w	r0, #2
   1aa28:	4770      	bx	lr
   1aa2a:	bf00      	nop

0001aa2c <__cxa_current_exception_type>:
   1aa2c:	b508      	push	{r3, lr}
   1aa2e:	f7f9 f8f5 	bl	13c1c <__cxa_get_globals>
   1aa32:	6800      	ldr	r0, [r0, #0]
   1aa34:	b130      	cbz	r0, 1aa44 <__cxa_current_exception_type+0x18>
   1aa36:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1aa3a:	2b01      	cmp	r3, #1
   1aa3c:	bf04      	itt	eq
   1aa3e:	6800      	ldreq	r0, [r0, #0]
   1aa40:	3878      	subeq	r0, #120	; 0x78
   1aa42:	6800      	ldr	r0, [r0, #0]
   1aa44:	bd08      	pop	{r3, pc}
   1aa46:	bf00      	nop

0001aa48 <round>:
   1aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa4a:	ec53 2b10 	vmov	r2, r3, d0
   1aa4e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1aa52:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
   1aa56:	2813      	cmp	r0, #19
   1aa58:	4619      	mov	r1, r3
   1aa5a:	ee10 6a10 	vmov	r6, s0
   1aa5e:	dc12      	bgt.n	1aa86 <round+0x3e>
   1aa60:	2800      	cmp	r0, #0
   1aa62:	db32      	blt.n	1aaca <round+0x82>
   1aa64:	4d23      	ldr	r5, [pc, #140]	; (1aaf4 <round+0xac>)
   1aa66:	4105      	asrs	r5, r0
   1aa68:	422b      	tst	r3, r5
   1aa6a:	461f      	mov	r7, r3
   1aa6c:	d02a      	beq.n	1aac4 <round+0x7c>
   1aa6e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1aa72:	4101      	asrs	r1, r0
   1aa74:	4439      	add	r1, r7
   1aa76:	ea21 0105 	bic.w	r1, r1, r5
   1aa7a:	2400      	movs	r4, #0
   1aa7c:	460b      	mov	r3, r1
   1aa7e:	4622      	mov	r2, r4
   1aa80:	ec43 2b10 	vmov	d0, r2, r3
   1aa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa86:	2833      	cmp	r0, #51	; 0x33
   1aa88:	dd05      	ble.n	1aa96 <round+0x4e>
   1aa8a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1aa8e:	d022      	beq.n	1aad6 <round+0x8e>
   1aa90:	ec43 2b10 	vmov	d0, r2, r3
   1aa94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa96:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   1aa9a:	f04f 35ff 	mov.w	r5, #4294967295
   1aa9e:	fa25 f404 	lsr.w	r4, r5, r4
   1aaa2:	4222      	tst	r2, r4
   1aaa4:	d0f4      	beq.n	1aa90 <round+0x48>
   1aaa6:	2301      	movs	r3, #1
   1aaa8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
   1aaac:	fa03 f000 	lsl.w	r0, r3, r0
   1aab0:	1980      	adds	r0, r0, r6
   1aab2:	bf28      	it	cs
   1aab4:	18c9      	addcs	r1, r1, r3
   1aab6:	ea20 0404 	bic.w	r4, r0, r4
   1aaba:	460b      	mov	r3, r1
   1aabc:	4622      	mov	r2, r4
   1aabe:	ec43 2b10 	vmov	d0, r2, r3
   1aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aac4:	2a00      	cmp	r2, #0
   1aac6:	d1d2      	bne.n	1aa6e <round+0x26>
   1aac8:	e7e2      	b.n	1aa90 <round+0x48>
   1aaca:	3001      	adds	r0, #1
   1aacc:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
   1aad0:	d009      	beq.n	1aae6 <round+0x9e>
   1aad2:	2400      	movs	r4, #0
   1aad4:	e7d2      	b.n	1aa7c <round+0x34>
   1aad6:	ee10 0a10 	vmov	r0, s0
   1aada:	4619      	mov	r1, r3
   1aadc:	f000 fe18 	bl	1b710 <__adddf3>
   1aae0:	ec41 0b10 	vmov	d0, r0, r1
   1aae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aae6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
   1aaea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1aaee:	2400      	movs	r4, #0
   1aaf0:	e7c4      	b.n	1aa7c <round+0x34>
   1aaf2:	bf00      	nop
   1aaf4:	000fffff 	.word	0x000fffff

0001aaf8 <powf>:
   1aaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aafa:	ed2d 8b04 	vpush	{d8-d9}
   1aafe:	4db3      	ldr	r5, [pc, #716]	; (1adcc <powf+0x2d4>)
   1ab00:	b08b      	sub	sp, #44	; 0x2c
   1ab02:	eef0 8a40 	vmov.f32	s17, s0
   1ab06:	eeb0 8a60 	vmov.f32	s16, s1
   1ab0a:	f000 f9df 	bl	1aecc <__ieee754_powf>
   1ab0e:	f995 4000 	ldrsb.w	r4, [r5]
   1ab12:	1c63      	adds	r3, r4, #1
   1ab14:	eeb0 9a40 	vmov.f32	s18, s0
   1ab18:	d02e      	beq.n	1ab78 <powf+0x80>
   1ab1a:	eeb4 8a48 	vcmp.f32	s16, s16
   1ab1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab22:	d629      	bvs.n	1ab78 <powf+0x80>
   1ab24:	eef4 8a68 	vcmp.f32	s17, s17
   1ab28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab2c:	f180 80a2 	bvs.w	1ac74 <powf+0x17c>
   1ab30:	eef5 8a40 	vcmp.f32	s17, #0.0
   1ab34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab38:	d124      	bne.n	1ab84 <powf+0x8c>
   1ab3a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ab3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab42:	d159      	bne.n	1abf8 <powf+0x100>
   1ab44:	2301      	movs	r3, #1
   1ab46:	4aa2      	ldr	r2, [pc, #648]	; (1add0 <powf+0x2d8>)
   1ab48:	9300      	str	r3, [sp, #0]
   1ab4a:	ee18 0a90 	vmov	r0, s17
   1ab4e:	2300      	movs	r3, #0
   1ab50:	9201      	str	r2, [sp, #4]
   1ab52:	9308      	str	r3, [sp, #32]
   1ab54:	f000 ff3a 	bl	1b9cc <__aeabi_f2d>
   1ab58:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ab5c:	ee18 0a10 	vmov	r0, s16
   1ab60:	f000 ff34 	bl	1b9cc <__aeabi_f2d>
   1ab64:	2200      	movs	r2, #0
   1ab66:	2300      	movs	r3, #0
   1ab68:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ab6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab70:	2c00      	cmp	r4, #0
   1ab72:	d067      	beq.n	1ac44 <powf+0x14c>
   1ab74:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1ab78:	eeb0 0a49 	vmov.f32	s0, s18
   1ab7c:	b00b      	add	sp, #44	; 0x2c
   1ab7e:	ecbd 8b04 	vpop	{d8-d9}
   1ab82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab84:	f000 fd3a 	bl	1b5fc <finitef>
   1ab88:	4604      	mov	r4, r0
   1ab8a:	2800      	cmp	r0, #0
   1ab8c:	f000 8091 	beq.w	1acb2 <powf+0x1ba>
   1ab90:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1ab94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab98:	d1ee      	bne.n	1ab78 <powf+0x80>
   1ab9a:	eeb0 0a68 	vmov.f32	s0, s17
   1ab9e:	f000 fd2d 	bl	1b5fc <finitef>
   1aba2:	2800      	cmp	r0, #0
   1aba4:	d0e8      	beq.n	1ab78 <powf+0x80>
   1aba6:	eeb0 0a48 	vmov.f32	s0, s16
   1abaa:	f000 fd27 	bl	1b5fc <finitef>
   1abae:	2800      	cmp	r0, #0
   1abb0:	d0e2      	beq.n	1ab78 <powf+0x80>
   1abb2:	2304      	movs	r3, #4
   1abb4:	4a86      	ldr	r2, [pc, #536]	; (1add0 <powf+0x2d8>)
   1abb6:	9300      	str	r3, [sp, #0]
   1abb8:	ee18 0a90 	vmov	r0, s17
   1abbc:	2300      	movs	r3, #0
   1abbe:	9308      	str	r3, [sp, #32]
   1abc0:	9201      	str	r2, [sp, #4]
   1abc2:	f000 ff03 	bl	1b9cc <__aeabi_f2d>
   1abc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1abca:	ee18 0a10 	vmov	r0, s16
   1abce:	f000 fefd 	bl	1b9cc <__aeabi_f2d>
   1abd2:	2600      	movs	r6, #0
   1abd4:	2700      	movs	r7, #0
   1abd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1abda:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1abde:	f995 3000 	ldrsb.w	r3, [r5]
   1abe2:	2b02      	cmp	r3, #2
   1abe4:	d003      	beq.n	1abee <powf+0xf6>
   1abe6:	4668      	mov	r0, sp
   1abe8:	f000 fc6c 	bl	1b4c4 <matherr>
   1abec:	bb80      	cbnz	r0, 1ac50 <powf+0x158>
   1abee:	f002 fd15 	bl	1d61c <__errno>
   1abf2:	2322      	movs	r3, #34	; 0x22
   1abf4:	6003      	str	r3, [r0, #0]
   1abf6:	e02b      	b.n	1ac50 <powf+0x158>
   1abf8:	eeb0 0a48 	vmov.f32	s0, s16
   1abfc:	f000 fcfe 	bl	1b5fc <finitef>
   1ac00:	2800      	cmp	r0, #0
   1ac02:	d0b9      	beq.n	1ab78 <powf+0x80>
   1ac04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ac08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac0c:	d5b4      	bpl.n	1ab78 <powf+0x80>
   1ac0e:	2301      	movs	r3, #1
   1ac10:	4a6f      	ldr	r2, [pc, #444]	; (1add0 <powf+0x2d8>)
   1ac12:	9300      	str	r3, [sp, #0]
   1ac14:	ee18 0a90 	vmov	r0, s17
   1ac18:	2300      	movs	r3, #0
   1ac1a:	9308      	str	r3, [sp, #32]
   1ac1c:	9201      	str	r2, [sp, #4]
   1ac1e:	f000 fed5 	bl	1b9cc <__aeabi_f2d>
   1ac22:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ac26:	ee18 0a10 	vmov	r0, s16
   1ac2a:	f000 fecf 	bl	1b9cc <__aeabi_f2d>
   1ac2e:	f995 3000 	ldrsb.w	r3, [r5]
   1ac32:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac36:	2b00      	cmp	r3, #0
   1ac38:	f040 809b 	bne.w	1ad72 <powf+0x27a>
   1ac3c:	2200      	movs	r2, #0
   1ac3e:	2300      	movs	r3, #0
   1ac40:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ac44:	4668      	mov	r0, sp
   1ac46:	f000 fc3d 	bl	1b4c4 <matherr>
   1ac4a:	2800      	cmp	r0, #0
   1ac4c:	f000 808c 	beq.w	1ad68 <powf+0x270>
   1ac50:	9b08      	ldr	r3, [sp, #32]
   1ac52:	b11b      	cbz	r3, 1ac5c <powf+0x164>
   1ac54:	f002 fce2 	bl	1d61c <__errno>
   1ac58:	9b08      	ldr	r3, [sp, #32]
   1ac5a:	6003      	str	r3, [r0, #0]
   1ac5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ac60:	f001 f9ea 	bl	1c038 <__aeabi_d2f>
   1ac64:	ee09 0a10 	vmov	s18, r0
   1ac68:	eeb0 0a49 	vmov.f32	s0, s18
   1ac6c:	b00b      	add	sp, #44	; 0x2c
   1ac6e:	ecbd 8b04 	vpop	{d8-d9}
   1ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac74:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ac78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac7c:	f47f af7c 	bne.w	1ab78 <powf+0x80>
   1ac80:	2301      	movs	r3, #1
   1ac82:	4a53      	ldr	r2, [pc, #332]	; (1add0 <powf+0x2d8>)
   1ac84:	9300      	str	r3, [sp, #0]
   1ac86:	ee18 0a90 	vmov	r0, s17
   1ac8a:	2300      	movs	r3, #0
   1ac8c:	9201      	str	r2, [sp, #4]
   1ac8e:	9308      	str	r3, [sp, #32]
   1ac90:	f000 fe9c 	bl	1b9cc <__aeabi_f2d>
   1ac94:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ac98:	ee18 0a10 	vmov	r0, s16
   1ac9c:	f000 fe96 	bl	1b9cc <__aeabi_f2d>
   1aca0:	4b4c      	ldr	r3, [pc, #304]	; (1add4 <powf+0x2dc>)
   1aca2:	2200      	movs	r2, #0
   1aca4:	2c02      	cmp	r4, #2
   1aca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1acaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1acae:	d1c9      	bne.n	1ac44 <powf+0x14c>
   1acb0:	e760      	b.n	1ab74 <powf+0x7c>
   1acb2:	eeb0 0a68 	vmov.f32	s0, s17
   1acb6:	f000 fca1 	bl	1b5fc <finitef>
   1acba:	2800      	cmp	r0, #0
   1acbc:	f43f af68 	beq.w	1ab90 <powf+0x98>
   1acc0:	eeb0 0a48 	vmov.f32	s0, s16
   1acc4:	f000 fc9a 	bl	1b5fc <finitef>
   1acc8:	2800      	cmp	r0, #0
   1acca:	f43f af61 	beq.w	1ab90 <powf+0x98>
   1acce:	eeb4 9a49 	vcmp.f32	s18, s18
   1acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1acd6:	f180 8087 	bvs.w	1ade8 <powf+0x2f0>
   1acda:	4b3d      	ldr	r3, [pc, #244]	; (1add0 <powf+0x2d8>)
   1acdc:	9408      	str	r4, [sp, #32]
   1acde:	2203      	movs	r2, #3
   1ace0:	ee18 0a90 	vmov	r0, s17
   1ace4:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ace8:	f000 fe70 	bl	1b9cc <__aeabi_f2d>
   1acec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1acf0:	ee18 0a10 	vmov	r0, s16
   1acf4:	f000 fe6a 	bl	1b9cc <__aeabi_f2d>
   1acf8:	f995 3000 	ldrsb.w	r3, [r5]
   1acfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad00:	2b00      	cmp	r3, #0
   1ad02:	d13d      	bne.n	1ad80 <powf+0x288>
   1ad04:	4b34      	ldr	r3, [pc, #208]	; (1add8 <powf+0x2e0>)
   1ad06:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ad0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1ad0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad12:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad16:	f57f af66 	bpl.w	1abe6 <powf+0xee>
   1ad1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ad1e:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ad22:	ee17 0a90 	vmov	r0, s15
   1ad26:	f000 fe51 	bl	1b9cc <__aeabi_f2d>
   1ad2a:	4606      	mov	r6, r0
   1ad2c:	460f      	mov	r7, r1
   1ad2e:	ec47 6b10 	vmov	d0, r6, r7
   1ad32:	f000 fbc9 	bl	1b4c8 <rint>
   1ad36:	4630      	mov	r0, r6
   1ad38:	ec53 2b10 	vmov	r2, r3, d0
   1ad3c:	4639      	mov	r1, r7
   1ad3e:	f001 f901 	bl	1bf44 <__aeabi_dcmpeq>
   1ad42:	2800      	cmp	r0, #0
   1ad44:	d13f      	bne.n	1adc6 <powf+0x2ce>
   1ad46:	4925      	ldr	r1, [pc, #148]	; (1addc <powf+0x2e4>)
   1ad48:	f995 3000 	ldrsb.w	r3, [r5]
   1ad4c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1ad50:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad54:	e745      	b.n	1abe2 <powf+0xea>
   1ad56:	4610      	mov	r0, r2
   1ad58:	4619      	mov	r1, r3
   1ad5a:	f000 ffb5 	bl	1bcc8 <__aeabi_ddiv>
   1ad5e:	2c02      	cmp	r4, #2
   1ad60:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad64:	f47f af6e 	bne.w	1ac44 <powf+0x14c>
   1ad68:	f002 fc58 	bl	1d61c <__errno>
   1ad6c:	2321      	movs	r3, #33	; 0x21
   1ad6e:	6003      	str	r3, [r0, #0]
   1ad70:	e76e      	b.n	1ac50 <powf+0x158>
   1ad72:	491b      	ldr	r1, [pc, #108]	; (1ade0 <powf+0x2e8>)
   1ad74:	2000      	movs	r0, #0
   1ad76:	2b02      	cmp	r3, #2
   1ad78:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad7c:	d0f4      	beq.n	1ad68 <powf+0x270>
   1ad7e:	e761      	b.n	1ac44 <powf+0x14c>
   1ad80:	4918      	ldr	r1, [pc, #96]	; (1ade4 <powf+0x2ec>)
   1ad82:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ad86:	2000      	movs	r0, #0
   1ad88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad90:	f57f af27 	bpl.w	1abe2 <powf+0xea>
   1ad94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ad98:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ad9c:	ee17 0a90 	vmov	r0, s15
   1ada0:	f000 fe14 	bl	1b9cc <__aeabi_f2d>
   1ada4:	4606      	mov	r6, r0
   1ada6:	460f      	mov	r7, r1
   1ada8:	ec47 6b10 	vmov	d0, r6, r7
   1adac:	f000 fb8c 	bl	1b4c8 <rint>
   1adb0:	4630      	mov	r0, r6
   1adb2:	ec53 2b10 	vmov	r2, r3, d0
   1adb6:	4639      	mov	r1, r7
   1adb8:	f001 f8c4 	bl	1bf44 <__aeabi_dcmpeq>
   1adbc:	b918      	cbnz	r0, 1adc6 <powf+0x2ce>
   1adbe:	4b08      	ldr	r3, [pc, #32]	; (1ade0 <powf+0x2e8>)
   1adc0:	2200      	movs	r2, #0
   1adc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1adc6:	f995 3000 	ldrsb.w	r3, [r5]
   1adca:	e70a      	b.n	1abe2 <powf+0xea>
   1adcc:	200000fc 	.word	0x200000fc
   1add0:	00024b24 	.word	0x00024b24
   1add4:	3ff00000 	.word	0x3ff00000
   1add8:	47efffff 	.word	0x47efffff
   1addc:	c7efffff 	.word	0xc7efffff
   1ade0:	fff00000 	.word	0xfff00000
   1ade4:	7ff00000 	.word	0x7ff00000
   1ade8:	4b0c      	ldr	r3, [pc, #48]	; (1ae1c <powf+0x324>)
   1adea:	9408      	str	r4, [sp, #32]
   1adec:	2201      	movs	r2, #1
   1adee:	ee18 0a90 	vmov	r0, s17
   1adf2:	e88d 000c 	stmia.w	sp, {r2, r3}
   1adf6:	f000 fde9 	bl	1b9cc <__aeabi_f2d>
   1adfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1adfe:	ee18 0a10 	vmov	r0, s16
   1ae02:	f000 fde3 	bl	1b9cc <__aeabi_f2d>
   1ae06:	f995 4000 	ldrsb.w	r4, [r5]
   1ae0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae0e:	2200      	movs	r2, #0
   1ae10:	2300      	movs	r3, #0
   1ae12:	2c00      	cmp	r4, #0
   1ae14:	d19f      	bne.n	1ad56 <powf+0x25e>
   1ae16:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae1a:	e713      	b.n	1ac44 <powf+0x14c>
   1ae1c:	00024b24 	.word	0x00024b24

0001ae20 <sqrtf>:
   1ae20:	b510      	push	{r4, lr}
   1ae22:	ed2d 8b02 	vpush	{d8}
   1ae26:	b08a      	sub	sp, #40	; 0x28
   1ae28:	eeb0 8a40 	vmov.f32	s16, s0
   1ae2c:	f000 fb46 	bl	1b4bc <__ieee754_sqrtf>
   1ae30:	4b24      	ldr	r3, [pc, #144]	; (1aec4 <sqrtf+0xa4>)
   1ae32:	f993 4000 	ldrsb.w	r4, [r3]
   1ae36:	1c63      	adds	r3, r4, #1
   1ae38:	d009      	beq.n	1ae4e <sqrtf+0x2e>
   1ae3a:	eeb4 8a48 	vcmp.f32	s16, s16
   1ae3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae42:	d604      	bvs.n	1ae4e <sqrtf+0x2e>
   1ae44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ae48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae4c:	d403      	bmi.n	1ae56 <sqrtf+0x36>
   1ae4e:	b00a      	add	sp, #40	; 0x28
   1ae50:	ecbd 8b02 	vpop	{d8}
   1ae54:	bd10      	pop	{r4, pc}
   1ae56:	2301      	movs	r3, #1
   1ae58:	4a1b      	ldr	r2, [pc, #108]	; (1aec8 <sqrtf+0xa8>)
   1ae5a:	9300      	str	r3, [sp, #0]
   1ae5c:	ee18 0a10 	vmov	r0, s16
   1ae60:	2300      	movs	r3, #0
   1ae62:	9201      	str	r2, [sp, #4]
   1ae64:	9308      	str	r3, [sp, #32]
   1ae66:	f000 fdb1 	bl	1b9cc <__aeabi_f2d>
   1ae6a:	2200      	movs	r2, #0
   1ae6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae70:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ae74:	2300      	movs	r3, #0
   1ae76:	b1bc      	cbz	r4, 1aea8 <sqrtf+0x88>
   1ae78:	4610      	mov	r0, r2
   1ae7a:	4619      	mov	r1, r3
   1ae7c:	f000 ff24 	bl	1bcc8 <__aeabi_ddiv>
   1ae80:	2c02      	cmp	r4, #2
   1ae82:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ae86:	d111      	bne.n	1aeac <sqrtf+0x8c>
   1ae88:	f002 fbc8 	bl	1d61c <__errno>
   1ae8c:	2321      	movs	r3, #33	; 0x21
   1ae8e:	6003      	str	r3, [r0, #0]
   1ae90:	9b08      	ldr	r3, [sp, #32]
   1ae92:	b98b      	cbnz	r3, 1aeb8 <sqrtf+0x98>
   1ae94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ae98:	f001 f8ce 	bl	1c038 <__aeabi_d2f>
   1ae9c:	ee00 0a10 	vmov	s0, r0
   1aea0:	b00a      	add	sp, #40	; 0x28
   1aea2:	ecbd 8b02 	vpop	{d8}
   1aea6:	bd10      	pop	{r4, pc}
   1aea8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aeac:	4668      	mov	r0, sp
   1aeae:	f000 fb09 	bl	1b4c4 <matherr>
   1aeb2:	2800      	cmp	r0, #0
   1aeb4:	d1ec      	bne.n	1ae90 <sqrtf+0x70>
   1aeb6:	e7e7      	b.n	1ae88 <sqrtf+0x68>
   1aeb8:	f002 fbb0 	bl	1d61c <__errno>
   1aebc:	9b08      	ldr	r3, [sp, #32]
   1aebe:	6003      	str	r3, [r0, #0]
   1aec0:	e7e8      	b.n	1ae94 <sqrtf+0x74>
   1aec2:	bf00      	nop
   1aec4:	200000fc 	.word	0x200000fc
   1aec8:	00024b2c 	.word	0x00024b2c

0001aecc <__ieee754_powf>:
   1aecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aed0:	ed2d 8b02 	vpush	{d8}
   1aed4:	b082      	sub	sp, #8
   1aed6:	edcd 0a00 	vstr	s1, [sp]
   1aeda:	9c00      	ldr	r4, [sp, #0]
   1aedc:	ed8d 0a01 	vstr	s0, [sp, #4]
   1aee0:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1aee4:	d014      	beq.n	1af10 <__ieee754_powf+0x44>
   1aee6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1aeea:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1aeee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1aef2:	dd07      	ble.n	1af04 <__ieee754_powf+0x38>
   1aef4:	4858      	ldr	r0, [pc, #352]	; (1b058 <__ieee754_powf+0x18c>)
   1aef6:	b002      	add	sp, #8
   1aef8:	ecbd 8b02 	vpop	{d8}
   1aefc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af00:	f000 bb86 	b.w	1b610 <nanf>
   1af04:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1af08:	dd09      	ble.n	1af1e <__ieee754_powf+0x52>
   1af0a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1af0e:	d1f1      	bne.n	1aef4 <__ieee754_powf+0x28>
   1af10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1af14:	b002      	add	sp, #8
   1af16:	ecbd 8b02 	vpop	{d8}
   1af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1af1e:	f1b8 0f00 	cmp.w	r8, #0
   1af22:	db4d      	blt.n	1afc0 <__ieee754_powf+0xf4>
   1af24:	f04f 0a00 	mov.w	sl, #0
   1af28:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1af2c:	d03f      	beq.n	1afae <__ieee754_powf+0xe2>
   1af2e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1af32:	d058      	beq.n	1afe6 <__ieee754_powf+0x11a>
   1af34:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1af38:	d06e      	beq.n	1b018 <__ieee754_powf+0x14c>
   1af3a:	9d01      	ldr	r5, [sp, #4]
   1af3c:	f8dd 9000 	ldr.w	r9, [sp]
   1af40:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1af44:	ee00 5a10 	vmov	s0, r5
   1af48:	d01c      	beq.n	1af84 <__ieee754_powf+0xb8>
   1af4a:	f000 fb4f 	bl	1b5ec <fabsf>
   1af4e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1af52:	d04d      	beq.n	1aff0 <__ieee754_powf+0x124>
   1af54:	2f00      	cmp	r7, #0
   1af56:	d04b      	beq.n	1aff0 <__ieee754_powf+0x124>
   1af58:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1af5c:	d048      	beq.n	1aff0 <__ieee754_powf+0x124>
   1af5e:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1af62:	3b01      	subs	r3, #1
   1af64:	ea5a 0203 	orrs.w	r2, sl, r3
   1af68:	d06e      	beq.n	1b048 <__ieee754_powf+0x17c>
   1af6a:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1af6e:	dd7b      	ble.n	1b068 <__ieee754_powf+0x19c>
   1af70:	4a3a      	ldr	r2, [pc, #232]	; (1b05c <__ieee754_powf+0x190>)
   1af72:	4297      	cmp	r7, r2
   1af74:	f300 81c8 	bgt.w	1b308 <__ieee754_powf+0x43c>
   1af78:	2c00      	cmp	r4, #0
   1af7a:	f2c0 81cb 	blt.w	1b314 <__ieee754_powf+0x448>
   1af7e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b060 <__ieee754_powf+0x194>
   1af82:	e7c7      	b.n	1af14 <__ieee754_powf+0x48>
   1af84:	f1b8 0f00 	cmp.w	r8, #0
   1af88:	da4b      	bge.n	1b022 <__ieee754_powf+0x156>
   1af8a:	f000 fb2f 	bl	1b5ec <fabsf>
   1af8e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1af92:	d001      	beq.n	1af98 <__ieee754_powf+0xcc>
   1af94:	2f00      	cmp	r7, #0
   1af96:	d1df      	bne.n	1af58 <__ieee754_powf+0x8c>
   1af98:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1af9c:	ea57 030a 	orrs.w	r3, r7, sl
   1afa0:	d04d      	beq.n	1b03e <__ieee754_powf+0x172>
   1afa2:	f1ba 0f01 	cmp.w	sl, #1
   1afa6:	d1b5      	bne.n	1af14 <__ieee754_powf+0x48>
   1afa8:	eeb1 0a40 	vneg.f32	s0, s0
   1afac:	e7b2      	b.n	1af14 <__ieee754_powf+0x48>
   1afae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1afb2:	d0ad      	beq.n	1af10 <__ieee754_powf+0x44>
   1afb4:	dd29      	ble.n	1b00a <__ieee754_powf+0x13e>
   1afb6:	2c00      	cmp	r4, #0
   1afb8:	dbe1      	blt.n	1af7e <__ieee754_powf+0xb2>
   1afba:	ed9d 0a00 	vldr	s0, [sp]
   1afbe:	e7a9      	b.n	1af14 <__ieee754_powf+0x48>
   1afc0:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1afc4:	da1e      	bge.n	1b004 <__ieee754_powf+0x138>
   1afc6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1afca:	db09      	blt.n	1afe0 <__ieee754_powf+0x114>
   1afcc:	15f3      	asrs	r3, r6, #23
   1afce:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1afd2:	fa46 f203 	asr.w	r2, r6, r3
   1afd6:	fa02 f303 	lsl.w	r3, r2, r3
   1afda:	429e      	cmp	r6, r3
   1afdc:	f000 818f 	beq.w	1b2fe <__ieee754_powf+0x432>
   1afe0:	f04f 0a00 	mov.w	sl, #0
   1afe4:	e7a3      	b.n	1af2e <__ieee754_powf+0x62>
   1afe6:	2c00      	cmp	r4, #0
   1afe8:	db22      	blt.n	1b030 <__ieee754_powf+0x164>
   1afea:	ed9d 0a01 	vldr	s0, [sp, #4]
   1afee:	e791      	b.n	1af14 <__ieee754_powf+0x48>
   1aff0:	2c00      	cmp	r4, #0
   1aff2:	bfbc      	itt	lt
   1aff4:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1aff8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1affc:	f1b8 0f00 	cmp.w	r8, #0
   1b000:	da88      	bge.n	1af14 <__ieee754_powf+0x48>
   1b002:	e7c9      	b.n	1af98 <__ieee754_powf+0xcc>
   1b004:	f04f 0a02 	mov.w	sl, #2
   1b008:	e78e      	b.n	1af28 <__ieee754_powf+0x5c>
   1b00a:	2c00      	cmp	r4, #0
   1b00c:	dab7      	bge.n	1af7e <__ieee754_powf+0xb2>
   1b00e:	eddd 7a00 	vldr	s15, [sp]
   1b012:	eeb1 0a67 	vneg.f32	s0, s15
   1b016:	e77d      	b.n	1af14 <__ieee754_powf+0x48>
   1b018:	eddd 7a01 	vldr	s15, [sp, #4]
   1b01c:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b020:	e778      	b.n	1af14 <__ieee754_powf+0x48>
   1b022:	b002      	add	sp, #8
   1b024:	ecbd 8b02 	vpop	{d8}
   1b028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b02c:	f000 ba46 	b.w	1b4bc <__ieee754_sqrtf>
   1b030:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b034:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b038:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b03c:	e76a      	b.n	1af14 <__ieee754_powf+0x48>
   1b03e:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b042:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b046:	e765      	b.n	1af14 <__ieee754_powf+0x48>
   1b048:	ee07 5a90 	vmov	s15, r5
   1b04c:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b050:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b054:	e75e      	b.n	1af14 <__ieee754_powf+0x48>
   1b056:	bf00      	nop
   1b058:	000229d4 	.word	0x000229d4
   1b05c:	3f7ffff7 	.word	0x3f7ffff7
   1b060:	00000000 	.word	0x00000000
   1b064:	4b800000 	.word	0x4b800000
   1b068:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b06c:	f280 815f 	bge.w	1b32e <__ieee754_powf+0x462>
   1b070:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b064 <__ieee754_powf+0x198>
   1b074:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b078:	f06f 0217 	mvn.w	r2, #23
   1b07c:	ee17 7a90 	vmov	r7, s15
   1b080:	48ee      	ldr	r0, [pc, #952]	; (1b43c <__ieee754_powf+0x570>)
   1b082:	15f9      	asrs	r1, r7, #23
   1b084:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b088:	397f      	subs	r1, #127	; 0x7f
   1b08a:	4287      	cmp	r7, r0
   1b08c:	4411      	add	r1, r2
   1b08e:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b092:	f340 8144 	ble.w	1b31e <__ieee754_powf+0x452>
   1b096:	48ea      	ldr	r0, [pc, #936]	; (1b440 <__ieee754_powf+0x574>)
   1b098:	4287      	cmp	r7, r0
   1b09a:	f340 8191 	ble.w	1b3c0 <__ieee754_powf+0x4f4>
   1b09e:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b444 <__ieee754_powf+0x578>
   1b0a2:	3101      	adds	r1, #1
   1b0a4:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b0a8:	eef0 3a64 	vmov.f32	s7, s9
   1b0ac:	2500      	movs	r5, #0
   1b0ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b0b2:	ee06 2a90 	vmov	s13, r2
   1b0b6:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b0ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b0be:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b0c2:	1052      	asrs	r2, r2, #1
   1b0c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b0c8:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b0cc:	442a      	add	r2, r5
   1b0ce:	48de      	ldr	r0, [pc, #888]	; (1b448 <__ieee754_powf+0x57c>)
   1b0d0:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b0d4:	ee07 2a90 	vmov	s15, r2
   1b0d8:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b0dc:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b0e0:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b44c <__ieee754_powf+0x580>
   1b0e4:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b450 <__ieee754_powf+0x584>
   1b0e8:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b454 <__ieee754_powf+0x588>
   1b0ec:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b458 <__ieee754_powf+0x58c>
   1b0f0:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b45c <__ieee754_powf+0x590>
   1b0f4:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b460 <__ieee754_powf+0x594>
   1b0f8:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b464 <__ieee754_powf+0x598>
   1b0fc:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b468 <__ieee754_powf+0x59c>
   1b100:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b104:	ee14 2a10 	vmov	r2, s8
   1b108:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b10c:	4002      	ands	r2, r0
   1b10e:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b112:	eeb0 5a61 	vmov.f32	s10, s3
   1b116:	ee05 2a90 	vmov	s11, r2
   1b11a:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b11e:	eef1 1a65 	vneg.f32	s3, s11
   1b122:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b126:	eef0 7a60 	vmov.f32	s15, s1
   1b12a:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b12e:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b132:	eeb0 5a41 	vmov.f32	s10, s2
   1b136:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b13a:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b13e:	eeb0 7a42 	vmov.f32	s14, s4
   1b142:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b146:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b14a:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b14e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b152:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b156:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b15a:	eeb0 7a45 	vmov.f32	s14, s10
   1b15e:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b162:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b46c <__ieee754_powf+0x5a0>
   1b166:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b16a:	ee07 1a10 	vmov	s14, r1
   1b16e:	ee16 2a10 	vmov	r2, s12
   1b172:	4002      	ands	r2, r0
   1b174:	ee06 2a10 	vmov	s12, r2
   1b178:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b17c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b180:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b184:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b188:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b18c:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b190:	eef0 6a67 	vmov.f32	s13, s15
   1b194:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b198:	ee16 2a90 	vmov	r2, s13
   1b19c:	4002      	ands	r2, r0
   1b19e:	ee06 2a90 	vmov	s13, r2
   1b1a2:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b1a6:	ee05 2a90 	vmov	s11, r2
   1b1aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b1ae:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b1b2:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b1b6:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b1ba:	eef0 6a67 	vmov.f32	s13, s15
   1b1be:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b1c2:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b1c6:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b1ca:	ee16 2a90 	vmov	r2, s13
   1b1ce:	4002      	ands	r2, r0
   1b1d0:	ee06 2a90 	vmov	s13, r2
   1b1d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b1d8:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b1dc:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b1e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b1e4:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b1e8:	f024 040f 	bic.w	r4, r4, #15
   1b1ec:	ee07 9a10 	vmov	s14, r9
   1b1f0:	ee06 4a10 	vmov	s12, r4
   1b1f4:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b1f8:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b1fc:	ee07 4a10 	vmov	s14, r4
   1b200:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b204:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b208:	ea5a 0303 	orrs.w	r3, sl, r3
   1b20c:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b210:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b214:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b218:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b21c:	ee16 2a90 	vmov	r2, s13
   1b220:	bf14      	ite	ne
   1b222:	eeb0 8a46 	vmovne.f32	s16, s12
   1b226:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b22a:	2a00      	cmp	r2, #0
   1b22c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b230:	f340 80b3 	ble.w	1b39a <__ieee754_powf+0x4ce>
   1b234:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b238:	f300 8086 	bgt.w	1b348 <__ieee754_powf+0x47c>
   1b23c:	d079      	beq.n	1b332 <__ieee754_powf+0x466>
   1b23e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b242:	f300 8088 	bgt.w	1b356 <__ieee754_powf+0x48a>
   1b246:	2100      	movs	r1, #0
   1b248:	4608      	mov	r0, r1
   1b24a:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b24e:	f023 030f 	bic.w	r3, r3, #15
   1b252:	ee06 3a10 	vmov	s12, r3
   1b256:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b470 <__ieee754_powf+0x5a4>
   1b25a:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b474 <__ieee754_powf+0x5a8>
   1b25e:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b478 <__ieee754_powf+0x5ac>
   1b262:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b47c <__ieee754_powf+0x5b0>
   1b266:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b480 <__ieee754_powf+0x5b4>
   1b26a:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b484 <__ieee754_powf+0x5b8>
   1b26e:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b488 <__ieee754_powf+0x5bc>
   1b272:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b48c <__ieee754_powf+0x5c0>
   1b276:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b27a:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b27e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b282:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b286:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b28a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b28e:	eef0 7a47 	vmov.f32	s15, s14
   1b292:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b296:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b29a:	eef0 1a47 	vmov.f32	s3, s14
   1b29e:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b2a2:	eeb0 6a63 	vmov.f32	s12, s7
   1b2a6:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b2aa:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b2ae:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b2b2:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b2b6:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b2ba:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b2be:	eeb0 6a45 	vmov.f32	s12, s10
   1b2c2:	eeb0 5a47 	vmov.f32	s10, s14
   1b2c6:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b2ca:	eef0 6a45 	vmov.f32	s13, s10
   1b2ce:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b2d2:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b2d6:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b2da:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b2de:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b2e2:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b2e6:	ee10 3a10 	vmov	r3, s0
   1b2ea:	440b      	add	r3, r1
   1b2ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b2f0:	f2c0 80a0 	blt.w	1b434 <__ieee754_powf+0x568>
   1b2f4:	ee00 3a10 	vmov	s0, r3
   1b2f8:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b2fc:	e60a      	b.n	1af14 <__ieee754_powf+0x48>
   1b2fe:	f002 0201 	and.w	r2, r2, #1
   1b302:	f1c2 0a02 	rsb	sl, r2, #2
   1b306:	e612      	b.n	1af2e <__ieee754_powf+0x62>
   1b308:	4a61      	ldr	r2, [pc, #388]	; (1b490 <__ieee754_powf+0x5c4>)
   1b30a:	4297      	cmp	r7, r2
   1b30c:	dd61      	ble.n	1b3d2 <__ieee754_powf+0x506>
   1b30e:	2c00      	cmp	r4, #0
   1b310:	f77f ae35 	ble.w	1af7e <__ieee754_powf+0xb2>
   1b314:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b494 <__ieee754_powf+0x5c8>
   1b318:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b31c:	e5fa      	b.n	1af14 <__ieee754_powf+0x48>
   1b31e:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b444 <__ieee754_powf+0x578>
   1b322:	2500      	movs	r5, #0
   1b324:	eef0 3a64 	vmov.f32	s7, s9
   1b328:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b32c:	e6c1      	b.n	1b0b2 <__ieee754_powf+0x1e6>
   1b32e:	2200      	movs	r2, #0
   1b330:	e6a6      	b.n	1b080 <__ieee754_powf+0x1b4>
   1b332:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b498 <__ieee754_powf+0x5cc>
   1b336:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b33a:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b33e:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b346:	dd06      	ble.n	1b356 <__ieee754_powf+0x48a>
   1b348:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b494 <__ieee754_powf+0x5c8>
   1b34c:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b350:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b354:	e5de      	b.n	1af14 <__ieee754_powf+0x48>
   1b356:	15db      	asrs	r3, r3, #23
   1b358:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b35c:	3b7e      	subs	r3, #126	; 0x7e
   1b35e:	fa41 f303 	asr.w	r3, r1, r3
   1b362:	4413      	add	r3, r2
   1b364:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b368:	4c4c      	ldr	r4, [pc, #304]	; (1b49c <__ieee754_powf+0x5d0>)
   1b36a:	397f      	subs	r1, #127	; 0x7f
   1b36c:	410c      	asrs	r4, r1
   1b36e:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b372:	ea23 0304 	bic.w	r3, r3, r4
   1b376:	ee06 3a90 	vmov	s13, r3
   1b37a:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b37e:	f1c1 0117 	rsb	r1, r1, #23
   1b382:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b386:	4108      	asrs	r0, r1
   1b388:	2a00      	cmp	r2, #0
   1b38a:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b38e:	bfb8      	it	lt
   1b390:	4240      	neglt	r0, r0
   1b392:	05c1      	lsls	r1, r0, #23
   1b394:	ee16 2a90 	vmov	r2, s13
   1b398:	e757      	b.n	1b24a <__ieee754_powf+0x37e>
   1b39a:	4941      	ldr	r1, [pc, #260]	; (1b4a0 <__ieee754_powf+0x5d4>)
   1b39c:	428b      	cmp	r3, r1
   1b39e:	dc08      	bgt.n	1b3b2 <__ieee754_powf+0x4e6>
   1b3a0:	f47f af4d 	bne.w	1b23e <__ieee754_powf+0x372>
   1b3a4:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b3a8:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b3b0:	d8d1      	bhi.n	1b356 <__ieee754_powf+0x48a>
   1b3b2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b4a4 <__ieee754_powf+0x5d8>
   1b3b6:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b3ba:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b3be:	e5a9      	b.n	1af14 <__ieee754_powf+0x48>
   1b3c0:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b4a8 <__ieee754_powf+0x5dc>
   1b3c4:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b4ac <__ieee754_powf+0x5e0>
   1b3c8:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b3cc:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b3d0:	e66f      	b.n	1b0b2 <__ieee754_powf+0x1e6>
   1b3d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b3d6:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b3da:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b458 <__ieee754_powf+0x58c>
   1b3de:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b4b0 <__ieee754_powf+0x5e4>
   1b3e2:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b4b4 <__ieee754_powf+0x5e8>
   1b3e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b4b8 <__ieee754_powf+0x5ec>
   1b3ea:	eeb1 6a40 	vneg.f32	s12, s0
   1b3ee:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b3f2:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b3f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b3fa:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b3fe:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b402:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b406:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b40a:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b40e:	eef0 6a67 	vmov.f32	s13, s15
   1b412:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b416:	ee16 2a90 	vmov	r2, s13
   1b41a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b41e:	f022 020f 	bic.w	r2, r2, #15
   1b422:	ee07 2a10 	vmov	s14, r2
   1b426:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b42a:	ee06 2a90 	vmov	s13, r2
   1b42e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b432:	e6d7      	b.n	1b1e4 <__ieee754_powf+0x318>
   1b434:	f000 f8f2 	bl	1b61c <scalbnf>
   1b438:	e75e      	b.n	1b2f8 <__ieee754_powf+0x42c>
   1b43a:	bf00      	nop
   1b43c:	001cc471 	.word	0x001cc471
   1b440:	005db3d6 	.word	0x005db3d6
   1b444:	00000000 	.word	0x00000000
   1b448:	fffff000 	.word	0xfffff000
   1b44c:	3e53f142 	.word	0x3e53f142
   1b450:	3e6c3255 	.word	0x3e6c3255
   1b454:	3e8ba305 	.word	0x3e8ba305
   1b458:	3eaaaaab 	.word	0x3eaaaaab
   1b45c:	3edb6db7 	.word	0x3edb6db7
   1b460:	3f19999a 	.word	0x3f19999a
   1b464:	3f76384f 	.word	0x3f76384f
   1b468:	369dc3a0 	.word	0x369dc3a0
   1b46c:	3f763800 	.word	0x3f763800
   1b470:	35bfbe8c 	.word	0x35bfbe8c
   1b474:	3f317218 	.word	0x3f317218
   1b478:	3f317200 	.word	0x3f317200
   1b47c:	b5ddea0e 	.word	0xb5ddea0e
   1b480:	3331bb4c 	.word	0x3331bb4c
   1b484:	388ab355 	.word	0x388ab355
   1b488:	bb360b61 	.word	0xbb360b61
   1b48c:	3e2aaaab 	.word	0x3e2aaaab
   1b490:	3f800007 	.word	0x3f800007
   1b494:	7149f2ca 	.word	0x7149f2ca
   1b498:	3338aa3c 	.word	0x3338aa3c
   1b49c:	007fffff 	.word	0x007fffff
   1b4a0:	43160000 	.word	0x43160000
   1b4a4:	0da24260 	.word	0x0da24260
   1b4a8:	3f15c000 	.word	0x3f15c000
   1b4ac:	35d1cfdc 	.word	0x35d1cfdc
   1b4b0:	3fb8aa3b 	.word	0x3fb8aa3b
   1b4b4:	36eca570 	.word	0x36eca570
   1b4b8:	3fb8aa00 	.word	0x3fb8aa00

0001b4bc <__ieee754_sqrtf>:
   1b4bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b4c0:	4770      	bx	lr
   1b4c2:	bf00      	nop

0001b4c4 <matherr>:
   1b4c4:	2000      	movs	r0, #0
   1b4c6:	4770      	bx	lr

0001b4c8 <rint>:
   1b4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4ca:	ec53 2b10 	vmov	r2, r3, d0
   1b4ce:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b4d2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b4d6:	2813      	cmp	r0, #19
   1b4d8:	b083      	sub	sp, #12
   1b4da:	4619      	mov	r1, r3
   1b4dc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b4e0:	ee10 5a10 	vmov	r5, s0
   1b4e4:	dc2f      	bgt.n	1b546 <rint+0x7e>
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	db49      	blt.n	1b57e <rint+0xb6>
   1b4ea:	4e3e      	ldr	r6, [pc, #248]	; (1b5e4 <rint+0x11c>)
   1b4ec:	4106      	asrs	r6, r0
   1b4ee:	ea03 0706 	and.w	r7, r3, r6
   1b4f2:	4317      	orrs	r7, r2
   1b4f4:	d02c      	beq.n	1b550 <rint+0x88>
   1b4f6:	0876      	lsrs	r6, r6, #1
   1b4f8:	4033      	ands	r3, r6
   1b4fa:	431d      	orrs	r5, r3
   1b4fc:	d00c      	beq.n	1b518 <rint+0x50>
   1b4fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b502:	2813      	cmp	r0, #19
   1b504:	ea21 0606 	bic.w	r6, r1, r6
   1b508:	fa43 f100 	asr.w	r1, r3, r0
   1b50c:	ea41 0106 	orr.w	r1, r1, r6
   1b510:	bf0c      	ite	eq
   1b512:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b516:	2500      	movne	r5, #0
   1b518:	4833      	ldr	r0, [pc, #204]	; (1b5e8 <rint+0x120>)
   1b51a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b51e:	462a      	mov	r2, r5
   1b520:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b524:	4610      	mov	r0, r2
   1b526:	462b      	mov	r3, r5
   1b528:	4622      	mov	r2, r4
   1b52a:	f000 f8f1 	bl	1b710 <__adddf3>
   1b52e:	e9cd 0100 	strd	r0, r1, [sp]
   1b532:	4622      	mov	r2, r4
   1b534:	462b      	mov	r3, r5
   1b536:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b53a:	f000 f8e7 	bl	1b70c <__aeabi_dsub>
   1b53e:	ec41 0b10 	vmov	d0, r0, r1
   1b542:	b003      	add	sp, #12
   1b544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b546:	2833      	cmp	r0, #51	; 0x33
   1b548:	dd06      	ble.n	1b558 <rint+0x90>
   1b54a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b54e:	d040      	beq.n	1b5d2 <rint+0x10a>
   1b550:	ec43 2b10 	vmov	d0, r2, r3
   1b554:	b003      	add	sp, #12
   1b556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b558:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b55c:	f04f 30ff 	mov.w	r0, #4294967295
   1b560:	40f0      	lsrs	r0, r6
   1b562:	4202      	tst	r2, r0
   1b564:	d0f4      	beq.n	1b550 <rint+0x88>
   1b566:	0840      	lsrs	r0, r0, #1
   1b568:	4202      	tst	r2, r0
   1b56a:	d0d5      	beq.n	1b518 <rint+0x50>
   1b56c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b570:	ea25 0000 	bic.w	r0, r5, r0
   1b574:	fa43 f606 	asr.w	r6, r3, r6
   1b578:	ea46 0500 	orr.w	r5, r6, r0
   1b57c:	e7cc      	b.n	1b518 <rint+0x50>
   1b57e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b582:	4310      	orrs	r0, r2
   1b584:	d0e4      	beq.n	1b550 <rint+0x88>
   1b586:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b58a:	4310      	orrs	r0, r2
   1b58c:	4247      	negs	r7, r0
   1b58e:	4307      	orrs	r7, r0
   1b590:	4d15      	ldr	r5, [pc, #84]	; (1b5e8 <rint+0x120>)
   1b592:	0c5e      	lsrs	r6, r3, #17
   1b594:	0b3f      	lsrs	r7, r7, #12
   1b596:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b59a:	0476      	lsls	r6, r6, #17
   1b59c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b5a0:	ea43 0106 	orr.w	r1, r3, r6
   1b5a4:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b5a8:	ee10 0a10 	vmov	r0, s0
   1b5ac:	4632      	mov	r2, r6
   1b5ae:	463b      	mov	r3, r7
   1b5b0:	f000 f8ae 	bl	1b710 <__adddf3>
   1b5b4:	e9cd 0100 	strd	r0, r1, [sp]
   1b5b8:	463b      	mov	r3, r7
   1b5ba:	4632      	mov	r2, r6
   1b5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b5c0:	f000 f8a4 	bl	1b70c <__aeabi_dsub>
   1b5c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b5c8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b5cc:	ec41 0b10 	vmov	d0, r0, r1
   1b5d0:	e7c0      	b.n	1b554 <rint+0x8c>
   1b5d2:	ee10 0a10 	vmov	r0, s0
   1b5d6:	4619      	mov	r1, r3
   1b5d8:	f000 f89a 	bl	1b710 <__adddf3>
   1b5dc:	ec41 0b10 	vmov	d0, r0, r1
   1b5e0:	e7b8      	b.n	1b554 <rint+0x8c>
   1b5e2:	bf00      	nop
   1b5e4:	000fffff 	.word	0x000fffff
   1b5e8:	00024b38 	.word	0x00024b38

0001b5ec <fabsf>:
   1b5ec:	ee10 3a10 	vmov	r3, s0
   1b5f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b5f4:	ee00 3a10 	vmov	s0, r3
   1b5f8:	4770      	bx	lr
   1b5fa:	bf00      	nop

0001b5fc <finitef>:
   1b5fc:	ee10 3a10 	vmov	r3, s0
   1b600:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b604:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b608:	bfac      	ite	ge
   1b60a:	2000      	movge	r0, #0
   1b60c:	2001      	movlt	r0, #1
   1b60e:	4770      	bx	lr

0001b610 <nanf>:
   1b610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b618 <nanf+0x8>
   1b614:	4770      	bx	lr
   1b616:	bf00      	nop
   1b618:	7fc00000 	.word	0x7fc00000

0001b61c <scalbnf>:
   1b61c:	b508      	push	{r3, lr}
   1b61e:	ee10 3a10 	vmov	r3, s0
   1b622:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b626:	ed2d 8b02 	vpush	{d8}
   1b62a:	d011      	beq.n	1b650 <scalbnf+0x34>
   1b62c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b630:	d211      	bcs.n	1b656 <scalbnf+0x3a>
   1b632:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b636:	d313      	bcc.n	1b660 <scalbnf+0x44>
   1b638:	0dd2      	lsrs	r2, r2, #23
   1b63a:	4402      	add	r2, r0
   1b63c:	2afe      	cmp	r2, #254	; 0xfe
   1b63e:	dc2e      	bgt.n	1b69e <scalbnf+0x82>
   1b640:	2a00      	cmp	r2, #0
   1b642:	dd1a      	ble.n	1b67a <scalbnf+0x5e>
   1b644:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b648:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b64c:	ee00 3a10 	vmov	s0, r3
   1b650:	ecbd 8b02 	vpop	{d8}
   1b654:	bd08      	pop	{r3, pc}
   1b656:	ecbd 8b02 	vpop	{d8}
   1b65a:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b65e:	bd08      	pop	{r3, pc}
   1b660:	4b1d      	ldr	r3, [pc, #116]	; (1b6d8 <scalbnf+0xbc>)
   1b662:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b6dc <scalbnf+0xc0>
   1b666:	4298      	cmp	r0, r3
   1b668:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b66c:	db22      	blt.n	1b6b4 <scalbnf+0x98>
   1b66e:	ee10 3a10 	vmov	r3, s0
   1b672:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b676:	3a19      	subs	r2, #25
   1b678:	e7df      	b.n	1b63a <scalbnf+0x1e>
   1b67a:	f112 0f16 	cmn.w	r2, #22
   1b67e:	da1e      	bge.n	1b6be <scalbnf+0xa2>
   1b680:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b684:	4298      	cmp	r0, r3
   1b686:	dc0a      	bgt.n	1b69e <scalbnf+0x82>
   1b688:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b6e0 <scalbnf+0xc4>
   1b68c:	eef0 0a40 	vmov.f32	s1, s0
   1b690:	eeb0 0a48 	vmov.f32	s0, s16
   1b694:	f000 f82a 	bl	1b6ec <copysignf>
   1b698:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b69c:	e7d8      	b.n	1b650 <scalbnf+0x34>
   1b69e:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b6e4 <scalbnf+0xc8>
   1b6a2:	eef0 0a40 	vmov.f32	s1, s0
   1b6a6:	eeb0 0a48 	vmov.f32	s0, s16
   1b6aa:	f000 f81f 	bl	1b6ec <copysignf>
   1b6ae:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b6b2:	e7cd      	b.n	1b650 <scalbnf+0x34>
   1b6b4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b6e0 <scalbnf+0xc4>
   1b6b8:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b6bc:	e7c8      	b.n	1b650 <scalbnf+0x34>
   1b6be:	3219      	adds	r2, #25
   1b6c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b6c4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b6c8:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b6e8 <scalbnf+0xcc>
   1b6cc:	ee00 3a10 	vmov	s0, r3
   1b6d0:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b6d4:	e7bc      	b.n	1b650 <scalbnf+0x34>
   1b6d6:	bf00      	nop
   1b6d8:	ffff3cb0 	.word	0xffff3cb0
   1b6dc:	4c000000 	.word	0x4c000000
   1b6e0:	0da24260 	.word	0x0da24260
   1b6e4:	7149f2ca 	.word	0x7149f2ca
   1b6e8:	33000000 	.word	0x33000000

0001b6ec <copysignf>:
   1b6ec:	ee10 3a10 	vmov	r3, s0
   1b6f0:	ee10 2a90 	vmov	r2, s1
   1b6f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b6f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b6fc:	4313      	orrs	r3, r2
   1b6fe:	ee00 3a10 	vmov	s0, r3
   1b702:	4770      	bx	lr

0001b704 <__aeabi_drsub>:
   1b704:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b708:	e002      	b.n	1b710 <__adddf3>
   1b70a:	bf00      	nop

0001b70c <__aeabi_dsub>:
   1b70c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b710 <__adddf3>:
   1b710:	b530      	push	{r4, r5, lr}
   1b712:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b716:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b71a:	ea94 0f05 	teq	r4, r5
   1b71e:	bf08      	it	eq
   1b720:	ea90 0f02 	teqeq	r0, r2
   1b724:	bf1f      	itttt	ne
   1b726:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b72a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b72e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b732:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b736:	f000 80e2 	beq.w	1b8fe <__adddf3+0x1ee>
   1b73a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b73e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b742:	bfb8      	it	lt
   1b744:	426d      	neglt	r5, r5
   1b746:	dd0c      	ble.n	1b762 <__adddf3+0x52>
   1b748:	442c      	add	r4, r5
   1b74a:	ea80 0202 	eor.w	r2, r0, r2
   1b74e:	ea81 0303 	eor.w	r3, r1, r3
   1b752:	ea82 0000 	eor.w	r0, r2, r0
   1b756:	ea83 0101 	eor.w	r1, r3, r1
   1b75a:	ea80 0202 	eor.w	r2, r0, r2
   1b75e:	ea81 0303 	eor.w	r3, r1, r3
   1b762:	2d36      	cmp	r5, #54	; 0x36
   1b764:	bf88      	it	hi
   1b766:	bd30      	pophi	{r4, r5, pc}
   1b768:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b76c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b770:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b774:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b778:	d002      	beq.n	1b780 <__adddf3+0x70>
   1b77a:	4240      	negs	r0, r0
   1b77c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b780:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b784:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b788:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b78c:	d002      	beq.n	1b794 <__adddf3+0x84>
   1b78e:	4252      	negs	r2, r2
   1b790:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b794:	ea94 0f05 	teq	r4, r5
   1b798:	f000 80a7 	beq.w	1b8ea <__adddf3+0x1da>
   1b79c:	f1a4 0401 	sub.w	r4, r4, #1
   1b7a0:	f1d5 0e20 	rsbs	lr, r5, #32
   1b7a4:	db0d      	blt.n	1b7c2 <__adddf3+0xb2>
   1b7a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b7aa:	fa22 f205 	lsr.w	r2, r2, r5
   1b7ae:	1880      	adds	r0, r0, r2
   1b7b0:	f141 0100 	adc.w	r1, r1, #0
   1b7b4:	fa03 f20e 	lsl.w	r2, r3, lr
   1b7b8:	1880      	adds	r0, r0, r2
   1b7ba:	fa43 f305 	asr.w	r3, r3, r5
   1b7be:	4159      	adcs	r1, r3
   1b7c0:	e00e      	b.n	1b7e0 <__adddf3+0xd0>
   1b7c2:	f1a5 0520 	sub.w	r5, r5, #32
   1b7c6:	f10e 0e20 	add.w	lr, lr, #32
   1b7ca:	2a01      	cmp	r2, #1
   1b7cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b7d0:	bf28      	it	cs
   1b7d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b7d6:	fa43 f305 	asr.w	r3, r3, r5
   1b7da:	18c0      	adds	r0, r0, r3
   1b7dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b7e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b7e4:	d507      	bpl.n	1b7f6 <__adddf3+0xe6>
   1b7e6:	f04f 0e00 	mov.w	lr, #0
   1b7ea:	f1dc 0c00 	rsbs	ip, ip, #0
   1b7ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b7f2:	eb6e 0101 	sbc.w	r1, lr, r1
   1b7f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b7fa:	d31b      	bcc.n	1b834 <__adddf3+0x124>
   1b7fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b800:	d30c      	bcc.n	1b81c <__adddf3+0x10c>
   1b802:	0849      	lsrs	r1, r1, #1
   1b804:	ea5f 0030 	movs.w	r0, r0, rrx
   1b808:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b80c:	f104 0401 	add.w	r4, r4, #1
   1b810:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b814:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b818:	f080 809a 	bcs.w	1b950 <__adddf3+0x240>
   1b81c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b820:	bf08      	it	eq
   1b822:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b826:	f150 0000 	adcs.w	r0, r0, #0
   1b82a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b82e:	ea41 0105 	orr.w	r1, r1, r5
   1b832:	bd30      	pop	{r4, r5, pc}
   1b834:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b838:	4140      	adcs	r0, r0
   1b83a:	eb41 0101 	adc.w	r1, r1, r1
   1b83e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b842:	f1a4 0401 	sub.w	r4, r4, #1
   1b846:	d1e9      	bne.n	1b81c <__adddf3+0x10c>
   1b848:	f091 0f00 	teq	r1, #0
   1b84c:	bf04      	itt	eq
   1b84e:	4601      	moveq	r1, r0
   1b850:	2000      	moveq	r0, #0
   1b852:	fab1 f381 	clz	r3, r1
   1b856:	bf08      	it	eq
   1b858:	3320      	addeq	r3, #32
   1b85a:	f1a3 030b 	sub.w	r3, r3, #11
   1b85e:	f1b3 0220 	subs.w	r2, r3, #32
   1b862:	da0c      	bge.n	1b87e <__adddf3+0x16e>
   1b864:	320c      	adds	r2, #12
   1b866:	dd08      	ble.n	1b87a <__adddf3+0x16a>
   1b868:	f102 0c14 	add.w	ip, r2, #20
   1b86c:	f1c2 020c 	rsb	r2, r2, #12
   1b870:	fa01 f00c 	lsl.w	r0, r1, ip
   1b874:	fa21 f102 	lsr.w	r1, r1, r2
   1b878:	e00c      	b.n	1b894 <__adddf3+0x184>
   1b87a:	f102 0214 	add.w	r2, r2, #20
   1b87e:	bfd8      	it	le
   1b880:	f1c2 0c20 	rsble	ip, r2, #32
   1b884:	fa01 f102 	lsl.w	r1, r1, r2
   1b888:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b88c:	bfdc      	itt	le
   1b88e:	ea41 010c 	orrle.w	r1, r1, ip
   1b892:	4090      	lslle	r0, r2
   1b894:	1ae4      	subs	r4, r4, r3
   1b896:	bfa2      	ittt	ge
   1b898:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b89c:	4329      	orrge	r1, r5
   1b89e:	bd30      	popge	{r4, r5, pc}
   1b8a0:	ea6f 0404 	mvn.w	r4, r4
   1b8a4:	3c1f      	subs	r4, #31
   1b8a6:	da1c      	bge.n	1b8e2 <__adddf3+0x1d2>
   1b8a8:	340c      	adds	r4, #12
   1b8aa:	dc0e      	bgt.n	1b8ca <__adddf3+0x1ba>
   1b8ac:	f104 0414 	add.w	r4, r4, #20
   1b8b0:	f1c4 0220 	rsb	r2, r4, #32
   1b8b4:	fa20 f004 	lsr.w	r0, r0, r4
   1b8b8:	fa01 f302 	lsl.w	r3, r1, r2
   1b8bc:	ea40 0003 	orr.w	r0, r0, r3
   1b8c0:	fa21 f304 	lsr.w	r3, r1, r4
   1b8c4:	ea45 0103 	orr.w	r1, r5, r3
   1b8c8:	bd30      	pop	{r4, r5, pc}
   1b8ca:	f1c4 040c 	rsb	r4, r4, #12
   1b8ce:	f1c4 0220 	rsb	r2, r4, #32
   1b8d2:	fa20 f002 	lsr.w	r0, r0, r2
   1b8d6:	fa01 f304 	lsl.w	r3, r1, r4
   1b8da:	ea40 0003 	orr.w	r0, r0, r3
   1b8de:	4629      	mov	r1, r5
   1b8e0:	bd30      	pop	{r4, r5, pc}
   1b8e2:	fa21 f004 	lsr.w	r0, r1, r4
   1b8e6:	4629      	mov	r1, r5
   1b8e8:	bd30      	pop	{r4, r5, pc}
   1b8ea:	f094 0f00 	teq	r4, #0
   1b8ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b8f2:	bf06      	itte	eq
   1b8f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b8f8:	3401      	addeq	r4, #1
   1b8fa:	3d01      	subne	r5, #1
   1b8fc:	e74e      	b.n	1b79c <__adddf3+0x8c>
   1b8fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b902:	bf18      	it	ne
   1b904:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b908:	d029      	beq.n	1b95e <__adddf3+0x24e>
   1b90a:	ea94 0f05 	teq	r4, r5
   1b90e:	bf08      	it	eq
   1b910:	ea90 0f02 	teqeq	r0, r2
   1b914:	d005      	beq.n	1b922 <__adddf3+0x212>
   1b916:	ea54 0c00 	orrs.w	ip, r4, r0
   1b91a:	bf04      	itt	eq
   1b91c:	4619      	moveq	r1, r3
   1b91e:	4610      	moveq	r0, r2
   1b920:	bd30      	pop	{r4, r5, pc}
   1b922:	ea91 0f03 	teq	r1, r3
   1b926:	bf1e      	ittt	ne
   1b928:	2100      	movne	r1, #0
   1b92a:	2000      	movne	r0, #0
   1b92c:	bd30      	popne	{r4, r5, pc}
   1b92e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b932:	d105      	bne.n	1b940 <__adddf3+0x230>
   1b934:	0040      	lsls	r0, r0, #1
   1b936:	4149      	adcs	r1, r1
   1b938:	bf28      	it	cs
   1b93a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b93e:	bd30      	pop	{r4, r5, pc}
   1b940:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b944:	bf3c      	itt	cc
   1b946:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b94a:	bd30      	popcc	{r4, r5, pc}
   1b94c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b950:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b954:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b958:	f04f 0000 	mov.w	r0, #0
   1b95c:	bd30      	pop	{r4, r5, pc}
   1b95e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b962:	bf1a      	itte	ne
   1b964:	4619      	movne	r1, r3
   1b966:	4610      	movne	r0, r2
   1b968:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b96c:	bf1c      	itt	ne
   1b96e:	460b      	movne	r3, r1
   1b970:	4602      	movne	r2, r0
   1b972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b976:	bf06      	itte	eq
   1b978:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b97c:	ea91 0f03 	teqeq	r1, r3
   1b980:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b984:	bd30      	pop	{r4, r5, pc}
   1b986:	bf00      	nop

0001b988 <__aeabi_ui2d>:
   1b988:	f090 0f00 	teq	r0, #0
   1b98c:	bf04      	itt	eq
   1b98e:	2100      	moveq	r1, #0
   1b990:	4770      	bxeq	lr
   1b992:	b530      	push	{r4, r5, lr}
   1b994:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b998:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b99c:	f04f 0500 	mov.w	r5, #0
   1b9a0:	f04f 0100 	mov.w	r1, #0
   1b9a4:	e750      	b.n	1b848 <__adddf3+0x138>
   1b9a6:	bf00      	nop

0001b9a8 <__aeabi_i2d>:
   1b9a8:	f090 0f00 	teq	r0, #0
   1b9ac:	bf04      	itt	eq
   1b9ae:	2100      	moveq	r1, #0
   1b9b0:	4770      	bxeq	lr
   1b9b2:	b530      	push	{r4, r5, lr}
   1b9b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b9b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b9bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b9c0:	bf48      	it	mi
   1b9c2:	4240      	negmi	r0, r0
   1b9c4:	f04f 0100 	mov.w	r1, #0
   1b9c8:	e73e      	b.n	1b848 <__adddf3+0x138>
   1b9ca:	bf00      	nop

0001b9cc <__aeabi_f2d>:
   1b9cc:	0042      	lsls	r2, r0, #1
   1b9ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b9d2:	ea4f 0131 	mov.w	r1, r1, rrx
   1b9d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b9da:	bf1f      	itttt	ne
   1b9dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b9e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b9e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b9e8:	4770      	bxne	lr
   1b9ea:	f092 0f00 	teq	r2, #0
   1b9ee:	bf14      	ite	ne
   1b9f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b9f4:	4770      	bxeq	lr
   1b9f6:	b530      	push	{r4, r5, lr}
   1b9f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b9fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1ba00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ba04:	e720      	b.n	1b848 <__adddf3+0x138>
   1ba06:	bf00      	nop

0001ba08 <__aeabi_ul2d>:
   1ba08:	ea50 0201 	orrs.w	r2, r0, r1
   1ba0c:	bf08      	it	eq
   1ba0e:	4770      	bxeq	lr
   1ba10:	b530      	push	{r4, r5, lr}
   1ba12:	f04f 0500 	mov.w	r5, #0
   1ba16:	e00a      	b.n	1ba2e <__aeabi_l2d+0x16>

0001ba18 <__aeabi_l2d>:
   1ba18:	ea50 0201 	orrs.w	r2, r0, r1
   1ba1c:	bf08      	it	eq
   1ba1e:	4770      	bxeq	lr
   1ba20:	b530      	push	{r4, r5, lr}
   1ba22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1ba26:	d502      	bpl.n	1ba2e <__aeabi_l2d+0x16>
   1ba28:	4240      	negs	r0, r0
   1ba2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ba2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1ba32:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1ba36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1ba3a:	f43f aedc 	beq.w	1b7f6 <__adddf3+0xe6>
   1ba3e:	f04f 0203 	mov.w	r2, #3
   1ba42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1ba46:	bf18      	it	ne
   1ba48:	3203      	addne	r2, #3
   1ba4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1ba4e:	bf18      	it	ne
   1ba50:	3203      	addne	r2, #3
   1ba52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1ba56:	f1c2 0320 	rsb	r3, r2, #32
   1ba5a:	fa00 fc03 	lsl.w	ip, r0, r3
   1ba5e:	fa20 f002 	lsr.w	r0, r0, r2
   1ba62:	fa01 fe03 	lsl.w	lr, r1, r3
   1ba66:	ea40 000e 	orr.w	r0, r0, lr
   1ba6a:	fa21 f102 	lsr.w	r1, r1, r2
   1ba6e:	4414      	add	r4, r2
   1ba70:	e6c1      	b.n	1b7f6 <__adddf3+0xe6>
   1ba72:	bf00      	nop

0001ba74 <__aeabi_dmul>:
   1ba74:	b570      	push	{r4, r5, r6, lr}
   1ba76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ba7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ba7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ba82:	bf1d      	ittte	ne
   1ba84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ba88:	ea94 0f0c 	teqne	r4, ip
   1ba8c:	ea95 0f0c 	teqne	r5, ip
   1ba90:	f000 f8de 	bleq	1bc50 <__aeabi_dmul+0x1dc>
   1ba94:	442c      	add	r4, r5
   1ba96:	ea81 0603 	eor.w	r6, r1, r3
   1ba9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1ba9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1baa2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1baa6:	bf18      	it	ne
   1baa8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1baac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bab4:	d038      	beq.n	1bb28 <__aeabi_dmul+0xb4>
   1bab6:	fba0 ce02 	umull	ip, lr, r0, r2
   1baba:	f04f 0500 	mov.w	r5, #0
   1babe:	fbe1 e502 	umlal	lr, r5, r1, r2
   1bac2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1bac6:	fbe0 e503 	umlal	lr, r5, r0, r3
   1baca:	f04f 0600 	mov.w	r6, #0
   1bace:	fbe1 5603 	umlal	r5, r6, r1, r3
   1bad2:	f09c 0f00 	teq	ip, #0
   1bad6:	bf18      	it	ne
   1bad8:	f04e 0e01 	orrne.w	lr, lr, #1
   1badc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1bae0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1bae4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1bae8:	d204      	bcs.n	1baf4 <__aeabi_dmul+0x80>
   1baea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1baee:	416d      	adcs	r5, r5
   1baf0:	eb46 0606 	adc.w	r6, r6, r6
   1baf4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1baf8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1bafc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1bb00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1bb04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1bb08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bb0c:	bf88      	it	hi
   1bb0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bb12:	d81e      	bhi.n	1bb52 <__aeabi_dmul+0xde>
   1bb14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1bb18:	bf08      	it	eq
   1bb1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1bb1e:	f150 0000 	adcs.w	r0, r0, #0
   1bb22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bb26:	bd70      	pop	{r4, r5, r6, pc}
   1bb28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1bb2c:	ea46 0101 	orr.w	r1, r6, r1
   1bb30:	ea40 0002 	orr.w	r0, r0, r2
   1bb34:	ea81 0103 	eor.w	r1, r1, r3
   1bb38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1bb3c:	bfc2      	ittt	gt
   1bb3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bb42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bb46:	bd70      	popgt	{r4, r5, r6, pc}
   1bb48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bb4c:	f04f 0e00 	mov.w	lr, #0
   1bb50:	3c01      	subs	r4, #1
   1bb52:	f300 80ab 	bgt.w	1bcac <__aeabi_dmul+0x238>
   1bb56:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1bb5a:	bfde      	ittt	le
   1bb5c:	2000      	movle	r0, #0
   1bb5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1bb62:	bd70      	pople	{r4, r5, r6, pc}
   1bb64:	f1c4 0400 	rsb	r4, r4, #0
   1bb68:	3c20      	subs	r4, #32
   1bb6a:	da35      	bge.n	1bbd8 <__aeabi_dmul+0x164>
   1bb6c:	340c      	adds	r4, #12
   1bb6e:	dc1b      	bgt.n	1bba8 <__aeabi_dmul+0x134>
   1bb70:	f104 0414 	add.w	r4, r4, #20
   1bb74:	f1c4 0520 	rsb	r5, r4, #32
   1bb78:	fa00 f305 	lsl.w	r3, r0, r5
   1bb7c:	fa20 f004 	lsr.w	r0, r0, r4
   1bb80:	fa01 f205 	lsl.w	r2, r1, r5
   1bb84:	ea40 0002 	orr.w	r0, r0, r2
   1bb88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1bb8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bb90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bb94:	fa21 f604 	lsr.w	r6, r1, r4
   1bb98:	eb42 0106 	adc.w	r1, r2, r6
   1bb9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bba0:	bf08      	it	eq
   1bba2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bba6:	bd70      	pop	{r4, r5, r6, pc}
   1bba8:	f1c4 040c 	rsb	r4, r4, #12
   1bbac:	f1c4 0520 	rsb	r5, r4, #32
   1bbb0:	fa00 f304 	lsl.w	r3, r0, r4
   1bbb4:	fa20 f005 	lsr.w	r0, r0, r5
   1bbb8:	fa01 f204 	lsl.w	r2, r1, r4
   1bbbc:	ea40 0002 	orr.w	r0, r0, r2
   1bbc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bbc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bbc8:	f141 0100 	adc.w	r1, r1, #0
   1bbcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bbd0:	bf08      	it	eq
   1bbd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bbd6:	bd70      	pop	{r4, r5, r6, pc}
   1bbd8:	f1c4 0520 	rsb	r5, r4, #32
   1bbdc:	fa00 f205 	lsl.w	r2, r0, r5
   1bbe0:	ea4e 0e02 	orr.w	lr, lr, r2
   1bbe4:	fa20 f304 	lsr.w	r3, r0, r4
   1bbe8:	fa01 f205 	lsl.w	r2, r1, r5
   1bbec:	ea43 0302 	orr.w	r3, r3, r2
   1bbf0:	fa21 f004 	lsr.w	r0, r1, r4
   1bbf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bbf8:	fa21 f204 	lsr.w	r2, r1, r4
   1bbfc:	ea20 0002 	bic.w	r0, r0, r2
   1bc00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1bc04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bc08:	bf08      	it	eq
   1bc0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bc0e:	bd70      	pop	{r4, r5, r6, pc}
   1bc10:	f094 0f00 	teq	r4, #0
   1bc14:	d10f      	bne.n	1bc36 <__aeabi_dmul+0x1c2>
   1bc16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1bc1a:	0040      	lsls	r0, r0, #1
   1bc1c:	eb41 0101 	adc.w	r1, r1, r1
   1bc20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc24:	bf08      	it	eq
   1bc26:	3c01      	subeq	r4, #1
   1bc28:	d0f7      	beq.n	1bc1a <__aeabi_dmul+0x1a6>
   1bc2a:	ea41 0106 	orr.w	r1, r1, r6
   1bc2e:	f095 0f00 	teq	r5, #0
   1bc32:	bf18      	it	ne
   1bc34:	4770      	bxne	lr
   1bc36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1bc3a:	0052      	lsls	r2, r2, #1
   1bc3c:	eb43 0303 	adc.w	r3, r3, r3
   1bc40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1bc44:	bf08      	it	eq
   1bc46:	3d01      	subeq	r5, #1
   1bc48:	d0f7      	beq.n	1bc3a <__aeabi_dmul+0x1c6>
   1bc4a:	ea43 0306 	orr.w	r3, r3, r6
   1bc4e:	4770      	bx	lr
   1bc50:	ea94 0f0c 	teq	r4, ip
   1bc54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bc58:	bf18      	it	ne
   1bc5a:	ea95 0f0c 	teqne	r5, ip
   1bc5e:	d00c      	beq.n	1bc7a <__aeabi_dmul+0x206>
   1bc60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bc64:	bf18      	it	ne
   1bc66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bc6a:	d1d1      	bne.n	1bc10 <__aeabi_dmul+0x19c>
   1bc6c:	ea81 0103 	eor.w	r1, r1, r3
   1bc70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bc74:	f04f 0000 	mov.w	r0, #0
   1bc78:	bd70      	pop	{r4, r5, r6, pc}
   1bc7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bc7e:	bf06      	itte	eq
   1bc80:	4610      	moveq	r0, r2
   1bc82:	4619      	moveq	r1, r3
   1bc84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bc88:	d019      	beq.n	1bcbe <__aeabi_dmul+0x24a>
   1bc8a:	ea94 0f0c 	teq	r4, ip
   1bc8e:	d102      	bne.n	1bc96 <__aeabi_dmul+0x222>
   1bc90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bc94:	d113      	bne.n	1bcbe <__aeabi_dmul+0x24a>
   1bc96:	ea95 0f0c 	teq	r5, ip
   1bc9a:	d105      	bne.n	1bca8 <__aeabi_dmul+0x234>
   1bc9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1bca0:	bf1c      	itt	ne
   1bca2:	4610      	movne	r0, r2
   1bca4:	4619      	movne	r1, r3
   1bca6:	d10a      	bne.n	1bcbe <__aeabi_dmul+0x24a>
   1bca8:	ea81 0103 	eor.w	r1, r1, r3
   1bcac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bcb0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bcb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bcb8:	f04f 0000 	mov.w	r0, #0
   1bcbc:	bd70      	pop	{r4, r5, r6, pc}
   1bcbe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bcc2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1bcc6:	bd70      	pop	{r4, r5, r6, pc}

0001bcc8 <__aeabi_ddiv>:
   1bcc8:	b570      	push	{r4, r5, r6, lr}
   1bcca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bcce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bcd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bcd6:	bf1d      	ittte	ne
   1bcd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bcdc:	ea94 0f0c 	teqne	r4, ip
   1bce0:	ea95 0f0c 	teqne	r5, ip
   1bce4:	f000 f8a7 	bleq	1be36 <__aeabi_ddiv+0x16e>
   1bce8:	eba4 0405 	sub.w	r4, r4, r5
   1bcec:	ea81 0e03 	eor.w	lr, r1, r3
   1bcf0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bcf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bcf8:	f000 8088 	beq.w	1be0c <__aeabi_ddiv+0x144>
   1bcfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bd00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1bd04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1bd08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1bd0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1bd10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1bd14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1bd18:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1bd1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1bd20:	429d      	cmp	r5, r3
   1bd22:	bf08      	it	eq
   1bd24:	4296      	cmpeq	r6, r2
   1bd26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1bd2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1bd2e:	d202      	bcs.n	1bd36 <__aeabi_ddiv+0x6e>
   1bd30:	085b      	lsrs	r3, r3, #1
   1bd32:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd36:	1ab6      	subs	r6, r6, r2
   1bd38:	eb65 0503 	sbc.w	r5, r5, r3
   1bd3c:	085b      	lsrs	r3, r3, #1
   1bd3e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1bd46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1bd4a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bd4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bd52:	bf22      	ittt	cs
   1bd54:	1ab6      	subcs	r6, r6, r2
   1bd56:	4675      	movcs	r5, lr
   1bd58:	ea40 000c 	orrcs.w	r0, r0, ip
   1bd5c:	085b      	lsrs	r3, r3, #1
   1bd5e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd62:	ebb6 0e02 	subs.w	lr, r6, r2
   1bd66:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bd6a:	bf22      	ittt	cs
   1bd6c:	1ab6      	subcs	r6, r6, r2
   1bd6e:	4675      	movcs	r5, lr
   1bd70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bd74:	085b      	lsrs	r3, r3, #1
   1bd76:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd7a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bd7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bd82:	bf22      	ittt	cs
   1bd84:	1ab6      	subcs	r6, r6, r2
   1bd86:	4675      	movcs	r5, lr
   1bd88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bd8c:	085b      	lsrs	r3, r3, #1
   1bd8e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd92:	ebb6 0e02 	subs.w	lr, r6, r2
   1bd96:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bd9a:	bf22      	ittt	cs
   1bd9c:	1ab6      	subcs	r6, r6, r2
   1bd9e:	4675      	movcs	r5, lr
   1bda0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bda4:	ea55 0e06 	orrs.w	lr, r5, r6
   1bda8:	d018      	beq.n	1bddc <__aeabi_ddiv+0x114>
   1bdaa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bdae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bdb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bdb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1bdba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bdbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bdc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bdc6:	d1c0      	bne.n	1bd4a <__aeabi_ddiv+0x82>
   1bdc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bdcc:	d10b      	bne.n	1bde6 <__aeabi_ddiv+0x11e>
   1bdce:	ea41 0100 	orr.w	r1, r1, r0
   1bdd2:	f04f 0000 	mov.w	r0, #0
   1bdd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1bdda:	e7b6      	b.n	1bd4a <__aeabi_ddiv+0x82>
   1bddc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bde0:	bf04      	itt	eq
   1bde2:	4301      	orreq	r1, r0
   1bde4:	2000      	moveq	r0, #0
   1bde6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bdea:	bf88      	it	hi
   1bdec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bdf0:	f63f aeaf 	bhi.w	1bb52 <__aeabi_dmul+0xde>
   1bdf4:	ebb5 0c03 	subs.w	ip, r5, r3
   1bdf8:	bf04      	itt	eq
   1bdfa:	ebb6 0c02 	subseq.w	ip, r6, r2
   1bdfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1be02:	f150 0000 	adcs.w	r0, r0, #0
   1be06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1be0a:	bd70      	pop	{r4, r5, r6, pc}
   1be0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1be10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1be14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1be18:	bfc2      	ittt	gt
   1be1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1be1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1be22:	bd70      	popgt	{r4, r5, r6, pc}
   1be24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1be28:	f04f 0e00 	mov.w	lr, #0
   1be2c:	3c01      	subs	r4, #1
   1be2e:	e690      	b.n	1bb52 <__aeabi_dmul+0xde>
   1be30:	ea45 0e06 	orr.w	lr, r5, r6
   1be34:	e68d      	b.n	1bb52 <__aeabi_dmul+0xde>
   1be36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1be3a:	ea94 0f0c 	teq	r4, ip
   1be3e:	bf08      	it	eq
   1be40:	ea95 0f0c 	teqeq	r5, ip
   1be44:	f43f af3b 	beq.w	1bcbe <__aeabi_dmul+0x24a>
   1be48:	ea94 0f0c 	teq	r4, ip
   1be4c:	d10a      	bne.n	1be64 <__aeabi_ddiv+0x19c>
   1be4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1be52:	f47f af34 	bne.w	1bcbe <__aeabi_dmul+0x24a>
   1be56:	ea95 0f0c 	teq	r5, ip
   1be5a:	f47f af25 	bne.w	1bca8 <__aeabi_dmul+0x234>
   1be5e:	4610      	mov	r0, r2
   1be60:	4619      	mov	r1, r3
   1be62:	e72c      	b.n	1bcbe <__aeabi_dmul+0x24a>
   1be64:	ea95 0f0c 	teq	r5, ip
   1be68:	d106      	bne.n	1be78 <__aeabi_ddiv+0x1b0>
   1be6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1be6e:	f43f aefd 	beq.w	1bc6c <__aeabi_dmul+0x1f8>
   1be72:	4610      	mov	r0, r2
   1be74:	4619      	mov	r1, r3
   1be76:	e722      	b.n	1bcbe <__aeabi_dmul+0x24a>
   1be78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1be7c:	bf18      	it	ne
   1be7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1be82:	f47f aec5 	bne.w	1bc10 <__aeabi_dmul+0x19c>
   1be86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1be8a:	f47f af0d 	bne.w	1bca8 <__aeabi_dmul+0x234>
   1be8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1be92:	f47f aeeb 	bne.w	1bc6c <__aeabi_dmul+0x1f8>
   1be96:	e712      	b.n	1bcbe <__aeabi_dmul+0x24a>

0001be98 <__gedf2>:
   1be98:	f04f 3cff 	mov.w	ip, #4294967295
   1be9c:	e006      	b.n	1beac <__cmpdf2+0x4>
   1be9e:	bf00      	nop

0001bea0 <__ledf2>:
   1bea0:	f04f 0c01 	mov.w	ip, #1
   1bea4:	e002      	b.n	1beac <__cmpdf2+0x4>
   1bea6:	bf00      	nop

0001bea8 <__cmpdf2>:
   1bea8:	f04f 0c01 	mov.w	ip, #1
   1beac:	f84d cd04 	str.w	ip, [sp, #-4]!
   1beb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1beb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1beb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bebc:	bf18      	it	ne
   1bebe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1bec2:	d01b      	beq.n	1befc <__cmpdf2+0x54>
   1bec4:	b001      	add	sp, #4
   1bec6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1beca:	bf0c      	ite	eq
   1becc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1bed0:	ea91 0f03 	teqne	r1, r3
   1bed4:	bf02      	ittt	eq
   1bed6:	ea90 0f02 	teqeq	r0, r2
   1beda:	2000      	moveq	r0, #0
   1bedc:	4770      	bxeq	lr
   1bede:	f110 0f00 	cmn.w	r0, #0
   1bee2:	ea91 0f03 	teq	r1, r3
   1bee6:	bf58      	it	pl
   1bee8:	4299      	cmppl	r1, r3
   1beea:	bf08      	it	eq
   1beec:	4290      	cmpeq	r0, r2
   1beee:	bf2c      	ite	cs
   1bef0:	17d8      	asrcs	r0, r3, #31
   1bef2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1bef6:	f040 0001 	orr.w	r0, r0, #1
   1befa:	4770      	bx	lr
   1befc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bf00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bf04:	d102      	bne.n	1bf0c <__cmpdf2+0x64>
   1bf06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1bf0a:	d107      	bne.n	1bf1c <__cmpdf2+0x74>
   1bf0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bf10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bf14:	d1d6      	bne.n	1bec4 <__cmpdf2+0x1c>
   1bf16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1bf1a:	d0d3      	beq.n	1bec4 <__cmpdf2+0x1c>
   1bf1c:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bf20:	4770      	bx	lr
   1bf22:	bf00      	nop

0001bf24 <__aeabi_cdrcmple>:
   1bf24:	4684      	mov	ip, r0
   1bf26:	4610      	mov	r0, r2
   1bf28:	4662      	mov	r2, ip
   1bf2a:	468c      	mov	ip, r1
   1bf2c:	4619      	mov	r1, r3
   1bf2e:	4663      	mov	r3, ip
   1bf30:	e000      	b.n	1bf34 <__aeabi_cdcmpeq>
   1bf32:	bf00      	nop

0001bf34 <__aeabi_cdcmpeq>:
   1bf34:	b501      	push	{r0, lr}
   1bf36:	f7ff ffb7 	bl	1bea8 <__cmpdf2>
   1bf3a:	2800      	cmp	r0, #0
   1bf3c:	bf48      	it	mi
   1bf3e:	f110 0f00 	cmnmi.w	r0, #0
   1bf42:	bd01      	pop	{r0, pc}

0001bf44 <__aeabi_dcmpeq>:
   1bf44:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf48:	f7ff fff4 	bl	1bf34 <__aeabi_cdcmpeq>
   1bf4c:	bf0c      	ite	eq
   1bf4e:	2001      	moveq	r0, #1
   1bf50:	2000      	movne	r0, #0
   1bf52:	f85d fb08 	ldr.w	pc, [sp], #8
   1bf56:	bf00      	nop

0001bf58 <__aeabi_dcmplt>:
   1bf58:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf5c:	f7ff ffea 	bl	1bf34 <__aeabi_cdcmpeq>
   1bf60:	bf34      	ite	cc
   1bf62:	2001      	movcc	r0, #1
   1bf64:	2000      	movcs	r0, #0
   1bf66:	f85d fb08 	ldr.w	pc, [sp], #8
   1bf6a:	bf00      	nop

0001bf6c <__aeabi_dcmple>:
   1bf6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf70:	f7ff ffe0 	bl	1bf34 <__aeabi_cdcmpeq>
   1bf74:	bf94      	ite	ls
   1bf76:	2001      	movls	r0, #1
   1bf78:	2000      	movhi	r0, #0
   1bf7a:	f85d fb08 	ldr.w	pc, [sp], #8
   1bf7e:	bf00      	nop

0001bf80 <__aeabi_dcmpge>:
   1bf80:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf84:	f7ff ffce 	bl	1bf24 <__aeabi_cdrcmple>
   1bf88:	bf94      	ite	ls
   1bf8a:	2001      	movls	r0, #1
   1bf8c:	2000      	movhi	r0, #0
   1bf8e:	f85d fb08 	ldr.w	pc, [sp], #8
   1bf92:	bf00      	nop

0001bf94 <__aeabi_dcmpgt>:
   1bf94:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf98:	f7ff ffc4 	bl	1bf24 <__aeabi_cdrcmple>
   1bf9c:	bf34      	ite	cc
   1bf9e:	2001      	movcc	r0, #1
   1bfa0:	2000      	movcs	r0, #0
   1bfa2:	f85d fb08 	ldr.w	pc, [sp], #8
   1bfa6:	bf00      	nop

0001bfa8 <__aeabi_d2iz>:
   1bfa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1bfac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1bfb0:	d215      	bcs.n	1bfde <__aeabi_d2iz+0x36>
   1bfb2:	d511      	bpl.n	1bfd8 <__aeabi_d2iz+0x30>
   1bfb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1bfb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1bfbc:	d912      	bls.n	1bfe4 <__aeabi_d2iz+0x3c>
   1bfbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1bfc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1bfc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1bfca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bfce:	fa23 f002 	lsr.w	r0, r3, r2
   1bfd2:	bf18      	it	ne
   1bfd4:	4240      	negne	r0, r0
   1bfd6:	4770      	bx	lr
   1bfd8:	f04f 0000 	mov.w	r0, #0
   1bfdc:	4770      	bx	lr
   1bfde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1bfe2:	d105      	bne.n	1bff0 <__aeabi_d2iz+0x48>
   1bfe4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1bfe8:	bf08      	it	eq
   1bfea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1bfee:	4770      	bx	lr
   1bff0:	f04f 0000 	mov.w	r0, #0
   1bff4:	4770      	bx	lr
   1bff6:	bf00      	nop

0001bff8 <__aeabi_d2uiz>:
   1bff8:	004a      	lsls	r2, r1, #1
   1bffa:	d211      	bcs.n	1c020 <__aeabi_d2uiz+0x28>
   1bffc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c000:	d211      	bcs.n	1c026 <__aeabi_d2uiz+0x2e>
   1c002:	d50d      	bpl.n	1c020 <__aeabi_d2uiz+0x28>
   1c004:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c008:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c00c:	d40e      	bmi.n	1c02c <__aeabi_d2uiz+0x34>
   1c00e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c016:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c01a:	fa23 f002 	lsr.w	r0, r3, r2
   1c01e:	4770      	bx	lr
   1c020:	f04f 0000 	mov.w	r0, #0
   1c024:	4770      	bx	lr
   1c026:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c02a:	d102      	bne.n	1c032 <__aeabi_d2uiz+0x3a>
   1c02c:	f04f 30ff 	mov.w	r0, #4294967295
   1c030:	4770      	bx	lr
   1c032:	f04f 0000 	mov.w	r0, #0
   1c036:	4770      	bx	lr

0001c038 <__aeabi_d2f>:
   1c038:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c03c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c040:	bf24      	itt	cs
   1c042:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c046:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c04a:	d90d      	bls.n	1c068 <__aeabi_d2f+0x30>
   1c04c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c050:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c054:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c058:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c05c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c060:	bf08      	it	eq
   1c062:	f020 0001 	biceq.w	r0, r0, #1
   1c066:	4770      	bx	lr
   1c068:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c06c:	d121      	bne.n	1c0b2 <__aeabi_d2f+0x7a>
   1c06e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c072:	bfbc      	itt	lt
   1c074:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c078:	4770      	bxlt	lr
   1c07a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c07e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c082:	f1c2 0218 	rsb	r2, r2, #24
   1c086:	f1c2 0c20 	rsb	ip, r2, #32
   1c08a:	fa10 f30c 	lsls.w	r3, r0, ip
   1c08e:	fa20 f002 	lsr.w	r0, r0, r2
   1c092:	bf18      	it	ne
   1c094:	f040 0001 	orrne.w	r0, r0, #1
   1c098:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c09c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c0a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c0a4:	ea40 000c 	orr.w	r0, r0, ip
   1c0a8:	fa23 f302 	lsr.w	r3, r3, r2
   1c0ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c0b0:	e7cc      	b.n	1c04c <__aeabi_d2f+0x14>
   1c0b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c0b6:	d107      	bne.n	1c0c8 <__aeabi_d2f+0x90>
   1c0b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c0bc:	bf1e      	ittt	ne
   1c0be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c0c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c0c6:	4770      	bxne	lr
   1c0c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c0cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c0d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c0d4:	4770      	bx	lr
   1c0d6:	bf00      	nop

0001c0d8 <__aeabi_frsub>:
   1c0d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c0dc:	e002      	b.n	1c0e4 <__addsf3>
   1c0de:	bf00      	nop

0001c0e0 <__aeabi_fsub>:
   1c0e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c0e4 <__addsf3>:
   1c0e4:	0042      	lsls	r2, r0, #1
   1c0e6:	bf1f      	itttt	ne
   1c0e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c0ec:	ea92 0f03 	teqne	r2, r3
   1c0f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c0f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c0f8:	d06a      	beq.n	1c1d0 <__addsf3+0xec>
   1c0fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c0fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c102:	bfc1      	itttt	gt
   1c104:	18d2      	addgt	r2, r2, r3
   1c106:	4041      	eorgt	r1, r0
   1c108:	4048      	eorgt	r0, r1
   1c10a:	4041      	eorgt	r1, r0
   1c10c:	bfb8      	it	lt
   1c10e:	425b      	neglt	r3, r3
   1c110:	2b19      	cmp	r3, #25
   1c112:	bf88      	it	hi
   1c114:	4770      	bxhi	lr
   1c116:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c11a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c11e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c122:	bf18      	it	ne
   1c124:	4240      	negne	r0, r0
   1c126:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c12a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c12e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c132:	bf18      	it	ne
   1c134:	4249      	negne	r1, r1
   1c136:	ea92 0f03 	teq	r2, r3
   1c13a:	d03f      	beq.n	1c1bc <__addsf3+0xd8>
   1c13c:	f1a2 0201 	sub.w	r2, r2, #1
   1c140:	fa41 fc03 	asr.w	ip, r1, r3
   1c144:	eb10 000c 	adds.w	r0, r0, ip
   1c148:	f1c3 0320 	rsb	r3, r3, #32
   1c14c:	fa01 f103 	lsl.w	r1, r1, r3
   1c150:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c154:	d502      	bpl.n	1c15c <__addsf3+0x78>
   1c156:	4249      	negs	r1, r1
   1c158:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c15c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c160:	d313      	bcc.n	1c18a <__addsf3+0xa6>
   1c162:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c166:	d306      	bcc.n	1c176 <__addsf3+0x92>
   1c168:	0840      	lsrs	r0, r0, #1
   1c16a:	ea4f 0131 	mov.w	r1, r1, rrx
   1c16e:	f102 0201 	add.w	r2, r2, #1
   1c172:	2afe      	cmp	r2, #254	; 0xfe
   1c174:	d251      	bcs.n	1c21a <__addsf3+0x136>
   1c176:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c17a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c17e:	bf08      	it	eq
   1c180:	f020 0001 	biceq.w	r0, r0, #1
   1c184:	ea40 0003 	orr.w	r0, r0, r3
   1c188:	4770      	bx	lr
   1c18a:	0049      	lsls	r1, r1, #1
   1c18c:	eb40 0000 	adc.w	r0, r0, r0
   1c190:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c194:	f1a2 0201 	sub.w	r2, r2, #1
   1c198:	d1ed      	bne.n	1c176 <__addsf3+0x92>
   1c19a:	fab0 fc80 	clz	ip, r0
   1c19e:	f1ac 0c08 	sub.w	ip, ip, #8
   1c1a2:	ebb2 020c 	subs.w	r2, r2, ip
   1c1a6:	fa00 f00c 	lsl.w	r0, r0, ip
   1c1aa:	bfaa      	itet	ge
   1c1ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c1b0:	4252      	neglt	r2, r2
   1c1b2:	4318      	orrge	r0, r3
   1c1b4:	bfbc      	itt	lt
   1c1b6:	40d0      	lsrlt	r0, r2
   1c1b8:	4318      	orrlt	r0, r3
   1c1ba:	4770      	bx	lr
   1c1bc:	f092 0f00 	teq	r2, #0
   1c1c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c1c4:	bf06      	itte	eq
   1c1c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c1ca:	3201      	addeq	r2, #1
   1c1cc:	3b01      	subne	r3, #1
   1c1ce:	e7b5      	b.n	1c13c <__addsf3+0x58>
   1c1d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c1d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c1d8:	bf18      	it	ne
   1c1da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c1de:	d021      	beq.n	1c224 <__addsf3+0x140>
   1c1e0:	ea92 0f03 	teq	r2, r3
   1c1e4:	d004      	beq.n	1c1f0 <__addsf3+0x10c>
   1c1e6:	f092 0f00 	teq	r2, #0
   1c1ea:	bf08      	it	eq
   1c1ec:	4608      	moveq	r0, r1
   1c1ee:	4770      	bx	lr
   1c1f0:	ea90 0f01 	teq	r0, r1
   1c1f4:	bf1c      	itt	ne
   1c1f6:	2000      	movne	r0, #0
   1c1f8:	4770      	bxne	lr
   1c1fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c1fe:	d104      	bne.n	1c20a <__addsf3+0x126>
   1c200:	0040      	lsls	r0, r0, #1
   1c202:	bf28      	it	cs
   1c204:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c208:	4770      	bx	lr
   1c20a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c20e:	bf3c      	itt	cc
   1c210:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c214:	4770      	bxcc	lr
   1c216:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c21a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c21e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c222:	4770      	bx	lr
   1c224:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c228:	bf16      	itet	ne
   1c22a:	4608      	movne	r0, r1
   1c22c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c230:	4601      	movne	r1, r0
   1c232:	0242      	lsls	r2, r0, #9
   1c234:	bf06      	itte	eq
   1c236:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c23a:	ea90 0f01 	teqeq	r0, r1
   1c23e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c242:	4770      	bx	lr

0001c244 <__aeabi_ui2f>:
   1c244:	f04f 0300 	mov.w	r3, #0
   1c248:	e004      	b.n	1c254 <__aeabi_i2f+0x8>
   1c24a:	bf00      	nop

0001c24c <__aeabi_i2f>:
   1c24c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c250:	bf48      	it	mi
   1c252:	4240      	negmi	r0, r0
   1c254:	ea5f 0c00 	movs.w	ip, r0
   1c258:	bf08      	it	eq
   1c25a:	4770      	bxeq	lr
   1c25c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c260:	4601      	mov	r1, r0
   1c262:	f04f 0000 	mov.w	r0, #0
   1c266:	e01c      	b.n	1c2a2 <__aeabi_l2f+0x2a>

0001c268 <__aeabi_ul2f>:
   1c268:	ea50 0201 	orrs.w	r2, r0, r1
   1c26c:	bf08      	it	eq
   1c26e:	4770      	bxeq	lr
   1c270:	f04f 0300 	mov.w	r3, #0
   1c274:	e00a      	b.n	1c28c <__aeabi_l2f+0x14>
   1c276:	bf00      	nop

0001c278 <__aeabi_l2f>:
   1c278:	ea50 0201 	orrs.w	r2, r0, r1
   1c27c:	bf08      	it	eq
   1c27e:	4770      	bxeq	lr
   1c280:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c284:	d502      	bpl.n	1c28c <__aeabi_l2f+0x14>
   1c286:	4240      	negs	r0, r0
   1c288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c28c:	ea5f 0c01 	movs.w	ip, r1
   1c290:	bf02      	ittt	eq
   1c292:	4684      	moveq	ip, r0
   1c294:	4601      	moveq	r1, r0
   1c296:	2000      	moveq	r0, #0
   1c298:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c29c:	bf08      	it	eq
   1c29e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c2a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c2a6:	fabc f28c 	clz	r2, ip
   1c2aa:	3a08      	subs	r2, #8
   1c2ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c2b0:	db10      	blt.n	1c2d4 <__aeabi_l2f+0x5c>
   1c2b2:	fa01 fc02 	lsl.w	ip, r1, r2
   1c2b6:	4463      	add	r3, ip
   1c2b8:	fa00 fc02 	lsl.w	ip, r0, r2
   1c2bc:	f1c2 0220 	rsb	r2, r2, #32
   1c2c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c2c4:	fa20 f202 	lsr.w	r2, r0, r2
   1c2c8:	eb43 0002 	adc.w	r0, r3, r2
   1c2cc:	bf08      	it	eq
   1c2ce:	f020 0001 	biceq.w	r0, r0, #1
   1c2d2:	4770      	bx	lr
   1c2d4:	f102 0220 	add.w	r2, r2, #32
   1c2d8:	fa01 fc02 	lsl.w	ip, r1, r2
   1c2dc:	f1c2 0220 	rsb	r2, r2, #32
   1c2e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c2e4:	fa21 f202 	lsr.w	r2, r1, r2
   1c2e8:	eb43 0002 	adc.w	r0, r3, r2
   1c2ec:	bf08      	it	eq
   1c2ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c2f2:	4770      	bx	lr

0001c2f4 <__aeabi_ldivmod>:
   1c2f4:	b97b      	cbnz	r3, 1c316 <__aeabi_ldivmod+0x22>
   1c2f6:	b972      	cbnz	r2, 1c316 <__aeabi_ldivmod+0x22>
   1c2f8:	2900      	cmp	r1, #0
   1c2fa:	bfbe      	ittt	lt
   1c2fc:	2000      	movlt	r0, #0
   1c2fe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c302:	e006      	blt.n	1c312 <__aeabi_ldivmod+0x1e>
   1c304:	bf08      	it	eq
   1c306:	2800      	cmpeq	r0, #0
   1c308:	bf1c      	itt	ne
   1c30a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c30e:	f04f 30ff 	movne.w	r0, #4294967295
   1c312:	f001 b979 	b.w	1d608 <__aeabi_idiv0>
   1c316:	f1ad 0c08 	sub.w	ip, sp, #8
   1c31a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c31e:	2900      	cmp	r1, #0
   1c320:	db09      	blt.n	1c336 <__aeabi_ldivmod+0x42>
   1c322:	2b00      	cmp	r3, #0
   1c324:	db1a      	blt.n	1c35c <__aeabi_ldivmod+0x68>
   1c326:	f000 f885 	bl	1c434 <__udivmoddi4>
   1c32a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c32e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c332:	b004      	add	sp, #16
   1c334:	4770      	bx	lr
   1c336:	4240      	negs	r0, r0
   1c338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c33c:	2b00      	cmp	r3, #0
   1c33e:	db1b      	blt.n	1c378 <__aeabi_ldivmod+0x84>
   1c340:	f000 f878 	bl	1c434 <__udivmoddi4>
   1c344:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c34c:	b004      	add	sp, #16
   1c34e:	4240      	negs	r0, r0
   1c350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c354:	4252      	negs	r2, r2
   1c356:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c35a:	4770      	bx	lr
   1c35c:	4252      	negs	r2, r2
   1c35e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c362:	f000 f867 	bl	1c434 <__udivmoddi4>
   1c366:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c36a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c36e:	b004      	add	sp, #16
   1c370:	4240      	negs	r0, r0
   1c372:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c376:	4770      	bx	lr
   1c378:	4252      	negs	r2, r2
   1c37a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c37e:	f000 f859 	bl	1c434 <__udivmoddi4>
   1c382:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c38a:	b004      	add	sp, #16
   1c38c:	4252      	negs	r2, r2
   1c38e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c392:	4770      	bx	lr

0001c394 <__aeabi_uldivmod>:
   1c394:	b953      	cbnz	r3, 1c3ac <__aeabi_uldivmod+0x18>
   1c396:	b94a      	cbnz	r2, 1c3ac <__aeabi_uldivmod+0x18>
   1c398:	2900      	cmp	r1, #0
   1c39a:	bf08      	it	eq
   1c39c:	2800      	cmpeq	r0, #0
   1c39e:	bf1c      	itt	ne
   1c3a0:	f04f 31ff 	movne.w	r1, #4294967295
   1c3a4:	f04f 30ff 	movne.w	r0, #4294967295
   1c3a8:	f001 b92e 	b.w	1d608 <__aeabi_idiv0>
   1c3ac:	f1ad 0c08 	sub.w	ip, sp, #8
   1c3b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c3b4:	f000 f83e 	bl	1c434 <__udivmoddi4>
   1c3b8:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c3c0:	b004      	add	sp, #16
   1c3c2:	4770      	bx	lr

0001c3c4 <__aeabi_f2lz>:
   1c3c4:	ee07 0a90 	vmov	s15, r0
   1c3c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c3d0:	d401      	bmi.n	1c3d6 <__aeabi_f2lz+0x12>
   1c3d2:	f000 b809 	b.w	1c3e8 <__aeabi_f2ulz>
   1c3d6:	b508      	push	{r3, lr}
   1c3d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c3dc:	f000 f804 	bl	1c3e8 <__aeabi_f2ulz>
   1c3e0:	4240      	negs	r0, r0
   1c3e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3e6:	bd08      	pop	{r3, pc}

0001c3e8 <__aeabi_f2ulz>:
   1c3e8:	b5d0      	push	{r4, r6, r7, lr}
   1c3ea:	f7ff faef 	bl	1b9cc <__aeabi_f2d>
   1c3ee:	2200      	movs	r2, #0
   1c3f0:	4b0e      	ldr	r3, [pc, #56]	; (1c42c <__aeabi_f2ulz+0x44>)
   1c3f2:	4606      	mov	r6, r0
   1c3f4:	460f      	mov	r7, r1
   1c3f6:	f7ff fb3d 	bl	1ba74 <__aeabi_dmul>
   1c3fa:	f7ff fdfd 	bl	1bff8 <__aeabi_d2uiz>
   1c3fe:	4604      	mov	r4, r0
   1c400:	f7ff fac2 	bl	1b988 <__aeabi_ui2d>
   1c404:	2200      	movs	r2, #0
   1c406:	4b0a      	ldr	r3, [pc, #40]	; (1c430 <__aeabi_f2ulz+0x48>)
   1c408:	f7ff fb34 	bl	1ba74 <__aeabi_dmul>
   1c40c:	4602      	mov	r2, r0
   1c40e:	460b      	mov	r3, r1
   1c410:	4630      	mov	r0, r6
   1c412:	4639      	mov	r1, r7
   1c414:	f7ff f97a 	bl	1b70c <__aeabi_dsub>
   1c418:	f7ff fdee 	bl	1bff8 <__aeabi_d2uiz>
   1c41c:	4623      	mov	r3, r4
   1c41e:	2200      	movs	r2, #0
   1c420:	ea42 0200 	orr.w	r2, r2, r0
   1c424:	4610      	mov	r0, r2
   1c426:	4619      	mov	r1, r3
   1c428:	bdd0      	pop	{r4, r6, r7, pc}
   1c42a:	bf00      	nop
   1c42c:	3df00000 	.word	0x3df00000
   1c430:	41f00000 	.word	0x41f00000

0001c434 <__udivmoddi4>:
   1c434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c438:	468c      	mov	ip, r1
   1c43a:	460d      	mov	r5, r1
   1c43c:	4604      	mov	r4, r0
   1c43e:	9e08      	ldr	r6, [sp, #32]
   1c440:	2b00      	cmp	r3, #0
   1c442:	d151      	bne.n	1c4e8 <__udivmoddi4+0xb4>
   1c444:	428a      	cmp	r2, r1
   1c446:	4617      	mov	r7, r2
   1c448:	d96d      	bls.n	1c526 <__udivmoddi4+0xf2>
   1c44a:	fab2 fe82 	clz	lr, r2
   1c44e:	f1be 0f00 	cmp.w	lr, #0
   1c452:	d00b      	beq.n	1c46c <__udivmoddi4+0x38>
   1c454:	f1ce 0c20 	rsb	ip, lr, #32
   1c458:	fa01 f50e 	lsl.w	r5, r1, lr
   1c45c:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c460:	fa02 f70e 	lsl.w	r7, r2, lr
   1c464:	ea4c 0c05 	orr.w	ip, ip, r5
   1c468:	fa00 f40e 	lsl.w	r4, r0, lr
   1c46c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c470:	0c25      	lsrs	r5, r4, #16
   1c472:	fbbc f8fa 	udiv	r8, ip, sl
   1c476:	fa1f f987 	uxth.w	r9, r7
   1c47a:	fb0a cc18 	mls	ip, sl, r8, ip
   1c47e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c482:	fb08 f309 	mul.w	r3, r8, r9
   1c486:	42ab      	cmp	r3, r5
   1c488:	d90a      	bls.n	1c4a0 <__udivmoddi4+0x6c>
   1c48a:	19ed      	adds	r5, r5, r7
   1c48c:	f108 32ff 	add.w	r2, r8, #4294967295
   1c490:	f080 8123 	bcs.w	1c6da <__udivmoddi4+0x2a6>
   1c494:	42ab      	cmp	r3, r5
   1c496:	f240 8120 	bls.w	1c6da <__udivmoddi4+0x2a6>
   1c49a:	f1a8 0802 	sub.w	r8, r8, #2
   1c49e:	443d      	add	r5, r7
   1c4a0:	1aed      	subs	r5, r5, r3
   1c4a2:	b2a4      	uxth	r4, r4
   1c4a4:	fbb5 f0fa 	udiv	r0, r5, sl
   1c4a8:	fb0a 5510 	mls	r5, sl, r0, r5
   1c4ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c4b0:	fb00 f909 	mul.w	r9, r0, r9
   1c4b4:	45a1      	cmp	r9, r4
   1c4b6:	d909      	bls.n	1c4cc <__udivmoddi4+0x98>
   1c4b8:	19e4      	adds	r4, r4, r7
   1c4ba:	f100 33ff 	add.w	r3, r0, #4294967295
   1c4be:	f080 810a 	bcs.w	1c6d6 <__udivmoddi4+0x2a2>
   1c4c2:	45a1      	cmp	r9, r4
   1c4c4:	f240 8107 	bls.w	1c6d6 <__udivmoddi4+0x2a2>
   1c4c8:	3802      	subs	r0, #2
   1c4ca:	443c      	add	r4, r7
   1c4cc:	eba4 0409 	sub.w	r4, r4, r9
   1c4d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c4d4:	2100      	movs	r1, #0
   1c4d6:	2e00      	cmp	r6, #0
   1c4d8:	d061      	beq.n	1c59e <__udivmoddi4+0x16a>
   1c4da:	fa24 f40e 	lsr.w	r4, r4, lr
   1c4de:	2300      	movs	r3, #0
   1c4e0:	6034      	str	r4, [r6, #0]
   1c4e2:	6073      	str	r3, [r6, #4]
   1c4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c4e8:	428b      	cmp	r3, r1
   1c4ea:	d907      	bls.n	1c4fc <__udivmoddi4+0xc8>
   1c4ec:	2e00      	cmp	r6, #0
   1c4ee:	d054      	beq.n	1c59a <__udivmoddi4+0x166>
   1c4f0:	2100      	movs	r1, #0
   1c4f2:	e886 0021 	stmia.w	r6, {r0, r5}
   1c4f6:	4608      	mov	r0, r1
   1c4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c4fc:	fab3 f183 	clz	r1, r3
   1c500:	2900      	cmp	r1, #0
   1c502:	f040 808e 	bne.w	1c622 <__udivmoddi4+0x1ee>
   1c506:	42ab      	cmp	r3, r5
   1c508:	d302      	bcc.n	1c510 <__udivmoddi4+0xdc>
   1c50a:	4282      	cmp	r2, r0
   1c50c:	f200 80fa 	bhi.w	1c704 <__udivmoddi4+0x2d0>
   1c510:	1a84      	subs	r4, r0, r2
   1c512:	eb65 0503 	sbc.w	r5, r5, r3
   1c516:	2001      	movs	r0, #1
   1c518:	46ac      	mov	ip, r5
   1c51a:	2e00      	cmp	r6, #0
   1c51c:	d03f      	beq.n	1c59e <__udivmoddi4+0x16a>
   1c51e:	e886 1010 	stmia.w	r6, {r4, ip}
   1c522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c526:	b912      	cbnz	r2, 1c52e <__udivmoddi4+0xfa>
   1c528:	2701      	movs	r7, #1
   1c52a:	fbb7 f7f2 	udiv	r7, r7, r2
   1c52e:	fab7 fe87 	clz	lr, r7
   1c532:	f1be 0f00 	cmp.w	lr, #0
   1c536:	d134      	bne.n	1c5a2 <__udivmoddi4+0x16e>
   1c538:	1beb      	subs	r3, r5, r7
   1c53a:	0c3a      	lsrs	r2, r7, #16
   1c53c:	fa1f fc87 	uxth.w	ip, r7
   1c540:	2101      	movs	r1, #1
   1c542:	fbb3 f8f2 	udiv	r8, r3, r2
   1c546:	0c25      	lsrs	r5, r4, #16
   1c548:	fb02 3318 	mls	r3, r2, r8, r3
   1c54c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c550:	fb0c f308 	mul.w	r3, ip, r8
   1c554:	42ab      	cmp	r3, r5
   1c556:	d907      	bls.n	1c568 <__udivmoddi4+0x134>
   1c558:	19ed      	adds	r5, r5, r7
   1c55a:	f108 30ff 	add.w	r0, r8, #4294967295
   1c55e:	d202      	bcs.n	1c566 <__udivmoddi4+0x132>
   1c560:	42ab      	cmp	r3, r5
   1c562:	f200 80d1 	bhi.w	1c708 <__udivmoddi4+0x2d4>
   1c566:	4680      	mov	r8, r0
   1c568:	1aed      	subs	r5, r5, r3
   1c56a:	b2a3      	uxth	r3, r4
   1c56c:	fbb5 f0f2 	udiv	r0, r5, r2
   1c570:	fb02 5510 	mls	r5, r2, r0, r5
   1c574:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c578:	fb0c fc00 	mul.w	ip, ip, r0
   1c57c:	45a4      	cmp	ip, r4
   1c57e:	d907      	bls.n	1c590 <__udivmoddi4+0x15c>
   1c580:	19e4      	adds	r4, r4, r7
   1c582:	f100 33ff 	add.w	r3, r0, #4294967295
   1c586:	d202      	bcs.n	1c58e <__udivmoddi4+0x15a>
   1c588:	45a4      	cmp	ip, r4
   1c58a:	f200 80b8 	bhi.w	1c6fe <__udivmoddi4+0x2ca>
   1c58e:	4618      	mov	r0, r3
   1c590:	eba4 040c 	sub.w	r4, r4, ip
   1c594:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c598:	e79d      	b.n	1c4d6 <__udivmoddi4+0xa2>
   1c59a:	4631      	mov	r1, r6
   1c59c:	4630      	mov	r0, r6
   1c59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c5a2:	f1ce 0420 	rsb	r4, lr, #32
   1c5a6:	fa05 f30e 	lsl.w	r3, r5, lr
   1c5aa:	fa07 f70e 	lsl.w	r7, r7, lr
   1c5ae:	fa20 f804 	lsr.w	r8, r0, r4
   1c5b2:	0c3a      	lsrs	r2, r7, #16
   1c5b4:	fa25 f404 	lsr.w	r4, r5, r4
   1c5b8:	ea48 0803 	orr.w	r8, r8, r3
   1c5bc:	fbb4 f1f2 	udiv	r1, r4, r2
   1c5c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c5c4:	fb02 4411 	mls	r4, r2, r1, r4
   1c5c8:	fa1f fc87 	uxth.w	ip, r7
   1c5cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c5d0:	fb01 f30c 	mul.w	r3, r1, ip
   1c5d4:	42ab      	cmp	r3, r5
   1c5d6:	fa00 f40e 	lsl.w	r4, r0, lr
   1c5da:	d909      	bls.n	1c5f0 <__udivmoddi4+0x1bc>
   1c5dc:	19ed      	adds	r5, r5, r7
   1c5de:	f101 30ff 	add.w	r0, r1, #4294967295
   1c5e2:	f080 808a 	bcs.w	1c6fa <__udivmoddi4+0x2c6>
   1c5e6:	42ab      	cmp	r3, r5
   1c5e8:	f240 8087 	bls.w	1c6fa <__udivmoddi4+0x2c6>
   1c5ec:	3902      	subs	r1, #2
   1c5ee:	443d      	add	r5, r7
   1c5f0:	1aeb      	subs	r3, r5, r3
   1c5f2:	fa1f f588 	uxth.w	r5, r8
   1c5f6:	fbb3 f0f2 	udiv	r0, r3, r2
   1c5fa:	fb02 3310 	mls	r3, r2, r0, r3
   1c5fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c602:	fb00 f30c 	mul.w	r3, r0, ip
   1c606:	42ab      	cmp	r3, r5
   1c608:	d907      	bls.n	1c61a <__udivmoddi4+0x1e6>
   1c60a:	19ed      	adds	r5, r5, r7
   1c60c:	f100 38ff 	add.w	r8, r0, #4294967295
   1c610:	d26f      	bcs.n	1c6f2 <__udivmoddi4+0x2be>
   1c612:	42ab      	cmp	r3, r5
   1c614:	d96d      	bls.n	1c6f2 <__udivmoddi4+0x2be>
   1c616:	3802      	subs	r0, #2
   1c618:	443d      	add	r5, r7
   1c61a:	1aeb      	subs	r3, r5, r3
   1c61c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c620:	e78f      	b.n	1c542 <__udivmoddi4+0x10e>
   1c622:	f1c1 0720 	rsb	r7, r1, #32
   1c626:	fa22 f807 	lsr.w	r8, r2, r7
   1c62a:	408b      	lsls	r3, r1
   1c62c:	fa05 f401 	lsl.w	r4, r5, r1
   1c630:	ea48 0303 	orr.w	r3, r8, r3
   1c634:	fa20 fe07 	lsr.w	lr, r0, r7
   1c638:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c63c:	40fd      	lsrs	r5, r7
   1c63e:	ea4e 0e04 	orr.w	lr, lr, r4
   1c642:	fbb5 f9fc 	udiv	r9, r5, ip
   1c646:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c64a:	fb0c 5519 	mls	r5, ip, r9, r5
   1c64e:	fa1f f883 	uxth.w	r8, r3
   1c652:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c656:	fb09 f408 	mul.w	r4, r9, r8
   1c65a:	42ac      	cmp	r4, r5
   1c65c:	fa02 f201 	lsl.w	r2, r2, r1
   1c660:	fa00 fa01 	lsl.w	sl, r0, r1
   1c664:	d908      	bls.n	1c678 <__udivmoddi4+0x244>
   1c666:	18ed      	adds	r5, r5, r3
   1c668:	f109 30ff 	add.w	r0, r9, #4294967295
   1c66c:	d243      	bcs.n	1c6f6 <__udivmoddi4+0x2c2>
   1c66e:	42ac      	cmp	r4, r5
   1c670:	d941      	bls.n	1c6f6 <__udivmoddi4+0x2c2>
   1c672:	f1a9 0902 	sub.w	r9, r9, #2
   1c676:	441d      	add	r5, r3
   1c678:	1b2d      	subs	r5, r5, r4
   1c67a:	fa1f fe8e 	uxth.w	lr, lr
   1c67e:	fbb5 f0fc 	udiv	r0, r5, ip
   1c682:	fb0c 5510 	mls	r5, ip, r0, r5
   1c686:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c68a:	fb00 f808 	mul.w	r8, r0, r8
   1c68e:	45a0      	cmp	r8, r4
   1c690:	d907      	bls.n	1c6a2 <__udivmoddi4+0x26e>
   1c692:	18e4      	adds	r4, r4, r3
   1c694:	f100 35ff 	add.w	r5, r0, #4294967295
   1c698:	d229      	bcs.n	1c6ee <__udivmoddi4+0x2ba>
   1c69a:	45a0      	cmp	r8, r4
   1c69c:	d927      	bls.n	1c6ee <__udivmoddi4+0x2ba>
   1c69e:	3802      	subs	r0, #2
   1c6a0:	441c      	add	r4, r3
   1c6a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c6a6:	eba4 0408 	sub.w	r4, r4, r8
   1c6aa:	fba0 8902 	umull	r8, r9, r0, r2
   1c6ae:	454c      	cmp	r4, r9
   1c6b0:	46c6      	mov	lr, r8
   1c6b2:	464d      	mov	r5, r9
   1c6b4:	d315      	bcc.n	1c6e2 <__udivmoddi4+0x2ae>
   1c6b6:	d012      	beq.n	1c6de <__udivmoddi4+0x2aa>
   1c6b8:	b156      	cbz	r6, 1c6d0 <__udivmoddi4+0x29c>
   1c6ba:	ebba 030e 	subs.w	r3, sl, lr
   1c6be:	eb64 0405 	sbc.w	r4, r4, r5
   1c6c2:	fa04 f707 	lsl.w	r7, r4, r7
   1c6c6:	40cb      	lsrs	r3, r1
   1c6c8:	431f      	orrs	r7, r3
   1c6ca:	40cc      	lsrs	r4, r1
   1c6cc:	6037      	str	r7, [r6, #0]
   1c6ce:	6074      	str	r4, [r6, #4]
   1c6d0:	2100      	movs	r1, #0
   1c6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6d6:	4618      	mov	r0, r3
   1c6d8:	e6f8      	b.n	1c4cc <__udivmoddi4+0x98>
   1c6da:	4690      	mov	r8, r2
   1c6dc:	e6e0      	b.n	1c4a0 <__udivmoddi4+0x6c>
   1c6de:	45c2      	cmp	sl, r8
   1c6e0:	d2ea      	bcs.n	1c6b8 <__udivmoddi4+0x284>
   1c6e2:	ebb8 0e02 	subs.w	lr, r8, r2
   1c6e6:	eb69 0503 	sbc.w	r5, r9, r3
   1c6ea:	3801      	subs	r0, #1
   1c6ec:	e7e4      	b.n	1c6b8 <__udivmoddi4+0x284>
   1c6ee:	4628      	mov	r0, r5
   1c6f0:	e7d7      	b.n	1c6a2 <__udivmoddi4+0x26e>
   1c6f2:	4640      	mov	r0, r8
   1c6f4:	e791      	b.n	1c61a <__udivmoddi4+0x1e6>
   1c6f6:	4681      	mov	r9, r0
   1c6f8:	e7be      	b.n	1c678 <__udivmoddi4+0x244>
   1c6fa:	4601      	mov	r1, r0
   1c6fc:	e778      	b.n	1c5f0 <__udivmoddi4+0x1bc>
   1c6fe:	3802      	subs	r0, #2
   1c700:	443c      	add	r4, r7
   1c702:	e745      	b.n	1c590 <__udivmoddi4+0x15c>
   1c704:	4608      	mov	r0, r1
   1c706:	e708      	b.n	1c51a <__udivmoddi4+0xe6>
   1c708:	f1a8 0802 	sub.w	r8, r8, #2
   1c70c:	443d      	add	r5, r7
   1c70e:	e72b      	b.n	1c568 <__udivmoddi4+0x134>

0001c710 <selfrel_offset31>:
   1c710:	6803      	ldr	r3, [r0, #0]
   1c712:	005a      	lsls	r2, r3, #1
   1c714:	bf4c      	ite	mi
   1c716:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c71a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c71e:	4418      	add	r0, r3
   1c720:	4770      	bx	lr
   1c722:	bf00      	nop

0001c724 <search_EIT_table>:
   1c724:	b361      	cbz	r1, 1c780 <search_EIT_table+0x5c>
   1c726:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c72a:	f101 3aff 	add.w	sl, r1, #4294967295
   1c72e:	4690      	mov	r8, r2
   1c730:	4606      	mov	r6, r0
   1c732:	46d1      	mov	r9, sl
   1c734:	2700      	movs	r7, #0
   1c736:	eb07 0409 	add.w	r4, r7, r9
   1c73a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c73e:	1064      	asrs	r4, r4, #1
   1c740:	00e5      	lsls	r5, r4, #3
   1c742:	1971      	adds	r1, r6, r5
   1c744:	4608      	mov	r0, r1
   1c746:	f7ff ffe3 	bl	1c710 <selfrel_offset31>
   1c74a:	45a2      	cmp	sl, r4
   1c74c:	4683      	mov	fp, r0
   1c74e:	f105 0008 	add.w	r0, r5, #8
   1c752:	4430      	add	r0, r6
   1c754:	d009      	beq.n	1c76a <search_EIT_table+0x46>
   1c756:	f7ff ffdb 	bl	1c710 <selfrel_offset31>
   1c75a:	45c3      	cmp	fp, r8
   1c75c:	f100 30ff 	add.w	r0, r0, #4294967295
   1c760:	d805      	bhi.n	1c76e <search_EIT_table+0x4a>
   1c762:	4540      	cmp	r0, r8
   1c764:	d209      	bcs.n	1c77a <search_EIT_table+0x56>
   1c766:	1c67      	adds	r7, r4, #1
   1c768:	e7e5      	b.n	1c736 <search_EIT_table+0x12>
   1c76a:	45c3      	cmp	fp, r8
   1c76c:	d905      	bls.n	1c77a <search_EIT_table+0x56>
   1c76e:	42a7      	cmp	r7, r4
   1c770:	d002      	beq.n	1c778 <search_EIT_table+0x54>
   1c772:	f104 39ff 	add.w	r9, r4, #4294967295
   1c776:	e7de      	b.n	1c736 <search_EIT_table+0x12>
   1c778:	2100      	movs	r1, #0
   1c77a:	4608      	mov	r0, r1
   1c77c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c780:	4608      	mov	r0, r1
   1c782:	4770      	bx	lr

0001c784 <__gnu_unwind_get_pr_addr>:
   1c784:	2801      	cmp	r0, #1
   1c786:	d007      	beq.n	1c798 <__gnu_unwind_get_pr_addr+0x14>
   1c788:	2802      	cmp	r0, #2
   1c78a:	d007      	beq.n	1c79c <__gnu_unwind_get_pr_addr+0x18>
   1c78c:	4b04      	ldr	r3, [pc, #16]	; (1c7a0 <__gnu_unwind_get_pr_addr+0x1c>)
   1c78e:	2800      	cmp	r0, #0
   1c790:	bf0c      	ite	eq
   1c792:	4618      	moveq	r0, r3
   1c794:	2000      	movne	r0, #0
   1c796:	4770      	bx	lr
   1c798:	4802      	ldr	r0, [pc, #8]	; (1c7a4 <__gnu_unwind_get_pr_addr+0x20>)
   1c79a:	4770      	bx	lr
   1c79c:	4802      	ldr	r0, [pc, #8]	; (1c7a8 <__gnu_unwind_get_pr_addr+0x24>)
   1c79e:	4770      	bx	lr
   1c7a0:	0001ce89 	.word	0x0001ce89
   1c7a4:	0001ce8d 	.word	0x0001ce8d
   1c7a8:	0001ce91 	.word	0x0001ce91

0001c7ac <get_eit_entry>:
   1c7ac:	b530      	push	{r4, r5, lr}
   1c7ae:	4b24      	ldr	r3, [pc, #144]	; (1c840 <get_eit_entry+0x94>)
   1c7b0:	b083      	sub	sp, #12
   1c7b2:	4604      	mov	r4, r0
   1c7b4:	1e8d      	subs	r5, r1, #2
   1c7b6:	b37b      	cbz	r3, 1c818 <get_eit_entry+0x6c>
   1c7b8:	a901      	add	r1, sp, #4
   1c7ba:	4628      	mov	r0, r5
   1c7bc:	f3af 8000 	nop.w
   1c7c0:	b320      	cbz	r0, 1c80c <get_eit_entry+0x60>
   1c7c2:	9901      	ldr	r1, [sp, #4]
   1c7c4:	462a      	mov	r2, r5
   1c7c6:	f7ff ffad 	bl	1c724 <search_EIT_table>
   1c7ca:	4601      	mov	r1, r0
   1c7cc:	b1f0      	cbz	r0, 1c80c <get_eit_entry+0x60>
   1c7ce:	f7ff ff9f 	bl	1c710 <selfrel_offset31>
   1c7d2:	684b      	ldr	r3, [r1, #4]
   1c7d4:	64a0      	str	r0, [r4, #72]	; 0x48
   1c7d6:	2b01      	cmp	r3, #1
   1c7d8:	d012      	beq.n	1c800 <get_eit_entry+0x54>
   1c7da:	2b00      	cmp	r3, #0
   1c7dc:	f101 0004 	add.w	r0, r1, #4
   1c7e0:	db20      	blt.n	1c824 <get_eit_entry+0x78>
   1c7e2:	f7ff ff95 	bl	1c710 <selfrel_offset31>
   1c7e6:	2300      	movs	r3, #0
   1c7e8:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c7ea:	6523      	str	r3, [r4, #80]	; 0x50
   1c7ec:	6803      	ldr	r3, [r0, #0]
   1c7ee:	2b00      	cmp	r3, #0
   1c7f0:	db1c      	blt.n	1c82c <get_eit_entry+0x80>
   1c7f2:	f7ff ff8d 	bl	1c710 <selfrel_offset31>
   1c7f6:	2300      	movs	r3, #0
   1c7f8:	6120      	str	r0, [r4, #16]
   1c7fa:	4618      	mov	r0, r3
   1c7fc:	b003      	add	sp, #12
   1c7fe:	bd30      	pop	{r4, r5, pc}
   1c800:	2300      	movs	r3, #0
   1c802:	6123      	str	r3, [r4, #16]
   1c804:	2305      	movs	r3, #5
   1c806:	4618      	mov	r0, r3
   1c808:	b003      	add	sp, #12
   1c80a:	bd30      	pop	{r4, r5, pc}
   1c80c:	2300      	movs	r3, #0
   1c80e:	6123      	str	r3, [r4, #16]
   1c810:	2309      	movs	r3, #9
   1c812:	4618      	mov	r0, r3
   1c814:	b003      	add	sp, #12
   1c816:	bd30      	pop	{r4, r5, pc}
   1c818:	490a      	ldr	r1, [pc, #40]	; (1c844 <get_eit_entry+0x98>)
   1c81a:	480b      	ldr	r0, [pc, #44]	; (1c848 <get_eit_entry+0x9c>)
   1c81c:	1a09      	subs	r1, r1, r0
   1c81e:	10c9      	asrs	r1, r1, #3
   1c820:	9101      	str	r1, [sp, #4]
   1c822:	e7cf      	b.n	1c7c4 <get_eit_entry+0x18>
   1c824:	2301      	movs	r3, #1
   1c826:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c828:	6523      	str	r3, [r4, #80]	; 0x50
   1c82a:	e7df      	b.n	1c7ec <get_eit_entry+0x40>
   1c82c:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1c830:	f7ff ffa8 	bl	1c784 <__gnu_unwind_get_pr_addr>
   1c834:	2800      	cmp	r0, #0
   1c836:	6120      	str	r0, [r4, #16]
   1c838:	bf14      	ite	ne
   1c83a:	2300      	movne	r3, #0
   1c83c:	2309      	moveq	r3, #9
   1c83e:	e7dc      	b.n	1c7fa <get_eit_entry+0x4e>
   1c840:	00000000 	.word	0x00000000
   1c844:	0002507c 	.word	0x0002507c
   1c848:	00024ef4 	.word	0x00024ef4

0001c84c <restore_non_core_regs>:
   1c84c:	6803      	ldr	r3, [r0, #0]
   1c84e:	07da      	lsls	r2, r3, #31
   1c850:	b510      	push	{r4, lr}
   1c852:	4604      	mov	r4, r0
   1c854:	d406      	bmi.n	1c864 <restore_non_core_regs+0x18>
   1c856:	079b      	lsls	r3, r3, #30
   1c858:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1c85c:	d509      	bpl.n	1c872 <restore_non_core_regs+0x26>
   1c85e:	f000 fc51 	bl	1d104 <__gnu_Unwind_Restore_VFP_D>
   1c862:	6823      	ldr	r3, [r4, #0]
   1c864:	0759      	lsls	r1, r3, #29
   1c866:	d509      	bpl.n	1c87c <restore_non_core_regs+0x30>
   1c868:	071a      	lsls	r2, r3, #28
   1c86a:	d50e      	bpl.n	1c88a <restore_non_core_regs+0x3e>
   1c86c:	06db      	lsls	r3, r3, #27
   1c86e:	d513      	bpl.n	1c898 <restore_non_core_regs+0x4c>
   1c870:	bd10      	pop	{r4, pc}
   1c872:	f000 fc3f 	bl	1d0f4 <__gnu_Unwind_Restore_VFP>
   1c876:	6823      	ldr	r3, [r4, #0]
   1c878:	0759      	lsls	r1, r3, #29
   1c87a:	d4f5      	bmi.n	1c868 <restore_non_core_regs+0x1c>
   1c87c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1c880:	f000 fc48 	bl	1d114 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c884:	6823      	ldr	r3, [r4, #0]
   1c886:	071a      	lsls	r2, r3, #28
   1c888:	d4f0      	bmi.n	1c86c <restore_non_core_regs+0x20>
   1c88a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1c88e:	f000 fc49 	bl	1d124 <__gnu_Unwind_Restore_WMMXD>
   1c892:	6823      	ldr	r3, [r4, #0]
   1c894:	06db      	lsls	r3, r3, #27
   1c896:	d4eb      	bmi.n	1c870 <restore_non_core_regs+0x24>
   1c898:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1c89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c8a0:	f000 bc84 	b.w	1d1ac <__gnu_Unwind_Restore_WMMXC>

0001c8a4 <_Unwind_decode_typeinfo_ptr.isra.0>:
   1c8a4:	6803      	ldr	r3, [r0, #0]
   1c8a6:	b103      	cbz	r3, 1c8aa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1c8a8:	4403      	add	r3, r0
   1c8aa:	4618      	mov	r0, r3
   1c8ac:	4770      	bx	lr
   1c8ae:	bf00      	nop

0001c8b0 <__gnu_unwind_24bit.isra.1>:
   1c8b0:	2009      	movs	r0, #9
   1c8b2:	4770      	bx	lr

0001c8b4 <_Unwind_DebugHook>:
   1c8b4:	4770      	bx	lr
   1c8b6:	bf00      	nop

0001c8b8 <unwind_phase2>:
   1c8b8:	b570      	push	{r4, r5, r6, lr}
   1c8ba:	4604      	mov	r4, r0
   1c8bc:	460d      	mov	r5, r1
   1c8be:	e008      	b.n	1c8d2 <unwind_phase2+0x1a>
   1c8c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1c8c2:	6163      	str	r3, [r4, #20]
   1c8c4:	462a      	mov	r2, r5
   1c8c6:	6923      	ldr	r3, [r4, #16]
   1c8c8:	4621      	mov	r1, r4
   1c8ca:	2001      	movs	r0, #1
   1c8cc:	4798      	blx	r3
   1c8ce:	2808      	cmp	r0, #8
   1c8d0:	d108      	bne.n	1c8e4 <unwind_phase2+0x2c>
   1c8d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c8d4:	4620      	mov	r0, r4
   1c8d6:	f7ff ff69 	bl	1c7ac <get_eit_entry>
   1c8da:	4606      	mov	r6, r0
   1c8dc:	2800      	cmp	r0, #0
   1c8de:	d0ef      	beq.n	1c8c0 <unwind_phase2+0x8>
   1c8e0:	f000 fe94 	bl	1d60c <abort>
   1c8e4:	2807      	cmp	r0, #7
   1c8e6:	d1fb      	bne.n	1c8e0 <unwind_phase2+0x28>
   1c8e8:	4630      	mov	r0, r6
   1c8ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c8ec:	f7ff ffe2 	bl	1c8b4 <_Unwind_DebugHook>
   1c8f0:	1d28      	adds	r0, r5, #4
   1c8f2:	f000 fbf3 	bl	1d0dc <__restore_core_regs>
   1c8f6:	bf00      	nop

0001c8f8 <unwind_phase2_forced>:
   1c8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8fc:	1d0c      	adds	r4, r1, #4
   1c8fe:	4605      	mov	r5, r0
   1c900:	4692      	mov	sl, r2
   1c902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c904:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1c908:	ae03      	add	r6, sp, #12
   1c90a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c90c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c90e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c912:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c914:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1c918:	ac02      	add	r4, sp, #8
   1c91a:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1c91e:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c922:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1c926:	2300      	movs	r3, #0
   1c928:	4628      	mov	r0, r5
   1c92a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c92c:	6023      	str	r3, [r4, #0]
   1c92e:	f7ff ff3d 	bl	1c7ac <get_eit_entry>
   1c932:	f1ba 0f00 	cmp.w	sl, #0
   1c936:	4607      	mov	r7, r0
   1c938:	bf14      	ite	ne
   1c93a:	260a      	movne	r6, #10
   1c93c:	2609      	moveq	r6, #9
   1c93e:	b17f      	cbz	r7, 1c960 <unwind_phase2_forced+0x68>
   1c940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c942:	f046 0110 	orr.w	r1, r6, #16
   1c946:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c94a:	462a      	mov	r2, r5
   1c94c:	6463      	str	r3, [r4, #68]	; 0x44
   1c94e:	2001      	movs	r0, #1
   1c950:	462b      	mov	r3, r5
   1c952:	47c0      	blx	r8
   1c954:	bb78      	cbnz	r0, 1c9b6 <unwind_phase2_forced+0xbe>
   1c956:	4638      	mov	r0, r7
   1c958:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c960:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c962:	616b      	str	r3, [r5, #20]
   1c964:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c968:	4621      	mov	r1, r4
   1c96a:	a87a      	add	r0, sp, #488	; 0x1e8
   1c96c:	f001 fc40 	bl	1e1f0 <memcpy>
   1c970:	692b      	ldr	r3, [r5, #16]
   1c972:	aa7a      	add	r2, sp, #488	; 0x1e8
   1c974:	4629      	mov	r1, r5
   1c976:	4630      	mov	r0, r6
   1c978:	4798      	blx	r3
   1c97a:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1c97c:	4682      	mov	sl, r0
   1c97e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c982:	4631      	mov	r1, r6
   1c984:	6463      	str	r3, [r4, #68]	; 0x44
   1c986:	462a      	mov	r2, r5
   1c988:	462b      	mov	r3, r5
   1c98a:	2001      	movs	r0, #1
   1c98c:	47c0      	blx	r8
   1c98e:	b990      	cbnz	r0, 1c9b6 <unwind_phase2_forced+0xbe>
   1c990:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c994:	a97a      	add	r1, sp, #488	; 0x1e8
   1c996:	4620      	mov	r0, r4
   1c998:	f001 fc2a 	bl	1e1f0 <memcpy>
   1c99c:	f1ba 0f08 	cmp.w	sl, #8
   1c9a0:	d106      	bne.n	1c9b0 <unwind_phase2_forced+0xb8>
   1c9a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c9a4:	4628      	mov	r0, r5
   1c9a6:	f7ff ff01 	bl	1c7ac <get_eit_entry>
   1c9aa:	2609      	movs	r6, #9
   1c9ac:	4607      	mov	r7, r0
   1c9ae:	e7c6      	b.n	1c93e <unwind_phase2_forced+0x46>
   1c9b0:	f1ba 0f07 	cmp.w	sl, #7
   1c9b4:	d005      	beq.n	1c9c2 <unwind_phase2_forced+0xca>
   1c9b6:	2709      	movs	r7, #9
   1c9b8:	4638      	mov	r0, r7
   1c9ba:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c9c2:	4638      	mov	r0, r7
   1c9c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c9c6:	f7ff ff75 	bl	1c8b4 <_Unwind_DebugHook>
   1c9ca:	a803      	add	r0, sp, #12
   1c9cc:	f000 fb86 	bl	1d0dc <__restore_core_regs>

0001c9d0 <_Unwind_GetCFA>:
   1c9d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1c9d2:	4770      	bx	lr

0001c9d4 <__gnu_Unwind_RaiseException>:
   1c9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1c9d8:	640b      	str	r3, [r1, #64]	; 0x40
   1c9da:	1d0e      	adds	r6, r1, #4
   1c9dc:	460f      	mov	r7, r1
   1c9de:	4604      	mov	r4, r0
   1c9e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c9e2:	b0f9      	sub	sp, #484	; 0x1e4
   1c9e4:	ad01      	add	r5, sp, #4
   1c9e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c9e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c9ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c9ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c9ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c9f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1c9f4:	f04f 36ff 	mov.w	r6, #4294967295
   1c9f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1c9fc:	9600      	str	r6, [sp, #0]
   1c9fe:	e006      	b.n	1ca0e <__gnu_Unwind_RaiseException+0x3a>
   1ca00:	6923      	ldr	r3, [r4, #16]
   1ca02:	466a      	mov	r2, sp
   1ca04:	4621      	mov	r1, r4
   1ca06:	4798      	blx	r3
   1ca08:	2808      	cmp	r0, #8
   1ca0a:	4605      	mov	r5, r0
   1ca0c:	d108      	bne.n	1ca20 <__gnu_Unwind_RaiseException+0x4c>
   1ca0e:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ca10:	4620      	mov	r0, r4
   1ca12:	f7ff fecb 	bl	1c7ac <get_eit_entry>
   1ca16:	2800      	cmp	r0, #0
   1ca18:	d0f2      	beq.n	1ca00 <__gnu_Unwind_RaiseException+0x2c>
   1ca1a:	2009      	movs	r0, #9
   1ca1c:	b079      	add	sp, #484	; 0x1e4
   1ca1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca20:	4668      	mov	r0, sp
   1ca22:	f7ff ff13 	bl	1c84c <restore_non_core_regs>
   1ca26:	2d06      	cmp	r5, #6
   1ca28:	d1f7      	bne.n	1ca1a <__gnu_Unwind_RaiseException+0x46>
   1ca2a:	4639      	mov	r1, r7
   1ca2c:	4620      	mov	r0, r4
   1ca2e:	f7ff ff43 	bl	1c8b8 <unwind_phase2>
   1ca32:	bf00      	nop

0001ca34 <__gnu_Unwind_ForcedUnwind>:
   1ca34:	b430      	push	{r4, r5}
   1ca36:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1ca38:	60c1      	str	r1, [r0, #12]
   1ca3a:	6182      	str	r2, [r0, #24]
   1ca3c:	4619      	mov	r1, r3
   1ca3e:	641d      	str	r5, [r3, #64]	; 0x40
   1ca40:	2200      	movs	r2, #0
   1ca42:	bc30      	pop	{r4, r5}
   1ca44:	e758      	b.n	1c8f8 <unwind_phase2_forced>
   1ca46:	bf00      	nop

0001ca48 <__gnu_Unwind_Resume>:
   1ca48:	b570      	push	{r4, r5, r6, lr}
   1ca4a:	68c6      	ldr	r6, [r0, #12]
   1ca4c:	6943      	ldr	r3, [r0, #20]
   1ca4e:	640b      	str	r3, [r1, #64]	; 0x40
   1ca50:	b126      	cbz	r6, 1ca5c <__gnu_Unwind_Resume+0x14>
   1ca52:	2201      	movs	r2, #1
   1ca54:	f7ff ff50 	bl	1c8f8 <unwind_phase2_forced>
   1ca58:	f000 fdd8 	bl	1d60c <abort>
   1ca5c:	6903      	ldr	r3, [r0, #16]
   1ca5e:	460a      	mov	r2, r1
   1ca60:	4604      	mov	r4, r0
   1ca62:	460d      	mov	r5, r1
   1ca64:	4601      	mov	r1, r0
   1ca66:	2002      	movs	r0, #2
   1ca68:	4798      	blx	r3
   1ca6a:	2807      	cmp	r0, #7
   1ca6c:	d007      	beq.n	1ca7e <__gnu_Unwind_Resume+0x36>
   1ca6e:	2808      	cmp	r0, #8
   1ca70:	d103      	bne.n	1ca7a <__gnu_Unwind_Resume+0x32>
   1ca72:	4629      	mov	r1, r5
   1ca74:	4620      	mov	r0, r4
   1ca76:	f7ff ff1f 	bl	1c8b8 <unwind_phase2>
   1ca7a:	f000 fdc7 	bl	1d60c <abort>
   1ca7e:	4630      	mov	r0, r6
   1ca80:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1ca82:	f7ff ff17 	bl	1c8b4 <_Unwind_DebugHook>
   1ca86:	1d28      	adds	r0, r5, #4
   1ca88:	f000 fb28 	bl	1d0dc <__restore_core_regs>

0001ca8c <__gnu_Unwind_Resume_or_Rethrow>:
   1ca8c:	68c2      	ldr	r2, [r0, #12]
   1ca8e:	b11a      	cbz	r2, 1ca98 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1ca90:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1ca92:	640a      	str	r2, [r1, #64]	; 0x40
   1ca94:	2200      	movs	r2, #0
   1ca96:	e72f      	b.n	1c8f8 <unwind_phase2_forced>
   1ca98:	e79c      	b.n	1c9d4 <__gnu_Unwind_RaiseException>
   1ca9a:	bf00      	nop

0001ca9c <_Unwind_Complete>:
   1ca9c:	4770      	bx	lr
   1ca9e:	bf00      	nop

0001caa0 <_Unwind_DeleteException>:
   1caa0:	6883      	ldr	r3, [r0, #8]
   1caa2:	b113      	cbz	r3, 1caaa <_Unwind_DeleteException+0xa>
   1caa4:	4601      	mov	r1, r0
   1caa6:	2001      	movs	r0, #1
   1caa8:	4718      	bx	r3
   1caaa:	4770      	bx	lr

0001caac <_Unwind_VRS_Get>:
   1caac:	b500      	push	{lr}
   1caae:	2904      	cmp	r1, #4
   1cab0:	d807      	bhi.n	1cac2 <_Unwind_VRS_Get+0x16>
   1cab2:	e8df f001 	tbb	[pc, r1]
   1cab6:	0903      	.short	0x0903
   1cab8:	0906      	.short	0x0906
   1caba:	09          	.byte	0x09
   1cabb:	00          	.byte	0x00
   1cabc:	b90b      	cbnz	r3, 1cac2 <_Unwind_VRS_Get+0x16>
   1cabe:	2a0f      	cmp	r2, #15
   1cac0:	d905      	bls.n	1cace <_Unwind_VRS_Get+0x22>
   1cac2:	2002      	movs	r0, #2
   1cac4:	f85d fb04 	ldr.w	pc, [sp], #4
   1cac8:	2001      	movs	r0, #1
   1caca:	f85d fb04 	ldr.w	pc, [sp], #4
   1cace:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cad2:	4618      	mov	r0, r3
   1cad4:	6853      	ldr	r3, [r2, #4]
   1cad6:	9a01      	ldr	r2, [sp, #4]
   1cad8:	6013      	str	r3, [r2, #0]
   1cada:	f85d fb04 	ldr.w	pc, [sp], #4
   1cade:	bf00      	nop

0001cae0 <_Unwind_GetGR>:
   1cae0:	b510      	push	{r4, lr}
   1cae2:	b084      	sub	sp, #16
   1cae4:	2300      	movs	r3, #0
   1cae6:	ac03      	add	r4, sp, #12
   1cae8:	460a      	mov	r2, r1
   1caea:	9400      	str	r4, [sp, #0]
   1caec:	4619      	mov	r1, r3
   1caee:	f7ff ffdd 	bl	1caac <_Unwind_VRS_Get>
   1caf2:	9803      	ldr	r0, [sp, #12]
   1caf4:	b004      	add	sp, #16
   1caf6:	bd10      	pop	{r4, pc}

0001caf8 <_Unwind_VRS_Set>:
   1caf8:	b500      	push	{lr}
   1cafa:	2904      	cmp	r1, #4
   1cafc:	d807      	bhi.n	1cb0e <_Unwind_VRS_Set+0x16>
   1cafe:	e8df f001 	tbb	[pc, r1]
   1cb02:	0903      	.short	0x0903
   1cb04:	0906      	.short	0x0906
   1cb06:	09          	.byte	0x09
   1cb07:	00          	.byte	0x00
   1cb08:	b90b      	cbnz	r3, 1cb0e <_Unwind_VRS_Set+0x16>
   1cb0a:	2a0f      	cmp	r2, #15
   1cb0c:	d905      	bls.n	1cb1a <_Unwind_VRS_Set+0x22>
   1cb0e:	2002      	movs	r0, #2
   1cb10:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb14:	2001      	movs	r0, #1
   1cb16:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb1a:	9901      	ldr	r1, [sp, #4]
   1cb1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cb20:	6809      	ldr	r1, [r1, #0]
   1cb22:	6051      	str	r1, [r2, #4]
   1cb24:	4618      	mov	r0, r3
   1cb26:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb2a:	bf00      	nop

0001cb2c <_Unwind_SetGR>:
   1cb2c:	b510      	push	{r4, lr}
   1cb2e:	b084      	sub	sp, #16
   1cb30:	ac04      	add	r4, sp, #16
   1cb32:	2300      	movs	r3, #0
   1cb34:	f844 2d04 	str.w	r2, [r4, #-4]!
   1cb38:	460a      	mov	r2, r1
   1cb3a:	9400      	str	r4, [sp, #0]
   1cb3c:	4619      	mov	r1, r3
   1cb3e:	f7ff ffdb 	bl	1caf8 <_Unwind_VRS_Set>
   1cb42:	b004      	add	sp, #16
   1cb44:	bd10      	pop	{r4, pc}
   1cb46:	bf00      	nop

0001cb48 <__gnu_Unwind_Backtrace>:
   1cb48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb4a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1cb4c:	6413      	str	r3, [r2, #64]	; 0x40
   1cb4e:	1d15      	adds	r5, r2, #4
   1cb50:	4607      	mov	r7, r0
   1cb52:	460e      	mov	r6, r1
   1cb54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb56:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1cb5a:	ac17      	add	r4, sp, #92	; 0x5c
   1cb5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cb6a:	f04f 35ff 	mov.w	r5, #4294967295
   1cb6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1cb72:	9516      	str	r5, [sp, #88]	; 0x58
   1cb74:	e010      	b.n	1cb98 <__gnu_Unwind_Backtrace+0x50>
   1cb76:	a816      	add	r0, sp, #88	; 0x58
   1cb78:	f7ff ffd8 	bl	1cb2c <_Unwind_SetGR>
   1cb7c:	4631      	mov	r1, r6
   1cb7e:	a816      	add	r0, sp, #88	; 0x58
   1cb80:	47b8      	blx	r7
   1cb82:	aa16      	add	r2, sp, #88	; 0x58
   1cb84:	4669      	mov	r1, sp
   1cb86:	b978      	cbnz	r0, 1cba8 <__gnu_Unwind_Backtrace+0x60>
   1cb88:	9b04      	ldr	r3, [sp, #16]
   1cb8a:	2008      	movs	r0, #8
   1cb8c:	4798      	blx	r3
   1cb8e:	2805      	cmp	r0, #5
   1cb90:	4604      	mov	r4, r0
   1cb92:	d00a      	beq.n	1cbaa <__gnu_Unwind_Backtrace+0x62>
   1cb94:	2809      	cmp	r0, #9
   1cb96:	d007      	beq.n	1cba8 <__gnu_Unwind_Backtrace+0x60>
   1cb98:	9926      	ldr	r1, [sp, #152]	; 0x98
   1cb9a:	4668      	mov	r0, sp
   1cb9c:	f7ff fe06 	bl	1c7ac <get_eit_entry>
   1cba0:	466a      	mov	r2, sp
   1cba2:	210c      	movs	r1, #12
   1cba4:	2800      	cmp	r0, #0
   1cba6:	d0e6      	beq.n	1cb76 <__gnu_Unwind_Backtrace+0x2e>
   1cba8:	2409      	movs	r4, #9
   1cbaa:	a816      	add	r0, sp, #88	; 0x58
   1cbac:	f7ff fe4e 	bl	1c84c <restore_non_core_regs>
   1cbb0:	4620      	mov	r0, r4
   1cbb2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1cbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cbb8 <__gnu_unwind_pr_common>:
   1cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbbc:	460d      	mov	r5, r1
   1cbbe:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1cbc0:	b08b      	sub	sp, #44	; 0x2c
   1cbc2:	1d0c      	adds	r4, r1, #4
   1cbc4:	6809      	ldr	r1, [r1, #0]
   1cbc6:	9107      	str	r1, [sp, #28]
   1cbc8:	4691      	mov	r9, r2
   1cbca:	9408      	str	r4, [sp, #32]
   1cbcc:	f000 0b03 	and.w	fp, r0, #3
   1cbd0:	461e      	mov	r6, r3
   1cbd2:	2b00      	cmp	r3, #0
   1cbd4:	d160      	bne.n	1cc98 <__gnu_unwind_pr_common+0xe0>
   1cbd6:	0209      	lsls	r1, r1, #8
   1cbd8:	2303      	movs	r3, #3
   1cbda:	9107      	str	r1, [sp, #28]
   1cbdc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1cbe0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cbe4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cbe6:	f1bb 0f02 	cmp.w	fp, #2
   1cbea:	bf08      	it	eq
   1cbec:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1cbee:	f013 0301 	ands.w	r3, r3, #1
   1cbf2:	d140      	bne.n	1cc76 <__gnu_unwind_pr_common+0xbe>
   1cbf4:	9301      	str	r3, [sp, #4]
   1cbf6:	f000 0308 	and.w	r3, r0, #8
   1cbfa:	9303      	str	r3, [sp, #12]
   1cbfc:	f8d4 8000 	ldr.w	r8, [r4]
   1cc00:	f1b8 0f00 	cmp.w	r8, #0
   1cc04:	d039      	beq.n	1cc7a <__gnu_unwind_pr_common+0xc2>
   1cc06:	2e02      	cmp	r6, #2
   1cc08:	d043      	beq.n	1cc92 <__gnu_unwind_pr_common+0xda>
   1cc0a:	f8b4 8000 	ldrh.w	r8, [r4]
   1cc0e:	8867      	ldrh	r7, [r4, #2]
   1cc10:	3404      	adds	r4, #4
   1cc12:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1cc14:	f027 0a01 	bic.w	sl, r7, #1
   1cc18:	210f      	movs	r1, #15
   1cc1a:	4648      	mov	r0, r9
   1cc1c:	449a      	add	sl, r3
   1cc1e:	f7ff ff5f 	bl	1cae0 <_Unwind_GetGR>
   1cc22:	4582      	cmp	sl, r0
   1cc24:	d833      	bhi.n	1cc8e <__gnu_unwind_pr_common+0xd6>
   1cc26:	f028 0301 	bic.w	r3, r8, #1
   1cc2a:	449a      	add	sl, r3
   1cc2c:	4550      	cmp	r0, sl
   1cc2e:	bf2c      	ite	cs
   1cc30:	2000      	movcs	r0, #0
   1cc32:	2001      	movcc	r0, #1
   1cc34:	007f      	lsls	r7, r7, #1
   1cc36:	f007 0702 	and.w	r7, r7, #2
   1cc3a:	f008 0801 	and.w	r8, r8, #1
   1cc3e:	ea47 0708 	orr.w	r7, r7, r8
   1cc42:	2f01      	cmp	r7, #1
   1cc44:	d03e      	beq.n	1ccc4 <__gnu_unwind_pr_common+0x10c>
   1cc46:	d335      	bcc.n	1ccb4 <__gnu_unwind_pr_common+0xfc>
   1cc48:	2f02      	cmp	r7, #2
   1cc4a:	d11c      	bne.n	1cc86 <__gnu_unwind_pr_common+0xce>
   1cc4c:	6823      	ldr	r3, [r4, #0]
   1cc4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1cc52:	9202      	str	r2, [sp, #8]
   1cc54:	f1bb 0f00 	cmp.w	fp, #0
   1cc58:	d176      	bne.n	1cd48 <__gnu_unwind_pr_common+0x190>
   1cc5a:	b128      	cbz	r0, 1cc68 <__gnu_unwind_pr_common+0xb0>
   1cc5c:	9903      	ldr	r1, [sp, #12]
   1cc5e:	2900      	cmp	r1, #0
   1cc60:	d07e      	beq.n	1cd60 <__gnu_unwind_pr_common+0x1a8>
   1cc62:	2a00      	cmp	r2, #0
   1cc64:	f000 80a6 	beq.w	1cdb4 <__gnu_unwind_pr_common+0x1fc>
   1cc68:	2b00      	cmp	r3, #0
   1cc6a:	db77      	blt.n	1cd5c <__gnu_unwind_pr_common+0x1a4>
   1cc6c:	9b02      	ldr	r3, [sp, #8]
   1cc6e:	3301      	adds	r3, #1
   1cc70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1cc74:	e7c2      	b.n	1cbfc <__gnu_unwind_pr_common+0x44>
   1cc76:	2300      	movs	r3, #0
   1cc78:	9301      	str	r3, [sp, #4]
   1cc7a:	2e02      	cmp	r6, #2
   1cc7c:	dd3e      	ble.n	1ccfc <__gnu_unwind_pr_common+0x144>
   1cc7e:	f7ff fe17 	bl	1c8b0 <__gnu_unwind_24bit.isra.1>
   1cc82:	2800      	cmp	r0, #0
   1cc84:	d040      	beq.n	1cd08 <__gnu_unwind_pr_common+0x150>
   1cc86:	2009      	movs	r0, #9
   1cc88:	b00b      	add	sp, #44	; 0x2c
   1cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc8e:	2000      	movs	r0, #0
   1cc90:	e7d0      	b.n	1cc34 <__gnu_unwind_pr_common+0x7c>
   1cc92:	6867      	ldr	r7, [r4, #4]
   1cc94:	3408      	adds	r4, #8
   1cc96:	e7bc      	b.n	1cc12 <__gnu_unwind_pr_common+0x5a>
   1cc98:	2b02      	cmp	r3, #2
   1cc9a:	dca3      	bgt.n	1cbe4 <__gnu_unwind_pr_common+0x2c>
   1cc9c:	0c0b      	lsrs	r3, r1, #16
   1cc9e:	b2da      	uxtb	r2, r3
   1cca0:	0409      	lsls	r1, r1, #16
   1cca2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1cca6:	2302      	movs	r3, #2
   1cca8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1ccac:	9107      	str	r1, [sp, #28]
   1ccae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1ccb2:	e797      	b.n	1cbe4 <__gnu_unwind_pr_common+0x2c>
   1ccb4:	f1bb 0f00 	cmp.w	fp, #0
   1ccb8:	d002      	beq.n	1ccc0 <__gnu_unwind_pr_common+0x108>
   1ccba:	2800      	cmp	r0, #0
   1ccbc:	f040 80bd 	bne.w	1ce3a <__gnu_unwind_pr_common+0x282>
   1ccc0:	3404      	adds	r4, #4
   1ccc2:	e79b      	b.n	1cbfc <__gnu_unwind_pr_common+0x44>
   1ccc4:	f1bb 0f00 	cmp.w	fp, #0
   1ccc8:	d125      	bne.n	1cd16 <__gnu_unwind_pr_common+0x15e>
   1ccca:	b1a8      	cbz	r0, 1ccf8 <__gnu_unwind_pr_common+0x140>
   1cccc:	e894 000c 	ldmia.w	r4, {r2, r3}
   1ccd0:	1c99      	adds	r1, r3, #2
   1ccd2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1ccd6:	d0d6      	beq.n	1cc86 <__gnu_unwind_pr_common+0xce>
   1ccd8:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1ccdc:	3301      	adds	r3, #1
   1ccde:	9106      	str	r1, [sp, #24]
   1cce0:	f000 80a3 	beq.w	1ce2a <__gnu_unwind_pr_common+0x272>
   1cce4:	1d20      	adds	r0, r4, #4
   1cce6:	f7ff fddd 	bl	1c8a4 <_Unwind_decode_typeinfo_ptr.isra.0>
   1ccea:	ab06      	add	r3, sp, #24
   1ccec:	4601      	mov	r1, r0
   1ccee:	4628      	mov	r0, r5
   1ccf0:	f7f6 fda8 	bl	13844 <__cxa_type_match>
   1ccf4:	2800      	cmp	r0, #0
   1ccf6:	d177      	bne.n	1cde8 <__gnu_unwind_pr_common+0x230>
   1ccf8:	3408      	adds	r4, #8
   1ccfa:	e77f      	b.n	1cbfc <__gnu_unwind_pr_common+0x44>
   1ccfc:	a907      	add	r1, sp, #28
   1ccfe:	4648      	mov	r0, r9
   1cd00:	f000 faee 	bl	1d2e0 <__gnu_unwind_execute>
   1cd04:	2800      	cmp	r0, #0
   1cd06:	d1be      	bne.n	1cc86 <__gnu_unwind_pr_common+0xce>
   1cd08:	9b01      	ldr	r3, [sp, #4]
   1cd0a:	2b00      	cmp	r3, #0
   1cd0c:	d15c      	bne.n	1cdc8 <__gnu_unwind_pr_common+0x210>
   1cd0e:	2008      	movs	r0, #8
   1cd10:	b00b      	add	sp, #44	; 0x2c
   1cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd16:	210d      	movs	r1, #13
   1cd18:	4648      	mov	r0, r9
   1cd1a:	6a2f      	ldr	r7, [r5, #32]
   1cd1c:	f7ff fee0 	bl	1cae0 <_Unwind_GetGR>
   1cd20:	4287      	cmp	r7, r0
   1cd22:	d1e9      	bne.n	1ccf8 <__gnu_unwind_pr_common+0x140>
   1cd24:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cd26:	429c      	cmp	r4, r3
   1cd28:	d1e6      	bne.n	1ccf8 <__gnu_unwind_pr_common+0x140>
   1cd2a:	4620      	mov	r0, r4
   1cd2c:	f7ff fcf0 	bl	1c710 <selfrel_offset31>
   1cd30:	210f      	movs	r1, #15
   1cd32:	4602      	mov	r2, r0
   1cd34:	4648      	mov	r0, r9
   1cd36:	f7ff fef9 	bl	1cb2c <_Unwind_SetGR>
   1cd3a:	4648      	mov	r0, r9
   1cd3c:	462a      	mov	r2, r5
   1cd3e:	2100      	movs	r1, #0
   1cd40:	f7ff fef4 	bl	1cb2c <_Unwind_SetGR>
   1cd44:	2007      	movs	r0, #7
   1cd46:	e79f      	b.n	1cc88 <__gnu_unwind_pr_common+0xd0>
   1cd48:	210d      	movs	r1, #13
   1cd4a:	4648      	mov	r0, r9
   1cd4c:	6a2f      	ldr	r7, [r5, #32]
   1cd4e:	f7ff fec7 	bl	1cae0 <_Unwind_GetGR>
   1cd52:	4287      	cmp	r7, r0
   1cd54:	d058      	beq.n	1ce08 <__gnu_unwind_pr_common+0x250>
   1cd56:	6823      	ldr	r3, [r4, #0]
   1cd58:	2b00      	cmp	r3, #0
   1cd5a:	da87      	bge.n	1cc6c <__gnu_unwind_pr_common+0xb4>
   1cd5c:	3404      	adds	r4, #4
   1cd5e:	e785      	b.n	1cc6c <__gnu_unwind_pr_common+0xb4>
   1cd60:	9b02      	ldr	r3, [sp, #8]
   1cd62:	b33b      	cbz	r3, 1cdb4 <__gnu_unwind_pr_common+0x1fc>
   1cd64:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1cd68:	1d27      	adds	r7, r4, #4
   1cd6a:	f8cd b010 	str.w	fp, [sp, #16]
   1cd6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1cd72:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cd76:	9605      	str	r6, [sp, #20]
   1cd78:	46a3      	mov	fp, r4
   1cd7a:	461c      	mov	r4, r3
   1cd7c:	e002      	b.n	1cd84 <__gnu_unwind_pr_common+0x1cc>
   1cd7e:	45b2      	cmp	sl, r6
   1cd80:	46b0      	mov	r8, r6
   1cd82:	d016      	beq.n	1cdb2 <__gnu_unwind_pr_common+0x1fa>
   1cd84:	4638      	mov	r0, r7
   1cd86:	9406      	str	r4, [sp, #24]
   1cd88:	f7ff fd8c 	bl	1c8a4 <_Unwind_decode_typeinfo_ptr.isra.0>
   1cd8c:	ab06      	add	r3, sp, #24
   1cd8e:	4601      	mov	r1, r0
   1cd90:	2200      	movs	r2, #0
   1cd92:	4628      	mov	r0, r5
   1cd94:	f7f6 fd56 	bl	13844 <__cxa_type_match>
   1cd98:	f108 0601 	add.w	r6, r8, #1
   1cd9c:	3704      	adds	r7, #4
   1cd9e:	2800      	cmp	r0, #0
   1cda0:	d0ed      	beq.n	1cd7e <__gnu_unwind_pr_common+0x1c6>
   1cda2:	9b02      	ldr	r3, [sp, #8]
   1cda4:	9e05      	ldr	r6, [sp, #20]
   1cda6:	4543      	cmp	r3, r8
   1cda8:	465c      	mov	r4, fp
   1cdaa:	f8dd b010 	ldr.w	fp, [sp, #16]
   1cdae:	d1d2      	bne.n	1cd56 <__gnu_unwind_pr_common+0x19e>
   1cdb0:	e000      	b.n	1cdb4 <__gnu_unwind_pr_common+0x1fc>
   1cdb2:	465c      	mov	r4, fp
   1cdb4:	4648      	mov	r0, r9
   1cdb6:	210d      	movs	r1, #13
   1cdb8:	f7ff fe92 	bl	1cae0 <_Unwind_GetGR>
   1cdbc:	9b06      	ldr	r3, [sp, #24]
   1cdbe:	6228      	str	r0, [r5, #32]
   1cdc0:	62ac      	str	r4, [r5, #40]	; 0x28
   1cdc2:	626b      	str	r3, [r5, #36]	; 0x24
   1cdc4:	2006      	movs	r0, #6
   1cdc6:	e75f      	b.n	1cc88 <__gnu_unwind_pr_common+0xd0>
   1cdc8:	210f      	movs	r1, #15
   1cdca:	4648      	mov	r0, r9
   1cdcc:	f7ff fe88 	bl	1cae0 <_Unwind_GetGR>
   1cdd0:	210e      	movs	r1, #14
   1cdd2:	4602      	mov	r2, r0
   1cdd4:	4648      	mov	r0, r9
   1cdd6:	f7ff fea9 	bl	1cb2c <_Unwind_SetGR>
   1cdda:	4648      	mov	r0, r9
   1cddc:	4a29      	ldr	r2, [pc, #164]	; (1ce84 <__gnu_unwind_pr_common+0x2cc>)
   1cdde:	210f      	movs	r1, #15
   1cde0:	f7ff fea4 	bl	1cb2c <_Unwind_SetGR>
   1cde4:	2007      	movs	r0, #7
   1cde6:	e74f      	b.n	1cc88 <__gnu_unwind_pr_common+0xd0>
   1cde8:	4607      	mov	r7, r0
   1cdea:	210d      	movs	r1, #13
   1cdec:	4648      	mov	r0, r9
   1cdee:	f7ff fe77 	bl	1cae0 <_Unwind_GetGR>
   1cdf2:	2f02      	cmp	r7, #2
   1cdf4:	6228      	str	r0, [r5, #32]
   1cdf6:	d11d      	bne.n	1ce34 <__gnu_unwind_pr_common+0x27c>
   1cdf8:	462b      	mov	r3, r5
   1cdfa:	9a06      	ldr	r2, [sp, #24]
   1cdfc:	f843 2f2c 	str.w	r2, [r3, #44]!
   1ce00:	626b      	str	r3, [r5, #36]	; 0x24
   1ce02:	62ac      	str	r4, [r5, #40]	; 0x28
   1ce04:	2006      	movs	r0, #6
   1ce06:	e73f      	b.n	1cc88 <__gnu_unwind_pr_common+0xd0>
   1ce08:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ce0a:	429c      	cmp	r4, r3
   1ce0c:	d1a3      	bne.n	1cd56 <__gnu_unwind_pr_common+0x19e>
   1ce0e:	2204      	movs	r2, #4
   1ce10:	2700      	movs	r7, #0
   1ce12:	18a3      	adds	r3, r4, r2
   1ce14:	9902      	ldr	r1, [sp, #8]
   1ce16:	62a9      	str	r1, [r5, #40]	; 0x28
   1ce18:	62ef      	str	r7, [r5, #44]	; 0x2c
   1ce1a:	632a      	str	r2, [r5, #48]	; 0x30
   1ce1c:	636b      	str	r3, [r5, #52]	; 0x34
   1ce1e:	6823      	ldr	r3, [r4, #0]
   1ce20:	42bb      	cmp	r3, r7
   1ce22:	db1d      	blt.n	1ce60 <__gnu_unwind_pr_common+0x2a8>
   1ce24:	2301      	movs	r3, #1
   1ce26:	9301      	str	r3, [sp, #4]
   1ce28:	e720      	b.n	1cc6c <__gnu_unwind_pr_common+0xb4>
   1ce2a:	4648      	mov	r0, r9
   1ce2c:	210d      	movs	r1, #13
   1ce2e:	f7ff fe57 	bl	1cae0 <_Unwind_GetGR>
   1ce32:	6228      	str	r0, [r5, #32]
   1ce34:	9b06      	ldr	r3, [sp, #24]
   1ce36:	626b      	str	r3, [r5, #36]	; 0x24
   1ce38:	e7e3      	b.n	1ce02 <__gnu_unwind_pr_common+0x24a>
   1ce3a:	4620      	mov	r0, r4
   1ce3c:	f7ff fc68 	bl	1c710 <selfrel_offset31>
   1ce40:	3404      	adds	r4, #4
   1ce42:	4606      	mov	r6, r0
   1ce44:	63ac      	str	r4, [r5, #56]	; 0x38
   1ce46:	4628      	mov	r0, r5
   1ce48:	f7f6 fd58 	bl	138fc <__cxa_begin_cleanup>
   1ce4c:	2800      	cmp	r0, #0
   1ce4e:	f43f af1a 	beq.w	1cc86 <__gnu_unwind_pr_common+0xce>
   1ce52:	4648      	mov	r0, r9
   1ce54:	4632      	mov	r2, r6
   1ce56:	210f      	movs	r1, #15
   1ce58:	f7ff fe68 	bl	1cb2c <_Unwind_SetGR>
   1ce5c:	2007      	movs	r0, #7
   1ce5e:	e713      	b.n	1cc88 <__gnu_unwind_pr_common+0xd0>
   1ce60:	4608      	mov	r0, r1
   1ce62:	3001      	adds	r0, #1
   1ce64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1ce68:	f7ff fc52 	bl	1c710 <selfrel_offset31>
   1ce6c:	210f      	movs	r1, #15
   1ce6e:	4602      	mov	r2, r0
   1ce70:	4648      	mov	r0, r9
   1ce72:	f7ff fe5b 	bl	1cb2c <_Unwind_SetGR>
   1ce76:	4648      	mov	r0, r9
   1ce78:	462a      	mov	r2, r5
   1ce7a:	4639      	mov	r1, r7
   1ce7c:	f7ff fe56 	bl	1cb2c <_Unwind_SetGR>
   1ce80:	2007      	movs	r0, #7
   1ce82:	e701      	b.n	1cc88 <__gnu_unwind_pr_common+0xd0>
   1ce84:	00013a2d 	.word	0x00013a2d

0001ce88 <__aeabi_unwind_cpp_pr0>:
   1ce88:	2300      	movs	r3, #0
   1ce8a:	e695      	b.n	1cbb8 <__gnu_unwind_pr_common>

0001ce8c <__aeabi_unwind_cpp_pr1>:
   1ce8c:	2301      	movs	r3, #1
   1ce8e:	e693      	b.n	1cbb8 <__gnu_unwind_pr_common>

0001ce90 <__aeabi_unwind_cpp_pr2>:
   1ce90:	2302      	movs	r3, #2
   1ce92:	e691      	b.n	1cbb8 <__gnu_unwind_pr_common>

0001ce94 <_Unwind_VRS_Pop>:
   1ce94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce96:	4604      	mov	r4, r0
   1ce98:	b0c5      	sub	sp, #276	; 0x114
   1ce9a:	2904      	cmp	r1, #4
   1ce9c:	d80d      	bhi.n	1ceba <_Unwind_VRS_Pop+0x26>
   1ce9e:	e8df f001 	tbb	[pc, r1]
   1cea2:	0353      	.short	0x0353
   1cea4:	310c      	.short	0x310c
   1cea6:	0f          	.byte	0x0f
   1cea7:	00          	.byte	0x00
   1cea8:	2b01      	cmp	r3, #1
   1ceaa:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1ceae:	b295      	uxth	r5, r2
   1ceb0:	d162      	bne.n	1cf78 <_Unwind_VRS_Pop+0xe4>
   1ceb2:	1972      	adds	r2, r6, r5
   1ceb4:	2a10      	cmp	r2, #16
   1ceb6:	f240 809b 	bls.w	1cff0 <_Unwind_VRS_Pop+0x15c>
   1ceba:	2002      	movs	r0, #2
   1cebc:	b045      	add	sp, #276	; 0x114
   1cebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cec0:	2b00      	cmp	r3, #0
   1cec2:	d1fa      	bne.n	1ceba <_Unwind_VRS_Pop+0x26>
   1cec4:	2a10      	cmp	r2, #16
   1cec6:	d8f8      	bhi.n	1ceba <_Unwind_VRS_Pop+0x26>
   1cec8:	6823      	ldr	r3, [r4, #0]
   1ceca:	06d8      	lsls	r0, r3, #27
   1cecc:	f100 80c6 	bmi.w	1d05c <_Unwind_VRS_Pop+0x1c8>
   1ced0:	ae22      	add	r6, sp, #136	; 0x88
   1ced2:	4630      	mov	r0, r6
   1ced4:	9201      	str	r2, [sp, #4]
   1ced6:	f000 f973 	bl	1d1c0 <__gnu_Unwind_Save_WMMXC>
   1ceda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cedc:	9a01      	ldr	r2, [sp, #4]
   1cede:	2300      	movs	r3, #0
   1cee0:	2501      	movs	r5, #1
   1cee2:	fa05 f103 	lsl.w	r1, r5, r3
   1cee6:	4211      	tst	r1, r2
   1cee8:	d003      	beq.n	1cef2 <_Unwind_VRS_Pop+0x5e>
   1ceea:	6801      	ldr	r1, [r0, #0]
   1ceec:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1cef0:	3004      	adds	r0, #4
   1cef2:	3301      	adds	r3, #1
   1cef4:	2b04      	cmp	r3, #4
   1cef6:	d1f4      	bne.n	1cee2 <_Unwind_VRS_Pop+0x4e>
   1cef8:	63a0      	str	r0, [r4, #56]	; 0x38
   1cefa:	4630      	mov	r0, r6
   1cefc:	f000 f956 	bl	1d1ac <__gnu_Unwind_Restore_WMMXC>
   1cf00:	2000      	movs	r0, #0
   1cf02:	e7db      	b.n	1cebc <_Unwind_VRS_Pop+0x28>
   1cf04:	2b03      	cmp	r3, #3
   1cf06:	d1d8      	bne.n	1ceba <_Unwind_VRS_Pop+0x26>
   1cf08:	0c15      	lsrs	r5, r2, #16
   1cf0a:	b297      	uxth	r7, r2
   1cf0c:	19eb      	adds	r3, r5, r7
   1cf0e:	2b10      	cmp	r3, #16
   1cf10:	d8d3      	bhi.n	1ceba <_Unwind_VRS_Pop+0x26>
   1cf12:	6823      	ldr	r3, [r4, #0]
   1cf14:	071e      	lsls	r6, r3, #28
   1cf16:	f100 80b5 	bmi.w	1d084 <_Unwind_VRS_Pop+0x1f0>
   1cf1a:	ae22      	add	r6, sp, #136	; 0x88
   1cf1c:	4630      	mov	r0, r6
   1cf1e:	f000 f923 	bl	1d168 <__gnu_Unwind_Save_WMMXD>
   1cf22:	00ed      	lsls	r5, r5, #3
   1cf24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cf26:	b14f      	cbz	r7, 1cf3c <_Unwind_VRS_Pop+0xa8>
   1cf28:	3d04      	subs	r5, #4
   1cf2a:	1971      	adds	r1, r6, r5
   1cf2c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1cf30:	f853 2b04 	ldr.w	r2, [r3], #4
   1cf34:	f841 2f04 	str.w	r2, [r1, #4]!
   1cf38:	4283      	cmp	r3, r0
   1cf3a:	d1f9      	bne.n	1cf30 <_Unwind_VRS_Pop+0x9c>
   1cf3c:	4630      	mov	r0, r6
   1cf3e:	63a3      	str	r3, [r4, #56]	; 0x38
   1cf40:	f000 f8f0 	bl	1d124 <__gnu_Unwind_Restore_WMMXD>
   1cf44:	2000      	movs	r0, #0
   1cf46:	e7b9      	b.n	1cebc <_Unwind_VRS_Pop+0x28>
   1cf48:	2b00      	cmp	r3, #0
   1cf4a:	d1b6      	bne.n	1ceba <_Unwind_VRS_Pop+0x26>
   1cf4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1cf4e:	b297      	uxth	r7, r2
   1cf50:	1d20      	adds	r0, r4, #4
   1cf52:	2601      	movs	r6, #1
   1cf54:	fa06 f103 	lsl.w	r1, r6, r3
   1cf58:	4239      	tst	r1, r7
   1cf5a:	f103 0301 	add.w	r3, r3, #1
   1cf5e:	d002      	beq.n	1cf66 <_Unwind_VRS_Pop+0xd2>
   1cf60:	6829      	ldr	r1, [r5, #0]
   1cf62:	6001      	str	r1, [r0, #0]
   1cf64:	3504      	adds	r5, #4
   1cf66:	2b10      	cmp	r3, #16
   1cf68:	f100 0004 	add.w	r0, r0, #4
   1cf6c:	d1f2      	bne.n	1cf54 <_Unwind_VRS_Pop+0xc0>
   1cf6e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1cf72:	d13b      	bne.n	1cfec <_Unwind_VRS_Pop+0x158>
   1cf74:	63a5      	str	r5, [r4, #56]	; 0x38
   1cf76:	e7a1      	b.n	1cebc <_Unwind_VRS_Pop+0x28>
   1cf78:	2b05      	cmp	r3, #5
   1cf7a:	d19e      	bne.n	1ceba <_Unwind_VRS_Pop+0x26>
   1cf7c:	1977      	adds	r7, r6, r5
   1cf7e:	2f20      	cmp	r7, #32
   1cf80:	d89b      	bhi.n	1ceba <_Unwind_VRS_Pop+0x26>
   1cf82:	2e0f      	cmp	r6, #15
   1cf84:	d966      	bls.n	1d054 <_Unwind_VRS_Pop+0x1c0>
   1cf86:	462f      	mov	r7, r5
   1cf88:	2d00      	cmp	r5, #0
   1cf8a:	d13a      	bne.n	1d002 <_Unwind_VRS_Pop+0x16e>
   1cf8c:	462a      	mov	r2, r5
   1cf8e:	2700      	movs	r7, #0
   1cf90:	2a00      	cmp	r2, #0
   1cf92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cf94:	dd72      	ble.n	1d07c <_Unwind_VRS_Pop+0x1e8>
   1cf96:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1cf9a:	4601      	mov	r1, r0
   1cf9c:	a844      	add	r0, sp, #272	; 0x110
   1cf9e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1cfa2:	388c      	subs	r0, #140	; 0x8c
   1cfa4:	f851 5b04 	ldr.w	r5, [r1], #4
   1cfa8:	f840 5f04 	str.w	r5, [r0, #4]!
   1cfac:	4291      	cmp	r1, r2
   1cfae:	d1f9      	bne.n	1cfa4 <_Unwind_VRS_Pop+0x110>
   1cfb0:	4608      	mov	r0, r1
   1cfb2:	b197      	cbz	r7, 1cfda <_Unwind_VRS_Pop+0x146>
   1cfb4:	2e10      	cmp	r6, #16
   1cfb6:	4632      	mov	r2, r6
   1cfb8:	a944      	add	r1, sp, #272	; 0x110
   1cfba:	bf38      	it	cc
   1cfbc:	2210      	movcc	r2, #16
   1cfbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1cfc2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1cfc6:	0079      	lsls	r1, r7, #1
   1cfc8:	3a04      	subs	r2, #4
   1cfca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cfce:	f850 5b04 	ldr.w	r5, [r0], #4
   1cfd2:	f842 5f04 	str.w	r5, [r2, #4]!
   1cfd6:	4288      	cmp	r0, r1
   1cfd8:	d1f9      	bne.n	1cfce <_Unwind_VRS_Pop+0x13a>
   1cfda:	2b01      	cmp	r3, #1
   1cfdc:	d048      	beq.n	1d070 <_Unwind_VRS_Pop+0x1dc>
   1cfde:	2e0f      	cmp	r6, #15
   1cfe0:	63a1      	str	r1, [r4, #56]	; 0x38
   1cfe2:	d933      	bls.n	1d04c <_Unwind_VRS_Pop+0x1b8>
   1cfe4:	b117      	cbz	r7, 1cfec <_Unwind_VRS_Pop+0x158>
   1cfe6:	a802      	add	r0, sp, #8
   1cfe8:	f000 f894 	bl	1d114 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1cfec:	2000      	movs	r0, #0
   1cfee:	e765      	b.n	1cebc <_Unwind_VRS_Pop+0x28>
   1cff0:	2e0f      	cmp	r6, #15
   1cff2:	f63f af62 	bhi.w	1ceba <_Unwind_VRS_Pop+0x26>
   1cff6:	2700      	movs	r7, #0
   1cff8:	6822      	ldr	r2, [r4, #0]
   1cffa:	07d1      	lsls	r1, r2, #31
   1cffc:	d417      	bmi.n	1d02e <_Unwind_VRS_Pop+0x19a>
   1cffe:	2f00      	cmp	r7, #0
   1d000:	d060      	beq.n	1d0c4 <_Unwind_VRS_Pop+0x230>
   1d002:	6822      	ldr	r2, [r4, #0]
   1d004:	0751      	lsls	r1, r2, #29
   1d006:	d445      	bmi.n	1d094 <_Unwind_VRS_Pop+0x200>
   1d008:	2b01      	cmp	r3, #1
   1d00a:	d04d      	beq.n	1d0a8 <_Unwind_VRS_Pop+0x214>
   1d00c:	2e0f      	cmp	r6, #15
   1d00e:	d806      	bhi.n	1d01e <_Unwind_VRS_Pop+0x18a>
   1d010:	a822      	add	r0, sp, #136	; 0x88
   1d012:	9301      	str	r3, [sp, #4]
   1d014:	f000 f87a 	bl	1d10c <__gnu_Unwind_Save_VFP_D>
   1d018:	9b01      	ldr	r3, [sp, #4]
   1d01a:	2f00      	cmp	r7, #0
   1d01c:	d0b6      	beq.n	1cf8c <_Unwind_VRS_Pop+0xf8>
   1d01e:	a802      	add	r0, sp, #8
   1d020:	9301      	str	r3, [sp, #4]
   1d022:	f000 f87b 	bl	1d11c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d026:	9b01      	ldr	r3, [sp, #4]
   1d028:	f1c6 0210 	rsb	r2, r6, #16
   1d02c:	e7b0      	b.n	1cf90 <_Unwind_VRS_Pop+0xfc>
   1d02e:	f022 0101 	bic.w	r1, r2, #1
   1d032:	2b05      	cmp	r3, #5
   1d034:	6021      	str	r1, [r4, #0]
   1d036:	9301      	str	r3, [sp, #4]
   1d038:	4620      	mov	r0, r4
   1d03a:	d03b      	beq.n	1d0b4 <_Unwind_VRS_Pop+0x220>
   1d03c:	f022 0203 	bic.w	r2, r2, #3
   1d040:	f840 2b48 	str.w	r2, [r0], #72
   1d044:	f000 f85a 	bl	1d0fc <__gnu_Unwind_Save_VFP>
   1d048:	9b01      	ldr	r3, [sp, #4]
   1d04a:	e7d8      	b.n	1cffe <_Unwind_VRS_Pop+0x16a>
   1d04c:	a822      	add	r0, sp, #136	; 0x88
   1d04e:	f000 f859 	bl	1d104 <__gnu_Unwind_Restore_VFP_D>
   1d052:	e7c7      	b.n	1cfe4 <_Unwind_VRS_Pop+0x150>
   1d054:	2f10      	cmp	r7, #16
   1d056:	d9ce      	bls.n	1cff6 <_Unwind_VRS_Pop+0x162>
   1d058:	3f10      	subs	r7, #16
   1d05a:	e7cd      	b.n	1cff8 <_Unwind_VRS_Pop+0x164>
   1d05c:	f023 0310 	bic.w	r3, r3, #16
   1d060:	6023      	str	r3, [r4, #0]
   1d062:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d066:	9201      	str	r2, [sp, #4]
   1d068:	f000 f8aa 	bl	1d1c0 <__gnu_Unwind_Save_WMMXC>
   1d06c:	9a01      	ldr	r2, [sp, #4]
   1d06e:	e72f      	b.n	1ced0 <_Unwind_VRS_Pop+0x3c>
   1d070:	3104      	adds	r1, #4
   1d072:	63a1      	str	r1, [r4, #56]	; 0x38
   1d074:	a822      	add	r0, sp, #136	; 0x88
   1d076:	f000 f83d 	bl	1d0f4 <__gnu_Unwind_Restore_VFP>
   1d07a:	e7b7      	b.n	1cfec <_Unwind_VRS_Pop+0x158>
   1d07c:	2f00      	cmp	r7, #0
   1d07e:	d199      	bne.n	1cfb4 <_Unwind_VRS_Pop+0x120>
   1d080:	4601      	mov	r1, r0
   1d082:	e7aa      	b.n	1cfda <_Unwind_VRS_Pop+0x146>
   1d084:	f023 0308 	bic.w	r3, r3, #8
   1d088:	6023      	str	r3, [r4, #0]
   1d08a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d08e:	f000 f86b 	bl	1d168 <__gnu_Unwind_Save_WMMXD>
   1d092:	e742      	b.n	1cf1a <_Unwind_VRS_Pop+0x86>
   1d094:	4620      	mov	r0, r4
   1d096:	f022 0204 	bic.w	r2, r2, #4
   1d09a:	f840 2bd0 	str.w	r2, [r0], #208
   1d09e:	9301      	str	r3, [sp, #4]
   1d0a0:	f000 f83c 	bl	1d11c <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d0a4:	9b01      	ldr	r3, [sp, #4]
   1d0a6:	e7af      	b.n	1d008 <_Unwind_VRS_Pop+0x174>
   1d0a8:	a822      	add	r0, sp, #136	; 0x88
   1d0aa:	9301      	str	r3, [sp, #4]
   1d0ac:	f000 f826 	bl	1d0fc <__gnu_Unwind_Save_VFP>
   1d0b0:	9b01      	ldr	r3, [sp, #4]
   1d0b2:	e7b9      	b.n	1d028 <_Unwind_VRS_Pop+0x194>
   1d0b4:	f041 0102 	orr.w	r1, r1, #2
   1d0b8:	f840 1b48 	str.w	r1, [r0], #72
   1d0bc:	f000 f826 	bl	1d10c <__gnu_Unwind_Save_VFP_D>
   1d0c0:	9b01      	ldr	r3, [sp, #4]
   1d0c2:	e79c      	b.n	1cffe <_Unwind_VRS_Pop+0x16a>
   1d0c4:	2b01      	cmp	r3, #1
   1d0c6:	d003      	beq.n	1d0d0 <_Unwind_VRS_Pop+0x23c>
   1d0c8:	2e0f      	cmp	r6, #15
   1d0ca:	f63f af5f 	bhi.w	1cf8c <_Unwind_VRS_Pop+0xf8>
   1d0ce:	e79f      	b.n	1d010 <_Unwind_VRS_Pop+0x17c>
   1d0d0:	a822      	add	r0, sp, #136	; 0x88
   1d0d2:	9301      	str	r3, [sp, #4]
   1d0d4:	f000 f812 	bl	1d0fc <__gnu_Unwind_Save_VFP>
   1d0d8:	9b01      	ldr	r3, [sp, #4]
   1d0da:	e757      	b.n	1cf8c <_Unwind_VRS_Pop+0xf8>

0001d0dc <__restore_core_regs>:
   1d0dc:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d0e0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d0e4:	469c      	mov	ip, r3
   1d0e6:	46a6      	mov	lr, r4
   1d0e8:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d0ec:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d0f0:	46e5      	mov	sp, ip
   1d0f2:	bd00      	pop	{pc}

0001d0f4 <__gnu_Unwind_Restore_VFP>:
   1d0f4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d0f8:	4770      	bx	lr
   1d0fa:	bf00      	nop

0001d0fc <__gnu_Unwind_Save_VFP>:
   1d0fc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d100:	4770      	bx	lr
   1d102:	bf00      	nop

0001d104 <__gnu_Unwind_Restore_VFP_D>:
   1d104:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d108:	4770      	bx	lr
   1d10a:	bf00      	nop

0001d10c <__gnu_Unwind_Save_VFP_D>:
   1d10c:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d110:	4770      	bx	lr
   1d112:	bf00      	nop

0001d114 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d114:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d118:	4770      	bx	lr
   1d11a:	bf00      	nop

0001d11c <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d11c:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d120:	4770      	bx	lr
   1d122:	bf00      	nop

0001d124 <__gnu_Unwind_Restore_WMMXD>:
   1d124:	ecf0 0102 	ldfe	f0, [r0], #8
   1d128:	ecf0 1102 	ldfe	f1, [r0], #8
   1d12c:	ecf0 2102 	ldfe	f2, [r0], #8
   1d130:	ecf0 3102 	ldfe	f3, [r0], #8
   1d134:	ecf0 4102 	ldfe	f4, [r0], #8
   1d138:	ecf0 5102 	ldfe	f5, [r0], #8
   1d13c:	ecf0 6102 	ldfe	f6, [r0], #8
   1d140:	ecf0 7102 	ldfe	f7, [r0], #8
   1d144:	ecf0 8102 	ldfp	f0, [r0], #8
   1d148:	ecf0 9102 	ldfp	f1, [r0], #8
   1d14c:	ecf0 a102 	ldfp	f2, [r0], #8
   1d150:	ecf0 b102 	ldfp	f3, [r0], #8
   1d154:	ecf0 c102 	ldfp	f4, [r0], #8
   1d158:	ecf0 d102 	ldfp	f5, [r0], #8
   1d15c:	ecf0 e102 	ldfp	f6, [r0], #8
   1d160:	ecf0 f102 	ldfp	f7, [r0], #8
   1d164:	4770      	bx	lr
   1d166:	bf00      	nop

0001d168 <__gnu_Unwind_Save_WMMXD>:
   1d168:	ece0 0102 	stfe	f0, [r0], #8
   1d16c:	ece0 1102 	stfe	f1, [r0], #8
   1d170:	ece0 2102 	stfe	f2, [r0], #8
   1d174:	ece0 3102 	stfe	f3, [r0], #8
   1d178:	ece0 4102 	stfe	f4, [r0], #8
   1d17c:	ece0 5102 	stfe	f5, [r0], #8
   1d180:	ece0 6102 	stfe	f6, [r0], #8
   1d184:	ece0 7102 	stfe	f7, [r0], #8
   1d188:	ece0 8102 	stfp	f0, [r0], #8
   1d18c:	ece0 9102 	stfp	f1, [r0], #8
   1d190:	ece0 a102 	stfp	f2, [r0], #8
   1d194:	ece0 b102 	stfp	f3, [r0], #8
   1d198:	ece0 c102 	stfp	f4, [r0], #8
   1d19c:	ece0 d102 	stfp	f5, [r0], #8
   1d1a0:	ece0 e102 	stfp	f6, [r0], #8
   1d1a4:	ece0 f102 	stfp	f7, [r0], #8
   1d1a8:	4770      	bx	lr
   1d1aa:	bf00      	nop

0001d1ac <__gnu_Unwind_Restore_WMMXC>:
   1d1ac:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d1b0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d1b4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d1b8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d1bc:	4770      	bx	lr
   1d1be:	bf00      	nop

0001d1c0 <__gnu_Unwind_Save_WMMXC>:
   1d1c0:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d1c4:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d1c8:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d1cc:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d1d0:	4770      	bx	lr
   1d1d2:	bf00      	nop

0001d1d4 <_Unwind_RaiseException>:
   1d1d4:	46ec      	mov	ip, sp
   1d1d6:	b500      	push	{lr}
   1d1d8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d1dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d1e0:	f04f 0300 	mov.w	r3, #0
   1d1e4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d1e8:	a901      	add	r1, sp, #4
   1d1ea:	f7ff fbf3 	bl	1c9d4 <__gnu_Unwind_RaiseException>
   1d1ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d1f2:	b012      	add	sp, #72	; 0x48
   1d1f4:	4770      	bx	lr
   1d1f6:	bf00      	nop

0001d1f8 <_Unwind_Resume>:
   1d1f8:	46ec      	mov	ip, sp
   1d1fa:	b500      	push	{lr}
   1d1fc:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d200:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d204:	f04f 0300 	mov.w	r3, #0
   1d208:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d20c:	a901      	add	r1, sp, #4
   1d20e:	f7ff fc1b 	bl	1ca48 <__gnu_Unwind_Resume>
   1d212:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d216:	b012      	add	sp, #72	; 0x48
   1d218:	4770      	bx	lr
   1d21a:	bf00      	nop

0001d21c <_Unwind_Resume_or_Rethrow>:
   1d21c:	46ec      	mov	ip, sp
   1d21e:	b500      	push	{lr}
   1d220:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d224:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d228:	f04f 0300 	mov.w	r3, #0
   1d22c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d230:	a901      	add	r1, sp, #4
   1d232:	f7ff fc2b 	bl	1ca8c <__gnu_Unwind_Resume_or_Rethrow>
   1d236:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d23a:	b012      	add	sp, #72	; 0x48
   1d23c:	4770      	bx	lr
   1d23e:	bf00      	nop

0001d240 <_Unwind_ForcedUnwind>:
   1d240:	46ec      	mov	ip, sp
   1d242:	b500      	push	{lr}
   1d244:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d248:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d24c:	f04f 0300 	mov.w	r3, #0
   1d250:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d254:	ab01      	add	r3, sp, #4
   1d256:	f7ff fbed 	bl	1ca34 <__gnu_Unwind_ForcedUnwind>
   1d25a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d25e:	b012      	add	sp, #72	; 0x48
   1d260:	4770      	bx	lr
   1d262:	bf00      	nop

0001d264 <_Unwind_Backtrace>:
   1d264:	46ec      	mov	ip, sp
   1d266:	b500      	push	{lr}
   1d268:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d26c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d270:	f04f 0300 	mov.w	r3, #0
   1d274:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d278:	aa01      	add	r2, sp, #4
   1d27a:	f7ff fc65 	bl	1cb48 <__gnu_Unwind_Backtrace>
   1d27e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d282:	b012      	add	sp, #72	; 0x48
   1d284:	4770      	bx	lr
   1d286:	bf00      	nop

0001d288 <next_unwind_byte>:
   1d288:	7a02      	ldrb	r2, [r0, #8]
   1d28a:	b91a      	cbnz	r2, 1d294 <next_unwind_byte+0xc>
   1d28c:	7a43      	ldrb	r3, [r0, #9]
   1d28e:	b943      	cbnz	r3, 1d2a2 <next_unwind_byte+0x1a>
   1d290:	20b0      	movs	r0, #176	; 0xb0
   1d292:	4770      	bx	lr
   1d294:	6803      	ldr	r3, [r0, #0]
   1d296:	3a01      	subs	r2, #1
   1d298:	7202      	strb	r2, [r0, #8]
   1d29a:	021a      	lsls	r2, r3, #8
   1d29c:	6002      	str	r2, [r0, #0]
   1d29e:	0e18      	lsrs	r0, r3, #24
   1d2a0:	4770      	bx	lr
   1d2a2:	6842      	ldr	r2, [r0, #4]
   1d2a4:	3b01      	subs	r3, #1
   1d2a6:	b410      	push	{r4}
   1d2a8:	7243      	strb	r3, [r0, #9]
   1d2aa:	6813      	ldr	r3, [r2, #0]
   1d2ac:	2103      	movs	r1, #3
   1d2ae:	1d14      	adds	r4, r2, #4
   1d2b0:	7201      	strb	r1, [r0, #8]
   1d2b2:	021a      	lsls	r2, r3, #8
   1d2b4:	6044      	str	r4, [r0, #4]
   1d2b6:	6002      	str	r2, [r0, #0]
   1d2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d2bc:	0e18      	lsrs	r0, r3, #24
   1d2be:	4770      	bx	lr

0001d2c0 <_Unwind_GetGR.constprop.0>:
   1d2c0:	b500      	push	{lr}
   1d2c2:	b085      	sub	sp, #20
   1d2c4:	aa03      	add	r2, sp, #12
   1d2c6:	2300      	movs	r3, #0
   1d2c8:	9200      	str	r2, [sp, #0]
   1d2ca:	4619      	mov	r1, r3
   1d2cc:	220c      	movs	r2, #12
   1d2ce:	f7ff fbed 	bl	1caac <_Unwind_VRS_Get>
   1d2d2:	9803      	ldr	r0, [sp, #12]
   1d2d4:	b005      	add	sp, #20
   1d2d6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d2da:	bf00      	nop

0001d2dc <unwind_UCB_from_context>:
   1d2dc:	e7f0      	b.n	1d2c0 <_Unwind_GetGR.constprop.0>
   1d2de:	bf00      	nop

0001d2e0 <__gnu_unwind_execute>:
   1d2e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d2e4:	4606      	mov	r6, r0
   1d2e6:	b085      	sub	sp, #20
   1d2e8:	460f      	mov	r7, r1
   1d2ea:	f04f 0800 	mov.w	r8, #0
   1d2ee:	4638      	mov	r0, r7
   1d2f0:	f7ff ffca 	bl	1d288 <next_unwind_byte>
   1d2f4:	28b0      	cmp	r0, #176	; 0xb0
   1d2f6:	4604      	mov	r4, r0
   1d2f8:	d023      	beq.n	1d342 <__gnu_unwind_execute+0x62>
   1d2fa:	0605      	lsls	r5, r0, #24
   1d2fc:	d427      	bmi.n	1d34e <__gnu_unwind_execute+0x6e>
   1d2fe:	2300      	movs	r3, #0
   1d300:	f10d 090c 	add.w	r9, sp, #12
   1d304:	4619      	mov	r1, r3
   1d306:	0085      	lsls	r5, r0, #2
   1d308:	220d      	movs	r2, #13
   1d30a:	f8cd 9000 	str.w	r9, [sp]
   1d30e:	4630      	mov	r0, r6
   1d310:	f7ff fbcc 	bl	1caac <_Unwind_VRS_Get>
   1d314:	b2ed      	uxtb	r5, r5
   1d316:	9b03      	ldr	r3, [sp, #12]
   1d318:	f8cd 9000 	str.w	r9, [sp]
   1d31c:	0660      	lsls	r0, r4, #25
   1d31e:	f105 0504 	add.w	r5, r5, #4
   1d322:	bf4c      	ite	mi
   1d324:	1b5d      	submi	r5, r3, r5
   1d326:	18ed      	addpl	r5, r5, r3
   1d328:	2300      	movs	r3, #0
   1d32a:	4619      	mov	r1, r3
   1d32c:	220d      	movs	r2, #13
   1d32e:	4630      	mov	r0, r6
   1d330:	9503      	str	r5, [sp, #12]
   1d332:	f7ff fbe1 	bl	1caf8 <_Unwind_VRS_Set>
   1d336:	4638      	mov	r0, r7
   1d338:	f7ff ffa6 	bl	1d288 <next_unwind_byte>
   1d33c:	28b0      	cmp	r0, #176	; 0xb0
   1d33e:	4604      	mov	r4, r0
   1d340:	d1db      	bne.n	1d2fa <__gnu_unwind_execute+0x1a>
   1d342:	f1b8 0f00 	cmp.w	r8, #0
   1d346:	f000 8095 	beq.w	1d474 <__gnu_unwind_execute+0x194>
   1d34a:	2000      	movs	r0, #0
   1d34c:	e01c      	b.n	1d388 <__gnu_unwind_execute+0xa8>
   1d34e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d352:	2b80      	cmp	r3, #128	; 0x80
   1d354:	d05d      	beq.n	1d412 <__gnu_unwind_execute+0x132>
   1d356:	2b90      	cmp	r3, #144	; 0x90
   1d358:	d019      	beq.n	1d38e <__gnu_unwind_execute+0xae>
   1d35a:	2ba0      	cmp	r3, #160	; 0xa0
   1d35c:	d02c      	beq.n	1d3b8 <__gnu_unwind_execute+0xd8>
   1d35e:	2bb0      	cmp	r3, #176	; 0xb0
   1d360:	d03f      	beq.n	1d3e2 <__gnu_unwind_execute+0x102>
   1d362:	2bc0      	cmp	r3, #192	; 0xc0
   1d364:	d06c      	beq.n	1d440 <__gnu_unwind_execute+0x160>
   1d366:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d36a:	2bd0      	cmp	r3, #208	; 0xd0
   1d36c:	d10b      	bne.n	1d386 <__gnu_unwind_execute+0xa6>
   1d36e:	f000 0207 	and.w	r2, r0, #7
   1d372:	3201      	adds	r2, #1
   1d374:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d378:	2305      	movs	r3, #5
   1d37a:	2101      	movs	r1, #1
   1d37c:	4630      	mov	r0, r6
   1d37e:	f7ff fd89 	bl	1ce94 <_Unwind_VRS_Pop>
   1d382:	2800      	cmp	r0, #0
   1d384:	d0b3      	beq.n	1d2ee <__gnu_unwind_execute+0xe>
   1d386:	2009      	movs	r0, #9
   1d388:	b005      	add	sp, #20
   1d38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d38e:	f000 030d 	and.w	r3, r0, #13
   1d392:	2b0d      	cmp	r3, #13
   1d394:	d0f7      	beq.n	1d386 <__gnu_unwind_execute+0xa6>
   1d396:	ad03      	add	r5, sp, #12
   1d398:	2300      	movs	r3, #0
   1d39a:	f000 020f 	and.w	r2, r0, #15
   1d39e:	4619      	mov	r1, r3
   1d3a0:	9500      	str	r5, [sp, #0]
   1d3a2:	4630      	mov	r0, r6
   1d3a4:	f7ff fb82 	bl	1caac <_Unwind_VRS_Get>
   1d3a8:	2300      	movs	r3, #0
   1d3aa:	9500      	str	r5, [sp, #0]
   1d3ac:	4619      	mov	r1, r3
   1d3ae:	220d      	movs	r2, #13
   1d3b0:	4630      	mov	r0, r6
   1d3b2:	f7ff fba1 	bl	1caf8 <_Unwind_VRS_Set>
   1d3b6:	e79a      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d3b8:	43c2      	mvns	r2, r0
   1d3ba:	f002 0307 	and.w	r3, r2, #7
   1d3be:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d3c2:	411a      	asrs	r2, r3
   1d3c4:	0701      	lsls	r1, r0, #28
   1d3c6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d3ca:	f04f 0300 	mov.w	r3, #0
   1d3ce:	bf48      	it	mi
   1d3d0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d3d4:	4619      	mov	r1, r3
   1d3d6:	4630      	mov	r0, r6
   1d3d8:	f7ff fd5c 	bl	1ce94 <_Unwind_VRS_Pop>
   1d3dc:	2800      	cmp	r0, #0
   1d3de:	d1d2      	bne.n	1d386 <__gnu_unwind_execute+0xa6>
   1d3e0:	e785      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d3e2:	28b1      	cmp	r0, #177	; 0xb1
   1d3e4:	d057      	beq.n	1d496 <__gnu_unwind_execute+0x1b6>
   1d3e6:	28b2      	cmp	r0, #178	; 0xb2
   1d3e8:	d068      	beq.n	1d4bc <__gnu_unwind_execute+0x1dc>
   1d3ea:	28b3      	cmp	r0, #179	; 0xb3
   1d3ec:	f000 8095 	beq.w	1d51a <__gnu_unwind_execute+0x23a>
   1d3f0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d3f4:	2bb4      	cmp	r3, #180	; 0xb4
   1d3f6:	d0c6      	beq.n	1d386 <__gnu_unwind_execute+0xa6>
   1d3f8:	f000 0207 	and.w	r2, r0, #7
   1d3fc:	3201      	adds	r2, #1
   1d3fe:	2301      	movs	r3, #1
   1d400:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d404:	4619      	mov	r1, r3
   1d406:	4630      	mov	r0, r6
   1d408:	f7ff fd44 	bl	1ce94 <_Unwind_VRS_Pop>
   1d40c:	2800      	cmp	r0, #0
   1d40e:	d1ba      	bne.n	1d386 <__gnu_unwind_execute+0xa6>
   1d410:	e76d      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d412:	4638      	mov	r0, r7
   1d414:	f7ff ff38 	bl	1d288 <next_unwind_byte>
   1d418:	0224      	lsls	r4, r4, #8
   1d41a:	4304      	orrs	r4, r0
   1d41c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d420:	d0b1      	beq.n	1d386 <__gnu_unwind_execute+0xa6>
   1d422:	0124      	lsls	r4, r4, #4
   1d424:	2300      	movs	r3, #0
   1d426:	b2a2      	uxth	r2, r4
   1d428:	4619      	mov	r1, r3
   1d42a:	4630      	mov	r0, r6
   1d42c:	f7ff fd32 	bl	1ce94 <_Unwind_VRS_Pop>
   1d430:	2800      	cmp	r0, #0
   1d432:	d1a8      	bne.n	1d386 <__gnu_unwind_execute+0xa6>
   1d434:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d438:	bf18      	it	ne
   1d43a:	f04f 0801 	movne.w	r8, #1
   1d43e:	e756      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d440:	28c6      	cmp	r0, #198	; 0xc6
   1d442:	d07d      	beq.n	1d540 <__gnu_unwind_execute+0x260>
   1d444:	28c7      	cmp	r0, #199	; 0xc7
   1d446:	f000 8086 	beq.w	1d556 <__gnu_unwind_execute+0x276>
   1d44a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d44e:	2bc0      	cmp	r3, #192	; 0xc0
   1d450:	f000 8094 	beq.w	1d57c <__gnu_unwind_execute+0x29c>
   1d454:	28c8      	cmp	r0, #200	; 0xc8
   1d456:	f000 809f 	beq.w	1d598 <__gnu_unwind_execute+0x2b8>
   1d45a:	28c9      	cmp	r0, #201	; 0xc9
   1d45c:	d193      	bne.n	1d386 <__gnu_unwind_execute+0xa6>
   1d45e:	4638      	mov	r0, r7
   1d460:	f7ff ff12 	bl	1d288 <next_unwind_byte>
   1d464:	0302      	lsls	r2, r0, #12
   1d466:	f000 000f 	and.w	r0, r0, #15
   1d46a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d46e:	3001      	adds	r0, #1
   1d470:	4302      	orrs	r2, r0
   1d472:	e781      	b.n	1d378 <__gnu_unwind_execute+0x98>
   1d474:	ac03      	add	r4, sp, #12
   1d476:	4643      	mov	r3, r8
   1d478:	220e      	movs	r2, #14
   1d47a:	4641      	mov	r1, r8
   1d47c:	9400      	str	r4, [sp, #0]
   1d47e:	4630      	mov	r0, r6
   1d480:	f7ff fb14 	bl	1caac <_Unwind_VRS_Get>
   1d484:	9400      	str	r4, [sp, #0]
   1d486:	4630      	mov	r0, r6
   1d488:	4643      	mov	r3, r8
   1d48a:	220f      	movs	r2, #15
   1d48c:	4641      	mov	r1, r8
   1d48e:	f7ff fb33 	bl	1caf8 <_Unwind_VRS_Set>
   1d492:	4640      	mov	r0, r8
   1d494:	e778      	b.n	1d388 <__gnu_unwind_execute+0xa8>
   1d496:	4638      	mov	r0, r7
   1d498:	f7ff fef6 	bl	1d288 <next_unwind_byte>
   1d49c:	2800      	cmp	r0, #0
   1d49e:	f43f af72 	beq.w	1d386 <__gnu_unwind_execute+0xa6>
   1d4a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d4a6:	f47f af6e 	bne.w	1d386 <__gnu_unwind_execute+0xa6>
   1d4aa:	4602      	mov	r2, r0
   1d4ac:	4619      	mov	r1, r3
   1d4ae:	4630      	mov	r0, r6
   1d4b0:	f7ff fcf0 	bl	1ce94 <_Unwind_VRS_Pop>
   1d4b4:	2800      	cmp	r0, #0
   1d4b6:	f47f af66 	bne.w	1d386 <__gnu_unwind_execute+0xa6>
   1d4ba:	e718      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d4bc:	2300      	movs	r3, #0
   1d4be:	f10d 090c 	add.w	r9, sp, #12
   1d4c2:	220d      	movs	r2, #13
   1d4c4:	4619      	mov	r1, r3
   1d4c6:	f8cd 9000 	str.w	r9, [sp]
   1d4ca:	4630      	mov	r0, r6
   1d4cc:	f7ff faee 	bl	1caac <_Unwind_VRS_Get>
   1d4d0:	4638      	mov	r0, r7
   1d4d2:	f7ff fed9 	bl	1d288 <next_unwind_byte>
   1d4d6:	0602      	lsls	r2, r0, #24
   1d4d8:	f04f 0402 	mov.w	r4, #2
   1d4dc:	d50c      	bpl.n	1d4f8 <__gnu_unwind_execute+0x218>
   1d4de:	9b03      	ldr	r3, [sp, #12]
   1d4e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d4e4:	40a0      	lsls	r0, r4
   1d4e6:	4403      	add	r3, r0
   1d4e8:	4638      	mov	r0, r7
   1d4ea:	9303      	str	r3, [sp, #12]
   1d4ec:	f7ff fecc 	bl	1d288 <next_unwind_byte>
   1d4f0:	0603      	lsls	r3, r0, #24
   1d4f2:	f104 0407 	add.w	r4, r4, #7
   1d4f6:	d4f2      	bmi.n	1d4de <__gnu_unwind_execute+0x1fe>
   1d4f8:	9b03      	ldr	r3, [sp, #12]
   1d4fa:	f8cd 9000 	str.w	r9, [sp]
   1d4fe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d502:	40a2      	lsls	r2, r4
   1d504:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d508:	2300      	movs	r3, #0
   1d50a:	4414      	add	r4, r2
   1d50c:	4619      	mov	r1, r3
   1d50e:	220d      	movs	r2, #13
   1d510:	4630      	mov	r0, r6
   1d512:	9403      	str	r4, [sp, #12]
   1d514:	f7ff faf0 	bl	1caf8 <_Unwind_VRS_Set>
   1d518:	e6e9      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d51a:	4638      	mov	r0, r7
   1d51c:	f7ff feb4 	bl	1d288 <next_unwind_byte>
   1d520:	0301      	lsls	r1, r0, #12
   1d522:	f000 000f 	and.w	r0, r0, #15
   1d526:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d52a:	1c42      	adds	r2, r0, #1
   1d52c:	2301      	movs	r3, #1
   1d52e:	430a      	orrs	r2, r1
   1d530:	4630      	mov	r0, r6
   1d532:	4619      	mov	r1, r3
   1d534:	f7ff fcae 	bl	1ce94 <_Unwind_VRS_Pop>
   1d538:	2800      	cmp	r0, #0
   1d53a:	f47f af24 	bne.w	1d386 <__gnu_unwind_execute+0xa6>
   1d53e:	e6d6      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d540:	4638      	mov	r0, r7
   1d542:	f7ff fea1 	bl	1d288 <next_unwind_byte>
   1d546:	0301      	lsls	r1, r0, #12
   1d548:	f000 000f 	and.w	r0, r0, #15
   1d54c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d550:	1c42      	adds	r2, r0, #1
   1d552:	2303      	movs	r3, #3
   1d554:	e7eb      	b.n	1d52e <__gnu_unwind_execute+0x24e>
   1d556:	4638      	mov	r0, r7
   1d558:	f7ff fe96 	bl	1d288 <next_unwind_byte>
   1d55c:	2800      	cmp	r0, #0
   1d55e:	f43f af12 	beq.w	1d386 <__gnu_unwind_execute+0xa6>
   1d562:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d566:	f47f af0e 	bne.w	1d386 <__gnu_unwind_execute+0xa6>
   1d56a:	4602      	mov	r2, r0
   1d56c:	2104      	movs	r1, #4
   1d56e:	4630      	mov	r0, r6
   1d570:	f7ff fc90 	bl	1ce94 <_Unwind_VRS_Pop>
   1d574:	2800      	cmp	r0, #0
   1d576:	f47f af06 	bne.w	1d386 <__gnu_unwind_execute+0xa6>
   1d57a:	e6b8      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d57c:	f000 020f 	and.w	r2, r0, #15
   1d580:	3201      	adds	r2, #1
   1d582:	2303      	movs	r3, #3
   1d584:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d588:	4619      	mov	r1, r3
   1d58a:	4630      	mov	r0, r6
   1d58c:	f7ff fc82 	bl	1ce94 <_Unwind_VRS_Pop>
   1d590:	2800      	cmp	r0, #0
   1d592:	f47f aef8 	bne.w	1d386 <__gnu_unwind_execute+0xa6>
   1d596:	e6aa      	b.n	1d2ee <__gnu_unwind_execute+0xe>
   1d598:	4638      	mov	r0, r7
   1d59a:	f7ff fe75 	bl	1d288 <next_unwind_byte>
   1d59e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d5a2:	f000 030f 	and.w	r3, r0, #15
   1d5a6:	3210      	adds	r2, #16
   1d5a8:	3301      	adds	r3, #1
   1d5aa:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d5ae:	e6e3      	b.n	1d378 <__gnu_unwind_execute+0x98>

0001d5b0 <__gnu_unwind_frame>:
   1d5b0:	b510      	push	{r4, lr}
   1d5b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d5b4:	b084      	sub	sp, #16
   1d5b6:	685a      	ldr	r2, [r3, #4]
   1d5b8:	2003      	movs	r0, #3
   1d5ba:	f88d 000c 	strb.w	r0, [sp, #12]
   1d5be:	79dc      	ldrb	r4, [r3, #7]
   1d5c0:	f88d 400d 	strb.w	r4, [sp, #13]
   1d5c4:	0212      	lsls	r2, r2, #8
   1d5c6:	3308      	adds	r3, #8
   1d5c8:	4608      	mov	r0, r1
   1d5ca:	a901      	add	r1, sp, #4
   1d5cc:	9201      	str	r2, [sp, #4]
   1d5ce:	9302      	str	r3, [sp, #8]
   1d5d0:	f7ff fe86 	bl	1d2e0 <__gnu_unwind_execute>
   1d5d4:	b004      	add	sp, #16
   1d5d6:	bd10      	pop	{r4, pc}

0001d5d8 <_Unwind_GetRegionStart>:
   1d5d8:	b508      	push	{r3, lr}
   1d5da:	f7ff fe7f 	bl	1d2dc <unwind_UCB_from_context>
   1d5de:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d5e0:	bd08      	pop	{r3, pc}
   1d5e2:	bf00      	nop

0001d5e4 <_Unwind_GetLanguageSpecificData>:
   1d5e4:	b508      	push	{r3, lr}
   1d5e6:	f7ff fe79 	bl	1d2dc <unwind_UCB_from_context>
   1d5ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d5ec:	79c3      	ldrb	r3, [r0, #7]
   1d5ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d5f2:	3008      	adds	r0, #8
   1d5f4:	bd08      	pop	{r3, pc}
   1d5f6:	bf00      	nop

0001d5f8 <_Unwind_GetTextRelBase>:
   1d5f8:	b508      	push	{r3, lr}
   1d5fa:	f000 f807 	bl	1d60c <abort>
   1d5fe:	bf00      	nop

0001d600 <_Unwind_GetDataRelBase>:
   1d600:	b508      	push	{r3, lr}
   1d602:	f7ff fff9 	bl	1d5f8 <_Unwind_GetTextRelBase>
   1d606:	bf00      	nop

0001d608 <__aeabi_idiv0>:
   1d608:	4770      	bx	lr
   1d60a:	bf00      	nop

0001d60c <abort>:
   1d60c:	b508      	push	{r3, lr}
   1d60e:	2006      	movs	r0, #6
   1d610:	f001 f96e 	bl	1e8f0 <raise>
   1d614:	2001      	movs	r0, #1
   1d616:	f005 f927 	bl	22868 <_exit>
   1d61a:	bf00      	nop

0001d61c <__errno>:
   1d61c:	4b01      	ldr	r3, [pc, #4]	; (1d624 <__errno+0x8>)
   1d61e:	6818      	ldr	r0, [r3, #0]
   1d620:	4770      	bx	lr
   1d622:	bf00      	nop
   1d624:	20000100 	.word	0x20000100

0001d628 <fputc>:
   1d628:	4b14      	ldr	r3, [pc, #80]	; (1d67c <fputc+0x54>)
   1d62a:	b570      	push	{r4, r5, r6, lr}
   1d62c:	681d      	ldr	r5, [r3, #0]
   1d62e:	4606      	mov	r6, r0
   1d630:	460c      	mov	r4, r1
   1d632:	b10d      	cbz	r5, 1d638 <fputc+0x10>
   1d634:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d636:	b1c3      	cbz	r3, 1d66a <fputc+0x42>
   1d638:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d63a:	07d8      	lsls	r0, r3, #31
   1d63c:	d402      	bmi.n	1d644 <fputc+0x1c>
   1d63e:	89a3      	ldrh	r3, [r4, #12]
   1d640:	0599      	lsls	r1, r3, #22
   1d642:	d516      	bpl.n	1d672 <fputc+0x4a>
   1d644:	4628      	mov	r0, r5
   1d646:	4622      	mov	r2, r4
   1d648:	4631      	mov	r1, r6
   1d64a:	f000 ff29 	bl	1e4a0 <_putc_r>
   1d64e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d650:	07da      	lsls	r2, r3, #31
   1d652:	4605      	mov	r5, r0
   1d654:	d402      	bmi.n	1d65c <fputc+0x34>
   1d656:	89a3      	ldrh	r3, [r4, #12]
   1d658:	059b      	lsls	r3, r3, #22
   1d65a:	d501      	bpl.n	1d660 <fputc+0x38>
   1d65c:	4628      	mov	r0, r5
   1d65e:	bd70      	pop	{r4, r5, r6, pc}
   1d660:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d662:	f000 fa7f 	bl	1db64 <__retarget_lock_release_recursive>
   1d666:	4628      	mov	r0, r5
   1d668:	bd70      	pop	{r4, r5, r6, pc}
   1d66a:	4628      	mov	r0, r5
   1d66c:	f003 fff2 	bl	21654 <__sinit>
   1d670:	e7e2      	b.n	1d638 <fputc+0x10>
   1d672:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d674:	f000 fa74 	bl	1db60 <__retarget_lock_acquire_recursive>
   1d678:	e7e4      	b.n	1d644 <fputc+0x1c>
   1d67a:	bf00      	nop
   1d67c:	20000100 	.word	0x20000100

0001d680 <_fputs_r>:
   1d680:	b530      	push	{r4, r5, lr}
   1d682:	b087      	sub	sp, #28
   1d684:	4605      	mov	r5, r0
   1d686:	4608      	mov	r0, r1
   1d688:	4614      	mov	r4, r2
   1d68a:	9101      	str	r1, [sp, #4]
   1d68c:	f001 faf8 	bl	1ec80 <strlen>
   1d690:	aa01      	add	r2, sp, #4
   1d692:	2301      	movs	r3, #1
   1d694:	9005      	str	r0, [sp, #20]
   1d696:	9002      	str	r0, [sp, #8]
   1d698:	9203      	str	r2, [sp, #12]
   1d69a:	9304      	str	r3, [sp, #16]
   1d69c:	b10d      	cbz	r5, 1d6a2 <_fputs_r+0x22>
   1d69e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d6a0:	b333      	cbz	r3, 1d6f0 <_fputs_r+0x70>
   1d6a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d6a4:	f013 0f01 	tst.w	r3, #1
   1d6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d6ac:	b29a      	uxth	r2, r3
   1d6ae:	d101      	bne.n	1d6b4 <_fputs_r+0x34>
   1d6b0:	0590      	lsls	r0, r2, #22
   1d6b2:	d521      	bpl.n	1d6f8 <_fputs_r+0x78>
   1d6b4:	0491      	lsls	r1, r2, #18
   1d6b6:	d406      	bmi.n	1d6c6 <_fputs_r+0x46>
   1d6b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d6ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d6be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d6c2:	81a3      	strh	r3, [r4, #12]
   1d6c4:	6662      	str	r2, [r4, #100]	; 0x64
   1d6c6:	4628      	mov	r0, r5
   1d6c8:	aa03      	add	r2, sp, #12
   1d6ca:	4621      	mov	r1, r4
   1d6cc:	f000 f824 	bl	1d718 <__sfvwrite_r>
   1d6d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d6d2:	07da      	lsls	r2, r3, #31
   1d6d4:	4605      	mov	r5, r0
   1d6d6:	d402      	bmi.n	1d6de <_fputs_r+0x5e>
   1d6d8:	89a3      	ldrh	r3, [r4, #12]
   1d6da:	059b      	lsls	r3, r3, #22
   1d6dc:	d502      	bpl.n	1d6e4 <_fputs_r+0x64>
   1d6de:	4628      	mov	r0, r5
   1d6e0:	b007      	add	sp, #28
   1d6e2:	bd30      	pop	{r4, r5, pc}
   1d6e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d6e6:	f000 fa3d 	bl	1db64 <__retarget_lock_release_recursive>
   1d6ea:	4628      	mov	r0, r5
   1d6ec:	b007      	add	sp, #28
   1d6ee:	bd30      	pop	{r4, r5, pc}
   1d6f0:	4628      	mov	r0, r5
   1d6f2:	f003 ffaf 	bl	21654 <__sinit>
   1d6f6:	e7d4      	b.n	1d6a2 <_fputs_r+0x22>
   1d6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d6fa:	f000 fa31 	bl	1db60 <__retarget_lock_acquire_recursive>
   1d6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d702:	b29a      	uxth	r2, r3
   1d704:	e7d6      	b.n	1d6b4 <_fputs_r+0x34>
   1d706:	bf00      	nop

0001d708 <fputs>:
   1d708:	4b02      	ldr	r3, [pc, #8]	; (1d714 <fputs+0xc>)
   1d70a:	460a      	mov	r2, r1
   1d70c:	4601      	mov	r1, r0
   1d70e:	6818      	ldr	r0, [r3, #0]
   1d710:	f7ff bfb6 	b.w	1d680 <_fputs_r>
   1d714:	20000100 	.word	0x20000100

0001d718 <__sfvwrite_r>:
   1d718:	6893      	ldr	r3, [r2, #8]
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	d073      	beq.n	1d806 <__sfvwrite_r+0xee>
   1d71e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d722:	898b      	ldrh	r3, [r1, #12]
   1d724:	b083      	sub	sp, #12
   1d726:	460c      	mov	r4, r1
   1d728:	0719      	lsls	r1, r3, #28
   1d72a:	9000      	str	r0, [sp, #0]
   1d72c:	4616      	mov	r6, r2
   1d72e:	d526      	bpl.n	1d77e <__sfvwrite_r+0x66>
   1d730:	6922      	ldr	r2, [r4, #16]
   1d732:	b322      	cbz	r2, 1d77e <__sfvwrite_r+0x66>
   1d734:	f013 0002 	ands.w	r0, r3, #2
   1d738:	6835      	ldr	r5, [r6, #0]
   1d73a:	d02c      	beq.n	1d796 <__sfvwrite_r+0x7e>
   1d73c:	f04f 0900 	mov.w	r9, #0
   1d740:	4fb0      	ldr	r7, [pc, #704]	; (1da04 <__sfvwrite_r+0x2ec>)
   1d742:	46c8      	mov	r8, r9
   1d744:	46b2      	mov	sl, r6
   1d746:	45b8      	cmp	r8, r7
   1d748:	4643      	mov	r3, r8
   1d74a:	464a      	mov	r2, r9
   1d74c:	bf28      	it	cs
   1d74e:	463b      	movcs	r3, r7
   1d750:	9800      	ldr	r0, [sp, #0]
   1d752:	f1b8 0f00 	cmp.w	r8, #0
   1d756:	d050      	beq.n	1d7fa <__sfvwrite_r+0xe2>
   1d758:	69e1      	ldr	r1, [r4, #28]
   1d75a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d75c:	47b0      	blx	r6
   1d75e:	2800      	cmp	r0, #0
   1d760:	dd58      	ble.n	1d814 <__sfvwrite_r+0xfc>
   1d762:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d766:	1a1b      	subs	r3, r3, r0
   1d768:	4481      	add	r9, r0
   1d76a:	eba8 0800 	sub.w	r8, r8, r0
   1d76e:	f8ca 3008 	str.w	r3, [sl, #8]
   1d772:	2b00      	cmp	r3, #0
   1d774:	d1e7      	bne.n	1d746 <__sfvwrite_r+0x2e>
   1d776:	2000      	movs	r0, #0
   1d778:	b003      	add	sp, #12
   1d77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d77e:	4621      	mov	r1, r4
   1d780:	9800      	ldr	r0, [sp, #0]
   1d782:	f002 fe41 	bl	20408 <__swsetup_r>
   1d786:	2800      	cmp	r0, #0
   1d788:	f040 8133 	bne.w	1d9f2 <__sfvwrite_r+0x2da>
   1d78c:	89a3      	ldrh	r3, [r4, #12]
   1d78e:	6835      	ldr	r5, [r6, #0]
   1d790:	f013 0002 	ands.w	r0, r3, #2
   1d794:	d1d2      	bne.n	1d73c <__sfvwrite_r+0x24>
   1d796:	f013 0901 	ands.w	r9, r3, #1
   1d79a:	d145      	bne.n	1d828 <__sfvwrite_r+0x110>
   1d79c:	464f      	mov	r7, r9
   1d79e:	9601      	str	r6, [sp, #4]
   1d7a0:	b337      	cbz	r7, 1d7f0 <__sfvwrite_r+0xd8>
   1d7a2:	059a      	lsls	r2, r3, #22
   1d7a4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d7a8:	f140 8083 	bpl.w	1d8b2 <__sfvwrite_r+0x19a>
   1d7ac:	4547      	cmp	r7, r8
   1d7ae:	46c3      	mov	fp, r8
   1d7b0:	f0c0 80ab 	bcc.w	1d90a <__sfvwrite_r+0x1f2>
   1d7b4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d7b8:	f040 80ac 	bne.w	1d914 <__sfvwrite_r+0x1fc>
   1d7bc:	6820      	ldr	r0, [r4, #0]
   1d7be:	46ba      	mov	sl, r7
   1d7c0:	465a      	mov	r2, fp
   1d7c2:	4649      	mov	r1, r9
   1d7c4:	f000 fdae 	bl	1e324 <memmove>
   1d7c8:	68a2      	ldr	r2, [r4, #8]
   1d7ca:	6823      	ldr	r3, [r4, #0]
   1d7cc:	eba2 0208 	sub.w	r2, r2, r8
   1d7d0:	445b      	add	r3, fp
   1d7d2:	60a2      	str	r2, [r4, #8]
   1d7d4:	6023      	str	r3, [r4, #0]
   1d7d6:	9a01      	ldr	r2, [sp, #4]
   1d7d8:	6893      	ldr	r3, [r2, #8]
   1d7da:	eba3 030a 	sub.w	r3, r3, sl
   1d7de:	44d1      	add	r9, sl
   1d7e0:	eba7 070a 	sub.w	r7, r7, sl
   1d7e4:	6093      	str	r3, [r2, #8]
   1d7e6:	2b00      	cmp	r3, #0
   1d7e8:	d0c5      	beq.n	1d776 <__sfvwrite_r+0x5e>
   1d7ea:	89a3      	ldrh	r3, [r4, #12]
   1d7ec:	2f00      	cmp	r7, #0
   1d7ee:	d1d8      	bne.n	1d7a2 <__sfvwrite_r+0x8a>
   1d7f0:	f8d5 9000 	ldr.w	r9, [r5]
   1d7f4:	686f      	ldr	r7, [r5, #4]
   1d7f6:	3508      	adds	r5, #8
   1d7f8:	e7d2      	b.n	1d7a0 <__sfvwrite_r+0x88>
   1d7fa:	f8d5 9000 	ldr.w	r9, [r5]
   1d7fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d802:	3508      	adds	r5, #8
   1d804:	e79f      	b.n	1d746 <__sfvwrite_r+0x2e>
   1d806:	2000      	movs	r0, #0
   1d808:	4770      	bx	lr
   1d80a:	4621      	mov	r1, r4
   1d80c:	9800      	ldr	r0, [sp, #0]
   1d80e:	f003 fec9 	bl	215a4 <_fflush_r>
   1d812:	b370      	cbz	r0, 1d872 <__sfvwrite_r+0x15a>
   1d814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d81c:	f04f 30ff 	mov.w	r0, #4294967295
   1d820:	81a3      	strh	r3, [r4, #12]
   1d822:	b003      	add	sp, #12
   1d824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d828:	4681      	mov	r9, r0
   1d82a:	4633      	mov	r3, r6
   1d82c:	464e      	mov	r6, r9
   1d82e:	46a8      	mov	r8, r5
   1d830:	469a      	mov	sl, r3
   1d832:	464d      	mov	r5, r9
   1d834:	b34e      	cbz	r6, 1d88a <__sfvwrite_r+0x172>
   1d836:	b380      	cbz	r0, 1d89a <__sfvwrite_r+0x182>
   1d838:	6820      	ldr	r0, [r4, #0]
   1d83a:	6923      	ldr	r3, [r4, #16]
   1d83c:	6962      	ldr	r2, [r4, #20]
   1d83e:	45b1      	cmp	r9, r6
   1d840:	46cb      	mov	fp, r9
   1d842:	bf28      	it	cs
   1d844:	46b3      	movcs	fp, r6
   1d846:	4298      	cmp	r0, r3
   1d848:	465f      	mov	r7, fp
   1d84a:	d904      	bls.n	1d856 <__sfvwrite_r+0x13e>
   1d84c:	68a3      	ldr	r3, [r4, #8]
   1d84e:	4413      	add	r3, r2
   1d850:	459b      	cmp	fp, r3
   1d852:	f300 80a6 	bgt.w	1d9a2 <__sfvwrite_r+0x28a>
   1d856:	4593      	cmp	fp, r2
   1d858:	db4b      	blt.n	1d8f2 <__sfvwrite_r+0x1da>
   1d85a:	4613      	mov	r3, r2
   1d85c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d85e:	69e1      	ldr	r1, [r4, #28]
   1d860:	9800      	ldr	r0, [sp, #0]
   1d862:	462a      	mov	r2, r5
   1d864:	47b8      	blx	r7
   1d866:	1e07      	subs	r7, r0, #0
   1d868:	ddd4      	ble.n	1d814 <__sfvwrite_r+0xfc>
   1d86a:	ebb9 0907 	subs.w	r9, r9, r7
   1d86e:	d0cc      	beq.n	1d80a <__sfvwrite_r+0xf2>
   1d870:	2001      	movs	r0, #1
   1d872:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d876:	1bdb      	subs	r3, r3, r7
   1d878:	443d      	add	r5, r7
   1d87a:	1bf6      	subs	r6, r6, r7
   1d87c:	f8ca 3008 	str.w	r3, [sl, #8]
   1d880:	2b00      	cmp	r3, #0
   1d882:	f43f af78 	beq.w	1d776 <__sfvwrite_r+0x5e>
   1d886:	2e00      	cmp	r6, #0
   1d888:	d1d5      	bne.n	1d836 <__sfvwrite_r+0x11e>
   1d88a:	f108 0308 	add.w	r3, r8, #8
   1d88e:	e913 0060 	ldmdb	r3, {r5, r6}
   1d892:	4698      	mov	r8, r3
   1d894:	3308      	adds	r3, #8
   1d896:	2e00      	cmp	r6, #0
   1d898:	d0f9      	beq.n	1d88e <__sfvwrite_r+0x176>
   1d89a:	4632      	mov	r2, r6
   1d89c:	210a      	movs	r1, #10
   1d89e:	4628      	mov	r0, r5
   1d8a0:	f000 fc26 	bl	1e0f0 <memchr>
   1d8a4:	2800      	cmp	r0, #0
   1d8a6:	f000 80a1 	beq.w	1d9ec <__sfvwrite_r+0x2d4>
   1d8aa:	3001      	adds	r0, #1
   1d8ac:	eba0 0905 	sub.w	r9, r0, r5
   1d8b0:	e7c2      	b.n	1d838 <__sfvwrite_r+0x120>
   1d8b2:	6820      	ldr	r0, [r4, #0]
   1d8b4:	6923      	ldr	r3, [r4, #16]
   1d8b6:	4298      	cmp	r0, r3
   1d8b8:	d802      	bhi.n	1d8c0 <__sfvwrite_r+0x1a8>
   1d8ba:	6963      	ldr	r3, [r4, #20]
   1d8bc:	429f      	cmp	r7, r3
   1d8be:	d25d      	bcs.n	1d97c <__sfvwrite_r+0x264>
   1d8c0:	45b8      	cmp	r8, r7
   1d8c2:	bf28      	it	cs
   1d8c4:	46b8      	movcs	r8, r7
   1d8c6:	4642      	mov	r2, r8
   1d8c8:	4649      	mov	r1, r9
   1d8ca:	f000 fd2b 	bl	1e324 <memmove>
   1d8ce:	68a3      	ldr	r3, [r4, #8]
   1d8d0:	6822      	ldr	r2, [r4, #0]
   1d8d2:	eba3 0308 	sub.w	r3, r3, r8
   1d8d6:	4442      	add	r2, r8
   1d8d8:	60a3      	str	r3, [r4, #8]
   1d8da:	6022      	str	r2, [r4, #0]
   1d8dc:	b10b      	cbz	r3, 1d8e2 <__sfvwrite_r+0x1ca>
   1d8de:	46c2      	mov	sl, r8
   1d8e0:	e779      	b.n	1d7d6 <__sfvwrite_r+0xbe>
   1d8e2:	4621      	mov	r1, r4
   1d8e4:	9800      	ldr	r0, [sp, #0]
   1d8e6:	f003 fe5d 	bl	215a4 <_fflush_r>
   1d8ea:	2800      	cmp	r0, #0
   1d8ec:	d192      	bne.n	1d814 <__sfvwrite_r+0xfc>
   1d8ee:	46c2      	mov	sl, r8
   1d8f0:	e771      	b.n	1d7d6 <__sfvwrite_r+0xbe>
   1d8f2:	465a      	mov	r2, fp
   1d8f4:	4629      	mov	r1, r5
   1d8f6:	f000 fd15 	bl	1e324 <memmove>
   1d8fa:	68a2      	ldr	r2, [r4, #8]
   1d8fc:	6823      	ldr	r3, [r4, #0]
   1d8fe:	eba2 020b 	sub.w	r2, r2, fp
   1d902:	445b      	add	r3, fp
   1d904:	60a2      	str	r2, [r4, #8]
   1d906:	6023      	str	r3, [r4, #0]
   1d908:	e7af      	b.n	1d86a <__sfvwrite_r+0x152>
   1d90a:	6820      	ldr	r0, [r4, #0]
   1d90c:	46b8      	mov	r8, r7
   1d90e:	46ba      	mov	sl, r7
   1d910:	46bb      	mov	fp, r7
   1d912:	e755      	b.n	1d7c0 <__sfvwrite_r+0xa8>
   1d914:	6962      	ldr	r2, [r4, #20]
   1d916:	6820      	ldr	r0, [r4, #0]
   1d918:	6921      	ldr	r1, [r4, #16]
   1d91a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1d91e:	eba0 0a01 	sub.w	sl, r0, r1
   1d922:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1d926:	f10a 0001 	add.w	r0, sl, #1
   1d92a:	ea4f 0868 	mov.w	r8, r8, asr #1
   1d92e:	4438      	add	r0, r7
   1d930:	4540      	cmp	r0, r8
   1d932:	4642      	mov	r2, r8
   1d934:	bf84      	itt	hi
   1d936:	4680      	movhi	r8, r0
   1d938:	4642      	movhi	r2, r8
   1d93a:	055b      	lsls	r3, r3, #21
   1d93c:	d544      	bpl.n	1d9c8 <__sfvwrite_r+0x2b0>
   1d93e:	4611      	mov	r1, r2
   1d940:	9800      	ldr	r0, [sp, #0]
   1d942:	f000 f921 	bl	1db88 <_malloc_r>
   1d946:	4683      	mov	fp, r0
   1d948:	2800      	cmp	r0, #0
   1d94a:	d055      	beq.n	1d9f8 <__sfvwrite_r+0x2e0>
   1d94c:	4652      	mov	r2, sl
   1d94e:	6921      	ldr	r1, [r4, #16]
   1d950:	f000 fc4e 	bl	1e1f0 <memcpy>
   1d954:	89a3      	ldrh	r3, [r4, #12]
   1d956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1d95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d95e:	81a3      	strh	r3, [r4, #12]
   1d960:	eb0b 000a 	add.w	r0, fp, sl
   1d964:	eba8 030a 	sub.w	r3, r8, sl
   1d968:	f8c4 b010 	str.w	fp, [r4, #16]
   1d96c:	f8c4 8014 	str.w	r8, [r4, #20]
   1d970:	6020      	str	r0, [r4, #0]
   1d972:	60a3      	str	r3, [r4, #8]
   1d974:	46b8      	mov	r8, r7
   1d976:	46ba      	mov	sl, r7
   1d978:	46bb      	mov	fp, r7
   1d97a:	e721      	b.n	1d7c0 <__sfvwrite_r+0xa8>
   1d97c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d980:	42b9      	cmp	r1, r7
   1d982:	bf28      	it	cs
   1d984:	4639      	movcs	r1, r7
   1d986:	464a      	mov	r2, r9
   1d988:	fb91 f1f3 	sdiv	r1, r1, r3
   1d98c:	9800      	ldr	r0, [sp, #0]
   1d98e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d990:	fb03 f301 	mul.w	r3, r3, r1
   1d994:	69e1      	ldr	r1, [r4, #28]
   1d996:	47b0      	blx	r6
   1d998:	f1b0 0a00 	subs.w	sl, r0, #0
   1d99c:	f73f af1b 	bgt.w	1d7d6 <__sfvwrite_r+0xbe>
   1d9a0:	e738      	b.n	1d814 <__sfvwrite_r+0xfc>
   1d9a2:	461a      	mov	r2, r3
   1d9a4:	4629      	mov	r1, r5
   1d9a6:	9301      	str	r3, [sp, #4]
   1d9a8:	f000 fcbc 	bl	1e324 <memmove>
   1d9ac:	6822      	ldr	r2, [r4, #0]
   1d9ae:	9b01      	ldr	r3, [sp, #4]
   1d9b0:	9800      	ldr	r0, [sp, #0]
   1d9b2:	441a      	add	r2, r3
   1d9b4:	6022      	str	r2, [r4, #0]
   1d9b6:	4621      	mov	r1, r4
   1d9b8:	f003 fdf4 	bl	215a4 <_fflush_r>
   1d9bc:	9b01      	ldr	r3, [sp, #4]
   1d9be:	2800      	cmp	r0, #0
   1d9c0:	f47f af28 	bne.w	1d814 <__sfvwrite_r+0xfc>
   1d9c4:	461f      	mov	r7, r3
   1d9c6:	e750      	b.n	1d86a <__sfvwrite_r+0x152>
   1d9c8:	9800      	ldr	r0, [sp, #0]
   1d9ca:	f000 fda9 	bl	1e520 <_realloc_r>
   1d9ce:	4683      	mov	fp, r0
   1d9d0:	2800      	cmp	r0, #0
   1d9d2:	d1c5      	bne.n	1d960 <__sfvwrite_r+0x248>
   1d9d4:	9d00      	ldr	r5, [sp, #0]
   1d9d6:	6921      	ldr	r1, [r4, #16]
   1d9d8:	4628      	mov	r0, r5
   1d9da:	f003 fedd 	bl	21798 <_free_r>
   1d9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d9e2:	220c      	movs	r2, #12
   1d9e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1d9e8:	602a      	str	r2, [r5, #0]
   1d9ea:	e715      	b.n	1d818 <__sfvwrite_r+0x100>
   1d9ec:	f106 0901 	add.w	r9, r6, #1
   1d9f0:	e722      	b.n	1d838 <__sfvwrite_r+0x120>
   1d9f2:	f04f 30ff 	mov.w	r0, #4294967295
   1d9f6:	e6bf      	b.n	1d778 <__sfvwrite_r+0x60>
   1d9f8:	9a00      	ldr	r2, [sp, #0]
   1d9fa:	230c      	movs	r3, #12
   1d9fc:	6013      	str	r3, [r2, #0]
   1d9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da02:	e709      	b.n	1d818 <__sfvwrite_r+0x100>
   1da04:	7ffffc00 	.word	0x7ffffc00

0001da08 <_fwrite_r>:
   1da08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da0c:	b086      	sub	sp, #24
   1da0e:	fb02 f503 	mul.w	r5, r2, r3
   1da12:	4690      	mov	r8, r2
   1da14:	461e      	mov	r6, r3
   1da16:	aa01      	add	r2, sp, #4
   1da18:	2301      	movs	r3, #1
   1da1a:	9101      	str	r1, [sp, #4]
   1da1c:	9502      	str	r5, [sp, #8]
   1da1e:	9505      	str	r5, [sp, #20]
   1da20:	9203      	str	r2, [sp, #12]
   1da22:	9304      	str	r3, [sp, #16]
   1da24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1da26:	4607      	mov	r7, r0
   1da28:	b110      	cbz	r0, 1da30 <_fwrite_r+0x28>
   1da2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1da2c:	2b00      	cmp	r3, #0
   1da2e:	d031      	beq.n	1da94 <_fwrite_r+0x8c>
   1da30:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da32:	f013 0f01 	tst.w	r3, #1
   1da36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da3a:	b29a      	uxth	r2, r3
   1da3c:	d101      	bne.n	1da42 <_fwrite_r+0x3a>
   1da3e:	0591      	lsls	r1, r2, #22
   1da40:	d52b      	bpl.n	1da9a <_fwrite_r+0x92>
   1da42:	0492      	lsls	r2, r2, #18
   1da44:	d406      	bmi.n	1da54 <_fwrite_r+0x4c>
   1da46:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1da48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1da4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1da50:	81a3      	strh	r3, [r4, #12]
   1da52:	6662      	str	r2, [r4, #100]	; 0x64
   1da54:	4638      	mov	r0, r7
   1da56:	aa03      	add	r2, sp, #12
   1da58:	4621      	mov	r1, r4
   1da5a:	f7ff fe5d 	bl	1d718 <__sfvwrite_r>
   1da5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da60:	b940      	cbnz	r0, 1da74 <_fwrite_r+0x6c>
   1da62:	07d8      	lsls	r0, r3, #31
   1da64:	d402      	bmi.n	1da6c <_fwrite_r+0x64>
   1da66:	89a3      	ldrh	r3, [r4, #12]
   1da68:	0599      	lsls	r1, r3, #22
   1da6a:	d51d      	bpl.n	1daa8 <_fwrite_r+0xa0>
   1da6c:	4630      	mov	r0, r6
   1da6e:	b006      	add	sp, #24
   1da70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da74:	07da      	lsls	r2, r3, #31
   1da76:	d506      	bpl.n	1da86 <_fwrite_r+0x7e>
   1da78:	9805      	ldr	r0, [sp, #20]
   1da7a:	1a2d      	subs	r5, r5, r0
   1da7c:	fbb5 f0f8 	udiv	r0, r5, r8
   1da80:	b006      	add	sp, #24
   1da82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da86:	89a3      	ldrh	r3, [r4, #12]
   1da88:	059b      	lsls	r3, r3, #22
   1da8a:	d4f5      	bmi.n	1da78 <_fwrite_r+0x70>
   1da8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1da8e:	f000 f869 	bl	1db64 <__retarget_lock_release_recursive>
   1da92:	e7f1      	b.n	1da78 <_fwrite_r+0x70>
   1da94:	f003 fdde 	bl	21654 <__sinit>
   1da98:	e7ca      	b.n	1da30 <_fwrite_r+0x28>
   1da9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1da9c:	f000 f860 	bl	1db60 <__retarget_lock_acquire_recursive>
   1daa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1daa4:	b29a      	uxth	r2, r3
   1daa6:	e7cc      	b.n	1da42 <_fwrite_r+0x3a>
   1daa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1daaa:	f000 f85b 	bl	1db64 <__retarget_lock_release_recursive>
   1daae:	4630      	mov	r0, r6
   1dab0:	e7e6      	b.n	1da80 <_fwrite_r+0x78>
   1dab2:	bf00      	nop

0001dab4 <fwrite>:
   1dab4:	b510      	push	{r4, lr}
   1dab6:	b082      	sub	sp, #8
   1dab8:	4c05      	ldr	r4, [pc, #20]	; (1dad0 <fwrite+0x1c>)
   1daba:	9300      	str	r3, [sp, #0]
   1dabc:	6824      	ldr	r4, [r4, #0]
   1dabe:	4613      	mov	r3, r2
   1dac0:	460a      	mov	r2, r1
   1dac2:	4601      	mov	r1, r0
   1dac4:	4620      	mov	r0, r4
   1dac6:	f7ff ff9f 	bl	1da08 <_fwrite_r>
   1daca:	b002      	add	sp, #8
   1dacc:	bd10      	pop	{r4, pc}
   1dace:	bf00      	nop
   1dad0:	20000100 	.word	0x20000100

0001dad4 <__libc_init_array>:
   1dad4:	b570      	push	{r4, r5, r6, lr}
   1dad6:	4e0f      	ldr	r6, [pc, #60]	; (1db14 <__libc_init_array+0x40>)
   1dad8:	4d0f      	ldr	r5, [pc, #60]	; (1db18 <__libc_init_array+0x44>)
   1dada:	1b76      	subs	r6, r6, r5
   1dadc:	10b6      	asrs	r6, r6, #2
   1dade:	bf18      	it	ne
   1dae0:	2400      	movne	r4, #0
   1dae2:	d005      	beq.n	1daf0 <__libc_init_array+0x1c>
   1dae4:	3401      	adds	r4, #1
   1dae6:	f855 3b04 	ldr.w	r3, [r5], #4
   1daea:	4798      	blx	r3
   1daec:	42a6      	cmp	r6, r4
   1daee:	d1f9      	bne.n	1dae4 <__libc_init_array+0x10>
   1daf0:	4e0a      	ldr	r6, [pc, #40]	; (1db1c <__libc_init_array+0x48>)
   1daf2:	4d0b      	ldr	r5, [pc, #44]	; (1db20 <__libc_init_array+0x4c>)
   1daf4:	1b76      	subs	r6, r6, r5
   1daf6:	f004 fecb 	bl	22890 <_init>
   1dafa:	10b6      	asrs	r6, r6, #2
   1dafc:	bf18      	it	ne
   1dafe:	2400      	movne	r4, #0
   1db00:	d006      	beq.n	1db10 <__libc_init_array+0x3c>
   1db02:	3401      	adds	r4, #1
   1db04:	f855 3b04 	ldr.w	r3, [r5], #4
   1db08:	4798      	blx	r3
   1db0a:	42a6      	cmp	r6, r4
   1db0c:	d1f9      	bne.n	1db02 <__libc_init_array+0x2e>
   1db0e:	bd70      	pop	{r4, r5, r6, pc}
   1db10:	bd70      	pop	{r4, r5, r6, pc}
   1db12:	bf00      	nop
   1db14:	000228a8 	.word	0x000228a8
   1db18:	000228a8 	.word	0x000228a8
   1db1c:	000228e0 	.word	0x000228e0
   1db20:	000228a8 	.word	0x000228a8

0001db24 <__itoa>:
   1db24:	1e93      	subs	r3, r2, #2
   1db26:	2b22      	cmp	r3, #34	; 0x22
   1db28:	d810      	bhi.n	1db4c <__itoa+0x28>
   1db2a:	2a0a      	cmp	r2, #10
   1db2c:	b510      	push	{r4, lr}
   1db2e:	d006      	beq.n	1db3e <__itoa+0x1a>
   1db30:	2300      	movs	r3, #0
   1db32:	460c      	mov	r4, r1
   1db34:	4419      	add	r1, r3
   1db36:	f002 fbb9 	bl	202ac <__utoa>
   1db3a:	4620      	mov	r0, r4
   1db3c:	bd10      	pop	{r4, pc}
   1db3e:	2800      	cmp	r0, #0
   1db40:	daf6      	bge.n	1db30 <__itoa+0xc>
   1db42:	232d      	movs	r3, #45	; 0x2d
   1db44:	700b      	strb	r3, [r1, #0]
   1db46:	4240      	negs	r0, r0
   1db48:	2301      	movs	r3, #1
   1db4a:	e7f2      	b.n	1db32 <__itoa+0xe>
   1db4c:	2000      	movs	r0, #0
   1db4e:	7008      	strb	r0, [r1, #0]
   1db50:	4770      	bx	lr
   1db52:	bf00      	nop

0001db54 <itoa>:
   1db54:	f7ff bfe6 	b.w	1db24 <__itoa>

0001db58 <__retarget_lock_init_recursive>:
   1db58:	4770      	bx	lr
   1db5a:	bf00      	nop

0001db5c <__retarget_lock_close_recursive>:
   1db5c:	4770      	bx	lr
   1db5e:	bf00      	nop

0001db60 <__retarget_lock_acquire_recursive>:
   1db60:	4770      	bx	lr
   1db62:	bf00      	nop

0001db64 <__retarget_lock_release_recursive>:
   1db64:	4770      	bx	lr
   1db66:	bf00      	nop

0001db68 <malloc>:
   1db68:	4b02      	ldr	r3, [pc, #8]	; (1db74 <malloc+0xc>)
   1db6a:	4601      	mov	r1, r0
   1db6c:	6818      	ldr	r0, [r3, #0]
   1db6e:	f000 b80b 	b.w	1db88 <_malloc_r>
   1db72:	bf00      	nop
   1db74:	20000100 	.word	0x20000100

0001db78 <free>:
   1db78:	4b02      	ldr	r3, [pc, #8]	; (1db84 <free+0xc>)
   1db7a:	4601      	mov	r1, r0
   1db7c:	6818      	ldr	r0, [r3, #0]
   1db7e:	f003 be0b 	b.w	21798 <_free_r>
   1db82:	bf00      	nop
   1db84:	20000100 	.word	0x20000100

0001db88 <_malloc_r>:
   1db88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db8c:	f101 060b 	add.w	r6, r1, #11
   1db90:	2e16      	cmp	r6, #22
   1db92:	b083      	sub	sp, #12
   1db94:	4605      	mov	r5, r0
   1db96:	f240 809e 	bls.w	1dcd6 <_malloc_r+0x14e>
   1db9a:	f036 0607 	bics.w	r6, r6, #7
   1db9e:	f100 80bd 	bmi.w	1dd1c <_malloc_r+0x194>
   1dba2:	42b1      	cmp	r1, r6
   1dba4:	f200 80ba 	bhi.w	1dd1c <_malloc_r+0x194>
   1dba8:	f000 fc6e 	bl	1e488 <__malloc_lock>
   1dbac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1dbb0:	f0c0 8293 	bcc.w	1e0da <_malloc_r+0x552>
   1dbb4:	0a73      	lsrs	r3, r6, #9
   1dbb6:	f000 80b8 	beq.w	1dd2a <_malloc_r+0x1a2>
   1dbba:	2b04      	cmp	r3, #4
   1dbbc:	f200 8179 	bhi.w	1deb2 <_malloc_r+0x32a>
   1dbc0:	09b3      	lsrs	r3, r6, #6
   1dbc2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1dbc6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1dbca:	00c3      	lsls	r3, r0, #3
   1dbcc:	4fbf      	ldr	r7, [pc, #764]	; (1decc <_malloc_r+0x344>)
   1dbce:	443b      	add	r3, r7
   1dbd0:	f1a3 0108 	sub.w	r1, r3, #8
   1dbd4:	685c      	ldr	r4, [r3, #4]
   1dbd6:	42a1      	cmp	r1, r4
   1dbd8:	d106      	bne.n	1dbe8 <_malloc_r+0x60>
   1dbda:	e00c      	b.n	1dbf6 <_malloc_r+0x6e>
   1dbdc:	2a00      	cmp	r2, #0
   1dbde:	f280 80aa 	bge.w	1dd36 <_malloc_r+0x1ae>
   1dbe2:	68e4      	ldr	r4, [r4, #12]
   1dbe4:	42a1      	cmp	r1, r4
   1dbe6:	d006      	beq.n	1dbf6 <_malloc_r+0x6e>
   1dbe8:	6863      	ldr	r3, [r4, #4]
   1dbea:	f023 0303 	bic.w	r3, r3, #3
   1dbee:	1b9a      	subs	r2, r3, r6
   1dbf0:	2a0f      	cmp	r2, #15
   1dbf2:	ddf3      	ble.n	1dbdc <_malloc_r+0x54>
   1dbf4:	4670      	mov	r0, lr
   1dbf6:	693c      	ldr	r4, [r7, #16]
   1dbf8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1dee0 <_malloc_r+0x358>
   1dbfc:	4574      	cmp	r4, lr
   1dbfe:	f000 81ab 	beq.w	1df58 <_malloc_r+0x3d0>
   1dc02:	6863      	ldr	r3, [r4, #4]
   1dc04:	f023 0303 	bic.w	r3, r3, #3
   1dc08:	1b9a      	subs	r2, r3, r6
   1dc0a:	2a0f      	cmp	r2, #15
   1dc0c:	f300 8190 	bgt.w	1df30 <_malloc_r+0x3a8>
   1dc10:	2a00      	cmp	r2, #0
   1dc12:	f8c7 e014 	str.w	lr, [r7, #20]
   1dc16:	f8c7 e010 	str.w	lr, [r7, #16]
   1dc1a:	f280 809d 	bge.w	1dd58 <_malloc_r+0x1d0>
   1dc1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dc22:	f080 8161 	bcs.w	1dee8 <_malloc_r+0x360>
   1dc26:	08db      	lsrs	r3, r3, #3
   1dc28:	f103 0c01 	add.w	ip, r3, #1
   1dc2c:	1099      	asrs	r1, r3, #2
   1dc2e:	687a      	ldr	r2, [r7, #4]
   1dc30:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1dc34:	f8c4 8008 	str.w	r8, [r4, #8]
   1dc38:	2301      	movs	r3, #1
   1dc3a:	408b      	lsls	r3, r1
   1dc3c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1dc40:	4313      	orrs	r3, r2
   1dc42:	3908      	subs	r1, #8
   1dc44:	60e1      	str	r1, [r4, #12]
   1dc46:	607b      	str	r3, [r7, #4]
   1dc48:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1dc4c:	f8c8 400c 	str.w	r4, [r8, #12]
   1dc50:	1082      	asrs	r2, r0, #2
   1dc52:	2401      	movs	r4, #1
   1dc54:	4094      	lsls	r4, r2
   1dc56:	429c      	cmp	r4, r3
   1dc58:	f200 808b 	bhi.w	1dd72 <_malloc_r+0x1ea>
   1dc5c:	421c      	tst	r4, r3
   1dc5e:	d106      	bne.n	1dc6e <_malloc_r+0xe6>
   1dc60:	f020 0003 	bic.w	r0, r0, #3
   1dc64:	0064      	lsls	r4, r4, #1
   1dc66:	421c      	tst	r4, r3
   1dc68:	f100 0004 	add.w	r0, r0, #4
   1dc6c:	d0fa      	beq.n	1dc64 <_malloc_r+0xdc>
   1dc6e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1dc72:	46cc      	mov	ip, r9
   1dc74:	4680      	mov	r8, r0
   1dc76:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1dc7a:	459c      	cmp	ip, r3
   1dc7c:	d107      	bne.n	1dc8e <_malloc_r+0x106>
   1dc7e:	e16d      	b.n	1df5c <_malloc_r+0x3d4>
   1dc80:	2a00      	cmp	r2, #0
   1dc82:	f280 817b 	bge.w	1df7c <_malloc_r+0x3f4>
   1dc86:	68db      	ldr	r3, [r3, #12]
   1dc88:	459c      	cmp	ip, r3
   1dc8a:	f000 8167 	beq.w	1df5c <_malloc_r+0x3d4>
   1dc8e:	6859      	ldr	r1, [r3, #4]
   1dc90:	f021 0103 	bic.w	r1, r1, #3
   1dc94:	1b8a      	subs	r2, r1, r6
   1dc96:	2a0f      	cmp	r2, #15
   1dc98:	ddf2      	ble.n	1dc80 <_malloc_r+0xf8>
   1dc9a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1dc9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1dca2:	9300      	str	r3, [sp, #0]
   1dca4:	199c      	adds	r4, r3, r6
   1dca6:	4628      	mov	r0, r5
   1dca8:	f046 0601 	orr.w	r6, r6, #1
   1dcac:	f042 0501 	orr.w	r5, r2, #1
   1dcb0:	605e      	str	r6, [r3, #4]
   1dcb2:	f8c8 c00c 	str.w	ip, [r8, #12]
   1dcb6:	f8cc 8008 	str.w	r8, [ip, #8]
   1dcba:	617c      	str	r4, [r7, #20]
   1dcbc:	613c      	str	r4, [r7, #16]
   1dcbe:	f8c4 e00c 	str.w	lr, [r4, #12]
   1dcc2:	f8c4 e008 	str.w	lr, [r4, #8]
   1dcc6:	6065      	str	r5, [r4, #4]
   1dcc8:	505a      	str	r2, [r3, r1]
   1dcca:	f000 fbe3 	bl	1e494 <__malloc_unlock>
   1dcce:	9b00      	ldr	r3, [sp, #0]
   1dcd0:	f103 0408 	add.w	r4, r3, #8
   1dcd4:	e01e      	b.n	1dd14 <_malloc_r+0x18c>
   1dcd6:	2910      	cmp	r1, #16
   1dcd8:	d820      	bhi.n	1dd1c <_malloc_r+0x194>
   1dcda:	f000 fbd5 	bl	1e488 <__malloc_lock>
   1dcde:	2610      	movs	r6, #16
   1dce0:	2318      	movs	r3, #24
   1dce2:	2002      	movs	r0, #2
   1dce4:	4f79      	ldr	r7, [pc, #484]	; (1decc <_malloc_r+0x344>)
   1dce6:	443b      	add	r3, r7
   1dce8:	f1a3 0208 	sub.w	r2, r3, #8
   1dcec:	685c      	ldr	r4, [r3, #4]
   1dcee:	4294      	cmp	r4, r2
   1dcf0:	f000 813d 	beq.w	1df6e <_malloc_r+0x3e6>
   1dcf4:	6863      	ldr	r3, [r4, #4]
   1dcf6:	68e1      	ldr	r1, [r4, #12]
   1dcf8:	68a6      	ldr	r6, [r4, #8]
   1dcfa:	f023 0303 	bic.w	r3, r3, #3
   1dcfe:	4423      	add	r3, r4
   1dd00:	4628      	mov	r0, r5
   1dd02:	685a      	ldr	r2, [r3, #4]
   1dd04:	60f1      	str	r1, [r6, #12]
   1dd06:	f042 0201 	orr.w	r2, r2, #1
   1dd0a:	608e      	str	r6, [r1, #8]
   1dd0c:	605a      	str	r2, [r3, #4]
   1dd0e:	f000 fbc1 	bl	1e494 <__malloc_unlock>
   1dd12:	3408      	adds	r4, #8
   1dd14:	4620      	mov	r0, r4
   1dd16:	b003      	add	sp, #12
   1dd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd1c:	2400      	movs	r4, #0
   1dd1e:	230c      	movs	r3, #12
   1dd20:	4620      	mov	r0, r4
   1dd22:	602b      	str	r3, [r5, #0]
   1dd24:	b003      	add	sp, #12
   1dd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd2a:	2040      	movs	r0, #64	; 0x40
   1dd2c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dd30:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1dd34:	e74a      	b.n	1dbcc <_malloc_r+0x44>
   1dd36:	4423      	add	r3, r4
   1dd38:	68e1      	ldr	r1, [r4, #12]
   1dd3a:	685a      	ldr	r2, [r3, #4]
   1dd3c:	68a6      	ldr	r6, [r4, #8]
   1dd3e:	f042 0201 	orr.w	r2, r2, #1
   1dd42:	60f1      	str	r1, [r6, #12]
   1dd44:	4628      	mov	r0, r5
   1dd46:	608e      	str	r6, [r1, #8]
   1dd48:	605a      	str	r2, [r3, #4]
   1dd4a:	f000 fba3 	bl	1e494 <__malloc_unlock>
   1dd4e:	3408      	adds	r4, #8
   1dd50:	4620      	mov	r0, r4
   1dd52:	b003      	add	sp, #12
   1dd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd58:	4423      	add	r3, r4
   1dd5a:	4628      	mov	r0, r5
   1dd5c:	685a      	ldr	r2, [r3, #4]
   1dd5e:	f042 0201 	orr.w	r2, r2, #1
   1dd62:	605a      	str	r2, [r3, #4]
   1dd64:	f000 fb96 	bl	1e494 <__malloc_unlock>
   1dd68:	3408      	adds	r4, #8
   1dd6a:	4620      	mov	r0, r4
   1dd6c:	b003      	add	sp, #12
   1dd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd72:	68bc      	ldr	r4, [r7, #8]
   1dd74:	6863      	ldr	r3, [r4, #4]
   1dd76:	f023 0803 	bic.w	r8, r3, #3
   1dd7a:	45b0      	cmp	r8, r6
   1dd7c:	d304      	bcc.n	1dd88 <_malloc_r+0x200>
   1dd7e:	eba8 0306 	sub.w	r3, r8, r6
   1dd82:	2b0f      	cmp	r3, #15
   1dd84:	f300 8085 	bgt.w	1de92 <_malloc_r+0x30a>
   1dd88:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1dee4 <_malloc_r+0x35c>
   1dd8c:	4b50      	ldr	r3, [pc, #320]	; (1ded0 <_malloc_r+0x348>)
   1dd8e:	f8d9 2000 	ldr.w	r2, [r9]
   1dd92:	681b      	ldr	r3, [r3, #0]
   1dd94:	3201      	adds	r2, #1
   1dd96:	4433      	add	r3, r6
   1dd98:	eb04 0a08 	add.w	sl, r4, r8
   1dd9c:	f000 8155 	beq.w	1e04a <_malloc_r+0x4c2>
   1dda0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1dda4:	330f      	adds	r3, #15
   1dda6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1ddaa:	f02b 0b0f 	bic.w	fp, fp, #15
   1ddae:	4659      	mov	r1, fp
   1ddb0:	4628      	mov	r0, r5
   1ddb2:	f000 fd5b 	bl	1e86c <_sbrk_r>
   1ddb6:	1c41      	adds	r1, r0, #1
   1ddb8:	4602      	mov	r2, r0
   1ddba:	f000 80fc 	beq.w	1dfb6 <_malloc_r+0x42e>
   1ddbe:	4582      	cmp	sl, r0
   1ddc0:	f200 80f7 	bhi.w	1dfb2 <_malloc_r+0x42a>
   1ddc4:	4b43      	ldr	r3, [pc, #268]	; (1ded4 <_malloc_r+0x34c>)
   1ddc6:	6819      	ldr	r1, [r3, #0]
   1ddc8:	4459      	add	r1, fp
   1ddca:	6019      	str	r1, [r3, #0]
   1ddcc:	f000 814d 	beq.w	1e06a <_malloc_r+0x4e2>
   1ddd0:	f8d9 0000 	ldr.w	r0, [r9]
   1ddd4:	3001      	adds	r0, #1
   1ddd6:	bf1b      	ittet	ne
   1ddd8:	eba2 0a0a 	subne.w	sl, r2, sl
   1dddc:	4451      	addne	r1, sl
   1ddde:	f8c9 2000 	streq.w	r2, [r9]
   1dde2:	6019      	strne	r1, [r3, #0]
   1dde4:	f012 0107 	ands.w	r1, r2, #7
   1dde8:	f000 8115 	beq.w	1e016 <_malloc_r+0x48e>
   1ddec:	f1c1 0008 	rsb	r0, r1, #8
   1ddf0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1ddf4:	4402      	add	r2, r0
   1ddf6:	3108      	adds	r1, #8
   1ddf8:	eb02 090b 	add.w	r9, r2, fp
   1ddfc:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1de00:	eba1 0909 	sub.w	r9, r1, r9
   1de04:	4649      	mov	r1, r9
   1de06:	4628      	mov	r0, r5
   1de08:	9301      	str	r3, [sp, #4]
   1de0a:	9200      	str	r2, [sp, #0]
   1de0c:	f000 fd2e 	bl	1e86c <_sbrk_r>
   1de10:	1c43      	adds	r3, r0, #1
   1de12:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1de16:	f000 8143 	beq.w	1e0a0 <_malloc_r+0x518>
   1de1a:	1a80      	subs	r0, r0, r2
   1de1c:	4448      	add	r0, r9
   1de1e:	f040 0001 	orr.w	r0, r0, #1
   1de22:	6819      	ldr	r1, [r3, #0]
   1de24:	60ba      	str	r2, [r7, #8]
   1de26:	4449      	add	r1, r9
   1de28:	42bc      	cmp	r4, r7
   1de2a:	6050      	str	r0, [r2, #4]
   1de2c:	6019      	str	r1, [r3, #0]
   1de2e:	d017      	beq.n	1de60 <_malloc_r+0x2d8>
   1de30:	f1b8 0f0f 	cmp.w	r8, #15
   1de34:	f240 80fb 	bls.w	1e02e <_malloc_r+0x4a6>
   1de38:	6860      	ldr	r0, [r4, #4]
   1de3a:	f1a8 020c 	sub.w	r2, r8, #12
   1de3e:	f022 0207 	bic.w	r2, r2, #7
   1de42:	eb04 0e02 	add.w	lr, r4, r2
   1de46:	f000 0001 	and.w	r0, r0, #1
   1de4a:	f04f 0c05 	mov.w	ip, #5
   1de4e:	4310      	orrs	r0, r2
   1de50:	2a0f      	cmp	r2, #15
   1de52:	6060      	str	r0, [r4, #4]
   1de54:	f8ce c004 	str.w	ip, [lr, #4]
   1de58:	f8ce c008 	str.w	ip, [lr, #8]
   1de5c:	f200 8117 	bhi.w	1e08e <_malloc_r+0x506>
   1de60:	4b1d      	ldr	r3, [pc, #116]	; (1ded8 <_malloc_r+0x350>)
   1de62:	68bc      	ldr	r4, [r7, #8]
   1de64:	681a      	ldr	r2, [r3, #0]
   1de66:	4291      	cmp	r1, r2
   1de68:	bf88      	it	hi
   1de6a:	6019      	strhi	r1, [r3, #0]
   1de6c:	4b1b      	ldr	r3, [pc, #108]	; (1dedc <_malloc_r+0x354>)
   1de6e:	681a      	ldr	r2, [r3, #0]
   1de70:	4291      	cmp	r1, r2
   1de72:	6862      	ldr	r2, [r4, #4]
   1de74:	bf88      	it	hi
   1de76:	6019      	strhi	r1, [r3, #0]
   1de78:	f022 0203 	bic.w	r2, r2, #3
   1de7c:	4296      	cmp	r6, r2
   1de7e:	eba2 0306 	sub.w	r3, r2, r6
   1de82:	d801      	bhi.n	1de88 <_malloc_r+0x300>
   1de84:	2b0f      	cmp	r3, #15
   1de86:	dc04      	bgt.n	1de92 <_malloc_r+0x30a>
   1de88:	4628      	mov	r0, r5
   1de8a:	f000 fb03 	bl	1e494 <__malloc_unlock>
   1de8e:	2400      	movs	r4, #0
   1de90:	e740      	b.n	1dd14 <_malloc_r+0x18c>
   1de92:	19a2      	adds	r2, r4, r6
   1de94:	f043 0301 	orr.w	r3, r3, #1
   1de98:	f046 0601 	orr.w	r6, r6, #1
   1de9c:	6066      	str	r6, [r4, #4]
   1de9e:	4628      	mov	r0, r5
   1dea0:	60ba      	str	r2, [r7, #8]
   1dea2:	6053      	str	r3, [r2, #4]
   1dea4:	f000 faf6 	bl	1e494 <__malloc_unlock>
   1dea8:	3408      	adds	r4, #8
   1deaa:	4620      	mov	r0, r4
   1deac:	b003      	add	sp, #12
   1deae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1deb2:	2b14      	cmp	r3, #20
   1deb4:	d971      	bls.n	1df9a <_malloc_r+0x412>
   1deb6:	2b54      	cmp	r3, #84	; 0x54
   1deb8:	f200 80a3 	bhi.w	1e002 <_malloc_r+0x47a>
   1debc:	0b33      	lsrs	r3, r6, #12
   1debe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1dec2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1dec6:	00c3      	lsls	r3, r0, #3
   1dec8:	e680      	b.n	1dbcc <_malloc_r+0x44>
   1deca:	bf00      	nop
   1decc:	20000530 	.word	0x20000530
   1ded0:	200022e8 	.word	0x200022e8
   1ded4:	200022b8 	.word	0x200022b8
   1ded8:	200022e0 	.word	0x200022e0
   1dedc:	200022e4 	.word	0x200022e4
   1dee0:	20000538 	.word	0x20000538
   1dee4:	20000938 	.word	0x20000938
   1dee8:	0a5a      	lsrs	r2, r3, #9
   1deea:	2a04      	cmp	r2, #4
   1deec:	d95b      	bls.n	1dfa6 <_malloc_r+0x41e>
   1deee:	2a14      	cmp	r2, #20
   1def0:	f200 80ae 	bhi.w	1e050 <_malloc_r+0x4c8>
   1def4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1def8:	00c9      	lsls	r1, r1, #3
   1defa:	325b      	adds	r2, #91	; 0x5b
   1defc:	eb07 0c01 	add.w	ip, r7, r1
   1df00:	5879      	ldr	r1, [r7, r1]
   1df02:	f1ac 0c08 	sub.w	ip, ip, #8
   1df06:	458c      	cmp	ip, r1
   1df08:	f000 8088 	beq.w	1e01c <_malloc_r+0x494>
   1df0c:	684a      	ldr	r2, [r1, #4]
   1df0e:	f022 0203 	bic.w	r2, r2, #3
   1df12:	4293      	cmp	r3, r2
   1df14:	d273      	bcs.n	1dffe <_malloc_r+0x476>
   1df16:	6889      	ldr	r1, [r1, #8]
   1df18:	458c      	cmp	ip, r1
   1df1a:	d1f7      	bne.n	1df0c <_malloc_r+0x384>
   1df1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1df20:	687b      	ldr	r3, [r7, #4]
   1df22:	60e2      	str	r2, [r4, #12]
   1df24:	f8c4 c008 	str.w	ip, [r4, #8]
   1df28:	6094      	str	r4, [r2, #8]
   1df2a:	f8cc 400c 	str.w	r4, [ip, #12]
   1df2e:	e68f      	b.n	1dc50 <_malloc_r+0xc8>
   1df30:	19a1      	adds	r1, r4, r6
   1df32:	f046 0c01 	orr.w	ip, r6, #1
   1df36:	f042 0601 	orr.w	r6, r2, #1
   1df3a:	f8c4 c004 	str.w	ip, [r4, #4]
   1df3e:	4628      	mov	r0, r5
   1df40:	6179      	str	r1, [r7, #20]
   1df42:	6139      	str	r1, [r7, #16]
   1df44:	f8c1 e00c 	str.w	lr, [r1, #12]
   1df48:	f8c1 e008 	str.w	lr, [r1, #8]
   1df4c:	604e      	str	r6, [r1, #4]
   1df4e:	50e2      	str	r2, [r4, r3]
   1df50:	f000 faa0 	bl	1e494 <__malloc_unlock>
   1df54:	3408      	adds	r4, #8
   1df56:	e6dd      	b.n	1dd14 <_malloc_r+0x18c>
   1df58:	687b      	ldr	r3, [r7, #4]
   1df5a:	e679      	b.n	1dc50 <_malloc_r+0xc8>
   1df5c:	f108 0801 	add.w	r8, r8, #1
   1df60:	f018 0f03 	tst.w	r8, #3
   1df64:	f10c 0c08 	add.w	ip, ip, #8
   1df68:	f47f ae85 	bne.w	1dc76 <_malloc_r+0xee>
   1df6c:	e02d      	b.n	1dfca <_malloc_r+0x442>
   1df6e:	68dc      	ldr	r4, [r3, #12]
   1df70:	42a3      	cmp	r3, r4
   1df72:	bf08      	it	eq
   1df74:	3002      	addeq	r0, #2
   1df76:	f43f ae3e 	beq.w	1dbf6 <_malloc_r+0x6e>
   1df7a:	e6bb      	b.n	1dcf4 <_malloc_r+0x16c>
   1df7c:	4419      	add	r1, r3
   1df7e:	461c      	mov	r4, r3
   1df80:	684a      	ldr	r2, [r1, #4]
   1df82:	68db      	ldr	r3, [r3, #12]
   1df84:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1df88:	f042 0201 	orr.w	r2, r2, #1
   1df8c:	604a      	str	r2, [r1, #4]
   1df8e:	4628      	mov	r0, r5
   1df90:	60f3      	str	r3, [r6, #12]
   1df92:	609e      	str	r6, [r3, #8]
   1df94:	f000 fa7e 	bl	1e494 <__malloc_unlock>
   1df98:	e6bc      	b.n	1dd14 <_malloc_r+0x18c>
   1df9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1df9e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1dfa2:	00c3      	lsls	r3, r0, #3
   1dfa4:	e612      	b.n	1dbcc <_malloc_r+0x44>
   1dfa6:	099a      	lsrs	r2, r3, #6
   1dfa8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1dfac:	00c9      	lsls	r1, r1, #3
   1dfae:	3238      	adds	r2, #56	; 0x38
   1dfb0:	e7a4      	b.n	1defc <_malloc_r+0x374>
   1dfb2:	42bc      	cmp	r4, r7
   1dfb4:	d054      	beq.n	1e060 <_malloc_r+0x4d8>
   1dfb6:	68bc      	ldr	r4, [r7, #8]
   1dfb8:	6862      	ldr	r2, [r4, #4]
   1dfba:	f022 0203 	bic.w	r2, r2, #3
   1dfbe:	e75d      	b.n	1de7c <_malloc_r+0x2f4>
   1dfc0:	f859 3908 	ldr.w	r3, [r9], #-8
   1dfc4:	4599      	cmp	r9, r3
   1dfc6:	f040 8086 	bne.w	1e0d6 <_malloc_r+0x54e>
   1dfca:	f010 0f03 	tst.w	r0, #3
   1dfce:	f100 30ff 	add.w	r0, r0, #4294967295
   1dfd2:	d1f5      	bne.n	1dfc0 <_malloc_r+0x438>
   1dfd4:	687b      	ldr	r3, [r7, #4]
   1dfd6:	ea23 0304 	bic.w	r3, r3, r4
   1dfda:	607b      	str	r3, [r7, #4]
   1dfdc:	0064      	lsls	r4, r4, #1
   1dfde:	429c      	cmp	r4, r3
   1dfe0:	f63f aec7 	bhi.w	1dd72 <_malloc_r+0x1ea>
   1dfe4:	2c00      	cmp	r4, #0
   1dfe6:	f43f aec4 	beq.w	1dd72 <_malloc_r+0x1ea>
   1dfea:	421c      	tst	r4, r3
   1dfec:	4640      	mov	r0, r8
   1dfee:	f47f ae3e 	bne.w	1dc6e <_malloc_r+0xe6>
   1dff2:	0064      	lsls	r4, r4, #1
   1dff4:	421c      	tst	r4, r3
   1dff6:	f100 0004 	add.w	r0, r0, #4
   1dffa:	d0fa      	beq.n	1dff2 <_malloc_r+0x46a>
   1dffc:	e637      	b.n	1dc6e <_malloc_r+0xe6>
   1dffe:	468c      	mov	ip, r1
   1e000:	e78c      	b.n	1df1c <_malloc_r+0x394>
   1e002:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1e006:	d815      	bhi.n	1e034 <_malloc_r+0x4ac>
   1e008:	0bf3      	lsrs	r3, r6, #15
   1e00a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1e00e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1e012:	00c3      	lsls	r3, r0, #3
   1e014:	e5da      	b.n	1dbcc <_malloc_r+0x44>
   1e016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e01a:	e6ed      	b.n	1ddf8 <_malloc_r+0x270>
   1e01c:	687b      	ldr	r3, [r7, #4]
   1e01e:	1092      	asrs	r2, r2, #2
   1e020:	2101      	movs	r1, #1
   1e022:	fa01 f202 	lsl.w	r2, r1, r2
   1e026:	4313      	orrs	r3, r2
   1e028:	607b      	str	r3, [r7, #4]
   1e02a:	4662      	mov	r2, ip
   1e02c:	e779      	b.n	1df22 <_malloc_r+0x39a>
   1e02e:	2301      	movs	r3, #1
   1e030:	6053      	str	r3, [r2, #4]
   1e032:	e729      	b.n	1de88 <_malloc_r+0x300>
   1e034:	f240 5254 	movw	r2, #1364	; 0x554
   1e038:	4293      	cmp	r3, r2
   1e03a:	d822      	bhi.n	1e082 <_malloc_r+0x4fa>
   1e03c:	0cb3      	lsrs	r3, r6, #18
   1e03e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e042:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e046:	00c3      	lsls	r3, r0, #3
   1e048:	e5c0      	b.n	1dbcc <_malloc_r+0x44>
   1e04a:	f103 0b10 	add.w	fp, r3, #16
   1e04e:	e6ae      	b.n	1ddae <_malloc_r+0x226>
   1e050:	2a54      	cmp	r2, #84	; 0x54
   1e052:	d829      	bhi.n	1e0a8 <_malloc_r+0x520>
   1e054:	0b1a      	lsrs	r2, r3, #12
   1e056:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e05a:	00c9      	lsls	r1, r1, #3
   1e05c:	326e      	adds	r2, #110	; 0x6e
   1e05e:	e74d      	b.n	1defc <_malloc_r+0x374>
   1e060:	4b20      	ldr	r3, [pc, #128]	; (1e0e4 <_malloc_r+0x55c>)
   1e062:	6819      	ldr	r1, [r3, #0]
   1e064:	4459      	add	r1, fp
   1e066:	6019      	str	r1, [r3, #0]
   1e068:	e6b2      	b.n	1ddd0 <_malloc_r+0x248>
   1e06a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e06e:	2800      	cmp	r0, #0
   1e070:	f47f aeae 	bne.w	1ddd0 <_malloc_r+0x248>
   1e074:	eb08 030b 	add.w	r3, r8, fp
   1e078:	68ba      	ldr	r2, [r7, #8]
   1e07a:	f043 0301 	orr.w	r3, r3, #1
   1e07e:	6053      	str	r3, [r2, #4]
   1e080:	e6ee      	b.n	1de60 <_malloc_r+0x2d8>
   1e082:	207f      	movs	r0, #127	; 0x7f
   1e084:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e088:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e08c:	e59e      	b.n	1dbcc <_malloc_r+0x44>
   1e08e:	f104 0108 	add.w	r1, r4, #8
   1e092:	4628      	mov	r0, r5
   1e094:	9300      	str	r3, [sp, #0]
   1e096:	f003 fb7f 	bl	21798 <_free_r>
   1e09a:	9b00      	ldr	r3, [sp, #0]
   1e09c:	6819      	ldr	r1, [r3, #0]
   1e09e:	e6df      	b.n	1de60 <_malloc_r+0x2d8>
   1e0a0:	2001      	movs	r0, #1
   1e0a2:	f04f 0900 	mov.w	r9, #0
   1e0a6:	e6bc      	b.n	1de22 <_malloc_r+0x29a>
   1e0a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e0ac:	d805      	bhi.n	1e0ba <_malloc_r+0x532>
   1e0ae:	0bda      	lsrs	r2, r3, #15
   1e0b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e0b4:	00c9      	lsls	r1, r1, #3
   1e0b6:	3277      	adds	r2, #119	; 0x77
   1e0b8:	e720      	b.n	1defc <_malloc_r+0x374>
   1e0ba:	f240 5154 	movw	r1, #1364	; 0x554
   1e0be:	428a      	cmp	r2, r1
   1e0c0:	d805      	bhi.n	1e0ce <_malloc_r+0x546>
   1e0c2:	0c9a      	lsrs	r2, r3, #18
   1e0c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e0c8:	00c9      	lsls	r1, r1, #3
   1e0ca:	327c      	adds	r2, #124	; 0x7c
   1e0cc:	e716      	b.n	1defc <_malloc_r+0x374>
   1e0ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e0d2:	227e      	movs	r2, #126	; 0x7e
   1e0d4:	e712      	b.n	1defc <_malloc_r+0x374>
   1e0d6:	687b      	ldr	r3, [r7, #4]
   1e0d8:	e780      	b.n	1dfdc <_malloc_r+0x454>
   1e0da:	08f0      	lsrs	r0, r6, #3
   1e0dc:	f106 0308 	add.w	r3, r6, #8
   1e0e0:	e600      	b.n	1dce4 <_malloc_r+0x15c>
   1e0e2:	bf00      	nop
   1e0e4:	200022b8 	.word	0x200022b8
	...

0001e0f0 <memchr>:
   1e0f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e0f4:	2a10      	cmp	r2, #16
   1e0f6:	db2b      	blt.n	1e150 <memchr+0x60>
   1e0f8:	f010 0f07 	tst.w	r0, #7
   1e0fc:	d008      	beq.n	1e110 <memchr+0x20>
   1e0fe:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e102:	3a01      	subs	r2, #1
   1e104:	428b      	cmp	r3, r1
   1e106:	d02d      	beq.n	1e164 <memchr+0x74>
   1e108:	f010 0f07 	tst.w	r0, #7
   1e10c:	b342      	cbz	r2, 1e160 <memchr+0x70>
   1e10e:	d1f6      	bne.n	1e0fe <memchr+0xe>
   1e110:	b4f0      	push	{r4, r5, r6, r7}
   1e112:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e116:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e11a:	f022 0407 	bic.w	r4, r2, #7
   1e11e:	f07f 0700 	mvns.w	r7, #0
   1e122:	2300      	movs	r3, #0
   1e124:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e128:	3c08      	subs	r4, #8
   1e12a:	ea85 0501 	eor.w	r5, r5, r1
   1e12e:	ea86 0601 	eor.w	r6, r6, r1
   1e132:	fa85 f547 	uadd8	r5, r5, r7
   1e136:	faa3 f587 	sel	r5, r3, r7
   1e13a:	fa86 f647 	uadd8	r6, r6, r7
   1e13e:	faa5 f687 	sel	r6, r5, r7
   1e142:	b98e      	cbnz	r6, 1e168 <memchr+0x78>
   1e144:	d1ee      	bne.n	1e124 <memchr+0x34>
   1e146:	bcf0      	pop	{r4, r5, r6, r7}
   1e148:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e14c:	f002 0207 	and.w	r2, r2, #7
   1e150:	b132      	cbz	r2, 1e160 <memchr+0x70>
   1e152:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e156:	3a01      	subs	r2, #1
   1e158:	ea83 0301 	eor.w	r3, r3, r1
   1e15c:	b113      	cbz	r3, 1e164 <memchr+0x74>
   1e15e:	d1f8      	bne.n	1e152 <memchr+0x62>
   1e160:	2000      	movs	r0, #0
   1e162:	4770      	bx	lr
   1e164:	3801      	subs	r0, #1
   1e166:	4770      	bx	lr
   1e168:	2d00      	cmp	r5, #0
   1e16a:	bf06      	itte	eq
   1e16c:	4635      	moveq	r5, r6
   1e16e:	3803      	subeq	r0, #3
   1e170:	3807      	subne	r0, #7
   1e172:	f015 0f01 	tst.w	r5, #1
   1e176:	d107      	bne.n	1e188 <memchr+0x98>
   1e178:	3001      	adds	r0, #1
   1e17a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e17e:	bf02      	ittt	eq
   1e180:	3001      	addeq	r0, #1
   1e182:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e186:	3001      	addeq	r0, #1
   1e188:	bcf0      	pop	{r4, r5, r6, r7}
   1e18a:	3801      	subs	r0, #1
   1e18c:	4770      	bx	lr
   1e18e:	bf00      	nop

0001e190 <memcmp>:
   1e190:	2a03      	cmp	r2, #3
   1e192:	b470      	push	{r4, r5, r6}
   1e194:	d922      	bls.n	1e1dc <memcmp+0x4c>
   1e196:	ea40 0301 	orr.w	r3, r0, r1
   1e19a:	079b      	lsls	r3, r3, #30
   1e19c:	d011      	beq.n	1e1c2 <memcmp+0x32>
   1e19e:	7803      	ldrb	r3, [r0, #0]
   1e1a0:	780c      	ldrb	r4, [r1, #0]
   1e1a2:	42a3      	cmp	r3, r4
   1e1a4:	d11d      	bne.n	1e1e2 <memcmp+0x52>
   1e1a6:	440a      	add	r2, r1
   1e1a8:	3101      	adds	r1, #1
   1e1aa:	e005      	b.n	1e1b8 <memcmp+0x28>
   1e1ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e1b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e1b4:	42a3      	cmp	r3, r4
   1e1b6:	d114      	bne.n	1e1e2 <memcmp+0x52>
   1e1b8:	4291      	cmp	r1, r2
   1e1ba:	d1f7      	bne.n	1e1ac <memcmp+0x1c>
   1e1bc:	2000      	movs	r0, #0
   1e1be:	bc70      	pop	{r4, r5, r6}
   1e1c0:	4770      	bx	lr
   1e1c2:	680d      	ldr	r5, [r1, #0]
   1e1c4:	6806      	ldr	r6, [r0, #0]
   1e1c6:	42ae      	cmp	r6, r5
   1e1c8:	460c      	mov	r4, r1
   1e1ca:	4603      	mov	r3, r0
   1e1cc:	f101 0104 	add.w	r1, r1, #4
   1e1d0:	f100 0004 	add.w	r0, r0, #4
   1e1d4:	d108      	bne.n	1e1e8 <memcmp+0x58>
   1e1d6:	3a04      	subs	r2, #4
   1e1d8:	2a03      	cmp	r2, #3
   1e1da:	d8f2      	bhi.n	1e1c2 <memcmp+0x32>
   1e1dc:	2a00      	cmp	r2, #0
   1e1de:	d1de      	bne.n	1e19e <memcmp+0xe>
   1e1e0:	e7ec      	b.n	1e1bc <memcmp+0x2c>
   1e1e2:	1b18      	subs	r0, r3, r4
   1e1e4:	bc70      	pop	{r4, r5, r6}
   1e1e6:	4770      	bx	lr
   1e1e8:	4621      	mov	r1, r4
   1e1ea:	4618      	mov	r0, r3
   1e1ec:	e7d7      	b.n	1e19e <memcmp+0xe>
   1e1ee:	bf00      	nop

0001e1f0 <memcpy>:
   1e1f0:	4684      	mov	ip, r0
   1e1f2:	ea41 0300 	orr.w	r3, r1, r0
   1e1f6:	f013 0303 	ands.w	r3, r3, #3
   1e1fa:	d16d      	bne.n	1e2d8 <memcpy+0xe8>
   1e1fc:	3a40      	subs	r2, #64	; 0x40
   1e1fe:	d341      	bcc.n	1e284 <memcpy+0x94>
   1e200:	f851 3b04 	ldr.w	r3, [r1], #4
   1e204:	f840 3b04 	str.w	r3, [r0], #4
   1e208:	f851 3b04 	ldr.w	r3, [r1], #4
   1e20c:	f840 3b04 	str.w	r3, [r0], #4
   1e210:	f851 3b04 	ldr.w	r3, [r1], #4
   1e214:	f840 3b04 	str.w	r3, [r0], #4
   1e218:	f851 3b04 	ldr.w	r3, [r1], #4
   1e21c:	f840 3b04 	str.w	r3, [r0], #4
   1e220:	f851 3b04 	ldr.w	r3, [r1], #4
   1e224:	f840 3b04 	str.w	r3, [r0], #4
   1e228:	f851 3b04 	ldr.w	r3, [r1], #4
   1e22c:	f840 3b04 	str.w	r3, [r0], #4
   1e230:	f851 3b04 	ldr.w	r3, [r1], #4
   1e234:	f840 3b04 	str.w	r3, [r0], #4
   1e238:	f851 3b04 	ldr.w	r3, [r1], #4
   1e23c:	f840 3b04 	str.w	r3, [r0], #4
   1e240:	f851 3b04 	ldr.w	r3, [r1], #4
   1e244:	f840 3b04 	str.w	r3, [r0], #4
   1e248:	f851 3b04 	ldr.w	r3, [r1], #4
   1e24c:	f840 3b04 	str.w	r3, [r0], #4
   1e250:	f851 3b04 	ldr.w	r3, [r1], #4
   1e254:	f840 3b04 	str.w	r3, [r0], #4
   1e258:	f851 3b04 	ldr.w	r3, [r1], #4
   1e25c:	f840 3b04 	str.w	r3, [r0], #4
   1e260:	f851 3b04 	ldr.w	r3, [r1], #4
   1e264:	f840 3b04 	str.w	r3, [r0], #4
   1e268:	f851 3b04 	ldr.w	r3, [r1], #4
   1e26c:	f840 3b04 	str.w	r3, [r0], #4
   1e270:	f851 3b04 	ldr.w	r3, [r1], #4
   1e274:	f840 3b04 	str.w	r3, [r0], #4
   1e278:	f851 3b04 	ldr.w	r3, [r1], #4
   1e27c:	f840 3b04 	str.w	r3, [r0], #4
   1e280:	3a40      	subs	r2, #64	; 0x40
   1e282:	d2bd      	bcs.n	1e200 <memcpy+0x10>
   1e284:	3230      	adds	r2, #48	; 0x30
   1e286:	d311      	bcc.n	1e2ac <memcpy+0xbc>
   1e288:	f851 3b04 	ldr.w	r3, [r1], #4
   1e28c:	f840 3b04 	str.w	r3, [r0], #4
   1e290:	f851 3b04 	ldr.w	r3, [r1], #4
   1e294:	f840 3b04 	str.w	r3, [r0], #4
   1e298:	f851 3b04 	ldr.w	r3, [r1], #4
   1e29c:	f840 3b04 	str.w	r3, [r0], #4
   1e2a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2a4:	f840 3b04 	str.w	r3, [r0], #4
   1e2a8:	3a10      	subs	r2, #16
   1e2aa:	d2ed      	bcs.n	1e288 <memcpy+0x98>
   1e2ac:	320c      	adds	r2, #12
   1e2ae:	d305      	bcc.n	1e2bc <memcpy+0xcc>
   1e2b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2b4:	f840 3b04 	str.w	r3, [r0], #4
   1e2b8:	3a04      	subs	r2, #4
   1e2ba:	d2f9      	bcs.n	1e2b0 <memcpy+0xc0>
   1e2bc:	3204      	adds	r2, #4
   1e2be:	d008      	beq.n	1e2d2 <memcpy+0xe2>
   1e2c0:	07d2      	lsls	r2, r2, #31
   1e2c2:	bf1c      	itt	ne
   1e2c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e2c8:	f800 3b01 	strbne.w	r3, [r0], #1
   1e2cc:	d301      	bcc.n	1e2d2 <memcpy+0xe2>
   1e2ce:	880b      	ldrh	r3, [r1, #0]
   1e2d0:	8003      	strh	r3, [r0, #0]
   1e2d2:	4660      	mov	r0, ip
   1e2d4:	4770      	bx	lr
   1e2d6:	bf00      	nop
   1e2d8:	2a08      	cmp	r2, #8
   1e2da:	d313      	bcc.n	1e304 <memcpy+0x114>
   1e2dc:	078b      	lsls	r3, r1, #30
   1e2de:	d08d      	beq.n	1e1fc <memcpy+0xc>
   1e2e0:	f010 0303 	ands.w	r3, r0, #3
   1e2e4:	d08a      	beq.n	1e1fc <memcpy+0xc>
   1e2e6:	f1c3 0304 	rsb	r3, r3, #4
   1e2ea:	1ad2      	subs	r2, r2, r3
   1e2ec:	07db      	lsls	r3, r3, #31
   1e2ee:	bf1c      	itt	ne
   1e2f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e2f4:	f800 3b01 	strbne.w	r3, [r0], #1
   1e2f8:	d380      	bcc.n	1e1fc <memcpy+0xc>
   1e2fa:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e2fe:	f820 3b02 	strh.w	r3, [r0], #2
   1e302:	e77b      	b.n	1e1fc <memcpy+0xc>
   1e304:	3a04      	subs	r2, #4
   1e306:	d3d9      	bcc.n	1e2bc <memcpy+0xcc>
   1e308:	3a01      	subs	r2, #1
   1e30a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e30e:	f800 3b01 	strb.w	r3, [r0], #1
   1e312:	d2f9      	bcs.n	1e308 <memcpy+0x118>
   1e314:	780b      	ldrb	r3, [r1, #0]
   1e316:	7003      	strb	r3, [r0, #0]
   1e318:	784b      	ldrb	r3, [r1, #1]
   1e31a:	7043      	strb	r3, [r0, #1]
   1e31c:	788b      	ldrb	r3, [r1, #2]
   1e31e:	7083      	strb	r3, [r0, #2]
   1e320:	4660      	mov	r0, ip
   1e322:	4770      	bx	lr

0001e324 <memmove>:
   1e324:	4288      	cmp	r0, r1
   1e326:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e328:	d90d      	bls.n	1e346 <memmove+0x22>
   1e32a:	188b      	adds	r3, r1, r2
   1e32c:	4298      	cmp	r0, r3
   1e32e:	d20a      	bcs.n	1e346 <memmove+0x22>
   1e330:	1884      	adds	r4, r0, r2
   1e332:	2a00      	cmp	r2, #0
   1e334:	d051      	beq.n	1e3da <memmove+0xb6>
   1e336:	4622      	mov	r2, r4
   1e338:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e33c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e340:	4299      	cmp	r1, r3
   1e342:	d1f9      	bne.n	1e338 <memmove+0x14>
   1e344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e346:	2a0f      	cmp	r2, #15
   1e348:	d948      	bls.n	1e3dc <memmove+0xb8>
   1e34a:	ea41 0300 	orr.w	r3, r1, r0
   1e34e:	079b      	lsls	r3, r3, #30
   1e350:	d146      	bne.n	1e3e0 <memmove+0xbc>
   1e352:	f100 0410 	add.w	r4, r0, #16
   1e356:	f101 0310 	add.w	r3, r1, #16
   1e35a:	4615      	mov	r5, r2
   1e35c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e360:	f844 6c10 	str.w	r6, [r4, #-16]
   1e364:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e368:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e36c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e370:	f844 6c08 	str.w	r6, [r4, #-8]
   1e374:	3d10      	subs	r5, #16
   1e376:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e37a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e37e:	2d0f      	cmp	r5, #15
   1e380:	f103 0310 	add.w	r3, r3, #16
   1e384:	f104 0410 	add.w	r4, r4, #16
   1e388:	d8e8      	bhi.n	1e35c <memmove+0x38>
   1e38a:	f1a2 0310 	sub.w	r3, r2, #16
   1e38e:	f023 030f 	bic.w	r3, r3, #15
   1e392:	f002 0e0f 	and.w	lr, r2, #15
   1e396:	3310      	adds	r3, #16
   1e398:	f1be 0f03 	cmp.w	lr, #3
   1e39c:	4419      	add	r1, r3
   1e39e:	4403      	add	r3, r0
   1e3a0:	d921      	bls.n	1e3e6 <memmove+0xc2>
   1e3a2:	1f1e      	subs	r6, r3, #4
   1e3a4:	460d      	mov	r5, r1
   1e3a6:	4674      	mov	r4, lr
   1e3a8:	3c04      	subs	r4, #4
   1e3aa:	f855 7b04 	ldr.w	r7, [r5], #4
   1e3ae:	f846 7f04 	str.w	r7, [r6, #4]!
   1e3b2:	2c03      	cmp	r4, #3
   1e3b4:	d8f8      	bhi.n	1e3a8 <memmove+0x84>
   1e3b6:	f1ae 0404 	sub.w	r4, lr, #4
   1e3ba:	f024 0403 	bic.w	r4, r4, #3
   1e3be:	3404      	adds	r4, #4
   1e3c0:	4421      	add	r1, r4
   1e3c2:	4423      	add	r3, r4
   1e3c4:	f002 0203 	and.w	r2, r2, #3
   1e3c8:	b162      	cbz	r2, 1e3e4 <memmove+0xc0>
   1e3ca:	3b01      	subs	r3, #1
   1e3cc:	440a      	add	r2, r1
   1e3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e3d6:	428a      	cmp	r2, r1
   1e3d8:	d1f9      	bne.n	1e3ce <memmove+0xaa>
   1e3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3dc:	4603      	mov	r3, r0
   1e3de:	e7f3      	b.n	1e3c8 <memmove+0xa4>
   1e3e0:	4603      	mov	r3, r0
   1e3e2:	e7f2      	b.n	1e3ca <memmove+0xa6>
   1e3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3e6:	4672      	mov	r2, lr
   1e3e8:	e7ee      	b.n	1e3c8 <memmove+0xa4>
   1e3ea:	bf00      	nop

0001e3ec <memset>:
   1e3ec:	b470      	push	{r4, r5, r6}
   1e3ee:	0786      	lsls	r6, r0, #30
   1e3f0:	d046      	beq.n	1e480 <memset+0x94>
   1e3f2:	1e54      	subs	r4, r2, #1
   1e3f4:	2a00      	cmp	r2, #0
   1e3f6:	d041      	beq.n	1e47c <memset+0x90>
   1e3f8:	b2ca      	uxtb	r2, r1
   1e3fa:	4603      	mov	r3, r0
   1e3fc:	e002      	b.n	1e404 <memset+0x18>
   1e3fe:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e402:	d33b      	bcc.n	1e47c <memset+0x90>
   1e404:	f803 2b01 	strb.w	r2, [r3], #1
   1e408:	079d      	lsls	r5, r3, #30
   1e40a:	d1f8      	bne.n	1e3fe <memset+0x12>
   1e40c:	2c03      	cmp	r4, #3
   1e40e:	d92e      	bls.n	1e46e <memset+0x82>
   1e410:	b2cd      	uxtb	r5, r1
   1e412:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e416:	2c0f      	cmp	r4, #15
   1e418:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e41c:	d919      	bls.n	1e452 <memset+0x66>
   1e41e:	f103 0210 	add.w	r2, r3, #16
   1e422:	4626      	mov	r6, r4
   1e424:	3e10      	subs	r6, #16
   1e426:	2e0f      	cmp	r6, #15
   1e428:	f842 5c10 	str.w	r5, [r2, #-16]
   1e42c:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e430:	f842 5c08 	str.w	r5, [r2, #-8]
   1e434:	f842 5c04 	str.w	r5, [r2, #-4]
   1e438:	f102 0210 	add.w	r2, r2, #16
   1e43c:	d8f2      	bhi.n	1e424 <memset+0x38>
   1e43e:	f1a4 0210 	sub.w	r2, r4, #16
   1e442:	f022 020f 	bic.w	r2, r2, #15
   1e446:	f004 040f 	and.w	r4, r4, #15
   1e44a:	3210      	adds	r2, #16
   1e44c:	2c03      	cmp	r4, #3
   1e44e:	4413      	add	r3, r2
   1e450:	d90d      	bls.n	1e46e <memset+0x82>
   1e452:	461e      	mov	r6, r3
   1e454:	4622      	mov	r2, r4
   1e456:	3a04      	subs	r2, #4
   1e458:	2a03      	cmp	r2, #3
   1e45a:	f846 5b04 	str.w	r5, [r6], #4
   1e45e:	d8fa      	bhi.n	1e456 <memset+0x6a>
   1e460:	1f22      	subs	r2, r4, #4
   1e462:	f022 0203 	bic.w	r2, r2, #3
   1e466:	3204      	adds	r2, #4
   1e468:	4413      	add	r3, r2
   1e46a:	f004 0403 	and.w	r4, r4, #3
   1e46e:	b12c      	cbz	r4, 1e47c <memset+0x90>
   1e470:	b2c9      	uxtb	r1, r1
   1e472:	441c      	add	r4, r3
   1e474:	f803 1b01 	strb.w	r1, [r3], #1
   1e478:	429c      	cmp	r4, r3
   1e47a:	d1fb      	bne.n	1e474 <memset+0x88>
   1e47c:	bc70      	pop	{r4, r5, r6}
   1e47e:	4770      	bx	lr
   1e480:	4614      	mov	r4, r2
   1e482:	4603      	mov	r3, r0
   1e484:	e7c2      	b.n	1e40c <memset+0x20>
   1e486:	bf00      	nop

0001e488 <__malloc_lock>:
   1e488:	4801      	ldr	r0, [pc, #4]	; (1e490 <__malloc_lock+0x8>)
   1e48a:	f7ff bb69 	b.w	1db60 <__retarget_lock_acquire_recursive>
   1e48e:	bf00      	nop
   1e490:	200023a0 	.word	0x200023a0

0001e494 <__malloc_unlock>:
   1e494:	4801      	ldr	r0, [pc, #4]	; (1e49c <__malloc_unlock+0x8>)
   1e496:	f7ff bb65 	b.w	1db64 <__retarget_lock_release_recursive>
   1e49a:	bf00      	nop
   1e49c:	200023a0 	.word	0x200023a0

0001e4a0 <_putc_r>:
   1e4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4a2:	460e      	mov	r6, r1
   1e4a4:	4614      	mov	r4, r2
   1e4a6:	4607      	mov	r7, r0
   1e4a8:	b108      	cbz	r0, 1e4ae <_putc_r+0xe>
   1e4aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e4ac:	b34b      	cbz	r3, 1e502 <_putc_r+0x62>
   1e4ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e4b0:	07d8      	lsls	r0, r3, #31
   1e4b2:	d402      	bmi.n	1e4ba <_putc_r+0x1a>
   1e4b4:	89a3      	ldrh	r3, [r4, #12]
   1e4b6:	0599      	lsls	r1, r3, #22
   1e4b8:	d526      	bpl.n	1e508 <_putc_r+0x68>
   1e4ba:	68a3      	ldr	r3, [r4, #8]
   1e4bc:	3b01      	subs	r3, #1
   1e4be:	2b00      	cmp	r3, #0
   1e4c0:	60a3      	str	r3, [r4, #8]
   1e4c2:	db11      	blt.n	1e4e8 <_putc_r+0x48>
   1e4c4:	b2f5      	uxtb	r5, r6
   1e4c6:	6823      	ldr	r3, [r4, #0]
   1e4c8:	1c5a      	adds	r2, r3, #1
   1e4ca:	6022      	str	r2, [r4, #0]
   1e4cc:	701e      	strb	r6, [r3, #0]
   1e4ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e4d0:	07da      	lsls	r2, r3, #31
   1e4d2:	d402      	bmi.n	1e4da <_putc_r+0x3a>
   1e4d4:	89a3      	ldrh	r3, [r4, #12]
   1e4d6:	059b      	lsls	r3, r3, #22
   1e4d8:	d501      	bpl.n	1e4de <_putc_r+0x3e>
   1e4da:	4628      	mov	r0, r5
   1e4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4de:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e4e0:	f7ff fb40 	bl	1db64 <__retarget_lock_release_recursive>
   1e4e4:	4628      	mov	r0, r5
   1e4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4e8:	69a2      	ldr	r2, [r4, #24]
   1e4ea:	4293      	cmp	r3, r2
   1e4ec:	db02      	blt.n	1e4f4 <_putc_r+0x54>
   1e4ee:	b2f5      	uxtb	r5, r6
   1e4f0:	2d0a      	cmp	r5, #10
   1e4f2:	d1e8      	bne.n	1e4c6 <_putc_r+0x26>
   1e4f4:	4631      	mov	r1, r6
   1e4f6:	4638      	mov	r0, r7
   1e4f8:	4622      	mov	r2, r4
   1e4fa:	f001 ff17 	bl	2032c <__swbuf_r>
   1e4fe:	4605      	mov	r5, r0
   1e500:	e7e5      	b.n	1e4ce <_putc_r+0x2e>
   1e502:	f003 f8a7 	bl	21654 <__sinit>
   1e506:	e7d2      	b.n	1e4ae <_putc_r+0xe>
   1e508:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e50a:	f7ff fb29 	bl	1db60 <__retarget_lock_acquire_recursive>
   1e50e:	e7d4      	b.n	1e4ba <_putc_r+0x1a>

0001e510 <realloc>:
   1e510:	4b02      	ldr	r3, [pc, #8]	; (1e51c <realloc+0xc>)
   1e512:	460a      	mov	r2, r1
   1e514:	4601      	mov	r1, r0
   1e516:	6818      	ldr	r0, [r3, #0]
   1e518:	f000 b802 	b.w	1e520 <_realloc_r>
   1e51c:	20000100 	.word	0x20000100

0001e520 <_realloc_r>:
   1e520:	2900      	cmp	r1, #0
   1e522:	f000 8095 	beq.w	1e650 <_realloc_r+0x130>
   1e526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e52a:	460d      	mov	r5, r1
   1e52c:	4616      	mov	r6, r2
   1e52e:	b083      	sub	sp, #12
   1e530:	4680      	mov	r8, r0
   1e532:	f106 070b 	add.w	r7, r6, #11
   1e536:	f7ff ffa7 	bl	1e488 <__malloc_lock>
   1e53a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e53e:	2f16      	cmp	r7, #22
   1e540:	f02e 0403 	bic.w	r4, lr, #3
   1e544:	f1a5 0908 	sub.w	r9, r5, #8
   1e548:	d83c      	bhi.n	1e5c4 <_realloc_r+0xa4>
   1e54a:	2210      	movs	r2, #16
   1e54c:	4617      	mov	r7, r2
   1e54e:	42be      	cmp	r6, r7
   1e550:	d83d      	bhi.n	1e5ce <_realloc_r+0xae>
   1e552:	4294      	cmp	r4, r2
   1e554:	da43      	bge.n	1e5de <_realloc_r+0xbe>
   1e556:	4bc4      	ldr	r3, [pc, #784]	; (1e868 <_realloc_r+0x348>)
   1e558:	6899      	ldr	r1, [r3, #8]
   1e55a:	eb09 0004 	add.w	r0, r9, r4
   1e55e:	4288      	cmp	r0, r1
   1e560:	f000 80b4 	beq.w	1e6cc <_realloc_r+0x1ac>
   1e564:	6843      	ldr	r3, [r0, #4]
   1e566:	f023 0101 	bic.w	r1, r3, #1
   1e56a:	4401      	add	r1, r0
   1e56c:	6849      	ldr	r1, [r1, #4]
   1e56e:	07c9      	lsls	r1, r1, #31
   1e570:	d54c      	bpl.n	1e60c <_realloc_r+0xec>
   1e572:	f01e 0f01 	tst.w	lr, #1
   1e576:	f000 809b 	beq.w	1e6b0 <_realloc_r+0x190>
   1e57a:	4631      	mov	r1, r6
   1e57c:	4640      	mov	r0, r8
   1e57e:	f7ff fb03 	bl	1db88 <_malloc_r>
   1e582:	4606      	mov	r6, r0
   1e584:	2800      	cmp	r0, #0
   1e586:	d03a      	beq.n	1e5fe <_realloc_r+0xde>
   1e588:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e58c:	f023 0301 	bic.w	r3, r3, #1
   1e590:	444b      	add	r3, r9
   1e592:	f1a0 0208 	sub.w	r2, r0, #8
   1e596:	429a      	cmp	r2, r3
   1e598:	f000 8121 	beq.w	1e7de <_realloc_r+0x2be>
   1e59c:	1f22      	subs	r2, r4, #4
   1e59e:	2a24      	cmp	r2, #36	; 0x24
   1e5a0:	f200 8107 	bhi.w	1e7b2 <_realloc_r+0x292>
   1e5a4:	2a13      	cmp	r2, #19
   1e5a6:	f200 80db 	bhi.w	1e760 <_realloc_r+0x240>
   1e5aa:	4603      	mov	r3, r0
   1e5ac:	462a      	mov	r2, r5
   1e5ae:	6811      	ldr	r1, [r2, #0]
   1e5b0:	6019      	str	r1, [r3, #0]
   1e5b2:	6851      	ldr	r1, [r2, #4]
   1e5b4:	6059      	str	r1, [r3, #4]
   1e5b6:	6892      	ldr	r2, [r2, #8]
   1e5b8:	609a      	str	r2, [r3, #8]
   1e5ba:	4629      	mov	r1, r5
   1e5bc:	4640      	mov	r0, r8
   1e5be:	f003 f8eb 	bl	21798 <_free_r>
   1e5c2:	e01c      	b.n	1e5fe <_realloc_r+0xde>
   1e5c4:	f027 0707 	bic.w	r7, r7, #7
   1e5c8:	2f00      	cmp	r7, #0
   1e5ca:	463a      	mov	r2, r7
   1e5cc:	dabf      	bge.n	1e54e <_realloc_r+0x2e>
   1e5ce:	2600      	movs	r6, #0
   1e5d0:	230c      	movs	r3, #12
   1e5d2:	4630      	mov	r0, r6
   1e5d4:	f8c8 3000 	str.w	r3, [r8]
   1e5d8:	b003      	add	sp, #12
   1e5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5de:	462e      	mov	r6, r5
   1e5e0:	1be3      	subs	r3, r4, r7
   1e5e2:	2b0f      	cmp	r3, #15
   1e5e4:	d81e      	bhi.n	1e624 <_realloc_r+0x104>
   1e5e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e5ea:	f003 0301 	and.w	r3, r3, #1
   1e5ee:	4323      	orrs	r3, r4
   1e5f0:	444c      	add	r4, r9
   1e5f2:	f8c9 3004 	str.w	r3, [r9, #4]
   1e5f6:	6863      	ldr	r3, [r4, #4]
   1e5f8:	f043 0301 	orr.w	r3, r3, #1
   1e5fc:	6063      	str	r3, [r4, #4]
   1e5fe:	4640      	mov	r0, r8
   1e600:	f7ff ff48 	bl	1e494 <__malloc_unlock>
   1e604:	4630      	mov	r0, r6
   1e606:	b003      	add	sp, #12
   1e608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e60c:	f023 0303 	bic.w	r3, r3, #3
   1e610:	18e1      	adds	r1, r4, r3
   1e612:	4291      	cmp	r1, r2
   1e614:	db1f      	blt.n	1e656 <_realloc_r+0x136>
   1e616:	68c3      	ldr	r3, [r0, #12]
   1e618:	6882      	ldr	r2, [r0, #8]
   1e61a:	462e      	mov	r6, r5
   1e61c:	60d3      	str	r3, [r2, #12]
   1e61e:	460c      	mov	r4, r1
   1e620:	609a      	str	r2, [r3, #8]
   1e622:	e7dd      	b.n	1e5e0 <_realloc_r+0xc0>
   1e624:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e628:	eb09 0107 	add.w	r1, r9, r7
   1e62c:	f002 0201 	and.w	r2, r2, #1
   1e630:	444c      	add	r4, r9
   1e632:	f043 0301 	orr.w	r3, r3, #1
   1e636:	4317      	orrs	r7, r2
   1e638:	f8c9 7004 	str.w	r7, [r9, #4]
   1e63c:	604b      	str	r3, [r1, #4]
   1e63e:	6863      	ldr	r3, [r4, #4]
   1e640:	f043 0301 	orr.w	r3, r3, #1
   1e644:	3108      	adds	r1, #8
   1e646:	6063      	str	r3, [r4, #4]
   1e648:	4640      	mov	r0, r8
   1e64a:	f003 f8a5 	bl	21798 <_free_r>
   1e64e:	e7d6      	b.n	1e5fe <_realloc_r+0xde>
   1e650:	4611      	mov	r1, r2
   1e652:	f7ff ba99 	b.w	1db88 <_malloc_r>
   1e656:	f01e 0f01 	tst.w	lr, #1
   1e65a:	d18e      	bne.n	1e57a <_realloc_r+0x5a>
   1e65c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e660:	eba9 0a01 	sub.w	sl, r9, r1
   1e664:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e668:	f021 0103 	bic.w	r1, r1, #3
   1e66c:	440b      	add	r3, r1
   1e66e:	4423      	add	r3, r4
   1e670:	4293      	cmp	r3, r2
   1e672:	db25      	blt.n	1e6c0 <_realloc_r+0x1a0>
   1e674:	68c2      	ldr	r2, [r0, #12]
   1e676:	6881      	ldr	r1, [r0, #8]
   1e678:	4656      	mov	r6, sl
   1e67a:	60ca      	str	r2, [r1, #12]
   1e67c:	6091      	str	r1, [r2, #8]
   1e67e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e682:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e686:	1f22      	subs	r2, r4, #4
   1e688:	2a24      	cmp	r2, #36	; 0x24
   1e68a:	60c1      	str	r1, [r0, #12]
   1e68c:	6088      	str	r0, [r1, #8]
   1e68e:	f200 8094 	bhi.w	1e7ba <_realloc_r+0x29a>
   1e692:	2a13      	cmp	r2, #19
   1e694:	d96f      	bls.n	1e776 <_realloc_r+0x256>
   1e696:	6829      	ldr	r1, [r5, #0]
   1e698:	f8ca 1008 	str.w	r1, [sl, #8]
   1e69c:	6869      	ldr	r1, [r5, #4]
   1e69e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e6a2:	2a1b      	cmp	r2, #27
   1e6a4:	f200 80a2 	bhi.w	1e7ec <_realloc_r+0x2cc>
   1e6a8:	3508      	adds	r5, #8
   1e6aa:	f10a 0210 	add.w	r2, sl, #16
   1e6ae:	e063      	b.n	1e778 <_realloc_r+0x258>
   1e6b0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e6b4:	eba9 0a03 	sub.w	sl, r9, r3
   1e6b8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e6bc:	f021 0103 	bic.w	r1, r1, #3
   1e6c0:	1863      	adds	r3, r4, r1
   1e6c2:	4293      	cmp	r3, r2
   1e6c4:	f6ff af59 	blt.w	1e57a <_realloc_r+0x5a>
   1e6c8:	4656      	mov	r6, sl
   1e6ca:	e7d8      	b.n	1e67e <_realloc_r+0x15e>
   1e6cc:	6841      	ldr	r1, [r0, #4]
   1e6ce:	f021 0b03 	bic.w	fp, r1, #3
   1e6d2:	44a3      	add	fp, r4
   1e6d4:	f107 0010 	add.w	r0, r7, #16
   1e6d8:	4583      	cmp	fp, r0
   1e6da:	da56      	bge.n	1e78a <_realloc_r+0x26a>
   1e6dc:	f01e 0f01 	tst.w	lr, #1
   1e6e0:	f47f af4b 	bne.w	1e57a <_realloc_r+0x5a>
   1e6e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e6e8:	eba9 0a01 	sub.w	sl, r9, r1
   1e6ec:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e6f0:	f021 0103 	bic.w	r1, r1, #3
   1e6f4:	448b      	add	fp, r1
   1e6f6:	4558      	cmp	r0, fp
   1e6f8:	dce2      	bgt.n	1e6c0 <_realloc_r+0x1a0>
   1e6fa:	4656      	mov	r6, sl
   1e6fc:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e700:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e704:	1f22      	subs	r2, r4, #4
   1e706:	2a24      	cmp	r2, #36	; 0x24
   1e708:	60c1      	str	r1, [r0, #12]
   1e70a:	6088      	str	r0, [r1, #8]
   1e70c:	f200 808f 	bhi.w	1e82e <_realloc_r+0x30e>
   1e710:	2a13      	cmp	r2, #19
   1e712:	f240 808a 	bls.w	1e82a <_realloc_r+0x30a>
   1e716:	6829      	ldr	r1, [r5, #0]
   1e718:	f8ca 1008 	str.w	r1, [sl, #8]
   1e71c:	6869      	ldr	r1, [r5, #4]
   1e71e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e722:	2a1b      	cmp	r2, #27
   1e724:	f200 808a 	bhi.w	1e83c <_realloc_r+0x31c>
   1e728:	3508      	adds	r5, #8
   1e72a:	f10a 0210 	add.w	r2, sl, #16
   1e72e:	6829      	ldr	r1, [r5, #0]
   1e730:	6011      	str	r1, [r2, #0]
   1e732:	6869      	ldr	r1, [r5, #4]
   1e734:	6051      	str	r1, [r2, #4]
   1e736:	68a9      	ldr	r1, [r5, #8]
   1e738:	6091      	str	r1, [r2, #8]
   1e73a:	eb0a 0107 	add.w	r1, sl, r7
   1e73e:	ebab 0207 	sub.w	r2, fp, r7
   1e742:	f042 0201 	orr.w	r2, r2, #1
   1e746:	6099      	str	r1, [r3, #8]
   1e748:	604a      	str	r2, [r1, #4]
   1e74a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e74e:	f003 0301 	and.w	r3, r3, #1
   1e752:	431f      	orrs	r7, r3
   1e754:	4640      	mov	r0, r8
   1e756:	f8ca 7004 	str.w	r7, [sl, #4]
   1e75a:	f7ff fe9b 	bl	1e494 <__malloc_unlock>
   1e75e:	e751      	b.n	1e604 <_realloc_r+0xe4>
   1e760:	682b      	ldr	r3, [r5, #0]
   1e762:	6003      	str	r3, [r0, #0]
   1e764:	686b      	ldr	r3, [r5, #4]
   1e766:	6043      	str	r3, [r0, #4]
   1e768:	2a1b      	cmp	r2, #27
   1e76a:	d82d      	bhi.n	1e7c8 <_realloc_r+0x2a8>
   1e76c:	f100 0308 	add.w	r3, r0, #8
   1e770:	f105 0208 	add.w	r2, r5, #8
   1e774:	e71b      	b.n	1e5ae <_realloc_r+0x8e>
   1e776:	4632      	mov	r2, r6
   1e778:	6829      	ldr	r1, [r5, #0]
   1e77a:	6011      	str	r1, [r2, #0]
   1e77c:	6869      	ldr	r1, [r5, #4]
   1e77e:	6051      	str	r1, [r2, #4]
   1e780:	68a9      	ldr	r1, [r5, #8]
   1e782:	6091      	str	r1, [r2, #8]
   1e784:	461c      	mov	r4, r3
   1e786:	46d1      	mov	r9, sl
   1e788:	e72a      	b.n	1e5e0 <_realloc_r+0xc0>
   1e78a:	eb09 0107 	add.w	r1, r9, r7
   1e78e:	ebab 0b07 	sub.w	fp, fp, r7
   1e792:	f04b 0201 	orr.w	r2, fp, #1
   1e796:	6099      	str	r1, [r3, #8]
   1e798:	604a      	str	r2, [r1, #4]
   1e79a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e79e:	f003 0301 	and.w	r3, r3, #1
   1e7a2:	431f      	orrs	r7, r3
   1e7a4:	4640      	mov	r0, r8
   1e7a6:	f845 7c04 	str.w	r7, [r5, #-4]
   1e7aa:	f7ff fe73 	bl	1e494 <__malloc_unlock>
   1e7ae:	462e      	mov	r6, r5
   1e7b0:	e728      	b.n	1e604 <_realloc_r+0xe4>
   1e7b2:	4629      	mov	r1, r5
   1e7b4:	f7ff fdb6 	bl	1e324 <memmove>
   1e7b8:	e6ff      	b.n	1e5ba <_realloc_r+0x9a>
   1e7ba:	4629      	mov	r1, r5
   1e7bc:	4630      	mov	r0, r6
   1e7be:	461c      	mov	r4, r3
   1e7c0:	46d1      	mov	r9, sl
   1e7c2:	f7ff fdaf 	bl	1e324 <memmove>
   1e7c6:	e70b      	b.n	1e5e0 <_realloc_r+0xc0>
   1e7c8:	68ab      	ldr	r3, [r5, #8]
   1e7ca:	6083      	str	r3, [r0, #8]
   1e7cc:	68eb      	ldr	r3, [r5, #12]
   1e7ce:	60c3      	str	r3, [r0, #12]
   1e7d0:	2a24      	cmp	r2, #36	; 0x24
   1e7d2:	d017      	beq.n	1e804 <_realloc_r+0x2e4>
   1e7d4:	f100 0310 	add.w	r3, r0, #16
   1e7d8:	f105 0210 	add.w	r2, r5, #16
   1e7dc:	e6e7      	b.n	1e5ae <_realloc_r+0x8e>
   1e7de:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e7e2:	f023 0303 	bic.w	r3, r3, #3
   1e7e6:	441c      	add	r4, r3
   1e7e8:	462e      	mov	r6, r5
   1e7ea:	e6f9      	b.n	1e5e0 <_realloc_r+0xc0>
   1e7ec:	68a9      	ldr	r1, [r5, #8]
   1e7ee:	f8ca 1010 	str.w	r1, [sl, #16]
   1e7f2:	68e9      	ldr	r1, [r5, #12]
   1e7f4:	f8ca 1014 	str.w	r1, [sl, #20]
   1e7f8:	2a24      	cmp	r2, #36	; 0x24
   1e7fa:	d00c      	beq.n	1e816 <_realloc_r+0x2f6>
   1e7fc:	3510      	adds	r5, #16
   1e7fe:	f10a 0218 	add.w	r2, sl, #24
   1e802:	e7b9      	b.n	1e778 <_realloc_r+0x258>
   1e804:	692b      	ldr	r3, [r5, #16]
   1e806:	6103      	str	r3, [r0, #16]
   1e808:	696b      	ldr	r3, [r5, #20]
   1e80a:	6143      	str	r3, [r0, #20]
   1e80c:	f105 0218 	add.w	r2, r5, #24
   1e810:	f100 0318 	add.w	r3, r0, #24
   1e814:	e6cb      	b.n	1e5ae <_realloc_r+0x8e>
   1e816:	692a      	ldr	r2, [r5, #16]
   1e818:	f8ca 2018 	str.w	r2, [sl, #24]
   1e81c:	696a      	ldr	r2, [r5, #20]
   1e81e:	f8ca 201c 	str.w	r2, [sl, #28]
   1e822:	3518      	adds	r5, #24
   1e824:	f10a 0220 	add.w	r2, sl, #32
   1e828:	e7a6      	b.n	1e778 <_realloc_r+0x258>
   1e82a:	4632      	mov	r2, r6
   1e82c:	e77f      	b.n	1e72e <_realloc_r+0x20e>
   1e82e:	4629      	mov	r1, r5
   1e830:	4630      	mov	r0, r6
   1e832:	9301      	str	r3, [sp, #4]
   1e834:	f7ff fd76 	bl	1e324 <memmove>
   1e838:	9b01      	ldr	r3, [sp, #4]
   1e83a:	e77e      	b.n	1e73a <_realloc_r+0x21a>
   1e83c:	68a9      	ldr	r1, [r5, #8]
   1e83e:	f8ca 1010 	str.w	r1, [sl, #16]
   1e842:	68e9      	ldr	r1, [r5, #12]
   1e844:	f8ca 1014 	str.w	r1, [sl, #20]
   1e848:	2a24      	cmp	r2, #36	; 0x24
   1e84a:	d003      	beq.n	1e854 <_realloc_r+0x334>
   1e84c:	3510      	adds	r5, #16
   1e84e:	f10a 0218 	add.w	r2, sl, #24
   1e852:	e76c      	b.n	1e72e <_realloc_r+0x20e>
   1e854:	692a      	ldr	r2, [r5, #16]
   1e856:	f8ca 2018 	str.w	r2, [sl, #24]
   1e85a:	696a      	ldr	r2, [r5, #20]
   1e85c:	f8ca 201c 	str.w	r2, [sl, #28]
   1e860:	3518      	adds	r5, #24
   1e862:	f10a 0220 	add.w	r2, sl, #32
   1e866:	e762      	b.n	1e72e <_realloc_r+0x20e>
   1e868:	20000530 	.word	0x20000530

0001e86c <_sbrk_r>:
   1e86c:	b538      	push	{r3, r4, r5, lr}
   1e86e:	4c07      	ldr	r4, [pc, #28]	; (1e88c <_sbrk_r+0x20>)
   1e870:	2300      	movs	r3, #0
   1e872:	4605      	mov	r5, r0
   1e874:	4608      	mov	r0, r1
   1e876:	6023      	str	r3, [r4, #0]
   1e878:	f003 ff80 	bl	2277c <_sbrk>
   1e87c:	1c43      	adds	r3, r0, #1
   1e87e:	d000      	beq.n	1e882 <_sbrk_r+0x16>
   1e880:	bd38      	pop	{r3, r4, r5, pc}
   1e882:	6823      	ldr	r3, [r4, #0]
   1e884:	2b00      	cmp	r3, #0
   1e886:	d0fb      	beq.n	1e880 <_sbrk_r+0x14>
   1e888:	602b      	str	r3, [r5, #0]
   1e88a:	bd38      	pop	{r3, r4, r5, pc}
   1e88c:	200023b4 	.word	0x200023b4

0001e890 <_raise_r>:
   1e890:	291f      	cmp	r1, #31
   1e892:	d828      	bhi.n	1e8e6 <_raise_r+0x56>
   1e894:	b520      	push	{r5, lr}
   1e896:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1e89a:	b082      	sub	sp, #8
   1e89c:	4605      	mov	r5, r0
   1e89e:	b1aa      	cbz	r2, 1e8cc <_raise_r+0x3c>
   1e8a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e8a4:	b193      	cbz	r3, 1e8cc <_raise_r+0x3c>
   1e8a6:	2b01      	cmp	r3, #1
   1e8a8:	d00e      	beq.n	1e8c8 <_raise_r+0x38>
   1e8aa:	1c58      	adds	r0, r3, #1
   1e8ac:	d007      	beq.n	1e8be <_raise_r+0x2e>
   1e8ae:	2500      	movs	r5, #0
   1e8b0:	4608      	mov	r0, r1
   1e8b2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1e8b6:	4798      	blx	r3
   1e8b8:	4628      	mov	r0, r5
   1e8ba:	b002      	add	sp, #8
   1e8bc:	bd20      	pop	{r5, pc}
   1e8be:	2316      	movs	r3, #22
   1e8c0:	2001      	movs	r0, #1
   1e8c2:	602b      	str	r3, [r5, #0]
   1e8c4:	b002      	add	sp, #8
   1e8c6:	bd20      	pop	{r5, pc}
   1e8c8:	2000      	movs	r0, #0
   1e8ca:	e7f6      	b.n	1e8ba <_raise_r+0x2a>
   1e8cc:	4628      	mov	r0, r5
   1e8ce:	9101      	str	r1, [sp, #4]
   1e8d0:	f000 f82a 	bl	1e928 <_getpid_r>
   1e8d4:	9901      	ldr	r1, [sp, #4]
   1e8d6:	460a      	mov	r2, r1
   1e8d8:	4601      	mov	r1, r0
   1e8da:	4628      	mov	r0, r5
   1e8dc:	b002      	add	sp, #8
   1e8de:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1e8e2:	f000 b80d 	b.w	1e900 <_kill_r>
   1e8e6:	2316      	movs	r3, #22
   1e8e8:	6003      	str	r3, [r0, #0]
   1e8ea:	f04f 30ff 	mov.w	r0, #4294967295
   1e8ee:	4770      	bx	lr

0001e8f0 <raise>:
   1e8f0:	4b02      	ldr	r3, [pc, #8]	; (1e8fc <raise+0xc>)
   1e8f2:	4601      	mov	r1, r0
   1e8f4:	6818      	ldr	r0, [r3, #0]
   1e8f6:	f7ff bfcb 	b.w	1e890 <_raise_r>
   1e8fa:	bf00      	nop
   1e8fc:	20000100 	.word	0x20000100

0001e900 <_kill_r>:
   1e900:	b538      	push	{r3, r4, r5, lr}
   1e902:	460b      	mov	r3, r1
   1e904:	4c07      	ldr	r4, [pc, #28]	; (1e924 <_kill_r+0x24>)
   1e906:	4605      	mov	r5, r0
   1e908:	4611      	mov	r1, r2
   1e90a:	4618      	mov	r0, r3
   1e90c:	2300      	movs	r3, #0
   1e90e:	6023      	str	r3, [r4, #0]
   1e910:	f003 ffae 	bl	22870 <_kill>
   1e914:	1c43      	adds	r3, r0, #1
   1e916:	d000      	beq.n	1e91a <_kill_r+0x1a>
   1e918:	bd38      	pop	{r3, r4, r5, pc}
   1e91a:	6823      	ldr	r3, [r4, #0]
   1e91c:	2b00      	cmp	r3, #0
   1e91e:	d0fb      	beq.n	1e918 <_kill_r+0x18>
   1e920:	602b      	str	r3, [r5, #0]
   1e922:	bd38      	pop	{r3, r4, r5, pc}
   1e924:	200023b4 	.word	0x200023b4

0001e928 <_getpid_r>:
   1e928:	f003 bf26 	b.w	22778 <_getpid>

0001e92c <sprintf>:
   1e92c:	b40e      	push	{r1, r2, r3}
   1e92e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e930:	b09c      	sub	sp, #112	; 0x70
   1e932:	ab21      	add	r3, sp, #132	; 0x84
   1e934:	490f      	ldr	r1, [pc, #60]	; (1e974 <sprintf+0x48>)
   1e936:	f853 2b04 	ldr.w	r2, [r3], #4
   1e93a:	9301      	str	r3, [sp, #4]
   1e93c:	4605      	mov	r5, r0
   1e93e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1e942:	6808      	ldr	r0, [r1, #0]
   1e944:	9502      	str	r5, [sp, #8]
   1e946:	f44f 7702 	mov.w	r7, #520	; 0x208
   1e94a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e94e:	a902      	add	r1, sp, #8
   1e950:	9506      	str	r5, [sp, #24]
   1e952:	f8ad 7014 	strh.w	r7, [sp, #20]
   1e956:	9404      	str	r4, [sp, #16]
   1e958:	9407      	str	r4, [sp, #28]
   1e95a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1e95e:	f000 fa4f 	bl	1ee00 <_svfprintf_r>
   1e962:	9b02      	ldr	r3, [sp, #8]
   1e964:	2200      	movs	r2, #0
   1e966:	701a      	strb	r2, [r3, #0]
   1e968:	b01c      	add	sp, #112	; 0x70
   1e96a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e96e:	b003      	add	sp, #12
   1e970:	4770      	bx	lr
   1e972:	bf00      	nop
   1e974:	20000100 	.word	0x20000100
	...
   1e980:	eba2 0003 	sub.w	r0, r2, r3
   1e984:	4770      	bx	lr
   1e986:	bf00      	nop

0001e988 <strcmp>:
   1e988:	7802      	ldrb	r2, [r0, #0]
   1e98a:	780b      	ldrb	r3, [r1, #0]
   1e98c:	2a01      	cmp	r2, #1
   1e98e:	bf28      	it	cs
   1e990:	429a      	cmpcs	r2, r3
   1e992:	d1f5      	bne.n	1e980 <sprintf+0x54>
   1e994:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1e998:	ea40 0401 	orr.w	r4, r0, r1
   1e99c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1e9a0:	f06f 0c00 	mvn.w	ip, #0
   1e9a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1e9a8:	b312      	cbz	r2, 1e9f0 <strcmp+0x68>
   1e9aa:	ea80 0401 	eor.w	r4, r0, r1
   1e9ae:	f014 0f07 	tst.w	r4, #7
   1e9b2:	d16a      	bne.n	1ea8a <strcmp+0x102>
   1e9b4:	f000 0407 	and.w	r4, r0, #7
   1e9b8:	f020 0007 	bic.w	r0, r0, #7
   1e9bc:	f004 0503 	and.w	r5, r4, #3
   1e9c0:	f021 0107 	bic.w	r1, r1, #7
   1e9c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1e9c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e9cc:	f014 0f04 	tst.w	r4, #4
   1e9d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e9d4:	fa0c f405 	lsl.w	r4, ip, r5
   1e9d8:	ea62 0204 	orn	r2, r2, r4
   1e9dc:	ea66 0604 	orn	r6, r6, r4
   1e9e0:	d00a      	beq.n	1e9f8 <strcmp+0x70>
   1e9e2:	ea63 0304 	orn	r3, r3, r4
   1e9e6:	4662      	mov	r2, ip
   1e9e8:	ea67 0704 	orn	r7, r7, r4
   1e9ec:	4666      	mov	r6, ip
   1e9ee:	e003      	b.n	1e9f8 <strcmp+0x70>
   1e9f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e9f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e9f8:	fa82 f54c 	uadd8	r5, r2, ip
   1e9fc:	ea82 0406 	eor.w	r4, r2, r6
   1ea00:	faa4 f48c 	sel	r4, r4, ip
   1ea04:	bb6c      	cbnz	r4, 1ea62 <strcmp+0xda>
   1ea06:	fa83 f54c 	uadd8	r5, r3, ip
   1ea0a:	ea83 0507 	eor.w	r5, r3, r7
   1ea0e:	faa5 f58c 	sel	r5, r5, ip
   1ea12:	b995      	cbnz	r5, 1ea3a <strcmp+0xb2>
   1ea14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1ea18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1ea1c:	fa82 f54c 	uadd8	r5, r2, ip
   1ea20:	ea82 0406 	eor.w	r4, r2, r6
   1ea24:	faa4 f48c 	sel	r4, r4, ip
   1ea28:	fa83 f54c 	uadd8	r5, r3, ip
   1ea2c:	ea83 0507 	eor.w	r5, r3, r7
   1ea30:	faa5 f58c 	sel	r5, r5, ip
   1ea34:	4325      	orrs	r5, r4
   1ea36:	d0db      	beq.n	1e9f0 <strcmp+0x68>
   1ea38:	b99c      	cbnz	r4, 1ea62 <strcmp+0xda>
   1ea3a:	ba2d      	rev	r5, r5
   1ea3c:	fab5 f485 	clz	r4, r5
   1ea40:	f024 0407 	bic.w	r4, r4, #7
   1ea44:	fa27 f104 	lsr.w	r1, r7, r4
   1ea48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ea4c:	fa23 f304 	lsr.w	r3, r3, r4
   1ea50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ea54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ea58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ea5c:	eba0 0001 	sub.w	r0, r0, r1
   1ea60:	4770      	bx	lr
   1ea62:	ba24      	rev	r4, r4
   1ea64:	fab4 f484 	clz	r4, r4
   1ea68:	f024 0407 	bic.w	r4, r4, #7
   1ea6c:	fa26 f104 	lsr.w	r1, r6, r4
   1ea70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ea74:	fa22 f204 	lsr.w	r2, r2, r4
   1ea78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ea7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ea80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ea84:	eba0 0001 	sub.w	r0, r0, r1
   1ea88:	4770      	bx	lr
   1ea8a:	f014 0f03 	tst.w	r4, #3
   1ea8e:	d13c      	bne.n	1eb0a <strcmp+0x182>
   1ea90:	f010 0403 	ands.w	r4, r0, #3
   1ea94:	d128      	bne.n	1eae8 <strcmp+0x160>
   1ea96:	f850 2b08 	ldr.w	r2, [r0], #8
   1ea9a:	f851 3b08 	ldr.w	r3, [r1], #8
   1ea9e:	fa82 f54c 	uadd8	r5, r2, ip
   1eaa2:	ea82 0503 	eor.w	r5, r2, r3
   1eaa6:	faa5 f58c 	sel	r5, r5, ip
   1eaaa:	b95d      	cbnz	r5, 1eac4 <strcmp+0x13c>
   1eaac:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1eab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1eab4:	fa82 f54c 	uadd8	r5, r2, ip
   1eab8:	ea82 0503 	eor.w	r5, r2, r3
   1eabc:	faa5 f58c 	sel	r5, r5, ip
   1eac0:	2d00      	cmp	r5, #0
   1eac2:	d0e8      	beq.n	1ea96 <strcmp+0x10e>
   1eac4:	ba2d      	rev	r5, r5
   1eac6:	fab5 f485 	clz	r4, r5
   1eaca:	f024 0407 	bic.w	r4, r4, #7
   1eace:	fa23 f104 	lsr.w	r1, r3, r4
   1ead2:	fa22 f204 	lsr.w	r2, r2, r4
   1ead6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1eada:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eade:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eae2:	eba0 0001 	sub.w	r0, r0, r1
   1eae6:	4770      	bx	lr
   1eae8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1eaec:	f020 0003 	bic.w	r0, r0, #3
   1eaf0:	f850 2b08 	ldr.w	r2, [r0], #8
   1eaf4:	f021 0103 	bic.w	r1, r1, #3
   1eaf8:	f851 3b08 	ldr.w	r3, [r1], #8
   1eafc:	fa0c f404 	lsl.w	r4, ip, r4
   1eb00:	ea62 0204 	orn	r2, r2, r4
   1eb04:	ea63 0304 	orn	r3, r3, r4
   1eb08:	e7c9      	b.n	1ea9e <strcmp+0x116>
   1eb0a:	f010 0403 	ands.w	r4, r0, #3
   1eb0e:	d01a      	beq.n	1eb46 <strcmp+0x1be>
   1eb10:	eba1 0104 	sub.w	r1, r1, r4
   1eb14:	f020 0003 	bic.w	r0, r0, #3
   1eb18:	07e4      	lsls	r4, r4, #31
   1eb1a:	f850 2b04 	ldr.w	r2, [r0], #4
   1eb1e:	d006      	beq.n	1eb2e <strcmp+0x1a6>
   1eb20:	d20f      	bcs.n	1eb42 <strcmp+0x1ba>
   1eb22:	788b      	ldrb	r3, [r1, #2]
   1eb24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1eb28:	1ae4      	subs	r4, r4, r3
   1eb2a:	d106      	bne.n	1eb3a <strcmp+0x1b2>
   1eb2c:	b12b      	cbz	r3, 1eb3a <strcmp+0x1b2>
   1eb2e:	78cb      	ldrb	r3, [r1, #3]
   1eb30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1eb34:	1ae4      	subs	r4, r4, r3
   1eb36:	d100      	bne.n	1eb3a <strcmp+0x1b2>
   1eb38:	b91b      	cbnz	r3, 1eb42 <strcmp+0x1ba>
   1eb3a:	4620      	mov	r0, r4
   1eb3c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1eb40:	4770      	bx	lr
   1eb42:	f101 0104 	add.w	r1, r1, #4
   1eb46:	f850 2b04 	ldr.w	r2, [r0], #4
   1eb4a:	07cc      	lsls	r4, r1, #31
   1eb4c:	f021 0103 	bic.w	r1, r1, #3
   1eb50:	f851 3b04 	ldr.w	r3, [r1], #4
   1eb54:	d848      	bhi.n	1ebe8 <strcmp+0x260>
   1eb56:	d224      	bcs.n	1eba2 <strcmp+0x21a>
   1eb58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1eb5c:	fa82 f54c 	uadd8	r5, r2, ip
   1eb60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1eb64:	faa5 f58c 	sel	r5, r5, ip
   1eb68:	d10a      	bne.n	1eb80 <strcmp+0x1f8>
   1eb6a:	b965      	cbnz	r5, 1eb86 <strcmp+0x1fe>
   1eb6c:	f851 3b04 	ldr.w	r3, [r1], #4
   1eb70:	ea84 0402 	eor.w	r4, r4, r2
   1eb74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1eb78:	d10e      	bne.n	1eb98 <strcmp+0x210>
   1eb7a:	f850 2b04 	ldr.w	r2, [r0], #4
   1eb7e:	e7eb      	b.n	1eb58 <strcmp+0x1d0>
   1eb80:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1eb84:	e055      	b.n	1ec32 <strcmp+0x2aa>
   1eb86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1eb8a:	d14d      	bne.n	1ec28 <strcmp+0x2a0>
   1eb8c:	7808      	ldrb	r0, [r1, #0]
   1eb8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eb92:	f1c0 0000 	rsb	r0, r0, #0
   1eb96:	4770      	bx	lr
   1eb98:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1eb9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1eba0:	e047      	b.n	1ec32 <strcmp+0x2aa>
   1eba2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1eba6:	fa82 f54c 	uadd8	r5, r2, ip
   1ebaa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1ebae:	faa5 f58c 	sel	r5, r5, ip
   1ebb2:	d10a      	bne.n	1ebca <strcmp+0x242>
   1ebb4:	b965      	cbnz	r5, 1ebd0 <strcmp+0x248>
   1ebb6:	f851 3b04 	ldr.w	r3, [r1], #4
   1ebba:	ea84 0402 	eor.w	r4, r4, r2
   1ebbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1ebc2:	d10c      	bne.n	1ebde <strcmp+0x256>
   1ebc4:	f850 2b04 	ldr.w	r2, [r0], #4
   1ebc8:	e7eb      	b.n	1eba2 <strcmp+0x21a>
   1ebca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ebce:	e030      	b.n	1ec32 <strcmp+0x2aa>
   1ebd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1ebd4:	d128      	bne.n	1ec28 <strcmp+0x2a0>
   1ebd6:	880b      	ldrh	r3, [r1, #0]
   1ebd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ebdc:	e029      	b.n	1ec32 <strcmp+0x2aa>
   1ebde:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ebe2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1ebe6:	e024      	b.n	1ec32 <strcmp+0x2aa>
   1ebe8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1ebec:	fa82 f54c 	uadd8	r5, r2, ip
   1ebf0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1ebf4:	faa5 f58c 	sel	r5, r5, ip
   1ebf8:	d10a      	bne.n	1ec10 <strcmp+0x288>
   1ebfa:	b965      	cbnz	r5, 1ec16 <strcmp+0x28e>
   1ebfc:	f851 3b04 	ldr.w	r3, [r1], #4
   1ec00:	ea84 0402 	eor.w	r4, r4, r2
   1ec04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1ec08:	d109      	bne.n	1ec1e <strcmp+0x296>
   1ec0a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec0e:	e7eb      	b.n	1ebe8 <strcmp+0x260>
   1ec10:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1ec14:	e00d      	b.n	1ec32 <strcmp+0x2aa>
   1ec16:	f015 0fff 	tst.w	r5, #255	; 0xff
   1ec1a:	d105      	bne.n	1ec28 <strcmp+0x2a0>
   1ec1c:	680b      	ldr	r3, [r1, #0]
   1ec1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1ec22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ec26:	e004      	b.n	1ec32 <strcmp+0x2aa>
   1ec28:	f04f 0000 	mov.w	r0, #0
   1ec2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec30:	4770      	bx	lr
   1ec32:	ba12      	rev	r2, r2
   1ec34:	ba1b      	rev	r3, r3
   1ec36:	fa82 f44c 	uadd8	r4, r2, ip
   1ec3a:	ea82 0403 	eor.w	r4, r2, r3
   1ec3e:	faa4 f58c 	sel	r5, r4, ip
   1ec42:	fab5 f485 	clz	r4, r5
   1ec46:	fa02 f204 	lsl.w	r2, r2, r4
   1ec4a:	fa03 f304 	lsl.w	r3, r3, r4
   1ec4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1ec52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1ec5a:	4770      	bx	lr
	...

0001ec80 <strlen>:
   1ec80:	f890 f000 	pld	[r0]
   1ec84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1ec88:	f020 0107 	bic.w	r1, r0, #7
   1ec8c:	f06f 0c00 	mvn.w	ip, #0
   1ec90:	f010 0407 	ands.w	r4, r0, #7
   1ec94:	f891 f020 	pld	[r1, #32]
   1ec98:	f040 8049 	bne.w	1ed2e <strlen+0xae>
   1ec9c:	f04f 0400 	mov.w	r4, #0
   1eca0:	f06f 0007 	mvn.w	r0, #7
   1eca4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1eca8:	f891 f040 	pld	[r1, #64]	; 0x40
   1ecac:	f100 0008 	add.w	r0, r0, #8
   1ecb0:	fa82 f24c 	uadd8	r2, r2, ip
   1ecb4:	faa4 f28c 	sel	r2, r4, ip
   1ecb8:	fa83 f34c 	uadd8	r3, r3, ip
   1ecbc:	faa2 f38c 	sel	r3, r2, ip
   1ecc0:	bb4b      	cbnz	r3, 1ed16 <strlen+0x96>
   1ecc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ecc6:	fa82 f24c 	uadd8	r2, r2, ip
   1ecca:	f100 0008 	add.w	r0, r0, #8
   1ecce:	faa4 f28c 	sel	r2, r4, ip
   1ecd2:	fa83 f34c 	uadd8	r3, r3, ip
   1ecd6:	faa2 f38c 	sel	r3, r2, ip
   1ecda:	b9e3      	cbnz	r3, 1ed16 <strlen+0x96>
   1ecdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1ece0:	fa82 f24c 	uadd8	r2, r2, ip
   1ece4:	f100 0008 	add.w	r0, r0, #8
   1ece8:	faa4 f28c 	sel	r2, r4, ip
   1ecec:	fa83 f34c 	uadd8	r3, r3, ip
   1ecf0:	faa2 f38c 	sel	r3, r2, ip
   1ecf4:	b97b      	cbnz	r3, 1ed16 <strlen+0x96>
   1ecf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1ecfa:	f101 0120 	add.w	r1, r1, #32
   1ecfe:	fa82 f24c 	uadd8	r2, r2, ip
   1ed02:	f100 0008 	add.w	r0, r0, #8
   1ed06:	faa4 f28c 	sel	r2, r4, ip
   1ed0a:	fa83 f34c 	uadd8	r3, r3, ip
   1ed0e:	faa2 f38c 	sel	r3, r2, ip
   1ed12:	2b00      	cmp	r3, #0
   1ed14:	d0c6      	beq.n	1eca4 <strlen+0x24>
   1ed16:	2a00      	cmp	r2, #0
   1ed18:	bf04      	itt	eq
   1ed1a:	3004      	addeq	r0, #4
   1ed1c:	461a      	moveq	r2, r3
   1ed1e:	ba12      	rev	r2, r2
   1ed20:	fab2 f282 	clz	r2, r2
   1ed24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1ed28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1ed2c:	4770      	bx	lr
   1ed2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ed32:	f004 0503 	and.w	r5, r4, #3
   1ed36:	f1c4 0000 	rsb	r0, r4, #0
   1ed3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ed3e:	f014 0f04 	tst.w	r4, #4
   1ed42:	f891 f040 	pld	[r1, #64]	; 0x40
   1ed46:	fa0c f505 	lsl.w	r5, ip, r5
   1ed4a:	ea62 0205 	orn	r2, r2, r5
   1ed4e:	bf1c      	itt	ne
   1ed50:	ea63 0305 	ornne	r3, r3, r5
   1ed54:	4662      	movne	r2, ip
   1ed56:	f04f 0400 	mov.w	r4, #0
   1ed5a:	e7a9      	b.n	1ecb0 <strlen+0x30>

0001ed5c <strncmp>:
   1ed5c:	2a00      	cmp	r2, #0
   1ed5e:	d041      	beq.n	1ede4 <strncmp+0x88>
   1ed60:	ea40 0301 	orr.w	r3, r0, r1
   1ed64:	f013 0303 	ands.w	r3, r3, #3
   1ed68:	b4f0      	push	{r4, r5, r6, r7}
   1ed6a:	d125      	bne.n	1edb8 <strncmp+0x5c>
   1ed6c:	2a03      	cmp	r2, #3
   1ed6e:	d923      	bls.n	1edb8 <strncmp+0x5c>
   1ed70:	6804      	ldr	r4, [r0, #0]
   1ed72:	680d      	ldr	r5, [r1, #0]
   1ed74:	42ac      	cmp	r4, r5
   1ed76:	d11f      	bne.n	1edb8 <strncmp+0x5c>
   1ed78:	3a04      	subs	r2, #4
   1ed7a:	d038      	beq.n	1edee <strncmp+0x92>
   1ed7c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1ed80:	ea25 0404 	bic.w	r4, r5, r4
   1ed84:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ed88:	d12e      	bne.n	1ede8 <strncmp+0x8c>
   1ed8a:	3004      	adds	r0, #4
   1ed8c:	3104      	adds	r1, #4
   1ed8e:	e00f      	b.n	1edb0 <strncmp+0x54>
   1ed90:	f850 3b04 	ldr.w	r3, [r0], #4
   1ed94:	680e      	ldr	r6, [r1, #0]
   1ed96:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1ed9a:	42b3      	cmp	r3, r6
   1ed9c:	ea24 0403 	bic.w	r4, r4, r3
   1eda0:	f101 0104 	add.w	r1, r1, #4
   1eda4:	d126      	bne.n	1edf4 <strncmp+0x98>
   1eda6:	3a04      	subs	r2, #4
   1eda8:	d021      	beq.n	1edee <strncmp+0x92>
   1edaa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1edae:	d11b      	bne.n	1ede8 <strncmp+0x8c>
   1edb0:	2a03      	cmp	r2, #3
   1edb2:	4607      	mov	r7, r0
   1edb4:	460d      	mov	r5, r1
   1edb6:	d8eb      	bhi.n	1ed90 <strncmp+0x34>
   1edb8:	7805      	ldrb	r5, [r0, #0]
   1edba:	780c      	ldrb	r4, [r1, #0]
   1edbc:	42ac      	cmp	r4, r5
   1edbe:	f102 33ff 	add.w	r3, r2, #4294967295
   1edc2:	d11a      	bne.n	1edfa <strncmp+0x9e>
   1edc4:	b183      	cbz	r3, 1ede8 <strncmp+0x8c>
   1edc6:	b914      	cbnz	r4, 1edce <strncmp+0x72>
   1edc8:	e00e      	b.n	1ede8 <strncmp+0x8c>
   1edca:	b16b      	cbz	r3, 1ede8 <strncmp+0x8c>
   1edcc:	b17a      	cbz	r2, 1edee <strncmp+0x92>
   1edce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1edd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1edd6:	42a2      	cmp	r2, r4
   1edd8:	f103 33ff 	add.w	r3, r3, #4294967295
   1eddc:	d0f5      	beq.n	1edca <strncmp+0x6e>
   1edde:	1b10      	subs	r0, r2, r4
   1ede0:	bcf0      	pop	{r4, r5, r6, r7}
   1ede2:	4770      	bx	lr
   1ede4:	4610      	mov	r0, r2
   1ede6:	4770      	bx	lr
   1ede8:	2000      	movs	r0, #0
   1edea:	bcf0      	pop	{r4, r5, r6, r7}
   1edec:	4770      	bx	lr
   1edee:	4610      	mov	r0, r2
   1edf0:	bcf0      	pop	{r4, r5, r6, r7}
   1edf2:	4770      	bx	lr
   1edf4:	4629      	mov	r1, r5
   1edf6:	4638      	mov	r0, r7
   1edf8:	e7de      	b.n	1edb8 <strncmp+0x5c>
   1edfa:	462a      	mov	r2, r5
   1edfc:	e7ef      	b.n	1edde <strncmp+0x82>
   1edfe:	bf00      	nop

0001ee00 <_svfprintf_r>:
   1ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee04:	b0c1      	sub	sp, #260	; 0x104
   1ee06:	460c      	mov	r4, r1
   1ee08:	9107      	str	r1, [sp, #28]
   1ee0a:	4692      	mov	sl, r2
   1ee0c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ee0e:	9008      	str	r0, [sp, #32]
   1ee10:	f002 fdd2 	bl	219b8 <_localeconv_r>
   1ee14:	6803      	ldr	r3, [r0, #0]
   1ee16:	9314      	str	r3, [sp, #80]	; 0x50
   1ee18:	4618      	mov	r0, r3
   1ee1a:	f7ff ff31 	bl	1ec80 <strlen>
   1ee1e:	89a3      	ldrh	r3, [r4, #12]
   1ee20:	9013      	str	r0, [sp, #76]	; 0x4c
   1ee22:	0619      	lsls	r1, r3, #24
   1ee24:	d503      	bpl.n	1ee2e <_svfprintf_r+0x2e>
   1ee26:	6923      	ldr	r3, [r4, #16]
   1ee28:	2b00      	cmp	r3, #0
   1ee2a:	f001 801b 	beq.w	1fe64 <_svfprintf_r+0x1064>
   1ee2e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f080 <_svfprintf_r+0x280>
   1ee32:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1ee36:	2300      	movs	r3, #0
   1ee38:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1ee3c:	930f      	str	r3, [sp, #60]	; 0x3c
   1ee3e:	9325      	str	r3, [sp, #148]	; 0x94
   1ee40:	9324      	str	r3, [sp, #144]	; 0x90
   1ee42:	9312      	str	r3, [sp, #72]	; 0x48
   1ee44:	9315      	str	r3, [sp, #84]	; 0x54
   1ee46:	9305      	str	r3, [sp, #20]
   1ee48:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1ee4c:	46c8      	mov	r8, r9
   1ee4e:	f89a 3000 	ldrb.w	r3, [sl]
   1ee52:	4654      	mov	r4, sl
   1ee54:	b1e3      	cbz	r3, 1ee90 <_svfprintf_r+0x90>
   1ee56:	2b25      	cmp	r3, #37	; 0x25
   1ee58:	d102      	bne.n	1ee60 <_svfprintf_r+0x60>
   1ee5a:	e019      	b.n	1ee90 <_svfprintf_r+0x90>
   1ee5c:	2b25      	cmp	r3, #37	; 0x25
   1ee5e:	d003      	beq.n	1ee68 <_svfprintf_r+0x68>
   1ee60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ee64:	2b00      	cmp	r3, #0
   1ee66:	d1f9      	bne.n	1ee5c <_svfprintf_r+0x5c>
   1ee68:	eba4 050a 	sub.w	r5, r4, sl
   1ee6c:	b185      	cbz	r5, 1ee90 <_svfprintf_r+0x90>
   1ee6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ee70:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ee72:	f8c8 a000 	str.w	sl, [r8]
   1ee76:	3301      	adds	r3, #1
   1ee78:	442a      	add	r2, r5
   1ee7a:	2b07      	cmp	r3, #7
   1ee7c:	f8c8 5004 	str.w	r5, [r8, #4]
   1ee80:	9225      	str	r2, [sp, #148]	; 0x94
   1ee82:	9324      	str	r3, [sp, #144]	; 0x90
   1ee84:	dc7f      	bgt.n	1ef86 <_svfprintf_r+0x186>
   1ee86:	f108 0808 	add.w	r8, r8, #8
   1ee8a:	9b05      	ldr	r3, [sp, #20]
   1ee8c:	442b      	add	r3, r5
   1ee8e:	9305      	str	r3, [sp, #20]
   1ee90:	7823      	ldrb	r3, [r4, #0]
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	d07f      	beq.n	1ef96 <_svfprintf_r+0x196>
   1ee96:	2300      	movs	r3, #0
   1ee98:	461a      	mov	r2, r3
   1ee9a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1ee9e:	4619      	mov	r1, r3
   1eea0:	9309      	str	r3, [sp, #36]	; 0x24
   1eea2:	469b      	mov	fp, r3
   1eea4:	f04f 30ff 	mov.w	r0, #4294967295
   1eea8:	7863      	ldrb	r3, [r4, #1]
   1eeaa:	9006      	str	r0, [sp, #24]
   1eeac:	f104 0a01 	add.w	sl, r4, #1
   1eeb0:	f10a 0a01 	add.w	sl, sl, #1
   1eeb4:	f1a3 0020 	sub.w	r0, r3, #32
   1eeb8:	2858      	cmp	r0, #88	; 0x58
   1eeba:	f200 83d3 	bhi.w	1f664 <_svfprintf_r+0x864>
   1eebe:	e8df f010 	tbh	[pc, r0, lsl #1]
   1eec2:	023f      	.short	0x023f
   1eec4:	03d103d1 	.word	0x03d103d1
   1eec8:	03d10247 	.word	0x03d10247
   1eecc:	03d103d1 	.word	0x03d103d1
   1eed0:	03d103d1 	.word	0x03d103d1
   1eed4:	024c03d1 	.word	0x024c03d1
   1eed8:	03d1020a 	.word	0x03d1020a
   1eedc:	0273005d 	.word	0x0273005d
   1eee0:	028e03d1 	.word	0x028e03d1
   1eee4:	03c103c1 	.word	0x03c103c1
   1eee8:	03c103c1 	.word	0x03c103c1
   1eeec:	03c103c1 	.word	0x03c103c1
   1eef0:	03c103c1 	.word	0x03c103c1
   1eef4:	03d103c1 	.word	0x03d103c1
   1eef8:	03d103d1 	.word	0x03d103d1
   1eefc:	03d103d1 	.word	0x03d103d1
   1ef00:	03d103d1 	.word	0x03d103d1
   1ef04:	03d103d1 	.word	0x03d103d1
   1ef08:	033f03d1 	.word	0x033f03d1
   1ef0c:	03d1035f 	.word	0x03d1035f
   1ef10:	03d1035f 	.word	0x03d1035f
   1ef14:	03d103d1 	.word	0x03d103d1
   1ef18:	03aa03d1 	.word	0x03aa03d1
   1ef1c:	03d103d1 	.word	0x03d103d1
   1ef20:	03d103af 	.word	0x03d103af
   1ef24:	03d103d1 	.word	0x03d103d1
   1ef28:	03d103d1 	.word	0x03d103d1
   1ef2c:	03d10261 	.word	0x03d10261
   1ef30:	032603d1 	.word	0x032603d1
   1ef34:	03d103d1 	.word	0x03d103d1
   1ef38:	03d103d1 	.word	0x03d103d1
   1ef3c:	03d103d1 	.word	0x03d103d1
   1ef40:	03d103d1 	.word	0x03d103d1
   1ef44:	03d103d1 	.word	0x03d103d1
   1ef48:	02e302ce 	.word	0x02e302ce
   1ef4c:	035f035f 	.word	0x035f035f
   1ef50:	0293035f 	.word	0x0293035f
   1ef54:	03d102e3 	.word	0x03d102e3
   1ef58:	029803d1 	.word	0x029803d1
   1ef5c:	02a503d1 	.word	0x02a503d1
   1ef60:	02bc01d3 	.word	0x02bc01d3
   1ef64:	03d1020f 	.word	0x03d1020f
   1ef68:	03d101e8 	.word	0x03d101e8
   1ef6c:	03d1007e 	.word	0x03d1007e
   1ef70:	021403d1 	.word	0x021403d1
   1ef74:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ef76:	930b      	str	r3, [sp, #44]	; 0x2c
   1ef78:	4240      	negs	r0, r0
   1ef7a:	9009      	str	r0, [sp, #36]	; 0x24
   1ef7c:	f04b 0b04 	orr.w	fp, fp, #4
   1ef80:	f89a 3000 	ldrb.w	r3, [sl]
   1ef84:	e794      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1ef86:	aa23      	add	r2, sp, #140	; 0x8c
   1ef88:	9907      	ldr	r1, [sp, #28]
   1ef8a:	9808      	ldr	r0, [sp, #32]
   1ef8c:	f003 f8da 	bl	22144 <__ssprint_r>
   1ef90:	b940      	cbnz	r0, 1efa4 <_svfprintf_r+0x1a4>
   1ef92:	46c8      	mov	r8, r9
   1ef94:	e779      	b.n	1ee8a <_svfprintf_r+0x8a>
   1ef96:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1ef98:	b123      	cbz	r3, 1efa4 <_svfprintf_r+0x1a4>
   1ef9a:	9808      	ldr	r0, [sp, #32]
   1ef9c:	9907      	ldr	r1, [sp, #28]
   1ef9e:	aa23      	add	r2, sp, #140	; 0x8c
   1efa0:	f003 f8d0 	bl	22144 <__ssprint_r>
   1efa4:	9b07      	ldr	r3, [sp, #28]
   1efa6:	899b      	ldrh	r3, [r3, #12]
   1efa8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1efac:	9b05      	ldr	r3, [sp, #20]
   1efae:	bf18      	it	ne
   1efb0:	f04f 33ff 	movne.w	r3, #4294967295
   1efb4:	9305      	str	r3, [sp, #20]
   1efb6:	9805      	ldr	r0, [sp, #20]
   1efb8:	b041      	add	sp, #260	; 0x104
   1efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efbe:	f01b 0f20 	tst.w	fp, #32
   1efc2:	930d      	str	r3, [sp, #52]	; 0x34
   1efc4:	f040 81e5 	bne.w	1f392 <_svfprintf_r+0x592>
   1efc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1efca:	f01b 0f10 	tst.w	fp, #16
   1efce:	4613      	mov	r3, r2
   1efd0:	f040 8588 	bne.w	1fae4 <_svfprintf_r+0xce4>
   1efd4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1efd8:	f000 8584 	beq.w	1fae4 <_svfprintf_r+0xce4>
   1efdc:	8814      	ldrh	r4, [r2, #0]
   1efde:	3204      	adds	r2, #4
   1efe0:	2500      	movs	r5, #0
   1efe2:	2301      	movs	r3, #1
   1efe4:	920b      	str	r2, [sp, #44]	; 0x2c
   1efe6:	2700      	movs	r7, #0
   1efe8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1efec:	9906      	ldr	r1, [sp, #24]
   1efee:	1c4a      	adds	r2, r1, #1
   1eff0:	f000 826d 	beq.w	1f4ce <_svfprintf_r+0x6ce>
   1eff4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1eff8:	9203      	str	r2, [sp, #12]
   1effa:	ea54 0205 	orrs.w	r2, r4, r5
   1effe:	f040 826c 	bne.w	1f4da <_svfprintf_r+0x6da>
   1f002:	2900      	cmp	r1, #0
   1f004:	f040 8451 	bne.w	1f8aa <_svfprintf_r+0xaaa>
   1f008:	2b00      	cmp	r3, #0
   1f00a:	f040 850b 	bne.w	1fa24 <_svfprintf_r+0xc24>
   1f00e:	f01b 0301 	ands.w	r3, fp, #1
   1f012:	930a      	str	r3, [sp, #40]	; 0x28
   1f014:	f000 861a 	beq.w	1fc4c <_svfprintf_r+0xe4c>
   1f018:	ae40      	add	r6, sp, #256	; 0x100
   1f01a:	2330      	movs	r3, #48	; 0x30
   1f01c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f020:	9b06      	ldr	r3, [sp, #24]
   1f022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f024:	4293      	cmp	r3, r2
   1f026:	bfb8      	it	lt
   1f028:	4613      	movlt	r3, r2
   1f02a:	9304      	str	r3, [sp, #16]
   1f02c:	2300      	movs	r3, #0
   1f02e:	930e      	str	r3, [sp, #56]	; 0x38
   1f030:	b117      	cbz	r7, 1f038 <_svfprintf_r+0x238>
   1f032:	9b04      	ldr	r3, [sp, #16]
   1f034:	3301      	adds	r3, #1
   1f036:	9304      	str	r3, [sp, #16]
   1f038:	9b03      	ldr	r3, [sp, #12]
   1f03a:	f013 0302 	ands.w	r3, r3, #2
   1f03e:	930c      	str	r3, [sp, #48]	; 0x30
   1f040:	d002      	beq.n	1f048 <_svfprintf_r+0x248>
   1f042:	9b04      	ldr	r3, [sp, #16]
   1f044:	3302      	adds	r3, #2
   1f046:	9304      	str	r3, [sp, #16]
   1f048:	9b03      	ldr	r3, [sp, #12]
   1f04a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f04e:	f040 8320 	bne.w	1f692 <_svfprintf_r+0x892>
   1f052:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f054:	9a04      	ldr	r2, [sp, #16]
   1f056:	eba3 0b02 	sub.w	fp, r3, r2
   1f05a:	f1bb 0f00 	cmp.w	fp, #0
   1f05e:	f340 8318 	ble.w	1f692 <_svfprintf_r+0x892>
   1f062:	f1bb 0f10 	cmp.w	fp, #16
   1f066:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f068:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f06a:	dd30      	ble.n	1f0ce <_svfprintf_r+0x2ce>
   1f06c:	4643      	mov	r3, r8
   1f06e:	4621      	mov	r1, r4
   1f070:	46a8      	mov	r8, r5
   1f072:	2710      	movs	r7, #16
   1f074:	9c08      	ldr	r4, [sp, #32]
   1f076:	9d07      	ldr	r5, [sp, #28]
   1f078:	e00d      	b.n	1f096 <_svfprintf_r+0x296>
   1f07a:	bf00      	nop
   1f07c:	f3af 8000 	nop.w
	...
   1f088:	f1ab 0b10 	sub.w	fp, fp, #16
   1f08c:	f1bb 0f10 	cmp.w	fp, #16
   1f090:	f103 0308 	add.w	r3, r3, #8
   1f094:	dd18      	ble.n	1f0c8 <_svfprintf_r+0x2c8>
   1f096:	3201      	adds	r2, #1
   1f098:	48b7      	ldr	r0, [pc, #732]	; (1f378 <_svfprintf_r+0x578>)
   1f09a:	9224      	str	r2, [sp, #144]	; 0x90
   1f09c:	3110      	adds	r1, #16
   1f09e:	2a07      	cmp	r2, #7
   1f0a0:	9125      	str	r1, [sp, #148]	; 0x94
   1f0a2:	e883 0081 	stmia.w	r3, {r0, r7}
   1f0a6:	ddef      	ble.n	1f088 <_svfprintf_r+0x288>
   1f0a8:	aa23      	add	r2, sp, #140	; 0x8c
   1f0aa:	4629      	mov	r1, r5
   1f0ac:	4620      	mov	r0, r4
   1f0ae:	f003 f849 	bl	22144 <__ssprint_r>
   1f0b2:	2800      	cmp	r0, #0
   1f0b4:	f47f af76 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f0b8:	f1ab 0b10 	sub.w	fp, fp, #16
   1f0bc:	f1bb 0f10 	cmp.w	fp, #16
   1f0c0:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f0c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f0c4:	464b      	mov	r3, r9
   1f0c6:	dce6      	bgt.n	1f096 <_svfprintf_r+0x296>
   1f0c8:	4645      	mov	r5, r8
   1f0ca:	460c      	mov	r4, r1
   1f0cc:	4698      	mov	r8, r3
   1f0ce:	3201      	adds	r2, #1
   1f0d0:	4ba9      	ldr	r3, [pc, #676]	; (1f378 <_svfprintf_r+0x578>)
   1f0d2:	9224      	str	r2, [sp, #144]	; 0x90
   1f0d4:	445c      	add	r4, fp
   1f0d6:	2a07      	cmp	r2, #7
   1f0d8:	9425      	str	r4, [sp, #148]	; 0x94
   1f0da:	e888 0808 	stmia.w	r8, {r3, fp}
   1f0de:	f300 84a6 	bgt.w	1fa2e <_svfprintf_r+0xc2e>
   1f0e2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f0e6:	f108 0808 	add.w	r8, r8, #8
   1f0ea:	b177      	cbz	r7, 1f10a <_svfprintf_r+0x30a>
   1f0ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f0ee:	3301      	adds	r3, #1
   1f0f0:	3401      	adds	r4, #1
   1f0f2:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f0f6:	2201      	movs	r2, #1
   1f0f8:	2b07      	cmp	r3, #7
   1f0fa:	9425      	str	r4, [sp, #148]	; 0x94
   1f0fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f0fe:	e888 0006 	stmia.w	r8, {r1, r2}
   1f102:	f300 83f4 	bgt.w	1f8ee <_svfprintf_r+0xaee>
   1f106:	f108 0808 	add.w	r8, r8, #8
   1f10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f10c:	b16b      	cbz	r3, 1f12a <_svfprintf_r+0x32a>
   1f10e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f110:	3301      	adds	r3, #1
   1f112:	3402      	adds	r4, #2
   1f114:	a91c      	add	r1, sp, #112	; 0x70
   1f116:	2202      	movs	r2, #2
   1f118:	2b07      	cmp	r3, #7
   1f11a:	9425      	str	r4, [sp, #148]	; 0x94
   1f11c:	9324      	str	r3, [sp, #144]	; 0x90
   1f11e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f122:	f300 83d9 	bgt.w	1f8d8 <_svfprintf_r+0xad8>
   1f126:	f108 0808 	add.w	r8, r8, #8
   1f12a:	2d80      	cmp	r5, #128	; 0x80
   1f12c:	f000 8322 	beq.w	1f774 <_svfprintf_r+0x974>
   1f130:	9b06      	ldr	r3, [sp, #24]
   1f132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f134:	1a9f      	subs	r7, r3, r2
   1f136:	2f00      	cmp	r7, #0
   1f138:	dd36      	ble.n	1f1a8 <_svfprintf_r+0x3a8>
   1f13a:	2f10      	cmp	r7, #16
   1f13c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f13e:	4d8f      	ldr	r5, [pc, #572]	; (1f37c <_svfprintf_r+0x57c>)
   1f140:	dd27      	ble.n	1f192 <_svfprintf_r+0x392>
   1f142:	4642      	mov	r2, r8
   1f144:	4621      	mov	r1, r4
   1f146:	46b0      	mov	r8, r6
   1f148:	f04f 0b10 	mov.w	fp, #16
   1f14c:	462e      	mov	r6, r5
   1f14e:	9c08      	ldr	r4, [sp, #32]
   1f150:	9d07      	ldr	r5, [sp, #28]
   1f152:	e004      	b.n	1f15e <_svfprintf_r+0x35e>
   1f154:	3f10      	subs	r7, #16
   1f156:	2f10      	cmp	r7, #16
   1f158:	f102 0208 	add.w	r2, r2, #8
   1f15c:	dd15      	ble.n	1f18a <_svfprintf_r+0x38a>
   1f15e:	3301      	adds	r3, #1
   1f160:	3110      	adds	r1, #16
   1f162:	2b07      	cmp	r3, #7
   1f164:	9125      	str	r1, [sp, #148]	; 0x94
   1f166:	9324      	str	r3, [sp, #144]	; 0x90
   1f168:	e882 0840 	stmia.w	r2, {r6, fp}
   1f16c:	ddf2      	ble.n	1f154 <_svfprintf_r+0x354>
   1f16e:	aa23      	add	r2, sp, #140	; 0x8c
   1f170:	4629      	mov	r1, r5
   1f172:	4620      	mov	r0, r4
   1f174:	f002 ffe6 	bl	22144 <__ssprint_r>
   1f178:	2800      	cmp	r0, #0
   1f17a:	f47f af13 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f17e:	3f10      	subs	r7, #16
   1f180:	2f10      	cmp	r7, #16
   1f182:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f184:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f186:	464a      	mov	r2, r9
   1f188:	dce9      	bgt.n	1f15e <_svfprintf_r+0x35e>
   1f18a:	4635      	mov	r5, r6
   1f18c:	460c      	mov	r4, r1
   1f18e:	4646      	mov	r6, r8
   1f190:	4690      	mov	r8, r2
   1f192:	3301      	adds	r3, #1
   1f194:	443c      	add	r4, r7
   1f196:	2b07      	cmp	r3, #7
   1f198:	9425      	str	r4, [sp, #148]	; 0x94
   1f19a:	9324      	str	r3, [sp, #144]	; 0x90
   1f19c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f1a0:	f300 838f 	bgt.w	1f8c2 <_svfprintf_r+0xac2>
   1f1a4:	f108 0808 	add.w	r8, r8, #8
   1f1a8:	9b03      	ldr	r3, [sp, #12]
   1f1aa:	05df      	lsls	r7, r3, #23
   1f1ac:	f100 8273 	bmi.w	1f696 <_svfprintf_r+0x896>
   1f1b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f1b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f1b4:	f8c8 6000 	str.w	r6, [r8]
   1f1b8:	3301      	adds	r3, #1
   1f1ba:	440c      	add	r4, r1
   1f1bc:	2b07      	cmp	r3, #7
   1f1be:	9425      	str	r4, [sp, #148]	; 0x94
   1f1c0:	f8c8 1004 	str.w	r1, [r8, #4]
   1f1c4:	9324      	str	r3, [sp, #144]	; 0x90
   1f1c6:	f300 835b 	bgt.w	1f880 <_svfprintf_r+0xa80>
   1f1ca:	f108 0808 	add.w	r8, r8, #8
   1f1ce:	9b03      	ldr	r3, [sp, #12]
   1f1d0:	075b      	lsls	r3, r3, #29
   1f1d2:	d53a      	bpl.n	1f24a <_svfprintf_r+0x44a>
   1f1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1d6:	9a04      	ldr	r2, [sp, #16]
   1f1d8:	1a9d      	subs	r5, r3, r2
   1f1da:	2d00      	cmp	r5, #0
   1f1dc:	dd35      	ble.n	1f24a <_svfprintf_r+0x44a>
   1f1de:	2d10      	cmp	r5, #16
   1f1e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f1e2:	dd20      	ble.n	1f226 <_svfprintf_r+0x426>
   1f1e4:	2610      	movs	r6, #16
   1f1e6:	9f08      	ldr	r7, [sp, #32]
   1f1e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f1ec:	e004      	b.n	1f1f8 <_svfprintf_r+0x3f8>
   1f1ee:	3d10      	subs	r5, #16
   1f1f0:	2d10      	cmp	r5, #16
   1f1f2:	f108 0808 	add.w	r8, r8, #8
   1f1f6:	dd16      	ble.n	1f226 <_svfprintf_r+0x426>
   1f1f8:	3301      	adds	r3, #1
   1f1fa:	4a5f      	ldr	r2, [pc, #380]	; (1f378 <_svfprintf_r+0x578>)
   1f1fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f1fe:	3410      	adds	r4, #16
   1f200:	2b07      	cmp	r3, #7
   1f202:	9425      	str	r4, [sp, #148]	; 0x94
   1f204:	e888 0044 	stmia.w	r8, {r2, r6}
   1f208:	ddf1      	ble.n	1f1ee <_svfprintf_r+0x3ee>
   1f20a:	aa23      	add	r2, sp, #140	; 0x8c
   1f20c:	4659      	mov	r1, fp
   1f20e:	4638      	mov	r0, r7
   1f210:	f002 ff98 	bl	22144 <__ssprint_r>
   1f214:	2800      	cmp	r0, #0
   1f216:	f47f aec5 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f21a:	3d10      	subs	r5, #16
   1f21c:	2d10      	cmp	r5, #16
   1f21e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f220:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f222:	46c8      	mov	r8, r9
   1f224:	dce8      	bgt.n	1f1f8 <_svfprintf_r+0x3f8>
   1f226:	3301      	adds	r3, #1
   1f228:	4a53      	ldr	r2, [pc, #332]	; (1f378 <_svfprintf_r+0x578>)
   1f22a:	9324      	str	r3, [sp, #144]	; 0x90
   1f22c:	442c      	add	r4, r5
   1f22e:	2b07      	cmp	r3, #7
   1f230:	9425      	str	r4, [sp, #148]	; 0x94
   1f232:	e888 0024 	stmia.w	r8, {r2, r5}
   1f236:	dd08      	ble.n	1f24a <_svfprintf_r+0x44a>
   1f238:	aa23      	add	r2, sp, #140	; 0x8c
   1f23a:	9907      	ldr	r1, [sp, #28]
   1f23c:	9808      	ldr	r0, [sp, #32]
   1f23e:	f002 ff81 	bl	22144 <__ssprint_r>
   1f242:	2800      	cmp	r0, #0
   1f244:	f47f aeae 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f248:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f24a:	9b05      	ldr	r3, [sp, #20]
   1f24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f24e:	9904      	ldr	r1, [sp, #16]
   1f250:	428a      	cmp	r2, r1
   1f252:	bfac      	ite	ge
   1f254:	189b      	addge	r3, r3, r2
   1f256:	185b      	addlt	r3, r3, r1
   1f258:	9305      	str	r3, [sp, #20]
   1f25a:	2c00      	cmp	r4, #0
   1f25c:	f040 831b 	bne.w	1f896 <_svfprintf_r+0xa96>
   1f260:	2300      	movs	r3, #0
   1f262:	9324      	str	r3, [sp, #144]	; 0x90
   1f264:	46c8      	mov	r8, r9
   1f266:	e5f2      	b.n	1ee4e <_svfprintf_r+0x4e>
   1f268:	930d      	str	r3, [sp, #52]	; 0x34
   1f26a:	f01b 0320 	ands.w	r3, fp, #32
   1f26e:	f040 81de 	bne.w	1f62e <_svfprintf_r+0x82e>
   1f272:	f01b 0210 	ands.w	r2, fp, #16
   1f276:	f040 842d 	bne.w	1fad4 <_svfprintf_r+0xcd4>
   1f27a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f27e:	f000 8429 	beq.w	1fad4 <_svfprintf_r+0xcd4>
   1f282:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f284:	4613      	mov	r3, r2
   1f286:	460a      	mov	r2, r1
   1f288:	3204      	adds	r2, #4
   1f28a:	880c      	ldrh	r4, [r1, #0]
   1f28c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f28e:	2500      	movs	r5, #0
   1f290:	e6a9      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f294:	930d      	str	r3, [sp, #52]	; 0x34
   1f296:	6816      	ldr	r6, [r2, #0]
   1f298:	2400      	movs	r4, #0
   1f29a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f29e:	1d15      	adds	r5, r2, #4
   1f2a0:	2e00      	cmp	r6, #0
   1f2a2:	f000 86b5 	beq.w	20010 <_svfprintf_r+0x1210>
   1f2a6:	9a06      	ldr	r2, [sp, #24]
   1f2a8:	1c53      	adds	r3, r2, #1
   1f2aa:	f000 8617 	beq.w	1fedc <_svfprintf_r+0x10dc>
   1f2ae:	4621      	mov	r1, r4
   1f2b0:	4630      	mov	r0, r6
   1f2b2:	f7fe ff1d 	bl	1e0f0 <memchr>
   1f2b6:	2800      	cmp	r0, #0
   1f2b8:	f000 8708 	beq.w	200cc <_svfprintf_r+0x12cc>
   1f2bc:	1b83      	subs	r3, r0, r6
   1f2be:	930a      	str	r3, [sp, #40]	; 0x28
   1f2c0:	9406      	str	r4, [sp, #24]
   1f2c2:	950b      	str	r5, [sp, #44]	; 0x2c
   1f2c4:	f8cd b00c 	str.w	fp, [sp, #12]
   1f2c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f2cc:	9304      	str	r3, [sp, #16]
   1f2ce:	940e      	str	r4, [sp, #56]	; 0x38
   1f2d0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f2d4:	e6ac      	b.n	1f030 <_svfprintf_r+0x230>
   1f2d6:	f89a 3000 	ldrb.w	r3, [sl]
   1f2da:	2201      	movs	r2, #1
   1f2dc:	212b      	movs	r1, #43	; 0x2b
   1f2de:	e5e7      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f2e0:	f04b 0b20 	orr.w	fp, fp, #32
   1f2e4:	f89a 3000 	ldrb.w	r3, [sl]
   1f2e8:	e5e2      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f2ea:	930d      	str	r3, [sp, #52]	; 0x34
   1f2ec:	2a00      	cmp	r2, #0
   1f2ee:	f040 87aa 	bne.w	20246 <_svfprintf_r+0x1446>
   1f2f2:	4b23      	ldr	r3, [pc, #140]	; (1f380 <_svfprintf_r+0x580>)
   1f2f4:	9312      	str	r3, [sp, #72]	; 0x48
   1f2f6:	f01b 0f20 	tst.w	fp, #32
   1f2fa:	f040 8112 	bne.w	1f522 <_svfprintf_r+0x722>
   1f2fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f300:	f01b 0f10 	tst.w	fp, #16
   1f304:	4613      	mov	r3, r2
   1f306:	f040 83e0 	bne.w	1faca <_svfprintf_r+0xcca>
   1f30a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f30e:	f000 83dc 	beq.w	1faca <_svfprintf_r+0xcca>
   1f312:	3304      	adds	r3, #4
   1f314:	8814      	ldrh	r4, [r2, #0]
   1f316:	930b      	str	r3, [sp, #44]	; 0x2c
   1f318:	2500      	movs	r5, #0
   1f31a:	f01b 0f01 	tst.w	fp, #1
   1f31e:	f000 810d 	beq.w	1f53c <_svfprintf_r+0x73c>
   1f322:	ea54 0305 	orrs.w	r3, r4, r5
   1f326:	f000 8109 	beq.w	1f53c <_svfprintf_r+0x73c>
   1f32a:	2330      	movs	r3, #48	; 0x30
   1f32c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f330:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f334:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f338:	f04b 0b02 	orr.w	fp, fp, #2
   1f33c:	2302      	movs	r3, #2
   1f33e:	e652      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f340:	f89a 3000 	ldrb.w	r3, [sl]
   1f344:	2900      	cmp	r1, #0
   1f346:	f47f adb3 	bne.w	1eeb0 <_svfprintf_r+0xb0>
   1f34a:	2201      	movs	r2, #1
   1f34c:	2120      	movs	r1, #32
   1f34e:	e5af      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f350:	f04b 0b01 	orr.w	fp, fp, #1
   1f354:	f89a 3000 	ldrb.w	r3, [sl]
   1f358:	e5aa      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f35a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f35c:	6823      	ldr	r3, [r4, #0]
   1f35e:	9309      	str	r3, [sp, #36]	; 0x24
   1f360:	4618      	mov	r0, r3
   1f362:	2800      	cmp	r0, #0
   1f364:	4623      	mov	r3, r4
   1f366:	f103 0304 	add.w	r3, r3, #4
   1f36a:	f6ff ae03 	blt.w	1ef74 <_svfprintf_r+0x174>
   1f36e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f370:	f89a 3000 	ldrb.w	r3, [sl]
   1f374:	e59c      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f376:	bf00      	nop
   1f378:	00024b90 	.word	0x00024b90
   1f37c:	00024ba0 	.word	0x00024ba0
   1f380:	00024b70 	.word	0x00024b70
   1f384:	f04b 0b10 	orr.w	fp, fp, #16
   1f388:	f01b 0f20 	tst.w	fp, #32
   1f38c:	930d      	str	r3, [sp, #52]	; 0x34
   1f38e:	f43f ae1b 	beq.w	1efc8 <_svfprintf_r+0x1c8>
   1f392:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f394:	3507      	adds	r5, #7
   1f396:	f025 0307 	bic.w	r3, r5, #7
   1f39a:	f103 0208 	add.w	r2, r3, #8
   1f39e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f3a2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f3a4:	2301      	movs	r3, #1
   1f3a6:	e61e      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f3a8:	f89a 3000 	ldrb.w	r3, [sl]
   1f3ac:	2b2a      	cmp	r3, #42	; 0x2a
   1f3ae:	f10a 0401 	add.w	r4, sl, #1
   1f3b2:	f000 873b 	beq.w	2022c <_svfprintf_r+0x142c>
   1f3b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f3ba:	2809      	cmp	r0, #9
   1f3bc:	46a2      	mov	sl, r4
   1f3be:	f200 8691 	bhi.w	200e4 <_svfprintf_r+0x12e4>
   1f3c2:	2300      	movs	r3, #0
   1f3c4:	461c      	mov	r4, r3
   1f3c6:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f3ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f3ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f3d2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f3d6:	2809      	cmp	r0, #9
   1f3d8:	d9f5      	bls.n	1f3c6 <_svfprintf_r+0x5c6>
   1f3da:	9406      	str	r4, [sp, #24]
   1f3dc:	e56a      	b.n	1eeb4 <_svfprintf_r+0xb4>
   1f3de:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f3e2:	f89a 3000 	ldrb.w	r3, [sl]
   1f3e6:	e563      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f3e8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f3ec:	f89a 3000 	ldrb.w	r3, [sl]
   1f3f0:	e55e      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f3f2:	f89a 3000 	ldrb.w	r3, [sl]
   1f3f6:	2b6c      	cmp	r3, #108	; 0x6c
   1f3f8:	bf03      	ittte	eq
   1f3fa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f3fe:	f04b 0b20 	orreq.w	fp, fp, #32
   1f402:	f10a 0a01 	addeq.w	sl, sl, #1
   1f406:	f04b 0b10 	orrne.w	fp, fp, #16
   1f40a:	e551      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f40c:	2a00      	cmp	r2, #0
   1f40e:	f040 871e 	bne.w	2024e <_svfprintf_r+0x144e>
   1f412:	f01b 0f20 	tst.w	fp, #32
   1f416:	f040 8509 	bne.w	1fe2c <_svfprintf_r+0x102c>
   1f41a:	f01b 0f10 	tst.w	fp, #16
   1f41e:	f040 84bc 	bne.w	1fd9a <_svfprintf_r+0xf9a>
   1f422:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f426:	f000 84b8 	beq.w	1fd9a <_svfprintf_r+0xf9a>
   1f42a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f42c:	6813      	ldr	r3, [r2, #0]
   1f42e:	3204      	adds	r2, #4
   1f430:	920b      	str	r2, [sp, #44]	; 0x2c
   1f432:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f436:	801a      	strh	r2, [r3, #0]
   1f438:	e509      	b.n	1ee4e <_svfprintf_r+0x4e>
   1f43a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f43c:	4bb9      	ldr	r3, [pc, #740]	; (1f724 <_svfprintf_r+0x924>)
   1f43e:	680c      	ldr	r4, [r1, #0]
   1f440:	9312      	str	r3, [sp, #72]	; 0x48
   1f442:	2230      	movs	r2, #48	; 0x30
   1f444:	2378      	movs	r3, #120	; 0x78
   1f446:	3104      	adds	r1, #4
   1f448:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f44c:	930d      	str	r3, [sp, #52]	; 0x34
   1f44e:	f04b 0b02 	orr.w	fp, fp, #2
   1f452:	910b      	str	r1, [sp, #44]	; 0x2c
   1f454:	2500      	movs	r5, #0
   1f456:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f45a:	2302      	movs	r3, #2
   1f45c:	e5c3      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f45e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f460:	930d      	str	r3, [sp, #52]	; 0x34
   1f462:	680a      	ldr	r2, [r1, #0]
   1f464:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f468:	2300      	movs	r3, #0
   1f46a:	460a      	mov	r2, r1
   1f46c:	461f      	mov	r7, r3
   1f46e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f472:	3204      	adds	r2, #4
   1f474:	2301      	movs	r3, #1
   1f476:	9304      	str	r3, [sp, #16]
   1f478:	f8cd b00c 	str.w	fp, [sp, #12]
   1f47c:	9706      	str	r7, [sp, #24]
   1f47e:	970e      	str	r7, [sp, #56]	; 0x38
   1f480:	920b      	str	r2, [sp, #44]	; 0x2c
   1f482:	930a      	str	r3, [sp, #40]	; 0x28
   1f484:	ae26      	add	r6, sp, #152	; 0x98
   1f486:	e5d7      	b.n	1f038 <_svfprintf_r+0x238>
   1f488:	930d      	str	r3, [sp, #52]	; 0x34
   1f48a:	2a00      	cmp	r2, #0
   1f48c:	f040 86fe 	bne.w	2028c <_svfprintf_r+0x148c>
   1f490:	f01b 0f20 	tst.w	fp, #32
   1f494:	d15d      	bne.n	1f552 <_svfprintf_r+0x752>
   1f496:	f01b 0f10 	tst.w	fp, #16
   1f49a:	f040 8335 	bne.w	1fb08 <_svfprintf_r+0xd08>
   1f49e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f4a2:	f000 8331 	beq.w	1fb08 <_svfprintf_r+0xd08>
   1f4a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f4a8:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f4ac:	3104      	adds	r1, #4
   1f4ae:	17e5      	asrs	r5, r4, #31
   1f4b0:	4622      	mov	r2, r4
   1f4b2:	462b      	mov	r3, r5
   1f4b4:	910b      	str	r1, [sp, #44]	; 0x2c
   1f4b6:	2a00      	cmp	r2, #0
   1f4b8:	f173 0300 	sbcs.w	r3, r3, #0
   1f4bc:	db58      	blt.n	1f570 <_svfprintf_r+0x770>
   1f4be:	9906      	ldr	r1, [sp, #24]
   1f4c0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f4c4:	1c4a      	adds	r2, r1, #1
   1f4c6:	f04f 0301 	mov.w	r3, #1
   1f4ca:	f47f ad93 	bne.w	1eff4 <_svfprintf_r+0x1f4>
   1f4ce:	ea54 0205 	orrs.w	r2, r4, r5
   1f4d2:	f000 81ec 	beq.w	1f8ae <_svfprintf_r+0xaae>
   1f4d6:	f8cd b00c 	str.w	fp, [sp, #12]
   1f4da:	2b01      	cmp	r3, #1
   1f4dc:	f000 8283 	beq.w	1f9e6 <_svfprintf_r+0xbe6>
   1f4e0:	2b02      	cmp	r3, #2
   1f4e2:	f040 8213 	bne.w	1f90c <_svfprintf_r+0xb0c>
   1f4e6:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f4e8:	464e      	mov	r6, r9
   1f4ea:	0923      	lsrs	r3, r4, #4
   1f4ec:	f004 010f 	and.w	r1, r4, #15
   1f4f0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f4f4:	092a      	lsrs	r2, r5, #4
   1f4f6:	461c      	mov	r4, r3
   1f4f8:	4615      	mov	r5, r2
   1f4fa:	5c43      	ldrb	r3, [r0, r1]
   1f4fc:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f500:	ea54 0305 	orrs.w	r3, r4, r5
   1f504:	d1f1      	bne.n	1f4ea <_svfprintf_r+0x6ea>
   1f506:	eba9 0306 	sub.w	r3, r9, r6
   1f50a:	930a      	str	r3, [sp, #40]	; 0x28
   1f50c:	e588      	b.n	1f020 <_svfprintf_r+0x220>
   1f50e:	930d      	str	r3, [sp, #52]	; 0x34
   1f510:	2a00      	cmp	r2, #0
   1f512:	f040 86b7 	bne.w	20284 <_svfprintf_r+0x1484>
   1f516:	4b84      	ldr	r3, [pc, #528]	; (1f728 <_svfprintf_r+0x928>)
   1f518:	9312      	str	r3, [sp, #72]	; 0x48
   1f51a:	f01b 0f20 	tst.w	fp, #32
   1f51e:	f43f aeee 	beq.w	1f2fe <_svfprintf_r+0x4fe>
   1f522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f524:	3507      	adds	r5, #7
   1f526:	f025 0307 	bic.w	r3, r5, #7
   1f52a:	f103 0208 	add.w	r2, r3, #8
   1f52e:	f01b 0f01 	tst.w	fp, #1
   1f532:	920b      	str	r2, [sp, #44]	; 0x2c
   1f534:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f538:	f47f aef3 	bne.w	1f322 <_svfprintf_r+0x522>
   1f53c:	2302      	movs	r3, #2
   1f53e:	e552      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f540:	930d      	str	r3, [sp, #52]	; 0x34
   1f542:	2a00      	cmp	r2, #0
   1f544:	f040 869a 	bne.w	2027c <_svfprintf_r+0x147c>
   1f548:	f04b 0b10 	orr.w	fp, fp, #16
   1f54c:	f01b 0f20 	tst.w	fp, #32
   1f550:	d0a1      	beq.n	1f496 <_svfprintf_r+0x696>
   1f552:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f554:	3507      	adds	r5, #7
   1f556:	f025 0507 	bic.w	r5, r5, #7
   1f55a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f55e:	2a00      	cmp	r2, #0
   1f560:	f105 0108 	add.w	r1, r5, #8
   1f564:	461d      	mov	r5, r3
   1f566:	f173 0300 	sbcs.w	r3, r3, #0
   1f56a:	910b      	str	r1, [sp, #44]	; 0x2c
   1f56c:	4614      	mov	r4, r2
   1f56e:	daa6      	bge.n	1f4be <_svfprintf_r+0x6be>
   1f570:	272d      	movs	r7, #45	; 0x2d
   1f572:	4264      	negs	r4, r4
   1f574:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f578:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f57c:	2301      	movs	r3, #1
   1f57e:	e535      	b.n	1efec <_svfprintf_r+0x1ec>
   1f580:	930d      	str	r3, [sp, #52]	; 0x34
   1f582:	2a00      	cmp	r2, #0
   1f584:	f040 8676 	bne.w	20274 <_svfprintf_r+0x1474>
   1f588:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f58a:	f01b 0f08 	tst.w	fp, #8
   1f58e:	f105 0507 	add.w	r5, r5, #7
   1f592:	f000 83e8 	beq.w	1fd66 <_svfprintf_r+0xf66>
   1f596:	f025 0307 	bic.w	r3, r5, #7
   1f59a:	ed93 7b00 	vldr	d7, [r3]
   1f59e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f5a2:	f103 0208 	add.w	r2, r3, #8
   1f5a6:	920b      	str	r2, [sp, #44]	; 0x2c
   1f5a8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f5ac:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f5b0:	9116      	str	r1, [sp, #88]	; 0x58
   1f5b2:	9317      	str	r3, [sp, #92]	; 0x5c
   1f5b4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f5b8:	f04f 32ff 	mov.w	r2, #4294967295
   1f5bc:	4620      	mov	r0, r4
   1f5be:	4629      	mov	r1, r5
   1f5c0:	4b5a      	ldr	r3, [pc, #360]	; (1f72c <_svfprintf_r+0x92c>)
   1f5c2:	f002 ffb9 	bl	22538 <__aeabi_dcmpun>
   1f5c6:	2800      	cmp	r0, #0
   1f5c8:	f040 834f 	bne.w	1fc6a <_svfprintf_r+0xe6a>
   1f5cc:	f04f 32ff 	mov.w	r2, #4294967295
   1f5d0:	4b56      	ldr	r3, [pc, #344]	; (1f72c <_svfprintf_r+0x92c>)
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	4629      	mov	r1, r5
   1f5d6:	f7fc fcc9 	bl	1bf6c <__aeabi_dcmple>
   1f5da:	2800      	cmp	r0, #0
   1f5dc:	f040 8345 	bne.w	1fc6a <_svfprintf_r+0xe6a>
   1f5e0:	2200      	movs	r2, #0
   1f5e2:	2300      	movs	r3, #0
   1f5e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f5e8:	f7fc fcb6 	bl	1bf58 <__aeabi_dcmplt>
   1f5ec:	2800      	cmp	r0, #0
   1f5ee:	f040 8533 	bne.w	20058 <_svfprintf_r+0x1258>
   1f5f2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f5f6:	4e4e      	ldr	r6, [pc, #312]	; (1f730 <_svfprintf_r+0x930>)
   1f5f8:	4b4e      	ldr	r3, [pc, #312]	; (1f734 <_svfprintf_r+0x934>)
   1f5fa:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f5fe:	9003      	str	r0, [sp, #12]
   1f600:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f602:	2203      	movs	r2, #3
   1f604:	2100      	movs	r1, #0
   1f606:	9204      	str	r2, [sp, #16]
   1f608:	9106      	str	r1, [sp, #24]
   1f60a:	2847      	cmp	r0, #71	; 0x47
   1f60c:	bfd8      	it	le
   1f60e:	461e      	movle	r6, r3
   1f610:	920a      	str	r2, [sp, #40]	; 0x28
   1f612:	910e      	str	r1, [sp, #56]	; 0x38
   1f614:	e50c      	b.n	1f030 <_svfprintf_r+0x230>
   1f616:	f04b 0b08 	orr.w	fp, fp, #8
   1f61a:	f89a 3000 	ldrb.w	r3, [sl]
   1f61e:	e447      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f620:	f04b 0b10 	orr.w	fp, fp, #16
   1f624:	930d      	str	r3, [sp, #52]	; 0x34
   1f626:	f01b 0320 	ands.w	r3, fp, #32
   1f62a:	f43f ae22 	beq.w	1f272 <_svfprintf_r+0x472>
   1f62e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f630:	3507      	adds	r5, #7
   1f632:	f025 0307 	bic.w	r3, r5, #7
   1f636:	f103 0208 	add.w	r2, r3, #8
   1f63a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f63e:	920b      	str	r2, [sp, #44]	; 0x2c
   1f640:	2300      	movs	r3, #0
   1f642:	e4d0      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f644:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f648:	2300      	movs	r3, #0
   1f64a:	461c      	mov	r4, r3
   1f64c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f650:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f654:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f658:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f65c:	2809      	cmp	r0, #9
   1f65e:	d9f5      	bls.n	1f64c <_svfprintf_r+0x84c>
   1f660:	9409      	str	r4, [sp, #36]	; 0x24
   1f662:	e427      	b.n	1eeb4 <_svfprintf_r+0xb4>
   1f664:	930d      	str	r3, [sp, #52]	; 0x34
   1f666:	2a00      	cmp	r2, #0
   1f668:	f040 85f5 	bne.w	20256 <_svfprintf_r+0x1456>
   1f66c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f66e:	2a00      	cmp	r2, #0
   1f670:	f43f ac91 	beq.w	1ef96 <_svfprintf_r+0x196>
   1f674:	2300      	movs	r3, #0
   1f676:	2101      	movs	r1, #1
   1f678:	461f      	mov	r7, r3
   1f67a:	9104      	str	r1, [sp, #16]
   1f67c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f680:	f8cd b00c 	str.w	fp, [sp, #12]
   1f684:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f688:	9306      	str	r3, [sp, #24]
   1f68a:	930e      	str	r3, [sp, #56]	; 0x38
   1f68c:	910a      	str	r1, [sp, #40]	; 0x28
   1f68e:	ae26      	add	r6, sp, #152	; 0x98
   1f690:	e4d2      	b.n	1f038 <_svfprintf_r+0x238>
   1f692:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f694:	e529      	b.n	1f0ea <_svfprintf_r+0x2ea>
   1f696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f698:	2b65      	cmp	r3, #101	; 0x65
   1f69a:	f340 80a9 	ble.w	1f7f0 <_svfprintf_r+0x9f0>
   1f69e:	2200      	movs	r2, #0
   1f6a0:	2300      	movs	r3, #0
   1f6a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f6a6:	f7fc fc4d 	bl	1bf44 <__aeabi_dcmpeq>
   1f6aa:	2800      	cmp	r0, #0
   1f6ac:	f000 8152 	beq.w	1f954 <_svfprintf_r+0xb54>
   1f6b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f6b2:	4a21      	ldr	r2, [pc, #132]	; (1f738 <_svfprintf_r+0x938>)
   1f6b4:	f8c8 2000 	str.w	r2, [r8]
   1f6b8:	3301      	adds	r3, #1
   1f6ba:	3401      	adds	r4, #1
   1f6bc:	2201      	movs	r2, #1
   1f6be:	2b07      	cmp	r3, #7
   1f6c0:	9425      	str	r4, [sp, #148]	; 0x94
   1f6c2:	9324      	str	r3, [sp, #144]	; 0x90
   1f6c4:	f8c8 2004 	str.w	r2, [r8, #4]
   1f6c8:	f300 836f 	bgt.w	1fdaa <_svfprintf_r+0xfaa>
   1f6cc:	f108 0808 	add.w	r8, r8, #8
   1f6d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f6d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f6d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f6d6:	4293      	cmp	r3, r2
   1f6d8:	db03      	blt.n	1f6e2 <_svfprintf_r+0x8e2>
   1f6da:	9b03      	ldr	r3, [sp, #12]
   1f6dc:	07dd      	lsls	r5, r3, #31
   1f6de:	f57f ad76 	bpl.w	1f1ce <_svfprintf_r+0x3ce>
   1f6e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f6e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f6e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f6e8:	f8c8 2000 	str.w	r2, [r8]
   1f6ec:	3301      	adds	r3, #1
   1f6ee:	440c      	add	r4, r1
   1f6f0:	2b07      	cmp	r3, #7
   1f6f2:	f8c8 1004 	str.w	r1, [r8, #4]
   1f6f6:	9425      	str	r4, [sp, #148]	; 0x94
   1f6f8:	9324      	str	r3, [sp, #144]	; 0x90
   1f6fa:	f300 83a3 	bgt.w	1fe44 <_svfprintf_r+0x1044>
   1f6fe:	f108 0808 	add.w	r8, r8, #8
   1f702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f704:	1e5e      	subs	r6, r3, #1
   1f706:	2e00      	cmp	r6, #0
   1f708:	f77f ad61 	ble.w	1f1ce <_svfprintf_r+0x3ce>
   1f70c:	2e10      	cmp	r6, #16
   1f70e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f710:	4d0a      	ldr	r5, [pc, #40]	; (1f73c <_svfprintf_r+0x93c>)
   1f712:	f340 81ef 	ble.w	1faf4 <_svfprintf_r+0xcf4>
   1f716:	4622      	mov	r2, r4
   1f718:	2710      	movs	r7, #16
   1f71a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f71e:	9c07      	ldr	r4, [sp, #28]
   1f720:	e014      	b.n	1f74c <_svfprintf_r+0x94c>
   1f722:	bf00      	nop
   1f724:	00024b70 	.word	0x00024b70
   1f728:	00024b5c 	.word	0x00024b5c
   1f72c:	7fefffff 	.word	0x7fefffff
   1f730:	00024b50 	.word	0x00024b50
   1f734:	00024b4c 	.word	0x00024b4c
   1f738:	00024b8c 	.word	0x00024b8c
   1f73c:	00024ba0 	.word	0x00024ba0
   1f740:	f108 0808 	add.w	r8, r8, #8
   1f744:	3e10      	subs	r6, #16
   1f746:	2e10      	cmp	r6, #16
   1f748:	f340 81d3 	ble.w	1faf2 <_svfprintf_r+0xcf2>
   1f74c:	3301      	adds	r3, #1
   1f74e:	3210      	adds	r2, #16
   1f750:	2b07      	cmp	r3, #7
   1f752:	9225      	str	r2, [sp, #148]	; 0x94
   1f754:	9324      	str	r3, [sp, #144]	; 0x90
   1f756:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f75a:	ddf1      	ble.n	1f740 <_svfprintf_r+0x940>
   1f75c:	aa23      	add	r2, sp, #140	; 0x8c
   1f75e:	4621      	mov	r1, r4
   1f760:	4658      	mov	r0, fp
   1f762:	f002 fcef 	bl	22144 <__ssprint_r>
   1f766:	2800      	cmp	r0, #0
   1f768:	f47f ac1c 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f76c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f76e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f770:	46c8      	mov	r8, r9
   1f772:	e7e7      	b.n	1f744 <_svfprintf_r+0x944>
   1f774:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f776:	9a04      	ldr	r2, [sp, #16]
   1f778:	1a9f      	subs	r7, r3, r2
   1f77a:	2f00      	cmp	r7, #0
   1f77c:	f77f acd8 	ble.w	1f130 <_svfprintf_r+0x330>
   1f780:	2f10      	cmp	r7, #16
   1f782:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f784:	4db7      	ldr	r5, [pc, #732]	; (1fa64 <_svfprintf_r+0xc64>)
   1f786:	dd27      	ble.n	1f7d8 <_svfprintf_r+0x9d8>
   1f788:	4642      	mov	r2, r8
   1f78a:	4621      	mov	r1, r4
   1f78c:	46b0      	mov	r8, r6
   1f78e:	f04f 0b10 	mov.w	fp, #16
   1f792:	462e      	mov	r6, r5
   1f794:	9c08      	ldr	r4, [sp, #32]
   1f796:	9d07      	ldr	r5, [sp, #28]
   1f798:	e004      	b.n	1f7a4 <_svfprintf_r+0x9a4>
   1f79a:	3f10      	subs	r7, #16
   1f79c:	2f10      	cmp	r7, #16
   1f79e:	f102 0208 	add.w	r2, r2, #8
   1f7a2:	dd15      	ble.n	1f7d0 <_svfprintf_r+0x9d0>
   1f7a4:	3301      	adds	r3, #1
   1f7a6:	3110      	adds	r1, #16
   1f7a8:	2b07      	cmp	r3, #7
   1f7aa:	9125      	str	r1, [sp, #148]	; 0x94
   1f7ac:	9324      	str	r3, [sp, #144]	; 0x90
   1f7ae:	e882 0840 	stmia.w	r2, {r6, fp}
   1f7b2:	ddf2      	ble.n	1f79a <_svfprintf_r+0x99a>
   1f7b4:	aa23      	add	r2, sp, #140	; 0x8c
   1f7b6:	4629      	mov	r1, r5
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	f002 fcc3 	bl	22144 <__ssprint_r>
   1f7be:	2800      	cmp	r0, #0
   1f7c0:	f47f abf0 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f7c4:	3f10      	subs	r7, #16
   1f7c6:	2f10      	cmp	r7, #16
   1f7c8:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f7ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f7cc:	464a      	mov	r2, r9
   1f7ce:	dce9      	bgt.n	1f7a4 <_svfprintf_r+0x9a4>
   1f7d0:	4635      	mov	r5, r6
   1f7d2:	460c      	mov	r4, r1
   1f7d4:	4646      	mov	r6, r8
   1f7d6:	4690      	mov	r8, r2
   1f7d8:	3301      	adds	r3, #1
   1f7da:	443c      	add	r4, r7
   1f7dc:	2b07      	cmp	r3, #7
   1f7de:	9425      	str	r4, [sp, #148]	; 0x94
   1f7e0:	9324      	str	r3, [sp, #144]	; 0x90
   1f7e2:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f7e6:	f300 8234 	bgt.w	1fc52 <_svfprintf_r+0xe52>
   1f7ea:	f108 0808 	add.w	r8, r8, #8
   1f7ee:	e49f      	b.n	1f130 <_svfprintf_r+0x330>
   1f7f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f7f2:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f7f4:	2b01      	cmp	r3, #1
   1f7f6:	f340 8200 	ble.w	1fbfa <_svfprintf_r+0xdfa>
   1f7fa:	3701      	adds	r7, #1
   1f7fc:	3401      	adds	r4, #1
   1f7fe:	2301      	movs	r3, #1
   1f800:	2f07      	cmp	r7, #7
   1f802:	9425      	str	r4, [sp, #148]	; 0x94
   1f804:	9724      	str	r7, [sp, #144]	; 0x90
   1f806:	f8c8 6000 	str.w	r6, [r8]
   1f80a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f80e:	f300 8205 	bgt.w	1fc1c <_svfprintf_r+0xe1c>
   1f812:	f108 0808 	add.w	r8, r8, #8
   1f816:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f818:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1f81a:	f8c8 3000 	str.w	r3, [r8]
   1f81e:	3701      	adds	r7, #1
   1f820:	4414      	add	r4, r2
   1f822:	2f07      	cmp	r7, #7
   1f824:	9425      	str	r4, [sp, #148]	; 0x94
   1f826:	9724      	str	r7, [sp, #144]	; 0x90
   1f828:	f8c8 2004 	str.w	r2, [r8, #4]
   1f82c:	f300 8202 	bgt.w	1fc34 <_svfprintf_r+0xe34>
   1f830:	f108 0808 	add.w	r8, r8, #8
   1f834:	2300      	movs	r3, #0
   1f836:	2200      	movs	r2, #0
   1f838:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f83c:	f7fc fb82 	bl	1bf44 <__aeabi_dcmpeq>
   1f840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f842:	2800      	cmp	r0, #0
   1f844:	f040 8101 	bne.w	1fa4a <_svfprintf_r+0xc4a>
   1f848:	3b01      	subs	r3, #1
   1f84a:	3701      	adds	r7, #1
   1f84c:	3601      	adds	r6, #1
   1f84e:	441c      	add	r4, r3
   1f850:	2f07      	cmp	r7, #7
   1f852:	9724      	str	r7, [sp, #144]	; 0x90
   1f854:	9425      	str	r4, [sp, #148]	; 0x94
   1f856:	f8c8 6000 	str.w	r6, [r8]
   1f85a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f85e:	f300 8128 	bgt.w	1fab2 <_svfprintf_r+0xcb2>
   1f862:	f108 0808 	add.w	r8, r8, #8
   1f866:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f868:	f8c8 2004 	str.w	r2, [r8, #4]
   1f86c:	3701      	adds	r7, #1
   1f86e:	4414      	add	r4, r2
   1f870:	ab1f      	add	r3, sp, #124	; 0x7c
   1f872:	2f07      	cmp	r7, #7
   1f874:	9425      	str	r4, [sp, #148]	; 0x94
   1f876:	9724      	str	r7, [sp, #144]	; 0x90
   1f878:	f8c8 3000 	str.w	r3, [r8]
   1f87c:	f77f aca5 	ble.w	1f1ca <_svfprintf_r+0x3ca>
   1f880:	aa23      	add	r2, sp, #140	; 0x8c
   1f882:	9907      	ldr	r1, [sp, #28]
   1f884:	9808      	ldr	r0, [sp, #32]
   1f886:	f002 fc5d 	bl	22144 <__ssprint_r>
   1f88a:	2800      	cmp	r0, #0
   1f88c:	f47f ab8a 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f890:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f892:	46c8      	mov	r8, r9
   1f894:	e49b      	b.n	1f1ce <_svfprintf_r+0x3ce>
   1f896:	aa23      	add	r2, sp, #140	; 0x8c
   1f898:	9907      	ldr	r1, [sp, #28]
   1f89a:	9808      	ldr	r0, [sp, #32]
   1f89c:	f002 fc52 	bl	22144 <__ssprint_r>
   1f8a0:	2800      	cmp	r0, #0
   1f8a2:	f43f acdd 	beq.w	1f260 <_svfprintf_r+0x460>
   1f8a6:	f7ff bb7d 	b.w	1efa4 <_svfprintf_r+0x1a4>
   1f8aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f8ae:	2b01      	cmp	r3, #1
   1f8b0:	f000 8135 	beq.w	1fb1e <_svfprintf_r+0xd1e>
   1f8b4:	2b02      	cmp	r3, #2
   1f8b6:	d125      	bne.n	1f904 <_svfprintf_r+0xb04>
   1f8b8:	f8cd b00c 	str.w	fp, [sp, #12]
   1f8bc:	2400      	movs	r4, #0
   1f8be:	2500      	movs	r5, #0
   1f8c0:	e611      	b.n	1f4e6 <_svfprintf_r+0x6e6>
   1f8c2:	aa23      	add	r2, sp, #140	; 0x8c
   1f8c4:	9907      	ldr	r1, [sp, #28]
   1f8c6:	9808      	ldr	r0, [sp, #32]
   1f8c8:	f002 fc3c 	bl	22144 <__ssprint_r>
   1f8cc:	2800      	cmp	r0, #0
   1f8ce:	f47f ab69 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f8d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f8d4:	46c8      	mov	r8, r9
   1f8d6:	e467      	b.n	1f1a8 <_svfprintf_r+0x3a8>
   1f8d8:	aa23      	add	r2, sp, #140	; 0x8c
   1f8da:	9907      	ldr	r1, [sp, #28]
   1f8dc:	9808      	ldr	r0, [sp, #32]
   1f8de:	f002 fc31 	bl	22144 <__ssprint_r>
   1f8e2:	2800      	cmp	r0, #0
   1f8e4:	f47f ab5e 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f8e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f8ea:	46c8      	mov	r8, r9
   1f8ec:	e41d      	b.n	1f12a <_svfprintf_r+0x32a>
   1f8ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f8f0:	9907      	ldr	r1, [sp, #28]
   1f8f2:	9808      	ldr	r0, [sp, #32]
   1f8f4:	f002 fc26 	bl	22144 <__ssprint_r>
   1f8f8:	2800      	cmp	r0, #0
   1f8fa:	f47f ab53 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f8fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f900:	46c8      	mov	r8, r9
   1f902:	e402      	b.n	1f10a <_svfprintf_r+0x30a>
   1f904:	f8cd b00c 	str.w	fp, [sp, #12]
   1f908:	2400      	movs	r4, #0
   1f90a:	2500      	movs	r5, #0
   1f90c:	4649      	mov	r1, r9
   1f90e:	e000      	b.n	1f912 <_svfprintf_r+0xb12>
   1f910:	4631      	mov	r1, r6
   1f912:	08e2      	lsrs	r2, r4, #3
   1f914:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1f918:	08e8      	lsrs	r0, r5, #3
   1f91a:	f004 0307 	and.w	r3, r4, #7
   1f91e:	4605      	mov	r5, r0
   1f920:	4614      	mov	r4, r2
   1f922:	3330      	adds	r3, #48	; 0x30
   1f924:	ea54 0205 	orrs.w	r2, r4, r5
   1f928:	f801 3c01 	strb.w	r3, [r1, #-1]
   1f92c:	f101 36ff 	add.w	r6, r1, #4294967295
   1f930:	d1ee      	bne.n	1f910 <_svfprintf_r+0xb10>
   1f932:	9a03      	ldr	r2, [sp, #12]
   1f934:	07d2      	lsls	r2, r2, #31
   1f936:	f57f ade6 	bpl.w	1f506 <_svfprintf_r+0x706>
   1f93a:	2b30      	cmp	r3, #48	; 0x30
   1f93c:	f43f ade3 	beq.w	1f506 <_svfprintf_r+0x706>
   1f940:	3902      	subs	r1, #2
   1f942:	2330      	movs	r3, #48	; 0x30
   1f944:	f806 3c01 	strb.w	r3, [r6, #-1]
   1f948:	eba9 0301 	sub.w	r3, r9, r1
   1f94c:	930a      	str	r3, [sp, #40]	; 0x28
   1f94e:	460e      	mov	r6, r1
   1f950:	f7ff bb66 	b.w	1f020 <_svfprintf_r+0x220>
   1f954:	991d      	ldr	r1, [sp, #116]	; 0x74
   1f956:	2900      	cmp	r1, #0
   1f958:	f340 8231 	ble.w	1fdbe <_svfprintf_r+0xfbe>
   1f95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f95e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f960:	4293      	cmp	r3, r2
   1f962:	bfa8      	it	ge
   1f964:	4613      	movge	r3, r2
   1f966:	2b00      	cmp	r3, #0
   1f968:	461f      	mov	r7, r3
   1f96a:	dd0d      	ble.n	1f988 <_svfprintf_r+0xb88>
   1f96c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f96e:	f8c8 6000 	str.w	r6, [r8]
   1f972:	3301      	adds	r3, #1
   1f974:	443c      	add	r4, r7
   1f976:	2b07      	cmp	r3, #7
   1f978:	9425      	str	r4, [sp, #148]	; 0x94
   1f97a:	f8c8 7004 	str.w	r7, [r8, #4]
   1f97e:	9324      	str	r3, [sp, #144]	; 0x90
   1f980:	f300 8321 	bgt.w	1ffc6 <_svfprintf_r+0x11c6>
   1f984:	f108 0808 	add.w	r8, r8, #8
   1f988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f98a:	2f00      	cmp	r7, #0
   1f98c:	bfa8      	it	ge
   1f98e:	1bdb      	subge	r3, r3, r7
   1f990:	2b00      	cmp	r3, #0
   1f992:	461f      	mov	r7, r3
   1f994:	f340 80d7 	ble.w	1fb46 <_svfprintf_r+0xd46>
   1f998:	2f10      	cmp	r7, #16
   1f99a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f99c:	4d31      	ldr	r5, [pc, #196]	; (1fa64 <_svfprintf_r+0xc64>)
   1f99e:	f340 81f0 	ble.w	1fd82 <_svfprintf_r+0xf82>
   1f9a2:	4642      	mov	r2, r8
   1f9a4:	4621      	mov	r1, r4
   1f9a6:	46b0      	mov	r8, r6
   1f9a8:	f04f 0b10 	mov.w	fp, #16
   1f9ac:	462e      	mov	r6, r5
   1f9ae:	9c08      	ldr	r4, [sp, #32]
   1f9b0:	9d07      	ldr	r5, [sp, #28]
   1f9b2:	e004      	b.n	1f9be <_svfprintf_r+0xbbe>
   1f9b4:	3208      	adds	r2, #8
   1f9b6:	3f10      	subs	r7, #16
   1f9b8:	2f10      	cmp	r7, #16
   1f9ba:	f340 81de 	ble.w	1fd7a <_svfprintf_r+0xf7a>
   1f9be:	3301      	adds	r3, #1
   1f9c0:	3110      	adds	r1, #16
   1f9c2:	2b07      	cmp	r3, #7
   1f9c4:	9125      	str	r1, [sp, #148]	; 0x94
   1f9c6:	9324      	str	r3, [sp, #144]	; 0x90
   1f9c8:	e882 0840 	stmia.w	r2, {r6, fp}
   1f9cc:	ddf2      	ble.n	1f9b4 <_svfprintf_r+0xbb4>
   1f9ce:	aa23      	add	r2, sp, #140	; 0x8c
   1f9d0:	4629      	mov	r1, r5
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	f002 fbb6 	bl	22144 <__ssprint_r>
   1f9d8:	2800      	cmp	r0, #0
   1f9da:	f47f aae3 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f9de:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f9e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f9e2:	464a      	mov	r2, r9
   1f9e4:	e7e7      	b.n	1f9b6 <_svfprintf_r+0xbb6>
   1f9e6:	2d00      	cmp	r5, #0
   1f9e8:	bf08      	it	eq
   1f9ea:	2c0a      	cmpeq	r4, #10
   1f9ec:	f0c0 8095 	bcc.w	1fb1a <_svfprintf_r+0xd1a>
   1f9f0:	464e      	mov	r6, r9
   1f9f2:	4620      	mov	r0, r4
   1f9f4:	4629      	mov	r1, r5
   1f9f6:	220a      	movs	r2, #10
   1f9f8:	2300      	movs	r3, #0
   1f9fa:	f7fc fccb 	bl	1c394 <__aeabi_uldivmod>
   1f9fe:	3230      	adds	r2, #48	; 0x30
   1fa00:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1fa04:	4620      	mov	r0, r4
   1fa06:	4629      	mov	r1, r5
   1fa08:	2300      	movs	r3, #0
   1fa0a:	220a      	movs	r2, #10
   1fa0c:	f7fc fcc2 	bl	1c394 <__aeabi_uldivmod>
   1fa10:	4604      	mov	r4, r0
   1fa12:	460d      	mov	r5, r1
   1fa14:	ea54 0305 	orrs.w	r3, r4, r5
   1fa18:	d1eb      	bne.n	1f9f2 <_svfprintf_r+0xbf2>
   1fa1a:	eba9 0306 	sub.w	r3, r9, r6
   1fa1e:	930a      	str	r3, [sp, #40]	; 0x28
   1fa20:	f7ff bafe 	b.w	1f020 <_svfprintf_r+0x220>
   1fa24:	9b06      	ldr	r3, [sp, #24]
   1fa26:	930a      	str	r3, [sp, #40]	; 0x28
   1fa28:	464e      	mov	r6, r9
   1fa2a:	f7ff baf9 	b.w	1f020 <_svfprintf_r+0x220>
   1fa2e:	aa23      	add	r2, sp, #140	; 0x8c
   1fa30:	9907      	ldr	r1, [sp, #28]
   1fa32:	9808      	ldr	r0, [sp, #32]
   1fa34:	f002 fb86 	bl	22144 <__ssprint_r>
   1fa38:	2800      	cmp	r0, #0
   1fa3a:	f47f aab3 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fa3e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fa42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa44:	46c8      	mov	r8, r9
   1fa46:	f7ff bb50 	b.w	1f0ea <_svfprintf_r+0x2ea>
   1fa4a:	1e5e      	subs	r6, r3, #1
   1fa4c:	2e00      	cmp	r6, #0
   1fa4e:	f77f af0a 	ble.w	1f866 <_svfprintf_r+0xa66>
   1fa52:	2e10      	cmp	r6, #16
   1fa54:	4d03      	ldr	r5, [pc, #12]	; (1fa64 <_svfprintf_r+0xc64>)
   1fa56:	dd23      	ble.n	1faa0 <_svfprintf_r+0xca0>
   1fa58:	4622      	mov	r2, r4
   1fa5a:	f04f 0b10 	mov.w	fp, #16
   1fa5e:	9c08      	ldr	r4, [sp, #32]
   1fa60:	e007      	b.n	1fa72 <_svfprintf_r+0xc72>
   1fa62:	bf00      	nop
   1fa64:	00024ba0 	.word	0x00024ba0
   1fa68:	3e10      	subs	r6, #16
   1fa6a:	2e10      	cmp	r6, #16
   1fa6c:	f108 0808 	add.w	r8, r8, #8
   1fa70:	dd15      	ble.n	1fa9e <_svfprintf_r+0xc9e>
   1fa72:	3701      	adds	r7, #1
   1fa74:	3210      	adds	r2, #16
   1fa76:	2f07      	cmp	r7, #7
   1fa78:	9225      	str	r2, [sp, #148]	; 0x94
   1fa7a:	9724      	str	r7, [sp, #144]	; 0x90
   1fa7c:	e888 0820 	stmia.w	r8, {r5, fp}
   1fa80:	ddf2      	ble.n	1fa68 <_svfprintf_r+0xc68>
   1fa82:	aa23      	add	r2, sp, #140	; 0x8c
   1fa84:	9907      	ldr	r1, [sp, #28]
   1fa86:	4620      	mov	r0, r4
   1fa88:	f002 fb5c 	bl	22144 <__ssprint_r>
   1fa8c:	2800      	cmp	r0, #0
   1fa8e:	f47f aa89 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fa92:	3e10      	subs	r6, #16
   1fa94:	2e10      	cmp	r6, #16
   1fa96:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fa98:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fa9a:	46c8      	mov	r8, r9
   1fa9c:	dce9      	bgt.n	1fa72 <_svfprintf_r+0xc72>
   1fa9e:	4614      	mov	r4, r2
   1faa0:	3701      	adds	r7, #1
   1faa2:	4434      	add	r4, r6
   1faa4:	2f07      	cmp	r7, #7
   1faa6:	9425      	str	r4, [sp, #148]	; 0x94
   1faa8:	9724      	str	r7, [sp, #144]	; 0x90
   1faaa:	e888 0060 	stmia.w	r8, {r5, r6}
   1faae:	f77f aed8 	ble.w	1f862 <_svfprintf_r+0xa62>
   1fab2:	aa23      	add	r2, sp, #140	; 0x8c
   1fab4:	9907      	ldr	r1, [sp, #28]
   1fab6:	9808      	ldr	r0, [sp, #32]
   1fab8:	f002 fb44 	bl	22144 <__ssprint_r>
   1fabc:	2800      	cmp	r0, #0
   1fabe:	f47f aa71 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fac2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fac4:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fac6:	46c8      	mov	r8, r9
   1fac8:	e6cd      	b.n	1f866 <_svfprintf_r+0xa66>
   1faca:	681c      	ldr	r4, [r3, #0]
   1facc:	3304      	adds	r3, #4
   1face:	930b      	str	r3, [sp, #44]	; 0x2c
   1fad0:	2500      	movs	r5, #0
   1fad2:	e422      	b.n	1f31a <_svfprintf_r+0x51a>
   1fad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fad6:	460a      	mov	r2, r1
   1fad8:	3204      	adds	r2, #4
   1fada:	680c      	ldr	r4, [r1, #0]
   1fadc:	920b      	str	r2, [sp, #44]	; 0x2c
   1fade:	2500      	movs	r5, #0
   1fae0:	f7ff ba81 	b.w	1efe6 <_svfprintf_r+0x1e6>
   1fae4:	3204      	adds	r2, #4
   1fae6:	681c      	ldr	r4, [r3, #0]
   1fae8:	920b      	str	r2, [sp, #44]	; 0x2c
   1faea:	2301      	movs	r3, #1
   1faec:	2500      	movs	r5, #0
   1faee:	f7ff ba7a 	b.w	1efe6 <_svfprintf_r+0x1e6>
   1faf2:	4614      	mov	r4, r2
   1faf4:	3301      	adds	r3, #1
   1faf6:	4434      	add	r4, r6
   1faf8:	2b07      	cmp	r3, #7
   1fafa:	9425      	str	r4, [sp, #148]	; 0x94
   1fafc:	9324      	str	r3, [sp, #144]	; 0x90
   1fafe:	e888 0060 	stmia.w	r8, {r5, r6}
   1fb02:	f77f ab62 	ble.w	1f1ca <_svfprintf_r+0x3ca>
   1fb06:	e6bb      	b.n	1f880 <_svfprintf_r+0xa80>
   1fb08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fb0a:	6814      	ldr	r4, [r2, #0]
   1fb0c:	4613      	mov	r3, r2
   1fb0e:	3304      	adds	r3, #4
   1fb10:	17e5      	asrs	r5, r4, #31
   1fb12:	930b      	str	r3, [sp, #44]	; 0x2c
   1fb14:	4622      	mov	r2, r4
   1fb16:	462b      	mov	r3, r5
   1fb18:	e4cd      	b.n	1f4b6 <_svfprintf_r+0x6b6>
   1fb1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fb1e:	f8cd b00c 	str.w	fp, [sp, #12]
   1fb22:	ae40      	add	r6, sp, #256	; 0x100
   1fb24:	3430      	adds	r4, #48	; 0x30
   1fb26:	2301      	movs	r3, #1
   1fb28:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1fb2c:	930a      	str	r3, [sp, #40]	; 0x28
   1fb2e:	f7ff ba77 	b.w	1f020 <_svfprintf_r+0x220>
   1fb32:	aa23      	add	r2, sp, #140	; 0x8c
   1fb34:	9907      	ldr	r1, [sp, #28]
   1fb36:	9808      	ldr	r0, [sp, #32]
   1fb38:	f002 fb04 	bl	22144 <__ssprint_r>
   1fb3c:	2800      	cmp	r0, #0
   1fb3e:	f47f aa31 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fb42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb44:	46c8      	mov	r8, r9
   1fb46:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fb48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fb4a:	429a      	cmp	r2, r3
   1fb4c:	db44      	blt.n	1fbd8 <_svfprintf_r+0xdd8>
   1fb4e:	9b03      	ldr	r3, [sp, #12]
   1fb50:	07d9      	lsls	r1, r3, #31
   1fb52:	d441      	bmi.n	1fbd8 <_svfprintf_r+0xdd8>
   1fb54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fb56:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fb58:	1a9a      	subs	r2, r3, r2
   1fb5a:	1a1d      	subs	r5, r3, r0
   1fb5c:	4295      	cmp	r5, r2
   1fb5e:	bfa8      	it	ge
   1fb60:	4615      	movge	r5, r2
   1fb62:	2d00      	cmp	r5, #0
   1fb64:	dd0e      	ble.n	1fb84 <_svfprintf_r+0xd84>
   1fb66:	9924      	ldr	r1, [sp, #144]	; 0x90
   1fb68:	f8c8 5004 	str.w	r5, [r8, #4]
   1fb6c:	3101      	adds	r1, #1
   1fb6e:	4406      	add	r6, r0
   1fb70:	442c      	add	r4, r5
   1fb72:	2907      	cmp	r1, #7
   1fb74:	f8c8 6000 	str.w	r6, [r8]
   1fb78:	9425      	str	r4, [sp, #148]	; 0x94
   1fb7a:	9124      	str	r1, [sp, #144]	; 0x90
   1fb7c:	f300 823a 	bgt.w	1fff4 <_svfprintf_r+0x11f4>
   1fb80:	f108 0808 	add.w	r8, r8, #8
   1fb84:	2d00      	cmp	r5, #0
   1fb86:	bfac      	ite	ge
   1fb88:	1b56      	subge	r6, r2, r5
   1fb8a:	4616      	movlt	r6, r2
   1fb8c:	2e00      	cmp	r6, #0
   1fb8e:	f77f ab1e 	ble.w	1f1ce <_svfprintf_r+0x3ce>
   1fb92:	2e10      	cmp	r6, #16
   1fb94:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb96:	4db1      	ldr	r5, [pc, #708]	; (1fe5c <_svfprintf_r+0x105c>)
   1fb98:	ddac      	ble.n	1faf4 <_svfprintf_r+0xcf4>
   1fb9a:	4622      	mov	r2, r4
   1fb9c:	2710      	movs	r7, #16
   1fb9e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fba2:	9c07      	ldr	r4, [sp, #28]
   1fba4:	e004      	b.n	1fbb0 <_svfprintf_r+0xdb0>
   1fba6:	f108 0808 	add.w	r8, r8, #8
   1fbaa:	3e10      	subs	r6, #16
   1fbac:	2e10      	cmp	r6, #16
   1fbae:	dda0      	ble.n	1faf2 <_svfprintf_r+0xcf2>
   1fbb0:	3301      	adds	r3, #1
   1fbb2:	3210      	adds	r2, #16
   1fbb4:	2b07      	cmp	r3, #7
   1fbb6:	9225      	str	r2, [sp, #148]	; 0x94
   1fbb8:	9324      	str	r3, [sp, #144]	; 0x90
   1fbba:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fbbe:	ddf2      	ble.n	1fba6 <_svfprintf_r+0xda6>
   1fbc0:	aa23      	add	r2, sp, #140	; 0x8c
   1fbc2:	4621      	mov	r1, r4
   1fbc4:	4658      	mov	r0, fp
   1fbc6:	f002 fabd 	bl	22144 <__ssprint_r>
   1fbca:	2800      	cmp	r0, #0
   1fbcc:	f47f a9ea 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fbd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fbd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbd4:	46c8      	mov	r8, r9
   1fbd6:	e7e8      	b.n	1fbaa <_svfprintf_r+0xdaa>
   1fbd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbda:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fbdc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fbde:	f8c8 1000 	str.w	r1, [r8]
   1fbe2:	3301      	adds	r3, #1
   1fbe4:	4404      	add	r4, r0
   1fbe6:	2b07      	cmp	r3, #7
   1fbe8:	9425      	str	r4, [sp, #148]	; 0x94
   1fbea:	f8c8 0004 	str.w	r0, [r8, #4]
   1fbee:	9324      	str	r3, [sp, #144]	; 0x90
   1fbf0:	f300 81f4 	bgt.w	1ffdc <_svfprintf_r+0x11dc>
   1fbf4:	f108 0808 	add.w	r8, r8, #8
   1fbf8:	e7ac      	b.n	1fb54 <_svfprintf_r+0xd54>
   1fbfa:	9b03      	ldr	r3, [sp, #12]
   1fbfc:	07da      	lsls	r2, r3, #31
   1fbfe:	f53f adfc 	bmi.w	1f7fa <_svfprintf_r+0x9fa>
   1fc02:	3701      	adds	r7, #1
   1fc04:	3401      	adds	r4, #1
   1fc06:	2301      	movs	r3, #1
   1fc08:	2f07      	cmp	r7, #7
   1fc0a:	9425      	str	r4, [sp, #148]	; 0x94
   1fc0c:	9724      	str	r7, [sp, #144]	; 0x90
   1fc0e:	f8c8 6000 	str.w	r6, [r8]
   1fc12:	f8c8 3004 	str.w	r3, [r8, #4]
   1fc16:	f77f ae24 	ble.w	1f862 <_svfprintf_r+0xa62>
   1fc1a:	e74a      	b.n	1fab2 <_svfprintf_r+0xcb2>
   1fc1c:	aa23      	add	r2, sp, #140	; 0x8c
   1fc1e:	9907      	ldr	r1, [sp, #28]
   1fc20:	9808      	ldr	r0, [sp, #32]
   1fc22:	f002 fa8f 	bl	22144 <__ssprint_r>
   1fc26:	2800      	cmp	r0, #0
   1fc28:	f47f a9bc 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fc2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc2e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fc30:	46c8      	mov	r8, r9
   1fc32:	e5f0      	b.n	1f816 <_svfprintf_r+0xa16>
   1fc34:	aa23      	add	r2, sp, #140	; 0x8c
   1fc36:	9907      	ldr	r1, [sp, #28]
   1fc38:	9808      	ldr	r0, [sp, #32]
   1fc3a:	f002 fa83 	bl	22144 <__ssprint_r>
   1fc3e:	2800      	cmp	r0, #0
   1fc40:	f47f a9b0 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fc44:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc46:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fc48:	46c8      	mov	r8, r9
   1fc4a:	e5f3      	b.n	1f834 <_svfprintf_r+0xa34>
   1fc4c:	464e      	mov	r6, r9
   1fc4e:	f7ff b9e7 	b.w	1f020 <_svfprintf_r+0x220>
   1fc52:	aa23      	add	r2, sp, #140	; 0x8c
   1fc54:	9907      	ldr	r1, [sp, #28]
   1fc56:	9808      	ldr	r0, [sp, #32]
   1fc58:	f002 fa74 	bl	22144 <__ssprint_r>
   1fc5c:	2800      	cmp	r0, #0
   1fc5e:	f47f a9a1 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fc62:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc64:	46c8      	mov	r8, r9
   1fc66:	f7ff ba63 	b.w	1f130 <_svfprintf_r+0x330>
   1fc6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fc6e:	4602      	mov	r2, r0
   1fc70:	460b      	mov	r3, r1
   1fc72:	f002 fc61 	bl	22538 <__aeabi_dcmpun>
   1fc76:	2800      	cmp	r0, #0
   1fc78:	f040 8298 	bne.w	201ac <_svfprintf_r+0x13ac>
   1fc7c:	9b06      	ldr	r3, [sp, #24]
   1fc7e:	3301      	adds	r3, #1
   1fc80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fc82:	f023 0720 	bic.w	r7, r3, #32
   1fc86:	f000 81d2 	beq.w	2002e <_svfprintf_r+0x122e>
   1fc8a:	2f47      	cmp	r7, #71	; 0x47
   1fc8c:	f000 8120 	beq.w	1fed0 <_svfprintf_r+0x10d0>
   1fc90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fc92:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fc96:	2b00      	cmp	r3, #0
   1fc98:	9203      	str	r2, [sp, #12]
   1fc9a:	f2c0 81f0 	blt.w	2007e <_svfprintf_r+0x127e>
   1fc9e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fca2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fca6:	2300      	movs	r3, #0
   1fca8:	930c      	str	r3, [sp, #48]	; 0x30
   1fcaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fcac:	2b66      	cmp	r3, #102	; 0x66
   1fcae:	f000 81c1 	beq.w	20034 <_svfprintf_r+0x1234>
   1fcb2:	2b46      	cmp	r3, #70	; 0x46
   1fcb4:	f000 80f1 	beq.w	1fe9a <_svfprintf_r+0x109a>
   1fcb8:	2f45      	cmp	r7, #69	; 0x45
   1fcba:	bf0c      	ite	eq
   1fcbc:	9b06      	ldreq	r3, [sp, #24]
   1fcbe:	9d06      	ldrne	r5, [sp, #24]
   1fcc0:	9808      	ldr	r0, [sp, #32]
   1fcc2:	bf08      	it	eq
   1fcc4:	1c5d      	addeq	r5, r3, #1
   1fcc6:	aa21      	add	r2, sp, #132	; 0x84
   1fcc8:	ab1e      	add	r3, sp, #120	; 0x78
   1fcca:	9201      	str	r2, [sp, #4]
   1fccc:	9300      	str	r3, [sp, #0]
   1fcce:	462a      	mov	r2, r5
   1fcd0:	ab1d      	add	r3, sp, #116	; 0x74
   1fcd2:	2102      	movs	r1, #2
   1fcd4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fcd8:	f000 fc9e 	bl	20618 <_dtoa_r>
   1fcdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fcde:	2b67      	cmp	r3, #103	; 0x67
   1fce0:	4606      	mov	r6, r0
   1fce2:	f040 81d5 	bne.w	20090 <_svfprintf_r+0x1290>
   1fce6:	f01b 0f01 	tst.w	fp, #1
   1fcea:	f000 824e 	beq.w	2018a <_svfprintf_r+0x138a>
   1fcee:	1974      	adds	r4, r6, r5
   1fcf0:	2200      	movs	r2, #0
   1fcf2:	2300      	movs	r3, #0
   1fcf4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1fcf8:	f7fc f924 	bl	1bf44 <__aeabi_dcmpeq>
   1fcfc:	2800      	cmp	r0, #0
   1fcfe:	f040 8160 	bne.w	1ffc2 <_svfprintf_r+0x11c2>
   1fd02:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fd04:	42a3      	cmp	r3, r4
   1fd06:	d206      	bcs.n	1fd16 <_svfprintf_r+0xf16>
   1fd08:	2130      	movs	r1, #48	; 0x30
   1fd0a:	1c5a      	adds	r2, r3, #1
   1fd0c:	9221      	str	r2, [sp, #132]	; 0x84
   1fd0e:	7019      	strb	r1, [r3, #0]
   1fd10:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fd12:	429c      	cmp	r4, r3
   1fd14:	d8f9      	bhi.n	1fd0a <_svfprintf_r+0xf0a>
   1fd16:	1b9b      	subs	r3, r3, r6
   1fd18:	2f47      	cmp	r7, #71	; 0x47
   1fd1a:	930f      	str	r3, [sp, #60]	; 0x3c
   1fd1c:	f000 80f0 	beq.w	1ff00 <_svfprintf_r+0x1100>
   1fd20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd22:	2b65      	cmp	r3, #101	; 0x65
   1fd24:	f340 81c3 	ble.w	200ae <_svfprintf_r+0x12ae>
   1fd28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd2a:	2b66      	cmp	r3, #102	; 0x66
   1fd2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fd2e:	930e      	str	r3, [sp, #56]	; 0x38
   1fd30:	f000 81c0 	beq.w	200b4 <_svfprintf_r+0x12b4>
   1fd34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fd36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fd38:	4619      	mov	r1, r3
   1fd3a:	4291      	cmp	r1, r2
   1fd3c:	f300 8191 	bgt.w	20062 <_svfprintf_r+0x1262>
   1fd40:	f01b 0f01 	tst.w	fp, #1
   1fd44:	f040 8223 	bne.w	2018e <_svfprintf_r+0x138e>
   1fd48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1fd4c:	9304      	str	r3, [sp, #16]
   1fd4e:	2367      	movs	r3, #103	; 0x67
   1fd50:	920a      	str	r2, [sp, #40]	; 0x28
   1fd52:	930d      	str	r3, [sp, #52]	; 0x34
   1fd54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fd56:	2b00      	cmp	r3, #0
   1fd58:	f040 80cb 	bne.w	1fef2 <_svfprintf_r+0x10f2>
   1fd5c:	9306      	str	r3, [sp, #24]
   1fd5e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fd62:	f7ff b965 	b.w	1f030 <_svfprintf_r+0x230>
   1fd66:	f025 0507 	bic.w	r5, r5, #7
   1fd6a:	ed95 7b00 	vldr	d7, [r5]
   1fd6e:	f105 0308 	add.w	r3, r5, #8
   1fd72:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fd76:	930b      	str	r3, [sp, #44]	; 0x2c
   1fd78:	e416      	b.n	1f5a8 <_svfprintf_r+0x7a8>
   1fd7a:	4635      	mov	r5, r6
   1fd7c:	460c      	mov	r4, r1
   1fd7e:	4646      	mov	r6, r8
   1fd80:	4690      	mov	r8, r2
   1fd82:	3301      	adds	r3, #1
   1fd84:	443c      	add	r4, r7
   1fd86:	2b07      	cmp	r3, #7
   1fd88:	9425      	str	r4, [sp, #148]	; 0x94
   1fd8a:	9324      	str	r3, [sp, #144]	; 0x90
   1fd8c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fd90:	f73f aecf 	bgt.w	1fb32 <_svfprintf_r+0xd32>
   1fd94:	f108 0808 	add.w	r8, r8, #8
   1fd98:	e6d5      	b.n	1fb46 <_svfprintf_r+0xd46>
   1fd9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fd9c:	6813      	ldr	r3, [r2, #0]
   1fd9e:	3204      	adds	r2, #4
   1fda0:	920b      	str	r2, [sp, #44]	; 0x2c
   1fda2:	9a05      	ldr	r2, [sp, #20]
   1fda4:	601a      	str	r2, [r3, #0]
   1fda6:	f7ff b852 	b.w	1ee4e <_svfprintf_r+0x4e>
   1fdaa:	aa23      	add	r2, sp, #140	; 0x8c
   1fdac:	9907      	ldr	r1, [sp, #28]
   1fdae:	9808      	ldr	r0, [sp, #32]
   1fdb0:	f002 f9c8 	bl	22144 <__ssprint_r>
   1fdb4:	2800      	cmp	r0, #0
   1fdb6:	f47f a8f5 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fdba:	46c8      	mov	r8, r9
   1fdbc:	e488      	b.n	1f6d0 <_svfprintf_r+0x8d0>
   1fdbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdc0:	4a27      	ldr	r2, [pc, #156]	; (1fe60 <_svfprintf_r+0x1060>)
   1fdc2:	f8c8 2000 	str.w	r2, [r8]
   1fdc6:	3301      	adds	r3, #1
   1fdc8:	3401      	adds	r4, #1
   1fdca:	2201      	movs	r2, #1
   1fdcc:	2b07      	cmp	r3, #7
   1fdce:	9425      	str	r4, [sp, #148]	; 0x94
   1fdd0:	9324      	str	r3, [sp, #144]	; 0x90
   1fdd2:	f8c8 2004 	str.w	r2, [r8, #4]
   1fdd6:	dc54      	bgt.n	1fe82 <_svfprintf_r+0x1082>
   1fdd8:	f108 0808 	add.w	r8, r8, #8
   1fddc:	b929      	cbnz	r1, 1fdea <_svfprintf_r+0xfea>
   1fdde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fde0:	b91b      	cbnz	r3, 1fdea <_svfprintf_r+0xfea>
   1fde2:	9b03      	ldr	r3, [sp, #12]
   1fde4:	07d8      	lsls	r0, r3, #31
   1fde6:	f57f a9f2 	bpl.w	1f1ce <_svfprintf_r+0x3ce>
   1fdea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdec:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fdee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fdf0:	f8c8 2000 	str.w	r2, [r8]
   1fdf4:	3301      	adds	r3, #1
   1fdf6:	4602      	mov	r2, r0
   1fdf8:	4422      	add	r2, r4
   1fdfa:	2b07      	cmp	r3, #7
   1fdfc:	9225      	str	r2, [sp, #148]	; 0x94
   1fdfe:	f8c8 0004 	str.w	r0, [r8, #4]
   1fe02:	9324      	str	r3, [sp, #144]	; 0x90
   1fe04:	f300 8195 	bgt.w	20132 <_svfprintf_r+0x1332>
   1fe08:	f108 0808 	add.w	r8, r8, #8
   1fe0c:	2900      	cmp	r1, #0
   1fe0e:	f2c0 816d 	blt.w	200ec <_svfprintf_r+0x12ec>
   1fe12:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1fe14:	f8c8 6000 	str.w	r6, [r8]
   1fe18:	3301      	adds	r3, #1
   1fe1a:	188c      	adds	r4, r1, r2
   1fe1c:	2b07      	cmp	r3, #7
   1fe1e:	9425      	str	r4, [sp, #148]	; 0x94
   1fe20:	9324      	str	r3, [sp, #144]	; 0x90
   1fe22:	f8c8 1004 	str.w	r1, [r8, #4]
   1fe26:	f77f a9d0 	ble.w	1f1ca <_svfprintf_r+0x3ca>
   1fe2a:	e529      	b.n	1f880 <_svfprintf_r+0xa80>
   1fe2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fe2e:	9905      	ldr	r1, [sp, #20]
   1fe30:	6813      	ldr	r3, [r2, #0]
   1fe32:	17cd      	asrs	r5, r1, #31
   1fe34:	4608      	mov	r0, r1
   1fe36:	3204      	adds	r2, #4
   1fe38:	4629      	mov	r1, r5
   1fe3a:	920b      	str	r2, [sp, #44]	; 0x2c
   1fe3c:	e9c3 0100 	strd	r0, r1, [r3]
   1fe40:	f7ff b805 	b.w	1ee4e <_svfprintf_r+0x4e>
   1fe44:	aa23      	add	r2, sp, #140	; 0x8c
   1fe46:	9907      	ldr	r1, [sp, #28]
   1fe48:	9808      	ldr	r0, [sp, #32]
   1fe4a:	f002 f97b 	bl	22144 <__ssprint_r>
   1fe4e:	2800      	cmp	r0, #0
   1fe50:	f47f a8a8 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fe54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe56:	46c8      	mov	r8, r9
   1fe58:	e453      	b.n	1f702 <_svfprintf_r+0x902>
   1fe5a:	bf00      	nop
   1fe5c:	00024ba0 	.word	0x00024ba0
   1fe60:	00024b8c 	.word	0x00024b8c
   1fe64:	2140      	movs	r1, #64	; 0x40
   1fe66:	9808      	ldr	r0, [sp, #32]
   1fe68:	f7fd fe8e 	bl	1db88 <_malloc_r>
   1fe6c:	9a07      	ldr	r2, [sp, #28]
   1fe6e:	6010      	str	r0, [r2, #0]
   1fe70:	6110      	str	r0, [r2, #16]
   1fe72:	2800      	cmp	r0, #0
   1fe74:	f000 81f6 	beq.w	20264 <_svfprintf_r+0x1464>
   1fe78:	9a07      	ldr	r2, [sp, #28]
   1fe7a:	2340      	movs	r3, #64	; 0x40
   1fe7c:	6153      	str	r3, [r2, #20]
   1fe7e:	f7fe bfd6 	b.w	1ee2e <_svfprintf_r+0x2e>
   1fe82:	aa23      	add	r2, sp, #140	; 0x8c
   1fe84:	9907      	ldr	r1, [sp, #28]
   1fe86:	9808      	ldr	r0, [sp, #32]
   1fe88:	f002 f95c 	bl	22144 <__ssprint_r>
   1fe8c:	2800      	cmp	r0, #0
   1fe8e:	f47f a889 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fe92:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fe94:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe96:	46c8      	mov	r8, r9
   1fe98:	e7a0      	b.n	1fddc <_svfprintf_r+0xfdc>
   1fe9a:	9d06      	ldr	r5, [sp, #24]
   1fe9c:	9808      	ldr	r0, [sp, #32]
   1fe9e:	aa21      	add	r2, sp, #132	; 0x84
   1fea0:	ab1e      	add	r3, sp, #120	; 0x78
   1fea2:	9201      	str	r2, [sp, #4]
   1fea4:	9300      	str	r3, [sp, #0]
   1fea6:	462a      	mov	r2, r5
   1fea8:	ab1d      	add	r3, sp, #116	; 0x74
   1feaa:	2103      	movs	r1, #3
   1feac:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1feb0:	f000 fbb2 	bl	20618 <_dtoa_r>
   1feb4:	4606      	mov	r6, r0
   1feb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1feb8:	2b46      	cmp	r3, #70	; 0x46
   1feba:	eb06 0405 	add.w	r4, r6, r5
   1febe:	f47f af17 	bne.w	1fcf0 <_svfprintf_r+0xef0>
   1fec2:	7833      	ldrb	r3, [r6, #0]
   1fec4:	2b30      	cmp	r3, #48	; 0x30
   1fec6:	f000 817d 	beq.w	201c4 <_svfprintf_r+0x13c4>
   1feca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1fecc:	442c      	add	r4, r5
   1fece:	e70f      	b.n	1fcf0 <_svfprintf_r+0xef0>
   1fed0:	9b06      	ldr	r3, [sp, #24]
   1fed2:	2b00      	cmp	r3, #0
   1fed4:	bf08      	it	eq
   1fed6:	2301      	moveq	r3, #1
   1fed8:	9306      	str	r3, [sp, #24]
   1feda:	e6d9      	b.n	1fc90 <_svfprintf_r+0xe90>
   1fedc:	4630      	mov	r0, r6
   1fede:	9406      	str	r4, [sp, #24]
   1fee0:	f7fe fece 	bl	1ec80 <strlen>
   1fee4:	950b      	str	r5, [sp, #44]	; 0x2c
   1fee6:	900a      	str	r0, [sp, #40]	; 0x28
   1fee8:	f8cd b00c 	str.w	fp, [sp, #12]
   1feec:	4603      	mov	r3, r0
   1feee:	f7ff b9eb 	b.w	1f2c8 <_svfprintf_r+0x4c8>
   1fef2:	272d      	movs	r7, #45	; 0x2d
   1fef4:	2300      	movs	r3, #0
   1fef6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fefa:	9306      	str	r3, [sp, #24]
   1fefc:	f7ff b899 	b.w	1f032 <_svfprintf_r+0x232>
   1ff00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ff02:	930e      	str	r3, [sp, #56]	; 0x38
   1ff04:	461a      	mov	r2, r3
   1ff06:	3303      	adds	r3, #3
   1ff08:	db04      	blt.n	1ff14 <_svfprintf_r+0x1114>
   1ff0a:	9b06      	ldr	r3, [sp, #24]
   1ff0c:	4619      	mov	r1, r3
   1ff0e:	4291      	cmp	r1, r2
   1ff10:	f6bf af10 	bge.w	1fd34 <_svfprintf_r+0xf34>
   1ff14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff16:	3b02      	subs	r3, #2
   1ff18:	930d      	str	r3, [sp, #52]	; 0x34
   1ff1a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1ff1e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   1ff22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ff24:	3b01      	subs	r3, #1
   1ff26:	2b00      	cmp	r3, #0
   1ff28:	931d      	str	r3, [sp, #116]	; 0x74
   1ff2a:	bfbd      	ittte	lt
   1ff2c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1ff2e:	f1c3 0301 	rsblt	r3, r3, #1
   1ff32:	222d      	movlt	r2, #45	; 0x2d
   1ff34:	222b      	movge	r2, #43	; 0x2b
   1ff36:	2b09      	cmp	r3, #9
   1ff38:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   1ff3c:	f340 811d 	ble.w	2017a <_svfprintf_r+0x137a>
   1ff40:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   1ff44:	4620      	mov	r0, r4
   1ff46:	4daf      	ldr	r5, [pc, #700]	; (20204 <_svfprintf_r+0x1404>)
   1ff48:	e000      	b.n	1ff4c <_svfprintf_r+0x114c>
   1ff4a:	4610      	mov	r0, r2
   1ff4c:	fb85 1203 	smull	r1, r2, r5, r3
   1ff50:	17d9      	asrs	r1, r3, #31
   1ff52:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   1ff56:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1ff5a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1ff5e:	3230      	adds	r2, #48	; 0x30
   1ff60:	2909      	cmp	r1, #9
   1ff62:	f800 2c01 	strb.w	r2, [r0, #-1]
   1ff66:	460b      	mov	r3, r1
   1ff68:	f100 32ff 	add.w	r2, r0, #4294967295
   1ff6c:	dced      	bgt.n	1ff4a <_svfprintf_r+0x114a>
   1ff6e:	3330      	adds	r3, #48	; 0x30
   1ff70:	3802      	subs	r0, #2
   1ff72:	b2d9      	uxtb	r1, r3
   1ff74:	4284      	cmp	r4, r0
   1ff76:	f802 1c01 	strb.w	r1, [r2, #-1]
   1ff7a:	f240 8170 	bls.w	2025e <_svfprintf_r+0x145e>
   1ff7e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   1ff82:	4613      	mov	r3, r2
   1ff84:	e001      	b.n	1ff8a <_svfprintf_r+0x118a>
   1ff86:	f813 1b01 	ldrb.w	r1, [r3], #1
   1ff8a:	f800 1b01 	strb.w	r1, [r0], #1
   1ff8e:	42a3      	cmp	r3, r4
   1ff90:	d1f9      	bne.n	1ff86 <_svfprintf_r+0x1186>
   1ff92:	3301      	adds	r3, #1
   1ff94:	1a9b      	subs	r3, r3, r2
   1ff96:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   1ff9a:	4413      	add	r3, r2
   1ff9c:	aa1f      	add	r2, sp, #124	; 0x7c
   1ff9e:	1a9b      	subs	r3, r3, r2
   1ffa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ffa2:	9315      	str	r3, [sp, #84]	; 0x54
   1ffa4:	2a01      	cmp	r2, #1
   1ffa6:	4413      	add	r3, r2
   1ffa8:	930a      	str	r3, [sp, #40]	; 0x28
   1ffaa:	f340 8120 	ble.w	201ee <_svfprintf_r+0x13ee>
   1ffae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ffb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ffb2:	4413      	add	r3, r2
   1ffb4:	930a      	str	r3, [sp, #40]	; 0x28
   1ffb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ffba:	9304      	str	r3, [sp, #16]
   1ffbc:	2300      	movs	r3, #0
   1ffbe:	930e      	str	r3, [sp, #56]	; 0x38
   1ffc0:	e6c8      	b.n	1fd54 <_svfprintf_r+0xf54>
   1ffc2:	4623      	mov	r3, r4
   1ffc4:	e6a7      	b.n	1fd16 <_svfprintf_r+0xf16>
   1ffc6:	aa23      	add	r2, sp, #140	; 0x8c
   1ffc8:	9907      	ldr	r1, [sp, #28]
   1ffca:	9808      	ldr	r0, [sp, #32]
   1ffcc:	f002 f8ba 	bl	22144 <__ssprint_r>
   1ffd0:	2800      	cmp	r0, #0
   1ffd2:	f47e afe7 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1ffd6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ffd8:	46c8      	mov	r8, r9
   1ffda:	e4d5      	b.n	1f988 <_svfprintf_r+0xb88>
   1ffdc:	aa23      	add	r2, sp, #140	; 0x8c
   1ffde:	9907      	ldr	r1, [sp, #28]
   1ffe0:	9808      	ldr	r0, [sp, #32]
   1ffe2:	f002 f8af 	bl	22144 <__ssprint_r>
   1ffe6:	2800      	cmp	r0, #0
   1ffe8:	f47e afdc 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1ffec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1ffee:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fff0:	46c8      	mov	r8, r9
   1fff2:	e5af      	b.n	1fb54 <_svfprintf_r+0xd54>
   1fff4:	aa23      	add	r2, sp, #140	; 0x8c
   1fff6:	9907      	ldr	r1, [sp, #28]
   1fff8:	9808      	ldr	r0, [sp, #32]
   1fffa:	f002 f8a3 	bl	22144 <__ssprint_r>
   1fffe:	2800      	cmp	r0, #0
   20000:	f47e afd0 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   20004:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20008:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2000a:	1a9a      	subs	r2, r3, r2
   2000c:	46c8      	mov	r8, r9
   2000e:	e5b9      	b.n	1fb84 <_svfprintf_r+0xd84>
   20010:	9b06      	ldr	r3, [sp, #24]
   20012:	960e      	str	r6, [sp, #56]	; 0x38
   20014:	2b06      	cmp	r3, #6
   20016:	bf28      	it	cs
   20018:	2306      	movcs	r3, #6
   2001a:	9606      	str	r6, [sp, #24]
   2001c:	4637      	mov	r7, r6
   2001e:	9304      	str	r3, [sp, #16]
   20020:	950b      	str	r5, [sp, #44]	; 0x2c
   20022:	f8cd b00c 	str.w	fp, [sp, #12]
   20026:	930a      	str	r3, [sp, #40]	; 0x28
   20028:	4e77      	ldr	r6, [pc, #476]	; (20208 <_svfprintf_r+0x1408>)
   2002a:	f7ff b801 	b.w	1f030 <_svfprintf_r+0x230>
   2002e:	2306      	movs	r3, #6
   20030:	9306      	str	r3, [sp, #24]
   20032:	e62d      	b.n	1fc90 <_svfprintf_r+0xe90>
   20034:	9c06      	ldr	r4, [sp, #24]
   20036:	9808      	ldr	r0, [sp, #32]
   20038:	aa21      	add	r2, sp, #132	; 0x84
   2003a:	ab1e      	add	r3, sp, #120	; 0x78
   2003c:	9201      	str	r2, [sp, #4]
   2003e:	9300      	str	r3, [sp, #0]
   20040:	4622      	mov	r2, r4
   20042:	ab1d      	add	r3, sp, #116	; 0x74
   20044:	2103      	movs	r1, #3
   20046:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   2004a:	f000 fae5 	bl	20618 <_dtoa_r>
   2004e:	4623      	mov	r3, r4
   20050:	4606      	mov	r6, r0
   20052:	1904      	adds	r4, r0, r4
   20054:	461d      	mov	r5, r3
   20056:	e734      	b.n	1fec2 <_svfprintf_r+0x10c2>
   20058:	272d      	movs	r7, #45	; 0x2d
   2005a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2005e:	f7ff baca 	b.w	1f5f6 <_svfprintf_r+0x7f6>
   20062:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20066:	4413      	add	r3, r2
   20068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2006a:	930a      	str	r3, [sp, #40]	; 0x28
   2006c:	2a00      	cmp	r2, #0
   2006e:	f340 80b7 	ble.w	201e0 <_svfprintf_r+0x13e0>
   20072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20076:	9304      	str	r3, [sp, #16]
   20078:	2367      	movs	r3, #103	; 0x67
   2007a:	930d      	str	r3, [sp, #52]	; 0x34
   2007c:	e66a      	b.n	1fd54 <_svfprintf_r+0xf54>
   2007e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20082:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20086:	9319      	str	r3, [sp, #100]	; 0x64
   20088:	232d      	movs	r3, #45	; 0x2d
   2008a:	9118      	str	r1, [sp, #96]	; 0x60
   2008c:	930c      	str	r3, [sp, #48]	; 0x30
   2008e:	e60c      	b.n	1fcaa <_svfprintf_r+0xeaa>
   20090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20092:	2b47      	cmp	r3, #71	; 0x47
   20094:	f47f ae2b 	bne.w	1fcee <_svfprintf_r+0xeee>
   20098:	f01b 0f01 	tst.w	fp, #1
   2009c:	f47f af0b 	bne.w	1feb6 <_svfprintf_r+0x10b6>
   200a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   200a2:	2f47      	cmp	r7, #71	; 0x47
   200a4:	eba3 0306 	sub.w	r3, r3, r6
   200a8:	930f      	str	r3, [sp, #60]	; 0x3c
   200aa:	f43f af29 	beq.w	1ff00 <_svfprintf_r+0x1100>
   200ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   200b0:	930e      	str	r3, [sp, #56]	; 0x38
   200b2:	e732      	b.n	1ff1a <_svfprintf_r+0x111a>
   200b4:	2b00      	cmp	r3, #0
   200b6:	f340 80af 	ble.w	20218 <_svfprintf_r+0x1418>
   200ba:	9a06      	ldr	r2, [sp, #24]
   200bc:	2a00      	cmp	r2, #0
   200be:	d16b      	bne.n	20198 <_svfprintf_r+0x1398>
   200c0:	f01b 0f01 	tst.w	fp, #1
   200c4:	d168      	bne.n	20198 <_svfprintf_r+0x1398>
   200c6:	9304      	str	r3, [sp, #16]
   200c8:	930a      	str	r3, [sp, #40]	; 0x28
   200ca:	e643      	b.n	1fd54 <_svfprintf_r+0xf54>
   200cc:	9b06      	ldr	r3, [sp, #24]
   200ce:	9304      	str	r3, [sp, #16]
   200d0:	930a      	str	r3, [sp, #40]	; 0x28
   200d2:	9006      	str	r0, [sp, #24]
   200d4:	950b      	str	r5, [sp, #44]	; 0x2c
   200d6:	f8cd b00c 	str.w	fp, [sp, #12]
   200da:	900e      	str	r0, [sp, #56]	; 0x38
   200dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   200e0:	f7fe bfa6 	b.w	1f030 <_svfprintf_r+0x230>
   200e4:	2000      	movs	r0, #0
   200e6:	9006      	str	r0, [sp, #24]
   200e8:	f7fe bee4 	b.w	1eeb4 <_svfprintf_r+0xb4>
   200ec:	424f      	negs	r7, r1
   200ee:	3110      	adds	r1, #16
   200f0:	4d46      	ldr	r5, [pc, #280]	; (2020c <_svfprintf_r+0x140c>)
   200f2:	da2b      	bge.n	2014c <_svfprintf_r+0x134c>
   200f4:	2410      	movs	r4, #16
   200f6:	f8dd b020 	ldr.w	fp, [sp, #32]
   200fa:	e004      	b.n	20106 <_svfprintf_r+0x1306>
   200fc:	f108 0808 	add.w	r8, r8, #8
   20100:	3f10      	subs	r7, #16
   20102:	2f10      	cmp	r7, #16
   20104:	dd22      	ble.n	2014c <_svfprintf_r+0x134c>
   20106:	3301      	adds	r3, #1
   20108:	3210      	adds	r2, #16
   2010a:	2b07      	cmp	r3, #7
   2010c:	9225      	str	r2, [sp, #148]	; 0x94
   2010e:	9324      	str	r3, [sp, #144]	; 0x90
   20110:	f8c8 5000 	str.w	r5, [r8]
   20114:	f8c8 4004 	str.w	r4, [r8, #4]
   20118:	ddf0      	ble.n	200fc <_svfprintf_r+0x12fc>
   2011a:	aa23      	add	r2, sp, #140	; 0x8c
   2011c:	9907      	ldr	r1, [sp, #28]
   2011e:	4658      	mov	r0, fp
   20120:	f002 f810 	bl	22144 <__ssprint_r>
   20124:	2800      	cmp	r0, #0
   20126:	f47e af3d 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   2012a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2012c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2012e:	46c8      	mov	r8, r9
   20130:	e7e6      	b.n	20100 <_svfprintf_r+0x1300>
   20132:	aa23      	add	r2, sp, #140	; 0x8c
   20134:	9907      	ldr	r1, [sp, #28]
   20136:	9808      	ldr	r0, [sp, #32]
   20138:	f002 f804 	bl	22144 <__ssprint_r>
   2013c:	2800      	cmp	r0, #0
   2013e:	f47e af31 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   20142:	991d      	ldr	r1, [sp, #116]	; 0x74
   20144:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20146:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20148:	46c8      	mov	r8, r9
   2014a:	e65f      	b.n	1fe0c <_svfprintf_r+0x100c>
   2014c:	3301      	adds	r3, #1
   2014e:	443a      	add	r2, r7
   20150:	2b07      	cmp	r3, #7
   20152:	e888 00a0 	stmia.w	r8, {r5, r7}
   20156:	9225      	str	r2, [sp, #148]	; 0x94
   20158:	9324      	str	r3, [sp, #144]	; 0x90
   2015a:	f108 0808 	add.w	r8, r8, #8
   2015e:	f77f ae58 	ble.w	1fe12 <_svfprintf_r+0x1012>
   20162:	aa23      	add	r2, sp, #140	; 0x8c
   20164:	9907      	ldr	r1, [sp, #28]
   20166:	9808      	ldr	r0, [sp, #32]
   20168:	f001 ffec 	bl	22144 <__ssprint_r>
   2016c:	2800      	cmp	r0, #0
   2016e:	f47e af19 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   20172:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20174:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20176:	46c8      	mov	r8, r9
   20178:	e64b      	b.n	1fe12 <_svfprintf_r+0x1012>
   2017a:	3330      	adds	r3, #48	; 0x30
   2017c:	2230      	movs	r2, #48	; 0x30
   2017e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20182:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20186:	ab20      	add	r3, sp, #128	; 0x80
   20188:	e708      	b.n	1ff9c <_svfprintf_r+0x119c>
   2018a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2018c:	e5c3      	b.n	1fd16 <_svfprintf_r+0xf16>
   2018e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20192:	4413      	add	r3, r2
   20194:	930a      	str	r3, [sp, #40]	; 0x28
   20196:	e76c      	b.n	20072 <_svfprintf_r+0x1272>
   20198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2019a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2019c:	4413      	add	r3, r2
   2019e:	9a06      	ldr	r2, [sp, #24]
   201a0:	441a      	add	r2, r3
   201a2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   201a6:	920a      	str	r2, [sp, #40]	; 0x28
   201a8:	9304      	str	r3, [sp, #16]
   201aa:	e5d3      	b.n	1fd54 <_svfprintf_r+0xf54>
   201ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   201ae:	4e18      	ldr	r6, [pc, #96]	; (20210 <_svfprintf_r+0x1410>)
   201b0:	2b00      	cmp	r3, #0
   201b2:	bfb6      	itet	lt
   201b4:	272d      	movlt	r7, #45	; 0x2d
   201b6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   201ba:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   201be:	4b15      	ldr	r3, [pc, #84]	; (20214 <_svfprintf_r+0x1414>)
   201c0:	f7ff ba1b 	b.w	1f5fa <_svfprintf_r+0x7fa>
   201c4:	2200      	movs	r2, #0
   201c6:	2300      	movs	r3, #0
   201c8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   201cc:	f7fb feba 	bl	1bf44 <__aeabi_dcmpeq>
   201d0:	2800      	cmp	r0, #0
   201d2:	f47f ae7a 	bne.w	1feca <_svfprintf_r+0x10ca>
   201d6:	f1c5 0501 	rsb	r5, r5, #1
   201da:	951d      	str	r5, [sp, #116]	; 0x74
   201dc:	442c      	add	r4, r5
   201de:	e587      	b.n	1fcf0 <_svfprintf_r+0xef0>
   201e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   201e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   201e4:	f1c3 0301 	rsb	r3, r3, #1
   201e8:	441a      	add	r2, r3
   201ea:	4613      	mov	r3, r2
   201ec:	e7d2      	b.n	20194 <_svfprintf_r+0x1394>
   201ee:	f01b 0301 	ands.w	r3, fp, #1
   201f2:	930e      	str	r3, [sp, #56]	; 0x38
   201f4:	f47f aedb 	bne.w	1ffae <_svfprintf_r+0x11ae>
   201f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   201fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   201fe:	9304      	str	r3, [sp, #16]
   20200:	e5a8      	b.n	1fd54 <_svfprintf_r+0xf54>
   20202:	bf00      	nop
   20204:	66666667 	.word	0x66666667
   20208:	00024b84 	.word	0x00024b84
   2020c:	00024ba0 	.word	0x00024ba0
   20210:	00024b58 	.word	0x00024b58
   20214:	00024b54 	.word	0x00024b54
   20218:	9b06      	ldr	r3, [sp, #24]
   2021a:	b913      	cbnz	r3, 20222 <_svfprintf_r+0x1422>
   2021c:	f01b 0f01 	tst.w	fp, #1
   20220:	d002      	beq.n	20228 <_svfprintf_r+0x1428>
   20222:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20224:	3301      	adds	r3, #1
   20226:	e7ba      	b.n	2019e <_svfprintf_r+0x139e>
   20228:	2301      	movs	r3, #1
   2022a:	e74c      	b.n	200c6 <_svfprintf_r+0x12c6>
   2022c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2022e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   20232:	6828      	ldr	r0, [r5, #0]
   20234:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   20238:	9006      	str	r0, [sp, #24]
   2023a:	4628      	mov	r0, r5
   2023c:	3004      	adds	r0, #4
   2023e:	46a2      	mov	sl, r4
   20240:	900b      	str	r0, [sp, #44]	; 0x2c
   20242:	f7fe be35 	b.w	1eeb0 <_svfprintf_r+0xb0>
   20246:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2024a:	f7ff b852 	b.w	1f2f2 <_svfprintf_r+0x4f2>
   2024e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20252:	f7ff b8de 	b.w	1f412 <_svfprintf_r+0x612>
   20256:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2025a:	f7ff ba07 	b.w	1f66c <_svfprintf_r+0x86c>
   2025e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   20262:	e69b      	b.n	1ff9c <_svfprintf_r+0x119c>
   20264:	9a08      	ldr	r2, [sp, #32]
   20266:	230c      	movs	r3, #12
   20268:	6013      	str	r3, [r2, #0]
   2026a:	f04f 33ff 	mov.w	r3, #4294967295
   2026e:	9305      	str	r3, [sp, #20]
   20270:	f7fe bea1 	b.w	1efb6 <_svfprintf_r+0x1b6>
   20274:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20278:	f7ff b986 	b.w	1f588 <_svfprintf_r+0x788>
   2027c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20280:	f7ff b962 	b.w	1f548 <_svfprintf_r+0x748>
   20284:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20288:	f7ff b945 	b.w	1f516 <_svfprintf_r+0x716>
   2028c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20290:	f7ff b8fe 	b.w	1f490 <_svfprintf_r+0x690>

00020294 <write>:
   20294:	b410      	push	{r4}
   20296:	4c04      	ldr	r4, [pc, #16]	; (202a8 <write+0x14>)
   20298:	4613      	mov	r3, r2
   2029a:	460a      	mov	r2, r1
   2029c:	4601      	mov	r1, r0
   2029e:	6820      	ldr	r0, [r4, #0]
   202a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   202a4:	f000 b89a 	b.w	203dc <_write_r>
   202a8:	20000100 	.word	0x20000100

000202ac <__utoa>:
   202ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   202ae:	f8df e078 	ldr.w	lr, [pc, #120]	; 20328 <__utoa+0x7c>
   202b2:	4616      	mov	r6, r2
   202b4:	4604      	mov	r4, r0
   202b6:	460f      	mov	r7, r1
   202b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   202bc:	b08b      	sub	sp, #44	; 0x2c
   202be:	466d      	mov	r5, sp
   202c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   202c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   202c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   202c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
   202cc:	1eb3      	subs	r3, r6, #2
   202ce:	f845 0b04 	str.w	r0, [r5], #4
   202d2:	2b22      	cmp	r3, #34	; 0x22
   202d4:	7029      	strb	r1, [r5, #0]
   202d6:	d822      	bhi.n	2031e <__utoa+0x72>
   202d8:	1e7d      	subs	r5, r7, #1
   202da:	4628      	mov	r0, r5
   202dc:	2200      	movs	r2, #0
   202de:	e000      	b.n	202e2 <__utoa+0x36>
   202e0:	461a      	mov	r2, r3
   202e2:	fbb4 f1f6 	udiv	r1, r4, r6
   202e6:	ab0a      	add	r3, sp, #40	; 0x28
   202e8:	fb06 4411 	mls	r4, r6, r1, r4
   202ec:	4423      	add	r3, r4
   202ee:	460c      	mov	r4, r1
   202f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   202f4:	f800 3f01 	strb.w	r3, [r0, #1]!
   202f8:	1c53      	adds	r3, r2, #1
   202fa:	2900      	cmp	r1, #0
   202fc:	d1f0      	bne.n	202e0 <__utoa+0x34>
   202fe:	54f9      	strb	r1, [r7, r3]
   20300:	18bb      	adds	r3, r7, r2
   20302:	b14a      	cbz	r2, 20318 <__utoa+0x6c>
   20304:	7819      	ldrb	r1, [r3, #0]
   20306:	7868      	ldrb	r0, [r5, #1]
   20308:	f805 1f01 	strb.w	r1, [r5, #1]!
   2030c:	3401      	adds	r4, #1
   2030e:	1b11      	subs	r1, r2, r4
   20310:	428c      	cmp	r4, r1
   20312:	f803 0901 	strb.w	r0, [r3], #-1
   20316:	dbf5      	blt.n	20304 <__utoa+0x58>
   20318:	4638      	mov	r0, r7
   2031a:	b00b      	add	sp, #44	; 0x2c
   2031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2031e:	2000      	movs	r0, #0
   20320:	7038      	strb	r0, [r7, #0]
   20322:	b00b      	add	sp, #44	; 0x2c
   20324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20326:	bf00      	nop
   20328:	00024bb0 	.word	0x00024bb0

0002032c <__swbuf_r>:
   2032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2032e:	460d      	mov	r5, r1
   20330:	4614      	mov	r4, r2
   20332:	4606      	mov	r6, r0
   20334:	b110      	cbz	r0, 2033c <__swbuf_r+0x10>
   20336:	6b83      	ldr	r3, [r0, #56]	; 0x38
   20338:	2b00      	cmp	r3, #0
   2033a:	d04b      	beq.n	203d4 <__swbuf_r+0xa8>
   2033c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20340:	69a3      	ldr	r3, [r4, #24]
   20342:	60a3      	str	r3, [r4, #8]
   20344:	b291      	uxth	r1, r2
   20346:	0708      	lsls	r0, r1, #28
   20348:	d539      	bpl.n	203be <__swbuf_r+0x92>
   2034a:	6923      	ldr	r3, [r4, #16]
   2034c:	2b00      	cmp	r3, #0
   2034e:	d036      	beq.n	203be <__swbuf_r+0x92>
   20350:	b2ed      	uxtb	r5, r5
   20352:	0489      	lsls	r1, r1, #18
   20354:	462f      	mov	r7, r5
   20356:	d515      	bpl.n	20384 <__swbuf_r+0x58>
   20358:	6822      	ldr	r2, [r4, #0]
   2035a:	6961      	ldr	r1, [r4, #20]
   2035c:	1ad3      	subs	r3, r2, r3
   2035e:	428b      	cmp	r3, r1
   20360:	da1c      	bge.n	2039c <__swbuf_r+0x70>
   20362:	3301      	adds	r3, #1
   20364:	68a1      	ldr	r1, [r4, #8]
   20366:	1c50      	adds	r0, r2, #1
   20368:	3901      	subs	r1, #1
   2036a:	60a1      	str	r1, [r4, #8]
   2036c:	6020      	str	r0, [r4, #0]
   2036e:	7015      	strb	r5, [r2, #0]
   20370:	6962      	ldr	r2, [r4, #20]
   20372:	429a      	cmp	r2, r3
   20374:	d01a      	beq.n	203ac <__swbuf_r+0x80>
   20376:	89a3      	ldrh	r3, [r4, #12]
   20378:	07db      	lsls	r3, r3, #31
   2037a:	d501      	bpl.n	20380 <__swbuf_r+0x54>
   2037c:	2d0a      	cmp	r5, #10
   2037e:	d015      	beq.n	203ac <__swbuf_r+0x80>
   20380:	4638      	mov	r0, r7
   20382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20384:	6e61      	ldr	r1, [r4, #100]	; 0x64
   20386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2038a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2038e:	81a2      	strh	r2, [r4, #12]
   20390:	6822      	ldr	r2, [r4, #0]
   20392:	6661      	str	r1, [r4, #100]	; 0x64
   20394:	6961      	ldr	r1, [r4, #20]
   20396:	1ad3      	subs	r3, r2, r3
   20398:	428b      	cmp	r3, r1
   2039a:	dbe2      	blt.n	20362 <__swbuf_r+0x36>
   2039c:	4621      	mov	r1, r4
   2039e:	4630      	mov	r0, r6
   203a0:	f001 f900 	bl	215a4 <_fflush_r>
   203a4:	b940      	cbnz	r0, 203b8 <__swbuf_r+0x8c>
   203a6:	6822      	ldr	r2, [r4, #0]
   203a8:	2301      	movs	r3, #1
   203aa:	e7db      	b.n	20364 <__swbuf_r+0x38>
   203ac:	4621      	mov	r1, r4
   203ae:	4630      	mov	r0, r6
   203b0:	f001 f8f8 	bl	215a4 <_fflush_r>
   203b4:	2800      	cmp	r0, #0
   203b6:	d0e3      	beq.n	20380 <__swbuf_r+0x54>
   203b8:	f04f 37ff 	mov.w	r7, #4294967295
   203bc:	e7e0      	b.n	20380 <__swbuf_r+0x54>
   203be:	4621      	mov	r1, r4
   203c0:	4630      	mov	r0, r6
   203c2:	f000 f821 	bl	20408 <__swsetup_r>
   203c6:	2800      	cmp	r0, #0
   203c8:	d1f6      	bne.n	203b8 <__swbuf_r+0x8c>
   203ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   203ce:	6923      	ldr	r3, [r4, #16]
   203d0:	b291      	uxth	r1, r2
   203d2:	e7bd      	b.n	20350 <__swbuf_r+0x24>
   203d4:	f001 f93e 	bl	21654 <__sinit>
   203d8:	e7b0      	b.n	2033c <__swbuf_r+0x10>
   203da:	bf00      	nop

000203dc <_write_r>:
   203dc:	b570      	push	{r4, r5, r6, lr}
   203de:	460d      	mov	r5, r1
   203e0:	4c08      	ldr	r4, [pc, #32]	; (20404 <_write_r+0x28>)
   203e2:	4611      	mov	r1, r2
   203e4:	4606      	mov	r6, r0
   203e6:	461a      	mov	r2, r3
   203e8:	4628      	mov	r0, r5
   203ea:	2300      	movs	r3, #0
   203ec:	6023      	str	r3, [r4, #0]
   203ee:	f002 f957 	bl	226a0 <_write>
   203f2:	1c43      	adds	r3, r0, #1
   203f4:	d000      	beq.n	203f8 <_write_r+0x1c>
   203f6:	bd70      	pop	{r4, r5, r6, pc}
   203f8:	6823      	ldr	r3, [r4, #0]
   203fa:	2b00      	cmp	r3, #0
   203fc:	d0fb      	beq.n	203f6 <_write_r+0x1a>
   203fe:	6033      	str	r3, [r6, #0]
   20400:	bd70      	pop	{r4, r5, r6, pc}
   20402:	bf00      	nop
   20404:	200023b4 	.word	0x200023b4

00020408 <__swsetup_r>:
   20408:	b538      	push	{r3, r4, r5, lr}
   2040a:	4b30      	ldr	r3, [pc, #192]	; (204cc <__swsetup_r+0xc4>)
   2040c:	681b      	ldr	r3, [r3, #0]
   2040e:	4605      	mov	r5, r0
   20410:	460c      	mov	r4, r1
   20412:	b113      	cbz	r3, 2041a <__swsetup_r+0x12>
   20414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20416:	2a00      	cmp	r2, #0
   20418:	d038      	beq.n	2048c <__swsetup_r+0x84>
   2041a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2041e:	b293      	uxth	r3, r2
   20420:	0718      	lsls	r0, r3, #28
   20422:	d50c      	bpl.n	2043e <__swsetup_r+0x36>
   20424:	6920      	ldr	r0, [r4, #16]
   20426:	b1a8      	cbz	r0, 20454 <__swsetup_r+0x4c>
   20428:	f013 0201 	ands.w	r2, r3, #1
   2042c:	d01e      	beq.n	2046c <__swsetup_r+0x64>
   2042e:	6963      	ldr	r3, [r4, #20]
   20430:	2200      	movs	r2, #0
   20432:	425b      	negs	r3, r3
   20434:	61a3      	str	r3, [r4, #24]
   20436:	60a2      	str	r2, [r4, #8]
   20438:	b1f0      	cbz	r0, 20478 <__swsetup_r+0x70>
   2043a:	2000      	movs	r0, #0
   2043c:	bd38      	pop	{r3, r4, r5, pc}
   2043e:	06d9      	lsls	r1, r3, #27
   20440:	d53c      	bpl.n	204bc <__swsetup_r+0xb4>
   20442:	0758      	lsls	r0, r3, #29
   20444:	d426      	bmi.n	20494 <__swsetup_r+0x8c>
   20446:	6920      	ldr	r0, [r4, #16]
   20448:	f042 0308 	orr.w	r3, r2, #8
   2044c:	81a3      	strh	r3, [r4, #12]
   2044e:	b29b      	uxth	r3, r3
   20450:	2800      	cmp	r0, #0
   20452:	d1e9      	bne.n	20428 <__swsetup_r+0x20>
   20454:	f403 7220 	and.w	r2, r3, #640	; 0x280
   20458:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2045c:	d0e4      	beq.n	20428 <__swsetup_r+0x20>
   2045e:	4628      	mov	r0, r5
   20460:	4621      	mov	r1, r4
   20462:	f001 fae5 	bl	21a30 <__smakebuf_r>
   20466:	89a3      	ldrh	r3, [r4, #12]
   20468:	6920      	ldr	r0, [r4, #16]
   2046a:	e7dd      	b.n	20428 <__swsetup_r+0x20>
   2046c:	0799      	lsls	r1, r3, #30
   2046e:	bf58      	it	pl
   20470:	6962      	ldrpl	r2, [r4, #20]
   20472:	60a2      	str	r2, [r4, #8]
   20474:	2800      	cmp	r0, #0
   20476:	d1e0      	bne.n	2043a <__swsetup_r+0x32>
   20478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2047c:	061a      	lsls	r2, r3, #24
   2047e:	d5dd      	bpl.n	2043c <__swsetup_r+0x34>
   20480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20484:	81a3      	strh	r3, [r4, #12]
   20486:	f04f 30ff 	mov.w	r0, #4294967295
   2048a:	bd38      	pop	{r3, r4, r5, pc}
   2048c:	4618      	mov	r0, r3
   2048e:	f001 f8e1 	bl	21654 <__sinit>
   20492:	e7c2      	b.n	2041a <__swsetup_r+0x12>
   20494:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20496:	b151      	cbz	r1, 204ae <__swsetup_r+0xa6>
   20498:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2049c:	4299      	cmp	r1, r3
   2049e:	d004      	beq.n	204aa <__swsetup_r+0xa2>
   204a0:	4628      	mov	r0, r5
   204a2:	f001 f979 	bl	21798 <_free_r>
   204a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   204aa:	2300      	movs	r3, #0
   204ac:	6323      	str	r3, [r4, #48]	; 0x30
   204ae:	2300      	movs	r3, #0
   204b0:	6920      	ldr	r0, [r4, #16]
   204b2:	6063      	str	r3, [r4, #4]
   204b4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   204b8:	6020      	str	r0, [r4, #0]
   204ba:	e7c5      	b.n	20448 <__swsetup_r+0x40>
   204bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   204c0:	2309      	movs	r3, #9
   204c2:	602b      	str	r3, [r5, #0]
   204c4:	f04f 30ff 	mov.w	r0, #4294967295
   204c8:	81a2      	strh	r2, [r4, #12]
   204ca:	bd38      	pop	{r3, r4, r5, pc}
   204cc:	20000100 	.word	0x20000100

000204d0 <register_fini>:
   204d0:	4b02      	ldr	r3, [pc, #8]	; (204dc <register_fini+0xc>)
   204d2:	b113      	cbz	r3, 204da <register_fini+0xa>
   204d4:	4802      	ldr	r0, [pc, #8]	; (204e0 <register_fini+0x10>)
   204d6:	f000 b805 	b.w	204e4 <atexit>
   204da:	4770      	bx	lr
   204dc:	00000000 	.word	0x00000000
   204e0:	000216c5 	.word	0x000216c5

000204e4 <atexit>:
   204e4:	2300      	movs	r3, #0
   204e6:	4601      	mov	r1, r0
   204e8:	461a      	mov	r2, r3
   204ea:	4618      	mov	r0, r3
   204ec:	f001 bea8 	b.w	22240 <__register_exitproc>

000204f0 <quorem>:
   204f0:	6902      	ldr	r2, [r0, #16]
   204f2:	690b      	ldr	r3, [r1, #16]
   204f4:	4293      	cmp	r3, r2
   204f6:	f300 808d 	bgt.w	20614 <quorem+0x124>
   204fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204fe:	f103 38ff 	add.w	r8, r3, #4294967295
   20502:	f101 0714 	add.w	r7, r1, #20
   20506:	f100 0b14 	add.w	fp, r0, #20
   2050a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2050e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   20512:	ea4f 0488 	mov.w	r4, r8, lsl #2
   20516:	b083      	sub	sp, #12
   20518:	3201      	adds	r2, #1
   2051a:	fbb3 f9f2 	udiv	r9, r3, r2
   2051e:	eb0b 0304 	add.w	r3, fp, r4
   20522:	9400      	str	r4, [sp, #0]
   20524:	eb07 0a04 	add.w	sl, r7, r4
   20528:	9301      	str	r3, [sp, #4]
   2052a:	f1b9 0f00 	cmp.w	r9, #0
   2052e:	d039      	beq.n	205a4 <quorem+0xb4>
   20530:	2500      	movs	r5, #0
   20532:	462e      	mov	r6, r5
   20534:	46bc      	mov	ip, r7
   20536:	46de      	mov	lr, fp
   20538:	f85c 4b04 	ldr.w	r4, [ip], #4
   2053c:	f8de 3000 	ldr.w	r3, [lr]
   20540:	b2a2      	uxth	r2, r4
   20542:	fb09 5502 	mla	r5, r9, r2, r5
   20546:	0c22      	lsrs	r2, r4, #16
   20548:	0c2c      	lsrs	r4, r5, #16
   2054a:	fb09 4202 	mla	r2, r9, r2, r4
   2054e:	b2ad      	uxth	r5, r5
   20550:	1b75      	subs	r5, r6, r5
   20552:	b296      	uxth	r6, r2
   20554:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   20558:	fa15 f383 	uxtah	r3, r5, r3
   2055c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   20560:	b29b      	uxth	r3, r3
   20562:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20566:	45e2      	cmp	sl, ip
   20568:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2056c:	f84e 3b04 	str.w	r3, [lr], #4
   20570:	ea4f 4626 	mov.w	r6, r6, asr #16
   20574:	d2e0      	bcs.n	20538 <quorem+0x48>
   20576:	9b00      	ldr	r3, [sp, #0]
   20578:	f85b 3003 	ldr.w	r3, [fp, r3]
   2057c:	b993      	cbnz	r3, 205a4 <quorem+0xb4>
   2057e:	9c01      	ldr	r4, [sp, #4]
   20580:	1f23      	subs	r3, r4, #4
   20582:	459b      	cmp	fp, r3
   20584:	d20c      	bcs.n	205a0 <quorem+0xb0>
   20586:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2058a:	b94b      	cbnz	r3, 205a0 <quorem+0xb0>
   2058c:	f1a4 0308 	sub.w	r3, r4, #8
   20590:	e002      	b.n	20598 <quorem+0xa8>
   20592:	681a      	ldr	r2, [r3, #0]
   20594:	3b04      	subs	r3, #4
   20596:	b91a      	cbnz	r2, 205a0 <quorem+0xb0>
   20598:	459b      	cmp	fp, r3
   2059a:	f108 38ff 	add.w	r8, r8, #4294967295
   2059e:	d3f8      	bcc.n	20592 <quorem+0xa2>
   205a0:	f8c0 8010 	str.w	r8, [r0, #16]
   205a4:	4604      	mov	r4, r0
   205a6:	f001 fc8b 	bl	21ec0 <__mcmp>
   205aa:	2800      	cmp	r0, #0
   205ac:	db2e      	blt.n	2060c <quorem+0x11c>
   205ae:	f109 0901 	add.w	r9, r9, #1
   205b2:	465d      	mov	r5, fp
   205b4:	2300      	movs	r3, #0
   205b6:	f857 1b04 	ldr.w	r1, [r7], #4
   205ba:	6828      	ldr	r0, [r5, #0]
   205bc:	b28a      	uxth	r2, r1
   205be:	1a9a      	subs	r2, r3, r2
   205c0:	0c0b      	lsrs	r3, r1, #16
   205c2:	fa12 f280 	uxtah	r2, r2, r0
   205c6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   205ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
   205ce:	b292      	uxth	r2, r2
   205d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   205d4:	45ba      	cmp	sl, r7
   205d6:	f845 2b04 	str.w	r2, [r5], #4
   205da:	ea4f 4323 	mov.w	r3, r3, asr #16
   205de:	d2ea      	bcs.n	205b6 <quorem+0xc6>
   205e0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   205e4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   205e8:	b982      	cbnz	r2, 2060c <quorem+0x11c>
   205ea:	1f1a      	subs	r2, r3, #4
   205ec:	4593      	cmp	fp, r2
   205ee:	d20b      	bcs.n	20608 <quorem+0x118>
   205f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   205f4:	b942      	cbnz	r2, 20608 <quorem+0x118>
   205f6:	3b08      	subs	r3, #8
   205f8:	e002      	b.n	20600 <quorem+0x110>
   205fa:	681a      	ldr	r2, [r3, #0]
   205fc:	3b04      	subs	r3, #4
   205fe:	b91a      	cbnz	r2, 20608 <quorem+0x118>
   20600:	459b      	cmp	fp, r3
   20602:	f108 38ff 	add.w	r8, r8, #4294967295
   20606:	d3f8      	bcc.n	205fa <quorem+0x10a>
   20608:	f8c4 8010 	str.w	r8, [r4, #16]
   2060c:	4648      	mov	r0, r9
   2060e:	b003      	add	sp, #12
   20610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20614:	2000      	movs	r0, #0
   20616:	4770      	bx	lr

00020618 <_dtoa_r>:
   20618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2061c:	ec57 6b10 	vmov	r6, r7, d0
   20620:	b097      	sub	sp, #92	; 0x5c
   20622:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20624:	9102      	str	r1, [sp, #8]
   20626:	4604      	mov	r4, r0
   20628:	4693      	mov	fp, r2
   2062a:	9303      	str	r3, [sp, #12]
   2062c:	e9cd 6700 	strd	r6, r7, [sp]
   20630:	b14d      	cbz	r5, 20646 <_dtoa_r+0x2e>
   20632:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20634:	606a      	str	r2, [r5, #4]
   20636:	2301      	movs	r3, #1
   20638:	4093      	lsls	r3, r2
   2063a:	60ab      	str	r3, [r5, #8]
   2063c:	4629      	mov	r1, r5
   2063e:	f001 fa67 	bl	21b10 <_Bfree>
   20642:	2300      	movs	r3, #0
   20644:	6423      	str	r3, [r4, #64]	; 0x40
   20646:	e9dd 2300 	ldrd	r2, r3, [sp]
   2064a:	2b00      	cmp	r3, #0
   2064c:	4699      	mov	r9, r3
   2064e:	db38      	blt.n	206c2 <_dtoa_r+0xaa>
   20650:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20652:	2300      	movs	r3, #0
   20654:	6013      	str	r3, [r2, #0]
   20656:	4ba0      	ldr	r3, [pc, #640]	; (208d8 <_dtoa_r+0x2c0>)
   20658:	ea33 0309 	bics.w	r3, r3, r9
   2065c:	d017      	beq.n	2068e <_dtoa_r+0x76>
   2065e:	e9dd 6700 	ldrd	r6, r7, [sp]
   20662:	2200      	movs	r2, #0
   20664:	2300      	movs	r3, #0
   20666:	4630      	mov	r0, r6
   20668:	4639      	mov	r1, r7
   2066a:	f7fb fc6b 	bl	1bf44 <__aeabi_dcmpeq>
   2066e:	4680      	mov	r8, r0
   20670:	2800      	cmp	r0, #0
   20672:	d02f      	beq.n	206d4 <_dtoa_r+0xbc>
   20674:	9a03      	ldr	r2, [sp, #12]
   20676:	2301      	movs	r3, #1
   20678:	6013      	str	r3, [r2, #0]
   2067a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2067c:	2b00      	cmp	r3, #0
   2067e:	f000 80c4 	beq.w	2080a <_dtoa_r+0x1f2>
   20682:	4896      	ldr	r0, [pc, #600]	; (208dc <_dtoa_r+0x2c4>)
   20684:	6018      	str	r0, [r3, #0]
   20686:	3801      	subs	r0, #1
   20688:	b017      	add	sp, #92	; 0x5c
   2068a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2068e:	9a03      	ldr	r2, [sp, #12]
   20690:	f242 730f 	movw	r3, #9999	; 0x270f
   20694:	6013      	str	r3, [r2, #0]
   20696:	9b00      	ldr	r3, [sp, #0]
   20698:	b96b      	cbnz	r3, 206b6 <_dtoa_r+0x9e>
   2069a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2069e:	b953      	cbnz	r3, 206b6 <_dtoa_r+0x9e>
   206a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   206a2:	488f      	ldr	r0, [pc, #572]	; (208e0 <_dtoa_r+0x2c8>)
   206a4:	2b00      	cmp	r3, #0
   206a6:	d0ef      	beq.n	20688 <_dtoa_r+0x70>
   206a8:	f100 0308 	add.w	r3, r0, #8
   206ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
   206ae:	6013      	str	r3, [r2, #0]
   206b0:	b017      	add	sp, #92	; 0x5c
   206b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   206b8:	488a      	ldr	r0, [pc, #552]	; (208e4 <_dtoa_r+0x2cc>)
   206ba:	2b00      	cmp	r3, #0
   206bc:	d0e4      	beq.n	20688 <_dtoa_r+0x70>
   206be:	1cc3      	adds	r3, r0, #3
   206c0:	e7f4      	b.n	206ac <_dtoa_r+0x94>
   206c2:	9a01      	ldr	r2, [sp, #4]
   206c4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   206c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   206ca:	f8cd 9004 	str.w	r9, [sp, #4]
   206ce:	2301      	movs	r3, #1
   206d0:	6013      	str	r3, [r2, #0]
   206d2:	e7c0      	b.n	20656 <_dtoa_r+0x3e>
   206d4:	aa14      	add	r2, sp, #80	; 0x50
   206d6:	a915      	add	r1, sp, #84	; 0x54
   206d8:	ec47 6b10 	vmov	d0, r6, r7
   206dc:	4620      	mov	r0, r4
   206de:	f001 fc8f 	bl	22000 <__d2b>
   206e2:	ea5f 5519 	movs.w	r5, r9, lsr #20
   206e6:	4682      	mov	sl, r0
   206e8:	d073      	beq.n	207d2 <_dtoa_r+0x1ba>
   206ea:	f3c7 0313 	ubfx	r3, r7, #0, #20
   206ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   206f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   206f6:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   206fa:	4630      	mov	r0, r6
   206fc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   20700:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   20704:	2200      	movs	r2, #0
   20706:	4b78      	ldr	r3, [pc, #480]	; (208e8 <_dtoa_r+0x2d0>)
   20708:	f7fb f800 	bl	1b70c <__aeabi_dsub>
   2070c:	a36c      	add	r3, pc, #432	; (adr r3, 208c0 <_dtoa_r+0x2a8>)
   2070e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20712:	f7fb f9af 	bl	1ba74 <__aeabi_dmul>
   20716:	a36c      	add	r3, pc, #432	; (adr r3, 208c8 <_dtoa_r+0x2b0>)
   20718:	e9d3 2300 	ldrd	r2, r3, [r3]
   2071c:	f7fa fff8 	bl	1b710 <__adddf3>
   20720:	4606      	mov	r6, r0
   20722:	4628      	mov	r0, r5
   20724:	460f      	mov	r7, r1
   20726:	f7fb f93f 	bl	1b9a8 <__aeabi_i2d>
   2072a:	a369      	add	r3, pc, #420	; (adr r3, 208d0 <_dtoa_r+0x2b8>)
   2072c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20730:	f7fb f9a0 	bl	1ba74 <__aeabi_dmul>
   20734:	4602      	mov	r2, r0
   20736:	460b      	mov	r3, r1
   20738:	4630      	mov	r0, r6
   2073a:	4639      	mov	r1, r7
   2073c:	f7fa ffe8 	bl	1b710 <__adddf3>
   20740:	4606      	mov	r6, r0
   20742:	460f      	mov	r7, r1
   20744:	f7fb fc30 	bl	1bfa8 <__aeabi_d2iz>
   20748:	2200      	movs	r2, #0
   2074a:	9004      	str	r0, [sp, #16]
   2074c:	2300      	movs	r3, #0
   2074e:	4630      	mov	r0, r6
   20750:	4639      	mov	r1, r7
   20752:	f7fb fc01 	bl	1bf58 <__aeabi_dcmplt>
   20756:	2800      	cmp	r0, #0
   20758:	f040 816f 	bne.w	20a3a <_dtoa_r+0x422>
   2075c:	9e04      	ldr	r6, [sp, #16]
   2075e:	2e16      	cmp	r6, #22
   20760:	f200 8159 	bhi.w	20a16 <_dtoa_r+0x3fe>
   20764:	4b61      	ldr	r3, [pc, #388]	; (208ec <_dtoa_r+0x2d4>)
   20766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2076a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2076e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20772:	f7fb fc0f 	bl	1bf94 <__aeabi_dcmpgt>
   20776:	2800      	cmp	r0, #0
   20778:	f000 81c4 	beq.w	20b04 <_dtoa_r+0x4ec>
   2077c:	1e73      	subs	r3, r6, #1
   2077e:	9304      	str	r3, [sp, #16]
   20780:	2300      	movs	r3, #0
   20782:	930c      	str	r3, [sp, #48]	; 0x30
   20784:	eba8 0505 	sub.w	r5, r8, r5
   20788:	1e6b      	subs	r3, r5, #1
   2078a:	9305      	str	r3, [sp, #20]
   2078c:	f100 814f 	bmi.w	20a2e <_dtoa_r+0x416>
   20790:	2300      	movs	r3, #0
   20792:	9306      	str	r3, [sp, #24]
   20794:	9b04      	ldr	r3, [sp, #16]
   20796:	2b00      	cmp	r3, #0
   20798:	f2c0 8140 	blt.w	20a1c <_dtoa_r+0x404>
   2079c:	9a05      	ldr	r2, [sp, #20]
   2079e:	930b      	str	r3, [sp, #44]	; 0x2c
   207a0:	4611      	mov	r1, r2
   207a2:	4419      	add	r1, r3
   207a4:	2300      	movs	r3, #0
   207a6:	9105      	str	r1, [sp, #20]
   207a8:	930a      	str	r3, [sp, #40]	; 0x28
   207aa:	9b02      	ldr	r3, [sp, #8]
   207ac:	2b09      	cmp	r3, #9
   207ae:	d82e      	bhi.n	2080e <_dtoa_r+0x1f6>
   207b0:	2b05      	cmp	r3, #5
   207b2:	f340 8651 	ble.w	21458 <_dtoa_r+0xe40>
   207b6:	3b04      	subs	r3, #4
   207b8:	9302      	str	r3, [sp, #8]
   207ba:	2700      	movs	r7, #0
   207bc:	9b02      	ldr	r3, [sp, #8]
   207be:	3b02      	subs	r3, #2
   207c0:	2b03      	cmp	r3, #3
   207c2:	f200 8633 	bhi.w	2142c <_dtoa_r+0xe14>
   207c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   207ca:	03d6      	.short	0x03d6
   207cc:	03e302cb 	.word	0x03e302cb
   207d0:	0464      	.short	0x0464
   207d2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   207d6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   207d8:	4445      	add	r5, r8
   207da:	f205 4332 	addw	r3, r5, #1074	; 0x432
   207de:	2b20      	cmp	r3, #32
   207e0:	f340 818a 	ble.w	20af8 <_dtoa_r+0x4e0>
   207e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   207e8:	fa09 f903 	lsl.w	r9, r9, r3
   207ec:	9b00      	ldr	r3, [sp, #0]
   207ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
   207f2:	fa23 f000 	lsr.w	r0, r3, r0
   207f6:	ea40 0009 	orr.w	r0, r0, r9
   207fa:	f7fb f8c5 	bl	1b988 <__aeabi_ui2d>
   207fe:	2301      	movs	r3, #1
   20800:	3d01      	subs	r5, #1
   20802:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   20806:	9310      	str	r3, [sp, #64]	; 0x40
   20808:	e77c      	b.n	20704 <_dtoa_r+0xec>
   2080a:	4839      	ldr	r0, [pc, #228]	; (208f0 <_dtoa_r+0x2d8>)
   2080c:	e73c      	b.n	20688 <_dtoa_r+0x70>
   2080e:	2100      	movs	r1, #0
   20810:	6461      	str	r1, [r4, #68]	; 0x44
   20812:	4620      	mov	r0, r4
   20814:	468b      	mov	fp, r1
   20816:	f001 f955 	bl	21ac4 <_Balloc>
   2081a:	f04f 33ff 	mov.w	r3, #4294967295
   2081e:	9308      	str	r3, [sp, #32]
   20820:	930d      	str	r3, [sp, #52]	; 0x34
   20822:	2301      	movs	r3, #1
   20824:	9007      	str	r0, [sp, #28]
   20826:	6420      	str	r0, [r4, #64]	; 0x40
   20828:	f8cd b008 	str.w	fp, [sp, #8]
   2082c:	9309      	str	r3, [sp, #36]	; 0x24
   2082e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20830:	2b00      	cmp	r3, #0
   20832:	f2c0 80d0 	blt.w	209d6 <_dtoa_r+0x3be>
   20836:	9a04      	ldr	r2, [sp, #16]
   20838:	2a0e      	cmp	r2, #14
   2083a:	f300 80cc 	bgt.w	209d6 <_dtoa_r+0x3be>
   2083e:	4b2b      	ldr	r3, [pc, #172]	; (208ec <_dtoa_r+0x2d4>)
   20840:	f1bb 0f00 	cmp.w	fp, #0
   20844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20848:	e9d3 8900 	ldrd	r8, r9, [r3]
   2084c:	f2c0 83be 	blt.w	20fcc <_dtoa_r+0x9b4>
   20850:	e9dd 6700 	ldrd	r6, r7, [sp]
   20854:	4642      	mov	r2, r8
   20856:	464b      	mov	r3, r9
   20858:	4630      	mov	r0, r6
   2085a:	4639      	mov	r1, r7
   2085c:	f7fb fa34 	bl	1bcc8 <__aeabi_ddiv>
   20860:	f7fb fba2 	bl	1bfa8 <__aeabi_d2iz>
   20864:	4683      	mov	fp, r0
   20866:	f7fb f89f 	bl	1b9a8 <__aeabi_i2d>
   2086a:	4642      	mov	r2, r8
   2086c:	464b      	mov	r3, r9
   2086e:	f7fb f901 	bl	1ba74 <__aeabi_dmul>
   20872:	460b      	mov	r3, r1
   20874:	4602      	mov	r2, r0
   20876:	4639      	mov	r1, r7
   20878:	4630      	mov	r0, r6
   2087a:	f7fa ff47 	bl	1b70c <__aeabi_dsub>
   2087e:	9d07      	ldr	r5, [sp, #28]
   20880:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20884:	702b      	strb	r3, [r5, #0]
   20886:	9b08      	ldr	r3, [sp, #32]
   20888:	2b01      	cmp	r3, #1
   2088a:	4606      	mov	r6, r0
   2088c:	460f      	mov	r7, r1
   2088e:	f105 0501 	add.w	r5, r5, #1
   20892:	d061      	beq.n	20958 <_dtoa_r+0x340>
   20894:	2200      	movs	r2, #0
   20896:	4b17      	ldr	r3, [pc, #92]	; (208f4 <_dtoa_r+0x2dc>)
   20898:	f7fb f8ec 	bl	1ba74 <__aeabi_dmul>
   2089c:	2200      	movs	r2, #0
   2089e:	2300      	movs	r3, #0
   208a0:	4606      	mov	r6, r0
   208a2:	460f      	mov	r7, r1
   208a4:	f7fb fb4e 	bl	1bf44 <__aeabi_dcmpeq>
   208a8:	2800      	cmp	r0, #0
   208aa:	f040 8081 	bne.w	209b0 <_dtoa_r+0x398>
   208ae:	f8cd a000 	str.w	sl, [sp]
   208b2:	9402      	str	r4, [sp, #8]
   208b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
   208b8:	9c08      	ldr	r4, [sp, #32]
   208ba:	e028      	b.n	2090e <_dtoa_r+0x2f6>
   208bc:	f3af 8000 	nop.w
   208c0:	636f4361 	.word	0x636f4361
   208c4:	3fd287a7 	.word	0x3fd287a7
   208c8:	8b60c8b3 	.word	0x8b60c8b3
   208cc:	3fc68a28 	.word	0x3fc68a28
   208d0:	509f79fb 	.word	0x509f79fb
   208d4:	3fd34413 	.word	0x3fd34413
   208d8:	7ff00000 	.word	0x7ff00000
   208dc:	00024b8d 	.word	0x00024b8d
   208e0:	00024bd8 	.word	0x00024bd8
   208e4:	00024be4 	.word	0x00024be4
   208e8:	3ff80000 	.word	0x3ff80000
   208ec:	00024c10 	.word	0x00024c10
   208f0:	00024b8c 	.word	0x00024b8c
   208f4:	40240000 	.word	0x40240000
   208f8:	f7fb f8bc 	bl	1ba74 <__aeabi_dmul>
   208fc:	2200      	movs	r2, #0
   208fe:	2300      	movs	r3, #0
   20900:	4606      	mov	r6, r0
   20902:	460f      	mov	r7, r1
   20904:	f7fb fb1e 	bl	1bf44 <__aeabi_dcmpeq>
   20908:	2800      	cmp	r0, #0
   2090a:	f040 83c5 	bne.w	21098 <_dtoa_r+0xa80>
   2090e:	4642      	mov	r2, r8
   20910:	464b      	mov	r3, r9
   20912:	4630      	mov	r0, r6
   20914:	4639      	mov	r1, r7
   20916:	f7fb f9d7 	bl	1bcc8 <__aeabi_ddiv>
   2091a:	f7fb fb45 	bl	1bfa8 <__aeabi_d2iz>
   2091e:	4683      	mov	fp, r0
   20920:	f7fb f842 	bl	1b9a8 <__aeabi_i2d>
   20924:	4642      	mov	r2, r8
   20926:	464b      	mov	r3, r9
   20928:	f7fb f8a4 	bl	1ba74 <__aeabi_dmul>
   2092c:	4602      	mov	r2, r0
   2092e:	460b      	mov	r3, r1
   20930:	4630      	mov	r0, r6
   20932:	4639      	mov	r1, r7
   20934:	f7fa feea 	bl	1b70c <__aeabi_dsub>
   20938:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   2093c:	f805 eb01 	strb.w	lr, [r5], #1
   20940:	eba5 0e0a 	sub.w	lr, r5, sl
   20944:	45a6      	cmp	lr, r4
   20946:	4606      	mov	r6, r0
   20948:	460f      	mov	r7, r1
   2094a:	f04f 0200 	mov.w	r2, #0
   2094e:	4b6e      	ldr	r3, [pc, #440]	; (20b08 <_dtoa_r+0x4f0>)
   20950:	d1d2      	bne.n	208f8 <_dtoa_r+0x2e0>
   20952:	f8dd a000 	ldr.w	sl, [sp]
   20956:	9c02      	ldr	r4, [sp, #8]
   20958:	4632      	mov	r2, r6
   2095a:	463b      	mov	r3, r7
   2095c:	4630      	mov	r0, r6
   2095e:	4639      	mov	r1, r7
   20960:	f7fa fed6 	bl	1b710 <__adddf3>
   20964:	4606      	mov	r6, r0
   20966:	460f      	mov	r7, r1
   20968:	4602      	mov	r2, r0
   2096a:	460b      	mov	r3, r1
   2096c:	4640      	mov	r0, r8
   2096e:	4649      	mov	r1, r9
   20970:	f7fb faf2 	bl	1bf58 <__aeabi_dcmplt>
   20974:	b948      	cbnz	r0, 2098a <_dtoa_r+0x372>
   20976:	4632      	mov	r2, r6
   20978:	463b      	mov	r3, r7
   2097a:	4640      	mov	r0, r8
   2097c:	4649      	mov	r1, r9
   2097e:	f7fb fae1 	bl	1bf44 <__aeabi_dcmpeq>
   20982:	b1a8      	cbz	r0, 209b0 <_dtoa_r+0x398>
   20984:	f01b 0f01 	tst.w	fp, #1
   20988:	d012      	beq.n	209b0 <_dtoa_r+0x398>
   2098a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2098e:	9a07      	ldr	r2, [sp, #28]
   20990:	1e6b      	subs	r3, r5, #1
   20992:	e004      	b.n	2099e <_dtoa_r+0x386>
   20994:	429a      	cmp	r2, r3
   20996:	f000 842d 	beq.w	211f4 <_dtoa_r+0xbdc>
   2099a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2099e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   209a2:	f103 0501 	add.w	r5, r3, #1
   209a6:	d0f5      	beq.n	20994 <_dtoa_r+0x37c>
   209a8:	f108 0801 	add.w	r8, r8, #1
   209ac:	f883 8000 	strb.w	r8, [r3]
   209b0:	4651      	mov	r1, sl
   209b2:	4620      	mov	r0, r4
   209b4:	f001 f8ac 	bl	21b10 <_Bfree>
   209b8:	2200      	movs	r2, #0
   209ba:	9b04      	ldr	r3, [sp, #16]
   209bc:	702a      	strb	r2, [r5, #0]
   209be:	9a03      	ldr	r2, [sp, #12]
   209c0:	3301      	adds	r3, #1
   209c2:	6013      	str	r3, [r2, #0]
   209c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   209c6:	2b00      	cmp	r3, #0
   209c8:	f000 83a3 	beq.w	21112 <_dtoa_r+0xafa>
   209cc:	9807      	ldr	r0, [sp, #28]
   209ce:	601d      	str	r5, [r3, #0]
   209d0:	b017      	add	sp, #92	; 0x5c
   209d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   209d8:	2a00      	cmp	r2, #0
   209da:	d040      	beq.n	20a5e <_dtoa_r+0x446>
   209dc:	9a02      	ldr	r2, [sp, #8]
   209de:	2a01      	cmp	r2, #1
   209e0:	f340 831c 	ble.w	2101c <_dtoa_r+0xa04>
   209e4:	9b08      	ldr	r3, [sp, #32]
   209e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   209e8:	1e5f      	subs	r7, r3, #1
   209ea:	42ba      	cmp	r2, r7
   209ec:	f2c0 8394 	blt.w	21118 <_dtoa_r+0xb00>
   209f0:	1bd7      	subs	r7, r2, r7
   209f2:	9b08      	ldr	r3, [sp, #32]
   209f4:	2b00      	cmp	r3, #0
   209f6:	f2c0 847e 	blt.w	212f6 <_dtoa_r+0xcde>
   209fa:	9d06      	ldr	r5, [sp, #24]
   209fc:	9b08      	ldr	r3, [sp, #32]
   209fe:	9a06      	ldr	r2, [sp, #24]
   20a00:	441a      	add	r2, r3
   20a02:	9206      	str	r2, [sp, #24]
   20a04:	9a05      	ldr	r2, [sp, #20]
   20a06:	2101      	movs	r1, #1
   20a08:	441a      	add	r2, r3
   20a0a:	4620      	mov	r0, r4
   20a0c:	9205      	str	r2, [sp, #20]
   20a0e:	f001 f919 	bl	21c44 <__i2b>
   20a12:	4606      	mov	r6, r0
   20a14:	e026      	b.n	20a64 <_dtoa_r+0x44c>
   20a16:	2301      	movs	r3, #1
   20a18:	930c      	str	r3, [sp, #48]	; 0x30
   20a1a:	e6b3      	b.n	20784 <_dtoa_r+0x16c>
   20a1c:	9a06      	ldr	r2, [sp, #24]
   20a1e:	9b04      	ldr	r3, [sp, #16]
   20a20:	1ad2      	subs	r2, r2, r3
   20a22:	425b      	negs	r3, r3
   20a24:	930a      	str	r3, [sp, #40]	; 0x28
   20a26:	2300      	movs	r3, #0
   20a28:	9206      	str	r2, [sp, #24]
   20a2a:	930b      	str	r3, [sp, #44]	; 0x2c
   20a2c:	e6bd      	b.n	207aa <_dtoa_r+0x192>
   20a2e:	f1c5 0301 	rsb	r3, r5, #1
   20a32:	9306      	str	r3, [sp, #24]
   20a34:	2300      	movs	r3, #0
   20a36:	9305      	str	r3, [sp, #20]
   20a38:	e6ac      	b.n	20794 <_dtoa_r+0x17c>
   20a3a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20a3e:	4648      	mov	r0, r9
   20a40:	f7fa ffb2 	bl	1b9a8 <__aeabi_i2d>
   20a44:	4602      	mov	r2, r0
   20a46:	460b      	mov	r3, r1
   20a48:	4630      	mov	r0, r6
   20a4a:	4639      	mov	r1, r7
   20a4c:	f7fb fa7a 	bl	1bf44 <__aeabi_dcmpeq>
   20a50:	2800      	cmp	r0, #0
   20a52:	f47f ae83 	bne.w	2075c <_dtoa_r+0x144>
   20a56:	f109 33ff 	add.w	r3, r9, #4294967295
   20a5a:	9304      	str	r3, [sp, #16]
   20a5c:	e67e      	b.n	2075c <_dtoa_r+0x144>
   20a5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20a60:	9d06      	ldr	r5, [sp, #24]
   20a62:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20a64:	2d00      	cmp	r5, #0
   20a66:	dd0c      	ble.n	20a82 <_dtoa_r+0x46a>
   20a68:	9905      	ldr	r1, [sp, #20]
   20a6a:	2900      	cmp	r1, #0
   20a6c:	460b      	mov	r3, r1
   20a6e:	dd08      	ble.n	20a82 <_dtoa_r+0x46a>
   20a70:	42a9      	cmp	r1, r5
   20a72:	9a06      	ldr	r2, [sp, #24]
   20a74:	bfa8      	it	ge
   20a76:	462b      	movge	r3, r5
   20a78:	1ad2      	subs	r2, r2, r3
   20a7a:	1aed      	subs	r5, r5, r3
   20a7c:	1acb      	subs	r3, r1, r3
   20a7e:	9206      	str	r2, [sp, #24]
   20a80:	9305      	str	r3, [sp, #20]
   20a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20a84:	b1d3      	cbz	r3, 20abc <_dtoa_r+0x4a4>
   20a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20a88:	2b00      	cmp	r3, #0
   20a8a:	f000 82c0 	beq.w	2100e <_dtoa_r+0x9f6>
   20a8e:	2f00      	cmp	r7, #0
   20a90:	dd10      	ble.n	20ab4 <_dtoa_r+0x49c>
   20a92:	4631      	mov	r1, r6
   20a94:	463a      	mov	r2, r7
   20a96:	4620      	mov	r0, r4
   20a98:	f001 f970 	bl	21d7c <__pow5mult>
   20a9c:	4652      	mov	r2, sl
   20a9e:	4601      	mov	r1, r0
   20aa0:	4606      	mov	r6, r0
   20aa2:	4620      	mov	r0, r4
   20aa4:	f001 f8d8 	bl	21c58 <__multiply>
   20aa8:	4651      	mov	r1, sl
   20aaa:	4680      	mov	r8, r0
   20aac:	4620      	mov	r0, r4
   20aae:	f001 f82f 	bl	21b10 <_Bfree>
   20ab2:	46c2      	mov	sl, r8
   20ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ab6:	1bda      	subs	r2, r3, r7
   20ab8:	f040 82aa 	bne.w	21010 <_dtoa_r+0x9f8>
   20abc:	2101      	movs	r1, #1
   20abe:	4620      	mov	r0, r4
   20ac0:	f001 f8c0 	bl	21c44 <__i2b>
   20ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20ac6:	2b00      	cmp	r3, #0
   20ac8:	4681      	mov	r9, r0
   20aca:	dd1f      	ble.n	20b0c <_dtoa_r+0x4f4>
   20acc:	4601      	mov	r1, r0
   20ace:	461a      	mov	r2, r3
   20ad0:	4620      	mov	r0, r4
   20ad2:	f001 f953 	bl	21d7c <__pow5mult>
   20ad6:	9b02      	ldr	r3, [sp, #8]
   20ad8:	2b01      	cmp	r3, #1
   20ada:	4681      	mov	r9, r0
   20adc:	f340 825b 	ble.w	20f96 <_dtoa_r+0x97e>
   20ae0:	f04f 0800 	mov.w	r8, #0
   20ae4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20ae8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   20aec:	6918      	ldr	r0, [r3, #16]
   20aee:	f001 f859 	bl	21ba4 <__hi0bits>
   20af2:	f1c0 0020 	rsb	r0, r0, #32
   20af6:	e013      	b.n	20b20 <_dtoa_r+0x508>
   20af8:	f1c3 0920 	rsb	r9, r3, #32
   20afc:	9b00      	ldr	r3, [sp, #0]
   20afe:	fa03 f009 	lsl.w	r0, r3, r9
   20b02:	e67a      	b.n	207fa <_dtoa_r+0x1e2>
   20b04:	900c      	str	r0, [sp, #48]	; 0x30
   20b06:	e63d      	b.n	20784 <_dtoa_r+0x16c>
   20b08:	40240000 	.word	0x40240000
   20b0c:	9b02      	ldr	r3, [sp, #8]
   20b0e:	2b01      	cmp	r3, #1
   20b10:	f340 828d 	ble.w	2102e <_dtoa_r+0xa16>
   20b14:	f04f 0800 	mov.w	r8, #0
   20b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20b1a:	2001      	movs	r0, #1
   20b1c:	2b00      	cmp	r3, #0
   20b1e:	d1e1      	bne.n	20ae4 <_dtoa_r+0x4cc>
   20b20:	9a05      	ldr	r2, [sp, #20]
   20b22:	4410      	add	r0, r2
   20b24:	f010 001f 	ands.w	r0, r0, #31
   20b28:	f000 80a1 	beq.w	20c6e <_dtoa_r+0x656>
   20b2c:	f1c0 0320 	rsb	r3, r0, #32
   20b30:	2b04      	cmp	r3, #4
   20b32:	f340 848c 	ble.w	2144e <_dtoa_r+0xe36>
   20b36:	9b06      	ldr	r3, [sp, #24]
   20b38:	f1c0 001c 	rsb	r0, r0, #28
   20b3c:	4403      	add	r3, r0
   20b3e:	9306      	str	r3, [sp, #24]
   20b40:	4613      	mov	r3, r2
   20b42:	4403      	add	r3, r0
   20b44:	4405      	add	r5, r0
   20b46:	9305      	str	r3, [sp, #20]
   20b48:	9b06      	ldr	r3, [sp, #24]
   20b4a:	2b00      	cmp	r3, #0
   20b4c:	dd05      	ble.n	20b5a <_dtoa_r+0x542>
   20b4e:	4651      	mov	r1, sl
   20b50:	461a      	mov	r2, r3
   20b52:	4620      	mov	r0, r4
   20b54:	f001 f962 	bl	21e1c <__lshift>
   20b58:	4682      	mov	sl, r0
   20b5a:	9b05      	ldr	r3, [sp, #20]
   20b5c:	2b00      	cmp	r3, #0
   20b5e:	dd05      	ble.n	20b6c <_dtoa_r+0x554>
   20b60:	4649      	mov	r1, r9
   20b62:	461a      	mov	r2, r3
   20b64:	4620      	mov	r0, r4
   20b66:	f001 f959 	bl	21e1c <__lshift>
   20b6a:	4681      	mov	r9, r0
   20b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20b6e:	2b00      	cmp	r3, #0
   20b70:	f040 8086 	bne.w	20c80 <_dtoa_r+0x668>
   20b74:	9b08      	ldr	r3, [sp, #32]
   20b76:	2b00      	cmp	r3, #0
   20b78:	f340 8269 	ble.w	2104e <_dtoa_r+0xa36>
   20b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20b7e:	2b00      	cmp	r3, #0
   20b80:	f000 8098 	beq.w	20cb4 <_dtoa_r+0x69c>
   20b84:	2d00      	cmp	r5, #0
   20b86:	dd05      	ble.n	20b94 <_dtoa_r+0x57c>
   20b88:	4631      	mov	r1, r6
   20b8a:	462a      	mov	r2, r5
   20b8c:	4620      	mov	r0, r4
   20b8e:	f001 f945 	bl	21e1c <__lshift>
   20b92:	4606      	mov	r6, r0
   20b94:	f1b8 0f00 	cmp.w	r8, #0
   20b98:	f040 8336 	bne.w	21208 <_dtoa_r+0xbf0>
   20b9c:	46b0      	mov	r8, r6
   20b9e:	9b08      	ldr	r3, [sp, #32]
   20ba0:	9a07      	ldr	r2, [sp, #28]
   20ba2:	3b01      	subs	r3, #1
   20ba4:	18d3      	adds	r3, r2, r3
   20ba6:	9308      	str	r3, [sp, #32]
   20ba8:	9b00      	ldr	r3, [sp, #0]
   20baa:	f003 0301 	and.w	r3, r3, #1
   20bae:	9309      	str	r3, [sp, #36]	; 0x24
   20bb0:	4617      	mov	r7, r2
   20bb2:	4649      	mov	r1, r9
   20bb4:	4650      	mov	r0, sl
   20bb6:	f7ff fc9b 	bl	204f0 <quorem>
   20bba:	4631      	mov	r1, r6
   20bbc:	4605      	mov	r5, r0
   20bbe:	4650      	mov	r0, sl
   20bc0:	f001 f97e 	bl	21ec0 <__mcmp>
   20bc4:	4642      	mov	r2, r8
   20bc6:	4649      	mov	r1, r9
   20bc8:	4683      	mov	fp, r0
   20bca:	4620      	mov	r0, r4
   20bcc:	f001 f994 	bl	21ef8 <__mdiff>
   20bd0:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20bd4:	9200      	str	r2, [sp, #0]
   20bd6:	68c2      	ldr	r2, [r0, #12]
   20bd8:	4601      	mov	r1, r0
   20bda:	2a00      	cmp	r2, #0
   20bdc:	f040 8232 	bne.w	21044 <_dtoa_r+0xa2c>
   20be0:	9006      	str	r0, [sp, #24]
   20be2:	4650      	mov	r0, sl
   20be4:	f001 f96c 	bl	21ec0 <__mcmp>
   20be8:	9b06      	ldr	r3, [sp, #24]
   20bea:	9005      	str	r0, [sp, #20]
   20bec:	4619      	mov	r1, r3
   20bee:	4620      	mov	r0, r4
   20bf0:	f000 ff8e 	bl	21b10 <_Bfree>
   20bf4:	9a05      	ldr	r2, [sp, #20]
   20bf6:	b932      	cbnz	r2, 20c06 <_dtoa_r+0x5ee>
   20bf8:	9b02      	ldr	r3, [sp, #8]
   20bfa:	b923      	cbnz	r3, 20c06 <_dtoa_r+0x5ee>
   20bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20bfe:	2b00      	cmp	r3, #0
   20c00:	f000 83de 	beq.w	213c0 <_dtoa_r+0xda8>
   20c04:	9a02      	ldr	r2, [sp, #8]
   20c06:	f1bb 0f00 	cmp.w	fp, #0
   20c0a:	f2c0 82a2 	blt.w	21152 <_dtoa_r+0xb3a>
   20c0e:	d105      	bne.n	20c1c <_dtoa_r+0x604>
   20c10:	9b02      	ldr	r3, [sp, #8]
   20c12:	b91b      	cbnz	r3, 20c1c <_dtoa_r+0x604>
   20c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c16:	2b00      	cmp	r3, #0
   20c18:	f000 829b 	beq.w	21152 <_dtoa_r+0xb3a>
   20c1c:	2a00      	cmp	r2, #0
   20c1e:	f300 8307 	bgt.w	21230 <_dtoa_r+0xc18>
   20c22:	f89d 3000 	ldrb.w	r3, [sp]
   20c26:	703b      	strb	r3, [r7, #0]
   20c28:	9b08      	ldr	r3, [sp, #32]
   20c2a:	f107 0b01 	add.w	fp, r7, #1
   20c2e:	429f      	cmp	r7, r3
   20c30:	465d      	mov	r5, fp
   20c32:	f000 8308 	beq.w	21246 <_dtoa_r+0xc2e>
   20c36:	4651      	mov	r1, sl
   20c38:	2300      	movs	r3, #0
   20c3a:	220a      	movs	r2, #10
   20c3c:	4620      	mov	r0, r4
   20c3e:	f000 ff71 	bl	21b24 <__multadd>
   20c42:	4546      	cmp	r6, r8
   20c44:	4682      	mov	sl, r0
   20c46:	4631      	mov	r1, r6
   20c48:	f04f 0300 	mov.w	r3, #0
   20c4c:	f04f 020a 	mov.w	r2, #10
   20c50:	4620      	mov	r0, r4
   20c52:	f000 81f1 	beq.w	21038 <_dtoa_r+0xa20>
   20c56:	f000 ff65 	bl	21b24 <__multadd>
   20c5a:	4641      	mov	r1, r8
   20c5c:	4606      	mov	r6, r0
   20c5e:	2300      	movs	r3, #0
   20c60:	220a      	movs	r2, #10
   20c62:	4620      	mov	r0, r4
   20c64:	f000 ff5e 	bl	21b24 <__multadd>
   20c68:	465f      	mov	r7, fp
   20c6a:	4680      	mov	r8, r0
   20c6c:	e7a1      	b.n	20bb2 <_dtoa_r+0x59a>
   20c6e:	201c      	movs	r0, #28
   20c70:	9b06      	ldr	r3, [sp, #24]
   20c72:	4403      	add	r3, r0
   20c74:	9306      	str	r3, [sp, #24]
   20c76:	9b05      	ldr	r3, [sp, #20]
   20c78:	4403      	add	r3, r0
   20c7a:	4405      	add	r5, r0
   20c7c:	9305      	str	r3, [sp, #20]
   20c7e:	e763      	b.n	20b48 <_dtoa_r+0x530>
   20c80:	4649      	mov	r1, r9
   20c82:	4650      	mov	r0, sl
   20c84:	f001 f91c 	bl	21ec0 <__mcmp>
   20c88:	2800      	cmp	r0, #0
   20c8a:	f6bf af73 	bge.w	20b74 <_dtoa_r+0x55c>
   20c8e:	9f04      	ldr	r7, [sp, #16]
   20c90:	4651      	mov	r1, sl
   20c92:	2300      	movs	r3, #0
   20c94:	220a      	movs	r2, #10
   20c96:	4620      	mov	r0, r4
   20c98:	3f01      	subs	r7, #1
   20c9a:	9704      	str	r7, [sp, #16]
   20c9c:	f000 ff42 	bl	21b24 <__multadd>
   20ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20ca2:	4682      	mov	sl, r0
   20ca4:	2b00      	cmp	r3, #0
   20ca6:	f040 83a7 	bne.w	213f8 <_dtoa_r+0xde0>
   20caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20cac:	2b00      	cmp	r3, #0
   20cae:	f340 83b0 	ble.w	21412 <_dtoa_r+0xdfa>
   20cb2:	9308      	str	r3, [sp, #32]
   20cb4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20cbc:	465d      	mov	r5, fp
   20cbe:	e002      	b.n	20cc6 <_dtoa_r+0x6ae>
   20cc0:	f000 ff30 	bl	21b24 <__multadd>
   20cc4:	4682      	mov	sl, r0
   20cc6:	4649      	mov	r1, r9
   20cc8:	4650      	mov	r0, sl
   20cca:	f7ff fc11 	bl	204f0 <quorem>
   20cce:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20cd2:	f805 7b01 	strb.w	r7, [r5], #1
   20cd6:	eba5 030b 	sub.w	r3, r5, fp
   20cda:	4543      	cmp	r3, r8
   20cdc:	f04f 020a 	mov.w	r2, #10
   20ce0:	f04f 0300 	mov.w	r3, #0
   20ce4:	4651      	mov	r1, sl
   20ce6:	4620      	mov	r0, r4
   20ce8:	dbea      	blt.n	20cc0 <_dtoa_r+0x6a8>
   20cea:	9b07      	ldr	r3, [sp, #28]
   20cec:	9a08      	ldr	r2, [sp, #32]
   20cee:	9700      	str	r7, [sp, #0]
   20cf0:	2a01      	cmp	r2, #1
   20cf2:	bfac      	ite	ge
   20cf4:	189b      	addge	r3, r3, r2
   20cf6:	3301      	addlt	r3, #1
   20cf8:	461d      	mov	r5, r3
   20cfa:	f04f 0b00 	mov.w	fp, #0
   20cfe:	4651      	mov	r1, sl
   20d00:	2201      	movs	r2, #1
   20d02:	4620      	mov	r0, r4
   20d04:	f001 f88a 	bl	21e1c <__lshift>
   20d08:	4649      	mov	r1, r9
   20d0a:	4682      	mov	sl, r0
   20d0c:	f001 f8d8 	bl	21ec0 <__mcmp>
   20d10:	2800      	cmp	r0, #0
   20d12:	f340 823a 	ble.w	2118a <_dtoa_r+0xb72>
   20d16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20d1a:	9907      	ldr	r1, [sp, #28]
   20d1c:	1e6b      	subs	r3, r5, #1
   20d1e:	e004      	b.n	20d2a <_dtoa_r+0x712>
   20d20:	428b      	cmp	r3, r1
   20d22:	f000 81af 	beq.w	21084 <_dtoa_r+0xa6c>
   20d26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20d2a:	2a39      	cmp	r2, #57	; 0x39
   20d2c:	f103 0501 	add.w	r5, r3, #1
   20d30:	d0f6      	beq.n	20d20 <_dtoa_r+0x708>
   20d32:	3201      	adds	r2, #1
   20d34:	701a      	strb	r2, [r3, #0]
   20d36:	4649      	mov	r1, r9
   20d38:	4620      	mov	r0, r4
   20d3a:	f000 fee9 	bl	21b10 <_Bfree>
   20d3e:	2e00      	cmp	r6, #0
   20d40:	f43f ae36 	beq.w	209b0 <_dtoa_r+0x398>
   20d44:	f1bb 0f00 	cmp.w	fp, #0
   20d48:	d005      	beq.n	20d56 <_dtoa_r+0x73e>
   20d4a:	45b3      	cmp	fp, r6
   20d4c:	d003      	beq.n	20d56 <_dtoa_r+0x73e>
   20d4e:	4659      	mov	r1, fp
   20d50:	4620      	mov	r0, r4
   20d52:	f000 fedd 	bl	21b10 <_Bfree>
   20d56:	4631      	mov	r1, r6
   20d58:	4620      	mov	r0, r4
   20d5a:	f000 fed9 	bl	21b10 <_Bfree>
   20d5e:	e627      	b.n	209b0 <_dtoa_r+0x398>
   20d60:	2300      	movs	r3, #0
   20d62:	9309      	str	r3, [sp, #36]	; 0x24
   20d64:	9b04      	ldr	r3, [sp, #16]
   20d66:	445b      	add	r3, fp
   20d68:	930d      	str	r3, [sp, #52]	; 0x34
   20d6a:	3301      	adds	r3, #1
   20d6c:	2b01      	cmp	r3, #1
   20d6e:	461e      	mov	r6, r3
   20d70:	461d      	mov	r5, r3
   20d72:	9308      	str	r3, [sp, #32]
   20d74:	bfb8      	it	lt
   20d76:	2601      	movlt	r6, #1
   20d78:	2100      	movs	r1, #0
   20d7a:	2e17      	cmp	r6, #23
   20d7c:	6461      	str	r1, [r4, #68]	; 0x44
   20d7e:	d90a      	bls.n	20d96 <_dtoa_r+0x77e>
   20d80:	2201      	movs	r2, #1
   20d82:	2304      	movs	r3, #4
   20d84:	005b      	lsls	r3, r3, #1
   20d86:	f103 0014 	add.w	r0, r3, #20
   20d8a:	4286      	cmp	r6, r0
   20d8c:	4611      	mov	r1, r2
   20d8e:	f102 0201 	add.w	r2, r2, #1
   20d92:	d2f7      	bcs.n	20d84 <_dtoa_r+0x76c>
   20d94:	6461      	str	r1, [r4, #68]	; 0x44
   20d96:	4620      	mov	r0, r4
   20d98:	f000 fe94 	bl	21ac4 <_Balloc>
   20d9c:	2d0e      	cmp	r5, #14
   20d9e:	9007      	str	r0, [sp, #28]
   20da0:	6420      	str	r0, [r4, #64]	; 0x40
   20da2:	f63f ad44 	bhi.w	2082e <_dtoa_r+0x216>
   20da6:	2f00      	cmp	r7, #0
   20da8:	f43f ad41 	beq.w	2082e <_dtoa_r+0x216>
   20dac:	9904      	ldr	r1, [sp, #16]
   20dae:	2900      	cmp	r1, #0
   20db0:	ed9d 7b00 	vldr	d7, [sp]
   20db4:	f340 81f6 	ble.w	211a4 <_dtoa_r+0xb8c>
   20db8:	4bb9      	ldr	r3, [pc, #740]	; (210a0 <_dtoa_r+0xa88>)
   20dba:	f001 020f 	and.w	r2, r1, #15
   20dbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20dc2:	110d      	asrs	r5, r1, #4
   20dc4:	e9d3 6700 	ldrd	r6, r7, [r3]
   20dc8:	06eb      	lsls	r3, r5, #27
   20dca:	f140 81ad 	bpl.w	21128 <_dtoa_r+0xb10>
   20dce:	4bb5      	ldr	r3, [pc, #724]	; (210a4 <_dtoa_r+0xa8c>)
   20dd0:	ec51 0b17 	vmov	r0, r1, d7
   20dd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20dd8:	f7fa ff76 	bl	1bcc8 <__aeabi_ddiv>
   20ddc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20de0:	f005 050f 	and.w	r5, r5, #15
   20de4:	f04f 0903 	mov.w	r9, #3
   20de8:	b18d      	cbz	r5, 20e0e <_dtoa_r+0x7f6>
   20dea:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 210a4 <_dtoa_r+0xa8c>
   20dee:	07e8      	lsls	r0, r5, #31
   20df0:	d509      	bpl.n	20e06 <_dtoa_r+0x7ee>
   20df2:	4630      	mov	r0, r6
   20df4:	4639      	mov	r1, r7
   20df6:	e9d8 2300 	ldrd	r2, r3, [r8]
   20dfa:	f7fa fe3b 	bl	1ba74 <__aeabi_dmul>
   20dfe:	f109 0901 	add.w	r9, r9, #1
   20e02:	4606      	mov	r6, r0
   20e04:	460f      	mov	r7, r1
   20e06:	106d      	asrs	r5, r5, #1
   20e08:	f108 0808 	add.w	r8, r8, #8
   20e0c:	d1ef      	bne.n	20dee <_dtoa_r+0x7d6>
   20e0e:	463b      	mov	r3, r7
   20e10:	4632      	mov	r2, r6
   20e12:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20e16:	f7fa ff57 	bl	1bcc8 <__aeabi_ddiv>
   20e1a:	4607      	mov	r7, r0
   20e1c:	4688      	mov	r8, r1
   20e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20e20:	b143      	cbz	r3, 20e34 <_dtoa_r+0x81c>
   20e22:	2200      	movs	r2, #0
   20e24:	4ba0      	ldr	r3, [pc, #640]	; (210a8 <_dtoa_r+0xa90>)
   20e26:	4638      	mov	r0, r7
   20e28:	4641      	mov	r1, r8
   20e2a:	f7fb f895 	bl	1bf58 <__aeabi_dcmplt>
   20e2e:	2800      	cmp	r0, #0
   20e30:	f040 8273 	bne.w	2131a <_dtoa_r+0xd02>
   20e34:	4648      	mov	r0, r9
   20e36:	f7fa fdb7 	bl	1b9a8 <__aeabi_i2d>
   20e3a:	463a      	mov	r2, r7
   20e3c:	4643      	mov	r3, r8
   20e3e:	f7fa fe19 	bl	1ba74 <__aeabi_dmul>
   20e42:	4b9a      	ldr	r3, [pc, #616]	; (210ac <_dtoa_r+0xa94>)
   20e44:	2200      	movs	r2, #0
   20e46:	f7fa fc63 	bl	1b710 <__adddf3>
   20e4a:	9b08      	ldr	r3, [sp, #32]
   20e4c:	4605      	mov	r5, r0
   20e4e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20e52:	2b00      	cmp	r3, #0
   20e54:	f000 8140 	beq.w	210d8 <_dtoa_r+0xac0>
   20e58:	9b04      	ldr	r3, [sp, #16]
   20e5a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20e5e:	9311      	str	r3, [sp, #68]	; 0x44
   20e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20e62:	2b00      	cmp	r3, #0
   20e64:	f000 81f6 	beq.w	21254 <_dtoa_r+0xc3c>
   20e68:	4b8d      	ldr	r3, [pc, #564]	; (210a0 <_dtoa_r+0xa88>)
   20e6a:	4991      	ldr	r1, [pc, #580]	; (210b0 <_dtoa_r+0xa98>)
   20e6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   20e70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20e74:	2000      	movs	r0, #0
   20e76:	f7fa ff27 	bl	1bcc8 <__aeabi_ddiv>
   20e7a:	462a      	mov	r2, r5
   20e7c:	4633      	mov	r3, r6
   20e7e:	f7fa fc45 	bl	1b70c <__aeabi_dsub>
   20e82:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20e86:	4641      	mov	r1, r8
   20e88:	4638      	mov	r0, r7
   20e8a:	f7fb f88d 	bl	1bfa8 <__aeabi_d2iz>
   20e8e:	4605      	mov	r5, r0
   20e90:	f7fa fd8a 	bl	1b9a8 <__aeabi_i2d>
   20e94:	4602      	mov	r2, r0
   20e96:	460b      	mov	r3, r1
   20e98:	4638      	mov	r0, r7
   20e9a:	4641      	mov	r1, r8
   20e9c:	f7fa fc36 	bl	1b70c <__aeabi_dsub>
   20ea0:	3530      	adds	r5, #48	; 0x30
   20ea2:	fa5f f885 	uxtb.w	r8, r5
   20ea6:	9d07      	ldr	r5, [sp, #28]
   20ea8:	4606      	mov	r6, r0
   20eaa:	460f      	mov	r7, r1
   20eac:	f885 8000 	strb.w	r8, [r5]
   20eb0:	4602      	mov	r2, r0
   20eb2:	460b      	mov	r3, r1
   20eb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20eb8:	3501      	adds	r5, #1
   20eba:	f7fb f86b 	bl	1bf94 <__aeabi_dcmpgt>
   20ebe:	2800      	cmp	r0, #0
   20ec0:	d156      	bne.n	20f70 <_dtoa_r+0x958>
   20ec2:	4632      	mov	r2, r6
   20ec4:	463b      	mov	r3, r7
   20ec6:	2000      	movs	r0, #0
   20ec8:	4977      	ldr	r1, [pc, #476]	; (210a8 <_dtoa_r+0xa90>)
   20eca:	f7fa fc1f 	bl	1b70c <__aeabi_dsub>
   20ece:	4602      	mov	r2, r0
   20ed0:	460b      	mov	r3, r1
   20ed2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20ed6:	f7fb f85d 	bl	1bf94 <__aeabi_dcmpgt>
   20eda:	2800      	cmp	r0, #0
   20edc:	f040 8262 	bne.w	213a4 <_dtoa_r+0xd8c>
   20ee0:	f1b9 0f01 	cmp.w	r9, #1
   20ee4:	f43f aca3 	beq.w	2082e <_dtoa_r+0x216>
   20ee8:	9b07      	ldr	r3, [sp, #28]
   20eea:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   20eee:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   20ef2:	4499      	add	r9, r3
   20ef4:	46a0      	mov	r8, r4
   20ef6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   20efa:	e00d      	b.n	20f18 <_dtoa_r+0x900>
   20efc:	2000      	movs	r0, #0
   20efe:	496a      	ldr	r1, [pc, #424]	; (210a8 <_dtoa_r+0xa90>)
   20f00:	f7fa fc04 	bl	1b70c <__aeabi_dsub>
   20f04:	4652      	mov	r2, sl
   20f06:	465b      	mov	r3, fp
   20f08:	f7fb f826 	bl	1bf58 <__aeabi_dcmplt>
   20f0c:	2800      	cmp	r0, #0
   20f0e:	f040 8244 	bne.w	2139a <_dtoa_r+0xd82>
   20f12:	454d      	cmp	r5, r9
   20f14:	f000 824a 	beq.w	213ac <_dtoa_r+0xd94>
   20f18:	4650      	mov	r0, sl
   20f1a:	4659      	mov	r1, fp
   20f1c:	2200      	movs	r2, #0
   20f1e:	4b65      	ldr	r3, [pc, #404]	; (210b4 <_dtoa_r+0xa9c>)
   20f20:	f7fa fda8 	bl	1ba74 <__aeabi_dmul>
   20f24:	2200      	movs	r2, #0
   20f26:	4b63      	ldr	r3, [pc, #396]	; (210b4 <_dtoa_r+0xa9c>)
   20f28:	4682      	mov	sl, r0
   20f2a:	468b      	mov	fp, r1
   20f2c:	4630      	mov	r0, r6
   20f2e:	4639      	mov	r1, r7
   20f30:	f7fa fda0 	bl	1ba74 <__aeabi_dmul>
   20f34:	460f      	mov	r7, r1
   20f36:	4606      	mov	r6, r0
   20f38:	f7fb f836 	bl	1bfa8 <__aeabi_d2iz>
   20f3c:	4604      	mov	r4, r0
   20f3e:	f7fa fd33 	bl	1b9a8 <__aeabi_i2d>
   20f42:	4602      	mov	r2, r0
   20f44:	460b      	mov	r3, r1
   20f46:	4630      	mov	r0, r6
   20f48:	4639      	mov	r1, r7
   20f4a:	f7fa fbdf 	bl	1b70c <__aeabi_dsub>
   20f4e:	3430      	adds	r4, #48	; 0x30
   20f50:	b2e4      	uxtb	r4, r4
   20f52:	4652      	mov	r2, sl
   20f54:	465b      	mov	r3, fp
   20f56:	f805 4b01 	strb.w	r4, [r5], #1
   20f5a:	4606      	mov	r6, r0
   20f5c:	460f      	mov	r7, r1
   20f5e:	f7fa fffb 	bl	1bf58 <__aeabi_dcmplt>
   20f62:	4632      	mov	r2, r6
   20f64:	463b      	mov	r3, r7
   20f66:	2800      	cmp	r0, #0
   20f68:	d0c8      	beq.n	20efc <_dtoa_r+0x8e4>
   20f6a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   20f6e:	4644      	mov	r4, r8
   20f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20f72:	9304      	str	r3, [sp, #16]
   20f74:	e51c      	b.n	209b0 <_dtoa_r+0x398>
   20f76:	2300      	movs	r3, #0
   20f78:	9309      	str	r3, [sp, #36]	; 0x24
   20f7a:	f1bb 0f00 	cmp.w	fp, #0
   20f7e:	f340 80da 	ble.w	21136 <_dtoa_r+0xb1e>
   20f82:	465e      	mov	r6, fp
   20f84:	465d      	mov	r5, fp
   20f86:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   20f8a:	f8cd b020 	str.w	fp, [sp, #32]
   20f8e:	e6f3      	b.n	20d78 <_dtoa_r+0x760>
   20f90:	2301      	movs	r3, #1
   20f92:	9309      	str	r3, [sp, #36]	; 0x24
   20f94:	e7f1      	b.n	20f7a <_dtoa_r+0x962>
   20f96:	9b00      	ldr	r3, [sp, #0]
   20f98:	2b00      	cmp	r3, #0
   20f9a:	f47f ada1 	bne.w	20ae0 <_dtoa_r+0x4c8>
   20f9e:	e9dd 1200 	ldrd	r1, r2, [sp]
   20fa2:	f3c2 0313 	ubfx	r3, r2, #0, #20
   20fa6:	2b00      	cmp	r3, #0
   20fa8:	f47f adb4 	bne.w	20b14 <_dtoa_r+0x4fc>
   20fac:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   20fb0:	0d3f      	lsrs	r7, r7, #20
   20fb2:	053f      	lsls	r7, r7, #20
   20fb4:	2f00      	cmp	r7, #0
   20fb6:	f000 8200 	beq.w	213ba <_dtoa_r+0xda2>
   20fba:	9b06      	ldr	r3, [sp, #24]
   20fbc:	3301      	adds	r3, #1
   20fbe:	9306      	str	r3, [sp, #24]
   20fc0:	9b05      	ldr	r3, [sp, #20]
   20fc2:	3301      	adds	r3, #1
   20fc4:	9305      	str	r3, [sp, #20]
   20fc6:	f04f 0801 	mov.w	r8, #1
   20fca:	e5a5      	b.n	20b18 <_dtoa_r+0x500>
   20fcc:	9b08      	ldr	r3, [sp, #32]
   20fce:	2b00      	cmp	r3, #0
   20fd0:	f73f ac3e 	bgt.w	20850 <_dtoa_r+0x238>
   20fd4:	f040 8099 	bne.w	2110a <_dtoa_r+0xaf2>
   20fd8:	4649      	mov	r1, r9
   20fda:	2200      	movs	r2, #0
   20fdc:	4b36      	ldr	r3, [pc, #216]	; (210b8 <_dtoa_r+0xaa0>)
   20fde:	4640      	mov	r0, r8
   20fe0:	f7fa fd48 	bl	1ba74 <__aeabi_dmul>
   20fe4:	e9dd 2300 	ldrd	r2, r3, [sp]
   20fe8:	f7fa ffca 	bl	1bf80 <__aeabi_dcmpge>
   20fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20ff0:	464e      	mov	r6, r9
   20ff2:	2800      	cmp	r0, #0
   20ff4:	d03e      	beq.n	21074 <_dtoa_r+0xa5c>
   20ff6:	ea6f 030b 	mvn.w	r3, fp
   20ffa:	9d07      	ldr	r5, [sp, #28]
   20ffc:	9304      	str	r3, [sp, #16]
   20ffe:	4649      	mov	r1, r9
   21000:	4620      	mov	r0, r4
   21002:	f000 fd85 	bl	21b10 <_Bfree>
   21006:	2e00      	cmp	r6, #0
   21008:	f43f acd2 	beq.w	209b0 <_dtoa_r+0x398>
   2100c:	e6a3      	b.n	20d56 <_dtoa_r+0x73e>
   2100e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21010:	4651      	mov	r1, sl
   21012:	4620      	mov	r0, r4
   21014:	f000 feb2 	bl	21d7c <__pow5mult>
   21018:	4682      	mov	sl, r0
   2101a:	e54f      	b.n	20abc <_dtoa_r+0x4a4>
   2101c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2101e:	2a00      	cmp	r2, #0
   21020:	f000 816f 	beq.w	21302 <_dtoa_r+0xcea>
   21024:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21028:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2102a:	9d06      	ldr	r5, [sp, #24]
   2102c:	e4e7      	b.n	209fe <_dtoa_r+0x3e6>
   2102e:	9b00      	ldr	r3, [sp, #0]
   21030:	2b00      	cmp	r3, #0
   21032:	f47f ad6f 	bne.w	20b14 <_dtoa_r+0x4fc>
   21036:	e7b2      	b.n	20f9e <_dtoa_r+0x986>
   21038:	f000 fd74 	bl	21b24 <__multadd>
   2103c:	465f      	mov	r7, fp
   2103e:	4606      	mov	r6, r0
   21040:	4680      	mov	r8, r0
   21042:	e5b6      	b.n	20bb2 <_dtoa_r+0x59a>
   21044:	4620      	mov	r0, r4
   21046:	f000 fd63 	bl	21b10 <_Bfree>
   2104a:	2201      	movs	r2, #1
   2104c:	e5db      	b.n	20c06 <_dtoa_r+0x5ee>
   2104e:	9b02      	ldr	r3, [sp, #8]
   21050:	2b02      	cmp	r3, #2
   21052:	f77f ad93 	ble.w	20b7c <_dtoa_r+0x564>
   21056:	9b08      	ldr	r3, [sp, #32]
   21058:	2b00      	cmp	r3, #0
   2105a:	d1cc      	bne.n	20ff6 <_dtoa_r+0x9de>
   2105c:	4649      	mov	r1, r9
   2105e:	2205      	movs	r2, #5
   21060:	4620      	mov	r0, r4
   21062:	f000 fd5f 	bl	21b24 <__multadd>
   21066:	4601      	mov	r1, r0
   21068:	4681      	mov	r9, r0
   2106a:	4650      	mov	r0, sl
   2106c:	f000 ff28 	bl	21ec0 <__mcmp>
   21070:	2800      	cmp	r0, #0
   21072:	ddc0      	ble.n	20ff6 <_dtoa_r+0x9de>
   21074:	9a04      	ldr	r2, [sp, #16]
   21076:	9907      	ldr	r1, [sp, #28]
   21078:	2331      	movs	r3, #49	; 0x31
   2107a:	3201      	adds	r2, #1
   2107c:	9204      	str	r2, [sp, #16]
   2107e:	700b      	strb	r3, [r1, #0]
   21080:	1c4d      	adds	r5, r1, #1
   21082:	e7bc      	b.n	20ffe <_dtoa_r+0x9e6>
   21084:	9a04      	ldr	r2, [sp, #16]
   21086:	3201      	adds	r2, #1
   21088:	9204      	str	r2, [sp, #16]
   2108a:	9a07      	ldr	r2, [sp, #28]
   2108c:	2331      	movs	r3, #49	; 0x31
   2108e:	7013      	strb	r3, [r2, #0]
   21090:	e651      	b.n	20d36 <_dtoa_r+0x71e>
   21092:	2301      	movs	r3, #1
   21094:	9309      	str	r3, [sp, #36]	; 0x24
   21096:	e665      	b.n	20d64 <_dtoa_r+0x74c>
   21098:	f8dd a000 	ldr.w	sl, [sp]
   2109c:	9c02      	ldr	r4, [sp, #8]
   2109e:	e487      	b.n	209b0 <_dtoa_r+0x398>
   210a0:	00024c10 	.word	0x00024c10
   210a4:	00024be8 	.word	0x00024be8
   210a8:	3ff00000 	.word	0x3ff00000
   210ac:	401c0000 	.word	0x401c0000
   210b0:	3fe00000 	.word	0x3fe00000
   210b4:	40240000 	.word	0x40240000
   210b8:	40140000 	.word	0x40140000
   210bc:	4648      	mov	r0, r9
   210be:	f7fa fc73 	bl	1b9a8 <__aeabi_i2d>
   210c2:	463a      	mov	r2, r7
   210c4:	4643      	mov	r3, r8
   210c6:	f7fa fcd5 	bl	1ba74 <__aeabi_dmul>
   210ca:	2200      	movs	r2, #0
   210cc:	4bc4      	ldr	r3, [pc, #784]	; (213e0 <_dtoa_r+0xdc8>)
   210ce:	f7fa fb1f 	bl	1b710 <__adddf3>
   210d2:	4605      	mov	r5, r0
   210d4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   210d8:	4641      	mov	r1, r8
   210da:	2200      	movs	r2, #0
   210dc:	4bc1      	ldr	r3, [pc, #772]	; (213e4 <_dtoa_r+0xdcc>)
   210de:	4638      	mov	r0, r7
   210e0:	f7fa fb14 	bl	1b70c <__aeabi_dsub>
   210e4:	462a      	mov	r2, r5
   210e6:	4633      	mov	r3, r6
   210e8:	4680      	mov	r8, r0
   210ea:	4689      	mov	r9, r1
   210ec:	f7fa ff52 	bl	1bf94 <__aeabi_dcmpgt>
   210f0:	2800      	cmp	r0, #0
   210f2:	f040 80ab 	bne.w	2124c <_dtoa_r+0xc34>
   210f6:	462a      	mov	r2, r5
   210f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   210fc:	4640      	mov	r0, r8
   210fe:	4649      	mov	r1, r9
   21100:	f7fa ff2a 	bl	1bf58 <__aeabi_dcmplt>
   21104:	2800      	cmp	r0, #0
   21106:	f43f ab92 	beq.w	2082e <_dtoa_r+0x216>
   2110a:	f04f 0900 	mov.w	r9, #0
   2110e:	464e      	mov	r6, r9
   21110:	e771      	b.n	20ff6 <_dtoa_r+0x9de>
   21112:	9807      	ldr	r0, [sp, #28]
   21114:	f7ff bab8 	b.w	20688 <_dtoa_r+0x70>
   21118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2111a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2111c:	970a      	str	r7, [sp, #40]	; 0x28
   2111e:	1afb      	subs	r3, r7, r3
   21120:	441a      	add	r2, r3
   21122:	920b      	str	r2, [sp, #44]	; 0x2c
   21124:	2700      	movs	r7, #0
   21126:	e464      	b.n	209f2 <_dtoa_r+0x3da>
   21128:	ed9d 7b00 	vldr	d7, [sp]
   2112c:	f04f 0902 	mov.w	r9, #2
   21130:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21134:	e658      	b.n	20de8 <_dtoa_r+0x7d0>
   21136:	2100      	movs	r1, #0
   21138:	6461      	str	r1, [r4, #68]	; 0x44
   2113a:	4620      	mov	r0, r4
   2113c:	f000 fcc2 	bl	21ac4 <_Balloc>
   21140:	f04f 0b01 	mov.w	fp, #1
   21144:	9007      	str	r0, [sp, #28]
   21146:	6420      	str	r0, [r4, #64]	; 0x40
   21148:	f8cd b020 	str.w	fp, [sp, #32]
   2114c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21150:	e629      	b.n	20da6 <_dtoa_r+0x78e>
   21152:	2a00      	cmp	r2, #0
   21154:	dd12      	ble.n	2117c <_dtoa_r+0xb64>
   21156:	4651      	mov	r1, sl
   21158:	2201      	movs	r2, #1
   2115a:	4620      	mov	r0, r4
   2115c:	f000 fe5e 	bl	21e1c <__lshift>
   21160:	4649      	mov	r1, r9
   21162:	4682      	mov	sl, r0
   21164:	f000 feac 	bl	21ec0 <__mcmp>
   21168:	2800      	cmp	r0, #0
   2116a:	f340 8131 	ble.w	213d0 <_dtoa_r+0xdb8>
   2116e:	9b00      	ldr	r3, [sp, #0]
   21170:	2b39      	cmp	r3, #57	; 0x39
   21172:	f000 80f7 	beq.w	21364 <_dtoa_r+0xd4c>
   21176:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2117a:	9300      	str	r3, [sp, #0]
   2117c:	f89d 3000 	ldrb.w	r3, [sp]
   21180:	703b      	strb	r3, [r7, #0]
   21182:	46b3      	mov	fp, r6
   21184:	1c7d      	adds	r5, r7, #1
   21186:	4646      	mov	r6, r8
   21188:	e5d5      	b.n	20d36 <_dtoa_r+0x71e>
   2118a:	d104      	bne.n	21196 <_dtoa_r+0xb7e>
   2118c:	9b00      	ldr	r3, [sp, #0]
   2118e:	07db      	lsls	r3, r3, #31
   21190:	d501      	bpl.n	21196 <_dtoa_r+0xb7e>
   21192:	e5c0      	b.n	20d16 <_dtoa_r+0x6fe>
   21194:	4615      	mov	r5, r2
   21196:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2119a:	2b30      	cmp	r3, #48	; 0x30
   2119c:	f105 32ff 	add.w	r2, r5, #4294967295
   211a0:	d0f8      	beq.n	21194 <_dtoa_r+0xb7c>
   211a2:	e5c8      	b.n	20d36 <_dtoa_r+0x71e>
   211a4:	f000 80b4 	beq.w	21310 <_dtoa_r+0xcf8>
   211a8:	9b04      	ldr	r3, [sp, #16]
   211aa:	425d      	negs	r5, r3
   211ac:	4b8e      	ldr	r3, [pc, #568]	; (213e8 <_dtoa_r+0xdd0>)
   211ae:	f005 020f 	and.w	r2, r5, #15
   211b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   211b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   211ba:	e9dd 0100 	ldrd	r0, r1, [sp]
   211be:	f7fa fc59 	bl	1ba74 <__aeabi_dmul>
   211c2:	112d      	asrs	r5, r5, #4
   211c4:	4607      	mov	r7, r0
   211c6:	4688      	mov	r8, r1
   211c8:	f000 8128 	beq.w	2141c <_dtoa_r+0xe04>
   211cc:	4e87      	ldr	r6, [pc, #540]	; (213ec <_dtoa_r+0xdd4>)
   211ce:	f04f 0902 	mov.w	r9, #2
   211d2:	07e9      	lsls	r1, r5, #31
   211d4:	d509      	bpl.n	211ea <_dtoa_r+0xbd2>
   211d6:	4638      	mov	r0, r7
   211d8:	4641      	mov	r1, r8
   211da:	e9d6 2300 	ldrd	r2, r3, [r6]
   211de:	f7fa fc49 	bl	1ba74 <__aeabi_dmul>
   211e2:	f109 0901 	add.w	r9, r9, #1
   211e6:	4607      	mov	r7, r0
   211e8:	4688      	mov	r8, r1
   211ea:	106d      	asrs	r5, r5, #1
   211ec:	f106 0608 	add.w	r6, r6, #8
   211f0:	d1ef      	bne.n	211d2 <_dtoa_r+0xbba>
   211f2:	e614      	b.n	20e1e <_dtoa_r+0x806>
   211f4:	9907      	ldr	r1, [sp, #28]
   211f6:	2230      	movs	r2, #48	; 0x30
   211f8:	700a      	strb	r2, [r1, #0]
   211fa:	9a04      	ldr	r2, [sp, #16]
   211fc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21200:	3201      	adds	r2, #1
   21202:	9204      	str	r2, [sp, #16]
   21204:	f7ff bbd0 	b.w	209a8 <_dtoa_r+0x390>
   21208:	6871      	ldr	r1, [r6, #4]
   2120a:	4620      	mov	r0, r4
   2120c:	f000 fc5a 	bl	21ac4 <_Balloc>
   21210:	6933      	ldr	r3, [r6, #16]
   21212:	3302      	adds	r3, #2
   21214:	009a      	lsls	r2, r3, #2
   21216:	4605      	mov	r5, r0
   21218:	f106 010c 	add.w	r1, r6, #12
   2121c:	300c      	adds	r0, #12
   2121e:	f7fc ffe7 	bl	1e1f0 <memcpy>
   21222:	4629      	mov	r1, r5
   21224:	2201      	movs	r2, #1
   21226:	4620      	mov	r0, r4
   21228:	f000 fdf8 	bl	21e1c <__lshift>
   2122c:	4680      	mov	r8, r0
   2122e:	e4b6      	b.n	20b9e <_dtoa_r+0x586>
   21230:	9b00      	ldr	r3, [sp, #0]
   21232:	2b39      	cmp	r3, #57	; 0x39
   21234:	f000 8096 	beq.w	21364 <_dtoa_r+0xd4c>
   21238:	9b00      	ldr	r3, [sp, #0]
   2123a:	3301      	adds	r3, #1
   2123c:	46b3      	mov	fp, r6
   2123e:	703b      	strb	r3, [r7, #0]
   21240:	1c7d      	adds	r5, r7, #1
   21242:	4646      	mov	r6, r8
   21244:	e577      	b.n	20d36 <_dtoa_r+0x71e>
   21246:	46b3      	mov	fp, r6
   21248:	4646      	mov	r6, r8
   2124a:	e558      	b.n	20cfe <_dtoa_r+0x6e6>
   2124c:	f04f 0900 	mov.w	r9, #0
   21250:	464e      	mov	r6, r9
   21252:	e70f      	b.n	21074 <_dtoa_r+0xa5c>
   21254:	4964      	ldr	r1, [pc, #400]	; (213e8 <_dtoa_r+0xdd0>)
   21256:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2125a:	462a      	mov	r2, r5
   2125c:	4633      	mov	r3, r6
   2125e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21262:	f7fa fc07 	bl	1ba74 <__aeabi_dmul>
   21266:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2126a:	4638      	mov	r0, r7
   2126c:	4641      	mov	r1, r8
   2126e:	f7fa fe9b 	bl	1bfa8 <__aeabi_d2iz>
   21272:	4605      	mov	r5, r0
   21274:	f7fa fb98 	bl	1b9a8 <__aeabi_i2d>
   21278:	4602      	mov	r2, r0
   2127a:	460b      	mov	r3, r1
   2127c:	4638      	mov	r0, r7
   2127e:	4641      	mov	r1, r8
   21280:	f7fa fa44 	bl	1b70c <__aeabi_dsub>
   21284:	9a07      	ldr	r2, [sp, #28]
   21286:	3530      	adds	r5, #48	; 0x30
   21288:	f1b9 0f01 	cmp.w	r9, #1
   2128c:	7015      	strb	r5, [r2, #0]
   2128e:	4606      	mov	r6, r0
   21290:	460f      	mov	r7, r1
   21292:	f102 0501 	add.w	r5, r2, #1
   21296:	d01c      	beq.n	212d2 <_dtoa_r+0xcba>
   21298:	9b07      	ldr	r3, [sp, #28]
   2129a:	4499      	add	r9, r3
   2129c:	2200      	movs	r2, #0
   2129e:	4b54      	ldr	r3, [pc, #336]	; (213f0 <_dtoa_r+0xdd8>)
   212a0:	4630      	mov	r0, r6
   212a2:	4639      	mov	r1, r7
   212a4:	f7fa fbe6 	bl	1ba74 <__aeabi_dmul>
   212a8:	460f      	mov	r7, r1
   212aa:	4606      	mov	r6, r0
   212ac:	f7fa fe7c 	bl	1bfa8 <__aeabi_d2iz>
   212b0:	4680      	mov	r8, r0
   212b2:	f7fa fb79 	bl	1b9a8 <__aeabi_i2d>
   212b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
   212ba:	4602      	mov	r2, r0
   212bc:	460b      	mov	r3, r1
   212be:	4630      	mov	r0, r6
   212c0:	4639      	mov	r1, r7
   212c2:	f7fa fa23 	bl	1b70c <__aeabi_dsub>
   212c6:	f805 8b01 	strb.w	r8, [r5], #1
   212ca:	454d      	cmp	r5, r9
   212cc:	4606      	mov	r6, r0
   212ce:	460f      	mov	r7, r1
   212d0:	d1e4      	bne.n	2129c <_dtoa_r+0xc84>
   212d2:	2200      	movs	r2, #0
   212d4:	4b47      	ldr	r3, [pc, #284]	; (213f4 <_dtoa_r+0xddc>)
   212d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   212da:	f7fa fa19 	bl	1b710 <__adddf3>
   212de:	4632      	mov	r2, r6
   212e0:	463b      	mov	r3, r7
   212e2:	f7fa fe39 	bl	1bf58 <__aeabi_dcmplt>
   212e6:	2800      	cmp	r0, #0
   212e8:	d042      	beq.n	21370 <_dtoa_r+0xd58>
   212ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   212ec:	9304      	str	r3, [sp, #16]
   212ee:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   212f2:	f7ff bb4c 	b.w	2098e <_dtoa_r+0x376>
   212f6:	9b06      	ldr	r3, [sp, #24]
   212f8:	9a08      	ldr	r2, [sp, #32]
   212fa:	1a9d      	subs	r5, r3, r2
   212fc:	2300      	movs	r3, #0
   212fe:	f7ff bb7e 	b.w	209fe <_dtoa_r+0x3e6>
   21302:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21304:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21306:	9d06      	ldr	r5, [sp, #24]
   21308:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2130c:	f7ff bb77 	b.w	209fe <_dtoa_r+0x3e6>
   21310:	e9dd 7800 	ldrd	r7, r8, [sp]
   21314:	f04f 0902 	mov.w	r9, #2
   21318:	e581      	b.n	20e1e <_dtoa_r+0x806>
   2131a:	9b08      	ldr	r3, [sp, #32]
   2131c:	2b00      	cmp	r3, #0
   2131e:	f43f aecd 	beq.w	210bc <_dtoa_r+0xaa4>
   21322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21324:	2b00      	cmp	r3, #0
   21326:	f77f aa82 	ble.w	2082e <_dtoa_r+0x216>
   2132a:	2200      	movs	r2, #0
   2132c:	4b30      	ldr	r3, [pc, #192]	; (213f0 <_dtoa_r+0xdd8>)
   2132e:	4638      	mov	r0, r7
   21330:	4641      	mov	r1, r8
   21332:	f7fa fb9f 	bl	1ba74 <__aeabi_dmul>
   21336:	4607      	mov	r7, r0
   21338:	4688      	mov	r8, r1
   2133a:	f109 0001 	add.w	r0, r9, #1
   2133e:	f7fa fb33 	bl	1b9a8 <__aeabi_i2d>
   21342:	463a      	mov	r2, r7
   21344:	4643      	mov	r3, r8
   21346:	f7fa fb95 	bl	1ba74 <__aeabi_dmul>
   2134a:	2200      	movs	r2, #0
   2134c:	4b24      	ldr	r3, [pc, #144]	; (213e0 <_dtoa_r+0xdc8>)
   2134e:	f7fa f9df 	bl	1b710 <__adddf3>
   21352:	9a04      	ldr	r2, [sp, #16]
   21354:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21358:	3a01      	subs	r2, #1
   2135a:	4605      	mov	r5, r0
   2135c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21360:	9211      	str	r2, [sp, #68]	; 0x44
   21362:	e57d      	b.n	20e60 <_dtoa_r+0x848>
   21364:	2239      	movs	r2, #57	; 0x39
   21366:	46b3      	mov	fp, r6
   21368:	703a      	strb	r2, [r7, #0]
   2136a:	4646      	mov	r6, r8
   2136c:	1c7d      	adds	r5, r7, #1
   2136e:	e4d4      	b.n	20d1a <_dtoa_r+0x702>
   21370:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21374:	2000      	movs	r0, #0
   21376:	491f      	ldr	r1, [pc, #124]	; (213f4 <_dtoa_r+0xddc>)
   21378:	f7fa f9c8 	bl	1b70c <__aeabi_dsub>
   2137c:	4632      	mov	r2, r6
   2137e:	463b      	mov	r3, r7
   21380:	f7fa fe08 	bl	1bf94 <__aeabi_dcmpgt>
   21384:	b910      	cbnz	r0, 2138c <_dtoa_r+0xd74>
   21386:	f7ff ba52 	b.w	2082e <_dtoa_r+0x216>
   2138a:	4615      	mov	r5, r2
   2138c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   21390:	2b30      	cmp	r3, #48	; 0x30
   21392:	f105 32ff 	add.w	r2, r5, #4294967295
   21396:	d0f8      	beq.n	2138a <_dtoa_r+0xd72>
   21398:	e5ea      	b.n	20f70 <_dtoa_r+0x958>
   2139a:	4643      	mov	r3, r8
   2139c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   213a0:	46a0      	mov	r8, r4
   213a2:	461c      	mov	r4, r3
   213a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   213a6:	9304      	str	r3, [sp, #16]
   213a8:	f7ff baf1 	b.w	2098e <_dtoa_r+0x376>
   213ac:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   213b0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   213b4:	4644      	mov	r4, r8
   213b6:	f7ff ba3a 	b.w	2082e <_dtoa_r+0x216>
   213ba:	46b8      	mov	r8, r7
   213bc:	f7ff bbac 	b.w	20b18 <_dtoa_r+0x500>
   213c0:	9b00      	ldr	r3, [sp, #0]
   213c2:	2b39      	cmp	r3, #57	; 0x39
   213c4:	d0ce      	beq.n	21364 <_dtoa_r+0xd4c>
   213c6:	f1bb 0f00 	cmp.w	fp, #0
   213ca:	f73f aed4 	bgt.w	21176 <_dtoa_r+0xb5e>
   213ce:	e6d5      	b.n	2117c <_dtoa_r+0xb64>
   213d0:	f47f aed4 	bne.w	2117c <_dtoa_r+0xb64>
   213d4:	9b00      	ldr	r3, [sp, #0]
   213d6:	07da      	lsls	r2, r3, #31
   213d8:	f57f aed0 	bpl.w	2117c <_dtoa_r+0xb64>
   213dc:	e6c7      	b.n	2116e <_dtoa_r+0xb56>
   213de:	bf00      	nop
   213e0:	401c0000 	.word	0x401c0000
   213e4:	40140000 	.word	0x40140000
   213e8:	00024c10 	.word	0x00024c10
   213ec:	00024be8 	.word	0x00024be8
   213f0:	40240000 	.word	0x40240000
   213f4:	3fe00000 	.word	0x3fe00000
   213f8:	4631      	mov	r1, r6
   213fa:	2300      	movs	r3, #0
   213fc:	220a      	movs	r2, #10
   213fe:	4620      	mov	r0, r4
   21400:	f000 fb90 	bl	21b24 <__multadd>
   21404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21406:	2b00      	cmp	r3, #0
   21408:	4606      	mov	r6, r0
   2140a:	dd0a      	ble.n	21422 <_dtoa_r+0xe0a>
   2140c:	9308      	str	r3, [sp, #32]
   2140e:	f7ff bbb9 	b.w	20b84 <_dtoa_r+0x56c>
   21412:	9b02      	ldr	r3, [sp, #8]
   21414:	2b02      	cmp	r3, #2
   21416:	dc22      	bgt.n	2145e <_dtoa_r+0xe46>
   21418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2141a:	e44a      	b.n	20cb2 <_dtoa_r+0x69a>
   2141c:	f04f 0902 	mov.w	r9, #2
   21420:	e4fd      	b.n	20e1e <_dtoa_r+0x806>
   21422:	9b02      	ldr	r3, [sp, #8]
   21424:	2b02      	cmp	r3, #2
   21426:	dc1a      	bgt.n	2145e <_dtoa_r+0xe46>
   21428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2142a:	e7ef      	b.n	2140c <_dtoa_r+0xdf4>
   2142c:	2500      	movs	r5, #0
   2142e:	6465      	str	r5, [r4, #68]	; 0x44
   21430:	4629      	mov	r1, r5
   21432:	4620      	mov	r0, r4
   21434:	f000 fb46 	bl	21ac4 <_Balloc>
   21438:	f04f 33ff 	mov.w	r3, #4294967295
   2143c:	9308      	str	r3, [sp, #32]
   2143e:	930d      	str	r3, [sp, #52]	; 0x34
   21440:	2301      	movs	r3, #1
   21442:	9007      	str	r0, [sp, #28]
   21444:	46ab      	mov	fp, r5
   21446:	6420      	str	r0, [r4, #64]	; 0x40
   21448:	9309      	str	r3, [sp, #36]	; 0x24
   2144a:	f7ff b9f0 	b.w	2082e <_dtoa_r+0x216>
   2144e:	f43f ab7b 	beq.w	20b48 <_dtoa_r+0x530>
   21452:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21456:	e40b      	b.n	20c70 <_dtoa_r+0x658>
   21458:	2701      	movs	r7, #1
   2145a:	f7ff b9af 	b.w	207bc <_dtoa_r+0x1a4>
   2145e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21460:	9308      	str	r3, [sp, #32]
   21462:	e5f8      	b.n	21056 <_dtoa_r+0xa3e>

00021464 <__sflush_r>:
   21464:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21468:	b29a      	uxth	r2, r3
   2146a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2146e:	460d      	mov	r5, r1
   21470:	0711      	lsls	r1, r2, #28
   21472:	4680      	mov	r8, r0
   21474:	d43a      	bmi.n	214ec <__sflush_r+0x88>
   21476:	686a      	ldr	r2, [r5, #4]
   21478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2147c:	2a00      	cmp	r2, #0
   2147e:	81ab      	strh	r3, [r5, #12]
   21480:	dd6f      	ble.n	21562 <__sflush_r+0xfe>
   21482:	6aac      	ldr	r4, [r5, #40]	; 0x28
   21484:	2c00      	cmp	r4, #0
   21486:	d049      	beq.n	2151c <__sflush_r+0xb8>
   21488:	2200      	movs	r2, #0
   2148a:	b29b      	uxth	r3, r3
   2148c:	f8d8 6000 	ldr.w	r6, [r8]
   21490:	f8c8 2000 	str.w	r2, [r8]
   21494:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   21498:	d067      	beq.n	2156a <__sflush_r+0x106>
   2149a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2149c:	075f      	lsls	r7, r3, #29
   2149e:	d505      	bpl.n	214ac <__sflush_r+0x48>
   214a0:	6869      	ldr	r1, [r5, #4]
   214a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   214a4:	1a52      	subs	r2, r2, r1
   214a6:	b10b      	cbz	r3, 214ac <__sflush_r+0x48>
   214a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   214aa:	1ad2      	subs	r2, r2, r3
   214ac:	2300      	movs	r3, #0
   214ae:	69e9      	ldr	r1, [r5, #28]
   214b0:	4640      	mov	r0, r8
   214b2:	47a0      	blx	r4
   214b4:	1c44      	adds	r4, r0, #1
   214b6:	d03c      	beq.n	21532 <__sflush_r+0xce>
   214b8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   214bc:	692a      	ldr	r2, [r5, #16]
   214be:	602a      	str	r2, [r5, #0]
   214c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   214c4:	2200      	movs	r2, #0
   214c6:	81ab      	strh	r3, [r5, #12]
   214c8:	04db      	lsls	r3, r3, #19
   214ca:	606a      	str	r2, [r5, #4]
   214cc:	d447      	bmi.n	2155e <__sflush_r+0xfa>
   214ce:	6b29      	ldr	r1, [r5, #48]	; 0x30
   214d0:	f8c8 6000 	str.w	r6, [r8]
   214d4:	b311      	cbz	r1, 2151c <__sflush_r+0xb8>
   214d6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   214da:	4299      	cmp	r1, r3
   214dc:	d002      	beq.n	214e4 <__sflush_r+0x80>
   214de:	4640      	mov	r0, r8
   214e0:	f000 f95a 	bl	21798 <_free_r>
   214e4:	2000      	movs	r0, #0
   214e6:	6328      	str	r0, [r5, #48]	; 0x30
   214e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   214ec:	692e      	ldr	r6, [r5, #16]
   214ee:	b1ae      	cbz	r6, 2151c <__sflush_r+0xb8>
   214f0:	682c      	ldr	r4, [r5, #0]
   214f2:	602e      	str	r6, [r5, #0]
   214f4:	0791      	lsls	r1, r2, #30
   214f6:	bf0c      	ite	eq
   214f8:	696b      	ldreq	r3, [r5, #20]
   214fa:	2300      	movne	r3, #0
   214fc:	1ba4      	subs	r4, r4, r6
   214fe:	60ab      	str	r3, [r5, #8]
   21500:	e00a      	b.n	21518 <__sflush_r+0xb4>
   21502:	4623      	mov	r3, r4
   21504:	4632      	mov	r2, r6
   21506:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   21508:	69e9      	ldr	r1, [r5, #28]
   2150a:	4640      	mov	r0, r8
   2150c:	47b8      	blx	r7
   2150e:	2800      	cmp	r0, #0
   21510:	eba4 0400 	sub.w	r4, r4, r0
   21514:	4406      	add	r6, r0
   21516:	dd04      	ble.n	21522 <__sflush_r+0xbe>
   21518:	2c00      	cmp	r4, #0
   2151a:	dcf2      	bgt.n	21502 <__sflush_r+0x9e>
   2151c:	2000      	movs	r0, #0
   2151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21522:	89ab      	ldrh	r3, [r5, #12]
   21524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21528:	81ab      	strh	r3, [r5, #12]
   2152a:	f04f 30ff 	mov.w	r0, #4294967295
   2152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21532:	f8d8 4000 	ldr.w	r4, [r8]
   21536:	2c1d      	cmp	r4, #29
   21538:	d8f3      	bhi.n	21522 <__sflush_r+0xbe>
   2153a:	4b19      	ldr	r3, [pc, #100]	; (215a0 <__sflush_r+0x13c>)
   2153c:	40e3      	lsrs	r3, r4
   2153e:	43db      	mvns	r3, r3
   21540:	f013 0301 	ands.w	r3, r3, #1
   21544:	d1ed      	bne.n	21522 <__sflush_r+0xbe>
   21546:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   2154a:	606b      	str	r3, [r5, #4]
   2154c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   21550:	6929      	ldr	r1, [r5, #16]
   21552:	81ab      	strh	r3, [r5, #12]
   21554:	04da      	lsls	r2, r3, #19
   21556:	6029      	str	r1, [r5, #0]
   21558:	d5b9      	bpl.n	214ce <__sflush_r+0x6a>
   2155a:	2c00      	cmp	r4, #0
   2155c:	d1b7      	bne.n	214ce <__sflush_r+0x6a>
   2155e:	6528      	str	r0, [r5, #80]	; 0x50
   21560:	e7b5      	b.n	214ce <__sflush_r+0x6a>
   21562:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21564:	2a00      	cmp	r2, #0
   21566:	dc8c      	bgt.n	21482 <__sflush_r+0x1e>
   21568:	e7d8      	b.n	2151c <__sflush_r+0xb8>
   2156a:	2301      	movs	r3, #1
   2156c:	69e9      	ldr	r1, [r5, #28]
   2156e:	4640      	mov	r0, r8
   21570:	47a0      	blx	r4
   21572:	1c43      	adds	r3, r0, #1
   21574:	4602      	mov	r2, r0
   21576:	d002      	beq.n	2157e <__sflush_r+0x11a>
   21578:	89ab      	ldrh	r3, [r5, #12]
   2157a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2157c:	e78e      	b.n	2149c <__sflush_r+0x38>
   2157e:	f8d8 3000 	ldr.w	r3, [r8]
   21582:	2b00      	cmp	r3, #0
   21584:	d0f8      	beq.n	21578 <__sflush_r+0x114>
   21586:	2b1d      	cmp	r3, #29
   21588:	d001      	beq.n	2158e <__sflush_r+0x12a>
   2158a:	2b16      	cmp	r3, #22
   2158c:	d102      	bne.n	21594 <__sflush_r+0x130>
   2158e:	f8c8 6000 	str.w	r6, [r8]
   21592:	e7c3      	b.n	2151c <__sflush_r+0xb8>
   21594:	89ab      	ldrh	r3, [r5, #12]
   21596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2159a:	81ab      	strh	r3, [r5, #12]
   2159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   215a0:	20400001 	.word	0x20400001

000215a4 <_fflush_r>:
   215a4:	b538      	push	{r3, r4, r5, lr}
   215a6:	460d      	mov	r5, r1
   215a8:	4604      	mov	r4, r0
   215aa:	b108      	cbz	r0, 215b0 <_fflush_r+0xc>
   215ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
   215ae:	b1bb      	cbz	r3, 215e0 <_fflush_r+0x3c>
   215b0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   215b4:	b188      	cbz	r0, 215da <_fflush_r+0x36>
   215b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   215b8:	07db      	lsls	r3, r3, #31
   215ba:	d401      	bmi.n	215c0 <_fflush_r+0x1c>
   215bc:	0581      	lsls	r1, r0, #22
   215be:	d517      	bpl.n	215f0 <_fflush_r+0x4c>
   215c0:	4620      	mov	r0, r4
   215c2:	4629      	mov	r1, r5
   215c4:	f7ff ff4e 	bl	21464 <__sflush_r>
   215c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   215ca:	07da      	lsls	r2, r3, #31
   215cc:	4604      	mov	r4, r0
   215ce:	d402      	bmi.n	215d6 <_fflush_r+0x32>
   215d0:	89ab      	ldrh	r3, [r5, #12]
   215d2:	059b      	lsls	r3, r3, #22
   215d4:	d507      	bpl.n	215e6 <_fflush_r+0x42>
   215d6:	4620      	mov	r0, r4
   215d8:	bd38      	pop	{r3, r4, r5, pc}
   215da:	4604      	mov	r4, r0
   215dc:	4620      	mov	r0, r4
   215de:	bd38      	pop	{r3, r4, r5, pc}
   215e0:	f000 f838 	bl	21654 <__sinit>
   215e4:	e7e4      	b.n	215b0 <_fflush_r+0xc>
   215e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   215e8:	f7fc fabc 	bl	1db64 <__retarget_lock_release_recursive>
   215ec:	4620      	mov	r0, r4
   215ee:	bd38      	pop	{r3, r4, r5, pc}
   215f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   215f2:	f7fc fab5 	bl	1db60 <__retarget_lock_acquire_recursive>
   215f6:	e7e3      	b.n	215c0 <_fflush_r+0x1c>

000215f8 <_cleanup_r>:
   215f8:	4901      	ldr	r1, [pc, #4]	; (21600 <_cleanup_r+0x8>)
   215fa:	f000 b9b3 	b.w	21964 <_fwalk_reent>
   215fe:	bf00      	nop
   21600:	00022389 	.word	0x00022389

00021604 <std.isra.0>:
   21604:	b510      	push	{r4, lr}
   21606:	2300      	movs	r3, #0
   21608:	4604      	mov	r4, r0
   2160a:	8181      	strh	r1, [r0, #12]
   2160c:	81c2      	strh	r2, [r0, #14]
   2160e:	6003      	str	r3, [r0, #0]
   21610:	6043      	str	r3, [r0, #4]
   21612:	6083      	str	r3, [r0, #8]
   21614:	6643      	str	r3, [r0, #100]	; 0x64
   21616:	6103      	str	r3, [r0, #16]
   21618:	6143      	str	r3, [r0, #20]
   2161a:	6183      	str	r3, [r0, #24]
   2161c:	4619      	mov	r1, r3
   2161e:	2208      	movs	r2, #8
   21620:	305c      	adds	r0, #92	; 0x5c
   21622:	f7fc fee3 	bl	1e3ec <memset>
   21626:	4807      	ldr	r0, [pc, #28]	; (21644 <std.isra.0+0x40>)
   21628:	4907      	ldr	r1, [pc, #28]	; (21648 <std.isra.0+0x44>)
   2162a:	4a08      	ldr	r2, [pc, #32]	; (2164c <std.isra.0+0x48>)
   2162c:	4b08      	ldr	r3, [pc, #32]	; (21650 <std.isra.0+0x4c>)
   2162e:	6220      	str	r0, [r4, #32]
   21630:	61e4      	str	r4, [r4, #28]
   21632:	6261      	str	r1, [r4, #36]	; 0x24
   21634:	62a2      	str	r2, [r4, #40]	; 0x28
   21636:	62e3      	str	r3, [r4, #44]	; 0x2c
   21638:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2163c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21640:	f7fc ba8a 	b.w	1db58 <__retarget_lock_init_recursive>
   21644:	000220bd 	.word	0x000220bd
   21648:	000220e1 	.word	0x000220e1
   2164c:	0002211d 	.word	0x0002211d
   21650:	0002213d 	.word	0x0002213d

00021654 <__sinit>:
   21654:	b510      	push	{r4, lr}
   21656:	4604      	mov	r4, r0
   21658:	4812      	ldr	r0, [pc, #72]	; (216a4 <__sinit+0x50>)
   2165a:	f7fc fa81 	bl	1db60 <__retarget_lock_acquire_recursive>
   2165e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21660:	b9d2      	cbnz	r2, 21698 <__sinit+0x44>
   21662:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21666:	4810      	ldr	r0, [pc, #64]	; (216a8 <__sinit+0x54>)
   21668:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2166c:	2103      	movs	r1, #3
   2166e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21672:	63e0      	str	r0, [r4, #60]	; 0x3c
   21674:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21678:	6860      	ldr	r0, [r4, #4]
   2167a:	2104      	movs	r1, #4
   2167c:	f7ff ffc2 	bl	21604 <std.isra.0>
   21680:	2201      	movs	r2, #1
   21682:	2109      	movs	r1, #9
   21684:	68a0      	ldr	r0, [r4, #8]
   21686:	f7ff ffbd 	bl	21604 <std.isra.0>
   2168a:	2202      	movs	r2, #2
   2168c:	2112      	movs	r1, #18
   2168e:	68e0      	ldr	r0, [r4, #12]
   21690:	f7ff ffb8 	bl	21604 <std.isra.0>
   21694:	2301      	movs	r3, #1
   21696:	63a3      	str	r3, [r4, #56]	; 0x38
   21698:	4802      	ldr	r0, [pc, #8]	; (216a4 <__sinit+0x50>)
   2169a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2169e:	f7fc ba61 	b.w	1db64 <__retarget_lock_release_recursive>
   216a2:	bf00      	nop
   216a4:	2000239c 	.word	0x2000239c
   216a8:	000215f9 	.word	0x000215f9

000216ac <__sfp_lock_acquire>:
   216ac:	4801      	ldr	r0, [pc, #4]	; (216b4 <__sfp_lock_acquire+0x8>)
   216ae:	f7fc ba57 	b.w	1db60 <__retarget_lock_acquire_recursive>
   216b2:	bf00      	nop
   216b4:	200023b0 	.word	0x200023b0

000216b8 <__sfp_lock_release>:
   216b8:	4801      	ldr	r0, [pc, #4]	; (216c0 <__sfp_lock_release+0x8>)
   216ba:	f7fc ba53 	b.w	1db64 <__retarget_lock_release_recursive>
   216be:	bf00      	nop
   216c0:	200023b0 	.word	0x200023b0

000216c4 <__libc_fini_array>:
   216c4:	b538      	push	{r3, r4, r5, lr}
   216c6:	4c0a      	ldr	r4, [pc, #40]	; (216f0 <__libc_fini_array+0x2c>)
   216c8:	4d0a      	ldr	r5, [pc, #40]	; (216f4 <__libc_fini_array+0x30>)
   216ca:	1b64      	subs	r4, r4, r5
   216cc:	10a4      	asrs	r4, r4, #2
   216ce:	d00a      	beq.n	216e6 <__libc_fini_array+0x22>
   216d0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   216d4:	3b01      	subs	r3, #1
   216d6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   216da:	3c01      	subs	r4, #1
   216dc:	f855 3904 	ldr.w	r3, [r5], #-4
   216e0:	4798      	blx	r3
   216e2:	2c00      	cmp	r4, #0
   216e4:	d1f9      	bne.n	216da <__libc_fini_array+0x16>
   216e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   216ea:	f001 b8d7 	b.w	2289c <_fini>
   216ee:	bf00      	nop
   216f0:	000228e4 	.word	0x000228e4
   216f4:	000228e0 	.word	0x000228e0

000216f8 <_malloc_trim_r>:
   216f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   216fa:	4f24      	ldr	r7, [pc, #144]	; (2178c <_malloc_trim_r+0x94>)
   216fc:	460c      	mov	r4, r1
   216fe:	4606      	mov	r6, r0
   21700:	f7fc fec2 	bl	1e488 <__malloc_lock>
   21704:	68bb      	ldr	r3, [r7, #8]
   21706:	685d      	ldr	r5, [r3, #4]
   21708:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2170c:	310f      	adds	r1, #15
   2170e:	f025 0503 	bic.w	r5, r5, #3
   21712:	4429      	add	r1, r5
   21714:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   21718:	f021 010f 	bic.w	r1, r1, #15
   2171c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21720:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21724:	db07      	blt.n	21736 <_malloc_trim_r+0x3e>
   21726:	2100      	movs	r1, #0
   21728:	4630      	mov	r0, r6
   2172a:	f7fd f89f 	bl	1e86c <_sbrk_r>
   2172e:	68bb      	ldr	r3, [r7, #8]
   21730:	442b      	add	r3, r5
   21732:	4298      	cmp	r0, r3
   21734:	d004      	beq.n	21740 <_malloc_trim_r+0x48>
   21736:	4630      	mov	r0, r6
   21738:	f7fc feac 	bl	1e494 <__malloc_unlock>
   2173c:	2000      	movs	r0, #0
   2173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21740:	4261      	negs	r1, r4
   21742:	4630      	mov	r0, r6
   21744:	f7fd f892 	bl	1e86c <_sbrk_r>
   21748:	3001      	adds	r0, #1
   2174a:	d00d      	beq.n	21768 <_malloc_trim_r+0x70>
   2174c:	4b10      	ldr	r3, [pc, #64]	; (21790 <_malloc_trim_r+0x98>)
   2174e:	68ba      	ldr	r2, [r7, #8]
   21750:	6819      	ldr	r1, [r3, #0]
   21752:	1b2d      	subs	r5, r5, r4
   21754:	f045 0501 	orr.w	r5, r5, #1
   21758:	4630      	mov	r0, r6
   2175a:	1b09      	subs	r1, r1, r4
   2175c:	6055      	str	r5, [r2, #4]
   2175e:	6019      	str	r1, [r3, #0]
   21760:	f7fc fe98 	bl	1e494 <__malloc_unlock>
   21764:	2001      	movs	r0, #1
   21766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21768:	2100      	movs	r1, #0
   2176a:	4630      	mov	r0, r6
   2176c:	f7fd f87e 	bl	1e86c <_sbrk_r>
   21770:	68ba      	ldr	r2, [r7, #8]
   21772:	1a83      	subs	r3, r0, r2
   21774:	2b0f      	cmp	r3, #15
   21776:	ddde      	ble.n	21736 <_malloc_trim_r+0x3e>
   21778:	4c06      	ldr	r4, [pc, #24]	; (21794 <_malloc_trim_r+0x9c>)
   2177a:	4905      	ldr	r1, [pc, #20]	; (21790 <_malloc_trim_r+0x98>)
   2177c:	6824      	ldr	r4, [r4, #0]
   2177e:	f043 0301 	orr.w	r3, r3, #1
   21782:	1b00      	subs	r0, r0, r4
   21784:	6053      	str	r3, [r2, #4]
   21786:	6008      	str	r0, [r1, #0]
   21788:	e7d5      	b.n	21736 <_malloc_trim_r+0x3e>
   2178a:	bf00      	nop
   2178c:	20000530 	.word	0x20000530
   21790:	200022b8 	.word	0x200022b8
   21794:	20000938 	.word	0x20000938

00021798 <_free_r>:
   21798:	2900      	cmp	r1, #0
   2179a:	d044      	beq.n	21826 <_free_r+0x8e>
   2179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   217a0:	460d      	mov	r5, r1
   217a2:	4680      	mov	r8, r0
   217a4:	f7fc fe70 	bl	1e488 <__malloc_lock>
   217a8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   217ac:	4969      	ldr	r1, [pc, #420]	; (21954 <_free_r+0x1bc>)
   217ae:	f027 0301 	bic.w	r3, r7, #1
   217b2:	f1a5 0408 	sub.w	r4, r5, #8
   217b6:	18e2      	adds	r2, r4, r3
   217b8:	688e      	ldr	r6, [r1, #8]
   217ba:	6850      	ldr	r0, [r2, #4]
   217bc:	42b2      	cmp	r2, r6
   217be:	f020 0003 	bic.w	r0, r0, #3
   217c2:	d05e      	beq.n	21882 <_free_r+0xea>
   217c4:	07fe      	lsls	r6, r7, #31
   217c6:	6050      	str	r0, [r2, #4]
   217c8:	d40b      	bmi.n	217e2 <_free_r+0x4a>
   217ca:	f855 7c08 	ldr.w	r7, [r5, #-8]
   217ce:	1be4      	subs	r4, r4, r7
   217d0:	f101 0e08 	add.w	lr, r1, #8
   217d4:	68a5      	ldr	r5, [r4, #8]
   217d6:	4575      	cmp	r5, lr
   217d8:	443b      	add	r3, r7
   217da:	d06d      	beq.n	218b8 <_free_r+0x120>
   217dc:	68e7      	ldr	r7, [r4, #12]
   217de:	60ef      	str	r7, [r5, #12]
   217e0:	60bd      	str	r5, [r7, #8]
   217e2:	1815      	adds	r5, r2, r0
   217e4:	686d      	ldr	r5, [r5, #4]
   217e6:	07ed      	lsls	r5, r5, #31
   217e8:	d53e      	bpl.n	21868 <_free_r+0xd0>
   217ea:	f043 0201 	orr.w	r2, r3, #1
   217ee:	6062      	str	r2, [r4, #4]
   217f0:	50e3      	str	r3, [r4, r3]
   217f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   217f6:	d217      	bcs.n	21828 <_free_r+0x90>
   217f8:	08db      	lsrs	r3, r3, #3
   217fa:	1c58      	adds	r0, r3, #1
   217fc:	109a      	asrs	r2, r3, #2
   217fe:	684d      	ldr	r5, [r1, #4]
   21800:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   21804:	60a7      	str	r7, [r4, #8]
   21806:	2301      	movs	r3, #1
   21808:	4093      	lsls	r3, r2
   2180a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2180e:	432b      	orrs	r3, r5
   21810:	3a08      	subs	r2, #8
   21812:	60e2      	str	r2, [r4, #12]
   21814:	604b      	str	r3, [r1, #4]
   21816:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2181a:	60fc      	str	r4, [r7, #12]
   2181c:	4640      	mov	r0, r8
   2181e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21822:	f7fc be37 	b.w	1e494 <__malloc_unlock>
   21826:	4770      	bx	lr
   21828:	0a5a      	lsrs	r2, r3, #9
   2182a:	2a04      	cmp	r2, #4
   2182c:	d852      	bhi.n	218d4 <_free_r+0x13c>
   2182e:	099a      	lsrs	r2, r3, #6
   21830:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21834:	00ff      	lsls	r7, r7, #3
   21836:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2183a:	19c8      	adds	r0, r1, r7
   2183c:	59ca      	ldr	r2, [r1, r7]
   2183e:	3808      	subs	r0, #8
   21840:	4290      	cmp	r0, r2
   21842:	d04f      	beq.n	218e4 <_free_r+0x14c>
   21844:	6851      	ldr	r1, [r2, #4]
   21846:	f021 0103 	bic.w	r1, r1, #3
   2184a:	428b      	cmp	r3, r1
   2184c:	d232      	bcs.n	218b4 <_free_r+0x11c>
   2184e:	6892      	ldr	r2, [r2, #8]
   21850:	4290      	cmp	r0, r2
   21852:	d1f7      	bne.n	21844 <_free_r+0xac>
   21854:	68c3      	ldr	r3, [r0, #12]
   21856:	60a0      	str	r0, [r4, #8]
   21858:	60e3      	str	r3, [r4, #12]
   2185a:	609c      	str	r4, [r3, #8]
   2185c:	60c4      	str	r4, [r0, #12]
   2185e:	4640      	mov	r0, r8
   21860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21864:	f7fc be16 	b.w	1e494 <__malloc_unlock>
   21868:	6895      	ldr	r5, [r2, #8]
   2186a:	4f3b      	ldr	r7, [pc, #236]	; (21958 <_free_r+0x1c0>)
   2186c:	42bd      	cmp	r5, r7
   2186e:	4403      	add	r3, r0
   21870:	d040      	beq.n	218f4 <_free_r+0x15c>
   21872:	68d0      	ldr	r0, [r2, #12]
   21874:	60e8      	str	r0, [r5, #12]
   21876:	f043 0201 	orr.w	r2, r3, #1
   2187a:	6085      	str	r5, [r0, #8]
   2187c:	6062      	str	r2, [r4, #4]
   2187e:	50e3      	str	r3, [r4, r3]
   21880:	e7b7      	b.n	217f2 <_free_r+0x5a>
   21882:	07ff      	lsls	r7, r7, #31
   21884:	4403      	add	r3, r0
   21886:	d407      	bmi.n	21898 <_free_r+0x100>
   21888:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2188c:	1aa4      	subs	r4, r4, r2
   2188e:	4413      	add	r3, r2
   21890:	68a0      	ldr	r0, [r4, #8]
   21892:	68e2      	ldr	r2, [r4, #12]
   21894:	60c2      	str	r2, [r0, #12]
   21896:	6090      	str	r0, [r2, #8]
   21898:	4a30      	ldr	r2, [pc, #192]	; (2195c <_free_r+0x1c4>)
   2189a:	6812      	ldr	r2, [r2, #0]
   2189c:	f043 0001 	orr.w	r0, r3, #1
   218a0:	4293      	cmp	r3, r2
   218a2:	6060      	str	r0, [r4, #4]
   218a4:	608c      	str	r4, [r1, #8]
   218a6:	d3b9      	bcc.n	2181c <_free_r+0x84>
   218a8:	4b2d      	ldr	r3, [pc, #180]	; (21960 <_free_r+0x1c8>)
   218aa:	4640      	mov	r0, r8
   218ac:	6819      	ldr	r1, [r3, #0]
   218ae:	f7ff ff23 	bl	216f8 <_malloc_trim_r>
   218b2:	e7b3      	b.n	2181c <_free_r+0x84>
   218b4:	4610      	mov	r0, r2
   218b6:	e7cd      	b.n	21854 <_free_r+0xbc>
   218b8:	1811      	adds	r1, r2, r0
   218ba:	6849      	ldr	r1, [r1, #4]
   218bc:	07c9      	lsls	r1, r1, #31
   218be:	d444      	bmi.n	2194a <_free_r+0x1b2>
   218c0:	6891      	ldr	r1, [r2, #8]
   218c2:	68d2      	ldr	r2, [r2, #12]
   218c4:	60ca      	str	r2, [r1, #12]
   218c6:	4403      	add	r3, r0
   218c8:	f043 0001 	orr.w	r0, r3, #1
   218cc:	6091      	str	r1, [r2, #8]
   218ce:	6060      	str	r0, [r4, #4]
   218d0:	50e3      	str	r3, [r4, r3]
   218d2:	e7a3      	b.n	2181c <_free_r+0x84>
   218d4:	2a14      	cmp	r2, #20
   218d6:	d816      	bhi.n	21906 <_free_r+0x16e>
   218d8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   218dc:	00ff      	lsls	r7, r7, #3
   218de:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   218e2:	e7aa      	b.n	2183a <_free_r+0xa2>
   218e4:	10aa      	asrs	r2, r5, #2
   218e6:	2301      	movs	r3, #1
   218e8:	684d      	ldr	r5, [r1, #4]
   218ea:	4093      	lsls	r3, r2
   218ec:	432b      	orrs	r3, r5
   218ee:	604b      	str	r3, [r1, #4]
   218f0:	4603      	mov	r3, r0
   218f2:	e7b0      	b.n	21856 <_free_r+0xbe>
   218f4:	f043 0201 	orr.w	r2, r3, #1
   218f8:	614c      	str	r4, [r1, #20]
   218fa:	610c      	str	r4, [r1, #16]
   218fc:	60e5      	str	r5, [r4, #12]
   218fe:	60a5      	str	r5, [r4, #8]
   21900:	6062      	str	r2, [r4, #4]
   21902:	50e3      	str	r3, [r4, r3]
   21904:	e78a      	b.n	2181c <_free_r+0x84>
   21906:	2a54      	cmp	r2, #84	; 0x54
   21908:	d806      	bhi.n	21918 <_free_r+0x180>
   2190a:	0b1a      	lsrs	r2, r3, #12
   2190c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   21910:	00ff      	lsls	r7, r7, #3
   21912:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   21916:	e790      	b.n	2183a <_free_r+0xa2>
   21918:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2191c:	d806      	bhi.n	2192c <_free_r+0x194>
   2191e:	0bda      	lsrs	r2, r3, #15
   21920:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21924:	00ff      	lsls	r7, r7, #3
   21926:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2192a:	e786      	b.n	2183a <_free_r+0xa2>
   2192c:	f240 5054 	movw	r0, #1364	; 0x554
   21930:	4282      	cmp	r2, r0
   21932:	d806      	bhi.n	21942 <_free_r+0x1aa>
   21934:	0c9a      	lsrs	r2, r3, #18
   21936:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2193a:	00ff      	lsls	r7, r7, #3
   2193c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21940:	e77b      	b.n	2183a <_free_r+0xa2>
   21942:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21946:	257e      	movs	r5, #126	; 0x7e
   21948:	e777      	b.n	2183a <_free_r+0xa2>
   2194a:	f043 0101 	orr.w	r1, r3, #1
   2194e:	6061      	str	r1, [r4, #4]
   21950:	6013      	str	r3, [r2, #0]
   21952:	e763      	b.n	2181c <_free_r+0x84>
   21954:	20000530 	.word	0x20000530
   21958:	20000538 	.word	0x20000538
   2195c:	2000093c 	.word	0x2000093c
   21960:	200022e8 	.word	0x200022e8

00021964 <_fwalk_reent>:
   21964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21968:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   2196c:	d01f      	beq.n	219ae <_fwalk_reent+0x4a>
   2196e:	4688      	mov	r8, r1
   21970:	4606      	mov	r6, r0
   21972:	f04f 0900 	mov.w	r9, #0
   21976:	687d      	ldr	r5, [r7, #4]
   21978:	68bc      	ldr	r4, [r7, #8]
   2197a:	3d01      	subs	r5, #1
   2197c:	d411      	bmi.n	219a2 <_fwalk_reent+0x3e>
   2197e:	89a3      	ldrh	r3, [r4, #12]
   21980:	2b01      	cmp	r3, #1
   21982:	f105 35ff 	add.w	r5, r5, #4294967295
   21986:	d908      	bls.n	2199a <_fwalk_reent+0x36>
   21988:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2198c:	3301      	adds	r3, #1
   2198e:	4621      	mov	r1, r4
   21990:	4630      	mov	r0, r6
   21992:	d002      	beq.n	2199a <_fwalk_reent+0x36>
   21994:	47c0      	blx	r8
   21996:	ea49 0900 	orr.w	r9, r9, r0
   2199a:	1c6b      	adds	r3, r5, #1
   2199c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   219a0:	d1ed      	bne.n	2197e <_fwalk_reent+0x1a>
   219a2:	683f      	ldr	r7, [r7, #0]
   219a4:	2f00      	cmp	r7, #0
   219a6:	d1e6      	bne.n	21976 <_fwalk_reent+0x12>
   219a8:	4648      	mov	r0, r9
   219aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   219ae:	46b9      	mov	r9, r7
   219b0:	4648      	mov	r0, r9
   219b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   219b6:	bf00      	nop

000219b8 <_localeconv_r>:
   219b8:	4a04      	ldr	r2, [pc, #16]	; (219cc <_localeconv_r+0x14>)
   219ba:	4b05      	ldr	r3, [pc, #20]	; (219d0 <_localeconv_r+0x18>)
   219bc:	6812      	ldr	r2, [r2, #0]
   219be:	6b50      	ldr	r0, [r2, #52]	; 0x34
   219c0:	2800      	cmp	r0, #0
   219c2:	bf08      	it	eq
   219c4:	4618      	moveq	r0, r3
   219c6:	30f0      	adds	r0, #240	; 0xf0
   219c8:	4770      	bx	lr
   219ca:	bf00      	nop
   219cc:	20000100 	.word	0x20000100
   219d0:	20000944 	.word	0x20000944

000219d4 <__swhatbuf_r>:
   219d4:	b570      	push	{r4, r5, r6, lr}
   219d6:	460c      	mov	r4, r1
   219d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   219dc:	2900      	cmp	r1, #0
   219de:	b090      	sub	sp, #64	; 0x40
   219e0:	4615      	mov	r5, r2
   219e2:	461e      	mov	r6, r3
   219e4:	db14      	blt.n	21a10 <__swhatbuf_r+0x3c>
   219e6:	aa01      	add	r2, sp, #4
   219e8:	f000 fd30 	bl	2244c <_fstat_r>
   219ec:	2800      	cmp	r0, #0
   219ee:	db0f      	blt.n	21a10 <__swhatbuf_r+0x3c>
   219f0:	9a02      	ldr	r2, [sp, #8]
   219f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   219f6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   219fa:	fab2 f282 	clz	r2, r2
   219fe:	0952      	lsrs	r2, r2, #5
   21a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21a04:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21a08:	6032      	str	r2, [r6, #0]
   21a0a:	602b      	str	r3, [r5, #0]
   21a0c:	b010      	add	sp, #64	; 0x40
   21a0e:	bd70      	pop	{r4, r5, r6, pc}
   21a10:	89a2      	ldrh	r2, [r4, #12]
   21a12:	2300      	movs	r3, #0
   21a14:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21a18:	6033      	str	r3, [r6, #0]
   21a1a:	d004      	beq.n	21a26 <__swhatbuf_r+0x52>
   21a1c:	2240      	movs	r2, #64	; 0x40
   21a1e:	4618      	mov	r0, r3
   21a20:	602a      	str	r2, [r5, #0]
   21a22:	b010      	add	sp, #64	; 0x40
   21a24:	bd70      	pop	{r4, r5, r6, pc}
   21a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21a2a:	602b      	str	r3, [r5, #0]
   21a2c:	b010      	add	sp, #64	; 0x40
   21a2e:	bd70      	pop	{r4, r5, r6, pc}

00021a30 <__smakebuf_r>:
   21a30:	898a      	ldrh	r2, [r1, #12]
   21a32:	0792      	lsls	r2, r2, #30
   21a34:	460b      	mov	r3, r1
   21a36:	d506      	bpl.n	21a46 <__smakebuf_r+0x16>
   21a38:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21a3c:	2101      	movs	r1, #1
   21a3e:	601a      	str	r2, [r3, #0]
   21a40:	611a      	str	r2, [r3, #16]
   21a42:	6159      	str	r1, [r3, #20]
   21a44:	4770      	bx	lr
   21a46:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a48:	b083      	sub	sp, #12
   21a4a:	ab01      	add	r3, sp, #4
   21a4c:	466a      	mov	r2, sp
   21a4e:	460c      	mov	r4, r1
   21a50:	4606      	mov	r6, r0
   21a52:	f7ff ffbf 	bl	219d4 <__swhatbuf_r>
   21a56:	9900      	ldr	r1, [sp, #0]
   21a58:	4605      	mov	r5, r0
   21a5a:	4630      	mov	r0, r6
   21a5c:	f7fc f894 	bl	1db88 <_malloc_r>
   21a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21a64:	b1d8      	cbz	r0, 21a9e <__smakebuf_r+0x6e>
   21a66:	9a01      	ldr	r2, [sp, #4]
   21a68:	4f15      	ldr	r7, [pc, #84]	; (21ac0 <__smakebuf_r+0x90>)
   21a6a:	9900      	ldr	r1, [sp, #0]
   21a6c:	63f7      	str	r7, [r6, #60]	; 0x3c
   21a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21a72:	81a3      	strh	r3, [r4, #12]
   21a74:	6020      	str	r0, [r4, #0]
   21a76:	6120      	str	r0, [r4, #16]
   21a78:	6161      	str	r1, [r4, #20]
   21a7a:	b91a      	cbnz	r2, 21a84 <__smakebuf_r+0x54>
   21a7c:	432b      	orrs	r3, r5
   21a7e:	81a3      	strh	r3, [r4, #12]
   21a80:	b003      	add	sp, #12
   21a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a84:	4630      	mov	r0, r6
   21a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21a8a:	f000 fcf3 	bl	22474 <_isatty_r>
   21a8e:	b1a0      	cbz	r0, 21aba <__smakebuf_r+0x8a>
   21a90:	89a3      	ldrh	r3, [r4, #12]
   21a92:	f023 0303 	bic.w	r3, r3, #3
   21a96:	f043 0301 	orr.w	r3, r3, #1
   21a9a:	b21b      	sxth	r3, r3
   21a9c:	e7ee      	b.n	21a7c <__smakebuf_r+0x4c>
   21a9e:	059a      	lsls	r2, r3, #22
   21aa0:	d4ee      	bmi.n	21a80 <__smakebuf_r+0x50>
   21aa2:	f023 0303 	bic.w	r3, r3, #3
   21aa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21aaa:	f043 0302 	orr.w	r3, r3, #2
   21aae:	2101      	movs	r1, #1
   21ab0:	81a3      	strh	r3, [r4, #12]
   21ab2:	6022      	str	r2, [r4, #0]
   21ab4:	6122      	str	r2, [r4, #16]
   21ab6:	6161      	str	r1, [r4, #20]
   21ab8:	e7e2      	b.n	21a80 <__smakebuf_r+0x50>
   21aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21abe:	e7dd      	b.n	21a7c <__smakebuf_r+0x4c>
   21ac0:	000215f9 	.word	0x000215f9

00021ac4 <_Balloc>:
   21ac4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21ac6:	b570      	push	{r4, r5, r6, lr}
   21ac8:	4605      	mov	r5, r0
   21aca:	460c      	mov	r4, r1
   21acc:	b14b      	cbz	r3, 21ae2 <_Balloc+0x1e>
   21ace:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21ad2:	b180      	cbz	r0, 21af6 <_Balloc+0x32>
   21ad4:	6802      	ldr	r2, [r0, #0]
   21ad6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21ada:	2300      	movs	r3, #0
   21adc:	6103      	str	r3, [r0, #16]
   21ade:	60c3      	str	r3, [r0, #12]
   21ae0:	bd70      	pop	{r4, r5, r6, pc}
   21ae2:	2221      	movs	r2, #33	; 0x21
   21ae4:	2104      	movs	r1, #4
   21ae6:	f000 fc0d 	bl	22304 <_calloc_r>
   21aea:	64e8      	str	r0, [r5, #76]	; 0x4c
   21aec:	4603      	mov	r3, r0
   21aee:	2800      	cmp	r0, #0
   21af0:	d1ed      	bne.n	21ace <_Balloc+0xa>
   21af2:	2000      	movs	r0, #0
   21af4:	bd70      	pop	{r4, r5, r6, pc}
   21af6:	2101      	movs	r1, #1
   21af8:	fa01 f604 	lsl.w	r6, r1, r4
   21afc:	1d72      	adds	r2, r6, #5
   21afe:	4628      	mov	r0, r5
   21b00:	0092      	lsls	r2, r2, #2
   21b02:	f000 fbff 	bl	22304 <_calloc_r>
   21b06:	2800      	cmp	r0, #0
   21b08:	d0f3      	beq.n	21af2 <_Balloc+0x2e>
   21b0a:	6044      	str	r4, [r0, #4]
   21b0c:	6086      	str	r6, [r0, #8]
   21b0e:	e7e4      	b.n	21ada <_Balloc+0x16>

00021b10 <_Bfree>:
   21b10:	b131      	cbz	r1, 21b20 <_Bfree+0x10>
   21b12:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21b14:	684a      	ldr	r2, [r1, #4]
   21b16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21b1a:	6008      	str	r0, [r1, #0]
   21b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21b20:	4770      	bx	lr
   21b22:	bf00      	nop

00021b24 <__multadd>:
   21b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b26:	690c      	ldr	r4, [r1, #16]
   21b28:	b083      	sub	sp, #12
   21b2a:	460d      	mov	r5, r1
   21b2c:	4606      	mov	r6, r0
   21b2e:	f101 0e14 	add.w	lr, r1, #20
   21b32:	2700      	movs	r7, #0
   21b34:	f8de 0000 	ldr.w	r0, [lr]
   21b38:	b281      	uxth	r1, r0
   21b3a:	fb02 3301 	mla	r3, r2, r1, r3
   21b3e:	0c01      	lsrs	r1, r0, #16
   21b40:	0c18      	lsrs	r0, r3, #16
   21b42:	fb02 0101 	mla	r1, r2, r1, r0
   21b46:	b29b      	uxth	r3, r3
   21b48:	3701      	adds	r7, #1
   21b4a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21b4e:	42bc      	cmp	r4, r7
   21b50:	f84e 3b04 	str.w	r3, [lr], #4
   21b54:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21b58:	dcec      	bgt.n	21b34 <__multadd+0x10>
   21b5a:	b13b      	cbz	r3, 21b6c <__multadd+0x48>
   21b5c:	68aa      	ldr	r2, [r5, #8]
   21b5e:	4294      	cmp	r4, r2
   21b60:	da07      	bge.n	21b72 <__multadd+0x4e>
   21b62:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21b66:	3401      	adds	r4, #1
   21b68:	6153      	str	r3, [r2, #20]
   21b6a:	612c      	str	r4, [r5, #16]
   21b6c:	4628      	mov	r0, r5
   21b6e:	b003      	add	sp, #12
   21b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b72:	6869      	ldr	r1, [r5, #4]
   21b74:	9301      	str	r3, [sp, #4]
   21b76:	3101      	adds	r1, #1
   21b78:	4630      	mov	r0, r6
   21b7a:	f7ff ffa3 	bl	21ac4 <_Balloc>
   21b7e:	692a      	ldr	r2, [r5, #16]
   21b80:	3202      	adds	r2, #2
   21b82:	f105 010c 	add.w	r1, r5, #12
   21b86:	4607      	mov	r7, r0
   21b88:	0092      	lsls	r2, r2, #2
   21b8a:	300c      	adds	r0, #12
   21b8c:	f7fc fb30 	bl	1e1f0 <memcpy>
   21b90:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21b92:	6869      	ldr	r1, [r5, #4]
   21b94:	9b01      	ldr	r3, [sp, #4]
   21b96:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21b9a:	6028      	str	r0, [r5, #0]
   21b9c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21ba0:	463d      	mov	r5, r7
   21ba2:	e7de      	b.n	21b62 <__multadd+0x3e>

00021ba4 <__hi0bits>:
   21ba4:	0c02      	lsrs	r2, r0, #16
   21ba6:	0412      	lsls	r2, r2, #16
   21ba8:	4603      	mov	r3, r0
   21baa:	b9b2      	cbnz	r2, 21bda <__hi0bits+0x36>
   21bac:	0403      	lsls	r3, r0, #16
   21bae:	2010      	movs	r0, #16
   21bb0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21bb4:	bf04      	itt	eq
   21bb6:	021b      	lsleq	r3, r3, #8
   21bb8:	3008      	addeq	r0, #8
   21bba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21bbe:	bf04      	itt	eq
   21bc0:	011b      	lsleq	r3, r3, #4
   21bc2:	3004      	addeq	r0, #4
   21bc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21bc8:	bf04      	itt	eq
   21bca:	009b      	lsleq	r3, r3, #2
   21bcc:	3002      	addeq	r0, #2
   21bce:	2b00      	cmp	r3, #0
   21bd0:	db02      	blt.n	21bd8 <__hi0bits+0x34>
   21bd2:	005b      	lsls	r3, r3, #1
   21bd4:	d403      	bmi.n	21bde <__hi0bits+0x3a>
   21bd6:	2020      	movs	r0, #32
   21bd8:	4770      	bx	lr
   21bda:	2000      	movs	r0, #0
   21bdc:	e7e8      	b.n	21bb0 <__hi0bits+0xc>
   21bde:	3001      	adds	r0, #1
   21be0:	4770      	bx	lr
   21be2:	bf00      	nop

00021be4 <__lo0bits>:
   21be4:	6803      	ldr	r3, [r0, #0]
   21be6:	f013 0207 	ands.w	r2, r3, #7
   21bea:	4601      	mov	r1, r0
   21bec:	d007      	beq.n	21bfe <__lo0bits+0x1a>
   21bee:	07da      	lsls	r2, r3, #31
   21bf0:	d421      	bmi.n	21c36 <__lo0bits+0x52>
   21bf2:	0798      	lsls	r0, r3, #30
   21bf4:	d421      	bmi.n	21c3a <__lo0bits+0x56>
   21bf6:	089b      	lsrs	r3, r3, #2
   21bf8:	600b      	str	r3, [r1, #0]
   21bfa:	2002      	movs	r0, #2
   21bfc:	4770      	bx	lr
   21bfe:	b298      	uxth	r0, r3
   21c00:	b198      	cbz	r0, 21c2a <__lo0bits+0x46>
   21c02:	4610      	mov	r0, r2
   21c04:	f013 0fff 	tst.w	r3, #255	; 0xff
   21c08:	bf04      	itt	eq
   21c0a:	0a1b      	lsreq	r3, r3, #8
   21c0c:	3008      	addeq	r0, #8
   21c0e:	071a      	lsls	r2, r3, #28
   21c10:	bf04      	itt	eq
   21c12:	091b      	lsreq	r3, r3, #4
   21c14:	3004      	addeq	r0, #4
   21c16:	079a      	lsls	r2, r3, #30
   21c18:	bf04      	itt	eq
   21c1a:	089b      	lsreq	r3, r3, #2
   21c1c:	3002      	addeq	r0, #2
   21c1e:	07da      	lsls	r2, r3, #31
   21c20:	d407      	bmi.n	21c32 <__lo0bits+0x4e>
   21c22:	085b      	lsrs	r3, r3, #1
   21c24:	d104      	bne.n	21c30 <__lo0bits+0x4c>
   21c26:	2020      	movs	r0, #32
   21c28:	4770      	bx	lr
   21c2a:	0c1b      	lsrs	r3, r3, #16
   21c2c:	2010      	movs	r0, #16
   21c2e:	e7e9      	b.n	21c04 <__lo0bits+0x20>
   21c30:	3001      	adds	r0, #1
   21c32:	600b      	str	r3, [r1, #0]
   21c34:	4770      	bx	lr
   21c36:	2000      	movs	r0, #0
   21c38:	4770      	bx	lr
   21c3a:	085b      	lsrs	r3, r3, #1
   21c3c:	600b      	str	r3, [r1, #0]
   21c3e:	2001      	movs	r0, #1
   21c40:	4770      	bx	lr
   21c42:	bf00      	nop

00021c44 <__i2b>:
   21c44:	b510      	push	{r4, lr}
   21c46:	460c      	mov	r4, r1
   21c48:	2101      	movs	r1, #1
   21c4a:	f7ff ff3b 	bl	21ac4 <_Balloc>
   21c4e:	2201      	movs	r2, #1
   21c50:	6144      	str	r4, [r0, #20]
   21c52:	6102      	str	r2, [r0, #16]
   21c54:	bd10      	pop	{r4, pc}
   21c56:	bf00      	nop

00021c58 <__multiply>:
   21c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c5c:	690c      	ldr	r4, [r1, #16]
   21c5e:	6915      	ldr	r5, [r2, #16]
   21c60:	42ac      	cmp	r4, r5
   21c62:	b083      	sub	sp, #12
   21c64:	468b      	mov	fp, r1
   21c66:	4616      	mov	r6, r2
   21c68:	da04      	bge.n	21c74 <__multiply+0x1c>
   21c6a:	4622      	mov	r2, r4
   21c6c:	46b3      	mov	fp, r6
   21c6e:	462c      	mov	r4, r5
   21c70:	460e      	mov	r6, r1
   21c72:	4615      	mov	r5, r2
   21c74:	f8db 3008 	ldr.w	r3, [fp, #8]
   21c78:	f8db 1004 	ldr.w	r1, [fp, #4]
   21c7c:	eb04 0805 	add.w	r8, r4, r5
   21c80:	4598      	cmp	r8, r3
   21c82:	bfc8      	it	gt
   21c84:	3101      	addgt	r1, #1
   21c86:	f7ff ff1d 	bl	21ac4 <_Balloc>
   21c8a:	f100 0914 	add.w	r9, r0, #20
   21c8e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21c92:	45d1      	cmp	r9, sl
   21c94:	9000      	str	r0, [sp, #0]
   21c96:	d205      	bcs.n	21ca4 <__multiply+0x4c>
   21c98:	464b      	mov	r3, r9
   21c9a:	2100      	movs	r1, #0
   21c9c:	f843 1b04 	str.w	r1, [r3], #4
   21ca0:	459a      	cmp	sl, r3
   21ca2:	d8fb      	bhi.n	21c9c <__multiply+0x44>
   21ca4:	f106 0c14 	add.w	ip, r6, #20
   21ca8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21cac:	f10b 0b14 	add.w	fp, fp, #20
   21cb0:	459c      	cmp	ip, r3
   21cb2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21cb6:	d24c      	bcs.n	21d52 <__multiply+0xfa>
   21cb8:	f8cd a004 	str.w	sl, [sp, #4]
   21cbc:	469a      	mov	sl, r3
   21cbe:	f8dc 5000 	ldr.w	r5, [ip]
   21cc2:	b2af      	uxth	r7, r5
   21cc4:	b1ef      	cbz	r7, 21d02 <__multiply+0xaa>
   21cc6:	2100      	movs	r1, #0
   21cc8:	464d      	mov	r5, r9
   21cca:	465e      	mov	r6, fp
   21ccc:	460c      	mov	r4, r1
   21cce:	f856 2b04 	ldr.w	r2, [r6], #4
   21cd2:	6828      	ldr	r0, [r5, #0]
   21cd4:	b293      	uxth	r3, r2
   21cd6:	b281      	uxth	r1, r0
   21cd8:	fb07 1303 	mla	r3, r7, r3, r1
   21cdc:	0c12      	lsrs	r2, r2, #16
   21cde:	0c01      	lsrs	r1, r0, #16
   21ce0:	4423      	add	r3, r4
   21ce2:	fb07 1102 	mla	r1, r7, r2, r1
   21ce6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21cea:	b29b      	uxth	r3, r3
   21cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21cf0:	45b6      	cmp	lr, r6
   21cf2:	f845 3b04 	str.w	r3, [r5], #4
   21cf6:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21cfa:	d8e8      	bhi.n	21cce <__multiply+0x76>
   21cfc:	602c      	str	r4, [r5, #0]
   21cfe:	f8dc 5000 	ldr.w	r5, [ip]
   21d02:	0c2d      	lsrs	r5, r5, #16
   21d04:	d01d      	beq.n	21d42 <__multiply+0xea>
   21d06:	f8d9 3000 	ldr.w	r3, [r9]
   21d0a:	4648      	mov	r0, r9
   21d0c:	461c      	mov	r4, r3
   21d0e:	4659      	mov	r1, fp
   21d10:	2200      	movs	r2, #0
   21d12:	880e      	ldrh	r6, [r1, #0]
   21d14:	0c24      	lsrs	r4, r4, #16
   21d16:	fb05 4406 	mla	r4, r5, r6, r4
   21d1a:	4422      	add	r2, r4
   21d1c:	b29b      	uxth	r3, r3
   21d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21d22:	f840 3b04 	str.w	r3, [r0], #4
   21d26:	f851 3b04 	ldr.w	r3, [r1], #4
   21d2a:	6804      	ldr	r4, [r0, #0]
   21d2c:	0c1b      	lsrs	r3, r3, #16
   21d2e:	b2a6      	uxth	r6, r4
   21d30:	fb05 6303 	mla	r3, r5, r3, r6
   21d34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21d38:	458e      	cmp	lr, r1
   21d3a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21d3e:	d8e8      	bhi.n	21d12 <__multiply+0xba>
   21d40:	6003      	str	r3, [r0, #0]
   21d42:	f10c 0c04 	add.w	ip, ip, #4
   21d46:	45e2      	cmp	sl, ip
   21d48:	f109 0904 	add.w	r9, r9, #4
   21d4c:	d8b7      	bhi.n	21cbe <__multiply+0x66>
   21d4e:	f8dd a004 	ldr.w	sl, [sp, #4]
   21d52:	f1b8 0f00 	cmp.w	r8, #0
   21d56:	dd0b      	ble.n	21d70 <__multiply+0x118>
   21d58:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21d5c:	f1aa 0a04 	sub.w	sl, sl, #4
   21d60:	b11b      	cbz	r3, 21d6a <__multiply+0x112>
   21d62:	e005      	b.n	21d70 <__multiply+0x118>
   21d64:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21d68:	b913      	cbnz	r3, 21d70 <__multiply+0x118>
   21d6a:	f1b8 0801 	subs.w	r8, r8, #1
   21d6e:	d1f9      	bne.n	21d64 <__multiply+0x10c>
   21d70:	9800      	ldr	r0, [sp, #0]
   21d72:	f8c0 8010 	str.w	r8, [r0, #16]
   21d76:	b003      	add	sp, #12
   21d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021d7c <__pow5mult>:
   21d7c:	f012 0303 	ands.w	r3, r2, #3
   21d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d84:	4614      	mov	r4, r2
   21d86:	4607      	mov	r7, r0
   21d88:	d12e      	bne.n	21de8 <__pow5mult+0x6c>
   21d8a:	460d      	mov	r5, r1
   21d8c:	10a4      	asrs	r4, r4, #2
   21d8e:	d01c      	beq.n	21dca <__pow5mult+0x4e>
   21d90:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21d92:	b396      	cbz	r6, 21dfa <__pow5mult+0x7e>
   21d94:	07e3      	lsls	r3, r4, #31
   21d96:	f04f 0800 	mov.w	r8, #0
   21d9a:	d406      	bmi.n	21daa <__pow5mult+0x2e>
   21d9c:	1064      	asrs	r4, r4, #1
   21d9e:	d014      	beq.n	21dca <__pow5mult+0x4e>
   21da0:	6830      	ldr	r0, [r6, #0]
   21da2:	b1a8      	cbz	r0, 21dd0 <__pow5mult+0x54>
   21da4:	4606      	mov	r6, r0
   21da6:	07e3      	lsls	r3, r4, #31
   21da8:	d5f8      	bpl.n	21d9c <__pow5mult+0x20>
   21daa:	4632      	mov	r2, r6
   21dac:	4629      	mov	r1, r5
   21dae:	4638      	mov	r0, r7
   21db0:	f7ff ff52 	bl	21c58 <__multiply>
   21db4:	b1b5      	cbz	r5, 21de4 <__pow5mult+0x68>
   21db6:	686a      	ldr	r2, [r5, #4]
   21db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21dba:	1064      	asrs	r4, r4, #1
   21dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21dc0:	6029      	str	r1, [r5, #0]
   21dc2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21dc6:	4605      	mov	r5, r0
   21dc8:	d1ea      	bne.n	21da0 <__pow5mult+0x24>
   21dca:	4628      	mov	r0, r5
   21dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21dd0:	4632      	mov	r2, r6
   21dd2:	4631      	mov	r1, r6
   21dd4:	4638      	mov	r0, r7
   21dd6:	f7ff ff3f 	bl	21c58 <__multiply>
   21dda:	6030      	str	r0, [r6, #0]
   21ddc:	f8c0 8000 	str.w	r8, [r0]
   21de0:	4606      	mov	r6, r0
   21de2:	e7e0      	b.n	21da6 <__pow5mult+0x2a>
   21de4:	4605      	mov	r5, r0
   21de6:	e7d9      	b.n	21d9c <__pow5mult+0x20>
   21de8:	1e5a      	subs	r2, r3, #1
   21dea:	4d0b      	ldr	r5, [pc, #44]	; (21e18 <__pow5mult+0x9c>)
   21dec:	2300      	movs	r3, #0
   21dee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21df2:	f7ff fe97 	bl	21b24 <__multadd>
   21df6:	4605      	mov	r5, r0
   21df8:	e7c8      	b.n	21d8c <__pow5mult+0x10>
   21dfa:	2101      	movs	r1, #1
   21dfc:	4638      	mov	r0, r7
   21dfe:	f7ff fe61 	bl	21ac4 <_Balloc>
   21e02:	f240 2171 	movw	r1, #625	; 0x271
   21e06:	2201      	movs	r2, #1
   21e08:	2300      	movs	r3, #0
   21e0a:	6141      	str	r1, [r0, #20]
   21e0c:	6102      	str	r2, [r0, #16]
   21e0e:	4606      	mov	r6, r0
   21e10:	64b8      	str	r0, [r7, #72]	; 0x48
   21e12:	6003      	str	r3, [r0, #0]
   21e14:	e7be      	b.n	21d94 <__pow5mult+0x18>
   21e16:	bf00      	nop
   21e18:	00024cd8 	.word	0x00024cd8

00021e1c <__lshift>:
   21e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21e20:	4691      	mov	r9, r2
   21e22:	690a      	ldr	r2, [r1, #16]
   21e24:	688b      	ldr	r3, [r1, #8]
   21e26:	ea4f 1469 	mov.w	r4, r9, asr #5
   21e2a:	eb04 0802 	add.w	r8, r4, r2
   21e2e:	f108 0501 	add.w	r5, r8, #1
   21e32:	429d      	cmp	r5, r3
   21e34:	460e      	mov	r6, r1
   21e36:	4607      	mov	r7, r0
   21e38:	6849      	ldr	r1, [r1, #4]
   21e3a:	dd04      	ble.n	21e46 <__lshift+0x2a>
   21e3c:	005b      	lsls	r3, r3, #1
   21e3e:	429d      	cmp	r5, r3
   21e40:	f101 0101 	add.w	r1, r1, #1
   21e44:	dcfa      	bgt.n	21e3c <__lshift+0x20>
   21e46:	4638      	mov	r0, r7
   21e48:	f7ff fe3c 	bl	21ac4 <_Balloc>
   21e4c:	2c00      	cmp	r4, #0
   21e4e:	f100 0314 	add.w	r3, r0, #20
   21e52:	dd06      	ble.n	21e62 <__lshift+0x46>
   21e54:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   21e58:	2100      	movs	r1, #0
   21e5a:	f843 1b04 	str.w	r1, [r3], #4
   21e5e:	429a      	cmp	r2, r3
   21e60:	d1fb      	bne.n	21e5a <__lshift+0x3e>
   21e62:	6934      	ldr	r4, [r6, #16]
   21e64:	f106 0114 	add.w	r1, r6, #20
   21e68:	f019 091f 	ands.w	r9, r9, #31
   21e6c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   21e70:	d01d      	beq.n	21eae <__lshift+0x92>
   21e72:	f1c9 0c20 	rsb	ip, r9, #32
   21e76:	2200      	movs	r2, #0
   21e78:	680c      	ldr	r4, [r1, #0]
   21e7a:	fa04 f409 	lsl.w	r4, r4, r9
   21e7e:	4314      	orrs	r4, r2
   21e80:	f843 4b04 	str.w	r4, [r3], #4
   21e84:	f851 2b04 	ldr.w	r2, [r1], #4
   21e88:	458e      	cmp	lr, r1
   21e8a:	fa22 f20c 	lsr.w	r2, r2, ip
   21e8e:	d8f3      	bhi.n	21e78 <__lshift+0x5c>
   21e90:	601a      	str	r2, [r3, #0]
   21e92:	b10a      	cbz	r2, 21e98 <__lshift+0x7c>
   21e94:	f108 0502 	add.w	r5, r8, #2
   21e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21e9a:	6872      	ldr	r2, [r6, #4]
   21e9c:	3d01      	subs	r5, #1
   21e9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21ea2:	6105      	str	r5, [r0, #16]
   21ea4:	6031      	str	r1, [r6, #0]
   21ea6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   21eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21eae:	3b04      	subs	r3, #4
   21eb0:	f851 2b04 	ldr.w	r2, [r1], #4
   21eb4:	f843 2f04 	str.w	r2, [r3, #4]!
   21eb8:	458e      	cmp	lr, r1
   21eba:	d8f9      	bhi.n	21eb0 <__lshift+0x94>
   21ebc:	e7ec      	b.n	21e98 <__lshift+0x7c>
   21ebe:	bf00      	nop

00021ec0 <__mcmp>:
   21ec0:	b430      	push	{r4, r5}
   21ec2:	690b      	ldr	r3, [r1, #16]
   21ec4:	4605      	mov	r5, r0
   21ec6:	6900      	ldr	r0, [r0, #16]
   21ec8:	1ac0      	subs	r0, r0, r3
   21eca:	d10f      	bne.n	21eec <__mcmp+0x2c>
   21ecc:	009b      	lsls	r3, r3, #2
   21ece:	3514      	adds	r5, #20
   21ed0:	3114      	adds	r1, #20
   21ed2:	4419      	add	r1, r3
   21ed4:	442b      	add	r3, r5
   21ed6:	e001      	b.n	21edc <__mcmp+0x1c>
   21ed8:	429d      	cmp	r5, r3
   21eda:	d207      	bcs.n	21eec <__mcmp+0x2c>
   21edc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   21ee0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   21ee4:	4294      	cmp	r4, r2
   21ee6:	d0f7      	beq.n	21ed8 <__mcmp+0x18>
   21ee8:	d302      	bcc.n	21ef0 <__mcmp+0x30>
   21eea:	2001      	movs	r0, #1
   21eec:	bc30      	pop	{r4, r5}
   21eee:	4770      	bx	lr
   21ef0:	f04f 30ff 	mov.w	r0, #4294967295
   21ef4:	e7fa      	b.n	21eec <__mcmp+0x2c>
   21ef6:	bf00      	nop

00021ef8 <__mdiff>:
   21ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21efc:	690f      	ldr	r7, [r1, #16]
   21efe:	460e      	mov	r6, r1
   21f00:	6911      	ldr	r1, [r2, #16]
   21f02:	1a7f      	subs	r7, r7, r1
   21f04:	2f00      	cmp	r7, #0
   21f06:	4690      	mov	r8, r2
   21f08:	d117      	bne.n	21f3a <__mdiff+0x42>
   21f0a:	0089      	lsls	r1, r1, #2
   21f0c:	f106 0514 	add.w	r5, r6, #20
   21f10:	f102 0e14 	add.w	lr, r2, #20
   21f14:	186b      	adds	r3, r5, r1
   21f16:	4471      	add	r1, lr
   21f18:	e001      	b.n	21f1e <__mdiff+0x26>
   21f1a:	429d      	cmp	r5, r3
   21f1c:	d25c      	bcs.n	21fd8 <__mdiff+0xe0>
   21f1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   21f22:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   21f26:	42a2      	cmp	r2, r4
   21f28:	d0f7      	beq.n	21f1a <__mdiff+0x22>
   21f2a:	d25e      	bcs.n	21fea <__mdiff+0xf2>
   21f2c:	4633      	mov	r3, r6
   21f2e:	462c      	mov	r4, r5
   21f30:	4646      	mov	r6, r8
   21f32:	4675      	mov	r5, lr
   21f34:	4698      	mov	r8, r3
   21f36:	2701      	movs	r7, #1
   21f38:	e005      	b.n	21f46 <__mdiff+0x4e>
   21f3a:	db58      	blt.n	21fee <__mdiff+0xf6>
   21f3c:	f106 0514 	add.w	r5, r6, #20
   21f40:	f108 0414 	add.w	r4, r8, #20
   21f44:	2700      	movs	r7, #0
   21f46:	6871      	ldr	r1, [r6, #4]
   21f48:	f7ff fdbc 	bl	21ac4 <_Balloc>
   21f4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   21f50:	6936      	ldr	r6, [r6, #16]
   21f52:	60c7      	str	r7, [r0, #12]
   21f54:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   21f58:	46a6      	mov	lr, r4
   21f5a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   21f5e:	f100 0414 	add.w	r4, r0, #20
   21f62:	2300      	movs	r3, #0
   21f64:	f85e 1b04 	ldr.w	r1, [lr], #4
   21f68:	f855 8b04 	ldr.w	r8, [r5], #4
   21f6c:	b28a      	uxth	r2, r1
   21f6e:	fa13 f388 	uxtah	r3, r3, r8
   21f72:	0c09      	lsrs	r1, r1, #16
   21f74:	1a9a      	subs	r2, r3, r2
   21f76:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   21f7a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   21f7e:	b292      	uxth	r2, r2
   21f80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   21f84:	45f4      	cmp	ip, lr
   21f86:	f844 2b04 	str.w	r2, [r4], #4
   21f8a:	ea4f 4323 	mov.w	r3, r3, asr #16
   21f8e:	d8e9      	bhi.n	21f64 <__mdiff+0x6c>
   21f90:	42af      	cmp	r7, r5
   21f92:	d917      	bls.n	21fc4 <__mdiff+0xcc>
   21f94:	46a4      	mov	ip, r4
   21f96:	46ae      	mov	lr, r5
   21f98:	f85e 2b04 	ldr.w	r2, [lr], #4
   21f9c:	fa13 f382 	uxtah	r3, r3, r2
   21fa0:	1419      	asrs	r1, r3, #16
   21fa2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   21fa6:	b29b      	uxth	r3, r3
   21fa8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   21fac:	4577      	cmp	r7, lr
   21fae:	f84c 2b04 	str.w	r2, [ip], #4
   21fb2:	ea4f 4321 	mov.w	r3, r1, asr #16
   21fb6:	d8ef      	bhi.n	21f98 <__mdiff+0xa0>
   21fb8:	43ed      	mvns	r5, r5
   21fba:	442f      	add	r7, r5
   21fbc:	f027 0703 	bic.w	r7, r7, #3
   21fc0:	3704      	adds	r7, #4
   21fc2:	443c      	add	r4, r7
   21fc4:	3c04      	subs	r4, #4
   21fc6:	b922      	cbnz	r2, 21fd2 <__mdiff+0xda>
   21fc8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   21fcc:	3e01      	subs	r6, #1
   21fce:	2b00      	cmp	r3, #0
   21fd0:	d0fa      	beq.n	21fc8 <__mdiff+0xd0>
   21fd2:	6106      	str	r6, [r0, #16]
   21fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21fd8:	2100      	movs	r1, #0
   21fda:	f7ff fd73 	bl	21ac4 <_Balloc>
   21fde:	2201      	movs	r2, #1
   21fe0:	2300      	movs	r3, #0
   21fe2:	6102      	str	r2, [r0, #16]
   21fe4:	6143      	str	r3, [r0, #20]
   21fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21fea:	4674      	mov	r4, lr
   21fec:	e7ab      	b.n	21f46 <__mdiff+0x4e>
   21fee:	4633      	mov	r3, r6
   21ff0:	f106 0414 	add.w	r4, r6, #20
   21ff4:	f102 0514 	add.w	r5, r2, #20
   21ff8:	4616      	mov	r6, r2
   21ffa:	2701      	movs	r7, #1
   21ffc:	4698      	mov	r8, r3
   21ffe:	e7a2      	b.n	21f46 <__mdiff+0x4e>

00022000 <__d2b>:
   22000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22004:	ec57 6b10 	vmov	r6, r7, d0
   22008:	b083      	sub	sp, #12
   2200a:	4688      	mov	r8, r1
   2200c:	2101      	movs	r1, #1
   2200e:	463c      	mov	r4, r7
   22010:	f3c7 550a 	ubfx	r5, r7, #20, #11
   22014:	4617      	mov	r7, r2
   22016:	f7ff fd55 	bl	21ac4 <_Balloc>
   2201a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2201e:	4681      	mov	r9, r0
   22020:	b10d      	cbz	r5, 22026 <__d2b+0x26>
   22022:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   22026:	9401      	str	r4, [sp, #4]
   22028:	b31e      	cbz	r6, 22072 <__d2b+0x72>
   2202a:	a802      	add	r0, sp, #8
   2202c:	f840 6d08 	str.w	r6, [r0, #-8]!
   22030:	f7ff fdd8 	bl	21be4 <__lo0bits>
   22034:	2800      	cmp	r0, #0
   22036:	d134      	bne.n	220a2 <__d2b+0xa2>
   22038:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2203c:	f8c9 2014 	str.w	r2, [r9, #20]
   22040:	2b00      	cmp	r3, #0
   22042:	bf0c      	ite	eq
   22044:	2101      	moveq	r1, #1
   22046:	2102      	movne	r1, #2
   22048:	f8c9 3018 	str.w	r3, [r9, #24]
   2204c:	f8c9 1010 	str.w	r1, [r9, #16]
   22050:	b9dd      	cbnz	r5, 2208a <__d2b+0x8a>
   22052:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   22056:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2205a:	f8c8 0000 	str.w	r0, [r8]
   2205e:	6918      	ldr	r0, [r3, #16]
   22060:	f7ff fda0 	bl	21ba4 <__hi0bits>
   22064:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22068:	6038      	str	r0, [r7, #0]
   2206a:	4648      	mov	r0, r9
   2206c:	b003      	add	sp, #12
   2206e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22072:	a801      	add	r0, sp, #4
   22074:	f7ff fdb6 	bl	21be4 <__lo0bits>
   22078:	9b01      	ldr	r3, [sp, #4]
   2207a:	f8c9 3014 	str.w	r3, [r9, #20]
   2207e:	2101      	movs	r1, #1
   22080:	3020      	adds	r0, #32
   22082:	f8c9 1010 	str.w	r1, [r9, #16]
   22086:	2d00      	cmp	r5, #0
   22088:	d0e3      	beq.n	22052 <__d2b+0x52>
   2208a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2208e:	4405      	add	r5, r0
   22090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   22094:	f8c8 5000 	str.w	r5, [r8]
   22098:	6038      	str	r0, [r7, #0]
   2209a:	4648      	mov	r0, r9
   2209c:	b003      	add	sp, #12
   2209e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   220a2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   220a6:	f1c0 0220 	rsb	r2, r0, #32
   220aa:	fa03 f202 	lsl.w	r2, r3, r2
   220ae:	430a      	orrs	r2, r1
   220b0:	40c3      	lsrs	r3, r0
   220b2:	9301      	str	r3, [sp, #4]
   220b4:	f8c9 2014 	str.w	r2, [r9, #20]
   220b8:	e7c2      	b.n	22040 <__d2b+0x40>
   220ba:	bf00      	nop

000220bc <__sread>:
   220bc:	b510      	push	{r4, lr}
   220be:	460c      	mov	r4, r1
   220c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   220c4:	f000 fa14 	bl	224f0 <_read_r>
   220c8:	2800      	cmp	r0, #0
   220ca:	db03      	blt.n	220d4 <__sread+0x18>
   220cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   220ce:	4403      	add	r3, r0
   220d0:	6523      	str	r3, [r4, #80]	; 0x50
   220d2:	bd10      	pop	{r4, pc}
   220d4:	89a3      	ldrh	r3, [r4, #12]
   220d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   220da:	81a3      	strh	r3, [r4, #12]
   220dc:	bd10      	pop	{r4, pc}
   220de:	bf00      	nop

000220e0 <__swrite>:
   220e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220e4:	4616      	mov	r6, r2
   220e6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   220ea:	461f      	mov	r7, r3
   220ec:	05d3      	lsls	r3, r2, #23
   220ee:	460c      	mov	r4, r1
   220f0:	4605      	mov	r5, r0
   220f2:	d507      	bpl.n	22104 <__swrite+0x24>
   220f4:	2200      	movs	r2, #0
   220f6:	2302      	movs	r3, #2
   220f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   220fc:	f000 f9cc 	bl	22498 <_lseek_r>
   22100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22108:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   2210c:	81a2      	strh	r2, [r4, #12]
   2210e:	463b      	mov	r3, r7
   22110:	4632      	mov	r2, r6
   22112:	4628      	mov	r0, r5
   22114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22118:	f7fe b960 	b.w	203dc <_write_r>

0002211c <__sseek>:
   2211c:	b510      	push	{r4, lr}
   2211e:	460c      	mov	r4, r1
   22120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22124:	f000 f9b8 	bl	22498 <_lseek_r>
   22128:	89a3      	ldrh	r3, [r4, #12]
   2212a:	1c42      	adds	r2, r0, #1
   2212c:	bf0e      	itee	eq
   2212e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22136:	6520      	strne	r0, [r4, #80]	; 0x50
   22138:	81a3      	strh	r3, [r4, #12]
   2213a:	bd10      	pop	{r4, pc}

0002213c <__sclose>:
   2213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22140:	f000 b910 	b.w	22364 <_close_r>

00022144 <__ssprint_r>:
   22144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22148:	6893      	ldr	r3, [r2, #8]
   2214a:	b083      	sub	sp, #12
   2214c:	4690      	mov	r8, r2
   2214e:	2b00      	cmp	r3, #0
   22150:	d070      	beq.n	22234 <__ssprint_r+0xf0>
   22152:	4682      	mov	sl, r0
   22154:	460c      	mov	r4, r1
   22156:	6817      	ldr	r7, [r2, #0]
   22158:	688d      	ldr	r5, [r1, #8]
   2215a:	6808      	ldr	r0, [r1, #0]
   2215c:	e042      	b.n	221e4 <__ssprint_r+0xa0>
   2215e:	89a3      	ldrh	r3, [r4, #12]
   22160:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22164:	d02e      	beq.n	221c4 <__ssprint_r+0x80>
   22166:	6965      	ldr	r5, [r4, #20]
   22168:	6921      	ldr	r1, [r4, #16]
   2216a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2216e:	eba0 0b01 	sub.w	fp, r0, r1
   22172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22176:	f10b 0001 	add.w	r0, fp, #1
   2217a:	106d      	asrs	r5, r5, #1
   2217c:	4430      	add	r0, r6
   2217e:	42a8      	cmp	r0, r5
   22180:	462a      	mov	r2, r5
   22182:	bf84      	itt	hi
   22184:	4605      	movhi	r5, r0
   22186:	462a      	movhi	r2, r5
   22188:	055b      	lsls	r3, r3, #21
   2218a:	d538      	bpl.n	221fe <__ssprint_r+0xba>
   2218c:	4611      	mov	r1, r2
   2218e:	4650      	mov	r0, sl
   22190:	f7fb fcfa 	bl	1db88 <_malloc_r>
   22194:	2800      	cmp	r0, #0
   22196:	d03c      	beq.n	22212 <__ssprint_r+0xce>
   22198:	465a      	mov	r2, fp
   2219a:	6921      	ldr	r1, [r4, #16]
   2219c:	9001      	str	r0, [sp, #4]
   2219e:	f7fc f827 	bl	1e1f0 <memcpy>
   221a2:	89a2      	ldrh	r2, [r4, #12]
   221a4:	9b01      	ldr	r3, [sp, #4]
   221a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   221aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   221ae:	81a2      	strh	r2, [r4, #12]
   221b0:	eba5 020b 	sub.w	r2, r5, fp
   221b4:	eb03 000b 	add.w	r0, r3, fp
   221b8:	6165      	str	r5, [r4, #20]
   221ba:	6123      	str	r3, [r4, #16]
   221bc:	6020      	str	r0, [r4, #0]
   221be:	60a2      	str	r2, [r4, #8]
   221c0:	4635      	mov	r5, r6
   221c2:	46b3      	mov	fp, r6
   221c4:	465a      	mov	r2, fp
   221c6:	4649      	mov	r1, r9
   221c8:	f7fc f8ac 	bl	1e324 <memmove>
   221cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   221d0:	68a2      	ldr	r2, [r4, #8]
   221d2:	6820      	ldr	r0, [r4, #0]
   221d4:	1b55      	subs	r5, r2, r5
   221d6:	4458      	add	r0, fp
   221d8:	1b9e      	subs	r6, r3, r6
   221da:	60a5      	str	r5, [r4, #8]
   221dc:	6020      	str	r0, [r4, #0]
   221de:	f8c8 6008 	str.w	r6, [r8, #8]
   221e2:	b33e      	cbz	r6, 22234 <__ssprint_r+0xf0>
   221e4:	687e      	ldr	r6, [r7, #4]
   221e6:	463b      	mov	r3, r7
   221e8:	3708      	adds	r7, #8
   221ea:	2e00      	cmp	r6, #0
   221ec:	d0fa      	beq.n	221e4 <__ssprint_r+0xa0>
   221ee:	42ae      	cmp	r6, r5
   221f0:	f8d3 9000 	ldr.w	r9, [r3]
   221f4:	46ab      	mov	fp, r5
   221f6:	d2b2      	bcs.n	2215e <__ssprint_r+0x1a>
   221f8:	4635      	mov	r5, r6
   221fa:	46b3      	mov	fp, r6
   221fc:	e7e2      	b.n	221c4 <__ssprint_r+0x80>
   221fe:	4650      	mov	r0, sl
   22200:	f7fc f98e 	bl	1e520 <_realloc_r>
   22204:	4603      	mov	r3, r0
   22206:	2800      	cmp	r0, #0
   22208:	d1d2      	bne.n	221b0 <__ssprint_r+0x6c>
   2220a:	6921      	ldr	r1, [r4, #16]
   2220c:	4650      	mov	r0, sl
   2220e:	f7ff fac3 	bl	21798 <_free_r>
   22212:	230c      	movs	r3, #12
   22214:	f8ca 3000 	str.w	r3, [sl]
   22218:	89a3      	ldrh	r3, [r4, #12]
   2221a:	2200      	movs	r2, #0
   2221c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22220:	f04f 30ff 	mov.w	r0, #4294967295
   22224:	81a3      	strh	r3, [r4, #12]
   22226:	f8c8 2008 	str.w	r2, [r8, #8]
   2222a:	f8c8 2004 	str.w	r2, [r8, #4]
   2222e:	b003      	add	sp, #12
   22230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22234:	2000      	movs	r0, #0
   22236:	f8c8 0004 	str.w	r0, [r8, #4]
   2223a:	b003      	add	sp, #12
   2223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022240 <__register_exitproc>:
   22240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22244:	4d2c      	ldr	r5, [pc, #176]	; (222f8 <__register_exitproc+0xb8>)
   22246:	4606      	mov	r6, r0
   22248:	6828      	ldr	r0, [r5, #0]
   2224a:	4698      	mov	r8, r3
   2224c:	460f      	mov	r7, r1
   2224e:	4691      	mov	r9, r2
   22250:	f7fb fc86 	bl	1db60 <__retarget_lock_acquire_recursive>
   22254:	4b29      	ldr	r3, [pc, #164]	; (222fc <__register_exitproc+0xbc>)
   22256:	681c      	ldr	r4, [r3, #0]
   22258:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2225c:	2b00      	cmp	r3, #0
   2225e:	d03e      	beq.n	222de <__register_exitproc+0x9e>
   22260:	685a      	ldr	r2, [r3, #4]
   22262:	2a1f      	cmp	r2, #31
   22264:	dc1c      	bgt.n	222a0 <__register_exitproc+0x60>
   22266:	f102 0e01 	add.w	lr, r2, #1
   2226a:	b176      	cbz	r6, 2228a <__register_exitproc+0x4a>
   2226c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22270:	2401      	movs	r4, #1
   22272:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22276:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2227a:	4094      	lsls	r4, r2
   2227c:	4320      	orrs	r0, r4
   2227e:	2e02      	cmp	r6, #2
   22280:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   22284:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22288:	d023      	beq.n	222d2 <__register_exitproc+0x92>
   2228a:	3202      	adds	r2, #2
   2228c:	f8c3 e004 	str.w	lr, [r3, #4]
   22290:	6828      	ldr	r0, [r5, #0]
   22292:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   22296:	f7fb fc65 	bl	1db64 <__retarget_lock_release_recursive>
   2229a:	2000      	movs	r0, #0
   2229c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   222a0:	4b17      	ldr	r3, [pc, #92]	; (22300 <__register_exitproc+0xc0>)
   222a2:	b30b      	cbz	r3, 222e8 <__register_exitproc+0xa8>
   222a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   222a8:	f7fb fc5e 	bl	1db68 <malloc>
   222ac:	4603      	mov	r3, r0
   222ae:	b1d8      	cbz	r0, 222e8 <__register_exitproc+0xa8>
   222b0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   222b4:	6002      	str	r2, [r0, #0]
   222b6:	2100      	movs	r1, #0
   222b8:	6041      	str	r1, [r0, #4]
   222ba:	460a      	mov	r2, r1
   222bc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   222c0:	f04f 0e01 	mov.w	lr, #1
   222c4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   222c8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   222cc:	2e00      	cmp	r6, #0
   222ce:	d0dc      	beq.n	2228a <__register_exitproc+0x4a>
   222d0:	e7cc      	b.n	2226c <__register_exitproc+0x2c>
   222d2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   222d6:	430c      	orrs	r4, r1
   222d8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   222dc:	e7d5      	b.n	2228a <__register_exitproc+0x4a>
   222de:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   222e2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   222e6:	e7bb      	b.n	22260 <__register_exitproc+0x20>
   222e8:	6828      	ldr	r0, [r5, #0]
   222ea:	f7fb fc3b 	bl	1db64 <__retarget_lock_release_recursive>
   222ee:	f04f 30ff 	mov.w	r0, #4294967295
   222f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   222f6:	bf00      	nop
   222f8:	20000940 	.word	0x20000940
   222fc:	00024b48 	.word	0x00024b48
   22300:	0001db69 	.word	0x0001db69

00022304 <_calloc_r>:
   22304:	b510      	push	{r4, lr}
   22306:	fb02 f101 	mul.w	r1, r2, r1
   2230a:	f7fb fc3d 	bl	1db88 <_malloc_r>
   2230e:	4604      	mov	r4, r0
   22310:	b1d8      	cbz	r0, 2234a <_calloc_r+0x46>
   22312:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22316:	f022 0203 	bic.w	r2, r2, #3
   2231a:	3a04      	subs	r2, #4
   2231c:	2a24      	cmp	r2, #36	; 0x24
   2231e:	d818      	bhi.n	22352 <_calloc_r+0x4e>
   22320:	2a13      	cmp	r2, #19
   22322:	d914      	bls.n	2234e <_calloc_r+0x4a>
   22324:	2300      	movs	r3, #0
   22326:	2a1b      	cmp	r2, #27
   22328:	6003      	str	r3, [r0, #0]
   2232a:	6043      	str	r3, [r0, #4]
   2232c:	d916      	bls.n	2235c <_calloc_r+0x58>
   2232e:	2a24      	cmp	r2, #36	; 0x24
   22330:	6083      	str	r3, [r0, #8]
   22332:	60c3      	str	r3, [r0, #12]
   22334:	bf11      	iteee	ne
   22336:	f100 0210 	addne.w	r2, r0, #16
   2233a:	6103      	streq	r3, [r0, #16]
   2233c:	6143      	streq	r3, [r0, #20]
   2233e:	f100 0218 	addeq.w	r2, r0, #24
   22342:	2300      	movs	r3, #0
   22344:	6013      	str	r3, [r2, #0]
   22346:	6053      	str	r3, [r2, #4]
   22348:	6093      	str	r3, [r2, #8]
   2234a:	4620      	mov	r0, r4
   2234c:	bd10      	pop	{r4, pc}
   2234e:	4602      	mov	r2, r0
   22350:	e7f7      	b.n	22342 <_calloc_r+0x3e>
   22352:	2100      	movs	r1, #0
   22354:	f7fc f84a 	bl	1e3ec <memset>
   22358:	4620      	mov	r0, r4
   2235a:	bd10      	pop	{r4, pc}
   2235c:	f100 0208 	add.w	r2, r0, #8
   22360:	e7ef      	b.n	22342 <_calloc_r+0x3e>
   22362:	bf00      	nop

00022364 <_close_r>:
   22364:	b538      	push	{r3, r4, r5, lr}
   22366:	4c07      	ldr	r4, [pc, #28]	; (22384 <_close_r+0x20>)
   22368:	2300      	movs	r3, #0
   2236a:	4605      	mov	r5, r0
   2236c:	4608      	mov	r0, r1
   2236e:	6023      	str	r3, [r4, #0]
   22370:	f000 f9d0 	bl	22714 <_close>
   22374:	1c43      	adds	r3, r0, #1
   22376:	d000      	beq.n	2237a <_close_r+0x16>
   22378:	bd38      	pop	{r3, r4, r5, pc}
   2237a:	6823      	ldr	r3, [r4, #0]
   2237c:	2b00      	cmp	r3, #0
   2237e:	d0fb      	beq.n	22378 <_close_r+0x14>
   22380:	602b      	str	r3, [r5, #0]
   22382:	bd38      	pop	{r3, r4, r5, pc}
   22384:	200023b4 	.word	0x200023b4

00022388 <_fclose_r>:
   22388:	b570      	push	{r4, r5, r6, lr}
   2238a:	b159      	cbz	r1, 223a4 <_fclose_r+0x1c>
   2238c:	4605      	mov	r5, r0
   2238e:	460c      	mov	r4, r1
   22390:	b110      	cbz	r0, 22398 <_fclose_r+0x10>
   22392:	6b83      	ldr	r3, [r0, #56]	; 0x38
   22394:	2b00      	cmp	r3, #0
   22396:	d03c      	beq.n	22412 <_fclose_r+0x8a>
   22398:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2239a:	07d8      	lsls	r0, r3, #31
   2239c:	d505      	bpl.n	223aa <_fclose_r+0x22>
   2239e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   223a2:	b92b      	cbnz	r3, 223b0 <_fclose_r+0x28>
   223a4:	2600      	movs	r6, #0
   223a6:	4630      	mov	r0, r6
   223a8:	bd70      	pop	{r4, r5, r6, pc}
   223aa:	89a3      	ldrh	r3, [r4, #12]
   223ac:	0599      	lsls	r1, r3, #22
   223ae:	d53c      	bpl.n	2242a <_fclose_r+0xa2>
   223b0:	4621      	mov	r1, r4
   223b2:	4628      	mov	r0, r5
   223b4:	f7ff f856 	bl	21464 <__sflush_r>
   223b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   223ba:	4606      	mov	r6, r0
   223bc:	b133      	cbz	r3, 223cc <_fclose_r+0x44>
   223be:	69e1      	ldr	r1, [r4, #28]
   223c0:	4628      	mov	r0, r5
   223c2:	4798      	blx	r3
   223c4:	2800      	cmp	r0, #0
   223c6:	bfb8      	it	lt
   223c8:	f04f 36ff 	movlt.w	r6, #4294967295
   223cc:	89a3      	ldrh	r3, [r4, #12]
   223ce:	061a      	lsls	r2, r3, #24
   223d0:	d422      	bmi.n	22418 <_fclose_r+0x90>
   223d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   223d4:	b141      	cbz	r1, 223e8 <_fclose_r+0x60>
   223d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   223da:	4299      	cmp	r1, r3
   223dc:	d002      	beq.n	223e4 <_fclose_r+0x5c>
   223de:	4628      	mov	r0, r5
   223e0:	f7ff f9da 	bl	21798 <_free_r>
   223e4:	2300      	movs	r3, #0
   223e6:	6323      	str	r3, [r4, #48]	; 0x30
   223e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   223ea:	b121      	cbz	r1, 223f6 <_fclose_r+0x6e>
   223ec:	4628      	mov	r0, r5
   223ee:	f7ff f9d3 	bl	21798 <_free_r>
   223f2:	2300      	movs	r3, #0
   223f4:	6463      	str	r3, [r4, #68]	; 0x44
   223f6:	f7ff f959 	bl	216ac <__sfp_lock_acquire>
   223fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   223fc:	2200      	movs	r2, #0
   223fe:	07db      	lsls	r3, r3, #31
   22400:	81a2      	strh	r2, [r4, #12]
   22402:	d50e      	bpl.n	22422 <_fclose_r+0x9a>
   22404:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22406:	f7fb fba9 	bl	1db5c <__retarget_lock_close_recursive>
   2240a:	f7ff f955 	bl	216b8 <__sfp_lock_release>
   2240e:	4630      	mov	r0, r6
   22410:	bd70      	pop	{r4, r5, r6, pc}
   22412:	f7ff f91f 	bl	21654 <__sinit>
   22416:	e7bf      	b.n	22398 <_fclose_r+0x10>
   22418:	6921      	ldr	r1, [r4, #16]
   2241a:	4628      	mov	r0, r5
   2241c:	f7ff f9bc 	bl	21798 <_free_r>
   22420:	e7d7      	b.n	223d2 <_fclose_r+0x4a>
   22422:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22424:	f7fb fb9e 	bl	1db64 <__retarget_lock_release_recursive>
   22428:	e7ec      	b.n	22404 <_fclose_r+0x7c>
   2242a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2242c:	f7fb fb98 	bl	1db60 <__retarget_lock_acquire_recursive>
   22430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22434:	2b00      	cmp	r3, #0
   22436:	d1bb      	bne.n	223b0 <_fclose_r+0x28>
   22438:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2243a:	f016 0601 	ands.w	r6, r6, #1
   2243e:	d1b1      	bne.n	223a4 <_fclose_r+0x1c>
   22440:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22442:	f7fb fb8f 	bl	1db64 <__retarget_lock_release_recursive>
   22446:	4630      	mov	r0, r6
   22448:	bd70      	pop	{r4, r5, r6, pc}
   2244a:	bf00      	nop

0002244c <_fstat_r>:
   2244c:	b538      	push	{r3, r4, r5, lr}
   2244e:	460b      	mov	r3, r1
   22450:	4c07      	ldr	r4, [pc, #28]	; (22470 <_fstat_r+0x24>)
   22452:	4605      	mov	r5, r0
   22454:	4611      	mov	r1, r2
   22456:	4618      	mov	r0, r3
   22458:	2300      	movs	r3, #0
   2245a:	6023      	str	r3, [r4, #0]
   2245c:	f000 f9d8 	bl	22810 <_fstat>
   22460:	1c43      	adds	r3, r0, #1
   22462:	d000      	beq.n	22466 <_fstat_r+0x1a>
   22464:	bd38      	pop	{r3, r4, r5, pc}
   22466:	6823      	ldr	r3, [r4, #0]
   22468:	2b00      	cmp	r3, #0
   2246a:	d0fb      	beq.n	22464 <_fstat_r+0x18>
   2246c:	602b      	str	r3, [r5, #0]
   2246e:	bd38      	pop	{r3, r4, r5, pc}
   22470:	200023b4 	.word	0x200023b4

00022474 <_isatty_r>:
   22474:	b538      	push	{r3, r4, r5, lr}
   22476:	4c07      	ldr	r4, [pc, #28]	; (22494 <_isatty_r+0x20>)
   22478:	2300      	movs	r3, #0
   2247a:	4605      	mov	r5, r0
   2247c:	4608      	mov	r0, r1
   2247e:	6023      	str	r3, [r4, #0]
   22480:	f000 f9d4 	bl	2282c <_isatty>
   22484:	1c43      	adds	r3, r0, #1
   22486:	d000      	beq.n	2248a <_isatty_r+0x16>
   22488:	bd38      	pop	{r3, r4, r5, pc}
   2248a:	6823      	ldr	r3, [r4, #0]
   2248c:	2b00      	cmp	r3, #0
   2248e:	d0fb      	beq.n	22488 <_isatty_r+0x14>
   22490:	602b      	str	r3, [r5, #0]
   22492:	bd38      	pop	{r3, r4, r5, pc}
   22494:	200023b4 	.word	0x200023b4

00022498 <_lseek_r>:
   22498:	b570      	push	{r4, r5, r6, lr}
   2249a:	460d      	mov	r5, r1
   2249c:	4c08      	ldr	r4, [pc, #32]	; (224c0 <_lseek_r+0x28>)
   2249e:	4611      	mov	r1, r2
   224a0:	4606      	mov	r6, r0
   224a2:	461a      	mov	r2, r3
   224a4:	4628      	mov	r0, r5
   224a6:	2300      	movs	r3, #0
   224a8:	6023      	str	r3, [r4, #0]
   224aa:	f000 f8f7 	bl	2269c <_lseek>
   224ae:	1c43      	adds	r3, r0, #1
   224b0:	d000      	beq.n	224b4 <_lseek_r+0x1c>
   224b2:	bd70      	pop	{r4, r5, r6, pc}
   224b4:	6823      	ldr	r3, [r4, #0]
   224b6:	2b00      	cmp	r3, #0
   224b8:	d0fb      	beq.n	224b2 <_lseek_r+0x1a>
   224ba:	6033      	str	r3, [r6, #0]
   224bc:	bd70      	pop	{r4, r5, r6, pc}
   224be:	bf00      	nop
   224c0:	200023b4 	.word	0x200023b4

000224c4 <__ascii_mbtowc>:
   224c4:	b082      	sub	sp, #8
   224c6:	b149      	cbz	r1, 224dc <__ascii_mbtowc+0x18>
   224c8:	b15a      	cbz	r2, 224e2 <__ascii_mbtowc+0x1e>
   224ca:	b16b      	cbz	r3, 224e8 <__ascii_mbtowc+0x24>
   224cc:	7813      	ldrb	r3, [r2, #0]
   224ce:	600b      	str	r3, [r1, #0]
   224d0:	7812      	ldrb	r2, [r2, #0]
   224d2:	1c10      	adds	r0, r2, #0
   224d4:	bf18      	it	ne
   224d6:	2001      	movne	r0, #1
   224d8:	b002      	add	sp, #8
   224da:	4770      	bx	lr
   224dc:	a901      	add	r1, sp, #4
   224de:	2a00      	cmp	r2, #0
   224e0:	d1f3      	bne.n	224ca <__ascii_mbtowc+0x6>
   224e2:	4610      	mov	r0, r2
   224e4:	b002      	add	sp, #8
   224e6:	4770      	bx	lr
   224e8:	f06f 0001 	mvn.w	r0, #1
   224ec:	e7f4      	b.n	224d8 <__ascii_mbtowc+0x14>
   224ee:	bf00      	nop

000224f0 <_read_r>:
   224f0:	b570      	push	{r4, r5, r6, lr}
   224f2:	460d      	mov	r5, r1
   224f4:	4c08      	ldr	r4, [pc, #32]	; (22518 <_read_r+0x28>)
   224f6:	4611      	mov	r1, r2
   224f8:	4606      	mov	r6, r0
   224fa:	461a      	mov	r2, r3
   224fc:	4628      	mov	r0, r5
   224fe:	2300      	movs	r3, #0
   22500:	6023      	str	r3, [r4, #0]
   22502:	f000 f859 	bl	225b8 <_read>
   22506:	1c43      	adds	r3, r0, #1
   22508:	d000      	beq.n	2250c <_read_r+0x1c>
   2250a:	bd70      	pop	{r4, r5, r6, pc}
   2250c:	6823      	ldr	r3, [r4, #0]
   2250e:	2b00      	cmp	r3, #0
   22510:	d0fb      	beq.n	2250a <_read_r+0x1a>
   22512:	6033      	str	r3, [r6, #0]
   22514:	bd70      	pop	{r4, r5, r6, pc}
   22516:	bf00      	nop
   22518:	200023b4 	.word	0x200023b4

0002251c <__ascii_wctomb>:
   2251c:	b121      	cbz	r1, 22528 <__ascii_wctomb+0xc>
   2251e:	2aff      	cmp	r2, #255	; 0xff
   22520:	d804      	bhi.n	2252c <__ascii_wctomb+0x10>
   22522:	700a      	strb	r2, [r1, #0]
   22524:	2001      	movs	r0, #1
   22526:	4770      	bx	lr
   22528:	4608      	mov	r0, r1
   2252a:	4770      	bx	lr
   2252c:	238a      	movs	r3, #138	; 0x8a
   2252e:	6003      	str	r3, [r0, #0]
   22530:	f04f 30ff 	mov.w	r0, #4294967295
   22534:	4770      	bx	lr
   22536:	bf00      	nop

00022538 <__aeabi_dcmpun>:
   22538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   2253c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22540:	d102      	bne.n	22548 <__aeabi_dcmpun+0x10>
   22542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   22546:	d10a      	bne.n	2255e <__aeabi_dcmpun+0x26>
   22548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   2254c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22550:	d102      	bne.n	22558 <__aeabi_dcmpun+0x20>
   22552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   22556:	d102      	bne.n	2255e <__aeabi_dcmpun+0x26>
   22558:	f04f 0000 	mov.w	r0, #0
   2255c:	4770      	bx	lr
   2255e:	f04f 0001 	mov.w	r0, #1
   22562:	4770      	bx	lr

00022564 <findslot>:
   22564:	4b0b      	ldr	r3, [pc, #44]	; (22594 <findslot+0x30>)
   22566:	681b      	ldr	r3, [r3, #0]
   22568:	b510      	push	{r4, lr}
   2256a:	4604      	mov	r4, r0
   2256c:	b10b      	cbz	r3, 22572 <findslot+0xe>
   2256e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22570:	b14a      	cbz	r2, 22586 <findslot+0x22>
   22572:	2c13      	cmp	r4, #19
   22574:	d80c      	bhi.n	22590 <findslot+0x2c>
   22576:	4808      	ldr	r0, [pc, #32]	; (22598 <findslot+0x34>)
   22578:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   2257c:	3301      	adds	r3, #1
   2257e:	d007      	beq.n	22590 <findslot+0x2c>
   22580:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   22584:	bd10      	pop	{r4, pc}
   22586:	4618      	mov	r0, r3
   22588:	f7ff f864 	bl	21654 <__sinit>
   2258c:	2c13      	cmp	r4, #19
   2258e:	d9f2      	bls.n	22576 <findslot+0x12>
   22590:	2000      	movs	r0, #0
   22592:	bd10      	pop	{r4, pc}
   22594:	20000100 	.word	0x20000100
   22598:	200022f0 	.word	0x200022f0

0002259c <checkerror.part.0>:
   2259c:	b570      	push	{r4, r5, r6, lr}
   2259e:	f7fb f83d 	bl	1d61c <__errno>
   225a2:	2413      	movs	r4, #19
   225a4:	4605      	mov	r5, r0
   225a6:	2600      	movs	r6, #0
   225a8:	4620      	mov	r0, r4
   225aa:	4631      	mov	r1, r6
   225ac:	beab      	bkpt	0x00ab
   225ae:	4604      	mov	r4, r0
   225b0:	f04f 30ff 	mov.w	r0, #4294967295
   225b4:	602c      	str	r4, [r5, #0]
   225b6:	bd70      	pop	{r4, r5, r6, pc}

000225b8 <_read>:
   225b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   225ba:	b085      	sub	sp, #20
   225bc:	460c      	mov	r4, r1
   225be:	4616      	mov	r6, r2
   225c0:	f7ff ffd0 	bl	22564 <findslot>
   225c4:	b1c8      	cbz	r0, 225fa <_read+0x42>
   225c6:	6803      	ldr	r3, [r0, #0]
   225c8:	9301      	str	r3, [sp, #4]
   225ca:	9402      	str	r4, [sp, #8]
   225cc:	4605      	mov	r5, r0
   225ce:	9603      	str	r6, [sp, #12]
   225d0:	2406      	movs	r4, #6
   225d2:	af01      	add	r7, sp, #4
   225d4:	4620      	mov	r0, r4
   225d6:	4639      	mov	r1, r7
   225d8:	beab      	bkpt	0x00ab
   225da:	4604      	mov	r4, r0
   225dc:	1c62      	adds	r2, r4, #1
   225de:	4620      	mov	r0, r4
   225e0:	d005      	beq.n	225ee <_read+0x36>
   225e2:	686b      	ldr	r3, [r5, #4]
   225e4:	1a30      	subs	r0, r6, r0
   225e6:	4403      	add	r3, r0
   225e8:	606b      	str	r3, [r5, #4]
   225ea:	b005      	add	sp, #20
   225ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   225ee:	f7ff ffd5 	bl	2259c <checkerror.part.0>
   225f2:	1c43      	adds	r3, r0, #1
   225f4:	d1f5      	bne.n	225e2 <_read+0x2a>
   225f6:	b005      	add	sp, #20
   225f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   225fa:	f7fb f80f 	bl	1d61c <__errno>
   225fe:	2309      	movs	r3, #9
   22600:	6003      	str	r3, [r0, #0]
   22602:	f04f 30ff 	mov.w	r0, #4294967295
   22606:	e7f0      	b.n	225ea <_read+0x32>

00022608 <_swilseek>:
   22608:	b5f0      	push	{r4, r5, r6, r7, lr}
   2260a:	b083      	sub	sp, #12
   2260c:	460d      	mov	r5, r1
   2260e:	4614      	mov	r4, r2
   22610:	f7ff ffa8 	bl	22564 <findslot>
   22614:	2800      	cmp	r0, #0
   22616:	d03a      	beq.n	2268e <_swilseek+0x86>
   22618:	2c02      	cmp	r4, #2
   2261a:	d825      	bhi.n	22668 <_swilseek+0x60>
   2261c:	2c01      	cmp	r4, #1
   2261e:	4606      	mov	r6, r0
   22620:	d01f      	beq.n	22662 <_swilseek+0x5a>
   22622:	2c02      	cmp	r4, #2
   22624:	d010      	beq.n	22648 <_swilseek+0x40>
   22626:	466f      	mov	r7, sp
   22628:	6833      	ldr	r3, [r6, #0]
   2262a:	240a      	movs	r4, #10
   2262c:	e88d 0028 	stmia.w	sp, {r3, r5}
   22630:	4620      	mov	r0, r4
   22632:	4639      	mov	r1, r7
   22634:	beab      	bkpt	0x00ab
   22636:	4604      	mov	r4, r0
   22638:	1c63      	adds	r3, r4, #1
   2263a:	d01c      	beq.n	22676 <_swilseek+0x6e>
   2263c:	2c00      	cmp	r4, #0
   2263e:	db23      	blt.n	22688 <_swilseek+0x80>
   22640:	6075      	str	r5, [r6, #4]
   22642:	4628      	mov	r0, r5
   22644:	b003      	add	sp, #12
   22646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22648:	af02      	add	r7, sp, #8
   2264a:	6803      	ldr	r3, [r0, #0]
   2264c:	f847 3d08 	str.w	r3, [r7, #-8]!
   22650:	240c      	movs	r4, #12
   22652:	4620      	mov	r0, r4
   22654:	4639      	mov	r1, r7
   22656:	beab      	bkpt	0x00ab
   22658:	4604      	mov	r4, r0
   2265a:	1c61      	adds	r1, r4, #1
   2265c:	d00f      	beq.n	2267e <_swilseek+0x76>
   2265e:	4425      	add	r5, r4
   22660:	e7e2      	b.n	22628 <_swilseek+0x20>
   22662:	6840      	ldr	r0, [r0, #4]
   22664:	182d      	adds	r5, r5, r0
   22666:	d5de      	bpl.n	22626 <_swilseek+0x1e>
   22668:	f7fa ffd8 	bl	1d61c <__errno>
   2266c:	2316      	movs	r3, #22
   2266e:	6003      	str	r3, [r0, #0]
   22670:	f04f 35ff 	mov.w	r5, #4294967295
   22674:	e7e5      	b.n	22642 <_swilseek+0x3a>
   22676:	f7ff ff91 	bl	2259c <checkerror.part.0>
   2267a:	4604      	mov	r4, r0
   2267c:	e7de      	b.n	2263c <_swilseek+0x34>
   2267e:	f7ff ff8d 	bl	2259c <checkerror.part.0>
   22682:	1c42      	adds	r2, r0, #1
   22684:	4604      	mov	r4, r0
   22686:	d1ea      	bne.n	2265e <_swilseek+0x56>
   22688:	f04f 35ff 	mov.w	r5, #4294967295
   2268c:	e7d9      	b.n	22642 <_swilseek+0x3a>
   2268e:	f7fa ffc5 	bl	1d61c <__errno>
   22692:	2309      	movs	r3, #9
   22694:	6003      	str	r3, [r0, #0]
   22696:	f04f 35ff 	mov.w	r5, #4294967295
   2269a:	e7d2      	b.n	22642 <_swilseek+0x3a>

0002269c <_lseek>:
   2269c:	f7ff bfb4 	b.w	22608 <_swilseek>

000226a0 <_write>:
   226a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   226a2:	b085      	sub	sp, #20
   226a4:	460c      	mov	r4, r1
   226a6:	4616      	mov	r6, r2
   226a8:	f7ff ff5c 	bl	22564 <findslot>
   226ac:	b350      	cbz	r0, 22704 <_write+0x64>
   226ae:	6803      	ldr	r3, [r0, #0]
   226b0:	9301      	str	r3, [sp, #4]
   226b2:	9402      	str	r4, [sp, #8]
   226b4:	4605      	mov	r5, r0
   226b6:	9603      	str	r6, [sp, #12]
   226b8:	2405      	movs	r4, #5
   226ba:	af01      	add	r7, sp, #4
   226bc:	4620      	mov	r0, r4
   226be:	4639      	mov	r1, r7
   226c0:	beab      	bkpt	0x00ab
   226c2:	4604      	mov	r4, r0
   226c4:	1c63      	adds	r3, r4, #1
   226c6:	d016      	beq.n	226f6 <_write+0x56>
   226c8:	2c00      	cmp	r4, #0
   226ca:	db18      	blt.n	226fe <_write+0x5e>
   226cc:	686a      	ldr	r2, [r5, #4]
   226ce:	1b30      	subs	r0, r6, r4
   226d0:	4402      	add	r2, r0
   226d2:	42a6      	cmp	r6, r4
   226d4:	606a      	str	r2, [r5, #4]
   226d6:	d001      	beq.n	226dc <_write+0x3c>
   226d8:	b005      	add	sp, #20
   226da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226dc:	f7fa ff9e 	bl	1d61c <__errno>
   226e0:	2513      	movs	r5, #19
   226e2:	4606      	mov	r6, r0
   226e4:	2400      	movs	r4, #0
   226e6:	4628      	mov	r0, r5
   226e8:	4621      	mov	r1, r4
   226ea:	beab      	bkpt	0x00ab
   226ec:	4605      	mov	r5, r0
   226ee:	4620      	mov	r0, r4
   226f0:	6035      	str	r5, [r6, #0]
   226f2:	b005      	add	sp, #20
   226f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226f6:	f7ff ff51 	bl	2259c <checkerror.part.0>
   226fa:	4604      	mov	r4, r0
   226fc:	e7e4      	b.n	226c8 <_write+0x28>
   226fe:	f04f 30ff 	mov.w	r0, #4294967295
   22702:	e7e9      	b.n	226d8 <_write+0x38>
   22704:	f7fa ff8a 	bl	1d61c <__errno>
   22708:	2309      	movs	r3, #9
   2270a:	6003      	str	r3, [r0, #0]
   2270c:	f04f 30ff 	mov.w	r0, #4294967295
   22710:	e7e2      	b.n	226d8 <_write+0x38>
   22712:	bf00      	nop

00022714 <_close>:
   22714:	b570      	push	{r4, r5, r6, lr}
   22716:	b082      	sub	sp, #8
   22718:	4604      	mov	r4, r0
   2271a:	f7ff ff23 	bl	22564 <findslot>
   2271e:	b310      	cbz	r0, 22766 <_close+0x52>
   22720:	3c01      	subs	r4, #1
   22722:	2c01      	cmp	r4, #1
   22724:	4606      	mov	r6, r0
   22726:	d911      	bls.n	2274c <_close+0x38>
   22728:	ad02      	add	r5, sp, #8
   2272a:	6833      	ldr	r3, [r6, #0]
   2272c:	f845 3d04 	str.w	r3, [r5, #-4]!
   22730:	2402      	movs	r4, #2
   22732:	4620      	mov	r0, r4
   22734:	4629      	mov	r1, r5
   22736:	beab      	bkpt	0x00ab
   22738:	4604      	mov	r4, r0
   2273a:	1c63      	adds	r3, r4, #1
   2273c:	4620      	mov	r0, r4
   2273e:	d00f      	beq.n	22760 <_close+0x4c>
   22740:	b910      	cbnz	r0, 22748 <_close+0x34>
   22742:	f04f 33ff 	mov.w	r3, #4294967295
   22746:	6033      	str	r3, [r6, #0]
   22748:	b002      	add	sp, #8
   2274a:	bd70      	pop	{r4, r5, r6, pc}
   2274c:	4b09      	ldr	r3, [pc, #36]	; (22774 <_close+0x60>)
   2274e:	689a      	ldr	r2, [r3, #8]
   22750:	691b      	ldr	r3, [r3, #16]
   22752:	429a      	cmp	r2, r3
   22754:	d1e8      	bne.n	22728 <_close+0x14>
   22756:	f04f 33ff 	mov.w	r3, #4294967295
   2275a:	6003      	str	r3, [r0, #0]
   2275c:	2000      	movs	r0, #0
   2275e:	e7f3      	b.n	22748 <_close+0x34>
   22760:	f7ff ff1c 	bl	2259c <checkerror.part.0>
   22764:	e7ec      	b.n	22740 <_close+0x2c>
   22766:	f7fa ff59 	bl	1d61c <__errno>
   2276a:	2309      	movs	r3, #9
   2276c:	6003      	str	r3, [r0, #0]
   2276e:	f04f 30ff 	mov.w	r0, #4294967295
   22772:	e7e9      	b.n	22748 <_close+0x34>
   22774:	200022f0 	.word	0x200022f0

00022778 <_getpid>:
   22778:	2001      	movs	r0, #1
   2277a:	4770      	bx	lr

0002277c <_sbrk>:
   2277c:	4a0e      	ldr	r2, [pc, #56]	; (227b8 <_sbrk+0x3c>)
   2277e:	6813      	ldr	r3, [r2, #0]
   22780:	b510      	push	{r4, lr}
   22782:	b1ab      	cbz	r3, 227b0 <_sbrk+0x34>
   22784:	4418      	add	r0, r3
   22786:	4669      	mov	r1, sp
   22788:	4288      	cmp	r0, r1
   2278a:	d809      	bhi.n	227a0 <_sbrk+0x24>
   2278c:	490b      	ldr	r1, [pc, #44]	; (227bc <_sbrk+0x40>)
   2278e:	4c0c      	ldr	r4, [pc, #48]	; (227c0 <_sbrk+0x44>)
   22790:	6809      	ldr	r1, [r1, #0]
   22792:	42a1      	cmp	r1, r4
   22794:	d001      	beq.n	2279a <_sbrk+0x1e>
   22796:	4288      	cmp	r0, r1
   22798:	d802      	bhi.n	227a0 <_sbrk+0x24>
   2279a:	6010      	str	r0, [r2, #0]
   2279c:	4618      	mov	r0, r3
   2279e:	bd10      	pop	{r4, pc}
   227a0:	f7fa ff3c 	bl	1d61c <__errno>
   227a4:	230c      	movs	r3, #12
   227a6:	6003      	str	r3, [r0, #0]
   227a8:	f04f 33ff 	mov.w	r3, #4294967295
   227ac:	4618      	mov	r0, r3
   227ae:	bd10      	pop	{r4, pc}
   227b0:	4b04      	ldr	r3, [pc, #16]	; (227c4 <_sbrk+0x48>)
   227b2:	6013      	str	r3, [r2, #0]
   227b4:	e7e6      	b.n	22784 <_sbrk+0x8>
   227b6:	bf00      	nop
   227b8:	200022ec 	.word	0x200022ec
   227bc:	20000ab0 	.word	0x20000ab0
   227c0:	cafedead 	.word	0xcafedead
   227c4:	200023b8 	.word	0x200023b8

000227c8 <_swistat>:
   227c8:	b570      	push	{r4, r5, r6, lr}
   227ca:	460d      	mov	r5, r1
   227cc:	f7ff feca 	bl	22564 <findslot>
   227d0:	b1b8      	cbz	r0, 22802 <_swistat+0x3a>
   227d2:	686b      	ldr	r3, [r5, #4]
   227d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   227d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   227dc:	4606      	mov	r6, r0
   227de:	606b      	str	r3, [r5, #4]
   227e0:	62ea      	str	r2, [r5, #44]	; 0x2c
   227e2:	240c      	movs	r4, #12
   227e4:	4620      	mov	r0, r4
   227e6:	4631      	mov	r1, r6
   227e8:	beab      	bkpt	0x00ab
   227ea:	4604      	mov	r4, r0
   227ec:	1c62      	adds	r2, r4, #1
   227ee:	4620      	mov	r0, r4
   227f0:	d002      	beq.n	227f8 <_swistat+0x30>
   227f2:	6128      	str	r0, [r5, #16]
   227f4:	2000      	movs	r0, #0
   227f6:	bd70      	pop	{r4, r5, r6, pc}
   227f8:	f7ff fed0 	bl	2259c <checkerror.part.0>
   227fc:	1c43      	adds	r3, r0, #1
   227fe:	d1f8      	bne.n	227f2 <_swistat+0x2a>
   22800:	e7f9      	b.n	227f6 <_swistat+0x2e>
   22802:	f7fa ff0b 	bl	1d61c <__errno>
   22806:	2309      	movs	r3, #9
   22808:	6003      	str	r3, [r0, #0]
   2280a:	f04f 30ff 	mov.w	r0, #4294967295
   2280e:	bd70      	pop	{r4, r5, r6, pc}

00022810 <_fstat>:
   22810:	b538      	push	{r3, r4, r5, lr}
   22812:	223c      	movs	r2, #60	; 0x3c
   22814:	460c      	mov	r4, r1
   22816:	4605      	mov	r5, r0
   22818:	4608      	mov	r0, r1
   2281a:	2100      	movs	r1, #0
   2281c:	f7fb fde6 	bl	1e3ec <memset>
   22820:	4621      	mov	r1, r4
   22822:	4628      	mov	r0, r5
   22824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22828:	f7ff bfce 	b.w	227c8 <_swistat>

0002282c <_isatty>:
   2282c:	b570      	push	{r4, r5, r6, lr}
   2282e:	f7ff fe99 	bl	22564 <findslot>
   22832:	4605      	mov	r5, r0
   22834:	b190      	cbz	r0, 2285c <_isatty+0x30>
   22836:	2409      	movs	r4, #9
   22838:	4620      	mov	r0, r4
   2283a:	4629      	mov	r1, r5
   2283c:	beab      	bkpt	0x00ab
   2283e:	4604      	mov	r4, r0
   22840:	2c01      	cmp	r4, #1
   22842:	d009      	beq.n	22858 <_isatty+0x2c>
   22844:	f7fa feea 	bl	1d61c <__errno>
   22848:	2513      	movs	r5, #19
   2284a:	4606      	mov	r6, r0
   2284c:	2400      	movs	r4, #0
   2284e:	4628      	mov	r0, r5
   22850:	4621      	mov	r1, r4
   22852:	beab      	bkpt	0x00ab
   22854:	4605      	mov	r5, r0
   22856:	6035      	str	r5, [r6, #0]
   22858:	4620      	mov	r0, r4
   2285a:	bd70      	pop	{r4, r5, r6, pc}
   2285c:	f7fa fede 	bl	1d61c <__errno>
   22860:	2209      	movs	r2, #9
   22862:	462c      	mov	r4, r5
   22864:	6002      	str	r2, [r0, #0]
   22866:	e7f7      	b.n	22858 <_isatty+0x2c>

00022868 <_exit>:
   22868:	f04f 31ff 	mov.w	r1, #4294967295
   2286c:	f000 b800 	b.w	22870 <_kill>

00022870 <_kill>:
   22870:	2906      	cmp	r1, #6
   22872:	b530      	push	{r4, r5, lr}
   22874:	bf0c      	ite	eq
   22876:	4d04      	ldreq	r5, [pc, #16]	; (22888 <_kill+0x18>)
   22878:	4d04      	ldrne	r5, [pc, #16]	; (2288c <_kill+0x1c>)
   2287a:	2418      	movs	r4, #24
   2287c:	4620      	mov	r0, r4
   2287e:	4629      	mov	r1, r5
   22880:	beab      	bkpt	0x00ab
   22882:	4604      	mov	r4, r0
   22884:	4620      	mov	r0, r4
   22886:	bd30      	pop	{r4, r5, pc}
   22888:	00020023 	.word	0x00020023
   2288c:	00020026 	.word	0x00020026

00022890 <_init>:
   22890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22892:	bf00      	nop
   22894:	bcf8      	pop	{r3, r4, r5, r6, r7}
   22896:	bc08      	pop	{r3}
   22898:	469e      	mov	lr, r3
   2289a:	4770      	bx	lr

0002289c <_fini>:
   2289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2289e:	bf00      	nop
   228a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   228a2:	bc08      	pop	{r3}
   228a4:	469e      	mov	lr, r3
   228a6:	4770      	bx	lr

000228a8 <__init_array_start>:
   228a8:	000204d1 	.word	0x000204d1

000228ac <__frame_dummy_init_array_entry>:
   228ac:	00004289 00004d5d 000054bd 0000579d     .B..]M...T...W..
   228bc:	00007031 000087b9 0000a8bd 0000ab4d     1p..........M...
   228cc:	0000ad25 0000b851 0000c3e1 00010261     %...Q.......a...
   228dc:	000133e1                                .3..

000228e0 <__do_global_dtors_aux_fini_array_entry>:
   228e0:	00004265                                eB..

000228e4 <__fini_array_end>:
   228e4:	646e6148 	.word	0x646e6148
   228e8:	676e696c 	.word	0x676e696c
   228ec:	75616620 	.word	0x75616620
   228f0:	203a746c 	.word	0x203a746c
   228f4:	61656c63 	.word	0x61656c63
   228f8:	676e6972 	.word	0x676e6972
   228fc:	75616620 	.word	0x75616620
   22900:	2073746c 	.word	0x2073746c
   22904:	63207962 	.word	0x63207962
   22908:	696c6379 	.word	0x696c6379
   2290c:	6520676e 	.word	0x6520676e
   22910:	6c62616e 	.word	0x6c62616e
   22914:	69732065 	.word	0x69732065
   22918:	6c616e67 	.word	0x6c616e67
   2291c:	206f7420 	.word	0x206f7420
   22920:	6f746f6d 	.word	0x6f746f6d
   22924:	00002e72 	.word	0x00002e72
   22928:	65766f4d 	.word	0x65766f4d
   2292c:	6a657220 	.word	0x6a657220
   22930:	65746365 	.word	0x65746365
   22934:	69202c64 	.word	0x69202c64
   22938:	6c61766e 	.word	0x6c61766e
   2293c:	70206469 	.word	0x70206469
   22940:	7469736f 	.word	0x7469736f
   22944:	206e6f69 	.word	0x206e6f69
   22948:	75716572 	.word	0x75716572
   2294c:	65747365 	.word	0x65747365
   22950:	00000064 	.word	0x00000064
   22954:	6f746f4d 	.word	0x6f746f4d
   22958:	61662072 	.word	0x61662072
   2295c:	20746c75 	.word	0x20746c75
   22960:	65746564 	.word	0x65746564
   22964:	64657463 	.word	0x64657463
   22968:	6f4d202e 	.word	0x6f4d202e
   2296c:	63206576 	.word	0x63206576
   22970:	65636e61 	.word	0x65636e61
   22974:	2e64656c 	.word	0x2e64656c
   22978:	616e4520 	.word	0x616e4520
   2297c:	20656c62 	.word	0x20656c62
   22980:	6f747561 	.word	0x6f747561
   22984:	6974616d 	.word	0x6974616d
   22988:	61662063 	.word	0x61662063
   2298c:	20746c75 	.word	0x20746c75
   22990:	646e6168 	.word	0x646e6168
   22994:	676e696c 	.word	0x676e696c
   22998:	20796220 	.word	0x20796220
   2299c:	74746573 	.word	0x74746573
   229a0:	20676e69 	.word	0x20676e69
   229a4:	444e4148 	.word	0x444e4148
   229a8:	4d5f454c 	.word	0x4d5f454c
   229ac:	524f544f 	.word	0x524f544f
   229b0:	5541465f 	.word	0x5541465f
   229b4:	2053544c 	.word	0x2053544c
   229b8:	31206f74 	.word	0x31206f74
   229bc:	0000002e 	.word	0x0000002e
   229c0:	69766f4d 	.word	0x69766f4d
   229c4:	7420676e 	.word	0x7420676e
   229c8:	6f70206f 	.word	0x6f70206f
   229cc:	69746973 	.word	0x69746973
   229d0:	203a6e6f 	.word	0x203a6e6f
   229d4:	00000000 	.word	0x00000000
   229d8:	6f746f4d 	.word	0x6f746f4d
   229dc:	6e452072 	.word	0x6e452072
   229e0:	656c6261 	.word	0x656c6261
   229e4:	00000064 	.word	0x00000064
   229e8:	74696157 	.word	0x74696157
   229ec:	20676e69 	.word	0x20676e69
   229f0:	20726f66 	.word	0x20726f66
   229f4:	42464c48 	.word	0x42464c48
   229f8:	002e2e2e 	.word	0x002e2e2e
   229fc:	6f746f4d 	.word	0x6f746f4d
   22a00:	61662072 	.word	0x61662072
   22a04:	20746c75 	.word	0x20746c75
   22a08:	65746564 	.word	0x65746564
   22a0c:	64657463 	.word	0x64657463
   22a10:	0000002e 	.word	0x0000002e
   22a14:	62616e45 	.word	0x62616e45
   22a18:	6120656c 	.word	0x6120656c
   22a1c:	6d6f7475 	.word	0x6d6f7475
   22a20:	63697461 	.word	0x63697461
   22a24:	75616620 	.word	0x75616620
   22a28:	6820746c 	.word	0x6820746c
   22a2c:	6c646e61 	.word	0x6c646e61
   22a30:	20676e69 	.word	0x20676e69
   22a34:	73207962 	.word	0x73207962
   22a38:	69747465 	.word	0x69747465
   22a3c:	4820676e 	.word	0x4820676e
   22a40:	4c444e41 	.word	0x4c444e41
   22a44:	4f4d5f45 	.word	0x4f4d5f45
   22a48:	5f524f54 	.word	0x5f524f54
   22a4c:	4c554146 	.word	0x4c554146
   22a50:	74205354 	.word	0x74205354
   22a54:	2e31206f 	.word	0x2e31206f
   22a58:	00000000 	.word	0x00000000
   22a5c:	62616e45 	.word	0x62616e45
   22a60:	676e696c 	.word	0x676e696c
   22a64:	79616d20 	.word	0x79616d20
   22a68:	746f6e20 	.word	0x746f6e20
   22a6c:	76616820 	.word	0x76616820
   22a70:	6f632065 	.word	0x6f632065
   22a74:	656c706d 	.word	0x656c706d
   22a78:	20646574 	.word	0x20646574
   22a7c:	65207361 	.word	0x65207361
   22a80:	63657078 	.word	0x63657078
   22a84:	2e646574 	.word	0x2e646574
   22a88:	6f725020 	.word	0x6f725020
   22a8c:	64656563 	.word	0x64656563
   22a90:	74697720 	.word	0x74697720
   22a94:	61632068 	.word	0x61632068
   22a98:	6f697475 	.word	0x6f697475
   22a9c:	00002e6e 	.word	0x00002e6e
   22aa0:	6f746f4d 	.word	0x6f746f4d
   22aa4:	65522072 	.word	0x65522072
   22aa8:	00796461 	.word	0x00796461
   22aac:	00022b0c 	.word	0x00022b0c
   22ab0:	00022afc 	.word	0x00022afc
   22ab4:	00022adc 	.word	0x00022adc
   22ab8:	00022aec 	.word	0x00022aec

00022abc <_ZN9ClearCore10AdcManager21ADC_CHANNEL_MAX_FLOATE>:
   22abc:	42a1b333 41200000 40d33333 41200000     3..B.. A33.@.. A
   22acc:	41200000 41200000 41200000 41200000     .. A.. A.. A.. A

00022adc <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   22adc:	01010204 ff0bff00 ffffffff 00ffffff     ................

00022aec <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   22aec:	00000203 ff0aff00 ffffffff 00ffffff     ................

00022afc <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   22afc:	02020205 ff04ff00 ffffffff 00ffffff     ................

00022b0c <_ZN9ClearCoreL9_5VOB_MONE>:
   22b0c:	04040109 ff06ff00 ffffffff 00ffffff     ................

00022b1c <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   22b24:	00004db5 00004dc5 00004db9 00004dbd     .M...M...M...M..
   22b34:	00005019 00004dc1 00004da9 00004dad     .P...M...M...M..
   22b44:	00004eed 00004f65                       .N..eO..

00022b4c <_ZTVN9ClearCore9ConnectorE>:
	...
   22b54:	00005061 00013265 00013265 00013265     aP..e2..e2..e2..
   22b64:	00013265 00013265 00013265 00005065     e2..e2..e2..eP..
   22b74:	00013265 00013265                       e2..e2..

00022b7c <_ZTVN9ClearCore9DigitalInE>:
	...
   22b84:	0000506d 00005071 0000507d 00005081     mP..qP..}P...P..
   22b94:	00005089 00005085 00004da9 00004dad     .P...P...M...M..
   22ba4:	0000517d 000050b1                       }Q...P..

00022bac <CSWTCH.21>:
   22bac:	00000004 00000005 00000003 00000001     ................
   22bbc:	00000002                                ....

00022bc0 <CSWTCH.95>:
   22bc0:	02030406 00000002                       ........

00022bc8 <_ZN9ClearCoreL11tcc_modulesE>:
   22bc8:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22bd8:	43001000                                ...C

00022bdc <_ZTVN9ClearCore11MotorDriverE>:
	...
   22be4:	000057bd 000057c1 000057ad 000057b1     .W...W...W...W..
   22bf4:	00005089 00005085 000057b5 00004dad     .P...P...W...M..
   22c04:	00005eb1 000066e5 0000650d 00006605     .^...f...e...f..
   22c14:	00005925 ffffffd0 00000000 000065fd     %Y...........e..
   22c24:	000066dd 00005975                       .f..uY..

00022c2c <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22c2c:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22c3c:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022c4c <_ZTVN9ClearCore7ISerialE>:
	...
   22c54:	00013265 00013265 00013265 00013265     e2..e2..e2..e2..
   22c64:	00013265 00013265 00013265 00013265     e2..e2..e2..e2..
   22c74:	00013265 00013265 00013265 00013265     e2..e2..e2..e2..
   22c84:	00013265 00013265 00013265 00013265     e2..e2..e2..e2..
   22c94:	00013265 00013265                       e2..e2..

00022c9c <_ZTVN9ClearCore9SerialUsbE>:
	...
   22ca4:	00006a81 00006a75 00006a99 00006aa5     .j..uj...j...j..
   22cb4:	00006ab1 00006abd 00006ac9 00006ad5     .j...j...j...j..
   22cc4:	00006ae1 00006aed 00006af9 00006a81     .j...j...j...j..
   22cd4:	00006a8d 00006a8d 000069f9 00006a05     .j...j...i...j..
   22ce4:	00006a09 00006a15 00006a21 00006a2d     .j...j..!j..-j..
   22cf4:	00006a41 00006b05 00006b29 00006b59     Aj...k..)k..Yk..
   22d04:	00006a4d 00006a59 00006a69 fffffffc     Mj..Yj..ij......
   22d14:	00000000 00006a25 00006a39 00006a45     ....%j..9j..Ej..
   22d24:	00006b21 00006b51 00006b99 00006a51     !k..Qk...k..Qj..
   22d34:	00005065 00006a6d 00006a61 008061fc     eP..mj..aj...a..
   22d44:	00806010 00806014 00806018              .`...`...`..

00022d50 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22d58:	0001045d 0001046d 00011389 000106e5     ]...m...........
   22d68:	00010591 000087c9 00010481 000104b9     ................
   22d78:	000104f9 000104d5 000104e5 00010539     ............9...
   22d88:	00010455 000087d1 000107fd 000087cd     U...............
   22d98:	000109d1 000108ed                       ........

00022da0 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22da8:	0001045d 0001046d 00011389 000106e5     ]...m...........
   22db8:	00010591 000087c9 00010481 000104b9     ................
   22dc8:	000104f9 000104d5 000104e5 00010539     ............9...
   22dd8:	00010455 000087d1 000107fd 000087cd     U...............
   22de8:	000109d1 000108ed 40003c00 4101a000     .........<.@...A
   22df8:	43001400                                ...C

00022dfc <_ZN9ClearCore10hBridgeConE>:
   22dfc:	200014ac 20001530                       ... 0.. 

00022e04 <_ZN9ClearCore15MotorConnectorsE>:
   22e04:	20000ca0 20000de8 20000f30 20001078     ... ... 0.. x.. 

00022e14 <_ZN9ClearCoreL10ConnectorsE>:
   22e14:	20001320 2000138c 200013ec 2000144c      .. ... ... L.. 
   22e24:	200014ac 20001530 20001290 200012c0     ... 0.. ... ... 
   22e34:	200012f0 20000c5c 200011c4 20001208     ... \.. ... ... 
   22e44:	2000124c 200015b4 20000ca0 20000de8     L.. ... ... ... 
   22e54:	20000f30 20001078 20001714 2000186c     0.. x.. ... l.. 
   22e64:	200015c4                                ... 

00022e68 <_ZN9ClearCoreL10MicroSD_SSE>:
   22e68:	0504003d ffffff00 ffffffff 00ff0500     =...............

00022e78 <_ZN9ClearCoreL10XBee_Rx_INE>:
   22e78:	08180150 ffffff00 ffff0102 00ffffff     P...............

00022e88 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   22e88:	02120142 ffffff00 ffff0207 00040001     B...............

00022e98 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   22e98:	04140144 ffffff00 ffff0107 00060201     D...............

00022ea8 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   22ea8:	0a0a001c ffffff00 00010200 00040200     ................

00022eb8 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   22eb8:	0909001b ff03ff00 01000100 00ff0100     ................

00022ec8 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22ec8:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022ed8 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22ed8:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022ee8 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22ee8:	0212023a ffffff01 ffff0206 00ff0200     :...............

00022ef8 <_ZN9ClearCoreL11IN09n_AIN09E>:
   22ef8:	0707010e ff09ff01 ffffffff 00ffffff     ................

00022f08 <_ZN9ClearCoreL11IN10n_AIN10E>:
   22f08:	0606010d ff08ff01 ffffffff 00ffffff     ................

00022f18 <_ZN9ClearCoreL11IN11n_AIN11E>:
   22f18:	0505010a ff07ff01 ffffffff 00ffffff     ................

00022f28 <_ZN9ClearCoreL11IN12n_AIN12E>:
   22f28:	03030206 ff05ff01 ffffffff 00ffffff     ................

00022f38 <_ZN9ClearCoreL11MicroSD_SCKE>:
   22f38:	09090110 ff01ff00 01040104 00ffffff     ................

00022f48 <_ZN9ClearCoreL11XBee_CTS_INE>:
   22f48:	09190253 ffffff00 ffff0302 00ffffff     S...............

00022f58 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   22f58:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00022f68 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   22f68:	05150145 ffffff00 ffff0007 00070301     E...............

00022f78 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   22f78:	ff08001a ff02ff00 00000000 00ff0000     ................

00022f88 <_ZN9ClearCoreL12MicroSD_MISOE>:
   22f88:	0a0a0120 ffffff00 00050204 00040400      ...............

00022f98 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   22f98:	0808010f ff00ff00 00040004 00ffffff     ................

00022fa8 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   22fa8:	07170049 ffffff00 01040005 00ff0701     I...............

00022fb8 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   22fb8:	08180252 ffffff00 ffff0202 00ffffff     R...............

00022fc8 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   22fc8:	03130143 ffffff00 ffff0307 00050101     C...............

00022fd8 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   22fd8:	0b0b001d ffffff00 01010300 00050300     ................

00022fe8 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   22fe8:	05050012 01ffff00 0100ffff 00ffffff     ................

00022ff8 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   22ff8:	04140046 ffffff01 00070205 00ff0401     F...............

00023008 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   23008:	00100140 ffffff00 00060005 00020003     @...............

00023018 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   23018:	03030164 ffffff00 0106ffff 00ffffff     d...............

00023028 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   23028:	0e0e0124 ffffff00 00050204 00000004     $...............

00023038 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   23038:	0c0c0122 ffffff00 00040004 00060003     "...............

00023048 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   23048:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00023058 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   23058:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00023068 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   23068:	0f0f0125 ffffff00 01050304 00010104     %...............

00023078 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   23078:	0d0d0123 ffffff00 01040104 00070103     #...............

00023088 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   23088:	06160048 ffffff00 00040003 00ff0601     H...............

00023098 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   23098:	00100034 ffffff00 00020001 00020001     4...............

000230a8 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   230a8:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

000230b8 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   230b8:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

000230c8 <_ZN9ClearCoreL5IN01nE>:
   230c8:	02110107 00ffff00 ffffffff 00ffffff     ................

000230d8 <_ZN9ClearCoreL5IN02nE>:
   230d8:	03030008 ffffff00 ffffffff 00ffffff     ................

000230e8 <_ZN9ClearCoreL5IN03nE>:
   230e8:	04150211 ffffff00 0000ffff 00ffffff     ................

000230f8 <_ZN9ClearCoreL5IN04nE>:
   230f8:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

00023108 <_ZN9ClearCoreL5IN05nE>:
   23108:	0313023b ffffff00 ffff0306 00ff0300     ;...............

00023118 <_ZN9ClearCoreL5OUT00E>:
   23118:	00000001 ffffff00 0002ffff 00ffffff     ................

00023128 <_ZN9ClearCoreL5OUT01E>:
   23128:	01010002 ffffff00 0102ffff 00ffffff     ................

00023138 <_ZN9ClearCoreL5OUT02E>:
   23138:	06060013 ffffff00 0001ffff 00ffffff     ................

00023148 <_ZN9ClearCoreL5OUT03E>:
   23148:	07070014 ffffff00 0101ffff 00ffffff     ................

00023158 <_ZN9ClearCoreL6Aout00E>:
   23158:	02020007 01ffff00 0100ffff 00ffffff     ................

00023168 <_ZN9ClearCoreL6Mtr0_BE>:
   23168:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

00023178 <_ZN9ClearCoreL6Mtr1_BE>:
   23178:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00023188 <_ZN9ClearCoreL7Mtr1_AnE>:
   23188:	05150047 ffffff00 01070305 00ff0501     G...............

00023198 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   23198:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   231a8:	00000080 00000040 00000020 00000010     ....@... .......
   231b8:	00000008 00000004 01000000 02000000     ................
   231c8:	04000000 08000000 00800000 00400000     ..............@.
   231d8:	00200000 00004000 00008000 00040000     .. ..@..........
   231e8:	00080000                                ....

000231ec <_ZTVN9ClearCore13StepGeneratorE>:
	...
   231f4:	0000c3f1 0000c465 00013265              ....e...e2..

00023200 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23200:	00100238 ffffff01 ffff0006 00ff0000     8...............

00023210 <_ZN9ClearCoreL11IN07n_QuadBE>:
   23210:	01110239 ffffff01 ffff0106 00ff0100     9...............

00023220 <_ZN9ClearCoreL11IN08n_QuadIE>:
   23220:	0212023a ffffff01 ffff0206 00ff0200     :...............
   23230:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   23240:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   23250:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   23260:	2e747369 00000063                       ist.c...

00023268 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   23270:	0000e1bd 0000e3ed 0000e1c1 0000e1c5     ................
   23280:	0000e4e5 0000e501 0000e1b5 00004dad     .............M..
   23290:	0000e3d5 0000e59d                       ........

00023298 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   232a0:	0000e8ed 0000e9c1 0000e8f1 0000e8f5     ................
   232b0:	0000ee5d 0000e909 0000e1b5 00004dad     ]............M..
   232c0:	0000ec51 0000ee9d                       Q.......

000232c8 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   232c8:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   232d8:	42001400 42001800 43001400 43001800     ...B...B...C...C

000232e8 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   232f0:	00006ba1 0000f3a5 0000ef11 0000ef15     .k..............
   23300:	0000efd9 0000f015 0000e1b5 00004dad     .............M..
   23310:	0000f1c9 0000f2dd                       ........

00023318 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   23318:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   23328:	43001000                                ...C

0002332c <_ZTVN9ClearCore7CcioPinE>:
	...
   23334:	00010271 000102cd 00010275 00010279     q.......u...y...
   23344:	0001033d 00010399 00010379 00005065     =.......y...eP..
   23354:	00010289 0001028d                       ........

0002335c <_ZTVN9ClearCore10SerialBaseE>:
	...
   23364:	0001045d 0001046d 00011389 000106e5     ]...m...........
   23374:	00010591 000087c9 00010481 000104b9     ................
   23384:	000104f9 000104d5 000104e5 00010539     ............9...
   23394:	00010455 000087d1 000107fd 000087cd     U...............
   233a4:	000109d1 000108ed                       ........

000233ac <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   233ac:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   233bc:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000233cc <_ZTVN9ClearCore12SerialDriverE>:
	...
   233d4:	0001045d 0001046d 00011a59 00011aad     ]...m...Y.......
   233e4:	000118e9 000087c9 00010481 000104b9     ................
   233f4:	000104f9 000104d5 000104e5 00010539     ............9...
   23404:	00010455 000087d1 000107fd 000087cd     U...............
   23414:	000109d1 000108ed 0001183d 00011905     ........=.......
   23424:	0001184d 00011859 00011869 00011bf1     M...Y...i.......
   23434:	0001187d 00011af9 00011889 fffffebc     }...............
   23444:	00000000 00011845 00011a51 00011851     ....E...Q...Q...
   23454:	00011861 00011875 00011ca5 00011881     a...u...........
   23464:	00005065 0001188d 00011be9              eP..........

00023470 <_ZTVN9ClearCore9LedDriverE>:
	...
   23478:	00011cad 00011cb1 00011cbd 00011cc1     ................
   23488:	00011cd5 00011ced 00011cc5 00005065     ............eP..
   23498:	00011cc9 00011ccd                       ........

000234a0 <_usb_ep_cfgs>:
   234a0:	20001f44 00000000 00000040 20001f84     D.. ....@...... 
   234b0:	00000000 00000040 20001fc4 00000000     ....@...... ....
   234c0:	00000040                                @...

000234c4 <sinTable_q15>:
   234c4:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   234d4:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   234e4:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   234f4:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   23504:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   23514:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   23524:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   23534:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   23544:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   23554:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   23564:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   23574:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   23584:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   23594:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   235a4:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   235b4:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   235c4:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   235d4:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   235e4:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   235f4:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   23604:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   23614:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   23624:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   23634:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   23644:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   23654:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   23664:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   23674:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   23684:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   23694:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   236a4:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   236b4:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   236c4:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   236d4:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   236e4:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   236f4:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   23704:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   23714:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   23724:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   23734:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   23744:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   23754:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   23764:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   23774:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   23784:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   23794:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   237a4:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   237b4:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   237c4:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   237d4:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   237e4:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   237f4:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   23804:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   23814:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   23824:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   23834:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   23844:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   23854:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   23864:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   23874:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   23884:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   23894:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   238a4:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   238b4:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   238c4:	00000000 65727570 72697620 6c617574     ....pure virtual
   238d4:	74656d20 20646f68 6c6c6163 000a6465      method called..
   238e4:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

000238f4 <_ZTISt9bad_alloc>:
   238f4:	00023a14 00023900 00023954              .:...9..T9..

00023900 <_ZTSSt9bad_alloc>:
   23900:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023910 <_ZTVSt9bad_alloc>:
   23910:	00000000 000238f4 00013281 00013295     .....8...2...2..
   23920:	00013279 3a647473 6461623a 6378655f     y2..std::bad_exc
   23930:	69747065 00006e6f                       eption..

00023938 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23938:	00023a88 0002395c                       .:..\9..

00023940 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23940:	00023a88 0002397c                       .:..|9..

00023948 <_ZTISt13bad_exception>:
   23948:	00023a14 000239a0 00023954              .:...9..T9..

00023954 <_ZTISt9exception>:
   23954:	00023a88 000239b4                       .:...9..

0002395c <_ZTSN10__cxxabiv115__forced_unwindE>:
   2395c:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   2396c:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0002397c <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   2397c:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   2398c:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   2399c:	00456e6f                                onE.

000239a0 <_ZTSSt13bad_exception>:
   239a0:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   239b0:	0000006e                                n...

000239b4 <_ZTSSt9exception>:
   239b4:	65397453 70656378 6e6f6974 00000000     St9exception....

000239c4 <_ZTVSt13bad_exception>:
   239c4:	00000000 00023948 0001340d 00013419     ....H9...4...4..
   239d4:	00013411                                .4..

000239d8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   239d8:	00023a14 000239e4 00023a50              .:...9..P:..

000239e4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   239e4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   239f4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23a04:	456f666e 00000000                       nfoE....

00023a0c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23a0c:	00000000 000239d8 000135e1 000135f5     .....9...5...5..
   23a1c:	0001370d 0001370d 000137c9 0001373d     .7...7...7..=7..
   23a2c:	000136dd 0001364d 00013611              .6..M6...6..

00023a38 <_ZTISt9type_info>:
   23a38:	00023a88 00023a40                       .:..@:..

00023a40 <_ZTSSt9type_info>:
   23a40:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023a50 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23a50:	00023a14 00023a5c 00023a38              .:..\:..8:..

00023a5c <_ZTSN10__cxxabiv117__class_type_infoE>:
   23a5c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23a6c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23a7c:	00000045                                E...

00023a80 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23a80:	00000000 00023a50 00013781 00013795     ....P:...7...7..
   23a90:	0001370d 0001370d 000137c9 0001373d     .7...7...7..=7..
   23aa0:	000137b1 000137f5 00013775 6d726574     .7...7..u7..term
   23ab0:	74616e69 61632065 64656c6c 63657220     inate called rec
   23ac0:	69737275 796c6576 0000000a 6d726574     ursively....term
   23ad0:	74616e69 61632065 64656c6c 74666120     inate called aft
   23ae0:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23af0:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23b00:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23b10:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23b20:	69746361 65206576 70656378 6e6f6974     active exception
   23b30:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023b40 <standard_subs>:
   23b40:	00000074 00024324 00000003 00024324     t...$C......$C..
   23b50:	00000003 00000000 00000000 00000061     ............a...
   23b60:	00024638 0000000e 00024638 0000000e     8F......8F......
   23b70:	00024648 00000009 00000062 00024654     HF......b...TF..
   23b80:	00000011 00024654 00000011 00024668     ....TF......hF..
   23b90:	0000000c 00000073 00024678 0000000b     ....s...xF......
   23ba0:	00024684 00000046 00024668 0000000c     .F..F...hF......
   23bb0:	00000069 000246cc 0000000c 000246dc     i....F.......F..
   23bc0:	00000031 00024710 0000000d 0000006f     1....G......o...
   23bd0:	00024720 0000000c 00024730 00000031      G......0G..1...
   23be0:	00024764 0000000d 00000064 00024774     dG......d...tG..
   23bf0:	0000000d 00024784 00000032 000247b8     .....G..2....G..
   23c00:	0000000e                                ....

00023c04 <cplus_demangle_builtin_types>:
   23c04:	000249c8 0000000b 000249c8 0000000b     .I.......I......
   23c14:	00000000 000249d4 00000004 000249dc     .....I.......I..
   23c24:	00000007 00000007 000249e4 00000004     .........I......
   23c34:	000249ec 00000004 00000000 000249f4     .I...........I..
   23c44:	00000006 000249f4 00000006 00000008     .....I..........
   23c54:	000249fc 0000000b 000249fc 0000000b     .I.......I......
   23c64:	00000008 00024a08 00000005 00024a08     .....J.......J..
   23c74:	00000005 00000008 00024a10 0000000a     .........J......
   23c84:	00024a10 0000000a 00000008 00024a1c     .J...........J..
   23c94:	0000000d 00024a1c 0000000d 00000000     .....J..........
   23ca4:	00024a2c 00000003 00024a2c 00000003     ,J......,J......
   23cb4:	00000001 00024a30 0000000c 00024a40     ....0J......@J..
   23cc4:	00000008 00000002 00000000 00000000     ................
	...
   23ce0:	00024a4c 00000004 00024a4c 00000004     LJ......LJ......
   23cf0:	00000003 00024a54 0000000d 00024a54     ....TJ......TJ..
   23d00:	0000000d 00000004 00024a64 00000008     ........dJ......
   23d10:	00024a64 00000008 00000000 00024a70     dJ..........pJ..
   23d20:	00000011 00024a70 00000011 00000000     ....pJ..........
	...
   23d6c:	00024a84 00000005 00024a84 00000005     .J.......J......
   23d7c:	00000000 00024a8c 0000000e 00024a8c     .....J.......J..
   23d8c:	0000000e 00000000 00000000 00000000     ................
	...
   23da8:	00024a9c 00000004 00024a9c 00000004     .J.......J......
   23db8:	00000009 00024aa4 00000007 000249e4     .....J.......I..
   23dc8:	00000004 00000000 00024aac 00000009     .........J......
   23dd8:	00024a4c 00000004 00000005 00024ab8     LJ...........J..
   23de8:	00000012 00024ab8 00000012 00000006     .....J..........
   23df8:	000229f8 00000003 000229f8 00000003     .).......)......
   23e08:	00000000 00024acc 00000009 00024acc     .....J.......J..
   23e18:	00000009 00000000 00024ad8 00000009     .........J......
   23e28:	00024ad8 00000009 00000000 00024ae4     .J...........J..
   23e38:	0000000a 00024ae4 0000000a 00000000     .....J..........
   23e48:	00024af0 00000004 00024af0 00000004     .J.......J......
   23e58:	00000008 00024af8 00000008 00024af8     .....J.......J..
   23e68:	00000008 00000000 00024b04 00000008     .........K......
   23e78:	00024b04 00000008 00000000 00024b10     .K...........K..
   23e88:	00000011 00024b10 00000011 00000000     .....K..........

00023e98 <cplus_demangle_operators>:
   23e98:	000247c8 000247cc 00000002 00000002     .G...G..........
   23ea8:	000247d0 000247d4 00000001 00000002     .G...G..........
   23eb8:	000247d8 000245fc 00000002 00000002     .G...E..........
   23ec8:	000244f4 000247dc 00000001 00000001     .D...G..........
   23ed8:	000247e0 000247dc 00000001 00000002     .G...G..........
   23ee8:	000247e4 000247e8 00000008 00000001     .G...G..........
   23ef8:	000247f4 000247e8 00000008 00000001     .G...G..........
   23f08:	000247f8 000247fc 0000000a 00000002     .G...G..........
   23f18:	00024304 00024808 00000002 00000002     .C...H..........
   23f28:	0002480c 00024810 00000001 00000002     .H...H..........
   23f38:	00024814 00024818 00000001 00000001     .H...H..........
   23f48:	0002481c 00024820 00000002 00000002     .H.. H..........
   23f58:	00024824 00024828 00000009 00000001     $H..(H..........
   23f68:	00024834 00024838 0000000c 00000002     4H..8H..........
   23f78:	00024848 0002484c 00000001 00000001     HH..LH..........
   23f88:	00024850 00024854 00000007 00000001     PH..TH..........
   23f98:	0002485c 00024860 00000002 00000002     \H..`H..........
   23fa8:	00024308 00024990 00000001 00000002     .C...I..........
   23fb8:	00024864 00024868 00000001 00000002     dH..hH..........
   23fc8:	0002486c 00024870 00000002 00000002     lH..pH..........
   23fd8:	00024874 00024878 00000001 00000002     tH..xH..........
   23fe8:	0002487c 00024880 00000002 00000002     |H...H..........
   23ff8:	00024884 000229f8 00000003 00000003     .H...)..........
   24008:	00024888 000229f8 00000003 00000003     .H...)..........
   24018:	0002488c 000229f8 00000003 00000002     .H...)..........
   24028:	00024890 000229f8 00000003 00000002     .H...)..........
   24038:	00024894 00024898 00000002 00000002     .H...H..........
   24048:	000244f8 0002434c 00000002 00000001     .D..LC..........
   24058:	0002489c 0002470c 00000001 00000002     .H...G..........
   24068:	00024500 0002436c 00000002 00000002     .E..lC..........
   24078:	000248a0 000248a4 00000003 00000002     .H...H..........
   24088:	000249f8 000248a8 00000002 00000002     .I...H..........
   24098:	00024340 000248ac 0000000b 00000001     @C...H..........
   240a8:	000248b8 000248bc 00000002 00000002     .H...H..........
   240b8:	000248c0 000248c4 00000001 00000002     .H...H..........
   240c8:	000248c8 000248cc 00000002 00000002     .H...H..........
   240d8:	000248d0 000248d4 00000002 00000002     .H...H..........
   240e8:	000248d8 000248dc 00000001 00000002     .H...H..........
   240f8:	000248e0 0002484c 00000001 00000002     .H..LH..........
   24108:	000248e4 000248e8 00000002 00000001     .H...H..........
   24118:	000248ec 000248f0 00000005 00000003     .H...H..........
   24128:	000248f8 000248fc 00000002 00000002     .H...H..........
   24138:	00024ac8 000248dc 00000001 00000001     .J...H..........
   24148:	00024900 00024904 00000001 00000001     .I...I..........
   24158:	00024908 0002490c 00000003 00000003     .I...I..........
   24168:	00024910 00024914 00000002 00000002     .I...I..........
   24178:	00024918 0002491c 00000002 00000002     .I...I..........
   24188:	00024644 00024920 00000001 00000002     DF.. I..........
   24198:	00024924 00024928 00000002 00000002     $I..(I..........
   241a8:	0002492c 00024930 00000001 00000002     ,I..0I..........
   241b8:	00024934 00024938 00000003 00000002     4I..8I..........
   241c8:	0002493c 00024940 00000002 00000001     <I..@I..........
   241d8:	00024944 00024930 00000001 00000001     DI..0I..........
   241e8:	0002430c 00024948 00000002 00000002     .C..HI..........
   241f8:	00024310 0002494c 00000001 00000003     .C..LI..........
   24208:	00024950 00024954 00000002 00000002     PI..TI..........
   24218:	00024958 0002495c 00000003 00000002     XI..\I..........
   24228:	00024960 00024964 00000010 00000002     `I..dI..........
   24238:	00024978 0002497c 00000001 00000002     xI..|I..........
   24248:	00024980 00024984 00000002 00000002     .I...I..........
   24258:	00024300 00024988 00000009 00000001     .C...I..........
   24268:	000245c4 00024988 00000009 00000001     .E...I..........
   24278:	00024994 00024998 0000000b 00000002     .I...I..........
   24288:	00024804 000249a4 00000007 00000001     .H...I..........
   24298:	000249ac 000249a4 00000007 00000001     .I...I..........
   242a8:	000249b0 000249b4 00000005 00000000     .I...I..........
   242b8:	000249bc 000249c0 00000006 00000001     .I...I..........
	...
   242d8:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   242e8:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   242f8:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   24308:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   24318:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   24328:	6f747561 00000000 6c636564 65707974     auto....decltype
   24338:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   24348:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   24358:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   24368:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   24378:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   24388:	20726f66 00000000 736e6f63 63757274     for ....construc
   24398:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   243a8:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   243b8:	6f666e69 726f6620 00000020 65707974     info for ...type
   243c8:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   243d8:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   243e8:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   243f8:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   24408:	6e616972 65722074 6e727574 75687420     riant return thu
   24418:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   24428:	66207373 0020726f 72617567 61762064     ss for .guard va
   24438:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   24448:	74696e69 6e756620 6f697463 6f66206e     init function fo
   24458:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   24468:	636e7566 6e6f6974 726f6620 00000020     function for ...
   24478:	65666572 636e6572 65742065 726f706d     reference tempor
   24488:	20797261 00000023 64646968 61206e65     ary #...hidden a
   24498:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   244a8:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   244b8:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   244c8:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   244d8:	0000202c 7265706f 726f7461 00000000     , ..operator....
   244e8:	7265706f 726f7461 00000020 00006461     operator ...ad..
   244f8:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   24508:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   24518:	006c6c75 736c6166 00000065 65757274     ull.false...true
   24528:	00000000 6176616a 73657220 6372756f     ....java resourc
   24538:	00002065 6c636564 65707974 00002820     e ..decltype (..
   24548:	73696874 00000000 7261707b 0000236d     this....{parm#..
   24558:	626f6c67 63206c61 74736e6f 74637572     global construct
   24568:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   24578:	626f6c67 64206c61 72747365 6f746375     global destructo
   24588:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   24598:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   245a8:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   245b8:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   245c8:	73657220 63697274 00000074 6c6f7620      restrict... vol
   245d8:	6c697461 00000065 6e6f6320 00007473     atile... const..
   245e8:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   245f8:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   24608:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   24618:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   24628:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   24638:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   24648:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   24658:	7361623a 735f6369 6e697274 00000067     :basic_string...
   24668:	69736162 74735f63 676e6972 00000000     basic_string....
   24678:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   24688:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   24698:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   246a8:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   246b8:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   246c8:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   246d8:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   246e8:	65727473 633c6d61 2c726168 64747320     stream<char, std
   246f8:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   24708:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   24718:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   24728:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   24738:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   24748:	64747320 68633a3a 745f7261 74696172      std::char_trait
   24758:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   24768:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   24778:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   24788:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   24798:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   247a8:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   247b8:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   247c8:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   247d8:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   247e8:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   247f8:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24808:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24818:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24828:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   24838:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   24848:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   24858:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   24868:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   24878:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   24888:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   24898:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   248a8:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   248b8:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   248c8:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   248d8:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   248e8:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   248f8:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24908:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24918:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24928:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24938:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   24948:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   24958:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   24968:	70726574 5f746572 74736163 00000000     terpret_cast....
   24978:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   24988:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   24998:	74617473 635f6369 00747361 657a6973     static_cast.size
   249a8:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   249b8:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   249c8:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   249d8:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   249e8:	00000000 65747962 00000000 62756f64     ....byte....doub
   249f8:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24a08:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24a18:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24a28:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24a38:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24a48:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24a58:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24a68:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24a78:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24a88:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24a98:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24aa8:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24ab8:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24ac8:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24ad8:	69636564 366c616d 00000034 69636564     decimal64...deci
   24ae8:	316c616d 00003832 666c6168 00000000     mal128..half....
   24af8:	72616863 745f3631 00000000 72616863     char16_t....char
   24b08:	745f3233 00000000 6c636564 65707974     32_t....decltype
   24b18:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   24b28:	00000000 74727173 00000066 00000000     ....sqrtf.......

00024b38 <TWO52>:
   24b38:	00000000 43300000 00000000 c3300000     ......0C......0.

00024b48 <_global_impure_ptr>:
   24b48:	20000108 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   24b58:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   24b68:	46454443 00000000 33323130 37363534     CDEF....01234567
   24b78:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   24b88:	0000296c 00000030                       l)..0...

00024b90 <blanks.8346>:
   24b90:	20202020 20202020 20202020 20202020                     

00024ba0 <zeroes.8347>:
   24ba0:	30303030 30303030 30303030 30303030     0000000000000000
   24bb0:	33323130 37363534 62613938 66656463     0123456789abcdef
   24bc0:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24bd0:	7a797877 00000000 69666e49 7974696e     wxyz....Infinity
   24be0:	00000000 004e614e                       ....NaN.

00024be8 <__mprec_bigtens>:
   24be8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24bf8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24c08:	7f73bf3c 75154fdd                       <.s..O.u

00024c10 <__mprec_tens>:
   24c10:	00000000 3ff00000 00000000 40240000     .......?......$@
   24c20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24c30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24c40:	00000000 412e8480 00000000 416312d0     .......A......cA
   24c50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   24c60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   24c70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   24c80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   24c90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   24ca0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   24cb0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   24cc0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   24cd0:	79d99db4 44ea7843                       ...yCx.D

00024cd8 <p05.7178>:
   24cd8:	00000005 00000019 0000007d 00000043     ........}...C...
   24ce8:	49534f50 00000058                       POSIX...

00024cf0 <_ctype_>:
   24cf0:	20202000 20202020 28282020 20282828     .         ((((( 
   24d00:	20202020 20202020 20202020 20202020                     
   24d10:	10108820 10101010 10101010 10101010      ...............
   24d20:	04040410 04040404 10040404 10101010     ................
   24d30:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24d40:	01010101 01010101 01010101 10101010     ................
   24d50:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24d60:	02020202 02020202 02020202 10101010     ................
   24d70:	00000020 00000000 00000000 00000000      ...............
	...

00024df4 <__EH_FRAME_BEGIN__>:
   24df4:	00000000                                ....
